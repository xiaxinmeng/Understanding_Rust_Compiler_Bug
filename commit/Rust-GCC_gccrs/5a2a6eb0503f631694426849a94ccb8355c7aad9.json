{"sha": "5a2a6eb0503f631694426849a94ccb8355c7aad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyYTZlYjA1MDNmNjMxNjk0NDI2ODQ5YTk0Y2NiODM1NWM3YWFkOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-13T15:53:32Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-13T15:53:32Z"}, "message": "In gcc/objc/: 2010-11-13 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-11-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (objc_get_protocol_qualified_type): detect cases\n        where we are asked to attach a protocol to something which is not\n        an Objective-C object type, and produce an error.\n\nIn gcc/testsuite/:\n2010-11-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc/compile/20060406-1.m: Fixed testcase not to try to qualify\n        a pointer to an arbitrary C struct with an Objective-C protocol.\n        Test various valid uses of typedef with Objective-C objects and\n        protocols instead.\n        * objc.dg/invalid-type-1.m: New.\n        * obj-c++.dg/invalid-type-1.m: New.\n\nFrom-SVN: r166709", "tree": {"sha": "c667cb4ec1103e130eeb2173f6ac0768f8048e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c667cb4ec1103e130eeb2173f6ac0768f8048e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2a6eb0503f631694426849a94ccb8355c7aad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a6eb0503f631694426849a94ccb8355c7aad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2a6eb0503f631694426849a94ccb8355c7aad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a6eb0503f631694426849a94ccb8355c7aad9/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4286fd7aec2b44e77d2ca271c6a5aecf6bc753bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4286fd7aec2b44e77d2ca271c6a5aecf6bc753bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4286fd7aec2b44e77d2ca271c6a5aecf6bc753bb"}], "stats": {"total": 138, "additions": 131, "deletions": 7}, "files": [{"sha": "41bc7969a032f6cc682277fd4811e0ab203a22ca", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -1,3 +1,9 @@\n+2010-11-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_get_protocol_qualified_type): detect cases\n+\twhere we are asked to attach a protocol to something which is not\n+\tan Objective-C object type, and produce an error.\n+\n 2010-11-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_add_property_declaration): Check that the type"}, {"sha": "48b04ac9ef4c1058c3fba39bec91c3eb541ee246", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -2530,7 +2530,22 @@ objc_get_protocol_qualified_type (tree interface, tree protocols)\n \t\t  : xref_tag (RECORD_TYPE, type));\n \t}\n       else\n-        return interface;\n+\t{\n+\t  /* This case happens when we are given an 'interface' which\n+\t     is not a valid class name.  For example if a typedef was\n+\t     used, and 'interface' really is the identifier of the\n+\t     typedef, but when you resolve it you don't get an\n+\t     Objective-C class, but something else, such as 'int'.\n+\t     This is an error; protocols make no sense unless you use\n+\t     them with Objective-C objects.  */\n+\t  error_at (input_location, \"only Objective-C object types can be qualified with a protocol\");\n+\n+\t  /* Try to recover.  Ignore the invalid class name, and treat\n+\t     the object as an 'id' to silence further warnings about\n+\t     the class.  */\n+\t  type = objc_object_type;\n+\t  is_ptr = true;\n+\t}\n     }\n \n   if (protocols)"}, {"sha": "e0d8dba672ee4714eb68345d457df104b1cb258b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -1,3 +1,12 @@\n+2010-11-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/compile/20060406-1.m: Fixed testcase not to try to qualify\n+\ta pointer to an arbitrary C struct with an Objective-C protocol.\n+\tTest various valid uses of typedef with Objective-C objects and\n+\tprotocols instead.\n+\t* objc.dg/invalid-type-1.m: New.\n+\t* obj-c++.dg/invalid-type-1.m: New.\t\n+\t\n 2010-11-13  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* gcc.dg/darwin-segaddr.c: New test for multiple argument c/l switch.\n@@ -170,6 +179,7 @@\n \t* gfortran.dg/proc_decl_24.f90: New.\n \n 2010-11-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n \t* objc.dg/property/at-property-20.m: New.\n \t* objc.dg/property/synthesize-8.m: New.\t\n \t* obj-c++.dg/property/at-property-20.m: New."}, {"sha": "2d6ba68de1e6cf4fecc5b9bb2b3abcb555e57850", "filename": "gcc/testsuite/obj-c++.dg/invalid-type-1.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+typedef int Integer;\n+\n+@class MyClass;\n+\n+typedef MyClass AClass;\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+Class <MyProtocol> class_object; /* This is fine.  */\n+\n+id <MyProtocol> object; /* This is fine.  */\n+\n+AClass <MyProtocol> *object1; /* This is fine.  */\n+\n+Integer <MyProtocol> *object2; /* { dg-error \".Integer. is not a template\" } */\n+/* { dg-error \".MyProtocol. was not declared in this scope\" \"\" { target *-*-* } 21 } */\n+\n+Integer <NonExistingProtocol> *object3; /* { dg-error \".Integer. is not a template\" } */\n+/* { dg-error \".NonExistingProtocol. was not declared in this scope\" \"\" { target *-*-* } 24 } */"}, {"sha": "b8609f8c8310a0d308129791142b38deaba06c02", "filename": "gcc/testsuite/objc.dg/invalid-type-1.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-type-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-type-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-type-1.m?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -0,0 +1,24 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+#include <objc/objc.h>\n+\n+typedef int Integer;\n+\n+@class MyClass;\n+\n+typedef MyClass AClass;\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+Class <MyProtocol> class_object; /* This is fine.  */\n+\n+id <MyProtocol> object; /* This is fine.  */\n+\n+AClass <MyProtocol> *object1; /* This is fine.  */\n+\n+Integer <MyProtocol> *object2; /* { dg-error \"only Objective-C object types can be qualified with a protocol\" } */\n+\n+Integer <NonExistingProtocol> *object3; /* { dg-error \"only Objective-C object types can be qualified with a protocol\" } */\n+/* { dg-error \"cannot find protocol\" \"\" { target *-*-* } 23 } */"}, {"sha": "62148902ac4d63016627fe7137e79402defe78c2", "filename": "gcc/testsuite/objc/compile/20060406-1.m", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a6eb0503f631694426849a94ccb8355c7aad9/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2F20060406-1.m?ref=5a2a6eb0503f631694426849a94ccb8355c7aad9", "patch": "@@ -1,21 +1,65 @@\n-typedef struct\n-{\n-  void *p;\n-} *S;\n+/* This test tests typedefs and protocol qualifiers.  */\n \n @protocol O\n - (unsigned)j;\n @end\n \n+@interface T\n+@end\n+\n+\n+/* First test.  */\n+typedef T<O> *S;\n+\n @interface I\n-+ (unsigned char)T:(S<O>[2])p v:(S<O>)h;\n++ (unsigned char)T:(S[2])p\n+                 v:(S)h;\n @end\n \n @implementation I\n-+ (unsigned char)T:(S<O>[2])p v:(S<O>)h\n++ (unsigned char)T:(S[2])p\n+                 v:(S)h\n {\n   p[0] = (S) 0;\n   p[1] = (S) 0;\n   return 0;\n }\n @end\n+\n+\n+/* Second test.  */\n+typedef T<O> S1;\n+\n+@interface I1\n++ (unsigned char)T1:(S1*[2])p \n+                 v1:(S1*)h;\n+@end\n+\n+@implementation I1\n++ (unsigned char)T1:(S1*[2])p\n+                 v1:(S1*)h\n+{\n+  p[0] = (S1*) 0;\n+  p[1] = (S1*) 0;\n+  return 0;\n+}\n+@end\n+\n+\n+/* Third test.  */\n+typedef T S2;\n+\n+@interface I2\n++ (unsigned char)T1:(S2<O>*[2])p \n+                 v1:(S2<O>*)h;\n+@end\n+\n+@implementation I2\n++ (unsigned char)T1:(S2<O>*[2])p\n+                 v1:(S2<O>*)h\n+{\n+  p[0] = (S2<O>*) 0;\n+  p[1] = (S2<O>*) 0;\n+  return 0;\n+}\n+@end"}]}