{"sha": "a961ad1b13b9c294d4565344912b8e35ba71b369", "node_id": "C_kwDOANBUbNoAKGE5NjFhZDFiMTNiOWMyOTRkNDU2NTM0NDkxMmI4ZTM1YmE3MWIzNjk", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-09-04T19:04:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-07T14:47:49Z"}, "message": "c++: top level bind when rewriting coroutines [PR106188]\n\nIn the edge case of a coroutine not containing any locals, the ifcd/switch\ntemporaries would get added to the coroutine frame, corrupting its\nlayout. To prevent this, we can make sure there is always a BIND_EXPR at\nthe top of the function body, and thus, always a place for our new\ntemporaries to go without interfering with the coroutine frame.\n\nPR c++/106188 - Incorrect frame layout after transforming conditional statement without top-level bind expression\nPR c++/106713 - if (co_await ...) crashes with a jump to ud2\n\n\tPR c++/106188\n\tPR c++/106713\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_rewrite_function_body): Ensure we have a\n\tBIND_EXPR wrapping the function body.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr106188.C: New test.\n\nSigned-off-by: Arsen Arsenovi\u0107 <arsen@aarsen.me>", "tree": {"sha": "a6020fff5623328c808e7debb3a74d1f6f56e729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6020fff5623328c808e7debb3a74d1f6f56e729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a961ad1b13b9c294d4565344912b8e35ba71b369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a961ad1b13b9c294d4565344912b8e35ba71b369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a961ad1b13b9c294d4565344912b8e35ba71b369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a961ad1b13b9c294d4565344912b8e35ba71b369/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcc27c1ca9c485c66ac1914e352c79e5048b6b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcc27c1ca9c485c66ac1914e352c79e5048b6b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcc27c1ca9c485c66ac1914e352c79e5048b6b5"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "eca01abcb7a69f789a5c5f16abb8bede5b2f5b84", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961ad1b13b9c294d4565344912b8e35ba71b369/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961ad1b13b9c294d4565344912b8e35ba71b369/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=a961ad1b13b9c294d4565344912b8e35ba71b369", "patch": "@@ -4095,6 +4095,15 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n       BLOCK_SUPERCONTEXT (replace_blk) = top_block;\n       BLOCK_SUBBLOCKS (top_block) = replace_blk;\n     }\n+  else\n+    {\n+      /* We are missing a top level BIND_EXPR. We need one to ensure that we\n+\t don't shuffle around the coroutine frame and corrupt it.  */\n+      tree bind_wrap = build3_loc (fn_start, BIND_EXPR, void_type_node,\n+\t\t\t\t   NULL, NULL, NULL);\n+      BIND_EXPR_BODY (bind_wrap) = fnbody;\n+      fnbody = bind_wrap;\n+    }\n \n   /* Wrap the function body in a try {} catch (...) {} block, if exceptions\n      are enabled.  */"}, {"sha": "9db3778d0798be47e8d9d884effb2b1098b11579", "filename": "gcc/testsuite/g++.dg/coroutines/pr106188.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a961ad1b13b9c294d4565344912b8e35ba71b369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr106188.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a961ad1b13b9c294d4565344912b8e35ba71b369/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr106188.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr106188.C?ref=a961ad1b13b9c294d4565344912b8e35ba71b369", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target c++20 } }\n+// test case from pr106188, w/o workaround\n+#include <coroutine>\n+\n+struct task {\n+  struct promise_type {\n+    task get_return_object() { return task{}; }\n+    void return_void() {}\n+    void unhandled_exception() {}\n+    auto initial_suspend() noexcept { return std::suspend_never{}; }\n+    auto final_suspend() noexcept { return std::suspend_never{}; }\n+  };\n+};\n+\n+struct suspend_and_resume {\n+  bool await_ready() const { return false; }\n+  void await_suspend(std::coroutine_handle<> h) { h.resume(); }\n+  void await_resume() {}\n+};\n+\n+task f() {\n+  if (co_await suspend_and_resume{}, false) {}\n+}\n+\n+task g() {\n+  switch (co_await suspend_and_resume{}, 0) {\n+    default: break;\n+  }\n+}\n+\n+int main() {\n+  f();\n+  g();\n+}"}]}