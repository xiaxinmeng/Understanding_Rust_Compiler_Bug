{"sha": "ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkM2UyNmU0MmI4ZDU1OTg5Zjk5NjRjNmVjNmVlNTBiMzBiMTgwMg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-01T17:05:02Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-06-01T17:05:02Z"}, "message": "re PR fortran/63570 ([F2018] Implement 13.7.137 RANDOM INIT (REPEATABLE, IMAGE DISTINCT))\n\n2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/63570\n\t* check.c (gfc_check_random_init): New function. Check arguments of\n\tRANDOM_INIT.\n\t* gfortran.h (GFC_ISYM_RANDOM_INIT): New enum token.\n\t* intrinsic.c (add_subroutines): Add RANDOM_INIT to list of \n\tsubroutines.\n\t(gfc_check_intrinsic_standard): Introduce Fortran 2018 check.\n\t* intrinsic.h: Add prototypes for gfc_check_random_init and\n\tgfc_resolve_random_init\n\t* intrinsic.texi: Document new intrinsic subprogram.\n\t* iresolve.c (gfc_resolve_random_init): Resolve routine name.\n\t* trans-decl.c: Declare gfor_fndecl_random_init\n\t* trans-intrinsic.c (conv_intrinsic_random_init): New function.\n\tTranslate call to RANDOM_INIT.\n\t(gfc_conv_intrinsic_subroutine): Call it.\n \t* trans.h: Declare gfor_fndecl_random_init\n \n2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n\tPR fortran/63570\n\t* gfortran.dg/random_init_1.f90: New test.\n\t* gfortran.dg/random_init_2.f90: New test.\n\t* gfortran.dg/random_init_3.f90: New test.\n\t* gfortran.dg/random_init_4.f90: New test.\n\t* gfortran.dg/random_init_5.f90: New test.\n\t* gfortran.dg/random_init_6.f90: New test.\n\n2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/63570\n\t* libgfortran/Makefile.am: Add random_init.f90 to build.\n\t* libgfortran/Makefile.in: Regenerated.\n\t* libgfortran/gfortran.map: Expose symbol for _gfortran_random_init.\n\t* libgfortran/intrinsics/random_init.f90: Implementation.\n\nFrom-SVN: r261075", "tree": {"sha": "0bf61ebd5153e8a07d2e13d7f8dc20fc8dfbcfea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf61ebd5153e8a07d2e13d7f8dc20fc8dfbcfea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/comments", "author": null, "committer": null, "parents": [{"sha": "77b8fb05b3ae9223abb7bac05d8af6892cfa251a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b8fb05b3ae9223abb7bac05d8af6892cfa251a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b8fb05b3ae9223abb7bac05d8af6892cfa251a"}], "stats": {"total": 546, "additions": 541, "deletions": 5}, "files": [{"sha": "272a94eadc360b11f5c97c33cf1a09fc13952057", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -1,3 +1,22 @@\n+2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/63570\n+\t* check.c (gfc_check_random_init): New function. Check arguments of\n+\tRANDOM_INIT.\n+\t* gfortran.h (GFC_ISYM_RANDOM_INIT): New enum token.\n+\t* intrinsic.c (add_subroutines): Add RANDOM_INIT to list of \n+\tsubroutines.\n+\t(gfc_check_intrinsic_standard): Introduce Fortran 2018 check.\n+\t* intrinsic.h: Add prototypes for gfc_check_random_init and\n+\tgfc_resolve_random_init\n+\t* intrinsic.texi: Document new intrinsic subprogram.\n+\t* iresolve.c (gfc_resolve_random_init): Resolve routine name.\n+\t* trans-decl.c: Declare gfor_fndecl_random_init\n+\t* trans-intrinsic.c (conv_intrinsic_random_init): New function.\n+\tTranslate call to RANDOM_INIT.\n+\t(gfc_conv_intrinsic_subroutine): Call it.\n+ \t* trans.h: Declare gfor_fndecl_random_init\n+\n 2018-05-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* decl.c (match_data_constant):  Fortran 2018 allows pointer"}, {"sha": "30214fef4c7aa4ee8f88f5e746820c147d72cdc1", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -5786,6 +5786,27 @@ gfc_check_mvbits (gfc_expr *from, gfc_expr *frompos, gfc_expr *len,\n }\n \n \n+/* Check the arguments for RANDOM_INIT.  */\n+\n+bool\n+gfc_check_random_init (gfc_expr *repeatable, gfc_expr *image_distinct)\n+{\n+  if (!type_check (repeatable, 0, BT_LOGICAL))\n+    return false;\n+\n+  if (!scalar_check (repeatable, 0))\n+    return false;\n+\n+  if (!type_check (image_distinct, 1, BT_LOGICAL))\n+    return false;\n+\n+  if (!scalar_check (image_distinct, 1))\n+    return false;\n+\n+  return true;\n+}\n+\n+\n bool\n gfc_check_random_number (gfc_expr *harvest)\n {"}, {"sha": "b7eaa0e35abdaa2b225998323ada1d518d7be383", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -553,6 +553,7 @@ enum gfc_isym_id\n   GFC_ISYM_PRODUCT,\n   GFC_ISYM_RADIX,\n   GFC_ISYM_RAND,\n+  GFC_ISYM_RANDOM_INIT,\n   GFC_ISYM_RANDOM_NUMBER,\n   GFC_ISYM_RANDOM_SEED,\n   GFC_ISYM_RANGE,"}, {"sha": "609668613a70e25575d6bee2873cd8f0fe06455a", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -3568,6 +3568,12 @@ add_subroutines (void)\n       make_alias (\"kmvbits\", GFC_STD_GNU);\n     }\n \n+  add_sym_2s (\"random_init\", GFC_ISYM_RANDOM_INIT, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2018,\n+\t      gfc_check_random_init, NULL, gfc_resolve_random_init,\n+\t      \"repeatable\",     BT_LOGICAL, dl, REQUIRED, INTENT_IN,\n+\t      \"image_distinct\", BT_LOGICAL, dl, REQUIRED, INTENT_IN);\n+\n   add_sym_1s (\"random_number\", GFC_ISYM_RANDOM_NUMBER, CLASS_IMPURE,\n \t      BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,"}, {"sha": "7a957d392395fb8644fb9ac9820ee8bc75b9e0d4", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -205,6 +205,7 @@ bool gfc_check_getlog (gfc_expr *);\n bool gfc_check_move_alloc (gfc_expr *, gfc_expr *);\n bool gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t      gfc_expr *);\n+bool gfc_check_random_init (gfc_expr *, gfc_expr *);\n bool gfc_check_random_number (gfc_expr *);\n bool gfc_check_random_seed (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_dtime_etime_sub (gfc_expr *, gfc_expr *);\n@@ -653,6 +654,7 @@ void gfc_resolve_lstat_sub (gfc_code *);\n void gfc_resolve_ltime (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n void gfc_resolve_perror (gfc_code *);\n+void gfc_resolve_random_init (gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n void gfc_resolve_random_seed (gfc_code *);\n void gfc_resolve_rename_sub (gfc_code *);"}, {"sha": "ca006c96c5faa2cb5f17a4c8a5ec28565e43fc3f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -262,6 +262,7 @@ Some basic guidelines for editing this document:\n * @code{RADIX}:         RADIX,     Base of a data model\n * @code{RAN}:           RAN,       Real pseudo-random number\n * @code{RAND}:          RAND,      Real pseudo-random number\n+* @code{RANDOM_INIT}:   RANDOM_INIT, Initialize pseudo-random number generator\n * @code{RANDOM_NUMBER}: RANDOM_NUMBER, Pseudo-random number\n * @code{RANDOM_SEED}:   RANDOM_SEED, Initialize a pseudo-random number sequence\n * @code{RANGE}:         RANGE,     Decimal exponent range\n@@ -11598,6 +11599,60 @@ end program test_rand\n @end table\n \n \n+@node RANDOM_INIT\n+@section @code{RANDOM_INIT} --- Initialize a pseudo-random number generator\n+@fnindex RANDOM_INIT\n+@cindex random number generation, initialization\n+\n+@table @asis\n+@item @emph{Description}:\n+Initializes the state of the pseudorandom number generator used by \n+@code{RANDOM_NUMBER}.\n+\n+@item @emph{Standard}:\n+Fortran 2018\n+\n+@item @emph{Class}:\n+Subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL RANDOM_INIT(REPEATABLE, IMAGE_DISTINCT)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .20 .75\n+@item @var{REPEATABLE} @tab Shall be a scalar with a @code{LOGICAL} type,\n+and it is @code{INTENT(IN)}.  If it is @code{.true.}, the seed is set to\n+a processor-dependent value that is the same each time @code{RANDOM_INIT}\n+is called from the same image.  The term ``same image'' means a single\n+instance of program execution.  The sequence of random numbers is different\n+for repeated execution of the program.  If it is @code{.false.}, the seed\n+is set to a processor-dependent value.\n+@item @var{IMAGE_DISTINCT} @tab Shall be a scalar with a\n+@code{LOGICAL} type, and it is @code{INTENT(IN)}.  If it is @code{.true.},\n+the seed is set to a processor-dependent value that is distinct from th\n+seed set by a call to @code{RANDOM_INIT} in another image.  If it is\n+@code{.false.}, the seed is set value that does depend which image called\n+@code{RANDOM_INIT}.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_random_seed\n+  implicit none\n+  real x(3), y(3)\n+  call random_init(.true., .true.)\n+  call random_number(x)\n+  call random_init(.true., .true.)\n+  call random_number(y)\n+  ! x and y are the same sequence\n+  if (any(x /= y)) call abort\n+end program test_random_seed\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{RANDOM_NUMBER}, @ref{RANDOM_SEED}\n+@end table\n+\n \n @node RANDOM_NUMBER\n @section @code{RANDOM_NUMBER} --- Pseudo-random number\n@@ -11643,7 +11698,7 @@ end program\n @end smallexample\n \n @item @emph{See also}:\n-@ref{RANDOM_SEED}\n+@ref{RANDOM_SEED}, @ref{RANDOM_INIT}\n @end table\n \n \n@@ -11713,7 +11768,7 @@ end program test_random_seed\n @end smallexample\n \n @item @emph{See also}:\n-@ref{RANDOM_NUMBER}\n+@ref{RANDOM_NUMBER}, @ref{RANDOM_INIT}\n @end table\n \n "}, {"sha": "2eb8f7c9113124fc2af89bd61147cbe898f0c569", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -3404,6 +3404,17 @@ gfc_resolve_mvbits (gfc_code *c)\n }\n \n \n+/* Set up the call to RANDOM_INIT.  */ \n+\n+void\n+gfc_resolve_random_init (gfc_code *c)\n+{\n+  const char *name;\n+  name = gfc_get_string (PREFIX (\"random_init\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n void\n gfc_resolve_random_number (gfc_code *c)\n {"}, {"sha": "cd23c2d5eae4eab754fb9a5e606293f4fd959f62", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -229,6 +229,8 @@ tree gfor_fndecl_dgemm;\n tree gfor_fndecl_cgemm;\n tree gfor_fndecl_zgemm;\n \n+/* RANDOM_INIT function.  */\n+tree gfor_fndecl_random_init;\n \n static void\n gfc_add_decl_to_parent_function (tree decl)\n@@ -3328,6 +3330,11 @@ gfc_build_intrinsic_function_decls (void)\n \tvoid_type_node, 3, pchar_type_node, gfc_charlen_type_node,\n \tgfc_int8_type_node);\n \n+  gfor_fndecl_random_init = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"random_init\")),\n+\tvoid_type_node, 3, gfc_logical4_type_node, gfc_logical4_type_node,\n+\tgfc_int4_type_node);\n+\n   gfor_fndecl_sc_kind = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"selected_char_kind\")), \"..R\",\n \tgfc_int4_type_node, 2, gfc_charlen_type_node, pchar_type_node);"}, {"sha": "d306e3a5a6209c1621d91f99ffc366acecd9c3d0", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -3635,6 +3635,52 @@ conv_intrinsic_free (gfc_code *code)\n }\n \n \n+/* Call the RANDOM_INIT library subroutine with a hidden argument for\n+   handling seeding on coarray images.  */\n+\n+static tree\n+conv_intrinsic_random_init (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_se se;\n+  tree arg1, arg2, arg3, tmp;\n+  tree logical4_type_node = gfc_get_logical_type (4);\n+\n+  /* Make the function call.  */\n+  gfc_init_block (&block);\n+  gfc_init_se (&se, NULL);\n+\n+  /* Convert REPEATABLE to a LOGICAL(4) entity.  */\n+  gfc_conv_expr (&se, code->ext.actual->expr);\n+  gfc_add_block_to_block (&block, &se.pre);\n+  arg1 = fold_convert (logical4_type_node, gfc_evaluate_now (se.expr, &block));\n+  gfc_add_block_to_block (&block, &se.post);\n+\n+  /* Convert IMAGE_DISTINCT to a LOGICAL(4) entity.  */\n+  gfc_conv_expr (&se, code->ext.actual->next->expr);\n+  gfc_add_block_to_block (&block, &se.pre);\n+  arg2 = fold_convert (logical4_type_node, gfc_evaluate_now (se.expr, &block));\n+  gfc_add_block_to_block (&block, &se.post);\n+\n+  /* Create the hidden argument.  For non-coarray codes and -fcoarray=single,\n+     simply set this to 0.  For -fcoarray=lib, generate a call to \n+     THIS_IMAGE() without arguments.  */ \n+  arg3 = build_int_cst (gfc_get_int_type (4), 0);\n+  if (flag_coarray == GFC_FCOARRAY_LIB)\n+    {\n+      arg3 = build_call_expr_loc (input_location, gfor_fndecl_caf_this_image,\n+\t\t\t\t  1, arg3);\n+      se.expr = fold_convert (gfc_get_int_type (4), arg3);\n+    }\n+\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_random_init, 3,\n+\t\t\t     arg1, arg2, arg3);\n+  gfc_add_expr_to_block (&block, tmp);\n+ \n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Call the SYSTEM_CLOCK library functions, handling the type and kind\n    conversions.  */\n \n@@ -11064,6 +11110,10 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_intrinsic_free (code);\n       break;\n \n+    case GFC_ISYM_RANDOM_INIT:\n+      res = conv_intrinsic_random_init (code);\n+      break;\n+\n     case GFC_ISYM_KILL:\n       res = conv_intrinsic_kill_sub (code);\n       break;"}, {"sha": "049fcd6cd49eaa40fb986e3ac54c92b9e78e8396", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -915,6 +915,8 @@ extern GTY(()) tree gfor_fndecl_sr_kind;\n extern GTY(()) tree gfor_fndecl_ieee_procedure_entry;\n extern GTY(()) tree gfor_fndecl_ieee_procedure_exit;\n \n+/* RANDOM_INIT.  */\n+extern GTY(()) tree gfor_fndecl_random_init;\n \n /* True if node is an integer constant.  */\n #define INTEGER_CST_P(node) (TREE_CODE(node) == INTEGER_CST)"}, {"sha": "0ccd0ab2dd9ec164ed46b1d8367187bcac9fc193", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -1,3 +1,13 @@\n+2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+ \n+\tPR fortran/63570\n+\t* gfortran.dg/random_init_1.f90: New test.\n+\t* gfortran.dg/random_init_2.f90: New test.\n+\t* gfortran.dg/random_init_3.f90: New test.\n+\t* gfortran.dg/random_init_4.f90: New test.\n+\t* gfortran.dg/random_init_5.f90: New test.\n+\t* gfortran.dg/random_init_6.f90: New test.\n+\n 2018-06-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/85989"}, {"sha": "1de2f6ec527df09b0477fbbe73778b4041e61479", "filename": "gcc/testsuite/gfortran.dg/random_init_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_1.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile } \n+program foo\n+   logical a(2)\n+   real x\n+   call random_init(1., .false.) ! { dg-error \"must be LOGICAL\" }\n+   call random_init(.true., 1)   ! { dg-error \"must be LOGICAL\" }\n+   call random_number(x)\n+   a = .true.\n+   call random_init(a, .false.) ! { dg-error \"must be a scalar\" }\n+   call random_init(.false., a) ! { dg-error \"must be a scalar\" }\n+end program foo"}, {"sha": "dc7036009d387bf47e25875b28ee7104c4e74afe", "filename": "gcc/testsuite/gfortran.dg/random_init_2.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_2.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run } \n+program foo\n+\n+   real x(2), y(2)\n+\n+   call random_init(.false., .false.)\n+   call random_number(x)\n+!   print *, x\n+   x = int(1e6*x)\n+\n+   call random_init(.false., .false.)\n+   call random_number(y)\n+!   print *, y\n+   y = int(1e6*y)\n+\n+   if (any(x == y)) call abort\n+\n+   call random_init(.true., .false.)\n+   call random_number(x)\n+!   print *, x\n+   x = int(1e6*x)\n+\n+   call random_init(.true., .false.)\n+   call random_number(y)\n+!   print *, y\n+   y = int(1e6*y)\n+\n+   if (any(x /= y)) call abort   \n+\n+end program foo"}, {"sha": "2802dadb87613b4dca61e11e2c5b1a28c30f0922", "filename": "gcc/testsuite/gfortran.dg/random_init_3.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_3.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+program rantest\n+\n+   implicit none\n+\n+   logical, parameter :: debug = .false.\n+   character(len=20) name\n+   integer fd, i, n\n+   integer, allocatable :: n1(:), n2(:), n3(:)\n+   real x(4), y(4), z(4)\n+\n+   if (debug) then\n+      write(name,'(A,I0)') 'dat', this_image()\n+      open(newunit=fd, file=name)\n+   end if\n+\n+   call random_seed(size=n)\n+   allocate(n1(n), n2(n), n3(n))\n+   !\n+   ! Setup repeatable sequences (if co-arrays the seeds should be distinct\n+   ! are different).  Get the seeds.\n+   !\n+   call random_init(.true., .true.)\n+   call random_seed(get=n1)\n+   call random_number(x)               ! This changes internal state.\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'x = ', x\n+   end if\n+\n+   call random_seed(get=n2)            ! Grab current state. \n+   !\n+   ! Use the gotten seed to reseed PRNG and grab sequence.\n+   ! It should be the same sequence.\n+   !\n+   call random_seed(put=n1)\n+   call random_number(y)\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'y = ', y\n+   end if\n+   !\n+   ! Setup repeatable sequences (if co-arrays the seeds should be distinct\n+   ! are different).  Get the seeds.  It should be the same sequence.\n+   !\n+   call random_init(.true., .true.)\n+   call random_seed(get=n3)\n+   call random_number(z)\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'z = ', z\n+   end if\n+\n+   x = int(1e6*x) ! Convert to integer with at most 6 digits.\n+   y = int(1e6*y) ! Convert to integer with at most 6 digits.\n+   z = int(1e6*z) ! Convert to integer with at most 6 digits.\n+\n+   if (any(x /= y)) call abort\n+   if (any(x /= z)) call abort\n+\n+   if (debug) then\n+      write(fd,*)\n+      do i = 1, n\n+         if (n1(i) - n2(i) /= 0) then\n+            write(fd,*) 'n1 /= n2', i, n1(i), n2(i)\n+         end if\n+      end do\n+      write(fd,*)\n+      do i = 1, n\n+         if (n1(i) - n3(i) /= 0) then\n+            write(fd,*) 'n1 /= n3', i, n1(i), n3(i)\n+         end if\n+      end do\n+   end if\n+\n+end program rantest"}, {"sha": "b3a35f93fa181b14a45fd4d1ad904d0559a2869e", "filename": "gcc/testsuite/gfortran.dg/random_init_4.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_4.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+program rantest\n+\n+   implicit none\n+\n+   logical, parameter :: debug = .false.\n+   character(len=20) name\n+   integer fd, i, n\n+   integer, allocatable :: n1(:), n2(:), n3(:)\n+   real x(4), y(4), z(4)\n+\n+   if (debug) then\n+      write(name,'(A,I0)') 'dat', this_image()\n+      open(newunit=fd, file=name)\n+   end if\n+\n+   call random_seed(size=n)\n+   allocate(n1(n), n2(n), n3(n))\n+\n+   call random_init(.true., .false.)\n+   call random_seed(get=n1)\n+   call random_number(x)\n+\n+   call random_init(.true., .false.)\n+   call random_seed(get=n2)\n+   call random_number(y)\n+\n+   call random_init(.true., .false.)\n+   call random_seed(get=n3)\n+   call random_number(z)\n+\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'x = ', x\n+      write(fd,'(A,4F12.6)') 'y = ', y\n+      write(fd,'(A,4F12.6)') 'z = ', z\n+      write(fd,*)\n+      do i = 1, 5\n+         write(fd,'(I2,4I13)') i, n1(i), n2(i), n3(i)\n+      end do\n+   end if\n+\n+end program rantest"}, {"sha": "e9a200b14da7bc2ac8dfc970f097ba1b9a3693e8", "filename": "gcc/testsuite/gfortran.dg/random_init_5.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_5.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+program rantest\n+\n+   implicit none\n+\n+   logical, parameter :: debug = .false.\n+   character(len=20) name\n+   integer fd, i, n\n+   integer, allocatable :: n1(:), n2(:), n3(:)\n+   real x(4), y(4), z(4)\n+\n+   if (debug) then\n+      write(name,'(A,I0)') 'dat', this_image()\n+      open(newunit=fd, file=name)\n+   end if\n+\n+   call random_seed(size=n)\n+   allocate(n1(n), n2(n), n3(n))\n+\n+   call random_init(.false., .false.)\n+   call random_seed(get=n1)\n+   call random_number(x)\n+\n+   call random_init(.false., .false.)\n+   call random_seed(get=n2)\n+   call random_number(y)\n+\n+   call random_init(.false., .false.)\n+   call random_seed(get=n3)\n+   call random_number(z)\n+\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'x = ', x\n+      write(fd,'(A,4F12.6)') 'y = ', y\n+      write(fd,'(A,4F12.6)') 'z = ', z\n+      write(fd,*)\n+      do i = 1, 5\n+         write(fd,'(I2,4I13)') i, n1(i), n2(i), n3(i)\n+      end do\n+   end if\n+\n+end program rantest"}, {"sha": "e8d91d8accfa0dca55c2635d979b1028a8abe58a", "filename": "gcc/testsuite/gfortran.dg/random_init_6.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_init_6.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+program rantest\n+\n+   implicit none\n+\n+   logical, parameter :: debug = .false.\n+   character(len=20) name\n+   integer fd, i, n\n+   integer, allocatable :: n1(:), n2(:), n3(:)\n+   real x(4), y(4), z(4)\n+\n+   if (debug) then\n+      write(name,'(A,I0)') 'dat', this_image()\n+      open(newunit=fd, file=name)\n+   end if\n+\n+   call random_seed(size=n)\n+   allocate(n1(n), n2(n), n3(n))\n+\n+   call random_init(.false., .true.)\n+   call random_seed(get=n1)\n+   call random_number(x)\n+\n+   call random_init(.false., .true.)\n+   call random_seed(get=n2)\n+   call random_number(y)\n+\n+   call random_init(.false., .true.)\n+   call random_seed(get=n3)\n+   call random_number(z)\n+\n+   if (debug) then\n+      write(fd,'(A,4F12.6)') 'x = ', x\n+      write(fd,'(A,4F12.6)') 'y = ', y\n+      write(fd,'(A,4F12.6)') 'z = ', z\n+      write(fd,*)\n+      do i = 1, 5\n+         write(fd,'(I2,4I13)') i, n1(i), n2(i), n3(i)\n+      end do\n+   end if\n+\n+end program rantest"}, {"sha": "a220cc864b5cd5e193dfb681063d361b0ef7222e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -1,3 +1,11 @@\n+2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/63570\n+\t* libgfortran/Makefile.am: Add random_init.f90 to build.\n+\t* libgfortran/Makefile.in: Regenerated.\n+\t* libgfortran/gfortran.map: Expose symbol for _gfortran_random_init.\n+\t* libgfortran/intrinsics/random_init.f90: Implementation.\n+\n 2018-05-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/85840"}, {"sha": "5831631ddfbae48e52287720b9c7ccb01821ec3c", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -915,7 +915,8 @@ $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n $(gfor_misc_specifics) \\\n intrinsics/dprod_r8.f90 \\\n-intrinsics/f2c_specifics.F90\n+intrinsics/f2c_specifics.F90 \\\n+intrinsics/random_init.f90\n \n # Turn on vectorization and loop unrolling for matmul.\n $(patsubst %.c,%.lo,$(notdir $(i_matmul_c))): AM_CFLAGS += -ffast-math -ftree-vectorize -funroll-loops --param max-unroll-times=4"}, {"sha": "b66a91bfde39a1abfd931f3619f4be008ca32edc", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -408,7 +408,7 @@ am__objects_56 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_mod_r10.lo _mod_r16.lo\n am__objects_57 = misc_specifics.lo\n am__objects_58 = $(am__objects_55) $(am__objects_56) $(am__objects_57) \\\n-\tdprod_r8.lo f2c_specifics.lo\n+\tdprod_r8.lo f2c_specifics.lo random_init.lo\n am__objects_59 = $(am__objects_3) $(am__objects_47) $(am__objects_49) \\\n \t$(am__objects_52) $(am__objects_53) $(am__objects_54) \\\n \t$(am__objects_58)\n@@ -1374,7 +1374,8 @@ $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n $(gfor_misc_specifics) \\\n intrinsics/dprod_r8.f90 \\\n-intrinsics/f2c_specifics.F90\n+intrinsics/f2c_specifics.F90 \\\n+intrinsics/random_init.f90\n \n BUILT_SOURCES = $(gfor_built_src) $(gfor_built_specific_src) \\\n \t$(gfor_built_specific2_src) $(gfor_misc_specifics) \\\n@@ -6230,6 +6231,9 @@ selected_real_kind.lo: intrinsics/selected_real_kind.f90\n dprod_r8.lo: intrinsics/dprod_r8.f90\n \t$(LIBTOOL)  --tag=FC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(FC) $(AM_FCFLAGS) $(FCFLAGS) -c -o dprod_r8.lo `test -f 'intrinsics/dprod_r8.f90' || echo '$(srcdir)/'`intrinsics/dprod_r8.f90\n \n+random_init.lo: intrinsics/random_init.f90\n+\t$(LIBTOOL)  --tag=FC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(FC) $(AM_FCFLAGS) $(FCFLAGS) -c -o random_init.lo `test -f 'intrinsics/random_init.f90' || echo '$(srcdir)/'`intrinsics/random_init.f90\n+\n mostlyclean-libtool:\n \t-rm -f *.lo\n "}, {"sha": "78f8d7e97069082c88e21c254cb48e357c732cf6", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -799,6 +799,7 @@ GFORTRAN_8 {\n     _gfortran_product_r4;\n     _gfortran_product_r8;\n     _gfortran_rand;\n+    _gfortran_random_init;\n     _gfortran_random_r10;\n     _gfortran_random_r16;\n     _gfortran_random_r4;"}, {"sha": "edea0b89c4e4b3a4e751145aa9a48e772360228f", "filename": "libgfortran/intrinsics/random_init.f90", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2Fintrinsics%2Frandom_init.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd3e26e42b8d55989f9964c6ec6ee50b30b1802/libgfortran%2Fintrinsics%2Frandom_init.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom_init.f90?ref=ddd3e26e42b8d55989f9964c6ec6ee50b30b1802", "patch": "@@ -0,0 +1,94 @@\n+! Copyright (C) 2018 Free Software Foundation, Inc.\n+! Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+! \n+! This file is part of the GNU Fortran runtime library (libgfortran).\n+! \n+! Libgfortran is free software; you can redistribute it and/or\n+! modify it under the terms of the GNU General Public\n+! License as published by the Free Software Foundation; either\n+! version 3 of the License, or (at your option) any later version.\n+! \n+! Libgfortran is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+! \n+! Under Section 7 of GPL version 3, you are granted additional\n+! permissions described in the GCC Runtime Library Exception, version\n+! 3.1, as published by the Free Software Foundation.\n+! \n+! You should have received a copy of the GNU General Public License and\n+! a copy of the GCC Runtime Library Exception along with this program;\n+! see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+! <http://www.gnu.org/licenses/>.\n+!\n+!\n+! WARNING:  This file should never be compiled with an option that changes\n+! default logical kind from 4 to some other value or changes default integer\n+! kind from from 4 to some other value.\n+!\n+!\n+! There are four combinations of repeatable and image_distinct.  If a program\n+! is compiled without the -fcoarray= option or with -fcoarray=single, then\n+! execution of the compiled executable does not use image_distinct as it is\n+! irrelevant (although required).  The behavior is as follows:\n+!\n+! call random_init(.true., .true.)\n+!\n+! The sequence of random numbers is repeatable within an instance of program\n+! execution.  That is, calls to random_init(.true., .true.) during the\n+! execution will reset the sequence of RN to the same sequence.  If the\n+! program is compiled with -fcoarray=lib and multiple images are instantiated,\n+! then each image accesses a repeatable distinct sequence of random numbers.\n+! There are no guarantees that multiple execution of the program will access\n+! the same sequence.\n+!\n+! call random_init(.false., .false.)\n+! call random_init(.false., .true.)\n+!\n+! The sequence of random numbers is determined from process-dependent seeds.\n+! On each execution of the executable, different seeds will be used.  For\n+! -fcoarray=lib and multiple instantiated images, each image will use\n+! process-dependent seeds.  In other words, the two calls have identical\n+! behavior.\n+!\n+! call random_init(.true., .false.)\n+! \n+! For a program compiled without the -fcoarray= option or with\n+! -fcoarray=single, a single image is instantiated when the executable is\n+! run.  If the executable causes multiple images to be instantiated, then\n+! image_distinct=.false. in one image cannot affect the sequence of random\n+! numbers in another image.  As gfortran gives each image its own independent\n+! PRNG, this condition is automatically satisfied.\n+!\n+impure subroutine _gfortran_random_init(repeatable, image_distinct, hidden) \n+\n+   implicit none\n+\n+   logical, value, intent(in) :: repeatable\n+   logical, value, intent(in) :: image_distinct\n+   integer, value, intent(in) :: hidden\n+\n+   logical, save :: once = .true.\n+   integer :: nseed\n+   integer, save, allocatable :: seed(:)\n+\n+   if (once) then\n+      once = .false.\n+      call random_seed(size=nseed)\n+      allocate(seed(nseed))\n+      call random_seed(get=seed)\n+      !\n+      ! To guarantee that seed is distinct on multiple images, add the hidden\n+      ! argument (which is the image index).\n+      !\n+      if (image_distinct) seed = seed + hidden\n+   end if\n+\n+   if (repeatable) then\n+      call random_seed(put=seed);\n+   else\n+      call random_seed();\n+   end if\n+\n+end subroutine _gfortran_random_init"}]}