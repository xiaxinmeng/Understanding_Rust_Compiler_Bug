{"sha": "7b49e3dad8692b6a6a8e7d16914489525609f764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0OWUzZGFkODY5MmI2YTZhOGU3ZDE2OTE0NDg5NTI1NjA5Zjc2NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-06-23T15:10:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-06-23T15:10:00Z"}, "message": "Rename DEFAULT_ARG to DEFERRED_PARSE.\n\nFrom-SVN: r272600", "tree": {"sha": "f7f3e5dd04f9d19d52f5b559b5020c31eeaf6812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7f3e5dd04f9d19d52f5b559b5020c31eeaf6812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b49e3dad8692b6a6a8e7d16914489525609f764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b49e3dad8692b6a6a8e7d16914489525609f764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b49e3dad8692b6a6a8e7d16914489525609f764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b49e3dad8692b6a6a8e7d16914489525609f764/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35e2848f6d7ff08a3b38f056a9666ed4f290037d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e2848f6d7ff08a3b38f056a9666ed4f290037d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e2848f6d7ff08a3b38f056a9666ed4f290037d"}], "stats": {"total": 152, "additions": 100, "deletions": 52}, "files": [{"sha": "f47df489a3de76dd8fe98cef8778c0f505394924", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -1,3 +1,50 @@\n+2019-06-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.c (convert_default_arg): Use DEFERRED_PARSE instead of\n+\tDEFAULT_ARG.\n+\t* cp-objcp-common.c (cp_tree_size): Likewise.  Use tree_deferred_parse\n+\tinstead of tree_default_arg.\n+\t* cp-tree.def: Rename DEFAULT_ARG to DEFERRED_PARSE.\n+\t* cp-tree.h: Rename DEFARG_TOKENS to DEFPARSE_TOKENS.  Rename\n+\tDEFARG_INSTANTIATIONS to DEFPARSE_INSTANTIATIONS.  Rename\n+\ttree_default_arg to tree_deferred_parse.\n+\t(UNPARSED_NOEXCEPT_SPEC_P): Use DEFERRED_PARSE instead of DEFAULT_ARG.\n+\t(cp_tree_node_structure_enum): Rename TS_CP_DEFAULT_ARG to\n+\tTS_CP_DEFERRED_PARSE.\n+\t(lang_tree_node): Rename tree_default_arg to tree_deferred_parse.\n+\tRename default_arg to deferred_parse.  Use TS_CP_DEFERRED_PARSE instead\n+\tof TS_CP_DEFAULT_ARG.\n+\t(defarg_location): Remove declaration.\n+\t(defparse_location): Add declaration.\n+\t* decl.c (grokfndecl): Use DEFERRED_PARSE instead of DEFAULT_ARG.\n+\tCall defparse_location instead of defarg_location.\n+\t(check_default_argument): Use DEFERRED_PARSE instead of DEFAULT_ARG.\n+\t(cp_tree_node_structure): Likewise.  Use TS_CP_DEFERRED_PARSE instead\n+\tof TS_CP_DEFAULT_ARG.\n+\t* decl2.c (grokfield): Use DEFERRED_PARSE instead of DEFAULT_ARG.\n+\t* error.c (dump_expr): Likewise.\n+\t(location_of): Likewise.\n+\t* init.c (get_nsdmi): Likewise.\n+\t* parser.c (cp_parser_save_noexcept): Likewise.  Use DEFPARSE_TOKENS\n+\tinstead of DEFARG_TOKENS.\n+\t(cp_parser_late_noexcept_specifier): Likewise.\n+\t(cp_parser_late_parse_one_default_arg): Use DEFPARSE_TOKENS instead\n+\tof DEFARG_TOKENS.\n+\t(cp_parser_late_parsing_default_args): Use DEFERRED_PARSE instead of\n+\tDEFAULT_ARG.  Use DEFPARSE_INSTANTIATIONS instead of\n+\tDEFARG_INSTANTIATIONS.\n+\t(cp_parser_cache_defarg): Use DEFERRED_PARSE instead of DEFAULT_ARG.\n+\tUse DEFPARSE_TOKENS instead of DEFARG_TOKENS.  Use\n+\tDEFPARSE_INSTANTIATIONS instead of DEFARG_INSTANTIATIONS.\n+\t(defparse_location): Renamed from defarg_location.\n+\t* pt.c (tsubst_default_argument): Use DEFERRED_PARSE instead of\n+\tDEFAULT_ARG.\n+\t(tsubst_arg_types): Likewise.\n+\t(dependent_type_p_r): Likewise.\n+\t* tree.c (cp_tree_equal): Likewise.\n+\t(cp_walk_subtrees): Likewise.\n+\t* typeck.c (convert_arguments): Likewise.\n+\n 2019-06-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86476 - noexcept-specifier is a complete-class context."}, {"sha": "e4923f4ccbfde3a84f78a71cb26ae1166975c0da", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -7674,7 +7674,7 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum,\n \n   /* If the ARG is an unparsed default argument expression, the\n      conversion cannot be performed.  */\n-  if (TREE_CODE (arg) == DEFAULT_ARG)\n+  if (TREE_CODE (arg) == DEFERRED_PARSE)\n     {\n       if (complain & tf_error)\n \terror (\"call to %qD uses the default argument for parameter %P, which \""}, {"sha": "21d162e5d0ccf2c4556895ad123ce164a7c34c8f", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -67,7 +67,7 @@ cp_tree_size (enum tree_code code)\n     case PTRMEM_CST:\t\treturn sizeof (ptrmem_cst);\n     case BASELINK:\t\treturn sizeof (tree_baselink);\n     case TEMPLATE_PARM_INDEX:\treturn sizeof (template_parm_index);\n-    case DEFAULT_ARG:\t\treturn sizeof (tree_default_arg);\n+    case DEFERRED_PARSE:\treturn sizeof (tree_deferred_parse);\n     case DEFERRED_NOEXCEPT:\treturn sizeof (tree_deferred_noexcept);\n     case OVERLOAD:\t\treturn sizeof (tree_overload);\n     case STATIC_ASSERT:         return sizeof (tree_static_assert);"}, {"sha": "4db1d3161245a6ec0e74b12c89a8a4dd34e3e829", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -207,11 +207,11 @@ DEFTREECODE (USING_DECL, \"using_decl\", tcc_declaration, 0)\n /* A using directive. The operand is USING_STMT_NAMESPACE.  */\n DEFTREECODE (USING_STMT, \"using_stmt\", tcc_statement, 1)\n \n-/* An un-parsed default argument.  Holds a vector of input tokens and\n+/* An un-parsed operand.  Holds a vector of input tokens and\n    a vector of places where the argument was instantiated before\n-   parsing had occurred.  This is also used for delayed NSDMIs and\n-   noexcept-specifier parsing.  */\n-DEFTREECODE (DEFAULT_ARG, \"default_arg\", tcc_exceptional, 0)\n+   parsing had occurred.  This is used for default arguments, delayed\n+   NSDMIs, and noexcept-specifier parsing.  */\n+DEFTREECODE (DEFERRED_PARSE, \"deferred_parse\", tcc_exceptional, 0)\n \n /* An uninstantiated/unevaluated noexcept-specification.  For the\n    uninstantiated case, DEFERRED_NOEXCEPT_PATTERN is the pattern from the"}, {"sha": "bf47f67721e30df87dbe22802c22683d08adb70a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -1182,14 +1182,14 @@ enum cp_identifier_kind {\n #define C_TYPE_FIELDS_READONLY(TYPE) \\\n   (LANG_TYPE_CLASS_CHECK (TYPE)->fields_readonly)\n \n-/* The tokens stored in the default argument.  */\n+/* The tokens stored in the unparsed operand.  */\n \n-#define DEFARG_TOKENS(NODE) \\\n-  (((struct tree_default_arg *)DEFAULT_ARG_CHECK (NODE))->tokens)\n-#define DEFARG_INSTANTIATIONS(NODE) \\\n-  (((struct tree_default_arg *)DEFAULT_ARG_CHECK (NODE))->instantiations)\n+#define DEFPARSE_TOKENS(NODE) \\\n+  (((struct tree_deferred_parse *)DEFERRED_PARSE_CHECK (NODE))->tokens)\n+#define DEFPARSE_INSTANTIATIONS(NODE) \\\n+  (((struct tree_deferred_parse *)DEFERRED_PARSE_CHECK (NODE))->instantiations)\n \n-struct GTY (()) tree_default_arg {\n+struct GTY (()) tree_deferred_parse {\n   struct tree_base base;\n   struct cp_token_cache *tokens;\n   vec<tree, va_gc> *instantiations;\n@@ -1208,7 +1208,7 @@ struct GTY (()) tree_default_arg {\n    && DEFERRED_NOEXCEPT_PATTERN (TREE_PURPOSE (NODE)) == NULL_TREE)\n #define UNPARSED_NOEXCEPT_SPEC_P(NODE) \\\n   ((NODE) && (TREE_PURPOSE (NODE)) \\\n-   && (TREE_CODE (TREE_PURPOSE (NODE)) == DEFAULT_ARG))\n+   && (TREE_CODE (TREE_PURPOSE (NODE)) == DEFERRED_PARSE))\n \n struct GTY (()) tree_deferred_noexcept {\n   struct tree_base base;\n@@ -1589,7 +1589,7 @@ enum cp_tree_node_structure_enum {\n   TS_CP_OVERLOAD,\n   TS_CP_BASELINK,\n   TS_CP_TEMPLATE_DECL,\n-  TS_CP_DEFAULT_ARG,\n+  TS_CP_DEFERRED_PARSE,\n   TS_CP_DEFERRED_NOEXCEPT,\n   TS_CP_STATIC_ASSERT,\n   TS_CP_ARGUMENT_PACK_SELECT,\n@@ -1610,7 +1610,7 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n   struct tree_template_decl GTY ((tag (\"TS_CP_TEMPLATE_DECL\"))) template_decl;\n-  struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;\n+  struct tree_deferred_parse GTY ((tag (\"TS_CP_DEFERRED_PARSE\"))) deferred_parse;\n   struct tree_deferred_noexcept GTY ((tag (\"TS_CP_DEFERRED_NOEXCEPT\"))) deferred_noexcept;\n   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\n   struct tree_static_assert GTY ((tag (\"TS_CP_STATIC_ASSERT\"))) \n@@ -6704,7 +6704,7 @@ extern void cp_finish_omp_range_for (tree, tree);\n extern bool parsing_nsdmi (void);\n extern bool parsing_default_capturing_generic_lambda_in_template (void);\n extern void inject_this_parameter (tree, cp_cv_quals);\n-extern location_t defarg_location (tree);\n+extern location_t defparse_location (tree);\n extern void maybe_show_extern_c_location (void);\n extern bool literal_integer_zerop (const_tree);\n "}, {"sha": "5d49535b0d9ed9330b96cd4b50c5e10e9feb8e3e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -8963,9 +8963,9 @@ grokfndecl (tree ctype,\n \n \t  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))\n \t    if (TREE_PURPOSE (t)\n-\t\t&& TREE_CODE (TREE_PURPOSE (t)) == DEFAULT_ARG)\n+\t\t&& TREE_CODE (TREE_PURPOSE (t)) == DEFERRED_PARSE)\n \t    {\n-\t      error_at (defarg_location (TREE_PURPOSE (t)),\n+\t      error_at (defparse_location (TREE_PURPOSE (t)),\n \t\t\t\"default arguments are not allowed in declaration \"\n \t\t\t\"of friend template specialization %qD\",\n \t\t\tdecl);\n@@ -13089,8 +13089,8 @@ check_default_argument (tree decl, tree arg, tsubst_flags_t complain)\n   tree var;\n   tree decl_type;\n \n-  if (TREE_CODE (arg) == DEFAULT_ARG)\n-    /* We get a DEFAULT_ARG when looking at an in-class declaration\n+  if (TREE_CODE (arg) == DEFERRED_PARSE)\n+    /* We get a DEFERRED_PARSE when looking at an in-class declaration\n        with a default argument.  Ignore the argument for now; we'll\n        deal with it after the class is complete.  */\n     return arg;\n@@ -16661,7 +16661,7 @@ cp_tree_node_structure (union lang_tree_node * t)\n {\n   switch (TREE_CODE (&t->generic))\n     {\n-    case DEFAULT_ARG:\t\treturn TS_CP_DEFAULT_ARG;\n+    case DEFERRED_PARSE:\treturn TS_CP_DEFERRED_PARSE;\n     case DEFERRED_NOEXCEPT:\treturn TS_CP_DEFERRED_NOEXCEPT;\n     case IDENTIFIER_NODE:\treturn TS_CP_IDENTIFIER;\n     case OVERLOAD:\t\treturn TS_CP_OVERLOAD;"}, {"sha": "206f04c6320aef80c387974b7ed63c039ab836d6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -920,7 +920,7 @@ grokfield (const cp_declarator *declarator,\n \t\t  DECL_DECLARED_INLINE_P (value) = 1;\n \t\t}\n \t    }\n-\t  else if (TREE_CODE (init) == DEFAULT_ARG)\n+\t  else if (TREE_CODE (init) == DEFERRED_PARSE)\n \t    error (\"invalid initializer for member function %qD\", value);\n \t  else if (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE)\n \t    {"}, {"sha": "baeba7e17221b388db520af118576c277059ba57", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -2661,7 +2661,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n       dump_expr (pp, TREE_OPERAND (t, 0), flags);\n       break;\n \n-    case DEFAULT_ARG:\n+    case DEFERRED_PARSE:\n       pp_string (pp, M_(\"<unparsed>\"));\n       break;\n \n@@ -3050,8 +3050,8 @@ location_of (tree t)\n \n   if (DECL_P (t))\n     return DECL_SOURCE_LOCATION (t);\n-  if (TREE_CODE (t) == DEFAULT_ARG)\n-    return defarg_location (t);\n+  if (TREE_CODE (t) == DEFERRED_PARSE)\n+    return defparse_location (t);\n   return cp_expr_loc_or_loc (t, input_location);\n }\n "}, {"sha": "d0f73ff1938fd5809c82331c162a07c830956c7d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -564,7 +564,7 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n       location_t expr_loc\n \t= cp_expr_loc_or_loc (init, DECL_SOURCE_LOCATION (member));\n       tree *slot;\n-      if (TREE_CODE (init) == DEFAULT_ARG)\n+      if (TREE_CODE (init) == DEFERRED_PARSE)\n \t/* Unparsed.  */;\n       else if (nsdmi_inst && (slot = nsdmi_inst->get (member)))\n \tinit = *slot;\n@@ -629,7 +629,7 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n   else\n     init = DECL_INITIAL (member);\n \n-  if (init && TREE_CODE (init) == DEFAULT_ARG)\n+  if (init && TREE_CODE (init) == DEFERRED_PARSE)\n     {\n       if (complain & tf_error)\n \t{"}, {"sha": "e9bdfab443e756a04fef6816cb40bd1d7da61085", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -25267,7 +25267,7 @@ cp_parser_base_specifier (cp_parser* parser)\n /* Exception handling [gram.exception] */\n \n /* Save the tokens that make up the noexcept-specifier for a member-function.\n-   Returns a DEFAULT_ARG.  */\n+   Returns a DEFERRED_PARSE.  */\n \n static tree\n cp_parser_save_noexcept (cp_parser *parser)\n@@ -25277,12 +25277,12 @@ cp_parser_save_noexcept (cp_parser *parser)\n   cp_parser_cache_group (parser, CPP_CLOSE_PAREN, /*depth=*/0);\n   cp_token *last = parser->lexer->next_token;\n \n-  /* As with default arguments and NSDMIs, make use of DEFAULT_ARG\n+  /* As with default arguments and NSDMIs, make use of DEFERRED_PARSE\n      to carry the information we will need.  */\n-  tree expr = make_node (DEFAULT_ARG);\n+  tree expr = make_node (DEFERRED_PARSE);\n   /* Save away the noexcept-specifier; we will process it when the\n      class is complete.  */\n-  DEFARG_TOKENS (expr) = cp_token_cache_new (first, last);\n+  DEFPARSE_TOKENS (expr) = cp_token_cache_new (first, last);\n   expr = build_tree_list (expr, NULL_TREE);\n   return expr;\n }\n@@ -25295,13 +25295,13 @@ static tree\n cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg)\n {\n   /* Make sure we've gotten something that hasn't been parsed yet.  */\n-  gcc_assert (TREE_CODE (default_arg) == DEFAULT_ARG);\n+  gcc_assert (TREE_CODE (default_arg) == DEFERRED_PARSE);\n \n   push_unparsed_function_queues (parser);\n \n   /* Push the saved tokens for the noexcept-specifier onto the parser's\n      lexer stack.  */\n-  cp_token_cache *tokens = DEFARG_TOKENS (default_arg);\n+  cp_token_cache *tokens = DEFPARSE_TOKENS (default_arg);\n   cp_parser_push_lexer_for_tokens (parser, tokens);\n \n   /* Parse the cached noexcept-specifier.  */\n@@ -28718,7 +28718,7 @@ cp_parser_save_member_function_body (cp_parser* parser,\n }\n \n /* Save the tokens that make up the in-class initializer for a non-static\n-   data member.  Returns a DEFAULT_ARG.  */\n+   data member.  Returns a DEFERRED_PARSE.  */\n \n static tree\n cp_parser_save_nsdmi (cp_parser* parser)\n@@ -28955,7 +28955,7 @@ cp_parser_late_parse_one_default_arg (cp_parser *parser, tree decl,\n \n   /* Push the saved tokens for the default argument onto the parser's\n      lexer stack.  */\n-  tokens = DEFARG_TOKENS (default_arg);\n+  tokens = DEFPARSE_TOKENS (default_arg);\n   cp_parser_push_lexer_for_tokens (parser, tokens);\n \n   start_lambda_scope (decl);\n@@ -29022,7 +29022,7 @@ cp_parser_late_parsing_nsdmi (cp_parser *parser, tree field)\n }\n \n /* FN is a FUNCTION_DECL which may contains a parameter with an\n-   unparsed DEFAULT_ARG.  Parse the default args now.  This function\n+   unparsed DEFERRED_PARSE.  Parse the default args now.  This function\n    assumes that the current scope is the scope in which the default\n    argument should be processed.  */\n \n@@ -29060,7 +29060,7 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       if (!default_arg)\n \tcontinue;\n \n-      if (TREE_CODE (default_arg) != DEFAULT_ARG)\n+      if (TREE_CODE (default_arg) != DEFERRED_PARSE)\n \t/* This can happen for a friend declaration for a function\n \t   already declared with default arguments.  */\n \tcontinue;\n@@ -29072,7 +29072,7 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       TREE_PURPOSE (parm) = parsed_arg;\n \n       /* Update any instantiations we've already created.  */\n-      for (insts = DEFARG_INSTANTIATIONS (default_arg), ix = 0;\n+      for (insts = DEFPARSE_INSTANTIATIONS (default_arg), ix = 0;\n \t   vec_safe_iterate (insts, ix, &copy); ix++)\n \tTREE_PURPOSE (copy) = parsed_arg;\n     }\n@@ -30239,22 +30239,22 @@ cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)\n       token = cp_lexer_consume_token (parser->lexer);\n     }\n \n-  /* Create a DEFAULT_ARG to represent the unparsed default\n+  /* Create a DEFERRED_PARSE to represent the unparsed default\n      argument.  */\n-  default_argument = make_node (DEFAULT_ARG);\n-  DEFARG_TOKENS (default_argument)\n+  default_argument = make_node (DEFERRED_PARSE);\n+  DEFPARSE_TOKENS (default_argument)\n     = cp_token_cache_new (first_token, token);\n-  DEFARG_INSTANTIATIONS (default_argument) = NULL;\n+  DEFPARSE_INSTANTIATIONS (default_argument) = NULL;\n \n   return default_argument;\n }\n \n-/* A location to use for diagnostics about an unparsed DEFAULT_ARG.  */\n+/* A location to use for diagnostics about an unparsed DEFERRED_PARSE.  */\n \n location_t\n-defarg_location (tree default_argument)\n+defparse_location (tree default_argument)\n {\n-  cp_token_cache *tokens = DEFARG_TOKENS (default_argument);\n+  cp_token_cache *tokens = DEFPARSE_TOKENS (default_argument);\n   location_t start = tokens->first->location;\n   location_t end = tokens->last->location;\n   return make_location (start, start, end);"}, {"sha": "00e436429cef9c869fd409f56dc219972d302289", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -12814,7 +12814,7 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n   int errs = errorcount + sorrycount;\n \n   /* This can happen in invalid code.  */\n-  if (TREE_CODE (arg) == DEFAULT_ARG)\n+  if (TREE_CODE (arg) == DEFERRED_PARSE)\n     return arg;\n \n   tree parm = FUNCTION_FIRST_USER_PARM (fn);\n@@ -14092,15 +14092,16 @@ tsubst_arg_types (tree arg_types,\n       default_arg = tsubst_copy_and_build (default_arg, args, complain, in_decl,\n \t\t\t\t\t   false/*fn*/, false/*constexpr*/);\n \n-    if (default_arg && TREE_CODE (default_arg) == DEFAULT_ARG)\n+    if (default_arg && TREE_CODE (default_arg) == DEFERRED_PARSE)\n       {\n         /* We've instantiated a template before its default arguments\n            have been parsed.  This can happen for a nested template\n            class, and is not an error unless we require the default\n            argument in a call of this function.  */\n         remaining_arg_types = \n           tree_cons (default_arg, type, remaining_arg_types);\n-        vec_safe_push (DEFARG_INSTANTIATIONS(default_arg), remaining_arg_types);\n+\tvec_safe_push (DEFPARSE_INSTANTIATIONS (default_arg),\n+\t\t       remaining_arg_types);\n       }\n     else\n       remaining_arg_types = \n@@ -25315,7 +25316,7 @@ dependent_type_p_r (tree type)\n \t       affect overload resolution and treating it as dependent breaks\n \t       things.  Same for an unparsed noexcept expression.  */\n \t    if (TREE_CODE (noex) != DEFERRED_NOEXCEPT\n-\t\t&& TREE_CODE (noex) != DEFAULT_ARG\n+\t\t&& TREE_CODE (noex) != DEFERRED_PARSE\n \t\t&& value_dependent_expression_p (noex))\n \t      return true;\n       return false;"}, {"sha": "37e24a1669cc5a50b0413a678f9bae6b6271b147", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -3657,7 +3657,7 @@ cp_tree_equal (tree t1, tree t2)\n     case IDENTIFIER_NODE:\n     case SSA_NAME:\n     case USING_DECL:\n-    case DEFAULT_ARG:\n+    case DEFERRED_PARSE:\n       return false;\n \n     case BASELINK:\n@@ -4788,7 +4788,7 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n   result = NULL_TREE;\n   switch (code)\n     {\n-    case DEFAULT_ARG:\n+    case DEFERRED_PARSE:\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n     case UNBOUND_CLASS_TEMPLATE:"}, {"sha": "550064cf9fd6b4eb15ee9f3fe03c1ae3b597b766", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b49e3dad8692b6a6a8e7d16914489525609f764/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7b49e3dad8692b6a6a8e7d16914489525609f764", "patch": "@@ -4104,7 +4104,7 @@ convert_arguments (tree typelist, vec<tree, va_gc> **values, tree fndecl,\n \t provide default arguments in a language conformant\n \t manner.  */\n       if (fndecl && TREE_PURPOSE (typetail)\n-\t  && TREE_CODE (TREE_PURPOSE (typetail)) != DEFAULT_ARG)\n+\t  && TREE_CODE (TREE_PURPOSE (typetail)) != DEFERRED_PARSE)\n \t{\n \t  for (; typetail != void_list_node; ++i)\n \t    {"}]}