{"sha": "586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2MTk5ZjMwOTJkNmZmMWIwYmQxOGNjOWViMGExZjM2NTRkNDdjYg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-05-07T10:58:43Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-05-07T10:58:43Z"}, "message": "Add execution + assembler tests of AArch64 REV Neon Intrinsics.\n\n\t* gcc.target/aarch64/simd/vrev16p8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16p8.x: New file.\n\t* gcc.target/aarch64/simd/vrev16qp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16qp8.x: New file.\n\t* gcc.target/aarch64/simd/vrev16qs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16qs8.x: New file.\n\t* gcc.target/aarch64/simd/vrev16qu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16qu8.x: New file.\n\t* gcc.target/aarch64/simd/vrev16s8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16s8.x: New file.\n\t* gcc.target/aarch64/simd/vrev16u8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev16u8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32p16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32p16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32p8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32p8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qp16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qp8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qs16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qs16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qs8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qu16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32qu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32qu8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32s16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32s16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32s8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32s8.x: New file.\n\t* gcc.target/aarch64/simd/vrev32u16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32u16.x: New file.\n\t* gcc.target/aarch64/simd/vrev32u8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev32u8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64f32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64f32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64p16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64p16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64p8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64p8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qf32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qp16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qp8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qs16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qs16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qs32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qs32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qs8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qu16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qu32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64qu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64qu8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64s16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64s16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64s32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64s32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64s8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64s8.x: New file.\n\t* gcc.target/aarch64/simd/vrev64u16_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64u16.x: New file.\n\t* gcc.target/aarch64/simd/vrev64u32_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64u32.x: New file.\n\t* gcc.target/aarch64/simd/vrev64u8_1.c: New file.\n\t* gcc.target/aarch64/simd/vrev64u8.x: New file.\n\nFrom-SVN: r210153", "tree": {"sha": "af10afacb47688991845946ce3a0d342a0844b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af10afacb47688991845946ce3a0d342a0844b46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/comments", "author": null, "committer": null, "parents": [{"sha": "e0e906bc1412542eee3d98f369e3e4c7f12670db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e906bc1412542eee3d98f369e3e4c7f12670db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e906bc1412542eee3d98f369e3e4c7f12670db"}], "stats": {"total": 1227, "additions": 1227, "deletions": 0}, "files": [{"sha": "14e0e02fd99b09c1b5b443c1513ab3bef7f8707b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -1,3 +1,78 @@\n+2014-05-07  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vrev16p8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16p8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev16qp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16qp8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev16qs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16qs8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev16qu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16qu8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev16s8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16s8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev16u8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev16u8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32p16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32p16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32p8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32p8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qp16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qp8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qs16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qs16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qs8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qu16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32qu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32qu8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32s16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32s16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32s8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32s8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32u16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32u16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev32u8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev32u8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64f32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64f32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64p16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64p16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64p8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64p8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qf32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qp16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qp8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qs8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64qu8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64s16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64s16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64s32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64s32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64s8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64s8.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64u16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64u16.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64u32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64u32.x: New file.\n+\t* gcc.target/aarch64/simd/vrev64u8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vrev64u8.x: New file.\n+\n 2014-05-07  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tgcc.target/aarch64/simd/ext_f32.x: New file."}, {"sha": "6316abf45ed4456e5722d71ef87ba2aecbd40a6e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16p8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x8_t\n+test_vrev16p8 (poly8x8_t _arg)\n+{\n+  return vrev16_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8x8_t reversed = test_vrev16p8 (inorder);\n+  poly8x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "da6fc8d187bc0b0a957c4ad7aeedf05de9296771", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16p8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16p8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16p8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "318ea7cca650788733987d455791e4fc8dac54f3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qp8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x16_t\n+test_vrev16qp8 (poly8x16_t _arg)\n+{\n+  return vrev16q_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x16_t reversed = test_vrev16qp8 (inorder);\n+  poly8x16_t expected = {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "c553320126c6838ee2a7ecd15086205cded6aa9d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qp8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qp8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16q_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16qp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a7680f0de6007c0d0a5ed2434c99a897621110b7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qs8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x16_t\n+test_vrev16qs8 (int8x16_t _arg)\n+{\n+  return vrev16q_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x16_t reversed = test_vrev16qs8 (inorder);\n+  int8x16_t expected = {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "9e11c204c3402dd461b093bced17c4cbd70888dd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qs8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qs8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16q_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16qs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3550e864ef9718ed0a919f05977c0cfc7051a94a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qu8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x16_t\n+test_vrev16qu8 (uint8x16_t _arg)\n+{\n+  return vrev16q_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x16_t reversed = test_vrev16qu8 (inorder);\n+  uint8x16_t expected = {2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "33f7fc94aa2d362ee8c12eadab02b849f85e3713", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16qu8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16qu8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16q_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16qu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8b5996eddb565bf9887de243082be18e879553a5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16s8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x8_t\n+test_vrev16s8 (int8x8_t _arg)\n+{\n+  return vrev16_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8x8_t reversed = test_vrev16s8 (inorder);\n+  int8x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "de64c22f055c1a4165ac7792ac00f92600b5fb10", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16s8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16s8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16s8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e5c4912abf3a3e8dce626cd5e93dd3c42b271b0b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16u8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x8_t\n+test_vrev16u8 (uint8x8_t _arg)\n+{\n+  return vrev16_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8x8_t reversed = test_vrev16u8 (inorder);\n+  uint8x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "9f117eb4b1cb94cc17d4f572dd561adc6bd1b856", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev16u8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev16u8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev16_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev16u8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev16\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "257b5e5cae432bff19cd1cc37bdb9630b907b489", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32p16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly16x4_t\n+test_vrev32p16 (poly16x4_t _arg)\n+{\n+  return vrev32_p16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16x4_t inorder = {1, 2, 3, 4};\n+  poly16x4_t reversed = test_vrev32p16 (inorder);\n+  poly16x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "6184399486f8d6609c7eb3731527ca3b107d4c3c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32p16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32p16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4ccef82a01a7a7183aebad6517c8bb74bd92284d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32p8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x8_t\n+test_vrev32p8 (poly8x8_t _arg)\n+{\n+  return vrev32_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8x8_t reversed = test_vrev32p8 (inorder);\n+  poly8x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "05fb7f7ac958654de17d762246d36063d9519619", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32p8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32p8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32p8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6640992fe2e35578d8b1c15e6bf97b0b40cb48b2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qp16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly16x8_t\n+test_vrev32qp16 (poly16x8_t _arg)\n+{\n+  return vrev32q_p16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly16x8_t reversed = test_vrev32qp16 (inorder);\n+  poly16x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "5903a4667c67b420aef7806f7a40d439e9dda4a4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qp16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4cf6d0588b29d92b560b8800cc8980a2ad60156e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qp8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x16_t\n+test_vrev32qp8 (poly8x16_t _arg)\n+{\n+  return vrev32q_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x16_t reversed = test_vrev32qp8 (inorder);\n+  poly8x16_t expected = {4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 16, 15, 14, 13};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "9830a7436606b20738deffe5249e641c777ef54f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qp8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qp8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b9342cb3d828622775ac1e8a217a239cde7fa87d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qs16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int16x8_t\n+test_vrev32qs16 (int16x8_t _arg)\n+{\n+  return vrev32q_s16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int16x8_t reversed = test_vrev32qs16 (inorder);\n+  int16x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "075e5b0540f08cf89f4076fc6e6be51fe8a661a2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qs16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qs16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "012ef0e54f7a8c330f68ead62358e5bb4d5e705a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qs8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x16_t\n+test_vrev32qs8 (int8x16_t _arg)\n+{\n+  return vrev32q_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x16_t reversed = test_vrev32qs8 (inorder);\n+  int8x16_t expected = {4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 16, 15, 14, 13};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "03d77d77017cac95762994a2e358b2ef5fadee4c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qs8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qs8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8db7b839c6ad9e44d295d05e0b8c73d235241712", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qu16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint16x8_t\n+test_vrev32qu16 (uint16x8_t _arg)\n+{\n+  return vrev32q_u16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint16x8_t reversed = test_vrev32qu16 (inorder);\n+  uint16x8_t expected = {2, 1, 4, 3, 6, 5, 8, 7};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "5a022996eb195464f8d3ee6e96a5c821a356ce15", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qu16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a241af30ea3c2f4844089262cfb7470987034b8a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qu8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x16_t\n+test_vrev32qu8 (uint8x16_t _arg)\n+{\n+  return vrev32q_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x16_t reversed = test_vrev32qu8 (inorder);\n+  uint8x16_t expected = {4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 16, 15, 14, 13};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "d86030d087a00d257bf14cc0a3dbb3b76ba859cb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32qu8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32qu8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32q_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32qu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6cc30cd49172a6d47ef8068c7c6e742b77541e9c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32s16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int16x4_t\n+test_vrev32s16 (int16x4_t _arg)\n+{\n+  return vrev32_s16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16x4_t inorder = {1, 2, 3, 4};\n+  int16x4_t reversed = test_vrev32s16 (inorder);\n+  int16x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "badcb73d8590d36a5ce10aff81ea91bf4e4aaab9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32s16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32s16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "25b03979b70bdfeceeefa869a16b63ef451ee3d1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32s8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x8_t\n+test_vrev32s8 (int8x8_t _arg)\n+{\n+  return vrev32_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8x8_t reversed = test_vrev32s8 (inorder);\n+  int8x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "788601e93794521ba8992e7fb6bebd68927e4a40", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32s8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32s8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32s8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0e0df08036404d790bfc541b175ffc784142e599", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32u16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint16x4_t\n+test_vrev32u16 (uint16x4_t _arg)\n+{\n+  return vrev32_u16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16x4_t inorder = {1, 2, 3, 4};\n+  uint16x4_t reversed = test_vrev32u16 (inorder);\n+  uint16x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "ed722c2743bbdf44a895c6c7f870414db4f1f9d9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32u16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32u16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4de3e387a82500da6e5a6037009d38677bbfa91e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32u8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x8_t\n+test_vrev32u8 (uint8x8_t _arg)\n+{\n+  return vrev32_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8x8_t reversed = test_vrev32u8 (inorder);\n+  uint8x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "157e04fa466b60b2e9a3069ab8d36424073dc948", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev32u8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev32u8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev32_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev32u8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev32\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "94ec0cbbc63fa99ddf72e99e6ca2f3e5e85f9da4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64f32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+float32x2_t\n+test_vrev64f32 (float32x2_t _arg)\n+{\n+  return vrev64_f32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32x2_t inorder = {1, 2};\n+  float32x2_t reversed = test_vrev64f32 (inorder);\n+  float32x2_t expected = {2, 1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "2d61b342825334301a3c5de3cf64195484956ac0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64f32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64f32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64f32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.2s, ?v\\[0-9\\]+.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "43d7032da3c0a4ba9e976f54fa478eadc4b8e594", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64p16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly16x4_t\n+test_vrev64p16 (poly16x4_t _arg)\n+{\n+  return vrev64_p16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16x4_t inorder = {1, 2, 3, 4};\n+  poly16x4_t reversed = test_vrev64p16 (inorder);\n+  poly16x4_t expected = {4, 3, 2, 1};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "99a314da78c36b805c771c8d28a039538c4695b5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64p16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64p16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6d32ecc17e9f197000c6915e683e3df78100053c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64p8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x8_t\n+test_vrev64p8 (poly8x8_t _arg)\n+{\n+  return vrev64_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8x8_t reversed = test_vrev64p8 (inorder);\n+  poly8x8_t expected = {8, 7, 6, 5, 4, 3, 2, 1};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "e14465e3ea6c772315d3adc97ff8b6d6c9904e24", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64p8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64p8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64p8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "79146f005fcfd0b8d245a7b0466c0048eb118882", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qf32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+float32x4_t\n+test_vrev64qf32 (float32x4_t _arg)\n+{\n+  return vrev64q_f32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32x4_t inorder = {1, 2, 3, 4};\n+  float32x4_t reversed = test_vrev64qf32 (inorder);\n+  float32x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "a8690d3277859b5e2925920c09d74426d290ca26", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qf32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qf32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4s, ?v\\[0-9\\]+.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5bce38c8aaf9636782edcf877ee74e79160f5e6d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qp16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly16x8_t\n+test_vrev64qp16 (poly16x8_t _arg)\n+{\n+  return vrev64q_p16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly16x8_t reversed = test_vrev64qp16 (inorder);\n+  poly16x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "e234ffc09ca3d78309095f6ccb95b20b4419feed", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qp16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7e8faca06d54d1e468c759f5e375d39c2ab8326e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qp8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+poly8x16_t\n+test_vrev64qp8 (poly8x16_t _arg)\n+{\n+  return vrev64q_p8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x16_t reversed = test_vrev64qp8 (inorder);\n+  poly8x16_t expected = {8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "71a949ce3f3e60b7b96ddc2cb266fe7358e47585", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qp8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qp8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "97327278dec792fe941d4497a7dcf1b4efe52362", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int16x8_t\n+test_vrev64qs16 (int16x8_t _arg)\n+{\n+  return vrev64q_s16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int16x8_t reversed = test_vrev64qs16 (inorder);\n+  int16x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "12360b147fb566032ecaa73b23fd1c3768dcb8ec", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qs16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e35c46621cf5a951b946d619ee2784b438ba91dd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int32x4_t\n+test_vrev64qs32 (int32x4_t _arg)\n+{\n+  return vrev64q_s32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32x4_t inorder = {1, 2, 3, 4};\n+  int32x4_t reversed = test_vrev64qs32 (inorder);\n+  int32x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "8463c5d0abef8eeefcd0101a3532cb303adbe42e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qs32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4s, ?v\\[0-9\\]+.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a6189186867bef71d56423ed417bc3e49506a7ff", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x16_t\n+test_vrev64qs8 (int8x16_t _arg)\n+{\n+  return vrev64q_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x16_t reversed = test_vrev64qs8 (inorder);\n+  int8x16_t expected = {8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "53416aa819a38df00ee08cc4c2fb861e8632b49e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qs8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qs8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "db82eb5604a32701fc0e57cbb79977f33d143a80", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint16x8_t\n+test_vrev64qu16 (uint16x8_t _arg)\n+{\n+  return vrev64q_u16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint16x8_t reversed = test_vrev64qu16 (inorder);\n+  uint16x8_t expected = {4, 3, 2, 1, 8, 7, 6, 5};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "864135398590eb9325cd573db81e1163c104dab5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8h, ?v\\[0-9\\]+.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c02149323b9584d4e7927ba31b86c37fe60d8ff7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint32x4_t\n+test_vrev64qu32 (uint32x4_t _arg)\n+{\n+  return vrev64q_u32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32x4_t inorder = {1, 2, 3, 4};\n+  uint32x4_t reversed = test_vrev64qu32 (inorder);\n+  uint32x4_t expected = {2, 1, 4, 3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "b03478051741c7dfeabadfd5c4fa063d1f349918", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4s, ?v\\[0-9\\]+.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f239ec63e688fb816a88578a91688ddcb59c774e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x16_t\n+test_vrev64qu8 (uint8x16_t _arg)\n+{\n+  return vrev64q_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x16_t inorder = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x16_t reversed = test_vrev64qu8 (inorder);\n+  uint8x16_t expected = {8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9};\n+\n+  for (i = 0; i < 16; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "77e19ed24180afbee5ab6a8e0fa21ea9e6e37a28", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64qu8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64qu8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64q_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64qu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.16b, ?v\\[0-9\\]+.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6593880ed0d8a9fba9ec57a069c9f629be311ca8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int16x4_t\n+test_vrev64s16 (int16x4_t _arg)\n+{\n+  return vrev64_s16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16x4_t inorder = {1, 2, 3, 4};\n+  int16x4_t reversed = test_vrev64s16 (inorder);\n+  int16x4_t expected = {4, 3, 2, 1};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "d2483ca8ad3c3d9ffb8751b8624110bcae579a64", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64s16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "25a6bc1dab3a0fad09f91b8f1404eb2aad812603", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int32x2_t\n+test_vrev64s32 (int32x2_t _arg)\n+{\n+  return vrev64_s32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32x2_t inorder = {1, 2};\n+  int32x2_t reversed = test_vrev64s32 (inorder);\n+  int32x2_t expected = {2, 1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "52546298c90d767493307bd14eff0a70a95395cf", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64s32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.2s, ?v\\[0-9\\]+.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4c23953a073a20db74e2be190c09a6759a75d7bd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int8x8_t\n+test_vrev64s8 (int8x8_t _arg)\n+{\n+  return vrev64_s8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8x8_t reversed = test_vrev64s8 (inorder);\n+  int8x8_t expected = {8, 7, 6, 5, 4, 3, 2, 1};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "96bf1fade98efcefd10cc9d2c111caa86d358f34", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64s8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64s8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64s8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "49f20d7e0427ff57a4fc4e557d5d026f40cd3121", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u16.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint16x4_t\n+test_vrev64u16 (uint16x4_t _arg)\n+{\n+  return vrev64_u16 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16x4_t inorder = {1, 2, 3, 4};\n+  uint16x4_t reversed = test_vrev64u16 (inorder);\n+  uint16x4_t expected = {4, 3, 2, 1};\n+\n+  for (i = 0; i < 4; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "7408d765bd30c0b2e10b93ca4b3b24d9b0424418", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u16_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64u16.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.4h, ?v\\[0-9\\]+.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7ec06541d539f5c3064a860fe9423bd29e3b32aa", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u32.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint32x2_t\n+test_vrev64u32 (uint32x2_t _arg)\n+{\n+  return vrev64_u32 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32x2_t inorder = {1, 2};\n+  uint32x2_t reversed = test_vrev64u32 (inorder);\n+  uint32x2_t expected = {2, 1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "be64c974b3a885f6db8614b365ebcdf4d48ae1dc", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u32_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64u32.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.2s, ?v\\[0-9\\]+.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "dc6dbd1b54699e79335b6414865d7e6b8ed6acfb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u8.x", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8.x?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+uint8x8_t\n+test_vrev64u8 (uint8x8_t _arg)\n+{\n+  return vrev64_u8 (_arg);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8x8_t inorder = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8x8_t reversed = test_vrev64u8 (inorder);\n+  uint8x8_t expected = {8, 7, 6, 5, 4, 3, 2, 1};\n+\n+  for (i = 0; i < 8; i++)\n+    if (reversed[i] != expected[i])\n+      abort ();\n+  return 0;\n+}\n+"}, {"sha": "ffbc98f0fffdf073d366c8a78f63956d706c0d72", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrev64u8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrev64u8_1.c?ref=586199f3092d6ff1b0bd18cc9eb0a1f3654d47cb", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vrev64_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vrev64u8.x\"\n+\n+/* { dg-final { scan-assembler-times \"rev64\\[ \\t\\]+v\\[0-9\\]+.8b, ?v\\[0-9\\]+.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}