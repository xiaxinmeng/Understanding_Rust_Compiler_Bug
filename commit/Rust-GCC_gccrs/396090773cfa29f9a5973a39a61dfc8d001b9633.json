{"sha": "396090773cfa29f9a5973a39a61dfc8d001b9633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2MDkwNzczY2ZhMjlmOWE1OTczYTM5YTYxZGZjOGQwMDFiOTYzMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-02-19T02:35:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-02-19T02:35:25Z"}, "message": "re PR libstdc++/10606 (uncaught_exception() returns false too early)\n\n        PR libstdc++/10606\ngcc/cp/\n        * except.c (do_get_exception_ptr): New.\n        (expand_start_catch_block): Use it.\nlibstdc++/\n        * config/linker-map.gnu (CXXABI_1.3.1): Add __cxa_get_exception_ptr.\n        * libsupc++/eh_alloc.cc (__cxa_allocate_exception): Increment\n        uncaughtExceptions here instead of ...\n        * libsupc++/eh_throw.cc (__cxa_throw) ... here.\n        (__cxa_rethrow): Increment uncaughtExceptions here instead of ...\n        * libsupc++/eh_catch.cc (__cxa_end_catch): ... here.\n        (__cxa_get_exception_ptr): New.\n        * libsupc++/unwind-cxx.h (__cxa_get_exception_ptr): Declare.\n\nFrom-SVN: r95262", "tree": {"sha": "020d4a99713b8ea013495d485fc2c96d2a5d328e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020d4a99713b8ea013495d485fc2c96d2a5d328e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396090773cfa29f9a5973a39a61dfc8d001b9633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396090773cfa29f9a5973a39a61dfc8d001b9633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396090773cfa29f9a5973a39a61dfc8d001b9633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396090773cfa29f9a5973a39a61dfc8d001b9633/comments", "author": null, "committer": null, "parents": [{"sha": "5ff489f15bb5916615fbac14fe7fc843d32a6054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff489f15bb5916615fbac14fe7fc843d32a6054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ff489f15bb5916615fbac14fe7fc843d32a6054"}], "stats": {"total": 226, "additions": 185, "deletions": 41}, "files": [{"sha": "62e7a43ee37a5e37e6c3ab777628c50e25a75548", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -1,3 +1,9 @@\n+2005-02-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR libstdc++/10606\n+\t* except.c (do_get_exception_ptr): New.\n+\t(expand_start_catch_block): Use it.\n+\n 2005-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (start_decl_1): Only check TYPE_NEEDS_CONSTRUCTING"}, {"sha": "ef4fb2193b51d11650eb6bb7a678c7bf545c3588", "filename": "gcc/cp/except.c", "status": "modified", "additions": 58, "deletions": 34, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -153,6 +153,26 @@ build_exc_ptr (void)\n   return build0 (EXC_PTR_EXPR, ptr_type_node);\n }\n \n+/* Build up a call to __cxa_get_exception_ptr so that we can build a\n+   copy constructor for the thrown object.  */\n+\n+static tree\n+do_get_exception_ptr (void)\n+{\n+  tree fn;\n+\n+  fn = get_identifier (\"__cxa_get_exception_ptr\");\n+  if (!get_global_value_if_present (fn, &fn))\n+    {\n+      /* Declare void* __cxa_get_exception_ptr (void *).  */\n+      tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+      fn = push_library_fn (fn, build_function_type (ptr_type_node, tmp));\n+    }\n+\n+  return build_function_call (fn, tree_cons (NULL_TREE, build_exc_ptr (),\n+\t\t\t\t\t     NULL_TREE));\n+}\n+\n /* Build up a call to __cxa_begin_catch, to tell the runtime that the\n    exception has been handled.  */\n \n@@ -381,9 +401,8 @@ initialize_handler_parm (tree decl, tree exp)\n tree\n expand_start_catch_block (tree decl)\n {\n-  tree exp = NULL_TREE;\n+  tree exp;\n   tree type;\n-  bool is_java;\n \n   if (! doing_eh (1))\n     return NULL_TREE;\n@@ -397,45 +416,50 @@ expand_start_catch_block (tree decl)\n   else\n     type = NULL_TREE;\n \n-  is_java = false;\n-  if (decl)\n+  if (decl && decl_is_java_type (type, 1))\n+    {\n+      /* Java only passes object via pointer and doesn't require\n+\t adjusting.  The java object is immediately before the\n+\t generic exception header.  */\n+      exp = build_exc_ptr ();\n+      exp = build1 (NOP_EXPR, build_pointer_type (type), exp);\n+      exp = build2 (MINUS_EXPR, TREE_TYPE (exp), exp,\n+\t\t    TYPE_SIZE_UNIT (TREE_TYPE (exp)));\n+      exp = build_indirect_ref (exp, NULL);\n+      initialize_handler_parm (decl, exp);\n+      return type;\n+    }\n+\n+  /* Call __cxa_end_catch at the end of processing the exception.  */\n+  push_eh_cleanup (type);\n+\n+  /* If there's no decl at all, then all we need to do is make sure\n+     to tell the runtime that we've begun handling the exception.  */\n+  if (decl == NULL)\n+    finish_expr_stmt (do_begin_catch ());\n+\n+  /* If the C++ object needs constructing, we need to do that before\n+     calling __cxa_begin_catch, so that std::uncaught_exception gets\n+     the right value during the copy constructor.  */\n+  else if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl)))\n     {\n-      tree init;\n+      exp = do_get_exception_ptr ();\n+      initialize_handler_parm (decl, exp);\n+      finish_expr_stmt (do_begin_catch ());\n+    }\n \n-      if (decl_is_java_type (type, 1))\n-\t{\n-\t  /* Java only passes object via pointer and doesn't require\n-\t     adjusting.  The java object is immediately before the\n-\t     generic exception header.  */\n-\t  init = build_exc_ptr ();\n-\t  init = build1 (NOP_EXPR, build_pointer_type (type), init);\n-\t  init = build2 (MINUS_EXPR, TREE_TYPE (init), init,\n-\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (init)));\n-\t  init = build_indirect_ref (init, NULL);\n-\t  is_java = true;\n-\t}\n-      else\n-\t{\n-\t  /* C++ requires that we call __cxa_begin_catch to get the\n-\t     pointer to the actual object.  */\n-\t  init = do_begin_catch ();\n-\t}\n-\t  \n+  /* Otherwise the type uses a bitwise copy, and we don't have to worry\n+     about the value of std::uncaught_exception and therefore can do the\n+     copy with the return value of __cxa_end_catch instead.  */\n+  else\n+    {\n+      tree init = do_begin_catch ();\n       exp = create_temporary_var (ptr_type_node);\n       DECL_REGISTER (exp) = 1;\n       cp_finish_decl (exp, init, NULL_TREE, LOOKUP_ONLYCONVERTING);\n       finish_expr_stmt (build_modify_expr (exp, INIT_EXPR, init));\n+      initialize_handler_parm (decl, exp);\n     }\n-  else\n-    finish_expr_stmt (do_begin_catch ());\n-\n-  /* C++ requires that we call __cxa_end_catch at the end of\n-     processing the exception.  */\n-  if (! is_java)\n-    push_eh_cleanup (type);\n-\n-  if (decl)\n-    initialize_handler_parm (decl, exp);\n \n   return type;\n }"}, {"sha": "2aa1068b090dc2f4b390df5c3253b7ec2aa18814", "filename": "gcc/testsuite/g++.dg/eh/uncaught1.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -0,0 +1,83 @@\n+// PR libstdc++/10606\n+// { dg-do run }\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+\n+struct Check {\n+  int obj1, obj2;\n+  bool state;\n+};\n+\n+static Check const data[] = {\n+  { 0, 0, false },\t// construct [0]\n+  { 1, 0, true  },\t// [1] = [0]\n+  { 0, 0, true  },\t// destruct [0]\n+  { 2, 1, true  },\t// [2] = [1]\n+  { 2, 2, true  },      // destruct [2]\n+  { 3, 1, true  },\t// [3] = [1]\n+  { 3, 3, false },\t// destruct [3]\n+  { 1, 1, false },\t// destruct [1]\n+  { 9, 9, false }\t// end-of-data\n+};\n+\n+static int pos = 0;\n+\n+static void test(int obj1, int obj2, bool state)\n+{\n+  if (obj1 != data[pos].obj1) abort ();\n+  if (obj2 != data[pos].obj2) abort ();\n+  if (state != data[pos].state) abort ();\n+  pos++;\n+}\n+\n+\n+struct S {\n+  int id;\n+  S ();\n+  S (const S &);\n+  ~S ();\n+};\n+\n+static int next_id = 0;\n+\n+S::S()\n+  : id (next_id++)\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+S::S(const S &x)\n+  : id (next_id++)\n+{\n+  test (id, x.id, std::uncaught_exception ());\n+}\n+\n+S::~S()\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+extern void foo (S *);\n+\n+int main()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  S s0;\n+\t  throw s0;\t// s1 is the exception object\n+\t}\n+      catch (S s2)\n+\t{\n+\t  throw;\n+\t}\n+    }\n+  catch (S s3)\n+    {\n+    }\n+ \n+  return 0;\n+}"}, {"sha": "9b27b0b65e93a2d8efe46c620055adfda92b889c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -1,4 +1,17 @@\n+2005-02-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR libstdc++/10606\n+\t* config/linker-map.gnu (CXXABI_1.3.1): Add __cxa_get_exception_ptr.\n+\t* libsupc++/eh_alloc.cc (__cxa_allocate_exception): Increment\n+\tuncaughtExceptions here instead of ...\n+\t* libsupc++/eh_throw.cc (__cxa_throw) ... here.\n+\t(__cxa_rethrow): Increment uncaughtExceptions here instead of ...\n+\t* libsupc++/eh_catch.cc (__cxa_end_catch): ... here.\n+\t(__cxa_get_exception_ptr): New.\n+\t* libsupc++/unwind-cxx.h (__cxa_get_exception_ptr): Declare.\n+\n 2005-02-18  Matt Austern  <austern@apple.com>\n+\n \t* testsuite/tr1/6_containers/unordered/insert/array_syntax.cc: Fix\n \ttest case to use assignment instead of ==\n \t* testsuite/tr1/6_containers/unordered/insert/map_range.cc: New test."}, {"sha": "d7d291485b682a81b733495c96c4cf5c4deba145", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -410,3 +410,9 @@ CXXABI_1.3 {\n   local:\n     *;\n };\n+\n+CXXABI_1.3.1 {\n+\n+    __cxa_get_exception_ptr;\n+\n+} CXXABI_1.3;"}, {"sha": "3b7319ea235cc23954fb1e6d5e022acef8d4156b", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -147,6 +147,12 @@ __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) throw()\n \tstd::terminate ();\n     }\n \n+  // We have an uncaught exception as soon as we allocate memory.  This\n+  // yields uncaught_exception() true during the copy-constructor that\n+  // initializes the exception object.  See Issue 475.\n+  __cxa_eh_globals *globals = __cxa_get_globals ();\n+  globals->uncaughtExceptions += 1;\n+\n   memset (ret, 0, sizeof (__cxa_exception));\n \n   return (void *)((char *)ret + sizeof (__cxa_exception));"}, {"sha": "88060d9f9cda0cd22e8b4a062352f4a581276bea", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -33,6 +33,15 @@\n \n using namespace __cxxabiv1;\n \n+extern \"C\" void *\n+__cxxabiv1::__cxa_get_exception_ptr(void *exc_obj_in) throw()\n+{\n+  _Unwind_Exception *exceptionObject\n+    = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);\n+  __cxa_exception *header = __get_exception_header_from_ue (exceptionObject);\n+\n+  return header->adjustedPtr;\n+}\n \n extern \"C\" void *\n __cxxabiv1::__cxa_begin_catch (void *exc_obj_in) throw()\n@@ -107,10 +116,7 @@ __cxxabiv1::__cxa_end_catch ()\n       // This exception was rethrown.  Decrement the (inverted) catch\n       // count and remove it from the chain when it reaches zero.\n       if (++count == 0)\n-\t{\n-\t  globals->uncaughtExceptions += 1;\n-\t  globals->caughtExceptions = header->nextException;\n-\t}\n+\tglobals->caughtExceptions = header->nextException;\n     }\n   else if (--count == 0)\n     {"}, {"sha": "0807c5e1df77a3cd1b8032e4af1096d00e09e2ec", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -66,9 +66,6 @@ __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n   header->unwindHeader.exception_class = __gxx_exception_class;\n   header->unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n \n-  __cxa_eh_globals *globals = __cxa_get_globals ();\n-  globals->uncaughtExceptions += 1;\n-\n #ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n   _Unwind_SjLj_RaiseException (&header->unwindHeader);\n #else\n@@ -86,6 +83,8 @@ __cxxabiv1::__cxa_rethrow ()\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *header = globals->caughtExceptions;\n \n+  globals->uncaughtExceptions += 1;\n+\n   // Watch for luser rethrowing with no active exception.\n   if (header)\n     {"}, {"sha": "e79dd83628eda375a1e50ce2bb1bd22ffbd5202d", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396090773cfa29f9a5973a39a61dfc8d001b9633/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=396090773cfa29f9a5973a39a61dfc8d001b9633", "patch": "@@ -107,6 +107,7 @@ extern \"C\" void __cxa_throw (void *thrown_exception,\n      __attribute__((noreturn));\n \n // Used to implement exception handlers.\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw();\n extern \"C\" void *__cxa_begin_catch (void *) throw();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow () __attribute__((noreturn));"}]}