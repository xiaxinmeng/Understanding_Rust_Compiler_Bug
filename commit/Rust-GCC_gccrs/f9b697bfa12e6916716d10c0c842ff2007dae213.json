{"sha": "f9b697bfa12e6916716d10c0c842ff2007dae213", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliNjk3YmZhMTJlNjkxNjcxNmQxMGMwYzg0MmZmMjAwN2RhZTIxMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-11-23T18:19:18Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-11-23T18:19:18Z"}, "message": "Try to dump some information before aborting.\n\nFrom-SVN: r37699", "tree": {"sha": "34b7b2c66e9a1f1501cf0a38b13a378be3075bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34b7b2c66e9a1f1501cf0a38b13a378be3075bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9b697bfa12e6916716d10c0c842ff2007dae213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b697bfa12e6916716d10c0c842ff2007dae213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b697bfa12e6916716d10c0c842ff2007dae213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b697bfa12e6916716d10c0c842ff2007dae213/comments", "author": null, "committer": null, "parents": [{"sha": "ab09753510d568c1bbca882b0e9b599e1c36e599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab09753510d568c1bbca882b0e9b599e1c36e599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab09753510d568c1bbca882b0e9b599e1c36e599"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "b8eb3705398d2ec0fcc302a0e6b0a3b55f6cf1af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b697bfa12e6916716d10c0c842ff2007dae213/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b697bfa12e6916716d10c0c842ff2007dae213/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9b697bfa12e6916716d10c0c842ff2007dae213", "patch": "@@ -1,3 +1,9 @@\n+2000-11-23  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* flow.c (print_rtl_and_abort): New function.\n+\t(verify_wide_reg, verify_local_live_at_start): Try to dump more\n+\tinformation before aborting.\n+\n 2000-11-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* emit-rtl.c (gen_lowpart_common): Use word 0 if register mode"}, {"sha": "f9a7bfb011d4d88c2bd9b8334c25ed5724743981", "filename": "gcc/flow.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b697bfa12e6916716d10c0c842ff2007dae213/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b697bfa12e6916716d10c0c842ff2007dae213/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=f9b697bfa12e6916716d10c0c842ff2007dae213", "patch": "@@ -405,6 +405,7 @@ static void mark_used_regs\t\tPARAMS ((struct propagate_block_info *,\n void dump_flow_info\t\t\tPARAMS ((FILE *));\n void debug_flow_info\t\t\tPARAMS ((void));\n static void dump_edge_info\t\tPARAMS ((FILE *, edge, int));\n+static void print_rtl_and_abort\t\tPARAMS ((void));\n \n static void invalidate_mems_from_autoinc PARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t  rtx));\n@@ -2863,7 +2864,9 @@ verify_wide_reg (regno, head, end)\n     }\n \n   /* We didn't find the register at all.  Something's way screwy.  */\n-  abort ();\n+  if (rtl_dump_file)\n+    fprintf (rtl_dump_file, \"Aborting in verify_wide_reg; reg %d\\n\", regno);\n+  print_rtl_and_abort ();\n }\n \n /* A subroutine of update_life_info.  Verify that there are no untoward\n@@ -2879,7 +2882,17 @@ verify_local_live_at_start (new_live_at_start, bb)\n       /* After reload, there are no pseudos, nor subregs of multi-word\n \t registers.  The regsets should exactly match.  */\n       if (! REG_SET_EQUAL_P (new_live_at_start, bb->global_live_at_start))\n-        abort ();\n+\t{\n+\t  if (rtl_dump_file)\n+\t    {\n+\t      fprintf (rtl_dump_file,\n+\t\t       \"live_at_start mismatch in bb %d, aborting\\n\",\n+\t\t       bb->index);\n+\t      debug_bitmap_file (rtl_dump_file, bb->global_live_at_start);\n+\t      debug_bitmap_file (rtl_dump_file, new_live_at_start);\n+\t    }\n+\t  print_rtl_and_abort ();\n+\t}\n     }\n   else\n     {\n@@ -2892,7 +2905,14 @@ verify_local_live_at_start (new_live_at_start, bb)\n \t{\n           /* No registers should die.  */\n \t  if (REGNO_REG_SET_P (bb->global_live_at_start, i))\n-\t    abort ();\n+\t    {\n+\t      if (rtl_dump_file)\n+\t\tfprintf (rtl_dump_file,\n+\t\t\t \"Register %d died unexpectedly in block %d\\n\", i,\n+\t\t\t bb->index);\n+\t      print_rtl_and_abort ();\n+\t    }\n+\n           /* Verify that the now-live register is wider than word_mode.  */\n \t  verify_wide_reg (i, bb->head, bb->end);\n \t});\n@@ -6247,6 +6267,18 @@ print_rtl_with_bb (outf, rtx_first)\n     }\n }\n \n+/* Dump the rtl into the current debugging dump file, then abort.  */\n+static void\n+print_rtl_and_abort (void)\n+{\n+  if (rtl_dump_file)\n+    {\n+      print_rtl_with_bb (rtl_dump_file, get_insns ());\n+      fclose (rtl_dump_file);\n+    }\n+  abort ();\n+}\n+\n /* Recompute register set/reference counts immediately prior to register\n    allocation.\n "}]}