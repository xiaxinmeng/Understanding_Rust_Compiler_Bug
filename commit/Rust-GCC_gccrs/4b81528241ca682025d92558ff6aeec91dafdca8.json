{"sha": "4b81528241ca682025d92558ff6aeec91dafdca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4MTUyODI0MWNhNjgyMDI1ZDkyNTU4ZmY2YWVlYzkxZGFmZGNhOA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-11-11T08:33:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-11-18T07:02:27Z"}, "message": "RISC-V: Support version controling for ISA standard extensions\n\n - New option -misa-spec support: -misa-spec=[2.2|20190608|20191213] and\n   corresponding configuration option --with-isa-spec.\n\n - Current default ISA spec set to 2.2, but we intend to bump this to\n   20191213 or later in next release.\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.c (riscv_ext_version): New.\n\t(riscv_ext_version_table): Ditto.\n\t(get_default_version): Ditto.\n\t(riscv_subset_t::implied_p): New field.\n\t(riscv_subset_t::riscv_subset_t): Init implied_p.\n\t(riscv_subset_list::add): New.\n\t(riscv_subset_list::handle_implied_ext): Pass riscv_subset_t\n\tinstead of separated argument.\n\t(riscv_subset_list::to_string): Handle zifencei and zicsr, and\n\tomit version if version is unknown.\n\t(riscv_subset_list::parsing_subset_version): New argument `ext`,\n\tremove default_major_version and default_minor_version, get\n\tdefault version info via get_default_version.\n\t(riscv_subset_list::parse_std_ext): Update argument for\n\tparsing_subset_version calls.\n\tHandle 2.2 ISA spec, always enable zicsr and zifencei, they are\n\tincluded in baseline ISA in that time.\n\t(riscv_subset_list::parse_multiletter_ext): Update argument for\n\t`parsing_subset_version` and `add` calls.\n\t(riscv_subset_list::parse): Adjust argument for\n\triscv_subset_list::handle_implied_ext call.\n\t* config.gcc (riscv*-*-*): Handle --with-isa-spec=.\n\t* config.in (HAVE_AS_MISA_SPEC): New.\n\t(HAVE_AS_MARCH_ZIFENCEI): Ditto.\n\t* config/riscv/riscv-opts.h (riscv_isa_spec_class): New.\n\t(riscv_isa_spec): Ditto.\n\t* config/riscv/riscv.h (HAVE_AS_MISA_SPEC): New.\n\t(ASM_SPEC): Pass -misa-spec if gas supported.\n\t* config/riscv/riscv.opt (riscv_isa_spec_class) New.\n\t* configure.ac (HAVE_AS_MARCH_ZIFENCEI): New test.\n\t(HAVE_AS_MISA_SPEC): Ditto.\n\t* configure: Regen.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/arch-9.c: New.\n\t* gcc.target/riscv/arch-10.c: Ditto.\n\t* gcc.target/riscv/arch-11.c: Ditto.\n\t* gcc.target/riscv/attribute-6.c: Remove, we don't support G\n\twith version anymore.\n\t* gcc.target/riscv/attribute-8.c: Reorder arch string to fit canonical\n\tordering.\n\t* gcc.target/riscv/attribute-9.c: We don't emit version for\n\tunknown extensions now.\n\t* gcc.target/riscv/attribute-11.c: Add -misa-spec=2.2 flags.\n\t* gcc.target/riscv/attribute-12.c: Ditto.\n\t* gcc.target/riscv/attribute-13.c: Ditto.\n\t* gcc.target/riscv/attribute-14.c: Ditto.\n\t* gcc.target/riscv/attribute-15.c: New.\n\t* gcc.target/riscv/attribute-16.c: Ditto.\n\t* gcc.target/riscv/attribute-17.c: Ditto.", "tree": {"sha": "b7ec4b4b7a12b4aaef7f330867fd1e0298391cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ec4b4b7a12b4aaef7f330867fd1e0298391cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b81528241ca682025d92558ff6aeec91dafdca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b81528241ca682025d92558ff6aeec91dafdca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b81528241ca682025d92558ff6aeec91dafdca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b81528241ca682025d92558ff6aeec91dafdca8/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03be74bad08c382da47e048007a78fa3fb4ef49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03be74bad08c382da47e048007a78fa3fb4ef49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03be74bad08c382da47e048007a78fa3fb4ef49"}], "stats": {"total": 481, "additions": 393, "deletions": 88}, "files": [{"sha": "5e3ddcf3f81c48a436fdb8c73a88eb3faaaf5bfc", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 215, "deletions": 72, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -44,6 +44,7 @@ struct riscv_subset_t\n   struct riscv_subset_t *next;\n \n   bool explicit_version_p;\n+  bool implied_p;\n };\n \n /* Type for implied ISA info.  */\n@@ -62,6 +63,58 @@ static const riscv_implied_info_t riscv_implied_info[] =\n   {NULL, NULL}\n };\n \n+/* This structure holds version information for specific ISA version.  */\n+\n+struct riscv_ext_version\n+{\n+  const char *name;\n+  enum riscv_isa_spec_class isa_spec_class;\n+  int major_version;\n+  int minor_version;\n+};\n+\n+/* All standard extensions defined in all supported ISA spec.  */\n+static const struct riscv_ext_version riscv_ext_version_table[] =\n+{\n+  /* name, ISA spec, major version, minor_version.  */\n+  {\"e\", ISA_SPEC_CLASS_20191213, 1, 9},\n+  {\"e\", ISA_SPEC_CLASS_20190608, 1, 9},\n+  {\"e\", ISA_SPEC_CLASS_2P2,      1, 9},\n+\n+  {\"i\", ISA_SPEC_CLASS_20191213, 2, 1},\n+  {\"i\", ISA_SPEC_CLASS_20190608, 2, 1},\n+  {\"i\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"m\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"m\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"m\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"a\", ISA_SPEC_CLASS_20191213, 2, 1},\n+  {\"a\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"a\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"f\", ISA_SPEC_CLASS_20191213, 2, 2},\n+  {\"f\", ISA_SPEC_CLASS_20190608, 2, 2},\n+  {\"f\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"d\", ISA_SPEC_CLASS_20191213, 2, 2},\n+  {\"d\", ISA_SPEC_CLASS_20190608, 2, 2},\n+  {\"d\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"c\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"c\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"c\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"zicsr\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"zicsr\", ISA_SPEC_CLASS_20190608, 2, 0},\n+\n+  {\"zifencei\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"zifencei\", ISA_SPEC_CLASS_20190608, 2, 0},\n+\n+  /* Terminate the list.  */\n+  {NULL, ISA_SPEC_CLASS_NONE, 0, 0}\n+};\n+\n static const riscv_cpu_info riscv_cpu_tables[] =\n {\n #define RISCV_CORE(CORE_NAME, ARCH, TUNE) \\\n@@ -91,20 +144,22 @@ class riscv_subset_list\n \n   riscv_subset_list (const char *, location_t);\n \n-  const char *parsing_subset_version (const char *, unsigned *, unsigned *,\n-\t\t\t\t      unsigned, unsigned, bool, bool *);\n+  const char *parsing_subset_version (const char *, const char *, unsigned *,\n+\t\t\t\t      unsigned *, bool, bool *);\n \n   const char *parse_std_ext (const char *);\n \n   const char *parse_multiletter_ext (const char *, const char *,\n \t\t\t\t     const char *);\n \n-  void handle_implied_ext (const char *, int, int, bool);\n+  void handle_implied_ext (riscv_subset_t *);\n \n public:\n   ~riscv_subset_list ();\n \n-  void add (const char *, int, int, bool);\n+  void add (const char *, int, int, bool, bool);\n+\n+  void add (const char *, bool);\n \n   riscv_subset_t *lookup (const char *,\n \t\t\t  int major_version = RISCV_DONT_CARE_VERSION,\n@@ -124,7 +179,7 @@ static riscv_subset_list *current_subset_list = NULL;\n \n riscv_subset_t::riscv_subset_t ()\n   : name (), major_version (0), minor_version (0), next (NULL),\n-    explicit_version_p (false)\n+    explicit_version_p (false), implied_p (false)\n {\n }\n \n@@ -274,8 +329,31 @@ subset_cmp (const std::string &a, const std::string &b)\n \n void\n riscv_subset_list::add (const char *subset, int major_version,\n-\t\t\tint minor_version, bool explicit_version_p)\n+\t\t\tint minor_version, bool explicit_version_p,\n+\t\t\tbool implied_p)\n {\n+  riscv_subset_t *ext = lookup (subset);\n+\n+  if (ext)\n+    {\n+      if (ext->implied_p)\n+\t{\n+\t  /* We won't add impiled `ext` if it already in list. */\n+\t  gcc_assert (!implied_p);\n+\t  ext->implied_p = implied_p;\n+\t  ext->major_version = major_version;\n+\t  ext->minor_version = minor_version;\n+\t}\n+      else\n+\terror_at (\n+\t  m_loc,\n+\t  \"%<-march=%s%>: Extension `%s' appear more than one time.\",\n+\t  m_arch,\n+\t  subset);\n+\n+      return;\n+    }\n+\n   riscv_subset_t *s = new riscv_subset_t ();\n   riscv_subset_t *itr;\n \n@@ -286,6 +364,7 @@ riscv_subset_list::add (const char *subset, int major_version,\n   s->major_version = major_version;\n   s->minor_version = minor_version;\n   s->explicit_version_p = explicit_version_p;\n+  s->implied_p = implied_p;\n   s->next = NULL;\n \n   if (m_tail == NULL)\n@@ -330,6 +409,43 @@ riscv_subset_list::add (const char *subset, int major_version,\n   m_tail = s;\n }\n \n+static void\n+get_default_version (const char *ext,\n+\t\t     unsigned int *major_version,\n+\t\t     unsigned int *minor_version)\n+{\n+  const riscv_ext_version *ext_ver;\n+  for (ext_ver = &riscv_ext_version_table[0];\n+       ext_ver->name != NULL;\n+       ++ext_ver)\n+    if (strcmp (ext, ext_ver->name) == 0)\n+      {\n+\tif ((ext_ver->isa_spec_class == riscv_isa_spec) ||\n+\t    (ext_ver->isa_spec_class == ISA_SPEC_CLASS_NONE))\n+\t  {\n+\t    *major_version = ext_ver->major_version;\n+\t    *minor_version = ext_ver->minor_version;\n+\t    return;\n+\t  }\n+      }\n+\n+  /* Not found version info.  */\n+  *major_version = 0;\n+  *minor_version = 0;\n+}\n+\n+/* Add new subset to list, but using default version from ISA spec version.  */\n+\n+void\n+riscv_subset_list::add (const char *subset, bool implied_p)\n+{\n+  unsigned int major_version = 0, minor_version = 0;\n+\n+  get_default_version (subset, &major_version, &minor_version);\n+\n+  add (subset, major_version, minor_version, false, implied_p);\n+}\n+\n /* Convert subset info to string with explicit version info,\n    VERSION_P to determine append version info or not.  */\n \n@@ -340,10 +456,37 @@ riscv_subset_list::to_string (bool version_p) const\n   oss << \"rv\" << m_xlen;\n \n   bool first = true;\n-  riscv_subset_t *subset = m_head;\n+  riscv_subset_t *subset;\n+\n+  bool skip_zifencei = false;\n+  bool skip_zicsr = false;\n+\n+  /* For RISC-V ISA version 2.2 or earlier version, zicsr and zifencei is\n+     included in the base ISA.  */\n+  if (riscv_isa_spec == ISA_SPEC_CLASS_2P2)\n+    {\n+      skip_zifencei = true;\n+      skip_zicsr = true;\n+    }\n \n-  while (subset != NULL)\n+#ifndef HAVE_AS_MISA_SPEC\n+  /* Skip since older binutils doesn't recognize zicsr.  */\n+  skip_zicsr = true;\n+#endif\n+#ifndef HAVE_AS_MARCH_ZIFENCE\n+  /* Skip since older binutils doesn't recognize zifencei, we made\n+     a mistake in that binutils 2.35 supports zicsr but not zifencei.  */\n+  skip_zifencei = true;\n+#endif\n+\n+  for (subset = m_head; subset != NULL; subset = subset->next)\n     {\n+      if (subset->implied_p && skip_zifencei && subset->name == \"zifencei\")\n+\tcontinue;\n+\n+      if (subset->implied_p && skip_zicsr && subset->name == \"zicsr\")\n+\tcontinue;\n+\n       /* For !version_p, we only separate extension with underline for\n \t multi-letter extension.  */\n       if (!first &&\n@@ -355,12 +498,12 @@ riscv_subset_list::to_string (bool version_p) const\n \n       oss << subset->name;\n \n-      if (version_p || subset->explicit_version_p)\n+      /* Let binutils decide the extension version if we don't know.  */\n+      if ((version_p || subset->explicit_version_p) &&\n+\t  (subset->major_version != 0 || subset->minor_version != 0))\n \toss  << subset->major_version\n \t     << 'p'\n \t     << subset->minor_version;\n-\n-      subset = subset->next;\n     }\n \n   return oss.str ();\n@@ -408,23 +551,21 @@ riscv_supported_std_ext (void)\n      Points to the end of version\n \n    Arguments:\n+     `ext`: This extension.\n      `p`: Current parsing position.\n      `major_version`: Parsing result of major version, using\n       default_major_version if version is not present in arch string.\n      `minor_version`: Parsing result of minor version, set to 0 if version is\n      not present in arch string, but set to `default_minor_version` if\n      `major_version` using default_major_version.\n-     `default_major_version`: Default major version.\n-     `default_minor_version`: Default minor version.\n      `std_ext_p`: True if parsing std extension.\n      `explicit_version_p`: True if this subset is not using default version.  */\n \n const char *\n-riscv_subset_list::parsing_subset_version (const char *p,\n+riscv_subset_list::parsing_subset_version (const char *ext,\n+\t\t\t\t\t   const char *p,\n \t\t\t\t\t   unsigned *major_version,\n \t\t\t\t\t   unsigned *minor_version,\n-\t\t\t\t\t   unsigned default_major_version,\n-\t\t\t\t\t   unsigned default_minor_version,\n \t\t\t\t\t   bool std_ext_p,\n \t\t\t\t\t   bool *explicit_version_p)\n {\n@@ -475,11 +616,7 @@ riscv_subset_list::parsing_subset_version (const char *p,\n     minor = version;\n \n   if (major == 0 && minor == 0)\n-    {\n-      /* We didn't find any version string, use default version.  */\n-      *major_version = default_major_version;\n-      *minor_version = default_minor_version;\n-    }\n+    get_default_version (ext, major_version, minor_version);\n   else\n     {\n       *explicit_version_p = true;\n@@ -513,23 +650,17 @@ riscv_subset_list::parse_std_ext (const char *p)\n     {\n     case 'i':\n       p++;\n-      p = parsing_subset_version (p, &major_version, &minor_version,\n-\t\t\t\t  /* default_major_version= */ 2,\n-\t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true,\n-\t\t\t\t  &explicit_version_p);\n-      add (\"i\", major_version, minor_version, explicit_version_p);\n+      p = parsing_subset_version (\"i\", p, &major_version, &minor_version,\n+\t\t\t\t  /* std_ext_p= */ true, &explicit_version_p);\n+      add (\"i\", major_version, minor_version, explicit_version_p, false);\n       break;\n \n     case 'e':\n       p++;\n-      p = parsing_subset_version (p, &major_version, &minor_version,\n-\t\t\t\t  /* default_major_version= */ 1,\n-\t\t\t\t  /* default_minor_version= */ 9,\n-\t\t\t\t  /* std_ext_p= */ true,\n-\t\t\t\t  &explicit_version_p);\n+      p = parsing_subset_version (\"e\", p, &major_version, &minor_version,\n+\t\t\t\t  /* std_ext_p= */ true, &explicit_version_p);\n \n-      add (\"e\", major_version, minor_version, explicit_version_p);\n+      add (\"e\", major_version, minor_version, explicit_version_p, false);\n \n       if (m_xlen > 32)\n \t{\n@@ -541,18 +672,26 @@ riscv_subset_list::parse_std_ext (const char *p)\n \n     case 'g':\n       p++;\n-      p = parsing_subset_version (p, &major_version, &minor_version,\n-\t\t\t\t  /* default_major_version= */ 2,\n-\t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true,\n-\t\t\t\t  &explicit_version_p);\n-      add (\"i\", major_version, minor_version, explicit_version_p);\n-\n-      for (; *std_exts != 'q'; std_exts++)\n+      p = parsing_subset_version (\"g\", p, &major_version, &minor_version,\n+\t\t\t\t  /* std_ext_p= */ true, &explicit_version_p);\n+      if (major_version != 0 || minor_version != 0)\n \t{\n-\t  const char subset[] = {*std_exts, '\\0'};\n-\t  add (subset, major_version, minor_version, explicit_version_p);\n+\t  warning_at (m_loc, 0, \"version of `g` will be omitted, please \"\n+\t\t\t\t\"specify version for individual extension.\");\n \t}\n+\n+      /* We have special rule for G, we disallow rv32gm2p but allow rv32g_zicsr\n+\t here, basically we treating G expand to imafd and implied zicsr and\n+\t zifencei.  */\n+\n+      add (\"i\", false);\n+      add (\"m\", false);\n+      add (\"a\", false);\n+      add (\"f\", false);\n+      add (\"d\", false);\n+      add (\"zicsr\", true);\n+      add (\"zifencei\", true);\n+\n       break;\n \n     default:\n@@ -595,44 +734,47 @@ riscv_subset_list::parse_std_ext (const char *p)\n       std_exts++;\n \n       p++;\n-      p = parsing_subset_version (p, &major_version, &minor_version,\n-\t\t\t\t  /* default_major_version= */ 2,\n-\t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true,\n-\t\t\t\t  &explicit_version_p);\n-\n       subset[0] = std_ext;\n \n-      add (subset, major_version, minor_version, explicit_version_p);\n+      p = parsing_subset_version (subset, p, &major_version, &minor_version,\n+\t\t\t\t  /* std_ext_p= */ true, &explicit_version_p);\n+\n+      add (subset, major_version, minor_version, explicit_version_p, false);\n     }\n   return p;\n }\n \n \n-/* Check any implied extensions for EXT with version\n-   MAJOR_VERSION.MINOR_VERSION, EXPLICIT_VERSION_P indicate the version is\n-   explicitly given by user or not.  */\n+/* Check any implied extensions for EXT.  */\n void\n-riscv_subset_list::handle_implied_ext (const char *ext,\n-\t\t\t\t       int major_version,\n-\t\t\t\t       int minor_version,\n-\t\t\t\t       bool explicit_version_p)\n+riscv_subset_list::handle_implied_ext (riscv_subset_t *ext)\n {\n   const riscv_implied_info_t *implied_info;\n   for (implied_info = &riscv_implied_info[0];\n        implied_info->ext;\n        ++implied_info)\n     {\n-      if (strcmp (ext, implied_info->ext) != 0)\n+      if (strcmp (ext->name.c_str (), implied_info->ext) != 0)\n \tcontinue;\n \n       /* Skip if implied extension already present.  */\n       if (lookup (implied_info->implied_ext))\n \tcontinue;\n \n-      /* TODO: Implied extension might use different version.  */\n-      add (implied_info->implied_ext, major_version, minor_version,\n-\t   explicit_version_p);\n+      /* Version of implied extension will get from current ISA spec\n+\t version.  */\n+      add (implied_info->implied_ext, true);\n+    }\n+\n+  /* For RISC-V ISA version 2.2 or earlier version, zicsr and zifence is\n+     included in the base ISA.  */\n+  if (riscv_isa_spec == ISA_SPEC_CLASS_2P2)\n+    {\n+      if (lookup (\"zicsr\") == NULL)\n+\tadd (\"zicsr\", true);\n+\n+      if (lookup (\"zifencei\") == NULL)\n+\tadd (\"zifencei\", true);\n     }\n }\n \n@@ -670,16 +812,21 @@ riscv_subset_list::parse_multiletter_ext (const char *p,\n       char *q = subset;\n       const char *end_of_version;\n       bool explicit_version_p = false;\n+      char *ext;\n+      char backup;\n \n       while (*++q != '\\0' && *q != '_' && !ISDIGIT (*q))\n \t;\n \n+      backup = *q;\n+      *q = '\\0';\n+      ext = xstrdup (subset);\n+      *q = backup;\n+\n       end_of_version\n-\t= parsing_subset_version (q, &major_version, &minor_version,\n-\t\t\t\t  /* default_major_version= */ 2,\n-\t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ FALSE,\n-\t\t\t\t  &explicit_version_p);\n+\t= parsing_subset_version (ext, q, &major_version, &minor_version,\n+\t\t\t\t  /* std_ext_p= */ false, &explicit_version_p);\n+      free (ext);\n \n       *q = '\\0';\n \n@@ -691,7 +838,7 @@ riscv_subset_list::parse_multiletter_ext (const char *p,\n \t  return NULL;\n \t}\n \n-      add (subset, major_version, minor_version, explicit_version_p);\n+      add (subset, major_version, minor_version, explicit_version_p, false);\n       free (subset);\n       p += end_of_version - subset;\n \n@@ -770,11 +917,7 @@ riscv_subset_list::parse (const char *arch, location_t loc)\n \n   for (itr = subset_list->m_head; itr != NULL; itr = itr->next)\n     {\n-      subset_list->handle_implied_ext (\n-\titr->name.c_str (),\n-\titr->major_version,\n-\titr->minor_version,\n-\titr->explicit_version_p);\n+      subset_list->handle_implied_ext (itr);\n     }\n \n   return subset_list;"}, {"sha": "efabc13c47394b1811741c2287aa74d47a3653ca", "filename": "gcc/config.gcc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -4541,14 +4541,29 @@ case \"${target}\" in\n \t\t;;\n \n \triscv*-*-*)\n-\t\tsupported_defaults=\"abi arch tune riscv_attribute\"\n+\t\tsupported_defaults=\"abi arch tune riscv_attribute isa_spec\"\n \n \t\tcase \"${target}\" in\n \t\triscv-* | riscv32*) xlen=32 ;;\n \t\triscv64*) xlen=64 ;;\n \t\t*) echo \"Unsupported RISC-V target ${target}\" 1>&2; exit 1 ;;\n \t\tesac\n \n+\t\tcase \"${with_isa_spec}\" in\n+\t\t\"\"|default|2.2)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_DEFAULT_ISA_SPEC=ISA_SPEC_CLASS_2P2\"\n+\t\t\t;;\n+\t\t20191213 | 201912)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_DEFAULT_ISA_SPEC=ISA_SPEC_CLASS_20191213\"\n+\t\t\t;;\n+\t\t20190608 | 201906)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_DEFAULT_ISA_SPEC=ISA_SPEC_CLASS_20190608\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"--with-isa-spec only accept 2.2, 20191213, 201912, 20190608 or 201906\" 1>&2\n+\t\t\texit 1\n+\t\tesac\n+\n \t\tcase \"${with_riscv_attribute}\" in\n \t\tyes)\n \t\t\ttm_defines=\"${tm_defines} TARGET_RISCV_ATTRIBUTE=1\""}, {"sha": "6fae7b769b89f4c92a1efb42467896c75ac8b8be", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -643,6 +643,18 @@\n #endif\n \n \n+/* Define if your assembler supports -misa-spec=. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MISA_SPEC\n+#endif\n+\n+\n+/* Define if your assembler supports -march=rv*_zifencei. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MARCH_ZIFENCEI\n+#endif\n+\n+\n /* Define if your assembler supports relocs needed by -fpic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_SMALL_PIC_RELOCS"}, {"sha": "0b83f17b78f9b2967b8abfd814db52049eb397b6", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -39,6 +39,16 @@ enum riscv_code_model {\n };\n extern enum riscv_code_model riscv_cmodel;\n \n+enum riscv_isa_spec_class {\n+  ISA_SPEC_CLASS_NONE,\n+\n+  ISA_SPEC_CLASS_2P2,\n+  ISA_SPEC_CLASS_20190608,\n+  ISA_SPEC_CLASS_20191213\n+};\n+\n+extern enum riscv_isa_spec_class riscv_isa_spec;\n+\n /* Keep this list in sync with define_attr \"tune\" in riscv.md.  */\n enum riscv_microarchitecture_type {\n   generic,"}, {"sha": "e71fbf312792a7bad9368a68f3eacefc27759e70", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -70,13 +70,20 @@ extern const char *riscv_default_mtune (int argc, const char **argv);\n #define TARGET_64BIT           (__riscv_xlen == 64)\n #endif /* IN_LIBGCC2 */\n \n+#ifdef HAVE_AS_MISA_SPEC\n+#define ASM_MISA_SPEC \"%{misa-spec=*}\"\n+#else\n+#define ASM_MISA_SPEC \"\"\n+#endif\n+\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %(subtarget_asm_debugging_spec) \\\n %{\" FPIE_OR_FPIC_SPEC \":-fpic} \\\n %{march=*} \\\n %{mabi=*} \\\n-%(subtarget_asm_spec)\"\n+%(subtarget_asm_spec)\" \\\n+ASM_MISA_SPEC\n \n #undef DRIVER_SELF_SPECS\n #define DRIVER_SELF_SPECS\t\t\t\t\t\\"}, {"sha": "9cf14bb1bae57ca499cdd1075238652d5236a829", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -186,3 +186,20 @@ long riscv_stack_protector_guard_offset = 0\n \n TargetVariable\n int riscv_zi_subext\n+\n+Enum\n+Name(isa_spec_class) Type(enum riscv_isa_spec_class)\n+Supported ISA specs (for use with the -misa-spec= option):\n+\n+EnumValue\n+Enum(isa_spec_class) String(2.2) Value(ISA_SPEC_CLASS_2P2)\n+\n+EnumValue\n+Enum(isa_spec_class) String(20190608) Value(ISA_SPEC_CLASS_20190608)\n+\n+EnumValue\n+Enum(isa_spec_class) String(20191213) Value(ISA_SPEC_CLASS_20191213)\n+\n+misa-spec=\n+Target Report RejectNegative Joined Enum(isa_spec_class) Var(riscv_isa_spec) Init(TARGET_DEFAULT_ISA_SPEC)\n+Set the version of RISC-V ISA spec."}, {"sha": "ba69f73ed9c98281b4d3b9a6c291727047bbac41", "filename": "gcc/configure", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -28136,6 +28136,68 @@ if test $gcc_cv_as_riscv_attribute = yes; then\n \n $as_echo \"#define HAVE_AS_RISCV_ATTRIBUTE 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -misa-spec= support\" >&5\n+$as_echo_n \"checking assembler for -misa-spec= support... \" >&6; }\n+if ${gcc_cv_as_riscv_isa_spec+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_riscv_isa_spec=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -misa-spec=2.2 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_riscv_isa_spec=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_riscv_isa_spec\" >&5\n+$as_echo \"$gcc_cv_as_riscv_isa_spec\" >&6; }\n+if test $gcc_cv_as_riscv_isa_spec = yes; then\n+\n+$as_echo \"#define HAVE_AS_MISA_SPEC 1\" >>confdefs.h\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -march=rv32i_zifencei support\" >&5\n+$as_echo_n \"checking assembler for -march=rv32i_zifencei support... \" >&6; }\n+if ${gcc_cv_as_riscv_march_zifencei+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_riscv_march_zifencei=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -march=rv32i_zifencei -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_riscv_march_zifencei=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_riscv_march_zifencei\" >&5\n+$as_echo \"$gcc_cv_as_riscv_march_zifencei\" >&6; }\n+if test $gcc_cv_as_riscv_march_zifencei = yes; then\n+\n+$as_echo \"#define HAVE_AS_MARCH_ZIFENCEI 1\" >>confdefs.h\n+\n fi\n \n     ;;"}, {"sha": "28d96d1cba3bc42e757afa6137c6f2513256beff", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -5111,6 +5111,16 @@ configured with --enable-newlib-nano-formatted-io.])\n       [.attribute stack_align,4],,\n       [AC_DEFINE(HAVE_AS_RISCV_ATTRIBUTE, 1,\n \t  [Define if your assembler supports .attribute.])])\n+    gcc_GAS_CHECK_FEATURE([-misa-spec= support],\n+      gcc_cv_as_riscv_isa_spec,,\n+      [-misa-spec=2.2],,,\n+      [AC_DEFINE(HAVE_AS_MISA_SPEC, 1,\n+\t\t [Define if the assembler understands -misa-spec=.])])\n+    gcc_GAS_CHECK_FEATURE([-march=rv32i_zifencei support],\n+      gcc_cv_as_riscv_march_zifencei,,\n+      [-march=rv32i_zifencei],,,\n+      [AC_DEFINE(HAVE_AS_MARCH_ZIFENCEI, 1,\n+\t\t [Define if the assembler understands -march=rv*_zifencei.])])\n     ;;\n     s390*-*-*)\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],"}, {"sha": "47dbda333c9aafb3a917164e1eaa824cafb94046", "filename": "gcc/testsuite/gcc.target/riscv/arch-10.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-10.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gf2 -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-error \"Extension `f' appear more than one time.\" \"\" { target *-*-* } 0 } */"}, {"sha": "129d8f72804f25d47a7fbc10cac8bd90bbb627b1", "filename": "gcc/testsuite/gcc.target/riscv/arch-11.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-11.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32g_zicsr2 -mabi=ilp32\" } */\n+int foo()\n+{\n+}"}, {"sha": "74e64103563dd88351f2a4fe065f874216a36ccd", "filename": "gcc/testsuite/gcc.target/riscv/arch-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-9.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32g2 -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-warning \"version of `g` will be omitted, please specify version for individual extension.\" \"\" { target *-*-* } 0 } */"}, {"sha": "98bd8d4da42b55e20aaaef841eecca1c76df0944", "filename": "gcc/testsuite/gcc.target/riscv/attribute-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-11.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32id -mabi=ilp32\" } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32id -mabi=ilp32 -misa-spec=2.2\" } */\n int foo()\n {\n }"}, {"sha": "44fccad3b29ece285a6763889a7c3c827661f214", "filename": "gcc/testsuite/gcc.target/riscv/attribute-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-12.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32ifd -mabi=ilp32\" } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32ifd -mabi=ilp32 -misa-spec=2.2\" } */\n int foo()\n {\n }"}, {"sha": "1b8f93ceaaf78b23aba8c398114d8b15d102396f", "filename": "gcc/testsuite/gcc.target/riscv/attribute-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32if3d -mabi=ilp32\" } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32if3d -mabi=ilp32 -misa-spec=2.2\" } */\n int foo()\n {\n }"}, {"sha": "2591c1f92f6e6f5b4bd11f172782d38c32933fbe", "filename": "gcc/testsuite/gcc.target/riscv/attribute-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-14.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32if -mabi=ilp32\" } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32if -mabi=ilp32 -misa-spec=20190608\" } */\n int foo()\n {\n }\n-/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_f2p0_zicsr2p0\\\"\" } } */\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p1_f2p2_zicsr2p0\\\"\" } } */"}, {"sha": "9cae1a27a6fe8f64985009e9cb57dd8403db1d50", "filename": "gcc/testsuite/gcc.target/riscv/attribute-15.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-15.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32gc -mabi=ilp32 -misa-spec=2.2\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_m2p0_a2p0_f2p0_d2p0_c2p0\\\"\" } } */"}, {"sha": "f090363b9793c41e0df12ddd372f191dedd668af", "filename": "gcc/testsuite/gcc.target/riscv/attribute-16.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-16.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32gc -mabi=ilp32 -misa-spec=20190608\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p1_m2p0_a2p0_f2p2_d2p2_c2p0_zicsr2p0\" } } */"}, {"sha": "19ef540b5b98555b1dda7c070db3eda178434458", "filename": "gcc/testsuite/gcc.target/riscv/attribute-17.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-17.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32gc -mabi=ilp32 -misa-spec=20191213\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_zicsr2p0\" } } */"}, {"sha": "c75b0d62200540666779e24b09be2948a8c862e0", "filename": "gcc/testsuite/gcc.target/riscv/attribute-6.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03be74bad08c382da47e048007a78fa3fb4ef49/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03be74bad08c382da47e048007a78fa3fb4ef49/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-6.c?ref=b03be74bad08c382da47e048007a78fa3fb4ef49", "patch": "@@ -1,6 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32g2p0 -mabi=ilp32\" } */\n-int foo()\n-{\n-}\n-/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_m2p0_a2p0_f2p0_d2p0\\\"\" } } */"}, {"sha": "90f5a4022a0cb15665d8ba35fbb43b5d957fd616", "filename": "gcc/testsuite/gcc.target/riscv/attribute-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-8.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mriscv-attribute -march=rv32i2p0xv5_xabc -mabi=ilp32\" } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32i2p0xabc_xv5 -mabi=ilp32\" } */\n int foo()\n {\n }\n-/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_xv5p0_xabc2p0\\\"\" } } */\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_xabc_xv5p0\\\"\" } } */"}, {"sha": "4598872f0a68e9bdfb8bc4b7844ea87987b48048", "filename": "gcc/testsuite/gcc.target/riscv/attribute-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b81528241ca682025d92558ff6aeec91dafdca8/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-9.c?ref=4b81528241ca682025d92558ff6aeec91dafdca8", "patch": "@@ -3,4 +3,4 @@\n int foo()\n {\n }\n-/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_sabc2p0_xbar2p0\\\"\" } } */\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_sabc_xbar\\\"\" } } */"}]}