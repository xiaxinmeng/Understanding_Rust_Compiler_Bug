{"sha": "e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4ODZhZTBiYWE1ZmJlOTk0NGVkMmQ4MGI2YzFkMGEyOTAyMmM4MA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-01-16T16:08:54Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-01-16T16:08:54Z"}, "message": "* .cvsignore: Add man pages.\n\nFrom-SVN: r48911", "tree": {"sha": "d397c1be05d53bbffd54a539f0ef704d9f422dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d397c1be05d53bbffd54a539f0ef704d9f422dd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80/comments", "author": null, "committer": null, "parents": [{"sha": "ceb159485cced02ac3391d7ffa2a12f60751cf5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb159485cced02ac3391d7ffa2a12f60751cf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb159485cced02ac3391d7ffa2a12f60751cf5a"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "7a026d66f50d90a8626ec0f6b62df85f3ba8f55e", "filename": "gcc/java/.cvsignore", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80/gcc%2Fjava%2F.cvsignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80/gcc%2Fjava%2F.cvsignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2F.cvsignore?ref=e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "patch": "@@ -1,3 +1,9 @@\n parse.c\n parse-scan.c\n gcj.info*\n+gcj.1\n+gcjh.1\n+jv-scan.1\n+jcf-dump.1\n+gij.1\n+jv-convert.1"}, {"sha": "106eda821768ee5681683b938878763aa6e5bea3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e1886ae0baa5fbe9944ed2d80b6c1d0a29022c80", "patch": "@@ -1,3 +1,7 @@\n+2002-01-15  Andreas Jaeger  <aj@suse.de>\n+\n+\t* .cvsignore: Add man pages.\n+\n 2002-01-15  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR java/5365:\n@@ -120,15 +124,15 @@\n \n 2001-12-20  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-\t* decl.c (java_init_decl_processing): Don't initialize \n+\t* decl.c (java_init_decl_processing): Don't initialize\n \tfinit_leg_identifier_node.\n \t* java-tree.h (java_tree_index): Remove JTI_FINIT_LEG_IDENTIFIER_NODE.\n \t(finit_leg_identifier_node): Remove.\n \t(ID_FINIT_P): Don't check for JTI_FINIT_LEG_IDENTIFIER_NODE.\n \n 2001-12-20  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-\t* mangle.c (mangle_member_name): Don't special-case for \n+\t* mangle.c (mangle_member_name): Don't special-case for\n \tNO_DOLLAR_IN_LABEL.\n \t* mangle_name.c (unicode_mangling_length): Likewise.\n \t(append_unicode_mangled_name): Likewise.\n@@ -184,11 +188,11 @@\n 2001-12-15  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java-tree.h (otable_methods, otable_decl, otable_syms_decl,\n-\totable_type, otable_ptr_type, method_symbol_type, \n+\totable_type, otable_ptr_type, method_symbol_type,\n \tmethod_symbols_array_type, method_symbols_array_ptr_type): New\n \tfield/global tree definitions.\n \t(flag_indirect_dispatch): New flag.\n-\t* decl.c (java_init_decl_processing): Initialize new otable and \n+\t* decl.c (java_init_decl_processing): Initialize new otable and\n \totable_syms type nodes and decls. Add new field \"index\" to\n \tmethod_type_node.\n \t* class.c (build_method_symbols_entry): New function.\n@@ -200,12 +204,12 @@\n \t(build_method_symbols_entry): New function.\n \t(emit_offset_symbol_table): New function.\n \t* expr.c (get_offset_table_index): New function.\n-\t(build_invokevirtual): Build array reference to otable at the index \n+\t(build_invokevirtual): Build array reference to otable at the index\n \treturned by get_offset_table_index, and use the result as the vtable\n \toffset.\n \t(build_invokeinterface): Similar.\n-\t* jcf-parse.c (yyparse): If indirect-dispatch, call \n-\temit_offset_symbol_table at the end of compilation, after all classes \n+\t* jcf-parse.c (yyparse): If indirect-dispatch, call\n+\temit_offset_symbol_table at the end of compilation, after all classes\n \thave been generated.\n \t* jvspec.c: Don't pass findirect-dispatch to jvgenmain.\n \t* lang.c (flag_indirect_dispatch): Define.\n@@ -230,7 +234,7 @@\n \t(expand_java_NEW): Generate calls for finalizer-free allocation.\n \t(build_invokevirtual): Fix java vtable layout for\n \tTARGET_VTABLE_USES_DESCRIPTORS.\n-\t* java-tree.h (enum java_tree_index): New entries: \n+\t* java-tree.h (enum java_tree_index): New entries:\n \tJTI_ALLOC_NO_FINALIZER_NODE, JTI_FINALIZE_IDENTIFIER_NODE.\n \t(alloc_no_finalizer_node, finalize_deintifier_node): New macros.\n \t(class_has_finalize_method): declare.\n@@ -376,7 +380,7 @@ Mon Dec 10 06:09:57 2001  Douglas B. Rupp  <rupp@gnat.com>\n \t* check-init.c (final_assign_error):  New helper function.\n \t(check_final_reassigned, check_init):  Use it.\n \t(check_init):  Also check IS_ARRAY_LENGTH_ACCESS for ARRAY.length.\n-\t\n+\n \t* java-tree.h (struct lang_decl, struct lang_decl_var):  Change all\n \tbit-fields to unsigned.\n \n@@ -421,7 +425,7 @@ Mon Dec 10 06:09:57 2001  Douglas B. Rupp  <rupp@gnat.com>\n 2001-12-02  Tang Ching-Hui  <nicholas@cs.nthu.edu.tw>\n \t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n-\t* expr.c (build_java_arrayaccess): Call save_expr on array for \n+\t* expr.c (build_java_arrayaccess): Call save_expr on array for\n \tcorrect evaluation order, modified comment, fixed indentation.\n \t* parse.y: (patch_assignment): Correctly extract the array base\n \tfrom the tree generate by build_java_arrayaccess, added comments.\n@@ -503,7 +507,7 @@ Mon Dec 10 06:09:57 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n 2001-11-08  Andreas Franck  <afranck@gmx.de>\n \n-\t* Make-lang.in (JAVA_INSTALL_NAME, JAVA_CROSS_NAME): Handle \n+\t* Make-lang.in (JAVA_INSTALL_NAME, JAVA_CROSS_NAME): Handle\n \tprogram_transform_name the way suggested by autoconf.\n \t(java.install-common): Also transform auxiliary program names with\n \tprogram_transform_name."}]}