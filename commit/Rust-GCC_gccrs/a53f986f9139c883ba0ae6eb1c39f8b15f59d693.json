{"sha": "a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzZjk4NmY5MTM5Yzg4M2JhMGFlNmViMWMzOWY4YjE1ZjU5ZDY5Mw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-29T21:03:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-29T21:03:07Z"}, "message": "testsuite_allocator.h (check_delete): New.\n\n\n2004-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/testsuite_allocator.h (check_delete): New.\n\t(check_new): Simplify.\n\t* testsuite/ext/array_allocator/check_delete.cc: New.\n\t* testsuite/ext/array_allocator/check_new.cc: Simplify.\n\t* testsuite/ext/debug_allocator/check_delete.cc: New.\n\t* testsuite/ext/debug_allocator/check_new.cc: Simplify.\n\t* testsuite/ext/malloc_allocator/check_delete.cc: New.\n\t* testsuite/ext/malloc_allocator/check_new.cc: Simplify.\n\t* testsuite/ext/mt_allocator/check_delete.cc: New.\n\t* testsuite/ext/mt_allocator/check_new.cc: Simplify.\n\t* testsuite/ext/new_allocator/check_delete.cc: New.\n\t* testsuite/ext/new_allocator/check_new.cc: Simplify.\n\t* testsuite/ext/pool_allocator/check_delete.cc: New.\n\t* testsuite/ext/pool_allocator/check_new.cc: Simplify.\n\nFrom-SVN: r89850", "tree": {"sha": "b03f7587a49d63a83a5aa7c190af64d53825a220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03f7587a49d63a83a5aa7c190af64d53825a220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/comments", "author": null, "committer": null, "parents": [{"sha": "bd004fefff18c7219c6654a4ed681ee47cd5c8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd004fefff18c7219c6654a4ed681ee47cd5c8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd004fefff18c7219c6654a4ed681ee47cd5c8d3"}], "stats": {"total": 452, "additions": 416, "deletions": 36}, "files": [{"sha": "f716244fe18bf72288f7bbf454369caae2e3522c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -1,3 +1,20 @@\n+2004-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/testsuite_allocator.h (check_delete): New.\n+\t(check_new): Simplify.\n+\t* testsuite/ext/array_allocator/check_delete.cc: New.\n+\t* testsuite/ext/array_allocator/check_new.cc: Simplify.\n+\t* testsuite/ext/debug_allocator/check_delete.cc: New.\n+\t* testsuite/ext/debug_allocator/check_new.cc: Simplify.\n+\t* testsuite/ext/malloc_allocator/check_delete.cc: New.\n+\t* testsuite/ext/malloc_allocator/check_new.cc: Simplify.\n+\t* testsuite/ext/mt_allocator/check_delete.cc: New.\n+\t* testsuite/ext/mt_allocator/check_new.cc: Simplify.\n+\t* testsuite/ext/new_allocator/check_delete.cc: New.\n+\t* testsuite/ext/new_allocator/check_new.cc: Simplify.\n+\t* testsuite/ext/pool_allocator/check_delete.cc: New.\n+\t* testsuite/ext/pool_allocator/check_new.cc: Simplify.\n+\n 2004-10-28  Chris Jefferson  <chris@bubblescope.net>\n \n \tPR libstdc++/18159"}, {"sha": "fa35f33afbdedc55dbaaa3cc53b2c2756747cf91", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_delete.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,61 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/array_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::array_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef unsigned int value_type;\n+  typedef std::tr1::array<value_type, 15> array_type;\n+  typedef array_allocator<value_type, array_type> allocator_type;\n+  array_type store;\n+  allocator_type a(&store);\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>(a)) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "5978904929858a629190b3c739ac6733f58fcb06", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_new.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -22,6 +22,7 @@\n \n #include <cstdlib>\n #include <ext/array_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::array_allocator;\n@@ -30,7 +31,6 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n@@ -42,18 +42,20 @@ operator delete(void *v) throw()\n }\n \n // These just help tracking down error messages.\n-bool test01() \n+void test01() \n { \n+  bool test __attribute__((unused)) = true;\n   typedef unsigned int value_type;\n   typedef std::tr1::array<value_type, 15> array_type;\n   typedef array_allocator<value_type, array_type> allocator_type;\n   array_type store;\n   allocator_type a(&store);\n-  return (__gnu_test::check_new<allocator_type, false>(a) == false); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, false>(a)) ); \n }\n \n int main()\n {\n-  return test01();\n+  test01();\n+  return 0;\n }\n "}, {"sha": "25cf731cd2b857eadf5cd96fb64a750a3f372774", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/check_delete.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,59 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/debug_allocator.h>\n+#include <ext/malloc_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::malloc_allocator;\n+using __gnu_cxx::debug_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef debug_allocator<malloc_allocator<unsigned int> > allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "3fe45989076be9df1aca92cf1adb8d9e628a95a3", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/check_new.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -23,6 +23,7 @@\n #include <cstdlib>\n #include <ext/debug_allocator.h>\n #include <ext/malloc_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::malloc_allocator;\n@@ -32,7 +33,6 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n@@ -43,14 +43,17 @@ operator delete(void *v) throw()\n   return std::free(v);\n }\n \n-bool test02() \n+// These just help tracking down error messages.\n+void test01() \n { \n+  bool test __attribute__((unused)) = true;\n   typedef debug_allocator<malloc_allocator<unsigned int> > allocator_type;\n-  return (__gnu_test::check_new<allocator_type, false>() == false); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, false>()) ); \n }\n \n int main()\n {\n-  return test02();\n+  test01();\n+  return 0;\n }\n "}, {"sha": "ea40e3c0803a96fc3da3e440cb994d4bad51d36f", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_delete.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,57 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/malloc_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::malloc_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef malloc_allocator<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "e6e159ca5109d0e3b7ce9871261e711a04d8a531", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_new.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -22,6 +22,7 @@\n \n #include <cstdlib>\n #include <ext/malloc_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::malloc_allocator;\n@@ -30,7 +31,6 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n@@ -42,14 +42,16 @@ operator delete(void *v) throw()\n }\n \n // These just help tracking down error messages.\n-bool test01() \n+void test01() \n { \n+  bool test __attribute__((unused)) = true;\n   typedef malloc_allocator<unsigned int> allocator_type;\n-  return (__gnu_test::check_new<allocator_type, false>() == false); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, false>()) ); \n }\n \n int main()\n {\n-  return test01();\n+  test01();\n+  return 0;\n }\n "}, {"sha": "81fde66bbc87b8badfe8a0d58896dc1f092b3ff7", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_delete.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,55 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/mt_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::__mt_alloc;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void* v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef __mt_alloc<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e3a08f33adbe75f19aa520f6bf851aa000b521db", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_new.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -22,6 +22,7 @@\n \n #include <cstdlib>\n #include <ext/mt_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::__mt_alloc;\n@@ -30,25 +31,26 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n void\n-operator delete(void *v) throw()\n+operator delete(void* v) throw()\n {\n   delete_called = true;\n   return std::free(v);\n }\n \n-bool test03() \n+void test01() \n { \n+  // Uses new but delete only optionally.\n+  bool test __attribute__((unused)) = true;\n   typedef __mt_alloc<unsigned int> allocator_type;\n-  return (__gnu_test::check_new<allocator_type, true>() == true); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n }\n \n int main()\n {\n-  return test03();\n+  test01();\n+  return 0;\n }\n-"}, {"sha": "49ce3addff08c0c202be4abea2279c8ce6ba083b", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_delete.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,57 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/new_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::new_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef new_allocator<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, true>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "39ab08e7d818a09c92653bac34f9912b240e80ab", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_new.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -22,6 +22,7 @@\n \n #include <cstdlib>\n #include <ext/new_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::new_allocator;\n@@ -30,7 +31,6 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n@@ -42,14 +42,16 @@ operator delete(void *v) throw()\n }\n \n // These just help tracking down error messages.\n-bool test01() \n+void test01() \n { \n+  bool test __attribute__((unused)) = true;\n   typedef new_allocator<unsigned int> allocator_type;\n-  return (__gnu_test::check_new<allocator_type, true>() == true); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n }\n \n int main()\n {\n-  return test01();\n+  test01();\n+  return 0;\n }\n "}, {"sha": "79ce85832e7f7a65789446257044fc14035a3e59", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_delete.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -0,0 +1,57 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/pool_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::__pool_alloc;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+void test01() \n+{ \n+  // Uses new, but delete only sometimes.\n+  bool test __attribute__((unused)) = true;\n+  typedef __pool_alloc<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "be37b8658e38d2e3fb0020daff9bb0df427569d4", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_new.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -22,6 +22,7 @@\n \n #include <cstdlib>\n #include <ext/pool_allocator.h>\n+#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n using __gnu_cxx::__pool_alloc;\n@@ -30,7 +31,6 @@ void*\n operator new(std::size_t n) throw(std::bad_alloc)\n {\n   new_called = true;\n-  requested = n;\n   return std::malloc(n);\n }\n \n@@ -41,14 +41,16 @@ operator delete(void *v) throw()\n   return std::free(v);\n }\n \n-bool test03() \n+void test01() \n { \n+  bool test __attribute__((unused)) = true;\n   typedef __pool_alloc<unsigned int> allocator_type;\n-  return (__gnu_test::check_new<allocator_type, true>() == true); \n+  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n }\n \n int main()\n {\n-  return test03();\n+  test01();\n+  return 0;\n }\n "}, {"sha": "7be830e83aa1da8d712852c71e800f479b8ad06e", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f986f9139c883ba0ae6eb1c39f8b15f59d693/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=a53f986f9139c883ba0ae6eb1c39f8b15f59d693", "patch": "@@ -40,9 +40,8 @@\n \n namespace \n {\n-  bool         new_called = false;\n-  bool         delete_called = false;\n-  std::size_t  requested = 0;\n+  bool new_called = false;\n+  bool delete_called = false;\n };\n \n namespace __gnu_test\n@@ -180,19 +179,24 @@ namespace __gnu_test\n   bool\n   check_construct_destroy(const char* tag, int expected_c, int expected_d);\n \n-  template<typename Alloc, bool uses_global_new_and_delete>\n+  template<typename Alloc, bool uses_global_new>\n     bool \n     check_new(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n       typename Alloc::pointer p = a.allocate(10);\n-      if (uses_global_new_and_delete)  \n-\ttest &= ( requested >= (10 * 15 * sizeof(long)) );\n-      \n-      test &= ( new_called == uses_global_new_and_delete );\n+      test &= ( new_called == uses_global_new );\n+      return test;\n+    }\n+\n+  template<typename Alloc, bool uses_global_delete>\n+    bool \n+    check_delete(Alloc a = Alloc())\n+    {\n+      bool test __attribute__((unused)) = true;\n+      typename Alloc::pointer p = a.allocate(10);\n       a.deallocate(p, 10);\n-      test &= ( delete_called == uses_global_new_and_delete );\n-      \n+      test &= ( delete_called == uses_global_delete );\n       return test;\n     }\n "}]}