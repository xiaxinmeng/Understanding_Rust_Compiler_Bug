{"sha": "81bc01c265b5115163d06812174653e1db13d537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiYzAxYzI2NWI1MTE1MTYzZDA2ODEyMTc0NjUzZTFkYjEzZDUzNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-14T22:42:42Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-14T22:42:42Z"}, "message": "Re-merges with Classpath, from various people:\n\n\t* java/lang/reflect/Modifier.java: Reindented.\n\t(toString): Only trim trailing space if text was added to\n\tStringBuffer.\n\t* java/lang/reflect/ReflectPermission: Reindented.\n\nFrom-SVN: r47028", "tree": {"sha": "9920797685b7e32b45ec0c20d4ab6d559e176429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9920797685b7e32b45ec0c20d4ab6d559e176429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81bc01c265b5115163d06812174653e1db13d537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc01c265b5115163d06812174653e1db13d537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bc01c265b5115163d06812174653e1db13d537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc01c265b5115163d06812174653e1db13d537/comments", "author": null, "committer": null, "parents": [{"sha": "0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7a7be7ceaf26e2355a8f623d0986a2cde145ab"}], "stats": {"total": 270, "additions": 168, "deletions": 102}, "files": [{"sha": "eead06f7300e930f43b82497852a626e02dcaf2d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc01c265b5115163d06812174653e1db13d537/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc01c265b5115163d06812174653e1db13d537/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=81bc01c265b5115163d06812174653e1db13d537", "patch": "@@ -1,13 +1,16 @@\n 2001-11-14  Tom Tromey  <tromey@redhat.com>\n \n+\tRe-merges with Classpath, from various people:\n+\t* java/lang/reflect/Modifier.java: Reindented.\n+\t(toString): Only trim trailing space if text was added to\n+\tStringBuffer.\n+\t* java/lang/reflect/ReflectPermission: Reindented.\n+\n \tRe-merges with Classpath, from various people:\n \t* java/lang/Double.java (parseDouble): Fixed ordering of\n \tmodifiers.\n \t* java/lang/reflect/AccessibleObject.java: Javadoc, reindented.\n \t* java/lang/reflect/Member.java: Reindented.\n-\t* java/lang/reflect/Modifier.java: Reindented.\n-\t(toString): Only trim trailing space if text was added to\n-\tStringBuffer.\n \t* java/util/ConcurrentModificationException.java: Javadoc\n \tupdates.\n \t* java/util/EmptyStackException.java: Likewise."}, {"sha": "5daa1275a37f26be48be1343d6f7ce09326acf38", "filename": "libjava/java/lang/reflect/Modifier.java", "status": "modified", "additions": 124, "deletions": 88, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc01c265b5115163d06812174653e1db13d537/libjava%2Fjava%2Flang%2Freflect%2FModifier.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc01c265b5115163d06812174653e1db13d537/libjava%2Fjava%2Flang%2Freflect%2FModifier.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FModifier.java?ref=81bc01c265b5115163d06812174653e1db13d537", "patch": "@@ -27,12 +27,6 @@\n \n package java.lang.reflect;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status: Believed complete and correct to version 1.2.\n- */\n-\n /**\n  * Modifier is a helper class with static methods to determine whether an\n  * int returned from getModifiers() represents static, public, protected,\n@@ -46,12 +40,13 @@\n  *\n  * @author John Keiser\n  * @author Tom Tromey <tromey@cygnus.com>\n- *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @see Member#getModifiers()\n  * @see Method#getModifiers()\n  * @see Field#getModifiers()\n  * @see Constructor#getModifiers()\n  * @see Class#getModifiers()\n+ * @since 1.1\n  */\n public class Modifier\n {\n@@ -60,226 +55,267 @@\n    * worthless.  However, this function is in the 1.1 spec, so it is added\n    * for completeness.</STRONG>\n    */\n-  public Modifier() {}\n+  public Modifier()\n+  {\n+  }\n \n-  /** Public: accessible from any other class. **/\n+  /**\n+   * Public: accessible from any other class.\n+   */\n   public static final int PUBLIC = 0x0001;\n \n-  /** Private: accessible only from the declaring class. **/\n+  /**\n+   * Private: accessible only from the same enclosing class.\n+   */\n   public static final int PRIVATE = 0x0002;\n \n-  /** Protected: accessible only to subclasses. **/\n+  /**\n+   * Protected: accessible only to subclasses, or within the package.\n+   */\n   public static final int PROTECTED = 0x0004;\n \n-  /** Static: field or method - can be accessed or invoked without an\n-      instance of the declaring class. **/\n+  /**\n+   * Static:<br><ul>\n+   * <li>Class: no enclosing instance for nested class.</li>\n+   * <li>Field or Method: can be accessed or invoked without an\n+   *     instance of the declaring class.</li>\n+   * </ul>\n+   */\n   public static final int STATIC = 0x0008;\n \n-  /** Final:<BR>\n-   * <UL>\n-   * <LI> Class: no subclasses allowed. </LI>\n-   * <LI> Field: cannot be changed. </LI>\n-   * <LI> Method: cannot be overriden. </LI>\n-   * </UL>\n+  /**\n+   * Final:<br><ul>\n+   * <li>Class: no subclasses allowed.</li>\n+   * <li>Field: cannot be changed.</li>\n+   * <li>Method: cannot be overriden.</li>\n+   * </ul>\n    */\n   public static final int FINAL = 0x0010;\n \n-  /** Synchronized: lock the class while calling this method. **/\n+  /**\n+   * Synchronized: Method: lock the class while calling this method.\n+   */\n   public static final int SYNCHRONIZED = 0x0020;\n \n-  /** Volatile: cannot be cached.<P> **/\n+  /**\n+   * Volatile: Field: cannot be cached.\n+   */\n   public static final int VOLATILE = 0x0040;\n \n-  /** Transient: not serialized or deserialized. **/\n+  /**\n+   * Transient: Field: not serialized or deserialized.\n+   */\n   public static final int TRANSIENT = 0x0080;\n \n-  /** Native: use JNI to call this method. **/\n+  /**\n+   * Native: Method: use JNI to call this method.\n+   */\n   public static final int NATIVE = 0x0100;\n \n-  /** Interface: is an interface. **/\n+  /**\n+   * Interface: Class: is an interface.\n+   */\n   public static final int INTERFACE = 0x0200;\n \n-  /** Abstract: class - may not be instantiated;\n-      method - may not be called. **/\n+  /**\n+   * Abstract:<br><ul>\n+   * <li>Class: may not be instantiated.</li>\n+   * <li>Method: may not be called.</li>\n+   * </ul>\n+   */\n   public static final int ABSTRACT = 0x0400;\n \n-  /** Class or method - expressions are FP-strict. **/\n+  /**\n+   * Strictfp: Method: expressions are FP-strict.<p>\n+   * Also used as a modifier for classes, to mean that all initializers\n+   * and constructors are FP-strict, but does not show up in\n+   * Class.getModifiers.\n+   */\n   public static final int STRICT = 0x0800;\n \n \n-  /* NOTE: THIS IS HERE BECAUSE IT IS IN THE VM SPEC.\n-     I INCLUDE IT FOR COMPLETENESS.  IT ATTACHES TO A CLASS AND MEANS\n-     \"Treat superclasses specially in invokespecial\". Note that it is the\n-     same as synchronized.  Reuse of the constant.  *shudder* */\n-  private static final int SUPER = 0x0020;\n+  /**\n+   * Super - treat invokespecial as polymorphic so that super.foo() works\n+   * according to the JLS. This is a reuse of the synchronized constant\n+   * to patch a hole in JDK 1.0. *shudder*.\n+   */\n+  static final int SUPER = 0x0020;\n \n-  // This can only used by other code in this package, so it is not public.\n+  /**\n+   * All the flags, only used by code in this package.\n+   */\n   static final int ALL_FLAGS = 0xfff;\n \n-  /** Check whether the given modifier is abstract.\n+  /**\n+   * Check whether the given modifier is abstract.\n    * @param mod the modifier.\n    * @return <code>true</code> if abstract, <code>false</code> otherwise.\n    */\n-  public static boolean isAbstract (int mod)\n+  public static boolean isAbstract(int mod)\n   {\n     return (mod & ABSTRACT) != 0;\n   }\n \n-  /** Check whether the given modifier is final.\n+  /**\n+   * Check whether the given modifier is final.\n    * @param mod the modifier.\n    * @return <code>true</code> if final, <code>false</code> otherwise.\n    */\n-  public static boolean isFinal (int mod)\n+  public static boolean isFinal(int mod)\n   {\n     return (mod & FINAL) != 0;\n   }\n \n-  /** Check whether the given modifier is an interface.\n+  /**\n+   * Check whether the given modifier is an interface.\n    * @param mod the modifier.\n    * @return <code>true</code> if an interface, <code>false</code> otherwise.\n    */\n-  public static boolean isInterface (int mod)\n+  public static boolean isInterface(int mod)\n   {\n     return (mod & INTERFACE) != 0;\n   }\n \n-  /** Check whether the given modifier is native.\n+  /**\n+   * Check whether the given modifier is native.\n    * @param mod the modifier.\n    * @return <code>true</code> if native, <code>false</code> otherwise.\n    */\n-  public static boolean isNative (int mod)\n+  public static boolean isNative(int mod)\n   {\n     return (mod & NATIVE) != 0;\n   }\n \n-  /** Check whether the given modifier is private.\n+  /**\n+   * Check whether the given modifier is private.\n    * @param mod the modifier.\n    * @return <code>true</code> if private, <code>false</code> otherwise.\n    */\n-  public static boolean isPrivate (int mod)\n+  public static boolean isPrivate(int mod)\n   {\n     return (mod & PRIVATE) != 0;\n   }\n \n-  /** Check whether the given modifier is protected.\n+  /**\n+   * Check whether the given modifier is protected.\n    * @param mod the modifier.\n    * @return <code>true</code> if protected, <code>false</code> otherwise.\n    */\n-  public static boolean isProtected (int mod)\n+  public static boolean isProtected(int mod)\n   {\n     return (mod & PROTECTED) != 0;\n   }\n \n-  /** Check whether the given modifier is public.\n+  /**\n+   * Check whether the given modifier is public.\n    * @param mod the modifier.\n    * @return <code>true</code> if public, <code>false</code> otherwise.\n    */\n-  public static boolean isPublic (int mod)\n+  public static boolean isPublic(int mod)\n   {\n     return (mod & PUBLIC) != 0;\n   }\n \n-  /** Check whether the given modifier is static.\n+  /**\n+   * Check whether the given modifier is static.\n    * @param mod the modifier.\n    * @return <code>true</code> if static, <code>false</code> otherwise.\n    */\n-  public static boolean isStatic (int mod)\n+  public static boolean isStatic(int mod)\n   {\n     return (mod & STATIC) != 0;\n   }\n \n-  /** Check whether the given modifier is strictfp.\n+  /**\n+   * Check whether the given modifier is strictfp.\n    * @param mod the modifier.\n    * @return <code>true</code> if strictfp, <code>false</code> otherwise.\n    */\n-  public static boolean isStrict (int mod)\n+  public static boolean isStrict(int mod)\n   {\n     return (mod & STRICT) != 0;\n   }\n \n-  /** Check whether the given modifier is synchronized.\n+  /**\n+   * Check whether the given modifier is synchronized.\n    * @param mod the modifier.\n    * @return <code>true</code> if synchronized, <code>false</code> otherwise.\n    */\n-  public static boolean isSynchronized (int mod)\n+  public static boolean isSynchronized(int mod)\n   {\n     return (mod & SYNCHRONIZED) != 0;\n   }\n \n-  /** Check whether the given modifier is transient.\n+  /**\n+   * Check whether the given modifier is transient.\n    * @param mod the modifier.\n    * @return <code>true</code> if transient, <code>false</code> otherwise.\n    */\n-  public static boolean isTransient (int mod)\n+  public static boolean isTransient(int mod)\n   {\n     return (mod & TRANSIENT) != 0;\n   }\n \n-  /** Check whether the given modifier is volatile.\n+  /**\n+   * Check whether the given modifier is volatile.\n    * @param mod the modifier.\n    * @return <code>true</code> if volatile, <code>false</code> otherwise.\n    */\n-  public static boolean isVolatile (int mod)\n+  public static boolean isVolatile(int mod)\n   {\n     return (mod & VOLATILE) != 0;\n   }\n \n-  /** Get a string representation of all the modifiers represented by the\n-   * given int.\n-   * The keywords are printed in this order:\n+  /**\n+   * Get a string representation of all the modifiers represented by the\n+   * given int. The keywords are printed in this order:\n    * <code>&lt;public|private|protected&gt; abstract static final transient\n-   * volatile native synchronized interface strictfp</code><P>\n-   *\n-   * <STRONG>This is, near as I can tell, the \"canonical order\" of modifiers\n-   * mentioned by Sun in the reference implementation.  I have inferred this\n-   * from the order of printing in the Field, Method and Constructor\n-   * classes.</STRONG>\n+   * volatile native synchronized interface strictfp</code>.\n    *\n    * @param mod the modifier.\n    * @return the String representing the modifiers.\n    */\n-  public static String toString (int mod)\n+  public static String toString(int mod)\n   {\n-    StringBuffer r = new StringBuffer ();\n-    toString(mod, r);\n-    return r.toString();\n+    return toString(mod, new StringBuffer()).toString();\n   }\n \n   /**\n-   * Package private helper toString() method that can take a StringBuffer.\n+   * Package helper method that can take a StringBuffer.\n    * @param mod the modifier\n    * @param r the StringBuffer to which the String representation is appended\n+   * @return r, with information appended\n    */\n-  static void toString (int mod, StringBuffer r)\n+  static StringBuffer toString(int mod, StringBuffer r)\n   {\n-    if (isPublic (mod))\n+    if (isPublic(mod))\n       r.append(\"public \");\n-    if (isProtected (mod))\n-      r.append(\"protected \");\n-    if (isPrivate (mod))\n+    if (isPrivate(mod))\n       r.append(\"private \");\n-    if (isAbstract (mod))\n+    if (isProtected(mod))\n+      r.append(\"protected \");\n+    if (isAbstract(mod))\n       r.append(\"abstract \");\n-    if (isStatic (mod))\n+    if (isStatic(mod))\n       r.append(\"static \");\n-    if (isFinal (mod))\n+    if (isFinal(mod))\n       r.append(\"final \");\n-    if (isTransient (mod))\n+    if (isTransient(mod))\n       r.append(\"transient \");\n-    if (isVolatile (mod))\n+    if (isVolatile(mod))\n       r.append(\"volatile \");\n-    if (isNative (mod))\n+    if (isNative(mod))\n       r.append(\"native \");\n-    if (isSynchronized (mod))\n+    if (isSynchronized(mod))\n       r.append(\"synchronized \");\n-    if (isInterface (mod))\n+    if (isInterface(mod))\n       r.append(\"interface \");\n-    if (isStrict (mod))\n+    if (isStrict(mod))\n       r.append(\"strictfp \");\n     \n     // Trim trailing space.\n-    int l = r.length();\n-    if (l > 0)\n-      r.setLength(l - 1);\n+    if ((mod & ALL_FLAGS) != 0)\n+      r.setLength(r.length() - 1);\n+    return r;\n   }\n }"}, {"sha": "2775b1f4a8bc8527135ae4a31768d9e1a3ecbe53", "filename": "libjava/java/lang/reflect/ReflectPermission.java", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc01c265b5115163d06812174653e1db13d537/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc01c265b5115163d06812174653e1db13d537/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java?ref=81bc01c265b5115163d06812174653e1db13d537", "patch": "@@ -1,13 +1,13 @@\n /* ReflectPermission.java - named permission for reflaction\n-   Copyright (C) 2000, 2001  Free Software Foundation\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -27,7 +27,6 @@\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status: Believed complete and correct to version 1.2.\n  */\n \n package java.lang.reflect;\n@@ -36,29 +35,57 @@\n \n /**\n  * This class implements permissions for reflection.  This is a named\n- * permission, and the only defined name is suppressAccessChecks.\n+ * permission, and the only defined name is suppressAccessChecks, which\n+ * allows suppression of normal Java objects when using reflection.\n+ *\n+ * <table>\n+ *  <tr>\n+ *   <th>Permission Target Name</th>\n+ *   <th>What Permission Allows</th>\n+ *   <th>Risk of Allowing Permission</th>\n+ *  </tr>\n+ *  <tr>\n+ *   <td><code>suppressAccessChecks</code></td>\n+ *   <td>Ability to access fields, invoke methods, and construct objects\n+ *       via reflection, including non-public members in contexts where\n+ *       such access is not legal at compile-time.</td>\n+ *   <td>This is dangerous. It exposes possibly confidential information,\n+ *       and malicious code could interfere with the internals of the Virtual\n+ *       Machine by corrupting private data.</td>\n+ *  </tr>\n+ * </table>\n  *\n  * @author Tom Tromey <tromey@redhat.com>\n- * @date November 18, 2000\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n-public final class ReflectPermission extends BasicPermission\n+public final class ReflectPermission\n+  extends BasicPermission\n {\n+  /**\n+   * Compatible with JDK 1.2.\n+   */\n+  private static final long serialVersionUID = 7412737110241507485L;\n+\n   /**\n    * Construct a ReflectPermission with the given name.\n+   *\n    * @param name The permission name\n    */\n-  public ReflectPermission (String name)\n+  public ReflectPermission(String name)\n   {\n-    super (name);\n+    super(name);\n   }\n \n   /**\n    * Construct a ReflectPermission with the given name.\n+   *\n    * @param name The permission name\n-   * @param actions The actions; this is ignored and should be null.\n+   * @param actions The actions; this is ignored and should be null\n    */\n-  public ReflectPermission (String name, String actions)\n+  public ReflectPermission(String name, String actions)\n   {\n-    super (name, actions);\n+    super(name, actions);\n   }\n }"}]}