{"sha": "7120f082181be2fc8cfc4f121809da71d2554503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyMGYwODIxODFiZTJmYzhjZmM0ZjEyMTgwOWRhNzFkMjU1NDUwMw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-03-16T17:38:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:49Z"}, "message": "[Ada] Fix asymmetries in detection of overlapping actuals\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Examine types of\n\tboth formal parameters; refactor a complex detection of\n\tby-reference types.", "tree": {"sha": "4efb2d50f8523d8ec478a085db2105838e44645f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4efb2d50f8523d8ec478a085db2105838e44645f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7120f082181be2fc8cfc4f121809da71d2554503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7120f082181be2fc8cfc4f121809da71d2554503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7120f082181be2fc8cfc4f121809da71d2554503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7120f082181be2fc8cfc4f121809da71d2554503/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd344e9570398b7436a4ed854618d5c186b20c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd344e9570398b7436a4ed854618d5c186b20c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd344e9570398b7436a4ed854618d5c186b20c02"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "4ec96fc3c9d4c9ec7b7a1bba1ac659c4d9a9c8bc", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7120f082181be2fc8cfc4f121809da71d2554503/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7120f082181be2fc8cfc4f121809da71d2554503/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=7120f082181be2fc8cfc4f121809da71d2554503", "patch": "@@ -3669,6 +3669,9 @@ package body Sem_Warn is\n    ---------------------------------\n \n    procedure Warn_On_Overlapping_Actuals (Subp : Entity_Id; N : Node_Id) is\n+      function Explicitly_By_Reference (Formal_Id : Entity_Id) return Boolean;\n+      --  Returns True iff the type of Formal_Id is explicitly by-reference\n+\n       function Refer_Same_Object\n         (Act1 : Node_Id;\n          Act2 : Node_Id) return Boolean;\n@@ -3680,6 +3683,24 @@ package body Sem_Warn is\n       --  object_name is known to refer to the same object as the other name\n       --  (RM 6.4.1(6.11/3))\n \n+      -----------------------------\n+      -- Explicitly_By_Reference --\n+      -----------------------------\n+\n+      function Explicitly_By_Reference\n+        (Formal_Id : Entity_Id)\n+         return Boolean\n+      is\n+         Typ : constant Entity_Id := Underlying_Type (Etype (Formal_Id));\n+      begin\n+         if Present (Typ) then\n+            return Is_By_Reference_Type (Typ)\n+              or else Convention (Typ) = Convention_Ada_Pass_By_Reference;\n+         else\n+            return False;\n+         end if;\n+      end Explicitly_By_Reference;\n+\n       -----------------------\n       -- Refer_Same_Object --\n       -----------------------\n@@ -3792,25 +3813,23 @@ package body Sem_Warn is\n                   then\n                      null;\n \n-                  --  If type is explicitly not by-copy, assume that\n-                  --  aliasing is intended.\n+                  --  If type is explicitly by-reference, then it is not\n+                  --  covered by the legality rule, which only applies to\n+                  --  elementary types. Actually, the aliasing is most\n+                  --  likely intended, so don't emit a warning either.\n \n-                  elsif\n-                    Present (Underlying_Type (Etype (Form1)))\n-                      and then\n-                        (Is_By_Reference_Type\n-                          (Underlying_Type (Etype (Form1)))\n-                          or else\n-                            Convention (Underlying_Type (Etype (Form1))) =\n-                                         Convention_Ada_Pass_By_Reference)\n+                  elsif Explicitly_By_Reference (Form1)\n+                    or else Explicitly_By_Reference (Form2)\n                   then\n                      null;\n \n                   --  Under Ada 2012 we only report warnings on overlapping\n                   --  arrays and record types if switch is set.\n \n                   elsif Ada_Version >= Ada_2012\n-                    and then not Is_Elementary_Type (Etype (Form1))\n+                    and then not (Is_Elementary_Type (Etype (Form1))\n+                                    and then\n+                                  Is_Elementary_Type (Etype (Form2)))\n                     and then not Warn_On_Overlap\n                   then\n                      null;"}]}