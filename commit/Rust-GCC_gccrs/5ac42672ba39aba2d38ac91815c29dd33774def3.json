{"sha": "5ac42672ba39aba2d38ac91815c29dd33774def3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjNDI2NzJiYTM5YWJhMmQzOGFjOTE4MTVjMjlkZDMzNzc0ZGVmMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-04-09T22:45:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-04-09T22:45:38Z"}, "message": "ipa.c (cgraph_externally_visible_p, [...]): Drop aliased parameter.\n\n\t* ipa.c (cgraph_externally_visible_p, varpool_externally_visible_p): Drop\n\taliased parameter.\n\t(function_and_variable_visibility): Do not handle alias pairs.\n\t* cgraph.c (varpool_externally_visible_p): Update prototype.\n\t* varpool.c (varpool_add_new_variable): Update.\n\nFrom-SVN: r197652", "tree": {"sha": "2dfec772280a1ddb1d00f01fa8d35b2912583c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfec772280a1ddb1d00f01fa8d35b2912583c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac42672ba39aba2d38ac91815c29dd33774def3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac42672ba39aba2d38ac91815c29dd33774def3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac42672ba39aba2d38ac91815c29dd33774def3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac42672ba39aba2d38ac91815c29dd33774def3/comments", "author": null, "committer": null, "parents": [{"sha": "d74e340d7c94bd5a4754a58f2993def64cfe1edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74e340d7c94bd5a4754a58f2993def64cfe1edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74e340d7c94bd5a4754a58f2993def64cfe1edf"}], "stats": {"total": 73, "additions": 16, "deletions": 57}, "files": [{"sha": "a623e88b80a9f4b088a3657181332123bd1d4487", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ac42672ba39aba2d38ac91815c29dd33774def3", "patch": "@@ -1,3 +1,11 @@\n+2013-04-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (cgraph_externally_visible_p, varpool_externally_visible_p): Drop\n+\taliased parameter.\n+\t(function_and_variable_visibility): Do not handle alias pairs.\n+\t* cgraph.c (varpool_externally_visible_p): Update prototype.\n+\t* varpool.c (varpool_add_new_variable): Update.\n+\n 2013-04-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (minmax_arithsi_non_canon): New pattern."}, {"sha": "ef926ec12d81fec1a4b90e25b0a970dc626ef1ff", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=5ac42672ba39aba2d38ac91815c29dd33774def3", "patch": "@@ -726,7 +726,7 @@ void debug_varpool_node_set (varpool_node_set);\n void free_varpool_node_set (varpool_node_set);\n void ipa_discover_readonly_nonaddressable_vars (void);\n bool cgraph_comdat_can_be_unshared_p (struct cgraph_node *);\n-bool varpool_externally_visible_p (struct varpool_node *, bool);\n+bool varpool_externally_visible_p (struct varpool_node *);\n \n /* In predict.c  */\n bool cgraph_maybe_hot_edge_p (struct cgraph_edge *e);"}, {"sha": "f53d9db29b2b13ebb721618a1a5f670b31dde750", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 55, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=5ac42672ba39aba2d38ac91815c29dd33774def3", "patch": "@@ -573,7 +573,7 @@ cgraph_comdat_can_be_unshared_p (struct cgraph_node *node)\n \n static bool\n cgraph_externally_visible_p (struct cgraph_node *node,\n-\t\t\t     bool whole_program, bool aliased)\n+\t\t\t     bool whole_program)\n {\n   if (!node->local.finalized)\n     return false;\n@@ -582,11 +582,6 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n \t  || DECL_EXTERNAL (node->symbol.decl)))\n     return false;\n \n-  /* Do not even try to be smart about aliased nodes.  Until we properly\n-     represent everything by same body alias, these are just evil.  */\n-  if (aliased)\n-    return true;\n-\n   /* Do not try to localize built-in functions yet.  One of problems is that we\n      end up mangling their asm for WHOPR that makes it impossible to call them\n      using the implicit built-in declarations anymore.  Similarly this enables\n@@ -638,7 +633,7 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n /* Return true when variable VNODE should be considered externally visible.  */\n \n bool\n-varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n+varpool_externally_visible_p (struct varpool_node *vnode)\n {\n   /* Do not touch weakrefs; while they are not externally visible,\n      dropping their DECL_EXTERNAL flags confuse most\n@@ -652,11 +647,6 @@ varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n   if (!DECL_COMDAT (vnode->symbol.decl) && !TREE_PUBLIC (vnode->symbol.decl))\n     return false;\n \n-  /* Do not even try to be smart about aliased nodes.  Until we properly\n-     represent everything by same body alias, these are just evil.  */\n-  if (aliased)\n-    return true;\n-\n   /* If linker counts on us, we must preserve the function.  */\n   if (symtab_used_from_object_file_p ((symtab_node) vnode))\n     return true;\n@@ -733,42 +723,9 @@ function_and_variable_visibility (bool whole_program)\n {\n   struct cgraph_node *node;\n   struct varpool_node *vnode;\n-  struct pointer_set_t *aliased_nodes = pointer_set_create ();\n-  struct pointer_set_t *aliased_vnodes = pointer_set_create ();\n-  unsigned i;\n-  alias_pair *p;\n \n-  /* Discover aliased nodes.  */\n-  FOR_EACH_VEC_SAFE_ELT (alias_pairs, i, p)\n-    {\n-      if (dump_file)\n-      fprintf (dump_file, \"Alias %s->%s\",\n-\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (p->decl)),\n-\t       IDENTIFIER_POINTER (p->target));\n-\t\t\n-      if ((node = cgraph_node_for_asm (p->target)) != NULL\n-\t   && !DECL_EXTERNAL (node->symbol.decl))\n-\t{\n-\t  if (!node->analyzed)\n-\t    continue;\n-\t  cgraph_mark_force_output_node (node);\n-\t  pointer_set_insert (aliased_nodes, node);\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  node %s/%i\",\n-\t\t     cgraph_node_name (node), node->uid);\n-\t}\n-      else if ((vnode = varpool_node_for_asm (p->target)) != NULL\n-\t       && !DECL_EXTERNAL (vnode->symbol.decl))\n-\t{\n-\t  vnode->symbol.force_output = 1;\n-\t  pointer_set_insert (aliased_vnodes, vnode);\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  varpool node %s\",\n-\t\t     varpool_node_name (vnode));\n-\t}\n-      if (dump_file)\n-\tfprintf (dump_file, \"\\n\");\n-    }\n+  /* All aliases should be procssed at this point.  */\n+  gcc_checking_assert (!alias_pairs || !alias_pairs->length());\n \n   FOR_EACH_FUNCTION (node)\n     {\n@@ -817,9 +774,7 @@ function_and_variable_visibility (bool whole_program)\n \t\t  && !DECL_COMDAT (node->symbol.decl))\n       \t          || TREE_PUBLIC (node->symbol.decl)\n \t\t  || DECL_EXTERNAL (node->symbol.decl));\n-      if (cgraph_externally_visible_p (node, whole_program,\n-\t\t\t\t       pointer_set_contains (aliased_nodes,\n-\t\t\t\t\t\t\t     node)))\n+      if (cgraph_externally_visible_p (node, whole_program))\n         {\n \t  gcc_assert (!node->global.inlined_to);\n \t  node->symbol.externally_visible = true;\n@@ -898,9 +853,7 @@ function_and_variable_visibility (bool whole_program)\n     {\n       if (!vnode->finalized)\n         continue;\n-      if (varpool_externally_visible_p\n-\t    (vnode, \n-\t     pointer_set_contains (aliased_vnodes, vnode)))\n+      if (varpool_externally_visible_p (vnode))\n \tvnode->symbol.externally_visible = true;\n       else\n         vnode->symbol.externally_visible = false;\n@@ -913,8 +866,6 @@ function_and_variable_visibility (bool whole_program)\n \t  vnode->symbol.resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t}\n     }\n-  pointer_set_destroy (aliased_nodes);\n-  pointer_set_destroy (aliased_vnodes);\n \n   if (dump_file)\n     {"}, {"sha": "dbf519e6137c2fec12529d277e5600eb408ec472", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac42672ba39aba2d38ac91815c29dd33774def3/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=5ac42672ba39aba2d38ac91815c29dd33774def3", "patch": "@@ -191,7 +191,7 @@ varpool_add_new_variable (tree decl)\n   struct varpool_node *node;\n   varpool_finalize_decl (decl);\n   node = varpool_node_for_decl (decl);\n-  if (varpool_externally_visible_p (node, false))\n+  if (varpool_externally_visible_p (node))\n     node->symbol.externally_visible = true;\n }\n "}]}