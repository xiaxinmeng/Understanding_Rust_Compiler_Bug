{"sha": "da18dcc13337dc0e410b93548f41f91175aeb5a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExOGRjYzEzMzM3ZGMwZTQxMGI5MzU0OGY0MWY5MTE3NWFlYjVhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-12-08T22:18:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-12-08T22:18:19Z"}, "message": "* testsuite/30_threads/async/async.cc: Fix race condition in test.\n\nFrom-SVN: r205795", "tree": {"sha": "1b10de67d14a2f0f7e219cd654f11f9b8924e4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b10de67d14a2f0f7e219cd654f11f9b8924e4f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da18dcc13337dc0e410b93548f41f91175aeb5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da18dcc13337dc0e410b93548f41f91175aeb5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da18dcc13337dc0e410b93548f41f91175aeb5a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da18dcc13337dc0e410b93548f41f91175aeb5a8/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7337ddf4bfe0544121c8735624f90b6bc6bc33c3"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "b9536b448bb508b19dea3098a2b97fdabac0eac2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da18dcc13337dc0e410b93548f41f91175aeb5a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da18dcc13337dc0e410b93548f41f91175aeb5a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da18dcc13337dc0e410b93548f41f91175aeb5a8", "patch": "@@ -1,3 +1,7 @@\n+2013-12-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/30_threads/async/async.cc: Fix race condition in test.\n+\n 2013-12-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/add_const/requirements/explicit_instantiation.cc:"}, {"sha": "05fd23cc96a56dd0b8d9141dc81fd94cf224fdf3", "filename": "libstdc++-v3/testsuite/30_threads/async/async.cc", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da18dcc13337dc0e410b93548f41f91175aeb5a8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da18dcc13337dc0e410b93548f41f91175aeb5a8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc?ref=da18dcc13337dc0e410b93548f41f91175aeb5a8", "patch": "@@ -29,39 +29,34 @@\n \n using namespace std;\n \n-struct work {\n-  typedef void result_type;\n-  void operator()(mutex& m, condition_variable& cv)\n-  {\n-    unique_lock<mutex> l(m);\n-    cv.notify_one();\n-  }\n-};\n+void work(mutex& m)\n+{\n+  unique_lock<mutex> l(m);\n+}\n \n void test01()\n {\n   mutex m;\n-  condition_variable cv;\n   unique_lock<mutex> l(m);\n-  future<void> f1 = async(launch::async, work(), ref(m), ref(cv));\n-  cv.wait(l);\n-  f1.get();\n+  future<void> f1 = async(launch::async, &work, ref(m));\n+  l.unlock();  // allow async thread to proceed\n+  f1.get();    // wait for it to finish\n }\n \n void test02()\n {\n   bool test __attribute__((unused)) = true;\n \n   mutex m;\n-  condition_variable cv;\n   unique_lock<mutex> l(m);\n-  future<void> f1 = async(launch::async, work(), ref(m), ref(cv));\n+  future<void> f1 = async(launch::async, &work, ref(m));\n   std::future_status status;\n   status = f1.wait_for(std::chrono::milliseconds(1));\n   VERIFY( status == std::future_status::timeout );\n   status = f1.wait_until(std::chrono::system_clock::now());\n   VERIFY( status == std::future_status::timeout );\n-  cv.wait(l);\n+  l.unlock();  // allow async thread to proceed\n+  f1.wait();   // wait for it to finish\n   status = f1.wait_for(std::chrono::milliseconds(0));\n   VERIFY( status == std::future_status::ready );\n   status = f1.wait_until(std::chrono::system_clock::now());"}]}