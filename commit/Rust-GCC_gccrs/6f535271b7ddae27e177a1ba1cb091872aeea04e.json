{"sha": "6f535271b7ddae27e177a1ba1cb091872aeea04e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1MzUyNzFiN2RkYWUyN2UxNzdhMWJhMWNiMDkxODcyYWVlYTA0ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-10-20T09:27:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-10-20T09:27:09Z"}, "message": "re PR fortran/31608 (wrong types in character array/scalar binop)\n\n2007-10-20  Paul Thomas  <pault@gcc.gnu.org>\n\t    FX Coudert <fxcoudert@gcc.gnu.org>\n\n\tPR fortran/31608\n\t* trans-array.c (gfc_conv_expr_descriptor): For all except\n\tindirect references, use gfc_trans_scalar_assign instead of\n\tgfc_add_modify_expr.\n\t* iresolve.c (check_charlen_present): Separate creation of cl\n\tif necessary and add code to treat an EXPR_ARRAY.\n\t(gfc_resolve_char_achar): New function.\n\t(gfc_resolve_achar, gfc_resolve_char): Call it.\n\t(gfc_resolve_transfer): If the MOLD expression does not have a\n\tcharacter length expression, get it from a constant length.\n\n2007-10-20  Paul Thomas  <pault@gcc.gnu.org>\n\t    FX Coudert <fxcoudert@gcc.gnu.org>\n\n\tPR fortran/31608\n\t* gfortran.dg/char_cast_1.f90: New test.\n\n\nCo-Authored-By: Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n\nFrom-SVN: r129505", "tree": {"sha": "3fa345cde095245a568f75f1889395bfe390ddd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa345cde095245a568f75f1889395bfe390ddd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f535271b7ddae27e177a1ba1cb091872aeea04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f535271b7ddae27e177a1ba1cb091872aeea04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f535271b7ddae27e177a1ba1cb091872aeea04e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f535271b7ddae27e177a1ba1cb091872aeea04e/comments", "author": null, "committer": null, "parents": [{"sha": "0362597e222df3924c7317831515daaa37a2a459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0362597e222df3924c7317831515daaa37a2a459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0362597e222df3924c7317831515daaa37a2a459"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "14e65ca582abc95450d3cd2772c29c5862c2a5ca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6f535271b7ddae27e177a1ba1cb091872aeea04e", "patch": "@@ -1,3 +1,17 @@\n+2007-10-20  Paul Thomas  <pault@gcc.gnu.org>\n+\t    FX Coudert <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31608\n+\t* trans-array.c (gfc_conv_expr_descriptor): For all except\n+\tindirect references, use gfc_trans_scalar_assign instead of\n+\tgfc_add_modify_expr.\n+\t* iresolve.c (check_charlen_present): Separate creation of cl\n+\tif necessary and add code to treat an EXPR_ARRAY.\n+\t(gfc_resolve_char_achar): New function.\n+\t(gfc_resolve_achar, gfc_resolve_char): Call it.\n+\t(gfc_resolve_transfer): If the MOLD expression does not have a\n+\tcharacter length expression, get it from a constant length.\n+\n 2007-10-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33544"}, {"sha": "6de83ee9dc25a64b8080b411d94b908b333c64dc", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=6f535271b7ddae27e177a1ba1cb091872aeea04e", "patch": "@@ -62,14 +62,24 @@ gfc_get_string (const char *format, ...)\n static void\n check_charlen_present (gfc_expr *source)\n {\n-  if (source->expr_type == EXPR_CONSTANT && source->ts.cl == NULL)\n+  if (source->ts.cl == NULL)\n     {\n       source->ts.cl = gfc_get_charlen ();\n       source->ts.cl->next = gfc_current_ns->cl_list;\n       gfc_current_ns->cl_list = source->ts.cl;\n+    }\n+\n+  if (source->expr_type == EXPR_CONSTANT)\n+    {\n       source->ts.cl->length = gfc_int_expr (source->value.character.length);\n       source->rank = 0;\n     }\n+  else if (source->expr_type == EXPR_ARRAY)\n+    {\n+      source->ts.cl->length =\n+\tgfc_int_expr (source->value.constructor->expr->value.character.length);\n+      source->rank = 1;\n+    }\n }\n \n /* Helper function for resolving the \"mask\" argument.  */\n@@ -132,8 +142,9 @@ gfc_resolve_access (gfc_expr *f, gfc_expr *name ATTRIBUTE_UNUSED,\n }\n \n \n-void\n-gfc_resolve_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind)\n+static void\n+gfc_resolve_char_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind,\n+\t\t\tconst char *name)\n {\n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = (kind == NULL)\n@@ -143,12 +154,19 @@ gfc_resolve_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind)\n   gfc_current_ns->cl_list = f->ts.cl;\n   f->ts.cl->length = gfc_int_expr (1);\n \n-  f->value.function.name = gfc_get_string (\"__achar_%d_%c%d\", f->ts.kind,\n+  f->value.function.name = gfc_get_string (name, f->ts.kind,\n \t\t\t\t\t   gfc_type_letter (x->ts.type),\n \t\t\t\t\t   x->ts.kind);\n }\n \n \n+void\n+gfc_resolve_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind)\n+{\n+  gfc_resolve_char_achar (f, x, kind, \"__achar_%d_%c%d\");\n+}\n+\n+\n void\n gfc_resolve_acos (gfc_expr *f, gfc_expr *x)\n {\n@@ -379,12 +397,7 @@ gfc_resolve_ceiling (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n void\n gfc_resolve_char (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n {\n-  f->ts.type = BT_CHARACTER;\n-  f->ts.kind = (kind == NULL)\n-\t     ? gfc_default_character_kind : mpz_get_si (kind->value.integer);\n-  f->value.function.name\n-    = gfc_get_string (\"__char_%d_%c%d\", f->ts.kind,\n-\t\t      gfc_type_letter (a->ts.type), a->ts.kind);\n+  gfc_resolve_char_achar (f, a, kind, \"__char_%d_%c%d\");\n }\n \n \n@@ -2270,6 +2283,9 @@ gfc_resolve_transfer (gfc_expr *f, gfc_expr *source ATTRIBUTE_UNUSED,\n   /* TODO: Make this do something meaningful.  */\n   static char transfer0[] = \"__transfer0\", transfer1[] = \"__transfer1\";\n \n+  if (mold->ts.type == BT_CHARACTER && !mold->ts.cl->length)\n+    mold->ts.cl->length = gfc_int_expr (mold->value.character.length);\n+\n   f->ts = mold->ts;\n \n   if (size == NULL && mold->rank == 0)"}, {"sha": "680d3b4b4ace84d206ff4ffb041069c6f97e701e", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=6f535271b7ddae27e177a1ba1cb091872aeea04e", "patch": "@@ -4727,7 +4727,15 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       gfc_add_block_to_block (&block, &rse.pre);\n       gfc_add_block_to_block (&block, &lse.pre);\n \n-      gfc_add_modify_expr (&block, lse.expr, rse.expr);\n+      if (TREE_CODE (rse.expr) != INDIRECT_REF)\n+\t{\n+\t  lse.string_length = rse.string_length;\n+\t  tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true,\n+\t\t\t\t  expr->expr_type == EXPR_VARIABLE);\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\t}\n+      else\n+\tgfc_add_modify_expr (&block, lse.expr, rse.expr);\n \n       /* Finish the copying loops.  */\n       gfc_trans_scalarizing_loops (&loop, &block);"}, {"sha": "65ec81916571333053070f6a868e4a0dbac9ba54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f535271b7ddae27e177a1ba1cb091872aeea04e", "patch": "@@ -1,3 +1,9 @@\n+2007-10-20  Paul Thomas  <pault@gcc.gnu.org>\n+\t    FX Coudert <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31608\n+\t* gfortran.dg/char_cast_1.f90: New test.\n+\n 2007-10-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/default_format_denormal_2.f90: xfail on FreeBSD."}, {"sha": "08458b7521996eeef56606070ccefe9a1981d0b9", "filename": "gcc/testsuite/gfortran.dg/char_cast_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f535271b7ddae27e177a1ba1cb091872aeea04e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90?ref=6f535271b7ddae27e177a1ba1cb091872aeea04e", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+!\n+! Check the fix for PR31608 in all it's various manifestations:)\n+! Contributed by Richard Guenther <rguenth@gcc.gnu.org>\n+!\n+  character(len=1) :: string = \"z\"\n+  integer :: i(1) = (/100/)\n+  print *, Up(\"abc\")\n+  print *, transfer(((transfer(string,\"x\",1))), \"x\",1)\n+  print *, transfer(char(i), \"x\")\n+  print *, Upper (\"abcdefg\")\n+ contains\n+  Character (len=20) Function Up (string)\n+    Character(len=*) string\n+    character(1) :: chr\n+    Up = transfer(achar(iachar(transfer(string,chr,1))), \"x\")\n+    return\n+  end function Up\n+  Character (len=20) Function Upper (string)\n+    Character(len=*) string\n+    Upper =                                                                &\n+     transfer(merge(transfer(string,\"x\",len(string)),    &\n+       string, .true.), \"x\")\n+    return\n+  end function Upper\n+end\n+! The sign that all is well is that [S.5][1] appears twice.\n+! { dg-final { scan-tree-dump-times \"\\\\\\[S\\.5\\\\\\]\\\\\\[1\\\\\\]\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}