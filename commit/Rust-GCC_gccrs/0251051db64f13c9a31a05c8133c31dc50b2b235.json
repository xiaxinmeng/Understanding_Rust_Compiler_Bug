{"sha": "0251051db64f13c9a31a05c8133c31dc50b2b235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1MTA1MWRiNjRmMTNjOWEzMWEwNWM4MTMzYzMxZGM1MGIyYjIzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T20:17:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T20:17:44Z"}, "message": "c++: Ensure correct destruction order of local statics [PR99613]\n\nAs mentioned in the PR, if end of two constructions of local statics\nis strongly ordered, their destructors should be run in the reverse order.\nAs we run __cxa_guard_release before calling __cxa_atexit, it is possible\nthat we have two threads that access two local statics in the same order\nfor the first time, one thread wins the __cxa_guard_acquire on the first\none but is rescheduled in between the __cxa_guard_release and __cxa_atexit\ncalls, then the other thread is scheduled and wins __cxa_guard_acquire\non the second one and calls __cxa_quard_release and __cxa_atexit and only\nafterwards the first thread calls its __cxa_atexit.  This means a variable\nwhose completion of the constructor strongly happened after the completion\nof the other one will be destructed after the other variable is destructed.\n\nThe following patch fixes that by swapping the __cxa_guard_release and\n__cxa_atexit calls.\n\n2021-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99613\n\t* decl.c (expand_static_init): For thread guards, call __cxa_atexit\n\tbefore calling __cxa_guard_release rather than after it.  Formatting\n\tfixes.", "tree": {"sha": "7c7e67026f7c70ed9b7cd6dab4117dedca078a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7e67026f7c70ed9b7cd6dab4117dedca078a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0251051db64f13c9a31a05c8133c31dc50b2b235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251051db64f13c9a31a05c8133c31dc50b2b235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0251051db64f13c9a31a05c8133c31dc50b2b235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251051db64f13c9a31a05c8133c31dc50b2b235/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "8e8f37d060e6f72bf68a22d53f155f68921d1da0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0251051db64f13c9a31a05c8133c31dc50b2b235/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0251051db64f13c9a31a05c8133c31dc50b2b235/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0251051db64f13c9a31a05c8133c31dc50b2b235", "patch": "@@ -9265,17 +9265,25 @@ expand_static_init (tree decl, tree init)\n \n \t  /* Do the initialization itself.  */\n \t  init = add_stmt_to_compound (begin, init);\n-\t  init = add_stmt_to_compound\n-\t    (init, build2 (MODIFY_EXPR, void_type_node, flag, boolean_true_node));\n-\t  init = add_stmt_to_compound\n-\t    (init, build_call_n (release_fn, 1, guard_addr));\n+\t  init = add_stmt_to_compound (init,\n+\t\t\t\t       build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t\t       flag, boolean_true_node));\n+\n+\t  /* Use atexit to register a function for destroying this static\n+\t     variable.  Do this before calling __cxa_guard_release.  */\n+\t  init = add_stmt_to_compound (init, register_dtor_fn (decl));\n+\n+\t  init = add_stmt_to_compound (init, build_call_n (release_fn, 1,\n+\t\t\t\t\t\t\t   guard_addr));\n \t}\n       else\n-\tinit = add_stmt_to_compound (init, set_guard (guard));\n+\t{\n+\t  init = add_stmt_to_compound (init, set_guard (guard));\n \n-      /* Use atexit to register a function for destroying this static\n-\t variable.  */\n-      init = add_stmt_to_compound (init, register_dtor_fn (decl));\n+\t  /* Use atexit to register a function for destroying this static\n+\t     variable.  */\n+\t  init = add_stmt_to_compound (init, register_dtor_fn (decl));\n+\t}\n \n       finish_expr_stmt (init);\n "}]}