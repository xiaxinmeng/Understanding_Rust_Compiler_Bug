{"sha": "5c87e61f96e0b394ce406bf9967c92708a16becc", "node_id": "C_kwDOANBUbNoAKDVjODdlNjFmOTZlMGIzOTRjZTQwNmJmOTk2N2M5MjcwOGExNmJlY2M", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-15T18:27:34Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-16T21:15:56Z"}, "message": "clang-format and minor cleanup", "tree": {"sha": "7bd431f6cd496e67e3ac8947f975a636093a1485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd431f6cd496e67e3ac8947f975a636093a1485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c87e61f96e0b394ce406bf9967c92708a16becc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c87e61f96e0b394ce406bf9967c92708a16becc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c87e61f96e0b394ce406bf9967c92708a16becc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c87e61f96e0b394ce406bf9967c92708a16becc/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a52df9440a78ec5221c7f2430f06e770133e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a52df9440a78ec5221c7f2430f06e770133e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a52df9440a78ec5221c7f2430f06e770133e06"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "668e8ba8f52c14275887dd224905c8d193c11d7e", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=5c87e61f96e0b394ce406bf9967c92708a16becc", "patch": "@@ -35,7 +35,7 @@ namespace Compile {\n \n struct fncontext\n {\n-  ::tree fndecl;\n+  tree fndecl;\n   ::Bvariable *ret_addr;\n };\n \n@@ -61,19 +61,19 @@ class Context\n \trust_assert (ok);\n \n \ttree compiled = TyTyCompile::compile (backend, lookup);\n-\tcompiled_type_map.insert (std::pair<HirId, tree > (ref, compiled));\n+\tcompiled_type_map.insert (std::pair<HirId, tree> (ref, compiled));\n \tbuiltin_range.insert (ref);\n       }\n   }\n \n-  bool lookup_compiled_types (HirId id, ::tree *type,\n+  bool lookup_compiled_types (HirId id, tree *type,\n \t\t\t      const TyTy::BaseType *ref = nullptr)\n   {\n     if (ref != nullptr)\n       {\n \tfor (auto it = mono.begin (); it != mono.end (); it++)\n \t  {\n-\t    std::pair<HirId, ::tree > &val = it->second;\n+\t    std::pair<HirId, tree> &val = it->second;\n \t    const TyTy::BaseType *r = it->first;\n \n \t    if (ref->is_equal (*r))\n@@ -94,14 +94,14 @@ class Context\n     return true;\n   }\n \n-  void insert_compiled_type (HirId id, ::tree type,\n+  void insert_compiled_type (HirId id, tree type,\n \t\t\t     const TyTy::BaseType *ref = nullptr)\n   {\n     rust_assert (builtin_range.find (id) == builtin_range.end ());\n-    compiled_type_map.insert (std::pair<HirId, tree > (id, type));\n+    compiled_type_map.insert (std::pair<HirId, tree> (id, type));\n     if (ref != nullptr)\n       {\n-\tstd::pair<HirId, ::tree > elem (id, type);\n+\tstd::pair<HirId, tree> elem (id, type);\n \tmono[ref] = std::move (elem);\n       }\n   }\n@@ -209,9 +209,9 @@ class Context\n     return true;\n   }\n \n-  void insert_const_decl (HirId id, ::tree expr) { compiled_consts[id] = expr; }\n+  void insert_const_decl (HirId id, tree expr) { compiled_consts[id] = expr; }\n \n-  bool lookup_const_decl (HirId id, ::tree *expr)\n+  bool lookup_const_decl (HirId id, tree *expr)\n   {\n     auto it = compiled_consts.find (id);\n     if (it == compiled_consts.end ())\n@@ -240,9 +240,9 @@ class Context\n   void pop_fn () { fn_stack.pop_back (); }\n   fncontext peek_fn () { return fn_stack.back (); }\n \n-  void push_type (::tree t) { type_decls.push_back (t); }\n+  void push_type (tree t) { type_decls.push_back (t); }\n   void push_var (::Bvariable *v) { var_decls.push_back (v); }\n-  void push_const (::tree c) { const_decls.push_back (c); }\n+  void push_const (tree c) { const_decls.push_back (c); }\n   void push_function (tree f) { func_decls.push_back (f); }\n \n   void write_to_backend ()\n@@ -323,7 +323,7 @@ class Context\n   std::vector<tree> scope_stack;\n   std::vector<::Bvariable *> loop_value_stack;\n   std::vector<tree> loop_begin_labels;\n-  std::map<const TyTy::BaseType *, std::pair<HirId, ::tree >> mono;\n+  std::map<const TyTy::BaseType *, std::pair<HirId, tree>> mono;\n   std::map<DefId, std::vector<std::pair<const TyTy::BaseType *, tree>>>\n     mono_fns;\n \n@@ -338,7 +338,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n {\n public:\n   static tree compile (Context *ctx, const TyTy::BaseType *ty,\n-\t\t\t   bool trait_object_mode = false)\n+\t\t       bool trait_object_mode = false)\n   {\n     TyTyResolveCompile compiler (ctx, trait_object_mode);\n     ty->accept_vis (compiler);\n@@ -410,7 +410,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n     tree result_type\n       = TyTyResolveCompile::compile (ctx, type.get_return_type ());\n \n-    std::vector<tree > parameters;\n+    std::vector<tree> parameters;\n     type.iterate_params ([&] (TyTy::BaseType *p) mutable -> bool {\n       tree pty = TyTyResolveCompile::compile (ctx, p);\n       parameters.push_back (pty);\n@@ -440,8 +440,8 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \t  = TyTyResolveCompile::compile (ctx, field->get_field_type ());\n \n \tBackend::typed_identifier f (field->get_name (), compiled_field_ty,\n-\t\t\t\t      ctx->get_mappings ()->lookup_location (\n-\t\t\t\t\ttype.get_ty_ref ()));\n+\t\t\t\t     ctx->get_mappings ()->lookup_location (\n+\t\t\t\t       type.get_ty_ref ()));\n \tfields.push_back (std::move (f));\n       }\n \n@@ -488,9 +488,9 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \t// approach makes it simpler to use a C-only debugger, or\n \t// GDB's C mode, when debugging Rust.\n \tBackend::typed_identifier f (\"__\" + std::to_string (i),\n-\t\t\t\t      compiled_field_ty,\n-\t\t\t\t      ctx->get_mappings ()->lookup_location (\n-\t\t\t\t\ttype.get_ty_ref ()));\n+\t\t\t\t     compiled_field_ty,\n+\t\t\t\t     ctx->get_mappings ()->lookup_location (\n+\t\t\t\t       type.get_ty_ref ()));\n \tfields.push_back (std::move (f));\n       }\n \n@@ -515,55 +515,55 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \n   void visit (const TyTy::BoolType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::IntType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::UintType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::FloatType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::USizeType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::ISizeType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (const TyTy::CharType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n@@ -601,7 +601,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \n   void visit (const TyTy::StrType &type) override\n   {\n-    ::tree compiled_type = nullptr;\n+    tree compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n@@ -633,8 +633,8 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n     tree uintptr_ty = ctx->get_backend ()->pointer_type (uint);\n \n     Backend::typed_identifier f (\"__receiver_trait_obj_ptr\", uintptr_ty,\n-\t\t\t\t  ctx->get_mappings ()->lookup_location (\n-\t\t\t\t    type.get_ty_ref ()));\n+\t\t\t\t ctx->get_mappings ()->lookup_location (\n+\t\t\t\t   type.get_ty_ref ()));\n     fields.push_back (std::move (f));\n \n     for (size_t i = 0; i < items.size (); i++)\n@@ -645,8 +645,8 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \ttree uintptr_ty = ctx->get_backend ()->pointer_type (uint);\n \n \tBackend::typed_identifier f (\"__\" + std::to_string (i), uintptr_ty,\n-\t\t\t\t      ctx->get_mappings ()->lookup_location (\n-\t\t\t\t\ttype.get_ty_ref ()));\n+\t\t\t\t     ctx->get_mappings ()->lookup_location (\n+\t\t\t\t       type.get_ty_ref ()));\n \tfields.push_back (std::move (f));\n       }\n \n@@ -672,7 +672,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \n   Context *ctx;\n   bool trait_object_mode;\n-  ::tree translated;\n+  tree translated;\n   size_t recursion_count;\n \n   static const size_t kDefaultRecusionLimit = 5;"}, {"sha": "64144bcaf805ea15a7fbb8ea20c69d968b6f93d1", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=5c87e61f96e0b394ce406bf9967c92708a16becc", "patch": "@@ -65,7 +65,7 @@ class Backend\n     {}\n \n     typed_identifier (const std::string &a_name, tree a_type,\n-\t\t       Location a_location)\n+\t\t      Location a_location)\n       : name (a_name), type (a_type), location (a_location)\n     {}\n   };\n@@ -180,11 +180,10 @@ class Backend\n   // one result, RESULT_STRUCT is a struct type to hold the results,\n   // and RESULTS may be ignored; if there are zero or one results,\n   // RESULT_STRUCT is NULL.\n-  virtual tree\n-  function_type (const typed_identifier &receiver,\n-\t\t const std::vector<typed_identifier> &parameters,\n-\t\t const std::vector<typed_identifier> &results,\n-\t\t tree result_struct, Location location)\n+  virtual tree function_type (const typed_identifier &receiver,\n+\t\t\t      const std::vector<typed_identifier> &parameters,\n+\t\t\t      const std::vector<typed_identifier> &results,\n+\t\t\t      tree result_struct, Location location)\n     = 0;\n \n   virtual tree"}, {"sha": "12df7699879f9ba4bac1cb2ae70773d2da7a3719", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c87e61f96e0b394ce406bf9967c92708a16becc/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=5c87e61f96e0b394ce406bf9967c92708a16becc", "patch": "@@ -199,14 +199,14 @@ class Gcc_backend : public Backend\n   tree insert_type_attribute (tree, const std::string &);\n \n   tree function_type (const typed_identifier &,\n-\t\t\tconst std::vector<typed_identifier> &,\n-\t\t\tconst std::vector<typed_identifier> &, tree,\n-\t\t\tconst Location);\n+\t\t      const std::vector<typed_identifier> &,\n+\t\t      const std::vector<typed_identifier> &, tree,\n+\t\t      const Location);\n \n   tree function_type_varadic (const typed_identifier &,\n-\t\t\t\tconst std::vector<typed_identifier> &,\n-\t\t\t\tconst std::vector<typed_identifier> &, tree,\n-\t\t\t\tconst Location);\n+\t\t\t      const std::vector<typed_identifier> &,\n+\t\t\t      const std::vector<typed_identifier> &, tree,\n+\t\t\t      const Location);\n \n   tree function_ptr_type (tree, const std::vector<tree> &, Location);\n \n@@ -360,8 +360,8 @@ class Gcc_backend : public Backend\n   Bvariable *temporary_variable (tree, tree, tree, tree, bool, Location,\n \t\t\t\t tree *);\n \n-  Bvariable *implicit_variable (const std::string &, const std::string &,\n-\t\t\t\ttree, bool, bool, bool, int64_t);\n+  Bvariable *implicit_variable (const std::string &, const std::string &, tree,\n+\t\t\t\tbool, bool, bool, int64_t);\n \n   void implicit_variable_set_init (Bvariable *, const std::string &, tree, bool,\n \t\t\t\t   bool, bool, tree);\n@@ -376,8 +376,7 @@ class Gcc_backend : public Backend\n \t\t\t\t  tree, Location, tree);\n \n   Bvariable *immutable_struct_reference (const std::string &,\n-\t\t\t\t\t const std::string &, tree,\n-\t\t\t\t\t Location);\n+\t\t\t\t\t const std::string &, tree, Location);\n \n   // Labels.\n \n@@ -416,7 +415,6 @@ class Gcc_backend : public Backend\n   void write_export_data (const char *bytes, unsigned int size);\n \n private:\n-\n   tree fill_in_fields (tree, const std::vector<typed_identifier> &);\n \n   tree fill_in_array (tree, tree, tree);\n@@ -1080,9 +1078,8 @@ Gcc_backend::fill_in_array (tree fill, tree element_type, tree length_tree)\n     SET_TYPE_STRUCTURAL_EQUALITY (fill);\n   else if (TYPE_CANONICAL (element_type) != element_type\n \t   || TYPE_CANONICAL (index_type_tree) != index_type_tree)\n-    TYPE_CANONICAL (fill)\n-      = build_array_type (TYPE_CANONICAL (element_type),\n-\t\t\t  TYPE_CANONICAL (index_type_tree));\n+    TYPE_CANONICAL (fill) = build_array_type (TYPE_CANONICAL (element_type),\n+\t\t\t\t\t      TYPE_CANONICAL (index_type_tree));\n \n   return fill;\n }\n@@ -1387,7 +1384,8 @@ Gcc_backend::convert_expression (tree type_tree, tree expr_tree,\n     return this->error_expression ();\n \n   tree ret;\n-  if (this->type_size (type_tree) == 0 || TREE_TYPE (expr_tree) == void_type_node)\n+  if (this->type_size (type_tree) == 0\n+      || TREE_TYPE (expr_tree) == void_type_node)\n     {\n       // Do not convert zero-sized types.\n       ret = expr_tree;"}]}