{"sha": "7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhMDg0OWFkMjNkODlkMGE4OTllMDIxNmUyMGIzYzhjYzE4ZDhiMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-07-08T15:17:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-08T15:17:25Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2010-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * array.c (gfc_match_array_ref): Better error message for\n        coarrays with too few ranks.\n        (match_subscript): Move one diagnostic to caller.\n        * gfortran.h (gfc_get_corank): Add prottype.\n        * expr.c (gfc_get_corank): New function.\n        * iresolve.c (resolve_bound): Fix rank for cobounds.\n        (gfc_resolve_lbound,gfc_resolve_lcobound, gfc_resolve_ubound,\n        gfc_resolve_ucobound, gfc_resolve_this_image): Update\n        resolve_bound call.\n\n2010-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray_10.f90: Add an additional test.\n\nFrom-SVN: r161960", "tree": {"sha": "144b7a9da68a553d288934276e31c4520a1da9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144b7a9da68a553d288934276e31c4520a1da9b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0c422cb29c67f05b7696f7cadf55b3455124f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c422cb29c67f05b7696f7cadf55b3455124f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c422cb29c67f05b7696f7cadf55b3455124f00"}], "stats": {"total": 92, "additions": 82, "deletions": 10}, "files": [{"sha": "34dff477b06276d4ed150686c0211e44f145994b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -1,3 +1,16 @@\n+2010-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* array.c (gfc_match_array_ref): Better error message for\n+\tcoarrays with too few ranks.\n+\t(match_subscript): Move one diagnostic to caller.\n+\t* gfortran.h (gfc_get_corank): Add prottype.\n+\t* expr.c (gfc_get_corank): New function.\n+\t* iresolve.c (resolve_bound): Fix rank for cobounds.\n+\t(gfc_resolve_lbound,gfc_resolve_lcobound, gfc_resolve_ubound,\n+\tgfc_resolve_ucobound, gfc_resolve_this_image): Update\n+\tresolve_bound call.\n+\n 2010-07-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44742"}, {"sha": "68b6456cdbc32920c13d5202d8177d5b9ce6496a", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -91,7 +91,9 @@ match_subscript (gfc_array_ref *ar, int init, bool match_star)\n   else if (!star)\n     m = gfc_match_expr (&ar->start[i]);\n \n-  if (m == MATCH_NO)\n+  if (m == MATCH_NO && gfc_match_char ('*') == MATCH_YES)\n+    return MATCH_NO;\n+  else if (m == MATCH_NO)\n     gfc_error (\"Expected array subscript at %C\");\n   if (m != MATCH_YES)\n     return MATCH_ERROR;\n@@ -229,12 +231,28 @@ gfc_match_array_ref (gfc_array_ref *ar, gfc_array_spec *as, int init,\n       if (gfc_match_char (']') == MATCH_YES)\n \t{\n \t  ar->codimen++;\n+\t  if (ar->codimen < corank)\n+\t    {\n+\t      gfc_error (\"Too few codimensions at %C, expected %d not %d\",\n+\t\t\t corank, ar->codimen);\n+\t      return MATCH_ERROR;\n+\t    }\n \t  return MATCH_YES;\n \t}\n \n       if (gfc_match_char (',') != MATCH_YES)\n \t{\n-\t  gfc_error (\"Invalid form of coarray reference at %C\");\n+\t  if (gfc_match_char ('*') == MATCH_YES)\n+\t    gfc_error (\"Unexpected '*' for codimension %d of %d at %C\",\n+\t\t       ar->codimen + 1, corank);\n+\t  else\n+\t    gfc_error (\"Invalid form of coarray reference at %C\");\n+\t  return MATCH_ERROR;\n+\t}\n+      if (ar->codimen >= corank)\n+\t{\n+\t  gfc_error (\"Invalid codimension %d at %C, only %d codimensions exist\",\n+\t\t     ar->codimen + 1, corank);\n \t  return MATCH_ERROR;\n \t}\n     }"}, {"sha": "acbec8dcabca3ce9717ac5010a2b5670196b2e7d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -4022,6 +4022,22 @@ gfc_is_coindexed (gfc_expr *e)\n }\n \n \n+bool\n+gfc_get_corank (gfc_expr *e)\n+{\n+  int corank;\n+  gfc_ref *ref;\n+  corank = e->symtree->n.sym->as ? e->symtree->n.sym->as->corank : 0;\n+  for (ref = e->ref; ref; ref = ref->next)\n+    {\n+      if (ref->type == REF_ARRAY)\n+\tcorank = ref->u.ar.as->corank;\n+      gcc_assert (ref->type != REF_SUBSTRING);\n+    }\n+  return corank;\n+}\n+\n+\n /* Check whether the expression has an ultimate allocatable component.\n    Being itself allocatable does not count.  */\n bool"}, {"sha": "82703e65c5969f4286a5471b863ae5786138c0b4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -2670,6 +2670,7 @@ void gfc_expr_replace_comp (gfc_expr *, gfc_component *);\n bool gfc_is_proc_ptr_comp (gfc_expr *, gfc_component **);\n \n bool gfc_is_coindexed (gfc_expr *);\n+bool gfc_get_corank (gfc_expr *);\n bool gfc_has_ultimate_allocatable (gfc_expr *);\n bool gfc_has_ultimate_pointer (gfc_expr *);\n "}, {"sha": "f354312781b108b26ebb0f24e8cec5460bdfd2c5", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -122,7 +122,7 @@ resolve_mask_arg (gfc_expr *mask)\n \n static void\n resolve_bound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind,\n-\t       const char *name)\n+\t       const char *name, bool coarray)\n {\n   f->ts.type = BT_INTEGER;\n   if (kind)\n@@ -134,7 +134,8 @@ resolve_bound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind,\n     {\n       f->rank = 1;\n       f->shape = gfc_get_shape (1);\n-      mpz_init_set_ui (f->shape[0], array->rank);\n+      mpz_init_set_ui (f->shape[0], coarray ? gfc_get_corank (array)\n+\t\t\t\t\t    : array->rank);\n     }\n \n   f->value.function.name = xstrdup (name);\n@@ -1268,14 +1269,14 @@ gfc_resolve_kill (gfc_expr *f, gfc_expr *p ATTRIBUTE_UNUSED,\n void\n gfc_resolve_lbound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  resolve_bound (f, array, dim, kind, \"__lbound\");\n+  resolve_bound (f, array, dim, kind, \"__lbound\", false);\n }\n \n \n void\n gfc_resolve_lcobound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  resolve_bound (f, array, dim, kind, \"__lcobound\");\n+  resolve_bound (f, array, dim, kind, \"__lcobound\", true);\n }\n \n \n@@ -2401,7 +2402,7 @@ gfc_resolve_image_index (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED,\n void\n gfc_resolve_this_image (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n {\n-  resolve_bound (f, array, dim, NULL, \"__this_image\");\n+  resolve_bound (f, array, dim, NULL, \"__this_image\", true);\n }\n \n \n@@ -2540,14 +2541,14 @@ gfc_resolve_trim (gfc_expr *f, gfc_expr *string)\n void\n gfc_resolve_ubound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  resolve_bound (f, array, dim, kind, \"__ubound\");\n+  resolve_bound (f, array, dim, kind, \"__ubound\", false);\n }\n \n \n void\n gfc_resolve_ucobound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  resolve_bound (f, array, dim, kind, \"__ucobound\");\n+  resolve_bound (f, array, dim, kind, \"__ucobound\", true);\n }\n \n "}, {"sha": "a33b9a5c4db9a87867d668071de3f59958c1bd1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -1,3 +1,8 @@\n+2010-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray_10.f90: Add an additional test.\n+\n 2010-07-08  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR middle-end/44828"}, {"sha": "6ee425d7bf98d6bdcec8e1e75cc83505a71669b6", "filename": "gcc/testsuite/gfortran.dg/coarray_10.f90", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90?ref=7aa0849ad23d89d0a899e0216e20b3c8cc18d8b2", "patch": "@@ -24,5 +24,23 @@ subroutine this_image_check()\n   j = this_image(dim=3) ! { dg-error \"DIM argument without ARRAY argument\" }\n   i = image_index(i, [ 1 ]) ! { dg-error \"Expected coarray variable\" }\n   i = image_index(z, 2) ! { dg-error \"must be a rank one array\" }\n-\n end subroutine this_image_check\n+\n+\n+subroutine rank_mismatch()\n+  implicit none\n+  integer,allocatable :: A(:)[:,:,:,:]\n+  allocate(A(1)[1,1,1:*])     ! { dg-error \"Unexpected ... for codimension\" }\n+  allocate(A(1)[1,1,1,1,1,*]) ! { dg-error \"Invalid codimension 5\" }\n+  allocate(A(1)[1,1,1,*])\n+  allocate(A(1)[1,1])     ! { dg-error \"Too few codimensions\" }\n+  allocate(A(1)[1,*])     ! { dg-error \"Too few codimensions\" }\n+  allocate(A(1)[1,1:*])   ! { dg-error \"Unexpected ... for codimension\" }\n+\n+  A(1)[1,1,1] = 1       ! { dg-error \"Too few codimensions\" }\n+  A(1)[1,1,1,1,1,1] = 1 ! { dg-error \"Invalid codimension 5\" }\n+  A(1)[1,1,1,1] = 1\n+  A(1)[1,1] = 1         ! { dg-error \"Too few codimensions\" }\n+  A(1)[1,1] = 1         ! { dg-error \"Too few codimensions\" }\n+  A(1)[1,1:1] = 1       ! { dg-error \"Too few codimensions\" }\n+end subroutine rank_mismatch"}]}