{"sha": "9d4c21486cc7709172723c8fe12dd7f8d213b605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0YzIxNDg2Y2M3NzA5MTcyNzIzYzhmZTEyZGQ3ZjhkMjEzYjYwNQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-05-05T02:56:14Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-05-05T02:56:14Z"}, "message": "natClass.cc (isInstance): Use __builtin_expect.\n\n2000-05-05  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/lang/natClass.cc (isInstance): Use __builtin_expect.\n\t(_Jv_IsAssignableFrom): Ditto.\n\t(_Jv_IsInstanceOf): Ditto.\n\t(_Jv_CheckCast): Ditto.\n\t(_Jv_CheckArrayStore): Ditto.\n\t* java/lang/Class.h (_Jv_InitClass): Ditto.\n\t* java/lang/natObject.cc (_Jv_MonitorEnter): __builtin_expect `false',\n\tnot `0'.\n\t(notify): Ditto.\n\t(notifyAll): Ditto.\n\t(wait): Ditto.\n\t(_Jv_MonitorExit): Ditto.\n\t* boehm.cc (_Jv_MarkObj): Ditto.\n\t(_Jv_MarkObj): Ditto.\n\t(_Jv_MarkArray): Ditto.\n\t* prims.cc (_Jv_AllocObject): Ditto.\n\t(_Jv_NewObjectArray): Ditto.\n\t(_Jv_NewPrimArray): Ditto.\n\t(_Jv_Malloc): Ditto.\n\t(_Jv_Realloc): Ditto.\n\t(_Jv_MallocUnchecked): Ditto.\n\t(_Jv_divI): Ditto.\n\t(_Jv_remI): Ditto.\n\t(_Jv_divJ): Ditto.\n\t(_Jv_remJ): Ditto.\n\nFrom-SVN: r33698", "tree": {"sha": "cf14a17edadc80507b8cb59cbdf177d63a7452e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf14a17edadc80507b8cb59cbdf177d63a7452e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d4c21486cc7709172723c8fe12dd7f8d213b605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c21486cc7709172723c8fe12dd7f8d213b605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4c21486cc7709172723c8fe12dd7f8d213b605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c21486cc7709172723c8fe12dd7f8d213b605/comments", "author": null, "committer": null, "parents": [{"sha": "59b30ca6ddd5930d454517cd8e6c54701b21b97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b30ca6ddd5930d454517cd8e6c54701b21b97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b30ca6ddd5930d454517cd8e6c54701b21b97b"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "c3c16e3f48144aafc19dfacc5d6714d9b6d5c508", "filename": "libjava/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9d4c21486cc7709172723c8fe12dd7f8d213b605", "patch": "@@ -1,3 +1,31 @@\n+2000-05-05  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/lang/natClass.cc (isInstance): Use __builtin_expect.\n+\t(_Jv_IsAssignableFrom): Ditto.\n+\t(_Jv_IsInstanceOf): Ditto.\n+\t(_Jv_CheckCast): Ditto.\n+\t(_Jv_CheckArrayStore): Ditto.\n+\t* java/lang/Class.h (_Jv_InitClass): Ditto.\t\n+\t* java/lang/natObject.cc (_Jv_MonitorEnter): __builtin_expect `false',\n+\tnot `0'.\n+\t(notify): Ditto.\n+\t(notifyAll): Ditto.\n+\t(wait): Ditto.\n+\t(_Jv_MonitorExit): Ditto.\n+\t* boehm.cc (_Jv_MarkObj): Ditto.\n+\t(_Jv_MarkObj): Ditto.\n+\t(_Jv_MarkArray): Ditto.\n+\t* prims.cc (_Jv_AllocObject): Ditto.\n+\t(_Jv_NewObjectArray): Ditto.\n+\t(_Jv_NewPrimArray): Ditto.\n+\t(_Jv_Malloc): Ditto.\n+\t(_Jv_Realloc): Ditto.\n+\t(_Jv_MallocUnchecked): Ditto.\n+\t(_Jv_divI): Ditto.\n+\t(_Jv_remI): Ditto.\n+\t(_Jv_divJ): Ditto.\n+\t(_Jv_remJ): Ditto.\n+\n 2000-05-04  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/util/Locale.java (Locale): Don't explicitly check for"}, {"sha": "d685a1b3293afe0a37b22fbe706c802642034e56", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=9d4c21486cc7709172723c8fe12dd7f8d213b605", "patch": "@@ -203,7 +203,7 @@ class java::lang::Class : public java::lang::Object\n   inline friend void \n   _Jv_InitClass (jclass klass)\n   {\n-    if (klass->state != JV_STATE_DONE)\n+    if (__builtin_expect (klass->state != JV_STATE_DONE, false))\n       klass->initializeClass ();\n   }\n "}, {"sha": "93e82103d3a42a4cde21be2ca5fc927c3db57d0d", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=9d4c21486cc7709172723c8fe12dd7f8d213b605", "patch": "@@ -622,7 +622,7 @@ java::lang::Class::isAssignableFrom (jclass klass)\n inline jboolean\n java::lang::Class::isInstance (jobject obj)\n {\n-  if (! obj || isPrimitive ())\n+  if (__builtin_expect (! obj || isPrimitive (), false))\n     return false;\n   _Jv_InitClass (this);\n   return _Jv_IsAssignableFrom (this, JV_CLASS (obj));\n@@ -923,7 +923,7 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n     {\n       _Jv_IDispatchTable *cl_idt = source->idt;\n       _Jv_IDispatchTable *if_idt = target->idt;\n-      if (if_idt == NULL)\n+      if (__builtin_expect ((if_idt == NULL), false))\n \treturn false; // No class implementing TARGET has been loaded.    \n       jshort cl_iindex = cl_idt->cls.iindex;\n       if (cl_iindex <= if_idt->iface.ioffsets[0])\n@@ -941,13 +941,16 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n jboolean\n _Jv_IsInstanceOf(jobject obj, jclass cl)\n {\n-  return (obj ? _Jv_IsAssignableFrom (cl, JV_CLASS (obj)) : false);\n+  if (__builtin_expect (!obj, false))\n+    return false;\n+  return (_Jv_IsAssignableFrom (cl, JV_CLASS (obj)));\n }\n \n void *\n _Jv_CheckCast (jclass c, jobject obj)\n {\n-  if (obj != NULL && ! _Jv_IsAssignableFrom(c, JV_CLASS (obj)))\n+  if (__builtin_expect \n+       (obj != NULL && ! _Jv_IsAssignableFrom(c, JV_CLASS (obj)), false))\n     JvThrow (new java::lang::ClassCastException);\n   return obj;\n }\n@@ -960,7 +963,8 @@ _Jv_CheckArrayStore (jobject arr, jobject obj)\n       JvAssert (arr != NULL);\n       jclass elt_class = (JV_CLASS (arr))->getComponentType();\n       jclass obj_class = JV_CLASS (obj);\n-      if (! _Jv_IsAssignableFrom (elt_class, obj_class))\n+      if (__builtin_expect \n+          (! _Jv_IsAssignableFrom (elt_class, obj_class), false))\n \tJvThrow (new java::lang::ArrayStoreException);\n     }\n }"}, {"sha": "26b3f96844d0a407a8a9dd3b3302e28491617654", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=9d4c21486cc7709172723c8fe12dd7f8d213b605", "patch": "@@ -172,31 +172,31 @@ java::lang::Object::sync_init (void)\n void\n java::lang::Object::notify (void)\n {\n-  if (__builtin_expect (INIT_NEEDED (this), 0))\n+  if (__builtin_expect (INIT_NEEDED (this), false))\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n-  if (__builtin_expect (_Jv_CondNotify (&si->condition, &si->mutex), 0))\n+  if (__builtin_expect (_Jv_CondNotify (&si->condition, &si->mutex), false))\n     JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n                                               (\"current thread not owner\")));\n }\n \n void\n java::lang::Object::notifyAll (void)\n {\n-  if (__builtin_expect (INIT_NEEDED (this), 0))\n+  if (__builtin_expect (INIT_NEEDED (this), false))\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n-  if (__builtin_expect (_Jv_CondNotifyAll (&si->condition, &si->mutex), 0))\n+  if (__builtin_expect (_Jv_CondNotifyAll (&si->condition, &si->mutex), false))\n     JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n                                               (\"current thread not owner\")));\n }\n \n void\n java::lang::Object::wait (jlong timeout, jint nanos)\n {\n-  if (__builtin_expect (INIT_NEEDED (this), 0))\n+  if (__builtin_expect (INIT_NEEDED (this), false))\n     sync_init ();\n-  if (__builtin_expect (timeout < 0 || nanos < 0 || nanos > 999999, 0))\n+  if (__builtin_expect (timeout < 0 || nanos < 0 || nanos > 999999, false))\n     JvThrow (new IllegalArgumentException);\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n   switch (_Jv_CondWait (&si->condition, &si->mutex, timeout, nanos))\n@@ -226,10 +226,10 @@ jint\n _Jv_MonitorEnter (jobject obj)\n {\n #ifndef HANDLE_SEGV\n-  if (__builtin_expect (! obj, 0))\n+  if (__builtin_expect (! obj, false))\n     JvThrow (new java::lang::NullPointerException);\n #endif\n-  if (__builtin_expect (INIT_NEEDED (obj), 0))\n+  if (__builtin_expect (INIT_NEEDED (obj), false))\n     obj->sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n   return _Jv_MutexLock (&si->mutex);\n@@ -241,7 +241,7 @@ _Jv_MonitorExit (jobject obj)\n   JvAssert (obj);\n   JvAssert (! INIT_NEEDED (obj));\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n-  if (__builtin_expect (_Jv_MutexUnlock (&si->mutex), 0))\n+  if (__builtin_expect (_Jv_MutexUnlock (&si->mutex), false))\n     JvThrow (new java::lang::IllegalMonitorStateException);\n   return 0;\n }"}, {"sha": "c9cb92e065a163face510e33b268ac68d587e519", "filename": "libjava/prims.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c21486cc7709172723c8fe12dd7f8d213b605/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=9d4c21486cc7709172723c8fe12dd7f8d213b605", "patch": "@@ -328,7 +328,7 @@ _Jv_AllocObject (jclass c, jint size)\n   _Jv_InitClass (c);\n \n   jobject obj = (jobject) _Jv_AllocObj (size);\n-  if (__builtin_expect (! obj, 0))\n+  if (__builtin_expect (! obj, false))\n     JvThrow (no_memory);\n   *((_Jv_VTable **) obj) = c->vtable;\n \n@@ -345,7 +345,7 @@ _Jv_AllocObject (jclass c, jint size)\n #ifdef ENABLE_JVMPI\n   // Service JVMPI request.\n \n-  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, 0))\n+  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, false))\n     {\n       JVMPI_Event event;\n \n@@ -372,7 +372,7 @@ _Jv_AllocObject (jclass c, jint size)\n jobjectArray\n _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n {\n-  if (__builtin_expect (count < 0, 0))\n+  if (__builtin_expect (count < 0, false))\n     JvThrow (new java::lang::NegativeArraySizeException);\n \n   JvAssert (! elementClass->isPrimitive ());\n@@ -383,7 +383,7 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n \n   // Check for overflow.\n   if (__builtin_expect ((size_t) count > \n-\t\t\t(SIZE_T_MAX - size) / sizeof (jobject), 0))\n+\t\t\t(SIZE_T_MAX - size) / sizeof (jobject), false))\n     JvThrow (no_memory);\n \n   size += count * sizeof (jobject);\n@@ -392,7 +392,7 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   jclass clas = _Jv_FindArrayClass (elementClass, 0);\n \n   obj = (jobjectArray) _Jv_AllocArray (size);\n-  if (__builtin_expect (! obj, 0))\n+  if (__builtin_expect (! obj, false))\n     JvThrow (no_memory);\n   obj->length = count;\n   jobject* ptr = elements(obj);\n@@ -416,7 +416,7 @@ jobject\n _Jv_NewPrimArray (jclass eltype, jint count)\n {\n   int elsize = eltype->size();\n-  if (__builtin_expect (count < 0, 0))\n+  if (__builtin_expect (count < 0, false))\n     JvThrow (new java::lang::NegativeArraySizeException ());\n \n   JvAssert (eltype->isPrimitive ());\n@@ -425,11 +425,11 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n \n   // Check for overflow.\n   if (__builtin_expect ((size_t) count > \n-\t\t\t(SIZE_T_MAX - size) / elsize, 0))\n+\t\t\t(SIZE_T_MAX - size) / elsize, false))\n     JvThrow (no_memory);\n \n   __JArray *arr = (__JArray*) _Jv_AllocObj (size + elsize * count);\n-  if (__builtin_expect (! arr, 0))\n+  if (__builtin_expect (! arr, false))\n     JvThrow (no_memory);\n   arr->length = count;\n   // Note that we assume we are given zeroed memory by the allocator.\n@@ -932,29 +932,29 @@ _Jv_SetMaximumHeapSize (const char *arg)\n void *\n _Jv_Malloc (jsize size)\n {\n-  if (__builtin_expect (size == 0, 0))\n+  if (__builtin_expect (size == 0, false))\n     size = 1;\n   void *ptr = malloc ((size_t) size);\n-  if (__builtin_expect (ptr == NULL, 0))\n+  if (__builtin_expect (ptr == NULL, false))\n     JvThrow (no_memory);\n   return ptr;\n }\n \n void *\n _Jv_Realloc (void *ptr, jsize size)\n {\n-  if (__builtin_expect (size == 0, 0))\n+  if (__builtin_expect (size == 0, false))\n     size = 1;\n   ptr = realloc (ptr, (size_t) size);\n-  if (__builtin_expect (ptr == NULL, 0))\n+  if (__builtin_expect (ptr == NULL, false))\n     JvThrow (no_memory);\n   return ptr;\n }\n \n void *\n _Jv_MallocUnchecked (jsize size)\n {\n-  if (__builtin_expect (size == 0, 0))\n+  if (__builtin_expect (size == 0, false))\n     size = 1;\n   return malloc ((size_t) size);\n }\n@@ -975,7 +975,7 @@ _Jv_Free (void* ptr)\n jint\n _Jv_divI (jint dividend, jint divisor)\n {\n-  if (__builtin_expect (divisor == 0, 0))\n+  if (__builtin_expect (divisor == 0, false))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n@@ -987,7 +987,7 @@ _Jv_divI (jint dividend, jint divisor)\n jint\n _Jv_remI (jint dividend, jint divisor)\n {\n-  if (__builtin_expect (divisor == 0, 0))\n+  if (__builtin_expect (divisor == 0, false))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n@@ -999,7 +999,7 @@ _Jv_remI (jint dividend, jint divisor)\n jlong\n _Jv_divJ (jlong dividend, jlong divisor)\n {\n-  if (__builtin_expect (divisor == 0, 0))\n+  if (__builtin_expect (divisor == 0, false))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)\n@@ -1011,7 +1011,7 @@ _Jv_divJ (jlong dividend, jlong divisor)\n jlong\n _Jv_remJ (jlong dividend, jlong divisor)\n {\n-  if (__builtin_expect (divisor == 0, 0))\n+  if (__builtin_expect (divisor == 0, false))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)"}]}