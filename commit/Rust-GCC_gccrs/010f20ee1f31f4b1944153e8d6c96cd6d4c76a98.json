{"sha": "010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwZjIwZWUxZjMxZjRiMTk0NDE1M2U4ZDZjOTZjZDZkNGM3NmE5OA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.linux.ibm.com", "date": "2015-09-03T18:08:42Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-09-03T18:08:42Z"}, "message": "altivec.md (altivec_vperm_v8hiv16qi): New define_insn.\n\n[gcc]\n\n2015-09-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* config/rs6000/altivec.md (altivec_vperm_v8hiv16qi): New\n\tdefine_insn.\n\t(mulv16qi3): New define_expand.\n\n[gcc/testsuite]\n\n2015-09-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* gcc.target/powerpc/vec-mult-char-1.c: New test.\n\t* gcc.target/powerpc/vec-mult-char-2.c: New test.\n\t* lib/target-supports.exp (check_effective_target_vect_char_mult):\n\tReturn true for PowerPC targets that implement Altivec.\n\nFrom-SVN: r227464", "tree": {"sha": "f1b0ebfb31028865335d1264a8da339ce760884a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b0ebfb31028865335d1264a8da339ce760884a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/comments", "author": null, "committer": null, "parents": [{"sha": "8b652e654f2c6dc878e9dc34caf4e99e79788dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b652e654f2c6dc878e9dc34caf4e99e79788dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b652e654f2c6dc878e9dc34caf4e99e79788dfe"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "b18fe9e6796c2d06299e4bb96b4de890730b1957", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -1,3 +1,9 @@\n+2015-09-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* config/rs6000/altivec.md (altivec_vperm_v8hiv16qi): New\n+\tdefine_insn.\n+\t(mulv16qi3): New define_expand.\n+\n 2015-09-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66516"}, {"sha": "9cacca49050d78f46d41b0913e23b9c1028c8e35", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -1957,6 +1957,16 @@\n   \"vperm %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"altivec_vperm_v8hiv16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+   \t               (match_operand:V8HI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VPERM))]\n+  \"TARGET_ALTIVEC\"\n+  \"vperm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n (define_expand \"altivec_vperm_<mode>_uns\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n@@ -3161,6 +3171,33 @@\n   \"<VI_unit>\"\n   \"\")\n \n+(define_expand \"mulv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (mult:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n+                    (match_operand:V16QI 2 \"register_operand\" \"v\")))]\n+  \"TARGET_ALTIVEC\"\n+  \"\n+{\n+  rtx even = gen_reg_rtx (V8HImode);\n+  rtx odd = gen_reg_rtx (V8HImode);\n+  rtx mask = gen_reg_rtx (V16QImode);\n+  rtvec v = rtvec_alloc (16);\n+  int i;\n+\n+  for (i = 0; i < 8; ++i) {\n+    RTVEC_ELT (v, 2 * i)\n+     = gen_rtx_CONST_INT (QImode, BYTES_BIG_ENDIAN ? 2 * i + 1 : 31 - 2 * i);\n+    RTVEC_ELT (v, 2 * i + 1)\n+     = gen_rtx_CONST_INT (QImode, BYTES_BIG_ENDIAN ? 2 * i + 17 : 15 - 2 * i);\n+  }\n+\n+  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n+  emit_insn (gen_altivec_vmulesb (even, operands[1], operands[2]));\n+  emit_insn (gen_altivec_vmulosb (odd, operands[1], operands[2]));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (operands[0], even, odd, mask));\n+  DONE;\n+}\")\n+\n (define_expand \"altivec_negv4sf2\"\n   [(use (match_operand:V4SF 0 \"register_operand\" \"\"))\n    (use (match_operand:V4SF 1 \"register_operand\" \"\"))]"}, {"sha": "13f5d7ebc5cfa31850f8ef6db477e8d581e32877", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -1,3 +1,10 @@\n+2015-09-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-mult-char-1.c: New test.\n+\t* gcc.target/powerpc/vec-mult-char-2.c: New test.\n+\t* lib/target-supports.exp (check_effective_target_vect_char_mult):\n+\tReturn true for PowerPC targets that implement Altivec.\n+\n 2015-09-03  Renlin Li  <renlin.li@arm.com>\n \n \t* gcc.target/aarch64/arm_align_max_pwr.c: Make it a compile test case,"}, {"sha": "4c9dbdc818848f93a244243f53557bf48ff56e1c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-mult-char-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-1.c?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned char vmului(vector unsigned char v,\n+\t\t\t    vector unsigned char i)\n+{\n+\treturn v * i;\n+}\n+\n+vector signed char vmulsi(vector signed char v,\n+\t\t\t  vector signed char i)\n+{\n+\treturn v * i;\n+}\n+\n+int main ()\n+{\n+  vector unsigned char a = {2, 4, 6, 8, 10, 12, 14, 16,\n+\t\t\t    18, 20, 22, 24, 26, 28, 30, 32};\n+  vector unsigned char b = {3, 6, 9, 12, 15, 18, 21, 24,\n+\t\t\t    27, 30, 33, 36, 39, 42, 45, 48};\n+  vector unsigned char c = vmului (a, b);\n+  vector unsigned char expect_c = {6, 24, 54, 96, 150, 216, 38, 128,\n+\t\t\t\t   230, 88, 214, 96, 246, 152, 70, 0};\n+\n+  vector signed char d = {2, -4, 6, -8, 10, -12, 14, -16,\n+\t\t\t  18, -20, 22, -24, 26, -28, 30, -32};\n+  vector signed char e = {3, 6, -9, -12, 15, 18, -21, -24,\n+\t\t\t  27, 30, -33, -36, 39, 42, -45, -48};\n+  vector signed char f = vmulsi (d, e);\n+  vector signed char expect_f = {6, -24, -54, 96, -106, 40, -38, -128,\n+\t\t\t\t -26, -88, 42, 96, -10, 104, -70, 0};\n+\n+  vector signed char g = {127, -128, 126, -126, 125, -125,  124, -124,\n+\t\t\t  123, -123, 122, -122, 121, -121,  120, -120};\n+  vector signed char h = {  2,    2,  -2,   -2, 127,  127, -128, -128,\n+\t\t\t    10,  10, -10,  -10,  64,   65,  -64,  -65};\n+  vector signed char i = vmulsi (g, h);\n+  vector signed char expect_i = {-2, 0, 4, -4, 3, -3, 0, 0,\n+\t\t\t\t -50, 50, 60, -60, 64, 71, 0, 120};\n+\n+  if (!vec_all_eq (c, expect_c))\n+    abort ();\n+  if (!vec_all_eq (f, expect_f))\n+    abort ();\n+  if (!vec_all_eq (i, expect_i))\n+    abort ();\n+}"}, {"sha": "04c67109befc9feb2ec0eac8b03d3ebb2e56d9fd", "filename": "gcc/testsuite/gcc.target/powerpc/vec-mult-char-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mult-char-2.c?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned char vmului(vector unsigned char v,\n+\t\t\t    vector unsigned char i)\n+{\n+\treturn v * i;\n+}\n+\n+vector signed char vmulsi(vector signed char v,\n+\t\t\t  vector signed char i)\n+{\n+\treturn v * i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmulesb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmulosb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 2 } } */"}, {"sha": "aad45f96c2006859034722416d2f278134de93f8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010f20ee1f31f4b1944153e8d6c96cd6d4c76a98/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=010f20ee1f31f4b1944153e8d6c96cd6d4c76a98", "patch": "@@ -4577,7 +4577,8 @@ proc check_effective_target_vect_char_mult { } {\n \tif { [istarget aarch64*-*-*]\n \t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*] || [istarget x86_64-*-*]\n-            || [check_effective_target_arm32] } {\n+             || [check_effective_target_arm32]\n+\t     || [check_effective_target_powerpc_altivec] } {\n \t   set et_vect_char_mult_saved 1\n \t}\n     }"}]}