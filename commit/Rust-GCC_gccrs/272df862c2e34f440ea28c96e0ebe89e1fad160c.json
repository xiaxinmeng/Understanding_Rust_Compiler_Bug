{"sha": "272df862c2e34f440ea28c96e0ebe89e1fad160c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyZGY4NjJjMmUzNGY0NDBlYTI4Yzk2ZTBlYmU4OWUxZmFkMTYwYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-12-24T14:04:54Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-12-24T14:04:54Z"}, "message": "Makefile.in (toplev.o): Depend on loop.h.\n\n\t* Makefile.in (toplev.o): Depend on loop.h.\n\n\t* dwarfout.c: Include tm_p.h.\n\n\t* emit-rtl.c (restore_emit_status): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\n\t* final.c (final_scan_insn): Likewise.\n\n\t* flow.c (flow_nodes_print, flow_exits_print, flow_loops_cfg_dump,\n\tflow_loop_nested_p, flow_loop_exits_find, flow_loop_nodes_find,\n\tflow_depth_first_order_compute, flow_loop_pre_header_find,\n\tflow_loop_tree_node_add, flow_loops_tree_build,\n\tflow_loop_level_compute, flow_loops_level_compute,\n\tflow_loop_outside_edge_p): Add prototypes.\n\t(recompute_reg_usage): Mark parameters with ATTRIBUTE_UNUSED.\n\n\t* ggc-callbacks.c (lang_mark_tree, lang_mark_false_label_stack):\n\tMark with ATTRIBUTE_NORETURN.\n\n\t* hash.c (hash_newfunc): Mark parameter with ATTRIBUTE_UNUSED.\n\n\t* local-alloc.c (no_conflict_p): Likewise.\n\n\t* loop.c (insert_bct): Hide definitions of variables with hidden\n\tusage.\n\t(note_reg_stored): Mark parameter with ATTRIBUTE_UNUSED.\n\n\t* regclass.c (memory_move_secondary_cost): Mark variable `mem'\n\twith ATTRIBUTE_UNUSED.\n\t(record_reg_classes): Mark parameter with ATTRIBUTE_UNUSED.\n\t(reg_scan): Likewise.\n\n\t* reload.c (find_reloads): Remove unused variables `changed'.\n\n\t* reload1.c (reload_reg_class_lower): Don't unnecessarily cast\n\taway const-ness.\n\t(allocate_reload_reg): Mark parameter with ATTRIBUTE_UNUSED.\n\tRemove unused variable `insn'.\n\n\t* toplev.c: Include loop.h.\n\t(report_file_and_line): Remove unnecessary prototype.\n\n\t* tree.c (build_block): Mark parameter with ATTRIBUTE_UNUSED.\n\n\t* unroll.c (biv_total_increment): Likewise.\n\nFrom-SVN: r31085", "tree": {"sha": "cf5c5c50fd41c78008d80b7258c08318b984dc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5c5c50fd41c78008d80b7258c08318b984dc0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272df862c2e34f440ea28c96e0ebe89e1fad160c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272df862c2e34f440ea28c96e0ebe89e1fad160c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272df862c2e34f440ea28c96e0ebe89e1fad160c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272df862c2e34f440ea28c96e0ebe89e1fad160c/comments", "author": null, "committer": null, "parents": [{"sha": "ae38a81600c9c8a58af6ce7958c030ecb4b4b361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae38a81600c9c8a58af6ce7958c030ecb4b4b361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae38a81600c9c8a58af6ce7958c030ecb4b4b361"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "f34fbd20f6ef9e1d0c0e0d92c4251b06d01834b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -1,3 +1,52 @@\n+1999-12-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (toplev.o): Depend on loop.h.\n+\n+\t* dwarfout.c: Include tm_p.h.\n+\n+\t* emit-rtl.c (restore_emit_status): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* final.c (final_scan_insn): Likewise.\n+\n+\t* flow.c (flow_nodes_print, flow_exits_print, flow_loops_cfg_dump,\n+\tflow_loop_nested_p, flow_loop_exits_find, flow_loop_nodes_find,\n+\tflow_depth_first_order_compute, flow_loop_pre_header_find,\n+\tflow_loop_tree_node_add, flow_loops_tree_build,\n+\tflow_loop_level_compute, flow_loops_level_compute,\n+\tflow_loop_outside_edge_p): Add prototypes.\n+\t(recompute_reg_usage): Mark parameters with ATTRIBUTE_UNUSED.\n+\n+\t* ggc-callbacks.c (lang_mark_tree, lang_mark_false_label_stack):\n+\tMark with ATTRIBUTE_NORETURN.\n+\n+\t* hash.c (hash_newfunc): Mark parameter with ATTRIBUTE_UNUSED.\n+\n+\t* local-alloc.c (no_conflict_p): Likewise.\n+\n+\t* loop.c (insert_bct): Hide definitions of variables with hidden\n+\tusage.\n+\t(note_reg_stored): Mark parameter with ATTRIBUTE_UNUSED.\n+\n+\t* regclass.c (memory_move_secondary_cost): Mark variable `mem'\n+\twith ATTRIBUTE_UNUSED.\n+\t(record_reg_classes): Mark parameter with ATTRIBUTE_UNUSED.\n+\t(reg_scan): Likewise.\n+\t\n+\t* reload.c (find_reloads): Remove unused variables `changed'.\n+\n+\t* reload1.c (reload_reg_class_lower): Don't unnecessarily cast\n+\taway const-ness.\n+\t(allocate_reload_reg): Mark parameter with ATTRIBUTE_UNUSED.\n+\tRemove unused variable `insn'.\n+\t\n+\t* toplev.c: Include loop.h.\n+\t(report_file_and_line): Remove unnecessary prototype.\n+\n+\t* tree.c (build_block): Mark parameter with ATTRIBUTE_UNUSED.\n+\n+\t* unroll.c (biv_total_increment): Likewise.\n+\t\n Thu Dec 23 23:15:22 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (emit_input_reload_insns): Restore old behaviour"}, {"sha": "7c606569a97a3e5619bd3e3ea86014059b753105", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -1469,7 +1469,7 @@ diagnostic.o : $(CONFIG_H) system.h $(TREE_H) $(RTL_H) tm_p.h flags.h \\\n toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n    flags.h input.h insn-attr.h xcoffout.h defaults.h output.h \\\n    insn-codes.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n-   dwarf2out.h sdbout.h dbxout.h $(EXPR_H) $(BASIC_BLOCK_H) graph.h \\\n+   dwarf2out.h sdbout.h dbxout.h $(EXPR_H) $(BASIC_BLOCK_H) graph.h loop.h \\\n    except.h $(lang_options_files)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\"}, {"sha": "4dda62688c3dc64ff955f95f8168a7d6251c37a2", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"dwarfout.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \n #if defined(DWARF_TIMESTAMPS)\n #if !defined(POSIX)"}, {"sha": "06f4979a876db3017999170b6d37a1c7efdc553e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -1580,7 +1580,7 @@ set_new_last_label_num (last)\n \n void\n restore_emit_status (p)\n-     struct function *p;\n+     struct function *p ATTRIBUTE_UNUSED;\n {\n   last_label_num = 0;\n   clear_emit_caches ();"}, {"sha": "8f49e0909b9505fe89bbde5b379f47c449fdda44", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -2068,9 +2068,9 @@ rtx\n final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n      rtx insn;\n      FILE *file;\n-     int optimize;\n+     int optimize ATTRIBUTE_UNUSED;\n      int prescan;\n-     int nopeepholes;\n+     int nopeepholes ATTRIBUTE_UNUSED;\n {\n #ifdef HAVE_cc0\n   rtx set;"}, {"sha": "439c95b3c0138c956fc1581b9899b83c908a98d7", "filename": "gcc/flow.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -348,12 +348,24 @@ static void count_reg_references\tPROTO ((rtx));\n static void invalidate_mems_from_autoinc\tPROTO ((rtx));\n static void remove_edge\t\t\tPROTO ((edge));\n static void remove_fake_successors\tPROTO ((basic_block));\n+static void flow_nodes_print\tPROTO ((const char *, const sbitmap, FILE *));\n+static void flow_exits_print PROTO ((const char *, const edge *, int, FILE *));\n+static void flow_loops_cfg_dump\t\tPROTO ((const struct loops *, FILE *));\n+static int flow_loop_nested_p\t\tPROTO ((struct loop *, struct loop *));\n+static int flow_loop_exits_find\t\tPROTO ((const sbitmap, edge **));\n+static int flow_loop_nodes_find\tPROTO ((basic_block, basic_block, sbitmap));\n+static int flow_depth_first_order_compute PROTO ((int *));\n+static basic_block flow_loop_pre_header_find PROTO ((basic_block, const sbitmap *));\n+static void flow_loop_tree_node_add\tPROTO ((struct loop *, struct loop *));\n+static void flow_loops_tree_build\tPROTO ((struct loops *));\n+static int flow_loop_level_compute\tPROTO ((struct loop *, int));\n+static int flow_loops_level_compute\tPROTO ((struct loops *));\n \n /* This function is always defined so it can be called from the\n    debugger, and it is declared extern so we don't get warnings about\n    it being unused. */\n void verify_flow_info\t\t\tPROTO ((void));\n-\n+int flow_loop_outside_edge_p\t\tPROTO ((const struct loop *, edge));\n \f\n /* Find basic blocks of the current function.\n    F is the first insn of the function and NREGS the number of register\n@@ -5548,8 +5560,8 @@ count_reg_references (x)\n \n void\n recompute_reg_usage (f, loop_step)\n-     rtx f;\n-     int loop_step;\n+     rtx f ATTRIBUTE_UNUSED;\n+     int loop_step ATTRIBUTE_UNUSED;\n {\n   rtx insn;\n   int i, max_reg;\n@@ -6356,7 +6368,7 @@ flow_loops_cfg_dump (loops, file)\n \n \n /* Return non-zero if the nodes of LOOP are a subset of OUTER.  */\n-int\n+static int\n flow_loop_nested_p (outer, loop)\n      struct loop *outer;\n      struct loop *loop;"}, {"sha": "c56e13ea307c33d907afb000a481ca82ecccc5b3", "filename": "gcc/ggc-callbacks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fggc-callbacks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fggc-callbacks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-callbacks.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -27,7 +27,7 @@\n \n int ggc_p = 0;\n \n-void \n+void ATTRIBUTE_NORETURN\n lang_mark_tree (t)\n      union tree_node *t ATTRIBUTE_UNUSED;\n {\n@@ -36,7 +36,7 @@ lang_mark_tree (t)\n   abort ();\n }\n \n-void\n+void ATTRIBUTE_NORETURN\n lang_mark_false_label_stack (l)\n      struct label_node *l ATTRIBUTE_UNUSED;\n {"}, {"sha": "acbcd88bde00b91393fa4065a7d06532ce73a71e", "filename": "gcc/hash.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -140,7 +140,7 @@ struct hash_entry *\n hash_newfunc (entry, table, p)\n      struct hash_entry *entry;\n      struct hash_table *table;\n-     hash_table_key p;\n+     hash_table_key p ATTRIBUTE_UNUSED;\n {\n   if (entry == (struct hash_entry *) NULL)\n     entry = ((struct hash_entry *)"}, {"sha": "e077a12fd4819730ce461dfa55462e1265010364", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -2148,7 +2148,7 @@ post_mark_life (regno, mode, life, birth, death)\n \n static int\n no_conflict_p (insn, r0, r1)\n-     rtx insn, r0, r1;\n+     rtx insn, r0 ATTRIBUTE_UNUSED, r1;\n {\n   int ok = 0;\n   rtx note = find_reg_note (insn, REG_LIBCALL, NULL_RTX);"}, {"sha": "7f186c6505faf2d195ec1a9512bfaf7f536cfa1d", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -9344,13 +9344,15 @@ insert_bct (loop_start, loop_end, loop_info)\n   int i;\n   unsigned HOST_WIDE_INT n_iterations;\n \n+#if 0\n   int increment_direction, compare_direction;\n \n   /* If the loop condition is <= or >=, the number of iteration\n       is 1 more than the range of the bounds of the loop.  */\n   int add_iteration = 0;\n \n   enum machine_mode loop_var_mode = word_mode;\n+#endif\n \n   int loop_num = uid_loop_num [INSN_UID (loop_start)];\n \n@@ -10020,7 +10022,7 @@ struct note_reg_stored_arg\n    is equal to ARG.  */\n static void\n note_reg_stored (x, setter, arg)\n-     rtx x, setter;\n+     rtx x, setter ATTRIBUTE_UNUSED;\n      void *arg;\n {\n   struct note_reg_stored_arg *t = (struct note_reg_stored_arg *)arg;"}, {"sha": "4344c58701e921fa6d6b0abc2ae847840983a837", "filename": "gcc/regclass.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -503,7 +503,9 @@ memory_move_secondary_cost (mode, class, in)\n   enum reg_class altclass;\n   int partial_cost = 0;\n   /* We need a memory reference to feed to SECONDARY... macros.  */\n-  rtx mem = top_of_stack[(int) mode];\n+  /* mem may be unused even if the SECONDARY_ macros are defined. */\n+  rtx mem ATTRIBUTE_UNUSED = top_of_stack[(int) mode];\n+\n \n   if (in)\n     {\n@@ -1204,7 +1206,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, subreg_changes_size,\n      int n_ops;\n      rtx *ops;\n      enum machine_mode *modes;\n-     char *subreg_changes_size;\n+     char *subreg_changes_size ATTRIBUTE_UNUSED;\n      const char **constraints;\n      rtx insn;\n {\n@@ -2101,7 +2103,7 @@ void\n reg_scan (f, nregs, repeat)\n      rtx f;\n      int nregs;\n-     int repeat;\n+     int repeat ATTRIBUTE_UNUSED;\n {\n   register rtx insn;\n "}, {"sha": "985fd831f25eac8646b46e338a4f934d791d1884", "filename": "gcc/reload.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -2393,7 +2393,6 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n   int goal_alternative_swapped;\n   int best;\n   int commutative;\n-  int changed;\n   char operands_match[MAX_RECOG_OPERANDS][MAX_RECOG_OPERANDS];\n   rtx substed_operand[MAX_RECOG_OPERANDS];\n   rtx body = PATTERN (insn);"}, {"sha": "65020442344afddc61a13220273f547511474524", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -1441,7 +1441,7 @@ reload_reg_class_lower (r1p, r2p)\n      const PTR r1p;\n      const PTR r2p;\n {\n-  register int r1 = *(short *)r1p, r2 = *(short *)r2p;\n+  register int r1 = *(const short *)r1p, r2 = *(const short *)r2p;\n   register int t;\n \n   /* Consider required reloads before optional ones.  */\n@@ -4900,11 +4900,10 @@ set_reload_reg (i, r)\n \n static int\n allocate_reload_reg (chain, r, last_reload)\n-     struct insn_chain *chain;\n+     struct insn_chain *chain ATTRIBUTE_UNUSED;\n      int r;\n      int last_reload;\n {\n-  rtx insn = chain->insn;\n   int i, pass, count;\n \n   /* If we put this reload ahead, thinking it is a group,"}, {"sha": "a6e7c0ef798d86a04a00baf48c9280541dc62291", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -57,6 +57,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"intl.h\"\n #include \"ggc.h\"\n #include \"graph.h\"\n+#include \"loop.h\"\n \n #ifdef DWARF_DEBUGGING_INFO\n #include \"dwarfout.h\"\n@@ -167,7 +168,6 @@ static void dump_rtl PROTO((const char *, tree, void (*) (FILE *, rtx), rtx));\n static void clean_dump_file PROTO((const char *));\n static void compile_file PROTO((char *));\n static void display_help PROTO ((void));\n-static void report_file_and_line PROTO ((const char *, int, int));\n static void mark_file_stack PROTO ((void *));\n \n static void decode_d_option PROTO ((const char *));"}, {"sha": "c9d9e365da4613d32b0ec5ccbb501c35ed575144", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -3314,7 +3314,7 @@ build_decl (code, name, type)\n \n tree\n build_block (vars, tags, subblocks, supercontext, chain)\n-     tree vars, tags, subblocks, supercontext, chain;\n+     tree vars, tags ATTRIBUTE_UNUSED, subblocks, supercontext, chain;\n {\n   register tree block = make_node (BLOCK);\n "}, {"sha": "6b2b53e998923b5776f40d74fed5cf36f9882e16", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272df862c2e34f440ea28c96e0ebe89e1fad160c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=272df862c2e34f440ea28c96e0ebe89e1fad160c", "patch": "@@ -2381,7 +2381,7 @@ fold_rtx_mult_add (mult1, mult2, add1, mode)\n rtx\n biv_total_increment (bl, loop_start, loop_end)\n      struct iv_class *bl;\n-     rtx loop_start, loop_end;\n+     rtx loop_start ATTRIBUTE_UNUSED, loop_end ATTRIBUTE_UNUSED;\n {\n   struct induction *v;\n   rtx result;"}]}