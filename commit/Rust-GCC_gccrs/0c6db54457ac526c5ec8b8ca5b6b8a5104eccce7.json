{"sha": "0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2ZGI1NDQ1N2FjNTI2YzVlYzhiOGNhNWI2YjhhNTEwNGVjY2NlNw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-06-25T06:00:30Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-25T06:00:30Z"}, "message": "cpplib.c (do_include_common): Revert to correct line number if -traditional.\n\n\t* cpplib.c (do_include_common): Revert to correct line number\n\tif -traditional.\n\t* cpptrad.c (scan_out_logical_line): Treat null directive as\n\twhite space.  Invlidate MI optimization for non-whitespace\n\ttext outside a directive.\ntestsuite:\n\t* gcc.dg/cpp/mi7.c, gcc.dg/cpp/mi7a.h, gcc.dg/cpp/mi7b.h,\n\tgcc.dg/cpp/trad/builtins.c, gcc.dg/cpp/trad/builtins.h,\n\tgcc.dg/cpp/trad/cmdlne-C.c, gcc.dg/cpp/trad/cmdlne-C2.c,\n\tgcc.dg/cpp/trad/maccom1.c, gcc.dg/cpp/trad/maccom2.c,\n\tgcc.dg/cpp/trad/maccom3.c, gcc.dg/cpp/trad/maccom4.c,\n\tgcc.dg/cpp/trad/maccom6.c, gcc.dg/cpp/trad/mi1.c,\n\tgcc.dg/cpp/trad/mi1c.h, gcc.dg/cpp/trad/mi1nd.h,\n\tgcc.dg/cpp/trad/mi1ndp.h, gcc.dg/cpp/trad/mi1x.h,\n\tgcc.dg/cpp/trad/mi2.c, gcc.dg/cpp/trad/mi2a.h,\n\tgcc.dg/cpp/trad/mi2b.h, gcc.dg/cpp/trad/mi2c.h\n\tgcc.dg/cpp/trad/mi3.c, gcc.dg/cpp/trad/mi3.def,\n\tgcc.dg/cpp/trad/mi3.h, gcc.dg/cpp/trad/mi4.c,\n\tgcc.dg/cpp/trad/mi5.c, gcc.dg/cpp/trad/mi6.c,\n\tgcc.dg/cpp/trad/mi6a.h, gcc.dg/cpp/trad/mi6b.h,\n\tgcc.dg/cpp/trad/mi6c.h, gcc.dg/cpp/trad/mi6d.h,\n\tgcc.dg/cpp/trad/mi6e.h, gcc.dg/cpp/trad/mi7.c,\n\tgcc.dg/cpp/trad/mi7a.h, gcc.dg/cpp/trad/mi7b.h: New tests.\n\nFrom-SVN: r54978", "tree": {"sha": "72f86a445f4678c5b6afc75667e751ee6dcaf2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72f86a445f4678c5b6afc75667e751ee6dcaf2a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d74bba04e8561896d2ba0ec5170216a38e1fd352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74bba04e8561896d2ba0ec5170216a38e1fd352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74bba04e8561896d2ba0ec5170216a38e1fd352"}], "stats": {"total": 551, "additions": 549, "deletions": 2}, "files": [{"sha": "b54947b9b09f309b1debf06bb41b2e48fc171708", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -1,3 +1,11 @@\n+2002-06-25  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpplib.c (do_include_common): Revert to correct line number\n+\tif -traditional.\n+\t* cpptrad.c (scan_out_logical_line): Treat null directive as\n+\twhite space.  Invlidate MI optimization for non-whitespace\n+\ttext outside a directive.\n+\n 2002-06-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (SHELL): Set to @SHELL@."}, {"sha": "18e44ba5b09c0b35c889dede60e17c09ff498da5", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -705,6 +705,9 @@ do_include_common (pfile, type)\n \t    (*pfile->cb.include) (pfile, pfile->directive_line,\n \t\t\t\t  pfile->directive->name, header);\n \n+\t  /* Revert to the correct line if traditional.  */\n+\t  if (CPP_OPTION (pfile, traditional))\n+\t    pfile->line = pfile->saved_line;\n \t  _cpp_execute_include (pfile, header, type);\n \t}\n     }"}, {"sha": "9bcb91513b54417fe2601b17a267f986b82cce69", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -698,8 +698,12 @@ scan_out_logical_line (pfile, macro)\n \t      out = pfile->out.cur;\n \n \t      if (is_vspace (*cur))\n-\t\t/* Null directive ignored.  */\n-\t\tout = pfile->out.base;\n+\t\t{\n+\t\t  /* Null directive.  Ignore it and don't invalidate\n+\t\t     the MI optimization.  */\n+\t\t  out = pfile->out.base;\n+\t\t  continue;\n+\t\t}\n \t      else\n \t\t{\n \t\t  bool do_it = false;\n@@ -733,6 +737,10 @@ scan_out_logical_line (pfile, macro)\n \t  break;\n \t}\n \n+      /* Non-whitespace disables MI optimization.  */\n+      if (!pfile->state.in_directive)\n+\tpfile->mi_valid = false;\n+\n       if (lex_state == ls_none)\n \tcontinue;\n "}, {"sha": "6988b9c51d231d13ee7ecdc56807989c9618b705", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -1,3 +1,23 @@\n+2002-06-25  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/mi7.c, gcc.dg/cpp/mi7a.h, gcc.dg/cpp/mi7b.h,\n+\tgcc.dg/cpp/trad/builtins.c, gcc.dg/cpp/trad/builtins.h,\n+\tgcc.dg/cpp/trad/cmdlne-C.c, gcc.dg/cpp/trad/cmdlne-C2.c,\n+\tgcc.dg/cpp/trad/maccom1.c, gcc.dg/cpp/trad/maccom2.c,\n+\tgcc.dg/cpp/trad/maccom3.c, gcc.dg/cpp/trad/maccom4.c,\n+\tgcc.dg/cpp/trad/maccom6.c, gcc.dg/cpp/trad/mi1.c,\n+\tgcc.dg/cpp/trad/mi1c.h, gcc.dg/cpp/trad/mi1nd.h,\n+\tgcc.dg/cpp/trad/mi1ndp.h, gcc.dg/cpp/trad/mi1x.h,\n+\tgcc.dg/cpp/trad/mi2.c, gcc.dg/cpp/trad/mi2a.h,\n+\tgcc.dg/cpp/trad/mi2b.h, gcc.dg/cpp/trad/mi2c.h\n+\tgcc.dg/cpp/trad/mi3.c, gcc.dg/cpp/trad/mi3.def,\n+\tgcc.dg/cpp/trad/mi3.h, gcc.dg/cpp/trad/mi4.c,\n+\tgcc.dg/cpp/trad/mi5.c, gcc.dg/cpp/trad/mi6.c,\n+\tgcc.dg/cpp/trad/mi6a.h, gcc.dg/cpp/trad/mi6b.h,\n+\tgcc.dg/cpp/trad/mi6c.h, gcc.dg/cpp/trad/mi6d.h,\n+\tgcc.dg/cpp/trad/mi6e.h, gcc.dg/cpp/trad/mi7.c,\n+\tgcc.dg/cpp/trad/mi7a.h, gcc.dg/cpp/trad/mi7b.h: New tests.\n+\n 2002-06-24  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/trad/argcout.c, gcc.dg/cpp/trad/assembler.S,"}, {"sha": "e54d270ebe1d54bbf3c45f815260ec31b38319cf", "filename": "gcc/testsuite/gcc.dg/cpp/mi7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,19 @@\n+/* Test \"ignore redundant include\" facility.\n+\n+   -H is used because cpp might confuse the issue by optimizing out\n+   #line markers.  This test only passes if the headers is read\n+   twice.\n+\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do preprocess }\n+   { dg-options \"-H\" }\n+   { dg-error \"mi7a\\.h\\n\\[^\\n\\]*mi7a\\.h\\n\\[^\\n\\]*mi7b\\.h\\n\\[^\\n\\]*mi7b\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n+\n+#include \"mi7a.h\"\n+#include \"mi7a.h\"\n+#include \"mi7b.h\"\n+#include \"mi7b.h\""}, {"sha": "0c701d7e645cf9a1d13c8f571f403e95ee2cf308", "filename": "gcc/testsuite/gcc.dg/cpp/mi7a.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7a.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,4 @@\n+:\n+#ifndef GUARD1\n+#define GUARD1\n+#endif"}, {"sha": "1747e54825edee3c84da5c07be9f2506ee6725db", "filename": "gcc/testsuite/gcc.dg/cpp/mi7b.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi7b.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,4 @@\n+#ifndef GUARD2\n+#define GUARD2\n+#endif\n+:"}, {"sha": "df2718983a1acb4d29d2abd2f0bd39277b5c50da", "filename": "gcc/testsuite/gcc.dg/cpp/trad/builtins.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,52 @@\n+/* Test that builtin-macros are OK.  */\n+\n+/* { dg-do run } */\n+\n+#include \"builtins.h\"\n+\n+void abort (void);\n+char *strstr (const char *, const char *); \n+int strcmp (const char *, const char *);\n+\n+#define LINE __LINE__\n+\n+#if __LINE__ != 13\n+# error __LINE__ part 1  /* { dg-bogus \"__LINE__\" } */\n+#endif\n+\n+#if \\\n+  __LINE__ != 18\n+# error __LINE__ part 2  /* { dg-bogus \"__LINE__\" } */\n+#endif\n+\n+#if LINE != 22\n+# error __LINE__ part 3  /* { dg-bogus \"__LINE__\" } */\n+#endif\n+\n+#if __INCLUDE_LEVEL != 0\n+# error __INCLUDE_LEVEL__  /* { dg-bogus \"__INCLUDE_LEVEL__\" } */\n+#endif\n+\n+#if !defined (__TIME__)\n+# error __TIME__  /* { dg-bogus \"__TIME__\" } */\n+#endif\n+\n+#if !defined (__DATE__)\n+# error __DATE__  /* { dg-bogus \"__DATE__\" } */\n+#endif\n+\n+\n+int main ()\n+{\n+  /* level is defined in builtins.h.  */\n+  if (level != 1)\n+    abort ();\n+\n+  if (!strstr (__FILE__, \"builtins.c\"))\n+    abort ();\n+\n+  if (!strcmp (__BASE_FILE__, \"builtins.c\"))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "9f2b9a01402704f28513ed7f5b16ca3ee9560d0f", "filename": "gcc/testsuite/gcc.dg/cpp/trad/builtins.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fbuiltins.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1 @@\n+int level = __INCLUDE_LEVEL__;"}, {"sha": "ff67ddbdb7ba4b2fba95b50d879ab039620913b5", "filename": "gcc/testsuite/gcc.dg/cpp/trad/cmdlne-C.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-C -traditional-cpp\" } */\n+\n+/* Test -C doesn't fail with #define.  #define is the tricky case,\n+   being the only directive that remembers its comments.\n+\n+   -C treats comments as tokens in their own right, so e.g. comment at\n+   the beginning of a directive turns it into a non-directive.  */\n+\n+#define simple no comments\n+\n+#define/**/obj_like/**/(some)/**/thing/**/\n+#define fun_like(/**/x/**/,/**/y/**/)/**/\n+/**/#define not_a_macro\n+\n+#if !defined simple || !defined obj_like || !defined fun_like\n+#error Missed some macros with -C\n+#endif\n+\n+#ifdef not_a_macro\n+#error not_a_macro is!\n+#endif\n+\n+/* Check obj_like doesn't expect arguments, and fun_like does.  */\n+obj_like\n+fun_like (foo, bar)\n+\n+/* Check OK to redefine fun_like without comments in the params.  */\n+#define fun_like(x, y)/**/\n+\n+/* Check comments in macros in directives are OK.  */\n+#define ZERO 0 /* A trailing comment.  */\n+\n+#if ZERO\n+#endif"}, {"sha": "6836e9e9357a3f58baf489e3f447326a77b44c16", "filename": "gcc/testsuite/gcc.dg/cpp/trad/cmdlne-C2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcmdlne-C2.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-C -traditional-cpp\" } */\n+\n+/* Test that comments are actually written out\n+\n+   Neil Booth, 24 Jun 2002.  */\n+\n+/*\n+   { dg-final { if ![file exists cmdlne-C2.i] { return }                  } }\n+   { dg-final { if { [grep cmdlne-C2.i \"dg-final\"] != \"\" } { return }    } }\n+   { dg-final { fail \"cmdlne-C2.i: C comments output with -C\"        } }\n+*/\n+"}, {"sha": "da9c4a1e7dde0edd9bd80cc941674872f62e10d9", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom1.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC -traditional-cpp\" } */\n+\n+/* This tests to make sure that comments are ignored between # and the\n+   directive name when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#/**/define def passed\n+\n+def\n+\n+/*\n+   { dg-final { if ![file exists maccom1.i] { return }                    } }\n+   { dg-final { if { [grep maccom1.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom1.c: comment between # and directive name with -CC\" } }\n+*/"}, {"sha": "331c9fc8c8302a15cfe76532799c17601f173118", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom2.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC -traditional-cpp\" } */\n+\n+/* This tests to make sure that comments between the #define directive\n+   and the macro identifier are ignored (i.e. treated like whitespace)\n+   when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define/**/def passed\n+\n+def\n+\n+/*\n+   { dg-final { if ![file exists maccom2.i] { return }                    } }\n+   { dg-final { if { [grep maccom2.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom2.c: comment between #define and identifier with -CC\" } }\n+*/"}, {"sha": "b3dd3acba41fba4e0fdd4d3767671b5c202a29f0", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom3.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC -traditional-cpp\" } */\n+\n+/* This tests to make sure that comments in the definition of a macro\n+   parameter list are ignored when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define def(x /**/, y) passed\n+\n+def(x,y)\n+\n+/*\n+   { dg-final { if ![file exists maccom3.i] { return }                     } }\n+   { dg-final { if { [grep maccom3.i \"^passed\"] != \"\" } { return }         } }\n+   { dg-final { fail \"maccom3.c: comment in macro parameter list with -CC\" } }\n+*/"}, {"sha": "e962d2824dded76cac783483c541f0fc00ef5e7b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom4.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC -traditional-cpp\" } */\n+\n+/* This tests to make sure the comment is saved in the macro and copied\n+   to the output file when the macro is expanded when the -CC option is\n+   used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define def /* passed */\n+\n+def\n+\n+/*\n+   /* The + in the regexp prevents it from matching itself.  */\n+   { dg-final { if ![file exists maccom4.i] { return }                    } }\n+   { dg-final { if { [grep maccom4.i \"p+assed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom4.c: comment in macro expansion with -CC\"     } }\n+*/"}, {"sha": "13f0fc59bdc2bb1915022da9771e6346c98e740c", "filename": "gcc/testsuite/gcc.dg/cpp/trad/maccom6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmaccom6.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC -traditional-cpp\" } */\n+\n+/* This tests to make sure that expressions function properly\n+   when used with macros containing comments and the -CC option\n+   is being used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define ONE   1 /* one */\n+#define TWO   2 /* two */\n+#define THREE 3 /* three */\n+\n+#if (ONE + TWO) != THREE\n+failed\n+#else\n+passed\n+#endif\n+\n+/*\n+   { dg-final { if ![file exists maccom6.i] { return }                    } }\n+   { dg-final { if { [grep maccom6.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom6.c: comments in macro expressions with -CC\"  } }\n+*/"}, {"sha": "deb992920f8c8a687ce14662817f351595b20fea", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,36 @@\n+/* Test \"ignore redundant include\" facility.\n+\n+   We must test with C comments, and null directives, outside\n+   the guard conditional; also, we test guarding with #ifndef and #if\n+   !defined.  -H is used because cpp might confuse the issue by\n+   optimizing out #line markers.  This test only passes if each of the\n+   headers is read exactly once.\n+\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do compile }\n+   { dg-options \"-H -traditional-cpp\" }\n+   { dg-error \"mi1c\\.h\\n\\[^\\n\\]*mi1nd\\.h\\n\\[^\\n\\]*mi1ndp\\.h\\n\\[^\\n\\]*mi1x\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n+\n+#include \"mi1c.h\"\n+#include \"mi1c.h\"\n+#include \"mi1c.h\"\n+\n+#include \"mi1nd.h\"\n+#include \"mi1nd.h\"\n+\n+#include \"mi1ndp.h\"\n+#include \"mi1ndp.h\"\n+\n+#define MIX_H\n+#include \"mi1x.h\"\n+#include \"mi1x.h\"\n+\n+int\n+main (void)\n+{\n+  return a + c + d;\n+}"}, {"sha": "2956286eb22275bbcae03c24a2b3c91fc8b1f8f6", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1c.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1c.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,12 @@\n+/* Redundant header include test with C comments at top.  */\n+# /* And a null directive at the top.  */\n+\n+#ifndef CPP_MIC_H\n+#define CPP_MIC_H\n+\n+int a;\n+\n+#endif\n+\n+# /* And at the end, too!  */\n+/* And at the end too!  */"}, {"sha": "c14c1a3c6610023d7084b9bff79b0961d37b68ea", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1nd.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1nd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1nd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1nd.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,8 @@\n+/* Redundant include check with #if !defined.  */\n+\n+#if !defined CPP_MIND_H\n+#define CPP_MIND_H\n+\n+int c;\n+\n+#endif"}, {"sha": "b84202c6d33ea3b0e1e1879c2f3bb16e89936875", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1ndp.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1ndp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1ndp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1ndp.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,7 @@\n+#if !defined ( CPP_MINDP_H)\n+#define CPP_MINDP_H\n+\n+/* Redundant include check with #if !defined and parentheses.  */\n+int d;\n+\n+#endif"}, {"sha": "a317cf852bf6e3e9b46723aa1ccef88c71fe4da6", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1x.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1x.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,9 @@\n+/* This header is never to have its contents visible, but it should\n+   still receive the optimization.  */\n+\n+#ifndef MIX_H\n+#define MIX_H\n+\n+#define main wibble\n+\n+#endif"}, {"sha": "916d5a949d0faac60f42d376dad016fe29cacb92", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,12 @@\n+/* Test for overly eager multiple include optimization.\n+   Problem distilled from glibc 2.0.7's time.h, sys/time.h, timebits.h.\n+   Problem noted by Tom Tromey <tromey@cygnus.com>.  */\n+/* { dg-do compile } */\n+\n+#include \"mi2a.h\"\n+#include \"mi2b.h\"\n+\n+int main (void)\n+{\n+  return x;\n+}"}, {"sha": "e3f53b6cb2e036f8f16906add2475f05a7f65878", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi2a.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2a.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+/* Test for overly eager multiple include optimization.\n+   Problem distilled from glibc 2.0.7's time.h, sys/time.h, timebits.h. \n+   Problem noted by Tom Tromey <tromey@cygnus.com>.  */\n+\n+#include \"mi2c.h\""}, {"sha": "1d9a8b9b1c5e63dc3524eec8f4b7d6b767cc7bb1", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi2b.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2b.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,6 @@\n+/* Test for overly eager multiple include optimization.\n+   Problem distilled from glibc 2.0.7's time.h, sys/time.h, timebits.h. \n+   Problem noted by Tom Tromey <tromey@cygnus.com>.  */\n+\n+#define need_x\n+#include \"mi2c.h\""}, {"sha": "521792bee2f2c8687bc2cc9aa0c93b5d7336eaee", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi2c.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi2c.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,15 @@\n+/* Test for overly eager multiple include optimization.\n+   Problem distilled from glibc 2.0.7's time.h, sys/time.h, timebits.h. \n+   Problem noted by Tom Tromey <tromey@cygnus.com>.  */\n+#ifdef need_x\n+#undef need_x\n+#ifndef have_x\n+#define have_x\n+extern int x;\n+#endif\n+#endif\n+\n+#ifndef t_h\n+#define t_h\n+extern int y;\n+#endif"}, {"sha": "f33fd7887e9831c3602f4a191ec5bfbe3a237d79", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,20 @@\n+/* Another test case for over-eager multiple include optimization.\n+   This one distilled from glibc's setlocale.c and categories.def.  */\n+/* { dg-do compile } */\n+\n+#define X a\n+#include \"mi3.def\"\n+#undef X\n+\n+#define X b\n+#include \"mi3.def\"\n+#undef X\n+\n+#include \"mi3.h\"\n+#include \"mi3.h\"  /* The second include declares variable c.  */\n+\n+int\n+main(void)\n+{\n+  return a + b + c;\n+}"}, {"sha": "375d9c7fe349344d82ab0c321eefee0e5c92b46e", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi3.def", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.def?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,10 @@\n+/* Another test case for over-eager multiple include optimization.    \n+   This one distilled from glibc's setlocale.c and categories.def.\n+   The #ifdef block doesn't cover the entire file, so it must not be\n+   taken for a reinclude guard.  */\n+\n+#ifndef NO_POSTLOAD\n+#define NO_POSTLOAD NULL\n+#endif\n+\n+int X;"}, {"sha": "8774fcf486ab96bc2c149f6b6e67f7e832c8cae7", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi3.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi3.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,7 @@\n+/* Another test case for over-eager multiple include optimization. */\n+\n+#ifndef GUARD\n+#define GUARD\n+#elif 1\t\t\t\t/* #elif kills optimisation  */\n+int c;\n+#endif"}, {"sha": "c886cc2c8e5a1a78475b351157f0a092dafd5f03", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi4.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* Undefining a macro guard and re-including the file used to confuse\n+   file caching in cppfiles.c, and attempt to open a bad fd.  */\n+\n+#include \"mi1c.h\"\n+#undef CPP_MIC_H\n+#include \"mi1c.h\""}, {"sha": "fe3c8d202d3c2d1e1982f0483bf8b1606b91ce61", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,13 @@\n+/* Test \"ignore redundant include\" facility, with -C on.\n+\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do preprocess }\n+   { dg-options \"-H -C -traditional-cpp\" }\n+   { dg-error \"mi1c\\.h\" \"redundant include check with -C\" { target *-*-* } 0 } */\n+\n+#include \"mi1c.h\"\n+#include \"mi1c.h\""}, {"sha": "aa1c8ed2ec5974d3b9463b8ca5cd8d58c17cd237", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,59 @@\n+/* Another test case for over-eager multiple include optimization,\n+   where the leading \"#if !defined\" expression is obtained partially,\n+   or wholly, from macros.  Neil Booth, 30 Sep 2001.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Each include file should not be subject to MI optimisation, since\n+   macro definitions can change.  Each header increments the variable\n+   VAR if it is defined.\n+\n+   The first set of inclusions gets the headers into CPP's cache, but\n+   does nothing since VAR is not defined.  The second set should each\n+   increment VAR, since none of the initial set should have been\n+   flagged as optimizable.  */\n+\n+#define EMPTYL\n+#define EMPTYR\n+#define NOT !\n+#define DEFINED defined (guard)\n+#define NOT_DEFINED ! defined (guard)\n+\n+#include \"mi6a.h\"\n+#include \"mi6b.h\"\n+#include \"mi6c.h\"\n+#include \"mi6d.h\"\n+#include \"mi6e.h\"\n+\n+/* Define the macro guard, and redefine the macros to something that\n+   forces compilation of the conditional blocks.  */\n+#define guard\n+#undef EMPTYL\n+#define EMPTYL 1 ||\n+#undef EMPTYR\n+#define EMPTYR || 1\n+#undef NOT\n+#define NOT\n+#undef DEFINED\n+#define DEFINED 0\n+#undef NOT_DEFINED\n+#define NOT_DEFINED 1\n+\n+#define VAR five\n+\n+int\n+main(void)\n+{\n+  unsigned int five = 0;\n+\n+#include \"mi6a.h\"\n+#include \"mi6b.h\"\n+#include \"mi6c.h\"\n+#include \"mi6d.h\"\n+#include \"mi6e.h\"\n+\n+  if (five != 5)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "68a2fce4758c762f8c156d621387119802b8ce2a", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6a.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6a.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+#if NOT_DEFINED\n+ #ifdef VAR\n+   VAR++;\n+ #endif\n+#endif"}, {"sha": "d2fe8be178470f583f6cb53e86eb64de027bc57f", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6b.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6b.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+#if NOT defined (guard)\n+ #ifdef VAR\n+   VAR++;\n+ #endif\n+#endif"}, {"sha": "d19cb54335ff8c260de103559868b68cb6a9019c", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6c.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6c.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+#if !DEFINED\n+ #ifdef VAR\n+   VAR++;\n+ #endif\n+#endif"}, {"sha": "a1eabba8e926a6105e39e83f3404114b8e8e4b1b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6d.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6d.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6d.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6d.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+#if EMPTYL !defined (guard)\n+ #ifdef VAR\n+   VAR++;\n+ #endif\n+#endif"}, {"sha": "26ba7151475184c5992b9e3eb0125e2b87fac65f", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi6e.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6e.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6e.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi6e.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,5 @@\n+#if !defined (guard) EMPTYR\n+ #ifdef VAR\n+   VAR++;\n+ #endif\n+#endif"}, {"sha": "8a079d9dd574ae3db3ed32974fab680c38b2b333", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,19 @@\n+/* Test \"ignore redundant include\" facility.\n+\n+   -H is used because cpp might confuse the issue by optimizing out\n+   #line markers.  This test only passes if the headers is read\n+   twice.\n+\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do preprocess }\n+   { dg-options \"-H -traditional-cpp\" }\n+   { dg-error \"mi7a\\.h\\n\\[^\\n\\]*mi7a\\.h\\n\\[^\\n\\]*mi7b\\.h\\n\\[^\\n\\]*mi7b\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n+\n+#include \"mi7a.h\"\n+#include \"mi7a.h\"\n+#include \"mi7b.h\"\n+#include \"mi7b.h\""}, {"sha": "0c701d7e645cf9a1d13c8f571f403e95ee2cf308", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi7a.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7a.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,4 @@\n+:\n+#ifndef GUARD1\n+#define GUARD1\n+#endif"}, {"sha": "1747e54825edee3c84da5c07be9f2506ee6725db", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi7b.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7b.h?ref=0c6db54457ac526c5ec8b8ca5b6b8a5104eccce7", "patch": "@@ -0,0 +1,4 @@\n+#ifndef GUARD2\n+#define GUARD2\n+#endif\n+:"}]}