{"sha": "47907859fdd0b39ecb2a78c068872470f823329f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5MDc4NTlmZGQwYjM5ZWNiMmE3OGMwNjg4NzI0NzBmODIzMzI5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-07T00:13:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-07T00:13:35Z"}, "message": "varasm.c (assemble_constructor): Take a symbol_ref and a priority instead of a bare string.\n\n        * varasm.c (assemble_constructor): Take a symbol_ref and a\n        priority instead of a bare string.  Move priority handling\n        here from cp/decl2.c.\n        * output.h: Update decls.\n\n        * c-decl.c (c_expand_body): Update calls to assemble_constructor\n        and assemble_destructor.\n        * profile.c (output_func_start_profiler): Likewise.\n        * objc/objc-act.c (finish_objc): Likewise.\n        (build_module_descriptor): Return the symbol not the symbol name.\n\n        * ch/grant.c (chill_finish_compile): Pass a symbol_ref and priority\n        to assemble_constructor.\n\n        * cp/decl2.c (finish_objects): Pass a symbol_ref and priority to\n        assemble_{constructor,destructor}.  Remove priority handling.\n\n        * java/class.c (emit_register_classes): Pass a symbol_ref and priority\n        to assemble_constructor.\n\nFrom-SVN: r44678", "tree": {"sha": "fe1d06a13ef40c7bd7f7953e66a94a01e57f7d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1d06a13ef40c7bd7f7953e66a94a01e57f7d54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47907859fdd0b39ecb2a78c068872470f823329f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47907859fdd0b39ecb2a78c068872470f823329f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47907859fdd0b39ecb2a78c068872470f823329f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47907859fdd0b39ecb2a78c068872470f823329f/comments", "author": null, "committer": null, "parents": [{"sha": "362b68a82dcf98169e852579a784dd4bddcccc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362b68a82dcf98169e852579a784dd4bddcccc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362b68a82dcf98169e852579a784dd4bddcccc25"}], "stats": {"total": 167, "additions": 106, "deletions": 61}, "files": [{"sha": "1e18e1e5156e338078329b9994df4de72daafe18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1,3 +1,16 @@\n+2001-08-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (assemble_constructor): Take a symbol_ref and a\n+\tpriority instead of a bare string.  Move priority handling\n+\there from cp/decl2.c.\n+\t* output.h: Update decls.\n+\n+\t* c-decl.c (c_expand_body): Update calls to assemble_constructor\n+\tand assemble_destructor.\n+\t* profile.c (output_func_start_profiler): Likewise.\n+\t* objc/objc-act.c (finish_objc): Likewise.\n+\t(build_module_descriptor): Return the symbol not the symbol name.\n+\n 2001-08-06  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/darwin.h (DOUBLE_INT_ASM_OP): Add whitespace."}, {"sha": "6c5056f875eab26aa8687f25c31dfaeebac1b3a4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -6781,17 +6781,19 @@ c_expand_body (fndecl, nested_p)\n \tstatic_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n       else\n #endif\n-\tassemble_constructor (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl)));\n-\n+\tassemble_constructor (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t      DEFAULT_INIT_PRIORITY);\n     }\n+\n   if (DECL_STATIC_DESTRUCTOR (fndecl))\n     {\n #ifndef ASM_OUTPUT_DESTRUCTOR\n       if (! flag_gnu_linker)\n \tstatic_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n       else\n #endif\n-\tassemble_destructor (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl)));\n+\tassemble_destructor (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t     DEFAULT_INIT_PRIORITY);\n     }\n \n   if (nested_p)"}, {"sha": "b1c048b64ea5c74665972f16b5a50e3451d1a4db", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1,3 +1,8 @@\n+2001-08-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* grant.c (chill_finish_compile): Pass a symbol_ref and priority\n+\tto assemble_constructor.\n+\n 2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in (lex.o): No dependence on dwarfout.h."}, {"sha": "c10eb99dc20fee33a27dbe180e3a70dc65279910", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -3048,7 +3048,8 @@ chill_finish_compile ()\n \n       if (pass == 2)\n \t{\n-\t  assemble_constructor (IDENTIFIER_POINTER (chill_init_name));\n+\t  assemble_constructor (XEXP (DECL_RTL (chill_init_function), 0),\n+\t\t\t\tDEFAULT_INIT_PRIORITY);\n \t  globalize_decl (chill_init_function);\n \t}\n "}, {"sha": "1b3cceb301564f5c4aa21aa6c831feeba21f38f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1,3 +1,8 @@\n+2001-08-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl2.c (finish_objects): Pass a symbol_ref and priority to\n+\tassemble_{constructor,destructor}.  Remove priority handling.\n+\n 2001-08-05  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \tDon't allow template-id in using-declaration."}, {"sha": "be02224557f7a63be676b0e7ff4e2df07d181f60", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -2839,8 +2839,8 @@ finish_objects (method_type, initp, body)\n      int method_type, initp;\n      tree body;\n {\n-  const char *fnname;\n   tree fn;\n+  rtx fnsym;\n \n   /* Finish up.  */\n   finish_compound_stmt (/*has_no_scope=*/0, body);\n@@ -2853,31 +2853,11 @@ finish_objects (method_type, initp, body)\n   if (flag_syntax_only)\n     return;\n \n-  fnname = XSTR (XEXP (DECL_RTL (fn), 0), 0);\n-  if (initp == DEFAULT_INIT_PRIORITY)\n-    {\n-      if (method_type == 'I')\n-\tassemble_constructor (fnname);\n-      else\n-\tassemble_destructor (fnname);\n-    }\n-#if defined (ASM_OUTPUT_CONSTRUCTOR)\n-  /* If we're using init priority we can't use assemble_*tor, but on ELF\n-     targets we can stick the references into named sections for GNU ld\n-     to collect.  */\n-  else if (targetm.have_named_sections)\n-    {\n-      char buf[15];\n-      sprintf (buf, \".%ctors.%.5u\", method_type == 'I' ? 'c' : 'd',\n-\t       /* invert the numbering so the linker puts us in the proper\n-\t\t  order; constructors are run from right to left, and the\n-\t\t  linker sorts in increasing order.  */\n-\t       MAX_INIT_PRIORITY - initp);\n-      named_section (NULL_TREE, buf, 0);\n-      assemble_integer (XEXP (DECL_RTL (fn), 0),\n-\t\t\tPOINTER_SIZE / BITS_PER_UNIT, 1);\n-    }\n-#endif\n+  fnsym = XEXP (DECL_RTL (fn), 0);\n+  if (method_type == 'I')\n+    assemble_constructor (fnsym, initp);\n+  else\n+    assemble_destructor (fnsym, initp);\n }\n \n /* The names of the parameters to the function created to handle"}, {"sha": "5273aaf5cfa0a23a0c8e2397becf0a5fca09b33f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1,3 +1,8 @@\n+2001-08-06  Richard Henderson  <rth@redhat.com>\n+\n+        * class.c (emit_register_classes): Pass a symbol_ref and priority\n+\tto assemble_constructor.\n+\n 2001-08-02  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* java-tree.h (all_class_filename): New macro."}, {"sha": "3cb8aa4e3983bb97c40b71932c8d718acad2dc0b", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1903,7 +1903,7 @@ emit_register_classes ()\n     flag_inline_functions = saved_flag;\n   }\n   current_function_decl = NULL_TREE;\n-  assemble_constructor (IDENTIFIER_POINTER (init_name));\n+  assemble_constructor (XEXP (DECL_RTL (init_decl), 0), DEFAULT_INIT_PRIORITY);\n }\n \n void"}, {"sha": "67e4000252b85ed07109536109205dbf12a0d249", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -165,7 +165,7 @@ static void objc_post_options\t\t\tPARAMS ((void));\n \n static void synth_module_prologue\t\tPARAMS ((void));\n static tree build_constructor\t\t\tPARAMS ((tree, tree));\n-static const char *build_module_descriptor      PARAMS ((void));\n+static rtx build_module_descriptor\t\tPARAMS ((void));\n static tree init_module_descriptor\t\tPARAMS ((tree));\n static tree build_objc_method_call\t\tPARAMS ((int, tree, tree,\n \t\t\t\t\t\t       tree, tree, tree));\n@@ -1836,13 +1836,12 @@ init_module_descriptor (type)\n \n /* Write out the data structures to describe Objective C classes defined.\n    If appropriate, compile and output a setup function to initialize them.\n-   Return a string which is the name of a function to call to initialize\n-   the Objective C data structures for this file (and perhaps for other files\n-   also).\n+   Return a symbol_ref to the function to call to initialize the Objective C\n+   data structures for this file (and perhaps for other files also).\n \n    struct objc_module { ... } _OBJC_MODULE = { ... };   */\n \n-static const char *\n+static rtx\n build_module_descriptor ()\n {\n   tree decl_specs, field_decl, field_decl_chain;\n@@ -1911,7 +1910,7 @@ build_module_descriptor ()\n      way of generating the requisite code.  */\n \n   if (flag_next_runtime)\n-    return 0;\n+    return NULL_RTX;\n \n   {\n     tree parms, function_decl, decelerator, void_list_node_1;\n@@ -1967,8 +1966,7 @@ build_module_descriptor ()\n     function_decl = current_function_decl;\n     finish_function (0);\n \n-    /* Return the name of the constructor function.  */\n-    return XSTR (XEXP (DECL_RTL (function_decl), 0), 0);\n+    return XEXP (DECL_RTL (function_decl), 0);\n   }\n }\n \n@@ -8361,9 +8359,9 @@ finish_objc ()\n       || meth_var_names_chain || meth_var_types_chain || sel_ref_chain)\n     {\n       /* Arrange for Objc data structures to be initialized at run time.  */\n-      const char *init_name = build_module_descriptor ();\n-      if (init_name)\n-\tassemble_constructor (init_name);\n+      rtx init_sym = build_module_descriptor ();\n+      if (init_sym)\n+\tassemble_constructor (init_sym, DEFAULT_INIT_PRIORITY);\n     }\n \n   /* Dump the class references.  This forces the appropriate classes"}, {"sha": "574d6f654b2ccca483820978d5e45abe1a8c0514", "filename": "gcc/output.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -257,16 +257,14 @@ extern void assemble_variable\t\tPARAMS ((tree, int, int, int));\n extern void assemble_external\t\tPARAMS ((tree));\n #endif /* TREE_CODE */\n \n-/* Record an element in the table of global destructors.\n-   How this is done depends on what sort of assembler and linker\n-   are in use.\n-\n-   NAME should be the name of a global function to be called\n-   at exit time.  This name is output using assemble_name.  */\n-extern void assemble_destructor\t\tPARAMS ((const char *));\n+#ifdef RTX_CODE\n+/* Record an element in the table of global destructors.  The argument\n+   should be a SYMBOL_REF of the function to be called.  */\n+extern void assemble_destructor\t\tPARAMS ((rtx, int));\n \n /* Likewise for global constructors.  */\n-extern void assemble_constructor\tPARAMS ((const char *));\n+extern void assemble_constructor\tPARAMS ((rtx, int));\n+#endif\n \n /* Likewise for entries we want to record for garbage collection.\n    Garbage collection is still under development.  */"}, {"sha": "a872ab850c6b25625251579218c98259557c7c77", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -1147,5 +1147,5 @@ output_func_start_profiler ()\n     fflush (asm_out_file);\n   current_function_decl = NULL_TREE;\n \n-  assemble_constructor (IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+  assemble_constructor (XEXP (DECL_RTL (fndecl), 0), DEFAULT_INIT_PRIORITY);\n }"}, {"sha": "b7335d3b04588c7a2947978e1fc6de40502f22ba", "filename": "gcc/varasm.c", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47907859fdd0b39ecb2a78c068872470f823329f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=47907859fdd0b39ecb2a78c068872470f823329f", "patch": "@@ -813,17 +813,34 @@ assemble_asm (string)\n   fprintf (asm_out_file, \"\\t%s\\n\", TREE_STRING_POINTER (string));\n }\n \n-/* Record an element in the table of global destructors.\n-   How this is done depends on what sort of assembler and linker\n-   are in use.\n-\n-   NAME should be the name of a global function to be called\n-   at exit time.  This name is output using assemble_name.  */\n+/* Record an element in the table of global destructors.  The argument\n+   should be a SYMBOL_REF of the function to be called.  */\n \n void\n-assemble_destructor (name)\n-     const char *name;\n+assemble_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n {\n+  const char *name;\n+\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    abort ();\n+  name = XSTR (symbol, 0);\n+\n+  if (priority != DEFAULT_INIT_PRIORITY\n+      && targetm.have_named_sections)\n+    {\n+      char buf[15];\n+      sprintf (buf, \".dtors.%.5u\",\n+\t       /* Invert the numbering so the linker puts us in the proper\n+\t\t  order; constructors are run from right to left, and the\n+\t\t  linker sorts in increasing order.  */\n+\t       MAX_INIT_PRIORITY - priority);\n+      named_section_flags (buf, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+      assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+      return;\n+    }\n+\n #ifdef ASM_OUTPUT_DESTRUCTOR\n   ASM_OUTPUT_DESTRUCTOR (asm_out_file, name);\n #else\n@@ -841,9 +858,30 @@ assemble_destructor (name)\n /* Likewise for global constructors.  */\n \n void\n-assemble_constructor (name)\n-     const char *name;\n+assemble_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n {\n+  const char *name;\n+\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    abort ();\n+  name = XSTR (symbol, 0);\n+\n+  if (priority != DEFAULT_INIT_PRIORITY\n+      && targetm.have_named_sections)\n+    {\n+      char buf[15];\n+      sprintf (buf, \".ctors.%.5u\",\n+\t       /* Invert the numbering so the linker puts us in the proper\n+\t\t  order; constructors are run from right to left, and the\n+\t\t  linker sorts in increasing order.  */\n+\t       MAX_INIT_PRIORITY - priority);\n+      named_section_flags (buf, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+      assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+      return;\n+    }\n+\n #ifdef ASM_OUTPUT_CONSTRUCTOR\n   ASM_OUTPUT_CONSTRUCTOR (asm_out_file, name);\n #else"}]}