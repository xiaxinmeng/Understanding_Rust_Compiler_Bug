{"sha": "5c9343960762bda86bc64dc19862dcf3088102cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5MzQzOTYwNzYyYmRhODZiYzY0ZGMxOTg2MmRjZjMwODgxMDJjZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-08T19:50:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-08T19:50:29Z"}, "message": "re PR c++/58706 (ICE with lambda in OpenMP for-loop)\n\n\tPR c++/58706\n\t* parser.c: Include tree-iterator.h.\n\t(cp_parser_omp_for_loop_init): Move lambda DECL_EXPRs from init\n\tto FOR_BLOCK.\n\t(cp_parser_omp_for_loop): Handle non-STATEMENT_LIST FOR_BLOCK\n\tentries.\n\n\t* testsuite/libgomp.c++/pr58706.C: New test.\n\nFrom-SVN: r239251", "tree": {"sha": "3f56e326fdf2a763aae6e017857aec98eedbd43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f56e326fdf2a763aae6e017857aec98eedbd43d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c9343960762bda86bc64dc19862dcf3088102cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9343960762bda86bc64dc19862dcf3088102cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9343960762bda86bc64dc19862dcf3088102cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9343960762bda86bc64dc19862dcf3088102cd/comments", "author": null, "committer": null, "parents": [{"sha": "77524e0d975d91248c2178a7d607cc6a19209cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77524e0d975d91248c2178a7d607cc6a19209cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77524e0d975d91248c2178a7d607cc6a19209cb6"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "bd036a8a6280b26159b80266b119b0fb7bc84d61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9343960762bda86bc64dc19862dcf3088102cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9343960762bda86bc64dc19862dcf3088102cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c9343960762bda86bc64dc19862dcf3088102cd", "patch": "@@ -1,9 +1,18 @@\n+2016-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/58706\n+\t* parser.c: Include tree-iterator.h.\n+\t(cp_parser_omp_for_loop_init): Move lambda DECL_EXPRs from init\n+\tto FOR_BLOCK.\n+\t(cp_parser_omp_for_loop): Handle non-STATEMENT_LIST FOR_BLOCK\n+\tentries.\n+\n 2016-08-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* call.c (convert_like_real): Harmonize diagnostics for invalid\n \treference binding.\n \n-2016-08-05 Martin Sebor  <msebor@redhat.com>\n+2016-08-05  Martin Sebor  <msebor@redhat.com>\n \n \t* constexpr.c (cxx_eval_store_expression): Remove hyphen from\n \tthe spelling of \"constant-expression\" in diagnostic messages"}, {"sha": "cff735ba65914b4167f558a087fa03735d1572b6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9343960762bda86bc64dc19862dcf3088102cd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9343960762bda86bc64dc19862dcf3088102cd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5c9343960762bda86bc64dc19862dcf3088102cd", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"cp-cilkplus.h\"\n #include \"gcc-rich-location.h\"\n+#include \"tree-iterator.h\"\n \n \f\n /* The lexer.  */\n@@ -33495,7 +33496,33 @@ cp_parser_omp_for_loop_init (cp_parser *parser,\n \t\t  init = NULL_TREE;\n \t\t}\n \t      else\n-\t\tinit = pop_stmt_list (this_pre_body);\n+\t\t{\n+\t\t  init = pop_stmt_list (this_pre_body);\n+\t\t  if (init && TREE_CODE (init) == STATEMENT_LIST)\n+\t\t    {\n+\t\t      tree_stmt_iterator i = tsi_start (init);\n+\t\t      /* Move lambda DECL_EXPRs to FOR_BLOCK.  */\n+\t\t      while (!tsi_end_p (i))\n+\t\t\t{\n+\t\t\t  tree t = tsi_stmt (i);\n+\t\t\t  if (TREE_CODE (t) == DECL_EXPR\n+\t\t\t      && TREE_CODE (DECL_EXPR_DECL (t)) == TYPE_DECL)\n+\t\t\t    {\n+\t\t\t      tsi_delink (&i);\n+\t\t\t      vec_safe_push (for_block, t);\n+\t\t\t      continue;\n+\t\t\t    }\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      if (tsi_one_before_end_p (i))\n+\t\t\t{\n+\t\t\t  tree t = tsi_stmt (i);\n+\t\t\t  tsi_delink (&i);\n+\t\t\t  free_stmt_list (init);\n+\t\t\t  init = t;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t      this_pre_body = NULL_TREE;\n \t    }\n \t  else\n@@ -33899,7 +33926,13 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n     }\n \n   while (!for_block->is_empty ())\n-    add_stmt (pop_stmt_list (for_block->pop ()));\n+    {\n+      tree t = for_block->pop ();\n+      if (TREE_CODE (t) == STATEMENT_LIST)\n+\tadd_stmt (pop_stmt_list (t));\n+      else\n+\tadd_stmt (t);\n+    }\n   release_tree_vector (for_block);\n \n   return ret;"}, {"sha": "ae5f28ffcc68ce0a57eae46ec4d3e63d6b6dcddb", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9343960762bda86bc64dc19862dcf3088102cd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9343960762bda86bc64dc19862dcf3088102cd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5c9343960762bda86bc64dc19862dcf3088102cd", "patch": "@@ -1,3 +1,8 @@\n+2016-08-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/58706\n+\t* testsuite/libgomp.c++/pr58706.C: New test.\n+\n 2016-08-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c++/routine-1-auto.C: New file."}, {"sha": "3d8ea89ceb43a5100c33137f9974774764346646", "filename": "libgomp/testsuite/libgomp.c++/pr58706.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9343960762bda86bc64dc19862dcf3088102cd/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr58706.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9343960762bda86bc64dc19862dcf3088102cd/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr58706.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr58706.C?ref=5c9343960762bda86bc64dc19862dcf3088102cd", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/58706\n+// { dg-do run }\n+// { dg-options \"-std=c++11\" }\n+\n+template <typename T>\n+T\n+foo ()\n+{\n+  T n = T ();\n+#pragma omp parallel for reduction (+: n)\n+  for (T i = [](){ return 3; }(); i < 10; ++i)\n+    n++;\n+  return n;\n+}\n+\n+template <typename T>\n+T\n+bar ()\n+{\n+  T n = T ();\n+#pragma omp parallel for reduction (+: n)\n+  for (T i = [](){ return 1; }() + [](){ return 4; }(); i < 10; ++i)\n+    n++;\n+  return n;\n+}\n+\n+template <typename T>\n+T\n+baz ()\n+{\n+  T n = T ();\n+#pragma omp parallel for reduction (+: n)\n+  for (T i = T (); i < [](){ return 7; }() + [](){ return 11; }(); i += [](){ return 3; }() - [](){ return 1; }())\n+    n++;\n+  return n;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo <int> () != 7 || foo <long long> () != 7)\n+    __builtin_abort ();\n+  if (bar <int> () != 5 || bar <char> () != 5)\n+    __builtin_abort ();\n+  if (baz <int> () != 9 || baz <long long> () != 9)\n+    __builtin_abort ();\n+}"}]}