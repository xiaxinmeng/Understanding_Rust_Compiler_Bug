{"sha": "301680433d60925930ae1699865ab4a7fd3eb6ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxNjgwNDMzZDYwOTI1OTMwYWUxNjk5ODY1YWI0YTdmZDNlYjZhYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:26:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:26:14Z"}, "message": "[multiple changes]\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch6.adb: Minor reformatting.\n\n2011-11-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Check_Formal_Package_Instance): If a formal\n\tsubprogram of the formal package is covered by an others\n\tassociation with a box initialization, no check is needed\n\tagainst the actual in the instantiation of the formal package.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Check_Internal_Call_Continue): Suppress junk\n\telab warning from within precondition/postcondition etc.\n\nFrom-SVN: r181561", "tree": {"sha": "df49f17be25b158bdbad3f2795e042d01355a11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df49f17be25b158bdbad3f2795e042d01355a11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/301680433d60925930ae1699865ab4a7fd3eb6ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301680433d60925930ae1699865ab4a7fd3eb6ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301680433d60925930ae1699865ab4a7fd3eb6ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301680433d60925930ae1699865ab4a7fd3eb6ab/comments", "author": null, "committer": null, "parents": [{"sha": "bdf69d333e4c6d080e8be3ad9d71fb1895e85d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf69d333e4c6d080e8be3ad9d71fb1895e85d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf69d333e4c6d080e8be3ad9d71fb1895e85d03"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "6673328acaf560c814444f8081e5a4ebf87dc92a", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=301680433d60925930ae1699865ab4a7fd3eb6ab", "patch": "@@ -8532,8 +8532,8 @@ package body Exp_Ch6 is\n          return False;\n \n       --  Handle a corner case, a cross-dialect subp renaming. For example,\n-      --  an Ada 2012 renaming of an Ada 05 subprogram. This can occur when a\n-      --  non-Ada 2012 unit references predefined run-time units.\n+      --  an Ada 2012 renaming of an Ada 2005 subprogram. This can occur when\n+      --  an Ada 2005 (or earlier) unit references predefined run-time units.\n \n       elsif Present (Alias (Func_Id)) then\n "}, {"sha": "2a431f8635e125f4c411974b252652111cb26ff4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=301680433d60925930ae1699865ab4a7fd3eb6ab", "patch": "@@ -5076,6 +5076,18 @@ package body Sem_Ch12 is\n             then\n                null;\n \n+            --  If the formal package has an \"others\"  box association that\n+            --  covers this formal, there is no need for a check either.\n+\n+            elsif Nkind (Unit_Declaration_Node (E2)) in\n+                    N_Formal_Subprogram_Declaration\n+              and then Box_Present (Unit_Declaration_Node (E2))\n+            then\n+               null;\n+\n+            --  Otherwise the actual in the formal and the actual in the\n+            --  instantiation of the formal must match, up to renamings.\n+\n             else\n                Check_Mismatch\n                  (Ekind (E2) /= Ekind (E1) or else (Alias (E1)) /= Alias (E2));\n@@ -12383,9 +12395,11 @@ package body Sem_Ch12 is\n       procedure Reset_Entity (N : Node_Id) is\n \n          procedure Set_Global_Type (N : Node_Id; N2 : Node_Id);\n-         --  If the type of N2 is global to the generic unit. Save the type in\n-         --  the generic node.\n-         --  What does this comment mean???\n+         --  If the type of N2 is global to the generic unit, save the type in\n+         --  the generic node. Just as we perform name capture for explicit\n+         --  references within the generic, we must capture the global types\n+         --  of local entities because they may participate in resolution in\n+         --  the instance.\n \n          function Top_Ancestor (E : Entity_Id) return Entity_Id;\n          --  Find the ultimate ancestor of the current unit. If it is not a"}, {"sha": "d51dae91b33856da85349e1847a3acfb463fa270", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301680433d60925930ae1699865ab4a7fd3eb6ab/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=301680433d60925930ae1699865ab4a7fd3eb6ab", "patch": "@@ -2130,7 +2130,32 @@ package body Sem_Elab is\n       end if;\n \n       --  Here is the case of calling a subprogram where the body has not yet\n-      --  been encountered, a warning message is needed.\n+      --  been encountered. A warning message is needed, except if this is the\n+      --  case of appearing within an aspect specification that results in\n+      --  a check call, we do not really have such a situation, so no warning\n+      --  is needed (e.g., the case of a precondition, where the call appears\n+      --  textually before the body, but in actual fact is moved to the\n+      --  appropriate subprogram body and so does not need a check).\n+\n+      declare\n+         P : Node_Id;\n+      begin\n+         P := Parent (N);\n+         loop\n+            if Nkind (P) in N_Subexpr then\n+               P := Parent (P);\n+            elsif Nkind (P) = N_If_Statement\n+              and then Nkind (Original_Node (P)) = N_Pragma\n+              and then Present (Corresponding_Aspect (Original_Node (P)))\n+            then\n+               return;\n+            else\n+               exit;\n+            end if;\n+         end loop;\n+      end;\n+\n+      --  Not that special case, warning and dynamic check is required\n \n       --  If we have nothing in the call stack, then this is at the outer\n       --  level, and the ABE is bound to occur."}]}