{"sha": "ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmMDhhNmVkN2FkZTg2NmRhYjc5ZTFjMGRjODUzYmFlODg3ZjllMg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-05-03T17:55:46Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-05-03T17:55:46Z"}, "message": "c-decl.c (store_parm_decls_oldstyle): Let diagnostic machinery decide if the warning will be printed.\n\n* c-decl.c (store_parm_decls_oldstyle): Let diagnostic machinery\ndecide if the warning will be printed.\n* calls.c (expand_call): Likewise.\n* function.c (init-function_start): Likewise.\n\n* common.opt (-fdiagnostics-show-option): New.\n* opts.c (option_enabled): Accept the option index instead of a\npointer to the option descriptor.\n* opts.h (option_enabled): Likewise.\n* toplev.c (print_switch_values): Pass option index, not option\ndescriptor.\n* diagnostic.h (diagnostic_info): Add option_index.\n* diagnostic.c: Include opts.h.\n(diagnostic_set_info): Initialize option_index.\n(diagnostic_report_diagnostic): Amend option name if appropriate.\n(warning): Check to see if the specified warning is enabled.\nStore option index.\n* doc/invoke.texi (-fdiagnostics-show-options): Document.\n\nFrom-SVN: r99169", "tree": {"sha": "cff3402fafefe694afbb81cbc70f93161517f19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff3402fafefe694afbb81cbc70f93161517f19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/comments", "author": null, "committer": null, "parents": [{"sha": "6ceec5933a1159c7b5595047ee435343f58ed038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ceec5933a1159c7b5595047ee435343f58ed038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ceec5933a1159c7b5595047ee435343f58ed038"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "941c6a7aa8f9151430844d54f6a0db1a4784c59f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -1,3 +1,24 @@\n+2005-05-03  DJ Delorie  <dj@redhat.com>\n+\n+\t* c-decl.c (store_parm_decls_oldstyle): Let diagnostic machinery\n+\tdecide if the warning will be printed.\n+\t* calls.c (expand_call): Likewise.\n+\t* function.c (init-function_start): Likewise.\n+\n+\t* common.opt (-fdiagnostics-show-option): New.\n+\t* opts.c (option_enabled): Accept the option index instead of a\n+\tpointer to the option descriptor.\n+\t* opts.h (option_enabled): Likewise.\n+\t* toplev.c (print_switch_values): Pass option index, not option\n+\tdescriptor.\n+\t* diagnostic.h (diagnostic_info): Add option_index.\n+\t* diagnostic.c: Include opts.h.\n+\t(diagnostic_set_info): Initialize option_index.\n+\t(diagnostic_report_diagnostic): Amend option name if appropriate.\n+\t(warning): Check to see if the specified warning is enabled.\n+\tStore option index.\n+\t* doc/invoke.texi (-fdiagnostics-show-options): Document.\n+\n 2005-05-03  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.h (REG_CLASS_CONTENTS): Fix ALL_REGS and"}, {"sha": "e7ac0d3690da5e6f9e5183dd7fc325e31601e9c2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -6011,8 +6011,8 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n     gcc_assert (TREE_CODE (b->decl) != PARM_DECL || !DECL_WEAK (b->decl));\n #endif\n \n-  if (warn_old_style_definition && !in_system_header)\n-    warning (0, \"%Jold-style function definition\", fndecl);\n+  if (!in_system_header)\n+    warning (OPT_Wold_style_definition, \"%Jold-style function definition\", fndecl);\n \n   /* Match each formal parameter name with its declaration.  Save each\n      decl in the appropriate TREE_PURPOSE slot of the parmids chain.  */"}, {"sha": "b26e87308a1995a661bb2602b6f2fb70ec8063b5", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -1934,8 +1934,8 @@ expand_call (tree exp, rtx target, int ignore)\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n-  if (warn_aggregate_return && AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n-    warning (0, \"function call has aggregate value\");\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n+    warning (OPT_Waggregate_return, \"function call has aggregate value\");\n \n   /* If the result of a pure or const function call is ignored (or void),\n      and none of its arguments are volatile, we can avoid expanding the"}, {"sha": "466077cb6ff6d7e9c157b8d02ea3fdeabee5d4b2", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -336,6 +336,10 @@ fdiagnostics-show-location=\n Common Joined RejectNegative\n -fdiagnostics-show-location=[once|every-line]\tHow often to emit source location at the beginning of line-wrapped diagnostics\n \n+fdiagnostics-show-option\n+Common Var(diagnostics_show_options)\n+Amend appropriate diagnostic messages with the command line option that controls them.\n+\n fdump-\n Common Joined RejectNegative\n -fdump-<type>\tDump various compiler internals to a file"}, {"sha": "b50fb1410c44e0863537eb5b125dfc3a106c0a8e", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -40,6 +40,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n+#include \"opts.h\"\n \n \n /* Prototypes.  */\n@@ -120,6 +121,7 @@ diagnostic_set_info (diagnostic_info *diagnostic, const char *msgid,\n   diagnostic->message.format_spec = _(msgid);\n   diagnostic->location = location;\n   diagnostic->kind = kind;\n+  diagnostic->option_index = 0;\n }\n \n /* Return a malloc'd string describing a location.  The caller is\n@@ -333,6 +335,11 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   if (diagnostic_count_diagnostic (context, diagnostic))\n     {\n+      if (diagnostics_show_options && diagnostic->option_index)\n+\tdiagnostic->message.format_spec\n+\t  = ACONCAT ((diagnostic->message.format_spec,\n+\t\t      \" [\", cl_options[diagnostic->option_index].opt_text, \"]\", NULL));\n+\n       pp_prepare_to_format (context->printer, &diagnostic->message,\n \t\t\t    &diagnostic->location);\n       (*diagnostic_starter (context)) (context, diagnostic);\n@@ -412,13 +419,18 @@ inform (const char *msgid, ...)\n /* A warning.  Use this for code which is correct according to the\n    relevant language specification but is likely to be buggy anyway.  */\n void\n-warning (int opt ATTRIBUTE_UNUSED, const char *msgid, ...)\n+warning (int opt, const char *msgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n+  if (opt && ! option_enabled (opt))\n+    return;\n+\n   va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_WARNING);\n+  diagnostic.option_index = opt;\n+\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }"}, {"sha": "37cded711806b9c73abef4400fe5e2c4993152df", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -43,6 +43,8 @@ typedef struct\n   location_t location;\n   /* The kind of diagnostic it is about.  */\n   diagnostic_t kind;\n+  /* Which OPT_* directly controls this diagnostic.  */\n+  int option_index;\n } diagnostic_info;\n \n #define pedantic_error_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)"}, {"sha": "2de05a8baa068d4483c4a17421071a55f37aa653", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -206,7 +206,8 @@ Objective-C and Objective-C++ Dialects}.\n @item Language Independent Options\n @xref{Language Independent Options,,Options to Control Diagnostic Messages Formatting}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n--fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}}\n+-fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}} @gol\n+-fdiagnostics-show-options\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n@@ -2090,6 +2091,13 @@ messages reporter to emit the same source location information (as\n prefix) for physical lines that result from the process of breaking\n a message which is too long to fit on a single line.\n \n+@item -fdiagnostics-show-options\n+@opindex fdiagnostics-show-options\n+This option instructs the diagnostic machinery to add text to each\n+diagnostic emitted, which indicates which command line option directly\n+controls that diagnostic, when such an option is known to the\n+diagnostic machinery.\n+\n @end table\n \n @node Warning Options"}, {"sha": "065c1244e9d698daa22da9bcd0be5964e1ca0516", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -3850,9 +3850,8 @@ init_function_start (tree subr)\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n-  if (warn_aggregate_return\n-      && AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr))))\n-    warning (0, \"function returns an aggregate\");\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr))))\n+    warning (OPT_Waggregate_return, \"function returns an aggregate\");\n }\n \n /* Make sure all values used by the optimization passes have sane"}, {"sha": "4311f4ced13e54ac61208dd04a72dad0c344295d", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -1400,8 +1400,9 @@ wrap_help (const char *help, const char *item, unsigned int item_width)\n    a simple on-off switch.  */\n \n int\n-option_enabled (const struct cl_option *option)\n+option_enabled (int opt_idx)\n {\n+  const struct cl_option *option = &(cl_options[opt_idx]);\n   if (option->flag_var)\n     switch (option->var_cond)\n       {"}, {"sha": "bed419e820d7fee014021ff6746f34dd2c129a77", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -71,7 +71,7 @@ extern const char **in_fnames;\n extern unsigned num_in_fnames;\n \n extern void decode_options (unsigned int argc, const char **argv);\n-extern int option_enabled (const struct cl_option *);\n+extern int option_enabled (int opt_idx);\n extern void print_filtered_help (unsigned int);\n \n #endif"}, {"sha": "9f1bb79e8f3b541abee5a61122dc692613ad3ec4", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf08a6ed7ade866dab79e1c0dc853bae887f9e2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ccf08a6ed7ade866dab79e1c0dc853bae887f9e2", "patch": "@@ -1360,7 +1360,7 @@ print_switch_values (FILE *file, int pos, int max,\n \n   for (j = 0; j < cl_options_count; j++)\n     if ((cl_options[j].flags & CL_REPORT)\n-\t&& option_enabled (&cl_options[j]) > 0)\n+\t&& option_enabled (j) > 0)\n       pos = print_single_switch (file, pos, max, indent, sep, term,\n \t\t\t\t \"\", cl_options[j].opt_text);\n "}]}