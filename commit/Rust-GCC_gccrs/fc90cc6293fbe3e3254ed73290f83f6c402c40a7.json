{"sha": "fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5MGNjNjI5M2ZiZTNlMzI1NGVkNzMyOTBmODNmNmM0MDJjNDBhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:02:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:02:30Z"}, "message": "[multiple changes]\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call): Check for a call to a function\n\tdeclared in a Dimension I/O package, to handle the new Image\n\tfunction.\n\n2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.ads: Minor comment fixes.\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* a-comutr.ads (Tree_Node_Access): Add No_Strict_Aliasing, because\n\twe're doing unchecked conversions with this pointer.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Next_Protected_Operation): An expression function\n\tused as a completion can be the next protected operation in a\n\tprotected body.\n\n2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Is_OK_Volatile_Context): Add a guard when checking a\n\tpossible call to an instance of Ada.Unchecked_Conversion to avoid\n\ttesting protected function calls. Allow references to protected objects\n\tin prefixed protected calls.\n\t(Is_Protected_Operation_Call): New routine.\n\n2015-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch5.adb, exp_ch5.ads (Expand_Iterator_Loop_Over_Array): Make\n\tquery public. Remove code handling with iterator loop over array\n\tof the 'in' form, which is not allowed in Ada.\t* exp_spark.adb\n\t(Expand_SPARK): Expand loop statements that take the form of an\n\titerator over an array.\n\t* sem_ch5.adb (Analyze_Loop_Statement): Do not analyze loop statements\n\tthat take the form of an iterator over an array, so that the rewritten\n\tform gets analyzed instead.\n\t* sem_util.adb, sem_util.ads (Is_Iterator_Over_Array): New query\n\tto recognize iterators over arrays.\n\n2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-excdeb.ads, s-excdeb.adb (Debug_Raise_Exception): Add\n\tparameter Message.\n\t* a-except.adb (Raise_Current_Excep): Update call to\n\tDebug_Raise_Exception.\n\t* a-except-2005.adb (Complete_Occurrence): Ditto.\n\t* sem_ch12.adb: Whitespace fix.\n\nFrom-SVN: r229056", "tree": {"sha": "01c4f4030abe79cbef54300da9f283bc2f271239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01c4f4030abe79cbef54300da9f283bc2f271239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/comments", "author": null, "committer": null, "parents": [{"sha": "7e729474b27556fc64cf413e32b460bce101b435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e729474b27556fc64cf413e32b460bce101b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e729474b27556fc64cf413e32b460bce101b435"}], "stats": {"total": 281, "additions": 217, "deletions": 64}, "files": [{"sha": "4022dfc0a079b3e47851e81c51d681e244d159b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -1,3 +1,54 @@\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): Check for a call to a function\n+\tdeclared in a Dimension I/O package, to handle the new Image\n+\tfunction.\n+\n+2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.ads: Minor comment fixes.\n+\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-comutr.ads (Tree_Node_Access): Add No_Strict_Aliasing, because\n+\twe're doing unchecked conversions with this pointer.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Next_Protected_Operation): An expression function\n+\tused as a completion can be the next protected operation in a\n+\tprotected body.\n+\n+2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Is_OK_Volatile_Context): Add a guard when checking a\n+\tpossible call to an instance of Ada.Unchecked_Conversion to avoid\n+\ttesting protected function calls. Allow references to protected objects\n+\tin prefixed protected calls.\n+\t(Is_Protected_Operation_Call): New routine.\n+\n+2015-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch5.adb, exp_ch5.ads (Expand_Iterator_Loop_Over_Array): Make\n+\tquery public. Remove code handling with iterator loop over array\n+\tof the 'in' form, which is not allowed in Ada.\t* exp_spark.adb\n+\t(Expand_SPARK): Expand loop statements that take the form of an\n+\titerator over an array.\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Do not analyze loop statements\n+\tthat take the form of an iterator over an array, so that the rewritten\n+\tform gets analyzed instead.\n+\t* sem_util.adb, sem_util.ads (Is_Iterator_Over_Array): New query\n+\tto recognize iterators over arrays.\n+\n+2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-excdeb.ads, s-excdeb.adb (Debug_Raise_Exception): Add\n+\tparameter Message.\n+\t* a-except.adb (Raise_Current_Excep): Update call to\n+\tDebug_Raise_Exception.\n+\t* a-except-2005.adb (Complete_Occurrence): Ditto.\n+\t* sem_ch12.adb: Whitespace fix.\n+\n 2015-10-20  Yannick Moy  <moy@adacore.com>\n \n \t* sem_warn.adb (Is_OK_Fully_Initialized): Consider types with DIC as"}, {"sha": "81a89e9f58b8bb02602905dec876e983af949d6a", "filename": "gcc/ada/a-comutr.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.ads?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -342,6 +342,9 @@ private\n    type Tree_Node_Type;\n    type Tree_Node_Access is access all Tree_Node_Type;\n    pragma Convention (C, Tree_Node_Access);\n+   pragma No_Strict_Aliasing (Tree_Node_Access);\n+   --  The above-mentioned Unchecked_Conversion is a violation of the normal\n+   --  aliasing rules.\n \n    type Children_Type is record\n       First : Tree_Node_Access;"}, {"sha": "a346494f6c4b3a34cccb0be6e3150f05eb4d223a", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -922,7 +922,9 @@ package body Ada.Exceptions is\n       Call_Chain (X);\n \n       --  Notify the debugger\n-      Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (X.Id));\n+      Debug_Raise_Exception\n+        (E       => SSL.Exception_Data_Ptr (X.Id),\n+         Message => X.Msg (1 .. X.Msg_Length));\n    end Complete_Occurrence;\n \n    ---------------------------------------"}, {"sha": "3b9caeadf8dd97062a8ea5e3ad0d78b95ec7dc5a", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -949,7 +949,7 @@ package body Ada.Exceptions is\n       --  pragma Volatile is peculiar.\n \n    begin\n-      Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E));\n+      Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E), Message => \"\");\n       Process_Raise_Exception (E);\n    end Raise_Current_Excep;\n "}, {"sha": "5b3dd7511a74933c9647299eb3c32a25c61af2dd", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -130,9 +130,6 @@ package body Exp_Ch5 is\n    --  Expand loop over arrays and containers that uses the form \"for X of C\"\n    --  with an optional subtype mark, or \"for Y in C\".\n \n-   procedure Expand_Iterator_Loop_Over_Array (N : Node_Id);\n-   --  Expand loop over arrays that uses the form \"for X of C\"\n-\n    procedure Expand_Iterator_Loop_Over_Container\n      (N             : Node_Id;\n       Isc           : Node_Id;\n@@ -3350,44 +3347,36 @@ package body Exp_Ch5 is\n    begin\n       --  for Element of Array loop\n \n-      --  This case requires an internally generated cursor to iterate over\n-      --  the array.\n-\n-      if Of_Present (I_Spec) then\n-         Iterator := Make_Temporary (Loc, 'C');\n-\n-         --  Generate:\n-         --    Element : Component_Type renames Array (Iterator);\n-         --    Iterator is the index value, or a list of index values\n-         --    in the case of a multidimensional array.\n-\n-         Ind_Comp :=\n-           Make_Indexed_Component (Loc,\n-             Prefix      => Relocate_Node (Array_Node),\n-             Expressions => New_List (New_Occurrence_Of (Iterator, Loc)));\n+      --  It requires an internally generated cursor to iterate over the array\n \n-         Prepend_To (Stats,\n-           Make_Object_Renaming_Declaration (Loc,\n-             Defining_Identifier => Id,\n-             Subtype_Mark        =>\n-               New_Occurrence_Of (Component_Type (Array_Typ), Loc),\n-             Name                => Ind_Comp));\n+      pragma Assert (Of_Present (I_Spec));\n \n-         --  Mark the loop variable as needing debug info, so that expansion\n-         --  of the renaming will result in Materialize_Entity getting set via\n-         --  Debug_Renaming_Declaration. (This setting is needed here because\n-         --  the setting in Freeze_Entity comes after the expansion, which is\n-         --  too late. ???)\n+      Iterator := Make_Temporary (Loc, 'C');\n \n-         Set_Debug_Info_Needed (Id);\n-\n-      --  for Index in Array loop\n+      --  Generate:\n+      --    Element : Component_Type renames Array (Iterator);\n+      --    Iterator is the index value, or a list of index values\n+      --    in the case of a multidimensional array.\n \n-      --  This case utilizes the already given iterator name\n+      Ind_Comp :=\n+        Make_Indexed_Component (Loc,\n+          Prefix      => Relocate_Node (Array_Node),\n+          Expressions => New_List (New_Occurrence_Of (Iterator, Loc)));\n \n-      else\n-         Iterator := Id;\n-      end if;\n+      Prepend_To (Stats,\n+        Make_Object_Renaming_Declaration (Loc,\n+          Defining_Identifier => Id,\n+          Subtype_Mark        =>\n+            New_Occurrence_Of (Component_Type (Array_Typ), Loc),\n+          Name                => Ind_Comp));\n+\n+      --  Mark the loop variable as needing debug info, so that expansion\n+      --  of the renaming will result in Materialize_Entity getting set via\n+      --  Debug_Renaming_Declaration. (This setting is needed here because\n+      --  the setting in Freeze_Entity comes after the expansion, which is\n+      --  too late. ???)\n+\n+      Set_Debug_Info_Needed (Id);\n \n       --  Generate:\n "}, {"sha": "9d85975589946f6150eabe03b40841b6fd3bfe05", "filename": "gcc/ada/exp_ch5.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.ads?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,4 +35,8 @@ package Exp_Ch5 is\n    procedure Expand_N_Goto_Statement            (N : Node_Id);\n    procedure Expand_N_If_Statement              (N : Node_Id);\n    procedure Expand_N_Loop_Statement            (N : Node_Id);\n+\n+   procedure Expand_Iterator_Loop_Over_Array (N : Node_Id);\n+   --  Expand loop over arrays that uses the form \"for X of C\"\n+\n end Exp_Ch5;"}, {"sha": "be7f72917e750a5b6506c4241c37b2228c7f5ec5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -2376,11 +2376,13 @@ package body Exp_Ch6 is\n    --  Start of processing for Expand_Call\n \n    begin\n-      --  Expand the procedure call if the first actual has a dimension and if\n-      --  the procedure is Put (Ada 2012).\n+      --  Expand the function or procedure call if the first actual has a\n+      --  declared dimension aspect, and the subprogram is declared in one\n+      --  of the dimension I/O packages.\n \n       if Ada_Version >= Ada_2012\n-        and then Nkind (Call_Node) = N_Procedure_Call_Statement\n+        and then\n+           Nkind_In (Call_Node, N_Procedure_Call_Statement, N_Function_Call)\n         and then Present (Parameter_Associations (Call_Node))\n       then\n          Expand_Put_Call_With_Symbol (Call_Node);"}, {"sha": "f027635001332f776612bbd53e0b98cd125e39f7", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -14295,9 +14295,14 @@ package body Exp_Ch9 is\n       Next_Op : Node_Id;\n \n    begin\n+      --  Check whether there is a subsequent body for a protected operation\n+      --  in the current protected body. In Ada2012 that includes expression\n+      --  functions that are completions.\n+\n       Next_Op := Next (N);\n       while Present (Next_Op)\n-        and then not Nkind_In (Next_Op, N_Subprogram_Body, N_Entry_Body)\n+        and then not Nkind_In (Next_Op,\n+           N_Subprogram_Body, N_Entry_Body, N_Expression_Function)\n       loop\n          Next (Next_Op);\n       end loop;"}, {"sha": "0fb50402bb46d0ccda175c8b98a7d5b0c87b21e3", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,6 +25,7 @@\n \n with Atree;    use Atree;\n with Einfo;    use Einfo;\n+with Exp_Ch5;  use Exp_Ch5;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n with Sem_Res;  use Sem_Res;\n@@ -73,6 +74,26 @@ package body Exp_SPARK is\n          when N_Object_Renaming_Declaration =>\n             Expand_SPARK_N_Object_Renaming_Declaration (N);\n \n+         --  Loop iterations over arrays need to be expanded, to avoid getting\n+         --  two names referring to the same object in memory (the array and\n+         --  the iterator) in GNATprove, especially since both can be written\n+         --  (thus possibly leading to interferences due to aliasing). No such\n+         --  problem arises with quantified expressions over arrays, which are\n+         --  dealt with specially in GNATprove.\n+\n+         when N_Loop_Statement =>\n+            declare\n+               Scheme : constant Node_Id := Iteration_Scheme (N);\n+            begin\n+               if Present (Scheme)\n+                 and then Present (Iterator_Specification (Scheme))\n+                 and then\n+                   Is_Iterator_Over_Array (Iterator_Specification (Scheme))\n+               then\n+                  Expand_Iterator_Loop_Over_Array (N);\n+               end if;\n+            end;\n+\n          --  In SPARK mode, no other constructs require expansion\n \n          when others =>"}, {"sha": "b007b36cb67ee3fa04d9d97f888a91e16eabd493", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -30,17 +30,15 @@\n \n --  b) Compilation of unit bodies that contain the bodies of inlined sub-\n --  programs. This is done only if inlining is enabled (-gnatn). Full inlining\n---  requires that a) an b) be mutually recursive, because each step may\n---  generate another generic expansion and further inlined calls. For now each\n---  of them uses a workpile algorithm, but they are called independently from\n---  Frontend, and thus are not mutually recursive.\n+--  requires that a) and b) be mutually recursive, because each step may\n+--  generate another generic expansion and further inlined calls.\n \n --  c) Front-end inlining for Inline_Always subprograms. This is primarily an\n --  expansion activity that is performed for performance reasons, and when the\n---  target does not use the gcc backend.\n+--  target does not use the GCC back end.\n \n --  d) Front-end inlining for GNATprove, to perform source transformations\n---  to simplify formal verification. The machinery used is the same than for\n+--  to simplify formal verification. The machinery used is the same as for\n --  Inline_Always subprograms, but there are fewer restrictions on the source\n --  of subprograms.\n "}, {"sha": "d9410f0ca27e8dc2840dc367169483e689059b9d", "filename": "gcc/ada/s-excdeb.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fs-excdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fs-excdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excdeb.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2006-2013, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2006-2015, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,8 +37,10 @@ package body System.Exceptions_Debug is\n    -- Debug_Raise_Exception --\n    ---------------------------\n \n-   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr) is\n-      pragma Inspection_Point (E);\n+   procedure Debug_Raise_Exception\n+     (E : SSL.Exception_Data_Ptr; Message : String)\n+   is\n+      pragma Inspection_Point (E, Message);\n    begin\n       null;\n    end Debug_Raise_Exception;"}, {"sha": "21e6b525f4cdc5d211a4571e3955f37608a3f087", "filename": "gcc/ada/s-excdeb.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fs-excdeb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fs-excdeb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excdeb.ads?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,7 +46,8 @@ package System.Exceptions_Debug is\n    --  To let some of the hooks below have formal parameters typed in\n    --  accordance with what GDB expects.\n \n-   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr);\n+   procedure Debug_Raise_Exception\n+     (E : SSL.Exception_Data_Ptr; Message : String);\n    pragma Export\n      (Ada, Debug_Raise_Exception, \"__gnat_debug_raise_exception\");\n    --  Hook called at a \"raise\" point for an exception E, when it is"}, {"sha": "3410973a30624b6bb3d8c3b3036956a65d4d4c8b", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -4904,9 +4904,9 @@ package body Sem_Ch12 is\n          Set_Debug_Info_Needed   (Anon_Id);\n          Act_Decl_Id := New_Copy (Anon_Id);\n \n-         Set_Parent            (Act_Decl_Id, Parent (Anon_Id));\n-         Set_Chars             (Act_Decl_Id, Chars (Defining_Entity (N)));\n-         Set_Sloc              (Act_Decl_Id, Sloc (Defining_Entity (N)));\n+         Set_Parent (Act_Decl_Id, Parent (Anon_Id));\n+         Set_Chars  (Act_Decl_Id, Chars (Defining_Entity (N)));\n+         Set_Sloc   (Act_Decl_Id, Sloc (Defining_Entity (N)));\n \n          --  Subprogram instance comes from source only if generic does\n "}, {"sha": "4f60c96acda2cea4d62730db70e34d0d401feb7a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -3336,16 +3336,33 @@ package body Sem_Ch5 is\n       --  types the actual subtype of the components will only be determined\n       --  when the cursor declaration is analyzed.\n \n-      --  If the expander is not active, or in SPARK mode, then we want to\n-      --  analyze the loop body now even in the Ada 2012 iterator case, since\n-      --  the rewriting will not be done. Insert the loop variable in the\n-      --  current scope, if not done when analysing the iteration scheme.\n-      --  Set its kind properly to detect improper uses in the loop body.\n+      --  If the expander is not active then we want to analyze the loop body\n+      --  now even in the Ada 2012 iterator case, since the rewriting will not\n+      --  be done. Insert the loop variable in the current scope, if not done\n+      --  when analysing the iteration scheme.  Set its kind properly to detect\n+      --  improper uses in the loop body.\n+\n+      --  In GNATprove mode, we do one of the above depending on the kind of\n+      --  loop. If it is an iterator over an array, then we do not analyze the\n+      --  loop now. We will analyze it after it has been rewritten by the\n+      --  special SPARK expansion which is activated in GNATprove mode. We need\n+      --  to do this so that other expansions that should occur in GNATprove\n+      --  mode take into account the specificities of the rewritten loop, in\n+      --  particular the introduction of a renaming (which needs to be\n+      --  expanded).\n+\n+      --  In other cases in GNATprove mode then we want to analyze the loop\n+      --  body now, since no rewriting will occur.\n \n       if Present (Iter)\n         and then Present (Iterator_Specification (Iter))\n       then\n-         if not Expander_Active then\n+         if GNATprove_Mode\n+           and then Is_Iterator_Over_Array (Iterator_Specification (Iter))\n+         then\n+            null;\n+\n+         elsif not Expander_Active then\n             declare\n                I_Spec : constant Node_Id   := Iterator_Specification (Iter);\n                Id     : constant Entity_Id := Defining_Identifier (I_Spec);"}, {"sha": "2f5b8ca9581559617eae29da873b2937b01b7389", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -6834,6 +6834,11 @@ package body Sem_Res is\n         (Context : Node_Id;\n          Obj_Ref : Node_Id) return Boolean\n       is\n+         function Is_Protected_Operation_Call (Nod : Node_Id) return Boolean;\n+         --  Determine whether an arbitrary node denotes a call to a protected\n+         --  entry, function or procedure in prefixed form where the prefix is\n+         --  Obj_Ref.\n+\n          function Within_Check (Nod : Node_Id) return Boolean;\n          --  Determine whether an arbitrary node appears in a check node\n \n@@ -6844,6 +6849,36 @@ package body Sem_Res is\n          --  Determine whether an arbitrary entity appears in a volatile\n          --  function.\n \n+         ---------------------------------\n+         -- Is_Protected_Operation_Call --\n+         ---------------------------------\n+\n+         function Is_Protected_Operation_Call (Nod : Node_Id) return Boolean is\n+            Pref : Node_Id;\n+            Subp : Node_Id;\n+\n+         begin\n+            --  A call to a protected operations retains its selected component\n+            --  form as opposed to other prefixed calls that are transformed in\n+            --  expanded names.\n+\n+            if Nkind (Nod) = N_Selected_Component then\n+               Pref := Prefix (Nod);\n+               Subp := Selector_Name (Nod);\n+\n+               return\n+                 Pref = Obj_Ref\n+                   and then Is_Protected_Type (Etype (Pref))\n+                   and then Is_Entity_Name (Subp)\n+                   and then Ekind_In (Entity (Subp), E_Entry,\n+                                                     E_Entry_Family,\n+                                                     E_Function,\n+                                                     E_Procedure);\n+            else\n+               return False;\n+            end if;\n+         end Is_Protected_Operation_Call;\n+\n          ------------------\n          -- Within_Check --\n          ------------------\n@@ -6958,11 +6993,18 @@ package body Sem_Res is\n          --  instance of Unchecked_Conversion whose result is renamed.\n \n          elsif Nkind (Context) = N_Function_Call\n+           and then Is_Entity_Name (Name (Context))\n            and then Is_Unchecked_Conversion_Instance (Entity (Name (Context)))\n            and then Nkind (Parent (Context)) = N_Object_Renaming_Declaration\n          then\n             return True;\n \n+         --  The volatile object is actually the prefix in a protected entry,\n+         --  function, or procedure call.\n+\n+         elsif Is_Protected_Operation_Call (Context) then\n+            return True;\n+\n          --  The volatile object appears as the expression of a simple return\n          --  statement that applies to a volatile function.\n "}, {"sha": "cc17f016df87ae6ea295d5f409d97ae339d94710", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -12064,6 +12064,17 @@ package body Sem_Util is\n       end if;\n    end Is_Iterator;\n \n+   ----------------------------\n+   -- Is_Iterator_Over_Array --\n+   ----------------------------\n+\n+   function Is_Iterator_Over_Array (N : Node_Id) return Boolean is\n+      Container     : constant Node_Id   := Name (N);\n+      Container_Typ : constant Entity_Id := Base_Type (Etype (Container));\n+   begin\n+      return Is_Array_Type (Container_Typ);\n+   end Is_Iterator_Over_Array;\n+\n    ------------\n    -- Is_LHS --\n    ------------"}, {"sha": "e882f168936a1121aa2136a4b6c2626b2446ecf0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc90cc6293fbe3e3254ed73290f83f6c402c40a7/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "patch": "@@ -1354,6 +1354,11 @@ package Sem_Util is\n    --  AI05-0139-2: Check whether Typ is one of the predefined interfaces in\n    --  Ada.Iterator_Interfaces, or it is derived from one.\n \n+   function Is_Iterator_Over_Array (N : Node_Id) return Boolean;\n+   --  N is an iterator specification. Returns True iff N is an iterator over\n+   --  an array, either inside a loop of the form 'for X of A' or a quantified\n+   --  expression of the form 'for all/some X of A' where A is of array type.\n+\n    type Is_LHS_Result is (Yes, No, Unknown);\n    function Is_LHS (N : Node_Id) return Is_LHS_Result;\n    --  Returns Yes if N is definitely used as Name in an assignment statement."}]}