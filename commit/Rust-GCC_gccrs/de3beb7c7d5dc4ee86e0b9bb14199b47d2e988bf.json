{"sha": "de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzYmViN2M3ZDVkYzRlZTg2ZTBiOWJiMTQxOTliNDdkMmU5ODhiZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-07T10:22:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-07T10:22:49Z"}, "message": "i960.c (i960_setup_incoming_varargs): Create a new rtx for comparing the argument pointer against zero.\n\n        * config/i960/i960.c (i960_setup_incoming_varargs): Create a\n        new rtx for comparing the argument pointer against zero.\n        (i960_va_start): Similarly.\n\nFrom-SVN: r57897", "tree": {"sha": "4f473610f9cfb03c7a89d174e7077ffe161fe12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f473610f9cfb03c7a89d174e7077ffe161fe12a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf/comments", "author": null, "committer": null, "parents": [{"sha": "01f4137fea19db8118b225ce86b39aa6831b7ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f4137fea19db8118b225ce86b39aa6831b7ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f4137fea19db8118b225ce86b39aa6831b7ba2"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "13f3151d2753016e74e6ba93b70ef094f14347ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "patch": "@@ -1,3 +1,9 @@\n+2002-10-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i960/i960.c (i960_setup_incoming_varargs): Create a\n+\tnew rtx for comparing the argument pointer against zero.\n+\t(i960_va_start): Similarly.\n+\n 2002-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/i960/i960.md (*): Use TFmode, not XFmode."}, {"sha": "f353c729ac2d07456e860ce1add987015243b37b", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=de3beb7c7d5dc4ee86e0b9bb14199b47d2e988bf", "patch": "@@ -2552,16 +2552,20 @@ i960_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n   if (cum->ca_nstackparms == 0 && first_reg < NPARM_REGS && !no_rtl)\n     {\n       rtx label = gen_label_rtx ();\n-      rtx regblock;\n+      rtx regblock, fake_arg_pointer_rtx;\n \n-      /* If arg_pointer_rtx == 0, no arguments were passed on the stack\n+      /* Use a different rtx than arg_pointer_rtx so that cse and friends\n+\t can go on believing that the argument pointer can never be zero.  */\n+      fake_arg_pointer_rtx = gen_raw_REG (Pmode, ARG_POINTER_REGNUM);\n+\n+      /* If the argument pointer is 0, no arguments were passed on the stack\n \t and we need to allocate a chunk to save the registers (if any\n \t arguments were passed on the stack the caller would allocate the\n \t 48 bytes as well).  We must allocate all 48 bytes (12*4) because\n \t va_start assumes it.  */\n-      emit_insn (gen_cmpsi (arg_pointer_rtx, const0_rtx));\n+      emit_insn (gen_cmpsi (fake_arg_pointer_rtx, const0_rtx));\n       emit_jump_insn (gen_bne (label));\n-      emit_insn (gen_rtx_SET (VOIDmode, arg_pointer_rtx,\n+      emit_insn (gen_rtx_SET (VOIDmode, fake_arg_pointer_rtx,\n \t\t\t      stack_pointer_rtx));\n       emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t\t      memory_address (SImode,\n@@ -2598,6 +2602,7 @@ i960_va_start (valist, nextarg)\n      rtx nextarg ATTRIBUTE_UNUSED;\n {\n   tree s, t, base, num;\n+  rtx fake_arg_pointer_rtx;\n \n   /* The array type always decays to a pointer before we get here, so we\n      can't use ARRAY_REF.  */\n@@ -2606,7 +2611,10 @@ i960_va_start (valist, nextarg)\n \t\tbuild (PLUS_EXPR, unsigned_type_node, valist,\n \t\t       TYPE_SIZE_UNIT (TREE_TYPE (valist))));\n \n-  s = make_tree (unsigned_type_node, arg_pointer_rtx);\n+  /* Use a different rtx than arg_pointer_rtx so that cse and friends\n+     can go on believing that the argument pointer can never be zero.  */\n+  fake_arg_pointer_rtx = gen_raw_REG (Pmode, ARG_POINTER_REGNUM);\n+  s = make_tree (unsigned_type_node, fake_arg_pointer_rtx);\n   t = build (MODIFY_EXPR, unsigned_type_node, base, s);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);"}]}