{"sha": "fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4M2FlYjQ5OTcxNzY5MTcyZGRjOWRiYjkwNTFmNjhmNWRiZDVlYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-17T05:49:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-17T05:49:22Z"}, "message": "re PR go/90482 (Many 32-bit Solaris/SPARC tests FAIL with SIGBUS)\n\n\tPR go/90482\n    compiler: make value method of direct interface type takes pointer\n    \n    Currently, a value method of a direct interface type takes the\n    value of the receiver, which is pointer shaped, as the first\n    parameter. When this method is called through interface, we\n    actually pass the interface data as a pointer. On most platforms\n    this is ok, as the underlying calling convention is the same,\n    except that on SPARC32, the calling convention is actually\n    different.\n    \n    This CL changes the method function actually takes a pointer.\n    The function will convert the pointer to the pointer-shaped\n    receiver type (a no-op conversion from machine code's aspect).\n    For a direct call, in the caller we convert the receiver to a\n    pointer (also no-op conversion) before invoking the method. For\n    an interface call, we pass the pointer as before. This way, it is\n    consistent that we always pass a pointer.\n    \n    Hopefully this fixes SPARC32 build and https://gcc.gnu.org/PR90482.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/177758\n\nFrom-SVN: r271310", "tree": {"sha": "d305091a480ea1b2f7a8b3217343109ac3ec281f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d305091a480ea1b2f7a8b3217343109ac3ec281f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/comments", "author": null, "committer": null, "parents": [{"sha": "935469daaa5c02ac5104c0d5c04a1f12e23529b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935469daaa5c02ac5104c0d5c04a1f12e23529b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935469daaa5c02ac5104c0d5c04a1f12e23529b1"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "304c910b2d01138bce6542bc59ba4c6213a7dfee", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "patch": "@@ -1,4 +1,4 @@\n-f8a3668cbcfa3f8cd6c26c62bce416714cd401fc\n+b5ab7b419d6328f5126ba8d6795280129eaf6e79\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ad898b7f38c8b591e8e7c22766bf3bd226aa8a67", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "patch": "@@ -11263,6 +11263,16 @@ Call_expression::do_get_backend(Translate_context* context)\n   else\n     has_closure_arg = true;\n \n+  Expression* first_arg = NULL;\n+  if (!is_interface_method && fntype->is_method())\n+    {\n+      first_arg = this->args_->front();\n+      if (first_arg->type()->points_to() == NULL\n+          && first_arg->type()->is_direct_iface_type())\n+        first_arg = Expression::unpack_direct_iface(first_arg,\n+                                                    first_arg->location());\n+    }\n+\n   int nargs;\n   std::vector<Bexpression*> fn_args;\n   if (this->args_ == NULL || this->args_->empty())\n@@ -11279,7 +11289,7 @@ Call_expression::do_get_backend(Translate_context* context)\n \t\t&& this->args_->size() == 1);\n       nargs = 1;\n       fn_args.resize(1);\n-      fn_args[0] = this->args_->front()->get_backend(context);\n+      fn_args[0] = first_arg->get_backend(context);\n     }\n   else\n     {\n@@ -11294,7 +11304,7 @@ Call_expression::do_get_backend(Translate_context* context)\n       Expression_list::const_iterator pe = this->args_->begin();\n       if (!is_interface_method && fntype->is_method())\n \t{\n-          fn_args[i] = (*pe)->get_backend(context);\n+          fn_args[i] = first_arg->get_backend(context);\n \t  ++pe;\n \t  ++i;\n \t}"}, {"sha": "3527d7a897b454e83734a036b240ce6f8dd4badb", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "patch": "@@ -1063,6 +1063,11 @@ class Expression\n   static Expression*\n   pack_direct_iface(Type*, Expression*, Location);\n \n+  // Return an expression of the underlying pointer for a direct interface\n+  // type (the opposite of pack_direct_iface).\n+  static Expression*\n+  unpack_direct_iface(Expression*, Location);\n+\n   // Dump an expression to a dump constext.\n   void\n   dump_expression(Ast_dump_context*) const;\n@@ -1230,9 +1235,6 @@ class Expression\n \t    : NULL);\n   }\n \n-  static Expression*\n-  unpack_direct_iface(Expression*, Location);\n-\n   static Expression*\n   get_interface_type_descriptor(Expression*);\n "}, {"sha": "e94c5679d6d62f732a8981eb14a61ddcdf50d7b1", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "patch": "@@ -6052,9 +6052,10 @@ Function::build(Gogo* gogo, Named_object* named_function)\n \n \t  // We always pass the receiver to a method as a pointer.  If\n \t  // the receiver is declared as a non-pointer type, then we\n-\t  // copy the value into a local variable.\n+\t  // copy the value into a local variable.  For direct interface\n+          // type we pack the pointer into the type.\n \t  if ((*p)->var_value()->is_receiver()\n-\t      && !(*p)->var_value()->type()->is_direct_iface_type())\n+              && (*p)->var_value()->type()->points_to() == NULL)\n \t    {\n \t      std::string name = (*p)->name() + \".pointer\";\n \t      Type* var_type = (*p)->var_value()->type();\n@@ -6066,14 +6067,19 @@ Function::build(Gogo* gogo, Named_object* named_function)\n               parm_bvar = parm_no->get_backend_variable(gogo, named_function);\n \n               vars.push_back(bvar);\n-\t      Expression* parm_ref =\n+\n+              Expression* parm_ref =\n                   Expression::make_var_reference(parm_no, loc);\n-              parm_ref =\n-                  Expression::make_dereference(parm_ref,\n-                                               Expression::NIL_CHECK_NEEDED,\n-                                               loc);\n-\t      if ((*p)->var_value()->is_in_heap())\n-\t\tparm_ref = Expression::make_heap_expression(parm_ref, loc);\n+              Type* recv_type = (*p)->var_value()->type();\n+              if (recv_type->is_direct_iface_type())\n+                parm_ref = Expression::pack_direct_iface(recv_type, parm_ref, loc);\n+              else\n+                parm_ref =\n+                    Expression::make_dereference(parm_ref,\n+                                                 Expression::NIL_CHECK_NEEDED,\n+                                                 loc);\n+              if ((*p)->var_value()->is_in_heap())\n+                parm_ref = Expression::make_heap_expression(parm_ref, loc);\n               var_inits.push_back(parm_ref->get_backend(&context));\n \t    }\n \t  else if ((*p)->var_value()->is_in_heap())\n@@ -7531,7 +7537,7 @@ Variable::get_backend_variable(Gogo* gogo, Named_object* function,\n       else\n \t{\n \t  bool is_parameter = this->is_parameter_;\n-\t  if (this->is_receiver_ && !type->is_direct_iface_type())\n+\t  if (this->is_receiver_ && type->points_to() == NULL)\n \t    is_parameter = false;\n \t  if (this->is_in_heap())\n \t    {"}, {"sha": "52606261833cef446da1c06d43e7f0f69d97e0ea", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb83aeb49971769172ddc9dbb9051f68f5dbd5ea/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=fb83aeb49971769172ddc9dbb9051f68f5dbd5ea", "patch": "@@ -4760,10 +4760,15 @@ Function_type::get_backend_fntype(Gogo* gogo)\n           // We always pass the address of the receiver parameter, in\n           // order to make interface calls work with unknown types,\n           // except for direct interface types where the interface call\n-          // actually passes value.\n+          // actually passes the underlying pointer of the value.\n           Type* rtype = this->receiver_->type();\n-          if (!rtype->is_direct_iface_type())\n-            rtype = Type::make_pointer_type(rtype);\n+          if (rtype->points_to() == NULL)\n+            {\n+              if (rtype->is_direct_iface_type())\n+                rtype = Type::make_pointer_type(Type::make_void_type());\n+              else\n+                rtype = Type::make_pointer_type(rtype);\n+            }\n           breceiver.btype = rtype->get_backend(gogo);\n           breceiver.location = this->receiver_->location();\n         }"}]}