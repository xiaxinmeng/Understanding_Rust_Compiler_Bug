{"sha": "c592d5d2584f601fcdb594ec8ba942afc270b776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5MmQ1ZDI1ODRmNjAxZmNkYjU5NGVjOGJhOTQyYWZjMjcwYjc3Ng==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-03-12T23:17:05Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-03-12T23:17:05Z"}, "message": "decl.c (select_decl): Allow class templates when we need types.\n\n        * decl.c (select_decl): Allow class templates when we need types.\n        * decl2.c (ambiguous_decl): Likewise.\n\nFrom-SVN: r25737", "tree": {"sha": "61e7ca8b88314b6205d661e056855c6b0c1487fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e7ca8b88314b6205d661e056855c6b0c1487fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c592d5d2584f601fcdb594ec8ba942afc270b776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c592d5d2584f601fcdb594ec8ba942afc270b776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c592d5d2584f601fcdb594ec8ba942afc270b776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c592d5d2584f601fcdb594ec8ba942afc270b776/comments", "author": null, "committer": null, "parents": [{"sha": "45e24d08a2c5647913c6f48a2b1c5b27c15ef7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e24d08a2c5647913c6f48a2b1c5b27c15ef7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e24d08a2c5647913c6f48a2b1c5b27c15ef7e3"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "d24c458cd4b1909b358db203cd24c7a2db8c0ecc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c592d5d2584f601fcdb594ec8ba942afc270b776", "patch": "@@ -1,3 +1,8 @@\n+1999-03-12  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (select_decl): Allow class templates when we need types.\n+\t* decl2.c (ambiguous_decl): Likewise.\n+\n 1999-03-12  Mark Mitchell  <mark@markmitchell.com>\n \n \t* lex.c (do_identifier): Correct call to enforce_access."}, {"sha": "5eca402cc0b5d8d5b08c6de953cc27cb839d2cba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c592d5d2584f601fcdb594ec8ba942afc270b776", "patch": "@@ -5246,7 +5246,8 @@ select_decl (binding, flags)\n     val = TYPE_STUB_DECL (BINDING_TYPE (binding));\n   /* Don't return non-types if we really prefer types. */\n   else if (val && LOOKUP_TYPES_ONLY (flags)  && TREE_CODE (val) != TYPE_DECL\n-\t   && (!looking_for_template || TREE_CODE (val) != TEMPLATE_DECL))\n+\t   && (TREE_CODE (val) != TEMPLATE_DECL\n+\t       || !DECL_CLASS_TEMPLATE_P (val)))\n     val = NULL_TREE;\n \n   return val;"}, {"sha": "56f583906e55c690dfc472fec47efb3b6931baca", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c592d5d2584f601fcdb594ec8ba942afc270b776/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c592d5d2584f601fcdb594ec8ba942afc270b776", "patch": "@@ -4063,8 +4063,7 @@ ambiguous_decl (name, old, new, flags)\n         /* If we expect types or namespaces, and not templates,\n            or this is not a template class. */\n         if (LOOKUP_QUALIFIERS_ONLY (flags)\n-            && (!(flags & LOOKUP_TEMPLATES_EXPECTED)\n-                || !DECL_CLASS_TEMPLATE_P (val)))\n+            && !DECL_CLASS_TEMPLATE_P (val))\n           val = NULL_TREE;\n         break;\n       case TYPE_DECL:"}]}