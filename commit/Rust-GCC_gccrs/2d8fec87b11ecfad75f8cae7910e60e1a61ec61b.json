{"sha": "2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4ZmVjODdiMTFlY2ZhZDc1ZjhjYWU3OTEwZTYwZTFhNjFlYzYxYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-11-24T12:22:16Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-11-24T12:22:16Z"}, "message": "re PR rtl-optimization/78120 (If conversion no longer performed)\n\n\tPR rtl-optimization/78120\n\t* ifcvt.c (noce_conversion_profitable_p): Check original cost in all\n\tcases, and additionally test against max_seq_cost for speed\n\toptimization.\n\t(noce_process_if_block): Compute an estimate for the original cost when\n\toptimizing for speed, using the minimum of then and else block costs.\n\ntestsuite/\n\tPR rtl-optimization/78120\n\t* gcc.target/i386/pr78120.c: New test.\n\nFrom-SVN: r242834", "tree": {"sha": "0f02bf897ae9de96a80362cdfcc9efabee71f99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f02bf897ae9de96a80362cdfcc9efabee71f99e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/comments", "author": null, "committer": null, "parents": [{"sha": "334442f282a9d61723a0a0f299ba5ad7b00763b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334442f282a9d61723a0a0f299ba5ad7b00763b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334442f282a9d61723a0a0f299ba5ad7b00763b8"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "d501ff687a03f1a140a290f9bb48b11d90ae3c10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "patch": "@@ -1,5 +1,12 @@\n 2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\tPR rtl-optimization/78120\n+\t* ifcvt.c (noce_conversion_profitable_p): Check original cost in all\n+\tcases, and additionally test against max_seq_cost for speed\n+\toptimization.\n+\t(noce_process_if_block): Compute an estimate for the original cost when\n+\toptimizing for speed, using the minimum of then and else block costs.\n+\n \tPR rtl-optimization/78120\n \t* rtlanal.c (insn_rtx_cost): Use set_rtx_cost.\n "}, {"sha": "0fdd5b7885cb9449fb68c94a260c3e090db4428d", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "patch": "@@ -812,8 +812,10 @@ struct noce_if_info\n      we're optimizing for size.  */\n   bool speed_p;\n \n-  /* The combined cost of COND, JUMP and the costs for THEN_BB and\n-     ELSE_BB.  */\n+  /* An estimate of the original costs.  When optimizing for size, this is the\n+     combined cost of COND, JUMP and the costs for THEN_BB and ELSE_BB.\n+     When optimizing for speed, we use the costs of COND plus the minimum of\n+     the costs for THEN_BB and ELSE_BB, as computed in the next field.  */\n   unsigned int original_cost;\n \n   /* Maximum permissible cost for the unconditional sequence we should\n@@ -852,12 +854,12 @@ noce_conversion_profitable_p (rtx_insn *seq, struct noce_if_info *if_info)\n   /* Cost up the new sequence.  */\n   unsigned int cost = seq_cost (seq, speed_p);\n \n+  if (cost <= if_info->original_cost)\n+    return true;\n+\n   /* When compiling for size, we can make a reasonably accurately guess\n-     at the size growth.  */\n-  if (!speed_p)\n-    return cost <= if_info->original_cost;\n-  else\n-    return cost <= if_info->max_seq_cost;\n+     at the size growth.  When compiling for speed, use the maximum.  */\n+  return speed_p && cost <= if_info->max_seq_cost;\n }\n \n /* Helper function for noce_try_store_flag*.  */\n@@ -3441,15 +3443,24 @@ noce_process_if_block (struct noce_if_info *if_info)\n \t}\n     }\n \n-  if (! bb_valid_for_noce_process_p (then_bb, cond, &if_info->original_cost,\n+  bool speed_p = optimize_bb_for_speed_p (test_bb);\n+  unsigned int then_cost = 0, else_cost = 0;\n+  if (!bb_valid_for_noce_process_p (then_bb, cond, &then_cost,\n \t\t\t\t    &if_info->then_simple))\n     return false;\n \n   if (else_bb\n-      && ! bb_valid_for_noce_process_p (else_bb, cond, &if_info->original_cost,\n-\t\t\t\t      &if_info->else_simple))\n+      && !bb_valid_for_noce_process_p (else_bb, cond, &else_cost,\n+\t\t\t\t       &if_info->else_simple))\n     return false;\n \n+  if (else_bb == NULL)\n+    if_info->original_cost += then_cost;\n+  else if (speed_p)\n+    if_info->original_cost += MIN (then_cost, else_cost);\n+  else\n+    if_info->original_cost += then_cost + else_cost;\n+\n   insn_a = last_active_insn (then_bb, FALSE);\n   set_a = single_set (insn_a);\n   gcc_assert (set_a);"}, {"sha": "8a4332e769c863519b3371108085b288384657ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "patch": "@@ -1,3 +1,8 @@\n+2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/78120\n+\t* gcc.target/i386/pr78120.c: New test.\n+\n 2016-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/compile/20161124-1.c: New test."}, {"sha": "ea8bef7e2731cc8f0e795c1d6da4cf68bf61378f", "filename": "gcc/testsuite/gcc.target/i386/pr78120.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78120.c?ref=2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler \"adc\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\" } } */\n+\n+typedef unsigned long u64;\n+\n+typedef struct {\n+  u64 hi, lo;\n+} u128;\n+\n+static inline u128 add_u128 (u128 a, u128 b)\n+{\n+  a.hi += b.hi;\n+  a.lo += b.lo;\n+  if (a.lo < b.lo)\n+    a.hi++;\n+\n+  return a;\n+}\n+\n+extern u128 t1, t2, t3;\n+\n+void foo (void)\n+{\n+  t1 = add_u128 (t1, t2);\n+  t1 = add_u128 (t1, t3);\n+}"}]}