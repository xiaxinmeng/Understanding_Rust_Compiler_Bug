{"sha": "7c05e50c733d217f7f1da1f5173584fbc5032d2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MwNWU1MGM3MzNkMjE3ZjdmMWRhMWY1MTczNTg0ZmJjNTAzMmQyZQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-08-28T02:38:24Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-08-28T02:38:24Z"}, "message": "PR cpp/23827 - standard C++ should not have hex float preprocessor\n\n\nlibcpp/\n\n2014-08-27  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR cpp/23827 - standard C++ should not have hex float preprocessor\n\ttokens\n\t* libcpp/init.c (lang_flags): Change CXX98 flag for extended numbers\n\tfrom 1 to 0.\n\t* libcpp/expr.c (cpp_classify_number): Weite error message for improper\n\tuse of hex floating literal.\n\n\ngcc/testsuite/\n\n2014-08-27  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR cpp/23827 - standard C++ should not have hex float preprocessor\n\ttokens\n\t* g++.dg/cpp/pr23827_cxx11.C: New.\n\t* g++.dg/cpp/pr23827_cxx98.C: New.\n\t* g++.dg/cpp/pr23827_cxx98_neg.C: New.\n\t* gcc.dg/cpp/pr23827_c90.c: New.\n\t* gcc.dg/cpp/pr23827_c90_neg.c: New.\n\t* gcc.dg/cpp/pr23827_c99.c: New.\n\nFrom-SVN: r214616", "tree": {"sha": "52684ca4b76255d7a5b61ebbf050e5ead8070089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52684ca4b76255d7a5b61ebbf050e5ead8070089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c05e50c733d217f7f1da1f5173584fbc5032d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c05e50c733d217f7f1da1f5173584fbc5032d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c05e50c733d217f7f1da1f5173584fbc5032d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c05e50c733d217f7f1da1f5173584fbc5032d2e/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "241622a51492ed70c63a75c32a60b4e76e020774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241622a51492ed70c63a75c32a60b4e76e020774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241622a51492ed70c63a75c32a60b4e76e020774"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "43e950d5453b7857e637183a40bbe9ba74e02b9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -1,3 +1,14 @@\n+2014-08-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR cpp/23827 - standard C++ should not have hex float preprocessor\n+\ttokens\n+\t* g++.dg/cpp/pr23827_cxx11.C: New.\n+\t* g++.dg/cpp/pr23827_cxx98.C: New.\n+\t* g++.dg/cpp/pr23827_cxx98_neg.C: New.\n+\t* gcc.dg/cpp/pr23827_c90.c: New.\n+\t* gcc.dg/cpp/pr23827_c90_neg.c: New.\n+\t* gcc.dg/cpp/pr23827_c99.c: New.\n+\n 2014-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/52892"}, {"sha": "c1862ceda2f918cd6177be16c4c63648976c236f", "filename": "gcc/testsuite/g++.dg/cpp/pr23827_cxx11.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx11.C?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+#define f (\n+#define l )\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+// C90 and C++98: \"0x1p+( 0x1p+)\"\n+// C99 and C++11: \"0x1p+f 0x1p+l\"\n+const char *s = xstr(0x1p+f 0x1p+l);\n+\n+extern \"C\" void abort (void);\n+extern \"C\" int strcmp (const char *, const char *);\n+\n+int\n+main()\n+{\n+  if (strcmp (s, \"0x1p+( 0x1p+)\"))\n+    return 0; // Correct C99 and C++11 behavior.\n+  else\n+    abort (); // Correct C90 and C++ behavior.\n+}"}, {"sha": "cd4ee22e504297ca30d8db83afa51b94cf0b3612", "filename": "gcc/testsuite/g++.dg/cpp/pr23827_cxx98.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98.C?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do run { target c++98_only } }\n+// { dg-options \"-ansi -pedantic-errors\" }\n+\n+#define f (\n+#define l )\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+// C90 and C++98: \"0x1p+( 0x1p+)\"\n+// C99 and C++11: \"0x1p+f 0x1p+l\"\n+const char *s = xstr(0x1p+f 0x1p+l);\n+\n+extern \"C\" void abort (void);\n+extern \"C\" int strcmp (const char *, const char *);\n+\n+int\n+main()\n+{\n+  if (strcmp (s, \"0x1p+( 0x1p+)\"))\n+    abort (); // Correct C99 and C++11 behavior.\n+  else\n+    return 0; // Correct C90 and C++ behavior.\n+}"}, {"sha": "39d9fe4d1e02058fcba806c1642f9e2774fe8c2a", "filename": "gcc/testsuite/g++.dg/cpp/pr23827_cxx98_neg.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++98_only } }\n+/* { dg-options \"-ansi -pedantic-errors\" }  */\n+\n+double x = 0x3.1415babep0; // { dg-error \"use of C..11 hexadecimal floating constant\" }"}, {"sha": "e7ddc765ac5e7a9bd27f23f2125785179e7c52d1", "filename": "gcc/testsuite/gcc.dg/cpp/pr23827_c90.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90.c?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run }  */\n+/* { dg-options \"-std=c90 -pedantic-errors\" }  */\n+\n+#define f (\n+#define l )\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+/* C90 and C++98: \"0x1p+( 0x1p+)\"  */\n+/* C99 and C++11: \"0x1p+f 0x1p+l\"  */\n+const char *s = xstr(0x1p+f 0x1p+l);\n+\n+void abort (void);\n+int strcmp (const char *, const char *);\n+\n+int\n+main()\n+{\n+  if (strcmp (s, \"0x1p+( 0x1p+)\"))\n+    abort (); /* Correct C99 and C++11 behavior.  */\n+  else\n+    return 0; /* Correct C90 and C++ behavior.  */\n+}"}, {"sha": "020697cdd3545d5d771fbe5e310be27af00ac549", "filename": "gcc/testsuite/gcc.dg/cpp/pr23827_c90_neg.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90_neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90_neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c90_neg.c?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-std=c90 -pedantic-errors\" }  */\n+\n+double x = 0x3.1415babep0; /* { dg-error \"use of C99 hexadecimal floating constant\" }  */"}, {"sha": "4671c2ac7126f19123de9332e9f05695ce9f29f8", "filename": "gcc/testsuite/gcc.dg/cpp/pr23827_c99.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr23827_c99.c?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run { target c++11 } }  */\n+/* { dg-options \"-pedantic-errors\" }  */\n+\n+#define f (\n+#define l )\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+/* C90 and C++98: \"0x1p+( 0x1p+)\"  */\n+/* C99 and C++11: \"0x1p+f 0x1p+l\"  */\n+const char *s = xstr(0x1p+f 0x1p+l);\n+\n+void abort (void);\n+int strcmp (const char *, const char *);\n+\n+int\n+main()\n+{\n+  if (strcmp (s, \"0x1p+( 0x1p+)\"))\n+    return 0; /* Correct C99 and C++11 behavior.  */\n+  else\n+    abort (); /* Correct C90 and C++ behavior.  */\n+}"}, {"sha": "7f88f7aa4057d23a00658592a7529c79369fce60", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -1,3 +1,12 @@\n+2014-08-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR cpp/23827 - standard C++ should not have hex float preprocessor\n+\ttokens\n+\t* libcpp/init.c (lang_flags): Change CXX98 flag for extended numbers\n+\tfrom 1 to 0.\n+\t* libcpp/expr.c (cpp_classify_number): Weite error message for improper\n+\tuse of hex floating literal.\n+\n 2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Z, CLK_CXX1Z;"}, {"sha": "519bb878b6fae233d25995ef0a692c6e2fd59366", "filename": "libcpp/expr.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -540,9 +540,16 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \tSYNTAX_ERROR_AT (virtual_location,\n \t\t\t \"no digits in hexadecimal floating constant\");\n \n-      if (radix == 16 && CPP_PEDANTIC (pfile) && !CPP_OPTION (pfile, c99))\n-\tcpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n-\t\t\t     \"use of C99 hexadecimal floating constant\");\n+      if (radix == 16 && CPP_PEDANTIC (pfile)\n+\t  && !CPP_OPTION (pfile, extended_numbers))\n+\t{\n+\t  if (CPP_OPTION (pfile, cplusplus))\n+\t    cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n+\t\t\t\t \"use of C++11 hexadecimal floating constant\");\n+\t  else\n+\t    cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n+\t\t\t\t \"use of C99 hexadecimal floating constant\");\n+\t}\n \n       if (float_flag == AFTER_EXPON)\n \t{"}, {"sha": "7aace802682187da5065832850c28ba8b5d112ce", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c05e50c733d217f7f1da1f5173584fbc5032d2e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=7c05e50c733d217f7f1da1f5173584fbc5032d2e", "patch": "@@ -103,7 +103,7 @@ static const struct lang_flags lang_defaults[] =\n   /* STDC99   */  { 1,  0,  1,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n   /* STDC11   */  { 1,  0,  1,  0,  1,  1,  1,  1,  1,   0,   0,    0,     0,     1 },\n   /* GNUCXX   */  { 0,  1,  1,  0,  0,  0,  1,  1,  0,   0,   0,    0,     0,     0 },\n-  /* CXX98    */  { 0,  1,  1,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n+  /* CXX98    */  { 0,  1,  0,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n   /* GNUCXX11 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    0,     0,     0 },\n   /* CXX11    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    0,     0,     1 },\n   /* GNUCXX14 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    1,     1,     0 },"}]}