{"sha": "113a62d92e63e6b069f4bf764dfb71da6206c0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzYTYyZDkyZTYzZTZiMDY5ZjRiZjc2NGRmYjcxZGE2MjA2YzBlNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-22T14:24:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T14:24:03Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, errout.adb, erroutc.adb: Minor reformatting.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Check_Pool_Size_Clash): New procedure\n\t(Analyze_Attribute_Definition_Clause, case Storage_Pool): call\n\tCheck_Pool_Size_Clash (Analyze_Attribute_Definition_Clause,\n\tcase Storage_Size): call Check_Pool_Size_Clash.\n\nFrom-SVN: r206923", "tree": {"sha": "286a9164a13d3d6722b9b5f52e4ef91a166b70d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286a9164a13d3d6722b9b5f52e4ef91a166b70d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113a62d92e63e6b069f4bf764dfb71da6206c0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a62d92e63e6b069f4bf764dfb71da6206c0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113a62d92e63e6b069f4bf764dfb71da6206c0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a62d92e63e6b069f4bf764dfb71da6206c0e5/comments", "author": null, "committer": null, "parents": [{"sha": "f5f6d8d705722d82c007ecfc56cb338ce72ea17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f6d8d705722d82c007ecfc56cb338ce72ea17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f6d8d705722d82c007ecfc56cb338ce72ea17c"}], "stats": {"total": 138, "additions": 102, "deletions": 36}, "files": [{"sha": "53e598974569a3934224ef7fddc8d6dc67df3d52", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=113a62d92e63e6b069f4bf764dfb71da6206c0e5", "patch": "@@ -1,3 +1,14 @@\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, errout.adb, erroutc.adb: Minor reformatting.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Pool_Size_Clash): New procedure\n+\t(Analyze_Attribute_Definition_Clause, case Storage_Pool): call\n+\tCheck_Pool_Size_Clash (Analyze_Attribute_Definition_Clause,\n+\tcase Storage_Size): call Check_Pool_Size_Clash.\n+\n 2014-01-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, exp_util.adb, sem_dim.adb, sem_elab.adb, sem_ch8.adb,"}, {"sha": "76cba3998d09ce08c5fc761b4ae33ef389cbe2a2", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=113a62d92e63e6b069f4bf764dfb71da6206c0e5", "patch": "@@ -1499,19 +1499,19 @@ package body Errout is\n       Cur_Msg := No_Error_Msg;\n       List_Pragmas.Init;\n \n-      --  Initialize warnings table. As an optimization, if all warnings are\n-      --  suppressed, we supply an initial dummy entry covering all possible\n-      --  source locations, which avoids taking into account pragma Warnings\n-      --  in the source. In GNATprove_Mode, this optimization is disabled, as\n-      --  we rely on the Warnings table to be correctly filled for back-end\n-      --  warnings.\n+      --  Initialize warnings table\n \n       Warnings.Init;\n       Specific_Warnings.Init;\n \n-      if not GNATprove_Mode\n-        and then Warning_Mode = Suppress\n-      then\n+      --  As an optimization, if all warnings are suppressed, we supply an\n+      --  initial dummy entry covering all possible source locations, which\n+      --  avoids taking into account pragma Warnings in the source. In\n+      --  GNATprove_Mode, this optimization is disabled, as we rely on\n+      --  the Warnings table to be correctly filled for use of the warning\n+      --  mechanism for gnatprove itself.\n+\n+      if not GNATprove_Mode and then Warning_Mode = Suppress then\n          Warnings.Append\n            ((Start => Source_Ptr'First, Stop => Source_Ptr'Last));\n       end if;"}, {"sha": "ba9b0d3b663654d7040c33649f67ff1e64e99977", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=113a62d92e63e6b069f4bf764dfb71da6206c0e5", "patch": "@@ -1207,20 +1207,20 @@ package body Erroutc is\n          return;\n       end if;\n \n-      --  Nothing to do unless command line switch to suppress all warnings is\n-      --  off or we are in GNATprove_Mode, and the last entry in the warnings\n-      --  table covers this pragma Warnings (On), in which case adjust the end\n-      --  point.\n-\n-      if (Warnings.Last >= Warnings.First\n-           and then Warnings.Table (Warnings.Last).Start <= Loc\n-           and then Loc <= Warnings.Table (Warnings.Last).Stop)\n-        and then\n-          (Warning_Mode /= Suppress\n-             or else\n-           GNATprove_Mode)\n+      --  If the last entry in the warnings table covers this pragma, then\n+      --  we adjust the end point appropriately.\n+\n+      if Warnings.Last >= Warnings.First\n+        and then Warnings.Table (Warnings.Last).Start <= Loc\n+        and then Loc <= Warnings.Table (Warnings.Last).Stop\n       then\n-         Warnings.Table (Warnings.Last).Stop := Loc;\n+         --  We can normally skip this adjustment if we are suppressing all\n+         --  warnings, but we do want to do it in gnatprove mode even then,\n+         --  since we use the warning mechanism in gnatprove itself.\n+\n+         if Warning_Mode /= Suppress or else GNATprove_Mode then\n+            Warnings.Table (Warnings.Last).Stop := Loc;\n+         end if;\n       end if;\n    end Set_Warnings_Mode_On;\n "}, {"sha": "dbfc215378d6fd71bfffe1f10c0be26767c6b4ff", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=113a62d92e63e6b069f4bf764dfb71da6206c0e5", "patch": "@@ -112,6 +112,10 @@ package body Sem_Ch13 is\n    --  list is stored in Static_Predicate (Typ), and the Expr is rewritten as\n    --  a canonicalized membership operation.\n \n+   procedure Check_Pool_Size_Clash (Ent : Entity_Id; SP, SS : Node_Id);\n+   --  Called if both Storage_Pool and Storage_Size attribute definition\n+   --  clauses (SP and SS) are present for entity Ent. Issue error message.\n+\n    procedure Freeze_Entity_Checks (N : Node_Id);\n    --  Called from Analyze_Freeze_Entity and Analyze_Generic_Freeze Entity\n    --  to generate appropriate semantic checks that are delayed until this\n@@ -1698,8 +1702,8 @@ package body Sem_Ch13 is\n                   end if;\n \n                   --  If the type is private, indicate that its completion\n-                  --  has a freeze node, because that is the one that will be\n-                  --  visible at freeze time.\n+                  --  has a freeze node, because that is the one that will\n+                  --  be visible at freeze time.\n \n                   if Is_Private_Type (E) and then Present (Full_View (E)) then\n                      Set_Has_Predicates (Full_View (E));\n@@ -4629,6 +4633,20 @@ package body Sem_Ch13 is\n                return;\n             end if;\n \n+            --  Check for Storage_Size previously given\n+\n+            declare\n+               SS : constant Node_Id :=\n+                      Get_Attribute_Definition_Clause\n+                        (U_Ent, Attribute_Storage_Size);\n+            begin\n+               if Present (SS) then\n+                  Check_Pool_Size_Clash (U_Ent, N, SS);\n+               end if;\n+            end;\n+\n+            --  Storage_Pool case\n+\n             if Id = Attribute_Storage_Pool then\n                Analyze_And_Resolve\n                  (Expr, Class_Wide_Type (RTE (RE_Root_Storage_Pool)));\n@@ -4788,10 +4806,21 @@ package body Sem_Ch13 is\n                Analyze_And_Resolve (Expr, Any_Integer);\n \n                if Is_Access_Type (U_Ent) then\n-                  if Present (Associated_Storage_Pool (U_Ent)) then\n-                     Error_Msg_N (\"storage pool already given for &\", Nam);\n-                     return;\n-                  end if;\n+\n+                  --  Check for Storage_Pool previously given\n+\n+                  declare\n+                     SP : constant Node_Id :=\n+                            Get_Attribute_Definition_Clause\n+                              (U_Ent, Attribute_Storage_Pool);\n+\n+                  begin\n+                     if Present (SP) then\n+                        Check_Pool_Size_Clash (U_Ent, SP, N);\n+                     end if;\n+                  end;\n+\n+                  --  Special case of for x'Storage_Size use 0\n \n                   if Is_OK_Static_Expression (Expr)\n                     and then Expr_Value (Expr) = 0\n@@ -8307,6 +8336,33 @@ package body Sem_Ch13 is\n       end if;\n    end Check_Constant_Address_Clause;\n \n+   ---------------------------\n+   -- Check_Pool_Size_Clash --\n+   ---------------------------\n+\n+   procedure Check_Pool_Size_Clash (Ent : Entity_Id; SP, SS : Node_Id) is\n+      Post : Node_Id;\n+\n+   begin\n+      --  We need to find out which one came first. Note that in the case of\n+      --  aspects mixed with pragmas there are cases where the processing order\n+      --  is reversed, which is why we do the check here.\n+\n+      if Sloc (SP) < Sloc (SS) then\n+         Error_Msg_Sloc := Sloc (SP);\n+         Post := SS;\n+         Error_Msg_NE (\"Storage_Pool previously given for&#\", Post, Ent);\n+\n+      else\n+         Error_Msg_Sloc := Sloc (SS);\n+         Post := SP;\n+         Error_Msg_NE (\"Storage_Size previously given for&#\", Post, Ent);\n+      end if;\n+\n+      Error_Msg_N\n+        (\"\\cannot have Storage_Size and Storage_Pool (RM 13.11(3))\", Post);\n+   end Check_Pool_Size_Clash;\n+\n    ----------------------------------------\n    -- Check_Record_Representation_Clause --\n    ----------------------------------------\n@@ -9580,7 +9636,6 @@ package body Sem_Ch13 is\n    -------------------------------------\n \n    procedure Inherit_Aspects_At_Freeze_Point (Typ : Entity_Id) is\n-\n       function Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item\n         (Rep_Item : Node_Id) return Boolean;\n       --  This routine checks if Rep_Item is either a pragma or an aspect"}, {"sha": "74fc6639c61cd71a5571ef8e5d1b881f7e5c61c1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a62d92e63e6b069f4bf764dfb71da6206c0e5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=113a62d92e63e6b069f4bf764dfb71da6206c0e5", "patch": "@@ -733,7 +733,7 @@ package body Sem_Ch3 is\n          return Empty;\n       end if;\n \n-      --  Ada 2005: for an object declaration the corresponding anonymous\n+      --  Ada 2005: For an object declaration the corresponding anonymous\n       --  type is declared in the current scope.\n \n       --  If the access definition is the return type of another access to\n@@ -912,7 +912,7 @@ package body Sem_Ch3 is\n          Set_Has_Delayed_Freeze (Current_Scope);\n       end if;\n \n-      --  Ada 2005: if the designated type is an interface that may contain\n+      --  Ada 2005: If the designated type is an interface that may contain\n       --  tasks, create a Master entity for the declaration. This must be done\n       --  before expansion of the full declaration, because the declaration may\n       --  include an expression that is an allocator, whose expansion needs the\n@@ -3241,11 +3241,11 @@ package body Sem_Ch3 is\n \n          --  Protected objects with interrupt handlers must be at library level\n \n-         --  Ada 2005: this test is not needed (and the corresponding clause\n+         --  Ada 2005: This test is not needed (and the corresponding clause\n          --  in the RM is removed) because accessibility checks are sufficient\n          --  to make handlers not at the library level illegal.\n \n-         --  AI05-0303: the AI is in fact a binding interpretation, and thus\n+         --  AI05-0303: The AI is in fact a binding interpretation, and thus\n          --  applies to the '95 version of the language as well.\n \n          if Has_Interrupt_Handler (T) and then Ada_Version < Ada_95 then\n@@ -3637,7 +3637,7 @@ package body Sem_Ch3 is\n          if No (E) then\n             Act_T := Build_Default_Subtype (T, N);\n          else\n-            --  Ada 2005: a limited object may be initialized by means of an\n+            --  Ada 2005: A limited object may be initialized by means of an\n             --  aggregate. If the type has default discriminants it has an\n             --  unconstrained nominal type, Its actual subtype will be obtained\n             --  from the aggregate, and not from the default discriminants.\n@@ -11173,7 +11173,7 @@ package body Sem_Ch3 is\n          --  from a private type) has no discriminants. (Defect Report\n          --  8652/0008, Technical Corrigendum 1, checked by ACATS B371001).\n \n-         --  Rule updated for Ada 2005: the private type is said to have\n+         --  Rule updated for Ada 2005: The private type is said to have\n          --  a constrained partial view, given that objects of the type\n          --  can be declared. Furthermore, the rule applies to all access\n          --  types, unlike the rule concerning default discriminants (see\n@@ -20127,7 +20127,7 @@ package body Sem_Ch3 is\n \n       Final_Storage_Only := not Is_Controlled (T);\n \n-      --  Ada 2005: check whether an explicit Limited is present in a derived\n+      --  Ada 2005: Check whether an explicit Limited is present in a derived\n       --  type declaration.\n \n       if Nkind (Parent (Def)) = N_Derived_Type_Definition"}]}