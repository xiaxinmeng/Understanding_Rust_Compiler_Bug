{"sha": "cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmNDdkZjA4YWJhMjNjNWI0MGZhM2U0YjhkN2Y0YzljYzJjODgyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:34:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:34:45Z"}, "message": "re PR c++/55240 ([c++0x] ICE on non-static data member initialization using 'auto' variable from containing function)\n\n\tPR c++/55240\n\t* parser.c (parsing_nsdmi): New.\n\t* semantics.c (outer_automatic_var_p): Check it.\n\t(finish_id_expression): Likewise.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r196727", "tree": {"sha": "45d7915d636df24049f21e82bf64dd29fe73cfb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d7915d636df24049f21e82bf64dd29fe73cfb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1e03bc5bc4983bb0cda698575b45a2be16765a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e03bc5bc4983bb0cda698575b45a2be16765a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e03bc5bc4983bb0cda698575b45a2be16765a4"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "04eab4a67d1a694b6a6b710acb0e3a9e9136b0d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "patch": "@@ -1,5 +1,11 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/55240\n+\t* parser.c (parsing_nsdmi): New.\n+\t* semantics.c (outer_automatic_var_p): Check it.\n+\t(finish_id_expression): Likewise.\n+\t* cp-tree.h: Declare it.\n+\n \tPR c++/55241\n \t* error.c (dump_expr) [SIZEOF_EXPR]: Print sizeof... properly.\n "}, {"sha": "d9496d28c2a326b2c45b8daef93ed6dfff6def1d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "patch": "@@ -4259,6 +4259,7 @@ extern int comparing_specializations;\n \n extern int cp_unevaluated_operand;\n extern tree cp_convert_range_for (tree, tree, tree);\n+extern bool parsing_nsdmi (void);\n \n /* in pt.c  */\n "}, {"sha": "0a3740db6dbea593fd1be52747d141b634db03d9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "patch": "@@ -16938,6 +16938,19 @@ inject_this_parameter (tree ctype, cp_cv_quals quals)\n   current_class_ptr = this_parm;\n }\n \n+/* Return true iff our current scope is a non-static data member\n+   initializer.  */\n+\n+bool\n+parsing_nsdmi (void)\n+{\n+  /* We recognize NSDMI context by the context-less 'this' pointer set up\n+     by the function above.  */\n+  if (current_class_ptr && DECL_CONTEXT (current_class_ptr) == NULL_TREE)\n+    return true;\n+  return false;\n+}\n+\n /* Parse a late-specified return type, if any.  This is not a separate\n    non-terminal, but part of a function declarator, which looks like\n "}, {"sha": "efe09bb14b2511f9839123f4c54dd52bc17a1335", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "patch": "@@ -2884,7 +2884,8 @@ outer_var_p (tree decl)\n {\n   return ((TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL)\n \t  && DECL_FUNCTION_SCOPE_P (decl)\n-\t  && DECL_CONTEXT (decl) != current_function_decl);\n+\t  && (DECL_CONTEXT (decl) != current_function_decl\n+\t      || parsing_nsdmi ()));\n }\n \n /* As above, but also checks that DECL is automatic.  */\n@@ -3041,12 +3042,14 @@ finish_id_expression (tree id_expression,\n \t\treturn integral_constant_value (decl);\n \t    }\n \n+\t  if (parsing_nsdmi ())\n+\t    containing_function = NULL_TREE;\n \t  /* If we are in a lambda function, we can move out until we hit\n \t     1. the context,\n \t     2. a non-lambda function, or\n \t     3. a non-default capturing lambda function.  */\n-\t  while (context != containing_function\n-\t\t && LAMBDA_FUNCTION_P (containing_function))\n+\t  else while (context != containing_function\n+\t\t      && LAMBDA_FUNCTION_P (containing_function))\n \t    {\n \t      lambda_expr = CLASSTYPE_LAMBDA_EXPR\n \t\t(DECL_CONTEXT (containing_function));"}, {"sha": "9b84c8c3deda3f4ddf854804a2d36bf73ec458dc", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-local.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-local.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-local.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-local.C?ref=cdf47df08aba23c5b40fa3e4b8d7f4c9cc2c882e", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/55240\n+// { dg-do compile { target c++11 } }\n+\n+int main()\n+{\n+    int q = 1;\t\t\t\t // { dg-error \"declared here\" }\n+    struct test { int x = q; } instance; // { dg-error \"local variable\" }\n+}"}]}