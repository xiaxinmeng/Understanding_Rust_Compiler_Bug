{"sha": "dfb7345cd54e90b4f5cc0234bd37ec2763602180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiNzM0NWNkNTRlOTBiNGY1Y2MwMjM0YmQzN2VjMjc2MzYwMjE4MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-08-21T09:22:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-22T12:11:28Z"}, "message": "[Ada] Enable the support of 128-bit integer types by default\n\ngcc/ada/\n\n\t* Makefile.rtl (GNATRTL_128BIT_PAIRS): Add i-cexten.ads.\n\t* debug.adb (d.H): Document new usage.\n\t* doc/gnat_rm/representation_clauses_and_pragmas.rst (Size Clauses):\n\tDocument new limit on 64-bit platforms.\n\t(Component_Size Clauses): Likewise.\n\t(Pragma Pack for Arrays): Likewise.\n\t(Pragma Pack for Records): Likewise.\n\t(Record Representation Clauses): Likewise.\n\t* gnat_rm.texi: Regenerate.\n\t* gnat1drv.adb (Adjust_Global_Switches): Rewrite code enabling or\n\tdisabling the support for 128-bit integer types.\n\t* switch-c.adb (Scan_Front_End_Switches): Do not deal with e128.\n\t* usage.adb (Write_Switch_Char): Do not print -gnate128 switch.\n\t* libgnat/i-cexten__128.ads: New file.\n\ngcc/testsuite/\n\n\t* ada/acats/run_all.sh: Define and substitute target_{max,min}_int.\n\t* ada/acats/support/macro.dfs: Parameterize {MAX,MIN}_INT.\n\t* gnat.dg/assert1.adb: Adjust conditionally to 128-bit integer types.\n\t* gnat.dg/size_clause1.adb: Do not expect a warning for LP64 targets.\n\t* gnat.dg/warn11.adb: Likewise.\n\t* gnat.dg/specs/rep_clause5.ads (Array_2_Type): Add alignment clause.", "tree": {"sha": "3faebb287f7e9b8efdc10f30d18fb4e23ecefd7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3faebb287f7e9b8efdc10f30d18fb4e23ecefd7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb7345cd54e90b4f5cc0234bd37ec2763602180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb7345cd54e90b4f5cc0234bd37ec2763602180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb7345cd54e90b4f5cc0234bd37ec2763602180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb7345cd54e90b4f5cc0234bd37ec2763602180/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2dea70e920c5dab3118f362f693d4c0e6d9af87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dea70e920c5dab3118f362f693d4c0e6d9af87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2dea70e920c5dab3118f362f693d4c0e6d9af87"}], "stats": {"total": 1162, "additions": 1009, "deletions": 153}, "files": [{"sha": "7a0c05b423d9f2de7895ce203a103fbee7032fdb", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -888,6 +888,7 @@ GNATRTL_128BIT_PAIRS = \\\n   a-wtmoio.adb<libgnat/a-wtmoio__128.adb \\\n   a-ztinio.adb<libgnat/a-ztinio__128.adb \\\n   a-ztmoio.adb<libgnat/a-ztmoio__128.adb \\\n+  i-cexten.ads<libgnat/i-cexten__128.ads \\\n   s-scaval.ads<libgnat/s-scaval__128.ads \\\n   s-scaval.adb<libgnat/s-scaval__128.adb\n "}, {"sha": "ab851599120a0e0280956ebf2c1c319bd1201e83", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -125,7 +125,7 @@ package body Debug is\n    --  d.E  Turn selected errors into warnings\n    --  d.F  Debug mode for GNATprove\n    --  d.G  Ignore calls through generic formal parameters for elaboration\n-   --  d.H\n+   --  d.H  Disable the support for 128-bit integer types on 64-bit platforms\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Relaxed rules for pragma No_Return\n    --  d.K  Do not reject components in extensions overlapping with parent\n@@ -883,6 +883,10 @@ package body Debug is\n    --       now fixed, but we provide this debug flag to revert to the previous\n    --       situation of ignoring such calls to aid in transition.\n \n+   --  d.H  Disable the support for 128-bit integer types on 64-bit platforms.\n+   --       This makes it easier to mimic the behavior of the current compiler\n+   --       on 32-bit platforms or of older compilers on 64-bit platforms.\n+\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode.\n    --       The default of ignoring representation clauses for enumeration\n    --       types in CodePeer is good for the majority of Ada code, but in some"}, {"sha": "c13a882d45203c03e525175970c64ba02ed74e99", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -195,12 +195,12 @@ increasing it.  For example, if we have:\n      type My_Boolean is new Boolean;\n      for My_Boolean'Size use 32;\n \n-then values of this type will always be 32 bits long.  In the case of\n-discrete types, the size can be increased up to 64 bits, with the effect\n-that the entire specified field is used to hold the value, sign- or\n-zero-extended as appropriate.  If more than 64 bits is specified, then\n-padding space is allocated after the value, and a warning is issued that\n-there are unused bits.\n+then values of this type will always be 32-bit long.  In the case of discrete\n+types, the size can be increased up to 64 bits on 32-bit targets and 128 bits\n+on 64-bit targets, with the effect that the entire specified field is used to\n+hold the value, sign- or zero-extended as appropriate.  If more than 64 bits\n+or 128 bits resp. is specified, then padding space is allocated after the\n+value, and a warning is issued that there are unused bits.\n \n Similarly the size of records and arrays may be increased, and the effect\n is to add padding bits after the value.  This also causes a warning message\n@@ -678,8 +678,9 @@ of this subtype, and must be a multiple of the alignment value.\n \n In addition, component size clauses are allowed which cause the array\n to be packed, by specifying a smaller value.  A first case is for\n-component size values in the range 1 through 63.  The value specified\n-must not be smaller than the Size of the subtype.  GNAT will accurately\n+component size values in the range 1 through 63 on 32-bit targets,\n+and 1 through 127 on 64-bit targets.  The value specified may not\n+be smaller than the Size of the subtype.  GNAT will accurately\n honor all packing requests in this range.  For example, if we have:\n \n \n@@ -1094,7 +1095,8 @@ be one of the following cases:\n * Any small simple record type with a static size.\n \n For all these cases, if the component subtype size is in the range\n-1 through 64, then the effect of the pragma ``Pack`` is exactly as though a\n+1 through 63 on 32-bit targets, and 1 through 127 on 64-bit targets,\n+then the effect of the pragma ``Pack`` is exactly as though a\n component size were specified giving the component subtype size.\n \n All other types are non-packable, they occupy an integral number of storage\n@@ -1124,11 +1126,13 @@ using an explicit ``Component_Size`` setting instead, which never generates\n a warning, since the intention of the programmer is clear in this case.\n \n GNAT treats packed arrays in one of two ways.  If the size of the array is\n-known at compile time and is less than 64 bits, then internally the array\n-is represented as a single modular type, of exactly the appropriate number\n-of bits.  If the length is greater than 63 bits, or is not known at compile\n-time, then the packed array is represented as an array of bytes, and the\n-length is always a multiple of 8 bits.\n+known at compile time and is at most 64 bits on 32-bit targets, and at most\n+128 bits on 64-bit targets, then internally the array is represented as a\n+single modular type, of exactly the appropriate number of bits.  If the\n+length is greater than 64 bits on 32-bit targets, and greater than 128\n+bits on 64-bit targets, or is not known at compile time, then the packed\n+array is represented as an array of bytes, and its length is always a\n+multiple of 8 bits.\n \n Note that to represent a packed array as a modular type, the alignment must\n be suitable for the modular type involved. For example, on typical machines\n@@ -1200,17 +1204,17 @@ taken by components.  We distinguish between *packable* components and\n Components of the following types are considered packable:\n \n * Components of an elementary type are packable unless they are aliased,\n-  independent, or of an atomic type.\n+  independent or atomic.\n \n * Small packed arrays, where the size is statically known, are represented\n   internally as modular integers, and so they are also packable.\n \n * Small simple records, where the size is statically known, are also packable.\n \n-For all these cases, if the ``'Size`` value is in the range 1 through 64, the\n-components occupy the exact number of bits corresponding to this value\n-and are packed with no padding bits, i.e. they can start on an arbitrary\n-bit boundary.\n+For all these cases, if the ``'Size`` value is in the range 1 through 64 on\n+32-bit targets, and 1 through 128 on 64-bit targets, the components occupy\n+the exact number of bits corresponding to this value and are packed with no\n+padding bits, i.e. they can start on an arbitrary bit boundary.\n \n All other types are non-packable, they occupy an integral number of storage\n units and the only effect of pragma ``Pack`` is to remove alignment gaps.\n@@ -1237,7 +1241,7 @@ For example, consider the record\n      end record;\n      pragma Pack (X2);\n \n-The representation for the record ``X2`` is as follows:\n+The representation for the record ``X2`` is as follows on 32-bit targets:\n \n .. code-block:: ada\n \n@@ -1252,17 +1256,16 @@ The representation for the record ``X2`` is as follows:\n   end record;\n \n Studying this example, we see that the packable fields ``L1``\n-and ``L2`` are\n-of length equal to their sizes, and placed at specific bit boundaries (and\n-not byte boundaries) to\n-eliminate padding.  But ``L3`` is of a non-packable float type (because\n+and ``L2`` are of length equal to their sizes, and placed at\n+specific bit boundaries (and not byte boundaries) to eliminate\n+padding.  But ``L3`` is of a non-packable float type (because\n it is aliased), so it is on the next appropriate alignment boundary.\n \n The next two fields are fully packable, so ``L4`` and ``L5`` are\n minimally packed with no gaps.  However, type ``Rb2`` is a packed\n-array that is longer than 64 bits, so it is itself non-packable.  Thus\n-the ``L6`` field is aligned to the next byte boundary, and takes an\n-integral number of bytes, i.e., 72 bits.\n+array that is longer than 64 bits, so it is itself non-packable on\n+32-bit targets.  Thus the ``L6`` field is aligned to the next byte\n+boundary, and takes an integral number of bytes, i.e., 72 bits.\n \n .. _Record_Representation_Clauses:\n \n@@ -1283,7 +1286,8 @@ clauses is that the size must be at least the ``'Size`` value of the type\n (actually the Value_Size).  There are no restrictions due to alignment,\n and such components may freely cross storage boundaries.\n \n-Packed arrays with a size up to and including 64 bits are represented\n+Packed arrays with a size up to and including 64 bits on 32-bit targets,\n+and up to and including 128 bits on 64-bit targets, are represented\n internally using a modular type with the appropriate number of bits, and\n thus the same lack of restriction applies.  For example, if you declare:\n \n@@ -1296,30 +1300,30 @@ thus the same lack of restriction applies.  For example, if you declare:\n then a component clause for a component of type ``R`` may start on any\n specified bit boundary, and may specify a value of 49 bits or greater.\n \n-For packed bit arrays that are longer than 64 bits, there are two\n-cases. If the component size is a power of 2 (1,2,4,8,16,32 bits),\n-including the important case of single bits or boolean values, then\n-there are no limitations on placement of such components, and they\n-may start and end at arbitrary bit boundaries.\n+For packed bit arrays that are longer than 64 bits on 32-bit targets,\n+and longer than 128 bits on 64-bit targets, there are two cases. If the\n+component size is a power of 2 (1,2,4,8,16,32,64 bits), including the\n+important case of single bits or boolean values, then there are no\n+limitations on placement of such components, and they may start and\n+end at arbitrary bit boundaries.\n \n-If the component size is not a power of 2 (e.g., 3 or 5), then\n-an array of this type longer than 64 bits must always be placed on\n-on a storage unit (byte) boundary and occupy an integral number\n-of storage units (bytes). Any component clause that does not\n-meet this requirement will be rejected.\n+If the component size is not a power of 2 (e.g., 3 or 5), then an array\n+of this type must always be placed on on a storage unit (byte) boundary\n+and occupy an integral number of storage units (bytes). Any component\n+clause that does not meet this requirement will be rejected.\n \n-Any aliased component, or component of an aliased type, must\n-have its normal alignment and size. A component clause that\n-does not meet this requirement will be rejected.\n+Any aliased component, or component of an aliased type, must have its\n+normal alignment and size. A component clause that does not meet this\n+requirement will be rejected.\n \n The tag field of a tagged type always occupies an address sized field at\n the start of the record.  No component clause may attempt to overlay this\n tag. When a tagged type appears as a component, the tag field must have\n proper alignment\n \n-In the case of a record extension ``T1``, of a type ``T``, no component clause applied\n-to the type ``T1`` can specify a storage location that would overlap the first\n-``T'Size`` bytes of the record.\n+In the case of a record extension ``T1``, of a type ``T``, no component\n+clause applied to the type ``T1`` can specify a storage location that\n+would overlap the first ``T'Object_Size`` bits of the record.\n \n For all other component types, including non-bit-packed arrays,\n the component can be placed at an arbitrary bit boundary,\n@@ -1350,8 +1354,7 @@ Handling of Records with Holes\n .. index:: Handling of Records with Holes\n \n As a result of alignment considerations, records may contain \"holes\"\n-or gaps\n-which do not correspond to the data bits of any of the components.\n+or gaps which do not correspond to the data bits of any of the components.\n Record representation clauses can also result in holes in records.\n \n GNAT does not attempt to clear these holes, so in record objects,"}, {"sha": "9c51889dc79618d209de85f6df505370c9a01f0a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -799,31 +799,31 @@ procedure Gnat1drv is\n          Set_Standard_Output;\n       end if;\n \n-      --  Enable or disable the support for 128-bit types\n+      --  Enable or disable the support for 128-bit types. It is automatically\n+      --  enabled if the back end supports them, unless not in GNAT mode and\n+      --  either the runtime does not contain the required support units or the\n+      --  switch -gnatd.H is specified.\n \n-      if Enable_128bit_Types then\n-         if Ttypes.Standard_Long_Long_Long_Integer_Size < 128 then\n-            Write_Line\n-              (\"128-bit types not implemented in this configuration\");\n-            raise Unrecoverable_Error;\n-         end if;\n-\n-      --  In GNAT mode the support is automatically enabled if available,\n-      --  so that the runtime is compiled with the support enabled.\n+      Enable_128bit_Types := Ttypes.Standard_Long_Long_Long_Integer_Size = 128;\n \n-      elsif GNAT_Mode then\n-         Enable_128bit_Types :=\n-           Ttypes.Standard_Long_Long_Long_Integer_Size = 128;\n+      if Enable_128bit_Types and then not GNAT_Mode then\n+         Name_Len := 13;\n+         Name_Buffer (1 .. Name_Len) := \"s-arit128.ads\";\n \n-      else\n-         Ttypes.Standard_Long_Long_Long_Integer_Size :=\n-           Ttypes.Standard_Long_Long_Integer_Size;\n-         Ttypes.Standard_Long_Long_Long_Integer_Width :=\n-           Ttypes.Standard_Long_Long_Integer_Width;\n-         Ttypes.System_Max_Integer_Size :=\n-           Ttypes.Standard_Long_Long_Integer_Size;\n-         Ttypes.System_Max_Binary_Modulus_Power :=\n-           Ttypes.Standard_Long_Long_Integer_Size;\n+         if Find_File (Name_Find, Osint.Source, Full_Name => True) = No_File\n+           or else Debug_Flag_Dot_HH\n+         then\n+            Enable_128bit_Types := False;\n+\n+            Ttypes.Standard_Long_Long_Long_Integer_Size :=\n+              Ttypes.Standard_Long_Long_Integer_Size;\n+            Ttypes.Standard_Long_Long_Long_Integer_Width :=\n+              Ttypes.Standard_Long_Long_Integer_Width;\n+            Ttypes.System_Max_Integer_Size :=\n+              Ttypes.Standard_Long_Long_Integer_Size;\n+            Ttypes.System_Max_Binary_Modulus_Power :=\n+              Ttypes.Standard_Long_Long_Integer_Size;\n+         end if;\n       end if;\n \n       --  Finally capture adjusted value of Suppress_Options as the initial"}, {"sha": "af8bd07da9d23762a382afc7426850265884cbea", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -18097,12 +18097,12 @@ type My_Boolean is new Boolean;\n for My_Boolean'Size use 32;\n @end example\n \n-then values of this type will always be 32 bits long.  In the case of\n-discrete types, the size can be increased up to 64 bits, with the effect\n-that the entire specified field is used to hold the value, sign- or\n-zero-extended as appropriate.  If more than 64 bits is specified, then\n-padding space is allocated after the value, and a warning is issued that\n-there are unused bits.\n+then values of this type will always be 32-bit long.  In the case of discrete\n+types, the size can be increased up to 64 bits on 32-bit targets and 128 bits\n+on 64-bit targets, with the effect that the entire specified field is used to\n+hold the value, sign- or zero-extended as appropriate.  If more than 64 bits\n+or 128 bits resp. is specified, then padding space is allocated after the\n+value, and a warning is issued that there are unused bits.\n \n Similarly the size of records and arrays may be increased, and the effect\n is to add padding bits after the value.  This also causes a warning message\n@@ -18666,8 +18666,9 @@ of this subtype, and must be a multiple of the alignment value.\n \n In addition, component size clauses are allowed which cause the array\n to be packed, by specifying a smaller value.  A first case is for\n-component size values in the range 1 through 63.  The value specified\n-must not be smaller than the Size of the subtype.  GNAT will accurately\n+component size values in the range 1 through 63 on 32-bit targets,\n+and 1 through 127 on 64-bit targets.  The value specified may not\n+be smaller than the Size of the subtype.  GNAT will accurately\n honor all packing requests in this range.  For example, if we have:\n \n @example\n@@ -19087,7 +19088,8 @@ Any small simple record type with a static size.\n @end itemize\n \n For all these cases, if the component subtype size is in the range\n-1 through 64, then the effect of the pragma @code{Pack} is exactly as though a\n+1 through 63 on 32-bit targets, and 1 through 127 on 64-bit targets,\n+then the effect of the pragma @code{Pack} is exactly as though a\n component size were specified giving the component subtype size.\n \n All other types are non-packable, they occupy an integral number of storage\n@@ -19117,11 +19119,13 @@ using an explicit @code{Component_Size} setting instead, which never generates\n a warning, since the intention of the programmer is clear in this case.\n \n GNAT treats packed arrays in one of two ways.  If the size of the array is\n-known at compile time and is less than 64 bits, then internally the array\n-is represented as a single modular type, of exactly the appropriate number\n-of bits.  If the length is greater than 63 bits, or is not known at compile\n-time, then the packed array is represented as an array of bytes, and the\n-length is always a multiple of 8 bits.\n+known at compile time and is at most 64 bits on 32-bit targets, and at most\n+128 bits on 64-bit targets, then internally the array is represented as a\n+single modular type, of exactly the appropriate number of bits.  If the\n+length is greater than 64 bits on 32-bit targets, and greater than 128\n+bits on 64-bit targets, or is not known at compile time, then the packed\n+array is represented as an array of bytes, and its length is always a\n+multiple of 8 bits.\n \n Note that to represent a packed array as a modular type, the alignment must\n be suitable for the modular type involved. For example, on typical machines\n@@ -19197,7 +19201,7 @@ Components of the following types are considered packable:\n \n @item \n Components of an elementary type are packable unless they are aliased,\n-independent, or of an atomic type.\n+independent or atomic.\n \n @item \n Small packed arrays, where the size is statically known, are represented\n@@ -19207,10 +19211,10 @@ internally as modular integers, and so they are also packable.\n Small simple records, where the size is statically known, are also packable.\n @end itemize\n \n-For all these cases, if the @code{'Size} value is in the range 1 through 64, the\n-components occupy the exact number of bits corresponding to this value\n-and are packed with no padding bits, i.e. they can start on an arbitrary\n-bit boundary.\n+For all these cases, if the @code{'Size} value is in the range 1 through 64 on\n+32-bit targets, and 1 through 128 on 64-bit targets, the components occupy\n+the exact number of bits corresponding to this value and are packed with no\n+padding bits, i.e. they can start on an arbitrary bit boundary.\n \n All other types are non-packable, they occupy an integral number of storage\n units and the only effect of pragma @code{Pack} is to remove alignment gaps.\n@@ -19237,7 +19241,7 @@ end record;\n pragma Pack (X2);\n @end example\n \n-The representation for the record @code{X2} is as follows:\n+The representation for the record @code{X2} is as follows on 32-bit targets:\n \n @example\n for X2'Size use 224;\n@@ -19252,17 +19256,16 @@ end record;\n @end example\n \n Studying this example, we see that the packable fields @code{L1}\n-and @code{L2} are\n-of length equal to their sizes, and placed at specific bit boundaries (and\n-not byte boundaries) to\n-eliminate padding.  But @code{L3} is of a non-packable float type (because\n+and @code{L2} are of length equal to their sizes, and placed at\n+specific bit boundaries (and not byte boundaries) to eliminate\n+padding.  But @code{L3} is of a non-packable float type (because\n it is aliased), so it is on the next appropriate alignment boundary.\n \n The next two fields are fully packable, so @code{L4} and @code{L5} are\n minimally packed with no gaps.  However, type @code{Rb2} is a packed\n-array that is longer than 64 bits, so it is itself non-packable.  Thus\n-the @code{L6} field is aligned to the next byte boundary, and takes an\n-integral number of bytes, i.e., 72 bits.\n+array that is longer than 64 bits, so it is itself non-packable on\n+32-bit targets.  Thus the @code{L6} field is aligned to the next byte\n+boundary, and takes an integral number of bytes, i.e., 72 bits.\n \n @node Record Representation Clauses,Handling of Records with Holes,Pragma Pack for Records,Representation Clauses and Pragmas\n @anchor{gnat_rm/representation_clauses_and_pragmas id13}@anchor{28b}@anchor{gnat_rm/representation_clauses_and_pragmas record-representation-clauses}@anchor{28c}\n@@ -19283,7 +19286,8 @@ clauses is that the size must be at least the @code{'Size} value of the type\n (actually the Value_Size).  There are no restrictions due to alignment,\n and such components may freely cross storage boundaries.\n \n-Packed arrays with a size up to and including 64 bits are represented\n+Packed arrays with a size up to and including 64 bits on 32-bit targets,\n+and up to and including 128 bits on 64-bit targets, are represented\n internally using a modular type with the appropriate number of bits, and\n thus the same lack of restriction applies.  For example, if you declare:\n \n@@ -19296,30 +19300,30 @@ for R'Size use 49;\n then a component clause for a component of type @code{R} may start on any\n specified bit boundary, and may specify a value of 49 bits or greater.\n \n-For packed bit arrays that are longer than 64 bits, there are two\n-cases. If the component size is a power of 2 (1,2,4,8,16,32 bits),\n-including the important case of single bits or boolean values, then\n-there are no limitations on placement of such components, and they\n-may start and end at arbitrary bit boundaries.\n+For packed bit arrays that are longer than 64 bits on 32-bit targets,\n+and longer than 128 bits on 64-bit targets, there are two cases. If the\n+component size is a power of 2 (1,2,4,8,16,32,64 bits), including the\n+important case of single bits or boolean values, then there are no\n+limitations on placement of such components, and they may start and\n+end at arbitrary bit boundaries.\n \n-If the component size is not a power of 2 (e.g., 3 or 5), then\n-an array of this type longer than 64 bits must always be placed on\n-on a storage unit (byte) boundary and occupy an integral number\n-of storage units (bytes). Any component clause that does not\n-meet this requirement will be rejected.\n+If the component size is not a power of 2 (e.g., 3 or 5), then an array\n+of this type must always be placed on on a storage unit (byte) boundary\n+and occupy an integral number of storage units (bytes). Any component\n+clause that does not meet this requirement will be rejected.\n \n-Any aliased component, or component of an aliased type, must\n-have its normal alignment and size. A component clause that\n-does not meet this requirement will be rejected.\n+Any aliased component, or component of an aliased type, must have its\n+normal alignment and size. A component clause that does not meet this\n+requirement will be rejected.\n \n The tag field of a tagged type always occupies an address sized field at\n the start of the record.  No component clause may attempt to overlay this\n tag. When a tagged type appears as a component, the tag field must have\n proper alignment\n \n-In the case of a record extension @code{T1}, of a type @code{T}, no component clause applied\n-to the type @code{T1} can specify a storage location that would overlap the first\n-@code{T'Size} bytes of the record.\n+In the case of a record extension @code{T1}, of a type @code{T}, no component\n+clause applied to the type @code{T1} can specify a storage location that\n+would overlap the first @code{T'Object_Size} bits of the record.\n \n For all other component types, including non-bit-packed arrays,\n the component can be placed at an arbitrary bit boundary,\n@@ -19350,8 +19354,7 @@ end record;\n @geindex Handling of Records with Holes\n \n As a result of alignment considerations, records may contain \"holes\"\n-or gaps\n-which do not correspond to the data bits of any of the components.\n+or gaps which do not correspond to the data bits of any of the components.\n Record representation clauses can also result in holes in records.\n \n GNAT does not attempt to clear these holes, so in record objects,"}, {"sha": "0c049f374710d0409bc01b31ff1952e804308ff0", "filename": "gcc/ada/libgnat/i-cexten__128.ads", "status": "added", "additions": 851, "deletions": 0, "changes": 851, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Flibgnat%2Fi-cexten__128.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Flibgnat%2Fi-cexten__128.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cexten__128.ads?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -0,0 +1,851 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--              I N T E R F A C E S . C . E X T E N S I O N S               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains additional C-related definitions, intended for use\n+--  with either manually or automatically generated bindings to C libraries.\n+\n+with System;\n+\n+package Interfaces.C.Extensions is\n+   pragma Pure;\n+\n+   --  Definitions for C \"void\" and \"void *\" types\n+\n+   subtype void     is System.Address;\n+   subtype void_ptr is System.Address;\n+\n+   --  Definitions for C incomplete/unknown structs\n+\n+   subtype opaque_structure_def is System.Address;\n+   type opaque_structure_def_ptr is access opaque_structure_def;\n+   for opaque_structure_def_ptr'Storage_Size use 0;\n+\n+   --  Definitions for C++ incomplete/unknown classes\n+\n+   subtype incomplete_class_def is System.Address;\n+   type incomplete_class_def_ptr is access incomplete_class_def;\n+   for incomplete_class_def_ptr'Storage_Size use 0;\n+\n+   --  C bool\n+\n+   type bool is new Boolean;\n+   pragma Convention (C, bool);\n+\n+   --  64-bit integer types\n+\n+   subtype long_long is Interfaces.C.long_long;\n+   subtype unsigned_long_long is Interfaces.C.unsigned_long_long;\n+\n+   --  128-bit floating-point type available on x86:\n+   --  typedef float float_128 __attribute__ ((mode (TF)));\n+\n+   type Float_128 is record\n+      low, high : unsigned_long_long;\n+   end record;\n+   pragma Convention (C_Pass_By_Copy, Float_128);\n+   for Float_128'Alignment use unsigned_long_long'Alignment * 2;\n+\n+   --  128-bit complex floating-point type available on x86:\n+   --  typedef _Complex float cfloat_128 __attribute__ ((mode (TC)));\n+\n+   type CFloat_128 is record\n+      re, im : Float_128;\n+   end record;\n+   pragma Convention (C_Pass_By_Copy, CFloat_128);\n+\n+   --  Types for bitfields\n+\n+   type Unsigned_1 is mod 2 ** 1;\n+   for Unsigned_1'Size use 1;\n+\n+   type Unsigned_2 is mod 2 ** 2;\n+   for Unsigned_2'Size use 2;\n+\n+   type Unsigned_3 is mod 2 ** 3;\n+   for Unsigned_3'Size use 3;\n+\n+   type Unsigned_4 is mod 2 ** 4;\n+   for Unsigned_4'Size use 4;\n+\n+   type Unsigned_5 is mod 2 ** 5;\n+   for Unsigned_5'Size use 5;\n+\n+   type Unsigned_6 is mod 2 ** 6;\n+   for Unsigned_6'Size use 6;\n+\n+   type Unsigned_7 is mod 2 ** 7;\n+   for Unsigned_7'Size use 7;\n+\n+   type Unsigned_8 is mod 2 ** 8;\n+   for Unsigned_8'Size use 8;\n+\n+   type Unsigned_9 is mod 2 ** 9;\n+   for Unsigned_9'Size use 9;\n+\n+   type Unsigned_10 is mod 2 ** 10;\n+   for Unsigned_10'Size use 10;\n+\n+   type Unsigned_11 is mod 2 ** 11;\n+   for Unsigned_11'Size use 11;\n+\n+   type Unsigned_12 is mod 2 ** 12;\n+   for Unsigned_12'Size use 12;\n+\n+   type Unsigned_13 is mod 2 ** 13;\n+   for Unsigned_13'Size use 13;\n+\n+   type Unsigned_14 is mod 2 ** 14;\n+   for Unsigned_14'Size use 14;\n+\n+   type Unsigned_15 is mod 2 ** 15;\n+   for Unsigned_15'Size use 15;\n+\n+   type Unsigned_16 is mod 2 ** 16;\n+   for Unsigned_16'Size use 16;\n+\n+   type Unsigned_17 is mod 2 ** 17;\n+   for Unsigned_17'Size use 17;\n+\n+   type Unsigned_18 is mod 2 ** 18;\n+   for Unsigned_18'Size use 18;\n+\n+   type Unsigned_19 is mod 2 ** 19;\n+   for Unsigned_19'Size use 19;\n+\n+   type Unsigned_20 is mod 2 ** 20;\n+   for Unsigned_20'Size use 20;\n+\n+   type Unsigned_21 is mod 2 ** 21;\n+   for Unsigned_21'Size use 21;\n+\n+   type Unsigned_22 is mod 2 ** 22;\n+   for Unsigned_22'Size use 22;\n+\n+   type Unsigned_23 is mod 2 ** 23;\n+   for Unsigned_23'Size use 23;\n+\n+   type Unsigned_24 is mod 2 ** 24;\n+   for Unsigned_24'Size use 24;\n+\n+   type Unsigned_25 is mod 2 ** 25;\n+   for Unsigned_25'Size use 25;\n+\n+   type Unsigned_26 is mod 2 ** 26;\n+   for Unsigned_26'Size use 26;\n+\n+   type Unsigned_27 is mod 2 ** 27;\n+   for Unsigned_27'Size use 27;\n+\n+   type Unsigned_28 is mod 2 ** 28;\n+   for Unsigned_28'Size use 28;\n+\n+   type Unsigned_29 is mod 2 ** 29;\n+   for Unsigned_29'Size use 29;\n+\n+   type Unsigned_30 is mod 2 ** 30;\n+   for Unsigned_30'Size use 30;\n+\n+   type Unsigned_31 is mod 2 ** 31;\n+   for Unsigned_31'Size use 31;\n+\n+   type Unsigned_32 is mod 2 ** 32;\n+   for Unsigned_32'Size use 32;\n+\n+   type Unsigned_33 is mod 2 ** 33;\n+   for Unsigned_33'Size use 33;\n+\n+   type Unsigned_34 is mod 2 ** 34;\n+   for Unsigned_34'Size use 34;\n+\n+   type Unsigned_35 is mod 2 ** 35;\n+   for Unsigned_35'Size use 35;\n+\n+   type Unsigned_36 is mod 2 ** 36;\n+   for Unsigned_36'Size use 36;\n+\n+   type Unsigned_37 is mod 2 ** 37;\n+   for Unsigned_37'Size use 37;\n+\n+   type Unsigned_38 is mod 2 ** 38;\n+   for Unsigned_38'Size use 38;\n+\n+   type Unsigned_39 is mod 2 ** 39;\n+   for Unsigned_39'Size use 39;\n+\n+   type Unsigned_40 is mod 2 ** 40;\n+   for Unsigned_40'Size use 40;\n+\n+   type Unsigned_41 is mod 2 ** 41;\n+   for Unsigned_41'Size use 41;\n+\n+   type Unsigned_42 is mod 2 ** 42;\n+   for Unsigned_42'Size use 42;\n+\n+   type Unsigned_43 is mod 2 ** 43;\n+   for Unsigned_43'Size use 43;\n+\n+   type Unsigned_44 is mod 2 ** 44;\n+   for Unsigned_44'Size use 44;\n+\n+   type Unsigned_45 is mod 2 ** 45;\n+   for Unsigned_45'Size use 45;\n+\n+   type Unsigned_46 is mod 2 ** 46;\n+   for Unsigned_46'Size use 46;\n+\n+   type Unsigned_47 is mod 2 ** 47;\n+   for Unsigned_47'Size use 47;\n+\n+   type Unsigned_48 is mod 2 ** 48;\n+   for Unsigned_48'Size use 48;\n+\n+   type Unsigned_49 is mod 2 ** 49;\n+   for Unsigned_49'Size use 49;\n+\n+   type Unsigned_50 is mod 2 ** 50;\n+   for Unsigned_50'Size use 50;\n+\n+   type Unsigned_51 is mod 2 ** 51;\n+   for Unsigned_51'Size use 51;\n+\n+   type Unsigned_52 is mod 2 ** 52;\n+   for Unsigned_52'Size use 52;\n+\n+   type Unsigned_53 is mod 2 ** 53;\n+   for Unsigned_53'Size use 53;\n+\n+   type Unsigned_54 is mod 2 ** 54;\n+   for Unsigned_54'Size use 54;\n+\n+   type Unsigned_55 is mod 2 ** 55;\n+   for Unsigned_55'Size use 55;\n+\n+   type Unsigned_56 is mod 2 ** 56;\n+   for Unsigned_56'Size use 56;\n+\n+   type Unsigned_57 is mod 2 ** 57;\n+   for Unsigned_57'Size use 57;\n+\n+   type Unsigned_58 is mod 2 ** 58;\n+   for Unsigned_58'Size use 58;\n+\n+   type Unsigned_59 is mod 2 ** 59;\n+   for Unsigned_59'Size use 59;\n+\n+   type Unsigned_60 is mod 2 ** 60;\n+   for Unsigned_60'Size use 60;\n+\n+   type Unsigned_61 is mod 2 ** 61;\n+   for Unsigned_61'Size use 61;\n+\n+   type Unsigned_62 is mod 2 ** 62;\n+   for Unsigned_62'Size use 62;\n+\n+   type Unsigned_63 is mod 2 ** 63;\n+   for Unsigned_63'Size use 63;\n+\n+   type Unsigned_64 is mod 2 ** 64;\n+   for Unsigned_64'Size use 64;\n+\n+   type Unsigned_65 is mod 2 ** 65;\n+   for Unsigned_65'Size use 65;\n+\n+   type Unsigned_66 is mod 2 ** 66;\n+   for Unsigned_66'Size use 66;\n+\n+   type Unsigned_67 is mod 2 ** 67;\n+   for Unsigned_67'Size use 67;\n+\n+   type Unsigned_68 is mod 2 ** 68;\n+   for Unsigned_68'Size use 68;\n+\n+   type Unsigned_69 is mod 2 ** 69;\n+   for Unsigned_69'Size use 69;\n+\n+   type Unsigned_70 is mod 2 ** 70;\n+   for Unsigned_70'Size use 70;\n+\n+   type Unsigned_71 is mod 2 ** 71;\n+   for Unsigned_71'Size use 71;\n+\n+   type Unsigned_72 is mod 2 ** 72;\n+   for Unsigned_72'Size use 72;\n+\n+   type Unsigned_73 is mod 2 ** 73;\n+   for Unsigned_73'Size use 73;\n+\n+   type Unsigned_74 is mod 2 ** 74;\n+   for Unsigned_74'Size use 74;\n+\n+   type Unsigned_75 is mod 2 ** 75;\n+   for Unsigned_75'Size use 75;\n+\n+   type Unsigned_76 is mod 2 ** 76;\n+   for Unsigned_76'Size use 76;\n+\n+   type Unsigned_77 is mod 2 ** 77;\n+   for Unsigned_77'Size use 77;\n+\n+   type Unsigned_78 is mod 2 ** 78;\n+   for Unsigned_78'Size use 78;\n+\n+   type Unsigned_79 is mod 2 ** 79;\n+   for Unsigned_79'Size use 79;\n+\n+   type Unsigned_80 is mod 2 ** 80;\n+   for Unsigned_80'Size use 80;\n+\n+   type Unsigned_81 is mod 2 ** 81;\n+   for Unsigned_81'Size use 81;\n+\n+   type Unsigned_82 is mod 2 ** 82;\n+   for Unsigned_82'Size use 82;\n+\n+   type Unsigned_83 is mod 2 ** 83;\n+   for Unsigned_83'Size use 83;\n+\n+   type Unsigned_84 is mod 2 ** 84;\n+   for Unsigned_84'Size use 84;\n+\n+   type Unsigned_85 is mod 2 ** 85;\n+   for Unsigned_85'Size use 85;\n+\n+   type Unsigned_86 is mod 2 ** 86;\n+   for Unsigned_86'Size use 86;\n+\n+   type Unsigned_87 is mod 2 ** 87;\n+   for Unsigned_87'Size use 87;\n+\n+   type Unsigned_88 is mod 2 ** 88;\n+   for Unsigned_88'Size use 88;\n+\n+   type Unsigned_89 is mod 2 ** 89;\n+   for Unsigned_89'Size use 89;\n+\n+   type Unsigned_90 is mod 2 ** 90;\n+   for Unsigned_90'Size use 90;\n+\n+   type Unsigned_91 is mod 2 ** 91;\n+   for Unsigned_91'Size use 91;\n+\n+   type Unsigned_92 is mod 2 ** 92;\n+   for Unsigned_92'Size use 92;\n+\n+   type Unsigned_93 is mod 2 ** 93;\n+   for Unsigned_93'Size use 93;\n+\n+   type Unsigned_94 is mod 2 ** 94;\n+   for Unsigned_94'Size use 94;\n+\n+   type Unsigned_95 is mod 2 ** 95;\n+   for Unsigned_95'Size use 95;\n+\n+   type Unsigned_96 is mod 2 ** 96;\n+   for Unsigned_96'Size use 96;\n+\n+   type Unsigned_97 is mod 2 ** 97;\n+   for Unsigned_97'Size use 97;\n+\n+   type Unsigned_98 is mod 2 ** 98;\n+   for Unsigned_98'Size use 98;\n+\n+   type Unsigned_99 is mod 2 ** 99;\n+   for Unsigned_99'Size use 99;\n+\n+   type Unsigned_100 is mod 2 ** 100;\n+   for Unsigned_100'Size use 100;\n+\n+   type Unsigned_101 is mod 2 ** 101;\n+   for Unsigned_101'Size use 101;\n+\n+   type Unsigned_102 is mod 2 ** 102;\n+   for Unsigned_102'Size use 102;\n+\n+   type Unsigned_103 is mod 2 ** 103;\n+   for Unsigned_103'Size use 103;\n+\n+   type Unsigned_104 is mod 2 ** 104;\n+   for Unsigned_104'Size use 104;\n+\n+   type Unsigned_105 is mod 2 ** 105;\n+   for Unsigned_105'Size use 105;\n+\n+   type Unsigned_106 is mod 2 ** 106;\n+   for Unsigned_106'Size use 106;\n+\n+   type Unsigned_107 is mod 2 ** 107;\n+   for Unsigned_107'Size use 107;\n+\n+   type Unsigned_108 is mod 2 ** 108;\n+   for Unsigned_108'Size use 108;\n+\n+   type Unsigned_109 is mod 2 ** 109;\n+   for Unsigned_109'Size use 109;\n+\n+   type Unsigned_110 is mod 2 ** 110;\n+   for Unsigned_110'Size use 110;\n+\n+   type Unsigned_111 is mod 2 ** 111;\n+   for Unsigned_111'Size use 111;\n+\n+   type Unsigned_112 is mod 2 ** 112;\n+   for Unsigned_112'Size use 112;\n+\n+   type Unsigned_113 is mod 2 ** 113;\n+   for Unsigned_113'Size use 113;\n+\n+   type Unsigned_114 is mod 2 ** 114;\n+   for Unsigned_114'Size use 114;\n+\n+   type Unsigned_115 is mod 2 ** 115;\n+   for Unsigned_115'Size use 115;\n+\n+   type Unsigned_116 is mod 2 ** 116;\n+   for Unsigned_116'Size use 116;\n+\n+   type Unsigned_117 is mod 2 ** 117;\n+   for Unsigned_117'Size use 117;\n+\n+   type Unsigned_118 is mod 2 ** 118;\n+   for Unsigned_118'Size use 118;\n+\n+   type Unsigned_119 is mod 2 ** 119;\n+   for Unsigned_119'Size use 119;\n+\n+   type Unsigned_120 is mod 2 ** 120;\n+   for Unsigned_120'Size use 120;\n+\n+   type Unsigned_121 is mod 2 ** 121;\n+   for Unsigned_121'Size use 121;\n+\n+   type Unsigned_122 is mod 2 ** 122;\n+   for Unsigned_122'Size use 122;\n+\n+   type Unsigned_123 is mod 2 ** 123;\n+   for Unsigned_123'Size use 123;\n+\n+   type Unsigned_124 is mod 2 ** 124;\n+   for Unsigned_124'Size use 124;\n+\n+   type Unsigned_125 is mod 2 ** 125;\n+   for Unsigned_125'Size use 125;\n+\n+   type Unsigned_126 is mod 2 ** 126;\n+   for Unsigned_126'Size use 126;\n+\n+   type Unsigned_127 is mod 2 ** 127;\n+   for Unsigned_127'Size use 127;\n+\n+   type Unsigned_128 is mod 2 ** 128;\n+   for Unsigned_128'Size use 128;\n+\n+   type Signed_2 is range -2 ** 1 .. 2 ** 1 - 1;\n+   for Signed_2'Size use 2;\n+\n+   type Signed_3 is range -2 ** 2 .. 2 ** 2 - 1;\n+   for Signed_3'Size use 3;\n+\n+   type Signed_4 is range -2 ** 3 .. 2 ** 3 - 1;\n+   for Signed_4'Size use 4;\n+\n+   type Signed_5 is range -2 ** 4 .. 2 ** 4 - 1;\n+   for Signed_5'Size use 5;\n+\n+   type Signed_6 is range -2 ** 5 .. 2 ** 5 - 1;\n+   for Signed_6'Size use 6;\n+\n+   type Signed_7 is range -2 ** 6 .. 2 ** 6 - 1;\n+   for Signed_7'Size use 7;\n+\n+   type Signed_8 is range -2 ** 7 .. 2 ** 7 - 1;\n+   for Signed_8'Size use 8;\n+\n+   type Signed_9 is range -2 ** 8 .. 2 ** 8 - 1;\n+   for Signed_9'Size use 9;\n+\n+   type Signed_10 is range -2 ** 9 .. 2 ** 9 - 1;\n+   for Signed_10'Size use 10;\n+\n+   type Signed_11 is range -2 ** 10 .. 2 ** 10 - 1;\n+   for Signed_11'Size use 11;\n+\n+   type Signed_12 is range -2 ** 11 .. 2 ** 11 - 1;\n+   for Signed_12'Size use 12;\n+\n+   type Signed_13 is range -2 ** 12 .. 2 ** 12 - 1;\n+   for Signed_13'Size use 13;\n+\n+   type Signed_14 is range -2 ** 13 .. 2 ** 13 - 1;\n+   for Signed_14'Size use 14;\n+\n+   type Signed_15 is range -2 ** 14 .. 2 ** 14 - 1;\n+   for Signed_15'Size use 15;\n+\n+   type Signed_16 is range -2 ** 15 .. 2 ** 15 - 1;\n+   for Signed_16'Size use 16;\n+\n+   type Signed_17 is range -2 ** 16 .. 2 ** 16 - 1;\n+   for Signed_17'Size use 17;\n+\n+   type Signed_18 is range -2 ** 17 .. 2 ** 17 - 1;\n+   for Signed_18'Size use 18;\n+\n+   type Signed_19 is range -2 ** 18 .. 2 ** 18 - 1;\n+   for Signed_19'Size use 19;\n+\n+   type Signed_20 is range -2 ** 19 .. 2 ** 19 - 1;\n+   for Signed_20'Size use 20;\n+\n+   type Signed_21 is range -2 ** 20 .. 2 ** 20 - 1;\n+   for Signed_21'Size use 21;\n+\n+   type Signed_22 is range -2 ** 21 .. 2 ** 21 - 1;\n+   for Signed_22'Size use 22;\n+\n+   type Signed_23 is range -2 ** 22 .. 2 ** 22 - 1;\n+   for Signed_23'Size use 23;\n+\n+   type Signed_24 is range -2 ** 23 .. 2 ** 23 - 1;\n+   for Signed_24'Size use 24;\n+\n+   type Signed_25 is range -2 ** 24 .. 2 ** 24 - 1;\n+   for Signed_25'Size use 25;\n+\n+   type Signed_26 is range -2 ** 25 .. 2 ** 25 - 1;\n+   for Signed_26'Size use 26;\n+\n+   type Signed_27 is range -2 ** 26 .. 2 ** 26 - 1;\n+   for Signed_27'Size use 27;\n+\n+   type Signed_28 is range -2 ** 27 .. 2 ** 27 - 1;\n+   for Signed_28'Size use 28;\n+\n+   type Signed_29 is range -2 ** 28 .. 2 ** 28 - 1;\n+   for Signed_29'Size use 29;\n+\n+   type Signed_30 is range -2 ** 29 .. 2 ** 29 - 1;\n+   for Signed_30'Size use 30;\n+\n+   type Signed_31 is range -2 ** 30 .. 2 ** 30 - 1;\n+   for Signed_31'Size use 31;\n+\n+   type Signed_32 is range -2 ** 31 .. 2 ** 31 - 1;\n+   for Signed_32'Size use 32;\n+\n+   type Signed_33 is range -2 ** 32 .. 2 ** 32 - 1;\n+   for Signed_33'Size use 33;\n+\n+   type Signed_34 is range -2 ** 33 .. 2 ** 33 - 1;\n+   for Signed_34'Size use 34;\n+\n+   type Signed_35 is range -2 ** 34 .. 2 ** 34 - 1;\n+   for Signed_35'Size use 35;\n+\n+   type Signed_36 is range -2 ** 35 .. 2 ** 35 - 1;\n+   for Signed_36'Size use 36;\n+\n+   type Signed_37 is range -2 ** 36 .. 2 ** 36 - 1;\n+   for Signed_37'Size use 37;\n+\n+   type Signed_38 is range -2 ** 37 .. 2 ** 37 - 1;\n+   for Signed_38'Size use 38;\n+\n+   type Signed_39 is range -2 ** 38 .. 2 ** 38 - 1;\n+   for Signed_39'Size use 39;\n+\n+   type Signed_40 is range -2 ** 39 .. 2 ** 39 - 1;\n+   for Signed_40'Size use 40;\n+\n+   type Signed_41 is range -2 ** 40 .. 2 ** 40 - 1;\n+   for Signed_41'Size use 41;\n+\n+   type Signed_42 is range -2 ** 41 .. 2 ** 41 - 1;\n+   for Signed_42'Size use 42;\n+\n+   type Signed_43 is range -2 ** 42 .. 2 ** 42 - 1;\n+   for Signed_43'Size use 43;\n+\n+   type Signed_44 is range -2 ** 43 .. 2 ** 43 - 1;\n+   for Signed_44'Size use 44;\n+\n+   type Signed_45 is range -2 ** 44 .. 2 ** 44 - 1;\n+   for Signed_45'Size use 45;\n+\n+   type Signed_46 is range -2 ** 45 .. 2 ** 45 - 1;\n+   for Signed_46'Size use 46;\n+\n+   type Signed_47 is range -2 ** 46 .. 2 ** 46 - 1;\n+   for Signed_47'Size use 47;\n+\n+   type Signed_48 is range -2 ** 47 .. 2 ** 47 - 1;\n+   for Signed_48'Size use 48;\n+\n+   type Signed_49 is range -2 ** 48 .. 2 ** 48 - 1;\n+   for Signed_49'Size use 49;\n+\n+   type Signed_50 is range -2 ** 49 .. 2 ** 49 - 1;\n+   for Signed_50'Size use 50;\n+\n+   type Signed_51 is range -2 ** 50 .. 2 ** 50 - 1;\n+   for Signed_51'Size use 51;\n+\n+   type Signed_52 is range -2 ** 51 .. 2 ** 51 - 1;\n+   for Signed_52'Size use 52;\n+\n+   type Signed_53 is range -2 ** 52 .. 2 ** 52 - 1;\n+   for Signed_53'Size use 53;\n+\n+   type Signed_54 is range -2 ** 53 .. 2 ** 53 - 1;\n+   for Signed_54'Size use 54;\n+\n+   type Signed_55 is range -2 ** 54 .. 2 ** 54 - 1;\n+   for Signed_55'Size use 55;\n+\n+   type Signed_56 is range -2 ** 55 .. 2 ** 55 - 1;\n+   for Signed_56'Size use 56;\n+\n+   type Signed_57 is range -2 ** 56 .. 2 ** 56 - 1;\n+   for Signed_57'Size use 57;\n+\n+   type Signed_58 is range -2 ** 57 .. 2 ** 57 - 1;\n+   for Signed_58'Size use 58;\n+\n+   type Signed_59 is range -2 ** 58 .. 2 ** 58 - 1;\n+   for Signed_59'Size use 59;\n+\n+   type Signed_60 is range -2 ** 59 .. 2 ** 59 - 1;\n+   for Signed_60'Size use 60;\n+\n+   type Signed_61 is range -2 ** 60 .. 2 ** 60 - 1;\n+   for Signed_61'Size use 61;\n+\n+   type Signed_62 is range -2 ** 61 .. 2 ** 61 - 1;\n+   for Signed_62'Size use 62;\n+\n+   type Signed_63 is range -2 ** 62 .. 2 ** 62 - 1;\n+   for Signed_63'Size use 63;\n+\n+   type Signed_64 is range -2 ** 63 .. 2 ** 63 - 1;\n+   for Signed_64'Size use 64;\n+\n+   type Signed_65 is range -2 ** 64 .. 2 ** 64 - 1;\n+   for Signed_65'Size use 65;\n+\n+   type Signed_66 is range -2 ** 65 .. 2 ** 65 - 1;\n+   for Signed_66'Size use 66;\n+\n+   type Signed_67 is range -2 ** 66 .. 2 ** 66 - 1;\n+   for Signed_67'Size use 67;\n+\n+   type Signed_68 is range -2 ** 67 .. 2 ** 67 - 1;\n+   for Signed_68'Size use 68;\n+\n+   type Signed_69 is range -2 ** 68 .. 2 ** 68 - 1;\n+   for Signed_69'Size use 69;\n+\n+   type Signed_70 is range -2 ** 69 .. 2 ** 69 - 1;\n+   for Signed_70'Size use 70;\n+\n+   type Signed_71 is range -2 ** 70 .. 2 ** 70 - 1;\n+   for Signed_71'Size use 71;\n+\n+   type Signed_72 is range -2 ** 71 .. 2 ** 71 - 1;\n+   for Signed_72'Size use 72;\n+\n+   type Signed_73 is range -2 ** 72 .. 2 ** 72 - 1;\n+   for Signed_73'Size use 73;\n+\n+   type Signed_74 is range -2 ** 73 .. 2 ** 73 - 1;\n+   for Signed_74'Size use 74;\n+\n+   type Signed_75 is range -2 ** 74 .. 2 ** 74 - 1;\n+   for Signed_75'Size use 75;\n+\n+   type Signed_76 is range -2 ** 75 .. 2 ** 75 - 1;\n+   for Signed_76'Size use 76;\n+\n+   type Signed_77 is range -2 ** 76 .. 2 ** 76 - 1;\n+   for Signed_77'Size use 77;\n+\n+   type Signed_78 is range -2 ** 77 .. 2 ** 77 - 1;\n+   for Signed_78'Size use 78;\n+\n+   type Signed_79 is range -2 ** 78 .. 2 ** 78 - 1;\n+   for Signed_79'Size use 79;\n+\n+   type Signed_80 is range -2 ** 79 .. 2 ** 79 - 1;\n+   for Signed_80'Size use 80;\n+\n+   type Signed_81 is range -2 ** 80 .. 2 ** 80 - 1;\n+   for Signed_81'Size use 81;\n+\n+   type Signed_82 is range -2 ** 81 .. 2 ** 81 - 1;\n+   for Signed_82'Size use 82;\n+\n+   type Signed_83 is range -2 ** 82 .. 2 ** 82 - 1;\n+   for Signed_83'Size use 83;\n+\n+   type Signed_84 is range -2 ** 83 .. 2 ** 83 - 1;\n+   for Signed_84'Size use 84;\n+\n+   type Signed_85 is range -2 ** 84 .. 2 ** 84 - 1;\n+   for Signed_85'Size use 85;\n+\n+   type Signed_86 is range -2 ** 85 .. 2 ** 85 - 1;\n+   for Signed_86'Size use 86;\n+\n+   type Signed_87 is range -2 ** 86 .. 2 ** 86 - 1;\n+   for Signed_87'Size use 87;\n+\n+   type Signed_88 is range -2 ** 87 .. 2 ** 87 - 1;\n+   for Signed_88'Size use 88;\n+\n+   type Signed_89 is range -2 ** 88 .. 2 ** 88 - 1;\n+   for Signed_89'Size use 89;\n+\n+   type Signed_90 is range -2 ** 89 .. 2 ** 89 - 1;\n+   for Signed_90'Size use 90;\n+\n+   type Signed_91 is range -2 ** 90 .. 2 ** 90 - 1;\n+   for Signed_91'Size use 91;\n+\n+   type Signed_92 is range -2 ** 91 .. 2 ** 91 - 1;\n+   for Signed_92'Size use 92;\n+\n+   type Signed_93 is range -2 ** 92 .. 2 ** 92 - 1;\n+   for Signed_93'Size use 93;\n+\n+   type Signed_94 is range -2 ** 93 .. 2 ** 93 - 1;\n+   for Signed_94'Size use 94;\n+\n+   type Signed_95 is range -2 ** 94 .. 2 ** 94 - 1;\n+   for Signed_95'Size use 95;\n+\n+   type Signed_96 is range -2 ** 95 .. 2 ** 95 - 1;\n+   for Signed_96'Size use 96;\n+\n+   type Signed_97 is range -2 ** 96 .. 2 ** 96 - 1;\n+   for Signed_97'Size use 97;\n+\n+   type Signed_98 is range -2 ** 97 .. 2 ** 97 - 1;\n+   for Signed_98'Size use 98;\n+\n+   type Signed_99 is range -2 ** 98 .. 2 ** 98 - 1;\n+   for Signed_99'Size use 99;\n+\n+   type Signed_100 is range -2 ** 99 .. 2 ** 99 - 1;\n+   for Signed_100'Size use 100;\n+\n+   type Signed_101 is range -2 ** 100 .. 2 ** 100 - 1;\n+   for Signed_101'Size use 101;\n+\n+   type Signed_102 is range -2 ** 101 .. 2 ** 101 - 1;\n+   for Signed_102'Size use 102;\n+\n+   type Signed_103 is range -2 ** 102 .. 2 ** 102 - 1;\n+   for Signed_103'Size use 103;\n+\n+   type Signed_104 is range -2 ** 103 .. 2 ** 103 - 1;\n+   for Signed_104'Size use 104;\n+\n+   type Signed_105 is range -2 ** 104 .. 2 ** 104 - 1;\n+   for Signed_105'Size use 105;\n+\n+   type Signed_106 is range -2 ** 105 .. 2 ** 105 - 1;\n+   for Signed_106'Size use 106;\n+\n+   type Signed_107 is range -2 ** 106 .. 2 ** 106 - 1;\n+   for Signed_107'Size use 107;\n+\n+   type Signed_108 is range -2 ** 107 .. 2 ** 107 - 1;\n+   for Signed_108'Size use 108;\n+\n+   type Signed_109 is range -2 ** 108 .. 2 ** 108 - 1;\n+   for Signed_109'Size use 109;\n+\n+   type Signed_110 is range -2 ** 109 .. 2 ** 109 - 1;\n+   for Signed_110'Size use 110;\n+\n+   type Signed_111 is range -2 ** 110 .. 2 ** 110 - 1;\n+   for Signed_111'Size use 111;\n+\n+   type Signed_112 is range -2 ** 111 .. 2 ** 111 - 1;\n+   for Signed_112'Size use 112;\n+\n+   type Signed_113 is range -2 ** 112 .. 2 ** 112 - 1;\n+   for Signed_113'Size use 113;\n+\n+   type Signed_114 is range -2 ** 113 .. 2 ** 113 - 1;\n+   for Signed_114'Size use 114;\n+\n+   type Signed_115 is range -2 ** 114 .. 2 ** 114 - 1;\n+   for Signed_115'Size use 115;\n+\n+   type Signed_116 is range -2 ** 115 .. 2 ** 115 - 1;\n+   for Signed_116'Size use 116;\n+\n+   type Signed_117 is range -2 ** 116 .. 2 ** 116 - 1;\n+   for Signed_117'Size use 117;\n+\n+   type Signed_118 is range -2 ** 117 .. 2 ** 117 - 1;\n+   for Signed_118'Size use 118;\n+\n+   type Signed_119 is range -2 ** 118 .. 2 ** 118 - 1;\n+   for Signed_119'Size use 119;\n+\n+   type Signed_120 is range -2 ** 119 .. 2 ** 119 - 1;\n+   for Signed_120'Size use 120;\n+\n+   type Signed_121 is range -2 ** 120 .. 2 ** 120 - 1;\n+   for Signed_121'Size use 121;\n+\n+   type Signed_122 is range -2 ** 121 .. 2 ** 121 - 1;\n+   for Signed_122'Size use 122;\n+\n+   type Signed_123 is range -2 ** 122 .. 2 ** 122 - 1;\n+   for Signed_123'Size use 123;\n+\n+   type Signed_124 is range -2 ** 123 .. 2 ** 123 - 1;\n+   for Signed_124'Size use 124;\n+\n+   type Signed_125 is range -2 ** 124 .. 2 ** 124 - 1;\n+   for Signed_125'Size use 125;\n+\n+   type Signed_126 is range -2 ** 125 .. 2 ** 125 - 1;\n+   for Signed_126'Size use 126;\n+\n+   type Signed_127 is range -2 ** 126 .. 2 ** 126 - 1;\n+   for Signed_127'Size use 127;\n+\n+   type Signed_128 is range -2 ** 127 .. 2 ** 127 - 1;\n+   for Signed_128'Size use 128;\n+\n+end Interfaces.C.Extensions;"}, {"sha": "e086a5d9d2bca703b47646b918ac0deffecc5975", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -844,28 +844,6 @@ package body Switch.C is\n                      Disable_Switch_Storing;\n                      Ptr := Ptr + 1;\n \n-                  --  -gnate128 (Enable 128-bit types)\n-\n-                  when '1' =>\n-                     if Ptr = Max then\n-                        Bad_Switch (\"-gnate1\");\n-                     end if;\n-\n-                     Ptr := Ptr + 1;\n-\n-                     if Switch_Chars (Ptr) /= '2' then\n-                        Bad_Switch (\"-gnate1\" & Switch_Chars (Ptr .. Max));\n-                     end if;\n-\n-                     Ptr := Ptr + 1;\n-\n-                     if Switch_Chars (Ptr) /= '8' then\n-                        Bad_Switch (\"-gnate12\" & Switch_Chars (Ptr .. Max));\n-                     end if;\n-\n-                     Enable_128bit_Types := True;\n-                     Ptr := Ptr + 1;\n-\n                   --  All other -gnate? switches are unassigned\n \n                   when others =>"}, {"sha": "f9864842d527cbe8cea0ee60d8e1577db2906e49", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -270,11 +270,6 @@ begin\n \n    --  No line for -gnatez : internal switch\n \n-   --  Line for -gnate128 switch\n-\n-   Write_Switch_Char (\"e128\");\n-   Write_Line (\"Enable support for 128-bit types\");\n-\n    --  Line for -gnatE switch\n \n    Write_Switch_Char (\"E\");"}, {"sha": "ac2a86bea6ccd60b6b9306c4bd73e68847967039", "filename": "gcc/testsuite/ada/acats/run_all.sh", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Frun_all.sh?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -133,6 +133,23 @@ target_run $dir/support/impbit > $dir/support/impbit.out 2>&1\n target_bit=`cat $dir/support/impbit.out`\n echo target_bit=\"$target_bit\" >> $dir/acats.log\n \n+case \"$target_bit\" in\n+  *32*)\n+    target_max_int=\"9223372036854775807\"\n+    target_min_int=\"-9223372036854775808\"\n+    ;;\n+  *64*)\n+    target_max_int=\"170141183460469231731687303715884105727\"\n+    target_min_int=\"-170141183460469231731687303715884105728\"\n+    ;;\n+  *)\n+    display \"**** Unsupported bits per word\"\n+    exit 1\n+esac\n+\n+echo target_max_insn=\"$target_max_int\" >> $dir/acats.log\n+echo target_min_insn=\"$target_min_int\" >> $dir/acats.log\n+\n # Find out a suitable asm statement\n # Adapted from configure.ac gcc_cv_as_dwarf2_debug_line\n case \"$target\" in\n@@ -153,6 +170,8 @@ sed -e \"s,ACATS4GNATDIR,$dir,g\" \\\n sed -e \"s,ACATS4GNATDIR,$dir,g\" \\\n   -e \"s,ACATS4GNATBIT,$target_bit,g\" \\\n   -e \"s,ACATS4GNATINSN,$target_insn,g\" \\\n+  -e \"s,ACATS4GNATMAXINT,$target_max_int,g\" \\\n+  -e \"s,ACATS4GNATMININT,$target_min_int,g\" \\\n   < $testdir/support/macro.dfs > $dir/support/MACRO.DFS\n sed -e \"s,ACATS4GNATDIR,$dir,g\" \\\n   < $testdir/support/tsttests.dat > $dir/support/TSTTESTS.DAT"}, {"sha": "e3c55596f259a89cb803074a8b92c79335235534", "filename": "gcc/testsuite/ada/acats/support/macro.dfs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fada%2Facats%2Fsupport%2Fmacro.dfs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fada%2Facats%2Fsupport%2Fmacro.dfs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Fsupport%2Fmacro.dfs?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -227,15 +227,15 @@ MACHINE_CODE_STATEMENT     Asm_Insn'(Asm (\"ACATS4GNATINSN\"));\n -- THE LITERAL MUST NOT INCLUDE UNDERSCORES OR LEADING OR TRAILING\n -- BLANKS.                                                      \n -- USED IN:  C35503D  C35503F  C4A007A \n-MAX_INT                  9223372036854775807                   \n+MAX_INT                  ACATS4GNATMAXINT\n \n \t\t\t\t\t\n -- $MIN_INT                                     \n -- AN INTEGER LITERAL, WITH SIGN, WHOSE VALUE IS SYSTEM.MIN_INT.\n -- THE LITERAL MUST NOT CONTAIN UNDERSCORES OR LEADING OR TRAILING\n -- BLANKS.                                                    \n -- USED IN:  C35503D  C35503F  \n-MIN_INT                  -9223372036854775808                \n+MIN_INT                  ACATS4GNATMININT\n \t\t\t\t\t\t\n -- $NAME                                               \n -- THE NAME OF A PREDEFINED INTEGER TYPE OTHER THAN INTEGER,"}, {"sha": "7a40d3c23d0fdedf992a269060a74bfa7954c335", "filename": "gcc/testsuite/gnat.dg/assert1.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fassert1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fassert1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassert1.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -2,8 +2,9 @@\n --  { dg-options \"-gnatws\" }\n \n pragma Assertion_Policy (Check);\n-with Text_IO; use Text_IO;\n+\n procedure assert1 is\n+   Int128 : constant Boolean := Standard'Max_Integer_Size = 128;\n    type p1 is array (1 .. 113) of Boolean;\n    pragma Pack (p1);\n    type p2 is array (1 .. 13) of Boolean;\n@@ -19,21 +20,21 @@ procedure assert1 is\n    v3 : p3;\n    v4 : p4;\n begin\n-   pragma Assert (p1'Size = 120);\n+   pragma Assert (p1'Size = (if Int128 then 113 else 120));\n    pragma Assert (p2'Size = 13);\n    pragma Assert (p3'Size = 113);\n    pragma Assert (p4'Size = 13);\n-   pragma Assert (p1'Value_Size = 120);\n+   pragma Assert (p1'Value_Size = (if Int128 then 113 else 120));\n    pragma Assert (p2'Value_Size = 13);\n    pragma Assert (p3'Value_Size = 113);\n    pragma Assert (p4'Value_Size = 13);\n-   pragma Assert (p1'Object_Size = 120);\n+   pragma Assert (p1'Object_Size = (if Int128 then 128 else 120));\n    pragma Assert (p2'Object_Size = 16);\n-   pragma Assert (p3'Object_Size = 120);\n+   pragma Assert (p3'Object_Size = (if Int128 then 128 else 120));\n    pragma Assert (p4'Object_Size = 16);\n-   pragma Assert (v1'Size = 120);\n+   pragma Assert (v1'Size = (if Int128 then 128 else 120));\n    pragma Assert (v2'Size = 16);\n-   pragma Assert (v3'Size = 120);\n+   pragma Assert (v3'Size = (if Int128 then 128 else 120));\n    pragma Assert (v4'Size = 16);\n    null;\n end;"}, {"sha": "0a313bf64616d9cb6b7c9c5c5bdd36f201be86f7", "filename": "gcc/testsuite/gnat.dg/size_clause1.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fsize_clause1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fsize_clause1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsize_clause1.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -4,7 +4,7 @@ procedure Size_Clause1 is\n   for Modular'Size use 64;\n \n   subtype Enlarged_Modular is Modular;\n-  for Enlarged_Modular'Object_Size use 128; --  { dg-warning \"warning: 64 bits of \\\"Enlarged_Modular\\\" unused\" }\n+  for Enlarged_Modular'Object_Size use 128; --  { dg-warning \"64 bits of \\\"Enlarged_Modular\\\" unused\" \"\" { target { ! lp64 } } }\n \n begin\n     null;"}, {"sha": "3e1ff4d62e6ea999f1c78cff4f7377cbe60e408f", "filename": "gcc/testsuite/gnat.dg/specs/rep_clause5.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -33,6 +33,7 @@ package Rep_Clause5 is\n \n    type Array_2_Type is array (0 .. 127) of Boolean;\n    for  Array_2_Type'size use 128;\n+   for Array_2_Type'Alignment use 4;\n \n    type Array_3_Type is array (0 .. 31) of Boolean;\n    for  Array_3_Type'size use 32;"}, {"sha": "7e6f1a19e95d9c10747ba6533643b6cfc9b7a20a", "filename": "gcc/testsuite/gnat.dg/warn11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb7345cd54e90b4f5cc0234bd37ec2763602180/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn11.adb?ref=dfb7345cd54e90b4f5cc0234bd37ec2763602180", "patch": "@@ -5,7 +5,7 @@ with Ada.Text_IO; use Ada.Text_IO;\n procedure Warn11 is\n \n    type My_Integer is new Integer range 1 .. 10;\n-   for My_Integer'Size use 65;  -- { dg-warning \"unused\" }\n+   for My_Integer'Size use 65;  -- { dg-warning \"unused\" \"\" { target { ! lp64 } } }\n \n    type My_Integer2 is new Integer range 1 .. 10;\n    for My_Integer2'Size use 129;  -- { dg-warning \"unused\" }"}]}