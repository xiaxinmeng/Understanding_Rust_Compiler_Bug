{"sha": "ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1NWY1OGM5YzZhNmQwZTE3OGZjOWQ5YThhZWQ3YTEzODI1ZTkyNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-07T01:15:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-07T01:15:59Z"}, "message": "genemit.c (gen_exp): New argument used.\n\n        * genemit.c (gen_exp): New argument used.  Invoke copy_rtx\n        if used indicates we've already emitted one copy of an operand.\n        (gen_insn, gen_expand, output_add_clobbers): Supply a null used.\n        (gen_split): Supply a non-null used.\n\nFrom-SVN: r50386", "tree": {"sha": "6378514e60224e4c8ed92ff9b909f1c34c42b111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6378514e60224e4c8ed92ff9b909f1c34c42b111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924/comments", "author": null, "committer": null, "parents": [{"sha": "957978a41420f708afab4ffe749e6399031cb031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957978a41420f708afab4ffe749e6399031cb031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957978a41420f708afab4ffe749e6399031cb031"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "b829d40ff2fdfaa937778a6703401cef8d6901aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "patch": "@@ -1,3 +1,10 @@\n+2002-03-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* genemit.c (gen_exp): New argument used.  Invoke copy_rtx\n+\tif used indicates we've already emitted one copy of an operand.\n+\t(gen_insn, gen_expand, output_add_clobbers): Supply a null used.\n+\t(gen_split): Supply a non-null used.\n+\n 2002-03-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n         * reload1.c (reload): Unshare all rtl after reload is done."}, {"sha": "2d11d2be77cf9d05678b8dfabf058d74ad5c1fd2", "filename": "gcc/genemit.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=ab55f58c9c6a6d0e178fc9d9a8aed7a13825e924", "patch": "@@ -58,7 +58,7 @@ struct clobber_ent\n static void max_operand_1\t\tPARAMS ((rtx));\n static int max_operand_vec\t\tPARAMS ((rtx, int));\n static void print_code\t\t\tPARAMS ((RTX_CODE));\n-static void gen_exp\t\t\tPARAMS ((rtx, enum rtx_code));\n+static void gen_exp\t\t\tPARAMS ((rtx, enum rtx_code, char *));\n static void gen_insn\t\t\tPARAMS ((rtx));\n static void gen_expand\t\t\tPARAMS ((rtx));\n static void gen_split\t\t\tPARAMS ((rtx));\n@@ -155,9 +155,10 @@ gen_rtx_scratch (x, subroutine_type)\n    substituting any operand references appearing within.  */\n \n static void\n-gen_exp (x, subroutine_type)\n+gen_exp (x, subroutine_type, used)\n      rtx x;\n      enum rtx_code subroutine_type;\n+     char *used;\n {\n   RTX_CODE code;\n   int i;\n@@ -176,6 +177,15 @@ gen_exp (x, subroutine_type)\n     {\n     case MATCH_OPERAND:\n     case MATCH_DUP:\n+      if (used)\n+\t{\n+\t  if (used[XINT (x, 0)])\n+\t    {\n+\t      printf (\"copy_rtx (operand%d)\", XINT (x, 0));\n+\t      return;\n+\t    }\n+\t  used[XINT (x, 0)] = 1;\n+\t}\n       printf (\"operand%d\", XINT (x, 0));\n       return;\n \n@@ -188,7 +198,7 @@ gen_exp (x, subroutine_type)\n       for (i = 0; i < XVECLEN (x, 1); i++)\n \t{\n \t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (x, 1, i), subroutine_type);\n+\t  gen_exp (XVECEXP (x, 1, i), subroutine_type, used);\n \t}\n       printf (\")\");\n       return;\n@@ -199,7 +209,7 @@ gen_exp (x, subroutine_type)\n       for (i = 0; i < XVECLEN (x, 2); i++)\n \t{\n \t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (x, 2, i), subroutine_type);\n+\t  gen_exp (XVECEXP (x, 2, i), subroutine_type, used);\n \t}\n       printf (\")\");\n       return;\n@@ -262,7 +272,7 @@ gen_exp (x, subroutine_type)\n \tbreak;\n       printf (\",\\n\\t\");\n       if (fmt[i] == 'e' || fmt[i] == 'u')\n-\tgen_exp (XEXP (x, i), subroutine_type);\n+\tgen_exp (XEXP (x, i), subroutine_type, used);\n       else if (fmt[i] == 'i')\n \tprintf (\"%u\", XINT (x, i));\n       else if (fmt[i] == 's')\n@@ -274,7 +284,7 @@ gen_exp (x, subroutine_type)\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n \t    {\n \t      printf (\",\\n\\t\\t\");\n-\t      gen_exp (XVECEXP (x, i, j), subroutine_type);\n+\t      gen_exp (XVECEXP (x, i, j), subroutine_type, used);\n \t    }\n \t  printf (\")\");\n \t}\n@@ -397,7 +407,7 @@ gen_insn (insn)\n   if (XVECLEN (insn, 1) == 1)\n     {\n       printf (\"  return \");\n-      gen_exp (XVECEXP (insn, 1, 0), DEFINE_INSN);\n+      gen_exp (XVECEXP (insn, 1, 0), DEFINE_INSN, NULL);\n       printf (\";\\n}\\n\\n\");\n     }\n   else\n@@ -408,7 +418,7 @@ gen_insn (insn)\n       for (i = 0; i < XVECLEN (insn, 1); i++)\n \t{\n \t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (insn, 1, i), DEFINE_INSN);\n+\t  gen_exp (XVECEXP (insn, 1, i), DEFINE_INSN, NULL);\n \t}\n       printf (\"));\\n}\\n\\n\");\n     }\n@@ -454,7 +464,7 @@ gen_expand (expand)\n       && XVECLEN (expand, 1) == 1)\n     {\n       printf (\"  return \");\n-      gen_exp (XVECEXP (expand, 1, 0), DEFINE_EXPAND);\n+      gen_exp (XVECEXP (expand, 1, 0), DEFINE_EXPAND, NULL);\n       printf (\";\\n}\\n\\n\");\n       return;\n     }\n@@ -535,7 +545,7 @@ gen_expand (expand)\n \tprintf (\"  emit (\");\n       else\n \tprintf (\"  emit_insn (\");\n-      gen_exp (next, DEFINE_EXPAND);\n+      gen_exp (next, DEFINE_EXPAND, NULL);\n       printf (\");\\n\");\n       if (GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC\n \t  && GET_CODE (SET_SRC (next)) == LABEL_REF)\n@@ -561,6 +571,7 @@ gen_split (split)\n   const char *const name =\n     ((GET_CODE (split) == DEFINE_PEEPHOLE2) ? \"peephole2\" : \"split\");\n   const char *unused;\n+  char *used;\n \n   if (XVEC (split, 0) == 0)\n     fatal (\"define_%s (definition %d) lacks a pattern\", name,\n@@ -574,6 +585,7 @@ gen_split (split)\n   max_operand_vec (split, 2);\n   operands = MAX (max_opno, MAX (max_dup_opno, max_scratch_opno)) + 1;\n   unused = (operands == 0 ? \" ATTRIBUTE_UNUSED\" : \"\");\n+  used = xcalloc (1, operands);\n \n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n@@ -645,7 +657,7 @@ gen_split (split)\n \tprintf (\"  emit (\");\n       else\n \tprintf (\"  emit_insn (\");\n-      gen_exp (next, GET_CODE (split));\n+      gen_exp (next, GET_CODE (split), used);\n       printf (\");\\n\");\n       if (GET_CODE (next) == SET && GET_CODE (SET_DEST (next)) == PC\n \t  && GET_CODE (SET_SRC (next)) == LABEL_REF)\n@@ -658,6 +670,8 @@ gen_split (split)\n   printf (\"  _val = gen_sequence ();\\n\");\n   printf (\"  end_sequence ();\\n\");\n   printf (\"  return _val;\\n}\\n\\n\");\n+\n+  free (used);\n }\n \f\n /* Write a function, `add_clobbers', that is given a PARALLEL of sufficient\n@@ -686,7 +700,7 @@ output_add_clobbers ()\n \t{\n \t  printf (\"      XVECEXP (pattern, 0, %d) = \", i);\n \t  gen_exp (XVECEXP (clobber->pattern, 1, i),\n-\t\t   GET_CODE (clobber->pattern));\n+\t\t   GET_CODE (clobber->pattern), NULL);\n \t  printf (\";\\n\");\n \t}\n "}]}