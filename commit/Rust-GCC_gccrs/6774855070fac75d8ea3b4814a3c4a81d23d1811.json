{"sha": "6774855070fac75d8ea3b4814a3c4a81d23d1811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3NDg1NTA3MGZhYzc1ZDhlYTNiNDgxNGEzYzRhODFkMjNkMTgxMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-20T20:51:06Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-20T20:51:06Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/sh.md (*cset_zero): New insns.\n\n\tPR target/51244\n\t* gcc.target/sh/pr51244-11.c: New.\n\nFrom-SVN: r190544", "tree": {"sha": "4879a296c96d25f2660fd95008211de4bd89b447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4879a296c96d25f2660fd95008211de4bd89b447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6774855070fac75d8ea3b4814a3c4a81d23d1811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6774855070fac75d8ea3b4814a3c4a81d23d1811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6774855070fac75d8ea3b4814a3c4a81d23d1811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6774855070fac75d8ea3b4814a3c4a81d23d1811/comments", "author": null, "committer": null, "parents": [{"sha": "413de8e5c791fbeddf93b89394947783a15bf60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413de8e5c791fbeddf93b89394947783a15bf60b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413de8e5c791fbeddf93b89394947783a15bf60b"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "03a2afe15d648382bcbccda2ffed82ca2b58b5a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6774855070fac75d8ea3b4814a3c4a81d23d1811", "patch": "@@ -1,3 +1,8 @@\n+2012-08-20  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (*cset_zero): New insns.\n+\n 2012-08-20  Mark Wielaard  <mjw@redhat.com>\n \n \t* dwarf2out.h (enum dw_val_class): Add dw_val_class_high_pc."}, {"sha": "9a58f8acd1feb569ff28a381d68a75096294b2fa", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=6774855070fac75d8ea3b4814a3c4a81d23d1811", "patch": "@@ -10409,6 +10409,41 @@ label:\n   operands[0] = gen_reg_rtx (SImode);\n })\n \n+;; The *cset_zero patterns convert optimizations such as\n+;;\t\"if (test) x = 0;\" to \"x &= -(test == 0);\"\n+;; back to conditional branch sequences if zero-displacement branches\n+;; are enabled.\n+;; FIXME: These patterns can be removed when conditional execution patterns\n+;; are implemented, since ifcvt will not perform these optimizations if\n+;; conditional execution is supported.\n+(define_insn \"*cset_zero\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(and:SI (plus:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t\t\t (const_int -1))\n+\t\t(match_operand:SI 2 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH1 && TARGET_ZDCBRANCH\"\n+{\n+  return       \"bf\t0f\"\t\"\\n\"\n+\t \"\tmov\t#0,%0\"\t\"\\n\"\n+\t \"0:\";\n+}\n+  [(set_attr \"type\" \"arith\") ;; poor approximation\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*cset_zero\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(if_then_else:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t\t\t (match_operand:SI 2 \"arith_reg_operand\" \"0\")\n+\t\t\t (const_int 0)))]\n+  \"TARGET_SH1 && TARGET_ZDCBRANCH\"\n+{\n+  return       \"bt\t0f\"\t\"\\n\"\n+\t \"\tmov\t#0,%0\"\t\"\\n\"\n+\t \"0:\";\n+}\n+  [(set_attr \"type\" \"arith\") ;; poor approximation\n+   (set_attr \"length\" \"4\")])\n+\n (define_expand \"cstoresf4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"sh_float_comparison_operator\""}, {"sha": "ecff56c25e3a4a2bff4af1bf68106c28a1eed04f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6774855070fac75d8ea3b4814a3c4a81d23d1811", "patch": "@@ -1,3 +1,8 @@\n+2012-08-20  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* gcc.target/sh/pr51244-11.c: New.\n+\n 2012-08-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54301"}, {"sha": "4a9c93c932c5a72c8d926275a44482cd08884b0e", "filename": "gcc/testsuite/gcc.target/sh/pr51244-11.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6774855070fac75d8ea3b4814a3c4a81d23d1811/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-11.c?ref=6774855070fac75d8ea3b4814a3c4a81d23d1811", "patch": "@@ -0,0 +1,24 @@\n+/* Check that zero-displacement branches are used instead of branch-free\n+   execution patterns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mzdcbranch\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n+/* { dg-final { scan-assembler-not \"subc|and\" } } */\n+\n+int*\n+test_00 (int* s)\n+{\n+  if (s[0] == 0)\n+    if (!s[3])\n+      s = 0;\n+  return s;\n+}\n+\n+int*\n+test_01 (int* s)\n+{\n+  if (s[0] == 0)\n+    if (s[3])\n+      s = 0;\n+  return s;\n+}"}]}