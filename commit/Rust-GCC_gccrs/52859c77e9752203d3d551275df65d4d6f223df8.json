{"sha": "52859c77e9752203d3d551275df65d4d6f223df8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4NTljNzdlOTc1MjIwM2QzZDU1MTI3NWRmNjVkNGQ2ZjIyM2RmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-11T21:15:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-11T21:15:36Z"}, "message": "rtl.def (SYMBOL_REF): Add two 0 fields.\n\n        * rtl.def (SYMBOL_REF): Add two 0 fields.\n        * gengtype.c (adjust_field_rtx_def): Handle them.\n        * print-rtl.c (print_rtx): Print them.\n        * rtl.h (SYMBOL_REF_DECL, SYMBOL_REF_FLAGS): New.\n        (SYMBOL_FLAG_FUNCTION, SYMBOL_REF_FUNCTION_P): New.\n        (SYMBOL_FLAG_LOCAL, SYMBOL_REF_LOCAL_P): New.\n        (SYMBOL_FLAG_SMALL, SYMBOL_REF_SMALL_P): New.\n        (SYMBOL_FLAG_TLS_SHIFT, SYMBOL_REF_TLS_MODEL): New.\n        (SYMBOL_FLAG_EXTERNAL, SYMBOL_REF_EXTERNAL_P): New.\n        (SYMBOL_FLAG_MACH_DEP): New.\n        * optabs.c (init_one_libfunc): Zap fake SYMBOL_REF_DECL.\n        * varasm.c (make_decl_rtl): Set SYMBOL_REF_DECL.\n        (assemble_static_space): Set SYMBOL_REF_FLAGS.\n        (assemble_trampoline_template): Likewise.\n        (output_constant_def, force_const_mem): Likewise.\n        (default_encode_section_info): New.\n        * output.h: Declare it.\n        * target-def.h (TARGET_ENCODE_SECTION_INFO): Use it.\n\nFrom-SVN: r65479", "tree": {"sha": "f675f00c76e2ef9d9b6ec56014ab50bc39c69884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f675f00c76e2ef9d9b6ec56014ab50bc39c69884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52859c77e9752203d3d551275df65d4d6f223df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52859c77e9752203d3d551275df65d4d6f223df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52859c77e9752203d3d551275df65d4d6f223df8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52859c77e9752203d3d551275df65d4d6f223df8/comments", "author": null, "committer": null, "parents": [{"sha": "68d28100a03d7a4bb0f5763f6478c2c84bf4e2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d28100a03d7a4bb0f5763f6478c2c84bf4e2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d28100a03d7a4bb0f5763f6478c2c84bf4e2ab"}], "stats": {"total": 177, "additions": 155, "deletions": 22}, "files": [{"sha": "7baa961fe29080ef164a1b32d9a8caf6369be112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -1,3 +1,24 @@\n+2003-04-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* rtl.def (SYMBOL_REF): Add two 0 fields.\n+\t* gengtype.c (adjust_field_rtx_def): Handle them.\n+\t* print-rtl.c (print_rtx): Print them.\n+\t* rtl.h (SYMBOL_REF_DECL, SYMBOL_REF_FLAGS): New.\n+\t(SYMBOL_FLAG_FUNCTION, SYMBOL_REF_FUNCTION_P): New.\n+\t(SYMBOL_FLAG_LOCAL, SYMBOL_REF_LOCAL_P): New.\n+\t(SYMBOL_FLAG_SMALL, SYMBOL_REF_SMALL_P): New.\n+\t(SYMBOL_FLAG_TLS_SHIFT, SYMBOL_REF_TLS_MODEL): New.\n+\t(SYMBOL_FLAG_EXTERNAL, SYMBOL_REF_EXTERNAL_P): New.\n+\t(SYMBOL_FLAG_MACH_DEP): New.\n+\t* optabs.c (init_one_libfunc): Zap fake SYMBOL_REF_DECL.\n+\t* varasm.c (make_decl_rtl): Set SYMBOL_REF_DECL.\n+\t(assemble_static_space): Set SYMBOL_REF_FLAGS.\n+\t(assemble_trampoline_template): Likewise.\n+\t(output_constant_def, force_const_mem): Likewise.\n+\t(default_encode_section_info): New.\n+\t* output.h: Declare it.\n+\t* target-def.h (TARGET_ENCODE_SECTION_INFO): Use it.\n+\n 2003-04-11  Richard Henderson  <rth@redhat.com>\n \n \t* libfuncs.h (LTI_setbits, LTI_gcov_flush, LTI_gcov_init): New."}, {"sha": "4a3c29853eb7e0354ee35b6999cdfc35f32778f3", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -544,6 +544,10 @@ adjust_field_rtx_def (t, opt)\n \t\tt = reg_attrs_tp, subname = \"rtreg\";\n \t      else if (i == SCRATCH && aindex == 0)\n \t\tt = scalar_tp, subname = \"rtint\";\n+\t      else if (i == SYMBOL_REF && aindex == 1)\n+\t\tt = scalar_tp, subname = \"rtint\";\n+\t      else if (i == SYMBOL_REF && aindex == 2)\n+\t\tt = tree_tp, subname = \"rttree\";\n \t      else if (i == BARRIER && aindex >= 3)\n \t\tt = scalar_tp, subname = \"rtint\";\n \t      else"}, {"sha": "59f714714e01f5966e5eb5881bf2bdbb4b6f9f9c", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -5381,6 +5381,8 @@ rtx\n init_one_libfunc (name)\n      const char *name;\n {\n+  rtx symbol;\n+\n   /* Create a FUNCTION_DECL that can be passed to\n      targetm.encode_section_info.  */\n   /* ??? We don't have any type information except for this is\n@@ -5391,8 +5393,13 @@ init_one_libfunc (name)\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n \n-  /* Return the symbol_ref from the mem rtx.  */\n-  return XEXP (DECL_RTL (decl), 0);\n+  symbol = XEXP (DECL_RTL (decl), 0);\n+\n+  /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n+     are the flags assigned by targetm.encode_section_info.  */\n+  SYMBOL_REF_DECL (symbol) = 0;\n+\n+  return symbol;\n }\n \n /* Call this once to initialize the contents of the optabs"}, {"sha": "5f70c7a748e47d5f703d67f1faedd2359bb0b5da", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -519,6 +519,7 @@ extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n+extern void default_encode_section_info PARAMS ((tree, int));\n extern const char *default_strip_name_encoding PARAMS ((const char *));\n extern bool default_binds_local_p PARAMS ((tree));\n extern bool default_binds_local_p_1 PARAMS ((tree, int));"}, {"sha": "4c159f123bf8e3f01c41797dffa9c2ac658cf44f", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -239,9 +239,22 @@ print_rtx (in_rtx)\n \t  {\n \t    if (REGNO (in_rtx) != ORIGINAL_REGNO (in_rtx))\n \t      fprintf (outfile, \" [%d]\", ORIGINAL_REGNO (in_rtx));\n-\t    break;\n \t  }\n-\tif (i == 4 && GET_CODE (in_rtx) == NOTE)\n+#ifndef GENERATOR_FILE\n+\telse if (i == 1 && GET_CODE (in_rtx) == SYMBOL_REF)\n+\t  {\n+\t    int flags = SYMBOL_REF_FLAGS (in_rtx);\n+\t    if (flags)\n+\t      fprintf (outfile, \" [flags 0x%x]\", flags);\n+\t  }\n+\telse if (i == 2 && GET_CODE (in_rtx) == SYMBOL_REF)\n+\t  {\n+\t    tree decl = SYMBOL_REF_DECL (in_rtx);\n+\t    if (decl)\n+\t      print_node_brief (outfile, \"\", decl, 0);\n+\t  }\n+#endif\n+\telse if (i == 4 && GET_CODE (in_rtx) == NOTE)\n \t  {\n \t    switch (NOTE_LINE_NUMBER (in_rtx))\n \t      {"}, {"sha": "97fa41340996572fe20ed3ef893ebf176d3f4f15", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -860,11 +860,11 @@ DEF_RTL_EXPR(MEM, \"mem\", \"e0\", 'o')\n    LABEL_NEXTREF and CONTAINING_INSN.  */\n DEF_RTL_EXPR(LABEL_REF, \"label_ref\", \"u00\", 'o')\n \n-/* Reference to a named label: the string that is the first operand,\n-   with `_' added implicitly in front.\n-   Exception: if the first character explicitly given is `*',\n-   to give it to the assembler, remove the `*' and do not add `_'.  */\n-DEF_RTL_EXPR(SYMBOL_REF, \"symbol_ref\", \"s\", 'o')\n+/* Reference to a named label: \n+   Operand 0: label name\n+   Operand 1: flags (see SYMBOL_FLAG_* in rtl.h)\n+   Operand 2: tree decl from which this symbol is derived, or null.  */\n+DEF_RTL_EXPR(SYMBOL_REF, \"symbol_ref\", \"s00\", 'o')\n \n /* The condition code register is represented, in our imagination,\n    as a register holding a value that can be compared to zero."}, {"sha": "fa5ef84963c01829505892f138f9ffc816a196b2", "filename": "gcc/rtl.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -1245,6 +1245,46 @@ do {\t\t\t\t\t\t\\\n #define SYMBOL_REF_WEAK(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"SYMBOL_REF_WEAK\", (RTX), SYMBOL_REF)->integrated)\n \n+/* The tree decl associated with the symbol, or null.  */\n+#define SYMBOL_REF_DECL(RTX)\tX0TREE ((RTX), 2)\n+\n+/* A set of flags on a symbol_ref that are, in some respects, redundant with\n+   information derivable from the tree decl associated with this symbol.\n+   Except that we build a *lot* of SYMBOL_REFs that aren't associated with a\n+   decl.  In some cases this is a bug.  But beyond that, it's nice to cache\n+   this information to avoid recomputing it.  Finally, this allows space for\n+   the target to store more than one bit of information, as with\n+   SYMBOL_REF_FLAG.  */\n+#define SYMBOL_REF_FLAGS(RTX)\tX0INT ((RTX), 1)\n+\n+/* These flags are common enough to be defined for all targets.  They\n+   are computed by the default version of targetm.encode_section_info.  */\n+\n+/* Set if this symbol is a function.  */\n+#define SYMBOL_FLAG_FUNCTION\t(1 << 0)\n+#define SYMBOL_REF_FUNCTION_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_FUNCTION) != 0)\n+/* Set if targetm.binds_local_p is true.  */\n+#define SYMBOL_FLAG_LOCAL\t(1 << 1)\n+#define SYMBOL_REF_LOCAL_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_LOCAL) != 0)\n+/* Set if targetm.in_small_data_p is true.  */\n+#define SYMBOL_FLAG_SMALL\t(1 << 2)\n+#define SYMBOL_REF_SMALL_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_SMALL) != 0)\n+/* The three-bit field at [5:3] is true for TLS variables; use\n+   SYMBOL_REF_TLS_MODEL to extract the field as an enum tls_model.  */\n+#define SYMBOL_FLAG_TLS_SHIFT\t3\n+#define SYMBOL_REF_TLS_MODEL(RTX) \\\n+  ((enum tls_model) ((SYMBOL_REF_FLAGS (RTX) >> SYMBOL_FLAG_TLS_SHIFT) & 3))\n+/* Set if this symbol is not defined in this translation unit.  */\n+#define SYMBOL_FLAG_EXTERNAL\t(1 << 6)\n+#define SYMBOL_REF_EXTERNAL_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_EXTERNAL) != 0)\n+\n+/* Subsequent bits are available for the target to use.  */\n+#define SYMBOL_FLAG_MACH_DEP\t(1 << 7)\n+\n /* Define a macro to look for REG_INC notes,\n    but save time on machines where they never exist.  */\n "}, {"sha": "eef6b23e750c7c4fc2d7435aa544d2b3e0a38f03", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -280,7 +280,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #endif\n \n #ifndef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO hook_void_tree_int\n+#define TARGET_ENCODE_SECTION_INFO default_encode_section_info\n #endif\n \n /* The whole shebang.  */"}, {"sha": "04df7ae02b48d008403aad95f2a9e04237ede58c", "filename": "gcc/varasm.c", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52859c77e9752203d3d551275df65d4d6f223df8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=52859c77e9752203d3d551275df65d4d6f223df8", "patch": "@@ -920,8 +920,11 @@ make_decl_rtl (decl, asmspec)\n       name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n     }\n \n-  x = gen_rtx_MEM (DECL_MODE (decl), gen_rtx_SYMBOL_REF (Pmode, name));\n-  SYMBOL_REF_WEAK (XEXP (x, 0)) = DECL_WEAK (decl);\n+  x = gen_rtx_SYMBOL_REF (Pmode, name);\n+  SYMBOL_REF_WEAK (x) = DECL_WEAK (decl);\n+  SYMBOL_REF_DECL (x) = decl;\n+  \n+  x = gen_rtx_MEM (DECL_MODE (decl), x);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     set_mem_attributes (x, decl, 1);\n   SET_DECL_RTL (decl, x);\n@@ -1765,6 +1768,7 @@ assemble_static_space (size)\n   namestring = ggc_strdup (name);\n \n   x = gen_rtx_SYMBOL_REF (Pmode, namestring);\n+  SYMBOL_REF_FLAGS (x) = SYMBOL_FLAG_LOCAL;\n \n #ifdef ASM_OUTPUT_ALIGNED_DECL_LOCAL\n   ASM_OUTPUT_ALIGNED_DECL_LOCAL (asm_out_file, NULL_TREE, name, size,\n@@ -1799,6 +1803,7 @@ assemble_trampoline_template ()\n   char label[256];\n   const char *name;\n   int align;\n+  rtx symbol;\n \n   /* By default, put trampoline templates in read-only data section.  */\n \n@@ -1821,7 +1826,10 @@ assemble_trampoline_template ()\n   /* Record the rtl to refer to it.  */\n   ASM_GENERATE_INTERNAL_LABEL (label, \"LTRAMP\", 0);\n   name = ggc_strdup (label);\n-  return gen_rtx_SYMBOL_REF (Pmode, name);\n+  symbol = gen_rtx_SYMBOL_REF (Pmode, name);\n+  SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n+\n+  return symbol;\n }\n #endif\n \f\n@@ -2650,6 +2658,8 @@ output_constant_def (exp, defer)\n \n   if (desc == 0)\n     {\n+      rtx symbol;\n+\n       /* No constant equal to EXP is known to have been output.\n \t Make a constant descriptor to enter EXP in the hash table.\n \t Assign the label number and record it in the descriptor for\n@@ -2666,9 +2676,10 @@ output_constant_def (exp, defer)\n       const_hash_table[hash] = desc;\n \n       /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n-      rtl = desc->rtl\n-\t= gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)),\n-\t\t       gen_rtx_SYMBOL_REF (Pmode, desc->label));\n+      symbol = gen_rtx_SYMBOL_REF (Pmode, desc->label);\n+      SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n+\n+      rtl = desc->rtl = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)), symbol);\n \n       set_mem_attributes (rtl, exp, 1);\n       set_mem_alias_set (rtl, 0);\n@@ -3173,7 +3184,7 @@ force_const_mem (mode, x)\n   int hash;\n   struct constant_descriptor_rtx *desc;\n   char label[256];\n-  rtx def;\n+  rtx def, symbol;\n   struct pool_constant *pool;\n   unsigned int align;\n \n@@ -3234,19 +3245,21 @@ force_const_mem (mode, x)\n \n   /* Construct the SYMBOL_REF and the MEM.  */\n \n-  pool->desc->rtl = def\n-    = gen_rtx_MEM (mode, gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label)));\n-  set_mem_alias_set (def, const_alias_set);\n+  symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n+  SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n+\n+  pool->desc->rtl = def = gen_rtx_MEM (mode, symbol);\n   set_mem_attributes (def, (*lang_hooks.types.type_for_mode) (mode, 0), 1);\n   RTX_UNCHANGING_P (def) = 1;\n \n   /* Add label to symbol hash table.  */\n-  hash = SYMHASH (XSTR (XEXP (def, 0), 0));\n+  hash = SYMHASH (XSTR (symbol, 0));\n   pool->next_sym = const_rtx_sym_hash_table[hash];\n   const_rtx_sym_hash_table[hash] = pool;\n \n   /* Mark the symbol_ref as belonging to this constants pool.  */\n-  CONSTANT_POOL_ADDRESS_P (XEXP (def, 0)) = 1;\n+  CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n+  SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n   current_function_uses_const_pool = 1;\n \n   return def;\n@@ -5370,6 +5383,40 @@ default_elf_select_rtx_section (mode, x, align)\n   mergeable_constant_section (mode, align, 0);\n }\n \n+/* Set the generally applicable flags on the SYMBOL_REF for EXP.  */\n+\n+void\n+default_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  rtx rtl, symbol;\n+  int flags;\n+\n+  rtl = DECL_P (decl) ? DECL_RTL (decl) : TREE_CST_RTL (decl);\n+\n+  /* Careful not to prod global register variables.  */\n+  if (GET_CODE (rtl) != MEM)\n+    return;\n+  symbol = XEXP (rtl, 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return;\n+\n+  flags = 0;\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    flags |= SYMBOL_FLAG_FUNCTION;\n+  if ((*targetm.binds_local_p) (decl))\n+    flags |= SYMBOL_FLAG_LOCAL;\n+  if ((*targetm.in_small_data_p) (decl))\n+    flags |= SYMBOL_FLAG_SMALL;\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n+    flags |= decl_tls_model (decl) << SYMBOL_FLAG_TLS_SHIFT;\n+  if (DECL_P (decl) && DECL_EXTERNAL (decl))\n+    flags |= SYMBOL_FLAG_EXTERNAL;\n+\n+  SYMBOL_REF_FLAGS (symbol) = flags;\n+}\n+\n /* By default, we do nothing for encode_section_info, so we need not\n    do anything but discard the '*' marker.  */\n "}]}