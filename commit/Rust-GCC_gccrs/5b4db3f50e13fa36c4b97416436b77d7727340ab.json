{"sha": "5b4db3f50e13fa36c4b97416436b77d7727340ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0ZGIzZjUwZTEzZmEzNmM0Yjk3NDE2NDM2Yjc3ZDc3MjczNDBhYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-04T18:19:54Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-04T18:19:54Z"}, "message": "next-mapping.h: Ensure a GNU-compatible nil is defined.\n\n\n\t* objc-obj-c++-shared/next-mapping.h: Ensure a GNU-compatible nil is\n\tdefined.\n\t* objc.dg/property/fsf-property-basic.m: XFAIL m64 NeXT run.\n\t* objc.dg/property/fsf-property-named-ivar.m: Likewise.\n\t* objc.dg/property/property-1.m: Likewise.\n\t* objc.dg/property/at-property-6.m: Likewise.\n\t* objc.dg/property/at-property-7.m: Likewise.\n\t* objc.dg/property/dotsyntax-1.m: Likewise.\n\t* objc.dg/property/at-property-8.m: Likewise.\n\t* objc.dg/property/dotsyntax-2.m: Likewise.\n\t* objc.dg/property/at-property-9.m: Likewise.\n\t* objc.dg/property/synthesize-2.m: Likewise.\n\t* objc.dg/property/at-property-10.m: Likewise.\n\t* objc.dg/property/at-property-11.m: Likewise.\n\t* objc.dg/property/at-property-12.m: Likewise.\n\t* objc.dg/property/at-property-13.m: Likewise.\n\t* objc.dg/property/fsf-property-method-access.m: Likewise.\n\t* objc.dg/torture/strings/const-cfstring-1.m: Cater for bogus Darwin10\n\tlinker warning.\n\t* objc.dg/encode-7-next.m: Use next-mapping.h, ignore deprecation \n\twarnings.\n\t* objc.dg/encode-7-next-64bit.m: Use next-mapping.h, ignore \n\tdeprecation warnings.  Use Object1 implemenation.\n\t* objc.dg/demangle-1.m: Provide +initialize.  XFAIL m64 NeXT run.\n\t* objc/execute/forward-1.m: Move to objc.dg/torture and reduce scope\n\tto m32 NeXT.\n\t* objc/execute/forward-1.x: Remove.\n\nFrom-SVN: r166321", "tree": {"sha": "3229c40f94991fda97dc3aec9982a8c1915c447f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3229c40f94991fda97dc3aec9982a8c1915c447f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b4db3f50e13fa36c4b97416436b77d7727340ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4db3f50e13fa36c4b97416436b77d7727340ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4db3f50e13fa36c4b97416436b77d7727340ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4db3f50e13fa36c4b97416436b77d7727340ab/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e239f9d203baf1378cdaee7dc1ef60bfba997da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e239f9d203baf1378cdaee7dc1ef60bfba997da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e239f9d203baf1378cdaee7dc1ef60bfba997da"}], "stats": {"total": 322, "additions": 65, "deletions": 257}, "files": [{"sha": "fa4ea1da2b6a0c07134eddb99620c3851d37919d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,3 +1,33 @@\n+2010-11-04  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-obj-c++-shared/next-mapping.h: Ensure a GNU-compatible nil is\n+\tdefined.\n+\t* objc.dg/property/fsf-property-basic.m: XFAIL m64 NeXT run.\n+\t* objc.dg/property/fsf-property-named-ivar.m: Likewise.\n+\t* objc.dg/property/property-1.m: Likewise.\n+\t* objc.dg/property/at-property-6.m: Likewise.\n+\t* objc.dg/property/at-property-7.m: Likewise.\n+\t* objc.dg/property/dotsyntax-1.m: Likewise.\n+\t* objc.dg/property/at-property-8.m: Likewise.\n+\t* objc.dg/property/dotsyntax-2.m: Likewise.\n+\t* objc.dg/property/at-property-9.m: Likewise.\n+\t* objc.dg/property/synthesize-2.m: Likewise.\n+\t* objc.dg/property/at-property-10.m: Likewise.\n+\t* objc.dg/property/at-property-11.m: Likewise.\n+\t* objc.dg/property/at-property-12.m: Likewise.\n+\t* objc.dg/property/at-property-13.m: Likewise.\n+\t* objc.dg/property/fsf-property-method-access.m: Likewise.\n+\t* objc.dg/torture/strings/const-cfstring-1.m: Cater for bogus Darwin10\n+\tlinker warning.\n+\t* objc.dg/encode-7-next.m: Use next-mapping.h, ignore deprecation \n+\twarnings.\n+\t* objc.dg/encode-7-next-64bit.m: Use next-mapping.h, ignore \n+\tdeprecation warnings.  Use Object1 implemenation.\n+\t* objc.dg/demangle-1.m: Provide +initialize.  XFAIL m64 NeXT run.\n+\t* objc/execute/forward-1.m: Move to objc.dg/torture and reduce scope\n+\tto m32 NeXT.\n+\t* objc/execute/forward-1.x: Remove.\n+\t\n 2010-11-04  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-access.C: New."}, {"sha": "e5e2d22a6e578cc91a3f1c5366c0d9fdf1a0f70c", "filename": "gcc/testsuite/objc-obj-c++-shared/next-mapping.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -19,6 +19,10 @@\n #include <stdlib.h>\n #include <string.h>\n \n+/* Force a definition of nil that is compatible with GNU runtime.  */\n+#undef  nil\n+#define nil ((id)0)\n+\n #define objc_get_class(C) objc_getClass(C)\n #define objc_get_meta_class(C) objc_getMetaClass(C)\n #define class_get_class_method(C, S) class_getClassMethod(C, S)"}, {"sha": "f790c56ca6afdbb49ead2e0235978ecad0b4adbc", "filename": "gcc/testsuite/objc.dg/demangle-1.m", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdemangle-1.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Test demangling an Objective-C method.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <string.h>\n #include <stdlib.h>\n@@ -14,6 +15,9 @@ @interface DemangleTest\n + (int) testFunction1;\n + (int) test_function2;\n + (int) __testFunction3: (int)unused  andArgument: (char)unused2;\n+#ifdef __NEXT_RUNTIME__\n++ (id) initialize ;\n+#endif\n @end\n \n @implementation DemangleTest\n@@ -37,6 +41,9 @@ + (int) __testFunction3: (int)unused   andArgument: (char)unused2\n   printf (\"%s\\n\", __PRETTY_FUNCTION__);\n   return strcmp (__PRETTY_FUNCTION__, \"+[DemangleTest __testFunction3:andArgument:]\");\n }\n+#ifdef __NEXT_RUNTIME__\n++ (id) initialize { return self; }\n+#endif\n @end\n \n int main ()"}, {"sha": "3a5e61dafa52494abed42d21d6c9cf8d59c27078", "filename": "gcc/testsuite/objc.dg/encode-7-next-64bit.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -2,10 +2,13 @@\n \n /* { dg-do run { target *-*-darwin* } } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-Wno-deprecated-declarations\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdbool.h>\n #include <string.h>\n #include <stdlib.h>"}, {"sha": "2768e115fea731cfef884838877edf337d90bfa0", "filename": "gcc/testsuite/objc.dg/encode-7-next.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -3,9 +3,11 @@\n \n /* { dg-do run { target *-*-darwin* } } */\n /* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-Wno-deprecated-declarations\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n #include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <stdbool.h>\n #include <string.h>\n #include <stdlib.h>"}, {"sha": "945ada5da34e43e13b51f1e3474c4be49e891d9f", "filename": "gcc/testsuite/objc.dg/property/at-property-10.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the property syntax in a number of expressions.  */\n "}, {"sha": "33baee9d66225aba8cb6568e9ad0105176169474", "filename": "gcc/testsuite/objc.dg/property/at-property-11.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-11.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test that properties are found even if implemented in superclasses.  */\n "}, {"sha": "e36f57aaa24dc7d3c99c2b76b55142647389cd20", "filename": "gcc/testsuite/objc.dg/property/at-property-12.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-12.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test atomic, assign synthesized methods.  */\n "}, {"sha": "89bf748a2ee503c0f7dbccf4aa60f40db5deee97", "filename": "gcc/testsuite/objc.dg/property/at-property-13.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-13.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test retain and copy synthesized methods.  */\n "}, {"sha": "b3584cc405209a9c610cac048d62420deb3f9db2", "filename": "gcc/testsuite/objc.dg/property/at-property-6.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-6.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the property syntax with non-synthesized setter/getter\n    and with standard names.  */"}, {"sha": "6f5cedaac08a5875f09cc00016dfe889365552ec", "filename": "gcc/testsuite/objc.dg/property/at-property-7.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-7.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the property syntax with non-synthesized setter/getter\n    and with a non-standard name for the getter.  */"}, {"sha": "497dedca73a65c2b7ad59cee75a54704bc16fa31", "filename": "gcc/testsuite/objc.dg/property/at-property-8.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-8.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the property syntax with non-synthesized setter/getter\n    and with a non-standard name for the setter.  */"}, {"sha": "0f144fad261b0c7f56289807dfaa76c636eef846", "filename": "gcc/testsuite/objc.dg/property/at-property-9.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-9.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the property syntax with synthesized setter/getter\n    and with a non-standard name for the getter and setter.  */"}, {"sha": "8922f5f03404c87491ffd5ab65836a1a215f43f0", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-1.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-1.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the 'dot syntax' without a declarated property.  */\n "}, {"sha": "03e49aebc5279b6536b2f150ca80b6b4cc977769", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-2.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n /* Test the 'dot syntax' without a declarated property.  This tests the case where\n    only the setter (or only the getter) exists.  */"}, {"sha": "ddc0589e02ac32aa03379b955746a5c8d01db511", "filename": "gcc/testsuite/objc.dg/property/fsf-property-basic.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Basic test, auto-generated getter/setter based on property name.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n extern int printf (char *fmt,...) ;\n extern void abort (void);"}, {"sha": "01eea5bf75da76b29108880a8b04f93017bc76f1", "filename": "gcc/testsuite/objc.dg/property/fsf-property-method-access.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* test access in methods, auto-generated getter/setter based on property name.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n extern int printf (char *fmt,...) ;\n extern void abort (void);"}, {"sha": "5458568508d2baf30985e6bced58a5a581c9a352", "filename": "gcc/testsuite/objc.dg/property/fsf-property-named-ivar.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Basic test, auto-generated getter/setter based on named ivar  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n extern int printf (char *fmt,...) ;\n extern void abort (void);"}, {"sha": "147f007b946bdbd04e9a2f43a94b06b5fa5d2c45", "filename": "gcc/testsuite/objc.dg/property/property-1.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -2,6 +2,7 @@\n /* { dg-options \"-std=c99\" } */\n /* { dg-do run } */\n /* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #import \"../../objc-obj-c++-shared/Object1.h\"\n "}, {"sha": "c14d759d3e80a0d93953b20020dc9516700281aa", "filename": "gcc/testsuite/objc.dg/property/property-2.m", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m?ref=2e239f9d203baf1378cdaee7dc1ef60bfba997da", "patch": "@@ -1,65 +0,0 @@\n-/* This program tests use of properties . */\n-/* { dg-do run { target *-*-darwin* } } */\n-/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n-/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n-   built-in to the compiler, and therefore we get missing implementation warnings.  */\n-/* { dg-require-effective-target ilp32 } */\n-/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n-/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n-\n-/* FIXME: There is no reason to use NSString in this file.  */\n-\n-#include <objc/objc-api.h>\n-#include <Foundation/Foundation.h>\n-\n-@interface Person : NSObject\n-@property NSString *firstName, *lastName;\n-@property(readonly) NSString *fullName;\n-@end\n-\n-@interface Group : NSObject\n-@property Person *techLead, *runtimeGuru, *propertiesMaven;\n-@end\n-\n-@implementation Group\n-@property Person *techLead, *runtimeGuru, *propertiesMaven;\n-- init {\n-  techLead = [[Person alloc] init];\n-  runtimeGuru = [[Person alloc] init];\n-  propertiesMaven = [[Person alloc] init];\n-  return self;\n-}\n-@end\n-\n-@implementation Person\n-@property NSString *firstName, *lastName;\n-@property(readonly) NSString *fullName;\n-- (NSString*)fullName { // computed getter\n-    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n-}\n-@end\n-\n-NSString *playWithProperties()\n-{\n-  Group *g = [[Group alloc] init] ;\n-\n-  g.techLead.firstName = @\"Blaine\";\n-  g.techLead.lastName = @\"Garst\";\n-  g.runtimeGuru.firstName = @\"Greg\";\n-  g.runtimeGuru.lastName = @\"Parker\";\n-  g.propertiesMaven.firstName = @\"Patrick\";\n-  g.propertiesMaven.lastName = @\"Beard\";\n-\n-  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n-                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n-}\n-\n-main()\n-{\n-    char buf [256];\n-    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n-    sprintf(buf, \"%s\", [playWithProperties() cString]);\n-    [pool release];\n-    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n-}\n-"}, {"sha": "5a83263e8dc1b4ddb195b609cf3f82a39ad27fbc", "filename": "gcc/testsuite/objc.dg/property/property-3.m", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m?ref=2e239f9d203baf1378cdaee7dc1ef60bfba997da", "patch": "@@ -1,75 +0,0 @@\n-/* This program tests use of properties . */\n-/* { dg-do run { target *-*-darwin* } } */\n-/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n-/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n-   built-in to the compiler, and therefore we get missing implementation warnings.  */\n-/* { dg-require-effective-target ilp32 } */\n-/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n-/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n-\n-#include <objc/objc-api.h>\n-#include <Foundation/Foundation.h>\n-\n-@interface Person : NSObject\n-{\n-}\n-@property NSString *firstName, *lastName;\n-@property(readonly) NSString *fullName;\n-\n-@end\n-\n-@interface Group : NSObject\n-{\n-}\n-\n-@property Person *techLead, *runtimeGuru, *propertiesMaven;\n-\n-@end\n-\n-@implementation Group\n-\n-@property Person *techLead, *runtimeGuru, *propertiesMaven;\n-- init {\n-  techLead = [[Person alloc] init];\n-  runtimeGuru = [[Person alloc] init];\n-  propertiesMaven = [[Person alloc] init];\n-  return self;\n-}\n-\n-@end\n-\n-@implementation Person\n-\n-@property NSString *firstName, *lastName;\n-@property(readonly, getter = fullName) NSString *fullName;\n-\n-- (NSString*)fullName { // computed getter\n-    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n-}\n-\n-@end\n-\n-NSString *playWithProperties()\n-{\n-  Group *g = [[Group alloc] init] ;\n-\n-  g.techLead.firstName = @\"Blaine\";\n-  g.techLead.lastName = @\"Garst\";\n-  g.runtimeGuru.firstName = @\"Greg\";\n-  g.runtimeGuru.lastName = @\"Parker\";\n-  g.propertiesMaven.firstName = @\"Patrick\";\n-  g.propertiesMaven.lastName = @\"Beard\";\n-\n-  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n-                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n-}\n-\n-main()\n-{\n-    char buf [256];\n-    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n-    sprintf(buf, \"%s\", [playWithProperties() cString]);\n-    [pool release];\n-    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n-}\n-"}, {"sha": "92170678f3c0f6fe3d026aea2b73bf11d5f4b850", "filename": "gcc/testsuite/objc.dg/property/synthesize-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-2.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -1,5 +1,6 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n /* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/objc.h>\n #include <objc/runtime.h>"}, {"sha": "7e98915641902a6e526f1a636f5ceca6900e36c3", "filename": "gcc/testsuite/objc.dg/torture/strings/const-cfstring-1.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4db3f50e13fa36c4b97416436b77d7727340ab/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-cfstring-1.m?ref=5b4db3f50e13fa36c4b97416436b77d7727340ab", "patch": "@@ -9,6 +9,9 @@\n /* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mconstant-cfstrings -framework Cocoa\" } */\n+/* Darwin10's linker emits a warning that the constant strings are incompatible with writable ones.\n+   Well, we don't implement writable ones at this juncture.  */\n+/* { dg-options \"-mconstant-cfstrings -framework Cocoa -Wl,-w\" { target *-*-darwin[123]* } } */\n \n #import <Foundation/NSString.h>\n #import <CoreFoundation/CFString.h>"}, {"sha": "258a9164999f6e42dcc9ead9df79e451aaf7e281", "filename": "gcc/testsuite/objc/execute/forward-1.m", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.m?ref=2e239f9d203baf1378cdaee7dc1ef60bfba997da", "patch": "@@ -1,80 +0,0 @@\n-/* See if -forward::/-performv:: is able to work. */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <objc/objc-api.h>\n-\n-#define VALUETOUSE 1234567890\n-\n-id forwarder, receiver;\n-\n-@interface Forwarder: Object\n-{\n-    id receiver;\n-}\n-\n--initWithReceiver:theReceiver;\n-\n-@end\n-\n-@interface Receiver:Object\n-{\n-    int foo;\n-}\n--display;\n--initWithFoo:(int)theFoo;\n-@end\n-@implementation Receiver\n-\n--initWithFoo: (int)theFoo\n-{\n-    foo = theFoo;\n-    return self;\n-}\n-\n--display\n-{\n-    /* Check to see if we are really the reciever. */\n-    if (self != receiver)\n-        abort ();\n-    /* And the value of foo is set correctly. */\n-    if (foo != VALUETOUSE)\n-      abort ();\n-    return self;\n-}\n-\n-@end\n-\n-@implementation Forwarder\n--initWithReceiver: theReceiver\n-{\n-    [super init];\n-    receiver = theReceiver;\n-    return self;\n-}\n-#ifdef __NEXT_RUNTIME__\n-- forward: (SEL)theSel: (marg_list)theArgFrame\n-#else\n--(retval_t) forward: (SEL)theSel: (arglist_t)theArgFrame\n-#endif\n-{\n-  /* If we have a reciever try to perform on that object */\n-    if (receiver)\n-        return [receiver performv: theSel: theArgFrame];\n-    return [self doesNotRecognize:theSel];\n-}\n-@end\n-int main()\n-{\n-    /* Init the reciever. */\n-    receiver = [[Receiver alloc] initWithFoo: VALUETOUSE];\n-    /* Init the fowarder. */\n-    forwarder = [[Forwarder alloc] initWithReceiver: receiver];\n-    /* Call display on the forwarder which in turns calls display on\n-       the reciever. */\n-    [forwarder display];\n-    exit(0);\n-}"}, {"sha": "ac4cf7f2799be17dad83fe69ad22135d7e6bbb43", "filename": "gcc/testsuite/objc/execute/forward-1.x", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e239f9d203baf1378cdaee7dc1ef60bfba997da/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fforward-1.x?ref=2e239f9d203baf1378cdaee7dc1ef60bfba997da", "patch": "@@ -1,36 +0,0 @@\n-load_lib target-supports.exp\n-\n-# XFAIL: PR libobjc/36610, for targets which pass arguments via registers\n-\n-if { ([istarget x86_64-*-linux*] && [check_effective_target_lp64] )\n-     || [istarget powerpc*-*-linux*]\n-     || [istarget powerpc*-*-aix*]\n-     || [istarget s390*-*-*-linux*]\n-     || [istarget sh4-*-linux*]\n-     || [istarget hppa*-*-linux*]\n-     || [istarget hppa*-*-hpux*]\n-     || [istarget ia64-*-linux*] } {\n-    set torture_execute_xfail \"*-*-*\"\n-}\n-\n-# For darwin and alpha-linux it fails with -fgnu-runtime,\n-# passes with -fnext-runtime.\n-\n-if { [istarget alpha*-*-linux*]\n-     || [istarget alpha*-dec-osf*]\n-     || ([istarget i?86-*-solaris2*] && [check_effective_target_lp64] )\n-     || [istarget mips-sgi-irix*]\n-     || [istarget sparc*-sun-solaris2*]\n-     || ([istarget *-*-darwin*] && [check_effective_target_lp64] ) } {\n-    set torture_eval_before_execute {\n-\tglobal compiler_conditional_xfail_data\n-\tset compiler_conditional_xfail_data {\n-\t    \"Target fails with -fgnu-runtime\" \\\n-\t\t\"*-*-*\" \\\n-\t\t{ \"-fgnu-runtime\" } \\\n-\t\t{ \"\" }\n-\t}\n-    }\n-}\n-\n-return 0"}]}