{"sha": "8d960eda478bc9e710f55aaa0ac8849f6c78465a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5NjBlZGE0NzhiYzllNzEwZjU1YWFhMGFjODg0OWY2Yzc4NDY1YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-31T17:21:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-31T17:21:01Z"}, "message": "tree-cfg.c (call_can_make_abnormal_goto): New predicate.\n\n\t* tree-cfg.c (call_can_make_abnormal_goto): New predicate.\n\t(stmt_can_make_abnormal_goto): Use it.\n\t(is_ctrl_altering_stmt): Likewise.\n\nFrom-SVN: r186047", "tree": {"sha": "064d1c805c56008fbb6aa9af4651992c8bbd7de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/064d1c805c56008fbb6aa9af4651992c8bbd7de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d960eda478bc9e710f55aaa0ac8849f6c78465a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d960eda478bc9e710f55aaa0ac8849f6c78465a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d960eda478bc9e710f55aaa0ac8849f6c78465a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d960eda478bc9e710f55aaa0ac8849f6c78465a/comments", "author": null, "committer": null, "parents": [{"sha": "9a9dcce8e8f235bddcbb89bf6010577686b4627b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9dcce8e8f235bddcbb89bf6010577686b4627b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9dcce8e8f235bddcbb89bf6010577686b4627b"}], "stats": {"total": 152, "additions": 133, "deletions": 19}, "files": [{"sha": "0ec4ecdaa824e8d881b4bea562fb394b2a3fabef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -1,3 +1,9 @@\n+2012-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-cfg.c (call_can_make_abnormal_goto): New predicate.\n+\t(stmt_can_make_abnormal_goto): Use it.\n+\t(is_ctrl_altering_stmt): Likewise.\n+\n 2012-03-30  Naveen H.S  <naveen.S@kpitcummins.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "e2fa4a652820a93c44703974dadd946228231ec7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -1,3 +1,9 @@\n+2012-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/controlled6.adb: New test.\n+\t* gnat.dg/controlled6_pkg.ads: New helper.\n+\t* gnat.dg/controlled6_pkg-iterators.ad[sb]: Likewise.\n+\n 2012-03-30  Richard Henderson <rth@redhat.com>\n \n \tPR debug/52727"}, {"sha": "88640de7beaadac1e722f1778f893884e2b102a2", "filename": "gcc/testsuite/gnat.dg/controlled6.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6.adb?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn\" }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+with Controlled6_Pkg;\n+with Controlled6_Pkg.Iterators;\n+\n+procedure Controlled6 is\n+\n+   type String_Access is access String;\n+\n+   package My_Q is new Controlled6_Pkg (String_Access);\n+   package My_Iterators is new My_Q.Iterators (0);\n+   use My_Iterators;\n+\n+   Iterator : Iterator_Type := Find;\n+\n+begin\n+   loop\n+      exit when Is_Null (Iterator);\n+      Put (Current (Iterator).all & ' ');\n+      Find_Next (Iterator);\n+   end loop;\n+end;"}, {"sha": "201a75c94cce6482cd2c734811a4054f7c829a56", "filename": "gcc/testsuite/gnat.dg/controlled6_pkg-iterators.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.adb?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -0,0 +1,21 @@\n+package body Controlled6_Pkg.Iterators is\n+\n+   function Find return Iterator_Type is\n+      Iterator : Iterator_Type;\n+   begin\n+      return Iterator;\n+   end Find;\n+\n+   function Current (Iterator : in Iterator_Type) return T is begin\n+      return Iterator.Current.Item;\n+   end Current;\n+\n+   procedure Find_Next (Iterator : in out Iterator_Type) is begin\n+      Iterator.Current := null;\n+   end Find_Next;\n+\n+   function Is_Null (Iterator : in Iterator_Type) return Boolean is begin\n+      return Iterator.Current = null;\n+   end Is_Null;\n+\n+end Controlled6_Pkg.Iterators;"}, {"sha": "89330f6a3babd6786a3a1caed1b9db3bf37c206b", "filename": "gcc/testsuite/gnat.dg/controlled6_pkg-iterators.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg-iterators.ads?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -0,0 +1,22 @@\n+with Ada.Finalization;\n+\n+generic\n+\n+   I : Integer;\n+\n+package Controlled6_Pkg.Iterators is\n+\n+   type Iterator_Type is new Ada.Finalization.Controlled with record\n+      Current : Node_Access_Type;\n+   end record;\n+\n+   function Find return Iterator_Type;\n+\n+   function Current (Iterator : in Iterator_Type) return T;\n+   pragma Inline (Current);\n+\n+   procedure Find_Next (Iterator : in out Iterator_Type);\n+\n+   function Is_Null (Iterator : in Iterator_Type) return Boolean;\n+\n+end Controlled6_Pkg.Iterators;"}, {"sha": "2f1052be98158d4a3836ce6266c3222998fb3f98", "filename": "gcc/testsuite/gnat.dg/controlled6_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled6_pkg.ads?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -0,0 +1,15 @@\n+with Ada.Finalization;\n+\n+generic\n+\n+   type T is private;\n+\n+package Controlled6_Pkg is\n+\n+   type Node_Type is record\n+      Item : T;\n+   end record;\n+\n+   type Node_Access_Type is access Node_Type;\n+\n+end Controlled6_Pkg;"}, {"sha": "1f59c03cfcd345a3bb9d7e6d87283fb7518b098d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d960eda478bc9e710f55aaa0ac8849f6c78465a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8d960eda478bc9e710f55aaa0ac8849f6c78465a", "patch": "@@ -2273,6 +2273,43 @@ gimple_cfg2vcg (FILE *file)\n \t\t\t     Miscellaneous helpers\n ---------------------------------------------------------------------------*/\n \n+/* Return true if T, a GIMPLE_CALL, can make an abnormal transfer of control\n+   flow.  Transfers of control flow associated with EH are excluded.  */\n+\n+static bool\n+call_can_make_abnormal_goto (gimple t)\n+{\n+  /* If the function has no non-local labels, then a call cannot make an\n+     abnormal transfer of control.  */\n+  if (!cfun->has_nonlocal_label)\n+   return false;\n+\n+  /* Likewise if the call has no side effects.  */\n+  if (!gimple_has_side_effects (t))\n+    return false;\n+\n+  /* Likewise if the called function is leaf.  */\n+  if (gimple_call_flags (t) & ECF_LEAF)\n+    return false;\n+\n+  return true;\n+}\n+\n+\n+/* Return true if T can make an abnormal transfer of control flow.\n+   Transfers of control flow associated with EH are excluded.  */\n+\n+bool\n+stmt_can_make_abnormal_goto (gimple t)\n+{\n+  if (computed_goto_p (t))\n+    return true;\n+  if (is_gimple_call (t))\n+    return call_can_make_abnormal_goto (t);\n+  return false;\n+}\n+\n+\n /* Return true if T represents a stmt that always transfers control.  */\n \n bool\n@@ -2306,10 +2343,8 @@ is_ctrl_altering_stmt (gimple t)\n       {\n \tint flags = gimple_call_flags (t);\n \n-\t/* A non-pure/const call alters flow control if the current\n-\t   function has nonlocal labels.  */\n-\tif (!(flags & (ECF_CONST | ECF_PURE | ECF_LEAF))\n-\t    && cfun->has_nonlocal_label)\n+\t/* A call alters control flow if it can make an abnormal goto.  */\n+\tif (call_can_make_abnormal_goto (t))\n \t  return true;\n \n \t/* A call also alters control flow if it does not return.  */\n@@ -2367,21 +2402,6 @@ simple_goto_p (gimple t)\n }\n \n \n-/* Return true if T can make an abnormal transfer of control flow.\n-   Transfers of control flow associated with EH are excluded.  */\n-\n-bool\n-stmt_can_make_abnormal_goto (gimple t)\n-{\n-  if (computed_goto_p (t))\n-    return true;\n-  if (is_gimple_call (t))\n-    return (gimple_has_side_effects (t) && cfun->has_nonlocal_label\n-\t    && !(gimple_call_flags (t) & ECF_LEAF));\n-  return false;\n-}\n-\n-\n /* Return true if STMT should start a new basic block.  PREV_STMT is\n    the statement preceding STMT.  It is used when STMT is a label or a\n    case label.  Labels should only start a new basic block if their"}]}