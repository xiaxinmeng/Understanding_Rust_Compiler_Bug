{"sha": "8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2NTEzMmM5YjhiOGRkOWE5OGY5N2JiYmE5M2I2ZmQ4ZGExZGE0NA==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2017-01-18T15:48:54Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2017-01-18T15:48:54Z"}, "message": "re PR libobjc/78697 (--with-target-bdw-gc-include shouldn't be required to be per multilib)\n\n2017-01-18  Matthias Klose  <doko@ubuntu.com>\n\n        PR libobjc/78697\n        * configure.ac: Allow default for --with-target-bdw-gc-include.\n        * configure: Regenerate.\n\n        PR libobjc/78698\n        * configure.ac: Use the libgc.la file when available.\n        * configure: Regenerate.\n\n2017-01-18  Matthias Klose  <doko@ubuntu.com>\n\n       * doc/install.texi: Allow default for --with-target-bdw-gc-include.\n\nFrom-SVN: r244579", "tree": {"sha": "7321ae79ac887ea53a92086e26b0dfcf9f9595f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7321ae79ac887ea53a92086e26b0dfcf9f9595f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfc42f08cec61d355f2e1fc24d37b1300c68dceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc42f08cec61d355f2e1fc24d37b1300c68dceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc42f08cec61d355f2e1fc24d37b1300c68dceb"}], "stats": {"total": 180, "additions": 112, "deletions": 68}, "files": [{"sha": "7f96795436798b9ee86f09a29dd3cefeff7666d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "patch": "@@ -1,3 +1,7 @@\n+2017-01-18  Matthias Klose  <doko@ubuntu.com>\n+\n+       * doc/install.texi: Allow default for --with-target-bdw-gc-include.\n+\n 2016-01-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_bperm): Change #define."}, {"sha": "4793ef85b0d9720dd4ef0c7f4b320a01af79dc9b", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "patch": "@@ -2207,8 +2207,12 @@ is named as @samp{.} (dot), or is omitted (e.g.\n The options @option{--with-target-bdw-gc-include} and\n @option{--with-target-bdw-gc-lib} must always be specified together\n for each multilib variant and they take precedence over\n-@option{--with-target-bdw-gc}.  If none of these options are\n-specified, the library is assumed in default locations.\n+@option{--with-target-bdw-gc}.  If @option{--with-target-bdw-gc-include}\n+is missing values for a multilib, then the value for the default\n+multilib is used (e.g. @samp{--with-target-bdw-gc-include=/opt/bdw-gc/include}\n+@samp{--with-target-bdw-gc-lib=/opt/bdw-gc/lib64,32=/opt-bdw-gc/lib32}).\n+If none of these options are specified, the library is assumed in\n+default locations.\n @end table\n \n @html"}, {"sha": "55987a3ff3b8fb22cc5e44e92f3259f990ac0022", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "patch": "@@ -1,3 +1,13 @@\n+2017-01-18  Matthias Klose  <doko@ubuntu.com>\n+\n+        PR libobjc/78697\n+\t* configure.ac: Allow default for --with-target-bdw-gc-include.\n+\t* configure: Regenerate.\n+\n+        PR libobjc/78698\n+\t* configure.ac: Use the libgc.la file when available.\n+\t* configure: Regenerate.\n+\n 2017-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/79046"}, {"sha": "abf5aed71cfa5a105574dfb2d9d2651aaaad5657", "filename": "libobjc/configure", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "patch": "@@ -11567,16 +11567,19 @@ $as_echo \"using paths configured with --with-target-bdw-gc options\" >&6; }\n       for i in `echo $with_target_bdw_gc_include | tr ',' ' '`; do\n         case \"$i\" in\n           *=*) sd=${i%%=*}; d=${i#*=} ;;\n-          *) sd=.; d=$i ;;\n+          *) sd=.; d=$i; fallback=$i ;;\n         esac\n         if test \"$mldir\" = \"$sd\"; then\n           bdw_val=$d\n         fi\n       done\n-      if test \"x$bdw_val\" = x; then\n+      if test \"x$bdw_val\" = x && test \"x$bdw_inc_dir\" = x && test \"x$fallback\" != x; then\n+        bdw_inc_dir=\"$fallback\"\n+      elif test \"x$bdw_val\" = x; then\n         as_fn_error \"no multilib path ($mldir) found in --with-target-bdw-gc-include\" \"$LINENO\" 5\n+      else\n+        bdw_inc_dir=\"$bdw_val\"\n       fi\n-      bdw_inc_dir=\"$bdw_val\"\n     fi\n     bdw_val=\n     if test \"x$with_target_bdw_gc_lib\" != x; then\n@@ -11601,18 +11604,27 @@ $as_echo \"using paths configured with --with-target-bdw-gc options\" >&6; }\n       as_fn_error \"no multilib path ($mldir) found in --with-target-bdw-gc-lib\" \"$LINENO\" 5\n     fi\n     BDW_GC_CFLAGS=\"-I$bdw_inc_dir\"\n-    BDW_GC_LIBS=\"-L$bdw_lib_dir -lgc\"\n+    if test -f $bdw_lib_dir/libgc.la; then\n+      BDW_GC_LIBS=\"$bdw_lib_dir/libgc.la\"\n+    else\n+      BDW_GC_LIBS=\"-L$bdw_lib_dir -lgc\"\n+    fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: found\" >&5\n $as_echo \"found\" >&6; }\n   fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for system boehm-gc\" >&5\n+  case \"$BDW_GC_LIBS\" in\n+  *libgc.la)\n+    use_bdw_gc=yes\n+    ;;\n+  *)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for system boehm-gc\" >&5\n $as_echo_n \"checking for system boehm-gc... \" >&6; }\n-  save_CFLAGS=$CFLAGS\n-  save_LIBS=$LIBS\n-  CFLAGS=\"$CFLAGS $BDW_GC_CFLAGS\"\n-  LIBS=\"$LIBS $BDW_GC_LIBS\"\n-      if test x$gcc_no_link = xyes; then\n+    save_CFLAGS=$CFLAGS\n+    save_LIBS=$LIBS\n+    CFLAGS=\"$CFLAGS $BDW_GC_CFLAGS\"\n+    LIBS=\"$LIBS $BDW_GC_LIBS\"\n+            if test x$gcc_no_link = xyes; then\n   as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -11628,18 +11640,18 @@ GC_init()\n _ACEOF\n if ac_fn_c_try_link \"$LINENO\"; then :\n \n-      if test \"$cross_compiling\" = yes; then :\n-          system_bdw_gc_found=no\n+        if test \"$cross_compiling\" = yes; then :\n+            system_bdw_gc_found=no\n \n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n-        #include <gc/gc.h>\n-        int main() {\n-          GC_init();\n-          return 0;\n-        }\n+          #include <gc/gc.h>\n+          int main() {\n+            GC_init();\n+            return 0;\n+          }\n \n _ACEOF\n if ac_fn_c_try_run \"$LINENO\"; then :\n@@ -11657,19 +11669,20 @@ else\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n-  CFLAGS=$save_CFLAGS\n-  LIBS=$save_LIBS\n-  if test x$enable_objc_gc = xauto && test x$system_bdw_gc_found = xno; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: system bdw-gc not found, not building libobjc_gc\" >&5\n+    CFLAGS=$save_CFLAGS\n+    LIBS=$save_LIBS\n+    if test x$enable_objc_gc = xauto && test x$system_bdw_gc_found = xno; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: system bdw-gc not found, not building libobjc_gc\" >&5\n $as_echo \"$as_me: WARNING: system bdw-gc not found, not building libobjc_gc\" >&2;}\n-    use_bdw_gc=no\n-  elif test x$enable_objc_gc = xyes && test x$system_bdw_gc_found = xno; then\n-    as_fn_error \"system bdw-gc required but not found\" \"$LINENO\" 5\n-  else\n-    use_bdw_gc=yes\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: found\" >&5\n+      use_bdw_gc=no\n+    elif test x$enable_objc_gc = xyes && test x$system_bdw_gc_found = xno; then\n+      as_fn_error \"system bdw-gc required but not found\" \"$LINENO\" 5\n+    else\n+      use_bdw_gc=yes\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: found\" >&5\n $as_echo \"found\" >&6; }\n-  fi\n+    fi\n+  esac\n esac\n \n if test \"$use_bdw_gc\" = no; then"}, {"sha": "c6d48f787ae10a4dafc956bd27f9605ae5a83915", "filename": "libobjc/configure.ac", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8465132c9b8b8dd9a98f97bbba93b6fd8da1da44/libobjc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.ac?ref=8465132c9b8b8dd9a98f97bbba93b6fd8da1da44", "patch": "@@ -256,16 +256,19 @@ no)\n       for i in `echo $with_target_bdw_gc_include | tr ',' ' '`; do\n         case \"$i\" in\n           *=*) sd=${i%%=*}; d=${i#*=} ;;\n-          *) sd=.; d=$i ;;\n+          *) sd=.; d=$i; fallback=$i ;;\n         esac\n         if test \"$mldir\" = \"$sd\"; then\n           bdw_val=$d\n         fi\n       done\n-      if test \"x$bdw_val\" = x; then\n+      if test \"x$bdw_val\" = x && test \"x$bdw_inc_dir\" = x && test \"x$fallback\" != x; then\n+        bdw_inc_dir=\"$fallback\"\n+      elif test \"x$bdw_val\" = x; then\n         AC_MSG_ERROR([no multilib path ($mldir) found in --with-target-bdw-gc-include])\n+      else\n+        bdw_inc_dir=\"$bdw_val\"\n       fi\n-      bdw_inc_dir=\"$bdw_val\"\n     fi\n     bdw_val=\n     if test \"x$with_target_bdw_gc_lib\" != x; then\n@@ -290,45 +293,55 @@ no)\n       AC_MSG_ERROR([no multilib path ($mldir) found in --with-target-bdw-gc-lib])\n     fi\n     BDW_GC_CFLAGS=\"-I$bdw_inc_dir\"\n-    BDW_GC_LIBS=\"-L$bdw_lib_dir -lgc\"\n+    if test -f $bdw_lib_dir/libgc.la; then\n+      BDW_GC_LIBS=\"$bdw_lib_dir/libgc.la\"\n+    else\n+      BDW_GC_LIBS=\"-L$bdw_lib_dir -lgc\"\n+    fi\n     AC_MSG_RESULT([found])\n   fi\n \n-  AC_MSG_CHECKING([for system boehm-gc])\n-  save_CFLAGS=$CFLAGS\n-  save_LIBS=$LIBS\n-  CFLAGS=\"$CFLAGS $BDW_GC_CFLAGS\"\n-  LIBS=\"$LIBS $BDW_GC_LIBS\"\n-  dnl the link test is not good enough for ARM32 multilib detection,\n-  dnl first check to link, then to run\n-  AC_LINK_IFELSE(\n-    [AC_LANG_PROGRAM([#include <gc/gc.h>],[GC_init()])],\n-    [\n-      AC_RUN_IFELSE([AC_LANG_SOURCE([[\n-        #include <gc/gc.h>\n-        int main() {\n-          GC_init();\n-          return 0;\n-        }\n-        ]])],\n-        [system_bdw_gc_found=yes],\n-        [system_bdw_gc_found=no],\n-        dnl assume no system boehm-gc for cross builds ...\n-        [system_bdw_gc_found=no]\n-      )\n-    ],\n-    [system_bdw_gc_found=no])\n-  CFLAGS=$save_CFLAGS\n-  LIBS=$save_LIBS\n-  if test x$enable_objc_gc = xauto && test x$system_bdw_gc_found = xno; then\n-    AC_MSG_WARN([system bdw-gc not found, not building libobjc_gc])\n-    use_bdw_gc=no\n-  elif test x$enable_objc_gc = xyes && test x$system_bdw_gc_found = xno; then\n-    AC_MSG_ERROR([system bdw-gc required but not found])\n-  else\n+  case \"$BDW_GC_LIBS\" in\n+  *libgc.la)\n     use_bdw_gc=yes\n-    AC_MSG_RESULT([found])\n-  fi\n+    ;;\n+  *)\n+    AC_MSG_CHECKING([for system boehm-gc])\n+    save_CFLAGS=$CFLAGS\n+    save_LIBS=$LIBS\n+    CFLAGS=\"$CFLAGS $BDW_GC_CFLAGS\"\n+    LIBS=\"$LIBS $BDW_GC_LIBS\"\n+    dnl the link test is not good enough for ARM32 multilib detection,\n+    dnl first check to link, then to run\n+    AC_LINK_IFELSE(\n+      [AC_LANG_PROGRAM([#include <gc/gc.h>],[GC_init()])],\n+      [\n+        AC_RUN_IFELSE([AC_LANG_SOURCE([[\n+          #include <gc/gc.h>\n+          int main() {\n+            GC_init();\n+            return 0;\n+          }\n+          ]])],\n+          [system_bdw_gc_found=yes],\n+          [system_bdw_gc_found=no],\n+          dnl assume no system boehm-gc for cross builds ...\n+          [system_bdw_gc_found=no]\n+        )\n+      ],\n+      [system_bdw_gc_found=no])\n+    CFLAGS=$save_CFLAGS\n+    LIBS=$save_LIBS\n+    if test x$enable_objc_gc = xauto && test x$system_bdw_gc_found = xno; then\n+      AC_MSG_WARN([system bdw-gc not found, not building libobjc_gc])\n+      use_bdw_gc=no\n+    elif test x$enable_objc_gc = xyes && test x$system_bdw_gc_found = xno; then\n+      AC_MSG_ERROR([system bdw-gc required but not found])\n+    else\n+      use_bdw_gc=yes\n+      AC_MSG_RESULT([found])\n+    fi\n+  esac\n esac\n \n if test \"$use_bdw_gc\" = no; then"}]}