{"sha": "ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlZDg4YjEzMTVlNWQwYWJlN2Q1Y2YzZTcyZjdhNDc4MTUxZDc4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-25T08:47:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-25T08:47:33Z"}, "message": "re PR libstdc++/22515 (operator>>(istream, string/CharT*) can be faster)\n\n2005-07-24  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/22515\n\t* include/bits/basic_string.h: Declare the specialization\n\toperator>>(basic_istream<char>&, basic_string<char>&).\n\t* include/std/std_istream.h: Declate the specialization\n\toperator>>(basic_istream<char>&, char*).\n\t* include/std/std_streambuf.h (basic_streambuf): Add friend\n\tdeclarations for the above.\n\t* src/istream.cc: Define the above.\n\t* testsuite/27_io/basic_istream/extractors_character/char/4.cc: New.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/performance/27_io/ifstream_extract_chars.cc: Likewise.\n\nFrom-SVN: r102353", "tree": {"sha": "87d3c80e2398847cef0634f8a19a029b5b39d898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87d3c80e2398847cef0634f8a19a029b5b39d898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/comments", "author": null, "committer": null, "parents": [{"sha": "0dc42b03d364d14f6e31d4021201f8a1d6323da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc42b03d364d14f6e31d4021201f8a1d6323da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc42b03d364d14f6e31d4021201f8a1d6323da6"}], "stats": {"total": 463, "additions": 459, "deletions": 4}, "files": [{"sha": "557701f5787a1007349abd5f01394d83631600c8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -1,3 +1,18 @@\n+2005-07-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/22515\n+\t* include/bits/basic_string.h: Declare the specialization\n+\toperator>>(basic_istream<char>&, basic_string<char>&).\n+\t* include/std/std_istream.h: Declate the specialization\n+\toperator>>(basic_istream<char>&, char*).\n+\t* include/std/std_streambuf.h (basic_streambuf): Add friend\n+\tdeclarations for the above.\n+\t* src/istream.cc: Define the above.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/4.cc: New.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/performance/27_io/ifstream_extract_chars.cc: Likewise.\n+\n 2005-07-20  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/streambuf.tcc (xsgetn, xsputn): Use streamsize"}, {"sha": "ad1324a3f71607fb625f447ab7442eebc10882c9", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -2373,6 +2373,10 @@ namespace std\n     operator>>(basic_istream<_CharT, _Traits>& __is,\n \t       basic_string<_CharT, _Traits, _Alloc>& __str);\n \n+  template<>\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>& __is, basic_string<char>& __str);\n+\n   /**\n    *  @brief  Write string to a stream.\n    *  @param os  Output stream."}, {"sha": "cec598938a5a1a40fe767e3850b733e6f5ffde97", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -1,6 +1,6 @@\n // Input streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -723,7 +723,12 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);\n-  \n+\n+  // Explicit specialization declaration, defined in src/istream.cc.\n+  template<>\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>& __in, char* __s);\n+\n   template<class _Traits>\n     basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)"}, {"sha": "efb39471f7639d034c5cc1e0b3e5f7c705dee980", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -1,6 +1,6 @@\n // Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -153,7 +153,16 @@ namespace std\n       friend streamsize\n       __copy_streambufs<>(__streambuf_type* __sbin,\n \t\t\t  __streambuf_type* __sbout);\n-\n+      \n+      template<typename _CharT2, typename _Traits2>\n+        friend basic_istream<_CharT2, _Traits2>&\n+        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);\n+      \n+      template<typename _CharT2, typename _Traits2, typename _Alloc>\n+        friend basic_istream<_CharT2, _Traits2>&\n+        operator>>(basic_istream<_CharT2, _Traits2>&,\n+\t\t   basic_string<_CharT2, _Traits2, _Alloc>&);\n+      \n       template<typename _CharT2, typename _Traits2, typename _Alloc>\n         friend basic_istream<_CharT2, _Traits2>&\n         getline(basic_istream<_CharT2, _Traits2>&,"}, {"sha": "15ff41afc73dc13494e85a08463a1aba55339721", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -183,6 +183,157 @@ namespace std\n       return *this;\n     }\n \n+  template<>\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>& __in, char* __s)\n+    {\n+      typedef basic_istream<char>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef __istream_type::__ctype_type\t__ctype_type;\n+\n+      streamsize __extracted = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      __istream_type::sentry __cerb(__in, false);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      // Figure out how many characters to extract.\n+\t      streamsize __num = __in.width();\n+\t      if (__num <= 0)\n+\t\t__num = numeric_limits<streamsize>::max();\n+\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __num - 1\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(ctype_base::space,\n+\t\t\t\t __traits_type::to_char_type(__c)))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__num - __extracted\n+\t\t\t\t\t\t\t  - 1));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      __size = (__ct.scan_is(ctype_base::space,\n+\t\t\t\t\t     __sb->gptr() + 1,\n+\t\t\t\t\t     __sb->gptr() + __size)\n+\t\t\t\t- __sb->gptr());\n+\t\t      __traits_type::copy(__s, __sb->gptr(), __size);\n+\t\t      __s += __size;\n+\t\t      __sb->gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      *__s++ = __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 68.  Extractors for char* should store null at end\n+\t      *__s = __char_type();\n+\t      __in.width(0);\n+\t    }\n+\t  catch(...)\n+\t    { __in._M_setstate(ios_base::badbit); }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n+  template<>\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>& __in, basic_string<char>& __str)\n+    {\n+      typedef basic_istream<char>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_string<char>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      __istream_type::sentry __cerb(__in, false);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      __str.erase();\n+\t      const streamsize __w = __in.width();\n+\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n+\t\t                              : __str.max_size();\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(ctype_base::space,\n+\t\t\t\t __traits_type::to_char_type(__c)))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      __size = (__ct.scan_is(ctype_base::space,\n+\t\t\t\t\t     __sb->gptr() + 1,\n+\t\t\t\t\t     __sb->gptr() + __size)\n+\t\t\t\t- __sb->gptr());\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      __in.width(0);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n   template<>\n     basic_istream<char>&\n     getline(basic_istream<char>& __in, basic_string<char>& __str,"}, {"sha": "73a7bec8f28d043a1ae7e385aa5f6346a8d751c7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/4.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -0,0 +1,90 @@\n+// 2005-07-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string prepare(string::size_type len, unsigned nchunks)\n+{\n+  string ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (string::size_type j = 0; j < len; ++j)\n+\tret.push_back('a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(' ');\n+    }\n+  return ret;\n+}\n+\n+void check(istream& stream, const string& str, unsigned nchunks)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  char* chunk = new char[str.size()];\n+  memset(chunk, 'X', str.size());\n+\n+  string::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n+\n+  while (stream >> chunk)\n+    {\n+      index_new = str.find(' ', index);\n+      VERIFY( !str.compare(index, index_new - index, chunk) );\n+      index = index_new + 1;\n+      ++n;\n+      memset(chunk, 'X', str.size());\n+    }\n+  VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n+\n+  delete[] chunk;\n+}\n+\n+// istream& operator>>(istream&, charT*)\n+void test01()\n+{\n+  const char filename[] = \"inserters_extractors-4.txt\";\n+\n+  const unsigned nchunks = 10;\n+  const string data = prepare(666, nchunks);\n+\n+  ofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  ifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data, nchunks);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f2c1584380d4a30f0f0fc993a44e38b8b92f1903", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -0,0 +1,90 @@\n+// 2005-07-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+wstring prepare(wstring::size_type len, unsigned nchunks)\n+{\n+  wstring ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (wstring::size_type j = 0; j < len; ++j)\n+\tret.push_back(L'a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(L' ');\n+    }\n+  return ret;\n+}\n+\n+void check(wistream& stream, const wstring& str, unsigned nchunks)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  wchar_t* chunk = new wchar_t[str.size()];\n+  wmemset(chunk, L'X', str.size());\n+\n+  wstring::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n+\n+  while (stream >> chunk)\n+    {\n+      index_new = str.find(' ', index);\n+      VERIFY( !str.compare(index, index_new - index, chunk) );\n+      index = index_new + 1;\n+      ++n;\n+      wmemset(chunk, L'X', str.size());\n+    }\n+  VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n+\n+  delete[] chunk;\n+}\n+\n+// istream& operator>>(istream&, charT*)\n+void test01()\n+{\n+  const char filename[] = \"inserters_extractors-4.txt\";\n+\n+  const unsigned nchunks = 10;\n+  const wstring data = prepare(666, nchunks);\n+\n+  wofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  wifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data, nchunks);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "91a318b8934a7643c54bfba09798ee18ca6d9fca", "filename": "libstdc++-v3/testsuite/performance/27_io/ifstream_extract_chars.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_extract_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed88b1315e5d0abe7d5cf3e72f7a478151d78e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_extract_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_extract_chars.cc?ref=ceed88b1315e5d0abe7d5cf3e72f7a478151d78e", "patch": "@@ -0,0 +1,91 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdio>\n+#include <fstream>\n+#include <string>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/22515\n+int main() \n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const char filename[] = \"tmp_perf_chars.txt\";\n+  const unsigned lines = 200000;\n+  const unsigned line_length = 200;\n+\n+  char* line = new char[line_length + 2];\n+\n+  // Construct data.\n+  {\n+    memset(line, 'x', line_length);\n+    line[line_length] = '\\n';\n+    line[line_length + 1] = '\\0';\n+    \n+    ofstream out(filename);\n+    for (unsigned i = 0; i < lines; ++i)\n+      out << line;\n+  }\n+  \n+  // operator>>(basic_istream<char>& __in, basic_string<char>& __str)\n+  {\n+    start_counters(time, resource);\n+    for (int iter = 0; iter < 25; ++iter)\n+      {\n+\tifstream file(filename);\n+\tstring string_line;\n+\t\n+\twhile (file >> string_line);\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"string&\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+  \n+  // operator>>(basic_istream<char>& __in, char* __s)\n+  {\n+    start_counters(time, resource);\n+    for (int iter = 0; iter < 25; ++iter)\n+      {\n+\tifstream file(filename);\n+\t\n+\twhile (file >> line);\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"char*\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  delete[] line;\n+  unlink(filename);\n+  return 0;\n+}"}]}