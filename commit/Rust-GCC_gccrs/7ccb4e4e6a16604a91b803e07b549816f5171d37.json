{"sha": "7ccb4e4e6a16604a91b803e07b549816f5171d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjYjRlNGU2YTE2NjA0YTkxYjgwM2UwN2I1NDk4MTZmNTE3MWQzNw==", "commit": {"author": {"name": "Prachi Godbole", "email": "prachi.godbole@imgtec.com", "date": "2015-07-23T07:58:20Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2015-07-23T07:58:20Z"}, "message": "I6400 scheduling.\n\ngcc/\n\t* config/mips/i6400.md: New file.\n\t* config/mips/mips-cpus.def (mips32r6): Change to PROCESSOR_I6400.\n\t(mips64r6): Likewise.\n\t(i6400): Define.\n\t* config/mips/mips-tables.opt: Regenerate.\n\t* config/mips/mips.c (mips_rtx_cost_data): Add I6400 processor.\n\t(mips_issue_rate): Add support for i6400.\n\t(mips_multipass_dfa_lookahead): Likewise.\n\t* config/mips/mips.h (TUNE_I6400): Define.\n\t* config/mips/mips.md: Include i6400.md.\n\t(processor): Add i6400.\n\t* doc/invoke.texi (-march=@var{arch}): Add i6400.\n\nFrom-SVN: r226090", "tree": {"sha": "f2611b5cd58be9c049a91d35c851db7339abe1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2611b5cd58be9c049a91d35c851db7339abe1de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ccb4e4e6a16604a91b803e07b549816f5171d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ccb4e4e6a16604a91b803e07b549816f5171d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ccb4e4e6a16604a91b803e07b549816f5171d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ccb4e4e6a16604a91b803e07b549816f5171d37/comments", "author": null, "committer": null, "parents": [{"sha": "2fde61e3caf4c4660743e53497f52b65da1fe760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fde61e3caf4c4660743e53497f52b65da1fe760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fde61e3caf4c4660743e53497f52b65da1fe760"}], "stats": {"total": 188, "additions": 184, "deletions": 4}, "files": [{"sha": "c034124e558f818a410ee49472be4857aeca2025", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -1,3 +1,18 @@\n+2015-07-23  Prachi Godbole  <prachi.godbole@imgtec.com>\n+\n+\t* config/mips/i6400.md: New file.\n+\t* config/mips/mips-cpus.def (mips32r6): Change to PROCESSOR_I6400.\n+\t(mips64r6): Likewise.\n+\t(i6400): Define.\n+\t* config/mips/mips-tables.opt: Regenerate.\n+\t* config/mips/mips.c (mips_rtx_cost_data): Add I6400 processor.\n+\t(mips_issue_rate): Add support for i6400.\n+\t(mips_multipass_dfa_lookahead): Likewise.\n+\t* config/mips/mips.h (TUNE_I6400): Define.\n+\t* config/mips/mips.md: Include i6400.md.\n+\t(processor): Add i6400.\n+\t* doc/invoke.texi (-march=@var{arch}): Add i6400.\n+\n 2015-07-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/66916"}, {"sha": "a32086f65b706876b7dfae6c59be01911f686313", "filename": "gcc/config/mips/i6400.md", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fi6400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fi6400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fi6400.md?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -0,0 +1,142 @@\n+;; DFA-based pipeline description for I6400.\n+;;\n+;; Copyright (C) 2015 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"i6400_int_pipe, i6400_mdu_pipe, i6400_fpu_short_pipe,\n+\t\t   i6400_fpu_long_pipe\")\n+\n+(define_cpu_unit \"i6400_gpmuldiv\" \"i6400_mdu_pipe\")\n+(define_cpu_unit \"i6400_agen, i6400_alu1, i6400_lsu\" \"i6400_int_pipe\")\n+(define_cpu_unit \"i6400_control, i6400_ctu, i6400_alu0\" \"i6400_int_pipe\")\n+\n+;; Short FPU pipeline.\n+(define_cpu_unit \"i6400_fpu_short\" \"i6400_fpu_short_pipe\")\n+\n+;; Long FPU pipeline.\n+(define_cpu_unit \"i6400_fpu_long, i6400_fpu_apu\" \"i6400_fpu_long_pipe\")\n+\n+(define_reservation \"i6400_control_ctu\" \"i6400_control, i6400_ctu\")\n+(define_reservation \"i6400_control_alu0\" \"i6400_control, i6400_alu0\")\n+(define_reservation \"i6400_agen_lsu\" \"i6400_agen, i6400_lsu\")\n+(define_reservation \"i6400_agen_alu1\" \"i6400_agen, i6400_alu1\")\n+\n+;;\n+;; FPU pipe\n+;;\n+\n+;; fabs, fneg\n+(define_insn_reservation \"i6400_fpu_fabs\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"fabs,fneg,fmove\"))\n+  \"i6400_fpu_short, i6400_fpu_apu\")\n+\n+;; fadd, fsub, fcvt\n+(define_insn_reservation \"i6400_fpu_fadd\" 4\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"fadd, fcvt\"))\n+  \"i6400_fpu_long, i6400_fpu_apu\")\n+\n+;; fmul\n+(define_insn_reservation \"i6400_fpu_fmul\" 5\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"fmul\"))\n+  \"i6400_fpu_long, i6400_fpu_apu\")\n+\n+;; div, sqrt (Double Precision)\n+(define_insn_reservation \"i6400_fpu_div_df\" 30\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (and (eq_attr \"mode\" \"DF\")\n+\t    (eq_attr \"type\" \"fdiv,frdiv,fsqrt,frsqrt\")))\n+  \"i6400_fpu_long+i6400_fpu_apu*30\")\n+\n+;; div, sqrt (Single Precision)\n+(define_insn_reservation \"i6400_fpu_div_sf\" 22\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"fdiv,frdiv,fsqrt,frsqrt\"))\n+  \"i6400_fpu_long+i6400_fpu_apu*22\")\n+\n+;;\n+;; Integer pipe\n+;;\n+\n+;; and, lui, shifts, seb, seh\n+(define_insn_reservation \"i6400_int_logical\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"move_type\" \"logical,const,andi,sll0,signext\"))\n+  \"i6400_control_alu0 | i6400_agen_alu1\")\n+\n+;; addi, addiu, ori, xori, add, addu, sub, nor\n+(define_insn_reservation \"i6400_int_add\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"alu_type\" \"add,sub,or,xor,nor\"))\n+  \"i6400_control_alu0 | i6400_agen_alu1\")\n+\n+;; shifts, clo, clz, cond move, arith\n+(define_insn_reservation \"i6400_int_arith\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"shift,slt,move,clz,condmove,arith\"))\n+  \"i6400_control_alu0 | i6400_agen_alu1\")\n+\n+;; nop\n+(define_insn_reservation \"i6400_int_nop\" 0\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"nop\"))\n+  \"nothing\")\n+\n+;; mult, multu, mul\n+(define_insn_reservation \"i6400_int_mult\" 4\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"imul3,imul\"))\n+  \"i6400_gpmuldiv\")\n+\n+;; divide\n+(define_insn_reservation \"i6400_int_div\" 32\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"i6400_gpmuldiv*32\")\n+\n+;; Load lb, lbu, lh, lhu, lq, lw, lw_i2f, lwxs\n+(define_insn_reservation \"i6400_int_load\" 3\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"move_type\" \"load\"))\n+  \"i6400_agen_lsu\")\n+\n+;; store\n+(define_insn_reservation \"i6400_int_store\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"move_type\" \"store\"))\n+  \"i6400_agen_lsu\")\n+\n+;; prefetch\n+(define_insn_reservation \"i6400_int_prefetch\" 3\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"prefetch\"))\n+  \"i6400_agen_lsu\")\n+\n+;; branch and jump\n+(define_insn_reservation \"i6400_int_branch\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"type\" \"branch,jump\"))\n+  \"i6400_control_ctu\")\n+\n+;; call\n+(define_insn_reservation \"i6400_int_call\" 1\n+  (and (eq_attr \"cpu\" \"i6400\")\n+       (eq_attr \"jal\" \"indirect,direct\"))\n+  \"i6400_control_ctu\")"}, {"sha": "e0c77f8f4c9c7089f60d88a045745fcb4c602c90", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -50,13 +50,13 @@ MIPS_CPU (\"mips32r2\", PROCESSOR_74KF2_1, 33, PTF_AVOID_BRANCHLIKELY)\n    as mips32r2.  */\n MIPS_CPU (\"mips32r3\", PROCESSOR_M4K, 34, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips32r5\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips32r6\", PROCESSOR_W32, 37, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32r6\", PROCESSOR_I6400, 37, 0)\n MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY)\n /* ??? For now just tune the generic MIPS64r2 and above for 5KC as well.   */\n MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64r3\", PROCESSOR_5KC, 66, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64r5\", PROCESSOR_5KC, 68, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips64r6\", PROCESSOR_W64, 69, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips64r6\", PROCESSOR_I6400, 69, 0)\n \n /* MIPS I processors.  */\n MIPS_CPU (\"r3000\", PROCESSOR_R3000, 1, 0)\n@@ -170,3 +170,6 @@ MIPS_CPU (\"octeon+\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"octeon2\", PROCESSOR_OCTEON2, 65, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"octeon3\", PROCESSOR_OCTEON3, 65, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"xlp\", PROCESSOR_XLP, 65, PTF_AVOID_BRANCHLIKELY)\n+\n+/* MIPS64 Release 6 processors.  */\n+MIPS_CPU (\"i6400\", PROCESSOR_I6400, 69, 0)"}, {"sha": "b83658fdf72eeff9e2692c2d72039928f818c1a8", "filename": "gcc/config/mips/mips-tables.opt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-tables.opt?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -693,3 +693,5 @@ Enum(mips_arch_opt_value) String(octeon3) Value(100) Canonical\n EnumValue\n Enum(mips_arch_opt_value) String(xlp) Value(101) Canonical\n \n+EnumValue\n+Enum(mips_arch_opt_value) String(i6400) Value(102) Canonical"}, {"sha": "bf0f84f5356853a51ebf1ad58f9b197cab915c68", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -1293,6 +1293,19 @@ static const struct mips_rtx_cost_data\n     COSTS_N_INSNS (68),           /* int_div_di */\n \t\t     1,           /* branch_cost */\n \t\t     4            /* memory_latency */\n+  },\n+  { /* I6400 */\n+    COSTS_N_INSNS (4),            /* fp_add */\n+    COSTS_N_INSNS (5),            /* fp_mult_sf */\n+    COSTS_N_INSNS (5),            /* fp_mult_df */\n+    COSTS_N_INSNS (32),           /* fp_div_sf */\n+    COSTS_N_INSNS (32),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (5),            /* int_mult_di */\n+    COSTS_N_INSNS (36),           /* int_div_si */\n+    COSTS_N_INSNS (36),           /* int_div_di */\n+\t\t    2,            /* branch_cost */\n+\t\t    4             /* memory_latency */\n   }\n };\n \f\n@@ -13687,6 +13700,7 @@ mips_issue_rate (void)\n     case PROCESSOR_OCTEON:\n     case PROCESSOR_OCTEON2:\n     case PROCESSOR_OCTEON3:\n+    case PROCESSOR_I6400:\n       return 2;\n \n     case PROCESSOR_SB1:\n@@ -13836,7 +13850,7 @@ mips_multipass_dfa_lookahead (void)\n   if (TUNE_OCTEON)\n     return 2;\n \n-  if (TUNE_P5600)\n+  if (TUNE_P5600 || TUNE_I6400)\n     return 4;\n \n   return 0;"}, {"sha": "d17a833c743ffd9d0dcf36f56a3246d07a50c70d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -277,6 +277,7 @@ struct mips_cpu_info {\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1\t\t\\\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n #define TUNE_P5600                  (mips_tune == PROCESSOR_P5600)\n+#define TUNE_I6400                  (mips_tune == PROCESSOR_I6400)\n \n /* Whether vector modes and intrinsics for ST Microelectronics\n    Loongson-2E/2F processors should be enabled.  In o32 pairs of\n@@ -732,7 +733,7 @@ struct mips_cpu_info {\n      %{march=mips64r2|march=loongson3a|march=octeon|march=xlp: -mips64r2} \\\n      %{march=mips64r3: -mips64r3} \\\n      %{march=mips64r5: -mips64r5} \\\n-     %{march=mips64r6: -mips64r6}}\"\n+     %{march=mips64r6|march=i6400: -mips64r6}}\"\n \n /* A spec that injects the default multilib ISA if no architecture is\n    specified.  */"}, {"sha": "2954a12702b0c858b0ba25c20768f6ad95c22ee6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -70,6 +70,7 @@\n   w32\n   w64\n   m5100\n+  i6400\n ])\n \n (define_c_enum \"unspec\" [\n@@ -1086,6 +1087,7 @@\n   (eq_attr \"type\" \"ghost\")\n   \"nothing\")\n \n+(include \"i6400.md\")\n (include \"p5600.md\")\n (include \"m5100.md\")\n (include \"4k.md\")"}, {"sha": "54e7a679c2f71408cb867f233bf5ddd1abd3f6f8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ccb4e4e6a16604a91b803e07b549816f5171d37/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7ccb4e4e6a16604a91b803e07b549816f5171d37", "patch": "@@ -17041,6 +17041,7 @@ The processor names are:\n @samp{34kc}, @samp{34kf2_1}, @samp{34kf1_1}, @samp{34kn},\n @samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1}, @samp{74kf3_2},\n @samp{1004kc}, @samp{1004kf2_1}, @samp{1004kf1_1},\n+@samp{i6400},\n @samp{interaptiv},\n @samp{loongson2e}, @samp{loongson2f}, @samp{loongson3a},\n @samp{m4k},"}]}