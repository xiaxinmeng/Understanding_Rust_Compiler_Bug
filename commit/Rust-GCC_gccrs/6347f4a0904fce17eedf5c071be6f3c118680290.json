{"sha": "6347f4a0904fce17eedf5c071be6f3c118680290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0N2Y0YTA5MDRmY2UxN2VlZGY1YzA3MWJlNmYzYzExODY4MDI5MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-02-15T19:31:12Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-02-18T21:27:38Z"}, "message": "Add retain attribute to place symbols in SHF_GNU_RETAIN section\n\nWhen building Linux kernel, ld in bninutils 2.36 with GCC 11 generates\nthousands of\n\nld: warning: orphan section `.data.event_initcall_finish' from `init/main.o' being placed in section `.data.event_initcall_finish'\nld: warning: orphan section `.data.event_initcall_start' from `init/main.o' being placed in section `.data.event_initcall_start'\nld: warning: orphan section `.data.event_initcall_level' from `init/main.o' being placed in section `.data.event_initcall_level'\n\nSince these sections are marked with SHF_GNU_RETAIN, they are placed in\nseparate sections.  They become orphan sections since they aren't expected\nin the Linux kernel linker script. But orphan sections normally don't work\nwell with the Linux kernel linker script and the resulting kernel crashed.\n\nAdd the \"retain\" attribute to place symbols in separate SHF_GNU_RETAIN\nsections.  Issue a warning if the configured assembler/linker doesn't\nsupport SHF_GNU_RETAIN.\n\ngcc/\n\n\tPR target/99113\n\t* varasm.c (get_section): Replace SUPPORTS_SHF_GNU_RETAIN with\n\tlooking up the retain attribute.\n\t(resolve_unique_section): Likewise.\n\t(get_variable_section): Likewise.\n\t(switch_to_section): Likewise.  Warn when a symbol without the\n\tretain attribute and a symbol with the retain attribute are\n\tplaced in the section with the same name, instead of the used\n\tattribute.\n\t* doc/extend.texi: Document the \"retain\" attribute.\n\ngcc/c-family/\n\n\tPR target/99113\n\t* c-attribs.c (c_common_attribute_table): Add the \"retain\"\n\tattribute.\n\t(handle_retain_attribute): New function.\n\ngcc/testsuite/\n\n\tPR target/99113\n\t* c-c++-common/attr-retain-1.c: New test.\n\t* c-c++-common/attr-retain-2.c: Likewise.\n\t* c-c++-common/attr-retain-3.c: Likewise.\n\t* c-c++-common/attr-retain-4.c: Likewise.\n\t* c-c++-common/attr-retain-5.c: Likewise.\n\t* c-c++-common/attr-retain-6.c: Likewise.\n\t* c-c++-common/attr-retain-7.c: Likewise.\n\t* c-c++-common/attr-retain-8.c: Likewise.\n\t* c-c++-common/attr-retain-9.c: Likewise.\n\t* c-c++-common/pr99113.c: Likewise.\n\t* gcc.c-torture/compile/attr-retain-1.c: Likewise.\n\t* gcc.c-torture/compile/attr-retain-2.c: Likewise.\n\t* c-c++-common/attr-used.c: Don't expect SHF_GNU_RETAIN section.\n\t* c-c++-common/attr-used-2.c: Likewise.\n\t* c-c++-common/attr-used-3.c: Likewise.\n\t* c-c++-common/attr-used-4.c: Likewise.\n\t* c-c++-common/attr-used-9.c: Likewise.\n\t* gcc.c-torture/compile/attr-used-retain-1.c: Likewise.\n\t* gcc.c-torture/compile/attr-used-retain-2.c: Likewise.\n\t* c-c++-common/attr-used-5.c: Don't expect warning for the used\n\tattribute nor SHF_GNU_RETAIN section.\n\t* c-c++-common/attr-used-6.c: Likewise.\n\t* c-c++-common/attr-used-7.c: Likewise.\n\t* c-c++-common/attr-used-8.c: Likewise.", "tree": {"sha": "0dfd837ed13bbbe2dece0db65b7cb4c049c14dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfd837ed13bbbe2dece0db65b7cb4c049c14dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6347f4a0904fce17eedf5c071be6f3c118680290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6347f4a0904fce17eedf5c071be6f3c118680290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6347f4a0904fce17eedf5c071be6f3c118680290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6347f4a0904fce17eedf5c071be6f3c118680290/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9db6929d926222aee0628b93f77cd20cf3adc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9db6929d926222aee0628b93f77cd20cf3adc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9db6929d926222aee0628b93f77cd20cf3adc4"}], "stats": {"total": 314, "additions": 271, "deletions": 43}, "files": [{"sha": "ae31e4c1f6fa9450377e94e05f8dbe7e4c2b2238", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -163,6 +163,7 @@ static tree handle_objc_root_class_attribute (tree *, tree, tree, int, bool *);\n static tree handle_objc_nullability_attribute (tree *, tree, tree, int, bool *);\n static tree handle_signed_bool_precision_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t    bool *);\n+static tree handle_retain_attribute (tree *, tree, tree, int, bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -328,6 +329,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_used_attribute, NULL },\n   { \"unused\",                 0, 0, false, false, false, false,\n \t\t\t      handle_unused_attribute, NULL },\n+  { \"retain\",                 0, 0, true,  false, false, false,\n+\t\t\t      handle_retain_attribute, NULL },\n   { \"externally_visible\",     0, 0, true,  false, false, false,\n \t\t\t      handle_externally_visible_attribute, NULL },\n   { \"no_reorder\",\t      0, 0, true, false, false, false,\n@@ -1564,6 +1567,28 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"retain\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_retain_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n+\t\t\t int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  tree node = *pnode;\n+\n+  if (SUPPORTS_SHF_GNU_RETAIN\n+      && (TREE_CODE (node) == FUNCTION_DECL\n+\t  || (VAR_P (node) && TREE_STATIC (node))))\n+    ;\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"externally_visible\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "8bbb93724a93b42c3f13a164f11b4f7e4007d33a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -3913,8 +3913,10 @@ When applied to a member function of a C++ class template, the\n attribute also means that the function is instantiated if the\n class itself is instantiated.\n \n+@item retain\n+@cindex @code{retain} function attribute\n For ELF targets that support the GNU or FreeBSD OSABIs, this attribute\n-will also save the function from linker garbage collection.  To support\n+will save the function from linker garbage collection.  To support\n this behavior, functions that have not been placed in specific sections\n (e.g. by the @code{section} attribute, or the @code{-ffunction-sections}\n option), will be placed in new, unique sections.\n@@ -7504,8 +7506,10 @@ When applied to a static data member of a C++ class template, the\n attribute also means that the member is instantiated if the\n class itself is instantiated.\n \n+@item retain\n+@cindex @code{retain} variable attribute\n For ELF targets that support the GNU or FreeBSD OSABIs, this attribute\n-will also save the variable from linker garbage collection.  To support\n+will save the variable from linker garbage collection.  To support\n this behavior, variables that have not been placed in specific sections\n (e.g. by the @code{section} attribute, or the @code{-fdata-sections} option),\n will be placed in new, unique sections."}, {"sha": "d060fbf22cd6333adf1f582d6f666b618a055f2f", "filename": "gcc/testsuite/c-c++-common/attr-retain-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-1.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-options \"-O3\" } */\n+\n+static void function_declaration_before(void)\n+  __attribute__((__used__, __retain__));\n+\n+static void function_declaration_before(void) {}\n+\n+static void function_declaration_after(void) {}\n+\n+static void function_declaration_after(void)\n+  __attribute__((__used__, __retain__));\n+\n+/* { dg-final { scan-assembler \"function_declaration_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_after\" } } */\n+/* { dg-final { scan-assembler \"\\.text.*,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "6baba844adc1644055da92a462d641c517a18a47", "filename": "gcc/testsuite/c-c++-common/attr-retain-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-2.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+static int xyzzy __attribute__((__used__, __retain__)) = 1; \n+\n+void foo()\n+{\n+  int x __attribute__((__retain__)); /* { dg-warning \"attribute ignored|unused variable\" } */\n+}\n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \"\\.data.*,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "a4077a1644db8123b6620efb4217065a1f3531f5", "filename": "gcc/testsuite/c-c++-common/attr-retain-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-3.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-options \"-Wall -O2 -fcommon\" } */\n+\n+static int xyzzy __attribute__((__used__, __retain__)); \n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "590e47cec864aea033a0a18cad0df6bf3f178f21", "filename": "gcc/testsuite/c-c++-common/attr-retain-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-4.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-options \"-Wall -O2 -fcommon\" } */\n+\n+int xyzzy __attribute__((__used__, __retain__)); \n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "669fa90f24c88836bb42ce8330cfabcdae6eec70", "filename": "gcc/testsuite/c-c++-common/attr-retain-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-5.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((used, retain, section (\"__libc_freeres_fn\")))\n+static void free_mem (void)\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "1cf03a7d777f1fa32c3e6d6bc04faecfb7a9a2bd", "filename": "gcc/testsuite/c-c++-common/attr-retain-6.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-6.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((used, retain, section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((section (\"__libc_freeres_fn\")))\n+void free_mem (void)\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "08f52fccc9fa0e20455c60255bb8623b3a0a36b4", "filename": "gcc/testsuite/c-c++-common/attr-retain-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-7.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+int __attribute__((used,retain,section(\".data.foo\"))) foo2 = 2;\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "2dbec9e14f0a6563f39b7c6b10d9efc71d105290", "filename": "gcc/testsuite/c-c++-common/attr-retain-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-8.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'retain' attribute and '.*' with 'retain' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n+int __attribute__((used,retain,section(\".data.foo\"))) foo2 = 2;\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "f26e25d2b77b9f087bc595397af36537a845cedb", "filename": "gcc/testsuite/c-c++-common/attr-retain-9.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-retain-9.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"non-ELF target\" { *-*-darwin* } } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((used, retain, section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((section (\"__libc_freeres_fn\")))\n+static void free_mem (void)\n+/* { dg-warning \"defined but not used\" \"\" { target *-*-* } .-1 } */\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn\\n\" } } */\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "5849747d1e4b02d111b7f49215fe749154c12a95", "filename": "gcc/testsuite/c-c++-common/attr-used-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -9,4 +9,4 @@ void foo()\n }\n \n /* { dg-final { scan-assembler \"xyzzy\" } } */\n-/* { dg-final { scan-assembler \"\\.data.*,\\\"awR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \"\\.data.*,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "5a6ea991dc4b95c6a8f4b042797e39a64692995d", "filename": "gcc/testsuite/c-c++-common/attr-used-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -4,4 +4,4 @@\n static int xyzzy __attribute__((__used__)); \n \n /* { dg-final { scan-assembler \"xyzzy\" } } */\n-/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "40c2c659d3c70dbc12c8be173bf097db700e0cf1", "filename": "gcc/testsuite/c-c++-common/attr-used-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -4,4 +4,4 @@\n int xyzzy __attribute__((__used__)); \n \n /* { dg-final { scan-assembler \"xyzzy\" } } */\n-/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "448e19f6f0eabdf7d84218f3f138e6f65a084ffb", "filename": "gcc/testsuite/c-c++-common/attr-used-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -11,7 +11,6 @@ extern struct dtv_slotinfo_list *list;\n \n static int __attribute__ ((section (\"__libc_freeres_fn\")))\n free_slotinfo (struct dtv_slotinfo_list **elemp)\n-/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n {\n   if (!free_slotinfo (&(*elemp)->next))\n     return 0;\n@@ -25,4 +24,4 @@ static void free_mem (void)\n }\n \n /* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n-/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "b9974e2a4f29273b80709c00b9dcda873bea27da", "filename": "gcc/testsuite/c-c++-common/attr-used-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -19,10 +19,9 @@ free_slotinfo (struct dtv_slotinfo_list **elemp)\n \n __attribute__ ((section (\"__libc_freeres_fn\")))\n void free_mem (void)\n-/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n {\n   free_slotinfo (&list);\n }\n \n /* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n-/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "9c9862fcafd98c41475ab80a58d70487d833fd86", "filename": "gcc/testsuite/c-c++-common/attr-used-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -4,7 +4,6 @@\n \n int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n int __attribute__((section(\".data.foo\"))) foo1 = 1;\n-/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n \n /* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n-/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "c907ab116416bc10ed90431f4f42933da3e7c2c6", "filename": "gcc/testsuite/c-c++-common/attr-used-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -3,8 +3,7 @@\n /* { dg-options \"-Wall -O2\" } */\n \n int __attribute__((section(\".data.foo\"))) foo1 = 1;\n-/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n \n /* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n-/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "049c0beb1eee2a601164551b4f3193c6b97dbec7", "filename": "gcc/testsuite/c-c++-common/attr-used-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -25,5 +25,5 @@ static void free_mem (void)\n }\n \n /* { dg-final { scan-assembler-not \"__libc_freeres_fn\\n\" } } */\n-/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n-/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "96c6d67434612c612d6f473c42a9d229f6a5e570", "filename": "gcc/testsuite/c-c++-common/attr-used.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -11,4 +11,4 @@ static void function_declaration_after(void) __attribute__((__used__));\n \n /* { dg-final { scan-assembler \"function_declaration_before\" } } */\n /* { dg-final { scan-assembler \"function_declaration_after\" } } */\n-/* { dg-final { scan-assembler \"\\.text.*,\\\"axR\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler-not \"\\.text.*,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "01814014ac8d155a90e72387215206679e100979", "filename": "gcc/testsuite/c-c++-common/pr99113.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr99113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr99113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr99113.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+static int xyzzy __attribute__((__used__)) = 1; \n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler-not \"\\.data.*,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "6cab15547ccaf24bf58c29d5946d11ff5f919dff", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-retain-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-1.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-final { scan-assembler \".text.*,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.*,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+\n+void __attribute__((used,retain)) used_fn (void) { }\n+void unused_fn (void) { }\n+void __attribute__((hot,used,retain)) used_hot_fn (void) { }\n+void __attribute__((hot)) unused_hot_fn (void) { }\n+void __attribute__((cold,used,retain)) used_cold_fn (void) { }\n+void __attribute__((cold)) unused_cold_fn (void) { }\n+int __attribute__((used,retain)) used_bss = 0;\n+int __attribute__((used,retain)) used_data = 1;\n+const int __attribute__((used,retain)) used_rodata = 2;\n+int __attribute__((used,retain)) used_comm;\n+static int __attribute__((used,retain)) used_lcomm;\n+\n+int unused_bss = 0;\n+int unused_data = 1;\n+const int unused_rodata = 2;\n+int unused_comm;\n+static int unused_lcomm;\n+\n+/* Test switching back to the used,retained sections.  */\n+void __attribute__((used,retain)) used_fn2 (void) { }\n+int __attribute__((used,retain)) used_bss2 = 0;\n+int __attribute__((used,retain)) used_data2 = 1;\n+const int __attribute__((used,retain)) used_rodata2 = 2;\n+int __attribute__((used,retain)) used_comm2;\n+static int __attribute__((used,retain)) used_lcomm2;\n+\n+int __attribute__((used,retain,section(\".data.used_foo_sec\"))) used_foo = 2;"}, {"sha": "0208ffe37ab5e847595770309c252b99ecb29dd7", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-retain-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-retain-2.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target R_flag_in_section } } */\n+/* { dg-final { scan-assembler \".text.used_fn,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".text.used_fn2,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_bss,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_bss2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_data,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_data2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.used_rodata,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.used_rodata2,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_lcomm,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler \".bss.used_lcomm2,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+/* { dg-options \"-ffunction-sections -fdata-sections\" } */\n+\n+#include \"attr-retain-1.c\""}, {"sha": "bf5ca48c3160d7956cfa51db65a31a783633a923", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-used-retain-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target R_flag_in_section } */\n-/* { dg-final { scan-assembler \".text.*,\\\"axR\\\"\" } } */\n-/* { dg-final { scan-assembler \".bss.*,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".data.*,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".rodata.*,\\\"aR\\\"\" } } */\n-/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".text.*,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".bss.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".data.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".rodata.*,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".data.used_foo_sec,\\\"awR\\\"\" } } */\n \n void __attribute__((used)) used_fn (void) { }\n void unused_fn (void) { }"}, {"sha": "7858e62c15417a0894e04e2bf5cff77efd2e2d81", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-used-retain-2.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -1,16 +1,16 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target R_flag_in_section } */\n-/* { dg-final { scan-assembler \".text.used_fn,\\\"axR\\\"\" } } */\n-/* { dg-final { scan-assembler \".text.used_fn2,\\\"axR\\\"\" } } */\n-/* { dg-final { scan-assembler \".bss.used_bss,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".bss.used_bss2,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".data.used_data,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".data.used_data2,\\\"awR\\\"\" } } */\n-/* { dg-final { scan-assembler \".rodata.used_rodata,\\\"aR\\\"\" } } */\n-/* { dg-final { scan-assembler \".rodata.used_rodata2,\\\"aR\\\"\" } } */\n-/* { dg-final { scan-assembler \".bss.used_lcomm,\\\"awR\\\"\" { target arm-*-* } } } */\n-/* { dg-final { scan-assembler \".bss.used_lcomm2,\\\"awR\\\"\" { target arm-*-* } } } */\n-/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".text.used_fn,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".text.used_fn2,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".bss.used_bss,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".bss.used_bss2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".data.used_data,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".data.used_data2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".rodata.used_rodata,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".rodata.used_rodata2,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler-not \".bss.used_lcomm,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler-not \".bss.used_lcomm2,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler-not \".data.used_foo_sec,\\\"awR\\\"\" } } */\n /* { dg-options \"-ffunction-sections -fdata-sections\" } */\n \n #include \"attr-used-retain-1.c\""}, {"sha": "811212244a552e9bab9e1203ea9273dbab6e3725", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6347f4a0904fce17eedf5c071be6f3c118680290/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6347f4a0904fce17eedf5c071be6f3c118680290", "patch": "@@ -297,10 +297,9 @@ get_section (const char *name, unsigned int flags, tree decl,\n   slot = section_htab->find_slot_with_hash (name, htab_hash_string (name),\n \t\t\t\t\t    INSERT);\n   flags |= SECTION_NAMED;\n-  if (SUPPORTS_SHF_GNU_RETAIN\n-      && decl != nullptr\n+  if (decl != nullptr\n       && DECL_P (decl)\n-      && DECL_PRESERVE_P (decl))\n+      && lookup_attribute (\"retain\", DECL_ATTRIBUTES (decl)))\n     flags |= SECTION_RETAIN;\n   if (*slot == NULL)\n     {\n@@ -487,7 +486,7 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n   if (DECL_SECTION_NAME (decl) == NULL\n       && targetm_common.have_named_sections\n       && (flag_function_or_data_sections\n-\t  || (SUPPORTS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl))\n+\t  || lookup_attribute (\"retain\", DECL_ATTRIBUTES (decl))\n \t  || DECL_COMDAT_GROUP (decl)))\n     {\n       targetm.asm_out.unique_section (decl, reloc);\n@@ -1227,7 +1226,7 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n     vnode->get_constructor ();\n \n   if (DECL_COMMON (decl)\n-      && !(SUPPORTS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl)))\n+      && !lookup_attribute (\"retain\", DECL_ATTRIBUTES (decl)))\n     {\n       /* If the decl has been given an explicit section name, or it resides\n \t in a non-generic address space, then it isn't common, and shouldn't\n@@ -7761,18 +7760,19 @@ switch_to_section (section *new_section, tree decl)\n {\n   if (in_section == new_section)\n     {\n-      if (SUPPORTS_SHF_GNU_RETAIN\n-\t  && (new_section->common.flags & SECTION_NAMED)\n+      bool retain_p;\n+      if ((new_section->common.flags & SECTION_NAMED)\n \t  && decl != nullptr\n \t  && DECL_P (decl)\n-\t  && (!!DECL_PRESERVE_P (decl)\n+\t  && ((retain_p = !!lookup_attribute (\"retain\",\n+\t\t\t\t\t      DECL_ATTRIBUTES (decl)))\n \t      != !!(new_section->common.flags & SECTION_RETAIN)))\n \t{\n \t  /* If the SECTION_RETAIN bit doesn't match, switch to a new\n \t     section.  */\n \t  tree used_decl, no_used_decl;\n \n-\t  if (DECL_PRESERVE_P (decl))\n+\t  if (retain_p)\n \t    {\n \t      new_section->common.flags |= SECTION_RETAIN;\n \t      used_decl = decl;\n@@ -7786,8 +7786,8 @@ switch_to_section (section *new_section, tree decl)\n \t      no_used_decl = decl;\n \t    }\n \t  warning (OPT_Wattributes,\n-\t\t   \"%+qD without %<used%> attribute and %qD with \"\n-\t\t   \"%<used%> attribute are placed in a section with \"\n+\t\t   \"%+qD without %<retain%> attribute and %qD with \"\n+\t\t   \"%<retain%> attribute are placed in a section with \"\n \t\t   \"the same name\", no_used_decl, used_decl);\n \t  inform (DECL_SOURCE_LOCATION (used_decl),\n \t\t  \"%qD was declared here\", used_decl);"}]}