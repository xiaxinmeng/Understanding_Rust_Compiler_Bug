{"sha": "88a33c3406ca21d94db7ca092f3f65c898e23fda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhMzNjMzQwNmNhMjFkOTRkYjdjYTA5MmYzZjY1Yzg5OGUyM2ZkYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-11-02T21:34:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-02T21:34:51Z"}, "message": "re PR c++/19253 (bad error message / ICE for invalid template parameter)\n\n\tPR c++/19253\n\t* parser.c (cp_parser_postfix_expression): Use\n\tcp_parser_elaborated_type_specifier to handle typename-types in\n\tfunctional casts.\n\t(cp_parser_enclosed_argument_list): Skip ahead to the end of the\n\ttemplate argument list if the closing \">\" is not found.\n\tPR c++/19253\n\t* g++.dg/parse/typename8.C: Compile with -w -fpermissive.\n\t* g++.dg/parse/typename9.C: New test.\n\t* g++/dg/parse/typename10.C: Likewise.\n\nFrom-SVN: r106398", "tree": {"sha": "b1be00dcdd39d0dc2ddc74914ba77a546db44ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1be00dcdd39d0dc2ddc74914ba77a546db44ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a33c3406ca21d94db7ca092f3f65c898e23fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a33c3406ca21d94db7ca092f3f65c898e23fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a33c3406ca21d94db7ca092f3f65c898e23fda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a33c3406ca21d94db7ca092f3f65c898e23fda/comments", "author": null, "committer": null, "parents": [{"sha": "eca18fb4b61a16634e61b7cf281ab65ef3292a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca18fb4b61a16634e61b7cf281ab65ef3292a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca18fb4b61a16634e61b7cf281ab65ef3292a74"}], "stats": {"total": 85, "additions": 33, "deletions": 52}, "files": [{"sha": "3df790125ee9face0d76783f27d1cb4849d7e9ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -1,5 +1,12 @@\n 2005-11-02  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19253\n+\t* parser.c (cp_parser_postfix_expression): Use\n+\tcp_parser_elaborated_type_specifier to handle typename-types in\n+\tfunctional casts.\n+\t(cp_parser_enclosed_argument_list): Skip ahead to the end of the\n+\ttemplate argument list if the closing \">\" is not found.\n+\n \tPR c++/24569\n \t* pt.c (instantiate_decl): Use cp_finish_decl, not\n \tfinish_static_data_member_decl. "}, {"sha": "94ce45f5f2d39d4014fd746d9297d85eb430e809", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 52, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -3961,55 +3961,12 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p)\n \n     case RID_TYPENAME:\n       {\n-\tbool template_p = false;\n-\ttree id;\n \ttree type;\n-\ttree scope;\n-\n-\t/* Consume the `typename' token.  */\n-\tcp_lexer_consume_token (parser->lexer);\n-\n-\t/* Look for the optional `::' operator.  */\n-\tcp_parser_global_scope_opt (parser,\n-\t\t\t\t    /*current_scope_valid_p=*/false);\n-\t/* Look for the nested-name-specifier.  In case of error here,\n-\t   consume the trailing id to avoid subsequent error messages\n-\t   for usual cases.  */\n-\tscope = cp_parser_nested_name_specifier (parser,\n-\t\t\t\t\t\t /*typename_keyword_p=*/true,\n-\t\t\t\t\t\t /*check_dependency_p=*/true,\n-\t\t\t\t\t\t /*type_p=*/true,\n-\t\t\t\t\t\t /*is_declaration=*/true);\n-\n-\t/* Look for the optional `template' keyword.  */\n-\ttemplate_p = cp_parser_optional_template_keyword (parser);\n-\t/* We don't know whether we're looking at a template-id or an\n-\t   identifier.  */\n-\tcp_parser_parse_tentatively (parser);\n-\t/* Try a template-id.  */\n-\tid = cp_parser_template_id (parser, template_p,\n-\t\t\t\t    /*check_dependency_p=*/true,\n-\t\t\t\t    /*is_declaration=*/true);\n-\t/* If that didn't work, try an identifier.  */\n-\tif (!cp_parser_parse_definitely (parser))\n-\t  id = cp_parser_identifier (parser);\n-\n-\t/* Don't process id if nested name specifier is invalid.  */\n-\tif (!scope || scope == error_mark_node)\n-\t  return error_mark_node;\n-\t/* If we look up a template-id in a non-dependent qualifying\n-\t   scope, there's no need to create a dependent type.  */\n-\tif (TREE_CODE (id) == TYPE_DECL\n-\t    && (!TYPE_P (scope)\n-\t        || !dependent_type_p (parser->scope)))\n-\t  type = TREE_TYPE (id);\n-\t/* Create a TYPENAME_TYPE to represent the type to which the\n-\t   functional cast is being performed.  */\n-\telse\n-\t  type = make_typename_type (parser->scope, id,\n-\t\t\t\t     typename_type,\n-\t\t\t\t     /*complain=*/1);\n-\n+\t/* The syntax permitted here is the same permitted for an\n+\t   elaborated-type-specifier.  */\n+\ttype = cp_parser_elaborated_type_specifier (parser,\n+\t\t\t\t\t\t    /*is_friend=*/false,\n+\t\t\t\t\t\t    /*is_declaration=*/false);\n \tpostfix_expression = cp_parser_functional_cast (parser, type);\n       }\n       break;\n@@ -15498,11 +15455,8 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n \t\t \"a template argument list\");\n \t}\n     }\n-  else if (!cp_lexer_next_token_is (parser->lexer, CPP_GREATER))\n-    error (\"missing %<>%> to terminate the template argument list\");\n   else\n-    /* It's what we want, a '>'; consume it.  */\n-    cp_lexer_consume_token (parser->lexer);\n+    cp_parser_skip_until_found (parser, CPP_GREATER, \"`>'\");\n   /* The `>' token might be a greater-than operator again now.  */\n   parser->greater_than_is_operator_p\n     = saved_greater_than_is_operator_p;"}, {"sha": "aa01d33892a6938b642c6cc5323dc3acd6954c7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -1,3 +1,10 @@\n+2005-11-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19253\n+\t* g++.dg/parse/typename8.C: Compile with -w -fpermissive.\n+\t* g++.dg/parse/typename9.C: New test.\n+\t* g++/dg/parse/typename10.C: Likewise.\n+\n 2005-11-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR fortran/18157"}, {"sha": "64d6ae8c207c833fd596a32f293adf0beabfe6e3", "filename": "gcc/testsuite/g++.dg/parse/typename10.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename10.C?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/19253\n+\n+namespace N { struct X; }\n+\n+template<typename> struct A\n+{\n+  A<typename N::X x> a; // { dg-error \"invalid\" }\n+};"}, {"sha": "e8e762709b4b024e0d200f78e3e6fc459fa5bf78", "filename": "gcc/testsuite/g++.dg/parse/typename8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename8.C?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -4,6 +4,8 @@\n // PR 23797:ICE\n // Origin:  Volker Reichelt <reichelt@gcc.gnu.org>\n \n+// { dg-options \"-fpermissive -w\" }\n+\n struct A { typedef int X; };\n \n int i = typename A::X();"}, {"sha": "aa72cd6c5849c9ba1c3aa8694edbda5ffd0e41a9", "filename": "gcc/testsuite/g++.dg/parse/typename9.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a33c3406ca21d94db7ca092f3f65c898e23fda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C?ref=88a33c3406ca21d94db7ca092f3f65c898e23fda", "patch": "@@ -0,0 +1,3 @@\n+struct A { typedef int X; };\n+\n+int i = typename A::X(); // { dg-error \"typename\" }"}]}