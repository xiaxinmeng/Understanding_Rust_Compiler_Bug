{"sha": "98cd4d123aa14598b1f0d54c22663c8200a96d9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjZDRkMTIzYWExNDU5OGIxZjBkNTRjMjI2NjNjODIwMGE5NmQ5Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-15T19:04:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-15T19:04:07Z"}, "message": "analyzer: add -fdump-analyzer-exploded-paths\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.opt (fdump-analyzer-exploded-paths): New.\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::emit_saved_diagnostic): Implement it.\n\t* engine.cc (exploded_path::dump_to_pp): Add ext_state param and\n\tuse it to dump states if non-NULL.\n\t(exploded_path::dump): Likewise.\n\t(exploded_path::dump_to_file): New.\n\t* exploded-graph.h (exploded_path::dump_to_pp): Add ext_state\n\tparam.\n\t(exploded_path::dump): Likewise.\n\t(exploded_path::dump): Likewise.\n\t(exploded_path::dump_to_file): New.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi (-fdump-analyzer-exploded-paths): New.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1a9b8245bd7a4bc80609f6e92cc6e897370cc252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9b8245bd7a4bc80609f6e92cc6e897370cc252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cd4d123aa14598b1f0d54c22663c8200a96d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cd4d123aa14598b1f0d54c22663c8200a96d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cd4d123aa14598b1f0d54c22663c8200a96d9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cd4d123aa14598b1f0d54c22663c8200a96d9c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9711fe482b4abef0e7572809d3593631991276e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9711fe482b4abef0e7572809d3593631991276e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9711fe482b4abef0e7572809d3593631991276e"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "7b77ae8a73def27581bcbb22c9b951c9417fa69f", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=98cd4d123aa14598b1f0d54c22663c8200a96d9c", "patch": "@@ -210,6 +210,10 @@ fdump-analyzer-exploded-nodes-3\n Common RejectNegative Var(flag_dump_analyzer_exploded_nodes_3)\n Dump a textual representation of the exploded graph to SRCFILE.eg-ID.txt.\n \n+fdump-analyzer-exploded-paths\n+Common RejectNegative Var(flag_dump_analyzer_exploded_paths)\n+Dump a textual representation of each diagnostic's exploded path to SRCFILE.IDX.KIND.epath.txt.\n+\n fdump-analyzer-feasibility\n Common RejectNegative Var(flag_dump_analyzer_feasibility)\n Dump various analyzer internals to SRCFILE.*.fg.dot and SRCFILE.*.tg.dot."}, {"sha": "d005facc20bf73d2f23b4207e17788c1ea5b970d", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=98cd4d123aa14598b1f0d54c22663c8200a96d9c", "patch": "@@ -1164,6 +1164,17 @@ diagnostic_manager::emit_saved_diagnostic (const exploded_graph &eg,\n \tinform_n (loc, num_dupes,\n \t\t  \"%i duplicate\", \"%i duplicates\",\n \t\t  num_dupes);\n+      if (flag_dump_analyzer_exploded_paths)\n+\t{\n+\t  auto_timevar tv (TV_ANALYZER_DUMP);\n+\t  pretty_printer pp;\n+\t  pp_printf (&pp, \"%s.%i.%s.epath.txt\",\n+\t\t     dump_base_name, sd.get_index (), sd.m_d->get_kind ());\n+\t  char *filename = xstrdup (pp_formatted_text (&pp));\n+\t  epath->dump_to_file (filename, eg.get_ext_state ());\n+\t  inform (loc, \"exploded path written to %qs\", filename);\n+\t  free (filename);\n+\t}\n     }\n   delete pp;\n }"}, {"sha": "dc07a79e185a78e50700afa2f878456a269b9d1c", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=98cd4d123aa14598b1f0d54c22663c8200a96d9c", "patch": "@@ -3630,10 +3630,12 @@ exploded_path::feasible_p (logger *logger, feasibility_problem **out,\n   return true;\n }\n \n-/* Dump this path in multiline form to PP.  */\n+/* Dump this path in multiline form to PP.\n+   If EXT_STATE is non-NULL, then show the nodes.  */\n \n void\n-exploded_path::dump_to_pp (pretty_printer *pp) const\n+exploded_path::dump_to_pp (pretty_printer *pp,\n+\t\t\t   const extrinsic_state *ext_state) const\n {\n   for (unsigned i = 0; i < m_edges.length (); i++)\n     {\n@@ -3643,28 +3645,48 @@ exploded_path::dump_to_pp (pretty_printer *pp) const\n \t\t eedge->m_src->m_index,\n \t\t eedge->m_dest->m_index);\n       pp_newline (pp);\n+\n+      if (ext_state)\n+\teedge->m_dest->dump_to_pp (pp, *ext_state);\n     }\n }\n \n /* Dump this path in multiline form to FP.  */\n \n void\n-exploded_path::dump (FILE *fp) const\n+exploded_path::dump (FILE *fp, const extrinsic_state *ext_state) const\n {\n   pretty_printer pp;\n   pp_format_decoder (&pp) = default_tree_printer;\n   pp_show_color (&pp) = pp_show_color (global_dc->printer);\n   pp.buffer->stream = fp;\n-  dump_to_pp (&pp);\n+  dump_to_pp (&pp, ext_state);\n   pp_flush (&pp);\n }\n \n /* Dump this path in multiline form to stderr.  */\n \n DEBUG_FUNCTION void\n-exploded_path::dump () const\n+exploded_path::dump (const extrinsic_state *ext_state) const\n {\n-  dump (stderr);\n+  dump (stderr, ext_state);\n+}\n+\n+/* Dump this path verbosely to FILENAME.  */\n+\n+void\n+exploded_path::dump_to_file (const char *filename,\n+\t\t\t     const extrinsic_state &ext_state) const\n+{\n+  FILE *fp = fopen (filename, \"w\");\n+  if (!fp)\n+    return;\n+  pretty_printer pp;\n+  pp_format_decoder (&pp) = default_tree_printer;\n+  pp.buffer->stream = fp;\n+  dump_to_pp (&pp, &ext_state);\n+  pp_flush (&pp);\n+  fclose (fp);\n }\n \n /* class feasibility_problem.  */"}, {"sha": "1d8b73da7c47bbbab879953a4f6809be8cb04767", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=98cd4d123aa14598b1f0d54c22663c8200a96d9c", "patch": "@@ -895,9 +895,12 @@ class exploded_path\n \n   exploded_node *get_final_enode () const;\n \n-  void dump_to_pp (pretty_printer *pp) const;\n-  void dump (FILE *fp) const;\n-  void dump () const;\n+  void dump_to_pp (pretty_printer *pp,\n+\t\t   const extrinsic_state *ext_state) const;\n+  void dump (FILE *fp, const extrinsic_state *ext_state) const;\n+  void dump (const extrinsic_state *ext_state = NULL) const;\n+  void dump_to_file (const char *filename,\n+\t\t     const extrinsic_state &ext_state) const;\n \n   bool feasible_p (logger *logger, feasibility_problem **out,\n \t\t    engine *eng, const exploded_graph *eg) const;"}, {"sha": "62e165f8d1e0ce9309cc2a63f85db77eabf2bfc1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cd4d123aa14598b1f0d54c22663c8200a96d9c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=98cd4d123aa14598b1f0d54c22663c8200a96d9c", "patch": "@@ -428,6 +428,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-analyzer-exploded-nodes @gol\n -fdump-analyzer-exploded-nodes-2 @gol\n -fdump-analyzer-exploded-nodes-3 @gol\n+-fdump-analyzer-exploded-paths @gol\n -fdump-analyzer-feasibility @gol\n -fdump-analyzer-json @gol\n -fdump-analyzer-state-purge @gol\n@@ -9651,6 +9652,11 @@ Dump a textual representation of the ``exploded graph'' to\n one dump file per node, to @file{@var{file}.eg-@var{id}.txt}.\n This is typically a large number of dump files.\n \n+@item -fdump-analyzer-exploded-paths\n+@opindex fdump-analyzer-exploded-paths\n+Dump a textual representation of the ``exploded path'' for each\n+diagnostic to @file{@var{file}.@var{idx}.@var{kind}.epath.txt}.\n+\n @item -fdump-analyzer-feasibility\n @opindex dump-analyzer-feasibility\n Dump internal details about the analyzer's search for feasible paths."}]}