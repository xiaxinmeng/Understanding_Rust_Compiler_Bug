{"sha": "432add899f4e436d0d30b89ef87fe19e71b36955", "node_id": "C_kwDOANBUbNoAKDQzMmFkZDg5OWY0ZTQzNmQwZDMwYjg5ZWY4N2ZlMTllNzFiMzY5NTU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-08T00:57:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-16T14:19:22Z"}, "message": "Revert desugaring of CompoundAssignment into arithmetic operation and assignment", "tree": {"sha": "f8319a2b9e0873c080a74dedddf0446ecb77540d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8319a2b9e0873c080a74dedddf0446ecb77540d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432add899f4e436d0d30b89ef87fe19e71b36955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432add899f4e436d0d30b89ef87fe19e71b36955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432add899f4e436d0d30b89ef87fe19e71b36955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432add899f4e436d0d30b89ef87fe19e71b36955/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694cf0251226348b64d885cfb378f775ff2a0d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694cf0251226348b64d885cfb378f775ff2a0d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694cf0251226348b64d885cfb378f775ff2a0d58"}], "stats": {"total": 212, "additions": 196, "deletions": 16}, "files": [{"sha": "8ed84c79086e0f3ad0b790f511bb6f1578c8c1aa", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -388,6 +388,23 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (assignment);\n   }\n \n+  void visit (HIR::CompoundAssignmentExpr &expr) override\n+  {\n+    fncontext fn = ctx->peek_fn ();\n+    auto lvalue = CompileExpr::Compile (expr.get_left_expr ().get (), ctx);\n+    auto rvalue = CompileExpr::Compile (expr.get_right_expr ().get (), ctx);\n+\n+    auto op = expr.get_expr_type ();\n+    auto operator_expr = ctx->get_backend ()->arithmetic_or_logical_expression (\n+      op, lvalue, rvalue, expr.get_locus ());\n+\n+    Bstatement *assignment\n+      = ctx->get_backend ()->assignment_statement (fn.fndecl, lvalue,\n+\t\t\t\t\t\t   operator_expr,\n+\t\t\t\t\t\t   expr.get_locus ());\n+    ctx->add_statement (assignment);\n+  }\n+\n   void visit (HIR::ArrayIndexExpr &expr) override\n   {\n     Bexpression *array = CompileExpr::Compile (expr.get_array_expr (), ctx);"}, {"sha": "f36096b44efc548c11446e7265ecf10ea21cfd94", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -452,11 +452,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t       expr.get_locus ());\n   }\n \n-  /* Compound assignment expression is compiled away. */\n   void visit (AST::CompoundAssignmentExpr &expr) override\n   {\n-    /* First we need to find the corresponding arithmetic or logical operator.\n-     */\n     ArithmeticOrLogicalOperator op;\n     switch (expr.get_expr_type ())\n       {\n@@ -503,15 +500,10 @@ class ASTLoweringExpr : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    HIR::Expr *operator_expr\n-      = new HIR::ArithmeticOrLogicalExpr (mapping, asignee_expr->clone_expr (),\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (value),\n-\t\t\t\t\t  op, expr.get_locus ());\n-    translated\n-      = new HIR::AssignmentExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (asignee_expr),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (operator_expr),\n-\t\t\t\t expr.get_locus ());\n+\n+    translated = new HIR::CompoundAssignmentExpr (\n+      mapping, std::unique_ptr<HIR::Expr> (asignee_expr),\n+      std::unique_ptr<HIR::Expr> (value), op, expr.get_locus ());\n   }\n \n   void visit (AST::StructExprStruct &struct_expr) override"}, {"sha": "901feda5e316790ccc1df271fcbee575ce0357cb", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -666,6 +666,80 @@ class AssignmentExpr : public OperatorExpr\n   }\n };\n \n+class CompoundAssignmentExpr : public OperatorExpr\n+{\n+public:\n+  using ExprType = ArithmeticOrLogicalOperator;\n+\n+private:\n+  // Note: overloading trait specified in comments\n+  ExprType expr_type;\n+  std::unique_ptr<Expr> right_expr;\n+\n+public:\n+  std::string as_string () const override;\n+\n+  ExprType get_expr_type () const { return expr_type; }\n+\n+  // Use pointers in constructor to enable polymorphism\n+  CompoundAssignmentExpr (Analysis::NodeMapping mappings,\n+\t\t\t  std::unique_ptr<Expr> value_to_assign_to,\n+\t\t\t  std::unique_ptr<Expr> value_to_assign,\n+\t\t\t  ExprType expr_kind, Location locus)\n+    : OperatorExpr (std::move (mappings), std::move (value_to_assign_to),\n+\t\t    AST::AttrVec (), locus),\n+      expr_type (expr_kind), right_expr (std::move (value_to_assign))\n+  {}\n+  // outer attributes not allowed\n+\n+  // Have clone in copy constructor\n+  CompoundAssignmentExpr (CompoundAssignmentExpr const &other)\n+    : OperatorExpr (other), expr_type (other.expr_type),\n+      right_expr (other.right_expr->clone_expr ())\n+  {}\n+\n+  // Overload assignment operator to clone\n+  CompoundAssignmentExpr &operator= (CompoundAssignmentExpr const &other)\n+  {\n+    OperatorExpr::operator= (other);\n+    // main_or_left_expr = other.main_or_left_expr->clone_expr();\n+    right_expr = other.right_expr->clone_expr ();\n+    expr_type = other.expr_type;\n+    // outer_attrs = other.outer_attrs;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  CompoundAssignmentExpr (CompoundAssignmentExpr &&other) = default;\n+  CompoundAssignmentExpr &operator= (CompoundAssignmentExpr &&other) = default;\n+\n+  void accept_vis (HIRVisitor &vis) override;\n+\n+  std::unique_ptr<Expr> &get_left_expr ()\n+  {\n+    rust_assert (main_or_left_expr != nullptr);\n+    return main_or_left_expr;\n+  }\n+\n+  std::unique_ptr<Expr> &get_right_expr ()\n+  {\n+    rust_assert (right_expr != nullptr);\n+    return right_expr;\n+  }\n+\n+  void visit_lhs (HIRVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n+  void visit_rhs (HIRVisitor &vis) { right_expr->accept_vis (vis); }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  CompoundAssignmentExpr *clone_expr_without_block_impl () const override\n+  {\n+    return new CompoundAssignmentExpr (*this);\n+  }\n+};\n+\n // Expression in parentheses (i.e. like literally just any 3 + (2 * 6))\n class GroupedExpr : public ExprWithoutBlock\n {"}, {"sha": "843e32ca1af6f558954468b7cbfd6b29fc5f5f47", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -1315,6 +1315,67 @@ AssignmentExpr::as_string () const\n \t + \"::\" + get_mappings ().as_string ();\n }\n \n+std::string\n+CompoundAssignmentExpr::as_string () const\n+{\n+  std::string operator_str;\n+  operator_str.reserve (1);\n+\n+  // get operator string\n+  switch (expr_type)\n+    {\n+    case ArithmeticOrLogicalOperator::ADD:\n+      operator_str = \"+\";\n+      break;\n+    case ArithmeticOrLogicalOperator::SUBTRACT:\n+      operator_str = \"-\";\n+      break;\n+    case ArithmeticOrLogicalOperator::MULTIPLY:\n+      operator_str = \"*\";\n+      break;\n+    case ArithmeticOrLogicalOperator::DIVIDE:\n+      operator_str = \"/\";\n+      break;\n+    case ArithmeticOrLogicalOperator::MODULUS:\n+      operator_str = \"%\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_AND:\n+      operator_str = \"&\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_OR:\n+      operator_str = \"|\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+      operator_str = \"^\";\n+      break;\n+    case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+      operator_str = \"<<\";\n+      break;\n+    case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+      operator_str = \">>\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+\n+  operator_str += \"=\";\n+\n+  std::string str (\"CompoundAssignmentExpr: \");\n+  if (main_or_left_expr == nullptr || right_expr == nullptr)\n+    {\n+      str += \"error. this is probably a parsing failure.\";\n+    }\n+  else\n+    {\n+      str += \"\\n left: \" + main_or_left_expr->as_string ();\n+      str += \"\\n right: \" + right_expr->as_string ();\n+      str += \"\\n operator: \" + operator_str;\n+    }\n+\n+  return str;\n+}\n+\n std::string\n AsyncBlockExpr::as_string () const\n {\n@@ -3818,6 +3879,12 @@ AssignmentExpr::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+CompoundAssignmentExpr::accept_vis (HIRVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n GroupedExpr::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "ea125d9d082f53cb9e82454cfc59ac6f05bf480a", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -47,6 +47,7 @@ class HIRVisitor\n   virtual void visit (LazyBooleanExpr &expr) = 0;\n   virtual void visit (TypeCastExpr &expr) = 0;\n   virtual void visit (AssignmentExpr &expr) = 0;\n+  virtual void visit (CompoundAssignmentExpr &expr) = 0;\n   virtual void visit (GroupedExpr &expr) = 0;\n   virtual void visit (ArrayElemsValues &elems) = 0;\n   virtual void visit (ArrayElemsCopied &elems) = 0;"}, {"sha": "e0494d702eb25cb10e6477be09fdc5b72543824a", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -53,7 +53,7 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::LazyBooleanExpr &) override {}\n   virtual void visit (HIR::TypeCastExpr &) override {}\n   virtual void visit (HIR::AssignmentExpr &) override {}\n-\n+  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n   virtual void visit (HIR::GroupedExpr &) override {}\n \n   virtual void visit (HIR::ArrayElemsValues &) override {}"}, {"sha": "bcf792b98626b766e7ba9f028c358b5f84863399", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -186,6 +186,12 @@ class MarkLive : public MarkLiveBase\n     expr.visit_rhs (*this);\n   }\n \n+  void visit (HIR::CompoundAssignmentExpr &expr) override\n+  {\n+    expr.visit_lhs (*this);\n+    expr.visit_rhs (*this);\n+  }\n+\n   void visit (HIR::IfExpr &expr) override\n   {\n     expr.get_if_condition ()->accept_vis (*this);"}, {"sha": "0b4105324249558611dac8c33d477d77f6ea7626", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -56,7 +56,7 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::LazyBooleanExpr &) override {}\n   virtual void visit (HIR::TypeCastExpr &) override {}\n   virtual void visit (HIR::AssignmentExpr &) override {}\n-\n+  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n   virtual void visit (HIR::GroupedExpr &) override {}\n \n   virtual void visit (HIR::ArrayElemsValues &) override {}"}, {"sha": "52dea212170b94abe075dcbd2b97aa7557c4c271", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -58,7 +58,7 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::LazyBooleanExpr &) override {}\n   virtual void visit (HIR::TypeCastExpr &) override {}\n   virtual void visit (HIR::AssignmentExpr &) override {}\n-\n+  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n   virtual void visit (HIR::GroupedExpr &) override {}\n \n   virtual void visit (HIR::ArrayElemsValues &) override {}"}, {"sha": "2594a415d78cad788770be264b7197fc040f1aad", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -470,6 +470,29 @@ class TypeCheckExpr : public TypeCheckBase\n       result->clone ());\n   }\n \n+  void visit (HIR::CompoundAssignmentExpr &expr) override\n+  {\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_left_expr ().get (), false);\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_right_expr ().get (), false);\n+\n+    bool valid_lhs = validate_arithmetic_type (lhs, expr.get_expr_type ());\n+    bool valid_rhs = validate_arithmetic_type (rhs, expr.get_expr_type ());\n+    bool valid = valid_lhs && valid_rhs;\n+    if (!valid)\n+      {\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"cannot apply this operator to types %s and %s\",\n+\t\t       lhs->as_string ().c_str (), rhs->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    auto result = lhs->unify (rhs);\n+    if (result->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+  }\n+\n   void visit (HIR::IdentifierExpr &expr) override\n   {\n     NodeId ast_node_id = expr.get_mappings ().get_nodeid ();"}, {"sha": "f078df6abd298c0d9c061190e96e104d48d40729", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432add899f4e436d0d30b89ef87fe19e71b36955/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=432add899f4e436d0d30b89ef87fe19e71b36955", "patch": "@@ -51,7 +51,7 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::LazyBooleanExpr &) override {}\n   virtual void visit (HIR::TypeCastExpr &) override {}\n   virtual void visit (HIR::AssignmentExpr &) override {}\n-\n+  virtual void visit (HIR::CompoundAssignmentExpr &) override {}\n   virtual void visit (HIR::GroupedExpr &) override {}\n \n   virtual void visit (HIR::ArrayElemsValues &) override {}"}]}