{"sha": "03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjYThmYjNkYTk0ZjEyZTVjZDJiYTU3MzczZDM4NzVjZDhkOGNmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-24T22:01:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-24T22:01:24Z"}, "message": "re PR c++/69922 (Bogus -Wnonnull-compare for: ... ? static_cast<T*>(this) : nullptr)\n\n\tPR c++/69922\n\t* class.c (build_base_path): Set TREE_NO_WARNING on the null_test.\n\tAvoid folding it.\n\t* init.c (build_vec_delete_1, build_delete): Don't fold the non-NULL\n\ttests.\n\t* cp-gimplify.c (cp_fold): For TREE_NO_WARNING comparisons with NULL,\n\tunless they are folded into INTEGER_CST, error_mark_node or some\n\tcomparison with NULL, avoid folding them and use either the original\n\tcomparison or non-folded comparison of folded arguments.\n\t* cp-ubsan.c (cp_ubsan_instrument_vptr): Set TREE_NO_WARNING on the\n\tcomparison, don't fold the comparison right away.\n\n\t* g++.dg/warn/Wnonnull-compare-6.C: New test.\n\t* g++.dg/warn/Wnonnull-compare-7.C: New test.\n\t* g++.dg/ubsan/pr69922.C: New test.\n\nFrom-SVN: r233684", "tree": {"sha": "aa66bb95b65b601ee8e6a8fef70163aacf5b9226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa66bb95b65b601ee8e6a8fef70163aacf5b9226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b05329bbfaade628e97f5d33165f82337865153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b05329bbfaade628e97f5d33165f82337865153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b05329bbfaade628e97f5d33165f82337865153"}], "stats": {"total": 128, "additions": 110, "deletions": 18}, "files": [{"sha": "28a3168bb7763a8857d08d3f4fc75f45493b4096", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -1,3 +1,17 @@\n+2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69922\n+\t* class.c (build_base_path): Set TREE_NO_WARNING on the null_test.\n+\tAvoid folding it.\n+\t* init.c (build_vec_delete_1, build_delete): Don't fold the non-NULL\n+\ttests.\n+\t* cp-gimplify.c (cp_fold): For TREE_NO_WARNING comparisons with NULL,\n+\tunless they are folded into INTEGER_CST, error_mark_node or some\n+\tcomparison with NULL, avoid folding them and use either the original\n+\tcomparison or non-folded comparison of folded arguments.\n+\t* cp-ubsan.c (cp_ubsan_instrument_vptr): Set TREE_NO_WARNING on the\n+\tcomparison, don't fold the comparison right away.\n+\n 2016-02-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69323"}, {"sha": "f6ad696c8f1707fd55c07aaa063d93b83da945c2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -392,8 +392,11 @@ build_base_path (enum tree_code code,\n   if (null_test)\n     {\n       tree zero = cp_convert (TREE_TYPE (expr), nullptr_node, complain);\n-      null_test = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n-\t\t\t       expr, zero);\n+      null_test = build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t      expr, zero);\n+      /* This is a compiler generated comparison, don't emit\n+\t e.g. -Wnonnull-compare warning for it.  */\n+      TREE_NO_WARNING (null_test) = 1;\n     }\n \n   /* If this is a simple base reference, express it as a COMPONENT_REF.  */"}, {"sha": "a77b242fc907bb885a6f57806aa00010cdb8c125", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -2069,8 +2069,24 @@ cp_fold (tree x)\n \tx = fold (x);\n \n       if (TREE_NO_WARNING (org_x)\n-\t  && TREE_CODE (x) == TREE_CODE (org_x))\n-\tTREE_NO_WARNING (x) = 1;\n+\t  && warn_nonnull_compare\n+\t  && COMPARISON_CLASS_P (org_x))\n+\t{\n+\t  if (x == error_mark_node || TREE_CODE (x) == INTEGER_CST)\n+\t    ;\n+\t  else if (COMPARISON_CLASS_P (x))\n+\t    TREE_NO_WARNING (x) = 1;\n+\t  /* Otherwise give up on optimizing these, let GIMPLE folders\n+\t     optimize those later on.  */\n+\t  else if (op0 != TREE_OPERAND (org_x, 0)\n+\t\t   || op1 != TREE_OPERAND (org_x, 1))\n+\t    {\n+\t      x = build2_loc (loc, code, TREE_TYPE (org_x), op0, op1);\n+\t      TREE_NO_WARNING (x) = 1;\n+\t    }\n+\t  else\n+\t    x = org_x;\n+\t}\n       break;\n \n     case VEC_COND_EXPR:"}, {"sha": "a5aefcf70bb286360b8dfae589a8342de3ec0aed", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -70,10 +70,15 @@ cp_ubsan_instrument_vptr (location_t loc, tree op, tree type, bool is_addr,\n   vptr = fold_convert_loc (loc, pointer_sized_int_node, vptr);\n   vptr = fold_convert_loc (loc, uint64_type_node, vptr);\n   if (ckind == UBSAN_DOWNCAST_POINTER)\n-    vptr = fold_build3 (COND_EXPR, uint64_type_node,\n-\t\t\tfold_build2 (NE_EXPR, boolean_type_node, op,\n-\t\t\t\t     build_zero_cst (TREE_TYPE (op))),\n-\t\t\tvptr, build_int_cst (uint64_type_node, 0));\n+    {\n+      tree cond = build2_loc (loc, NE_EXPR, boolean_type_node, op,\n+\t\t\t      build_zero_cst (TREE_TYPE (op)));\n+      /* This is a compiler generated comparison, don't emit\n+\t e.g. -Wnonnull-compare warning for it.  */\n+      TREE_NO_WARNING (cond) = 1;\n+      vptr = build3_loc (loc, COND_EXPR, uint64_type_node, cond,\n+\t\t\t vptr, build_int_cst (uint64_type_node, 0));\n+    }\n   tree ti_decl = get_tinfo_decl (type);\n   mark_used (ti_decl);\n   tree ptype = build_pointer_type (type);"}, {"sha": "43f854c47838ce8f319fdedfea86029b861ba04a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -3678,15 +3678,13 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n     body = integer_zero_node;\n \n   /* Outermost wrapper: If pointer is null, punt.  */\n-  tree cond\n-    = fold_build2_loc (input_location, NE_EXPR, boolean_type_node, base,\n-\t\t       fold_convert (TREE_TYPE (base), nullptr_node));\n+  tree cond = build2_loc (input_location, NE_EXPR, boolean_type_node, base,\n+\t\t\t  fold_convert (TREE_TYPE (base), nullptr_node));\n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n-  if (TREE_CODE (cond) == NE_EXPR)\n-    TREE_NO_WARNING (cond) = 1;\n-  body = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t  cond, body, integer_zero_node);\n+  TREE_NO_WARNING (cond) = 1;\n+  body = build3_loc (input_location, COND_EXPR, void_type_node,\n+\t\t     cond, body, integer_zero_node);\n   body = build1 (NOP_EXPR, void_type_node, body);\n \n   if (controller)\n@@ -4523,9 +4521,8 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t{\n \t  /* Handle deleting a null pointer.  */\n \t  warning_sentinel s (warn_address);\n-\t  ifexp = fold (cp_build_binary_op (input_location,\n-\t\t\t\t\t    NE_EXPR, addr, nullptr_node,\n-\t\t\t\t\t    complain));\n+\t  ifexp = cp_build_binary_op (input_location, NE_EXPR, addr,\n+\t\t\t\t      nullptr_node, complain);\n \t  if (ifexp == error_mark_node)\n \t    return error_mark_node;\n \t  /* This is a compiler generated comparison, don't emit"}, {"sha": "e5cfd9ad6f5c0d53f54bbe51945ca708a0cbb634", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -1,3 +1,10 @@\n+2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/69922\n+\t* g++.dg/warn/Wnonnull-compare-6.C: New test.\n+\t* g++.dg/warn/Wnonnull-compare-7.C: New test.\n+\t* g++.dg/ubsan/pr69922.C: New test.\n+\n 2016-02-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/69819"}, {"sha": "0392750427e4366031f5bafa512f08a9f11597d8", "filename": "gcc/testsuite/g++.dg/ubsan/pr69922.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr69922.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr69922.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr69922.C?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/69922\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=vptr -Wnonnull-compare\" }\n+\n+struct S { virtual ~S (); };\n+struct T : S { T *bar (); T *baz (); T *q; bool b; };\n+\n+T *\n+T::bar ()\n+{\n+  return static_cast<T*>(reinterpret_cast<S*>(this));\t// { dg-bogus \"nonnull argument\" }\n+}\n+\n+T *\n+T::baz ()\n+{\n+  return static_cast<T*>(reinterpret_cast<S*>(b ? this : q));\t// { dg-bogus \"nonnull argument\" }\n+}"}, {"sha": "d327df9ab64e9462930ae05d72d4b3cb9198dac0", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull-compare-6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-6.C?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/69922\n+// { dg-do compile }\n+// { dg-options \"-Wnonnull-compare\" }\n+\n+struct T { virtual ~T (); };\n+struct S { virtual ~S (); T *f (bool); };\n+struct U : S, T {};\n+\n+T *\n+S::f (bool b)\n+{\n+  return b ? static_cast<U *> (this) : (U *) 0;\t// { dg-bogus \"nonnull argument\" }\n+}"}, {"sha": "6c19a4339a5c68078b95dca57e7c350b72c54826", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull-compare-7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull-compare-7.C?ref=03ca8fb3da94f12e5cd2ba57373d3875cd8d8cf8", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/69922\n+// { dg-do compile }\n+// { dg-options \"-Wnonnull-compare\" }\n+\n+struct S { virtual ~S (); };\n+struct T { virtual ~T (); };\n+bool b, c;\n+S *p;\n+T *q, *r;\n+\n+S::~S ()\n+{\n+  delete (b ? this : p);\t\t// { dg-bogus \"nonnull argument\" }\n+}\n+\n+T::~T ()\n+{\n+  delete (b ? (c ? this : q) : r);\t// { dg-bogus \"nonnull argument\" }\n+}"}]}