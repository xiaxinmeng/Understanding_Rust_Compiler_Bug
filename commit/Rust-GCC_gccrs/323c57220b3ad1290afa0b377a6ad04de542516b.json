{"sha": "323c57220b3ad1290afa0b377a6ad04de542516b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzYzU3MjIwYjNhZDEyOTBhZmEwYjM3N2E2YWQwNGRlNTQyNTE2Yg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-12T16:39:01Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-12T16:39:01Z"}, "message": "trans-expr.c (gfc_find_and_cut_at_last_class_ref): Fixed style.\n\ngcc/fortran/ChangeLog:\n\n2016-10-12  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Fixed style.\n\t(gfc_trans_class_init_assign): Same.\n\t(gfc_conv_procedure_call): Same.\n\t(gfc_trans_assignment_1): Same.\n\t* trans-stmt.c (gfc_trans_allocate): Same.\n\nFrom-SVN: r241071", "tree": {"sha": "2f18409027978c57388d7b6683987f6f0d675335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f18409027978c57388d7b6683987f6f0d675335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/323c57220b3ad1290afa0b377a6ad04de542516b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323c57220b3ad1290afa0b377a6ad04de542516b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323c57220b3ad1290afa0b377a6ad04de542516b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323c57220b3ad1290afa0b377a6ad04de542516b/comments", "author": null, "committer": null, "parents": [{"sha": "7daade997e0cc111280645eca5fb9fe3e643a453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daade997e0cc111280645eca5fb9fe3e643a453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daade997e0cc111280645eca5fb9fe3e643a453"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "437e53b84bdad6b105bfc28e760063f433353394", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=323c57220b3ad1290afa0b377a6ad04de542516b", "patch": "@@ -1,3 +1,11 @@\n+2016-10-12  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Fixed style.\n+\t(gfc_trans_class_init_assign): Same.\n+\t(gfc_conv_procedure_call): Same.\n+\t(gfc_trans_assignment_1): Same.\n+\t* trans-stmt.c (gfc_trans_allocate): Same.\n+\n 2016-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* iresolve.c (is_trig_resolved, resolve_trig_call): Formatting fixes."}, {"sha": "655399b2ec97b365efe9914fcf6deaaa924b8752", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=323c57220b3ad1290afa0b377a6ad04de542516b", "patch": "@@ -357,8 +357,7 @@ gfc_find_and_cut_at_last_class_ref (gfc_expr *e)\n   array_ref = NULL;\n   for (ref = e->ref; ref; ref = ref->next)\n     {\n-      if (ref->type == REF_ARRAY\n-\t  && ref->u.ar.type != AR_ELEMENT)\n+      if (ref->type == REF_ARRAY && ref->u.ar.type != AR_ELEMENT)\n \tarray_ref = ref;\n \n       if (ref->type == REF_COMPONENT\n@@ -367,11 +366,10 @@ gfc_find_and_cut_at_last_class_ref (gfc_expr *e)\n \t  /* Component to the right of a part reference with nonzero rank\n \t     must not have the ALLOCATABLE attribute.  If attempts are\n \t     made to reference such a component reference, an error results\n-\t     followed by anICE.  */\n-\t  if (array_ref\n-\t      && CLASS_DATA (ref->u.c.component)->attr.allocatable)\n+\t     followed by an ICE.  */\n+\t  if (array_ref && CLASS_DATA (ref->u.c.component)->attr.allocatable)\n \t    return NULL;\n-\tclass_ref = ref;\n+\t  class_ref = ref;\n \t}\n \n       if (ref->next == NULL)\n@@ -1428,7 +1426,7 @@ gfc_trans_class_init_assign (gfc_code *code)\n   rhs->rank = 0;\n \n   if (code->expr1->ts.type == BT_CLASS\n-\t&& CLASS_DATA (code->expr1)->attr.dimension)\n+      && CLASS_DATA (code->expr1)->attr.dimension)\n     tmp = gfc_trans_class_array_init_assign (rhs, lhs, code->expr1);\n   else\n     {\n@@ -5880,7 +5878,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n   if (comp)\n     ts = comp->ts;\n   else\n-   ts = sym->ts;\n+    ts = sym->ts;\n \n   if (ts.type == BT_CHARACTER && sym->attr.is_bind_c)\n     se->string_length = build_int_cst (gfc_charlen_type_node, 1);\n@@ -9549,9 +9547,9 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      nullification occurs before the call to the finalizer. In the case of\n      a scalar to array assignment, this is done in gfc_trans_scalar_assign\n      as part of the deep copy.  */\n-  if (!scalar_to_array && (expr1->ts.type == BT_DERIVED)\n-\t\t\t\t\t      && (gfc_is_alloc_class_array_function (expr2)\n-\t\t\t\t\t\t      || gfc_is_alloc_class_scalar_function (expr2)))\n+  if (!scalar_to_array && expr1->ts.type == BT_DERIVED\n+\t\t       && (gfc_is_alloc_class_array_function (expr2)\n+\t\t\t   || gfc_is_alloc_class_scalar_function (expr2)))\n     {\n       tmp = rse.expr;\n       tmp = gfc_nullify_alloc_comp (expr1->ts.u.derived, rse.expr, 0);"}, {"sha": "67cd2b51f911562e326b2540d0f2c0327859eede", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323c57220b3ad1290afa0b377a6ad04de542516b/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=323c57220b3ad1290afa0b377a6ad04de542516b", "patch": "@@ -5928,7 +5928,7 @@ gfc_trans_allocate (gfc_code * code)\n \t      al_len_needs_set = false;\n \t    }\n \t  else if (expr->ts.type == BT_CHARACTER && al_len != NULL_TREE\n-\t\t   && code->ext.alloc.ts.u.cl->length)\n+\t      && code->ext.alloc.ts.u.cl->length)\n \t    {\n \t      /* Cover the cases where a string length is explicitly\n \t\t specified by a type spec for deferred length character\n@@ -6015,7 +6015,7 @@ gfc_trans_allocate (gfc_code * code)\n \t\texpr3_len = NULL_TREE;\n \t    }\n \t  else if (code->ext.alloc.ts.type == BT_CHARACTER\n-\t\t   && code->ext.alloc.ts.u.cl->length)\n+\t      && code->ext.alloc.ts.u.cl->length)\n \t    {\n \t      /* Cover the cases where a string length is explicitly\n \t\t specified by a type spec for deferred length character"}]}