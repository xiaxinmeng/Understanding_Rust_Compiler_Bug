{"sha": "ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "node_id": "C_kwDOANBUbNoAKGVkNjQzZTlmMTcxZTk5YjBhYTE0NTNiM2YyOWVkMTEwM2U5YjVjODA", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:59:20Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T04:56:30Z"}, "message": "AVX512FP16: Add testcases for vfcmaddcph/vfmaddcph/vfcmulcph/vfmulcph.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h\n\t(init_src): Adjust init value.\n\t(NET_CMASK): New net mask for complex input.\n\t* gcc.target/i386/avx512fp16-vfcmaddcph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vfcmaddcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmulcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmulcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmaddcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmaddcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmulcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmulcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmulcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmulcph-1b.c: Ditto.", "tree": {"sha": "60124dbc01d8346d94e94c4a01ef6d7010166652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60124dbc01d8346d94e94c4a01ef6d7010166652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081070bce2901ba7b9245fb4b5d0f3148f91981a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081070bce2901ba7b9245fb4b5d0f3148f91981a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081070bce2901ba7b9245fb4b5d0f3148f91981a"}], "stats": {"total": 779, "additions": 777, "deletions": 2}, "files": [{"sha": "69948f8ee4f55cbfea1fec9bb4d5bb25ec57b163", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -172,9 +172,9 @@ init_src()\n \n     for (i = 0; i < AVX512F_MAX_ELEM; i++) {\n \tv1.f32[i] = i + 1;\n-\tv2.f32[i] = i * 0.5f;\n+\tv2.f32[i] = (i + 2) * 0.5f;\n \tv3.f32[i] = i * 1.5f;\n-\tv4.f32[i] = i - 0.5f;\n+\tv4.f32[i] = i - 1.5f;\n \n \tsrc3.u32[i] = (i + 1) * 10;\n     }\n@@ -234,10 +234,12 @@ init_dest(V512 * res, V512 * exp)\n #undef DF\n #undef H_HF\n #undef NET_MASK \n+#undef NET_CMASK \n #undef MASK_VALUE\n #undef HALF_MASK\n #undef ZMASK_VALUE \n #define NET_MASK 0xffff\n+#define NET_CMASK 0xff\n #define MASK_VALUE 0xcccc\n #define ZMASK_VALUE 0xfcc1\n #define HALF_MASK 0xcc\n@@ -253,10 +255,12 @@ init_dest(V512 * res, V512 * exp)\n #undef SI\n #undef H_HF\n #undef NET_MASK \n+#undef NET_CMASK \n #undef MASK_VALUE \n #undef ZMASK_VALUE \n #undef HALF_MASK\n #define NET_MASK 0xff\n+#define NET_CMASK 0xff\n #define MASK_VALUE 0xcc\n #define HALF_MASK MASK_VALUE\n #define ZMASK_VALUE 0xc1\n@@ -267,6 +271,7 @@ init_dest(V512 * res, V512 * exp)\n #define H_HF(x) x.xmmh[0]\n #else\n #define NET_MASK 0xffffffff\n+#define NET_CMASK 0xffff\n #define MASK_VALUE 0xcccccccc\n #define ZMASK_VALUE 0xfcc1fcc1\n #define HALF_MASK 0xcccc"}, {"sha": "6c2c34c17311d5785aa4b5cdb0605e851841ad48", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcph-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_fcmadd_pch (x1, x2, x3);\n+  res1 = _mm512_mask_fcmadd_pch (res1, m16, x1, x2);\n+  res1 = _mm512_mask3_fcmadd_pch (res1, x1, x2, m16);\n+  res2 = _mm512_maskz_fcmadd_pch (m16, x1, x2, x3);\n+  res = _mm512_fcmadd_round_pch (x1, x2, x3, 8);\n+  res1 = _mm512_mask_fcmadd_round_pch (res1, m16, x1, x2, 8);\n+  res1 = _mm512_mask3_fcmadd_round_pch (res1, x1, x2, m16, 8);\n+  res2 = _mm512_maskz_fcmadd_round_pch (m16, x1, x2, x3, 11);\n+}"}, {"sha": "835699b834d41dbe2509d94f1f21fee4d2b2f392", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcph-1b.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,133 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(c_fmadd_pch) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask16 k, int zero_mask, int c_flag,\n+\t\t    int is_mask3)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << (i / 2)) & k) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = is_mask3 ? v3.u32[i] : v7.u32[i];\n+      }\n+    }\n+    else {\n+      if ((i % 2) == 0) {\n+\tv5.f32[i] = v1.f32[i] * v7.f32[i]\n+\t  - invert * (v1.f32[i+1] * v7.f32[i+1]) + v3.f32[i];\n+      }\n+      else {\n+\tv5.f32[i] = v1.f32[i-1] * v7.f32[i]\n+\t  + invert * (v1.f32[i] * v7.f32[i-1]) + v3.f32[i];\n+\n+      }\n+    }\n+    if (((1 << (i / 2 + 8)) & k) == 0) {\n+      if (zero_mask) {\n+\tv6.f32[i] = 0;\n+      }\n+      else {\n+\tv6.u32[i] = is_mask3 ? v4.u32[i] : v8.u32[i];\n+      }\n+    }\n+    else {\n+      if ((i % 2) == 0) {\n+\tv6.f32[i] = v2.f32[i] * v8.f32[i]\n+\t  - invert * (v2.f32[i+1] * v8.f32[i+1]) + v4.f32[i];\n+      }\n+      else {\n+\tv6.f32[i] = v2.f32[i-1] * v8.f32[i]\n+\t  + invert * (v2.f32[i] * v8.f32[i-1]) + v4.f32[i];\n+      }\n+\n+    }\n+  }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, NET_CMASK, 0, 1, 0);\n+  HF(res) = INTRINSIC (_fcmadd_pch) (HF(res), HF(src1),\n+\t\t\t\t     HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fcmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 1, 0);\n+  HF(res) = INTRINSIC (_mask_fcmadd_pch) (HF(res) ,HALF_MASK, HF(src1),\n+\t\t\t\t\t  HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fcmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 1, 1);\n+  HF(res) = INTRINSIC (_mask3_fcmadd_pch) (HF(res), HF(src1),\n+\t\t\t\t\t   HF(src2), HALF_MASK);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fcmadd_pch);\n+\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 1, 1, 0);\n+  HF(res) = INTRINSIC (_maskz_fcmadd_pch) (HALF_MASK, HF(res),\n+\t\t\t\t\t   HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fcmadd_pch);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, NET_CMASK, 0, 1, 0);\n+  HF(res) = INTRINSIC (_fcmadd_round_pch) (HF(res), HF(src1),\n+\t\t\t\t     HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fcmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 1, 0);\n+  HF(res) = INTRINSIC (_mask_fcmadd_round_pch) (HF(res) ,HALF_MASK, HF(src1),\n+\t\t\t\t\t  HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fcmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 1, 1);\n+  HF(res) = INTRINSIC (_mask3_fcmadd_round_pch) (HF(res), HF(src1),\n+\t\t\t\t\t   HF(src2), HALF_MASK, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fcmadd_pch);\n+\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 1, 1, 0);\n+  HF(res) = INTRINSIC (_maskz_fcmadd_round_pch) (HALF_MASK, HF(res),\n+\t\t\t\t\t   HF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fcmadd_pch);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "ca2f14072ba047847343c23a2296d40efef0d643", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcph-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_fcmul_pch (x1, x2);\n+  res1 = _mm512_mask_fcmul_pch (res1, m16, x1, x2);\n+  res2 = _mm512_maskz_fcmul_pch (m16, x1, x2);\n+  res = _mm512_fcmul_round_pch (x1, x2, 8);\n+  res1 = _mm512_mask_fcmul_round_pch (res1, m16, x1, x2, 8);\n+  res2 = _mm512_maskz_fcmul_round_pch (m16, x1, x2, 11);\n+}"}, {"sha": "ee41f6c58d4f329c072cbde6c8d52fb78889f7a6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcph-1b.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(c_fmul_pch) (V512 * dest, V512 op1, V512 op2,\n+\t\t  __mmask16 k, int zero_mask, int c_flag)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << (i / 2)) & k) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  if ((i % 2) == 0) {\n+\t      v5.f32[i] = v1.f32[i] * v3.f32[i]\n+\t\t- invert * (v1.f32[i+1] * v3.f32[i+1]);\n+\t  }\n+\t  else {\n+\t      v5.f32[i] = v1.f32[i] * v3.f32[i-1]\n+\t\t+ invert * (v1.f32[i-1] * v3.f32[i]);\n+\n+\t  }\n+      }\n+      if (((1 << (i / 2 + 8)) & k) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.u32[i] = v8.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  if ((i % 2) == 0) {\n+\t      v6.f32[i] = v2.f32[i] * v4.f32[i]\n+\t\t- invert * (v2.f32[i+1] * v4.f32[i+1]);\n+\t  }\n+\t  else {\n+\t      v6.f32[i] = v2.f32[i] * v4.f32[i-1]\n+\t\t+ invert * (v2.f32[i-1] * v4.f32[i]);\n+\t  }\n+\n+      }\n+   }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, NET_CMASK, 0, 1);\n+  HF(res) = INTRINSIC (_fcmul_pch) (HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fcmul_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 0, 1);\n+  HF(res) = INTRINSIC (_mask_fcmul_pch) (HF(res) ,HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fcmul_pch);\n+\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 1, 1);\n+  HF(res) = INTRINSIC (_maskz_fcmul_pch) ( HALF_MASK, HF(src1),\n+\t\t\t\t\t   HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fcmul_pch);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, NET_CMASK, 0, 1);\n+  HF(res) = INTRINSIC (_fcmul_round_pch) (HF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fcmul_round_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 0, 1);\n+  HF(res) = INTRINSIC (_mask_fcmul_round_pch) (HF(res) ,HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fcmul_round_pch);\n+\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 1, 1);\n+  HF(res) = INTRINSIC (_maskz_fcmul_round_pch) ( HALF_MASK, HF(src1),\n+\t\t\t\t\t   HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fcmul_round_pch);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "4dae5f02dc66123c7acbb0630cb02cb36619c6a2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcph-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_fmadd_pch (x1, x2, x3);\n+  res1 = _mm512_mask_fmadd_pch (res1, m16, x1, x2);\n+  res1 = _mm512_mask3_fmadd_pch (res1, x1, x2, m16);\n+  res2 = _mm512_maskz_fmadd_pch (m16, x1, x2, x3);\n+  res = _mm512_fmadd_round_pch (x1, x2, x3, 8);\n+  res1 = _mm512_mask_fmadd_round_pch (res1, m16, x1, x2, 8);\n+  res1 = _mm512_mask3_fmadd_round_pch (res1, x1, x2, m16, 8);\n+  res2 = _mm512_maskz_fmadd_round_pch (m16, x1, x2, x3, 11);\n+}"}, {"sha": "1da6f01e139c30b5dc0c9b1ad079f4ab95a82123", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcph-1b.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(c_fmadd_pch) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask16 k, int zero_mask, int c_flag,\n+\t\t    int is_mask3)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << (i / 2)) & k) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = is_mask3 ? v3.u32[i] : v7.u32[i];\n+      }\n+    }\n+    else {\n+      if ((i % 2) == 0) {\n+\tv5.f32[i] = v1.f32[i] * v7.f32[i]\n+\t  - invert * (v1.f32[i+1] * v7.f32[i+1]) + v3.f32[i];\n+      }\n+      else {\n+\tv5.f32[i] = v1.f32[i-1] * v7.f32[i]\n+\t  + invert * (v1.f32[i] * v7.f32[i-1]) + v3.f32[i];\n+\n+      }\n+    }\n+    if (((1 << (i / 2 + 8)) & k) == 0) {\n+      if (zero_mask) {\n+\tv6.f32[i] = 0;\n+      }\n+      else {\n+\tv6.u32[i] = is_mask3 ? v4.u32[i] : v8.u32[i];\n+      }\n+    }\n+    else {\n+      if ((i % 2) == 0) {\n+\tv6.f32[i] = v2.f32[i] * v8.f32[i]\n+\t  - invert * (v2.f32[i+1] * v8.f32[i+1]) + v4.f32[i];\n+      }\n+      else {\n+\tv6.f32[i] = v2.f32[i-1] * v8.f32[i]\n+\t  + invert * (v2.f32[i] * v8.f32[i-1]) + v4.f32[i];\n+      }\n+\n+    }\n+  }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, NET_CMASK, 0, 0, 0);\n+  HF(res) = INTRINSIC (_fmadd_pch) (HF(res), HF(src1),\n+\t\t\t\t    HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 0, 0);\n+  HF(res) = INTRINSIC (_mask_fmadd_pch) (HF(res), HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 0, 1);\n+  HF(res) = INTRINSIC (_mask3_fmadd_pch) (HF(res), HF(src1), HF(src2),\n+\t\t\t\t\t  HALF_MASK);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 1, 0, 0);\n+  HF(res) = INTRINSIC (_maskz_fmadd_pch) (HALF_MASK, HF(res), HF(src1),\n+\t\t\t\t\t  HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmadd_pch);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, NET_CMASK, 0, 0, 0);\n+  HF(res) = INTRINSIC (_fmadd_round_pch) (HF(res), HF(src1),\n+\t\t\t\t    HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 0, 0);\n+  HF(res) = INTRINSIC (_mask_fmadd_round_pch) (HF(res), HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2),  _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 0, 0, 1);\n+  HF(res) = INTRINSIC (_mask3_fmadd_round_pch) (HF(res), HF(src1), HF(src2),\n+\t\t\t\t\t  HALF_MASK, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask3_fmadd_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_pch)(&exp, src1, src2, HALF_MASK, 1, 0, 0);\n+  HF(res) = INTRINSIC (_maskz_fmadd_round_pch) (HALF_MASK, HF(res), HF(src1),\n+\t\t\t\t\t  HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmadd_pch);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "f31cbca368e0096e0fddf57894a205cbdec4191a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcph-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res, res1, res2;\n+volatile __m512h x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_fmul_pch (x1, x2);\n+  res1 = _mm512_mask_fmul_pch (res1, m16, x1, x2);\n+  res2 = _mm512_maskz_fmul_pch (m16, x1, x2);\n+  res = _mm512_fmul_round_pch (x1, x2, 8);\n+  res1 = _mm512_mask_fmul_round_pch (res1, m16, x1, x2, 8);\n+  res2 = _mm512_maskz_fmul_round_pch (m16, x1, x2, 11);\n+}"}, {"sha": "d9bb1b0ec1279ae1d83a175ba0aa0a67ec633d82", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcph-1b.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(c_fmul_pch) (V512 * dest, V512 op1, V512 op2,\n+\t\t  __mmask16 k, int zero_mask, int c_flag)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << (i / 2)) & k) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  if ((i % 2) == 0) {\n+\t      v5.f32[i] = v1.f32[i] * v3.f32[i]\n+\t\t- invert * (v1.f32[i+1] * v3.f32[i+1]);\n+\t  }\n+\t  else {\n+\t      v5.f32[i] = v1.f32[i-1] * v3.f32[i]\n+\t\t+ invert * (v1.f32[i] * v3.f32[i-1]);\n+\n+\t  }\n+      }\n+      if (((1 << (i / 2 + 8)) & k) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.u32[i] = v8.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  if ((i % 2) == 0) {\n+\t      v6.f32[i] = v2.f32[i] * v4.f32[i]\n+\t\t- invert * (v2.f32[i+1] * v4.f32[i+1]);\n+\t  }\n+\t  else {\n+\t      v6.f32[i] = v2.f32[i-1] * v4.f32[i]\n+\t\t+ invert * (v2.f32[i] * v4.f32[i-1]);\n+\t  }\n+\n+      }\n+   }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, NET_CMASK, 0, 0);\n+  HF(res) = INTRINSIC (_fmul_pch) (HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmul_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 0, 0);\n+  HF(res) = INTRINSIC (_mask_fmul_pch) (HF(res),HALF_MASK, HF(src1),\n+\t\t\t\t\tHF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmul_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 1, 0);\n+  HF(res) = INTRINSIC (_maskz_fmul_pch) (HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmul_pch);\n+\n+#if AVX512F_LEN == 512\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, NET_CMASK, 0, 0);\n+  HF(res) = INTRINSIC (_fmul_round_pch) (HF(src1), HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _fmul_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 0, 0);\n+  HF(res) = INTRINSIC (_mask_fmul_round_pch) (HF(res),HALF_MASK, HF(src1),\n+\t\t\t\t\tHF(src2),  _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_fmul_pch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_pch)(&exp, src1, src2, HALF_MASK, 1, 0);\n+  HF(res) = INTRINSIC (_maskz_fmul_round_pch) (HALF_MASK, HF(src1),\n+\t\t\t\t\t HF(src2), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_fmul_pch);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "eff13812c875ed954fb49c42116c7799ad4dab9b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1, x2, x3;\n+volatile __m128h x4, x5, x6;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_fcmadd_pch (x1, x2, x3);\n+  res1 = _mm256_mask_fcmadd_pch (res1, m8, x1, x2);\n+  res1 = _mm256_mask3_fcmadd_pch (res1, x1, x2, m8);\n+  res1 = _mm256_maskz_fcmadd_pch (m8, x1, x2, x3);\n+\n+  res2 = _mm_fcmadd_pch (x4, x5, x6);\n+  res2 = _mm_mask_fcmadd_pch (res2, m8, x4, x5);\n+  res2 = _mm_mask3_fcmadd_pch (res2, x4, x5, m8);\n+  res2 = _mm_maskz_fcmadd_pch (m8, x4, x5, x6);\n+}"}, {"sha": "5e3a54ecaaeb958ac6ffbf524faf8c029fba5b2c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmaddcph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfcmaddcph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfcmaddcph-1b.c\"\n+"}, {"sha": "4e48e9c7f8598a7322ccdab8a3ce858f3e69da32", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1, x2, x3;\n+volatile __m128h x4, x5, x6;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_fcmul_pch (x1, x2);\n+  res1 = _mm256_mask_fcmul_pch (res1, m8, x1, x2);\n+  res1 = _mm256_maskz_fcmul_pch (m8, x1, x2);\n+\n+  res2 = _mm_fcmul_pch (x4, x5);\n+  res2 = _mm_mask_fcmul_pch (res2, m8, x4, x5);\n+  res2 = _mm_maskz_fcmul_pch (m8, x4, x5);\n+}"}, {"sha": "19564a1955d839801677e470a5d0cd6474535298", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmulcph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfcmulcph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfcmulcph-1b.c\"\n+"}, {"sha": "b9a24d0b9d8747072ba5fa9aa2c5345774ebe6da", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1, x2, x3;\n+volatile __m128h x4, x5, x6;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_fmadd_pch (x1, x2, x3);\n+  res1 = _mm256_mask_fmadd_pch (res1, m8, x1, x2);\n+  res1 = _mm256_mask3_fmadd_pch (res1, x1, x2, m8);\n+  res1 = _mm256_maskz_fmadd_pch (m8, x1, x2, x3);\n+\n+  res2 = _mm_fmadd_pch (x4, x5, x6);\n+  res2 = _mm_mask_fmadd_pch (res2, m8, x4, x5);\n+  res2 = _mm_mask3_fmadd_pch (res2, x4, x5, m8);\n+  res2 = _mm_maskz_fmadd_pch (m8, x4, x5, x6);\n+}"}, {"sha": "bf85fea75ab34341ac720ccf830bdb4b8ce67c90", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmaddcph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmaddcph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmaddcph-1b.c\"\n+"}, {"sha": "54e58c66edb1b471758dcc205bb22093f2d16fd4", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmulcph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1, x2, x3;\n+volatile __m128h x4, x5, x6;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_fmul_pch (x1, x2);\n+  res1 = _mm256_mask_fmul_pch (res1, m8, x1, x2);\n+  res1 = _mm256_maskz_fmul_pch (m8, x1, x2);\n+\n+  res2 = _mm_fmul_pch (x4, x5);\n+  res2 = _mm_mask_fmul_pch (res2, m8, x4, x5);\n+  res2 = _mm_maskz_fmul_pch (m8, x4, x5);\n+}"}, {"sha": "f88d842396507617d11041043f4e375e2bd8d062", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmulcph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1b.c?ref=ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmulcph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vfmulcph-1b.c\"\n+"}]}