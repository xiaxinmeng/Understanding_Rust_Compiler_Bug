{"sha": "757fd34803b7ae0eb3705315060e5fbba1148c5c", "node_id": "C_kwDOANBUbNoAKDc1N2ZkMzQ4MDNiN2FlMGViMzcwNTMxNTA2MGU1ZmJiYTExNDhjNWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-10T10:54:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-11T06:51:45Z"}, "message": "Fix path query compute_imports for external path\n\nThe following fixes the use of compute_imports from the backwards\nthreader which ends up accessing stale m_path from a previous\nthreading attempt.  The fix is to pass in the path explicitely\n(and not the exit), and initializing it with the exit around this\ncall from the backwards threader.  That unfortunately exposed that\nwe rely on this broken behavior as the new testcase shows.  The\nmissed threading can be restored by registering all relations\nfrom conditions on the path during solving, for the testcase the\nparticular important case is for relations provided by the path\nentry conditional.\n\nI've verified that the GORI query for imported ranges on edges\nis not restricted this way.\n\nThis regresses the new ssa-thread-19.c testcase which is exactly\na case for the other patch re-doing how we compute imports since\nthis misses imports for defs that are not on the dominating path\nfrom the exit.\n\nThat's one of the cases this regresses (it also progresses a few\ndue to more or the correct relations added).  Overall it\nreduces the number of threads from 98649 to 98620 on my set of\ncc1files.  I think it's a reasonable intermediate step to find\na stable, less random ground to compare stats to.\n\n\t* gimple-range-path.h (path_range_query::compute_imports):\n\tTake path as argument, not the exit block.\n\t* gimple-range-path.cc (path_range_query::compute_imports):\n\tLikewise, and adjust, avoiding possibly stale m_path.\n\t(path_range_query::compute_outgoing_relations): Register\n\trelations for all conditionals.\n\t* tree-ssa-threadbackward.cc (back_threader::find_paths):\n\tAdjust.\n\n\t* gcc.dg/tree-ssa/ssa-thread-18.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-thread-19.c: Likewise, but XFAILed.", "tree": {"sha": "7da42d7a63689585d8450a18b9eba425781d1228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da42d7a63689585d8450a18b9eba425781d1228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/757fd34803b7ae0eb3705315060e5fbba1148c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757fd34803b7ae0eb3705315060e5fbba1148c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757fd34803b7ae0eb3705315060e5fbba1148c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757fd34803b7ae0eb3705315060e5fbba1148c5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22086c261f20a7576f233db3537ccf192e7160c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22086c261f20a7576f233db3537ccf192e7160c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b22086c261f20a7576f233db3537ccf192e7160c"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "389faec260c560be61e8fe3f43fcf46a037cd2fd", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=757fd34803b7ae0eb3705315060e5fbba1148c5c", "patch": "@@ -549,7 +549,7 @@ path_range_query::add_to_imports (tree name, bitmap imports)\n   return false;\n }\n \n-// Compute the imports to the path ending in EXIT.  These are\n+// Compute the imports to PATH.  These are\n // essentially the SSA names used to calculate the final conditional\n // along the path.\n //\n@@ -559,9 +559,10 @@ path_range_query::add_to_imports (tree name, bitmap imports)\n // we can solve.\n \n void\n-path_range_query::compute_imports (bitmap imports, basic_block exit)\n+path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n {\n   // Start with the imports from the exit block...\n+  basic_block exit = path[0];\n   gori_compute &gori = m_ranger->gori ();\n   bitmap r_imports = gori.imports (exit);\n   bitmap_copy (imports, r_imports);\n@@ -599,17 +600,17 @@ path_range_query::compute_imports (bitmap imports, basic_block exit)\n \t      tree arg = gimple_phi_arg (phi, i)->def;\n \n \t      if (TREE_CODE (arg) == SSA_NAME\n-\t\t  && m_path.contains (e->src)\n+\t\t  && path.contains (e->src)\n \t\t  && bitmap_set_bit (imports, SSA_NAME_VERSION (arg)))\n \t\tworklist.safe_push (arg);\n \t    }\n \t}\n     }\n   // Exported booleans along the path, may help conditionals.\n   if (m_resolve)\n-    for (i = 0; i < m_path.length (); ++i)\n+    for (i = 0; i < path.length (); ++i)\n       {\n-\tbasic_block bb = m_path[i];\n+\tbasic_block bb = path[i];\n \ttree name;\n \tFOR_EACH_GORI_EXPORT_NAME (gori, bb, name)\n \t  if (TREE_CODE (TREE_TYPE (name)) == BOOLEAN_TYPE)\n@@ -636,7 +637,7 @@ path_range_query::compute_ranges (const vec<basic_block> &path,\n   if (imports)\n     bitmap_copy (m_imports, imports);\n   else\n-    compute_imports (m_imports, exit_bb ());\n+    compute_imports (m_imports, m_path);\n \n   if (m_resolve)\n     get_path_oracle ()->reset_path ();\n@@ -845,15 +846,9 @@ path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n void\n path_range_query::compute_outgoing_relations (basic_block bb, basic_block next)\n {\n-  gimple *stmt = last_stmt (bb);\n-\n-  if (stmt\n-      && gimple_code (stmt) == GIMPLE_COND\n-      && (import_p (gimple_cond_lhs (stmt))\n-\t  || import_p (gimple_cond_rhs (stmt))))\n+  if (gcond *cond = safe_dyn_cast <gcond *> (last_stmt (bb)))\n     {\n       int_range<2> r;\n-      gcond *cond = as_a<gcond *> (stmt);\n       edge e0 = EDGE_SUCC (bb, 0);\n       edge e1 = EDGE_SUCC (bb, 1);\n "}, {"sha": "e783e00b2f5a5684d4897ee9830d1166ea647943", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=757fd34803b7ae0eb3705315060e5fbba1148c5c", "patch": "@@ -37,7 +37,7 @@ class path_range_query : public range_query\n   void compute_ranges (const vec<basic_block> &,\n \t\t       const bitmap_head *imports = NULL);\n   void compute_ranges (edge e);\n-  void compute_imports (bitmap imports, basic_block exit);\n+  void compute_imports (bitmap imports, const vec<basic_block> &);\n   bool range_of_expr (vrange &r, tree name, gimple * = NULL) override;\n   bool range_of_stmt (vrange &r, gimple *, tree name = NULL) override;\n   bool unreachable_path_p ();"}, {"sha": "a899f4f3fc02c33f6cb40623bfb8c83e218a2a36", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-18.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-18.c?ref=757fd34803b7ae0eb3705315060e5fbba1148c5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-stats\" } */\n+\n+void foo (int nest, int print_nest)\n+{\n+  _Bool t0 = nest != 0;\n+  _Bool t1 = nest == print_nest;\n+  _Bool t2 = t0 & t1;\n+  if (t2)\n+    __builtin_puts (\"x\");\n+  nest++;\n+  if (nest > 2)\n+    __builtin_abort ();\n+  if (print_nest == nest)\n+    __builtin_puts (\"y\");\n+}\n+\n+/* We should be able to thread (t2) to !(print_nest == nest) using the\n+   nest == print_nest relation implied by the entry block.  */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"threadfull1\" } } */"}, {"sha": "58a872b8d2563b838857d345db675abe47a40639", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-19.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-19.c?ref=757fd34803b7ae0eb3705315060e5fbba1148c5c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-stats\" } */\n+\n+struct S;\n+struct S { struct S *next; };\n+int foo (struct S *chain, _Bool is_ctor, _Bool is_dtor)\n+{\n+  int num_args = 0;\n+  if (chain) /* A */\n+    {\n+      do {\n+          num_args++;\n+          chain = chain->next;\n+          if (!chain)\n+            break;\n+      } while (1);\n+    }\n+  if (is_ctor)\n+    num_args++; /* B */\n+  if (is_dtor)\n+    num_args++;\n+  else\n+    {\n+      if (num_args > 2) /* C */\n+        __builtin_puts (\"x\");\n+    }\n+  return num_args;\n+}\n+\n+/* We want to thread both paths from A with NULL chain to C, the one through\n+   B and one around it.\n+   ???  Ideally we'd thread one \"path\" containing the half-diamond with B.  */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 2\" \"threadfull1\" { xfail *-*-* } } } */"}, {"sha": "6585a30551d96421b35fbd096a53c5c761230d00", "filename": "gcc/tree-ssa-threadbackward.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftree-ssa-threadbackward.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757fd34803b7ae0eb3705315060e5fbba1148c5c/gcc%2Ftree-ssa-threadbackward.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.cc?ref=757fd34803b7ae0eb3705315060e5fbba1148c5c", "patch": "@@ -451,7 +451,9 @@ back_threader::find_paths (basic_block bb, tree name)\n       m_visited_bbs.empty ();\n       m_path.truncate (0);\n       m_name = name;\n-      m_solver->compute_imports (m_imports, bb);\n+      m_path.safe_push (bb);\n+      m_solver->compute_imports (m_imports, m_path);\n+      m_path.pop ();\n \n       auto_bitmap interesting;\n       bitmap_copy (interesting, m_imports);"}]}