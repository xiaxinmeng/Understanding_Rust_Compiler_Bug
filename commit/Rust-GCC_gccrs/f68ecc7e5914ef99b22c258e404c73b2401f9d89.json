{"sha": "f68ecc7e5914ef99b22c258e404c73b2401f9d89", "node_id": "C_kwDOANBUbNoAKGY2OGVjYzdlNTkxNGVmOTliMjJjMjU4ZTQwNGM3M2IyNDAxZjlkODk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-10T14:08:38Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-16T09:29:00Z"}, "message": "intrinsics: Add copy_nonoverlapping<T>\n\nThis intrinsic is similar to C's memcpy (or in our case, GCC's\n__builtin_memcpy) with the order of arguments swapped and knowledge\nabout the type of the operands. So we can desugar the following calls:\n\n`copy_nonoverlapping::<T>(src, dst, count)`\n\ncan be converted to\n\n`__builtin_memcpy(dst, src, count * size_of::<T>())`\n\nFinally, unlike most intrinsics, copy_nonoverlapping must be marked as impure\n\nCo-authored-by: philbert <philip.herron@embecosm.com>", "tree": {"sha": "f790a4bc549fcaee5e73a566f1507a5eae7b525b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f790a4bc549fcaee5e73a566f1507a5eae7b525b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68ecc7e5914ef99b22c258e404c73b2401f9d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68ecc7e5914ef99b22c258e404c73b2401f9d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68ecc7e5914ef99b22c258e404c73b2401f9d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68ecc7e5914ef99b22c258e404c73b2401f9d89/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021e4953390da748515debfc8973149457d3118a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021e4953390da748515debfc8973149457d3118a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021e4953390da748515debfc8973149457d3118a"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "2bfa6c6cdf79000c35269591a471aae59c57a4b6", "filename": "gcc/rust/backend/rust-builtins.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Frust%2Fbackend%2Frust-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Frust%2Fbackend%2Frust-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.h?ref=f68ecc7e5914ef99b22c258e404c73b2401f9d89", "patch": "@@ -122,6 +122,14 @@ class BuiltinsContext\n     define_builtin (\"breakpoint\", BUILT_IN_TRAP, \"__builtin_trap\", \"breakpoint\",\n \t\t    build_function_type (void_type_node, void_list_node),\n \t\t    builtin_const | builtin_noreturn);\n+\n+    define_builtin (\n+      \"memcpy\", BUILT_IN_MEMCPY, \"__builtin_memcpy\", \"memcpy\",\n+      build_function_type_list (build_pointer_type (void_type_node),\n+\t\t\t\tbuild_pointer_type (void_type_node),\n+\t\t\t\tbuild_pointer_type (void_type_node),\n+\t\t\t\tsize_type_node, NULL_TREE),\n+      0);\n   }\n \n   // Define a builtin function.  BCODE is the builtin function code"}, {"sha": "61084b90f333fea0000c1afc963114eea328e007", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=f68ecc7e5914ef99b22c258e404c73b2401f9d89", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-location.h\"\n #include \"rust-tree.h\"\n #include \"tree-core.h\"\n+#include \"print-tree.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -39,6 +40,8 @@ static tree\n rotate_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n static tree\n wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n+static tree\n+copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype);\n \n static inline tree\n rotate_left_handler (Context *ctx, TyTy::FnType *fntype)\n@@ -76,7 +79,8 @@ static const std::map<std::string,\n \t\t\t{\"rotate_right\", &rotate_right_handler},\n \t\t\t{\"wrapping_add\", &wrapping_add_handler},\n \t\t\t{\"wrapping_sub\", &wrapping_sub_handler},\n-\t\t\t{\"wrapping_mul\", &wrapping_mul_handler}};\n+\t\t\t{\"wrapping_mul\", &wrapping_mul_handler},\n+\t\t\t{\"copy_nonoverlapping\", &copy_nonoverlapping_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -205,7 +209,9 @@ finalize_intrinsic_block (Context *ctx, tree fndecl)\n   tree bind_tree = ctx->pop_block ();\n \n   gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n+\n   DECL_SAVED_TREE (fndecl) = bind_tree;\n+\n   ctx->push_function (fndecl);\n }\n \n@@ -415,6 +421,7 @@ wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n \n   auto &lhs_param = param_vars.at (0);\n   auto &rhs_param = param_vars.at (1);\n+\n   if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n     return error_mark_node;\n \n@@ -440,5 +447,69 @@ wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n   return fndecl;\n }\n \n+/**\n+ * fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+ */\n+static tree\n+copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  rust_assert (fntype->get_params ().size () == 3);\n+  rust_assert (fntype->get_num_substitutions () == 1);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // Most intrinsic functions are pure - not `copy_nonoverlapping`\n+  TREE_READONLY (fndecl) = 0;\n+  TREE_SIDE_EFFECTS (fndecl) = 1;\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars);\n+\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN copy_nonoverlapping BODY BEGIN\n+\n+  auto src = ctx->get_backend ()->var_expression (param_vars[0], Location ());\n+  auto dst = ctx->get_backend ()->var_expression (param_vars[1], Location ());\n+  auto count = ctx->get_backend ()->var_expression (param_vars[2], Location ());\n+\n+  // We want to create the following statement\n+  // memcpy(dst, src, size_of::<T>());\n+  // so\n+  // memcpy(dst, src, size_expr);\n+\n+  auto *resolved_ty = fntype->get_substs ().at (0).get_param_ty ()->resolve ();\n+  auto param_type = TyTyResolveCompile::compile (ctx, resolved_ty);\n+\n+  tree size_expr\n+    = build2 (MULT_EXPR, size_type_node, TYPE_SIZE_UNIT (param_type), count);\n+\n+  tree memcpy_raw = nullptr;\n+  BuiltinsContext::get ().lookup_simple_builtin (\"memcpy\", &memcpy_raw);\n+  rust_assert (memcpy_raw);\n+  auto memcpy\n+    = build_fold_addr_expr_loc (Location ().gcc_location (), memcpy_raw);\n+\n+  auto copy_call\n+    = ctx->get_backend ()->call_expression (memcpy, {dst, src, size_expr},\n+\t\t\t\t\t    nullptr, Location ());\n+\n+  ctx->add_statement (copy_call);\n+\n+  // BUILTIN copy_nonoverlapping BODY END\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "2ae7a0869e3331043f10349240292bc38d0ea825", "filename": "gcc/testsuite/rust/execute/torture/copy_nonoverlapping1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68ecc7e5914ef99b22c258e404c73b2401f9d89/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs?ref=f68ecc7e5914ef99b22c258e404c73b2401f9d89", "patch": "@@ -0,0 +1,17 @@\n+extern \"rust-intrinsic\" {\n+    pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+fn main() -> i32 {\n+    let i = 15;\n+    let mut i_copy = 16;\n+\n+    let i = &i as *const i32;\n+    let i_copy = &mut i_copy as *mut i32;\n+\n+    unsafe {\n+        copy_nonoverlapping(i, i_copy, 1);\n+\n+        *i_copy - *i\n+    }\n+}\n\\ No newline at end of file"}]}