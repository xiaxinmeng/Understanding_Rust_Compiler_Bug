{"sha": "e50e1c5ee10099b0edb4cc966f90124452033cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUwZTFjNWVlMTAwOTliMGVkYjRjYzk2NmY5MDEyNDQ1MjAzM2NjNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:54:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:54:21Z"}, "message": "[multiple changes]\n\n2009-04-10  Bob Duff  <duff@adacore.com>\n\n\t* rtsfind.adb (RTE): Put implicit with_clauses on whatever unit needs\n\tthem first, rather than on the extended main unit.\n\n2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Discriminant_Conformance): If discriminant\n\tspecification of full view carries a null exclusion indicator, create\n\tan itype for it, to check for conformance with partial view.\n\nFrom-SVN: r145916", "tree": {"sha": "840595e40e4cb658712e10639c2d14da546c112f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840595e40e4cb658712e10639c2d14da546c112f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e50e1c5ee10099b0edb4cc966f90124452033cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50e1c5ee10099b0edb4cc966f90124452033cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50e1c5ee10099b0edb4cc966f90124452033cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50e1c5ee10099b0edb4cc966f90124452033cc5/comments", "author": null, "committer": null, "parents": [{"sha": "cb73686833844c5e5d24339de05f51057654d7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb73686833844c5e5d24339de05f51057654d7c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb73686833844c5e5d24339de05f51057654d7c1"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "d50db6c5c2ba185995681a5fab02c0511bd8ab6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e50e1c5ee10099b0edb4cc966f90124452033cc5", "patch": "@@ -1,3 +1,14 @@\n+2009-04-10  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.adb (RTE): Put implicit with_clauses on whatever unit needs\n+\tthem first, rather than on the extended main unit.\n+\n+2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Discriminant_Conformance): If discriminant\n+\tspecification of full view carries a null exclusion indicator, create\n+\tan itype for it, to check for conformance with partial view.\n+\n 2009-04-10  Bob Duff  <duff@adacore.com>\n \n \t* rtsfind.ads: Minor code change: make RE_Unit_Table constant."}, {"sha": "1ad8932957d1a166b3202cdbf380a29af25a2f69", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=e50e1c5ee10099b0edb4cc966f90124452033cc5", "patch": "@@ -112,18 +112,16 @@ package body Rtsfind is\n \n    --  When a unit is implicitly loaded as a result of a call to RTE, it is\n    --  necessary to create an implicit WITH to ensure that the object is\n-   --  correctly loaded by the binder. Such WITH statements are only required\n-   --  when the request is from the extended main unit (if a client needs a\n-   --  WITH, that will be taken care of when the client is compiled).\n-\n-   --  We always attach the WITH to the main unit. This is not perfectly\n-   --  accurate in terms of elaboration requirements, but it is close enough,\n-   --  since the units that are accessed using rtsfind do not have delicate\n-   --  elaboration requirements.\n+   --  correctly loaded by the binder. We originally added such WITH clauses\n+   --  only if the extended main unit required them, and added them only to the\n+   --  extended main unit. They are currently added to whatever unit first\n+   --  needs them, which is not necessarily the main unit. This works because\n+   --  if the main unit requires some runtime unit also required by some other\n+   --  unit, the other unit's implicit WITH will force a correct elaboration\n+   --  order. This method is necessary for SofCheck Inspector.\n \n    --  The flag Withed in the unit table record is initially set to False. It\n-   --  is set True if a WITH has been generated for the main unit for the\n-   --  corresponding unit.\n+   --  is set True if a WITH has been generated for the corresponding unit.\n \n    -----------------------\n    -- Local Subprograms --\n@@ -1065,18 +1063,13 @@ package body Rtsfind is\n          end if;\n       end if;\n \n-      --  See if we have to generate a WITH for this entity. We generate\n-      --  a WITH if the current unit is part of the extended main code\n-      --  unit, and if we have not already added the with. The WITH is\n-      --  added to the appropriate unit (the current one). We do not need\n-      --  to generate a WITH for a call issued from RTE_Available.\n+      --  See if we have to generate a WITH for this entity. We generate a WITH\n+      --  if we have not already added the with. The WITH is added to the\n+      --  appropriate unit (the current one). We do not need to generate a WITH\n+      --  for a call issued from RTE_Available.\n \n    <<Found>>\n-      if (not U.Withed)\n-        and then\n-          In_Extended_Main_Code_Unit (Cunit_Entity (Current_Sem_Unit))\n-        and then not RTE_Available_Call\n-      then\n+      if (not U.Withed) and then not RTE_Available_Call then\n          U.Withed := True;\n \n          declare"}, {"sha": "2691e467c431db1e2dab0c24ee9e097a83d49e29", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50e1c5ee10099b0edb4cc966f90124452033cc5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e50e1c5ee10099b0edb4cc966f90124452033cc5", "patch": "@@ -1381,7 +1381,7 @@ package body Sem_Ch6 is\n       --  the case where there is no separate spec.\n \n       procedure Check_Anonymous_Return;\n-      --  (Ada 2005): if a function returns an access type that denotes a task,\n+      --  Ada 2005: if a function returns an access type that denotes a task,\n       --  or a type that contains tasks, we must create a master entity for\n       --  the anonymous type, which typically will be used in an allocator\n       --  in the body of the function.\n@@ -4048,6 +4048,20 @@ package body Sem_Ch6 is\n          else\n             Analyze (Discriminant_Type (New_Discr));\n             New_Discr_Type := Etype (Discriminant_Type (New_Discr));\n+\n+            --  Ada 2005: if the discriminant definition carries a null\n+            --  exclusion, create an itype to check properly for consistency\n+            --  with partial declaration.\n+\n+            if Is_Access_Type (New_Discr_Type)\n+                 and then Null_Exclusion_Present (New_Discr)\n+            then\n+               New_Discr_Type :=\n+                 Create_Null_Excluding_Itype\n+                   (T           => New_Discr_Type,\n+                    Related_Nod => New_Discr,\n+                    Scope_Id    => Current_Scope);\n+            end if;\n          end if;\n \n          if not Conforming_Types"}]}