{"sha": "3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2YWI1Y2VmYTgxMTY1ZTkwZmI2MmFiZjUwZTUxNWY4NWExN2U5YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-13T08:58:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-13T09:03:30Z"}, "message": "Fix incorrect filling of delay slots in branchy code at -O2\n\nThe issue is that relax_delay_slots can streamline the CFG in some cases,\nin particular remove BARRIERs, but removing BARRIERs changes the way the\ninstructions are associated with (basic) blocks by the liveness analysis\ncode in resource.c (find_basic_block) and thus can cause entries in the\ncache maintained by resource.c to become outdated, thus producing wrong\nanswers downstream.\n\nThe fix is to invalidate the cache entries affected by the removal of\nBARRIERs in relax_delay_slots, i.e. for the instructions down to the\nnext BARRIER.\n\n\tPR rtl-optimization/94119\n\t* resource.h (clear_hashed_info_until_next_barrier): Declare.\n\t* resource.c (clear_hashed_info_until_next_barrier): New function.\n\t* reorg.c (add_to_delay_list): Fix formatting.\n\t(relax_delay_slots): Call clear_hashed_info_until_next_barrier on\n\tthe next instruction after removing a BARRIER.", "tree": {"sha": "83673fa186fe53cda48fbd1dc671d68115091816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83673fa186fe53cda48fbd1dc671d68115091816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/comments", "author": null, "committer": null, "parents": [{"sha": "82f620e2ba4c440c5e89bb1f73d10a11ed0f2eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f620e2ba4c440c5e89bb1f73d10a11ed0f2eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f620e2ba4c440c5e89bb1f73d10a11ed0f2eb4"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "61982897e1194c3120cfd3a6f6cf247b56d3e6ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "patch": "@@ -1,3 +1,12 @@\n+2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/94119\n+\t* resource.h (clear_hashed_info_until_next_barrier): Declare.\n+\t* resource.c (clear_hashed_info_until_next_barrier): New function.\n+\t* reorg.c (add_to_delay_list): Fix formatting.\n+\t(relax_delay_slots): Call clear_hashed_info_until_next_barrier on\n+\tthe next instruction after removing a BARRIER.\n+\n 2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/92071"}, {"sha": "84beb9395aa546169155de2d80b60d41d364c87d", "filename": "gcc/reorg.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "patch": "@@ -575,8 +575,9 @@ add_to_delay_list (rtx_insn *insn, vec<rtx_insn *> *delay_list)\n {\n   /* If INSN has its block number recorded, clear it since we may\n      be moving the insn to a new block.  */\n-      clear_hashed_info_for_insn (insn);\n-      delay_list->safe_push (insn);\n+  clear_hashed_info_for_insn (insn);\n+\n+  delay_list->safe_push (insn);\n }\n \f\n /* Delete INSN from the delay slot of the insn that it is in, which may\n@@ -3211,7 +3212,14 @@ relax_delay_slots (rtx_insn *first)\n \n \t      if (invert_jump (jump_insn, label, 1))\n \t\t{\n-\t\t  delete_related_insns (next);\n+\t\t  rtx_insn *from = delete_related_insns (next);\n+\n+\t\t  /* We have just removed a BARRIER, which means that the block\n+\t\t     number of the next insns has effectively been changed (see\n+\t\t     find_basic_block in resource.c), so clear it.  */\n+\t\t  if (from)\n+\t\t    clear_hashed_info_until_next_barrier (from);\n+\n \t\t  next = jump_insn;\n \t\t}\n \n@@ -3484,18 +3492,22 @@ relax_delay_slots (rtx_insn *first)\n \n \t      if (invert_jump (delay_jump_insn, label, 1))\n \t\t{\n-\t\t  int i;\n-\n \t\t  /* Must update the INSN_FROM_TARGET_P bits now that\n \t\t     the branch is reversed, so that mark_target_live_regs\n \t\t     will handle the delay slot insn correctly.  */\n-\t\t  for (i = 1; i < XVECLEN (PATTERN (insn), 0); i++)\n+\t\t  for (int i = 1; i < XVECLEN (PATTERN (insn), 0); i++)\n \t\t    {\n \t\t      rtx slot = XVECEXP (PATTERN (insn), 0, i);\n \t\t      INSN_FROM_TARGET_P (slot) = ! INSN_FROM_TARGET_P (slot);\n \t\t    }\n \n-\t\t  delete_related_insns (next);\n+\t\t  /* We have just removed a BARRIER, which means that the block\n+\t\t     number of the next insns has effectively been changed (see\n+\t\t     find_basic_block in resource.c), so clear it.  */\n+\t\t  rtx_insn *from = delete_related_insns (next);\n+\t\t  if (from)\n+\t\t    clear_hashed_info_until_next_barrier (from);\n+\n \t\t  next = insn;\n \t\t}\n "}, {"sha": "32faa73fd5fa72cebfc7c3d3687164ca450a6a3a", "filename": "gcc/resource.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "patch": "@@ -1282,7 +1282,26 @@ clear_hashed_info_for_insn (rtx_insn *insn)\n \ttinfo->block = -1;\n     }\n }\n-\f\n+\n+/* Clear any hashed information that we have stored for instructions\n+   between INSN and the next BARRIER that follow a JUMP or a LABEL.  */\n+\n+void\n+clear_hashed_info_until_next_barrier (rtx_insn *insn)\n+{\n+  while (insn && !BARRIER_P (insn))\n+    {\n+      if (JUMP_P (insn) || LABEL_P (insn))\n+\t{\n+\t  rtx_insn *next = next_active_insn (insn);\n+\t  if (next)\n+\t    clear_hashed_info_for_insn (next);\n+\t}\n+\n+      insn = next_nonnote_insn (insn);\n+    }\n+}\n+\n /* Increment the tick count for the basic block that contains INSN.  */\n \n void"}, {"sha": "c4f8aa2014104cad82f26bd31c03858690c47aa1", "filename": "gcc/resource.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Fresource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab5cefa81165e90fb62abf50e515f85a17e9a/gcc%2Fresource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.h?ref=3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "patch": "@@ -46,6 +46,7 @@ extern void mark_set_resources (rtx, struct resources *, int,\n \t\t\t\tenum mark_resource_type);\n extern void mark_referenced_resources (rtx, struct resources *, bool);\n extern void clear_hashed_info_for_insn (rtx_insn *);\n+extern void clear_hashed_info_until_next_barrier (rtx_insn *);\n extern void incr_ticks_for_insn (rtx_insn *);\n extern void mark_end_of_function_resources (rtx, bool);\n extern void init_resource_info (rtx_insn *);"}]}