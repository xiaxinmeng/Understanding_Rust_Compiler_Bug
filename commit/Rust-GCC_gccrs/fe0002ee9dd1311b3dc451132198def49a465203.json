{"sha": "fe0002ee9dd1311b3dc451132198def49a465203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwMDAyZWU5ZGQxMzExYjNkYzQ1MTEzMjE5OGRlZjQ5YTQ2NTIwMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-04-01T21:45:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-04-01T21:45:28Z"}, "message": "real.h (EXP_BITS): Make room for...\n\n* real.h (EXP_BITS): Make room for...\n(struct real_value): ... added canonical bit.\n(struct real_format): Added pnan.\n(mips_single_format, mips_double_format, mips_extended_format,\nmips_quad_format): New.\n* real.c: Copy p to pnan in all formats.\n(get_canonical_qnan, get_canonical_snan): Set canonical bit.\n(real_nan): Use pnan to compute significand's shift.\n(real_identical): Disregard significand in canonical\nNaNs.\n(real_hash): Likewise.  Take signalling into account.\n(encode_ieee_single, encode_ieee_double, encode_ieee_quad):\nDisregard significand bits in canonical NaNs.  Set all bits of\ncanonical NaN if !qnan_msb_set.\n(encode_ibm_extended, decode_ibm_extended): Likewise.  Use\nqnan_msb_set to tell the base double format.\n(ibm_extended_format): Use 53 as pnan.\n(mips_single_format, mips_double_format, mips_extended_format,\nmips_quad_format): Copied from the corresponding ieee/ibm\nformats, with qnan_msb_set false.\n* config/mips/iris6.h (MIPS_TFMODE_FORMAT): Use mips_extended_format.\n* config/mips/linux64.h (MIPS_TFMODE_FORMAT): Use mips_quad_format.\n* config/mips/mips.c (override_options): Use mips_single_format\nand mips_double_format.  Default TFmode to mips_quad_format.\n* config/mips/t-linux64 (tp-bit.c): Define QUIET_NAN_NEGATED.\n* config/mips/t-irix6: Likewise.\n* config/mips/t-mips (fp-bit.c, dp-bit.c): Likewise.\n* config/fp-bit.c (pack_d, unpack_d): Obey it.\n\nFrom-SVN: r65146", "tree": {"sha": "43a194f1d77d2dbf0fec3807a54f212259cb8abd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a194f1d77d2dbf0fec3807a54f212259cb8abd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0002ee9dd1311b3dc451132198def49a465203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0002ee9dd1311b3dc451132198def49a465203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0002ee9dd1311b3dc451132198def49a465203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0002ee9dd1311b3dc451132198def49a465203/comments", "author": null, "committer": null, "parents": [{"sha": "481a818131a2b5fae84cb3e1ad637edadfde657a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481a818131a2b5fae84cb3e1ad637edadfde657a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481a818131a2b5fae84cb3e1ad637edadfde657a"}], "stats": {"total": 246, "additions": 218, "deletions": 28}, "files": [{"sha": "82c47e019bc98a6af5054884abdee379a59caba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -1,3 +1,34 @@\n+2003-04-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* real.h (EXP_BITS): Make room for...\n+\t(struct real_value): ... added canonical bit.\n+\t(struct real_format): Added pnan.\n+\t(mips_single_format, mips_double_format, mips_extended_format,\n+\tmips_quad_format): New.\n+\t* real.c: Copy p to pnan in all formats.\n+\t(get_canonical_qnan, get_canonical_snan): Set canonical bit.\n+\t(real_nan): Use pnan to compute significand's shift.\n+\t(real_identical): Disregard significand in canonical\n+\tNaNs.\n+\t(real_hash): Likewise.  Take signalling into account.\n+\t(encode_ieee_single, encode_ieee_double, encode_ieee_quad):\n+\tDisregard significand bits in canonical NaNs.  Set all bits of\n+\tcanonical NaN if !qnan_msb_set.\n+\t(encode_ibm_extended, decode_ibm_extended): Likewise.  Use\n+\tqnan_msb_set to tell the base double format.\n+\t(ibm_extended_format): Use 53 as pnan.\n+\t(mips_single_format, mips_double_format, mips_extended_format,\n+\tmips_quad_format): Copied from the corresponding ieee/ibm\n+\tformats, with qnan_msb_set false.\n+\t* config/mips/iris6.h (MIPS_TFMODE_FORMAT): Use mips_extended_format.\n+\t* config/mips/linux64.h (MIPS_TFMODE_FORMAT): Use mips_quad_format.\n+\t* config/mips/mips.c (override_options): Use mips_single_format\n+\tand mips_double_format.  Default TFmode to mips_quad_format.\n+\t* config/mips/t-linux64 (tp-bit.c): Define QUIET_NAN_NEGATED.\n+\t* config/mips/t-irix6: Likewise.\n+\t* config/mips/t-mips (fp-bit.c, dp-bit.c): Likewise.\n+\t* config/fp-bit.c (pack_d, unpack_d): Obey it.\n+\n 2003-04-01  Geoffrey Keating  <geoffk@apple.com>\n \n \t* unwind-dw2-fde-darwin.c (DESTRUCTOR_MAY_BE_CALLED_LIVE): New."}, {"sha": "2832f96d5780ee248fe5a0bbde83e69723768e0b", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -210,7 +210,11 @@ pack_d ( fp_number_type *  src)\n       exp = EXPMAX;\n       if (src->class == CLASS_QNAN || 1)\n \t{\n+#ifdef QUIET_NAN_NEGATED\n+\t  fraction |= QUIET_NAN - 1;\n+#else\n \t  fraction |= QUIET_NAN;\n+#endif\n \t}\n     }\n   else if (isinf (src))\n@@ -521,7 +525,11 @@ unpack_d (FLO_union_type * src, fp_number_type * dst)\n       else\n \t{\n \t  /* Nonzero fraction, means nan */\n+#ifdef QUIET_NAN_NEGATED\n+\t  if ((fraction & QUIET_NAN) == 0)\n+#else\n \t  if (fraction & QUIET_NAN)\n+#endif\n \t    {\n \t      dst->class = CLASS_QNAN;\n \t    }"}, {"sha": "69f01aafa2f76929457f80077be993f5a5d3cf76", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -525,4 +525,4 @@ do {\t\t\t\t\t\t\t\t\t \\\n -_SYSTYPE_SVR4 -woff 131 \\\n %{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n \n-#define MIPS_TFMODE_FORMAT ibm_extended_format\n+#define MIPS_TFMODE_FORMAT mips_extended_format"}, {"sha": "c78e789f89ca1d76dcb63ce4ef33acf82ac32d6f", "filename": "gcc/config/mips/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux64.h?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -98,4 +98,4 @@ Boston, MA 02111-1307, USA.  */\n    for long double.  There's no need to override this here, since\n    ieee_quad_format is the default, but let's put this here to make\n    sure nobody thinks we just forgot to set it to something else.  */\n-#define MIPS_TFMODE_FORMAT ieee_quad_format\n+#define MIPS_TFMODE_FORMAT mips_quad_format"}, {"sha": "6425f2322039892d37b581c7b11bc0dad51d4623", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -5714,8 +5714,12 @@ override_options ()\n   else\n     mips16 = 0;\n \n+  real_format_for_mode[SFmode - QFmode] = &mips_single_format;\n+  real_format_for_mode[DFmode - QFmode] = &mips_double_format;\n #ifdef MIPS_TFMODE_FORMAT\n   real_format_for_mode[TFmode - QFmode] = &MIPS_TFMODE_FORMAT;\n+#else\n+  real_format_for_mode[TFmode - QFmode] = &mips_quad_format;\n #endif\n   \n   mips_print_operand_punct['?'] = 1;"}, {"sha": "d403df4cf00e38c9ec6b39f4462151dd23b0f50d", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -27,6 +27,7 @@ tp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#ifdef __MIPSEL__' > tp-bit.c\n \techo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c\n \techo '#endif' >> tp-bit.c\n+\techo '#define QUIET_NAN_NEGATED' >> dp-bit.c\n \techo '#if __LDBL_MANT_DIG__ == 106' >> tp-bit.c\n \techo '# define TFLOAT' >> tp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> tp-bit.c"}, {"sha": "a0792f23a94e3e580318f0b43c76fca1fffeab68", "filename": "gcc/config/mips/t-linux64", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-linux64?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -13,6 +13,7 @@ tp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c\n \techo '#endif' >> tp-bit.c\n \techo '#if __LDBL_MANT_DIG__ == 113' >> tp-bit.c\n+\techo '#define QUIET_NAN_NEGATED' >> dp-bit.c\n \techo '# define TFLOAT' >> tp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> tp-bit.c\n \techo '#endif' >> tp-bit.c"}, {"sha": "497f4fb20cb567481a6ed40b049da809b0246944", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -9,11 +9,13 @@ dp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#ifdef __MIPSEL__' > dp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n \techo '#endif' >> dp-bit.c\n+\techo '#define QUIET_NAN_NEGATED' >> dp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n \n fp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define FLOAT' > fp-bit.c\n \techo '#ifdef __MIPSEL__' >> fp-bit.c\n \techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n \techo '#endif' >> fp-bit.c\n+\techo '#define QUIET_NAN_NEGATED' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c"}, {"sha": "74f430c29ae46bcb4105e1caeca774119553aeb6", "filename": "gcc/real.c", "status": "modified", "additions": 160, "deletions": 25, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -158,6 +158,7 @@ get_canonical_qnan (r, sign)\n   memset (r, 0, sizeof (*r));\n   r->class = rvc_nan;\n   r->sign = sign;\n+  r->canonical = 1;\n }\n \n static inline void\n@@ -169,6 +170,7 @@ get_canonical_snan (r, sign)\n   r->class = rvc_nan;\n   r->sign = sign;\n   r->signalling = 1;\n+  r->canonical = 1;\n }\n \n static inline void\n@@ -1212,7 +1214,7 @@ real_isnegzero (r)\n \n /* Compare two floating-point objects for bitwise identity.  */\n \n-extern bool\n+bool\n real_identical (a, b)\n      const REAL_VALUE_TYPE *a, *b;\n {\n@@ -1237,6 +1239,9 @@ real_identical (a, b)\n     case rvc_nan:\n       if (a->signalling != b->signalling)\n \treturn false;\n+      /* The significand is ignored for canonical NaNs.  */\n+      if (a->canonical || b->canonical)\n+\treturn a->canonical == b->canonical;\n       break;\n \n     default:\n@@ -2246,7 +2251,7 @@ real_nan (r, str, quiet, mode)\n \n       /* Shift the significand into place such that the bits\n \t are in the most significant bits for the format.  */\n-      lshift_significand (r, r, SIGNIFICAND_BITS - fmt->p);\n+      lshift_significand (r, r, SIGNIFICAND_BITS - fmt->pnan);\n \n       /* Our MSB is always unset for NaNs.  */\n       r->sig[SIGSZ-1] &= ~SIG_MSB;\n@@ -2562,28 +2567,33 @@ real_hash (r)\n     {\n     case rvc_zero:\n     case rvc_inf:\n-      break;\n+      return h;\n \n     case rvc_normal:\n       h |= r->exp << 3;\n-      /* FALLTHRU */\n+      break;\n \n     case rvc_nan:\n-      if (sizeof(unsigned long) > sizeof(unsigned int))\n-\tfor (i = 0; i < SIGSZ; ++i)\n-\t  {\n-\t    unsigned long s = r->sig[i];\n-\t    h ^= s ^ (s >> (HOST_BITS_PER_LONG / 2));\n-\t  }\n-      else\n-\tfor (i = 0; i < SIGSZ; ++i)\n-\t  h ^= r->sig[i];\n+      if (r->signalling)\n+\th ^= (unsigned int)-1;\n+      if (r->canonical)\n+\treturn h;\n       break;\n \n     default:\n       abort ();\n     }\n \n+  if (sizeof(unsigned long) > sizeof(unsigned int))\n+    for (i = 0; i < SIGSZ; ++i)\n+      {\n+\tunsigned long s = r->sig[i];\n+\th ^= s ^ (s >> (HOST_BITS_PER_LONG / 2));\n+      }\n+  else\n+    for (i = 0; i < SIGSZ; ++i)\n+      h ^= r->sig[i];\n+\n   return h;\n }\n \f\n@@ -2621,11 +2631,19 @@ encode_ieee_single (fmt, buf, r)\n     case rvc_nan:\n       if (fmt->has_nans)\n \t{\n+\t  if (r->canonical)\n+\t    sig = 0;\n \t  if (r->signalling == fmt->qnan_msb_set)\n \t    sig &= ~(1 << 22);\n \t  else\n \t    sig |= 1 << 22;\n-\t  if (sig == 0)\n+\t  /* We overload qnan_msb_set here: it's only clear for\n+\t     mips_ieee_single, which wants all mantissa bits but the\n+\t     quiet/signalling one set in canonical NaNs (at least\n+\t     Quiet ones).  */\n+\t  if (r->canonical && !fmt->qnan_msb_set)\n+\t    sig |= (1 << 22) - 1;\n+\t  else if (sig == 0)\n \t    sig = 1 << 21;\n \n \t  image |= 255 << 23;\n@@ -2712,6 +2730,7 @@ const struct real_format ieee_single_format =\n     2,\n     1,\n     24,\n+    24,\n     -125,\n     128,\n     31,\n@@ -2722,6 +2741,24 @@ const struct real_format ieee_single_format =\n     true\n   };\n \n+const struct real_format mips_single_format = \n+  {\n+    encode_ieee_single,\n+    decode_ieee_single,\n+    2,\n+    1,\n+    24,\n+    24,\n+    -125,\n+    128,\n+    31,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false\n+  };\n+\n \f\n /* IEEE double-precision format.  */\n \n@@ -2774,11 +2811,22 @@ encode_ieee_double (fmt, buf, r)\n     case rvc_nan:\n       if (fmt->has_nans)\n \t{\n+\t  if (r->canonical)\n+\t    sig_hi = sig_lo = 0;\n \t  if (r->signalling == fmt->qnan_msb_set)\n \t    sig_hi &= ~(1 << 19);\n \t  else\n \t    sig_hi |= 1 << 19;\n-\t  if (sig_hi == 0 && sig_lo == 0)\n+\t  /* We overload qnan_msb_set here: it's only clear for\n+\t     mips_ieee_single, which wants all mantissa bits but the\n+\t     quiet/signalling one set in canonical NaNs (at least\n+\t     Quiet ones).  */\n+\t  if (r->canonical && !fmt->qnan_msb_set)\n+\t    {\n+\t      sig_hi |= (1 << 19) - 1;\n+\t      sig_lo = 0xffffffff;\n+\t    }\n+\t  else if (sig_hi == 0 && sig_lo == 0)\n \t    sig_hi = 1 << 18;\n \n \t  image_hi |= 2047 << 20;\n@@ -2909,6 +2957,7 @@ const struct real_format ieee_double_format =\n     2,\n     1,\n     53,\n+    53,\n     -1021,\n     1024,\n     63,\n@@ -2919,6 +2968,24 @@ const struct real_format ieee_double_format =\n     true\n   };\n \n+const struct real_format mips_double_format = \n+  {\n+    encode_ieee_double,\n+    decode_ieee_double,\n+    2,\n+    1,\n+    53,\n+    53,\n+    -1021,\n+    1024,\n+    63,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false\n+  };\n+\n \f\n /* IEEE extended double precision format.  This comes in three\n    flavours: Intel's as a 12 byte image, Intel's as a 16 byte image,\n@@ -3167,6 +3234,7 @@ const struct real_format ieee_extended_motorola_format =\n     2,\n     1,\n     64,\n+    64,\n     -16382,\n     16384,\n     95,\n@@ -3184,6 +3252,7 @@ const struct real_format ieee_extended_intel_96_format =\n     2,\n     1,\n     64,\n+    64,\n     -16381,\n     16384,\n     79,\n@@ -3201,6 +3270,7 @@ const struct real_format ieee_extended_intel_128_format =\n     2,\n     1,\n     64,\n+    64,\n     -16381,\n     16384,\n     79,\n@@ -3228,11 +3298,14 @@ static void decode_ibm_extended PARAMS ((const struct real_format *,\n \n static void\n encode_ibm_extended (fmt, buf, r)\n-     const struct real_format *fmt ATTRIBUTE_UNUSED;\n+     const struct real_format *fmt;\n      long *buf;\n      const REAL_VALUE_TYPE *r;\n {\n   REAL_VALUE_TYPE u, v;\n+  const struct real_format *base_fmt;\n+\n+  base_fmt = fmt->qnan_msb_set ? &ieee_double_format : &mips_double_format;\n \n   switch (r->class)\n     {\n@@ -3247,7 +3320,7 @@ encode_ibm_extended (fmt, buf, r)\n     case rvc_inf:\n     case rvc_nan:\n       /* Both doubles set to Inf / NaN.  */\n-      encode_ieee_double (&ieee_double_format, &buf[0], r);\n+      encode_ieee_double (base_fmt, &buf[0], r);\n       buf[2] = buf[0];\n       buf[3] = buf[1];\n       return;\n@@ -3270,13 +3343,13 @@ encode_ibm_extended (fmt, buf, r)\n \t{\n \t  /* v = remainder containing additional 53 bits of significand.  */\n \t  do_add (&v, r, &u, 1);\n-\t  round_for_format (&ieee_double_format, &v);\n+\t  round_for_format (base_fmt, &v);\n \t}\n \n-      round_for_format (&ieee_double_format, &u);\n+      round_for_format (base_fmt, &u);\n \n-      encode_ieee_double (&ieee_double_format, &buf[0], &u);\n-      encode_ieee_double (&ieee_double_format, &buf[2], &v);\n+      encode_ieee_double (base_fmt, &buf[0], &u);\n+      encode_ieee_double (base_fmt, &buf[2], &v);\n       break;\n \n     default:\n@@ -3291,12 +3364,14 @@ decode_ibm_extended (fmt, r, buf)\n      const long *buf;\n {\n   REAL_VALUE_TYPE u, v;\n+  const struct real_format *base_fmt;\n \n-  decode_ieee_double (&ieee_double_format, &u, &buf[0]);\n+  base_fmt = fmt->qnan_msb_set ? &ieee_double_format : &mips_double_format;\n+  decode_ieee_double (base_fmt, &u, &buf[0]);\n \n   if (u.class != rvc_zero && u.class != rvc_inf && u.class != rvc_nan)\n     {\n-      decode_ieee_double (&ieee_double_format, &v, &buf[2]);\n+      decode_ieee_double (base_fmt, &v, &buf[2]);\n       do_add (r, &u, &v, 0);\n     }\n   else\n@@ -3310,6 +3385,7 @@ const struct real_format ibm_extended_format =\n     2,\n     1,\n     53 + 53,\n+    53,\n     -1021 + 53,\n     1024,\n     -1,\n@@ -3320,6 +3396,24 @@ const struct real_format ibm_extended_format =\n     true\n   };\n \n+const struct real_format mips_extended_format = \n+  {\n+    encode_ibm_extended,\n+    decode_ibm_extended,\n+    2,\n+    1,\n+    53 + 53,\n+    53,\n+    -1021 + 53,\n+    1024,\n+    -1,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false\n+  };\n+\n \f\n /* IEEE quad precision format.  */\n \n@@ -3367,7 +3461,12 @@ encode_ieee_quad (fmt, buf, r)\n \t{\n \t  image3 |= 32767 << 16;\n \n-\t  if (HOST_BITS_PER_LONG == 32)\n+\t  if (r->canonical)\n+\t    {\n+\t      /* Don't use bits from the significand.  The\n+\t\t initialization above is right.  */\n+\t    }\n+\t  else if (HOST_BITS_PER_LONG == 32)\n \t    {\n \t      image0 = u.sig[0];\n \t      image1 = u.sig[1];\n@@ -3387,7 +3486,16 @@ encode_ieee_quad (fmt, buf, r)\n \t    image3 &= ~0x8000;\n \t  else\n \t    image3 |= 0x8000;\n-\t  if (((image3 & 0xffff) | image2 | image1 | image0) == 0)\n+\t  /* We overload qnan_msb_set here: it's only clear for\n+\t     mips_ieee_single, which wants all mantissa bits but the\n+\t     quiet/signalling one set in canonical NaNs (at least\n+\t     Quiet ones).  */\n+\t  if (r->canonical && !fmt->qnan_msb_set)\n+\t    {\n+\t      image3 |= 0x7fff;\n+\t      image2 = image1 = image0 = 0xffffffff;\n+\t    }\n+\t  else if (((image3 & 0xffff) | image2 | image1 | image0) == 0)\n \t    image3 |= 0x4000;\n \t}\n       else\n@@ -3565,6 +3673,7 @@ const struct real_format ieee_quad_format =\n     2,\n     1,\n     113,\n+    113,\n     -16381,\n     16384,\n     127,\n@@ -3574,6 +3683,24 @@ const struct real_format ieee_quad_format =\n     true,\n     true\n   };\n+\n+const struct real_format mips_quad_format = \n+  {\n+    encode_ieee_quad,\n+    decode_ieee_quad,\n+    2,\n+    1,\n+    113,\n+    113,\n+    -16381,\n+    16384,\n+    127,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false\n+  };\n \f\n /* Descriptions of VAX floating point formats can be found beginning at\n \n@@ -3873,6 +4000,7 @@ const struct real_format vax_f_format =\n     2,\n     1,\n     24,\n+    24,\n     -127,\n     127,\n     15,\n@@ -3890,6 +4018,7 @@ const struct real_format vax_d_format =\n     2,\n     1,\n     56,\n+    56,\n     -127,\n     127,\n     15,\n@@ -3907,6 +4036,7 @@ const struct real_format vax_g_format =\n     2,\n     1,\n     53,\n+    53,\n     -1023,\n     1023,\n     15,\n@@ -4089,6 +4219,7 @@ const struct real_format i370_single_format =\n     16,\n     4,\n     6,\n+    6,\n     -64,\n     63,\n     31,\n@@ -4106,6 +4237,7 @@ const struct real_format i370_double_format =\n     16,\n     4,\n     14,\n+    14,\n     -64,\n     63,\n     63,\n@@ -4321,6 +4453,7 @@ const struct real_format c4x_single_format =\n     2,\n     1,\n     24,\n+    24,\n     -126,\n     128,\n     -1,\n@@ -4338,6 +4471,7 @@ const struct real_format c4x_extended_format =\n     2,\n     1,\n     32,\n+    32,\n     -126,\n     128,\n     -1,\n@@ -4384,6 +4518,7 @@ const struct real_format real_internal_format =\n     2,\n     1,\n     SIGNIFICAND_BITS - 2,\n+    SIGNIFICAND_BITS - 2,\n     -MAX_EXP,\n     MAX_EXP,\n     -1,"}, {"sha": "0a470a512f3cd6d06948f294517f70d87eec24f8", "filename": "gcc/real.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0002ee9dd1311b3dc451132198def49a465203/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=fe0002ee9dd1311b3dc451132198def49a465203", "patch": "@@ -35,7 +35,7 @@ enum real_value_class {\n };\n \n #define SIGNIFICAND_BITS\t(128 + HOST_BITS_PER_LONG)\n-#define EXP_BITS\t\t(32 - 4)\n+#define EXP_BITS\t\t(32 - 5)\n #define MAX_EXP\t\t\t((1 << (EXP_BITS - 1)) - 1)\n #define SIGSZ\t\t\t(SIGNIFICAND_BITS / HOST_BITS_PER_LONG)\n #define SIG_MSB\t\t\t((unsigned long)1 << (HOST_BITS_PER_LONG - 1))\n@@ -45,6 +45,7 @@ struct real_value GTY(())\n   ENUM_BITFIELD (real_value_class) class : 2;\n   unsigned int sign : 1;\n   unsigned int signalling : 1;\n+  unsigned int canonical : 1;\n   signed int exp : EXP_BITS;\n   unsigned long sig[SIGSZ];\n };\n@@ -119,6 +120,9 @@ struct real_format\n   /* Size of the significand in digits of radix B.  */\n   int p;\n \n+  /* Size of the significant of a NaN, in digits of radix B.  */\n+  int pnan;\n+\n   /* The minimum negative integer, x, such that b**(x-1) is normalized.  */\n   int emin;\n \n@@ -222,12 +226,16 @@ extern unsigned int real_hash\tPARAMS ((const REAL_VALUE_TYPE *));\n \n /* Target formats defined in real.c.  */\n extern const struct real_format ieee_single_format;\n+extern const struct real_format mips_single_format;\n extern const struct real_format ieee_double_format;\n+extern const struct real_format mips_double_format;\n extern const struct real_format ieee_extended_motorola_format;\n extern const struct real_format ieee_extended_intel_96_format;\n extern const struct real_format ieee_extended_intel_128_format;\n extern const struct real_format ibm_extended_format;\n+extern const struct real_format mips_extended_format;\n extern const struct real_format ieee_quad_format;\n+extern const struct real_format mips_quad_format;\n extern const struct real_format vax_f_format;\n extern const struct real_format vax_d_format;\n extern const struct real_format vax_g_format;"}]}