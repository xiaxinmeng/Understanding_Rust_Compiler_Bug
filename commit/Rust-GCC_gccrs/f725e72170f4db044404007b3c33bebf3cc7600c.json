{"sha": "f725e72170f4db044404007b3c33bebf3cc7600c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyNWU3MjE3MGY0ZGIwNDQ0MDQwMDdiM2MzM2JlYmYzY2M3NjAwYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-11-17T18:17:17Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-11-17T18:17:17Z"}, "message": "c-parser.c (c_token_is_qualifier, [...]): New.\n\n2010-11-17  Paolo Bonzini  <bonzini@gnu.org>\n\n        * c-parser.c (c_token_is_qualifier,\n        c_parser_next_token_is_qualifier): New.\n        (c_parser_declaration_or_fndef, c_parser_struct_declaration):\n        Improve error message on specs->tagdef_seen_p.\n        (c_parser_struct_or_union_specifier): Improve error recovery.\n        (c_parser_declspecs): Move exit condition on C_ID_ID early.\n        Reorganize exit condition for C_ID_TYPENAME/C_ID_CLASSNAME\n        using c_parser_next_token_is_qualifier; extend it to cover\n        a ctsk_tagdef typespec and !typespec_ok in general.\n\ntestsuite:\n2010-11-17  Paolo Bonzini  <bonzini@gnu.org>\n\n        * gcc.dg/two-types-1.c: New test.\n        * gcc.dg/two-types-2.c: New test.\n        * gcc.dg/two-types-3.c: New test.\n        * gcc.dg/two-types-4.c: New test.\n        * gcc.dg/two-types-5.c: New test.\n        * gcc.dg/two-types-6.c: New test.\n        * gcc.dg/two-types-7.c: New test.\n        * gcc.dg/two-types-8.c: New test.\n        * gcc.dg/two-types-9.c: New test.\n        * gcc.dg/two-types-10.c: New test.\n        * objc.dg/two-types-1.m: New test.\n\nFrom-SVN: r166874", "tree": {"sha": "7f20a50b2e03297314d83ada80da9cddc61f1427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f20a50b2e03297314d83ada80da9cddc61f1427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f725e72170f4db044404007b3c33bebf3cc7600c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f725e72170f4db044404007b3c33bebf3cc7600c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f725e72170f4db044404007b3c33bebf3cc7600c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f725e72170f4db044404007b3c33bebf3cc7600c/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0197bf54a19f23c0bcb3fb2e38965db7f9434aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0197bf54a19f23c0bcb3fb2e38965db7f9434aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0197bf54a19f23c0bcb3fb2e38965db7f9434aaf"}], "stats": {"total": 214, "additions": 206, "deletions": 8}, "files": [{"sha": "bd1e98d7242c9f306c8a16ddbb8e153089f0950c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -1,3 +1,15 @@\n+2010-11-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-parser.c (c_token_is_qualifier,\n+\tc_parser_next_token_is_qualifier): New.\n+\t(c_parser_declaration_or_fndef, c_parser_struct_declaration):\n+\tImprove error message on specs->tagdef_seen_p.\n+\t(c_parser_struct_or_union_specifier): Improve error recovery.\n+\t(c_parser_declspecs): Move exit condition on C_ID_ID early.\n+\tReorganize exit condition for C_ID_TYPENAME/C_ID_CLASSNAME\n+\tusing c_parser_next_token_is_qualifier; extend it to cover\n+\ta ctsk_tagdef typespec and !typespec_ok in general.\n+\n 2010-11-17  Richard Guenther  <rguenther@suse.de>\n \n \t* value-prof.c (gimple_divmod_fixed_value_transform): Update"}, {"sha": "0c4662a9c7cd31be6a517f3946dcd94d273830f9", "filename": "gcc/c-parser.c", "status": "modified", "additions": 93, "deletions": 8, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -506,6 +506,47 @@ c_parser_next_token_starts_typename (c_parser *parser)\n   return c_token_starts_typename (token);\n }\n \n+/* Return true if TOKEN is a type qualifier, false otherwise.  */\n+static bool\n+c_token_is_qualifier (c_token *token)\n+{\n+  switch (token->type)\n+    {\n+    case CPP_NAME:\n+      switch (token->id_kind)\n+\t{\n+\tcase C_ID_ADDRSPACE:\n+\t  return true;\n+\tdefault:\n+\t  return false;\n+\t}\n+    case CPP_KEYWORD:\n+      switch (token->keyword)\n+\t{\n+\tcase RID_CONST:\n+\tcase RID_VOLATILE:\n+\tcase RID_RESTRICT:\n+\tcase RID_ATTRIBUTE:\n+\t  return true;\n+\tdefault:\n+\t  return false;\n+\t}\n+    case CPP_LESS:\n+      return false;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Return true if the next token from PARSER is a type qualifier,\n+   false otherwise.  */\n+static inline bool\n+c_parser_next_token_is_qualifier (c_parser *parser)\n+{\n+  c_token *token = c_parser_peek_token (parser);\n+  return c_token_is_qualifier (token);\n+}\n+\n /* Return true if TOKEN can start declaration specifiers, false\n    otherwise.  */\n static bool\n@@ -1409,6 +1450,19 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       c_parser_consume_token (parser);\n       return;\n     }\n+\n+  /* Provide better error recovery.  Note that a type name here is usually\n+     better diagnosed as a redeclaration.  */\n+  if (empty_ok\n+      && specs->typespec_kind == ctsk_tagdef\n+      && c_parser_next_token_starts_declspecs (parser)\n+      && !c_parser_next_token_is (parser, CPP_NAME))\n+    {\n+      c_parser_error (parser, \"expected %<;%>, identifier or %<(%>\");\n+      parser->error = false;\n+      shadow_tag_warned (specs, 1);\n+      return;\n+    }\n   else if (c_dialect_objc ())\n     {\n       /* Prefix attributes are an error on method decls.  */\n@@ -1872,13 +1926,31 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n {\n   bool attrs_ok = start_attr_ok;\n   bool seen_type = specs->typespec_kind != ctsk_none;\n-  while (c_parser_next_token_is (parser, CPP_NAME)\n+  while ((c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_token (parser)->id_kind != C_ID_ID)\n \t || c_parser_next_token_is (parser, CPP_KEYWORD)\n \t || (c_dialect_objc () && c_parser_next_token_is (parser, CPP_LESS)))\n     {\n       struct c_typespec t;\n       tree attrs;\n       location_t loc = c_parser_peek_token (parser)->location;\n+\n+      if (!c_parser_next_token_is_qualifier (parser))\n+        {\n+\t  /* Exit for TYPENAMEs after any type because they can appear as a\n+\t     field name.  */\n+          if (seen_type && c_parser_next_token_is (parser, CPP_NAME))\n+            break;\n+\n+          /* If we cannot accept a type, and the next token must start one,\n+\t     exit.  Do the same if we already have seen a tagged definition,\n+\t     since it would be an error anyway and likely the user has simply\n+\t     forgotten a semicolon.  */\n+          if ((!typespec_ok || specs->typespec_kind == ctsk_tagdef)\n+\t      && c_parser_next_token_starts_typename (parser))\n+            break;\n+        }\n+\n       if (c_parser_next_token_is (parser, CPP_NAME))\n \t{\n \t  tree value = c_parser_peek_token (parser)->value;\n@@ -1894,12 +1966,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t      continue;\n \t    }\n \n-\t  /* This finishes the specifiers unless a type name is OK, it\n-\t     is declared as a type name and a type name hasn't yet\n-\t     been seen.  */\n-\t  if (!typespec_ok || seen_type\n-\t      || (kind != C_ID_TYPENAME && kind != C_ID_CLASSNAME))\n-\t    break;\n+\t  /* Now at a C_ID_TYPENAME or C_ID_CLASSNAME.  */\n \t  c_parser_consume_token (parser);\n \t  seen_type = true;\n \t  attrs_ok = true;\n@@ -2340,12 +2407,17 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n \t      if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n \t\tpedwarn (c_parser_peek_token (parser)->location, 0,\n \t\t\t \"no semicolon at end of struct or union\");\n-\t      else\n+\t      else if (parser->error\n+\t\t       || !c_parser_next_token_starts_declspecs (parser))\n \t\t{\n \t\t  c_parser_error (parser, \"expected %<;%>\");\n \t\t  c_parser_skip_until_found (parser, CPP_CLOSE_BRACE, NULL);\n \t\t  break;\n \t\t}\n+\n+\t      /* If we come here, we have already emitted an error\n+\t\t for an expected `;', identifier or `(', and we also\n+\t         recovered already.  Go on with the next field. */\n \t    }\n \t}\n       postfix_attrs = c_parser_attributes (parser);\n@@ -2461,6 +2533,19 @@ c_parser_struct_declaration (c_parser *parser)\n \t}\n       return ret;\n     }\n+\n+  /* Provide better error recovery.  Note that a type name here is valid,\n+     and will be treated as a field name.  */\n+  if (specs->typespec_kind == ctsk_tagdef\n+      && TREE_CODE (specs->type) != ENUMERAL_TYPE\n+      && c_parser_next_token_starts_declspecs (parser)\n+      && !c_parser_next_token_is (parser, CPP_NAME))\n+    {\n+      c_parser_error (parser, \"expected %<;%>, identifier or %<(%>\");\n+      parser->error = false;\n+      return NULL_TREE;\n+    }\n+\n   pending_xref_error ();\n   prefix_attrs = specs->attrs;\n   all_prefix_attrs = prefix_attrs;"}, {"sha": "571dbc42521b22669eadce2959041419b52a259e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -1,3 +1,17 @@\n+2010-11-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/two-types-1.c: New test.\n+\t* gcc.dg/two-types-2.c: New test.\n+\t* gcc.dg/two-types-3.c: New test.\n+\t* gcc.dg/two-types-4.c: New test.\n+\t* gcc.dg/two-types-5.c: New test.\n+\t* gcc.dg/two-types-6.c: New test.\n+\t* gcc.dg/two-types-7.c: New test.\n+\t* gcc.dg/two-types-8.c: New test.\n+\t* gcc.dg/two-types-9.c: New test.\n+\t* gcc.dg/two-types-10.c: New test.\n+\t* objc.dg/two-types-1.m: New test.\n+\n 2010-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/46440"}, {"sha": "f6160aad1fc5a1e46884fd7a5c17f711892ff7de", "filename": "gcc/testsuite/gcc.dg/two-types-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-1.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+typedef int x, y;\n+x y z;\t\t\t/* { dg-error \"\" \"\" } */"}, {"sha": "6c2b79bd5281844ed3bb2e69886f6cb7ba06a905", "filename": "gcc/testsuite/gcc.dg/two-types-10.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-10.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+typedef enum a { XYZ } a; /* { dg-message \"previous declaration\" } */\n+enum a a;\t/* { dg-error \"redeclared\" } */\n+struct b { enum a a : 8; };"}, {"sha": "30fcabc118dc43cfeda041b17bd8bb70cc4f50ee", "filename": "gcc/testsuite/gcc.dg/two-types-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-2.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+typedef int x, y;\n+x struct f z; /* { dg-error \"two or more \" \"\" } */"}, {"sha": "233f9da5be15a44134c6f6add28615f0e6656dd3", "filename": "gcc/testsuite/gcc.dg/two-types-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-3.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+struct f {\n+}\n+int z(); /* { dg-error \"expected ';', identifier or \" \"\"  { target *-*-* }  } */"}, {"sha": "1ec734f12547a76cc88af66adb05f9e7dd1494af", "filename": "gcc/testsuite/gcc.dg/two-types-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-4.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+int f()\n+{\n+  struct f {\n+  }\n+  int z; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+}"}, {"sha": "a127388075425a60a48b876069f33909be7b7b3a", "filename": "gcc/testsuite/gcc.dg/two-types-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-5.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+struct f {}\n+struct g {} /* { dg-error \"expected ';', identifier or \" \"\" } */\n+int f(); /* { dg-error \"expected ';', identifier or \" \"\" } */"}, {"sha": "1c55549162c2e67e019a80f683d03ce947a434d0", "filename": "gcc/testsuite/gcc.dg/two-types-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-6.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+struct s {\n+  struct f {} /* dg-warning \"does not declare anything\" \"\" } */\n+  struct g {} x; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+};"}, {"sha": "981c69b569ef09b19c21e271c99f5af0438e2938", "filename": "gcc/testsuite/gcc.dg/two-types-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-7.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+struct s {\n+  struct f {}\n+  enum a { X } /* { dg-error \"expected ';', identifier or \" \"\" } */\n+  struct g {} /* { dg-error \"expected identifier \" \"\" } */\n+}; /* { dg-warning \"no semicolon\" \"\" } */"}, {"sha": "0103b221bcd8f292c5fd21319ac9e293d6648767", "filename": "gcc/testsuite/gcc.dg/two-types-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-8.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+enum x { XYZ }\n+struct g { enum x a; }; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+\n+int f(struct g *x)\n+{\n+  return x->a == XYZ; /* { dg-bogus \" has no member \" \"\" } */\n+}"}, {"sha": "c6da9499226a6749f461ed3eec05844b4445c717", "filename": "gcc/testsuite/gcc.dg/two-types-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftwo-types-9.c?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+struct f {}\n+static int a, b; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+\n+int f()\n+{\n+\treturn a - b; /* { dg-bogus \"invalid operands \" \"\" } */\n+}"}, {"sha": "da902a3e367a753b6b1e9f9b0181eafb1dae101d", "filename": "gcc/testsuite/objc.dg/two-types-1.m", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f725e72170f4db044404007b3c33bebf3cc7600c/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftwo-types-1.m?ref=f725e72170f4db044404007b3c33bebf3cc7600c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } // suppress default -pedantic-errors */\n+\n+@interface foo\n+struct f {}\n+struct g { int a; }; /* { dg-error \"expected ';', identifier or \" \"\" } */\n+\n+- (struct f *) a;\n+- (struct g *) b;\n+@end\n+\n+int f(struct g *x)\n+{\n+  return x->a; /* { dg-bogus \" has no member \" \"\" } */\n+}"}]}