{"sha": "1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyNmEwNjA2YmI5YjVlYTU3MWYwYjFiNjhmMjE4MWZkYmQyZTEyZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-06T21:28:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-06T21:28:22Z"}, "message": "Makefile.in (C_AND_OBJC_OBJS): Remove ggc-callbacks.o.\n\n\t* Makefile.in (C_AND_OBJC_OBJS): Remove ggc-callbacks.o.\n\t(c-parse.o, c-decl.o, c-lang.o, c-lex.o, c-common.o,\n\t$(out_object_file)): Depend on ggc.h.\n\t* c-common.c: Include \"ggc.h\".\n\t(combine_strings): If doing GC, use ggc_alloc_string.\n\t* c-decl.c: Include \"ggc.h\".\n\t(ggc_p): Define with value 0.\n\t(mark_binding_level): New function.\n\t(init_decl_processing): Add GC roots.\n\t(mark_c_function_context): New function.\n\t(lang_mark_false_label_stack): New function.\n\t(lang_mark_tree): New function.\n\t(lang_cleanup_tree): New function.\n\t* c-lang.c: Include \"ggc.h\".\n\t(lang_init): Call c_parse_init.\n\t* c-lex.c: Include \"ggc.h\".\n\t(check_linenum): If doing GC, don't copy filenames to permanent\n\tobstack.\n\t* c-parse.in: Include \"ggc.h\".\n\t(c_parse_init): New function.\n\t* c-tree.h (c_parse_init, mark_c_function_context): Declare.\n\t* objc/Make-lang.in (objc-parse.o): Depend on ggc.h.\n\n\t* except.c (mark_eh_state): Mark more state.\n\t* function.c (mark_function_state): Likewise.\n\t* ggc-simple.c (ggc_alloc_rtvec): Bring in sync with non-gc version.\n\t(ggc_alloc_string) [GGC_DUMP]: Fix typo.\n\t* toplev.c (mark_file_stack): New function.\n\t(compile_file): If doing GC, use ggc_alloc_string on input filename.\n\t(main): Add root for input_file_stack.\n\n\t* i386.c: Include \"ggc.h\".\n\t(ix86_mark_machine_status): New function.\n\t(override_options): Set mark_machine_status.\n\nFrom-SVN: r29143", "tree": {"sha": "2092d851d6543942e355d2ca28226abc3bbe2721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2092d851d6543942e355d2ca28226abc3bbe2721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/comments", "author": null, "committer": null, "parents": [{"sha": "2e28f042c025317bc5c73b736cb0bd8e62f6ac60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e28f042c025317bc5c73b736cb0bd8e62f6ac60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e28f042c025317bc5c73b736cb0bd8e62f6ac60"}], "stats": {"total": 942, "additions": 554, "deletions": 388}, "files": [{"sha": "07a343703feea1c95bc438fb674e33996c19da4d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -659,7 +659,7 @@ SUBDIR_FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \\\n \n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o \\\n-  c-aux-info.o c-common.o c-iterate.o ggc-callbacks.o @extra_c_objs@\n+  c-aux-info.o c-common.o c-iterate.o @extra_c_objs@\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n@@ -1312,7 +1312,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \n # C language specific files.\n \n-c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \\\n+c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h ggc.h \\\n     $(srcdir)/c-parse.h c-tree.h c-common.h input.h flags.h system.h toplev.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n $(srcdir)/c-parse.h: $(srcdir)/c-parse.c\n@@ -1330,15 +1330,15 @@ $(srcdir)/c-gperf.h: c-parse.gperf\n \t   -k1,3,$$ $(srcdir)/c-parse.gperf >tmp-gperf.h\n \t $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n \n-c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n+c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h ggc.h \\\n     c-lex.h flags.h function.h output.h toplev.h defaults.h\n c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n     flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h\n-c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h ggc.h \\\n     c-lex.h toplev.h output.h function.h\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n     c-common.h $(srcdir)/c-parse.h $(srcdir)/c-gperf.h c-pragma.h input.h \\\n-    intl.h flags.h toplev.h output.h mbchar.h\n+    intl.h flags.h toplev.h output.h mbchar.h ggc.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h \\\n     c-common.h flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h\n@@ -1395,7 +1395,7 @@ s-under: $(GCC_PASSES)\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n-\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H)\n+\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) ggc.h\n \n # Language-independent files.\n \n@@ -1602,7 +1602,7 @@ reg-stack.o : reg-stack.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) recog.h \\\n dyn-string.o: dyn-string.c dyn-string.h $(CONFIG_H) system.h\n lists.o: lists.c $(CONFIG_H) system.h toplev.h $(RTL_H)\n \n-$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) \\\n+$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) ggc.h \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n    insn-flags.h output.h insn-attr.h insn-codes.h system.h toplev.h function.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)"}, {"sha": "4fea4ac70aed22f508807aa37a4be2567b73a526", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"c-pragma.h\"\n #include \"rtl.h\"\n+#include \"ggc.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -347,7 +348,7 @@ combine_strings (strings)\n       if (wide_flag)\n \tlength = length * wchar_bytes + wide_length;\n \n-      p = savealloc (length);\n+      p = ggc_p ? ggc_alloc_string (NULL, length) : savealloc (length);\n \n       /* Copy the individual strings into the new combined string.\n \t If the combined string is wide, convert the chars to ints"}, {"sha": "d4c4fe1178f7a6958279ab874b372ec0fd1787d4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"defaults.h\"\n+#include \"ggc.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -105,6 +106,9 @@ enum decl_context\n #define WCHAR_TYPE \"int\"\n #endif\n \f\n+/* Don't do GC.  */\n+int ggc_p = 0;\n+\n /* a node which has tree code ERROR_MARK, and whose type is itself.\n    All erroneous expressions are replaced with this node.  All functions\n    that accept nodes as arguments should avoid generating error messages\n@@ -342,6 +346,7 @@ tree static_ctors, static_dtors;\n /* Forward declarations.  */\n \n static struct binding_level * make_binding_level\tPROTO((void));\n+static void mark_binding_level\t\tPROTO((void *));\n static void clear_limbo_values\t\tPROTO((tree));\n static int duplicate_decls\t\tPROTO((tree, tree, int));\n static int redeclaration_error_message\tPROTO((tree, tree));\n@@ -2928,6 +2933,25 @@ lookup_name_current_level (name)\n   return t;\n }\n \f\n+/* Mark ARG for GC.  */\n+void \n+mark_binding_level (arg)\n+     void *arg;\n+{\n+  struct binding_level *level = *(struct binding_level **) arg;\n+\n+  while (level)\n+    {\n+      ggc_mark_tree (level->names);\n+      ggc_mark_tree (level->tags);\n+      ggc_mark_tree (level->shadowed);\n+      ggc_mark_tree (level->blocks);\n+      ggc_mark_tree (level->this_block);\n+      ggc_mark_tree (level->parm_order);\n+      level = level->level_chain;\n+    }\n+}\n+\n /* Create the predefined scalar types of C,\n    and some nodes representing standard constants (0, 1, (void *) 0).\n    Initialize the global binding level.\n@@ -3222,6 +3246,31 @@ init_decl_processing ()\n   incomplete_decl_finalize_hook = finish_incomplete_decl;\n \n   lang_get_alias_set = c_get_alias_set;\n+\n+  /* Record our roots.  */\n+\n+  ggc_add_tree_root (c_global_trees, CTI_MAX);\n+  ggc_add_tree_root (&current_function_decl, 1);\n+  ggc_add_tree_root (&error_mark_node, 1);\n+  ggc_add_tree_root (&ptr_type_node, 1);\n+  ggc_add_tree_root (&va_list_type_node, 1);\n+  ggc_add_tree_root (&void_type_node, 1);\n+  ggc_add_tree_root (&char_type_node, 1);\n+  ggc_add_tree_root (&integer_type_node, 1);\n+  ggc_add_tree_root (&unsigned_type_node, 1);\n+  ggc_add_tree_root (&integer_one_node, 1);\n+  ggc_add_tree_root (&integer_zero_node, 1);\n+  ggc_add_tree_root (&named_labels, 1);\n+  ggc_add_tree_root (&null_pointer_node, 1);\n+  ggc_add_tree_root (&size_one_node, 1);\n+  ggc_add_tree_root (&size_zero_node, 1);\n+  ggc_add_tree_root (&shadowed_labels, 1);\n+  ggc_add_root (&current_binding_level, 1, sizeof current_binding_level,\n+\t\tmark_binding_level);\n+  ggc_add_root (&label_level_chain, 1, sizeof label_level_chain,\n+\t\tmark_binding_level);\n+  ggc_add_tree_root (&static_ctors, 1);\n+  ggc_add_tree_root (&static_dtors, 1);\n }\n \n /* Return a definition for a builtin function named NAME and whose data type\n@@ -7048,6 +7097,21 @@ pop_c_function_context (f)\n   f->language = 0;\n }\n \n+/* Mark the language specific parts of F for GC.  */\n+void\n+mark_c_function_context (f)\n+     struct function *f;\n+{\n+  struct language_function *p = f->language;\n+\n+  if (p == 0)\n+    return;\n+\n+  ggc_mark_tree (p->shadowed_labels);\n+  ggc_mark_tree (p->named_labels);\n+  mark_binding_level (&p->binding_level);\n+}\n+\n /* integrate_decl_tree calls this function, but since we don't use the\n    DECL_LANG_SPECIFIC field, this is a no-op.  */\n \n@@ -7056,3 +7120,45 @@ copy_lang_decl (node)\n      tree node ATTRIBUTE_UNUSED;\n {\n }\n+\n+/* Mark ARG for GC.  */\n+void\n+lang_mark_false_label_stack (arg)\n+     struct label_node *arg;\n+{\n+  /* C doesn't use false_label_stack.  It better be NULL.  */\n+  if (arg != NULL)\n+    abort();\n+}\n+\n+/* Mark the language specific bits in T for GC.  */\n+void\n+lang_mark_tree (t)\n+     tree t;\n+{\n+  if (TREE_CODE (t) == IDENTIFIER_NODE)\n+    {\n+      struct lang_identifier *i = (struct lang_identifier *) t;\n+      ggc_mark_tree (i->global_value);\n+      ggc_mark_tree (i->local_value);\n+      ggc_mark_tree (i->label_value);\n+      ggc_mark_tree (i->implicit_decl);\n+      ggc_mark_tree (i->error_locus);\n+      ggc_mark_tree (i->limbo_value);\n+    }\n+}\n+\n+/* Free the language specific bits in T for GC.  */\n+void\n+lang_cleanup_tree (t)\n+     tree t;\n+{\n+  if (TREE_CODE_CLASS (TREE_CODE (t)) == 't'\n+      && TYPE_LANG_SPECIFIC (t) != NULL)\n+    {\n+#if 0\n+      /* This is currently allocated with an obstack.  This will change.  */\n+      free (TYPE_LANG_SPECIFIC (t));\n+#endif\n+    }\n+}"}, {"sha": "24fc72c71b4a4df3489d5aa60a44771fc423d442", "filename": "gcc/c-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n+#include \"ggc.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -72,6 +73,9 @@ lang_init ()\n \n   save_lang_status = &push_c_function_context;\n   restore_lang_status = &pop_c_function_context;\n+  mark_lang_status = &mark_c_function_context;\n+\n+  c_parse_init ();\n }\n \n void"}, {"sha": "79002f3e3fd64fdafcf709a37bc12558593841a3", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n+#include \"ggc.h\"\n \n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after\n@@ -752,7 +753,7 @@ check_newline ()\n       goto skipline;\n     }\n \n-  if (!TREE_PERMANENT (yylval.ttype))\n+  if (! ggc_p && !TREE_PERMANENT (yylval.ttype))\n     {\n       input_filename\n \t= (char *) permalloc (TREE_STRING_LENGTH (yylval.ttype) + 1);"}, {"sha": "919e0fc3dbdc8175918885d4024b0b45ca20223c", "filename": "gcc/c-parse.c", "status": "modified", "additions": 386, "deletions": 375, "changes": 761, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -80,7 +80,8 @@\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n-\n+#include \"ggc.h\"\n+  \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif\n@@ -96,10 +97,10 @@ const char * const language_string = \"GNU C\";\n /* Cause the `yydebug' variable to be defined.  */\n #define YYDEBUG 1\n \n-#line 64 \"c-parse.y\"\n+#line 65 \"c-parse.y\"\n typedef union {long itype; tree ttype; enum tree_code code;\n \tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n-#line 184 \"c-parse.y\"\n+#line 185 \"c-parse.y\"\n \n /* Number of statements (loosely speaking) and compound statements \n    seen so far.  */\n@@ -126,6 +127,16 @@ static int undeclared_variable_notice;\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n extern void yyprint\t\t\tPROTO ((FILE *, int, YYSTYPE));\n+\n+/* Add GC roots for variables local to this file.  */\n+void\n+c_parse_init ()\n+{\n+  ggc_add_tree_root (&declspec_stack, 1);\n+  ggc_add_tree_root (&current_declspecs, 1);\n+  ggc_add_tree_root (&prefix_attributes, 1);\n+}\n+\n #include <stdio.h>\n \n #ifndef __cplusplus\n@@ -360,47 +371,47 @@ static const short yyrhs[] = {    -1,\n \n #if YYDEBUG != 0\n static const short yyrline[] = { 0,\n-   213,   218,   232,   234,   234,   235,   237,   239,   240,   248,\n-   252,   263,   268,   273,   275,   277,   278,   279,   284,   291,\n-   293,   298,   303,   309,   311,   316,   321,   327,   329,   334,\n-   341,   343,   346,   348,   350,   352,   354,   356,   358,   362,\n-   366,   369,   372,   375,   379,   381,   384,   387,   391,   419,\n-   425,   428,   431,   434,   436,   438,   442,   446,   450,   452,\n-   455,   459,   486,   488,   490,   492,   494,   496,   498,   500,\n-   502,   504,   506,   508,   510,   512,   516,   518,   522,   524,\n-   527,   531,   533,   540,   543,   551,   562,   661,   662,   664,\n-   670,   672,   695,   704,   706,   708,   712,   718,   720,   725,\n-   727,   732,   734,   735,   745,   750,   752,   753,   754,   761,\n-   767,   772,   775,   783,   788,   790,   791,   792,   799,   810,\n-   814,   820,   825,   830,   835,   837,   839,   848,   851,   855,\n-   857,   859,   864,   868,   871,   875,   878,   880,   892,   895,\n-   897,   899,   903,   907,   909,   912,   925,   928,   932,   934,\n-   942,   943,   944,   948,   950,   956,   957,   958,   961,   963,\n-   966,   968,   971,   974,   980,   987,   989,   996,  1003,  1006,\n-  1013,  1016,  1020,  1023,  1027,  1032,  1035,  1039,  1042,  1044,\n-  1046,  1048,  1055,  1057,  1058,  1059,  1064,  1066,  1071,  1079,\n-  1084,  1088,  1091,  1093,  1098,  1100,  1101,  1104,  1104,  1107,\n-  1110,  1112,  1114,  1117,  1119,  1122,  1128,  1130,  1134,  1148,\n-  1156,  1160,  1174,  1182,  1189,  1191,  1196,  1199,  1204,  1206,\n-  1208,  1215,  1217,  1225,  1231,  1236,  1238,  1240,  1247,  1249,\n-  1255,  1261,  1263,  1265,  1270,  1272,  1279,  1281,  1284,  1287,\n-  1291,  1294,  1298,  1301,  1305,  1310,  1312,  1316,  1318,  1320,\n-  1322,  1326,  1328,  1331,  1334,  1337,  1340,  1344,  1346,  1349,\n-  1351,  1356,  1359,  1364,  1366,  1368,  1382,  1389,  1394,  1400,\n-  1405,  1407,  1412,  1414,  1418,  1422,  1426,  1436,  1438,  1443,\n-  1448,  1451,  1455,  1458,  1462,  1465,  1468,  1471,  1475,  1478,\n-  1482,  1486,  1488,  1490,  1492,  1494,  1496,  1498,  1500,  1504,\n-  1512,  1520,  1522,  1524,  1528,  1530,  1533,  1536,  1547,  1549,\n-  1554,  1556,  1559,  1573,  1576,  1579,  1581,  1583,  1591,  1599,\n-  1609,  1627,  1632,  1637,  1640,  1654,  1663,  1667,  1671,  1675,\n-  1681,  1685,  1690,  1693,  1698,  1701,  1702,  1719,  1724,  1727,\n-  1739,  1741,  1751,  1761,  1762,  1770,  1773,  1785,  1789,  1806,\n-  1816,  1825,  1830,  1835,  1840,  1844,  1848,  1859,  1866,  1873,\n-  1880,  1891,  1897,  1900,  1905,  1928,  1962,  1993,  2024,  2039,\n-  2053,  2057,  2061,  2064,  2069,  2071,  2074,  2076,  2080,  2085,\n-  2088,  2094,  2099,  2104,  2106,  2115,  2116,  2122,  2124,  2134,\n-  2136,  2140,  2143,  2149,  2159,  2168,  2177,  2187,  2201,  2206,\n-  2211,  2213,  2222,  2225,  2230,  2233,  2237\n+   224,   229,   243,   245,   245,   246,   248,   250,   251,   259,\n+   263,   274,   279,   284,   286,   288,   289,   290,   295,   302,\n+   304,   309,   314,   320,   322,   327,   332,   338,   340,   345,\n+   352,   354,   357,   359,   361,   363,   365,   367,   369,   373,\n+   377,   380,   383,   386,   390,   392,   395,   398,   402,   430,\n+   436,   439,   442,   445,   447,   449,   453,   457,   461,   463,\n+   466,   470,   497,   499,   501,   503,   505,   507,   509,   511,\n+   513,   515,   517,   519,   521,   523,   527,   529,   533,   535,\n+   538,   542,   544,   551,   554,   562,   573,   672,   673,   675,\n+   681,   683,   706,   715,   717,   719,   723,   729,   731,   736,\n+   738,   743,   745,   746,   756,   761,   763,   764,   765,   772,\n+   778,   783,   786,   794,   799,   801,   802,   803,   810,   821,\n+   825,   831,   836,   841,   846,   848,   850,   859,   862,   866,\n+   868,   870,   875,   879,   882,   886,   889,   891,   903,   906,\n+   908,   910,   914,   918,   920,   923,   936,   939,   943,   945,\n+   953,   954,   955,   959,   961,   967,   968,   969,   972,   974,\n+   977,   979,   982,   985,   991,   998,  1000,  1007,  1014,  1017,\n+  1024,  1027,  1031,  1034,  1038,  1043,  1046,  1050,  1053,  1055,\n+  1057,  1059,  1066,  1068,  1069,  1070,  1075,  1077,  1082,  1090,\n+  1095,  1099,  1102,  1104,  1109,  1111,  1112,  1115,  1115,  1118,\n+  1121,  1123,  1125,  1128,  1130,  1133,  1139,  1141,  1145,  1159,\n+  1167,  1171,  1185,  1193,  1200,  1202,  1207,  1210,  1215,  1217,\n+  1219,  1226,  1228,  1236,  1242,  1247,  1249,  1251,  1258,  1260,\n+  1266,  1272,  1274,  1276,  1281,  1283,  1290,  1292,  1295,  1298,\n+  1302,  1305,  1309,  1312,  1316,  1321,  1323,  1327,  1329,  1331,\n+  1333,  1337,  1339,  1342,  1345,  1348,  1351,  1355,  1357,  1360,\n+  1362,  1367,  1370,  1375,  1377,  1379,  1393,  1400,  1405,  1411,\n+  1416,  1418,  1423,  1425,  1429,  1433,  1437,  1447,  1449,  1454,\n+  1459,  1462,  1466,  1469,  1473,  1476,  1479,  1482,  1486,  1489,\n+  1493,  1497,  1499,  1501,  1503,  1505,  1507,  1509,  1511,  1515,\n+  1523,  1531,  1533,  1535,  1539,  1541,  1544,  1547,  1558,  1560,\n+  1565,  1567,  1570,  1584,  1587,  1590,  1592,  1594,  1602,  1610,\n+  1620,  1638,  1643,  1648,  1651,  1665,  1674,  1678,  1682,  1686,\n+  1692,  1696,  1701,  1704,  1709,  1712,  1713,  1730,  1735,  1738,\n+  1750,  1752,  1762,  1772,  1773,  1781,  1784,  1796,  1800,  1817,\n+  1827,  1836,  1841,  1846,  1851,  1855,  1859,  1870,  1877,  1884,\n+  1891,  1902,  1908,  1911,  1916,  1939,  1973,  2004,  2035,  2050,\n+  2064,  2068,  2072,  2075,  2080,  2082,  2085,  2087,  2091,  2096,\n+  2099,  2105,  2110,  2115,  2117,  2126,  2127,  2133,  2135,  2145,\n+  2147,  2151,  2154,  2160,  2170,  2179,  2188,  2198,  2212,  2217,\n+  2222,  2224,  2233,  2236,  2241,  2244,  2248\n };\n #endif\n \n@@ -1788,14 +1799,14 @@ yyparse(YYPARSE_PARAM_ARG)\n   switch (yyn) {\n \n case 1:\n-#line 214 \"c-parse.y\"\n+#line 225 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids an empty source file\");\n \t\t  finish_file ();\n \t\t;\n     break;}\n case 2:\n-#line 219 \"c-parse.y\"\n+#line 230 \"c-parse.y\"\n {\n \t\t  /* In case there were missing closebraces,\n \t\t     get us back to the global binding level.  */\n@@ -1805,15 +1816,15 @@ case 2:\n \t\t;\n     break;}\n case 3:\n-#line 233 \"c-parse.y\"\n+#line 244 \"c-parse.y\"\n {yyval.ttype = NULL_TREE; ;\n     break;}\n case 5:\n-#line 234 \"c-parse.y\"\n+#line 245 \"c-parse.y\"\n {yyval.ttype = NULL_TREE; ;\n     break;}\n case 9:\n-#line 241 \"c-parse.y\"\n+#line 252 \"c-parse.y\"\n { STRIP_NOPS (yyvsp[-2].ttype);\n \t\t  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR\n \t\t       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)\n@@ -1823,11 +1834,11 @@ case 9:\n \t\t    error (\"argument of `asm' is not a constant string\"); ;\n     break;}\n case 10:\n-#line 249 \"c-parse.y\"\n+#line 260 \"c-parse.y\"\n { pedantic = yyvsp[-1].itype; ;\n     break;}\n case 11:\n-#line 254 \"c-parse.y\"\n+#line 265 \"c-parse.y\"\n { if (pedantic)\n \t\t    error (\"ANSI C forbids data definition with no type or storage class\");\n \t\t  else if (!flag_traditional)\n@@ -1839,170 +1850,170 @@ case 11:\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 12:\n-#line 264 \"c-parse.y\"\n+#line 275 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 13:\n-#line 269 \"c-parse.y\"\n+#line 280 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype);  ;\n     break;}\n case 14:\n-#line 274 \"c-parse.y\"\n+#line 285 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 15:\n-#line 276 \"c-parse.y\"\n+#line 287 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 18:\n-#line 280 \"c-parse.y\"\n+#line 291 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C does not allow extra `;' outside of a function\"); ;\n     break;}\n case 19:\n-#line 286 \"c-parse.y\"\n+#line 297 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 20:\n-#line 291 \"c-parse.y\"\n+#line 302 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 21:\n-#line 293 \"c-parse.y\"\n+#line 304 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-5].itype); ;\n     break;}\n case 22:\n-#line 299 \"c-parse.y\"\n+#line 310 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 23:\n-#line 304 \"c-parse.y\"\n+#line 315 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 24:\n-#line 309 \"c-parse.y\"\n+#line 320 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 25:\n-#line 311 \"c-parse.y\"\n+#line 322 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-5].itype); ;\n     break;}\n case 26:\n-#line 317 \"c-parse.y\"\n+#line 328 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 27:\n-#line 322 \"c-parse.y\"\n+#line 333 \"c-parse.y\"\n { if (! start_function (NULL_TREE, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 28:\n-#line 327 \"c-parse.y\"\n+#line 338 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 29:\n-#line 329 \"c-parse.y\"\n+#line 340 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-5].itype); ;\n     break;}\n case 30:\n-#line 335 \"c-parse.y\"\n+#line 346 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 33:\n-#line 347 \"c-parse.y\"\n+#line 358 \"c-parse.y\"\n { yyval.code = ADDR_EXPR; ;\n     break;}\n case 34:\n-#line 349 \"c-parse.y\"\n+#line 360 \"c-parse.y\"\n { yyval.code = NEGATE_EXPR; ;\n     break;}\n case 35:\n-#line 351 \"c-parse.y\"\n+#line 362 \"c-parse.y\"\n { yyval.code = CONVERT_EXPR; ;\n     break;}\n case 36:\n-#line 353 \"c-parse.y\"\n+#line 364 \"c-parse.y\"\n { yyval.code = PREINCREMENT_EXPR; ;\n     break;}\n case 37:\n-#line 355 \"c-parse.y\"\n+#line 366 \"c-parse.y\"\n { yyval.code = PREDECREMENT_EXPR; ;\n     break;}\n case 38:\n-#line 357 \"c-parse.y\"\n+#line 368 \"c-parse.y\"\n { yyval.code = BIT_NOT_EXPR; ;\n     break;}\n case 39:\n-#line 359 \"c-parse.y\"\n+#line 370 \"c-parse.y\"\n { yyval.code = TRUTH_NOT_EXPR; ;\n     break;}\n case 40:\n-#line 363 \"c-parse.y\"\n+#line 374 \"c-parse.y\"\n { yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;\n     break;}\n case 41:\n-#line 368 \"c-parse.y\"\n+#line 379 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 43:\n-#line 374 \"c-parse.y\"\n+#line 385 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 44:\n-#line 376 \"c-parse.y\"\n+#line 387 \"c-parse.y\"\n { chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 46:\n-#line 382 \"c-parse.y\"\n+#line 393 \"c-parse.y\"\n { yyval.ttype = build_indirect_ref (yyvsp[0].ttype, \"unary *\"); ;\n     break;}\n case 47:\n-#line 385 \"c-parse.y\"\n+#line 396 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  pedantic = yyvsp[-1].itype; ;\n     break;}\n case 48:\n-#line 388 \"c-parse.y\"\n+#line 399 \"c-parse.y\"\n { yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);\n \t\t  overflow_warning (yyval.ttype); ;\n     break;}\n case 49:\n-#line 392 \"c-parse.y\"\n+#line 403 \"c-parse.y\"\n { tree label = lookup_label (yyvsp[0].ttype);\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `&&'\");\n@@ -2017,61 +2028,61 @@ case 49:\n \t\t;\n     break;}\n case 50:\n-#line 420 \"c-parse.y\"\n+#line 431 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF\n \t\t      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))\n \t\t    error (\"`sizeof' applied to a bit-field\");\n \t\t  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;\n     break;}\n case 51:\n-#line 426 \"c-parse.y\"\n+#line 437 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 52:\n-#line 429 \"c-parse.y\"\n+#line 440 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;\n     break;}\n case 53:\n-#line 432 \"c-parse.y\"\n+#line 443 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 54:\n-#line 435 \"c-parse.y\"\n+#line 446 \"c-parse.y\"\n { yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 55:\n-#line 437 \"c-parse.y\"\n+#line 448 \"c-parse.y\"\n { yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 56:\n-#line 439 \"c-parse.y\"\n+#line 450 \"c-parse.y\"\n { yyval.ttype = build_va_arg (yyvsp[-3].ttype, groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 57:\n-#line 443 \"c-parse.y\"\n+#line 454 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 58:\n-#line 447 \"c-parse.y\"\n+#line 458 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 60:\n-#line 453 \"c-parse.y\"\n+#line 464 \"c-parse.y\"\n { tree type = groktypename (yyvsp[-2].ttype);\n \t\t  yyval.ttype = build_c_cast (type, yyvsp[0].ttype); ;\n     break;}\n case 61:\n-#line 456 \"c-parse.y\"\n+#line 467 \"c-parse.y\"\n { start_init (NULL_TREE, NULL, 0);\n \t\t  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);\n \t\t  really_start_incremental_init (yyvsp[-2].ttype); ;\n     break;}\n case 62:\n-#line 460 \"c-parse.y\"\n+#line 471 \"c-parse.y\"\n { char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = yyvsp[-5].ttype;\n@@ -2098,90 +2109,90 @@ case 62:\n \t\t;\n     break;}\n case 64:\n-#line 489 \"c-parse.y\"\n+#line 500 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 65:\n-#line 491 \"c-parse.y\"\n+#line 502 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 66:\n-#line 493 \"c-parse.y\"\n+#line 504 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 67:\n-#line 495 \"c-parse.y\"\n+#line 506 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 68:\n-#line 497 \"c-parse.y\"\n+#line 508 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 69:\n-#line 499 \"c-parse.y\"\n+#line 510 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 70:\n-#line 501 \"c-parse.y\"\n+#line 512 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 71:\n-#line 503 \"c-parse.y\"\n+#line 514 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 72:\n-#line 505 \"c-parse.y\"\n+#line 516 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 73:\n-#line 507 \"c-parse.y\"\n+#line 518 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 74:\n-#line 509 \"c-parse.y\"\n+#line 520 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 75:\n-#line 511 \"c-parse.y\"\n+#line 522 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 76:\n-#line 513 \"c-parse.y\"\n+#line 524 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 77:\n-#line 516 \"c-parse.y\"\n+#line 527 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 78:\n-#line 519 \"c-parse.y\"\n+#line 530 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 79:\n-#line 522 \"c-parse.y\"\n+#line 533 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 80:\n-#line 525 \"c-parse.y\"\n+#line 536 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 81:\n-#line 528 \"c-parse.y\"\n+#line 539 \"c-parse.y\"\n { skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)\n \t\t\t\t      - (yyvsp[-4].ttype == boolean_false_node)); ;\n     break;}\n case 82:\n-#line 531 \"c-parse.y\"\n+#line 542 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 83:\n-#line 534 \"c-parse.y\"\n+#line 545 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n@@ -2190,12 +2201,12 @@ case 83:\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 84:\n-#line 541 \"c-parse.y\"\n+#line 552 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 85:\n-#line 544 \"c-parse.y\"\n+#line 555 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);\n \t\t  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));\n@@ -2205,7 +2216,7 @@ case 85:\n \t\t;\n     break;}\n case 86:\n-#line 552 \"c-parse.y\"\n+#line 563 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);\n \t\t  /* This inhibits warnings in truthvalue_conversion.  */\n@@ -2216,7 +2227,7 @@ case 86:\n \t\t;\n     break;}\n case 87:\n-#line 564 \"c-parse.y\"\n+#line 575 \"c-parse.y\"\n {\n \t\t  yyval.ttype = lastiddecl;\n \t\t  if (!yyval.ttype || yyval.ttype == error_mark_node)\n@@ -2316,23 +2327,23 @@ case 87:\n \t\t;\n     break;}\n case 89:\n-#line 663 \"c-parse.y\"\n+#line 674 \"c-parse.y\"\n { yyval.ttype = combine_strings (yyvsp[0].ttype); ;\n     break;}\n case 90:\n-#line 665 \"c-parse.y\"\n+#line 676 \"c-parse.y\"\n { char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));\n \t\t  if (class == 'e' || class == '1'\n \t\t      || class == '2' || class == '<')\n \t\t    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);\n \t\t  yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 91:\n-#line 671 \"c-parse.y\"\n+#line 682 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 92:\n-#line 673 \"c-parse.y\"\n+#line 684 \"c-parse.y\"\n { tree rtl_exp;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids braced-groups within expressions\");\n@@ -2357,7 +2368,7 @@ case 92:\n \t\t;\n     break;}\n case 93:\n-#line 696 \"c-parse.y\"\n+#line 707 \"c-parse.y\"\n {\n \t\t  /* Make sure we call expand_end_stmt_expr.  Otherwise\n \t\t     we are likely to lose sequences and crash later.  */\n@@ -2368,78 +2379,78 @@ case 93:\n \t\t;\n     break;}\n case 94:\n-#line 705 \"c-parse.y\"\n+#line 716 \"c-parse.y\"\n { yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 95:\n-#line 707 \"c-parse.y\"\n+#line 718 \"c-parse.y\"\n { yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 96:\n-#line 709 \"c-parse.y\"\n+#line 720 \"c-parse.y\"\n {\n \t\t    yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 97:\n-#line 713 \"c-parse.y\"\n+#line 724 \"c-parse.y\"\n {\n                   tree expr = build_indirect_ref (yyvsp[-2].ttype, \"->\");\n \n                     yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 98:\n-#line 719 \"c-parse.y\"\n+#line 730 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 99:\n-#line 721 \"c-parse.y\"\n+#line 732 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 101:\n-#line 728 \"c-parse.y\"\n+#line 739 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 104:\n-#line 737 \"c-parse.y\"\n+#line 748 \"c-parse.y\"\n { c_mark_varargs ();\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C does not permit use of `varargs.h'\"); ;\n     break;}\n case 105:\n-#line 747 \"c-parse.y\"\n+#line 758 \"c-parse.y\"\n { ;\n     break;}\n case 110:\n-#line 763 \"c-parse.y\"\n+#line 774 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 111:\n-#line 768 \"c-parse.y\"\n+#line 779 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 112:\n-#line 773 \"c-parse.y\"\n+#line 784 \"c-parse.y\"\n { shadow_tag_warned (yyvsp[-1].ttype, 1);\n \t\t  pedwarn (\"empty declaration\"); ;\n     break;}\n case 113:\n-#line 776 \"c-parse.y\"\n+#line 787 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 114:\n-#line 785 \"c-parse.y\"\n+#line 796 \"c-parse.y\"\n { ;\n     break;}\n case 119:\n-#line 800 \"c-parse.y\"\n+#line 811 \"c-parse.y\"\n { yyval.itype = suspend_momentary ();\n \t\t  pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n@@ -2449,270 +2460,270 @@ case 119:\n \t\t\t\t     &current_declspecs, &prefix_attributes); ;\n     break;}\n case 120:\n-#line 811 \"c-parse.y\"\n+#line 822 \"c-parse.y\"\n { prefix_attributes = chainon (prefix_attributes, yyvsp[0].ttype); ;\n     break;}\n case 121:\n-#line 816 \"c-parse.y\"\n+#line 827 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 122:\n-#line 821 \"c-parse.y\"\n+#line 832 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 123:\n-#line 826 \"c-parse.y\"\n+#line 837 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-1].itype); ;\n     break;}\n case 124:\n-#line 831 \"c-parse.y\"\n+#line 842 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-1].itype); ;\n     break;}\n case 125:\n-#line 836 \"c-parse.y\"\n+#line 847 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 126:\n-#line 838 \"c-parse.y\"\n+#line 849 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 127:\n-#line 840 \"c-parse.y\"\n+#line 851 \"c-parse.y\"\n { pedantic = yyvsp[-1].itype; ;\n     break;}\n case 128:\n-#line 850 \"c-parse.y\"\n+#line 861 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 129:\n-#line 852 \"c-parse.y\"\n+#line 863 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 130:\n-#line 856 \"c-parse.y\"\n+#line 867 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 131:\n-#line 858 \"c-parse.y\"\n+#line 869 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 132:\n-#line 860 \"c-parse.y\"\n+#line 871 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 133:\n-#line 865 \"c-parse.y\"\n+#line 876 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 134:\n-#line 870 \"c-parse.y\"\n+#line 881 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 135:\n-#line 872 \"c-parse.y\"\n+#line 883 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 136:\n-#line 877 \"c-parse.y\"\n+#line 888 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 137:\n-#line 879 \"c-parse.y\"\n+#line 890 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 138:\n-#line 881 \"c-parse.y\"\n+#line 892 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 139:\n-#line 894 \"c-parse.y\"\n+#line 905 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 140:\n-#line 896 \"c-parse.y\"\n+#line 907 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;\n     break;}\n case 141:\n-#line 898 \"c-parse.y\"\n+#line 909 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 142:\n-#line 900 \"c-parse.y\"\n+#line 911 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 143:\n-#line 905 \"c-parse.y\"\n+#line 916 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 144:\n-#line 908 \"c-parse.y\"\n+#line 919 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 145:\n-#line 910 \"c-parse.y\"\n+#line 921 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 146:\n-#line 913 \"c-parse.y\"\n+#line 924 \"c-parse.y\"\n { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;\n     break;}\n case 147:\n-#line 927 \"c-parse.y\"\n+#line 938 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 148:\n-#line 929 \"c-parse.y\"\n+#line 940 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 149:\n-#line 933 \"c-parse.y\"\n+#line 944 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 150:\n-#line 935 \"c-parse.y\"\n+#line 946 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 153:\n-#line 945 \"c-parse.y\"\n+#line 956 \"c-parse.y\"\n { /* For a typedef name, record the meaning, not the name.\n \t\t     In case of `foo foo, bar;'.  */\n \t\t  yyval.ttype = lookup_name (yyvsp[0].ttype); ;\n     break;}\n case 154:\n-#line 949 \"c-parse.y\"\n+#line 960 \"c-parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;\n     break;}\n case 155:\n-#line 951 \"c-parse.y\"\n+#line 962 \"c-parse.y\"\n { yyval.ttype = groktypename (yyvsp[-1].ttype); ;\n     break;}\n case 163:\n-#line 973 \"c-parse.y\"\n+#line 984 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 164:\n-#line 975 \"c-parse.y\"\n+#line 986 \"c-parse.y\"\n { if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);\n \t\t  yyval.ttype = yyvsp[-1].ttype;\n \t\t;\n     break;}\n case 165:\n-#line 982 \"c-parse.y\"\n+#line 993 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 166:\n-#line 987 \"c-parse.y\"\n+#line 998 \"c-parse.y\"\n { finish_init ();\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 167:\n-#line 990 \"c-parse.y\"\n+#line 1001 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); \n                 ;\n     break;}\n case 168:\n-#line 998 \"c-parse.y\"\n+#line 1009 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 169:\n-#line 1003 \"c-parse.y\"\n+#line 1014 \"c-parse.y\"\n { finish_init ();\n \t\t  decl_attributes (yyvsp[-1].ttype, yyvsp[-3].ttype, prefix_attributes);\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 170:\n-#line 1007 \"c-parse.y\"\n+#line 1018 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 171:\n-#line 1015 \"c-parse.y\"\n+#line 1026 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 172:\n-#line 1017 \"c-parse.y\"\n+#line 1028 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 173:\n-#line 1022 \"c-parse.y\"\n+#line 1033 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 174:\n-#line 1024 \"c-parse.y\"\n+#line 1035 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 175:\n-#line 1029 \"c-parse.y\"\n+#line 1040 \"c-parse.y\"\n { yyval.ttype = yyvsp[-2].ttype; ;\n     break;}\n case 176:\n-#line 1034 \"c-parse.y\"\n+#line 1045 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 177:\n-#line 1036 \"c-parse.y\"\n+#line 1047 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 178:\n-#line 1041 \"c-parse.y\"\n+#line 1052 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 179:\n-#line 1043 \"c-parse.y\"\n+#line 1054 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 180:\n-#line 1045 \"c-parse.y\"\n+#line 1056 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;\n     break;}\n case 181:\n-#line 1047 \"c-parse.y\"\n+#line 1058 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;\n     break;}\n case 182:\n-#line 1049 \"c-parse.y\"\n+#line 1060 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 188:\n-#line 1067 \"c-parse.y\"\n+#line 1078 \"c-parse.y\"\n { really_start_incremental_init (NULL_TREE);\n \t\t  /* Note that the call to clear_momentary\n \t\t     is in process_init_element.  */\n \t\t  push_momentary (); ;\n     break;}\n case 189:\n-#line 1072 \"c-parse.y\"\n+#line 1083 \"c-parse.y\"\n { yyval.ttype = pop_init_level (0);\n \t\t  if (yyval.ttype == error_mark_node\n \t\t      && ! (yychar == STRING || yychar == CONSTANT))\n@@ -2721,44 +2732,44 @@ case 189:\n \t\t    pop_momentary_nofree (); ;\n     break;}\n case 190:\n-#line 1080 \"c-parse.y\"\n+#line 1091 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 191:\n-#line 1086 \"c-parse.y\"\n+#line 1097 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids empty initializer braces\"); ;\n     break;}\n case 197:\n-#line 1102 \"c-parse.y\"\n+#line 1113 \"c-parse.y\"\n { set_init_label (yyvsp[-1].ttype); ;\n     break;}\n case 200:\n-#line 1109 \"c-parse.y\"\n+#line 1120 \"c-parse.y\"\n { push_init_level (0); ;\n     break;}\n case 201:\n-#line 1111 \"c-parse.y\"\n+#line 1122 \"c-parse.y\"\n { process_init_element (pop_init_level (0)); ;\n     break;}\n case 202:\n-#line 1113 \"c-parse.y\"\n+#line 1124 \"c-parse.y\"\n { process_init_element (yyvsp[0].ttype); ;\n     break;}\n case 206:\n-#line 1124 \"c-parse.y\"\n+#line 1135 \"c-parse.y\"\n { set_init_label (yyvsp[0].ttype); ;\n     break;}\n case 207:\n-#line 1129 \"c-parse.y\"\n+#line 1140 \"c-parse.y\"\n { set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 208:\n-#line 1131 \"c-parse.y\"\n+#line 1142 \"c-parse.y\"\n { set_init_index (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 209:\n-#line 1136 \"c-parse.y\"\n+#line 1147 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n@@ -2772,16 +2783,16 @@ case 209:\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 210:\n-#line 1148 \"c-parse.y\"\n+#line 1159 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 211:\n-#line 1156 \"c-parse.y\"\n+#line 1167 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 212:\n-#line 1162 \"c-parse.y\"\n+#line 1173 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n@@ -2795,371 +2806,371 @@ case 212:\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 213:\n-#line 1174 \"c-parse.y\"\n+#line 1185 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 214:\n-#line 1182 \"c-parse.y\"\n+#line 1193 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 217:\n-#line 1198 \"c-parse.y\"\n+#line 1209 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 218:\n-#line 1200 \"c-parse.y\"\n+#line 1211 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 219:\n-#line 1205 \"c-parse.y\"\n+#line 1216 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 220:\n-#line 1207 \"c-parse.y\"\n+#line 1218 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 221:\n-#line 1209 \"c-parse.y\"\n+#line 1220 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 222:\n-#line 1216 \"c-parse.y\"\n+#line 1227 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 224:\n-#line 1227 \"c-parse.y\"\n+#line 1238 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 225:\n-#line 1232 \"c-parse.y\"\n+#line 1243 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc9x)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n \t\t;\n     break;}\n case 226:\n-#line 1237 \"c-parse.y\"\n+#line 1248 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 227:\n-#line 1239 \"c-parse.y\"\n+#line 1250 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 228:\n-#line 1241 \"c-parse.y\"\n+#line 1252 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 229:\n-#line 1248 \"c-parse.y\"\n+#line 1259 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 231:\n-#line 1257 \"c-parse.y\"\n+#line 1268 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 232:\n-#line 1262 \"c-parse.y\"\n+#line 1273 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 233:\n-#line 1264 \"c-parse.y\"\n+#line 1275 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 234:\n-#line 1266 \"c-parse.y\"\n+#line 1277 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc9x)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n \t\t;\n     break;}\n case 235:\n-#line 1271 \"c-parse.y\"\n+#line 1282 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 236:\n-#line 1273 \"c-parse.y\"\n+#line 1284 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 237:\n-#line 1280 \"c-parse.y\"\n+#line 1291 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 239:\n-#line 1286 \"c-parse.y\"\n+#line 1297 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 240:\n-#line 1288 \"c-parse.y\"\n+#line 1299 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 241:\n-#line 1293 \"c-parse.y\"\n+#line 1304 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 242:\n-#line 1295 \"c-parse.y\"\n+#line 1306 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 243:\n-#line 1300 \"c-parse.y\"\n+#line 1311 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 244:\n-#line 1302 \"c-parse.y\"\n+#line 1313 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 245:\n-#line 1307 \"c-parse.y\"\n+#line 1318 \"c-parse.y\"\n { yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t;\n     break;}\n case 246:\n-#line 1311 \"c-parse.y\"\n+#line 1322 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 247:\n-#line 1313 \"c-parse.y\"\n+#line 1324 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 248:\n-#line 1317 \"c-parse.y\"\n+#line 1328 \"c-parse.y\"\n { yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 249:\n-#line 1319 \"c-parse.y\"\n+#line 1330 \"c-parse.y\"\n { yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;\n     break;}\n case 250:\n-#line 1321 \"c-parse.y\"\n+#line 1332 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 251:\n-#line 1323 \"c-parse.y\"\n+#line 1334 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 252:\n-#line 1327 \"c-parse.y\"\n+#line 1338 \"c-parse.y\"\n { yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 253:\n-#line 1329 \"c-parse.y\"\n+#line 1340 \"c-parse.y\"\n { yyvsp[0].itype = suspend_momentary ();\n \t\t  yyval.ttype = start_enum (yyvsp[-1].ttype); ;\n     break;}\n case 254:\n-#line 1332 \"c-parse.y\"\n+#line 1343 \"c-parse.y\"\n { yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-7].ttype, yyvsp[0].ttype));\n \t\t  resume_momentary (yyvsp[-5].itype); ;\n     break;}\n case 255:\n-#line 1335 \"c-parse.y\"\n+#line 1346 \"c-parse.y\"\n { yyvsp[0].itype = suspend_momentary ();\n \t\t  yyval.ttype = start_enum (NULL_TREE); ;\n     break;}\n case 256:\n-#line 1338 \"c-parse.y\"\n+#line 1349 \"c-parse.y\"\n { yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-6].ttype, yyvsp[0].ttype));\n \t\t  resume_momentary (yyvsp[-5].itype); ;\n     break;}\n case 257:\n-#line 1341 \"c-parse.y\"\n+#line 1352 \"c-parse.y\"\n { yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 261:\n-#line 1352 \"c-parse.y\"\n+#line 1363 \"c-parse.y\"\n { if (pedantic && ! flag_isoc9x)\n \t\t    pedwarn (\"comma at end of enumerator list\"); ;\n     break;}\n case 262:\n-#line 1358 \"c-parse.y\"\n+#line 1369 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 263:\n-#line 1360 \"c-parse.y\"\n+#line 1371 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  pedwarn (\"no semicolon at end of struct or union\"); ;\n     break;}\n case 264:\n-#line 1365 \"c-parse.y\"\n+#line 1376 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 265:\n-#line 1367 \"c-parse.y\"\n+#line 1378 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 266:\n-#line 1369 \"c-parse.y\"\n+#line 1380 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"extra semicolon in struct or union specified\"); ;\n     break;}\n case 267:\n-#line 1384 \"c-parse.y\"\n+#line 1395 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-1].itype); ;\n     break;}\n case 268:\n-#line 1390 \"c-parse.y\"\n+#line 1401 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n \t\t  shadow_tag(yyvsp[0].ttype);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 269:\n-#line 1395 \"c-parse.y\"\n+#line 1406 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary (yyvsp[-1].itype); ;\n     break;}\n case 270:\n-#line 1401 \"c-parse.y\"\n+#line 1412 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n \t\t  shadow_tag(yyvsp[0].ttype);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 271:\n-#line 1406 \"c-parse.y\"\n+#line 1417 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 272:\n-#line 1408 \"c-parse.y\"\n+#line 1419 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  pedantic = yyvsp[-1].itype; ;\n     break;}\n case 274:\n-#line 1415 \"c-parse.y\"\n+#line 1426 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 275:\n-#line 1420 \"c-parse.y\"\n+#line 1431 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 276:\n-#line 1424 \"c-parse.y\"\n+#line 1435 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 277:\n-#line 1427 \"c-parse.y\"\n+#line 1438 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 279:\n-#line 1439 \"c-parse.y\"\n+#line 1450 \"c-parse.y\"\n { if (yyvsp[-2].ttype == error_mark_node)\n \t\t    yyval.ttype = yyvsp[-2].ttype;\n \t\t  else\n \t\t    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 280:\n-#line 1444 \"c-parse.y\"\n+#line 1455 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 281:\n-#line 1450 \"c-parse.y\"\n+#line 1461 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 282:\n-#line 1452 \"c-parse.y\"\n+#line 1463 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 283:\n-#line 1457 \"c-parse.y\"\n+#line 1468 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 284:\n-#line 1459 \"c-parse.y\"\n+#line 1470 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 285:\n-#line 1464 \"c-parse.y\"\n+#line 1475 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 287:\n-#line 1470 \"c-parse.y\"\n+#line 1481 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 288:\n-#line 1472 \"c-parse.y\"\n+#line 1483 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 289:\n-#line 1477 \"c-parse.y\"\n+#line 1488 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 290:\n-#line 1479 \"c-parse.y\"\n+#line 1490 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 291:\n-#line 1484 \"c-parse.y\"\n+#line 1495 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 292:\n-#line 1487 \"c-parse.y\"\n+#line 1498 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 293:\n-#line 1489 \"c-parse.y\"\n+#line 1500 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 294:\n-#line 1491 \"c-parse.y\"\n+#line 1502 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 295:\n-#line 1493 \"c-parse.y\"\n+#line 1504 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 296:\n-#line 1495 \"c-parse.y\"\n+#line 1506 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 297:\n-#line 1497 \"c-parse.y\"\n+#line 1508 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 298:\n-#line 1499 \"c-parse.y\"\n+#line 1510 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 299:\n-#line 1501 \"c-parse.y\"\n+#line 1512 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 300:\n-#line 1505 \"c-parse.y\"\n+#line 1516 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 301:\n-#line 1514 \"c-parse.y\"\n+#line 1525 \"c-parse.y\"\n {\n \t\t  if (pedantic && yyvsp[0].ends_in_label)\n \t\t    pedwarn (\"ANSI C forbids label at end of compound statement\");\n \t\t;\n     break;}\n case 303:\n-#line 1523 \"c-parse.y\"\n+#line 1534 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 304:\n-#line 1525 \"c-parse.y\"\n+#line 1536 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 308:\n-#line 1537 \"c-parse.y\"\n+#line 1548 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n@@ -3168,12 +3179,12 @@ case 308:\n \t\t;\n     break;}\n case 310:\n-#line 1550 \"c-parse.y\"\n+#line 1561 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids label declarations\"); ;\n     break;}\n case 313:\n-#line 1561 \"c-parse.y\"\n+#line 1572 \"c-parse.y\"\n { tree link;\n \t\t  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))\n \t\t    {\n@@ -3184,19 +3195,19 @@ case 313:\n \t\t;\n     break;}\n case 314:\n-#line 1575 \"c-parse.y\"\n+#line 1586 \"c-parse.y\"\n {;\n     break;}\n case 316:\n-#line 1579 \"c-parse.y\"\n+#line 1590 \"c-parse.y\"\n { compstmt_count++; ;\n     break;}\n case 317:\n-#line 1582 \"c-parse.y\"\n+#line 1593 \"c-parse.y\"\n { yyval.ttype = convert (void_type_node, integer_zero_node); ;\n     break;}\n case 318:\n-#line 1584 \"c-parse.y\"\n+#line 1595 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n \t\t  yyval.ttype = poplevel (1, 1, 0);\n@@ -3206,7 +3217,7 @@ case 318:\n \t\t    pop_momentary (); ;\n     break;}\n case 319:\n-#line 1592 \"c-parse.y\"\n+#line 1603 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0);\n@@ -3216,7 +3227,7 @@ case 319:\n \t\t    pop_momentary (); ;\n     break;}\n case 320:\n-#line 1600 \"c-parse.y\"\n+#line 1611 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0);\n@@ -3226,7 +3237,7 @@ case 320:\n \t\t    pop_momentary (); ;\n     break;}\n case 321:\n-#line 1611 \"c-parse.y\"\n+#line 1622 \"c-parse.y\"\n { if (current_function_decl == 0)\n \t\t    {\n \t\t      error (\"braced-group within expression allowed only inside a function\");\n@@ -3244,11 +3255,11 @@ case 321:\n \t\t;\n     break;}\n case 322:\n-#line 1628 \"c-parse.y\"\n+#line 1639 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 325:\n-#line 1642 \"c-parse.y\"\n+#line 1653 \"c-parse.y\"\n { emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 0, \n \t\t\t\t       compstmt_count);\n@@ -3258,7 +3269,7 @@ case 325:\n \t\t  position_after_white_space (); ;\n     break;}\n case 326:\n-#line 1656 \"c-parse.y\"\n+#line 1667 \"c-parse.y\"\n { stmt_count++;\n \t\t  compstmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n@@ -3268,43 +3279,43 @@ case 326:\n \t\t  position_after_white_space (); ;\n     break;}\n case 327:\n-#line 1664 \"c-parse.y\"\n+#line 1675 \"c-parse.y\"\n { expand_loop_continue_here (); ;\n     break;}\n case 328:\n-#line 1668 \"c-parse.y\"\n+#line 1679 \"c-parse.y\"\n { yyval.filename = input_filename; ;\n     break;}\n case 329:\n-#line 1672 \"c-parse.y\"\n+#line 1683 \"c-parse.y\"\n { yyval.lineno = lineno; ;\n     break;}\n case 330:\n-#line 1677 \"c-parse.y\"\n+#line 1688 \"c-parse.y\"\n { ;\n     break;}\n case 331:\n-#line 1682 \"c-parse.y\"\n+#line 1693 \"c-parse.y\"\n { ;\n     break;}\n case 332:\n-#line 1687 \"c-parse.y\"\n+#line 1698 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 333:\n-#line 1692 \"c-parse.y\"\n+#line 1703 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 334:\n-#line 1694 \"c-parse.y\"\n+#line 1705 \"c-parse.y\"\n { yyval.ends_in_label = 1; ;\n     break;}\n case 335:\n-#line 1700 \"c-parse.y\"\n+#line 1711 \"c-parse.y\"\n { stmt_count++; ;\n     break;}\n case 337:\n-#line 1703 \"c-parse.y\"\n+#line 1714 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n /* It appears that this should not be done--that a non-lvalue array\n@@ -3323,19 +3334,19 @@ case 337:\n \t\t  clear_momentary (); ;\n     break;}\n case 338:\n-#line 1720 \"c-parse.y\"\n+#line 1731 \"c-parse.y\"\n { c_expand_start_else ();\n \t\t  yyvsp[-1].itype = stmt_count;\n \t\t  position_after_white_space (); ;\n     break;}\n case 339:\n-#line 1724 \"c-parse.y\"\n+#line 1735 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  if (extra_warnings && stmt_count == yyvsp[-3].itype)\n \t\t    warning (\"empty body in an else-statement\"); ;\n     break;}\n case 340:\n-#line 1728 \"c-parse.y\"\n+#line 1739 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  /* This warning is here instead of in simple_if, because we\n \t\t     do not want a warning if an empty if is followed by an\n@@ -3346,11 +3357,11 @@ case 340:\n \t\t\t\t\t\t\"empty body in an if-statement\"); ;\n     break;}\n case 341:\n-#line 1740 \"c-parse.y\"\n+#line 1751 \"c-parse.y\"\n { c_expand_end_cond (); ;\n     break;}\n case 342:\n-#line 1742 \"c-parse.y\"\n+#line 1753 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n \t\t  /* The emit_nop used to come before emit_line_note,\n@@ -3362,7 +3373,7 @@ case 342:\n \t\t  emit_nop (); ;\n     break;}\n case 343:\n-#line 1752 \"c-parse.y\"\n+#line 1763 \"c-parse.y\"\n { /* Don't start the loop till we have succeeded\n \t\t     in parsing the end test.  This is to make sure\n \t\t     that we end every loop we start.  */\n@@ -3373,24 +3384,24 @@ case 343:\n \t\t  position_after_white_space (); ;\n     break;}\n case 344:\n-#line 1761 \"c-parse.y\"\n+#line 1772 \"c-parse.y\"\n { expand_end_loop (); ;\n     break;}\n case 345:\n-#line 1764 \"c-parse.y\"\n+#line 1775 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion (yyvsp[-2].ttype));\n \t\t  expand_end_loop ();\n \t\t  clear_momentary (); ;\n     break;}\n case 346:\n-#line 1771 \"c-parse.y\"\n+#line 1782 \"c-parse.y\"\n { expand_end_loop ();\n \t\t  clear_momentary (); ;\n     break;}\n case 347:\n-#line 1775 \"c-parse.y\"\n+#line 1786 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  /* See comment in `while' alternative, above.  */\n@@ -3403,12 +3414,12 @@ case 347:\n \t\t;\n     break;}\n case 348:\n-#line 1787 \"c-parse.y\"\n+#line 1798 \"c-parse.y\"\n { yyvsp[0].lineno = lineno;\n \t\t  yyval.filename = input_filename; ;\n     break;}\n case 349:\n-#line 1790 \"c-parse.y\"\n+#line 1801 \"c-parse.y\"\n { \n \t\t  /* Start the loop.  Doing this after parsing\n \t\t     all the expressions ensures we will end the loop.  */\n@@ -3426,7 +3437,7 @@ case 349:\n \t\t  position_after_white_space (); ;\n     break;}\n case 350:\n-#line 1806 \"c-parse.y\"\n+#line 1817 \"c-parse.y\"\n { /* Emit the increment expression, with a line number.  */\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-5].lineno);\n \t\t  expand_loop_continue_here ();\n@@ -3439,7 +3450,7 @@ case 350:\n \t\t  expand_end_loop (); ;\n     break;}\n case 351:\n-#line 1817 \"c-parse.y\"\n+#line 1828 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_case (yyvsp[-1].ttype);\n@@ -3449,41 +3460,41 @@ case 351:\n \t\t  position_after_white_space (); ;\n     break;}\n case 352:\n-#line 1825 \"c-parse.y\"\n+#line 1836 \"c-parse.y\"\n { expand_end_case (yyvsp[-3].ttype);\n \t\t  if (yychar == CONSTANT || yychar == STRING)\n \t\t    pop_momentary_nofree ();\n \t\t  else\n \t\t    pop_momentary (); ;\n     break;}\n case 353:\n-#line 1831 \"c-parse.y\"\n+#line 1842 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if ( ! expand_exit_something ())\n \t\t    error (\"break statement not within loop or switch\"); ;\n     break;}\n case 354:\n-#line 1836 \"c-parse.y\"\n+#line 1847 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if (! expand_continue_loop (NULL_PTR))\n \t\t    error (\"continue statement not within a loop\"); ;\n     break;}\n case 355:\n-#line 1841 \"c-parse.y\"\n+#line 1852 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  c_expand_return (NULL_TREE); ;\n     break;}\n case 356:\n-#line 1845 \"c-parse.y\"\n+#line 1856 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n \t\t  c_expand_return (yyvsp[-1].ttype); ;\n     break;}\n case 357:\n-#line 1849 \"c-parse.y\"\n+#line 1860 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-7].filename, yyvsp[-6].lineno);\n \t\t  STRIP_NOPS (yyvsp[-2].ttype);\n@@ -3495,31 +3506,31 @@ case 357:\n \t\t    error (\"argument of `asm' is not a constant string\"); ;\n     break;}\n case 358:\n-#line 1860 \"c-parse.y\"\n+#line 1871 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-9].filename, yyvsp[-8].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t\t yyvsp[-6].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 359:\n-#line 1867 \"c-parse.y\"\n+#line 1878 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-11].filename, yyvsp[-10].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t\t yyvsp[-8].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 360:\n-#line 1875 \"c-parse.y\"\n+#line 1886 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-13].filename, yyvsp[-12].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype,\n \t\t\t\t\t yyvsp[-10].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 361:\n-#line 1881 \"c-parse.y\"\n+#line 1892 \"c-parse.y\"\n { tree decl;\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n@@ -3532,15 +3543,15 @@ case 361:\n \t\t;\n     break;}\n case 362:\n-#line 1892 \"c-parse.y\"\n+#line 1903 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `goto *expr;'\");\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;\n     break;}\n case 365:\n-#line 1907 \"c-parse.y\"\n+#line 1918 \"c-parse.y\"\n {\n \t    /* The value returned by this action is  */\n \t    /*      1 if everything is OK */ \n@@ -3563,14 +3574,14 @@ case 365:\n \t  ;\n     break;}\n case 366:\n-#line 1928 \"c-parse.y\"\n+#line 1939 \"c-parse.y\"\n {\n \t    if (yyvsp[-1].itype)\n \t      iterator_for_loop_end (yyvsp[-3].ttype);\n \t  ;\n     break;}\n case 367:\n-#line 1963 \"c-parse.y\"\n+#line 1974 \"c-parse.y\"\n { register tree value = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n \t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -3603,7 +3614,7 @@ case 367:\n \t\t  position_after_white_space (); ;\n     break;}\n case 368:\n-#line 1994 \"c-parse.y\"\n+#line 2005 \"c-parse.y\"\n { register tree value1 = check_case_value (yyvsp[-3].ttype);\n \t\t  register tree value2 = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n@@ -3636,7 +3647,7 @@ case 368:\n \t\t  position_after_white_space (); ;\n     break;}\n case 369:\n-#line 2025 \"c-parse.y\"\n+#line 2036 \"c-parse.y\"\n {\n \t\t  tree duplicate;\n \t\t  register tree label\n@@ -3653,7 +3664,7 @@ case 369:\n \t\t  position_after_white_space (); ;\n     break;}\n case 370:\n-#line 2040 \"c-parse.y\"\n+#line 2051 \"c-parse.y\"\n { tree label = define_label (input_filename, lineno, yyvsp[-2].ttype);\n \t\t  stmt_count++;\n \t\t  emit_nop ();\n@@ -3665,52 +3676,52 @@ case 370:\n \t\t  position_after_white_space (); ;\n     break;}\n case 371:\n-#line 2055 \"c-parse.y\"\n+#line 2066 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 372:\n-#line 2058 \"c-parse.y\"\n+#line 2069 \"c-parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 373:\n-#line 2063 \"c-parse.y\"\n+#line 2074 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 375:\n-#line 2070 \"c-parse.y\"\n+#line 2081 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 378:\n-#line 2077 \"c-parse.y\"\n+#line 2088 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 379:\n-#line 2082 \"c-parse.y\"\n+#line 2093 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 380:\n-#line 2087 \"c-parse.y\"\n+#line 2098 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;\n     break;}\n case 381:\n-#line 2089 \"c-parse.y\"\n+#line 2100 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;\n     break;}\n case 382:\n-#line 2095 \"c-parse.y\"\n+#line 2106 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (0); ;\n     break;}\n case 383:\n-#line 2099 \"c-parse.y\"\n+#line 2110 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 385:\n-#line 2107 \"c-parse.y\"\n+#line 2118 \"c-parse.y\"\n { tree parm;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids forward parameter declarations\");\n@@ -3720,19 +3731,19 @@ case 385:\n \t\t  clear_parm_order (); ;\n     break;}\n case 386:\n-#line 2115 \"c-parse.y\"\n+#line 2126 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 387:\n-#line 2117 \"c-parse.y\"\n+#line 2128 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;\n     break;}\n case 388:\n-#line 2123 \"c-parse.y\"\n+#line 2134 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 389:\n-#line 2125 \"c-parse.y\"\n+#line 2136 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0);\n \t\t  /* Gcc used to allow this as an extension.  However, it does\n \t\t     not work for all targets, and thus has been disabled.\n@@ -3744,23 +3755,23 @@ case 389:\n \t\t;\n     break;}\n case 390:\n-#line 2135 \"c-parse.y\"\n+#line 2146 \"c-parse.y\"\n { yyval.ttype = get_parm_info (1); ;\n     break;}\n case 391:\n-#line 2137 \"c-parse.y\"\n+#line 2148 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 392:\n-#line 2142 \"c-parse.y\"\n+#line 2153 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 393:\n-#line 2144 \"c-parse.y\"\n+#line 2155 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 394:\n-#line 2151 \"c-parse.y\"\n+#line 2162 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3771,7 +3782,7 @@ case 394:\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 395:\n-#line 2160 \"c-parse.y\"\n+#line 2171 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3782,7 +3793,7 @@ case 395:\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 396:\n-#line 2169 \"c-parse.y\"\n+#line 2180 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3793,7 +3804,7 @@ case 396:\n \t\t  resume_momentary (yyvsp[-2].itype); ;\n     break;}\n case 397:\n-#line 2178 \"c-parse.y\"\n+#line 2189 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3804,7 +3815,7 @@ case 397:\n \t\t  resume_momentary (yyvsp[-2].itype);  ;\n     break;}\n case 398:\n-#line 2188 \"c-parse.y\"\n+#line 2199 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3815,43 +3826,43 @@ case 398:\n \t\t  resume_momentary (yyvsp[-2].itype);  ;\n     break;}\n case 399:\n-#line 2202 \"c-parse.y\"\n+#line 2213 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (1); ;\n     break;}\n case 400:\n-#line 2206 \"c-parse.y\"\n+#line 2217 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 402:\n-#line 2214 \"c-parse.y\"\n+#line 2225 \"c-parse.y\"\n { tree t;\n \t\t  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))\n \t\t    if (TREE_VALUE (t) == NULL_TREE)\n \t\t      error (\"`...' in old-style identifier list\");\n \t\t  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 403:\n-#line 2224 \"c-parse.y\"\n+#line 2235 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 404:\n-#line 2226 \"c-parse.y\"\n+#line 2237 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 405:\n-#line 2232 \"c-parse.y\"\n+#line 2243 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 406:\n-#line 2234 \"c-parse.y\"\n+#line 2245 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 407:\n-#line 2239 \"c-parse.y\"\n+#line 2250 \"c-parse.y\"\n { yyval.itype = pedantic;\n \t\t  pedantic = 0; ;\n     break;}\n@@ -4077,5 +4088,5 @@ case 407:\n     }\n   return 1;\n }\n-#line 2243 \"c-parse.y\"\n+#line 2254 \"c-parse.y\"\n "}, {"sha": "a0c7f94712c9d192f4d8869ecfde16fa6c2b3944", "filename": "gcc/c-parse.in", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -46,7 +46,8 @@ end ifc\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n-\n+#include \"ggc.h\"\n+  \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif\n@@ -245,6 +246,16 @@ end ifobjc\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n extern void yyprint\t\t\tPROTO ((FILE *, int, YYSTYPE));\n+\n+/* Add GC roots for variables local to this file.  */\n+void\n+c_parse_init ()\n+{\n+  ggc_add_tree_root (&declspec_stack, 1);\n+  ggc_add_tree_root (&current_declspecs, 1);\n+  ggc_add_tree_root (&prefix_attributes, 1);\n+}\n+\n %}\n \f\n %%"}, {"sha": "8e3730b595ad884a9bdc5cc2ccbb6ec0a2d625ce", "filename": "gcc/c-parse.y", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -42,7 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n-\n+#include \"ggc.h\"\n+  \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif\n@@ -207,6 +208,16 @@ static int undeclared_variable_notice;\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n extern void yyprint\t\t\tPROTO ((FILE *, int, YYSTYPE));\n+\n+/* Add GC roots for variables local to this file.  */\n+void\n+c_parse_init ()\n+{\n+  ggc_add_tree_root (&declspec_stack, 1);\n+  ggc_add_tree_root (&current_declspecs, 1);\n+  ggc_add_tree_root (&prefix_attributes, 1);\n+}\n+\n %}\n \f\n %%"}, {"sha": "a55785538c6e6dc13fa2b4f394f0f661772f7bf8", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -174,6 +174,9 @@ extern tree maybe_objc_method_name\t\tPROTO((tree));\n extern int recognize_objc_keyword\t\tPROTO((void));\n extern tree build_objc_string\t\t\tPROTO((int, const char *));\n \f\n+/* in c-parse.in */\n+extern void c_parse_init\t\t\tPROTO((void));\n+\n /* in c-aux-info.c */\n extern void gen_aux_info_record                 PROTO((tree, int, int, int));\n \n@@ -222,6 +225,7 @@ extern tree lookup_name_current_level_global\tPROTO((tree));\n extern tree maybe_build_cleanup                 PROTO((tree));\n extern void parmlist_tags_warning               PROTO((void));\n extern void pending_xref_error                  PROTO((void));\n+extern void mark_c_function_context             PROTO((struct function *));\n extern void push_c_function_context             PROTO((struct function *));\n extern void pop_c_function_context              PROTO((struct function *));\n extern void pop_label_level                     PROTO((void));"}, {"sha": "4c1460cc9bf1e7049162a7b44e99314185d4ca1e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA. */\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n+#include \"ggc.h\"\n \n #ifdef EXTRA_CONSTRAINT\n /* If EXTRA_CONSTRAINT is defined, then the 'S'\n@@ -248,6 +249,7 @@ static void ix86_reorder_insn PROTO ((rtx *, rtx *));\n static rtx * ix86_pent_find_pair PROTO ((rtx *, rtx *, enum attr_pent_pair,\n \t\t\t\t\t rtx));\n static void ix86_init_machine_status PROTO ((struct function *));\n+static void ix86_mark_machine_status PROTO ((struct function *));\n \n struct ix86_address\n {\n@@ -353,6 +355,7 @@ override_options ()\n \n   /* Arrange to set up i386_stack_locals for all functions.  */\n   init_machine_status = ix86_init_machine_status;\n+  mark_machine_status = ix86_mark_machine_status;\n \n   /* Validate registers in register allocation order.  */\n   if (ix86_reg_alloc_order)\n@@ -4962,7 +4965,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \n static void\n ix86_init_machine_status (p)\n-    struct function *p;\n+     struct function *p;\n {\n   enum machine_mode mode;\n   int n;\n@@ -4975,6 +4978,20 @@ ix86_init_machine_status (p)\n       ix86_stack_locals[(int) mode][n] = NULL_RTX;\n }\n \n+/* Mark machine specific bits of P for GC.  */\n+static void\n+ix86_mark_machine_status (p)\n+     struct function *p;\n+{\n+  enum machine_mode mode;\n+  int n;\n+\n+  for (mode = VOIDmode; (int) mode < (int) MAX_MACHINE_MODE;\n+       mode = (enum machine_mode) ((int) mode + 1))\n+    for (n = 0; n < MAX_386_STACK_LOCALS; n++)\n+      ggc_mark_rtx (p->machine->stack_locals[(int) mode][n]);\n+}\n+\n /* Return a MEM corresponding to a stack slot with mode MODE.\n    Allocate a new slot if necessary.\n "}, {"sha": "50961883df2f956daf4b31266744d8b600c045f4", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=1526a0606bb9b5ea571f0b1b68f2181fdbd2e12f", "patch": "@@ -65,7 +65,7 @@ cc1obj$(exeext): $(P) $(OBJS) $(OBJC_OBJS) $(LIBDEPS)\n # Objective C language specific files.\n \n objc-parse.o : $(srcdir)/objc/objc-parse.c \\\n-   $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h \\\n+   $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h $(srcdir)/ggc.h \\\n    $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/c-common.h \\\n    $(srcdir)/input.h $(srcdir)/flags.h $(srcdir)/output.h \\\n    $(srcdir)/objc/objc-act.h system.h"}]}