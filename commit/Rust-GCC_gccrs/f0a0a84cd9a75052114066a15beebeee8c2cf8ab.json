{"sha": "f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhMGE4NGNkOWE3NTA1MjExNDA2NmExNWJlZWJlZWU4YzJjZjhhYg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-25T20:13:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-26T08:03:56Z"}, "message": "d: Merge upstream dmd e49192807\n\n1. Removes prelude assert for constructors and destructors.  To trigger\nthese asserts one needed to construct or destruct an aggregate at the\nnull memory location.  This would crash upon any data member access,\nwhich is required for a constructor or destructor to do anything useful.\n\n2. Disables bounds checking in foreach statements, when the array is\neither a static or dynamic array.  If we trust the array `.length' to\nbe correct, then all elements are between `[0 .. length]', and can't\ncan't be out of bounds.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11623\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd e49192807", "tree": {"sha": "cab389d5cbf87ed0d467a59f344c83056632070c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab389d5cbf87ed0d467a59f344c83056632070c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e36d9baf41a8642ca8687e846764e0828a088b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e36d9baf41a8642ca8687e846764e0828a088b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e36d9baf41a8642ca8687e846764e0828a088b"}], "stats": {"total": 88, "additions": 35, "deletions": 53}, "files": [{"sha": "4676645f9719117866eb357b1b37a2d57718b920", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "patch": "@@ -1,4 +1,4 @@\n-fe5f388d8e5d97dccaa4ef1349f931c36a2cbc46\n+e49192807967c6f11252683a731c5a0159ef36da\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "dbc5fa6352c0cc5c336f1778bfc04ab195176ea3", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 31, "deletions": 51, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "patch": "@@ -30,7 +30,7 @@\n #include \"visitor.h\"\n #include \"objc.h\"\n \n-Expression *addInvariant(Loc loc, Scope *sc, AggregateDeclaration *ad, VarDeclaration *vthis, bool direct);\n+Expression *addInvariant(AggregateDeclaration *ad, VarDeclaration *vthis);\n bool checkReturnEscape(Scope *sc, Expression *e, bool gag);\n bool checkReturnEscapeRef(Scope *sc, Expression *e, bool gag);\n bool checkNestedRef(Dsymbol *s, Dsymbol *p);\n@@ -1648,7 +1648,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n         Statement *fpreinv = NULL;\n         if (addPreInvariant())\n         {\n-            Expression *e = addInvariant(loc, sc, ad, vthis, isDtorDeclaration() != NULL);\n+            Expression *e = addInvariant(ad, vthis);\n             if (e)\n                 fpreinv = new ExpStatement(Loc(), e);\n         }\n@@ -1657,7 +1657,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n         Statement *fpostinv = NULL;\n         if (addPostInvariant())\n         {\n-            Expression *e = addInvariant(loc, sc, ad, vthis, isCtorDeclaration() != NULL);\n+            Expression *e = addInvariant(ad, vthis);\n             if (e)\n                 fpostinv = new ExpStatement(Loc(), e);\n         }\n@@ -4154,67 +4154,47 @@ bool FuncDeclaration::addPostInvariant()\n  * Input:\n  *      ad      aggregate with the invariant\n  *      vthis   variable with 'this'\n- *      direct  call invariant directly\n  * Returns:\n  *      void expression that calls the invariant\n  */\n-Expression *addInvariant(Loc loc, Scope *sc, AggregateDeclaration *ad, VarDeclaration *vthis, bool direct)\n+Expression *addInvariant(AggregateDeclaration *ad, VarDeclaration *vthis)\n {\n     Expression *e = NULL;\n-    if (direct)\n-    {\n-        // Call invariant directly only if it exists\n-        FuncDeclaration *inv = ad->inv;\n-        ClassDeclaration *cd = ad->isClassDeclaration();\n \n-        while (!inv && cd)\n-        {\n-            cd = cd->baseClass;\n-            if (!cd)\n-                break;\n-            inv = cd->inv;\n-        }\n-        if (inv)\n-        {\n-        #if 1\n-            // Workaround for bugzilla 13394: For the correct mangling,\n-            // run attribute inference on inv if needed.\n-            inv->functionSemantic();\n-        #endif\n-\n-            //e = new DsymbolExp(Loc(), inv);\n-            //e = new CallExp(Loc(), e);\n-            //e = e->semantic(sc2);\n-\n-            /* Bugzilla 13113: Currently virtual invariant calls completely\n-             * bypass attribute enforcement.\n-             * Change the behavior of pre-invariant call by following it.\n-             */\n-            e = new ThisExp(Loc());\n-            e->type = vthis->type;\n-            e = new DotVarExp(Loc(), e, inv, false);\n-            e->type = inv->type;\n-            e = new CallExp(Loc(), e);\n-            e->type = Type::tvoid;\n-        }\n+    // Call invariant directly only if it exists\n+    FuncDeclaration *inv = ad->inv;\n+    ClassDeclaration *cd = ad->isClassDeclaration();\n+\n+    while (!inv && cd)\n+    {\n+        cd = cd->baseClass;\n+        if (!cd)\n+            break;\n+        inv = cd->inv;\n     }\n-    else\n+    if (inv)\n     {\n     #if 1\n         // Workaround for bugzilla 13394: For the correct mangling,\n         // run attribute inference on inv if needed.\n-        if (ad->isStructDeclaration() && ad->inv)\n-            ad->inv->functionSemantic();\n+        inv->functionSemantic();\n     #endif\n \n-        // Call invariant virtually\n-        Expression *v = new ThisExp(Loc());\n-        v->type = vthis->type;\n-        if (ad->isStructDeclaration())\n-            v = v->addressOf();\n-        e = new StringExp(Loc(), const_cast<char *>(\"null this\"));\n-        e = new AssertExp(loc, v, e);\n-        e = semantic(e, sc);\n+        //e = new DsymbolExp(Loc(), inv);\n+        //e = new CallExp(Loc(), e);\n+        //e = e->semantic(sc2);\n+\n+        /* https://issues.dlang.org/show_bug.cgi?id=13113\n+         * Currently virtual invariant calls completely\n+         * bypass attribute enforcement.\n+         * Change the behavior of pre-invariant call by following it.\n+         */\n+        e = new ThisExp(Loc());\n+        e->type = vthis->type;\n+        e = new DotVarExp(Loc(), e, inv, false);\n+        e->type = inv->type;\n+        e = new CallExp(Loc(), e);\n+        e->type = Type::tvoid;\n     }\n     return e;\n }"}, {"sha": "42f885d4175c6d3a71f9e716dbb07945f3ad82c3", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a0a84cd9a75052114066a15beebeee8c2cf8ab/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=f0a0a84cd9a75052114066a15beebeee8c2cf8ab", "patch": "@@ -1188,7 +1188,9 @@ class StatementSemanticVisitor : public Visitor\n                     }\n \n                     // T value = tmp[key];\n-                    fs->value->_init = new ExpInitializer(loc, new IndexExp(loc, new VarExp(loc, tmp), new VarExp(loc, fs->key)));\n+                    IndexExp *indexExp = new IndexExp(loc, new VarExp(loc, tmp), new VarExp(loc, fs->key));\n+                    indexExp->indexIsInBounds = true; // disabling bounds checking in foreach statements.\n+                    fs->value->_init = new ExpInitializer(loc, indexExp);\n                     Statement *ds = new ExpStatement(loc, fs->value);\n \n                     if (dim == 2)"}]}