{"sha": "9af081003f9c19f33457e0ed1aa14a764f462c3c", "node_id": "C_kwDOANBUbNoAKDlhZjA4MTAwM2Y5YzE5ZjMzNDU3ZTBlZDFhYTE0YTc2NGY0NjJjM2M", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-06T22:10:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-02T13:21:24Z"}, "message": "c++: Fix bogus error with __integer_pack [PR94490]\n\nHere we issue a bogus:\n\nerror: '(0 ? fake_tuple_size_v<int> : fake_tuple_size_v<int>)' is not a constant expression\n\nbecause cxx_constant_value in expand_integer_pack gets\n\n*(0 ? VIEW_CONVERT_EXPR<const int>(fake_tuple_size_v) : VIEW_CONVERT_EXPR<const int>(fake_tuple_size_v))\n\nwhich is a REFERENCE_REF_P and we evaluate its operand to 3, so we end\nup with *3 and that fails.  Sounds like we need to get rid of the\nREFERENCE_REF_P then.  That is what tsubst_copy_and_build/INDIRECT_REF\nwill do:\n\n        if (REFERENCE_REF_P (t))\n          {\n            /* A type conversion to reference type will be enclosed in\n               such an indirect ref, but the substitution of the cast\n               will have also added such an indirect ref.  */\n            r = convert_from_reference (r);\n          }\n\nso I think it's reasonable to call instantiate_non_dependent_expr_sfinae.\n\n\tPR c++/94490\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (expand_integer_pack): Call\n\tinstantiate_non_dependent_expr_sfinae.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/integer-pack5.C: New test.", "tree": {"sha": "fea325d5c8cb9d4322953256459aeadc8a5a7b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea325d5c8cb9d4322953256459aeadc8a5a7b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9af081003f9c19f33457e0ed1aa14a764f462c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af081003f9c19f33457e0ed1aa14a764f462c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af081003f9c19f33457e0ed1aa14a764f462c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af081003f9c19f33457e0ed1aa14a764f462c3c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde87638bf5cf6aafffb590986b6a890da0ba06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde87638bf5cf6aafffb590986b6a890da0ba06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde87638bf5cf6aafffb590986b6a890da0ba06c"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "6b560952639f5a2defcec64bc808dac756dabd62", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af081003f9c19f33457e0ed1aa14a764f462c3c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af081003f9c19f33457e0ed1aa14a764f462c3c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9af081003f9c19f33457e0ed1aa14a764f462c3c", "patch": "@@ -3792,6 +3792,7 @@ expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n     }\n   else\n     {\n+      hi = instantiate_non_dependent_expr_sfinae (hi, complain);\n       hi = cxx_constant_value (hi);\n       int len = valid_constant_size_p (hi) ? tree_to_shwi (hi) : -1;\n "}, {"sha": "84938649d31d4dd18cb8612d68bfb12fd18320a7", "filename": "gcc/testsuite/g++.dg/ext/integer-pack5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af081003f9c19f33457e0ed1aa14a764f462c3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af081003f9c19f33457e0ed1aa14a764f462c3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack5.C?ref=9af081003f9c19f33457e0ed1aa14a764f462c3c", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/94490\n+// { dg-do compile { target c++14 } }\n+\n+template<class T>\n+constexpr int fake_tuple_size_v = 3;\n+template<int...> struct intseq {};\n+\n+// So that it compiles with clang++.\n+#if __has_builtin(__make_integer_seq)\n+using size_t = decltype(sizeof(1));\n+template<typename, size_t... _Indices>\n+using _IdxTuple = intseq<_Indices...>;\n+\n+template<int N> using genseq = __make_integer_seq<_IdxTuple, size_t, N>;\n+#else\n+template<int N> using genseq = intseq<__integer_pack(N)...>;\n+#endif\n+\n+template<int A, class S = genseq<0 ? A : A>>\n+struct arith_result\n+{ };\n+\n+template<typename T>\n+auto Mul(const T&)\n+{\n+    return [](auto) { return arith_result<fake_tuple_size_v<T>> { }; }(0);\n+}\n+\n+auto x = Mul(0);"}]}