{"sha": "058557c4d1b036386daf2f124ab829e5371e0dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4NTU3YzRkMWIwMzYzODZkYWYyZjEyNGFiODI5ZTUzNzFlMGRmYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-11T23:48:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-11T23:48:26Z"}, "message": "ia64.md (addsi3): Remove expander.\n\n        * config/ia64/ia64.md (addsi3): Remove expander.\n        (subsi3, mulsi3, negsi2, one_cmplsi2): Likewise.\n        (*addsi3_shladd): New.\n\nFrom-SVN: r35649", "tree": {"sha": "ab2c8b37c5e8243770ff8b3ece719c581835f056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2c8b37c5e8243770ff8b3ece719c581835f056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058557c4d1b036386daf2f124ab829e5371e0dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058557c4d1b036386daf2f124ab829e5371e0dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058557c4d1b036386daf2f124ab829e5371e0dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058557c4d1b036386daf2f124ab829e5371e0dfa/comments", "author": null, "committer": null, "parents": [{"sha": "870f9ec0bcf4579a19abb05038559d068c87488e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870f9ec0bcf4579a19abb05038559d068c87488e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870f9ec0bcf4579a19abb05038559d068c87488e"}], "stats": {"total": 144, "additions": 20, "deletions": 124}, "files": [{"sha": "ac510fa620e4414a15e1aeccaaec8ed1c918bab2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058557c4d1b036386daf2f124ab829e5371e0dfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058557c4d1b036386daf2f124ab829e5371e0dfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=058557c4d1b036386daf2f124ab829e5371e0dfa", "patch": "@@ -1,3 +1,9 @@\n+2000-08-11  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.md (addsi3): Remove expander.\n+\t(subsi3, mulsi3, negsi2, one_cmplsi2): Likewise.\n+\t(*addsi3_shladd): New.\n+\n 2000-08-11  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.c (do_spill): Pass cfa offset to move expander."}, {"sha": "6a30393494e59a4fd91b85aff864faeee960d59c", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 14, "deletions": 124, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058557c4d1b036386daf2f124ab829e5371e0dfa/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058557c4d1b036386daf2f124ab829e5371e0dfa/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=058557c4d1b036386daf2f124ab829e5371e0dfa", "patch": "@@ -1087,33 +1087,7 @@\n ;; ::\n ;; ::::::::::::::::::::\n \n-;; We handle 32-bit arithmetic just like the alpha port does.\n-\n-(define_expand \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_22bit_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (optimize)\n-    {\n-      rtx op1 = gen_lowpart (DImode, operands[1]);\n-      rtx op2 = gen_lowpart (DImode, operands[2]);\n-\n-      if (! cse_not_expected)\n-\t{\n-\t  rtx tmp = gen_reg_rtx (DImode);\n-\t  emit_insn (gen_adddi3 (tmp, op1, op2));\n-\t  emit_move_insn (operands[0], gen_lowpart (SImode, tmp));\n-\t}\n-      else\n-\temit_insn (gen_adddi3 (gen_lowpart (DImode, operands[0]), op1, op2));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*addsi3_internal\"\n+(define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r,a\")\n \t\t (match_operand:SI 2 \"reg_or_22bit_operand\" \"r,I,J\")))]\n@@ -1142,31 +1116,16 @@\n   \"add %0 = %1, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n-(define_expand \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"\")))]\n+(define_insn \"*addsi3_shladd\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 2 \"shladd_operand\" \"n\"))\n+\t\t (match_operand:SI 3 \"register_operand\" \"r\")))]\n   \"\"\n-  \"\n-{\n-  if (optimize)\n-    {\n-      rtx op1 = gen_lowpart (DImode, operands[1]);\n-      rtx op2 = gen_lowpart (DImode, operands[2]);\n-\n-      if (! cse_not_expected)\n-\t{\n-\t  rtx tmp = gen_reg_rtx (DImode);\n-\t  emit_insn (gen_subdi3 (tmp, op1, op2));\n-\t  emit_move_insn (operands[0], gen_lowpart (SImode, tmp));\n-\t}\n-      else\n-\temit_insn (gen_subdi3 (gen_lowpart (DImode, operands[0]), op1, op2));\n-      DONE;\n-    }\n-}\")\n+  \"shladd %0 = %1, %S2, %3\"\n+  [(set_attr \"type\" \"A\")])\n \n-(define_insn \"*subsi3_internal\"\n+(define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rK\")\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n@@ -1182,63 +1141,17 @@\n   \"sub %0 = %2, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n-(define_expand \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (optimize)\n-    {\n-      rtx op1 = gen_lowpart (DImode, operands[1]);\n-      rtx op2 = gen_lowpart (DImode, operands[2]);\n-\n-      if (! cse_not_expected)\n-\t{\n-\t  rtx tmp = gen_reg_rtx (DImode);\n-\t  emit_insn (gen_muldi3 (tmp, op1, op2));\n-\t  emit_move_insn (operands[0], gen_lowpart (SImode, tmp));\n-\t}\n-      else\n-\temit_insn (gen_muldi3 (gen_lowpart (DImode, operands[0]), op1, op2));\n-      DONE;\n-    }\n-}\")\n-\n ;; ??? Could add maddsi3 patterns patterned after the madddi3 patterns.\n \n-(define_insn \"*mulsi3_internal\"\n+(define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"f\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"f\")))]\n   \"\"\n   \"xma.l %0 = %1, %2, f0%B0\"\n   [(set_attr \"type\" \"F\")])\n \n-(define_expand \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (optimize)\n-    {\n-      rtx op1 = gen_lowpart (DImode, operands[1]);\n-\n-      if (! cse_not_expected)\n-\t{\n-\t  rtx tmp = gen_reg_rtx (DImode);\n-\t  emit_insn (gen_negdi2 (tmp, op1));\n-\t  emit_move_insn (operands[0], gen_lowpart (SImode, tmp));\n-\t}\n-      else\n-\temit_insn (gen_negdi2 (gen_lowpart (DImode, operands[0]), op1));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*negsi2_internal\"\n+(define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n@@ -1970,7 +1883,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 Bit Integer Logical operations\n+;; :: 32 bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -1988,39 +1901,16 @@\n ;; Or maybe fix this by adding andsi3/iorsi3/xorsi3 patterns like the\n ;; one_cmplsi2 pattern.\n \n-(define_expand \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (optimize)\n-    {\n-      rtx op1 = gen_lowpart (DImode, operands[1]);\n-\n-      if (! cse_not_expected)\n-\t{\n-\t  rtx tmp = gen_reg_rtx (DImode);\n-\t  emit_insn (gen_one_cmpldi2 (tmp, op1));\n-\t  emit_move_insn (operands[0], gen_lowpart (SImode, tmp));\n-\t}\n-      else\n-\temit_insn (gen_one_cmpldi2 (gen_lowpart (DImode, operands[0]), op1));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*one_cmplsi2_internal\"\n+(define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"andcm %0 = -1, %1\"\n   [(set_attr \"type\" \"A\")])\n-\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 Bit Integer Logical operations\n+;; :: 64 bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n "}]}