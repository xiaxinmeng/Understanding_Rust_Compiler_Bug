{"sha": "5cf2a084134a8a7d376015981e55963f344d0f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmMmEwODQxMzRhOGE3ZDM3NjAxNTk4MWU1NTk2M2YzNDRkMGYxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-03-26T10:23:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-03-26T10:23:59Z"}, "message": "decl.c (grokfndecl): Handle separately <inline> and <constexpr> error messages.\n\n/cp\n2013-03-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokfndecl): Handle separately <inline> and <constexpr>\n\terror messages.\n\n\t* decl.c (grokdeclarator): Declare typedef_p and use it everywhere.\n\n/testsuite\n2013-03-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/constexpr-friend-2.C: New.\n\t* g++.dg/cpp0x/constexpr-main.C: Likewise.\n\nFrom-SVN: r197097", "tree": {"sha": "5d6036a00149f5e9d47fe9bae08f27215a930686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d6036a00149f5e9d47fe9bae08f27215a930686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf2a084134a8a7d376015981e55963f344d0f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf2a084134a8a7d376015981e55963f344d0f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf2a084134a8a7d376015981e55963f344d0f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf2a084134a8a7d376015981e55963f344d0f19/comments", "author": null, "committer": null, "parents": [{"sha": "30b0317cb922423802443127f526c7bfd4bbb61f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b0317cb922423802443127f526c7bfd4bbb61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b0317cb922423802443127f526c7bfd4bbb61f"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "3dfb31ad4b4eb143a935c4a123b963af697da506", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cf2a084134a8a7d376015981e55963f344d0f19", "patch": "@@ -1,3 +1,10 @@\n+2013-03-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokfndecl): Handle separately <inline> and <constexpr>\n+\terror messages.\n+\n+\t* decl.c (grokdeclarator): Declare typedef_p and use it everywhere.\n+\n 2013-03-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56699"}, {"sha": "a82132882159d7fceb4bb6ede9011106a5f8eb18", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5cf2a084134a8a7d376015981e55963f344d0f19", "patch": "@@ -7427,13 +7427,16 @@ grokfndecl (tree ctype,\n \t      return NULL_TREE;\n \t    }\n \n+\t  if (inlinep & 1)\n+\t    error (\"%<inline%> is not allowed in declaration of friend \"\n+\t\t   \"template specialization %qD\",\n+\t\t   decl);\n+\t  if (inlinep & 2)\n+\t    error (\"%<constexpr%> is not allowed in declaration of friend \"\n+\t\t   \"template specialization %qD\",\n+\t\t   decl);\n \t  if (inlinep)\n-\t    {\n-\t      error (\"%<inline%> is not allowed in declaration of friend \"\n-\t\t     \"template specialization %qD\",\n-\t\t     decl);\n-\t      return NULL_TREE;\n-\t    }\n+\t    return NULL_TREE;\n \t}\n     }\n \n@@ -7472,8 +7475,10 @@ grokfndecl (tree ctype,\n     {\n       if (PROCESSING_REAL_TEMPLATE_DECL_P())\n \terror (\"cannot declare %<::main%> to be a template\");\n-      if (inlinep)\n+      if (inlinep & 1)\n \terror (\"cannot declare %<::main%> to be inline\");\n+      if (inlinep & 2)\n+\terror (\"cannot declare %<::main%> to be constexpr\");\n       if (!publicp)\n \terror (\"cannot declare %<::main%> to be static\");\n       inlinep = 0;\n@@ -8651,6 +8656,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool parameter_pack_p = declarator? declarator->parameter_pack_p : false;\n   bool template_type_arg = false;\n   bool template_parm_flag = false;\n+  bool typedef_p = decl_spec_seq_has_spec_p (declspecs, ds_typedef);\n   bool constexpr_p = decl_spec_seq_has_spec_p (declspecs, ds_constexpr);\n   source_location saved_loc = input_location;\n   const char *errmsg;\n@@ -8862,7 +8868,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (dname && IDENTIFIER_OPNAME_P (dname))\n     {\n-      if (decl_spec_seq_has_spec_p (declspecs, ds_typedef))\n+      if (typedef_p)\n \t{\n \t  error (\"declaration of %qD as %<typedef%>\", dname);\n \t  return error_mark_node;\n@@ -8900,7 +8906,7 @@ grokdeclarator (const cp_declarator *declarator,\n   if (name == NULL)\n     name = decl_context == PARM ? \"parameter\" : \"type name\";\n \n-  if (constexpr_p && decl_spec_seq_has_spec_p (declspecs, ds_typedef))\n+  if (constexpr_p && typedef_p)\n     {\n       error (\"%<constexpr%> cannot appear in a typedef declaration\");\n       return error_mark_node;\n@@ -9198,7 +9204,7 @@ grokdeclarator (const cp_declarator *declarator,\n   /* Issue errors about use of storage classes for parameters.  */\n   if (decl_context == PARM)\n     {\n-      if (decl_spec_seq_has_spec_p (declspecs, ds_typedef))\n+      if (typedef_p)\n \t{\n \t  error (\"typedef declaration invalid in parameter declaration\");\n \t  return error_mark_node;\n@@ -9242,7 +9248,7 @@ grokdeclarator (const cp_declarator *declarator,\n       && ((storage_class\n \t   && storage_class != sc_extern\n \t   && storage_class != sc_static)\n-\t  || decl_spec_seq_has_spec_p (declspecs, ds_typedef)))\n+\t  || typedef_p))\n     {\n       error (\"multiple storage classes in declaration of %qs\", name);\n       thread_p = false;\n@@ -9256,7 +9262,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && (storage_class == sc_register\n \t      || storage_class == sc_auto))\n \t;\n-      else if (decl_spec_seq_has_spec_p (declspecs, ds_typedef))\n+      else if (typedef_p)\n \t;\n       else if (decl_context == FIELD\n \t       /* C++ allows static class elements.  */\n@@ -9866,8 +9872,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      return error_mark_node;\n \t    }\n \t}\n-      else if (decl_spec_seq_has_spec_p (declspecs, ds_typedef)\n-\t       && current_class_type)\n+      else if (typedef_p && current_class_type)\n \t{\n \t  error (\"cannot declare member %<%T::%s%> within %qT\",\n \t\t ctype, name, current_class_type);\n@@ -9944,8 +9949,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  error (\"non-member %qs cannot be declared %<mutable%>\", name);\n \t  storage_class = sc_none;\n \t}\n-      else if (decl_context == TYPENAME\n-\t       || decl_spec_seq_has_spec_p (declspecs, ds_typedef))\n+      else if (decl_context == TYPENAME || typedef_p)\n \t{\n \t  error (\"non-object member %qs cannot be declared %<mutable%>\", name);\n \t  storage_class = sc_none;\n@@ -9975,7 +9979,7 @@ grokdeclarator (const cp_declarator *declarator,\n     }\n \n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n-  if (decl_spec_seq_has_spec_p (declspecs, ds_typedef) && decl_context != TYPENAME)\n+  if (typedef_p && decl_context != TYPENAME)\n     {\n       tree decl;\n "}, {"sha": "52a1a8d38d79936748b2bd4a459f31d99e5be72a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cf2a084134a8a7d376015981e55963f344d0f19", "patch": "@@ -1,3 +1,8 @@\n+2013-03-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/constexpr-friend-2.C: New.\n+\t* g++.dg/cpp0x/constexpr-main.C: Likewise.\n+\n 2013-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56722"}, {"sha": "36799b435877c3b31242902521a1ea417e138c54", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-friend-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend-2.C?ref=5cf2a084134a8a7d376015981e55963f344d0f19", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> void f(T);\n+\n+template <class T> class A {\n+  friend constexpr void f<>(int);  // { dg-error \"'constexpr' is not allowed\" }\n+};"}, {"sha": "42720adc53f5d363e931fa786381d50a6be1c397", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-main.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf2a084134a8a7d376015981e55963f344d0f19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-main.C?ref=5cf2a084134a8a7d376015981e55963f344d0f19", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int main ();  // { dg-error \"constexpr\" }"}]}