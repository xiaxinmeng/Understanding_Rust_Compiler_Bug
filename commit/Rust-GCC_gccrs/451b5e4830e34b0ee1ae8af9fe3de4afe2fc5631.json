{"sha": "451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxYjVlNDgzMGUzNGIwZWUxYWU4YWY5ZmUzZGU0YWZlMmZjNTYzMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-07-20T13:43:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-07-20T13:43:45Z"}, "message": "re PR c++/55095 (Wshift-overflow)\n\n\tPR c++/55095\n\t* c-common.c (c_fully_fold_internal): Warn about left shift overflows.\n\tUse EXPR_LOC_OR_LOC.\n\t(maybe_warn_shift_overflow): New function.\n\t* c-common.h (maybe_warn_shift_overflow): Declare.\n\t* c-opts.c (c_common_post_options): Set warn_shift_overflow.\n\t* c.opt (Wshift-overflow): New option.\n\n\t* c-typeck.c (digest_init): Pass OPT_Wpedantic to pedwarn_init.\n\t(build_binary_op): Warn about left shift overflows.\n\n\t* typeck.c (cp_build_binary_op): Warn about left shift overflows.\n\n\t* doc/invoke.texi: Document -Wshift-overflow and -Wshift-overflow=.\n\n\t* c-c++-common/Wshift-overflow-1.c: New test.\n\t* c-c++-common/Wshift-overflow-2.c: New test.\n\t* c-c++-common/Wshift-overflow-3.c: New test.\n\t* c-c++-common/Wshift-overflow-4.c: New test.\n\t* c-c++-common/Wshift-overflow-5.c: New test.\n\t* g++.dg/cpp1y/left-shift-1.C: New test.\n\t* gcc.dg/c90-left-shift-2.c: New test.\n\t* gcc.dg/c90-left-shift-3.c: New test.\n\t* gcc.dg/c99-left-shift-2.c: New test.\n\t* gcc.dg/c99-left-shift-3.c: New test.\n\t* gcc.dg/pr40501.c: Use -Wno-shift-overflow.\n\t* gcc.c-torture/execute/pr40386.c: Likewise.\n\t* gcc.dg/vect/pr33373.c: Likewise.\n\t* gcc.dg/vect/vect-shift-2-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-shift-2.c: Likewise.\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@arm.com>\n\nFrom-SVN: r225998", "tree": {"sha": "42f1e133920c2d40c48b5953fe8ca2e817aae347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42f1e133920c2d40c48b5953fe8ca2e817aae347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7040e90366fe1e8d4d78564335f3b3ea8e55234b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7040e90366fe1e8d4d78564335f3b3ea8e55234b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7040e90366fe1e8d4d78564335f3b3ea8e55234b"}], "stats": {"total": 486, "additions": 473, "deletions": 13}, "files": [{"sha": "202416df923e10a28d42e1f9e568204933475437", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,8 @@\n+2015-07-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/55095\n+\t* doc/invoke.texi: Document -Wshift-overflow and -Wshift-overflow=.\n+\n 2015-07-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* simplify-rtx.c (simplify_unary_operation_1, NEG case):"}, {"sha": "9751ba97550917da1438cbfbed08f2b6308c510d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,14 @@\n+2015-07-20  Marek Polacek  <polacek@redhat.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/55095\n+\t* c-common.c (c_fully_fold_internal): Warn about left shift overflows.\n+\tUse EXPR_LOC_OR_LOC.\n+\t(maybe_warn_shift_overflow): New function.\n+\t* c-common.h (maybe_warn_shift_overflow): Declare.\n+\t* c-opts.c (c_common_post_options): Set warn_shift_overflow.\n+\t* c.opt (Wshift-overflow): New option.\n+\n 2015-07-16  Martin Liska  <mliska@suse.cz>\n \n \t* c-format.c (static void check_format_info_main): Use"}, {"sha": "c94596f89bac57d216cf666c70e2c9db0463108c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1364,7 +1364,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (TREE_OVERFLOW_P (ret)\n \t  && !TREE_OVERFLOW_P (op0)\n \t  && !TREE_OVERFLOW_P (op1))\n-\toverflow_warning (EXPR_LOCATION (expr), ret);\n+\toverflow_warning (EXPR_LOC_OR_LOC (expr, input_location), ret);\n       if (code == LSHIFT_EXPR\n \t  && TREE_CODE (orig_op0) != INTEGER_CST\n \t  && TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n@@ -1394,6 +1394,18 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t\t\t ? G_(\"left shift count >= width of type\")\n \t\t\t : G_(\"right shift count >= width of type\")));\n \t}\n+      if (code == LSHIFT_EXPR\n+\t  /* If either OP0 has been folded to INTEGER_CST...  */\n+\t  && ((TREE_CODE (orig_op0) != INTEGER_CST\n+\t       && TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n+\t       && TREE_CODE (op0) == INTEGER_CST)\n+\t      /* ...or if OP1 has been folded to INTEGER_CST...  */\n+\t      || (TREE_CODE (orig_op1) != INTEGER_CST\n+\t\t  && TREE_CODE (TREE_TYPE (orig_op1)) == INTEGER_TYPE\n+\t\t  && TREE_CODE (op1) == INTEGER_CST))\n+\t  && c_inhibit_evaluation_warnings == 0)\n+\t/* ...then maybe we can detect an overflow.  */\n+\tmaybe_warn_shift_overflow (loc, op0, op1);\n       if ((code == TRUNC_DIV_EXPR\n \t   || code == CEIL_DIV_EXPR\n \t   || code == FLOOR_DIV_EXPR\n@@ -12328,6 +12340,53 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n     }\n }\n \n+/* Warn if signed left shift overflows.  We don't warn\n+   about left-shifting 1 into the sign bit in C++14; cf.\n+   <http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3367.html#1457>\n+   LOC is a location of the shift; OP0 and OP1 are the operands.\n+   Return true if an overflow is detected, false otherwise.  */\n+\n+bool\n+maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n+{\n+  if (TREE_CODE (op0) != INTEGER_CST\n+      || TREE_CODE (op1) != INTEGER_CST)\n+    return false;\n+\n+  tree type0 = TREE_TYPE (op0);\n+  unsigned int prec0 = TYPE_PRECISION (type0);\n+\n+  /* Left-hand operand must be signed.  */\n+  if (TYPE_UNSIGNED (type0))\n+    return false;\n+\n+  /* Handle the left-shifting 1 into the sign bit case.  */\n+  if (integer_onep (op0)\n+      && compare_tree_int (op1, prec0 - 1) == 0)\n+    {\n+      /* Never warn for C++14 onwards.  */\n+      if (cxx_dialect >= cxx14)\n+\treturn false;\n+      /* Otherwise only if -Wshift-overflow=2.  But return\n+\t true to signal an overflow for the sake of integer\n+\t constant expressions.  */\n+      if (warn_shift_overflow < 2)\n+\treturn true;\n+    }\n+\n+  unsigned int min_prec = (wi::min_precision (op0, SIGNED)\n+\t\t\t   + TREE_INT_CST_LOW (op1));\n+  bool overflowed = min_prec > prec0;\n+  if (overflowed && c_inhibit_evaluation_warnings == 0)\n+    warning_at (loc, OPT_Wshift_overflow_,\n+\t\t\"result of %qE requires %u bits to represent, \"\n+\t\t\"but %qT only has %u bits\",\n+\t\tbuild2_loc (loc, LSHIFT_EXPR, type0, op0, op1),\n+\t\tmin_prec, type0, prec0);\n+\n+  return overflowed;\n+}\n+\n /* The C and C++ parsers both use vectors to hold function arguments.\n    For efficiency, we keep a cache of unused vectors.  This is the\n    cache.  */"}, {"sha": "a198e794f5baa30305ff10e63dc1683cfdd4349f", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1052,6 +1052,7 @@ extern void record_locally_defined_typedef (tree);\n extern void maybe_record_typedef_use (tree);\n extern void maybe_warn_unused_local_typedefs (void);\n extern void maybe_warn_bool_compare (location_t, enum tree_code, tree, tree);\n+extern bool maybe_warn_shift_overflow (location_t, tree, tree);\n extern vec<tree, va_gc> *make_tree_vector (void);\n extern void release_tree_vector (vec<tree, va_gc> *);\n extern vec<tree, va_gc> *make_tree_vector_single (tree);"}, {"sha": "73f5db0a664b2b70edba7d43e93ae20be3e4d087", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -853,6 +853,10 @@ c_common_post_options (const char **pfilename)\n   if (warn_implicit_int == -1)\n     warn_implicit_int = flag_isoc99;\n \n+  /* -Wshift-overflow is enabled by default in C99 and C++11 modes.  */\n+  if (warn_shift_overflow == -1)\n+    warn_shift_overflow = cxx_dialect >= cxx11 || flag_isoc99;\n+\n   /* -Wshift-negative-value is enabled by -Wextra in C99 and C++11 modes.  */\n   if (warn_shift_negative_value == -1)\n     warn_shift_negative_value = (extra_warnings"}, {"sha": "dc760d7179997cf72a79ace816865e3ef2505c6c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -780,6 +780,14 @@ Wshadow-ivar\n ObjC ObjC++ Var(warn_shadow_ivar) EnabledBy(Wshadow) Init(1) Warning\n Warn if a local declaration hides an instance variable\n \n+Wshift-overflow\n+C ObjC C++ ObjC++ Warning Alias(Wshift-overflow=, 1, 0)\n+Warn if left shift of a signed value overflows\n+\n+Wshift-overflow=\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_shift_overflow) Init(-1) Warning\n+Warn if left shift of a signed value overflows\n+\n Wshift-count-negative\n C ObjC C++ ObjC++ Var(warn_shift_count_negative) Init(1) Warning\n Warn if shift count is negative"}, {"sha": "18443aea3dba8f38686d88166850e28a32d1fe10", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,9 @@\n+2015-07-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/55095\n+\t* c-typeck.c (digest_init): Pass OPT_Wpedantic to pedwarn_init.\n+\t(build_binary_op): Warn about left shift overflows.\n+\n 2015-07-09  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-array-notation.c: Adjust includes for flags.h changes."}, {"sha": "d3d0abdb2cb137efa6cc3dd2bb83fa1282711f11", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -6892,7 +6892,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  inside_init = error_mark_node;\n \t}\n       else if (require_constant && !maybe_const)\n-\tpedwarn_init (init_loc, 0,\n+\tpedwarn_init (init_loc, OPT_Wpedantic,\n \t\t      \"initializer element is not a constant expression\");\n \n       return inside_init;\n@@ -10624,15 +10624,15 @@ build_binary_op (location_t location, enum tree_code code,\n           converted = 1;\n         }\n       else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n-\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n-          && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n-          && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t       && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t       && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t       && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n \t{\n \t  result_type = type0;\n \t  converted = 1;\n \t}\n       else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n-\t  && code1 == INTEGER_TYPE)\n+\t       && code1 == INTEGER_TYPE)\n \t{\n \t  doing_shift = true;\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n@@ -10674,15 +10674,15 @@ build_binary_op (location_t location, enum tree_code code,\n           converted = 1;\n         }\n       else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n-\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n-          && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n-          && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t       && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t       && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+\t       && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n \t{\n \t  result_type = type0;\n \t  converted = 1;\n \t}\n       else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n-\t  && code1 == INTEGER_TYPE)\n+\t       && code1 == INTEGER_TYPE)\n \t{\n \t  doing_shift = true;\n \t  if (TREE_CODE (op0) == INTEGER_CST\n@@ -10705,14 +10705,17 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t    warning_at (location, OPT_Wshift_count_negative,\n \t\t\t\t\"left shift count is negative\");\n \t\t}\n-\n \t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n \t\t{\n \t\t  int_const = false;\n \t\t  if (c_inhibit_evaluation_warnings == 0)\n \t\t    warning_at (location, OPT_Wshift_count_overflow,\n \t\t\t\t\"left shift count >= width of type\");\n \t\t}\n+\t      else if (TREE_CODE (op0) == INTEGER_CST\n+\t\t       && maybe_warn_shift_overflow (location, op0, op1)\n+\t\t       && flag_isoc99)\n+\t\tint_const = false;\n \t    }\n \n \t  /* Use the type of the value to be shifted.  */"}, {"sha": "b72b22f5ef8d13becd270b7693144aae8707a5aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,8 @@\n+2015-07-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/55095\n+\t* typeck.c (cp_build_binary_op): Warn about left shift overflows.\n+\n 2015-07-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65091"}, {"sha": "b88a3fd42cff716fd2af3c24095252d7933bb85a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -4350,6 +4350,9 @@ cp_build_binary_op (location_t location,\n \t\t    warning (OPT_Wshift_count_overflow,\n \t\t\t     \"left shift count >= width of type\");\n \t\t}\n+\t      else if (TREE_CODE (const_op0) == INTEGER_CST\n+\t\t       && (complain & tf_warning))\n+\t\tmaybe_warn_shift_overflow (location, const_op0, const_op1);\n \t    }\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;"}, {"sha": "55c26593180220313a6f396e055ce454a448fa81", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -273,6 +273,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n+-Wshift-overflow -Wshift-overflow=@var{n} @gol\n -Wshift-count-negative -Wshift-count-overflow -Wshift-negative-value @gol\n -Wsign-compare  -Wsign-conversion -Wfloat-conversion @gol\n -Wsizeof-pointer-memaccess  -Wsizeof-array-argument @gol\n@@ -3982,6 +3983,26 @@ Warn if shift count >= width of type. This warning is enabled by default.\n Warn if left shifting a negative value.  This warning is enabled by\n @option{-Wextra} in C99 and C++11 modes (and newer).\n \n+@item -Wshift-overflow\n+@itemx -Wshift-overflow=@var{n}\n+@opindex Wshift-overflow\n+@opindex Wno-shift-overflow\n+Warn about left shift overflows.  This warning is enabled by\n+default in C99 and C++11 modes (and newer).\n+\n+@table @gcctabopt\n+@item -Wshift-overflow=1\n+This is the warning level of @option{-Wshift-overflow} and is enabled\n+by default in C99 and C++11 modes (and newer).  This warning level does\n+not warn about left-shifting 1 into the sign bit.  (However, in C, such\n+an overflow is still rejected in contexts where an integer constant expression\n+is required.)\n+\n+@item -Wshift-overflow=2\n+This warning level also warns about left-shifting 1 into the sign bit,\n+unless C++14 mode is active.\n+@end table\n+\n @item -Wswitch\n @opindex Wswitch\n @opindex Wno-switch"}, {"sha": "aa6693c58fee005e9b0172f425d326460f7abff6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,22 @@\n+2015-07-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/55095\n+\t* c-c++-common/Wshift-overflow-1.c: New test.\n+\t* c-c++-common/Wshift-overflow-2.c: New test.\n+\t* c-c++-common/Wshift-overflow-3.c: New test.\n+\t* c-c++-common/Wshift-overflow-4.c: New test.\n+\t* c-c++-common/Wshift-overflow-5.c: New test.\n+\t* g++.dg/cpp1y/left-shift-1.C: New test.\n+\t* gcc.dg/c90-left-shift-2.c: New test.\n+\t* gcc.dg/c90-left-shift-3.c: New test.\n+\t* gcc.dg/c99-left-shift-2.c: New test.\n+\t* gcc.dg/c99-left-shift-3.c: New test.\n+\t* gcc.dg/pr40501.c: Use -Wno-shift-overflow.\n+\t* gcc.c-torture/execute/pr40386.c: Likewise.\n+\t* gcc.dg/vect/pr33373.c: Likewise.\n+\t* gcc.dg/vect/vect-shift-2-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-shift-2.c: Likewise.\n+\n 2015-07-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/neg_abs_1.c: New test."}, {"sha": "9969629f2b0fb9de3d8a7009fc24206e2599a75d", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-1.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,58 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+#define LLONGM2 (sizeof (long long) * __CHAR_BIT__ - 2)\n+\n+int i1 = 1 << INTM1;\n+int i2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+int i3 = 10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n+int i4 = __INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n+int i5 = __INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n+int i6 = -1 << INTM1;\n+int i7 = -9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+int i8 = -10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n+int i9 = -__INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n+int i10 = -__INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n+\n+int r1 = 1 >> INTM1;\n+int r2 = 9 >> INTM1;\n+int r3 = 10 >> INTM2;\n+int r4 = __INT_MAX__ >> 2;\n+int r5 = __INT_MAX__ >> INTM1;\n+int r6 = -1 >> INTM1;\n+int r7 = -9 >> INTM1;\n+int r8 = -10 >> INTM2;\n+int r9 = -__INT_MAX__ >> 2;\n+int r10 = -__INT_MAX__ >> INTM1;\n+\n+unsigned u1 = 1 << INTM1;\n+unsigned u2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+unsigned u3 = 2U << INTM1;\n+unsigned u4 = 9U << INTM1;\n+unsigned u5 = 10U << INTM2;\n+\n+long long int l1 = 1LL << LLONGM1;\n+long long int l2 = 9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n+long long int l3 = 10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n+long long int l4 = __LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n+long long int l5 = __LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n+long long int l6 = -1LL << LLONGM1;\n+long long int l7 = -9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n+long long int l8 = -10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n+long long int l9 = -__LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n+long long int l10 = -__LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n+\n+void\n+fn (void)\n+{\n+  const int a = 10;\n+  const __SIZE_TYPE__ b = INTM1;\n+  int k1 = a << b; /* { dg-warning \"requires 36 bits to represent\" } */\n+  int k2 = 10 << b; /* { dg-warning \"requires 36 bits to represent\" } */\n+  int k3 = a << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+}"}, {"sha": "d5115d01eaebb3aae45141658f4b26723e50c340", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-2.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,58 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -Wno-shift-overflow\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+#define LLONGM2 (sizeof (long long) * __CHAR_BIT__ - 2)\n+\n+int i1 = 1 << INTM1;\n+int i2 = 9 << INTM1;\n+int i3 = 10 << INTM2;\n+int i4 = __INT_MAX__ << 2;\n+int i5 = __INT_MAX__ << INTM1;\n+int i6 = -1 << INTM1;\n+int i7 = -9 << INTM1;\n+int i8 = -10 << INTM2;\n+int i9 = -__INT_MAX__ << 2;\n+int i10 = -__INT_MAX__ << INTM1;\n+\n+int r1 = 1 >> INTM1;\n+int r2 = 9 >> INTM1;\n+int r3 = 10 >> INTM2;\n+int r4 = __INT_MAX__ >> 2;\n+int r5 = __INT_MAX__ >> INTM1;\n+int r6 = -1 >> INTM1;\n+int r7 = -9 >> INTM1;\n+int r8 = -10 >> INTM2;\n+int r9 = -__INT_MAX__ >> 2;\n+int r10 = -__INT_MAX__ >> INTM1;\n+\n+unsigned u1 = 1 << INTM1;\n+unsigned u2 = 9 << INTM1;\n+unsigned u3 = 2U << INTM1;\n+unsigned u4 = 9U << INTM1;\n+unsigned u5 = 10U << INTM2;\n+\n+long long int l1 = 1LL << LLONGM1;\n+long long int l2 = 9LL << LLONGM1;\n+long long int l3 = 10LL << LLONGM2;\n+long long int l4 = __LONG_LONG_MAX__ << 2;\n+long long int l5 = __LONG_LONG_MAX__ << LLONGM1;\n+long long int l6 = -1LL << LLONGM1;\n+long long int l7 = -9LL << LLONGM1;\n+long long int l8 = -10LL << LLONGM2;\n+long long int l9 = -__LONG_LONG_MAX__ << 2;\n+long long int l10 = -__LONG_LONG_MAX__ << LLONGM1;\n+\n+void\n+fn (void)\n+{\n+  const int a = 10;\n+  const __SIZE_TYPE__ b = INTM1;\n+  int k1 = a << b;\n+  int k2 = 10 << b;\n+  int k3 = a << INTM1;\n+}"}, {"sha": "ed57d5d8becf6d3dc455165027462fb783f845ed", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-3.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-3.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,59 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -Wshift-overflow\" } */\n+/* { dg-additional-options \"-std=gnu90\" { target c } } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+#define LLONGM2 (sizeof (long long) * __CHAR_BIT__ - 2)\n+\n+int i1 = 1 << INTM1;\n+int i2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+int i3 = 10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n+int i4 = __INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n+int i5 = __INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n+int i6 = -1 << INTM1;\n+int i7 = -9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+int i8 = -10 << INTM2; /* { dg-warning \"requires 35 bits to represent\" } */\n+int i9 = -__INT_MAX__ << 2; /* { dg-warning \"requires 34 bits to represent\" } */\n+int i10 = -__INT_MAX__ << INTM1; /* { dg-warning \"requires 63 bits to represent\" } */\n+\n+int r1 = 1 >> INTM1;\n+int r2 = 9 >> INTM1;\n+int r3 = 10 >> INTM2;\n+int r4 = __INT_MAX__ >> 2;\n+int r5 = __INT_MAX__ >> INTM1;\n+int r6 = -1 >> INTM1;\n+int r7 = -9 >> INTM1;\n+int r8 = -10 >> INTM2;\n+int r9 = -__INT_MAX__ >> 2;\n+int r10 = -__INT_MAX__ >> INTM1;\n+\n+unsigned u1 = 1 << INTM1;\n+unsigned u2 = 9 << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+unsigned u3 = 2U << INTM1;\n+unsigned u4 = 9U << INTM1;\n+unsigned u5 = 10U << INTM2;\n+\n+long long int l1 = 1LL << LLONGM1;\n+long long int l2 = 9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n+long long int l3 = 10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n+long long int l4 = __LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n+long long int l5 = __LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n+long long int l6 = -1LL << LLONGM1;\n+long long int l7 = -9LL << LLONGM1; /* { dg-warning \"requires 68 bits to represent\" } */\n+long long int l8 = -10LL << LLONGM2; /* { dg-warning \"requires 67 bits to represent\" } */\n+long long int l9 = -__LONG_LONG_MAX__ << 2; /* { dg-warning \"requires 66 bits to represent\" } */\n+long long int l10 = -__LONG_LONG_MAX__ << LLONGM1; /* { dg-warning \"requires 127 bits to represent\" } */\n+\n+void\n+fn (void)\n+{\n+  const int a = 10;\n+  const __SIZE_TYPE__ b = INTM1;\n+  int k1 = a << b; /* { dg-warning \"requires 36 bits to represent\" } */\n+  int k2 = 10 << b; /* { dg-warning \"requires 36 bits to represent\" } */\n+  int k3 = a << INTM1; /* { dg-warning \"requires 36 bits to represent\" } */\n+}"}, {"sha": "92f8cf85b505e94f675a881dfc2b179be30139f1", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-4.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-4.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,59 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-additional-options \"-std=gnu90\" { target c } } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+#define LLONGM2 (sizeof (long long) * __CHAR_BIT__ - 2)\n+\n+int i1 = 1 << INTM1;\n+int i2 = 9 << INTM1;\n+int i3 = 10 << INTM2;\n+int i4 = __INT_MAX__ << 2;\n+int i5 = __INT_MAX__ << INTM1;\n+int i6 = -1 << INTM1;\n+int i7 = -9 << INTM1;\n+int i8 = -10 << INTM2;\n+int i9 = -__INT_MAX__ << 2;\n+int i10 = -__INT_MAX__ << INTM1;\n+\n+int r1 = 1 >> INTM1;\n+int r2 = 9 >> INTM1;\n+int r3 = 10 >> INTM2;\n+int r4 = __INT_MAX__ >> 2;\n+int r5 = __INT_MAX__ >> INTM1;\n+int r6 = -1 >> INTM1;\n+int r7 = -9 >> INTM1;\n+int r8 = -10 >> INTM2;\n+int r9 = -__INT_MAX__ >> 2;\n+int r10 = -__INT_MAX__ >> INTM1;\n+\n+unsigned u1 = 1 << INTM1;\n+unsigned u2 = 9 << INTM1;\n+unsigned u3 = 2U << INTM1;\n+unsigned u4 = 9U << INTM1;\n+unsigned u5 = 10U << INTM2;\n+\n+long long int l1 = 1LL << LLONGM1;\n+long long int l2 = 9LL << LLONGM1;\n+long long int l3 = 10LL << LLONGM2;\n+long long int l4 = __LONG_LONG_MAX__ << 2;\n+long long int l5 = __LONG_LONG_MAX__ << LLONGM1;\n+long long int l6 = -1LL << LLONGM1;\n+long long int l7 = -9LL << LLONGM1;\n+long long int l8 = -10LL << LLONGM2;\n+long long int l9 = -__LONG_LONG_MAX__ << 2;\n+long long int l10 = -__LONG_LONG_MAX__ << LLONGM1;\n+\n+void\n+fn (void)\n+{\n+  const int a = 10;\n+  const __SIZE_TYPE__ b = INTM1;\n+  int k1 = a << b;\n+  int k2 = 10 << b;\n+  int k3 = a << INTM1;\n+}"}, {"sha": "c9f464355dc0cd7401d5dd41a3f72668718798d3", "filename": "gcc/testsuite/c-c++-common/Wshift-overflow-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-overflow-5.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,11 @@\n+/* PR c++/55095 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O -Wshift-overflow=2\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+\n+int i1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" } */\n+unsigned u1 = 1 << INTM1; /* { dg-warning \"requires 33 bits to represent\" } */\n+long long int l1 = 1LL << LLONGM1; /* { dg-warning \"requires 65 bits to represent\" } */"}, {"sha": "a24caaebf2681dc55190bc10df3c24c706ee5a25", "filename": "gcc/testsuite/g++.dg/cpp1y/left-shift-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fleft-shift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fleft-shift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fleft-shift-1.C?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/55095\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wshift-overflow=2\" }\n+// { dg-require-effective-target int32plus }\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define LLONGM1 (sizeof (long long) * __CHAR_BIT__ - 1)\n+\n+int i1 = 1 << INTM1;\n+unsigned u1 = 1 << INTM1;\n+long long int l1 = 1LL << LLONGM1;"}, {"sha": "c701304a1b4e92bfa922ce8a75e3c775e31a1228", "filename": "gcc/testsuite/gcc.c-torture/execute/pr40386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40386.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fno-ira-share-spill-slots\" } */\n+/* { dg-options \"-fno-ira-share-spill-slots -Wno-shift-overflow\" } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "f79ab8b71de8e96f251dce734aeb3a55be36db5d", "filename": "gcc/testsuite/gcc.dg/c90-left-shift-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-2.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+\n+enum { A = 10 << INTM2 };\n+int k = 10 << INTM2;\n+\n+void\n+fn (int i)\n+{\n+  switch (i)\n+  case 10 << INTM2: break;\n+}"}, {"sha": "43942dd29d1ff693e1dc5fd036ce419c95e472e7", "filename": "gcc/testsuite/gcc.dg/c90-left-shift-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-3.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+\n+enum { A = 1 << INTM1 };\n+int k = 1 << INTM1;\n+\n+void\n+fn (int i)\n+{\n+  switch (i)\n+  case 1 << INTM1: break;\n+}"}, {"sha": "e35786e50d9781fb81c6bc36233b7737d5cb1931", "filename": "gcc/testsuite/gcc.dg/c99-left-shift-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-2.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -Wno-shift-overflow\" } */\n+\n+#define INTM2 (sizeof (int) * __CHAR_BIT__ - 2)\n+\n+enum { A = 10 << INTM2 }; /* { dg-error \"constant expression\" } */\n+int k = 10 << INTM2; /* { dg-error \"constant expression\" } */\n+\n+void\n+fn (int i)\n+{\n+  switch (i)\n+  case 10 << INTM2: break; /* { dg-error \"constant expression\" } */\n+}"}, {"sha": "59d0f24e39d4044a0c433061e8fb82485777e8f2", "filename": "gcc/testsuite/gcc.dg/c99-left-shift-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-3.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -Wno-shift-overflow\" } */\n+\n+#define INTM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+\n+enum { A = 1 << INTM1 }; /* { dg-error \"constant expression\" } */\n+int k = 1 << INTM1; /* { dg-error \"constant expression\" } */\n+\n+void\n+fn (int i)\n+{\n+  switch (i)\n+  case 1 << INTM1: break; /* { dg-error \"constant expression\" } */\n+}"}, {"sha": "7610a2062c287a4e14375087a48b5f32cd975f04", "filename": "gcc/testsuite/gcc.dg/pr40501.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target alpha*-*-* ia64*-*-* i?86-*-* x86_64-*-* s390x-*-* } } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-shift-overflow\" } */\n /* { dg-require-effective-target lp64 } */\n \n /* PR middle-end/40501 */"}, {"sha": "efba2ab3190822018596b1c8c532f575703fa8bc", "filename": "gcc/testsuite/gcc.dg/vect/pr33373.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33373.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33373.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33373.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"-Wno-shift-overflow\" } */\n /* { dg-do compile } */\n void DOSMEM_FillIsrTable(int*isr) {\n     int i;"}, {"sha": "85ff0e041f6d34908c0e69de52799ad13cd0b61f", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-2-big-array.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2-big-array.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"-Wno-shift-overflow\" } */\n /* { dg-require-effective-target vect_shift } */\n /* { dg-require-effective-target vect_int } */\n /* Check the standard integer types for left and right shifts to see if the"}, {"sha": "6199cd615141f163d33923c3a8362ced78179fcb", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c?ref=451b5e4830e34b0ee1ae8af9fe3de4afe2fc5631", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"-Wno-shift-overflow\" } */\n /* { dg-require-effective-target vect_shift } */\n /* { dg-require-effective-target vect_int } */\n /* Check the standard integer types for left and right shifts to see if the"}]}