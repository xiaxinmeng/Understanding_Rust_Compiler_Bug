{"sha": "27f33b1531f5e59660355565e056a6630eafd762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmMzNiMTUzMWY1ZTU5NjYwMzU1NTY1ZTA1NmE2NjMwZWFmZDc2Mg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-12T09:32:08Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-12T09:32:08Z"}, "message": "re PR middle-end/7651 (Define -Wextra strictly in terms of other warning flags)\n\n2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR middle-end/7651\n\t* doc/invoke.texi (Wunused-value): Update description.\n\t(Wextra): Delete item.\n\t* opts.c (set_Wextra): Don't use the value of Wextra to set the\n\tvalue of Wunused-value.\n\t* c-typeck.c (c_process_expr_stmt): Don't check extra_warnings.\n\t(c_finish_stmt_expr): Don't check extra_warnings.\n\t(emit_side_effect_warnings): The caller is responsible to check\n\twarn_unused_value.\ncp/\n\t* cp-gimplify.c (gimplify_expr_stmt): Don't check extra_warnings.\n\tCheck warn_unused_value just once.\n\nFrom-SVN: r121843", "tree": {"sha": "f1b274125c0152bf665584f0c63ddbf388817016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b274125c0152bf665584f0c63ddbf388817016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f33b1531f5e59660355565e056a6630eafd762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f33b1531f5e59660355565e056a6630eafd762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f33b1531f5e59660355565e056a6630eafd762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f33b1531f5e59660355565e056a6630eafd762/comments", "author": null, "committer": null, "parents": [{"sha": "ed41063ab48a701f02fb4389f538d4264b9fc868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed41063ab48a701f02fb4389f538d4264b9fc868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed41063ab48a701f02fb4389f538d4264b9fc868"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "c21e25fc1e0f8355069364bf4bbb6008a2ed0a63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -1,3 +1,15 @@\n+2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/7651\n+\t* doc/invoke.texi (Wunused-value): Update description.\n+\t(Wextra): Delete item.\n+\t* opts.c (set_Wextra): Don't use the value of Wextra to set the\n+\tvalue of Wunused-value.\n+\t* c-typeck.c (c_process_expr_stmt): Don't check extra_warnings.\n+\t(c_finish_stmt_expr): Don't check extra_warnings.\n+\t(emit_side_effect_warnings): The caller is responsible to check\n+\twarn_unused_value.\n+\t\n 2007-02-11  Roger Sayle  <roger@eyesopen.com>\n \t    Matt Thomas  <matt@3am-software.com>\n "}, {"sha": "013a206015f19a41376b76fcf5837a78baa10ebc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -7353,10 +7353,10 @@ emit_side_effect_warnings (tree expr)\n   else if (!TREE_SIDE_EFFECTS (expr))\n     {\n       if (!VOID_TYPE_P (TREE_TYPE (expr)) && !TREE_NO_WARNING (expr))\n-\twarning (0, \"%Hstatement with no effect\",\n+\twarning (OPT_Wunused_value, \"%Hstatement with no effect\",\n \t\t EXPR_HAS_LOCATION (expr) ? EXPR_LOCUS (expr) : &input_location);\n     }\n-  else if (warn_unused_value)\n+  else\n     warn_if_unused_value (expr, input_location);\n }\n \n@@ -7381,7 +7381,7 @@ c_process_expr_stmt (tree expr)\n      Warnings for statement expressions will be emitted later, once we figure\n      out which is the result.  */\n   if (!STATEMENT_LIST_STMT_EXPR (cur_stmt_list)\n-      && (extra_warnings || warn_unused_value))\n+      && warn_unused_value)\n     emit_side_effect_warnings (expr);\n \n   /* If the expression is not of a type to which we cannot assign a line\n@@ -7497,7 +7497,7 @@ c_finish_stmt_expr (tree body)\n \n       /* If we're supposed to generate side effects warnings, process\n \t all of the statements except the last.  */\n-      if (extra_warnings || warn_unused_value)\n+      if (warn_unused_value)\n \t{\n \t  for (i = tsi_start (last); !tsi_one_before_end_p (i); tsi_next (&i))\n \t    emit_side_effect_warnings (tsi_stmt (i));"}, {"sha": "95bcd26cac74c1ec6085eaacf131320c2917495a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -1,3 +1,9 @@\n+2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/7651\n+\t* cp-gimplify.c (gimplify_expr_stmt): Don't check extra_warnings.\n+\tCheck warn_unused_value just once.\n+\n 2007-02-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/26988"}, {"sha": "6a427c695dba75fb78bae5e7a84db23a95783d50", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -363,16 +363,16 @@ gimplify_expr_stmt (tree *stmt_p)\n      In this case we will not want to emit the gimplified statement.\n      However, we may still want to emit a warning, so we do that before\n      gimplification.  */\n-  if (stmt && (extra_warnings || warn_unused_value))\n+  if (stmt && warn_unused_value)\n     {\n       if (!TREE_SIDE_EFFECTS (stmt))\n \t{\n \t  if (!IS_EMPTY_STMT (stmt)\n \t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n \t      && !TREE_NO_WARNING (stmt))\n-\t    warning (OPT_Wextra, \"statement with no effect\");\n+\t    warning (OPT_Wunused_value, \"statement with no effect\");\n \t}\n-      else if (warn_unused_value)\n+      else\n \twarn_if_unused_value (stmt, input_location);\n     }\n "}, {"sha": "b435781d513b68048354d92ef6a2d547ba2a8013", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -2730,10 +2730,14 @@ To suppress this warning use the @samp{unused} attribute\n \n @item -Wunused-value\n @opindex Wunused-value\n-Warn whenever a statement computes a result that is explicitly not used.\n-This warning is enabled by @option{-Wall}.\n+Warn whenever a statement computes a result that is explicitly not\n+used. To suppress this warning cast the unused expression to\n+@samp{void}. This includes an expression-statement or the left-hand\n+side of a comma expression that contains no side effects. For example,\n+an expression such as @samp{x[i,j]} will cause a warning, while\n+@samp{x[(void)i,j]} will not.\n \n-To suppress this warning cast the expression to @samp{void}.\n+This warning is enabled by @option{-Wall}.\n \n @item -Wunused\n @opindex Wunused\n@@ -2908,13 +2912,6 @@ foo (a)\n @end group\n @end smallexample\n \n-@item\n-An expression-statement or the left-hand side of a comma expression\n-contains no side effects.\n-To suppress the warning, cast the unused expression to void.\n-For example, an expression such as @samp{x[i,j]} will cause a warning,\n-but @samp{x[(void)i,j]} will not.\n-\n @item\n An unsigned value is compared against zero with @samp{<} or @samp{>=}.\n "}, {"sha": "0fa98143a69670dbe923a8defa76f07791abe935", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f33b1531f5e59660355565e056a6630eafd762/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=27f33b1531f5e59660355565e056a6630eafd762", "patch": "@@ -1042,7 +1042,6 @@ static void\n set_Wextra (int setting)\n {\n   extra_warnings = setting;\n-  warn_unused_value = setting;\n   warn_unused_parameter = (setting && maybe_warn_unused_parameter);\n \n   /* We save the value of warn_uninitialized, since if they put"}]}