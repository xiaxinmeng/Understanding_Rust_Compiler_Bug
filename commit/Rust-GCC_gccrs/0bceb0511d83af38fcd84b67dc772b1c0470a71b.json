{"sha": "0bceb0511d83af38fcd84b67dc772b1c0470a71b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjZWIwNTExZDgzYWYzOGZjZDg0YjY3ZGM3NzJiMWMwNDcwYTcxYg==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2003-11-21T00:10:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2003-11-21T00:10:28Z"}, "message": "TextLayout.java: Implement simple layouts using attributed strings and glyph vectors.\n\n2003-11-18  Graydon Hoare  <graydon@redhat.com>\n\n\t* java/awt/font/TextLayout.java: Implement simple layouts\n\tusing attributed strings and glyph vectors.\n\nFrom-SVN: r73780", "tree": {"sha": "8abdfadffb5a2be4d57b200ea788a761570d8330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abdfadffb5a2be4d57b200ea788a761570d8330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bceb0511d83af38fcd84b67dc772b1c0470a71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bceb0511d83af38fcd84b67dc772b1c0470a71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bceb0511d83af38fcd84b67dc772b1c0470a71b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bceb0511d83af38fcd84b67dc772b1c0470a71b/comments", "author": null, "committer": null, "parents": [{"sha": "18e06e1133c1620139cdd44a12525edec5b3ba65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e06e1133c1620139cdd44a12525edec5b3ba65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e06e1133c1620139cdd44a12525edec5b3ba65"}], "stats": {"total": 165, "additions": 157, "deletions": 8}, "files": [{"sha": "463f610d2269d9ecc0c68607e587fb36059a5da3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bceb0511d83af38fcd84b67dc772b1c0470a71b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bceb0511d83af38fcd84b67dc772b1c0470a71b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0bceb0511d83af38fcd84b67dc772b1c0470a71b", "patch": "@@ -1,3 +1,8 @@\n+2003-11-18  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* java/awt/font/TextLayout.java: Implement simple layouts\n+\tusing attributed strings and glyph vectors.\n+\n 2003-11-17  Graydon Hoare  <graydon@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GdkClasspathFontPeerMetrics.java: New file."}, {"sha": "b58b5a583493a2fcf83a9a5f1e819ef17ac38a8f", "filename": "libjava/java/awt/font/TextLayout.java", "status": "modified", "additions": 152, "deletions": 8, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bceb0511d83af38fcd84b67dc772b1c0470a71b/libjava%2Fjava%2Fawt%2Ffont%2FTextLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bceb0511d83af38fcd84b67dc772b1c0470a71b/libjava%2Fjava%2Fawt%2Ffont%2FTextLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Ffont%2FTextLayout.java?ref=0bceb0511d83af38fcd84b67dc772b1c0470a71b", "patch": "@@ -43,8 +43,12 @@\n import java.awt.Shape;\n import java.awt.geom.AffineTransform;\n import java.awt.geom.Rectangle2D;\n+import java.text.CharacterIterator;\n import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n import java.util.Map;\n+import java.awt.font.TextAttribute;\n+\n \n /**\n  * @author Michael Koch\n@@ -67,24 +71,26 @@ public TextHitInfo getStrongCaret (TextHitInfo hit1, TextHitInfo hit2,\n     }\n   }\n \n+  private AttributedString attributedString;\n   private FontRenderContext fontRenderContext;\n   \n   public TextLayout (AttributedCharacterIterator text, FontRenderContext frc)\n-  {\n-    // FIXME\n-    this.fontRenderContext = frc;\n+  {    \n+    attributedString = new AttributedString (text);\n+    fontRenderContext = frc;\n   }\n \n   public TextLayout (String string, Font font, FontRenderContext frc) \n   {\n-    // FIXME\n-    this.fontRenderContext = frc;\n+    attributedString = new AttributedString (string);\n+    attributedString.addAttribute (TextAttribute.FONT, font);\n+    fontRenderContext = frc;\n   }\n \n   public TextLayout (String string, Map attributes, FontRenderContext frc) \n   {\n-    // FIXME\n-    this.fontRenderContext = frc;\n+    attributedString = new AttributedString (string, attributes);\n+    fontRenderContext = frc;\n   }\n \n   protected Object clone ()\n@@ -100,9 +106,147 @@ protected Object clone ()\n       }\n   }\n \n+\n+  protected class CharacterIteratorProxy \n+    implements CharacterIterator\n+  {\n+    public CharacterIterator target;\n+    public int begin;\n+    public int limit;\n+    public int index;\n+\n+    public CharacterIteratorProxy (CharacterIterator ci)\n+    {\n+      target = ci;\n+    }\n+\n+    public int getBeginIndex ()\n+    {\n+      return begin;\n+    }\n+\n+    public int getEndIndex ()\n+    {\n+      return limit;\n+    }\n+\n+    public int getIndex ()\n+    {\n+      return index;\n+    }\n+\n+    public char setIndex (int idx) \n+      throws IllegalArgumentException\n+    {\n+      if (idx < begin || idx >= limit)\n+        throw new IllegalArgumentException ();\n+      char ch = target.setIndex (idx);\n+      index = idx;\n+      return ch;\n+    }\n+\n+    public char first ()\n+    {\n+      int save = target.getIndex ();\n+      char ch = target.setIndex (begin);\n+      target.setIndex (save);\n+      return ch;\n+    }\n+\n+    public char last ()\n+    {\n+      if (begin == limit)\n+        return this.first ();\n+\n+      int save = target.getIndex ();\n+      char ch = target.setIndex (limit - 1);\n+      target.setIndex (save);\n+      return ch;\n+    }\n+\n+    public char current ()\n+    {\n+      return target.current();\n+    }\n+\n+    public char next ()\n+    {\n+      if (index >= limit - 1)\n+        return CharacterIterator.DONE;\n+      else\n+        {\n+          index++;\n+          return target.next();\n+        }\n+    }\n+\n+    public char previous ()\n+    {\n+      if (index <= begin)\n+        return CharacterIterator.DONE;\n+      else\n+        {\n+          index--;\n+          return target.previous ();\n+        }\n+    }\n+\n+    public Object clone ()\n+    {\n+      CharacterIteratorProxy cip = new CharacterIteratorProxy (this.target);\n+      cip.begin = this.begin;\n+      cip.limit = this.limit;\n+      cip.index = this.index;\n+      return cip;\n+    }\n+    \n+  }\n+\n+\n   public void draw (Graphics2D g2, float x, float y) \n   {\n-    throw new Error (\"not implemented\");\n+    AttributedCharacterIterator ci = attributedString.getIterator ();\n+    CharacterIteratorProxy proxy = new CharacterIteratorProxy (ci);\n+    Font defFont = g2.getFont ();\n+\n+    /* Note: this implementation currently only interprets FONT text\n+     * attributes. There is a reasonable argument to be made for some\n+     * attributes being interpreted out here, where we have control of the\n+     * Graphics2D and can construct or derive new fonts, and some\n+     * attributes being interpreted by the GlyphVector itself. So far, for\n+     * all attributes except FONT we do neither.\n+     */\n+\n+    for (char c = ci.first ();\n+         c != CharacterIterator.DONE;\n+         c = ci.next ())\n+      {                \n+        proxy.begin = ci.getIndex ();\n+        proxy.limit = ci.getRunLimit(TextAttribute.FONT);\n+        if (proxy.limit <= proxy.begin)\n+          continue;\n+\n+        proxy.index = proxy.begin;\n+\n+        Object fnt = ci.getAttribute(TextAttribute.FONT);\n+        GlyphVector gv;\n+        if (fnt instanceof Font)\n+          gv = ((Font)fnt).createGlyphVector (fontRenderContext, proxy);\n+        else\n+          gv = defFont.createGlyphVector (fontRenderContext, proxy);\n+\n+        g2.drawGlyphVector (gv, x, y);\n+\n+        int n = gv.getNumGlyphs ();\n+        for (int i = 0; i < n; ++i)\n+          {\n+            GlyphMetrics gm = gv.getGlyphMetrics (i);\n+            if (gm.getAdvanceX() == gm.getAdvance ())\n+              x += gm.getAdvanceX ();\n+            else\n+              y += gm.getAdvanceY ();\n+          }\n+      }\n   }\n \n   public boolean equals (Object obj)"}]}