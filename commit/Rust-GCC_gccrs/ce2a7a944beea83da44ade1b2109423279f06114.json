{"sha": "ce2a7a944beea83da44ade1b2109423279f06114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyYTdhOTQ0YmVlYTgzZGE0NGFkZTFiMjEwOTQyMzI3OWYwNjExNA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-06T21:22:39Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-06T21:22:39Z"}, "message": "default_format_denormal_2.f90: New test.\n\n\t* gfortran.dg/default_format_denormal_2.f90: New test.\n\t* gfortran.dg/default_format_2.inc: New test.\n\t* gfortran.dg/default_format_denormal_1.f90: New test.\n\t* gfortran.dg/default_format_1.inc: New test.\n\t* gfortran.dg/default_format_1.f90: Don't test for denormalized\n\tnumbers.\n\t* gfortran.dg/default_format_2.f90: Don't test for denormalized\n\tnumbers.\n\nFrom-SVN: r129057", "tree": {"sha": "706bb1c09c1b22e4783ac34740cae14f1fcd694c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706bb1c09c1b22e4783ac34740cae14f1fcd694c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2a7a944beea83da44ade1b2109423279f06114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2a7a944beea83da44ade1b2109423279f06114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2a7a944beea83da44ade1b2109423279f06114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2a7a944beea83da44ade1b2109423279f06114/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f09ef38b898ddd79ac5627e0916e2ea8cdf90dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f09ef38b898ddd79ac5627e0916e2ea8cdf90dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f09ef38b898ddd79ac5627e0916e2ea8cdf90dd"}], "stats": {"total": 303, "additions": 177, "deletions": 126}, "files": [{"sha": "68b2349168429c747b1818a58ad8f01de5ccdace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -1,3 +1,14 @@\n+2007-10-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/default_format_denormal_2.f90: New test.\n+\t* gfortran.dg/default_format_2.inc: New test.\n+\t* gfortran.dg/default_format_denormal_1.f90: New test.\n+\t* gfortran.dg/default_format_1.inc: New test.\n+\t* gfortran.dg/default_format_1.f90: Don't test for denormalized\n+\tnumbers.\n+\t* gfortran.dg/default_format_2.f90: Don't test for denormalized\n+\tnumbers.\n+\n 2007-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/namelist_15.f90: Revise test."}, {"sha": "b8dd0726d9efd30917bce5e1d6cbbf1afb2e89f9", "filename": "gcc/testsuite/gfortran.dg/default_format_1.f90", "status": "modified", "additions": 6, "deletions": 80, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.f90?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -1,103 +1,29 @@\n-! { dg-do run { xfail *-apple-darwin* } }\n+! { dg-do run }\n ! Test XFAILed on Darwin because the system's printf() lacks\n ! proper support for denormals.\n !\n ! This tests that the default formats for formatted I/O of reals are\n ! wide enough and have enough precision, by checking that values can\n ! be written and read back.\n !\n-module test_default_format\n-  interface test\n-    module procedure test_r4\n-    module procedure test_r8\n-  end interface test\n-\n-  integer, parameter :: count = 200\n-\n-contains\n-  function test_r4 (start, towards) result (res)\n-    integer, parameter :: k = 4\n-    integer, intent(in) :: towards\n-    real(k), intent(in) :: start\n-\n-    integer :: res, i\n-    real(k) :: x, y\n-    character(len=100) :: s\n-\n-    res = 0\n-\n-    if (towards >= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,huge(x))\n-      end do\n-    end if\n-\n-    if (towards <= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,-huge(x))\n-      end do\n-    end if\n-  end function test_r4\n-\n-  function test_r8 (start, towards) result (res)\n-    integer, parameter :: k = 8\n-    integer, intent(in) :: towards\n-    real(k), intent(in) :: start\n-\n-    integer :: res, i\n-    real(k) :: x, y\n-    character(len=100) :: s\n-\n-    res = 0\n-\n-    if (towards >= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,huge(x))\n-      end do\n-    end if\n-\n-    if (towards <= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,-huge(x))\n-      end do\n-    end if\n-  end function test_r8\n-\n-end module test_default_format\n+include \"default_format_1.inc\"\n \n program main\n   use test_default_format\n \n   if (test (1.0_4, 0) /= 0) call abort\n   if (test (0.0_4, 0) /= 0) call abort\n-  if (test (tiny(0.0_4), 0) /= 0) call abort\n-  if (test (-tiny(0.0_4), 0) /= 0) call abort\n+  if (test (tiny(0.0_4), 1) /= 0) call abort\n+  if (test (-tiny(0.0_4), -1) /= 0) call abort\n   if (test (huge(0.0_4), -1) /= 0) call abort\n   if (test (-huge(0.0_4), 1) /= 0) call abort\n \n   if (test (1.0_8, 0) /= 0) call abort\n   if (test (0.0_8, 0) /= 0) call abort\n-  if (test (tiny(0.0_8), 0) /= 0) call abort\n-  if (test (-tiny(0.0_8), 0) /= 0) call abort\n+  if (test (tiny(0.0_8), 1) /= 0) call abort\n+  if (test (-tiny(0.0_8), -1) /= 0) call abort\n   if (test (huge(0.0_8), -1) /= 0) call abort\n   if (test (-huge(0.0_8), 1) /= 0) call abort\n-\n end program main\n !\n ! { dg-final { cleanup-modules \"test_default_format\" } }"}, {"sha": "e5d711cf015f64ffbd5d58c6ffe3c834a625b356", "filename": "gcc/testsuite/gfortran.dg/default_format_1.inc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_1.inc?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -0,0 +1,74 @@\n+module test_default_format\n+  interface test\n+    module procedure test_r4\n+    module procedure test_r8\n+  end interface test\n+\n+  integer, parameter :: count = 200\n+\n+contains\n+  function test_r4 (start, towards) result (res)\n+    integer, parameter :: k = 4\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_r4\n+\n+  function test_r8 (start, towards) result (res)\n+    integer, parameter :: k = 8\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_r8\n+\n+end module test_default_format"}, {"sha": "ab4feeeee15ca101bafe1804ae0b3bd53ebdb0ee", "filename": "gcc/testsuite/gfortran.dg/default_format_2.f90", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.f90?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -7,60 +7,17 @@\n ! wide enough and have enough precision, by checking that values can\n ! be written and read back.\n !\n-module test_default_format\n-  interface test\n-    module procedure test_rl\n-  end interface test\n-\n-  integer, parameter :: kl = selected_real_kind (precision (0.0_8) + 1)\n-  integer, parameter :: count = 200\n-\n-contains\n-\n-  function test_rl (start, towards) result (res)\n-    integer, parameter :: k = kl\n-    integer, intent(in) :: towards\n-    real(k), intent(in) :: start\n-\n-    integer :: res, i\n-    real(k) :: x, y\n-    character(len=100) :: s\n-\n-    res = 0\n-\n-    if (towards >= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,huge(x))\n-      end do\n-    end if\n-\n-    if (towards <= 0) then\n-      x = start\n-      do i = 0, count\n-        write (s,*) x\n-        read (s,*) y\n-        if (y /= x) res = res + 1\n-        x = nearest(x,-huge(x))\n-      end do\n-    end if\n-  end function test_rl\n-\n-end module test_default_format\n+include \"default_format_2.inc\"\n \n program main\n   use test_default_format\n \n   if (test (1.0_kl, 0) /= 0) call abort\n   if (test (0.0_kl, 0) /= 0) call abort\n-  if (test (tiny(0.0_kl), 0) /= 0) call abort\n-  if (test (-tiny(0.0_kl), 0) /= 0) call abort\n+  if (test (tiny(0.0_kl), 1) /= 0) call abort\n+  if (test (-tiny(0.0_kl), -1) /= 0) call abort\n   if (test (huge(0.0_kl), -1) /= 0) call abort\n   if (test (-huge(0.0_kl), 1) /= 0) call abort\n-\n end program main\n !\n ! { dg-final { cleanup-modules \"test_default_format\" } }"}, {"sha": "7306f0706e384e616452881b19579407db5edbc8", "filename": "gcc/testsuite/gfortran.dg/default_format_2.inc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_2.inc?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -0,0 +1,43 @@\n+module test_default_format\n+  interface test\n+    module procedure test_rl\n+  end interface test\n+\n+  integer, parameter :: kl = selected_real_kind (precision (0.0_8) + 1)\n+  integer, parameter :: count = 200\n+\n+contains\n+\n+  function test_rl (start, towards) result (res)\n+    integer, parameter :: k = kl\n+    integer, intent(in) :: towards\n+    real(k), intent(in) :: start\n+\n+    integer :: res, i\n+    real(k) :: x, y\n+    character(len=100) :: s\n+\n+    res = 0\n+\n+    if (towards >= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,huge(x))\n+      end do\n+    end if\n+\n+    if (towards <= 0) then\n+      x = start\n+      do i = 0, count\n+        write (s,*) x\n+        read (s,*) y\n+        if (y /= x) res = res + 1\n+        x = nearest(x,-huge(x))\n+      end do\n+    end if\n+  end function test_rl\n+\n+end module test_default_format"}, {"sha": "5213b2ef7290c8fe6bc7232fd5abcf9f83873827", "filename": "gcc/testsuite/gfortran.dg/default_format_denormal_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_1.f90?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run { xfail *-apple-darwin* } }\n+! Test XFAILed on these platforms because the system's printf() lacks\n+! proper support for denormals.\n+!\n+! This tests that the default formats for formatted I/O of reals are\n+! wide enough and have enough precision, by checking that values can\n+! be written and read back.\n+!\n+include \"default_format_1.inc\"\n+\n+program main\n+  use test_default_format\n+\n+  if (test (tiny(0.0_4), -1) /= 0) call abort\n+  if (test (-tiny(0.0_4), 1) /= 0) call abort\n+\n+  if (test (tiny(0.0_8), -1) /= 0) call abort\n+  if (test (-tiny(0.0_8), 1) /= 0) call abort\n+end program main\n+!\n+! { dg-final { cleanup-modules \"test_default_format\" } }"}, {"sha": "93b5d93489c40471d8b5ddaa1d3202734c8c6d03", "filename": "gcc/testsuite/gfortran.dg/default_format_denormal_2.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2a7a944beea83da44ade1b2109423279f06114/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefault_format_denormal_2.f90?ref=ce2a7a944beea83da44ade1b2109423279f06114", "patch": "@@ -0,0 +1,19 @@\n+! { dg-require-effective-target fortran_large_real }\n+! { dg-do run { xfail powerpc*-apple-darwin* } }\n+! Test XFAILed on these platforms because the system's printf() lacks\n+! proper support for denormalized long doubles.\n+!\n+! This tests that the default formats for formatted I/O of reals are\n+! wide enough and have enough precision, by checking that values can\n+! be written and read back.\n+!\n+include \"default_format_2.inc\"\n+\n+program main\n+  use test_default_format\n+\n+  if (test (tiny(0.0_kl), -1) /= 0) call abort\n+  if (test (-tiny(0.0_kl), 1) /= 0) call abort\n+end program main\n+!\n+! { dg-final { cleanup-modules \"test_default_format\" } }"}]}