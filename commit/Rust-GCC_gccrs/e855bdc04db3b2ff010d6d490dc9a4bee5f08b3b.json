{"sha": "e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1NWJkYzA0ZGIzYjJmZjAxMGQ2ZDQ5MGRjOWE0YmVlNWYwOGIzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-06-30T14:52:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-06-30T14:52:24Z"}, "message": "re PR target/81225 (ICE with -mavx512ifma -O3 -ffloat-store)\n\n\tPR target/81225\n\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): For\n\tV8FI, V16FI and VI8F_256 iterators, use <store_mask_predicate> instead\n\tof nonimmediate_operand and <store_mask_constraint> instead of m for\n\tthe input operand.  For V8FI iterator, always split if input is a MEM.\n\tFor V16FI and V8SF_256 iterators, don't test if both operands are MEM\n\tif <mask_applied>.  For VI4F_256 iterator, use <store_mask_predicate>\n\tinstead of register_operand and <store_mask_constraint> instead of v for\n        the input operand.  Make sure both operands aren't MEMs for if not\n\t<mask_applied>.\n\n\t* gcc.target/i386/pr81225.c: New test.\n\nFrom-SVN: r249844", "tree": {"sha": "3a4f3d77102574602514a7b66719d9f2db480ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4f3d77102574602514a7b66719d9f2db480ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe32bb1b5bd2973305a206a29ed4c7c8749d98c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe32bb1b5bd2973305a206a29ed4c7c8749d98c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe32bb1b5bd2973305a206a29ed4c7c8749d98c5"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "be0b4bc98de5bbb7ca47ee14ae20fc10f314c87f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "patch": "@@ -1,3 +1,16 @@\n+2017-06-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/81225\n+\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): For\n+\tV8FI, V16FI and VI8F_256 iterators, use <store_mask_predicate> instead\n+\tof nonimmediate_operand and <store_mask_constraint> instead of m for\n+\tthe input operand.  For V8FI iterator, always split if input is a MEM.\n+\tFor V16FI and V8SF_256 iterators, don't test if both operands are MEM\n+\tif <mask_applied>.  For VI4F_256 iterator, use <store_mask_predicate>\n+\tinstead of register_operand and <store_mask_constraint> instead of v for\n+        the input operand.  Make sure both operands aren't MEMs for if not\n+\t<mask_applied>.\n+\n 2017-06-30  Sylvestre Ledru  <sylvestre@debian.org>\n \n \t* lto-wrapper.c (copy_file) Close both file descriptors before"}, {"sha": "5cf6c928bfb89593b5b5988aeb29c2ebdc49ea0f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "patch": "@@ -7359,13 +7359,13 @@\n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=<store_mask_constraint>,v\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:V8FI 1 \"nonimmediate_operand\" \"v,m\")\n+\t  (match_operand:V8FI 1 \"<store_mask_predicate>\" \"v,<store_mask_constraint>\")\n \t  (parallel [(const_int 0) (const_int 1)\n             (const_int 2) (const_int 3)])))]\n   \"TARGET_AVX512F\n    && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n-  if (<mask_applied> || !TARGET_AVX512VL)\n+  if (<mask_applied> || (!TARGET_AVX512VL && !MEM_P (operands[1])))\n     return \"vextract<shuffletype>64x4\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n   else\n     return \"#\";\n@@ -7515,14 +7515,15 @@\n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:V16FI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (match_operand:V16FI 1 \"<store_mask_predicate>\"\n+\t\t\t\t \"<store_mask_constraint>,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX512F\n    && <mask_mode512bit_condition>\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+   && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>)\n     return \"vextract<shuffletype>32x8\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n@@ -7546,11 +7547,12 @@\n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:VI8F_256 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (match_operand:VI8F_256 1 \"<store_mask_predicate>\"\n+\t\t\t\t    \"<store_mask_constraint>,v\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_AVX\n    && <mask_avx512vl_condition> && <mask_avx512dq_condition>\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+   && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>)\n     return \"vextract<shuffletype>64x2\\t{$0x0, %1, %0%{%3%}|%0%{%3%}, %1, 0x0}\";\n@@ -7610,12 +7612,16 @@\n   \"operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\")\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=<store_mask_constraint>\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\"\n+\t\t\t\t\t  \"=<store_mask_constraint>,v\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:VI4F_256 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI4F_256 1 \"<store_mask_predicate>\"\n+\t\t\t\t    \"v,<store_mask_constraint>\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_AVX && <mask_avx512vl_condition> && <mask_avx512dq_condition>\"\n+  \"TARGET_AVX\n+   && <mask_avx512vl_condition> && <mask_avx512dq_condition>\n+   && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>)\n     return \"vextract<shuffletype>32x4\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";"}, {"sha": "f42ea73f704449461725249b239d47a25ab8bb17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "patch": "@@ -1,3 +1,8 @@\n+2017-06-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/81225\n+\t* gcc.target/i386/pr81225.c: New test.\n+\n 2017-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/concepts/memfun-err.C: Adjust diagnostics."}, {"sha": "db95e941c14a4cd74cff01bd3feca7b09028ad9d", "filename": "gcc/testsuite/gcc.target/i386/pr81225.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81225.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81225.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81225.c?ref=e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/81225 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512ifma -O3 -ffloat-store\" } */\n+\n+long a[24];\n+float b[4], c[24];\n+int d;\n+\n+void\n+foo ()\n+{\n+  for (d = 0; d < 24; d++)\n+    c[d] = (float) d ? : b[a[d]];\n+}"}]}