{"sha": "131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxNzgwYWMwOGE4ZGZjMWI5YzE0YTlkNWMzODU3NWZjYzM0YjIwNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-30T08:57:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:57:11Z"}, "message": "[Ada] Refine logic to set Needs_Activation_Record on subprogram types\n\n2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Access_Subprogram_Declaration): The flag\n\tNeeds_Activation_Record is only needed on a subprogram type, not on a\n\tpointer to such.\n\t* sem_res.adb (Resolve_Selected_Component): If the context type and the\n\tcomponent type are anonymous access to subprograms, use the component\n\ttype to obtain the proper value of Needs_Activation_Record flag for the\n\texpression.\n\nFrom-SVN: r260932", "tree": {"sha": "03135074ed1d7327cd5b9f8fa522268ee535798c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03135074ed1d7327cd5b9f8fa522268ee535798c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df8aa2b7e18670c97076083ea292a0a7b2d08263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8aa2b7e18670c97076083ea292a0a7b2d08263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8aa2b7e18670c97076083ea292a0a7b2d08263"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "964d63d369fb051ab5e273536286fb4d77f1d007", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "patch": "@@ -1,3 +1,13 @@\n+2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): The flag\n+\tNeeds_Activation_Record is only needed on a subprogram type, not on a\n+\tpointer to such.\n+\t* sem_res.adb (Resolve_Selected_Component): If the context type and the\n+\tcomponent type are anonymous access to subprograms, use the component\n+\ttype to obtain the proper value of Needs_Activation_Record flag for the\n+\texpression.\n+\n 2018-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Add"}, {"sha": "3bb406da68a1fb6cdadaed2cbb51533f87995b65", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "patch": "@@ -1307,11 +1307,9 @@ package body Sem_Ch3 is\n \n       --  If the access_to_subprogram is not declared at the library level,\n       --  it can only point to subprograms that are at the same or deeper\n-      --  accessibility level. All such might require an activation record\n-      --  when compiling for C.\n+      --  accessibility level. The corresponding subprogram type might\n+      --  require an activation record when compiling for C.\n \n-      Set_Needs_Activation_Record  (T_Name,\n-                                      not Is_Library_Level_Entity (T_Name));\n       Set_Needs_Activation_Record  (Desig_Type,\n                                       not Is_Library_Level_Entity (T_Name));\n "}, {"sha": "ca54ffc5744692b4388e5bc41f327dd3858a5337", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131780ac08a8dfc1b9c14a9d5c38575fcc34b205/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "patch": "@@ -10118,6 +10118,17 @@ package body Sem_Res is\n          Set_Etype (N, Typ);\n          Set_Entity_With_Checks (S, Comp1);\n \n+         --  The type of the context and that of the component are\n+         --  compatible and in general identical, but if they are anonymous\n+         --  access_to_subprogram types the relevwnt type is that of the\n+         --  component. Thid matters in Unnest_Subprograms mode, where the\n+         --  relevant context is the one in which the type is declared. not\n+         --  the point of use. this determines what activation record to use.\n+\n+         if Ekind (Typ) = E_Anonymous_Access_Subprogram_Type then\n+            Set_Etype (N, Etype (Comp1));\n+         end if;\n+\n       else\n          --  Resolve prefix with its type\n "}]}