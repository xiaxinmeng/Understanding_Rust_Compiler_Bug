{"sha": "1d0275e2bba963ca0292c258c62a6a221b2e77ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwMjc1ZTJiYmE5NjNjYTAyOTJjMjU4YzYyYTZhMjIxYjJlNzdjYQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-28T04:42:04Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-28T04:42:04Z"}, "message": "add default for PCC_BITFIELD_TYPE_MATTERS\n\ngcc/ChangeLog:\n\n2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* defaults.h (PCC_BITFIELD_TYPE_MATTERS): Add default definition\n\tto false.\n\t* dwarf2out.c (field_byte_offset): REmove check if\n\tPCC_BITFIELD_TYPE_MATTERS is defined.\n\t* stor-layout.c (layout_decl): Likewise.\n\t(update_alignment_for_field): Likewise.\n\t(place_field): Likewise.\n\ngcc/cp/ChangeLog:\n\n2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* class.c (layout_class_type): Remove check if\n\tPCC_BITFIELD_TYPE_MATTERS is defined.\n\nFrom-SVN: r222503", "tree": {"sha": "43b9bc0511433ff107c5a485453b674a883571cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b9bc0511433ff107c5a485453b674a883571cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d0275e2bba963ca0292c258c62a6a221b2e77ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0275e2bba963ca0292c258c62a6a221b2e77ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0275e2bba963ca0292c258c62a6a221b2e77ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0275e2bba963ca0292c258c62a6a221b2e77ca/comments", "author": null, "committer": null, "parents": [{"sha": "aedf2c028364c9e97a8480cff1a646feb5a21a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedf2c028364c9e97a8480cff1a646feb5a21a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedf2c028364c9e97a8480cff1a646feb5a21a63"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "72c753d24e480d663790d91ed4e8b14f8867289b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -1,3 +1,13 @@\n+2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* defaults.h (PCC_BITFIELD_TYPE_MATTERS): Add default definition\n+\tto false.\n+\t* dwarf2out.c (field_byte_offset): REmove check if\n+\tPCC_BITFIELD_TYPE_MATTERS is defined.\n+\t* stor-layout.c (layout_decl): Likewise.\n+\t(update_alignment_for_field): Likewise.\n+\t(place_field): Likewise.\n+\n 2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (HARD_REGNO_RENAME_OK): Add default definition to"}, {"sha": "3f91187aa97f1e397cff82143af3c45dbc28f271", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -1,3 +1,8 @@\n+2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* class.c (layout_class_type): Remove check if\n+\tPCC_BITFIELD_TYPE_MATTERS is defined.\n+\n 2015-04-27  Jim Wilson  <jim.wilson@linaro.org>\n \n \t* Make-lang.in (c++.mostlyclean): Remove xg++, g++-cross, and cc1plus."}, {"sha": "be5f5c22fff48941111fd09333c66a7a319a030d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -6258,7 +6258,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t\tpadding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n \t\t\t\t      TYPE_SIZE (integer_type));\n \t    }\n-#ifdef PCC_BITFIELD_TYPE_MATTERS\n+\n \t  /* An unnamed bitfield does not normally affect the\n \t     alignment of the containing class on a target where\n \t     PCC_BITFIELD_TYPE_MATTERS.  But, the C++ ABI does not\n@@ -6270,7 +6270,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t      was_unnamed_p = true;\n \t      DECL_NAME (field) = make_anon_name ();\n \t    }\n-#endif\n+\n \t  DECL_SIZE (field) = TYPE_SIZE (integer_type);\n \t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n \t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);"}, {"sha": "0af7a027606cf57e36e725acdd348f410637ca42", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -1201,6 +1201,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DEFAULT_PCC_STRUCT_RETURN 1\n #endif\n \n+#ifndef PCC_BITFIELD_TYPE_MATTERS\n+#define PCC_BITFIELD_TYPE_MATTERS false\n+#endif\n+\n #ifndef INSN_SETS_ARE_DELAYED\n #define INSN_SETS_ARE_DELAYED(INSN) false\n #endif"}, {"sha": "8591cd76f1560d49a03f40ab099baa6e9aad0093", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -15120,7 +15120,6 @@ field_byte_offset (const_tree decl)\n \n   bitpos_int = wi::to_offset (bit_position (decl));\n \n-#ifdef PCC_BITFIELD_TYPE_MATTERS\n   if (PCC_BITFIELD_TYPE_MATTERS)\n     {\n       tree type;\n@@ -15218,7 +15217,6 @@ field_byte_offset (const_tree decl)\n \t}\n     }\n   else\n-#endif /* PCC_BITFIELD_TYPE_MATTERS */\n     object_offset_in_bits = bitpos_int;\n \n   object_offset_in_bytes"}, {"sha": "1d1de997363d9d1a42b903a4ef543914f75e0add", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0275e2bba963ca0292c258c62a6a221b2e77ca/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=1d0275e2bba963ca0292c258c62a6a221b2e77ca", "patch": "@@ -85,10 +85,8 @@ static tree self_referential_size (tree);\n static void finalize_record_size (record_layout_info);\n static void finalize_type_size (tree);\n static void place_union_field (record_layout_info, tree);\n-#if defined (PCC_BITFIELD_TYPE_MATTERS) || defined (BITFIELD_NBYTES_LIMITED)\n static int excess_unit_span (HOST_WIDE_INT, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t     HOST_WIDE_INT, tree);\n-#endif\n extern void debug_rli (record_layout_info);\n \f\n /* Show that REFERENCE_TYPES are internal and should use address_mode.\n@@ -703,11 +701,9 @@ layout_decl (tree decl, unsigned int known_align)\n \t    {\n \t      zero_bitfield = true;\n \t      packed_p = false;\n-#ifdef PCC_BITFIELD_TYPE_MATTERS\n \t      if (PCC_BITFIELD_TYPE_MATTERS)\n \t\tdo_type_align (type, decl);\n \t      else\n-#endif\n \t\t{\n #ifdef EMPTY_FIELD_BOUNDARY\n \t\t  if (EMPTY_FIELD_BOUNDARY > DECL_ALIGN (decl))\n@@ -1071,7 +1067,6 @@ update_alignment_for_field (record_layout_info rli, tree field,\n \t  rli->unpacked_align = MAX (rli->unpacked_align, TYPE_ALIGN (type));\n \t}\n     }\n-#ifdef PCC_BITFIELD_TYPE_MATTERS\n   else if (is_bitfield && PCC_BITFIELD_TYPE_MATTERS)\n     {\n       /* Named bit-fields cause the entire structure to have the\n@@ -1114,7 +1109,6 @@ update_alignment_for_field (record_layout_info rli, tree field,\n \t  user_align |= TYPE_USER_ALIGN (type);\n \t}\n     }\n-#endif\n   else\n     {\n       rli->record_align = MAX (rli->record_align, desired_align);\n@@ -1152,7 +1146,6 @@ place_union_field (record_layout_info rli, tree field)\n \t\t\t       DECL_SIZE_UNIT (field), rli->offset);\n }\n \n-#if defined (PCC_BITFIELD_TYPE_MATTERS) || defined (BITFIELD_NBYTES_LIMITED)\n /* A bitfield of SIZE with a required access alignment of ALIGN is allocated\n    at BYTE_OFFSET / BIT_OFFSET.  Return nonzero if the field would span more\n    units of alignment than the underlying TYPE.  */\n@@ -1168,7 +1161,6 @@ excess_unit_span (HOST_WIDE_INT byte_offset, HOST_WIDE_INT bit_offset,\n   return ((offset + size + align - 1) / align\n \t  > tree_to_uhwi (TYPE_SIZE (type)) / align);\n }\n-#endif\n \n /* RLI contains information about the layout of a RECORD_TYPE.  FIELD\n    is a FIELD_DECL to be added after those fields already present in\n@@ -1295,7 +1287,6 @@ place_field (record_layout_info rli, tree field)\n \n   /* Handle compatibility with PCC.  Note that if the record has any\n      variable-sized fields, we need not worry about compatibility.  */\n-#ifdef PCC_BITFIELD_TYPE_MATTERS\n   if (PCC_BITFIELD_TYPE_MATTERS\n       && ! targetm.ms_bitfield_layout_p (rli->t)\n       && TREE_CODE (field) == FIELD_DECL\n@@ -1340,7 +1331,6 @@ place_field (record_layout_info rli, tree field)\n       if (! DECL_PACKED (field))\n \tTYPE_USER_ALIGN (rli->t) |= TYPE_USER_ALIGN (type);\n     }\n-#endif\n \n #ifdef BITFIELD_NBYTES_LIMITED\n   if (BITFIELD_NBYTES_LIMITED"}]}