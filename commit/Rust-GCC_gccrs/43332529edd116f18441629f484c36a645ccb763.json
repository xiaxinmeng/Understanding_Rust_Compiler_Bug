{"sha": "43332529edd116f18441629f484c36a645ccb763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzMzI1MjllZGQxMTZmMTg0NDE2MjlmNDg0YzM2YTY0NWNjYjc2Mw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-03-13T14:29:42Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-03-13T14:29:42Z"}, "message": "expr.c (expand_assignment): Handle misaligned scalar writes to memory through top-level MEM_REFs by calling...\n\n2012-03-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* expr.c (expand_assignment): Handle misaligned scalar writes to\n\tmemory through top-level MEM_REFs by calling store_bit_field.\n\n\t* testsuite/gcc.dg/misaligned-expand-2.c: New test.\n\nFrom-SVN: r185336", "tree": {"sha": "af2735f2d09cbd822cac8b47433a66135561bf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2735f2d09cbd822cac8b47433a66135561bf9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43332529edd116f18441629f484c36a645ccb763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43332529edd116f18441629f484c36a645ccb763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43332529edd116f18441629f484c36a645ccb763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43332529edd116f18441629f484c36a645ccb763/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3985be599e422e875867c8f64dd0eb8b39d77f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3985be599e422e875867c8f64dd0eb8b39d77f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3985be599e422e875867c8f64dd0eb8b39d77f63"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "19bd4ed062c6023caddab254f03b6fff85e58203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43332529edd116f18441629f484c36a645ccb763/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43332529edd116f18441629f484c36a645ccb763/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43332529edd116f18441629f484c36a645ccb763", "patch": "@@ -1,3 +1,8 @@\n+2012-03-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* expr.c (expand_assignment): Handle misaligned scalar writes to\n+\tmemory through top-level MEM_REFs by calling store_bit_field.\n+\n 2012-03-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52134"}, {"sha": "59b76a4b5f5cc2811e00cfd280cf4b2c2644e7e8", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43332529edd116f18441629f484c36a645ccb763/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43332529edd116f18441629f484c36a645ccb763/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=43332529edd116f18441629f484c36a645ccb763", "patch": "@@ -4593,10 +4593,12 @@ expand_assignment (tree to, tree from, bool nontemporal)\n   if ((TREE_CODE (to) == MEM_REF\n        || TREE_CODE (to) == TARGET_MEM_REF)\n       && mode != BLKmode\n+      && !mem_ref_refers_to_non_mem_p (to)\n       && ((align = get_object_or_type_alignment (to))\n \t  < GET_MODE_ALIGNMENT (mode))\n-      && ((icode = optab_handler (movmisalign_optab, mode))\n-\t  != CODE_FOR_nothing))\n+      && (((icode = optab_handler (movmisalign_optab, mode))\n+\t   != CODE_FOR_nothing)\n+\t  || SLOW_UNALIGNED_ACCESS (mode, align)))\n     {\n       addr_space_t as\n \t= TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (to, 0))));\n@@ -4639,11 +4641,17 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       if (TREE_THIS_VOLATILE (to))\n \tMEM_VOLATILE_P (mem) = 1;\n \n-      create_fixed_operand (&ops[0], mem);\n-      create_input_operand (&ops[1], reg, mode);\n-      /* The movmisalign<mode> pattern cannot fail, else the assignment would\n-\t silently be omitted.  */\n-      expand_insn (icode, 2, ops);\n+      if (icode != CODE_FOR_nothing)\n+\t{\n+\t  create_fixed_operand (&ops[0], mem);\n+\t  create_input_operand (&ops[1], reg, mode);\n+\t  /* The movmisalign<mode> pattern cannot fail, else the assignment\n+\t     would silently be omitted.  */\n+\t  expand_insn (icode, 2, ops);\n+\t}\n+      else\n+\tstore_bit_field (mem, GET_MODE_BITSIZE (mode),\n+\t\t\t 0, 0, 0, mode, reg);\n       return;\n     }\n "}, {"sha": "96b775ea7468e6aaae0cc507716d2fbb90b006d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43332529edd116f18441629f484c36a645ccb763/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43332529edd116f18441629f484c36a645ccb763/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43332529edd116f18441629f484c36a645ccb763", "patch": "@@ -1,3 +1,7 @@\n+2012-03-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/misaligned-expand-2.c: New test.\n+\n 2012-03-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52134"}, {"sha": "f3ae97f69e854ca08d9487d88c6b1250ec827642", "filename": "gcc/testsuite/gcc.dg/misaligned-expand-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43332529edd116f18441629f484c36a645ccb763/gcc%2Ftestsuite%2Fgcc.dg%2Fmisaligned-expand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43332529edd116f18441629f484c36a645ccb763/gcc%2Ftestsuite%2Fgcc.dg%2Fmisaligned-expand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmisaligned-expand-2.c?ref=43332529edd116f18441629f484c36a645ccb763", "patch": "@@ -0,0 +1,42 @@\n+/* Test that expand can generate correct stores to misaligned data even on\n+   strict alignment platforms.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+\n+extern void abort ();\n+\n+typedef unsigned int myint __attribute__((aligned(1)));\n+\n+void\n+foo (myint *p, unsigned int i)\n+{\n+  *p = i;\n+}\n+\n+#define cst 0xdeadbeef\n+#define NUM 8\n+\n+struct blah\n+{\n+  char c;\n+  myint i[NUM];\n+};\n+\n+struct blah g;\n+\n+#define cst 0xdeadbeef\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int k;\n+\n+  for (k = 0; k < NUM; k++)\n+    {\n+      foo (&g.i[k], cst);\n+      if (g.i[k] != cst)\n+\tabort ();\n+    }\n+  return 0;\n+}"}]}