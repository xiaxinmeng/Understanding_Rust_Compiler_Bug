{"sha": "abf47511f57721e791c48852c01bb32d0689525f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJmNDc1MTFmNTc3MjFlNzkxYzQ4ODUyYzAxYmIzMmQwNjg5NTI1Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T12:48:15Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T12:48:15Z"}, "message": "[AArch64 array_mode 6/8] Remove V_TWO_ELEM, again using BLKmode + set_mem_size.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld2r<mode>):\n\tChange operand mode from <V_TWO_ELEM> to BLK.\n\t(aarch64_vec_load_lanesoi_lane<mode>): Likewise.\n\t(aarch64_vec_store_lanesoi_lane<mode): Likewise\n\t(aarch64_ld2r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n\t(aarch64_ld2_lane<mode>): Likewise.\n\t(aarch64_st2_lane<VQ:mode>): Likewise.\n\t* config/aarch64/iterators.md (V_TWO_ELEM): Remove.\n\nFrom-SVN: r227790", "tree": {"sha": "6ff19dd9544108f7c200c53d3cd507370f512eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff19dd9544108f7c200c53d3cd507370f512eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abf47511f57721e791c48852c01bb32d0689525f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf47511f57721e791c48852c01bb32d0689525f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf47511f57721e791c48852c01bb32d0689525f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf47511f57721e791c48852c01bb32d0689525f/comments", "author": null, "committer": null, "parents": [{"sha": "d866f024fd0960e8a3629d18d6168709623efb82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d866f024fd0960e8a3629d18d6168709623efb82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d866f024fd0960e8a3629d18d6168709623efb82"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "c1c2c5f16511e03b7412665181ca331842898241", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf47511f57721e791c48852c01bb32d0689525f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf47511f57721e791c48852c01bb32d0689525f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abf47511f57721e791c48852c01bb32d0689525f", "patch": "@@ -1,3 +1,14 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld2r<mode>):\n+\tChange operand mode from <V_TWO_ELEM> to BLK.\n+\t(aarch64_vec_load_lanesoi_lane<mode>): Likewise.\n+\t(aarch64_vec_store_lanesoi_lane<mode): Likewise\n+\t(aarch64_ld2r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n+\t(aarch64_ld2_lane<mode>): Likewise.\n+\t(aarch64_st2_lane<VQ:mode>): Likewise.\n+\t* config/aarch64/iterators.md (V_TWO_ELEM): Remove.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_ld4r<mode>):"}, {"sha": "f239ee74226673fda135f475b1e6448911f2aeda", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf47511f57721e791c48852c01bb32d0689525f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf47511f57721e791c48852c01bb32d0689525f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=abf47511f57721e791c48852c01bb32d0689525f", "patch": "@@ -3928,7 +3928,7 @@\n \n (define_insn \"aarch64_simd_ld2r<mode>\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-       (unspec:OI [(match_operand:<V_TWO_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+       (unspec:OI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n                    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n                   UNSPEC_LD2_DUP))]\n   \"TARGET_SIMD\"\n@@ -3938,7 +3938,7 @@\n \n (define_insn \"aarch64_vec_load_lanesoi_lane<mode>\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(unspec:OI [(match_operand:<V_TWO_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t(unspec:OI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:OI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n \t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n@@ -3982,8 +3982,8 @@\n \n ;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"aarch64_vec_store_lanesoi_lane<mode>\"\n-  [(set (match_operand:<V_TWO_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:<V_TWO_ELEM> [(match_operand:OI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:OI 1 \"register_operand\" \"w\")\n \t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n \t\t   UNSPEC_ST2_LANE))]\n@@ -4387,8 +4387,8 @@\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_TWO_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n \n   emit_insn (gen_aarch64_simd_ld2r<mode> (operands[0], mem));\n   DONE;\n@@ -4607,8 +4607,8 @@\n \t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_TWO_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n \n   emit_insn (gen_aarch64_vec_load_lanesoi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n@@ -4889,8 +4889,8 @@\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_TWO_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 2);\n \n   emit_insn (gen_aarch64_vec_store_lanesoi_lane<mode> (mem,\n \t\t\t\t\t\t       operands[1],"}, {"sha": "aab164ad062c8ec97981364bfff8adf5da4f5ef6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf47511f57721e791c48852c01bb32d0689525f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf47511f57721e791c48852c01bb32d0689525f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=abf47511f57721e791c48852c01bb32d0689525f", "patch": "@@ -594,16 +594,6 @@\n \t\t\t(V2SI \"V16SI\")  (V2SF \"V16SF\")\n \t\t\t(DI   \"V8DI\")  (DF   \"V8DF\")])\n \n-;; Mode of pair of elements for each vector mode, to define transfer\n-;; size for structure lane/dup loads and stores.\n-(define_mode_attr V_TWO_ELEM [(V8QI \"HI\")   (V16QI \"HI\")\n-                              (V4HI \"SI\")   (V8HI \"SI\")\n-                              (V2SI \"V2SI\") (V4SI \"V2SI\")\n-                              (DI \"V2DI\")   (V2DI \"V2DI\")\n-                              (V2SF \"V2SF\") (V4SF \"V2SF\")\n-                              (V4HF \"SF\") (V8HF \"SF\")\n-                              (DF \"V2DI\")   (V2DF \"V2DI\")])\n-\n ;; Mode for atomic operation suffixes\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])"}]}