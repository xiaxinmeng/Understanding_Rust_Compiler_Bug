{"sha": "36bd6eafb6062f1fb92a994538c6ed017ced670b", "node_id": "C_kwDOANBUbNoAKDM2YmQ2ZWFmYjYwNjJmMWZiOTJhOTk0NTM4YzZlZDAxN2NlZDY3MGI", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-06-06T14:35:49Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-06-06T14:35:49Z"}, "message": "arm: reinstate HAVE_GAS_ARM_EXTENDED_ARCH\n\nThe check was removed by accident.\n\ngcc/ChangeLog:\n\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Reinstate HAVE_GAS_ARM_EXTENDED_ARCH test.", "tree": {"sha": "2e9220a142277e26c50899e74f762586737f3f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9220a142277e26c50899e74f762586737f3f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36bd6eafb6062f1fb92a994538c6ed017ced670b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bd6eafb6062f1fb92a994538c6ed017ced670b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36bd6eafb6062f1fb92a994538c6ed017ced670b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bd6eafb6062f1fb92a994538c6ed017ced670b/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df68ed4a3cb0dc6691da6cb34c1d1feb7ba9c9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df68ed4a3cb0dc6691da6cb34c1d1feb7ba9c9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df68ed4a3cb0dc6691da6cb34c1d1feb7ba9c9d4"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "16bb963b45b7a09c6dafca53cf56b788e923901d", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=36bd6eafb6062f1fb92a994538c6ed017ced670b", "patch": "@@ -1331,6 +1331,13 @@\n #endif\n \n \n+/* Define if your Arm assembler permits context-specific feature extensions.\n+   */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_ARM_EXTENDED_ARCH\n+#endif\n+\n+\n /* Define if your assembler supports .balign and .p2align. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN"}, {"sha": "a52574d02b517b47e947a33c905698e03f0c2d07", "filename": "gcc/configure", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=36bd6eafb6062f1fb92a994538c6ed017ced670b", "patch": "@@ -731,10 +731,10 @@ gcc_cv_dsymutil\n gcc_cv_otool\n gcc_cv_readelf\n gcc_cv_objdump\n-ORIGINAL_NM_FOR_TARGET\n-gcc_cv_nm\n ORIGINAL_OBJCOPY_FOR_TARGET\n gcc_cv_objcopy\n+ORIGINAL_NM_FOR_TARGET\n+gcc_cv_nm\n ORIGINAL_LD_GOLD_FOR_TARGET\n ORIGINAL_LD_BFD_FOR_TARGET\n ORIGINAL_LD_FOR_TARGET\n@@ -19676,7 +19676,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19676 \"configure\"\n+#line 19679 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19782,7 +19782,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19782 \"configure\"\n+#line 19785 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -29118,6 +29118,44 @@ $as_echo \"$gcc_cv_as_version, ok\" >&6; }\n     ;;\n esac\n \n+case \"$target\" in\n+  arm*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler for arm accepts context-specific architecture extensions\" >&5\n+$as_echo_n \"checking assembler for assembler for arm accepts context-specific architecture extensions... \" >&6; }\n+if ${gcc_cv_as_arm_option_extensions+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_arm_option_extensions=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text\n+\t.thumb\n+\t.syntax unified\n+\tvmov.f32 s0, s1' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -march=armv8.1-m.main+mve -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_arm_option_extensions=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_arm_option_extensions\" >&5\n+$as_echo \"$gcc_cv_as_arm_option_extensions\" >&6; }\n+if test $gcc_cv_as_arm_option_extensions = yes; then\n+\n+$as_echo \"#define HAVE_GAS_ARM_EXTENDED_ARCH 1\" >>confdefs.h\n+\n+fi\n+\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}, {"sha": "5fe826aa4eb669ca18618fc1be18b4fc9b550543", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bd6eafb6062f1fb92a994538c6ed017ced670b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=36bd6eafb6062f1fb92a994538c6ed017ced670b", "patch": "@@ -5427,6 +5427,19 @@ case \"$target\" in\n     ;;\n esac\n \n+case \"$target\" in\n+  arm*)\n+    gcc_GAS_CHECK_FEATURE([assembler for arm accepts context-specific architecture extensions],\n+      gcc_cv_as_arm_option_extensions,\n+      [-march=armv8.1-m.main+mve],\n+      [.text\n+\t.thumb\n+\t.syntax unified\n+\tvmov.f32 s0, s1],,\n+      [AC_DEFINE(HAVE_GAS_ARM_EXTENDED_ARCH, 1,\n+       [Define if your Arm assembler permits context-specific feature extensions.])])\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}]}