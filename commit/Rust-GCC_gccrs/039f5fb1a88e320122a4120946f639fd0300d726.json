{"sha": "039f5fb1a88e320122a4120946f639fd0300d726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5ZjVmYjFhODhlMzIwMTIyYTQxMjA5NDZmNjM5ZmQwMzAwZDcyNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:49:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:49:59Z"}, "message": "Replace use of __objc_xmalloc and free with objc_malloc and objc_free.\n\nFrom-SVN: r12768", "tree": {"sha": "22793b97c11855251d092a65acd76e061d56964f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22793b97c11855251d092a65acd76e061d56964f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/039f5fb1a88e320122a4120946f639fd0300d726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039f5fb1a88e320122a4120946f639fd0300d726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039f5fb1a88e320122a4120946f639fd0300d726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039f5fb1a88e320122a4120946f639fd0300d726/comments", "author": null, "committer": null, "parents": [{"sha": "df7fbc8cd830ea212f052c089989afb014e3ffe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7fbc8cd830ea212f052c089989afb014e3ffe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7fbc8cd830ea212f052c089989afb014e3ffe3"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "7e40fba750f6b1e80044f48baccf5e2975d8da43", "filename": "gcc/objc/sarray.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsarray.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -63,7 +63,7 @@ sarray_remove_garbage(void)\n \n   while (vp) {\n     np = *vp;\n-    free(vp);\n+    objc_free(vp);\n     vp = np;\n   }\n   \n@@ -80,7 +80,7 @@ sarray_free_garbage(void *vp)\n   objc_mutex_lock(__objc_runtime_mutex);\n   \n   if (__objc_runtime_threads_alive == 1) {\n-    free(vp);\n+    objc_free(vp);\n     if (first_free_data)\n       sarray_remove_garbage();\n   }\n@@ -145,7 +145,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n   if ((*the_index) == array->empty_index) {\n \n     /* The index was previously empty, allocate a new */\n-    new_index = (struct sindex*)__objc_xmalloc(sizeof(struct sindex));\n+    new_index = (struct sindex*)objc_malloc(sizeof(struct sindex));\n     memcpy(new_index, array->empty_index, sizeof(struct sindex));\n     new_index->version.version = array->version.version;\n     *the_index = new_index;                     /* Prepared for install. */\n@@ -156,7 +156,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n \n     /* This index must be lazy copied */\n     struct sindex* old_index = *the_index;\n-    new_index = (struct sindex*)__objc_xmalloc(sizeof(struct sindex));\n+    new_index = (struct sindex*)objc_malloc(sizeof(struct sindex));\n     memcpy( new_index, old_index, sizeof(struct sindex));\n     new_index->version.version = array->version.version;\n     *the_index = new_index;                     /* Prepared for install. */\n@@ -173,7 +173,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n \n     /* The bucket was previously empty (or something like that), */\n     /* allocate a new.  This is the effect of `lazy' allocation */  \n-    new_bucket = (struct sbucket*)__objc_xmalloc(sizeof(struct sbucket));\n+    new_bucket = (struct sbucket*)objc_malloc(sizeof(struct sbucket));\n     memcpy((void *) new_bucket, (const void*)array->empty_bucket, \n \t   sizeof(struct sbucket));\n     new_bucket->version.version = array->version.version;\n@@ -185,7 +185,7 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n \n     /* Perform lazy copy. */\n     struct sbucket* old_bucket = *the_bucket;\n-    new_bucket = (struct sbucket*)__objc_xmalloc(sizeof(struct sbucket));\n+    new_bucket = (struct sbucket*)objc_malloc(sizeof(struct sbucket));\n     memcpy( new_bucket, old_bucket, sizeof(struct sbucket));\n     new_bucket->version.version = array->version.version;\n     *the_bucket = new_bucket;                   /* Prepared for install. */\n@@ -220,16 +220,16 @@ sarray_new (int size, void* default_element)\n   assert(size > 0);\n \n   /* Allocate core array */\n-  arr = (struct sarray*) __objc_xmalloc(sizeof(struct sarray));\n+  arr = (struct sarray*) objc_malloc(sizeof(struct sarray));\n   arr->version.version = 0;\n   \n   /* Initialize members */\n #ifdef OBJC_SPARSE3\n   arr->capacity = num_indices*INDEX_CAPACITY;\n   new_indices = (struct sindex**) \n-    __objc_xmalloc(sizeof(struct sindex*)*num_indices);\n+    objc_malloc(sizeof(struct sindex*)*num_indices);\n \n-  arr->empty_index = (struct sindex*) __objc_xmalloc(sizeof(struct sindex));\n+  arr->empty_index = (struct sindex*) objc_malloc(sizeof(struct sindex));\n   arr->empty_index->version.version = 0;\n   \n   narrays  += 1;\n@@ -239,14 +239,14 @@ sarray_new (int size, void* default_element)\n #else /* OBJC_SPARSE2 */\n   arr->capacity = num_indices*BUCKET_SIZE;\n   new_buckets = (struct sbucket**) \n-    __objc_xmalloc(sizeof(struct sbucket*)*num_indices);\n+    objc_malloc(sizeof(struct sbucket*)*num_indices);\n   \n   narrays  += 1;\n   idxsize  += num_indices;\n \n #endif\n \n-  arr->empty_bucket = (struct sbucket*) __objc_xmalloc(sizeof(struct sbucket));\n+  arr->empty_bucket = (struct sbucket*) objc_malloc(sizeof(struct sbucket));\n   arr->empty_bucket->version.version = 0;\n   \n   nbuckets += 1;\n@@ -337,11 +337,11 @@ sarray_realloc(struct sarray* array, int newsize)\n       /* alloc to force re-read by any concurrent readers. */\n       old_indices = array->indices;\n       new_indices = (struct sindex**)\n-\t__objc_xmalloc((new_max_index+1)*sizeof(struct sindex*));\n+\tobjc_malloc((new_max_index+1)*sizeof(struct sindex*));\n #else /* OBJC_SPARSE2 */\n       old_buckets = array->buckets;\n       new_buckets = (struct sbucket**)\n-\t__objc_xmalloc((new_max_index+1)*sizeof(struct sbucket*));\n+\tobjc_malloc((new_max_index+1)*sizeof(struct sbucket*));\n #endif\n \n       /* copy buckets below old_max_index (they are still valid) */\n@@ -488,7 +488,7 @@ sarray_lazy_copy(struct sarray* oarr)\n #endif\n \n   /* Allocate core array */\n-  arr = (struct sarray*) __objc_xmalloc(sizeof(struct sarray)); /* !!! */\n+  arr = (struct sarray*) objc_malloc(sizeof(struct sarray)); /* !!! */\n   arr->version.version = oarr->version.version + 1;\n #ifdef OBJC_SPARSE3\n   arr->empty_index = oarr->empty_index;\n@@ -502,14 +502,14 @@ sarray_lazy_copy(struct sarray* oarr)\n #ifdef OBJC_SPARSE3\n   /* Copy bucket table */\n   new_indices = (struct sindex**) \n-    __objc_xmalloc(sizeof(struct sindex*)*num_indices);\n+    objc_malloc(sizeof(struct sindex*)*num_indices);\n   memcpy( new_indices,oarr->indices, \n \tsizeof(struct sindex*)*num_indices);\n   arr->indices = new_indices;\n #else \n   /* Copy bucket table */\n   new_buckets = (struct sbucket**) \n-    __objc_xmalloc(sizeof(struct sbucket*)*num_indices);\n+    objc_malloc(sizeof(struct sbucket*)*num_indices);\n   memcpy( new_buckets,oarr->buckets, \n \tsizeof(struct sbucket*)*num_indices);\n   arr->buckets = new_buckets;"}, {"sha": "f3641e905b7e326e8eda9d46d67ee5299b0a99ee", "filename": "gcc/objc/thr-decosf1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-decosf1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-decosf1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-decosf1.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -211,13 +211,13 @@ objc_mutex_allocate(void)\n     _objc_mutex_t mutex;\n     int         err = 0;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n     \n     err = pthread_mutex_init(&mutex->lock, pthread_mutexattr_default);\n     \n     if (err != 0) {                             /* System init failed?      */\n-        free(mutex);                            /* Yes, free local memory.  */\n+        objc_free(mutex);                       /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = (_objc_thread_t) -1;         /* No owner.                */\n@@ -244,7 +244,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n     pthread_mutex_unlock(&mutex->lock);         /* Must unlock system mutex.*/\n     pthread_mutex_destroy(&mutex->lock);        /* Free system mutex.       */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "e1042f0637a5d74c53a8b1db72b4efb8264145e7", "filename": "gcc/objc/thr-irix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-irix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-irix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-irix.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -191,14 +191,14 @@ objc_mutex_allocate(void)\n     _objc_mutex_t       mutex;\n     int                 err = 0;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n     \n     if (!(mutex->lock = usnewlock(__objc_shared_arena_handle)))\n         err = -1;\n     \n     if (err != 0) {                             /* System init failed?      */\n-        free(mutex);                            /* Yes, free local memory.  */\n+        objc_free(mutex);                       /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = NULL;                        /* No owner.                */\n@@ -224,7 +224,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n     \n     usfreelock(mutex->lock, __objc_shared_arena_handle); /* Free IRIX lock. */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "e070413dcf23bef6712454dc31c2aa960284835a", "filename": "gcc/objc/thr-mach.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-mach.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-mach.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-mach.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -250,13 +250,13 @@ objc_mutex_allocate(void)\n     _objc_mutex_t mutex;\n     int         err = 0;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n \n     err = mutex_init(&(mutex->lock));\n     \n     if (err != 0) {                             /* System init failed?      */\n-        free(mutex);                            /* Yes, free local memory.  */\n+        objc_free(mutex);                       /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = (_objc_thread_t) -1;         /* No owner.                */\n@@ -283,7 +283,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n     mutex_unlock(&(mutex->lock));               /* Must unlock system mutex.*/\n     mutex_clear(&(mutex->lock));                /* Free system mutex.       */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "c36cad83505a3283ff310872a39b49920fe0afbf", "filename": "gcc/objc/thr-os2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-os2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-os2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-os2.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -228,7 +228,7 @@ objc_mutex_allocate(void)\n     _objc_mutex_t mutex;\n     int         err = 0;\n \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n \n     if (DosCreateMutexSem (NULL,&(mutex->handle),0L,0) > 0) {\n@@ -259,7 +259,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n \n     DosCloseMutexSem (mutex->handle);\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "efe8bff9ecf3ef8ad66b41d9df338ad3fc148001", "filename": "gcc/objc/thr-posix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-posix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-posix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-posix.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -209,13 +209,13 @@ objc_mutex_allocate(void)\n     _objc_mutex_t mutex;\n     int         err = 0;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n \n     err = pthread_mutex_init(&mutex->lock, NULL);\n     \n     if (err != 0) {                             /* System init failed?      */\n-        free(mutex);                            /* Yes, free local memory.  */\n+        objc_free(mutex);                       /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = NULL;                        /* No owner.                */\n@@ -242,7 +242,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n     pthread_mutex_unlock(&mutex->lock);         /* Must unlock system mutex.*/\n     pthread_mutex_destroy(&mutex->lock);        /* Free system mutex.       */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "112f1131d051ac827f03026c1c9cb0d34e112587", "filename": "gcc/objc/thr-pthreads.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-pthreads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-pthreads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-pthreads.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -183,14 +183,14 @@ objc_mutex_allocate(void)\n {\n   _objc_mutex_t mutex;\n     \n-  if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+  if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n     return NULL;                            /* Abort if malloc failed.  */\n \n   /* Create PCThread mutex */\n   if ( pthread_mutex_init(&(mutex->mutex), NULL) )\n     {\n       /* Failed */\n-      free(mutex);\n+      objc_free(mutex);\n       return NULL;\n     }\n \n@@ -218,7 +218,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n   /* Destroy PCThread mutex */\n   pthread_mutex_destroy(&(mutex->mutex));\n \n-  free(mutex);                                /* Free memory.             */\n+  objc_free(mutex);                           /* Free memory.             */\n   return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "77973d300a065bd273b7b5787753964a97b5fb3c", "filename": "gcc/objc/thr-single.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-single.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-single.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-single.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -142,7 +142,7 @@ objc_mutex_allocate(void)\n {\n     _objc_mutex_t mutex;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n     \n     mutex->owner = NULL;                        /* No owner.                */\n@@ -166,7 +166,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n         return -1;                              /* Yes, abort.              */\n     depth = objc_mutex_lock(mutex);             /* Must have lock.          */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "1a843be1c1279e68f411435337a461b613a101e2", "filename": "gcc/objc/thr-solaris.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-solaris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-solaris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-solaris.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -213,13 +213,13 @@ objc_mutex_allocate(void)\n     struct _objc_mutex *mutex;\n     int         err = 0;\n     \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n     \n     err = mutex_init(&mutex->lock, USYNC_THREAD, 0);\n     \n     if (err != 0) {                             /* System init failed?      */\n-        free(mutex);                            /* Yes, free local memory.  */\n+        objc_free(mutex);                       /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = NULL;                        /* No owner.                */\n@@ -245,7 +245,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n     \n     mutex_destroy(&mutex->lock);                /* System deallocate.       */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "37e9876416df83b18fb62b7194763967649c864b", "filename": "gcc/objc/thr-win32.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-win32.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -220,11 +220,11 @@ objc_mutex_allocate(void)\n     _objc_mutex_t mutex;\n     int         err = 0;\n \n-    if (!(mutex = (_objc_mutex_t)__objc_xmalloc(sizeof(struct _objc_mutex))))\n+    if (!(mutex = (_objc_mutex_t) objc_malloc(sizeof(struct _objc_mutex))))\n         return NULL;                            /* Abort if malloc failed.  */\n \n     if ((mutex->handle = CreateMutex(NULL, 0, NULL)) == NULL) {\n-        free(mutex);                            /* Failed, free memory.     */\n+        objc_free(mutex);                       /* Failed, free memory.     */\n         return NULL;                            /* Abort.                   */\n     }\n     mutex->owner = NULL;                        /* No owner.                */\n@@ -250,7 +250,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n \n     CloseHandle(mutex->handle);\t\t\t/* Close Win32 handle.      */\n     \n-    free(mutex);                                /* Free memory.             */\n+    objc_free(mutex);                           /* Free memory.             */\n     return depth;                               /* Return last depth.       */\n }\n "}, {"sha": "aca0ca06330ba2d5dee8cdff6ff399aadca9612c", "filename": "gcc/objc/thr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039f5fb1a88e320122a4120946f639fd0300d726/gcc%2Fobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr.c?ref=039f5fb1a88e320122a4120946f639fd0300d726", "patch": "@@ -79,7 +79,7 @@ __objc_thread_detach_function(struct __objc_thread_start_state *istate)\n         id      object   = istate->object;\n         id      argument = istate->argument;\n \n-        free(istate);\n+        objc_free(istate);\n \n \t/* Clear out the thread local storage */\n \tobjc_thread_set_data(NULL);\n@@ -117,7 +117,7 @@ objc_thread_detach(SEL selector, id object, id argument)\n   _objc_thread_t        thread_id = NULL;     /* Detached thread id.      */\n \n   if (!(istate = (struct __objc_thread_start_state *)\n-\t__objc_xmalloc(sizeof(*istate))))     /* Can we allocate state?   */\n+\tobjc_malloc(sizeof(*istate))))     /* Can we allocate state?   */\n     return NULL;                              /* No, abort.               */\n \n   istate->selector = selector;                /* Initialize the thread's  */\n@@ -126,7 +126,7 @@ objc_thread_detach(SEL selector, id object, id argument)\n \n   if ((thread_id = objc_thread_create((void *)__objc_thread_detach_function,\n                                       istate)) == NULL) {\n-    free(istate);                           /* Release state if failed.   */\n+    objc_free(istate);                       /* Release state if failed.   */\n     return thread_id;\n   }\n "}]}