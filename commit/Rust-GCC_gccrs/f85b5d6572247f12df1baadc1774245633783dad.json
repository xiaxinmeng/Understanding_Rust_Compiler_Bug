{"sha": "f85b5d6572247f12df1baadc1774245633783dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1YjVkNjU3MjI0N2YxMmRmMWJhYWRjMTc3NDI0NTYzMzc4M2RhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-10-24T11:25:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-10-24T11:25:50Z"}, "message": "sibcall.c (purge_mem_unchanging_flag): New function.\n\n\t* sibcall.c (purge_mem_unchanging_flag): New function.\n\t(optimize_sibling_and_tail_recursive_calls): Call it.\n\n\t* g++.old-deja/g++.other/sibcall1.C: New test.\n\nFrom-SVN: r37033", "tree": {"sha": "037232bf933e48befd4183029b44ff79f9b53a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037232bf933e48befd4183029b44ff79f9b53a1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f85b5d6572247f12df1baadc1774245633783dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85b5d6572247f12df1baadc1774245633783dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85b5d6572247f12df1baadc1774245633783dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85b5d6572247f12df1baadc1774245633783dad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85d0c8b46e8f70ec127031f6bfb9dd1225283cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d0c8b46e8f70ec127031f6bfb9dd1225283cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d0c8b46e8f70ec127031f6bfb9dd1225283cee"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "67586d8a703e47f832705a5899c58ab6f0cca902", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b5d6572247f12df1baadc1774245633783dad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b5d6572247f12df1baadc1774245633783dad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f85b5d6572247f12df1baadc1774245633783dad", "patch": "@@ -1,3 +1,8 @@\n+2000-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sibcall.c (purge_mem_unchanging_flag): New function.\n+\t(optimize_sibling_and_tail_recursive_calls): Call it.\n+\n 2000-10-24  Philipp Thomas  <pthomas@suse.de>\n \n \t* Makefile.in (check-po): New target for doing checks in the po"}, {"sha": "730654ae94694e3aefbaf092fa32b5bc5e50001a", "filename": "gcc/sibcall.c", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=f85b5d6572247f12df1baadc1774245633783dad", "patch": "@@ -41,6 +41,7 @@ static rtx skip_jump_insn\t\tPARAMS ((rtx));\n static int uses_addressof\t\tPARAMS ((rtx));\n static int sequence_uses_addressof\tPARAMS ((rtx));\n static void purge_reg_equiv_notes\tPARAMS ((void));\n+static void purge_mem_unchanging_flag\tPARAMS ((rtx));\n \n /* Examine a CALL_PLACEHOLDER pattern and determine where the call's\n    return value is located.  P_HARD_RETURN receives the hard register\n@@ -362,6 +363,45 @@ purge_reg_equiv_notes ()\n     }\n }\n \n+/* Clear RTX_UNCHANGING_P flag of incoming argument MEMs.  */\n+\n+static void\n+purge_mem_unchanging_flag (x)\n+     rtx x;\n+{\n+  RTX_CODE code;\n+  int i, j;\n+  const char *fmt;\n+\n+  if (x == NULL_RTX)\n+    return;\n+\n+  code = GET_CODE (x);\n+\n+  if (code == MEM)\n+    {\n+      if (RTX_UNCHANGING_P (x)\n+\t  && (XEXP (x, 0) == current_function_internal_arg_pointer\n+\t      || (GET_CODE (XEXP (x, 0)) == PLUS\n+\t\t  && XEXP (XEXP (x, 0), 0) ==\n+\t\t     current_function_internal_arg_pointer\n+\t\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)))\n+\tRTX_UNCHANGING_P (x) = 0;\n+      return;\n+    }\n+\n+  /* Scan all subexpressions. */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n+    {\n+      if (*fmt == 'e')\n+\tpurge_mem_unchanging_flag (XEXP (x, i));\n+      else if (*fmt == 'E')\n+\tfor (j = 0; j < XVECLEN (x, i); j++)\n+\t  purge_mem_unchanging_flag (XVECEXP (x, i, j));\n+    }\n+}\n+\n /* Replace the CALL_PLACEHOLDER with one of its children.  INSN should be\n    the CALL_PLACEHOLDER insn; USE tells which child to use.  */\n \n@@ -593,18 +633,39 @@ optimize_sibling_and_tail_recursive_calls ()\n \t}\n     }\n \n-  /* A sibling call sequence invalidates any REG_EQUIV notes made for\n-     this function's incoming arguments. \n-\n-     At the start of RTL generation we know the only REG_EQUIV notes\n-     in the rtl chain are those for incoming arguments, so we can safely\n-     flush any REG_EQUIV note. \n-\n-     This is (slight) overkill.  We could keep track of the highest argument\n-     we clobber and be more selective in removing notes, but it does not\n-     seem to be worth the effort.  */\n   if (successful_sibling_call)\n-    purge_reg_equiv_notes ();\n+    {\n+      rtx insn;\n+\n+      /* A sibling call sequence invalidates any REG_EQUIV notes made for\n+\t this function's incoming arguments. \n+\n+\t At the start of RTL generation we know the only REG_EQUIV notes\n+\t in the rtl chain are those for incoming arguments, so we can safely\n+\t flush any REG_EQUIV note. \n+\n+\t This is (slight) overkill.  We could keep track of the highest\n+\t argument we clobber and be more selective in removing notes, but it\n+\t does not seem to be worth the effort.  */\n+      purge_reg_equiv_notes ();\n+\n+      /* A sibling call sequence also may invalidate RTX_UNCHANGING_P\n+\t flag of some incoming arguments MEM RTLs, because it can write into\n+\t those slots.  We clear all those bits now.\n+\t \n+\t This is (slight) overkill, we could keep track of which arguments\n+\t we actually write into.  */\n+      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  if (GET_CODE (insn) == NOTE)\n+\t    {\n+\t      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG)\n+\t\tbreak;\n+\t    }\n+\t  else if (INSN_P (insn))\n+\t    purge_mem_unchanging_flag (PATTERN (insn));\n+\t}\n+    }\n \n   /* There may have been NOTE_INSN_BLOCK_{BEGIN,END} notes in the \n      CALL_PLACEHOLDER alternatives that we didn't emit.  Rebuild the"}, {"sha": "ac355b2d191ea1d28bfc2143d922995e93192a7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f85b5d6572247f12df1baadc1774245633783dad", "patch": "@@ -1,3 +1,7 @@\n+2000-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.old-deja/g++.other/sibcall1.C: New test.\n+\n 2000-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/noncompile/init-3.c: New test."}, {"sha": "8add4b8121d170fa0eb5c204c9db9b340159656c", "filename": "gcc/testsuite/g++.old-deja/g++.other/sibcall1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsibcall1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b5d6572247f12df1baadc1774245633783dad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsibcall1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsibcall1.C?ref=f85b5d6572247f12df1baadc1774245633783dad", "patch": "@@ -0,0 +1,13 @@\n+// Special g++ Options: -O2\n+\n+#include <iostream>\n+\n+ostream& foo (char *x, ostream &y)\n+{\n+  return y << \"\" << x;\n+}\n+\n+int main ()\n+{\n+  foo (\"\", cout);\n+}"}]}