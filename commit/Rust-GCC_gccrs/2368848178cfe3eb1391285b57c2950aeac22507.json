{"sha": "2368848178cfe3eb1391285b57c2950aeac22507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2ODg0ODE3OGNmZTNlYjEzOTEyODViNTdjMjk1MGFlYWMyMjUwNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-05T17:42:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-05T17:42:26Z"}, "message": "gthr-single.h: Add in required interface elements as per gthr.h.\n\n\n2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * gthr-single.h: Add in required interface elements as per gthr.h.\n        Add stub types for __gthread_key_t, __gthread_once_t. Add defines\n        for __GTHREAD_ONCE_INIT, __GTHREAD_RECURSIVE_MUTEX_INIT.\n        Generalize UNUSED macro. \n        (__gthread_once): Add.\n        (__gthread_key_create): Add.\n        (__gthread_key_delete): Add.    \n        (__gthread_getspecific): Add.\n        (__gthread_setspecific): Add.\n\nFrom-SVN: r134951", "tree": {"sha": "8a88d4ada2c67fa387d8207d3cb98412c60d5714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a88d4ada2c67fa387d8207d3cb98412c60d5714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2368848178cfe3eb1391285b57c2950aeac22507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2368848178cfe3eb1391285b57c2950aeac22507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2368848178cfe3eb1391285b57c2950aeac22507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2368848178cfe3eb1391285b57c2950aeac22507/comments", "author": null, "committer": null, "parents": [{"sha": "1d3d8fff365549b74d58dde19588759953346920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3d8fff365549b74d58dde19588759953346920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3d8fff365549b74d58dde19588759953346920"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "8f91827189b5b1e7bb076d13c7a6ffb239f0653a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2368848178cfe3eb1391285b57c2950aeac22507/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2368848178cfe3eb1391285b57c2950aeac22507/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2368848178cfe3eb1391285b57c2950aeac22507", "patch": "@@ -1,7 +1,20 @@\n+2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * gthr-single.h: Add in required interface elements as per gthr.h.\n+        Add stub types for __gthread_key_t, __gthread_once_t. Add defines\n+        for __GTHREAD_ONCE_INIT, __GTHREAD_RECURSIVE_MUTEX_INIT.\n+        Generalize UNUSED macro. \n+        (__gthread_once): Add.\n+        (__gthread_key_create): Add.\n+        (__gthread_key_delete): Add.    \n+        (__gthread_getspecific): Add.\n+        (__gthread_setspecific): Add.      \n+\t\n 2008-05-05  Andrew Pinski  <Andrew.Pinski@playstation.sony.com>\n \n-\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): If we have the\n-\tsame size types for the indirect reference on the rhs, then create a VCE.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): If we have\n+\tthe same size types for the indirect reference on the rhs, then\n+\tcreate a VCE.\n \n 2008-05-05  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "66a9dd86c90567e60d5b992a8ef1486e86996d98", "filename": "gcc/gthr-single.h", "status": "modified", "additions": 53, "deletions": 23, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2368848178cfe3eb1391285b57c2950aeac22507/gcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2368848178cfe3eb1391285b57c2950aeac22507/gcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-single.h?ref=2368848178cfe3eb1391285b57c2950aeac22507", "patch": "@@ -1,6 +1,6 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2004 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1999, 2000, 2004, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -31,16 +31,16 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n /* Just provide compatibility for mutex handling.  */\n \n+typedef int __gthread_key_t;\n+typedef int __gthread_once_t;\n typedef int __gthread_mutex_t;\n typedef int __gthread_recursive_mutex_t;\n \n+#define __GTHREAD_ONCE_INIT 0\n #define __GTHREAD_MUTEX_INIT 0\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT 0\n \n-#ifdef __cplusplus\n-#define UNUSED(x)\n-#else\n-#define UNUSED(x) x __attribute__((unused))\n-#endif\n+#define UNUSED __attribute__((unused))\n \n #ifdef _LIBOBJC\n \n@@ -69,15 +69,15 @@ __gthread_objc_close_thread_system (void)\n \n /* Create a new thread of execution.  */\n static inline objc_thread_t\n-__gthread_objc_thread_detach (void (* func)(void *), void * UNUSED(arg))\n+__gthread_objc_thread_detach (void (* func)(void *), void * arg UNUSED)\n {\n   /* No thread support available */\n   return NULL;\n }\n \n /* Set the current thread's priority.  */\n static inline int\n-__gthread_objc_thread_set_priority (int UNUSED(priority))\n+__gthread_objc_thread_set_priority (int priority UNUSED)\n {\n   /* No thread support available */\n   return -1;\n@@ -134,37 +134,37 @@ __gthread_objc_thread_get_data (void)\n \n /* Allocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_allocate (objc_mutex_t UNUSED(mutex))\n+__gthread_objc_mutex_allocate (objc_mutex_t mutex UNUSED)\n {\n   return 0;\n }\n \n /* Deallocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_deallocate (objc_mutex_t UNUSED(mutex))\n+__gthread_objc_mutex_deallocate (objc_mutex_t mutex UNUSED)\n {\n   return 0;\n }\n \n /* Grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_lock (objc_mutex_t UNUSED(mutex))\n+__gthread_objc_mutex_lock (objc_mutex_t mutex UNUSED)\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Try to grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_trylock (objc_mutex_t UNUSED(mutex))\n+__gthread_objc_mutex_trylock (objc_mutex_t mutex UNUSED)\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Unlock the mutex */\n static inline int\n-__gthread_objc_mutex_unlock (objc_mutex_t UNUSED(mutex))\n+__gthread_objc_mutex_unlock (objc_mutex_t mutex UNUSED)\n {\n   return 0;\n }\n@@ -173,36 +173,36 @@ __gthread_objc_mutex_unlock (objc_mutex_t UNUSED(mutex))\n \n /* Allocate a condition.  */\n static inline int\n-__gthread_objc_condition_allocate (objc_condition_t UNUSED(condition))\n+__gthread_objc_condition_allocate (objc_condition_t condition UNUSED)\n {\n   return 0;\n }\n \n /* Deallocate a condition.  */\n static inline int\n-__gthread_objc_condition_deallocate (objc_condition_t UNUSED(condition))\n+__gthread_objc_condition_deallocate (objc_condition_t condition UNUSED)\n {\n   return 0;\n }\n \n /* Wait on the condition */\n static inline int\n-__gthread_objc_condition_wait (objc_condition_t UNUSED(condition),\n-\t\t\t       objc_mutex_t UNUSED(mutex))\n+__gthread_objc_condition_wait (objc_condition_t condition UNUSED,\n+\t\t\t       objc_mutex_t mutex UNUSED)\n {\n   return 0;\n }\n \n /* Wake up all threads waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_broadcast (objc_condition_t UNUSED(condition))\n+__gthread_objc_condition_broadcast (objc_condition_t condition UNUSED)\n {\n   return 0;\n }\n \n /* Wake up one thread waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_signal (objc_condition_t UNUSED(condition))\n+__gthread_objc_condition_signal (objc_condition_t condition UNUSED)\n {\n   return 0;\n }\n@@ -215,26 +215,56 @@ __gthread_active_p (void)\n   return 0;\n }\n \n+static inline int \n+__gthread_once (__gthread_once_t *once UNUSED, void (*func) () UNUSED)\n+{\n+  return 0;\n+}\n+  \n+static inline int UNUSED\n+__gthread_key_create (__gthread_key_t *key UNUSED, void (*func) (void *) UNUSED)\n+{\n+  return 0;\n+}\n+\n+static int UNUSED\n+__gthread_key_delete (__gthread_key_t key UNUSED)\n+{\n+  return 0;\n+}\n+  \n+static inline void *\n+__gthread_getspecific (__gthread_key_t key UNUSED)\n+{\n+  return 0;\n+}\n+\n+static inline int \n+__gthread_setspecific (__gthread_key_t key UNUSED, const void *v UNUSED)\n+{\n+  return 0;\n+}\n+\n static inline int\n-__gthread_mutex_destroy (__gthread_mutex_t * UNUSED(mutex))\n+__gthread_mutex_destroy (__gthread_mutex_t *mutex UNUSED)\n {\n   return 0;\n }\n \n static inline int\n-__gthread_mutex_lock (__gthread_mutex_t * UNUSED(mutex))\n+__gthread_mutex_lock (__gthread_mutex_t *mutex UNUSED)\n {\n   return 0;\n }\n \n static inline int\n-__gthread_mutex_trylock (__gthread_mutex_t * UNUSED(mutex))\n+__gthread_mutex_trylock (__gthread_mutex_t *mutex UNUSED)\n {\n   return 0;\n }\n \n static inline int\n-__gthread_mutex_unlock (__gthread_mutex_t * UNUSED(mutex))\n+__gthread_mutex_unlock (__gthread_mutex_t *mutex UNUSED)\n {\n   return 0;\n }"}]}