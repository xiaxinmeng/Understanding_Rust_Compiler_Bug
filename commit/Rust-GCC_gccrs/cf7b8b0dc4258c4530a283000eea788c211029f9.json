{"sha": "cf7b8b0dc4258c4530a283000eea788c211029f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3YjhiMGRjNDI1OGM0NTMwYTI4MzAwMGVlYTc4OGMyMTEwMjlmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-04-03T22:21:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-03T22:21:12Z"}, "message": "configure.in (HAVE_SPARC_UA_PCREL_HIDDEN): Test whether %r_disp32() works properly with .hidden symbols.\n\n\t* configure.in (HAVE_SPARC_UA_PCREL_HIDDEN): Test whether %r_disp32()\n\tworks properly with .hidden symbols.\n\t* configure: Rebuilt.\n\t* config.in: Rebuilt.\n\t* config/sparc/sparc.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n\tDW_EH_PE_absptr for flag_pic && GLOBAL if %r_disp32() doesn't work\n\tproperly with .hidden symbols.\n\nFrom-SVN: r51816", "tree": {"sha": "091328bb6081469a81cc1ad025cef01558e76c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091328bb6081469a81cc1ad025cef01558e76c9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7b8b0dc4258c4530a283000eea788c211029f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7b8b0dc4258c4530a283000eea788c211029f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7b8b0dc4258c4530a283000eea788c211029f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7b8b0dc4258c4530a283000eea788c211029f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d7013b8ac6b072089612f9bb48461b1cd3df259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7013b8ac6b072089612f9bb48461b1cd3df259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7013b8ac6b072089612f9bb48461b1cd3df259"}], "stats": {"total": 113, "additions": 104, "deletions": 9}, "files": [{"sha": "72e1f0c82dc335c64e51d9c22ae2ad5c52f00ba5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf7b8b0dc4258c4530a283000eea788c211029f9", "patch": "@@ -1,3 +1,13 @@\n+2002-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.in (HAVE_SPARC_UA_PCREL_HIDDEN): Test whether %r_disp32()\n+\tworks properly with .hidden symbols.\n+\t* configure: Rebuilt.\n+\t* config.in: Rebuilt.\n+\t* config/sparc/sparc.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n+\tDW_EH_PE_absptr for flag_pic && GLOBAL if %r_disp32() doesn't work\n+\tproperly with .hidden symbols.\n+\n 2002-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/6102"}, {"sha": "bd43cb84cdba657ee9f53418988a2543a999e5ee", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=cf7b8b0dc4258c4530a283000eea788c211029f9", "patch": "@@ -529,6 +529,9 @@\n /* Define if your assembler and linker support unaligned PC relative relocs. */\n #undef HAVE_AS_SPARC_UA_PCREL\n \n+/* Define if your assembler and linker support unaligned PC relative relocs against hidden symbols. */\n+#undef HAVE_AS_SPARC_UA_PCREL_HIDDEN\n+\n /* Define if the assembler supports 64bit sparc. */\n #undef AS_SPARC64_FLAG\n "}, {"sha": "6a5d1649778d5df7c545be1953b97aa79fa4acbc", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=cf7b8b0dc4258c4530a283000eea788c211029f9", "patch": "@@ -1955,14 +1955,27 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If assembler and linker properly support .uaword %r_disp32(foo),\n    then use PC relative 32-bit relocations instead of absolute relocs\n    for shared libraries.  On sparc64, use pc relative 32-bit relocs even\n-   for binaries, to save memory.  */\n+   for binaries, to save memory.\n+\n+   binutils 2.12 would emit a R_SPARC_DISP32 dynamic relocation if the\n+   symbol %r_disp32() is against was not local, but .hidden.  In that\n+   case, we have to use DW_EH_PE_absptr for pic personality.  */\n #ifdef HAVE_AS_SPARC_UA_PCREL\n+#ifdef HAVE_AS_SPARC_UA_PCREL_HIDDEN\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n   (flag_pic\t\t\t\t\t\t\t\t\\\n    ? (GLOBAL ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4\\\n    : ((TARGET_ARCH64 && ! GLOBAL)\t\t\t\t\t\\\n       ? (DW_EH_PE_pcrel | DW_EH_PE_sdata4)\t\t\t\t\\\n       : DW_EH_PE_absptr))\n+#else\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n+  (flag_pic\t\t\t\t\t\t\t\t\\\n+   ? (GLOBAL ? DW_EH_PE_absptr : (DW_EH_PE_pcrel | DW_EH_PE_sdata4))\t\\\n+   : ((TARGET_ARCH64 && ! GLOBAL)\t\t\t\t\t\\\n+      ? (DW_EH_PE_pcrel | DW_EH_PE_sdata4)\t\t\t\t\\\n+      : DW_EH_PE_absptr))\n+#endif\n \n /* Emit a PC-relative relocation.  */\n #define ASM_OUTPUT_DWARF_PCREL(FILE, SIZE, LABEL)\t\\"}, {"sha": "12709967e3545d1cf4d53fac9021f3e19d655152", "filename": "gcc/configure", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cf7b8b0dc4258c4530a283000eea788c211029f9", "patch": "@@ -7462,10 +7462,9 @@ else\n \tif test x$gcc_cv_as != x -a x$gcc_cv_ld != x; then\n \t    gcc_cv_as_sparc_ua_pcrel=no\n \t    echo \".text; foo: nop; .data; .align 4; .byte 0; .uaword %r_disp32(foo)\" > conftest.s\n-\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1; then\n-\t\tif $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n-\t\t    gcc_cv_as_sparc_ua_pcrel=yes\n-\t\tfi\n+\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t       && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n+\t\tgcc_cv_as_sparc_ua_pcrel=yes\n \t    fi\n \t    rm -f conftest.s conftest.o conftest\n \tfi\n@@ -7480,6 +7479,46 @@ EOF\n \n     fi\n \n+    echo $ac_n \"checking assembler and linker support unaligned pc related relocs against hidden symbols\"\"... $ac_c\" 1>&6\n+echo \"configure:7430: checking assembler and linker support unaligned pc related relocs against hidden symbols\" >&5\n+if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel_hidden'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  \n+\tif test \"x$gcc_cv_as_sparc_ua_pcrel\" = xyes; then\n+\t    gcc_cv_as_sparc_ua_pcrel_hidden=unknown\n+\t    if test x$gcc_cv_objdump != x; then\n+\t        gcc_cv_as_sparc_ua_pcrel_hidden=no\n+\t\techo \".data; .align 4; .byte 0x31; .uaword %r_disp32(foo)\" > conftest.s\n+\t\techo \".byte 0x32, 0x33, 0x34; .global foo; .hidden foo\" >> conftest.s\n+\t\techo \"foo: .skip 4\" >> conftest.s\n+\t\tif $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t\t   && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1 \\\n+\t\t   && $gcc_cv_objdump -s -j .data conftest 2> /dev/null \\\n+\t\t      | grep ' 31000000 07323334' > /dev/null 2>&1; then\n+\t\t    if $gcc_cv_objdump -R conftest 2> /dev/null \\\n+\t\t       | grep 'DISP32' > /dev/null 2>&1; then\n+\t\t\t:\n+\t\t    else\n+\t\t\tgcc_cv_as_sparc_ua_pcrel_hidden=yes\n+\t\t    fi\n+\t\tfi\n+\t    fi\n+\t    rm -f conftest.s conftest.o conftest\n+\telse\n+\t    gcc_cv_as_sparc_ua_pcrel_hidden=\"$gcc_cv_as_sparc_ua_pcrel\"\n+\tfi\n+    \n+fi\n+\n+echo \"$ac_t\"\"$gcc_cv_as_sparc_ua_pcrel_hidden\" 1>&6\n+    if test \"x$gcc_cv_as_sparc_ua_pcrel_hidden\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_SPARC_UA_PCREL_HIDDEN 1\n+EOF\n+\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6"}, {"sha": "7abf01bb641843290a6f29009631a13d4de28c7a", "filename": "gcc/configure.in", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7b8b0dc4258c4530a283000eea788c211029f9/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=cf7b8b0dc4258c4530a283000eea788c211029f9", "patch": "@@ -1755,10 +1755,9 @@ EOF\n \tif test x$gcc_cv_as != x -a x$gcc_cv_ld != x; then\n \t    gcc_cv_as_sparc_ua_pcrel=no\n \t    echo \".text; foo: nop; .data; .align 4; .byte 0; .uaword %r_disp32(foo)\" > conftest.s\n-\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1; then\n-\t\tif $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n-\t\t    gcc_cv_as_sparc_ua_pcrel=yes\n-\t\tfi\n+\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t       && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n+\t\tgcc_cv_as_sparc_ua_pcrel=yes\n \t    fi\n \t    rm -f conftest.s conftest.o conftest\n \tfi\n@@ -1768,6 +1767,37 @@ EOF\n \t\t[Define if your assembler and linker support unaligned PC relative relocs.])\n     fi\n \n+    AC_CACHE_CHECK([assembler and linker support unaligned pc related relocs against hidden symbols],\n+\tgcc_cv_as_sparc_ua_pcrel_hidden, [\n+\tif test \"x$gcc_cv_as_sparc_ua_pcrel\" = xyes; then\n+\t    gcc_cv_as_sparc_ua_pcrel_hidden=unknown\n+\t    if test x$gcc_cv_objdump != x; then\n+\t        gcc_cv_as_sparc_ua_pcrel_hidden=no\n+\t\techo \".data; .align 4; .byte 0x31; .uaword %r_disp32(foo)\" > conftest.s\n+\t\techo \".byte 0x32, 0x33, 0x34; .global foo; .hidden foo\" >> conftest.s\n+\t\techo \"foo: .skip 4\" >> conftest.s\n+\t\tif $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t\t   && $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1 \\\n+\t\t   && $gcc_cv_objdump -s -j .data conftest 2> /dev/null \\\n+\t\t      | grep ' 31000000 07323334' > /dev/null 2>&1; then\n+\t\t    if $gcc_cv_objdump -R conftest 2> /dev/null \\\n+\t\t       | grep 'DISP32' > /dev/null 2>&1; then\n+\t\t\t:\n+\t\t    else\n+\t\t\tgcc_cv_as_sparc_ua_pcrel_hidden=yes\n+\t\t    fi\n+\t\tfi\n+\t    fi\n+\t    rm -f conftest.s conftest.o conftest\n+\telse\n+\t    gcc_cv_as_sparc_ua_pcrel_hidden=\"$gcc_cv_as_sparc_ua_pcrel\"\n+\tfi\n+    ])\n+    if test \"x$gcc_cv_as_sparc_ua_pcrel_hidden\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_SPARC_UA_PCREL_HIDDEN, 1,\n+\t\t[Define if your assembler and linker support unaligned PC relative relocs against hidden symbols.])\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \tAC_CACHE_CHECK([for 64 bit support in assembler ($gcc_cv_as)],"}]}