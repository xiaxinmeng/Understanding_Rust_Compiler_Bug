{"sha": "39960d1cfa261751c9947534590b435b5fe761a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5NjBkMWNmYTI2MTc1MWM5OTQ3NTM0NTkwYjQzNWI1ZmU3NjFhNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-02-04T06:28:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-04T06:28:22Z"}, "message": "re PR ipa/59882 (internal compiler error: Segmentation fault)\n\n\n\tPR ipa/59882\n\t* tree.c (get_binfo_at_offset): Do not get confused by empty classes;\n\t* g++.dg/torture/pr59882.C: New testcase\n\nFrom-SVN: r207451", "tree": {"sha": "eeee5018125c68e6fc2b821dff471bcfb734e2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeee5018125c68e6fc2b821dff471bcfb734e2f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39960d1cfa261751c9947534590b435b5fe761a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39960d1cfa261751c9947534590b435b5fe761a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39960d1cfa261751c9947534590b435b5fe761a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39960d1cfa261751c9947534590b435b5fe761a7/comments", "author": null, "committer": null, "parents": [{"sha": "6f746413d43db94271199e867c03bb20de3c2d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f746413d43db94271199e867c03bb20de3c2d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f746413d43db94271199e867c03bb20de3c2d42"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "237ec964e48654035a34d9ba2ae16588ecaffaf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39960d1cfa261751c9947534590b435b5fe761a7", "patch": "@@ -1,9 +1,14 @@\n-2014-02-03  Jan Hubicka  <jh@suse.cz>\n+2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/59882\n+\t* tree.c (get_binfo_at_offset): Do not get confused by empty classes;\n+\n+2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gimple-fold.c (gimple_extract_devirt_binfo_from_cst): Remove.\n \t* gimple-fold.h (gimple_extract_devirt_binfo_from_cst): Remove.\n \n-2014-02-03  Jan Hubicka  <jh@suse.cz>\n+2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59831\n \t* ipa-cp.c (ipa_get_indirect_edge_target_1): Use ipa-devirt\n@@ -14,7 +19,7 @@\n \t(get_polymorphic_call_info): ... here.\n \t(get_polymorphic_call_info_from_invariant): New function.\n \n-2014-02-03  Jan Hubicka  <jh@suse.cz>\n+2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-cp.c (ipa_get_indirect_edge_target_1): Do direct\n \tlookup via vtable pointer; check for type consistency\n@@ -152,7 +157,7 @@\n \t(reduc_splus_<mode>): Call gen_altivec_vsumsws_direct instead of\n \tgen_altivec_vsumsws.\n \n-2014-02-02  Jan Hubicka  <jh@suse.cz>\n+2014-02-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (subbinfo_with_vtable_at_offset,\n \tvtable_pointer_value_to_binfo): New functions.\n@@ -479,7 +484,7 @@\n \tif -minrt given.\n \t(ENDFILE_SPEC): Likewise.\n \n-2014-01-29  Jan Hubicka  <jh@suse.cz>\n+2014-01-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (clobber_only_eh_bb_p): New function.\n \t(estimate_function_body_sizes): Use it.\n@@ -1234,12 +1239,12 @@\n \n \t* config/microblaze/microblaze.md: Correct bswaphi2 insn.\n \n-2014-01-22  Jan Hubicka  <jh@suse.cz>\n+2014-01-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* config/i386/x86-tune.def (X86_TUNE_ACCUMULATE_OUTGOING_ARGS):\n \tEnable for generic and recent AMD targets.\n \n-2014-01-22  Jan Hubicka  <jh@suse.cz>\n+2014-01-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* combine-stack-adj.c (combine_stack_adjustments_for_block): Remove\n \tARG_SIZE note when adjustment was eliminated.\n@@ -1404,7 +1409,7 @@\n \t* config/i386/i386.c (ix86_avoid_lea_for_addr): Return false\n \tif operands[1] is a REG or ZERO_EXTEND of a REG.\n \n-2014-01-19  Jan Hubicka  <jh@suse.cz>\n+2014-01-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* varasm.c (compute_reloc_for_constant): Use targetm.binds_local_p.\n \n@@ -1481,7 +1486,7 @@\n \t* ree.c (combine_set_extension): Temporarily disable test for\n \tchanging number of hard registers.\n \n-2014-01-17  Jan Hubicka  <jh@suse.cz>\n+2014-01-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/58125\n \t* ipa-inline-analysis.c (inline_free_summary):\n@@ -1658,7 +1663,7 @@\n \t* ipa-ref.c (ipa_remove_stmt_references): Fix references\n \ttraversal when removing references.\n \n-2014-01-16  Jan Hubicka  <jh@suse.cz>\n+2014-01-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59775\n \t* tree.c (get_binfo_at_offset): Look harder for virtual bases.\n@@ -2070,7 +2075,7 @@\n \toccurs before the extension when optimizing extensions with\n \tdifferent source and destination hard registers.\n \n-2014-01-10  Jan Hubicka  <jh@suse.cz>\n+2014-01-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/58585\n \t* ipa-devirt.c (build_type_inheritance_graph): Also add types of"}, {"sha": "ee68207755dcf00e368b9d66d0370fd4be7eef79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39960d1cfa261751c9947534590b435b5fe761a7", "patch": "@@ -1,3 +1,8 @@\n+2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/59882\n+\t* g++.dg/torture/pr59882.C: New testcase\n+\n 2014-02-03  Jan Hubicka  <jh@suse.cz>\n \n \tPR ipa/59831"}, {"sha": "b61f24703d21b5cb86feb8c3b896417f14cd9dd5", "filename": "gcc/testsuite/g++.dg/torture/pr59882.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59882.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59882.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr59882.C?ref=39960d1cfa261751c9947534590b435b5fe761a7", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+class A;\n+class B {};\n+struct C {\n+  virtual void dispatch();\n+  int traversal_map_;\n+};\n+template <typename> class F : public virtual C {};\n+\n+struct I : F<A>, F<int> {};\n+struct J : B, I {};\n+class D {};\n+struct L {\n+  L(D &, int &p2) : map_(p2) {}\n+  virtual void traverse(int &p1) {\n+    int &s = p1;\n+    names<L>(s, names_);\n+  }\n+  int &map_;\n+  J names_;\n+  template <typename> void names(int &, C &p2) { p2.dispatch(); }\n+};\n+\n+struct G : D {\n+  G(D &, int &p2) : map_(p2) { L(*this, map_); }\n+  int &map_;\n+};\n+\n+int a;\n+void fn1(D &p1) { G(p1, a); }"}, {"sha": "49767b628995a1fbdea59341fa9d9cbeb79ebb79", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39960d1cfa261751c9947534590b435b5fe761a7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=39960d1cfa261751c9947534590b435b5fe761a7", "patch": "@@ -12005,10 +12005,15 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \t\t    break;\n \t\t  }\n \t\telse\n-\t\t  if (BINFO_OFFSET (base_binfo) - BINFO_OFFSET (binfo) < pos\n+\t\t  if ((tree_to_shwi (BINFO_OFFSET (base_binfo)) \n+\t\t       - tree_to_shwi (BINFO_OFFSET (binfo)))\n+\t\t      * BITS_PER_UNIT < pos\n+\t\t      /* Rule out types with no virtual methods or we can get confused\n+\t\t\t here by zero sized bases.  */\n+\t\t      && BINFO_VTABLE (TYPE_BINFO (BINFO_TYPE (base_binfo)))\n \t\t      && (!containing_binfo\n-\t\t\t  || (BINFO_OFFSET (containing_binfo)\n-\t\t\t      < BINFO_OFFSET (base_binfo))))\n+\t\t\t  || (tree_to_shwi (BINFO_OFFSET (containing_binfo))\n+\t\t\t      < tree_to_shwi (BINFO_OFFSET (base_binfo)))))\n \t\t    containing_binfo = base_binfo;\n \t      if (found_binfo)\n \t\t{"}]}