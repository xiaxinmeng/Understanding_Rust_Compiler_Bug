{"sha": "0bcf9a093e66c073638106a1113472f4ba4cf03b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjZjlhMDkzZTY2YzA3MzYzODEwNmExMTEzNDcyZjRiYTRjZjAzYg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-06-23T08:39:55Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-06-23T08:39:55Z"}, "message": "re PR target/52483 (SH Target: Loads from volatile memory leave redundant sign/zero extensions)\n\n\tPR target/52483\n\t* config/sh/predicates.md (general_extend_operand): Invoke\n\tgeneral_movsrc_operand for memory operands.\n\t(general_movsrc_operand): Allow reg+reg addressing, do not use\n\tgeneral_operand for memory operands.\n\n\tPR target/52483\n\t* gcc.target/sh/pr52483-1.c: New.\n\t* gcc.target/sh/pr52483-2.c: New.\n\t* gcc.target/sh/pr52483-3.c: New.\n\t* gcc.target/sh/pr52483-4.c: New.\n\t* gcc.target/sh/pr52483-5.c: New.\n\nFrom-SVN: r200350", "tree": {"sha": "d7df78d467eced8a08fab473d7ee5ed22340779c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7df78d467eced8a08fab473d7ee5ed22340779c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bcf9a093e66c073638106a1113472f4ba4cf03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcf9a093e66c073638106a1113472f4ba4cf03b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcf9a093e66c073638106a1113472f4ba4cf03b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcf9a093e66c073638106a1113472f4ba4cf03b/comments", "author": null, "committer": null, "parents": [{"sha": "97db2bf7fb10e7eb2e8224e0471b56976f133843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97db2bf7fb10e7eb2e8224e0471b56976f133843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97db2bf7fb10e7eb2e8224e0471b56976f133843"}], "stats": {"total": 213, "additions": 204, "deletions": 9}, "files": [{"sha": "3291a1adebff01206fc6782963d13db3083ec612", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -1,3 +1,11 @@\n+2013-06-23  Oleg Endo <olegendo@gcc.gnu.org>\n+\n+\tPR target/52483\n+\t* config/sh/predicates.md (general_extend_operand): Invoke\n+\tgeneral_movsrc_operand for memory operands.\n+\t(general_movsrc_operand): Allow reg+reg addressing, do not use\n+\tgeneral_operand for memory operands.\n+\n 2013-06-23  Sriraman Tallam  <tmsriram@google.com>\n \n \t* config/i386/i386.c (ix86_pragma_target_parse):  Restore target"}, {"sha": "998ba7300ad2e9798e9d4514c3d0001cd70f6429", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -398,9 +398,13 @@\n (define_predicate \"general_extend_operand\"\n   (match_code \"subreg,reg,mem,truncate\")\n {\n-  return (GET_CODE (op) == TRUNCATE\n-\t  ? arith_operand\n-\t  : nonimmediate_operand) (op, mode);\n+  if (GET_CODE (op) == TRUNCATE)\n+    return arith_operand (op, mode);\n+\n+  if (MEM_P (op) || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op))))\n+    return general_movsrc_operand (op, mode);\n+\n+  return nonimmediate_operand (op, mode);\n })\n \n ;; Returns 1 if OP is a simple register address.\n@@ -468,17 +472,36 @@\n \treturn 0;\n     }\n \n-  if ((mode == QImode || mode == HImode)\n-      && mode == GET_MODE (op)\n-      && (MEM_P (op)\n-\t  || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n+  if (mode == GET_MODE (op)\n+      && (MEM_P (op) || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n     {\n-      rtx x = XEXP ((MEM_P (op) ? op : SUBREG_REG (op)), 0);\n+      rtx mem_rtx = MEM_P (op) ? op : SUBREG_REG (op);\n+      rtx x = XEXP (mem_rtx, 0);\n \n-      if (GET_CODE (x) == PLUS\n+      if ((mode == QImode || mode == HImode)\n+\t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n \t  && CONST_INT_P (XEXP (x, 1)))\n \treturn sh_legitimate_index_p (mode, XEXP (x, 1), TARGET_SH2A, false);\n+\n+      /* Allow reg+reg addressing here without validating the register\n+\t numbers.  Usually one of the regs must be R0 or a pseudo reg.\n+\t In some cases it can happen that arguments from hard regs are\n+\t propagated directly into address expressions.  In this cases reload\n+\t will have to fix it up later.  However, allow this only for native\n+\t 1, 2 or 4 byte addresses.  */\n+      if (can_create_pseudo_p () && GET_CODE (x) == PLUS\n+\t  && GET_MODE_SIZE (mode) <= 4\n+\t  && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n+\treturn true;\n+\n+      /* 'general_operand' does not allow volatile mems during RTL expansion to\n+\t avoid matching arithmetic that operates on mems, it seems.\n+\t On SH this leads to redundant sign extensions for QImode or HImode\n+\t loads.  Thus we mimic the behavior but allow volatile mems.  */\n+        if (memory_address_addr_space_p (GET_MODE (mem_rtx), x,\n+\t\t\t\t\t MEM_ADDR_SPACE (mem_rtx)))\n+\t  return true;\n     }\n \n   if (TARGET_SHMEDIA\n@@ -489,6 +512,7 @@\n       && GET_CODE (op) == SUBREG && GET_MODE (op) == mode\n       && SUBREG_REG (op) == const0_rtx && subreg_lowpart_p (op))\n     /* FIXME */ abort (); /* return 1; */\n+\n   return general_operand (op, mode);\n })\n "}, {"sha": "06e6847c26658ad7d101e994478c740b4af61e5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -1,3 +1,12 @@\n+2013-06-23  Oleg Endo <olegendo@gcc.gnu.org>\n+\n+\tPR target/52483\n+\t* gcc.target/sh/pr52483-1.c: New.\n+\t* gcc.target/sh/pr52483-2.c: New.\n+\t* gcc.target/sh/pr52483-3.c: New.\n+\t* gcc.target/sh/pr52483-4.c: New.\n+\t* gcc.target/sh/pr52483-5.c: New.\n+\n 2013-06-23  Sriraman Tallam  <tmsriram@google.com>\n \n \t* testsuite/gcc.target/i386/intrinsics_1.c: New test."}, {"sha": "6538a0570b2d224a8ac2bae6dcfa6c3638bcf705", "filename": "gcc/testsuite/gcc.target/sh/pr52483-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-1.c?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -0,0 +1,30 @@\n+/* Check that loads from volatile mems don't result in redundant sign\n+   extensions.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"exts\" } } */\n+\n+int\n+test_00 (volatile char* x)\n+{\n+  return *x;\n+}\n+\n+int\n+test_01 (volatile short* x)\n+{\n+  return *x;\n+}\n+\n+int\n+test_02 (volatile unsigned char* x)\n+{\n+  return *x == 0x80;\n+}\n+\n+int\n+test_03 (volatile unsigned short* x)\n+{\n+  return *x == 0xFF80;\n+}"}, {"sha": "5681039db4d8f1902abfb50c68cbc02612231c6b", "filename": "gcc/testsuite/gcc.target/sh/pr52483-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-2.c?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -0,0 +1,59 @@\n+/* Check that loads from volatile mems utilize displacement addressing\n+   modes and do not result in redundant sign extensions. */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"@\\\\(5,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(10,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(20,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(40,\" 2 } } */\n+/* { dg-final { scan-assembler-times \"@\\\\(44,\" 2 } } */\n+/* { dg-final { scan-assembler-not \"exts\" } } */\n+\n+int\n+test_00 (volatile char* x)\n+{\n+  return x[5];\n+}\n+\n+int\n+test_01 (volatile short* x)\n+{\n+  return x[5];\n+}\n+\n+int\n+test_02 (volatile int* x)\n+{\n+  return x[5];\n+}\n+\n+long long\n+test_03 (volatile long long* x)\n+{\n+  return x[5];\n+}\n+\n+unsigned int\n+test_04 (volatile unsigned char* x)\n+{\n+  return x[5];\n+}\n+\n+unsigned int\n+test_05 (volatile unsigned short* x)\n+{\n+  return x[5];\n+}\n+ \n+unsigned int\n+test_06 (volatile unsigned int* x)\n+{\n+  return x[5];\n+}\n+\n+unsigned long long\n+test_07 (volatile unsigned long long* x)\n+{\n+  return x[5];\n+}"}, {"sha": "4d04193eb45f791e56fc5cd04ef77bd00a8733c7", "filename": "gcc/testsuite/gcc.target/sh/pr52483-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-3.c?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -0,0 +1,25 @@\n+/* Check that loads from volatile mems utilize indexed addressing\n+   modes and do not result in redundant sign extensions. */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 3 } } */\n+/* { dg-final { scan-assembler-not \"exts\" } } */\n+\n+int\n+test_00 (volatile char* x, unsigned int y)\n+{\n+  return x[y];\n+}\n+\n+int\n+test_01 (volatile short* x, unsigned int y)\n+{\n+  return x[y];\n+}\n+\n+int\n+test_02 (volatile int* x, unsigned int y)\n+{\n+  return x[y];\n+}"}, {"sha": "8bf8626f148e8045bdcbc52b0958d896886cb671", "filename": "gcc/testsuite/gcc.target/sh/pr52483-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -0,0 +1,12 @@\n+/* Check that loads from volatile floating point mems utilize indexed\n+   addressing modes. */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"@\\\\(r0,\" 1 } } */\n+\n+float\n+test_00 (volatile float* x, unsigned int y)\n+{\n+  return x[y];\n+}"}, {"sha": "fd106456020f6b6e9b8ae3019057371006d86a45", "filename": "gcc/testsuite/gcc.target/sh/pr52483-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcf9a093e66c073638106a1113472f4ba4cf03b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-5.c?ref=0bcf9a093e66c073638106a1113472f4ba4cf03b", "patch": "@@ -0,0 +1,28 @@\n+/* Check that loads from volatile mems utilize post-increment addressing\n+   modes and do not result in redundant sign extensions. */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"@r\\[0-9\\]\\+\\\\+,\" 3 } } */\n+/* { dg-final { scan-assembler-not \"exts\" } } */\n+\n+volatile char*\n+test_00 (volatile char* x)\n+{\n+  int xx = *x++;\n+  return x;\n+}\n+\n+volatile short*\n+test_01 (volatile short* x)\n+{\n+  int xx = *x++;\n+  return x;\n+}\n+\n+volatile int*\n+test_02 (volatile int* x)\n+{\n+  int xx = *x++;\n+  return x;\n+}"}]}