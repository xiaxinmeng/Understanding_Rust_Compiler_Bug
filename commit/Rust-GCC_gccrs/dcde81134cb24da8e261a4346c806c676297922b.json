{"sha": "dcde81134cb24da8e261a4346c806c676297922b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkZTgxMTM0Y2IyNGRhOGUyNjFhNDM0NmM4MDZjNjc2Mjk3OTIyYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-21T06:01:34Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-21T06:02:27Z"}, "message": "i386: Add minmax and abs patterns for 4-byte vectors [PR100637]\n\n2021-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/mmx.md (SMAXMIN_MMXMODEI): New mode iterator.\n\t(<smaxmin:code><SMAXMIN_MMXMODEI:mode>3): Macroize expander\n\tfrom <smaxmin:code>v4hi3> and <smaxmin:code><MMXMODE14:mode>3\n\tusing SMAXMIN_MMXMODEI mode iterator.\n\t(*<smaxmin:code>v4qi3): New insn pattern.\n\t(*<smaxmin:code>v2hi3): Ditto.\n\t(SMAXMIN_VI_32): New mode iterator.\n\t(<smaxmin:code><SMAXMIN_VI_32>mode3): New expander.\n\n\t(UMAXMIN_MMXMODEI): New mode iterator.\n\t(<umaxmin:code><UMAXMIN_MMXMODEI:mode>3): Macroize expander\n\tfrom <umaxmin:code>v8qi3> and <umaxmin:code><MMXMODE24:mode>3\n\tusing UMAXMIN_MMXMODEI mode iterator.\n\t(*<umaxmin:code>v4qi3): New insn pattern.\n\t(*<umaxmin:code>v2hi3): Ditto.\n\t(UMAXMIN_VI_32): New mode iterator.\n\t(<umaxmin:code><UMAXMIN_VI_32>mode3): New expander.\n\n\t(abs<VI_32:mode>2): New insn pattern.\n\t(ssse3_abs<MMXMODEI:mode>2, abs<MMXMODEI:mode>2): Move from ...\n\t* config/i386/sse.md: ... here.", "tree": {"sha": "a7d62375332c769fd9ca821123036a00f8125c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d62375332c769fd9ca821123036a00f8125c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcde81134cb24da8e261a4346c806c676297922b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcde81134cb24da8e261a4346c806c676297922b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcde81134cb24da8e261a4346c806c676297922b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcde81134cb24da8e261a4346c806c676297922b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11784fe27d879a10dc8a79212c37f50d4f7146f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11784fe27d879a10dc8a79212c37f50d4f7146f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11784fe27d879a10dc8a79212c37f50d4f7146f3"}], "stats": {"total": 194, "additions": 145, "deletions": 49}, "files": [{"sha": "5e92be345451ce9adf6d05355128c0d2790b25c3", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 145, "deletions": 28, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde81134cb24da8e261a4346c806c676297922b/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde81134cb24da8e261a4346c806c676297922b/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=dcde81134cb24da8e261a4346c806c676297922b", "patch": "@@ -1691,13 +1691,11 @@\n    (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:MMXMODE14 0 \"register_operand\")\n-        (smaxmin:MMXMODE14\n-\t  (match_operand:MMXMODE14 1 \"register_operand\")\n-\t  (match_operand:MMXMODE14 2 \"register_operand\")))]\n-  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral shifts\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_insn \"*mmx_<code><mode>3\"\n   [(set (match_operand:MMXMODE14 0 \"register_operand\" \"=Yr,*x,Yv\")\n@@ -1725,14 +1723,6 @@\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, V4HImode, operands);\")\n \n-(define_expand \"<code>v4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\")\n-        (smaxmin:V4HI\n-\t  (match_operand:V4HI 1 \"register_operand\")\n-\t  (match_operand:V4HI 2 \"register_operand\")))]\n-  \"TARGET_MMX_WITH_SSE\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V4HImode, operands);\")\n-\n (define_insn \"*mmx_<code>v4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y,x,Yw\")\n         (smaxmin:V4HI\n@@ -1750,14 +1740,58 @@\n    (set_attr \"type\" \"mmxadd,sseiadd,sseiadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_mode_iterator SMAXMIN_MMXMODEI\n+  [(V8QI \"TARGET_SSE4_1\") V4HI (V2SI \"TARGET_SSE4_1\")])\n+\n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:MMXMODE24 0 \"register_operand\")\n-        (umaxmin:MMXMODE24\n-\t  (match_operand:MMXMODE24 1 \"register_operand\")\n-\t  (match_operand:MMXMODE24 2 \"register_operand\")))]\n-  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n+  [(set (match_operand:SMAXMIN_MMXMODEI 0 \"register_operand\")\n+        (smaxmin:SMAXMIN_MMXMODEI\n+\t  (match_operand:SMAXMIN_MMXMODEI 1 \"register_operand\")\n+\t  (match_operand:SMAXMIN_MMXMODEI 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n+(define_insn \"*<code>v4qi3\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=Yr,*x,Yv\")\n+\t(smaxmin:V4QI\n+\t  (match_operand:V4QI 1 \"register_operand\" \"%0,0,Yv\")\n+\t  (match_operand:V4QI 2 \"register_operand\" \"Yr,*x,Yv\")))]\n+  \"TARGET_SSE4_1\n+   && ix86_binary_operator_ok (<CODE>, V4QImode, operands)\"\n+  \"@\n+   p<maxmin_int>b\\t{%2, %0|%0, %2}\n+   p<maxmin_int>b\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>b\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*<code>v2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n+        (smaxmin:V2HI\n+\t  (match_operand:V2HI 1 \"register_operand\" \"%0,Yw\")\n+\t  (match_operand:V2HI 2 \"register_operand\" \"x,Yw\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, V2HImode, operands)\"\n+  \"@\n+   p<maxmin_int>w\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_mode_iterator SMAXMIN_VI_32 [(V4QI \"TARGET_SSE4_1\") V2HI])\n+\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:SMAXMIN_VI_32 0 \"register_operand\")\n+        (smaxmin:SMAXMIN_VI_32\n+\t  (match_operand:SMAXMIN_VI_32 1 \"register_operand\")\n+\t  (match_operand:SMAXMIN_VI_32 2 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, V4HImode, operands);\")\n+\n (define_insn \"*mmx_<code><mode>3\"\n   [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=Yr,*x,Yv\")\n \t(umaxmin:MMXMODE24\n@@ -1784,14 +1818,6 @@\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, V8QImode, operands);\")\n \n-(define_expand \"<code>v8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\")\n-        (umaxmin:V8QI\n-\t  (match_operand:V8QI 1 \"register_operand\")\n-\t  (match_operand:V8QI 2 \"register_operand\")))]\n-  \"TARGET_MMX_WITH_SSE\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V8QImode, operands);\")\n-\n (define_insn \"*mmx_<code>v8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yw\")\n         (umaxmin:V8QI\n@@ -1809,6 +1835,97 @@\n    (set_attr \"type\" \"mmxadd,sseiadd,sseiadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_mode_iterator UMAXMIN_MMXMODEI\n+  [V8QI (V4HI \"TARGET_SSE4_1\") (V2SI \"TARGET_SSE4_1\")])\n+\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:UMAXMIN_MMXMODEI 0 \"register_operand\")\n+        (umaxmin:UMAXMIN_MMXMODEI\n+\t  (match_operand:UMAXMIN_MMXMODEI 1 \"register_operand\")\n+\t  (match_operand:UMAXMIN_MMXMODEI 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*<code>v4qi3\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=x,Yw\")\n+        (umaxmin:V4QI\n+\t  (match_operand:V4QI 1 \"register_operand\" \"%0,Yw\")\n+\t  (match_operand:V4QI 2 \"register_operand\" \"x,Yw\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, V4QImode, operands)\"\n+  \"@\n+   p<maxmin_int>b\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>b\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*<code>v2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=Yr,*x,Yv\")\n+\t(umaxmin:V2HI\n+\t  (match_operand:V2HI 1 \"register_operand\" \"%0,0,Yv\")\n+\t  (match_operand:V2HI 2 \"register_operand\" \"Yr,*x,Yv\")))]\n+  \"TARGET_SSE4_1\n+   && ix86_binary_operator_ok (<CODE>, V2HImode, operands)\"\n+  \"@\n+   p<maxmin_int>w\\t{%2, %0|%0, %2}\n+   p<maxmin_int>w\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_mode_iterator UMAXMIN_VI_32 [V4QI (V2HI \"TARGET_SSE4_1\")])\n+\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:UMAXMIN_VI_32 0 \"register_operand\")\n+        (umaxmin:UMAXMIN_VI_32\n+\t  (match_operand:UMAXMIN_VI_32 1 \"register_operand\")\n+\t  (match_operand:UMAXMIN_VI_32 2 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, V4HImode, operands);\")\n+\n+(define_insn \"ssse3_abs<mode>2\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,Yv\")\n+\t(abs:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"ym,Yv\")))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n+  \"@\n+   pabs<mmxvecsize>\\t{%1, %0|%0, %1}\n+   %vpabs<mmxvecsize>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"mmx_isa\" \"native,*\")\n+   (set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n+   (set_attr \"mode\" \"DI,TI\")])\n+\n+(define_expand \"abs<mode>2\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(abs:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSSE3\")\n+\n+(define_insn \"abs<mode>2\"\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=Yv\")\n+\t(abs:VI_32\n+\t  (match_operand:VI_32 1 \"register_operand\" \"Yv\")))]\n+  \"TARGET_SSSE3\"\n+  \"%vpabs<mmxvecsize>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n+   (set_attr \"mode\" \"TI\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral shifts\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n (define_insn \"mmx_ashr<mode>3\"\n   [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y,x,<Yv_Yw>\")\n         (ashiftrt:MMXMODE24"}, {"sha": "7269147b87aad12774ff642ea2e8eb67894d277e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde81134cb24da8e261a4346c806c676297922b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde81134cb24da8e261a4346c806c676297922b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dcde81134cb24da8e261a4346c806c676297922b", "patch": "@@ -17553,27 +17553,6 @@\n     }\n })\n \n-(define_insn \"ssse3_abs<mode>2\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,Yv\")\n-\t(abs:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"ym,Yv\")))]\n-  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n-  \"@\n-   pabs<mmxvecsize>\\t{%1, %0|%0, %1}\n-   %vpabs<mmxvecsize>\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"mmx_isa\" \"native,*\")\n-   (set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix_rep\" \"0\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n-   (set_attr \"mode\" \"DI,TI\")])\n-\n-(define_insn \"abs<mode>2\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n-\t(abs:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_operand\")))]\n-  \"TARGET_MMX_WITH_SSE && TARGET_SSSE3\")\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; AMD SSE4A instructions"}]}