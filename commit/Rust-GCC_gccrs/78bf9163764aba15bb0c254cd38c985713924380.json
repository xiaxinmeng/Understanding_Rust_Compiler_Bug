{"sha": "78bf9163764aba15bb0c254cd38c985713924380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiZjkxNjM3NjRhYmExNWJiMGMyNTRjZDM4Yzk4NTcxMzkyNDM4MA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:47Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-08T15:06:47Z"}, "message": "[Arm] Implement CDE intrinsics for MVE registers.\n\nImplement CDE intrinsics on MVE registers.\n\nOther than the basics required for adding intrinsics this patch consists\nof three changes.\n\n** We separate out the MVE types and casts from the arm_mve.h header.\n\nThis is so that the types can be used in arm_cde.h without the need to include\nthe entire arm_mve.h header.\nThe only type that arm_cde.h needs is `uint8x16_t`, so this separation could be\navoided by using a `typedef` in this file.\nSince the introduced intrinsics are all defined to act on the full range of MVE\ntypes, declaring all such types seems intuitive since it will provide their\ndeclaration to the user too.\n\nThis arm_mve_types.h header not only includes the MVE types, but also\nthe conversion intrinsics between them.\nSome of the conversion intrinsics are needed for arm_cde.h, but most are\nnot.  We include all conversion intrinsics to keep the definition of\nsuch conversion functions all in one place, on the understanding that\nextra conversion functions being defined when including `arm_cde.h` is\nnot a problem.\n\n** We define the TARGET_RESOLVE_OVERLOADED_BUILTIN hook for the Arm backend.\n\nThis is needed to implement the polymorphism for the required intrinsics.\nThe intrinsics have no specialised version, and the resulting assembly\ninstruction for all different types should be exactly the same.\nDue to this we have implemented these intrinsics via one builtin on one type.\nAll other calls to the intrinsic with different types are implicitly cast to\nthe one type that is defined, and hence are all expanded to the same RTL\npattern that is only defined for one machine mode.\n\n** We seperate the initialisation of the CDE intrinsics from others.\n\nThis allows us to ensure that the CDE intrinsics acting on MVE registers\nare only created when both CDE and MVE are available.\nOnly initialising these builtins when both features are available is\nespecially important since they require a type that is only initialised\nwhen the target supports hard float.  Hence trying to initialise these\nbuiltins on a soft float target would cause an ICE.\n\nTesting done:\n  Full bootstrap and regtest on arm-none-linux-gnueabihf\n  Regression test on arm-none-eabi\n\nOk for trunk?\n\ngcc/ChangeLog:\n\n2020-03-10  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config.gcc (arm_mve_types.h): New extra_header for arm.\n\t* config/arm/arm-builtins.c (arm_resolve_overloaded_builtin): New.\n\t(arm_init_cde_builtins): New.\n\t(arm_init_acle_builtins): Remove initialisation of CDE builtins.\n\t(arm_init_builtins): Call arm_init_cde_builtins when target\n\tsupports CDE.\n\t* config/arm/arm-c.c (arm_resolve_overloaded_builtin): New declaration.\n\t(arm_register_target_pragmas): Initialise resolve_overloaded_builtin\n\thook to the implementation for the arm backend.\n\t* config/arm/arm.h (ARM_MVE_CDE_CONST_1): New.\n\t(ARM_MVE_CDE_CONST_2): New.\n\t(ARM_MVE_CDE_CONST_3): New.\n\t* config/arm/arm_cde.h (__arm_vcx1q_u8): New.\n\t(__arm_vcx1qa): New.\n\t(__arm_vcx2q): New.\n\t(__arm_vcx2q_u8): New.\n\t(__arm_vcx2qa): New.\n\t(__arm_vcx3q): New.\n\t(__arm_vcx3q_u8): New.\n\t(__arm_vcx3qa): New.\n\t* config/arm/arm_cde_builtins.def (vcx1q, vcx1qa, vcx2q, vcx2qa, vcx3q,\n\tvcx3qa): New builtins defined.\n\t* config/arm/arm_mve.h: Move typedefs and conversion intrinsics\n\tto arm_mve_types.h header.\n\t* config/arm/arm_mve_types.h: New file.\n\t* config/arm/mve.md (arm_vcx1qv16qi, arm_vcx1qav16qi, arm_vcx2qv16qi,\n\tarm_vcx2qav16qi, arm_vcx3qv16qi, arm_vcx3qav16qi): New patterns.\n\t* config/arm/predicates.md (const_int_mve_cde1_operand,\n\tconst_int_mve_cde2_operand, const_int_mve_cde3_operand): New.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n\t    Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/arm/acle/cde-mve-error-1.c: New test.\n\t* gcc.target/arm/acle/cde-mve-error-2.c: New test.\n\t* gcc.target/arm/acle/cde-mve-error-3.c: New test.\n\t* gcc.target/arm/acle/cde-mve-full-assembly.c: New test.\n\t* gcc.target/arm/acle/cde-mve-tests.c: New test.\n\t* lib/target-supports.exp (arm_v8_1m_main_cde_mve_fp): New check\n\teffective.\n\t(arm_v8_1m_main_cde_mve, arm_v8m_main_cde_fp): Use -mfpu=auto\n\tso we only check configurations that make sense.", "tree": {"sha": "5a00501550511635d0f75ea594231486d697c101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a00501550511635d0f75ea594231486d697c101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78bf9163764aba15bb0c254cd38c985713924380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bf9163764aba15bb0c254cd38c985713924380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bf9163764aba15bb0c254cd38c985713924380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bf9163764aba15bb0c254cd38c985713924380/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f3c89e1b78dbb69d3c7a47d2c9fd7ad93fe136"}], "stats": {"total": 4372, "additions": 3070, "deletions": 1302}, "files": [{"sha": "cf1a87e2efdbbeb8acc4625222b6904040586456", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -346,7 +346,7 @@ arc*-*-*)\n arm*-*-*)\n \tcpu_type=arm\n \textra_objs=\"arm-builtins.o aarch-common.o\"\n-\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve.h arm_cde.h\"\n+\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve_types.h arm_mve.h arm_cde.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\""}, {"sha": "b43898ab25dafdc33715e8fe8ef25d30ac3a625f", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -1833,10 +1833,22 @@ arm_init_acle_builtins (void)\n       arm_builtin_datum *d = &acle_builtin_data[i];\n       arm_init_builtin (fcode, d, \"__builtin_arm\");\n     }\n+}\n \n-  fcode = ARM_BUILTIN_CDE_PATTERN_START;\n+static void\n+arm_init_cde_builtins (void)\n+{\n+  unsigned int i, fcode = ARM_BUILTIN_CDE_PATTERN_START;\n   for (i = 0; i < ARRAY_SIZE (cde_builtin_data); i++, fcode++)\n     {\n+      /* Only define CDE floating point builtins if the target has floating\n+\t point registers.  NOTE: without HARD_FLOAT we don't have MVE, so we\n+\t can break out of this loop directly here.  */\n+      if (!TARGET_MAYBE_HARD_FLOAT && fcode >= ARM_BUILTIN_vcx1si)\n+\tbreak;\n+      /* Only define CDE/MVE builtins if MVE is available.  */\n+      if (!TARGET_HAVE_MVE && fcode >= ARM_BUILTIN_vcx1qv16qi)\n+\tbreak;\n       arm_builtin_cde_datum *cde = &cde_builtin_data[i];\n       arm_builtin_datum *d = &cde->base;\n       arm_init_builtin (fcode, d, \"__builtin_arm\");\n@@ -2628,6 +2640,9 @@ arm_init_builtins (void)\n       arm_init_crypto_builtins ();\n     }\n \n+  if (TARGET_CDE)\n+    arm_init_cde_builtins ();\n+\n   arm_init_acle_builtins ();\n \n   if (TARGET_MAYBE_HARD_FLOAT)\n@@ -4178,4 +4193,90 @@ arm_check_builtin_call (location_t , vec<location_t> , tree fndecl,\n   return true;\n }\n \n+/* Implement TARGET_RESOLVE_OVERLOADED_BUILTIN.  This is currently only\n+   used for the MVE related builtins for the CDE extension.\n+   Here we ensure the type of arguments is such that the size is correct, and\n+   then return a tree that describes the same function call but with the\n+   relevant types cast as necessary.  */\n+tree\n+arm_resolve_overloaded_builtin (location_t loc, tree fndecl, void *arglist)\n+{\n+  if (DECL_MD_FUNCTION_CODE (fndecl) <= ARM_BUILTIN_vcx1qv16qi\n+      || DECL_MD_FUNCTION_CODE (fndecl) >= ARM_BUILTIN_MVE_BASE)\n+    return NULL_TREE;\n+\n+  vec<tree, va_gc> *params = static_cast<vec<tree, va_gc> *> (arglist);\n+  unsigned param_num = params ? params->length() : 0;\n+  unsigned num_args = list_length (TYPE_ARG_TYPES (TREE_TYPE (fndecl))) - 1;\n+  /* Ensure this function has the correct number of arguments.\n+     This won't happen when using the intrinsics defined by the ACLE, since\n+     they're exposed to the user via a wrapper in the arm_cde.h header that has\n+     the correct number of arguments ... hence the compiler would already catch\n+     an incorrect number of arguments there.\n+\n+     It is still possible to get here if the user tries to call the __bulitin_*\n+     functions directly.  We could print some error message in this function,\n+     but instead we leave it to the rest of the code to catch this problem in\n+     the same way that other __builtin_* functions catch it.\n+\n+     This does mean an odd error message, but it's consistent with the rest of\n+     the builtins.  */\n+  if (param_num != num_args)\n+    return NULL_TREE;\n+\n+  tree to_return = NULL_TREE;\n+  /* Take the functions return type since that's the same type as the arguments\n+     this function needs (the types of the builtin function all come from the\n+     machine mode of the RTL pattern, and they're all the same and calculated\n+     in the same way).  */\n+  tree pattern_type = TREE_TYPE (TREE_TYPE (fndecl));\n+\n+  unsigned i;\n+  for (i = 1; i < (param_num - 1); i++)\n+    {\n+      tree this_param = (*params)[i];\n+      if (TREE_CODE (this_param) == ERROR_MARK)\n+\treturn NULL_TREE;\n+      tree param_type = TREE_TYPE (this_param);\n+\n+      /* Return value is cast to type that second argument originally was.\n+\t All non-constant arguments are cast to the return type calculated from\n+\t the RTL pattern.\n+\n+\t Set the return type to an unqualified version of the type of the first\n+\t parameter.  The first parameter since that is how the intrinsics are\n+\t defined -- to always return the same type as the first polymorphic\n+\t argument.  Unqualified version of the type since we don't want passing\n+\t a constant parameter to mean that the return value of the builtin is\n+\t also constant.  */\n+      if (i == 1)\n+\tto_return = build_qualified_type (param_type, 0 MEM_STAT_INFO);\n+\n+      /* The only requirement of these intrinsics on the type of the variable\n+\t is that it's 128 bits wide.  All other types are valid and we simply\n+\t VIEW_CONVERT_EXPR them to the type of the underlying builtin.  */\n+      tree type_size = TYPE_SIZE (param_type);\n+      if (! tree_fits_shwi_p (type_size)\n+\t  || tree_to_shwi (type_size) != 128)\n+\t{\n+\t  error_at (loc,\n+\t\t    \"argument %u to function %qE is of type %qT which is not \"\n+\t\t    \"known to be 128 bits wide\",\n+\t\t    i, fndecl, param_type);\n+\t  return NULL_TREE;\n+\t}\n+\n+      /* Only convert the argument if we actually need to.  */\n+      if (! check_base_type (pattern_type, param_type))\n+\t(*params)[i] = build1 (VIEW_CONVERT_EXPR, pattern_type, this_param);\n+    }\n+  tree call_expr = build_call_expr_loc_array (loc, fndecl, param_num,\n+\t\t\t\t\t      params->address());\n+\n+  gcc_assert (to_return != NULL_TREE);\n+  if (! check_base_type (to_return, pattern_type))\n+    return build1 (VIEW_CONVERT_EXPR, to_return, call_expr);\n+  return call_expr;\n+}\n+\n #include \"gt-arm-builtins.h\""}, {"sha": "f173b33695e80effd932579d929bc2f2e2265726", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -28,6 +28,8 @@\n #include \"c-family/c-pragma.h\"\n #include \"stringpool.h\"\n \n+tree arm_resolve_overloaded_builtin (location_t, tree, void*);\n+\n /* Output C specific EABI object attributes.  These cannot be done in\n    arm.c because they require information from the C frontend.  */\n \n@@ -360,6 +362,7 @@ arm_register_target_pragmas (void)\n {\n   /* Update pragma hook to allow parsing #pragma GCC target.  */\n   targetm.target_option.pragma_parse = arm_pragma_target_parse;\n+  targetm.resolve_overloaded_builtin = arm_resolve_overloaded_builtin;\n \n #ifdef REGISTER_SUBTARGET_PRAGMAS\n   REGISTER_SUBTARGET_PRAGMAS ();"}, {"sha": "0126f390abb2650e0b81cb59d55b1ce608490d4a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -582,6 +582,9 @@ extern const int arm_arch_cde_coproc_bits[];\n #define ARM_VCDE_CONST_1\t((1 << 11) - 1)\n #define ARM_VCDE_CONST_2\t((1 << 6 ) - 1)\n #define ARM_VCDE_CONST_3\t((1 << 3 ) - 1)\n+#define ARM_MVE_CDE_CONST_1\t((1 << 12) - 1)\n+#define ARM_MVE_CDE_CONST_2\t((1 << 7 ) - 1)\n+#define ARM_MVE_CDE_CONST_3\t((1 << 4 ) - 1)\n \n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)"}, {"sha": "e9564d5922d5b8f6836fa54df59193db4d7c3401", "filename": "gcc/config/arm/arm_cde.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_cde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_cde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde.h?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -140,6 +140,28 @@ extern \"C\" {\n #endif /* __ARM_FP || __ARM_FEATURE_MVE.  */\n #endif /* __ARM_FEATURE_CDE.  */\n \n+#if __ARM_FEATURE_MVE\n+#include \"arm_mve_types.h\"\n+\n+#define __arm_vcx1q_u8(coproc, imm) \\\n+\t(uint8x16_t)__builtin_arm_vcx1qv16qi(coproc, imm)\n+#define __arm_vcx1qa(coproc, acc, imm) \\\n+\t__builtin_arm_vcx1qav16qi(coproc, acc, imm)\n+#define __arm_vcx2q(coproc, n, imm) \\\n+\t__builtin_arm_vcx2qv16qi(coproc, n, imm)\n+#define __arm_vcx2q_u8(coproc, n, imm) \\\n+\t(uint8x16_t)__builtin_arm_vcx2qv16qi(coproc, n, imm)\n+#define __arm_vcx2qa(coproc, acc, n, imm) \\\n+\t__builtin_arm_vcx2qav16qi(coproc, acc, n, imm)\n+#define __arm_vcx3q(coproc, n, m, imm) \\\n+\t__builtin_arm_vcx3qv16qi(coproc, n, m, imm)\n+#define __arm_vcx3q_u8(coproc, n, m, imm) \\\n+\t(uint8x16_t)__builtin_arm_vcx3qv16qi(coproc, n, m, imm)\n+#define __arm_vcx3qa(coproc, acc, n, m, imm) \\\n+\t__builtin_arm_vcx3qav16qi(coproc, acc, n, m, imm)\n+\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "1e107cfffe2cf1caf9d4ae615dc8a83879be7c37", "filename": "gcc/config/arm/arm_cde_builtins.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde_builtins.def?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -37,4 +37,15 @@ CDE_VAR2 (CX_BINARY, vcx2a, si, di, ARM_VCDE_CONST_2, ECF_CONST)\n CDE_VAR2 (CX_BINARY, vcx3, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n CDE_VAR2 (CX_TERNARY, vcx3a, si, di, ARM_VCDE_CONST_3, ECF_CONST)\n \n+/* NOTE: The MVE intrinsics must be defined at the end of this file, and with\n+\t vcx1q first.\n+         These restrictions are relied on to determine which intrinsics need\n+\t overload resolution in `arm_resolve_overloaded_builtin`.  */\n+VAR1 (CX_IMM, vcx1q, v16qi, ARM_MVE_CDE_CONST_1, ECF_CONST)\n+VAR1 (CX_UNARY, vcx1qa, v16qi, ARM_MVE_CDE_CONST_1, ECF_CONST)\n+VAR1 (CX_UNARY, vcx2q, v16qi, ARM_MVE_CDE_CONST_2, ECF_CONST)\n+VAR1 (CX_BINARY, vcx2qa, v16qi, ARM_MVE_CDE_CONST_2, ECF_CONST)\n+VAR1 (CX_BINARY, vcx3q, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n+VAR1 (CX_TERNARY, vcx3qa, v16qi, ARM_MVE_CDE_CONST_3, ECF_CONST)\n+\n #undef CDE_VAR2"}, {"sha": "4ab16b7c8730082427f91b4f05e296e8b27c1391", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 1, "deletions": 1298, "changes": 1299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -32,43 +32,7 @@\n #ifndef  __cplusplus\n #include <stdbool.h>\n #endif\n-\n-#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n-typedef __fp16 float16_t;\n-typedef float float32_t;\n-typedef __simd128_float16_t float16x8_t;\n-typedef __simd128_float32_t float32x4_t;\n-#endif\n-\n-#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n-typedef struct { float16x8_t val[2]; } float16x8x2_t;\n-typedef struct { float16x8_t val[4]; } float16x8x4_t;\n-typedef struct { float32x4_t val[2]; } float32x4x2_t;\n-typedef struct { float32x4_t val[4]; } float32x4x4_t;\n-#endif\n-\n-typedef uint16_t mve_pred16_t;\n-typedef __simd128_uint8_t uint8x16_t;\n-typedef __simd128_uint16_t uint16x8_t;\n-typedef __simd128_uint32_t uint32x4_t;\n-typedef __simd128_uint64_t uint64x2_t;\n-typedef __simd128_int8_t int8x16_t;\n-typedef __simd128_int16_t int16x8_t;\n-typedef __simd128_int32_t int32x4_t;\n-typedef __simd128_int64_t int64x2_t;\n-\n-typedef struct { int16x8_t val[2]; } int16x8x2_t;\n-typedef struct { int16x8_t val[4]; } int16x8x4_t;\n-typedef struct { int32x4_t val[2]; } int32x4x2_t;\n-typedef struct { int32x4_t val[4]; } int32x4x4_t;\n-typedef struct { int8x16_t val[2]; } int8x16x2_t;\n-typedef struct { int8x16_t val[4]; } int8x16x4_t;\n-typedef struct { uint16x8_t val[2]; } uint16x8x2_t;\n-typedef struct { uint16x8_t val[4]; } uint16x8x4_t;\n-typedef struct { uint32x4_t val[2]; } uint32x4x2_t;\n-typedef struct { uint32x4_t val[4]; } uint32x4x4_t;\n-typedef struct { uint8x16_t val[2]; } uint8x16x2_t;\n-typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n+#include \"arm_mve_types.h\"\n \n #ifndef __ARM_MVE_PRESERVE_USER_NAMESPACE\n #define vst4q(__addr, __value) __arm_vst4q(__addr, __value)\n@@ -13608,399 +13572,6 @@ __arm_vuninitializedq_s64 (void)\n   return __uninit;\n }\n \n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_s32 (int32x4_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_s64 (int64x2_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_s8 (int8x16_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_u16 (uint16x8_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_u32 (uint32x4_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_u64 (uint64x2_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_u8 (uint8x16_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_s16 (int16x8_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_s64 (int64x2_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_s8 (int8x16_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_u16 (uint16x8_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_u32 (uint32x4_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_u64 (uint64x2_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_u8 (uint8x16_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_s16 (int16x8_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_s32 (int32x4_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_s8 (int8x16_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_u16 (uint16x8_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_u32 (uint32x4_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_u64 (uint64x2_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_u8 (uint8x16_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_s16 (int16x8_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_s32 (int32x4_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_s64 (int64x2_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_u16 (uint16x8_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_u32 (uint32x4_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_u64 (uint64x2_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_u8 (uint8x16_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_s16 (int16x8_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_s32 (int32x4_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_s64 (int64x2_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_s8 (int8x16_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_u32 (uint32x4_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_u64 (uint64x2_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_u8 (uint8x16_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_s16 (int16x8_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_s32 (int32x4_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_s64 (int64x2_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_s8 (int8x16_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_u16 (uint16x8_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_u64 (uint64x2_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_u8 (uint8x16_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_s16 (int16x8_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_s32 (int32x4_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_s64 (int64x2_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_s8 (int8x16_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_u16 (uint16x8_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_u32 (uint32x4_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_u8 (uint8x16_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_s16 (int16x8_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_s32 (int32x4_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_s64 (int64x2_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_s8 (int8x16_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_u16 (uint16x8_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_u32 (uint32x4_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_u64 (uint64x2_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vddupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n@@ -19653,244 +19224,6 @@ __arm_vuninitializedq_f32 (void)\n   return __uninit;\n }\n \n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_f16 (float16x8_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32_f32 (float32x4_t __a)\n-{\n-  return (int32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_f16 (float16x8_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16_f32 (float32x4_t __a)\n-{\n-  return (int16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_f16 (float16x8_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64_f32 (float32x4_t __a)\n-{\n-  return (int64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_f16 (float16x8_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8_f32 (float32x4_t __a)\n-{\n-  return (int8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_f16 (float16x8_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16_f32 (float32x4_t __a)\n-{\n-  return (uint16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_f16 (float16x8_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32_f32 (float32x4_t __a)\n-{\n-  return (uint32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_f16 (float16x8_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64_f32 (float32x4_t __a)\n-{\n-  return (uint64x2_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_f16 (float16x8_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8_f32 (float32x4_t __a)\n-{\n-  return (uint8x16_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_f32 (float32x4_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_s16 (int16x8_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_s32 (int32x4_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_s64 (int64x2_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_s8 (int8x16_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_u16 (uint16x8_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_u32 (uint32x4_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_u64 (uint64x2_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16_u8 (uint8x16_t __a)\n-{\n-  return (float16x8_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_f16 (float16x8_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_s16 (int16x8_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_s32 (int32x4_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_s64 (int64x2_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_s8 (int8x16_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_u16 (uint16x8_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_u32 (uint32x4_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_u64 (uint64x2_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32_u8 (uint8x16_t __a)\n-{\n-  return (float32x4_t)  __a;\n-}\n-\n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_f32 (uint32x4_t * __addr, const int __offset)\n@@ -30867,398 +30200,6 @@ __arm_vuninitializedq (int64x2_t /* __v ATTRIBUTE UNUSED */)\n  return __arm_vuninitializedq_s64 ();\n }\n \n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_s16_s32 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_s16_s64 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_s16_s8 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_s16_u16 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_s16_u32 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_s16_u64 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_s16_u8 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_s32_s16 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_s32_s64 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_s32_s8 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_s32_u16 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_s32_u32 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_s32_u64 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_s32_u8 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_s64_s16 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_s64_s32 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_s64_s8 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_s64_u16 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_s64_u32 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_s64_u64 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_s64_u8 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_s8_s16 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_s8_s32 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_s8_s64 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_s8_u16 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_s8_u32 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_s8_u64 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_s8_u8 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_u16_s16 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_u16_s32 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_u16_s64 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_u16_s8 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_u16_u32 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_u16_u64 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_u16_u8 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_u32_s16 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_u32_s32 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_u32_s64 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_u32_s8 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_u32_u16 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_u32_u64 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_u32_u8 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_u64_s16 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_u64_s32 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_u64_s64 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_u64_s8 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_u64_u16 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_u64_u32 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_u64_u8 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_u8_s16 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_u8_s32 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_u8_s64 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_u8_s8 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_u8_u16 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_u8_u32 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_u8_u64 (__a);\n-}\n-\n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vddupq_m (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n@@ -36168,244 +35109,6 @@ __arm_vuninitializedq (float32x4_t /* __v ATTRIBUTE UNUSED */)\n  return __arm_vuninitializedq_f32 ();\n }\n \n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_s32_f16 (__a);\n-}\n-\n-__extension__ extern __inline int32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s32 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_s32_f32 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_s16_f16 (__a);\n-}\n-\n-__extension__ extern __inline int16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s16 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_s16_f32 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_s64_f16 (__a);\n-}\n-\n-__extension__ extern __inline int64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s64 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_s64_f32 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_s8_f16 (__a);\n-}\n-\n-__extension__ extern __inline int8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_s8 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_s8_f32 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_u16_f16 (__a);\n-}\n-\n-__extension__ extern __inline uint16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u16 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_u16_f32 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_u32_f16 (__a);\n-}\n-\n-__extension__ extern __inline uint32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u32 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_u32_f32 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_u64_f16 (__a);\n-}\n-\n-__extension__ extern __inline uint64x2_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u64 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_u64_f32 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_u8_f16 (__a);\n-}\n-\n-__extension__ extern __inline uint8x16_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_u8 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_u8_f32 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (float32x4_t __a)\n-{\n- return __arm_vreinterpretq_f16_f32 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_f16_s16 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_f16_s32 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_f16_s64 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_f16_s8 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_f16_u16 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_f16_u32 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_f16_u64 (__a);\n-}\n-\n-__extension__ extern __inline float16x8_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f16 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_f16_u8 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (float16x8_t __a)\n-{\n- return __arm_vreinterpretq_f32_f16 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (int16x8_t __a)\n-{\n- return __arm_vreinterpretq_f32_s16 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (int32x4_t __a)\n-{\n- return __arm_vreinterpretq_f32_s32 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (int64x2_t __a)\n-{\n- return __arm_vreinterpretq_f32_s64 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (int8x16_t __a)\n-{\n- return __arm_vreinterpretq_f32_s8 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (uint16x8_t __a)\n-{\n- return __arm_vreinterpretq_f32_u16 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (uint32x4_t __a)\n-{\n- return __arm_vreinterpretq_f32_u32 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (uint64x2_t __a)\n-{\n- return __arm_vreinterpretq_f32_u64 (__a);\n-}\n-\n-__extension__ extern __inline float32x4_t\n-__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vreinterpretq_f32 (uint8x16_t __a)\n-{\n- return __arm_vreinterpretq_f32_u8 (__a);\n-}\n-\n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb (uint32x4_t * __addr, const int __offset, float32x4_t __value)"}, {"sha": "0776f79cd629497393d19659b1fd825051b59725", "filename": "gcc/config/arm/arm_mve_types.h", "status": "added", "additions": 1330, "deletions": 0, "changes": 1330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_types.h?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,1330 @@\n+/* Arm MVE intrinsics include file.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Arm.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_ARM_MVE_TYPES_H\n+#define _GCC_ARM_MVE_TYPES_H\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+typedef __fp16 float16_t;\n+typedef float float32_t;\n+typedef __simd128_float16_t float16x8_t;\n+typedef __simd128_float32_t float32x4_t;\n+\n+typedef struct { float16x8_t val[2]; } float16x8x2_t;\n+typedef struct { float16x8_t val[4]; } float16x8x4_t;\n+typedef struct { float32x4_t val[2]; } float32x4x2_t;\n+typedef struct { float32x4_t val[4]; } float32x4x4_t;\n+#endif\n+\n+typedef uint16_t mve_pred16_t;\n+typedef __simd128_uint8_t uint8x16_t;\n+typedef __simd128_uint16_t uint16x8_t;\n+typedef __simd128_uint32_t uint32x4_t;\n+typedef __simd128_uint64_t uint64x2_t;\n+typedef __simd128_int8_t int8x16_t;\n+typedef __simd128_int16_t int16x8_t;\n+typedef __simd128_int32_t int32x4_t;\n+typedef __simd128_int64_t int64x2_t;\n+\n+typedef struct { int16x8_t val[2]; } int16x8x2_t;\n+typedef struct { int16x8_t val[4]; } int16x8x4_t;\n+typedef struct { int32x4_t val[2]; } int32x4x2_t;\n+typedef struct { int32x4_t val[4]; } int32x4x4_t;\n+typedef struct { int8x16_t val[2]; } int8x16x2_t;\n+typedef struct { int8x16_t val[4]; } int8x16x4_t;\n+typedef struct { uint16x8_t val[2]; } uint16x8x2_t;\n+typedef struct { uint16x8_t val[4]; } uint16x8x4_t;\n+typedef struct { uint32x4_t val[2]; } uint32x4x2_t;\n+typedef struct { uint32x4_t val[4]; } uint32x4x4_t;\n+typedef struct { uint8x16_t val[2]; } uint8x16x2_t;\n+typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s32 (int32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s64 (int64x2_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s8 (int8x16_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u16 (uint16x8_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u32 (uint32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u64 (uint64x2_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u8 (uint8x16_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s16 (int16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s64 (int64x2_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s8 (int8x16_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u16 (uint16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u32 (uint32x4_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u64 (uint64x2_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u8 (uint8x16_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s16 (int16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s32 (int32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s8 (int8x16_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u16 (uint16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u32 (uint32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u64 (uint64x2_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u8 (uint8x16_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s16 (int16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s32 (int32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s64 (int64x2_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u16 (uint16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u32 (uint32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u64 (uint64x2_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u8 (uint8x16_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s16 (int16x8_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s32 (int32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s64 (int64x2_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s8 (int8x16_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u32 (uint32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u64 (uint64x2_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u8 (uint8x16_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s16 (int16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s32 (int32x4_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s64 (int64x2_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s8 (int8x16_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u16 (uint16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u64 (uint64x2_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u8 (uint8x16_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s16 (int16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s32 (int32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s64 (int64x2_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s8 (int8x16_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u16 (uint16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u32 (uint32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u8 (uint8x16_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s16 (int16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s32 (int32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s64 (int64x2_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s8 (int8x16_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u16 (uint16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u32 (uint32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u64 (uint64x2_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_f16 (float16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_f32 (float32x4_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_f16 (float16x8_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_f32 (float32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_f16 (float16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_f32 (float32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_f16 (float16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_f32 (float32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_f16 (float16x8_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_f32 (float32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_f16 (float16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_f32 (float32x4_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_f16 (float16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_f32 (float32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_f16 (float16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_f32 (float32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_f32 (float32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s16 (int16x8_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s32 (int32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s64 (int64x2_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s8 (int8x16_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u16 (uint16x8_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u32 (uint32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u64 (uint64x2_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u8 (uint8x16_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_f16 (float16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s16 (int16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s32 (int32x4_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s64 (int64x2_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s8 (int8x16_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u16 (uint16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u32 (uint32x4_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u64 (uint64x2_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u8 (uint8x16_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+#endif\n+\n+#ifdef __cplusplus\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s16_s32 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s16_s64 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s16_s8 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s16_u16 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s16_u32 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s16_u64 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s16_u8 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s32_s16 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s32_s64 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s32_s8 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s32_u16 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s32_u32 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s32_u64 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s32_u8 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s64_s16 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s64_s32 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s64_s8 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s64_u16 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s64_u32 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s64_u64 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s64_u8 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s8_s16 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s8_s32 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s8_s64 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s8_u16 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s8_u32 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_s8_u64 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_s8_u8 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u16_s16 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u16_s32 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u16_s64 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u16_s8 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u16_u32 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u16_u64 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u16_u8 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u32_s16 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u32_s32 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u32_s64 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u32_s8 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u32_u16 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u32_u64 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u32_u8 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u64_s16 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u64_s32 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u64_s64 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u64_s8 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u64_u16 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u64_u32 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u64_u8 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u8_s16 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u8_s32 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u8_s64 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_u8_s8 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u8_u16 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u8_u32 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_u8_u64 (__a);\n+}\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s32_f16 (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s32_f32 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s16_f16 (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s16_f32 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s64_f16 (__a);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s64_f32 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_s8_f16 (__a);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_s8_f32 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u16_f16 (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u16_f32 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u32_f16 (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u32_f32 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u64_f16 (__a);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u64_f32 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_u8_f16 (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_u8_f32 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (float32x4_t __a)\n+{\n+ return __arm_vreinterpretq_f16_f32 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_f16_s16 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_f16_s32 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_f16_s64 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_f16_s8 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_f16_u16 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_f16_u32 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_f16_u64 (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_f16_u8 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (float16x8_t __a)\n+{\n+ return __arm_vreinterpretq_f32_f16 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (int16x8_t __a)\n+{\n+ return __arm_vreinterpretq_f32_s16 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (int32x4_t __a)\n+{\n+ return __arm_vreinterpretq_f32_s32 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (int64x2_t __a)\n+{\n+ return __arm_vreinterpretq_f32_s64 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (int8x16_t __a)\n+{\n+ return __arm_vreinterpretq_f32_s8 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (uint16x8_t __a)\n+{\n+ return __arm_vreinterpretq_f32_u16 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (uint32x4_t __a)\n+{\n+ return __arm_vreinterpretq_f32_u32 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (uint64x2_t __a)\n+{\n+ return __arm_vreinterpretq_f32_u64 (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32 (uint8x16_t __a)\n+{\n+ return __arm_vreinterpretq_f32_u8 (__a);\n+}\n+#endif /* __ARM_FEATURE_MVE & 2 (MVE floating point)  */\n+#endif /* __cplusplus */\n+\n+#endif /* _GCC_ARM_MVE_H.  */"}, {"sha": "1ae0840f798a32607e431d2778ebffaa75f40a1f", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -11301,3 +11301,74 @@\n  \"vpst\\;vshlct\\t%q0, %1, %4\"\n  [(set_attr \"type\" \"mve_move\")\n   (set_attr \"length\" \"8\")])\n+\n+;; CDE instructions on MVE registers.\n+\n+(define_insn \"arm_vcx1qv16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t   (match_operand:SI 2 \"const_int_mve_cde1_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx1\\\\tp%c1, %q0, #%c2\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx1qav16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t    (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t    (match_operand:SI 3 \"const_int_mve_cde1_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx1a\\\\tp%c1, %q0, #%c3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx2qv16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 3 \"const_int_mve_cde2_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx2\\\\tp%c1, %q0, %q2, #%c3\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx2qav16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 4 \"const_int_mve_cde2_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx2a\\\\tp%c1, %q0, %q3, #%c4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx3qv16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 4 \"const_int_mve_cde3_operand\" \"i\")]\n+\t UNSPEC_VCDE))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx3\\\\tp%c1, %q0, %q2, %q3, #%c4\"\n+  [(set_attr \"type\" \"coproc\")]\n+)\n+\n+(define_insn \"arm_vcx3qav16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=t\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"const_int_coproc_operand\" \"i\")\n+\t\t\t  (match_operand:V16QI 2 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:V16QI 4 \"register_operand\" \"t\")\n+\t\t\t  (match_operand:SI 5 \"const_int_mve_cde3_operand\" \"i\")]\n+\t UNSPEC_VCDEA))]\n+  \"TARGET_CDE && TARGET_HAVE_MVE\"\n+  \"vcx3a\\\\tp%c1, %q0, %q3, %q4, #%c5\"\n+  [(set_attr \"type\" \"coproc\")]\n+)"}, {"sha": "009862e012c9ce3bbe446a89aacb750f47be66f0", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -255,6 +255,18 @@\n   (and (match_operand 0 \"const_int_operand\")\n        (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_VCDE_CONST_3)\")))\n \n+(define_predicate \"const_int_mve_cde1_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_MVE_CDE_CONST_1)\")))\n+\n+(define_predicate \"const_int_mve_cde2_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_MVE_CDE_CONST_2)\")))\n+\n+(define_predicate \"const_int_mve_cde3_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, ARM_MVE_CDE_CONST_3)\")))\n+\n ;; This doesn't have to do much because the constant is already checked\n ;; in the shift_operator predicate.\n (define_predicate \"shift_amount_operand\""}, {"sha": "0adacb50ce41db5fcc37594f4b402b183078e35d", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-1.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,42 @@\n+#include \"arm_cde.h\"\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n+\n+/* Ensure the error messages make sense when passing too many/too few arguments\n+   to the intrinsic user-facing functions.  */\n+uint8x16_t test_invalid_arguments (uint8x16_t n, uint8x16_t m)\n+{\n+  uint8x16_t accum = __arm_vcx1q_u8 (0, 33, 1);   /* { dg-error {macro \"__arm_vcx1q_u8\" passed 3 arguments, but takes just 2} } */\n+  accum += __arm_vcx1qa (0, accum, 33, 1);        /* { dg-error {macro \"__arm_vcx1qa\" passed 4 arguments, but takes just 3} } */\n+  accum += __arm_vcx2q_u8 (0, n, 33, 1);          /* { dg-error {macro \"__arm_vcx2q_u8\" passed 4 arguments, but takes just 3} } */\n+  accum += __arm_vcx2q (0, n, 33, 1);             /* { dg-error {macro \"__arm_vcx2q\" passed 4 arguments, but takes just 3} } */\n+  accum += __arm_vcx2qa (0, accum, n, 33, 1);     /* { dg-error {macro \"__arm_vcx2qa\" passed 5 arguments, but takes just 4} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, 33, 1);       /* { dg-error {macro \"__arm_vcx3q_u8\" passed 5 arguments, but takes just 4} } */\n+  accum += __arm_vcx3q (0, n, m, 33, 1);          /* { dg-error {macro \"__arm_vcx3q\" passed 5 arguments, but takes just 4} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, 33, 1);  /* { dg-error {macro \"__arm_vcx3qa\" passed 6 arguments, but takes just 5} } */\n+  accum += __arm_vcx1q_u8 (0);                    /* { dg-error {macro \"__arm_vcx1q_u8\" requires 2 arguments, but only 1 given} } */\n+  accum += __arm_vcx1qa (0, accum);               /* { dg-error {macro \"__arm_vcx1qa\" requires 3 arguments, but only 2 given} } */\n+  accum += __arm_vcx2q_u8 (0, n);                 /* { dg-error {macro \"__arm_vcx2q_u8\" requires 3 arguments, but only 2 given} } */\n+  accum += __arm_vcx2q (0, n);                    /* { dg-error {macro \"__arm_vcx2q\" requires 3 arguments, but only 2 given} } */\n+  accum += __arm_vcx2qa (0, accum, n);            /* { dg-error {macro \"__arm_vcx2qa\" requires 4 arguments, but only 3 given} } */\n+  accum += __arm_vcx3q_u8 (0, n, m);              /* { dg-error {macro \"__arm_vcx3q_u8\" requires 4 arguments, but only 3 given} } */\n+  accum += __arm_vcx3q (0, n, m);                 /* { dg-error {macro \"__arm_vcx3q\" requires 4 arguments, but only 3 given} } */\n+  accum += __arm_vcx3qa (0, accum, n, m);         /* { dg-error {macro \"__arm_vcx3qa\" requires 5 arguments, but only 4 given} } */\n+\n+  /* The preprocessor complains that the macro was given an invalid number of\n+     arguments, and because of that ends up not expanding the macro but\n+     rather just leaving the macro name in the source code.  That macro name\n+     results in these errors.  */\n+  /* { dg-error {'__arm_vcx1q_u8' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 11 } */\n+  /* { dg-error {'__arm_vcx1qa' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 12 } */\n+  /* { dg-error {'__arm_vcx2q_u8' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 13 } */\n+  /* { dg-error {'__arm_vcx2q' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 14 } */\n+  /* { dg-error {'__arm_vcx2qa' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 15 } */\n+  /* { dg-error {'__arm_vcx3q_u8' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 16 } */\n+  /* { dg-error {'__arm_vcx3q' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 17 } */\n+  /* { dg-error {'__arm_vcx3qa' undeclared \\(first use in this function\\)}  \"\" { target { *-*-* } } 18 } */\n+\n+  return accum;\n+}"}, {"sha": "27e491a1800bb517310fff91c741d492c1459717", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-2.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-2.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,103 @@\n+#include \"arm_cde.h\"\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n+\n+/* This file and cde-mve-error-tests.c are split since there are two kinds of\n+   errors happening here.  The errors in the other file cause the compiler to\n+   not reach the errors found here, hence they need to be in a different file\n+   so we can inspect these ones.  */\n+\n+uint8x16_t test_bad_immediates (uint8x16_t n, uint8x16_t m, int someval)\n+{\n+  uint8x16_t accum = (uint8x16_t)(uint32x4_t){0, 0, 0, 0};\n+\n+  /* We always different constants for the pairs (__arm_vcx2q and\n+     __arm_vcx2q_u8) and (__arm_vcx3q and __arm_vcx3q_u8) despite them mapping\n+     to the same builtin and us wanting to test the same thing in each block.\n+\n+     This is because we have told the compiler that these functions are\n+     constant and pure (i.e. produce a value solely based on their arguments\n+     and have no side-effects).\n+\n+     With that information the compiler eliminates duplicate calls to the\n+     functions, and we only get error messages for one of the pairs.\n+     Hence, in order to get error messages for both function calls, we use\n+     different constants.  */\n+\n+  /* `coproc' not enabled.  */\n+  accum += __arm_vcx1q_u8 (1, 4095);           /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx1qa (1, accum, 4095);      /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx2q (1, n, 126);            /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx2q_u8 (1, n, 127);         /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx2qa (1, accum, n, 127);    /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx3q_u8 (1, n, m, 14);       /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx3q (1, n, m, 15);          /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+  accum += __arm_vcx3qa (1, accum, n, m, 15);  /* { dg-error {coprocessor 1 is not enabled with \\+cdecp1} } */\n+\n+  /* `coproc' out of range.  */\n+  accum += __arm_vcx1q_u8 (8, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa (8, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q (8, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_u8 (8, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa (8, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_u8 (8, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q (8, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa (8, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  /* `imm' out of range.  */\n+  accum += __arm_vcx1q_u8 (0, 4096);           /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa (0, accum, 4096);      /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q (0, n, 128);            /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2q_u8 (0, n, 129);         /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa (0, accum, n, 128);    /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, 16);       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3q (0, n, m, 17);          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, 16);  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+\n+  /* `imm' is not an immediate.  */\n+  accum += __arm_vcx1q_u8 (0, someval);             /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa (0, accum, someval);        /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q (0, n, someval);             /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2q_u8 (6, n, someval);          /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa (0, accum, n, someval);     /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, someval);       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3q (6, n, m, someval);          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, someval);  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+\n+  /* `coproc' is not an immediate.  */\n+  accum += __arm_vcx1q_u8 (someval, 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa (someval, accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q (someval, n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_u8 (someval, n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa (someval, accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_u8 (someval, n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q (someval, n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa (someval, accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  /* `imm' is of wrong type.  */\n+  accum += __arm_vcx1q_u8 (0, \"\");           /* { dg-error {argument 2 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx1qa (0, accum, \"\");      /* { dg-error {argument 3 must be a constant immediate in range \\[0-4095\\]} } */\n+  accum += __arm_vcx2q (0, n, \"\");            /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2q_u8 (0, n, \"x\");         /* { dg-error {argument 3 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx2qa (0, accum, n, \"\");    /* { dg-error {argument 4 must be a constant immediate in range \\[0-127\\]} } */\n+  accum += __arm_vcx3q_u8 (0, n, m, \"\");       /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3q (0, n, m, \"x\");          /* { dg-error {argument 4 must be a constant immediate in range \\[0-15\\]} } */\n+  accum += __arm_vcx3qa (0, accum, n, m, \"\");  /* { dg-error {argument 5 must be a constant immediate in range \\[0-15\\]} } */\n+\n+  /* `coproc' is of wrong type.  */\n+  accum += __arm_vcx1q_u8 (\"\", 4095);           /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx1qa (\"\", accum, 4095);      /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q (\"\", n, 126);            /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2q_u8 (\"\", n, 127);         /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx2qa (\"\", accum, n, 127);    /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q_u8 (\"\", n, m, 14);       /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3q (\"\", n, m, 15);          /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+  accum += __arm_vcx3qa (\"\", accum, n, m, 15);  /* { dg-error {coproc must be a constant immediate in range \\[0-7\\] enabled with \\+cdecp<N>} } */\n+\n+  /* { dg-warning {passing argument 2 of '__builtin_arm_vcx1qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 80 } */\n+  /* { dg-warning {passing argument 1 of '__builtin_arm_vcx1qv16qi' makes integer from pointer without a cast \\[-Wint-conversion\\]} \"\" { target *-*-* } 90 } */\n+\n+  return accum;\n+}"}, {"sha": "e637ab83088e755b0980d58f2097b810c1a3d33b", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-error-3.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-error-3.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,85 @@\n+#include \"arm_cde.h\"\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n+\n+uint32_t test (int8x16_t m, int8x16_t n)\n+{\n+  /* Bad types for polymophic arguments.  */\n+  uint32_t accum = 0, n_int = 0;\n+  accum += __arm_vcx1qa (0, accum, 4095);\n+  accum += __arm_vcx2q (0, n_int, 126);\n+  accum += __arm_vcx2q_u8 (0, n_int, 127);\n+  accum += __arm_vcx2qa (0, accum, n, 127);\n+  accum += __arm_vcx3q_u8 (0, n_int, m, 14);\n+  accum += __arm_vcx3q (0, n_int, m, 15);\n+  accum += __arm_vcx3qa (0, accum, n, m, 15);\n+\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx1qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 11 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx1qav16qi'} \"\" { target *-*-* } 11 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 12 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qv16qi'} \"\" { target *-*-* } 12 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 13 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qv16qi'} \"\" { target *-*-* } 13 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 14 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx2qav16qi'} \"\" { target *-*-* } 14 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 15 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 15 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 16 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 16 } */\n+  /* { dg-error {argument 1 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 17 } */\n+  /* { dg-error {incompatible type for argument 2 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 17 } */\n+  return accum;\n+}\n+\n+int8x16_t test2 (int8x16_t m, int8x16_t n)\n+{\n+  uint32_t n_int = 0, m_int = 0;\n+  int8x16_t accum = (int8x16_t)(uint64x2_t) { 0, 0 };\n+  accum += __arm_vcx2qa (0, accum, n_int, 127);\n+  accum += __arm_vcx3q_u8 (0, n, m_int, 14);\n+  accum += __arm_vcx3q (0, n, m_int, 15);\n+  accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n+  accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n+  accum += __arm_vcx3qa (0, accum, n, m_int, 15);\n+  accum += __arm_vcx3qa (0, accum, n, m_int, 15);\n+\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx2qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 40 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx2qav16qi'} \"\" { target *-*-* } 40 } */\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 41 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 41 } */\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qv16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 42 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qv16qi'} \"\" { target *-*-* } 42 } */\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 43 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 43 } */\n+  /* { dg-error {argument 2 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 44 } */\n+  /* { dg-error {incompatible type for argument 3 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 44 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 45 } */\n+  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 45 } */\n+  /* { dg-error {argument 3 to function '__builtin_arm_vcx3qav16qi' is of type 'uint32_t' {aka '(?:long )?unsigned int'} which is not known to be 128 bits wide} \"\" { target *-*-* } 46 } */\n+  /* { dg-error {incompatible type for argument 4 of '__builtin_arm_vcx3qav16qi'} \"\" { target *-*-* } 46 } */\n+  return accum;\n+}\n+\n+/* Testing that undeclared variables work as expected.\n+   (This to verify we fixed a problem hit during development).  */\n+int8x16_t test3 (int8x16_t m, int8x16_t n)\n+{\n+  int8x16_t accum = (int8x16_t)(uint64x2_t) { 0, 0 };\n+  accum += __arm_vcx1qa (0, accum_int, 4095);\n+  accum += __arm_vcx2q (0, n_int, 126);\n+  accum += __arm_vcx2q_u8 (0, n_int, 127);\n+  accum += __arm_vcx2qa (0, accum, n_int, 127);\n+  accum += __arm_vcx3q_u8 (0, n_int, m, 14);\n+  accum += __arm_vcx3q_u8 (0, n, m_int, 14);\n+  accum += __arm_vcx3q (0, n_int, m, 15);\n+  accum += __arm_vcx3q (0, n, m_int, 15);\n+  accum += __arm_vcx3qa (0, accum, n_int, m, 15);\n+  accum += __arm_vcx3qa (0, accum, n_int, m_int, 15);\n+\n+  /* { dg-error {'accum_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 70 } */\n+  /* { dg-error {'n_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 71 } */\n+  /* { dg-error {'m_int' undeclared \\(first use in this function\\)} \"\" { target *-*-* } 75 } */\n+  return accum;\n+}"}, {"sha": "a10ff9f0c49554847546397b6af620a34663eb48", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-full-assembly.c", "status": "added", "additions": 557, "deletions": 0, "changes": 557, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-full-assembly.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,557 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"Require optimisation to compile DCE tests\" { *-*-* } { \"-O0\" \"-mfloat-abi=softfp\" } { \"\" } } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n+/* We use -ffast-math so that the addition of 0.0 to a value is assumed to not\n+   change the value.  This means the tests for float types can use the same\n+   trick of adding to a value initialised to zero to check whether the RTL\n+   patterns correctly mark that the incoming value is not used.  */\n+/* { dg-additional-options \"-ffast-math\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"cde-mve-tests.c\"\n+\n+/* NOTE:\n+     We avoid matching the functions returning a __builtin_neon_ti value since\n+     there are variations between processors that make matching the whole\n+     function difficult.\n+     Since moving a TImode value into an MVE 'Q' register takes a few\n+     temporaries, this leaves many instructions which can end up being\n+     scheduled in different ways.  Matching the ways this ends up getting\n+     scheduled and restructured is awkward, and the extra tests for this one\n+     data type don't seem to be worth the confusing testcases.  */\n+\n+/*\n+** test_cde_vcx1q_u8float16x8_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8float32x4_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8uint8x16_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8uint16x8_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8uint32x4_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8uint64x2_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8int8x16_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8int16x8_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8int32x4_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1q_u8int64x2_tintint:\n+** \tvcx1\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qafloat16x8_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qafloat32x4_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qauint8x16_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qauint16x8_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qauint32x4_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qauint64x2_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qaint8x16_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qaint16x8_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qaint32x4_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx1qaint64x2_tintint:\n+** \tvldr\\.64\td0, \\.L([0-9]*)\n+** \tvldr\\.64\td1, \\.L\\1\\+8\n+** \tvcx1a\tp0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8float16x8_tuint16x8_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8float16x8_tfloat32x4_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8float32x4_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8int64x2_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8int8x16_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8uint16x8_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tint64x2_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tuint16x8_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qfloat16x8_tuint16x8_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qfloat16x8_tfloat32x4_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qfloat32x4_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qint64x2_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qint8x16_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2quint16x8_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tint64x2_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tuint16x8_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tuint8x16_tint:\n+** \tvcx2\tp0, q0, q0, #33\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qafloat16x8_tuint16x8_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qafloat16x8_tfloat32x4_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qafloat32x4_tuint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qaint64x2_tuint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qaint8x16_tuint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qauint16x8_tuint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tint64x2_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tuint16x8_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tuint8x16_tint:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx2a\tp0, (q[0-7]), q0, #33\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint16x8_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint16x8_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tuint16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8float16x8_tfloat16x8_tfloat16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8float32x4_tuint64x2_tfloat16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8int8x16_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8int64x2_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint64x2_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tint64x2_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint64x2_tint64x2_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qfloat32x4_tuint64x2_tfloat16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint16x8_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint16x8_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tuint16x8_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qint8x16_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qint64x2_tuint8x16_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint64x2_tuint8x16_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tint64x2_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint64x2_tint64x2_t:\n+** \tvcx3\tp0, q0, q0, q1, #12\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qafloat16x8_tfloat16x8_tfloat16x8_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qafloat32x4_tuint64x2_tfloat16x8_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint16x8_tuint8x16_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint16x8_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tuint16x8_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qaint8x16_tuint8x16_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint8x16_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qaint64x2_tuint8x16_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint64x2_tuint8x16_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tint64x2_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint64x2_tint64x2_t:\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L([0-9]*)\n+** \tvldr\\.64\td(?:[01][0-4]|[0-9]), \\.L\\1\\+8\n+** \tvcx3a\tp0, (q[0-7]), q0, q1, #12\n+** \tvmov\tq0, \\2\n+** \tbx\tlr\n+*/"}, {"sha": "11341cb4e0c5eb30407215f92dabbee5d9cd57f6", "filename": "gcc/testsuite/gcc.target/arm/acle/cde-mve-tests.c", "status": "added", "additions": 722, "deletions": 0, "changes": 722, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcde-mve-tests.c?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -0,0 +1,722 @@\n+#include \"arm_cde.h\"\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve_fp } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+\n+/* Test that the assembly is produced as expected.\n+   Test that the same thing happens for each valid type.\n+     (ensure we check *every* valid type, though we're not bothering with every\n+     type combination, just checking \"all same type\" and \"different types\",\n+     also want to check every valid type at least once)  */\n+\n+#define TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, accum_type, n_type, m_type, arguments) \\\n+  accum_type test_cde_##name##accum_type##n_type##m_type ( \\\n+\t\t      __attribute__ ((unused)) n_type n, \\\n+\t\t      __attribute__ ((unused)) m_type m) \\\n+  {   \\\n+    accum_type accum = (accum_type)(uint32x4_t){0,0,0,0};  \\\n+    accum += (accum_type) __arm_##name arguments; \\\n+    return accum; \\\n+  }\n+\n+/* Use every valid type for the output -- demonstrate can use any 128 bit value\n+   (which is a requirement for these intrinsics).  */\n+#define TEST_CDE_MVE_INTRINSIC_1(name, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, __builtin_neon_ti, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float16x8_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float32x4_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint16x8_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint32x4_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint64x2_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int8x16_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int16x8_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int32x4_t, int, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int64x2_t, int, int, arguments) \\\n+\n+#define TEST_CDE_MVE_INTRINSIC_2(name, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, __builtin_neon_ti, uint8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, __builtin_neon_ti, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float16x8_t, uint16x8_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float16x8_t, float32x4_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float32x4_t, uint8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int64x2_t, uint8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int8x16_t, uint8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint16x8_t, uint8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int64x2_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int8x16_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint16x8_t, int, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, int, arguments)\n+\n+#define TEST_CDE_MVE_INTRINSIC_3(name, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, __builtin_neon_ti, uint8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, __builtin_neon_ti, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float16x8_t, float16x8_t, float16x8_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, float32x4_t, uint64x2_t, float16x8_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint16x8_t, uint8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint16x8_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, uint16x8_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int8x16_t, uint8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, int8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, int64x2_t, uint8x16_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int64x2_t, uint8x16_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, uint8x16_t, int64x2_t, arguments) \\\n+  TEST_CDE_MVE_INTRINSIC_SPECIFIED_TYPE(name, uint8x16_t, int64x2_t, int64x2_t, arguments)\n+\n+TEST_CDE_MVE_INTRINSIC_1(vcx1q_u8, (0, 33))\n+TEST_CDE_MVE_INTRINSIC_1(vcx1qa, (0, accum, 33))\n+\n+TEST_CDE_MVE_INTRINSIC_2(vcx2q_u8, (0, n, 33))\n+TEST_CDE_MVE_INTRINSIC_2(vcx2q, (0, n, 33))\n+TEST_CDE_MVE_INTRINSIC_2(vcx2qa, (0, accum, n, 33))\n+\n+TEST_CDE_MVE_INTRINSIC_3(vcx3q_u8, (0, n, m, 12))\n+TEST_CDE_MVE_INTRINSIC_3(vcx3q, (0, n, m, 12))\n+TEST_CDE_MVE_INTRINSIC_3(vcx3qa, (0, accum, n, m, 12))\n+\n+/* This testcase checks that in all compilations this C code produces the\n+   expected CDE instructions from the above intrinsics.\n+\n+   Here we check that there are the expected number of `vcx*` occurences, and\n+   that each function has the expected form in it.\n+\n+   Another testcase (cde-mve-full-assembly.c) checks that when using\n+   `-mfloat-abi=hard` and when compiled with an FPU the above C code produces\n+   code that demonstrates the compiler knows that the intrinsics are constant\n+   and pure, and that demonstrates the compiler generates sane code from them.\n+   That testcase needs these special arguments so it can ignore things like\n+   accounting for the soft float ABI or leftovers from temporaries that are\n+   later removed when generating code for a target with Floating Point\n+   registers but without an FPU.  */\n+\n+/* { dg-final { scan-assembler-times \"\\tvcx1\\t\" 11 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx1a\\t\" 11 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx2\\t\" 24 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx2a\\t\" 12 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx3\\t\" 30 } } */\n+/* { dg-final { scan-assembler-times \"\\tvcx3a\\t\" 15 } } */\n+\n+/*\n+** test_cde_vcx1q_u8__builtin_neon_tiintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8float16x8_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8float32x4_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8uint8x16_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8uint16x8_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8uint32x4_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8uint64x2_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8int8x16_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8int16x8_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8int32x4_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1q_u8int64x2_tintint:\n+** \t...\n+** \tvcx1\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qa__builtin_neon_tiintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qafloat16x8_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qafloat32x4_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qauint8x16_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qauint16x8_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qauint32x4_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qauint64x2_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qaint8x16_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qaint16x8_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qaint32x4_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx1qaint64x2_tintint:\n+** \t...\n+** \tvcx1a\tp0, q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8__builtin_neon_tiuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_t__builtin_neon_tiint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8float16x8_tuint16x8_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8float16x8_tfloat32x4_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8float32x4_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8int64x2_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8int8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint16x8_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tint64x2_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tuint16x8_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q_u8uint8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2q__builtin_neon_tiuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint8x16_t__builtin_neon_tiint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qfloat16x8_tuint16x8_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qfloat16x8_tfloat32x4_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qfloat32x4_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qint64x2_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qint8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint16x8_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tint64x2_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tuint16x8_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2quint8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qa__builtin_neon_tiuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_t__builtin_neon_tiint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qafloat16x8_tuint16x8_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qafloat16x8_tfloat32x4_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qafloat32x4_tuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qaint64x2_tuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qaint8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint16x8_tuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tint64x2_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tuint16x8_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx2qauint8x16_tuint8x16_tint:\n+** \t...\n+** \tvcx2a\tp0, q[0-7], q[0-7], #33\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8__builtin_neon_tiuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_t__builtin_neon_ti:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint16x8_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint16x8_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tuint16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8float16x8_tfloat16x8_tfloat16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8float32x4_tuint64x2_tfloat16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8int8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8int64x2_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint64x2_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tuint8x16_tint64x2_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q_u8uint8x16_tint64x2_tint64x2_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3q__builtin_neon_tiuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_t__builtin_neon_ti:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qfloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qfloat32x4_tuint64x2_tfloat16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint16x8_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint16x8_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tuint16x8_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qint64x2_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint64x2_tuint8x16_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tuint8x16_tint64x2_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3quint8x16_tint64x2_tint64x2_t:\n+** \t...\n+** \tvcx3\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qa__builtin_neon_tiuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_t__builtin_neon_ti:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qafloat16x8_tfloat16x8_tfloat16x8_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qafloat32x4_tuint64x2_tfloat16x8_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint16x8_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint16x8_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tuint16x8_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qaint8x16_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qaint64x2_tuint8x16_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint64x2_tuint8x16_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tuint8x16_tint64x2_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+/*\n+** test_cde_vcx3qauint8x16_tint64x2_tint64x2_t:\n+** \t...\n+** \tvcx3a\tp0, q[0-7], q[0-7], q[0-7], #12\n+** \t...\n+*/\n+"}, {"sha": "e42d0ea489ceb414e5e8c8869bedbd501a3299ed", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bf9163764aba15bb0c254cd38c985713924380/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=78bf9163764aba15bb0c254cd38c985713924380", "patch": "@@ -5120,11 +5120,14 @@ foreach { armfunc armflag armdef } {\n \t\t\"-march=armv8-m.main+cdecp0+cdecp6 -mthumb\"\n \t\t\"defined (__ARM_FEATURE_CDE)\"\n \tarm_v8m_main_cde_fp\n-\t\t\"-march=armv8-m.main+fp+cdecp0+cdecp6 -mthumb\"\n+\t\t\"-march=armv8-m.main+fp+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FP)\"\n \tarm_v8_1m_main_cde_mve\n-\t\t\"-march=armv8.1-m.main+mve+cdecp0+cdecp6 -mthumb\"\n+\t\t\"-march=armv8.1-m.main+mve+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FEATURE_MVE)\"\n+\tarm_v8_1m_main_cde_mve_fp\n+\t\t\"-march=armv8.1-m.main+mve.fp+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n+\t\t\"defined (__ARM_FEATURE_CDE) || __ARM_FEATURE_MVE == 3\"\n \t} {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_FUNC_ok_nocache { } {"}]}