{"sha": "056dd1af584c70c831ecb94d906e453d7d282be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2ZGQxYWY1ODRjNzBjODMxZWNiOTRkOTA2ZTQ1M2Q3ZDI4MmJlMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-07T18:28:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-07T18:28:23Z"}, "message": "semantics.c (finish_decltype_type): Initialize type.\n\n2008-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* semantics.c (finish_decltype_type): Initialize type.\n\nFrom-SVN: r138848", "tree": {"sha": "7406f5a64033da41c177dc99aa4c9bd9767664c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7406f5a64033da41c177dc99aa4c9bd9767664c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056dd1af584c70c831ecb94d906e453d7d282be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056dd1af584c70c831ecb94d906e453d7d282be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056dd1af584c70c831ecb94d906e453d7d282be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056dd1af584c70c831ecb94d906e453d7d282be1/comments", "author": null, "committer": null, "parents": [{"sha": "874d42b93e5926d5b225b97be7608a8c8836614b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874d42b93e5926d5b225b97be7608a8c8836614b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874d42b93e5926d5b225b97be7608a8c8836614b"}], "stats": {"total": 934, "additions": 469, "deletions": 465}, "files": [{"sha": "5e5d1c28c4664aa849524cdb93d53ca1fade361c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 468, "deletions": 464, "changes": 932, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056dd1af584c70c831ecb94d906e453d7d282be1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056dd1af584c70c831ecb94d906e453d7d282be1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=056dd1af584c70c831ecb94d906e453d7d282be1", "patch": "@@ -1,19 +1,23 @@\n+2008-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* semantics.c (finish_decltype_type): Initialize type.\n+\n 2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>\n-\t\n+\n \t* semantics.c (finish_decltype_type): Handle calls to function\n \tpointers and references to functions properly.\n-\t\n+\n 2008-08-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/36460\n-       * parser.c (cp_parser_template_argument): Don't assume that '>>'\n-       following a type-id is an error when in C++0x mode.\n-\t\n+\tPR c++/36460\n+\t* parser.c (cp_parser_template_argument): Don't assume that '>>'\n+\tfollowing a type-id is an error when in C++0x mode.\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 26785\n \t* decl.c (grokdeclarator): Use explicit location with permerror_at.\n-\t\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 8715\n@@ -22,11 +26,11 @@\n 2008-08-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37016\n-\t* decl.c (build_ptrmemfunc_type): Don't require structural \n+\t* decl.c (build_ptrmemfunc_type): Don't require structural\n \tcomparison of PMF types.\n \t* tree.c (cp_build_qualified_type_real): Don't clear\n \ta valid TYPE_PTRMEMFUNC_TYPE.\n-\t* typeck.c (cp_build_unary_op): Still do build_ptrmemfunc in \n+\t* typeck.c (cp_build_unary_op): Still do build_ptrmemfunc in\n \ttemplates.\n \n 2008-08-04  Jason Merrill  <jason@redhat.com>\n@@ -61,11 +65,11 @@\n \t* tree.c (build_aggr_init_expr): Split out...\n \t(build_cplus_new): ...from here.\n \t(stabilize_init): Don't mess with AGGR_INIT_EXPR either.\n-\t* init.c (build_new_1): new T() means value-initialization, \n+\t* init.c (build_new_1): new T() means value-initialization,\n \tnot default-initialization.\n \t(build_vec_init): Likewise.\n \t(build_value_init_1): Use build_aggr_init_expr.\n-\t\n+\n 2008-07-30  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/36767\n@@ -79,7 +83,7 @@\n \tPR 34389\n \t* typeck.c (build_binary_op): Encapsulate code into\n \tshorten_binary_op.\n-\t\n+\n 2008-07-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36852\n@@ -102,7 +106,7 @@\n \n \tPR 34985\n \t* decl.c (duplicate_decls): Merge USED flags.\n-\t\n+\n 2008-07-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36943\n@@ -157,10 +161,10 @@\n \n \t2008-04-29  Doug Kwan  <dougkwan@google.com>\n \n-       * decl2 (File): Include \"gimple.h\"\n-       (cp_write_global_declarations): Use gimple_body instead of\n-       DECL_SAVED_TREE.\n-       * Make-lang.in (cp/decl2.o): Add $(GIMPLE_H)\n+\t* decl2 (File): Include \"gimple.h\"\n+\t(cp_write_global_declarations): Use gimple_body instead of\n+\tDECL_SAVED_TREE.\n+\t* Make-lang.in (cp/decl2.o): Add $(GIMPLE_H)\n \n \t2008-04-10  Diego Novillo  <dnovillo@google.com>\n \n@@ -549,7 +553,7 @@\n \t(LOOKUP_NO_COPY_CTOR_CONVERSION): New macro.\n \t* parser.c (cp_parse_braced_list): Split out from...\n \t(cp_parser_initializer_clause): ...here.\n-\t(cp_parser_postfix_expression): Build up CONSTRUCTOR for compound \n+\t(cp_parser_postfix_expression): Build up CONSTRUCTOR for compound\n \tliteral here.\n \t(cp_lexer_next_token_is_not_keyword): New fn.\n \t(cp_parser_parenthesized_expression_list): Handle { }.\n@@ -569,7 +573,7 @@\n \t(add_function_candidate): Handle LOOKUP_NO_COPY_CTOR_CONVERSION.\n \t(build_user_type_conversion_1): When converting from an init list,\n \twe allow additional conversions except when calling a copy ctor.\n-\t(convert_like_real): Calling an explicit ctor for an init list is \n+\t(convert_like_real): Calling an explicit ctor for an init list is\n \till-formed.  Handle ck_list and ck_addr.  Check narrowing.\n \t(build_new_method_call): If CONSTRUCTOR_IS_DIRECT_INIT is set and\n \tclass doesn't have a list ctor, break the {} into a TREE_LIST.\n@@ -587,7 +591,7 @@\n \t(grokdeclarator): Converting constructors can have more than one parm.\n \t(grok_special_member_properties): Set TYPE_HAS_LIST_CTOR.\n \t* init.c (expand_default_init): Only do digest_init for aggregates.\n-\t* rtti.c (tinfo_base_init): Pass init_list_type_node to \n+\t* rtti.c (tinfo_base_init): Pass init_list_type_node to\n \tbuild_constructor_from_list.\n \t(generic_initializer, ptr_initializer): Ditto.\n \t(ptm_initializer, class_initializer): Ditto.\n@@ -600,7 +604,7 @@\n \t* typeck2.c (store_init_value): Use init_list_type_node.\n \t(digest_init): Likewise.\n \t(check_narrowing): New fn.\n-\t* semantics.c: (finish_compound_literal): Take CONSTRUCTOR instead \n+\t* semantics.c: (finish_compound_literal): Take CONSTRUCTOR instead\n \tof vector of constructor elts.  Handle non-aggregate types.  Make\n \tconstant literals static.\n \t* pt.c: (tsubst_copy_and_build): Adjust.\n@@ -720,16 +724,16 @@\n \n 2008-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35242\n-        * pt.c (maybe_process_partial_specialization): Check the tree\n+\t PR c++/35242\n+\t * pt.c (maybe_process_partial_specialization): Check the tree\n \treturned by push_template_decl for error_mark_node.\n \t* parser.c (cp_parser_class_head): Likewise, check the tree\n-\treturned by the latter. \n+\treturned by the latter.\n \n 2008-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35327\n-        * decl.c (grokdeclarator): In case of wrong return type return\n+\t PR c++/35327\n+\t * decl.c (grokdeclarator): In case of wrong return type return\n \timmediately error_mark_node.\n \n 2008-06-06  Jakub Jelinek  <jakub@redhat.com>\n@@ -801,22 +805,22 @@\n \n 2008-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/36404\n-        * pt.c (push_template_decl_real): Consistently return error_mark_node\n+\t PR c++/36404\n+\t * pt.c (push_template_decl_real): Consistently return error_mark_node\n \ton error.\n \n 2008-06-02  Tomas Bily  <tbily@suse.cz>\n \n-        * typeck.c (is_bitfield_expr_with_lowered_type): Use CASE_CONVERT.\n-        (cp_build_unary_op): Likewise.\n-        (cp_build_indirect_ref): Use CONVERT_EXPR_P.\n-        (maybe_warn_about_returning_address_of_local): Likewise.\n+\t * typeck.c (is_bitfield_expr_with_lowered_type): Use CASE_CONVERT.\n+\t (cp_build_unary_op): Likewise.\n+\t (cp_build_indirect_ref): Use CONVERT_EXPR_P.\n+\t (maybe_warn_about_returning_address_of_local): Likewise.\n \n 2008-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35243\n-        * pt.c (tsubst_initializer_list): Consistently check the tree\n-        returned by tsubst_pack_expansion for error_mark_node.\n+\t PR c++/35243\n+\t * pt.c (tsubst_initializer_list): Consistently check the tree\n+\t returned by tsubst_pack_expansion for error_mark_node.\n \n 2008-05-27  Michael Matz  <matz@suse.de>\n \n@@ -872,16 +876,16 @@\n \n 2008-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35331\n-        * semantics.c (begin_class_definition): Extend checks on the first\n+\t PR c++/35331\n+\t * semantics.c (begin_class_definition): Extend checks on the first\n \targument.\n \n 2008-05-12  Tomas Bily  <tbily@suse.cz>\n \n-        * typeck2.c (digest_init): Use CONVERT_EXPR_P.\n-        * call.c (build_over_call): Likewise.\n-        * error.c (dump_expr): Use CASE_CONVERT.\n-        * class.c (fixed_type_or_null): Likewise.\n+\t * typeck2.c (digest_init): Use CONVERT_EXPR_P.\n+\t * call.c (build_over_call): Likewise.\n+\t * error.c (dump_expr): Use CASE_CONVERT.\n+\t * class.c (fixed_type_or_null): Likewise.\n \n 2008-05-11  Volker Reichelt  <v.reichelt@netcologne.de>\n \n@@ -988,7 +992,7 @@\n \t* tree.c (cp_tree_equal): Handle FIXED_CST.\n \n \tPR c++/35678\n-\t* pt.c (template_template_parm_bindings_ok_p): Set \n+\t* pt.c (template_template_parm_bindings_ok_p): Set\n \tprocessing_template_decl while in this function.\n \n 2008-04-18  Kris Van Hees <kris.van.hees@oracle.com>\n@@ -1006,14 +1010,14 @@\n \t(cp_parser_string_literal): Idem.\n \t(cp_parser_primary_expression): Support CPP_CHAR{16,32} and\n \tCPP_STRING{16,32}.\n-\t(cp_parser_simple_type_specifier): Support RID_CHAR{16,32}. \n+\t(cp_parser_simple_type_specifier): Support RID_CHAR{16,32}.\n \t* tree.c (char_type_p): Support char16_t and char32_t as char types.\n \t* typeck.c (string_conv_p): Support char16_t and char32_t.\n \n 2008-04-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35773\n-\t* call.c (build_user_type_conversion_1): Represent second step of \n+\t* call.c (build_user_type_conversion_1): Represent second step of\n \tcopy-init with an rvalue conversion.\n \t(convert_like_real) [ck_user]: Don't implicitly add it here.\n \n@@ -1025,14 +1029,14 @@\n \n 2008-04-16  Danny Smith  <dannysmith@users.sourceforge.net>\n \n-       PR target/35921\n-       * optimize.c (maybe_clone_body): Copy DECL_DLLIMPORT_P flag\n-       to clone.\n+\tPR target/35921\n+\t* optimize.c (maybe_clone_body): Copy DECL_DLLIMPORT_P flag\n+\tto clone.\n \n 2008-04-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35708\n-\t* semantics.c (finish_compound_literal): Return a TARGET_EXPR, \n+\t* semantics.c (finish_compound_literal): Return a TARGET_EXPR,\n \tnot a pushed variable.\n \n 2008-04-09  Volker Reichelt  <v.reichelt@netcologne.de>\n@@ -1149,7 +1153,7 @@\n 2008-04-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35734\n-\t* class.c (type_has_user_nondefault_constructor): A template \n+\t* class.c (type_has_user_nondefault_constructor): A template\n \tcounts as a nondefault constructor.\n \n 2008-04-04  Paolo Bonzini  <bonzini@gnu.org>\n@@ -1177,14 +1181,14 @@\n \t* Make-lang.in (c++_OBJS): New variable.\n \n 2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n-    \n+\n \t* optimize.c (clone_body): New, from tree-inline.c.\n \n 2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * method.c (synthesize_method): Use {push,pop}_function_context.\n-        * name-lookup.c (push_to_top_level): Likewise.\n-        * parser.c (cp_parser_late_parsing_for_member): Likewise.\n+\t * method.c (synthesize_method): Use {push,pop}_function_context.\n+\t * name-lookup.c (push_to_top_level): Likewise.\n+\t * parser.c (cp_parser_late_parsing_for_member): Likewise.\n \n 2008-03-30  Volker Reichelt  <v.reichelt@netcologne.de>\n \n@@ -1238,17 +1242,17 @@\n \n 2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * pt.c (coerce_template_template_parm): Moved the body of the loop\n-       of coerce_template_template_parms here, to make iteration over a\n-       template argument pack simpler.\n-       Also, allow matching of a template parameter pack in the template\n-       template parameter to a template parameter in the template\n-       template argument.\n-       (coerce_template_template_parms): Deal with variadic template\n-       template parameters. Use coerce_template_template_parm.\n-       (unify): Make sure we coerce the template template argument's\n-       template arguments to the template template parameter's template\n-       parameters, not the other way around.\n+\t* pt.c (coerce_template_template_parm): Moved the body of the loop\n+\tof coerce_template_template_parms here, to make iteration over a\n+\ttemplate argument pack simpler.\n+\tAlso, allow matching of a template parameter pack in the template\n+\ttemplate parameter to a template parameter in the template\n+\ttemplate argument.\n+\t(coerce_template_template_parms): Deal with variadic template\n+\ttemplate parameters. Use coerce_template_template_parm.\n+\t(unify): Make sure we coerce the template template argument's\n+\ttemplate arguments to the template template parameter's template\n+\tparameters, not the other way around.\n \n 2008-03-25  Tom Tromey  <tromey@redhat.com>\n \n@@ -1260,208 +1264,208 @@\n \n 2008-03-25  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * typeck.c (composite_pointer_type_r): Add SFINAE support.\n-       (composite_pointer_type): Ditto.\n-       (common_type): Fix call to composite_pointer_type.\n-       (cxx_sizeof_nowarn): New; used to be a macro.\n-       (cxx_sizeof_expr): Add SFINAE support.\n-       (cxx_alignof_expr): Ditto.\n-       (decay_conversion): Fix calls for SFINAE support.\n-       (rationalize_conditional_expr): Add SFINAE support.\n-       (build_class_member_access_expr): Ditto.\n-       (finish_class_member_access_expr): Ditto.\n-       (build_x_indirect_ref): Ditto.\n-       (build_indirect_ref): Original version renamed to\n-       cp_build_indirect_ref; new version provides a bridge from\n-       c-common.\n-       (cp_build_indirect_ref): Was build_indirect_ref; added SFINAE\n-       support.\n-       (get_member_function_from_ptrfunc): Fix calls for SFINAE support.\n-       (build_function_call): Original version renamed to\n-       cp_build_function_call; new version provides a bridge from\n-       c-common.\n-       (cp_build_function_call): Was build_function_call; added SFINAE\n-       support.\n-       (convert_arguments): Add SFINAE support.\n-       (build_x_binary_op): Ditto.\n-       (build_binary_op): Original version renamed to cp_build_binary_op;\n-       new version provides a bridge from c-common.\n-       (cp_build_binary_op): Was build_binary_op; added SFINAE support.\n-       (pointer_diff): Fix calls for SFINAE.\n-       (build_x_unary_op): Add SFINAE support.\n-       (condition_conversion): Fix calls for SFINAE.\n-       (build_unary_op): Original version renamed to cp_build_unary_op;\n-       new version provides a bridge from c-common.\n-       (cp_build_unary_op): Was build_unary_op; added SFINAE support.\n-       (unary_complex_lvalue): Fix calls for SFINAE.\n-       (build_x_conditional_expr): Add SFINAE support.\n-       (build_x_compound_expr_from_list): Fix calls for SFINAE.\n-       (build_x_compound_expr): Add SFINAE support.\n-       (convert_ptrmem): Fix calls for SFINAE.\n-       (build_static_cast_1): Add SFINAE support.\n-       (build_static_cast): Ditto.\n-       (build_reinterpret_cast_1): Ditto.\n-       (build_reinterpret_cast): Ditto.\n-       (build_const_cast_1): Ditto.\n-       (build_const_cast): Ditto.\n-       (build_c_cast): Ditto.\n-       (build_modify_expr): Original version renamed to\n-       cp_build_modify_expr; new version provides a bridge from c-common.\n-       (cp_build_modify_expr): Was build_modify_expr; added SFINAE\n-       support.\n-       (build_x_modify_expr): Add SFINAE support.\n-       (build_ptrmemfunc): Fix calls for SFINAE.\n-       (convert_for_assignment): Add SFINAE support.\n-       (convert_for_initialization): Ditto.\n-       (check_return_expr): Fix calls for SFINAE.\n-       (lvalue_or_else): Add SFINAE support.\n-       * init.c (perform_member_init): Fix calls for SFINAE.\n-       (emit_mem_initializers): Ditto.\n-       (expand_virtual_init): Ditto.\n-       (expand_cleanup_for_base): Ditto.\n-       (build_aggr_init): Add SFINAE support.\n-       (expand_default_init): Ditto.\n-       (expand_aggr_init_1): Fix calls for SFINAE.\n-       (build_offset_ref): Ditto.\n-       (build_new_1): Add SFINAE support.\n-       (build_new): Ditto.\n-       (build_vec_delete_1): Fix calls for SFINAE.\n-       (get_temp_regvar): Ditto.\n-       (build_vec_init): Add SFINAE support.\n-       (build_dtor_call): Fix calls for SFINAE.\n-       (build_delete): Ditto.\n-       (push_base_cleanups): Ditto.\n-       (build_vec_delete_1): Ditto.\n-       * class.c (build_base_path): Fix calls for SFINAE.\n-       (build_simple_base_path): Ditto.\n-       (convert_to_base_statically): Ditto.\n-       (build_vfn_ref): Ditto.\n-       (resolve_address_of_overloaded_function): Ditto.\n-       * decl.c (check_initializer): Fix calls for SFINAE.\n-       (register_dtor_fn): Ditto.\n-       (compute_array_index_type): Ditto.\n-       (finish_enum): Ditto.\n-       (start_preparsed_function): Ditto.\n-       (cxx_maybe_build_cleanup): Ditto.\n-       * call.c (convert_like): Add COMPLAIN argument.\n-       (convert_like_with_context): Ditto.\n-       (build_this): Fix calls for SFINAE.\n-       (build_user_type_conversion): Ditto.\n-       (resolve_args): Ditto.\n-       (build_new_function_call): Add SFINAE support.\n-       (build_operator_new_call): Fix calls for SFINAE.\n-       (build_object_call): Add SFINAE support.\n-       (build_conditional_expr): Ditto.\n-       (build_new_op): Ditto.\n-       (build_op_delete_call): Fix calls for SFINAE.\n-       (build_temp): Ditto.\n-       (convert_like_real): Add SFINAE support.\n-       (build_x_va_arg): Fix calls for SFINAE.\n-       (convert_default_arg): Ditto.\n-       (build_over_call): Add SFINAE support.\n-       (build_java_interface_fn_ref): Fix calls for SFINAE.\n-       (build_special_member_call): Add SFINAE support.\n-       (build_new_method_call): Ditto.\n-       (perform_implicit_conversion): Ditto.\n-       (perform_direct_initialization_if_possible): Ditto.\n-       (initialize_reference): Fix calls for SFINAE.\n-       * method.c (do_build_assign_ref): Fix calls for SFINAE.\n-       * rtti.c (build_headof): Fix calls for SFINAE.\n-       (get_tinfo_decl_dynamic): Ditto.\n-       (get_typeid): Ditto.\n-       (build_dynamic_cast_1): Add SFINAE support.\n-       (build_dynamic_cast): Ditto.\n-       (tinfo_base_init): Fix calls for SFINAE.\n-       * except.c (do_get_exception_ptr): Fix calls for SFINAE.\n-       (do_end_catch): Ditto.\n-       (initialize_handler_parm): Ditto.\n-       (expand_start_catch_block): Ditto.\n-       (do_allocate_exception): Ditto.\n-       (do_free_exception): Ditto.\n-       (build_throw): Ditto.\n-       * cvt.c (build_up_reference): Fix calls for SFINAE.\n-       (convert_to_reference): Ditto.\n-       (ocp_convert): Ditto.\n-       (convert_to_void): Add SFINAE support.\n-       * tree.c (build_dummy_object): Fix calls for SFINAE.\n-       (stabilize_expr): Ditto.\n-       * cp-tree.h (build_conditional_expr): Add tsubst_flags_t\n-       parameter.\n-       (build_new_method_call): Ditto.\n-       (build_special_member_call): Ditto.\n-       (build_new_op): Ditto.\n-       (perform_implicit_conversion): Ditto.\n-       (perform_direct_initialization_if_possible): Ditto.\n-       (convert_to_void): Ditto.\n-       (build_aggr_init): Ditto.\n-       (build_new): Ditto.\n-       (build_vec_init): Ditto.\n-       (build_dynamic_cast): Ditto.\n-       (finish_call_expr): Ditto\n-       (cxx_sizeof_or_alignof_expr): Add COMPLAIN parameter.\n-       (cxx_sizeof_nowarn): Remove macro; add function declaration.\n-       (build_class_member_access_expr): Add tsubst_flags_t parameter.\n-       (finish_class_member_access_expr): Ditto.\n-       (build_x_indirect_ref): Ditto.\n-       (cp_build_indirect_ref): New.\n-       (cp_build_function_call): Add tsubst_flags_t parameter.\n-       (build_x_unary_op): Ditto.\n-       (cp_build_unary_op): New.\n-       (build_x_conditional_expr): Add tsubst_flags_t parameter.\n-       (build_x_compound_expr): Ditto.\n-       (build_compound_expr): Ditto.\n-       (build_static_cast): Ditto.\n-       (build_reinterpret_cast): Ditto.\n-       (build_const_cast): Ditto.\n-       (build_c_cast): Ditto.\n-       (build_x_modify_expr): Ditto.\n-       (cp_build_modify_expr): New.\n-       (convert_for_initialization): Add tsubst_flags_t parameter.\n-       (cp_build_binary_op): Remove macro; add function declaration.\n-       (invalid_nonstatic_memfn_p): Add tsubst_flags_t parameter.\n-       (lvalue_or_else): Ditto.\n-       (build_functional_cast): Ditto.\n-       * typeck2.c (digest_init): Fix calls for SFINAE.\n-       (process_init_constructor_array): Ditto.\n-       (process_init_constructor_record): Ditto.\n-       (build_x_arrow): Ditto.\n-       (build_m_component_ref): Ditto.\n-       (build_functional_cast): Add SFINAE support.\n-       * pt.c (tsubst_copy_and_build): Add (more) SFINAE support.\n-       * semantics.c (simplify_loop_decl_cond): Fix calls for SFINAE.\n-       (finish_expr_stmt): Ditto.\n-       (finish_for_expr): Ditto.\n-       (finish_asm_stmt): Ditto.\n-       (finish_non_static_data_member): Ditto.\n-       (finish_qualified_id_expr): Ditto.\n-       (finish_call_expr): Add SFINAE support.\n-       (finish_increment_expr): Fix calls for SFINAE.\n-       (finish_unary_op_expr): Ditto.\n-       (simplify_aggr_init_expr): Ditto.\n-       (finish_omp_clauses): Ditto.\n-       (finish_omp_for): Ditto.\n-       (finish_omp_barrier): Ditto.\n-       (finish_omo_flush): Ditto.\n-       * decl2.c (grok_array_decl): Fix calls or SFINAE.\n-       (build_anon_union_vars): Ditto.\n-       (get_guard_cond): Ditto.\n-       (set_guard): Ditto.\n-       (one_static_initialization_or_destruction): Ditto.\n-       (do_static_initialization_or_destruction): Ditto.\n-       (generate_ctor_or_dtor_function): Ditto.\n-       (build_offset_ref_call_from_tree): Ditto.\n-       * parser.c (cp_parser_postfix_expression): Fix calls for SFINAE.\n-       (cp_parser_postfix_dot_deref_expression): Ditto.\n-       (cp_parser_unary_expression): Ditto.\n-       (cp_parser_new_expression): Ditto.\n-       (cp_parser_cast_expression): Ditto.\n-       (cp_parser_binary_expression): Ditto.\n-       (cp_parser_question_colon_clause): Ditto.\n-       (cp_parser_assignment_expression): Ditto.\n-       (cp_parser_expression): Ditto.\n-       (cp_parser_builtin_offsetof): Ditto.\n-       (cp_parser_template_argument): Ditto.\n-       (cp_parser_functional_cast): Ditto.\n+\t* typeck.c (composite_pointer_type_r): Add SFINAE support.\n+\t(composite_pointer_type): Ditto.\n+\t(common_type): Fix call to composite_pointer_type.\n+\t(cxx_sizeof_nowarn): New; used to be a macro.\n+\t(cxx_sizeof_expr): Add SFINAE support.\n+\t(cxx_alignof_expr): Ditto.\n+\t(decay_conversion): Fix calls for SFINAE support.\n+\t(rationalize_conditional_expr): Add SFINAE support.\n+\t(build_class_member_access_expr): Ditto.\n+\t(finish_class_member_access_expr): Ditto.\n+\t(build_x_indirect_ref): Ditto.\n+\t(build_indirect_ref): Original version renamed to\n+\tcp_build_indirect_ref; new version provides a bridge from\n+\tc-common.\n+\t(cp_build_indirect_ref): Was build_indirect_ref; added SFINAE\n+\tsupport.\n+\t(get_member_function_from_ptrfunc): Fix calls for SFINAE support.\n+\t(build_function_call): Original version renamed to\n+\tcp_build_function_call; new version provides a bridge from\n+\tc-common.\n+\t(cp_build_function_call): Was build_function_call; added SFINAE\n+\tsupport.\n+\t(convert_arguments): Add SFINAE support.\n+\t(build_x_binary_op): Ditto.\n+\t(build_binary_op): Original version renamed to cp_build_binary_op;\n+\tnew version provides a bridge from c-common.\n+\t(cp_build_binary_op): Was build_binary_op; added SFINAE support.\n+\t(pointer_diff): Fix calls for SFINAE.\n+\t(build_x_unary_op): Add SFINAE support.\n+\t(condition_conversion): Fix calls for SFINAE.\n+\t(build_unary_op): Original version renamed to cp_build_unary_op;\n+\tnew version provides a bridge from c-common.\n+\t(cp_build_unary_op): Was build_unary_op; added SFINAE support.\n+\t(unary_complex_lvalue): Fix calls for SFINAE.\n+\t(build_x_conditional_expr): Add SFINAE support.\n+\t(build_x_compound_expr_from_list): Fix calls for SFINAE.\n+\t(build_x_compound_expr): Add SFINAE support.\n+\t(convert_ptrmem): Fix calls for SFINAE.\n+\t(build_static_cast_1): Add SFINAE support.\n+\t(build_static_cast): Ditto.\n+\t(build_reinterpret_cast_1): Ditto.\n+\t(build_reinterpret_cast): Ditto.\n+\t(build_const_cast_1): Ditto.\n+\t(build_const_cast): Ditto.\n+\t(build_c_cast): Ditto.\n+\t(build_modify_expr): Original version renamed to\n+\tcp_build_modify_expr; new version provides a bridge from c-common.\n+\t(cp_build_modify_expr): Was build_modify_expr; added SFINAE\n+\tsupport.\n+\t(build_x_modify_expr): Add SFINAE support.\n+\t(build_ptrmemfunc): Fix calls for SFINAE.\n+\t(convert_for_assignment): Add SFINAE support.\n+\t(convert_for_initialization): Ditto.\n+\t(check_return_expr): Fix calls for SFINAE.\n+\t(lvalue_or_else): Add SFINAE support.\n+\t* init.c (perform_member_init): Fix calls for SFINAE.\n+\t(emit_mem_initializers): Ditto.\n+\t(expand_virtual_init): Ditto.\n+\t(expand_cleanup_for_base): Ditto.\n+\t(build_aggr_init): Add SFINAE support.\n+\t(expand_default_init): Ditto.\n+\t(expand_aggr_init_1): Fix calls for SFINAE.\n+\t(build_offset_ref): Ditto.\n+\t(build_new_1): Add SFINAE support.\n+\t(build_new): Ditto.\n+\t(build_vec_delete_1): Fix calls for SFINAE.\n+\t(get_temp_regvar): Ditto.\n+\t(build_vec_init): Add SFINAE support.\n+\t(build_dtor_call): Fix calls for SFINAE.\n+\t(build_delete): Ditto.\n+\t(push_base_cleanups): Ditto.\n+\t(build_vec_delete_1): Ditto.\n+\t* class.c (build_base_path): Fix calls for SFINAE.\n+\t(build_simple_base_path): Ditto.\n+\t(convert_to_base_statically): Ditto.\n+\t(build_vfn_ref): Ditto.\n+\t(resolve_address_of_overloaded_function): Ditto.\n+\t* decl.c (check_initializer): Fix calls for SFINAE.\n+\t(register_dtor_fn): Ditto.\n+\t(compute_array_index_type): Ditto.\n+\t(finish_enum): Ditto.\n+\t(start_preparsed_function): Ditto.\n+\t(cxx_maybe_build_cleanup): Ditto.\n+\t* call.c (convert_like): Add COMPLAIN argument.\n+\t(convert_like_with_context): Ditto.\n+\t(build_this): Fix calls for SFINAE.\n+\t(build_user_type_conversion): Ditto.\n+\t(resolve_args): Ditto.\n+\t(build_new_function_call): Add SFINAE support.\n+\t(build_operator_new_call): Fix calls for SFINAE.\n+\t(build_object_call): Add SFINAE support.\n+\t(build_conditional_expr): Ditto.\n+\t(build_new_op): Ditto.\n+\t(build_op_delete_call): Fix calls for SFINAE.\n+\t(build_temp): Ditto.\n+\t(convert_like_real): Add SFINAE support.\n+\t(build_x_va_arg): Fix calls for SFINAE.\n+\t(convert_default_arg): Ditto.\n+\t(build_over_call): Add SFINAE support.\n+\t(build_java_interface_fn_ref): Fix calls for SFINAE.\n+\t(build_special_member_call): Add SFINAE support.\n+\t(build_new_method_call): Ditto.\n+\t(perform_implicit_conversion): Ditto.\n+\t(perform_direct_initialization_if_possible): Ditto.\n+\t(initialize_reference): Fix calls for SFINAE.\n+\t* method.c (do_build_assign_ref): Fix calls for SFINAE.\n+\t* rtti.c (build_headof): Fix calls for SFINAE.\n+\t(get_tinfo_decl_dynamic): Ditto.\n+\t(get_typeid): Ditto.\n+\t(build_dynamic_cast_1): Add SFINAE support.\n+\t(build_dynamic_cast): Ditto.\n+\t(tinfo_base_init): Fix calls for SFINAE.\n+\t* except.c (do_get_exception_ptr): Fix calls for SFINAE.\n+\t(do_end_catch): Ditto.\n+\t(initialize_handler_parm): Ditto.\n+\t(expand_start_catch_block): Ditto.\n+\t(do_allocate_exception): Ditto.\n+\t(do_free_exception): Ditto.\n+\t(build_throw): Ditto.\n+\t* cvt.c (build_up_reference): Fix calls for SFINAE.\n+\t(convert_to_reference): Ditto.\n+\t(ocp_convert): Ditto.\n+\t(convert_to_void): Add SFINAE support.\n+\t* tree.c (build_dummy_object): Fix calls for SFINAE.\n+\t(stabilize_expr): Ditto.\n+\t* cp-tree.h (build_conditional_expr): Add tsubst_flags_t\n+\tparameter.\n+\t(build_new_method_call): Ditto.\n+\t(build_special_member_call): Ditto.\n+\t(build_new_op): Ditto.\n+\t(perform_implicit_conversion): Ditto.\n+\t(perform_direct_initialization_if_possible): Ditto.\n+\t(convert_to_void): Ditto.\n+\t(build_aggr_init): Ditto.\n+\t(build_new): Ditto.\n+\t(build_vec_init): Ditto.\n+\t(build_dynamic_cast): Ditto.\n+\t(finish_call_expr): Ditto\n+\t(cxx_sizeof_or_alignof_expr): Add COMPLAIN parameter.\n+\t(cxx_sizeof_nowarn): Remove macro; add function declaration.\n+\t(build_class_member_access_expr): Add tsubst_flags_t parameter.\n+\t(finish_class_member_access_expr): Ditto.\n+\t(build_x_indirect_ref): Ditto.\n+\t(cp_build_indirect_ref): New.\n+\t(cp_build_function_call): Add tsubst_flags_t parameter.\n+\t(build_x_unary_op): Ditto.\n+\t(cp_build_unary_op): New.\n+\t(build_x_conditional_expr): Add tsubst_flags_t parameter.\n+\t(build_x_compound_expr): Ditto.\n+\t(build_compound_expr): Ditto.\n+\t(build_static_cast): Ditto.\n+\t(build_reinterpret_cast): Ditto.\n+\t(build_const_cast): Ditto.\n+\t(build_c_cast): Ditto.\n+\t(build_x_modify_expr): Ditto.\n+\t(cp_build_modify_expr): New.\n+\t(convert_for_initialization): Add tsubst_flags_t parameter.\n+\t(cp_build_binary_op): Remove macro; add function declaration.\n+\t(invalid_nonstatic_memfn_p): Add tsubst_flags_t parameter.\n+\t(lvalue_or_else): Ditto.\n+\t(build_functional_cast): Ditto.\n+\t* typeck2.c (digest_init): Fix calls for SFINAE.\n+\t(process_init_constructor_array): Ditto.\n+\t(process_init_constructor_record): Ditto.\n+\t(build_x_arrow): Ditto.\n+\t(build_m_component_ref): Ditto.\n+\t(build_functional_cast): Add SFINAE support.\n+\t* pt.c (tsubst_copy_and_build): Add (more) SFINAE support.\n+\t* semantics.c (simplify_loop_decl_cond): Fix calls for SFINAE.\n+\t(finish_expr_stmt): Ditto.\n+\t(finish_for_expr): Ditto.\n+\t(finish_asm_stmt): Ditto.\n+\t(finish_non_static_data_member): Ditto.\n+\t(finish_qualified_id_expr): Ditto.\n+\t(finish_call_expr): Add SFINAE support.\n+\t(finish_increment_expr): Fix calls for SFINAE.\n+\t(finish_unary_op_expr): Ditto.\n+\t(simplify_aggr_init_expr): Ditto.\n+\t(finish_omp_clauses): Ditto.\n+\t(finish_omp_for): Ditto.\n+\t(finish_omp_barrier): Ditto.\n+\t(finish_omo_flush): Ditto.\n+\t* decl2.c (grok_array_decl): Fix calls or SFINAE.\n+\t(build_anon_union_vars): Ditto.\n+\t(get_guard_cond): Ditto.\n+\t(set_guard): Ditto.\n+\t(one_static_initialization_or_destruction): Ditto.\n+\t(do_static_initialization_or_destruction): Ditto.\n+\t(generate_ctor_or_dtor_function): Ditto.\n+\t(build_offset_ref_call_from_tree): Ditto.\n+\t* parser.c (cp_parser_postfix_expression): Fix calls for SFINAE.\n+\t(cp_parser_postfix_dot_deref_expression): Ditto.\n+\t(cp_parser_unary_expression): Ditto.\n+\t(cp_parser_new_expression): Ditto.\n+\t(cp_parser_cast_expression): Ditto.\n+\t(cp_parser_binary_expression): Ditto.\n+\t(cp_parser_question_colon_clause): Ditto.\n+\t(cp_parser_assignment_expression): Ditto.\n+\t(cp_parser_expression): Ditto.\n+\t(cp_parser_builtin_offsetof): Ditto.\n+\t(cp_parser_template_argument): Ditto.\n+\t(cp_parser_functional_cast): Ditto.\n \n 2008-03-24  Tom Tromey  <tromey@redhat.com>\n \n@@ -1524,8 +1528,8 @@\n \n 2008-03-18  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * cp-lang.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n-\t\n+\t * cp-lang.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.\n+\n 2008-03-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35548\n@@ -1538,17 +1542,17 @@\n \tRevert:\n \t2008-02-04  Richard Guenther  <rguenther@suse.de>\n \n-        PR java/35035\n-        * decl.c (record_builtin_java_type): Make jboolean a\n-        integer type again where its mode doesn't match that of bool.\n+\t PR java/35035\n+\t * decl.c (record_builtin_java_type): Make jboolean a\n+\t integer type again where its mode doesn't match that of bool.\n \n \t2008-01-25  Richard Guenther  <rguenther@suse.de>\n \n-        PR c++/33887\n-        * decl.c (record_builtin_java_type): Make __java_boolean\n-        a variant of bool.\n-        * typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check\n-        after TYPE_MAIN_VARIANT check.\n+\t PR c++/33887\n+\t * decl.c (record_builtin_java_type): Make __java_boolean\n+\t a variant of bool.\n+\t * typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check\n+\t after TYPE_MAIN_VARIANT check.\n \n 2008-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1604,7 +1608,7 @@\n \t(convert_to_void): Use error instead of pedwarn.\n \t* error.c (cp_cpp_error): Use pedantic_warning_kind.\n \t* decl.c (compute_array_index_type): Use constant_expression_error.\n-\t\n+\n 2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note\n@@ -1677,33 +1681,33 @@\n \n \tPR 26264\n \t* call.c (magic_varargs_p):  Remove BUILT_IN_STDARG_START.\n-\t\n+\n 2008-02-26  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (duplicate_decls): Remove decl from global mapping\n \tbefore ggc_freeing it.\n \n 2008-02-26  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/35323\n-        * name-lookup.c (arg_assoc_type): Handle FIXED_POINT_TYPE.\n+\t PR c++/35323\n+\t * name-lookup.c (arg_assoc_type): Handle FIXED_POINT_TYPE.\n \n 2008-02-26  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n-\t\n+\n \t* typeck.c (build_class_member_access_expr): Add appropriate\n \tOPT_W* parameter to warning.\n \t(build_reinterpret_cast_1): Likewise.\n \t* name-lookup.c (push_overloaded_decl): Likewise.\n-\t\n+\n 2008-02-25  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/35333\n-        * error.c (dump_expr): Handle CONJ_EXPR.\n+\t PR c++/35333\n+\t * error.c (dump_expr): Handle CONJ_EXPR.\n \n 2008-02-25  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/35338\n-        * error.c (dump_type): Handle FIXED_POINT_TYPE.\n+\t PR c++/35338\n+\t * error.c (dump_type): Handle FIXED_POINT_TYPE.\n \t(dump_expr): Handle FIXED_CST.\n \n 2008-02-24  Jason Merrill  <jason@redhat.com>\n@@ -1712,7 +1716,7 @@\n \t(cp_parser_namespace_definition): Likewise.\n \n \tPR c++/33486\n-\t* name-lookup.c (arg_assoc_namespace): Look down into inline \n+\t* name-lookup.c (arg_assoc_namespace): Look down into inline\n \tnamespaces, too.\n \n 2008-02-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n@@ -1724,7 +1728,7 @@\n \t(build_reinterpret_cast_1): Update call to\n \tcheck_for_casting_away_constness.\n \t(build_const_cast_1): Likewise.\n-\t\n+\n 2008-02-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* error.c (dump_expr): Don't deal directly with NEW_EXPR (and\n@@ -1748,8 +1752,8 @@\n \tRevert:\n \t2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/28743\n-        * pt.c (determine_specialization): In case of function templates,\n+\t PR c++/28743\n+\t * pt.c (determine_specialization): In case of function templates,\n \twhen the type of DECL does not match FN there is no match.\n \n 2008-02-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n@@ -1816,8 +1820,8 @@\n \n 2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/28743\n-        * pt.c (determine_specialization): In case of function templates,\n+\t PR c++/28743\n+\t * pt.c (determine_specialization): In case of function templates,\n \twhen the type of DECL does not match FN there is no match.\n \n 2008-02-13  Jakub Jelinek  <jakub@redhat.com>\n@@ -1830,7 +1834,7 @@\n 2008-02-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34962, c++/34937, c++/34939\n-\t* decl2.c (is_late_template_attribute): Always defer attributes \n+\t* decl2.c (is_late_template_attribute): Always defer attributes\n \tvector_size and weak.\n \n \tPR c++/34774\n@@ -1864,12 +1868,12 @@\n \n 2008-02-11  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/35113\n-       * tree.c (cp_build_qualified_type_real): When building a\n-       cv-qualified array type, build it as a unique type with\n-       build_cplus_array_type_1 and then adopt the unqualified type's\n-       main variant.\n-\t\n+\tPR c++/35113\n+\t* tree.c (cp_build_qualified_type_real): When building a\n+\tcv-qualified array type, build it as a unique type with\n+\tbuild_cplus_array_type_1 and then adopt the unqualified type's\n+\tmain variant.\n+\n 2008-02-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/35077\n@@ -1878,7 +1882,7 @@\n 2008-02-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34094\n-\t* decl2.c (cp_write_global_declarations): Don't write out static \n+\t* decl2.c (cp_write_global_declarations): Don't write out static\n \tdata members with DECL_IN_AGGR_P set.\n \n 2008-02-08  Jason Merrill  <jason@redhat.com>\n@@ -1931,7 +1935,7 @@\n \tTYPE_MAIN_VARIANT to add new attributes, be sure to also modify\n \tall of the other variants to add those same attributes. Otherwise,\n \tthe main variant will be inconsistent with those other variants.\n-\t\n+\n 2008-02-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR java/35035\n@@ -1947,7 +1951,7 @@\n \t* typeck2.c (build_functional_cast): Call it.\n \t* cp-gimplify.c (cp_gimplify_init_expr): Handle its output.\n \n-\t* cp-tree.h (TYPE_HAS_USER_CONSTRUCTOR): Rename from \n+\t* cp-tree.h (TYPE_HAS_USER_CONSTRUCTOR): Rename from\n \tTYPE_HAS_CONSTRUCTOR.\n \t* class.c (finish_struct_bits, maybe_warn_about_overly_private_class,\n \tadd_implicitly_declared_members): Adjust.\n@@ -1964,15 +1968,15 @@\n \t(instantiate_class_template): Adjust.\n \n 2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>\n-           Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n-       PR c++/34935\n-       PR c++/34936\n-       * typeck.c (structural_comptypes): Handle comparisons of\n-       VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, FIXED_POINT_TYPE, and\n-       REAL_TYPE nodes.\n-       * mangle.c (write_builtin_type): Map down to the canonical type,\n-       which will be one of the predefined type nodes.\n+\tPR c++/34935\n+\tPR c++/34936\n+\t* typeck.c (structural_comptypes): Handle comparisons of\n+\tVOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, FIXED_POINT_TYPE, and\n+\tREAL_TYPE nodes.\n+\t* mangle.c (write_builtin_type): Map down to the canonical type,\n+\twhich will be one of the predefined type nodes.\n \n 2008-01-29  Michael Meissner  <michael.meissner@amd.com>\n \n@@ -2005,7 +2009,7 @@\n \t(check_for_bare_parameter_packs): Parameter is now a tree, not a\n \ttree*.\n \t(process_template_parm): Tweak call to\n-\tcheck_for_bare_parameter_packs.  \n+\tcheck_for_bare_parameter_packs.\n \t(push_template_decl_real): Tweak calls to\n \tcheck_for_bare_parameter_packs. If bare parameter packs are found\n \tin the list of exceptions, clear out that list after giving an\n@@ -2073,7 +2077,7 @@\n \tto complex.\n \t(compare_ics): Such a conversion is worse than a normal arithmetic\n \tconversion.\n-\t\n+\n 2008-01-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/33887\n@@ -2082,14 +2086,14 @@\n \n 2008-01-24  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34603\n-        * pt.c (push_template_decl_real): Return error_mark_node in case\n+\t PR c++/34603\n+\t * pt.c (push_template_decl_real): Return error_mark_node in case\n \tof template definition of non-template.\n \n 2008-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34913\n-\t* decl2.c (is_late_template_attribute): Defer any attribute with \n+\t* decl2.c (is_late_template_attribute): Defer any attribute with\n \tdependent args.  Also defer type attributes if the type is dependent.\n \n 2008-01-22  Jakub Jelinek  <jakub@redhat.com>\n@@ -2105,13 +2109,13 @@\n 2008-01-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28560\n-\t* decl.c (groktypename): Also ignore attributes on dependent \n+\t* decl.c (groktypename): Also ignore attributes on dependent\n \tpossibly-class types.\n \n \tPR c++/34912\n-\t* friend.c (do_friend): Check for prior declaration of a friend \n+\t* friend.c (do_friend): Check for prior declaration of a friend\n \tfunction of a local class.\n-\t* name-lookup.c (lookup_name_innermost_nonclass_level): \n+\t* name-lookup.c (lookup_name_innermost_nonclass_level):\n \tNo longer static.\n \t* name-lookup.h: Declare it.\n \n@@ -2153,14 +2157,14 @@\n \n 2008-01-20  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34891\n-        * error.c (dump_expr): Deal with VIEW_CONVERT_EXPR.\n+\t PR c++/34891\n+\t * error.c (dump_expr): Deal with VIEW_CONVERT_EXPR.\n \n 2008-01-20  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34776\n+\t PR c++/34776\n \tPR c++/34486\n-        * name-lookup.c (do_class_using_decl): Do not call constructor_name_p\n+\t * name-lookup.c (do_class_using_decl): Do not call constructor_name_p\n \ton non-IS_AGGR_TYPE scope.\n \t(constructor_name_p): Assert IS_AGGR_TYPE.\n \n@@ -2240,42 +2244,42 @@\n \n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/34314\n-       * error.c (dump_simple_decl): Display ellipsis for template\n-       non-type parameter packs.\n-       (dump_decl): Display ellipsis for template type parameter packs.\n-       (dump_template_decl): Display ellipsis for template template\n-       parameter packs.\n-       * pt.c (redeclare_class_template): When redeclaring a class\n-       template, check for collisions between template parameters and\n-       template parameter packs.\n+\tPR c++/34314\n+\t* error.c (dump_simple_decl): Display ellipsis for template\n+\tnon-type parameter packs.\n+\t(dump_decl): Display ellipsis for template type parameter packs.\n+\t(dump_template_decl): Display ellipsis for template template\n+\tparameter packs.\n+\t* pt.c (redeclare_class_template): When redeclaring a class\n+\ttemplate, check for collisions between template parameters and\n+\ttemplate parameter packs.\n \n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/33964\n-       * pt.c (process_partial_specialization): Don't mark template\n-       parameters that occur in non-deduced contexts.\n-       (struct pair_fn_data): Add include_nondeduced_p.\n-       (for_each_template_parm_r): Only visit non-deduced contexts if\n-       include_nondeduced_p is set.\n-       (for_each_template_parm): Added parameter include_nondeduced_p,\n-       which states whether template parameters found in non-deduced\n-       contexts should be visited.\n-       (uses_template_parms): Visit all template parameters, even those\n-       in non-deduced contexts.\n+\tPR c++/33964\n+\t* pt.c (process_partial_specialization): Don't mark template\n+\tparameters that occur in non-deduced contexts.\n+\t(struct pair_fn_data): Add include_nondeduced_p.\n+\t(for_each_template_parm_r): Only visit non-deduced contexts if\n+\tinclude_nondeduced_p is set.\n+\t(for_each_template_parm): Added parameter include_nondeduced_p,\n+\twhich states whether template parameters found in non-deduced\n+\tcontexts should be visited.\n+\t(uses_template_parms): Visit all template parameters, even those\n+\tin non-deduced contexts.\n \n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/34052\n-       * pt.c (check_default_tmpl_args): Check for parameter packs that\n-       aren't at the end of a primary template.\n-       (push_template_decl_real): Remove check for parameter packs that\n-       aren't at the end of a primary template; that now happens in\n-       check_default_tmpl_args.\n-       * semantics.c (finish_template_template_parm): Use\n-       check_default_tmpl_args to check for errors in the template\n-       parameter list.\n-\t\n+\tPR c++/34052\n+\t* pt.c (check_default_tmpl_args): Check for parameter packs that\n+\taren't at the end of a primary template.\n+\t(push_template_decl_real): Remove check for parameter packs that\n+\taren't at the end of a primary template; that now happens in\n+\tcheck_default_tmpl_args.\n+\t* semantics.c (finish_template_template_parm): Use\n+\tcheck_default_tmpl_args to check for errors in the template\n+\tparameter list.\n+\n 2008-01-12  Doug Kwan  <dougkwan@google.com>\n \n \t* decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers\n@@ -2299,9 +2303,9 @@\n \n 2008-01-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * parser.c (cp_parser_check_decl_spec): Don't warn about \"long\n-       long\" in C++0x mode; change the warning to note that \"long long\"\n-       is only unsupported in C++98 mode.\n+\t* parser.c (cp_parser_check_decl_spec): Don't warn about \"long\n+\tlong\" in C++0x mode; change the warning to note that \"long long\"\n+\tis only unsupported in C++98 mode.\n \n 2007-12-20  Jason Merrill  <jason@redhat.com>\n \n@@ -2319,13 +2323,13 @@\n 2007-12-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34206\n-\t* pt.c (tsubst_aggr_type): Do nothing if the type already doesn't \n+\t* pt.c (tsubst_aggr_type): Do nothing if the type already doesn't\n \tuse template parms.\n \t(dependent_type_p_r): Handle the domain of an array.\n \n 2007-12-18  Douglas Gregor  <doug.gregor@gmail.com>\n-            Jakub Jelinek  <jakub@redhat.com>\n-\t\n+\t     Jakub Jelinek  <jakub@redhat.com>\n+\n \tPR c++/32565\n \tPR c++/33943\n \tPR c++/33965\n@@ -2334,9 +2338,9 @@\n \targuments have been deduced.\n \t(coerce_template_parms): Don't complain when COMPLAIN doesn't\n \tinclude tf_error.\n-\t(fn_type_unification): Use template_template_parm_bindings_ok_p. \n-\t(unify): Deal with variadic, bound template template parameters. \n-\t(get_class_bindings): Use template_template_parm_bindings_ok_p. \n+\t(fn_type_unification): Use template_template_parm_bindings_ok_p.\n+\t(unify): Deal with variadic, bound template template parameters.\n+\t(get_class_bindings): Use template_template_parm_bindings_ok_p.\n \n 2007-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -2406,38 +2410,38 @@\n \n 2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/34101\n-       * name-lookup.c (arg_assoc_template_arg): Recurse on argument\n-       packs.\n-       (arg_assoc_type): We don't need to handle TYPE_ARGUMENT_PACK here,\n-       since arg_assoc_template_arg will deal with them (better).\n+\tPR c++/34101\n+\t* name-lookup.c (arg_assoc_template_arg): Recurse on argument\n+\tpacks.\n+\t(arg_assoc_type): We don't need to handle TYPE_ARGUMENT_PACK here,\n+\tsince arg_assoc_template_arg will deal with them (better).\n \n 2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/33509\n-       * pt.c (tsubst_exception_specification): Handle substitutions into\n-       member templates, where tsubst_pack_expansion returns a\n-       TYPE_PACK_EXPANSION.\n+\tPR c++/33509\n+\t* pt.c (tsubst_exception_specification): Handle substitutions into\n+\tmember templates, where tsubst_pack_expansion returns a\n+\tTYPE_PACK_EXPANSION.\n \n 2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/33091\n-       * pt.c (unify_pack_expansion): If we didn't deduce any actual\n-       bindings for the template parameter pack, don't try to keep the\n-       empty deduced arguments.\n-       (unify): If a parameter is a template-id whose template argument\n-       list contains a pack expansion that is not at the end, then we\n-       cannot unify against that template-id.\n+\tPR c++/33091\n+\t* pt.c (unify_pack_expansion): If we didn't deduce any actual\n+\tbindings for the template parameter pack, don't try to keep the\n+\tempty deduced arguments.\n+\t(unify): If a parameter is a template-id whose template argument\n+\tlist contains a pack expansion that is not at the end, then we\n+\tcannot unify against that template-id.\n \n 2007-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34061\n-        * pt.c (current_template_args): Use error_operand_p.\n+\t PR c++/34061\n+\t * pt.c (current_template_args): Use error_operand_p.\n \n 2007-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34273\n-        * error.c (dump_decl): Handle TREE_BINFO.\n+\t PR c++/34273\n+\t * error.c (dump_decl): Handle TREE_BINFO.\n \n 2007-12-01  Ollie Wild  <aaw@google.com>\n \n@@ -2477,7 +2481,7 @@\n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR c++/34081\n-\t* decl.c (start_preparsed_function): Pass \n+\t* decl.c (start_preparsed_function): Pass\n \tprocessing_template_decl for the new allocate_struct_function\n \tparameter.\n \n@@ -2506,11 +2510,11 @@\n \n 2007-11-23  Mark Mitchell  <mark@codesourcery.com>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n-\t\n+\n \tPR c++/5310\n \t* call.c (convert_like_real): Build a zero constant when __null is\n \tconverted to an integer type.\n-\t\n+\n 2007-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34094\n@@ -2681,7 +2685,7 @@\n \tcheck_for_bare_parameter_packs.\n \t(finish_member_declaration): Ditto.\n \t* parser.c (cp_parser_base_clause): Ditto.\n-\t\n+\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/33168\n@@ -2719,7 +2723,7 @@\n \n \tPR c++/33939\n \t* pt.c (unify_pack_expansion): bring handling of function call\n-\targuments into line with type_unification_real. \n+\targuments into line with type_unification_real.\n \n 2007-11-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n@@ -2793,12 +2797,12 @@\n \tFix typo.\n \n 2007-10-31 Christian Bruel  <christian.bruel@st.com>\n-           Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19531\n \t* typeck.c (check_return_expr): Don't set named_return_value_okay_p\n-\tif retval is volatile. \n-\t\n+\tif retval is volatile.\n+\n 2007-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/33616\n@@ -2865,7 +2869,7 @@\n \tPR c++/24791\n \t* pt.c (get_template_info): New fn.\n \t(template_class_depth): Use it.\n-\t(push_template_decl_real): Check that the template args of the \n+\t(push_template_decl_real): Check that the template args of the\n \tdefinition match the args of the previous declaration.\n \n 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n@@ -2909,8 +2913,8 @@\n \n \tPR c++/25950 (DR 391)\n \t* call.c (struct conversion): Remove check_copy_constructor_p.\n-\t(reference_binding): Always bind a reference directly to a \n-\tcompatible class rvalue.  Pass down LOOKUP_NO_TEMP_BIND during \n+\t(reference_binding): Always bind a reference directly to a\n+\tcompatible class rvalue.  Pass down LOOKUP_NO_TEMP_BIND during\n \ttemporary creation.\n \t(check_constructor_callable): Remove.\n \t(convert_like_real): Don't call it.\n@@ -3015,7 +3019,7 @@\n \t(leave_scope): Don't pop_visibility.\n \t* name-lookup.h (struct cp_binding_level): Remove has_visibility.\n \t* parser.c (cp_parser_namespace_definition): Call\n-\thandle_namespace_attrs and pop_visibility as appropriate. \n+\thandle_namespace_attrs and pop_visibility as appropriate.\n \n \tPR c++/11756\n \t* mangle.c (write_type) [TYPEOF_TYPE]: Just sorry.\n@@ -3035,7 +3039,7 @@\n 2007-09-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/33094\n-\t* decl.c (make_rtl_for_nonlocal_decl): It's ok for a member \n+\t* decl.c (make_rtl_for_nonlocal_decl): It's ok for a member\n \tconstant to not have DECL_EXTERNAL if it's file-local.\n \n 2007-09-28  Ollie Wild  <aaw@google.com>\n@@ -3118,14 +3122,14 @@\n 2007-09-24  Danny Smith  <dannysmith@user.sourceforge.net>\n \n \tPR c++/14688\n-        * search.c (check_final_overrider): Fail if\n+\t * search.c (check_final_overrider): Fail if\n \ttargetm.comp_type_attributes returns 0.\n \n 2007-09-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/33239\n \t* pt.c (resolve_typename_type): Don't look things up in the original\n-\ttemplate if it would mean losing template arguments.\t\n+\ttemplate if it would mean losing template arguments.\n \n 2007-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -3136,22 +3140,22 @@\n \n 2007-09-24  Douglas Gregor  <doug.gregor@gmail.com>\n \n-\tPR c++/33185\t\n+\tPR c++/33185\n \t* tree.c (cp_build_qualified_type_real): Build a canonical\n \tARRAY_TYPE if the original ARRAY_TYPE was not a canonical type.\n-\t\n+\n 2007-09-24  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33112\n-\tPR c++/33185\t\n+\tPR c++/33185\n \t* tree.c (cplus_array_compare): Compare pointers, not types.\n \t(build_cplus_array_type_1): Store new array type into the hash\n \ttable before building the canonical type; build the canonical type\n \tcorrectly.\n \t(cp_build_qualified_type_real): Put all of the array types with\n-\tcv-qualified element types into the C++ array hash table, built as \n+\tcv-qualified element types into the C++ array hash table, built as\n \tvariants of the unqualified versions.\n-\t\n+\n 2007-09-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/16370\n@@ -3197,7 +3201,7 @@\n \n \tPR c++/7586\n \t* pt.c (tsubst): Handle typedefs by looking for the specialization.\n-\t(retrieve_specialization): Only tagged types use \n+\t(retrieve_specialization): Only tagged types use\n \tDECL_TEMPLATE_INSTANTIATIONS.\n \t(instantiate_class_template): Push nested classes too.\n \t(tsubst_decl) [TYPE_DECL]: Only check for canonical decl for\n@@ -3434,7 +3438,7 @@\n 2007-08-31  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* mangle.c (write_type): Change mangling of rvalue reference from\n-\t`RR' to `O'. \n+\t`RR' to `O'.\n \n 2007-08-31  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -3492,7 +3496,7 @@\n 2007-08-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/29000\n-\t* pt.c (build_non_dependent_expr, type_dependent_expression_p): \n+\t* pt.c (build_non_dependent_expr, type_dependent_expression_p):\n \tLook inside STMT_EXPR.\n \t* semantics.c (stmt_expr_value_expr): New fn.\n \t* cp-tree.h: Declare it.\n@@ -3505,7 +3509,7 @@\n \t* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS.\n \n 2007-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n-\t\n+\n \t* error.c (dump_expr): Handle COMPLEX_CST.\n \t* cxx-pretty-print.c (pp_cxx_primary_expression): Likewise.\n \t(pp_cxx_expression): Likewise.\n@@ -3853,9 +3857,9 @@\n \tPR c++/30851\n \t* parser.c (cp_parser_asm_definition): Detect and discard asm\n \tstatements with invalid inputs or outputs.\n-        (cp_parser_asm_operand_list): Return error mark node if any\n-        of the operands are invalid. Adjust documentation.\n-\t\n+\t (cp_parser_asm_operand_list): Return error mark node if any\n+\t of the operands are invalid. Adjust documentation.\n+\n 2007-08-02  Nick Clifton  <nickc@redhat.com>\n \n \t* typeck.c: Change copyright header to refer to version 3 of the\n@@ -4006,7 +4010,7 @@\n \tcanonical types; otherwise, fall back to structural type\n \tcomparisons. If ENABLE_CHECKING and USE_CANONICAL_TYPES, give an\n \tinternal compiler error if the canonical types are wrong.\n-\t\n+\n 2007-07-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/32560\n@@ -4073,7 +4077,7 @@\n \ttests when comparing pointer-to-member-function types, because the\n \thandling of TYPE_GET_PTRMEMFUNC_TYPE currently defeats canonical\n \ttypes.\n-\t\n+\n 2007-07-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* init.c (build_new): Tweak comment.\n@@ -4293,9 +4297,9 @@\n \t* semantics.c (finish_trait_expr): Complete the types.\n \n 2007-05-30  Russell Yanofsky <russ@yanofsky.org>\n-            Douglas Gregor <doug.gregor@gmail.com>\n-            Pedro Lamarao <pedro.lamarao@mndfck.org>\n-            Howard Hinnant <howard.hinnant@gmail.com>\n+\t     Douglas Gregor <doug.gregor@gmail.com>\n+\t     Pedro Lamarao <pedro.lamarao@mndfck.org>\n+\t     Howard Hinnant <howard.hinnant@gmail.com>\n \n \tPR c++/7412\n \tPR c++/29939\n@@ -4336,7 +4340,7 @@\n \trvalue references.\n \t(cp_parser_make_indirect_declarator): New.\n \t(cp_parser_new_declarator_opt): Call\n-\tcp_parser_make_indirect_declarator. \n+\tcp_parser_make_indirect_declarator.\n \t(cp_parser_conversion_declarator_opt): Ditto.\n \t(cp_parser_declarator): Ditto.\n \t(cp_parser_ptr_operator): Parse \"&&\" tokens into rvalue reference\n@@ -4365,7 +4369,7 @@\n \tcase POSTDECREMENT_EXPR>): Return the error_mark_node\n \tif either the real or imaginary parts would an\n \terror_mark_node.\n-\t\n+\n 2007-05-25  Simon Martin  <simartin@users.sourceforge.net>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n@@ -4462,14 +4466,14 @@\n \t* typeck.c (build_indirect_ref): Add call to\n \tstrict_aliasing_warning.\n \t(build_reinterpret_cast_1): Condition call to\n-\tstrict_aliasing_warning. \n+\tstrict_aliasing_warning.\n \n 2007-05-11  Jan Hubicka  <jh@suse.cz>\n \n \t* semantics.c (expand_or_defer_fn): Do not call c_record_cdtor_fn.\n \t* decl2.c (start_objects): ctors and dtors are no longer public.\n \t(cp_write_global_declarations): Do not call c_build_cdtor_fns.\n-\t\n+\n 2007-05-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* typeck.c (build_unary_op): Remove code that used to\n@@ -4495,7 +4499,7 @@\n 2007-05-02  Seongbae Park  <seongbae.park@gmail.com>\n \n \tPR c++/31663\n-\t* decl2.c (constrain_class_visibility): \n+\t* decl2.c (constrain_class_visibility):\n \tUse strip_pointer_or_array_types instead of strip_array_types.\n \n 2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n@@ -4511,8 +4515,8 @@\n 2007-04-27  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* error.c (maybe_warn_variadic_templates): Variadic templates are\n-       now in C++0x, so only warn about them in C++98 mode.\n-\t\n+\tnow in C++0x, so only warn about them in C++98 mode.\n+\n 2007-04-26  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/30016\n@@ -4619,7 +4623,7 @@\n \n \t* cp-objcp-common.c (cxx_staticp): Remove.\n \t* cp-objcp-common.h (LANG_HOOKS_STATICP): Remove.\n-\t* cp-tree.h (cxx_staticp): \t\n+\t* cp-tree.h (cxx_staticp):\n \n 2007-04-04  Danny Smith  <dannysmith.users.sourceforge.net>\n \n@@ -4656,11 +4660,11 @@\n \t(cp_parser_parameter_declaration): Ditto. Also, handle when TYPE\n \tis NULL.\n \t* pt.c (find_parameter_packs_r): Look into the bounds on integer\n-\ttypes (they could be used as array bounds). \n+\ttypes (they could be used as array bounds).\n \t(check_for_bare_parameter_packs): Deal with TEMPLATE_PARM_INDEX.\n \t(tsubst_pack_expansion): Handle failure to expand parameter\n \tpacks.\n-\t\n+\n 2007-03-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/26099\n@@ -4798,13 +4802,13 @@\n \t(cp_parser_namespace_alias_definition): if we find an open brace\n \tinstead of '=', then this is actually a misplaced namespace\n \tdefinition.\n-\t\n+\n 2007-03-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/24924\n \t* decl.c (cxx_init_decl_processing): Move command-line options\n \tprocessing to c-opts.c.\n-\t\n+\n 2007-03-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* ptree.c (cxx_print_type): Use formatting markup for integers\n@@ -4828,7 +4832,7 @@\n \t(make_pack_expansion): Ditto.\n \t(check_for_bare_parameter_packs): Ditto.\n \t* name-lookup.c (push_to_top_level): Make need_pop a bool value.\n-\t\n+\n 2007-03-14  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/31165\n@@ -4851,13 +4855,13 @@\n 2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* class.c (warn_hidden): Add OPT_Woverloaded_virtual to warning.\n-\t\n+\n 2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/21438\n \t* typeck.c (build_binary_op): Call warn_for_div_zero instead of\n \twarning.\n-\t\n+\n 2007-03-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* repo.c (init_repo): Initialize random_seed saved options.\n@@ -4886,7 +4890,7 @@\n \n \tPR c++/30328\n \t* semantics.c (finish_typeof): Use unlowered_expr_type.\n-\t\n+\n 2007-03-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/30274\n@@ -4930,7 +4934,7 @@\n \t* operators.def: Add ellipsis operator for EXPR_PACK_EXPANSION.\n \t* tree.c (cp_walk_subtrees): Walk BASELINK, TYPE_ARGUMENT_PACK,\n \tNONTYPE_ARGUMENT_PACK, TYPE_PACK_EXPANSION, EXPR_PACK_EXPANSION,\n-\tCAST_EXPR. \n+\tCAST_EXPR.\n \t* mangle.c (write_type): Mangle TYPE_PACK_EXPANSION.\n \t(write_template_arg): Write argument packs as separate arguments.\n \t* cp-tree.h (struct template_parm_index_s): Add flag that\n@@ -4957,17 +4961,17 @@\n \t(struct cp_declarator): Add parameter_pack_p flag.\n \t(maybe_warn_variadic_templates): Declare.\n \t(process_template_parm): Add bool parameter IS_PARAMETER_PACK, to\n-\tindicate a template parameter pack. \n+\tindicate a template parameter pack.\n \t(uses_parameter_packs): Declare.\n \t(template_parameter_pack_p): Declare.\n \t(template_parms_variadic_p): Declare.\n \t(make_pack_expansion): Declare.\n \t(check_for_bare_parameter_packs): Declare.\n \t* cxx-pretty-print.c (pp_cxx_unary_expression): Print\n-\tsizeof... expressions. \n+\tsizeof... expressions.\n \t(pp_cxx_expression): Print pack expansions and non-type argument\n \tpacks.\n-\t(pp_cxx_exception_specification): Print pack expansions. \n+\t(pp_cxx_exception_specification): Print pack expansions.\n \t(pp_cxx_direct_declarator): Print ellipsis for parameter packs.\n \t(pp_cxx_ctor_initializer): Print pack expansions.\n \t(pp_cxx_type_id): Print pack expansions.\n@@ -5009,7 +5013,7 @@\n \tcomparing template argument lists.\n \t(mangle_class_name_for_template): Make argument packs as separate\n \ttemplate arguments.\n-\t(for_each_template_parm_r): No need to handle BASELINK. \n+\t(for_each_template_parm_r): No need to handle BASELINK.\n \t(instantiate_class_template): Handle pack expansions in the base\n \tclass list.\n \t(tsubst_pack_expansion): New.\n@@ -5021,10 +5025,10 @@\n \targument types.\n \t(tsubst_exception_specification): Handle pack expansions in\n \texception specifiers.\n-\t(tsubst): See through ARGUMENT_PACK_SELECT arguments when \n+\t(tsubst): See through ARGUMENT_PACK_SELECT arguments when\n \treplacing a template parameter with its argument. If we encounter\n \ta substitution for an argument pack, just return the parameter\n-\titself. \n+\titself.\n \t(tsubst_copy): sizeof(X...) returns the number of elements in\n \tparameter pack X.  See through ARGUMENT_PACK_SELECT when the\n \tPARM_DECL is a parameter pack.\n@@ -5110,7 +5114,7 @@\n \tend a template argument.\n \t* tree.c (cp_walk_subtrees): Walk BASELINK, TYPE_ARGUMENT_PACK,\n \tNONTYPE_ARGUMENT_PACK, TYPE_PACK_EXPANSION, EXPR_PACK_EXPANSION,\n-\tCAST_EXPR. \n+\tCAST_EXPR.\n \n 2007-03-09  Dirk Mueller  <dmueller@suse.de>\n \n@@ -5154,7 +5158,7 @@\n \t(cp_parser_selection_statement): Set IN_IF_STMT bit when parsing\n \tbody of 'if'.\n \t(cp_parser_jump_statement): Mask new IN_IF_STMT bit.\n-\t\n+\n 2007-03-02  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/28253\n@@ -5170,7 +5174,7 @@\n 2007-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* typeck.c (common_base_type): Delete unused function.\n-\t\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Make-lang.in: Add dummy lang.install-pdf target.\n@@ -5267,7 +5271,7 @@\n 2007-02-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/30158\n-\t* semantics.c (finish_stmt_expr_expr): Set TREE_TYPE of the \n+\t* semantics.c (finish_stmt_expr_expr): Set TREE_TYPE of the\n \tstatement expression if we had an error mark node.\n \n 2007-02-15  Sandra Loosemore  <sandra@codesourcery.com>\n@@ -5277,15 +5281,15 @@\n \t* cp-tree.def (AGGR_INIT_EXPR): Adjust documentation.\n \tChange class to tcc_vl_exp.\n \n-\t* call.c (build_call): Use build_call_list instead \n-\tof build3. \n+\t* call.c (build_call): Use build_call_list instead\n+\tof build3.\n \t(build_over_call): Likewise.\n-\t(build_new_method_call): Use build_min_non_dep_call_list \n+\t(build_new_method_call): Use build_min_non_dep_call_list\n \tinstead of build_min_non_dep.\n \n \t* error.c (dump_call_expr_args): New function.\n \t(dump_aggr_init_expr_args): New function.\n-\t(dump_expr) <AGGR_INIT_EXPR, CALL_EXPR, INDIRECT_REF>: Use them. \n+\t(dump_expr) <AGGR_INIT_EXPR, CALL_EXPR, INDIRECT_REF>: Use them.\n \tUpdate to use new CALL_EXPR and AGGR_INIT_EXPR accessor macros.\n \n \t* cvt.c (convert_to_void): Use build_call_array instead\n@@ -5297,7 +5301,7 @@\n \t* dump.c (cp_dump_tree) <AGGR_INIT_EXPR>: Update to use new\n \tAGGR_INIT_EXPR accessor macros.\n \n-\t* cp-gimplify.c (cp_gimplify_init_expr): Use \n+\t* cp-gimplify.c (cp_gimplify_init_expr): Use\n \tAGGR_INIT_EXPR_SLOT to set the slot operand.\n \n \t* cp-tree.h (AGGR_INIT_EXPR_FN): New macro.\n@@ -5326,31 +5330,31 @@\n \t(cp_tree_equal) <CALL_EXPR>: Iterate through the arguments\n \tto check for equality instead of recursing. Handle tcc_vl_exp\n \ttree code classes.\n-\t(stabilize_call): Update to only handle CALL_EXPRs, not \n+\t(stabilize_call): Update to only handle CALL_EXPRs, not\n \tAGGR_INIT_EXPRs; use new CALL_EXPR accessor macros.\n \t(stabilize_aggr_init): New function.\n \t(stabilize_init): Use it.\n \n \t* cxx-pretty-print.c (pp_cxx_postfix_expression)\n \t<AGGR_INIT_EXPR, CALL_EXPR>: Update to use new CALL_EXPR and\n \tAGGR_INIT_EXPR accessor macros and argument iterators.\n-\t\n+\n \t* pt.c (tsubst_copy) <CALL_EXPR>: Replace build_nt with\n-\tbuild_vl_exp. Iterate through the operands, recursively \n+\tbuild_vl_exp. Iterate through the operands, recursively\n \tprocessing each one.\n \t(tsubst_copy_and_build) <CALL_EXPR>: Update to use new\n \tCALL_EXPR accessor macros.\n \t(value_dependent_expression_p) <default>: Handle tcc_vl_exp\n-\ttree code classes. Use TREE_OPERAND_LENGTH instead of \n+\ttree code classes. Use TREE_OPERAND_LENGTH instead of\n \tTREE_CODE_LENGTH.\n \n \t* semantics.c (finish_call_expr): Use build_nt_call_list\n \tinstead of build_nt.\n-\t(simplify_aggr_init_expr): Update to use new AGGR_INIT_EXPR \n-\taccessor macros. Use build_call_array to construct the \n+\t(simplify_aggr_init_expr): Update to use new AGGR_INIT_EXPR\n+\taccessor macros. Use build_call_array to construct the\n \tCALL_EXPR node instead of build3\n-\t\n-\t* decl2.c (build_offset_ref_call_from_tree): Use \n+\n+\t* decl2.c (build_offset_ref_call_from_tree): Use\n \tbuild_nt_call_list and build_min_non_dep_call_list instead\n \tof build_min_nt and build_min_non_dep.\n \n@@ -5361,7 +5365,7 @@\n \n \tPR c++/28943\n \t* call.c (build_conditional_expr): Improve error message.\n-\t\n+\n 2007-02-13  Dirk Mueller  <dmueller@suse.de>\n \n \t* friend.c (do_friend): Annotate warning about friend\n@@ -5438,9 +5442,9 @@ o2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n \n 2007-02-03  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * parser.c (cp_lexer_get_preprocessor_token): Attach the C++0x\n-       keyword warning to -Wc++0x-compat.\n-\t\n+\t* parser.c (cp_lexer_get_preprocessor_token): Attach the C++0x\n+\tkeyword warning to -Wc++0x-compat.\n+\n 2007-02-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* decl.c (grokdeclarator): Update documentation.\n@@ -5465,7 +5469,7 @@ o2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n \tto -Wpointer-arith.\n \t* call.c (convert_like_real): Don't warn when converting to\n \tboolean type.\n-\t\n+\n 2007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* decl.c (pop_label): Replace warning with call to\n@@ -5553,13 +5557,13 @@ o2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n \t* typeck.c (build_binary_op): Call overflow_warning if\n \tTREE_OVERFLOW_P is true for the result and not for any of the\n \toperands.\n-\t\n+\n 2007-01-06  Lee Millward  <lee.millward@codesourcery.com>\n \n-       PR c++/19439\n-       * class.c (add_method): Don't wait until template\n-       instantiation time to complain about duplicate methods.\n-\t\n+\tPR c++/19439\n+\t* class.c (add_method): Don't wait until template\n+\tinstantiation time to complain about duplicate methods.\n+\n 2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/19978\n@@ -5590,7 +5594,7 @@ o2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n 2007-01-02  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* pt.c (canonical_template_parms): Correct typo in comment.\n-\t\n+\n 2007-01-02  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* typeck.c (structural_comptypes): Renamed from \"comptypes\"."}, {"sha": "3bcab9407d43c7d8b0d3f35036e237700cc11ca7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056dd1af584c70c831ecb94d906e453d7d282be1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056dd1af584c70c831ecb94d906e453d7d282be1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=056dd1af584c70c831ecb94d906e453d7d282be1", "patch": "@@ -4475,7 +4475,7 @@ tree\n finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n {\n   tree orig_expr = expr;\n-  tree type;\n+  tree type = NULL_TREE;\n \n   if (!expr || error_operand_p (expr))\n     return error_mark_node;"}]}