{"sha": "287c5d3812f66f3555cb13f2d3c4324edc3c0304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3YzVkMzgxMmY2NmYzNTU1Y2IxM2YyZDNjNDMyNGVkYzNjMDMwNA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@codesourcery.com", "date": "2013-11-20T17:16:48Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2013-11-20T17:16:48Z"}, "message": "mips.h (ISA_HAS_FP_RECIP_RSQRT): New macro.\n\n\t* config/mips/mips.h (ISA_HAS_FP_RECIP_RSQRT): New macro.\n\t* config/mips/mips.c (mips_rtx_costs) <DIV>: Check for\n\tISA_HAS_FP_RECIP_RSQRT rather than ISA_HAS_FP4.\n\t* config/mips/mips.md (recip_condition): Remove mode attribute.\n\t(div<mode>3): Use ISA_HAS_FP_RECIP_RSQRT rather than\n\t<recip_condition>.\n\t(*recip<mode>3, *rsqrt<mode>a, *rsqrt<mode>b): Likewise.\n\nFrom-SVN: r205129", "tree": {"sha": "2f87677ae402ee14fbc68e4212d6c8ad43fd03a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f87677ae402ee14fbc68e4212d6c8ad43fd03a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/287c5d3812f66f3555cb13f2d3c4324edc3c0304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287c5d3812f66f3555cb13f2d3c4324edc3c0304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287c5d3812f66f3555cb13f2d3c4324edc3c0304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287c5d3812f66f3555cb13f2d3c4324edc3c0304/comments", "author": null, "committer": null, "parents": [{"sha": "a9a130f5b732433cb7b1e185e499d0494ffcc2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a130f5b732433cb7b1e185e499d0494ffcc2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a130f5b732433cb7b1e185e499d0494ffcc2f9"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "c93f358ffa2664ec9cffddbcf387d4f6b4d8a9d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=287c5d3812f66f3555cb13f2d3c4324edc3c0304", "patch": "@@ -1,3 +1,13 @@\n+2013-11-20  Maciej W. Rozycki  <macro@codesourcery.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_FP_RECIP_RSQRT): New macro.\n+\t* config/mips/mips.c (mips_rtx_costs) <DIV>: Check for\n+\tISA_HAS_FP_RECIP_RSQRT rather than ISA_HAS_FP4.\n+\t* config/mips/mips.md (recip_condition): Remove mode attribute.\n+\t(div<mode>3): Use ISA_HAS_FP_RECIP_RSQRT rather than\n+\t<recip_condition>.\n+\t(*recip<mode>3, *rsqrt<mode>a, *rsqrt<mode>b): Likewise.\n+\n 2013-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/59207"}, {"sha": "0aeb35aa6d6d484b564bce2b3fffdd67b663ba98", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=287c5d3812f66f3555cb13f2d3c4324edc3c0304", "patch": "@@ -3972,7 +3972,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n     case DIV:\n       /* Check for a reciprocal.  */\n       if (float_mode_p\n-\t  && ISA_HAS_FP4\n+\t  && ISA_HAS_FP_RECIP_RSQRT (mode)\n \t  && flag_unsafe_math_optimizations\n \t  && XEXP (x, 0) == CONST1_RTX (mode))\n \t{"}, {"sha": "97df90030008991608380a65a655751d6b61716a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=287c5d3812f66f3555cb13f2d3c4324edc3c0304", "patch": "@@ -921,6 +921,21 @@ struct mips_cpu_info {\n    'c = -((a * b) [+-] c)'.  */\n #define ISA_HAS_NMADD3_NMSUB3\tTARGET_LOONGSON_2EF\n \n+/* ISA has floating-point RECIP.fmt and RSQRT.fmt instructions.  The\n+   MIPS64 rev. 1 ISA says that RECIP.D and RSQRT.D are unpredictable when\n+   doubles are stored in pairs of FPRs, so for safety's sake, we apply\n+   this restriction to the MIPS IV ISA too.  */\n+#define ISA_HAS_FP_RECIP_RSQRT(MODE)\t\t\t\t\t\\\n+\t\t\t\t((((ISA_HAS_FP4 || ISA_MIPS32R2)\t\\\n+\t\t\t\t   && ((MODE) == SFmode\t\t\t\\\n+\t\t\t\t       || ((TARGET_FLOAT64\t\t\\\n+\t\t\t\t\t    || ISA_MIPS32R2\t\t\\\n+\t\t\t\t\t    || ISA_MIPS64R2)\t\t\\\n+\t\t\t\t\t   && (MODE) == DFmode)))\t\\\n+\t\t\t\t  || (TARGET_SB1\t\t\t\\\n+\t\t\t\t      && (MODE) == V2SFmode))\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n #define ISA_HAS_CLZ_CLO\t\t((ISA_MIPS32\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32R2\t\t\t\\"}, {"sha": "d3ad83cf96bd12d43cfbac54c2ebb1b4b7aed366", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287c5d3812f66f3555cb13f2d3c4324edc3c0304/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=287c5d3812f66f3555cb13f2d3c4324edc3c0304", "patch": "@@ -881,15 +881,6 @@\n (define_mode_attr sqrt_condition\n   [(SF \"!ISA_MIPS1\") (DF \"!ISA_MIPS1\") (V2SF \"TARGET_SB1\")])\n \n-;; This attribute gives the conditions under which RECIP.fmt and RSQRT.fmt\n-;; instructions can be used.  The MIPS32 and MIPS64 ISAs say that RECIP.D\n-;; and RSQRT.D are unpredictable when doubles are stored in pairs of FPRs,\n-;; so for safety's sake, we apply this restriction to all targets.\n-(define_mode_attr recip_condition\n-  [(SF \"ISA_HAS_FP4\")\n-   (DF \"ISA_HAS_FP4 && TARGET_FLOAT64\")\n-   (V2SF \"TARGET_SB1\")])\n-\n ;; This code iterator allows signed and unsigned widening multiplications\n ;; to use the same template.\n (define_code_iterator any_extend [sign_extend zero_extend])\n@@ -2501,7 +2492,8 @@\n   \"<divide_condition>\"\n {\n   if (const_1_operand (operands[1], <MODE>mode))\n-    if (!(<recip_condition> && flag_unsafe_math_optimizations))\n+    if (!(ISA_HAS_FP_RECIP_RSQRT (<MODE>mode)\n+\t  && flag_unsafe_math_optimizations))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n })\n \n@@ -2539,7 +2531,7 @@\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(div:ANYF (match_operand:ANYF 1 \"const_1_operand\" \"\")\n \t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n-  \"<recip_condition> && flag_unsafe_math_optimizations\"\n+  \"ISA_HAS_FP_RECIP_RSQRT (<MODE>mode) && flag_unsafe_math_optimizations\"\n {\n   if (TARGET_FIX_SB1)\n     return \"recip.<fmt>\\t%0,%2\\;mov.<fmt>\\t%0,%0\";\n@@ -2674,7 +2666,7 @@\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(div:ANYF (match_operand:ANYF 1 \"const_1_operand\" \"\")\n \t\t  (sqrt:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\"))))]\n-  \"<recip_condition> && flag_unsafe_math_optimizations\"\n+  \"ISA_HAS_FP_RECIP_RSQRT (<MODE>mode) && flag_unsafe_math_optimizations\"\n {\n   if (TARGET_FIX_SB1)\n     return \"rsqrt.<fmt>\\t%0,%2\\;mov.<fmt>\\t%0,%0\";\n@@ -2692,7 +2684,7 @@\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(sqrt:ANYF (div:ANYF (match_operand:ANYF 1 \"const_1_operand\" \"\")\n \t\t\t     (match_operand:ANYF 2 \"register_operand\" \"f\"))))]\n-  \"<recip_condition> && flag_unsafe_math_optimizations\"\n+  \"ISA_HAS_FP_RECIP_RSQRT (<MODE>mode) && flag_unsafe_math_optimizations\"\n {\n   if (TARGET_FIX_SB1)\n     return \"rsqrt.<fmt>\\t%0,%2\\;mov.<fmt>\\t%0,%0\";"}]}