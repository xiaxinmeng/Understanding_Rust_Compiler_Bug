{"sha": "9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlNjk2YTNiMzg3NTYyYWNlY2E1M2NkZjIwZjQ2ZTNiZmUwZDJiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:29:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:29:00Z"}, "message": "[multiple changes]\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* s-mudido-affinity.adb (Create): Correct subranges of slices of CPU\n\tarrays.\n\n2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sinfo.ads, g-pehage.adb, par-ch12.adb,\n\tlayout.adb, exp_util.adb, sem_aux.adb, make.adb, checks.adb,\n\tsem_ch12.adb, sem_res.adb, sem_attr.adb, a-ngelfu.adb, sem_ch4.adb,\n\tswitch-b.adb, sem_ch6.adb, prj-dect.adb, gnatxref.adb, sem_ch13.adb,\n\tlib-xref.adb: Fix typos.\n\n2015-10-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch4.adb (Expand_Array_Comparison): Use\n\tgeneric code if runtime routine is not available.\n\nFrom-SVN: r229071", "tree": {"sha": "9b257585b7a26bdfccae1bd31babb3d1658714ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b257585b7a26bdfccae1bd31babb3d1658714ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/comments", "author": null, "committer": null, "parents": [{"sha": "635ffc52d8df885a6223c005144f7f3af541d960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635ffc52d8df885a6223c005144f7f3af541d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635ffc52d8df885a6223c005144f7f3af541d960"}], "stats": {"total": 265, "additions": 148, "deletions": 117}, "files": [{"sha": "93dae2311927f0899fc8f96982f25d13b8f9633b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -1,3 +1,21 @@\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* s-mudido-affinity.adb (Create): Correct subranges of slices of CPU\n+\tarrays.\n+\n+2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sinfo.ads, g-pehage.adb, par-ch12.adb,\n+\tlayout.adb, exp_util.adb, sem_aux.adb, make.adb, checks.adb,\n+\tsem_ch12.adb, sem_res.adb, sem_attr.adb, a-ngelfu.adb, sem_ch4.adb,\n+\tswitch-b.adb, sem_ch6.adb, prj-dect.adb, gnatxref.adb, sem_ch13.adb,\n+\tlib-xref.adb: Fix typos.\n+\n+2015-10-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Array_Comparison): Use\n+\tgeneric code if runtime routine is not available.\n+\n 2015-10-20  Yannick Moy  <moy@adacore.com>\n \n \t* a-sytaco.ads (Ada.Synchronous_Task_Control): Package"}, {"sha": "7546f75ddb12cdff35abf46f71f4453d885c87b5", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -247,7 +247,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       elsif X < 1.0 + Sqrt_Epsilon then\n          return Sqrt (2.0 * (X - 1.0));\n \n-      elsif  X > 1.0 / Sqrt_Epsilon then\n+      elsif X > 1.0 / Sqrt_Epsilon then\n          return Log (X) + Log_Two;\n \n       else\n@@ -540,7 +540,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       if Y < Sqrt_Epsilon then\n          return 1.0;\n \n-      elsif  Y > Log_Inverse_Epsilon then\n+      elsif Y > Log_Inverse_Epsilon then\n          Z := Exp_Strict (Y - Lnv);\n          return (Z + V2minus1 * Z);\n \n@@ -832,7 +832,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       if Y < Sqrt_Epsilon then\n          return X;\n \n-      elsif  Y > Log_Inverse_Epsilon then\n+      elsif Y > Log_Inverse_Epsilon then\n          Z := Exp_Strict (Y - Lnv);\n          Z := Z + V2minus1 * Z;\n "}, {"sha": "f992aa2097a0de48df44d15f9903a4b538ffb286", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -9172,7 +9172,7 @@ package body Checks is\n                                 (Compile_Time_Constraint_Error\n                                   (Wnode, \"too few elements for}??\", T_Typ));\n \n-                           elsif  L_Length < R_Length then\n+                           elsif L_Length < R_Length then\n                               Add_Check\n                                 (Compile_Time_Constraint_Error\n                                   (Wnode, \"too many elements for}??\", T_Typ));"}, {"sha": "0e789f2734e75b00c1ef0b31ff6d1142bce561a9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -1533,37 +1533,43 @@ package body Exp_Ch4 is\n             end if;\n          end if;\n \n-         Remove_Side_Effects (Op1, Name_Req => True);\n-         Remove_Side_Effects (Op2, Name_Req => True);\n+         if RTE_Available (Comp) then\n \n-         Rewrite (Op1,\n-           Make_Function_Call (Sloc (Op1),\n-             Name => New_Occurrence_Of (RTE (Comp), Loc),\n+            --  Expand to a call only if the runtime function is available,\n+            --  otherwise fallback to inline code.\n \n-             Parameter_Associations => New_List (\n-               Make_Attribute_Reference (Loc,\n-                 Prefix         => Relocate_Node (Op1),\n-                 Attribute_Name => Name_Address),\n+            Remove_Side_Effects (Op1, Name_Req => True);\n+            Remove_Side_Effects (Op2, Name_Req => True);\n \n-               Make_Attribute_Reference (Loc,\n-                 Prefix         => Relocate_Node (Op2),\n-                 Attribute_Name => Name_Address),\n+            Rewrite (Op1,\n+              Make_Function_Call (Sloc (Op1),\n+                Name => New_Occurrence_Of (RTE (Comp), Loc),\n \n-               Make_Attribute_Reference (Loc,\n-                 Prefix         => Relocate_Node (Op1),\n-                 Attribute_Name => Name_Length),\n+                Parameter_Associations => New_List (\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Relocate_Node (Op1),\n+                    Attribute_Name => Name_Address),\n \n-               Make_Attribute_Reference (Loc,\n-                 Prefix         => Relocate_Node (Op2),\n-                 Attribute_Name => Name_Length))));\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Relocate_Node (Op2),\n+                    Attribute_Name => Name_Address),\n \n-         Rewrite (Op2,\n-           Make_Integer_Literal (Sloc (Op2),\n-             Intval => Uint_0));\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Relocate_Node (Op1),\n+                    Attribute_Name => Name_Length),\n \n-         Analyze_And_Resolve (Op1, Standard_Integer);\n-         Analyze_And_Resolve (Op2, Standard_Integer);\n-         return;\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => Relocate_Node (Op2),\n+                    Attribute_Name => Name_Length))));\n+\n+            Rewrite (Op2,\n+              Make_Integer_Literal (Sloc (Op2),\n+                Intval => Uint_0));\n+\n+            Analyze_And_Resolve (Op1, Standard_Integer);\n+            Analyze_And_Resolve (Op2, Standard_Integer);\n+            return;\n+         end if;\n       end if;\n \n       --  Cases where we cannot make runtime call\n@@ -1620,10 +1626,6 @@ package body Exp_Ch4 is\n       Insert_Action (N, Func_Body);\n       Rewrite (N, Expr);\n       Analyze_And_Resolve (N, Standard_Boolean);\n-\n-   exception\n-      when RE_Not_Available =>\n-         return;\n    end Expand_Array_Comparison;\n \n    ---------------------------"}, {"sha": "790556fdd2553bcfe7c1d43138373ceacd44c998", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -4184,7 +4184,7 @@ package body Exp_Util is\n             when\n                N_Raise_xxx_Error =>\n                   if Etype (P) = Standard_Void_Type then\n-                     if  P = Wrapped_Node then\n+                     if P = Wrapped_Node then\n                         Store_Before_Actions_In_Scope (Ins_Actions);\n                      else\n                         Insert_List_Before_And_Analyze (P, Ins_Actions);"}, {"sha": "81370117fc0bbb14b489573a91ab14aa5186a528", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2011, AdaCore                     --\n+--                     Copyright (C) 2002-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2586,7 +2586,7 @@ package body GNAT.Perfect_Hash_Generators is\n          when Function_Table_1 =>\n             return Get_Table (T1, J, K);\n \n-         when  Function_Table_2 =>\n+         when Function_Table_2 =>\n             return Get_Table (T2, J, K);\n \n          when Graph_Table =>"}, {"sha": "7d2ec9ca37fa1d34104ffce31b0b18dbd0059729", "filename": "gcc/ada/gnatxref.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fgnatxref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fgnatxref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatxref.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,16 +176,17 @@ procedure Gnatxref is\n                      elsif Src_Path_Name = null\n                        and then Lib_Path_Name = null\n                      then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adainclude and adalib directories\");\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adainclude and \"\n+                           & \"adalib directories\");\n \n                      elsif Src_Path_Name = null then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adainclude directory\");\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adainclude directory\");\n \n-                     elsif  Lib_Path_Name = null then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adalib directory\");\n+                     elsif Lib_Path_Name = null then\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adalib directory\");\n                      end if;\n                   end;\n \n@@ -200,8 +201,7 @@ procedure Gnatxref is\n                      Osint.Fail (\"--ext cannot be specified multiple times\");\n                   end if;\n \n-                  if EXT_Specified'Length\n-                    = Osint.ALI_Default_Suffix'Length\n+                  if EXT_Specified'Length = Osint.ALI_Default_Suffix'Length\n                   then\n                      Osint.ALI_Suffix := EXT_Specified.all'Access;\n                   else"}, {"sha": "ecdbbacd0dbb56d636abcad58b742eb5214e7f59", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -3412,7 +3412,7 @@ package body Layout is\n          --  type is the partial or full view, so that types will always\n          --  match on calls from one size function to another.\n \n-         if  Has_Private_Declaration (Vtype) then\n+         if Has_Private_Declaration (Vtype) then\n             Vtype_Primary_View := Etype (Vtype);\n          else\n             Vtype_Primary_View := Vtype;"}, {"sha": "b6c9a0e9ec0acf3dc41b71487dd986d9906f2551", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -2491,7 +2491,7 @@ package body Lib.Xref is\n                      --  Write out information about generic parent, if entity\n                      --  is an instance.\n \n-                     if  Is_Generic_Instance (XE.Key.Ent) then\n+                     if Is_Generic_Instance (XE.Key.Ent) then\n                         declare\n                            Gen_Par : constant Entity_Id :=\n                                        Generic_Parent"}, {"sha": "8fbca9df2b82c6ed849f0c2060e76db1028ffa95", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -7584,29 +7584,28 @@ package body Make is\n                   elsif Src_Path_Name = null\n                     and then Lib_Path_Name = null\n                   then\n-                     Make_Failed (\"RTS path not valid: missing \"\n-                                  & \"adainclude and adalib directories\");\n+                     Make_Failed\n+                       (\"RTS path not valid: missing adainclude and adalib \"\n+                        & \"directories\");\n \n                   elsif Src_Path_Name = null then\n-                     Make_Failed (\"RTS path not valid: missing adainclude \"\n-                                  & \"directory\");\n+                     Make_Failed\n+                       (\"RTS path not valid: missing adainclude directory\");\n \n-                  elsif  Lib_Path_Name = null then\n-                     Make_Failed (\"RTS path not valid: missing adalib \"\n-                                  & \"directory\");\n+                  elsif Lib_Path_Name = null then\n+                     Make_Failed\n+                       (\"RTS path not valid: missing adalib directory\");\n                   end if;\n                end;\n             end if;\n \n-         elsif Argv'Length > Source_Info_Option'Length and then\n-           Argv (1 .. Source_Info_Option'Length) = Source_Info_Option\n+         elsif Argv'Length > Source_Info_Option'Length\n+           and then Argv (1 .. Source_Info_Option'Length) = Source_Info_Option\n          then\n             Project_Tree.Source_Info_File_Name :=\n               new String'(Argv (Source_Info_Option'Length + 1 .. Argv'Last));\n \n-         elsif Argv'Length >= 8 and then\n-           Argv (1 .. 8) = \"--param=\"\n-         then\n+         elsif Argv'Length >= 8 and then Argv (1 .. 8) = \"--param=\" then\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Add_Switch (Argv, Linker,   And_Save => And_Save);\n "}, {"sha": "a103d96032b3d3223f31b1d1b445462df7c29071", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -736,10 +736,10 @@ package body Ch12 is\n                return Error;\n             end if;\n \n-         when Tok_Private  =>\n+         when Tok_Private =>\n             return P_Formal_Private_Type_Definition;\n \n-         when  Tok_Tagged  =>\n+         when Tok_Tagged =>\n             if Next_Token_Is (Tok_Semicolon) then\n                Typedef_Node :=\n                  New_Node (N_Formal_Incomplete_Type_Definition, Token_Ptr);"}, {"sha": "204e577c820acb8a704dacd3d3c777401f3c943d", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -735,7 +735,7 @@ package body Prj.Dect is\n                  and then Variable_Kind_Of (Current_Attribute) /=\n                  Expression_Kind_Of (Expression, In_Tree)\n                then\n-                  if  Variable_Kind_Of (Current_Attribute) = Undefined then\n+                  if Variable_Kind_Of (Current_Attribute) = Undefined then\n                      Set_Variable_Kind_Of\n                        (Current_Attribute,\n                         To => Expression_Kind_Of (Expression, In_Tree));"}, {"sha": "df3b4a83b51617a6f9579317fd04e38807d6cb5c", "filename": "gcc/ada/s-mudido-affinity.adb", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fs-mudido-affinity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fs-mudido-affinity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido-affinity.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -119,11 +119,11 @@ package body System.Multiprocessors.Dispatching_Domains is\n    end Create;\n \n    function Create (Set : CPU_Set) return Dispatching_Domain is\n-      ST_DD : aliased constant ST.Dispatching_Domain\n-        := ST.Dispatching_Domain (Set);\n-      subtype Rng is CPU_Range range\n-        Get_First_CPU (ST_DD'Unrestricted_Access) ..\n-        Get_Last_CPU (ST_DD'Unrestricted_Access);\n+      ST_DD : aliased constant ST.Dispatching_Domain :=\n+        ST.Dispatching_Domain (Set);\n+      First : constant CPU       := Get_First_CPU (ST_DD'Unrestricted_Access);\n+      Last  : constant CPU_Range := Get_Last_CPU (ST_DD'Unrestricted_Access);\n+      subtype Rng is CPU_Range range First .. Last;\n \n       use type ST.Dispatching_Domain;\n       use type ST.Dispatching_Domain_Access;\n@@ -134,7 +134,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n \n       New_System_Domain : ST.Dispatching_Domain := ST.System_Domain.all;\n \n-      New_Domain : Dispatching_Domain;\n+      ST_DD_Slice : constant ST.Dispatching_Domain := ST_DD (Rng);\n \n    begin\n       --  The set of processors for creating a dispatching domain must\n@@ -152,16 +152,27 @@ package body System.Multiprocessors.Dispatching_Domains is\n       if Rng'Last > Number_Of_CPUs then\n          raise Dispatching_Domain_Error with\n            \"CPU not supported by the target\";\n+      end if;\n \n-      elsif (ST_DD and not ST.System_Domain (Rng)) /= (Rng => False) then\n-         raise Dispatching_Domain_Error with\n-           \"CPU not currently in System_Dispatching_Domain\";\n+      declare\n+         System_Domain_Slice : constant ST.Dispatching_Domain :=\n+           ST.System_Domain (Rng);\n+         Actual : constant ST.Dispatching_Domain :=\n+           ST_DD_Slice and not System_Domain_Slice;\n+         Expected : constant ST.Dispatching_Domain := (Rng => False);\n+      begin\n+         if Actual /= Expected then\n+            raise Dispatching_Domain_Error with\n+              \"CPU not currently in System_Dispatching_Domain\";\n+         end if;\n+      end;\n \n-      elsif Self /= Environment_Task then\n+      if Self /= Environment_Task then\n          raise Dispatching_Domain_Error with\n            \"only the environment task can create dispatching domains\";\n+      end if;\n \n-      elsif ST.Dispatching_Domains_Frozen then\n+      if ST.Dispatching_Domains_Frozen then\n          raise Dispatching_Domain_Error with\n            \"cannot create dispatching domain after call to main procedure\";\n       end if;\n@@ -174,44 +185,44 @@ package body System.Multiprocessors.Dispatching_Domains is\n          end if;\n       end loop;\n \n-      New_System_Domain (Rng) := New_System_Domain (Rng) and not ST_DD;\n+      New_System_Domain (Rng) := New_System_Domain (Rng) and not ST_DD_Slice;\n \n       if New_System_Domain = (New_System_Domain'Range => False) then\n          raise Dispatching_Domain_Error with\n            \"would leave System_Dispatching_Domain empty\";\n       end if;\n \n-      New_Domain := new ST.Dispatching_Domain'(ST_DD);\n-\n-      --  At this point we need to fix the processors belonging to the system\n-      --  domain, and change the affinity of every task that has been created\n-      --  and assigned to the system domain.\n-\n-      ST.Initialization.Defer_Abort (Self);\n+      return Result : constant Dispatching_Domain :=\n+        new ST.Dispatching_Domain'(ST_DD_Slice)\n+      do\n+         --  At this point we need to fix the processors belonging to the\n+         --  system domain, and change the affinity of every task that has\n+         --  been created and assigned to the system domain.\n \n-      Lock_RTS;\n+         ST.Initialization.Defer_Abort (Self);\n \n-      ST.System_Domain (Rng) := New_System_Domain (Rng);\n-      pragma Assert (ST.System_Domain.all = New_System_Domain);\n+         Lock_RTS;\n \n-      --  Iterate the list of tasks belonging to the default system\n-      --  dispatching domain and set the appropriate affinity.\n+         ST.System_Domain (Rng) := New_System_Domain (Rng);\n+         pragma Assert (ST.System_Domain.all = New_System_Domain);\n \n-      T := ST.All_Tasks_List;\n+         --  Iterate the list of tasks belonging to the default system\n+         --  dispatching domain and set the appropriate affinity.\n \n-      while T /= null loop\n-         if T.Common.Domain = ST.System_Domain then\n-            Set_Task_Affinity (T);\n-         end if;\n+         T := ST.All_Tasks_List;\n \n-         T := T.Common.All_Tasks_Link;\n-      end loop;\n+         while T /= null loop\n+            if T.Common.Domain = ST.System_Domain then\n+               Set_Task_Affinity (T);\n+            end if;\n \n-      Unlock_RTS;\n+            T := T.Common.All_Tasks_Link;\n+         end loop;\n \n-      ST.Initialization.Undefer_Abort (Self);\n+         Unlock_RTS;\n \n-      return New_Domain;\n+         ST.Initialization.Undefer_Abort (Self);\n+      end return;\n    end Create;\n \n    -----------------------------"}, {"sha": "5be1b3941f8e40ebd320e90b887f79603b89091f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -1531,7 +1531,7 @@ package body Sem_Attr is\n                  (\"expression for dimension must be static!\", E1);\n                Error_Attr;\n \n-            elsif  UI_To_Int (Expr_Value (E1)) > D\n+            elsif UI_To_Int (Expr_Value (E1)) > D\n               or else UI_To_Int (Expr_Value (E1)) < 1\n             then\n                Error_Attr (\"invalid dimension number for array type\", E1);"}, {"sha": "ea83e834e6779d7ce19b940df6d6e6a3b39d5090", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -291,7 +291,7 @@ package body Sem_Aux is\n             if Is_Itype (Ent) then\n                null;\n \n-            elsif  Ekind (Ent) = E_Discriminant\n+            elsif Ekind (Ent) = E_Discriminant\n               and then Is_Completely_Hidden (Ent)\n             then\n                return True;"}, {"sha": "da3bd903bd3c837f6726c5add9d62b1f37efaa23", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -5842,7 +5842,7 @@ package body Sem_Ch12 is\n                return False;\n \n             elsif Is_Entity_Name (Constant_Value (Ent)) then\n-               if  Entity (Constant_Value (Ent)) = E1 then\n+               if Entity (Constant_Value (Ent)) = E1 then\n                   return True;\n                else\n                   Ent := Entity (Constant_Value (Ent));"}, {"sha": "75c1f3bd8a0f9f444d7204c0a54540093f8afe3b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -3846,7 +3846,7 @@ package body Sem_Ch13 is\n             --  the type of the formal match, or one is the class-wide of the\n             --  other, in the case of a class-wide stream operation.\n \n-            if  Base_Type (Typ) = Base_Type (Ent)\n+            if Base_Type (Typ) = Base_Type (Ent)\n               or else (Is_Class_Wide_Type (Typ)\n                         and then Typ = Class_Wide_Type (Base_Type (Ent)))\n               or else (Is_Class_Wide_Type (Ent)"}, {"sha": "fe677541eb13f53f4404e7ebacd08526bd19df04", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -3695,7 +3695,7 @@ package body Sem_Ch4 is\n \n       if Is_Class_Wide_Type (T) then\n          if not Is_Overloaded (Expr) then\n-            if  Base_Type (Etype (Expr)) /= Base_Type (T) then\n+            if Base_Type (Etype (Expr)) /= Base_Type (T) then\n                if Nkind (Expr) = N_Aggregate then\n                   Error_Msg_N (\"type of aggregate cannot be class-wide\", Expr);\n                else"}, {"sha": "609babcfaa08bfbf447c9bb80a5a9df31a873ff3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -1038,7 +1038,7 @@ package body Sem_Ch6 is\n          --  inside of the subprogram (except if it is the subtype indication\n          --  of an extended return statement).\n \n-         elsif  Ekind (R_Type) = E_Anonymous_Access_Subprogram_Type then\n+         elsif Ekind (R_Type) = E_Anonymous_Access_Subprogram_Type then\n             if not Comes_From_Source (Current_Scope)\n               or else Ekind (Current_Scope) = E_Return_Statement\n             then"}, {"sha": "5eb47053c2079002a039759a144e3ba05220c39e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -2385,7 +2385,7 @@ package body Sem_Res is\n                         --  operators, which are not declared with the type\n                         --  of the operand, but appear forever in Standard.\n \n-                        if  It.Typ = Universal_Fixed\n+                        if It.Typ = Universal_Fixed\n                           and then Scope (It.Nam) = Standard_Standard\n                         then\n                            Error_Msg_N\n@@ -7564,7 +7564,7 @@ package body Sem_Res is\n          begin\n             New_Actuals := New_List (Obj);\n \n-            if  Nkind (Entry_Name) = N_Indexed_Component then\n+            if Nkind (Entry_Name) = N_Indexed_Component then\n                Append_To (New_Actuals,\n                  New_Copy_Tree (First (Expressions (Entry_Name))));\n             end if;"}, {"sha": "8312367c94ed71d4d0c915a0a1905eb0eb680064", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -8021,8 +8021,8 @@ package Sinfo is\n       --  SCIL_Controlling_Tag (Node5-Sem)\n       --\n       --  An N_Scil_Dispatching call node may be associated (via Get_SCIL_Node)\n-      --  with the N_Procedure_Call or N_Function_Call node (or a rewriting\n-      --  thereof) corresponding to a dispatching call.\n+      --  with the N_Procedure_Call_Statement or N_Function_Call node (or a\n+      --  rewriting thereof) corresponding to a dispatching call.\n \n       --  N_SCIL_Membership_Test\n       --  Sloc references the node of a membership test"}, {"sha": "8e3806e0ef98bb16943b65c1c2353b1d92d8264a", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe696a3b387562aceca53cdf20f46e3bfe0d2b4/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=9fe696a3b387562aceca53cdf20f46e3bfe0d2b4", "patch": "@@ -564,17 +564,18 @@ package body Switch.B is\n \n                         Ptr := Max + 1;\n \n-                     elsif  Src_Path_Name = null\n+                     elsif Src_Path_Name = null\n                        and then Lib_Path_Name = null\n                      then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adainclude and adalib directories\");\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adainclude and \"\n+                           & \"adalib directories\");\n                      elsif Src_Path_Name = null then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adainclude directory\");\n-                     elsif  Lib_Path_Name = null then\n-                        Osint.Fail (\"RTS path not valid: missing \" &\n-                                    \"adalib directory\");\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adainclude directory\");\n+                     elsif Lib_Path_Name = null then\n+                        Osint.Fail\n+                          (\"RTS path not valid: missing adalib directory\");\n                      end if;\n                   end;\n                end if;"}]}