{"sha": "aedd04caa945260ea77fd22f29b77292f7dba72e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkZDA0Y2FhOTQ1MjYwZWE3N2ZkMjJmMjliNzcyOTJmN2RiYTcyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-22T06:27:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-22T06:27:55Z"}, "message": "c++: generic lambda forwarding function [PR94546]\n\nWhile instantiating test(Plot) we partially instantiate the generic lambda.\nWe look at forward<T>(rest)... and see that it's just replacing parameter\npacks with new parameter packs and tries to do a direct substitution.  But\nbecause register_parameter_specializations had built up a\nNONTYPE_ARGUMENT_PACK around the new parameter pack, the substitution\nfailed.  So let's not wrap it that way.\n\ngcc/cp/ChangeLog\n2020-04-22  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94546\n\t* pt.c (register_parameter_specializations): If the instantiation is\n\tstill a parameter pack, don't wrap it in a NONTYPE_ARGUMENT_PACK.\n\t(tsubst_pack_expansion, tsubst_expr): Adjust.", "tree": {"sha": "d4cae8c16debd115b4d80c2e9f01f050c9b2c64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4cae8c16debd115b4d80c2e9f01f050c9b2c64b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aedd04caa945260ea77fd22f29b77292f7dba72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedd04caa945260ea77fd22f29b77292f7dba72e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedd04caa945260ea77fd22f29b77292f7dba72e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedd04caa945260ea77fd22f29b77292f7dba72e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "587970215f4681def390e2a791aa3ba6adb65158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587970215f4681def390e2a791aa3ba6adb65158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587970215f4681def390e2a791aa3ba6adb65158"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "4b6691a77f0be7e88c8afb16394b937ac1c26301", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aedd04caa945260ea77fd22f29b77292f7dba72e", "patch": "@@ -1,3 +1,10 @@\n+2020-04-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94546\n+\t* pt.c (register_parameter_specializations): If the instantiation is\n+\tstill a parameter pack, don't wrap it in a NONTYPE_ARGUMENT_PACK.\n+\t(tsubst_pack_expansion, tsubst_expr): Adjust.\n+\n 2020-04-22  Martin Sebor  <msebor@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "2fe7b66707c69a72df7cce053fadfceac654b48f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aedd04caa945260ea77fd22f29b77292f7dba72e", "patch": "@@ -12753,7 +12753,6 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   tree pattern;\n   tree pack, packs = NULL_TREE;\n   bool unsubstituted_packs = false;\n-  bool unsubstituted_fn_pack = false;\n   int i, len = -1;\n   tree result;\n   bool need_local_specializations = false;\n@@ -12833,19 +12832,15 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t      else\n \t\targ_pack = make_fnparm_pack (arg_pack);\n \t    }\n-\t  else if (argument_pack_element_is_expansion_p (arg_pack, 0))\n-\t    /* This argument pack isn't fully instantiated yet.  We set this\n-\t       flag rather than clear arg_pack because we do want to do the\n-\t       optimization below, and we don't want to substitute directly\n-\t       into the pattern (as that would expose a NONTYPE_ARGUMENT_PACK\n-\t       where it isn't expected).  */\n-\t    unsubstituted_fn_pack = true;\n+\t  else if (DECL_PACK_P (arg_pack))\n+\t    /* This argument pack isn't fully instantiated yet.  */\n+\t    arg_pack = NULL_TREE;\n \t}\n       else if (is_capture_proxy (parm_pack))\n \t{\n \t  arg_pack = retrieve_local_specialization (parm_pack);\n-\t  if (argument_pack_element_is_expansion_p (arg_pack, 0))\n-\t    unsubstituted_fn_pack = true;\n+\t  if (DECL_PACK_P (arg_pack))\n+\t    arg_pack = NULL_TREE;\n \t}\n       else\n         {\n@@ -12880,8 +12875,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n           if (len < 0)\n \t    len = my_len;\n-          else if (len != my_len\n-\t\t   && !unsubstituted_fn_pack)\n+\t  else if (len != my_len)\n             {\n \t      if (!(complain & tf_error))\n \t\t/* Fail quietly.  */;\n@@ -12904,10 +12898,6 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t  /* We can't substitute for this parameter pack.  We use a flag as\n \t     well as the missing_level counter because function parameter\n \t     packs don't have a level.  */\n-          if (!(processing_template_decl || is_auto (parm_pack)))\n-\t    {\n-\t      gcc_unreachable ();\n-\t    }\n \t  gcc_assert (processing_template_decl || is_auto (parm_pack));\n \t  unsubstituted_packs = true;\n \t}\n@@ -17897,7 +17887,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t      {\n \t\tinst = (retrieve_local_specialization\n \t\t\t(DECL_CAPTURED_VARIABLE (decl)));\n-\t\tgcc_assert (TREE_CODE (inst) == NONTYPE_ARGUMENT_PACK);\n+\t\tgcc_assert (TREE_CODE (inst) == NONTYPE_ARGUMENT_PACK\n+\t\t\t    || DECL_PACK_P (inst));\n \t      }\n \t    else\n \t      inst = lookup_init_capture_pack (decl);\n@@ -25315,7 +25306,8 @@ register_parameter_specializations (tree pattern, tree inst)\n     }\n   for (; tmpl_parm; tmpl_parm = DECL_CHAIN (tmpl_parm))\n     {\n-      if (!DECL_PACK_P (tmpl_parm))\n+      if (!DECL_PACK_P (tmpl_parm)\n+\t  || (spec_parm && DECL_PACK_P (spec_parm)))\n \t{\n \t  register_local_specialization (spec_parm, tmpl_parm);\n \t  spec_parm = DECL_CHAIN (spec_parm);"}, {"sha": "3d69dbb8e9898cbf1df6de342f7b649c42c72910", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedd04caa945260ea77fd22f29b77292f7dba72e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C?ref=aedd04caa945260ea77fd22f29b77292f7dba72e", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/94546\n+// { dg-do compile { target c++2a } }\n+\n+template <class T> T&& forward(T&& t) { return static_cast<T&&>(t); }\n+\n+template <class X>\n+void test(X&& plot)\n+{\n+    // Note: For brevity, this lambda function is only\n+    // defined, not called nor assigned to a variable.\n+    // Doing those things won't fix the error.\n+    [&]<class... T>(T&&... rest)\n+    {\n+        plot(forward<T>(rest)...);\n+    };\n+}\n+int main()\n+{\n+    auto Plot = [](auto&&...)\n+    {\n+    };\n+    test(Plot);\n+}"}]}