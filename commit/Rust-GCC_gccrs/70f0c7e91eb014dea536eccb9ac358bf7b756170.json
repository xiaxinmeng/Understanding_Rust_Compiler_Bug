{"sha": "70f0c7e91eb014dea536eccb9ac358bf7b756170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmMGM3ZTkxZWIwMTRkZWE1MzZlY2NiOWFjMzU4YmY3Yjc1NjE3MA==", "commit": {"author": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-08-06T17:09:02Z"}, "committer": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-08-06T17:09:02Z"}, "message": "Rewrite to be compatible with hpux.\n\nFrom-SVN: r1773", "tree": {"sha": "8c2402c49d15dfeb0f5a8bd0890338c7f445e66b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2402c49d15dfeb0f5a8bd0890338c7f445e66b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f0c7e91eb014dea536eccb9ac358bf7b756170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0c7e91eb014dea536eccb9ac358bf7b756170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f0c7e91eb014dea536eccb9ac358bf7b756170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0c7e91eb014dea536eccb9ac358bf7b756170/comments", "author": null, "committer": null, "parents": [{"sha": "aa501fb73c4b7c75062bd2f9adab5e299d9b3bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa501fb73c4b7c75062bd2f9adab5e299d9b3bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa501fb73c4b7c75062bd2f9adab5e299d9b3bf8"}], "stats": {"total": 98, "additions": 19, "deletions": 79}, "files": [{"sha": "0d84ef7ae860f9a9d9b39f4f0de37f2cdc8aaa0d", "filename": "gcc/ginclude/va-pa.h", "status": "modified", "additions": 19, "deletions": 79, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f0c7e91eb014dea536eccb9ac358bf7b756170/gcc%2Fginclude%2Fva-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f0c7e91eb014dea536eccb9ac358bf7b756170/gcc%2Fginclude%2Fva-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pa.h?ref=70f0c7e91eb014dea536eccb9ac358bf7b756170", "patch": "@@ -1,98 +1,38 @@\n #if __GNUC__ > 1\n \n-/* Define __gnuc_va_list.  */\n+/* Define __gnuc_va_list. */\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n \n-typedef struct\n-{\n-  char *__va_stack_start;\t/* Real start of stack args. */\n-  char *__va_int;\t\t/* Pointer to the general register */\n-\t\t\t\t/* args and stack. */\n-  char *__va_float;\t\t/* Pointer to the fp register args.  */\n-  char *__va_double;\n-} __gnuc_va_list;\n+typedef double *__gnuc_va_list;\n #endif /* not __GNUC_VA_LIST */\n \n /* If this is for internal libc use, don't define anything but\n    __gnuc_va_list.  */\n #if defined (_STDARG_H) || defined (_VARARGS_H)\n-\n #ifdef _STDARG_H\n-#define va_start(AP,LASTARG) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())\n+#define va_start(AP,LASTARG) ((AP) = (va_list)__builtin_saveregs())\n #else\n-#define va_alist  __builtin_va_alist\n /* The ... causes current_function_varargs to be set in cc1.  */\n-#define va_dcl    int __builtin_va_alist; ...\n-#define va_start(AP) ((AP) = *(__gnuc_va_list *)__builtin_saveregs())\n-#endif /* _STDARG_H */\n-\n-/* Handle pass by invisible reference and voids left by aligned */\n-/* doubles. */\n-\n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n-\n-#define va_arg(AP, TYPE) \\\n-  (((__va_rounded_size(TYPE) <= 8)\t\t\t\t       \t\\\n-    ? ((AP).__va_int -= __va_rounded_size (TYPE),\t\t\t\\\n-       (AP).__va_float -= __va_rounded_size (TYPE),\t\t\t\\\n-       (AP).__va_double -= __va_rounded_size (TYPE),\t\t\t\\\n-       (__alignof__ (TYPE) > 4 ? ((int)(AP).__va_int &= ~(0x7),\t\t\\\n-\t\t\t\t  (int)(AP).__va_float &= ~(0x7),\t\\\n-\t\t\t\t  (int)(AP).__va_double &= ~(0x7)) : 0))\\\n-    : (int)((AP).__va_int -= sizeof (TYPE *),\t\t\t\t\\\n-\t    (AP).__va_float -= sizeof (TYPE *),\t\t\t\t\\\n-\t    (AP).__va_double -= sizeof (TYPE *))),\t\t\t\\\n-   (((AP).__va_int < (AP).__va_stack_start\t\t\t\t\\\n-     || __builtin_classify_type (* (TYPE *) 0) != 8)\t\t\t\\\n-    ? ((__va_rounded_size(TYPE) <= 8) ? *(TYPE *)(AP).__va_int\t\t\\\n-       : **(TYPE **)(AP).__va_int)\t\t\t\t\t\\\n-    : ((__va_rounded_size(TYPE) <= 4) ? *(TYPE *)(AP).__va_float\t\\\n-       : ((__va_rounded_size(TYPE) <= 8) ? *(TYPE *)(AP).__va_double\t\\\n-\t  : **(TYPE **)(AP).__va_int))))\n+#define va_dcl long va_alist; ...\n+#define va_start(AP) ((AP) = (va_list)__builtin_saveregs())\n+#endif\n+\n+#define va_arg(AP,TYPE)\t\t\t\t\t\t\\\n+  (sizeof(TYPE) > 8 ?\t\t\t\t\t\t\\\n+   ((AP = (__gnuc_va_list) ((char *)AP - sizeof (int))),\t\\\n+    (*((TYPE *) (*((int *) (AP))))))\t\t\t\t\\\n+   :((AP =\t\t\t\t\t\t\t\\\n+      (__gnuc_va_list) ((long)((char *)AP - sizeof (TYPE))\t\\\n+\t\t\t& (sizeof(TYPE) > 4 ? ~0x7 : ~0x3))),\t\\\n+     (*((TYPE *) ((char *)AP + ((8 - sizeof(TYPE)) % 4))))))\n \n-\n-void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(AP)\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n \n-#else /* not __GNUCC_ > 1 */\n-\n-typedef char *va_list;\n-\n-/* __builtin_saveregs () tickles a bug in the pa-risc gcc 1.39 port, */\n-/* so don't use it for varargs. Obviously the stdarg stuff doesn't */\n-/* work very well. */ \n-\n-#ifdef _STDARG_H\n-#define va_start(AP,LASTARG) \\\n-  (__builtin_saveregs(), (AP) = __builtin_next_arg ())\n-\n-/* gcc1 doesn't implement pass by invisible reference */ \n-#define __va_rounded_size(TYPE)  \\\n-  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n-\n-#define va_arg(AP,TYPE) \\\n-  ((AP) -= __va_rounded_size (TYPE), (__alignof__ (TYPE) > 4 ?\t\\\n-\t\t\t\t      (int)AP &= ~(0x7) : 0),\t\\\n-   *(TYPE *)(AP))\n-\n-void va_end (va_list);\t\t/* Defined in libgcc.a */\n-#define va_end(AP)\n-#else /* _STDARG_H */\n-#define va_alist __va_a__, __va_b__, __va_c__, __va_d__\n-#define va_dcl int __va_a__, __va_b__, __va_c__, __va_d__;\n-#define va_start(list) list = (char *) &__va_a__, &__va_b__, &__va_c__, \\\n-  &__va_d__\n-\n-# define va_arg(list,mode) *(mode *) ((int) (list = (char *) \\\n-\t(((int) list + sizeof(int /*__va_a__*/) - sizeof(mode)) & ~(sizeof(mode)-1)) \\\n-\t- sizeof(int /*__va_a__*/)) + sizeof(int /*__va_a__*/))\n-  \n-#define va_end(list)\n-\n-#endif /* _STDARG_H */\n-#endif /* not __GNUCC__ > 1 */\n+#else /* not __GNUC__ > 1 */\n+#include \"/usr/local/lib/gcc-include/va-hp9k8.h\"\n+#define _VA_LIST_\n+#endif"}]}