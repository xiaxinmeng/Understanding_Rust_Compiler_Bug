{"sha": "070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwZWRiYzI5YzRmNGE3MTZjYzZmNGQ5YjAzOGM5ZjM4ZjkzMDBhMA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-04-17T10:19:40Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-04-17T10:19:40Z"}, "message": "PR 40958 Compress module files with zlib.\n\nfrontend ChangeLog:\n\n2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/40958\n\t* scanner.h: New file.\n\t* Make-lang.in: Dependencies on scanner.h.\n\t* scanner.c (gfc_directorylist): Move to scanner.h.\n\t* module.c: Don't include md5.h, include scanner.h and zlib.h.\n\t(MOD_VERSION): Add comment about backwards compatibility.\n\t(module_fp): Change type to gzFile.\n\t(ctx): Remove.\n\t(gzopen_included_file_1): New function.\n\t(gzopen_included_file): New function.\n\t(gzopen_intrinsic_module): New function.\n\t(write_char): Use gzputc.\n\t(read_crc32_from_module_file): New function.\n\t(read_md5_from_module_file): Remove.\n\t(gfc_dump_module): Use gz* functions instead of stdio, check gzip\n\tcrc32 instead of md5.\n\t(read_module_to_tmpbuf): Use gz* functions instead of stdio.\n\t(gfc_use_module): Use gz* functions.\n\ntestsuite ChangeLog:\n\n2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        PR fortran/40958\n        * lib/gcc-dg.exp (scan-module): Uncompress module file before\n        scanning.\n        * gfortran.dg/module_md5_1.f90: Remove.\n\nFrom-SVN: r198023", "tree": {"sha": "bdc067d3b77ecfbdb6d53c500ae6f5cefa3c906d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdc067d3b77ecfbdb6d53c500ae6f5cefa3c906d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/comments", "author": null, "committer": null, "parents": [{"sha": "10a883113b6d5657efeb9d3eedef1a13f97185f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a883113b6d5657efeb9d3eedef1a13f97185f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a883113b6d5657efeb9d3eedef1a13f97185f3"}], "stats": {"total": 313, "additions": 204, "deletions": 109}, "files": [{"sha": "af1370813dcb34a9423a2dc769c90fa40a136b4c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -1,3 +1,24 @@\n+2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/40958\n+\t* scanner.h: New file.\n+\t* Make-lang.in: Dependencies on scanner.h.\n+\t* scanner.c (gfc_directorylist): Move to scanner.h.\n+\t* module.c: Don't include md5.h, include scanner.h and zlib.h.\n+\t(MOD_VERSION): Add comment about backwards compatibility.\n+\t(module_fp): Change type to gzFile.\n+\t(ctx): Remove.\n+\t(gzopen_included_file_1): New function.\n+\t(gzopen_included_file): New function.\n+\t(gzopen_intrinsic_module): New function.\n+\t(write_char): Use gzputc.\n+\t(read_crc32_from_module_file): New function.\n+\t(read_md5_from_module_file): Remove.\n+\t(gfc_dump_module): Use gz* functions instead of stdio, check gzip\n+\tcrc32 instead of md5.\n+\t(read_module_to_tmpbuf): Use gz* functions instead of stdio.\n+\t(gfc_use_module): Use gz* functions.\n+\n 2013-04-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39505"}, {"sha": "5ce2a2451525d4cdb818cc9ba6fd4f7dfafdebf1", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -369,3 +369,5 @@ fortran/resolve.o: fortran/dependency.h fortran/data.h fortran/target-memory.h\n fortran/data.o: fortran/data.h\n fortran/options.o: $(PARAMS_H) $(TARGET_H) fortran/cpp.h\n fortran/cpp.o: fortran/cpp.c incpath.h incpath.o cppbuiltin.h\n+fortran/scanner.o: fortran/scanner.h\n+fortran/module.o: fortran/scanner.h"}, {"sha": "e6a4cd7046a6a32cc498f2fc4475a92028136aeb", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 139, "deletions": 85, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -71,15 +71,18 @@ along with GCC; see the file COPYING3.  If not see\n #include \"arith.h\"\n #include \"match.h\"\n #include \"parse.h\" /* FIXME */\n-#include \"md5.h\"\n #include \"constructor.h\"\n #include \"cpp.h\"\n #include \"tree.h\"\n+#include \"scanner.h\"\n+#include <zlib.h>\n \n #define MODULE_EXTENSION \".mod\"\n \n-/* Don't put any single quote (') in MOD_VERSION, \n-   if yout want it to be recognized.  */\n+/* Don't put any single quote (') in MOD_VERSION, if you want it to be\n+   recognized.  \n+   TODO: When the version is bumped, remove the extra empty line at\n+   the beginning of module files.  */\n #define MOD_VERSION \"10\"\n \n \n@@ -180,11 +183,9 @@ pointer_info;\n \n /* Local variables */\n \n-/* The FILE for the module we're reading or writing.  */\n-static FILE *module_fp;\n+/* The gzFile for the module we're reading or writing.  */\n+static gzFile module_fp;\n \n-/* MD5 context structure.  */\n-static struct md5_ctx ctx;\n \n /* The name of the module we're reading (USE'ing) or writing.  */\n static const char *module_name;\n@@ -976,6 +977,76 @@ free_true_name (true_name *t)\n \n /* Module reading and writing.  */\n \n+/* The following are versions similar to the ones in scanner.c, but\n+   for dealing with compressed module files.  */\n+\n+static gzFile\n+gzopen_included_file_1 (const char *name, gfc_directorylist *list,\n+                     bool module, bool system)\n+{\n+  char *fullname;\n+  gfc_directorylist *p;\n+  gzFile f;\n+\n+  for (p = list; p; p = p->next)\n+    {\n+      if (module && !p->use_for_modules)\n+       continue;\n+\n+      fullname = (char *) alloca(strlen (p->path) + strlen (name) + 1);\n+      strcpy (fullname, p->path);\n+      strcat (fullname, name);\n+\n+      f = gzopen (fullname, \"r\");\n+      if (f != NULL)\n+       {\n+         if (gfc_cpp_makedep ())\n+           gfc_cpp_add_dep (fullname, system);\n+\n+         return f;\n+       }\n+    }\n+\n+  return NULL;\n+}\n+\n+static gzFile \n+gzopen_included_file (const char *name, bool include_cwd, bool module)\n+{\n+  gzFile f = NULL;\n+\n+  if (IS_ABSOLUTE_PATH (name) || include_cwd)\n+    {\n+      f = gzopen (name, \"r\");\n+      if (f && gfc_cpp_makedep ())\n+       gfc_cpp_add_dep (name, false);\n+    }\n+\n+  if (!f)\n+    f = gzopen_included_file_1 (name, include_dirs, module, false);\n+\n+  return f;\n+}\n+\n+static gzFile\n+gzopen_intrinsic_module (const char* name)\n+{\n+  gzFile f = NULL;\n+\n+  if (IS_ABSOLUTE_PATH (name))\n+    {\n+      f = gzopen (name, \"r\");\n+      if (f && gfc_cpp_makedep ())\n+        gfc_cpp_add_dep (name, true);\n+    }\n+\n+  if (!f)\n+    f = gzopen_included_file_1 (name, intrinsic_modules_dirs, true, true);\n+\n+  return f;\n+}\n+\n+\n typedef enum\n {\n   ATOM_NAME, ATOM_LPAREN, ATOM_RPAREN, ATOM_INTEGER, ATOM_STRING\n@@ -1463,12 +1534,9 @@ read_string (void)\n static void\n write_char (char out)\n {\n-  if (putc (out, module_fp) == EOF)\n+  if (gzputc (module_fp, out) == EOF)\n     gfc_fatal_error (\"Error writing modules file: %s\", xstrerror (errno));\n \n-  /* Add this to our MD5.  */\n-  md5_process_bytes (&out, sizeof (out), &ctx);\n-  \n   if (out != '\\n')\n     module_column++;\n   else\n@@ -5407,61 +5475,47 @@ write_module (void)\n }\n \n \n-/* Read a MD5 sum from the header of a module file.  If the file cannot\n-   be opened, or we have any other error, we return -1.  */\n+/* Read a CRC32 sum from the gzip trailer of a module file.  Returns\n+   true on success, false on failure.  */\n \n-static int\n-read_md5_from_module_file (const char * filename, unsigned char md5[16])\n+static bool\n+read_crc32_from_module_file (const char* filename, uLong* crc)\n {\n   FILE *file;\n-  char buf[1024];\n-  int n;\n+  char buf[4];\n+  unsigned int val;\n \n-  /* Open the file.  */\n-  if ((file = fopen (filename, \"r\")) == NULL)\n-    return -1;\n+  /* Open the file in binary mode.  */\n+  if ((file = fopen (filename, \"rb\")) == NULL)\n+    return false;\n \n-  /* Read the first line.  */\n-  if (fgets (buf, sizeof (buf) - 1, file) == NULL)\n+  /* The gzip crc32 value is found in the [END-8, END-4] bytes of the\n+     file. See RFC 1952.  */\n+  if (fseek (file, -8, SEEK_END) != 0)\n     {\n       fclose (file);\n-      return -1;\n+      return false;\n     }\n \n-  /* The file also needs to be overwritten if the version number changed.  */\n-  n = strlen (\"GFORTRAN module version '\" MOD_VERSION \"' created\");\n-  if (strncmp (buf, \"GFORTRAN module version '\" MOD_VERSION \"' created\", n) != 0)\n+  /* Read the CRC32.  */\n+  if (fread (buf, 1, 4, file) != 4)\n     {\n       fclose (file);\n-      return -1;\n-    }\n- \n-  /* Read a second line.  */\n-  if (fgets (buf, sizeof (buf) - 1, file) == NULL)\n-    {\n-      fclose (file);\n-      return -1;\n+      return false;\n     }\n \n   /* Close the file.  */\n   fclose (file);\n \n-  /* If the header is not what we expect, or is too short, bail out.  */\n-  if (strncmp (buf, \"MD5:\", 4) != 0 || strlen (buf) < 4 + 16)\n-    return -1;\n-\n-  /* Now, we have a real MD5, read it into the array.  */\n-  for (n = 0; n < 16; n++)\n-    {\n-      unsigned int x;\n-\n-      if (sscanf (&(buf[4+2*n]), \"%02x\", &x) != 1)\n-       return -1;\n-\n-      md5[n] = x;\n-    }\n+  val = (buf[0] & 0xFF) + ((buf[1] & 0xFF) << 8) + ((buf[2] & 0xFF) << 16) \n+    + ((buf[3] & 0xFF) << 24);\n+  *crc = val;\n+  \n+  /* For debugging, the CRC value printed in hexadecimal should match\n+     the CRC printed by \"zcat -l -v filename\".\n+     printf(\"CRC of file %s is %x\\n\", filename, val); */\n \n-  return 0;\n+  return true;\n }\n \n \n@@ -5474,8 +5528,7 @@ gfc_dump_module (const char *name, int dump_flag)\n {\n   int n;\n   char *filename, *filename_tmp;\n-  fpos_t md5_pos;\n-  unsigned char md5_new[16], md5_old[16];\n+  uLong crc, crc_old;\n \n   n = strlen (name) + strlen (MODULE_EXTENSION) + 1;\n   if (gfc_option.module_dir != NULL)\n@@ -5509,20 +5562,18 @@ gfc_dump_module (const char *name, int dump_flag)\n     gfc_cpp_add_target (filename);\n \n   /* Write the module to the temporary file.  */\n-  module_fp = fopen (filename_tmp, \"w\");\n+  module_fp = gzopen (filename_tmp, \"w\");\n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for writing at %C: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n-  /* Write the header, including space reserved for the MD5 sum.  */\n-  fprintf (module_fp, \"GFORTRAN module version '%s' created from %s\\n\"\n-\t   \"MD5:\", MOD_VERSION, gfc_source_file);\n-  fgetpos (module_fp, &md5_pos);\n-  fputs (\"00000000000000000000000000000000 -- \"\n-\t\"If you edit this, you'll get what you deserve.\\n\\n\", module_fp);\n+  /* Write the header.\n+     FIXME: For backwards compatibility with the old uncompressed\n+     module format, write an extra empty line. When the module version\n+     is bumped, this can be removed.  */\n+  gzprintf (module_fp, \"GFORTRAN module version '%s' created from %s\\n\\n\",\n+\t    MOD_VERSION, gfc_source_file);\n \n-  /* Initialize the MD5 context that will be used for output.  */\n-  md5_init_ctx (&ctx);\n \n   /* Write the module itself.  */\n   iomode = IO_OUTPUT;\n@@ -5537,24 +5588,17 @@ gfc_dump_module (const char *name, int dump_flag)\n \n   write_char ('\\n');\n \n-  /* Write the MD5 sum to the header of the module file.  */\n-  md5_finish_ctx (&ctx, md5_new);\n-  fsetpos (module_fp, &md5_pos);\n-  for (n = 0; n < 16; n++)\n-    fprintf (module_fp, \"%02x\", md5_new[n]);\n-\n-  if (fclose (module_fp))\n+  if (gzclose (module_fp))\n     gfc_fatal_error (\"Error writing module file '%s' for writing: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n-  /* Read the MD5 from the header of the old module file and compare.  */\n-  if (read_md5_from_module_file (filename, md5_old) != 0\n-      || memcmp (md5_old, md5_new, sizeof (md5_old)) != 0)\n+  /* Read the CRC32 from the gzip trailers of the module files and\n+     compare.  */\n+  if (!read_crc32_from_module_file (filename_tmp, &crc)\n+      || !read_crc32_from_module_file (filename, &crc_old)\n+      || crc_old != crc)\n     {\n       /* Module file have changed, replace the old one.  */\n-      if (unlink (filename) && errno != ENOENT)\n-\tgfc_fatal_error (\"Can't delete module file '%s': %s\", filename,\n-\t\t\t xstrerror (errno));\n       if (rename (filename_tmp, filename))\n \tgfc_fatal_error (\"Can't rename module file '%s' to '%s': %s\",\n \t\t\t filename_tmp, filename, xstrerror (errno));\n@@ -6023,17 +6067,27 @@ create_derived_type (const char *name, const char *modname,\n static void\n read_module_to_tmpbuf ()\n {\n-  /* Find out the size of the file and reserve space.  Assume we're at\n-     the beginning.  */\n-  fseek (module_fp, 0, SEEK_END);\n-  long file_size = ftell (module_fp);\n-  fseek (module_fp, 0, SEEK_SET);\n+  /* We don't know the uncompressed size, so enlarge the buffer as\n+     needed.  */\n+  int cursz = 4096;\n+  int rsize = cursz;\n+  int len = 0;\n+\n+  module_content = XNEWVEC (char, cursz);\n \n-  /* An extra byte for the terminating NULL.  */\n-  module_content = XNEWVEC (char, file_size + 1);\n+  while (1)\n+    {\n+      int nread = gzread (module_fp, module_content + len, rsize);\n+      len += nread;\n+      if (nread < rsize)\n+\tbreak;\n+      cursz *= 2;\n+      module_content = XRESIZEVEC (char, module_content, cursz);\n+      rsize = cursz - len;\n+    }\n \n-  fread (module_content, 1, file_size, module_fp);\n-  module_content[file_size] = '\\0';\n+  module_content = XRESIZEVEC (char, module_content, len + 1);\n+  module_content[len] = '\\0';\n \n   module_pos = 0;\n }\n@@ -6254,7 +6308,7 @@ gfc_use_module (gfc_use_list *module)\n      specified that the module is intrinsic.  */\n   module_fp = NULL;\n   if (!module->intrinsic)\n-    module_fp = gfc_open_included_file (filename, true, true);\n+    module_fp = gzopen_included_file (filename, true, true);\n \n   /* Then, see if it's an intrinsic one, unless the USE statement\n      specified that the module is non-intrinsic.  */\n@@ -6283,7 +6337,7 @@ gfc_use_module (gfc_use_list *module)\n \t  return;\n \t}\n \n-      module_fp = gfc_open_intrinsic_module (filename);\n+      module_fp = gzopen_intrinsic_module (filename);\n \n       if (module_fp == NULL && module->intrinsic)\n \tgfc_fatal_error (\"Can't find an intrinsic module named '%s' at %C\",\n@@ -6308,7 +6362,7 @@ gfc_use_module (gfc_use_list *module)\n   start = 0;\n \n   read_module_to_tmpbuf ();\n-  fclose (module_fp);\n+  gzclose (module_fp);\n \n   /* Skip the first two lines of the module, after checking that this is\n      a gfortran module file.  */"}, {"sha": "882e2d5e06f46c8080a25e37e7d5f4f46bee2b81", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -48,18 +48,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"flags.h\"\n #include \"cpp.h\"\n-\n-/* Structure for holding module and include file search path.  */\n-typedef struct gfc_directorylist\n-{\n-  char *path;\n-  bool use_for_modules;\n-  struct gfc_directorylist *next;\n-}\n-gfc_directorylist;\n+#include \"scanner.h\"\n \n /* List of include file search directories.  */\n-static gfc_directorylist *include_dirs, *intrinsic_modules_dirs;\n+gfc_directorylist *include_dirs, *intrinsic_modules_dirs;\n \n static gfc_file *file_head, *current_file;\n "}, {"sha": "4c559fbc2f29ac2583a69a43ac372903a1da4a23", "filename": "gcc/fortran/scanner.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fscanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ffortran%2Fscanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.h?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -0,0 +1,32 @@\n+/* Character scanner header.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Contributed by Janne Blomqvist\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Structure for holding module and include file search path.  */\n+typedef struct gfc_directorylist\n+{\n+  char *path;\n+  bool use_for_modules;\n+  struct gfc_directorylist *next;\n+}\n+gfc_directorylist;\n+\n+/* List of include file search directories.  */\n+extern gfc_directorylist *include_dirs, *intrinsic_modules_dirs;"}, {"sha": "7bfc68db9dd67e5ef8c2c907241ad6b214cf7150", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -1,3 +1,10 @@\n+2013-04-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR fortran/40958\n+        * lib/gcc-dg.exp (scan-module): Uncompress module file before\n+        scanning.\n+        * gfortran.dg/module_md5_1.f90: Remove.\n+\n 2013-04-16   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.target/aarch64/adds3.c: New."}, {"sha": "1f522cbb915f4a818d5686d7ea59759c5ce2ae57", "filename": "gcc/testsuite/gfortran.dg/module_md5_1.f90", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a883113b6d5657efeb9d3eedef1a13f97185f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a883113b6d5657efeb9d3eedef1a13f97185f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90?ref=10a883113b6d5657efeb9d3eedef1a13f97185f3", "patch": "@@ -1,13 +0,0 @@\n-! Check that we can write a module file, that it has a correct MD5 sum,\n-! and that we can read it back.\n-!\n-! { dg-do compile }\n-module foo\n-  integer(kind=4), parameter :: pi = 3_4\n-end module foo\n-\n-program test\n-  use foo\n-  print *, pi\n-end program test\n-! { dg-final { scan-module \"foo\" \"MD5:510304affe70481794fecdb22fc9ca0c\" } }"}, {"sha": "f64f4a121cf8e5090d24fda94514c25857e72c59", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070edbc29c4f4a716cc6f4d9b038c9f38f9300a0/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=070edbc29c4f4a716cc6f4d9b038c9f38f9300a0", "patch": "@@ -633,7 +633,7 @@ proc cleanup-saved-temps { args } {\n # Argument 1 is the regexp to match\n proc scan-module { args } {\n     set modfilename [string tolower [lindex $args 0]].mod\n-    set fd [open $modfilename r]\n+    set fd [open [list | gzip -dc $modfilename] r]\n     set text [read $fd]\n     close $fd\n "}]}