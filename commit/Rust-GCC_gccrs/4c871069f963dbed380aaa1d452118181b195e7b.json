{"sha": "4c871069f963dbed380aaa1d452118181b195e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4NzEwNjlmOTYzZGJlZDM4MGFhYTFkNDUyMTE4MTgxYjE5NWU3Yg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-29T10:57:59Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-29T10:57:59Z"}, "message": "[AArch64] Implement vector float->double widening and double->float  narrowing.\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi_): New.\n\t(float_truncate_hi_): Likewise.\n\t(float_extend_lo_): Likewise.\n\t(float_truncate_lo_): Likewise.\n\t* config/aarch64/aarch64-simd.md (vec_unpacks_lo_v4sf): New.\n\t(aarch64_float_extend_lo_v2df): Likewise.\n\t(vec_unpacks_hi_v4sf): Likewise.\n\t(aarch64_float_truncate_lo_v2sf): Likewise.\n\t(aarch64_float_truncate_hi_v4sf): Likewise.\n\t(vec_pack_trunc_v2df): Likewise.\n\t(vec_pack_trunc_df): Likewise.\n\nFrom-SVN: r198400", "tree": {"sha": "7a4aba12d9808ac260a5ab25b993455a50d9e366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a4aba12d9808ac260a5ab25b993455a50d9e366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c871069f963dbed380aaa1d452118181b195e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c871069f963dbed380aaa1d452118181b195e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c871069f963dbed380aaa1d452118181b195e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c871069f963dbed380aaa1d452118181b195e7b/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1709ff9b5c53b13140819feae5e381fac22f6416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1709ff9b5c53b13140819feae5e381fac22f6416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1709ff9b5c53b13140819feae5e381fac22f6416"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "5f0e495ef6608d843d04a254cfadc9c769f2020f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c871069f963dbed380aaa1d452118181b195e7b", "patch": "@@ -1,3 +1,17 @@\n+2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi_): New.\n+\t(float_truncate_hi_): Likewise.\n+\t(float_extend_lo_): Likewise.\n+\t(float_truncate_lo_): Likewise.\n+\t* config/aarch64/aarch64-simd.md (vec_unpacks_lo_v4sf): New.\n+\t(aarch64_float_extend_lo_v2df): Likewise.\n+\t(vec_unpacks_hi_v4sf): Likewise.\n+\t(aarch64_float_truncate_lo_v2sf): Likewise.\n+\t(aarch64_float_truncate_hi_v4sf): Likewise.\n+\t(vec_pack_trunc_v2df): Likewise.\n+\t(vec_pack_trunc_df): Likewise.\n+\n 2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "6093341b1993548ed4c8b9e1d05e201318a47fd1", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=4c871069f963dbed380aaa1d452118181b195e7b", "patch": "@@ -338,3 +338,9 @@\n   BUILTIN_VDQF (BINOP, frecps, 0)\n \n   BUILTIN_VDQF (UNOP, abs, 2)\n+\n+  VAR1 (UNOP, vec_unpacks_hi_, 10, v4sf)\n+  VAR1 (BINOP, float_truncate_hi_, 0, v4sf)\n+\n+  VAR1 (UNOP, float_extend_lo_, 0, v2df)\n+  VAR1 (UNOP, float_truncate_lo_, 0, v2sf)"}, {"sha": "454609476634e6a352e9be5dedd4e7b4c90d44a2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c871069f963dbed380aaa1d452118181b195e7b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4c871069f963dbed380aaa1d452118181b195e7b", "patch": "@@ -1267,6 +1267,108 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+;; Conversions between vectors of floats and doubles.\n+;; Contains a mix of patterns to match standard pattern names\n+;; and those for intrinsics.\n+\n+;; Float widening operations.\n+\n+(define_insn \"vec_unpacks_lo_v4sf\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n+\t(float_extend:V2DF\n+\t  (vec_select:V2SF\n+\t    (match_operand:V4SF 1 \"register_operand\" \"w\")\n+\t    (parallel [(const_int 0) (const_int 1)])\n+\t  )))]\n+  \"TARGET_SIMD\"\n+  \"fcvtl\\\\t%0.2d, %1.2s\"\n+  [(set_attr \"simd_type\" \"simd_fcvtl\")\n+   (set_attr \"simd_mode\" \"V2DF\")]\n+)\n+\n+(define_insn \"aarch64_float_extend_lo_v2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n+\t(float_extend:V2DF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"fcvtl\\\\t%0.2d, %1.2s\"\n+  [(set_attr \"simd_type\" \"simd_fcvtl\")\n+   (set_attr \"simd_mode\" \"V2DF\")]\n+)\n+\n+(define_insn \"vec_unpacks_hi_v4sf\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n+\t(float_extend:V2DF\n+\t  (vec_select:V2SF\n+\t    (match_operand:V4SF 1 \"register_operand\" \"w\")\n+\t    (parallel [(const_int 2) (const_int 3)])\n+\t  )))]\n+  \"TARGET_SIMD\"\n+  \"fcvtl2\\\\t%0.2d, %1.4s\"\n+  [(set_attr \"simd_type\" \"simd_fcvtl\")\n+   (set_attr \"simd_mode\" \"V2DF\")]\n+)\n+\n+;; Float narrowing operations.\n+\n+(define_insn \"aarch64_float_truncate_lo_v2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+      (float_truncate:V2SF\n+\t(match_operand:V2DF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"fcvtn\\\\t%0.2s, %1.2d\"\n+  [(set_attr \"simd_type\" \"simd_fcvtl\")\n+   (set_attr \"simd_mode\" \"V2SF\")]\n+)\n+\n+(define_insn \"aarch64_float_truncate_hi_v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+    (vec_concat:V4SF\n+      (match_operand:V2SF 1 \"register_operand\" \"0\")\n+      (float_truncate:V2SF\n+\t(match_operand:V2DF 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"fcvtn2\\\\t%0.4s, %2.2d\"\n+  [(set_attr \"simd_type\" \"simd_fcvtl\")\n+   (set_attr \"simd_mode\" \"V4SF\")]\n+)\n+\n+(define_expand \"vec_pack_trunc_v2df\"\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+      (vec_concat:V4SF\n+\t(float_truncate:V2SF\n+\t    (match_operand:V2DF 1 \"register_operand\"))\n+\t(float_truncate:V2SF\n+\t    (match_operand:V2DF 2 \"register_operand\"))\n+\t  ))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx tmp = gen_reg_rtx (V2SFmode);\n+    emit_insn (gen_aarch64_float_truncate_lo_v2sf (tmp, operands[1]));\n+    emit_insn (gen_aarch64_float_truncate_hi_v4sf (operands[0],\n+\t\t\t\t\t\t   tmp, operands[2]));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"vec_pack_trunc_df\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+      (vec_concat:V2SF\n+\t(float_truncate:SF\n+\t    (match_operand:DF 1 \"register_operand\"))\n+\t(float_truncate:SF\n+\t    (match_operand:DF 2 \"register_operand\"))\n+\t  ))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx tmp = gen_reg_rtx (V2SFmode);\n+    emit_insn (gen_move_lo_quad_v2df (tmp, operands[1]));\n+    emit_insn (gen_move_hi_quad_v2df (tmp, operands[2]));\n+    emit_insn (gen_aarch64_float_truncate_lo_v2sf (operands[0], tmp));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aarch64_vmls<mode>\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n        (minus:VDQF (match_operand:VDQF 1 \"register_operand\" \"0\")"}]}