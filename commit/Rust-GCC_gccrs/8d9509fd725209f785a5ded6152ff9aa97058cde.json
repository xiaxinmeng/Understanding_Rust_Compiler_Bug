{"sha": "8d9509fd725209f785a5ded6152ff9aa97058cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5NTA5ZmQ3MjUyMDlmNzg1YTVkZWQ2MTUyZmY5YWE5NzA1OGNkZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-05T14:37:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-05T14:37:19Z"}, "message": "sem_attr.adb: (Analyze_Attribute...\n\n2008-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb:\n\t(Analyze_Attribute, case 'Result): handle properly the case where some\n\toperand of the expression in a post-condition generates a transient\n\tblock.\n\nFrom-SVN: r138722", "tree": {"sha": "36be339a1f68d20f83cb834527e20ee802f5b0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36be339a1f68d20f83cb834527e20ee802f5b0d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d9509fd725209f785a5ded6152ff9aa97058cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9509fd725209f785a5ded6152ff9aa97058cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9509fd725209f785a5ded6152ff9aa97058cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9509fd725209f785a5ded6152ff9aa97058cde/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c144ca8df7c7d54a934b2987a6945d7e75fe39a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c144ca8df7c7d54a934b2987a6945d7e75fe39a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c144ca8df7c7d54a934b2987a6945d7e75fe39a5"}], "stats": {"total": 94, "additions": 62, "deletions": 32}, "files": [{"sha": "f32d0b7acd93c30c57f4c3aec8531b4822a9ef9b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 62, "deletions": 32, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9509fd725209f785a5ded6152ff9aa97058cde/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9509fd725209f785a5ded6152ff9aa97058cde/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8d9509fd725209f785a5ded6152ff9aa97058cde", "patch": "@@ -3767,8 +3767,8 @@ package body Sem_Attr is\n       ------------\n \n       when Attribute_Result => Result : declare\n-         CS : constant Entity_Id := Current_Scope;\n-         PS : constant Entity_Id := Scope (CS);\n+         CS : Entity_Id := Current_Scope;\n+         PS : Entity_Id := Scope (CS);\n \n       begin\n          --  If the enclosing subprogram is always inlined, the enclosing\n@@ -3808,44 +3808,61 @@ package body Sem_Attr is\n             end if;\n \n          --  Body case, where we must be inside a generated _Postcondition\n-         --  procedure, or the attribute use is definitely misplaced.\n+         --  procedure, and the prefix must be on the scope stack,  or else\n+         --  the attribute use is definitely misplaced. The condition itself\n+         --  may have generated transient scopes, and is not necessarily the\n+         --  current one.\n \n-         elsif Chars (CS) = Name_uPostconditions\n-           and then Ekind (PS) = E_Function\n-         then\n-            --  Check OK prefix\n+         else\n+            while Present (CS)\n+              and then CS /= Standard_Standard\n+            loop\n+               if Chars (CS) = Name_uPostconditions then\n+                  exit;\n+               else\n+                  CS := Scope (CS);\n+               end if;\n+            end loop;\n \n-            if (Nkind (P) = N_Identifier\n-                  or else Nkind (P) = N_Operator_Symbol)\n-              and then Chars (P) = Chars (PS)\n+            PS := Scope (CS);\n+\n+            if Chars (CS) = Name_uPostconditions\n+              and then Ekind (PS) = E_Function\n             then\n-               null;\n+               --  Check OK prefix\n \n-            --  Within an instance, the prefix designates the local renaming\n-            --  of the original generic.\n+               if (Nkind (P) = N_Identifier\n+                  or else Nkind (P) = N_Operator_Symbol)\n+                 and then Chars (P) = Chars (PS)\n+               then\n+                  null;\n \n-            elsif Is_Entity_Name (P)\n-              and then Ekind (Entity (P)) = E_Function\n-              and then Present (Alias (Entity (P)))\n-              and then Chars (Alias (Entity (P))) = Chars (PS)\n-            then\n-               null;\n+               --  Within an instance, the prefix designates the local renaming\n+               --  of the original generic.\n \n-            else\n-               Error_Msg_NE\n-                 (\"incorrect prefix for % attribute, expected &\", P, PS);\n-               Error_Attr;\n-            end if;\n+               elsif Is_Entity_Name (P)\n+                 and then Ekind (Entity (P)) = E_Function\n+                 and then Present (Alias (Entity (P)))\n+                 and then Chars (Alias (Entity (P))) = Chars (PS)\n+               then\n+                  null;\n \n-            Rewrite (N,\n-              Make_Identifier (Sloc (N),\n-                Chars => Name_uResult));\n-            Analyze_And_Resolve (N, Etype (PS));\n+               else\n+                  Error_Msg_NE\n+                    (\"incorrect prefix for % attribute, expected &\", P, PS);\n+                  Error_Attr;\n+               end if;\n \n-         else\n-            Error_Attr\n-              (\"% attribute can only appear in function Postcondition pragma\",\n-               P);\n+               Rewrite (N,\n+                 Make_Identifier (Sloc (N),\n+                   Chars => Name_uResult));\n+               Analyze_And_Resolve (N, Etype (PS));\n+\n+            else\n+               Error_Attr\n+                 (\"% attribute can only appear\" &\n+                   \"  in function Postcondition pragma\", P);\n+            end if;\n          end if;\n       end Result;\n \n@@ -7542,6 +7559,19 @@ package body Sem_Attr is\n                Note_Possible_Modification (P, Sure => False);\n             end if;\n \n+            --  The following comes from a query by Adam Beneschan, concerning\n+            --  improper use of universal_access in equality tests involving\n+            --  anonymous access types. Another good reason for 'Ref, but\n+            --  for now disable the test, which breaks several filed tests.\n+\n+            if Ekind (Typ) = E_Anonymous_Access_Type\n+              and then Nkind_In (Parent (N), N_Op_Eq, N_Op_Ne)\n+              and then False\n+            then\n+               Error_Msg_N (\"need unique type to resolve 'Access\", N);\n+               Error_Msg_N (\"\\qualify attribute with some access type\", N);\n+            end if;\n+\n             if Is_Entity_Name (P) then\n                if Is_Overloaded (P) then\n                   Get_First_Interp (P, Index, It);"}]}