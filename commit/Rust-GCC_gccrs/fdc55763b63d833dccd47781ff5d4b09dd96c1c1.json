{"sha": "fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjNTU3NjNiNjNkODMzZGNjZDQ3NzgxZmY1ZDRiMDlkZDk2YzFjMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-22T15:46:41Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-22T15:46:41Z"}, "message": "re PR fortran/33337 (ICE in gfc_finish_var_decl, at fortran/trans-decl.c:510)\n\n2007-09-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33337\n\tPR fortran/33376\n\t* trans-decl.c (gfc_create_module_variable): Output\n\tderived type parameters.\n\t* arith.c (gfc_parentheses): Return the argument if\n\tit is a constant expression.\n\t* primary.c (gfc_match_rvalue): Remove the clearing of\n\tthe module name and the use_assoc attribute for derived\n\ttype parameter expressions.\n\n2007-09-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33337\n\t* gfortran.dg/derived_comp_array_ref_3.f90: New test.\n\n\tPR fortran/33376\n\t* gfortran.dg/derived_comp_array_ref_4.f90: New test.\n\nFrom-SVN: r128672", "tree": {"sha": "67fbb65e9ee062ee2344f0156c199922dd6c94dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67fbb65e9ee062ee2344f0156c199922dd6c94dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/comments", "author": null, "committer": null, "parents": [{"sha": "a3b2d4e56c6086a6af1aae2ef3a540171609e153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b2d4e56c6086a6af1aae2ef3a540171609e153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b2d4e56c6086a6af1aae2ef3a540171609e153"}], "stats": {"total": 109, "additions": 100, "deletions": 9}, "files": [{"sha": "cb8f7ccb66413f82189d917a4456b480f6ada8da", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -1,3 +1,15 @@\n+2007-09-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33337\n+\tPR fortran/33376\n+\t* trans-decl.c (gfc_create_module_variable): Output\n+\tderived type parameters.\n+\t* arith.c (gfc_parentheses): Return the argument if\n+\tit is a constant expression.\n+\t* primary.c (gfc_match_rvalue): Remove the clearing of\n+\tthe module name and the use_assoc attribute for derived\n+\ttype parameter expressions.\n+\n 2007-09-22  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33502"}, {"sha": "7e3d0a4f24c48c5b8914ed3fbe10d5bee8954add", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -1793,6 +1793,9 @@ eval_intrinsic_f3 (gfc_intrinsic_op operator,\n gfc_expr *\n gfc_parentheses (gfc_expr *op)\n {\n+  if (gfc_is_constant_expr (op))\n+    return op;\n+\n   return eval_intrinsic_f2 (INTRINSIC_PARENTHESES, gfc_arith_identity,\n \t\t\t    op, NULL);\n }"}, {"sha": "575a4c7411ae287cd4b605a0eb3479910ad517e8", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -2148,11 +2148,12 @@ gfc_match_rvalue (gfc_expr **result)\n       if (sym->ts.is_c_interop || sym->ts.is_iso_c)\n \tbreak;\n \n-      /* Variable array references to derived type parameters cause\n-\t all sorts of headaches in simplification.  Make them variable\n-\t and scrub any module identity because they do not appear to\n-\t be referencable from the module.  */  \n-      if (sym->value && sym->ts.type == BT_DERIVED && e->ref)\n+      /* Variable array references to use associated derived type\n+\t parameters cause all sorts of headaches in simplification.\n+\t For this reason, we write the parameter to the module and\n+\t treat them as variable references.  */  \n+      if (sym->value && sym->ts.type == BT_DERIVED\n+\t    && sym->attr.use_assoc && e->ref)\n \t{\n \t  for (ref = e->ref; ref; ref = ref->next)\n \t    if (ref->type == REF_ARRAY)\n@@ -2168,8 +2169,6 @@ gfc_match_rvalue (gfc_expr **result)\n \t  e->expr_type = EXPR_VARIABLE;\n \t  e->symtree = symtree;\n \t  e->ref = ref;\n-\t  sym->attr.use_assoc = 0;\n-\t  sym->module = NULL;\n \t}\n \n       break;"}, {"sha": "e27a04bd4c72efc7f911c5d19b9dd427c03d7c00", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -2764,9 +2764,11 @@ gfc_create_module_variable (gfc_symbol * sym)\n       && sym->ts.type == BT_DERIVED)\n     sym->backend_decl = gfc_typenode_for_spec (&(sym->ts));\n \n-  /* Only output variables and array valued parameters.  */\n+  /* Only output variables and array valued, or derived type,\n+     parameters.  */\n   if (sym->attr.flavor != FL_VARIABLE\n-      && (sym->attr.flavor != FL_PARAMETER || sym->attr.dimension == 0))\n+\t&& !(sym->attr.flavor == FL_PARAMETER\n+\t       && (sym->attr.dimension || sym->ts.type == BT_DERIVED)))\n     return;\n \n   /* Don't generate variables from other modules. Variables from"}, {"sha": "bad8331471475688ed692ba27e5198a84d30ed32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -1,3 +1,11 @@\n+2007-09-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33337\n+\t* gfortran.dg/derived_comp_array_ref_3.f90: New test.\n+\n+\tPR fortran/33376\n+\t* gfortran.dg/derived_comp_array_ref_4.f90: New test.\n+\n 2007-09-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33445"}, {"sha": "53d73e78802727c001b1b4c910a21d58cba58494", "filename": "gcc/testsuite/gfortran.dg/derived_comp_array_ref_3.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_3.f90?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+! Tests the fix for PR33337, which was partly associated with\n+! the problem in PR31564 and, in addition, the parentheses in\n+! the initialization expression for the_chi_square.\n+!\n+! Contributed by Michael Richmond <michael.a.richmond@nasa.gov>\n+!\n+MODULE cdf_nc_chisq_mod\n+  PUBLIC\n+  TYPE :: one_parameter\n+    INTEGER :: high_bound\n+  END TYPE one_parameter\n+  TYPE :: the_distribution\n+    TYPE (one_parameter) :: parameters(1)\n+  END TYPE the_distribution\n+  TYPE (the_distribution), PARAMETER :: the_chi_square = &\n+    the_distribution((/(one_parameter(99))/))\n+CONTAINS\n+  SUBROUTINE local_cum_nc_chisq()\n+    integer :: df0\n+    df0 = the_chi_square%parameters(1)%high_bound\n+    print *, df0\n+  END SUBROUTINE local_cum_nc_chisq\n+END MODULE cdf_nc_chisq_mod\n+\n+  use cdf_nc_chisq_mod\n+  call local_cum_nc_chisq\n+end\n+! { dg-final { cleanup-modules \"cdf_aux_mod cdf_beta_mod\" } }"}, {"sha": "0c7853989e52cd878d8217e8763e982f7e9ef60b", "filename": "gcc/testsuite/gfortran.dg/derived_comp_array_ref_4.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc55763b63d833dccd47781ff5d4b09dd96c1c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_4.f90?ref=fdc55763b63d833dccd47781ff5d4b09dd96c1c1", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! Tests the fix for PR33376, which was a regression caused by the\n+! fix for PR31564.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+!\n+module foo\n+  implicit none\n+  public chk\n+\n+  type mytype\n+    character(len=4) :: str\n+  end type mytype\n+  type (mytype) ,parameter :: chk (2) &\n+                      = (/ mytype (\"abcd\") , mytype (\"efgh\") /)\n+end module foo\n+\n+module gfcbug70\n+  use foo, only: chk_ => chk\n+  implicit none\n+contains\n+\n+  subroutine chk (i)\n+    integer, intent(in) :: i\n+    if (i .eq. 1) then\n+      if (chk_(i)% str .ne. \"abcd\") call abort ()\n+    else\n+      if (chk_(i)% str .ne. \"efgh\") call abort ()\n+    end if\n+\n+  end subroutine chk\n+end module gfcbug70\n+\n+  use gfcbug70\n+  call chk (2)\n+  call chk (1)\n+end\n+! { dg-final { cleanup-modules \"foo gfcbug70\" } }"}]}