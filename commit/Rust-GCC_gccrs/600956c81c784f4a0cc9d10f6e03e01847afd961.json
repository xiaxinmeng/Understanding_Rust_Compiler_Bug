{"sha": "600956c81c784f4a0cc9d10f6e03e01847afd961", "node_id": "C_kwDOANBUbNoAKDYwMDk1NmM4MWM3ODRmNGEwY2M5ZDEwZjZlMDNlMDE4NDdhZmQ5NjE", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-25T20:29:50Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-26T17:05:05Z"}, "message": "Fortran: error recovery from calculation of storage size of a symbol [PR103504]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/103504\n\t* interface.cc (get_sym_storage_size): Array bounds and character\n\tlength can only be of integer type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/103504\n\t* gfortran.dg/pr103504.f90: New test.", "tree": {"sha": "7d4f5f819bcd8356560c4a8fd8f9f121f6611ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4f5f819bcd8356560c4a8fd8f9f121f6611ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600956c81c784f4a0cc9d10f6e03e01847afd961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600956c81c784f4a0cc9d10f6e03e01847afd961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600956c81c784f4a0cc9d10f6e03e01847afd961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600956c81c784f4a0cc9d10f6e03e01847afd961/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975658b782f36dcf6eb190966d5b705977bfd5eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975658b782f36dcf6eb190966d5b705977bfd5eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975658b782f36dcf6eb190966d5b705977bfd5eb"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "71eec78259bd4feef951dffcffc665a35c8c1301", "filename": "gcc/fortran/interface.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600956c81c784f4a0cc9d10f6e03e01847afd961/gcc%2Ffortran%2Finterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600956c81c784f4a0cc9d10f6e03e01847afd961/gcc%2Ffortran%2Finterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.cc?ref=600956c81c784f4a0cc9d10f6e03e01847afd961", "patch": "@@ -2792,7 +2792,8 @@ get_sym_storage_size (gfc_symbol *sym)\n   if (sym->ts.type == BT_CHARACTER)\n     {\n       if (sym->ts.u.cl && sym->ts.u.cl->length\n-          && sym->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n+\t  && sym->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t  && sym->ts.u.cl->length->ts.type == BT_INTEGER)\n \tstrlen = mpz_get_ui (sym->ts.u.cl->length->value.integer);\n       else\n \treturn 0;\n@@ -2809,7 +2810,9 @@ get_sym_storage_size (gfc_symbol *sym)\n   for (i = 0; i < sym->as->rank; i++)\n     {\n       if (sym->as->upper[i]->expr_type != EXPR_CONSTANT\n-\t  || sym->as->lower[i]->expr_type != EXPR_CONSTANT)\n+\t  || sym->as->lower[i]->expr_type != EXPR_CONSTANT\n+\t  || sym->as->upper[i]->ts.type != BT_INTEGER\n+\t  || sym->as->lower[i]->ts.type != BT_INTEGER)\n \treturn 0;\n \n       elements *= mpz_get_si (sym->as->upper[i]->value.integer)"}, {"sha": "607d1c6c8cc3ffacf065de893fdf66073bc60b15", "filename": "gcc/testsuite/gfortran.dg/pr103504.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600956c81c784f4a0cc9d10f6e03e01847afd961/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103504.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600956c81c784f4a0cc9d10f6e03e01847afd961/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103504.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103504.f90?ref=600956c81c784f4a0cc9d10f6e03e01847afd961", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! PR fortran/103504 - ICE in get_sym_storage_size, at fortran/interface.c:2800\n+! Contributed by G.Steinmetz\n+\n+program p\n+  implicit none\n+  real      :: y(1)\n+  character :: b\n+  call s(y)\n+  call t(y)\n+  call u(y)\n+  call c(b)\n+contains\n+  subroutine s(x)\n+    real :: x(abs(1.):1)        ! { dg-error \"must be of INTEGER type\" }\n+  end\n+  subroutine t(x)\n+    real :: x(abs(1.):1)        ! { dg-error \"must be of INTEGER type\" }\n+  end\n+  subroutine u(x)\n+    real :: x(1:abs(1.))        ! { dg-error \"must be of INTEGER type\" }\n+  end\n+  subroutine c(z)\n+    character(len=abs(1.)) :: z ! { dg-error \"must be of INTEGER type\" }\n+  end subroutine c\n+end\n+\n+! { dg-prune-output \"must be of INTEGER type\" }"}]}