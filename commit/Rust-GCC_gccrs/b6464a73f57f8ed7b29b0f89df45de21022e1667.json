{"sha": "b6464a73f57f8ed7b29b0f89df45de21022e1667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0NjRhNzNmNTdmOGVkN2IyOWIwZjg5ZGY0NWRlMjEwMjJlMTY2Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-03-11T14:54:56Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-03-11T14:54:56Z"}, "message": "cppfiles.c (INCLUDE_LEN_FUDGE, ENOMEM): Delete.\n\n        * cppfiles.c (INCLUDE_LEN_FUDGE, ENOMEM): Delete.\n\t(cpp_included, find_include_file): Update.\n\t(_cpp_compare_file_date): Make else unconditional.\n\nFrom-SVN: r40388", "tree": {"sha": "90bc59f78cb853a4f69621cb5dabb8f5ad352a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90bc59f78cb853a4f69621cb5dabb8f5ad352a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6464a73f57f8ed7b29b0f89df45de21022e1667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6464a73f57f8ed7b29b0f89df45de21022e1667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6464a73f57f8ed7b29b0f89df45de21022e1667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6464a73f57f8ed7b29b0f89df45de21022e1667/comments", "author": null, "committer": null, "parents": [{"sha": "a72ac6ef359ba9e2746f36ef21b9e5e66d962e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72ac6ef359ba9e2746f36ef21b9e5e66d962e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72ac6ef359ba9e2746f36ef21b9e5e66d962e41"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "672d8e777ad1577b259eb3220bff0af6a9ec38da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6464a73f57f8ed7b29b0f89df45de21022e1667/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6464a73f57f8ed7b29b0f89df45de21022e1667/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6464a73f57f8ed7b29b0f89df45de21022e1667", "patch": "@@ -1,3 +1,9 @@\n+2001-03-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppfiles.c (INCLUDE_LEN_FUDGE, ENOMEM): Delete.\n+\t(cpp_included, find_include_file): Update.\n+\t(_cpp_compare_file_date): Make else unconditional.\n+\n 2001-03-10  kaz Kojima <kkojima@rr.iij4u.or.jp>\n \n \t* config/sh/sh.h (LEGITIMATE_PIC_OPERAND_P): Defined."}, {"sha": "e4d8ec1ea9c197a42640fdcee5a6f105dc9775a2", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6464a73f57f8ed7b29b0f89df45de21022e1667/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6464a73f57f8ed7b29b0f89df45de21022e1667/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=b6464a73f57f8ed7b29b0f89df45de21022e1667", "patch": "@@ -43,10 +43,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n # define O_BINARY 0\n #endif\n \n-#ifndef INCLUDE_LEN_FUDGE\n-# define INCLUDE_LEN_FUDGE 0\n-#endif\n-\n /* If errno is inspected immediately after a system call fails, it will be\n    nonzero, and no error number will ever be zero.  */\n #ifndef ENOENT\n@@ -55,9 +51,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #ifndef ENOTDIR\n # define ENOTDIR 0\n #endif\n-#ifndef ENOMEM\n-# define ENOMEM 0\n-#endif\n \n /* Suppress warning about function macros used w/o arguments in traditional\n    C.  It is unlikely that glibc's strcmp macro helps this file at all.  */\n@@ -469,8 +462,7 @@ cpp_included (pfile, fname)\n     }\n       \n   /* Search directory path for the file.  */\n-  name = (char *) alloca (strlen (fname) + pfile->max_include_len\n-\t\t\t  + 2 + INCLUDE_LEN_FUDGE);\n+  name = (char *) alloca (strlen (fname) + pfile->max_include_len + 2);\n   for (path = CPP_OPTION (pfile, quote_include); path; path = path->next)\n     {\n       memcpy (name, path->name, path->len);\n@@ -505,8 +497,7 @@ find_include_file (pfile, fname, search_start)\n     return open_file (pfile, fname);\n       \n   /* Search directory path for the file.  */\n-  name = (char *) alloca (strlen (fname) + pfile->max_include_len\n-\t\t\t  + 2 + INCLUDE_LEN_FUDGE);\n+  name = (char *) alloca (strlen (fname) + pfile->max_include_len + 2);\n   for (path = search_start; path; path = path->next)\n     {\n       memcpy (name, path->name, path->len);\n@@ -723,7 +714,7 @@ _cpp_compare_file_date (pfile, f)\n \n   if (f->type == CPP_HEADER_NAME)\n     search_start = CPP_OPTION (pfile, bracket_include);\n-  else if (CPP_OPTION (pfile, ignore_srcdir))\n+  else\n     search_start = pfile->buffer->search_from;\n \n   inc = find_include_file (pfile, fname, search_start);"}]}