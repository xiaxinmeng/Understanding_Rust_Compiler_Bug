{"sha": "6a90680bfff0a3803b3dc950c847046abb2d7d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5MDY4MGJmZmYwYTM4MDNiM2RjOTUwYzg0NzA0NmFiYjJkN2Q1NA==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:40:15Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:52Z"}, "message": "arm: MVE: Add C++ polymorphism and fix some more issues\n\nThis patch adds C++ polymorphism for the MVE intrinsics, by using the native C++\npolymorphic functions when C++ is used.\n\nIt also moves the PRESERVE name macro definitions to the right place so that the\nvariants without the '__arm_' prefix are not available if we define the PRESERVE\nNAMESPACE macro.\n\nThis patch further fixes two testisms that were brought to light by C++ testing\nadded in this patch.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm_mve.h: Add C++ polymorphism and fix preserve MACROs.\n\ngcc/testsuite/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* g++.target/arm/mve.exp: New.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16: Fix testism.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32: Likewise.", "tree": {"sha": "09be06b175e6c5148cd6d3d5a917238bd9a75a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09be06b175e6c5148cd6d3d5a917238bd9a75a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a90680bfff0a3803b3dc950c847046abb2d7d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a90680bfff0a3803b3dc950c847046abb2d7d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a90680bfff0a3803b3dc950c847046abb2d7d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a90680bfff0a3803b3dc950c847046abb2d7d54/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0597dcd99d43a4bb0c199dc506205af379b3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0597dcd99d43a4bb0c199dc506205af379b3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0597dcd99d43a4bb0c199dc506205af379b3d4"}], "stats": {"total": 18237, "additions": 17242, "deletions": 995}, "files": [{"sha": "b5c9aed6701ffbb16f5c3a8eea90a6894f500b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54", "patch": "@@ -1,3 +1,7 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm_mve.h: Add C++ polymorphism and fix preserve MACROs.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm_mve.h: Cast some pointers to expected types."}, {"sha": "d75c430cb83d04e2ea2ecf59f78ae22e78fd5ad3", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 17181, "deletions": 993, "changes": 18174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54"}, {"sha": "4d547a5baded2ee6ffd07fdd0e3a678b3feb119c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54", "patch": "@@ -1,3 +1,9 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* g++.target/arm/mve.exp: New.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16: Fix testism.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32: Likewise.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: Fix testism."}, {"sha": "08f8d4d87f61eb9c1faf425801efcd4a9c25c156", "filename": "gcc/testsuite/g++.target/arm/mve.exp", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fmve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fmve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fmve.exp?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54", "patch": "@@ -0,0 +1,49 @@\n+# Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an ARM target.\n+if ![istarget arm*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+# This variable should only apply to tests called in this exp file.\n+global dg_runtest_extra_prunes\n+set dg_runtest_extra_prunes \"\"\n+lappend dg_runtest_extra_prunes \"warning: switch -m(cpu|arch)=.* conflicts with -m(cpu|arch)=.* switch\"\n+\n+set dg-do-what-default \"assemble\"\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/../../gcc.target/arm/mve/intrinsics/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+set dg_runtest_extra_prunes \"\"\n+dg-finish"}, {"sha": "907fa5d50f66143aa0f197e50a295b66a25c861e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54", "patch": "@@ -15,7 +15,7 @@ foo (float16x8_t a, float16_t b)\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n-  return vcmpgeq_n (a, b);\n+  return vcmpgeq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "e4d1406c049f5d40f9dc17e6246f63f0d5a6d71e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a90680bfff0a3803b3dc950c847046abb2d7d54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c?ref=6a90680bfff0a3803b3dc950c847046abb2d7d54", "patch": "@@ -15,7 +15,7 @@ foo (float32x4_t a, float32_t b)\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n-  return vcmpgeq_n (a, b);\n+  return vcmpgeq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}]}