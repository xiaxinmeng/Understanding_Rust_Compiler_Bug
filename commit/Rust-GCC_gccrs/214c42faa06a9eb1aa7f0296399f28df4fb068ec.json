{"sha": "214c42faa06a9eb1aa7f0296399f28df4fb068ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0YzQyZmFhMDZhOWViMWFhN2YwMjk2Mzk5ZjI4ZGY0ZmIwNjhlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-07T18:56:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-07T18:56:48Z"}, "message": "[AArch64] Merge SVE FMAXNM/FMINNM patterns\n\nThis patch makes us use the same define_insn for both the smax/smin\nand fmax/fmin optabs.  It also continues the process started by\nthe earlier FP unary patch of moving predicated FP patterns from\nrtx codes to unspecs.\n\nThere's no need to handle the FMAX and FMIN instructions until\nthe ACLE patch, since we only use FMAXNM and FMINNM at present.\n\n2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_COND_FP_MAXMIN_PUBLIC): New\n\tint iterator.\n\t(maxmin_uns_op): Handle UNSPEC_COND_FMAXNM and UNSPEC_COND_FMINNM.\n\t* config/aarch64/aarch64-sve.md\n\t(<FMAXMIN:su><FMAXMIN:maxmin><SVE_F:mode>3): Rename to...\n\t(<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): ...this and\n\tuse a single unspec for the rhs.\n\t(*<su><maxmin><mode>3): Delete.\n\t(<maxmin_uns><SVE_F:mode>3): Use a single unspec for the rhs.\n\nFrom-SVN: r274188", "tree": {"sha": "9e3d1e4f937b8aeeccb12929b435e39795e3f84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3d1e4f937b8aeeccb12929b435e39795e3f84e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/214c42faa06a9eb1aa7f0296399f28df4fb068ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214c42faa06a9eb1aa7f0296399f28df4fb068ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214c42faa06a9eb1aa7f0296399f28df4fb068ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214c42faa06a9eb1aa7f0296399f28df4fb068ec/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d45b20a5539b6f306a559470c3a7e9f84a058bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45b20a5539b6f306a559470c3a7e9f84a058bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45b20a5539b6f306a559470c3a7e9f84a058bfb"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "91b314b11d232d32888531e345092c54b8fdb805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=214c42faa06a9eb1aa7f0296399f28df4fb068ec", "patch": "@@ -1,3 +1,15 @@\n+2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_COND_FP_MAXMIN_PUBLIC): New\n+\tint iterator.\n+\t(maxmin_uns_op): Handle UNSPEC_COND_FMAXNM and UNSPEC_COND_FMINNM.\n+\t* config/aarch64/aarch64-sve.md\n+\t(<FMAXMIN:su><FMAXMIN:maxmin><SVE_F:mode>3): Rename to...\n+\t(<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): ...this and\n+\tuse a single unspec for the rhs.\n+\t(*<su><maxmin><mode>3): Delete.\n+\t(<maxmin_uns><SVE_F:mode>3): Use a single unspec for the rhs.\n+\n 2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (UNSPEC_COND_FABS, UNSPEC_COND_FNEG)"}, {"sha": "a9943295d188c764e60b4c5e612213fedfee2026", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=214c42faa06a9eb1aa7f0296399f28df4fb068ec", "patch": "@@ -2186,69 +2186,51 @@\n ;; ---- [FP] Maximum and minimum\n ;; -------------------------------------------------------------------------\n ;; Includes:\n-;; - FMAX\n ;; - FMAXNM\n-;; - FMIN\n ;; - FMINNM\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated floating-point MAX/MIN.\n-(define_expand \"<su><maxmin><mode>3\"\n+;; Unpredicated floating-point MAX/MIN (the rtx codes).  These are more\n+;; relaxed than fmax/fmin, but we implement them in the same way.\n+(define_expand \"<optab><mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (FMAXMIN:SVE_F (match_operand:SVE_F 1 \"register_operand\")\n-\t\t\t  (match_operand:SVE_F 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"register_operand\")]\n+\t  SVE_COND_FP_MAXMIN_PUBLIC))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n-;; Floating-point MAX/MIN predicated with a PTRUE.\n-(define_insn \"*<su><maxmin><mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (FMAXMIN:SVE_F (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n-\t\t\t  (match_operand:SVE_F 3 \"register_operand\" \"w, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"@\n-   f<maxmin>nm\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   movprfx\\t%0, %2\\;f<maxmin>nm\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,yes\")]\n-)\n-\n-;; Unpredicated fmax/fmin.\n+;; Unpredicated fmax/fmin (the libm functions).\n (define_expand \"<maxmin_uns><mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 3)\n-\t   (unspec:SVE_F [(match_operand:SVE_F 1 \"register_operand\")\n-\t\t\t  (match_operand:SVE_F 2 \"register_operand\")]\n-\t\t\t FMAXMIN_UNS)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"register_operand\")]\n+\t  SVE_COND_FP_MAXMIN_PUBLIC))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n-;; fmax/fmin predicated with a PTRUE.\n-(define_insn \"*<maxmin_uns><mode>3\"\n+;; Predicated floating-point maximum/minimum.\n+(define_insn \"*<optab><mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (unspec:SVE_F [(match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n-\t\t\t  (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n-\t\t\t FMAXMIN_UNS)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n+\t   (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n+\t  SVE_COND_FP_MAXMIN_PUBLIC))]\n   \"TARGET_SVE\"\n   \"@\n-   <maxmin_uns_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   movprfx\\t%0, %2\\;<maxmin_uns_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n "}, {"sha": "a6e2b1e6d276ae749dcb1db8bbc9e0673fd577d1", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214c42faa06a9eb1aa7f0296399f28df4fb068ec/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=214c42faa06a9eb1aa7f0296399f28df4fb068ec", "patch": "@@ -1630,6 +1630,11 @@\n \t\t\t\t\t UNSPEC_COND_FMUL\n \t\t\t\t\t UNSPEC_COND_FSUB])\n \n+;; Floating-point max/min operations that correspond to optabs,\n+;; as opposed to those that are internal to the port.\n+(define_int_iterator SVE_COND_FP_MAXMIN_PUBLIC [UNSPEC_COND_FMAXNM\n+\t\t\t\t\t\tUNSPEC_COND_FMINNM])\n+\n (define_int_iterator SVE_COND_FP_TERNARY [UNSPEC_COND_FMLA\n \t\t\t\t\t  UNSPEC_COND_FMLS\n \t\t\t\t\t  UNSPEC_COND_FNMLA\n@@ -1709,7 +1714,9 @@\n \t\t\t      (UNSPEC_FMINNMV \"smin\")\n \t\t\t      (UNSPEC_FMINV \"smin_nan\")\n \t\t\t      (UNSPEC_FMAXNM \"fmax\")\n-\t\t\t      (UNSPEC_FMINNM \"fmin\")])\n+\t\t\t      (UNSPEC_FMINNM \"fmin\")\n+\t\t\t      (UNSPEC_COND_FMAXNM \"fmax\")\n+\t\t\t      (UNSPEC_COND_FMINNM \"fmin\")])\n \n (define_int_attr  maxmin_uns_op [(UNSPEC_UMAXV \"umax\")\n \t\t\t\t (UNSPEC_UMINV \"umin\")"}]}