{"sha": "ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0YTBkODM3NzY0YWEyMzBhYWIzYjVjOGQxNTY3YzNmZGQxNzBkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-23T08:27:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-23T08:27:40Z"}, "message": "trans.c (gnat_compile_time_expr_list): New variable.\n\n\t* gcc-interface/trans.c (gnat_compile_time_expr_list): New variable.\n\t(Pragma_to_gnu): Rename local variable.  Save the (first) expression\n\tof pragma Compile_Time_{Error|Warning} for later processing.\n\t(Compilation_Unit_to_gnu): Process the expressions saved above.\n\nFrom-SVN: r276045", "tree": {"sha": "1eaa3f745664785d4d24dd431335934c355ad61f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eaa3f745664785d4d24dd431335934c355ad61f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/comments", "author": null, "committer": null, "parents": [{"sha": "ef5a9557bdfeef1d7941ec52702a25f2de9abcdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5a9557bdfeef1d7941ec52702a25f2de9abcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5a9557bdfeef1d7941ec52702a25f2de9abcdc"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "898ae383a01fd1994fc55b63c5cd6a99d53134e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "patch": "@@ -1,3 +1,10 @@\n+2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_compile_time_expr_list): New variable.\n+\t(Pragma_to_gnu): Rename local variable.  Save the (first) expression\n+\tof pragma Compile_Time_{Error|Warning} for later processing.\n+\t(Compilation_Unit_to_gnu): Process the expressions saved above.\n+\n 2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Attribute_to_gnu): Test Can_Use_Internal_Rep"}, {"sha": "d9cd84df31f426921a12b5cd113198238fedf923", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "patch": "@@ -95,6 +95,9 @@ bool type_annotate_only;\n /* List of N_Validate_Unchecked_Conversion nodes in the unit.  */\n static vec<Node_Id> gnat_validate_uc_list;\n \n+/* List of expressions of pragma Compile_Time_{Error|Warning} in the unit.  */\n+static vec<Node_Id> gnat_compile_time_expr_list;\n+\n /* When not optimizing, we cache the 'First, 'Last and 'Length attributes\n    of unconstrained array IN parameters to avoid emitting a great deal of\n    redundant instructions to recompute them each time.  */\n@@ -1508,17 +1511,28 @@ static tree\n Pragma_to_gnu (Node_Id gnat_node)\n {\n   tree gnu_result = alloc_stmt_list ();\n-  unsigned char pragma_id;\n   Node_Id gnat_temp;\n \n-  /* Do nothing if we are just annotating types and check for (and ignore)\n-     unrecognized pragmas.  */\n-  if (type_annotate_only\n-      || !Is_Pragma_Name (Chars (Pragma_Identifier (gnat_node))))\n+  /* Check for (and ignore) unrecognized pragmas.  */\n+  if (!Is_Pragma_Name (Chars (Pragma_Identifier (gnat_node))))\n+    return gnu_result;\n+\n+  const unsigned char id\n+    = Get_Pragma_Id (Chars (Pragma_Identifier (gnat_node)));\n+\n+  /* Save the expression of pragma Compile_Time_{Error|Warning} for later.  */\n+  if (id == Pragma_Compile_Time_Error || id == Pragma_Compile_Time_Warning)\n+    {\n+      gnat_temp = First (Pragma_Argument_Associations (gnat_node));\n+      gnat_compile_time_expr_list.safe_push (Expression (gnat_temp));\n+      return gnu_result;\n+    }\n+\n+  /* Stop there if we are just annotating types.  */\n+  if (type_annotate_only)\n     return gnu_result;\n \n-  pragma_id = Get_Pragma_Id (Chars (Pragma_Identifier (gnat_node)));\n-  switch (pragma_id)\n+  switch (id)\n     {\n     case Pragma_Inspection_Point:\n       /* Do nothing at top level: all such variables are already viewable.  */\n@@ -1670,11 +1684,11 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t  break;\n \n \ttree gnu_clauses = gnu_loop_stack->last ()->omp_construct_clauses;\n-\tif (pragma_id == Pragma_Acc_Data)\n+\tif (id == Pragma_Acc_Data)\n \t  gnu_loop_stack->last ()->omp_code = OACC_DATA;\n-\telse if (pragma_id == Pragma_Acc_Kernels)\n+\telse if (id == Pragma_Acc_Kernels)\n \t  gnu_loop_stack->last ()->omp_code = OACC_KERNELS;\n-\telse if (pragma_id == Pragma_Acc_Parallel)\n+\telse if (id == Pragma_Acc_Parallel)\n \t  gnu_loop_stack->last ()->omp_code = OACC_PARALLEL;\n \telse\n \t  gcc_unreachable ();\n@@ -1914,7 +1928,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t/* This is the String form: pragma Warning{s|_As_Error}(String).  */\n \tif (Nkind (Expression (gnat_temp)) == N_String_Literal)\n \t  {\n-\t    switch (pragma_id)\n+\t    switch (id)\n \t      {\n \t      case Pragma_Warning_As_Error:\n \t\tkind = DK_ERROR;\n@@ -6319,7 +6333,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n \t\t       || Nkind (gnat_unit) == N_Subprogram_Body);\n   const Entity_Id gnat_unit_entity = Defining_Entity (gnat_unit);\n   Entity_Id gnat_entity;\n-  Node_Id gnat_pragma;\n+  Node_Id gnat_pragma, gnat_iter;\n   /* Make the decl for the elaboration procedure.  Emit debug info for it, so\n      that users can break into their elaboration code in debuggers.  Kludge:\n      don't consider it as a definition so that we have a line map for its\n@@ -6415,6 +6429,12 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   add_stmt_list (Actions (Aux_Decls_Node (gnat_node)));\n   finalize_from_limited_with ();\n \n+  /* Then process the expressions of pragma Compile_Time_{Error|Warning} to\n+     annotate types referenced therein if they have not been annotated.  */\n+  for (int i = 0; gnat_compile_time_expr_list.iterate (i, &gnat_iter); i++)\n+    (void) gnat_to_gnu_external (gnat_iter);\n+  gnat_compile_time_expr_list.release ();\n+\n   /* Save away what we've made so far and finish it up.  */\n   set_current_block_context (gnu_elab_proc_decl);\n   gnat_poplevel ();"}, {"sha": "3e64e58274e939c730ed0c89e983277db0c82482", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "patch": "@@ -1,3 +1,8 @@\n+2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/compile_time1.ads: New test.\n+\t* gnat.dg/specs/compile_time1_pkg.ads! New helper.\n+\n 2019-09-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91819 - ICE with operator++ and enum."}, {"sha": "f28d4e623d73a003c72db92392594864a1f9592a", "filename": "gcc/testsuite/gnat.dg/specs/compile_time1.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1.ads?ref=ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+\n+with Compile_Time1_Pkg; use Compile_Time1_Pkg;\n+\n+package Compile_Time1 is\n+\n+  pragma Compile_Time_Error (Rec'Size /= Integer'Size, \"wrong record size\");\n+\n+end Compile_Time1;"}, {"sha": "c0345c2819eb6d17cce3e4c3b997043da53d0a9f", "filename": "gcc/testsuite/gnat.dg/specs/compile_time1_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a0d837764aa230aab3b5c8d1567c3fdd170d7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fcompile_time1_pkg.ads?ref=ec4a0d837764aa230aab3b5c8d1567c3fdd170d7", "patch": "@@ -0,0 +1,7 @@\n+package Compile_Time1_Pkg is\n+\n+  type Rec is record\n+    I : Integer;\n+  end record;\n+\n+end Compile_Time1_Pkg;"}]}