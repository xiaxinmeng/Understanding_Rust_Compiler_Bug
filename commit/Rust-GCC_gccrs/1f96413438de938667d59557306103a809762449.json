{"sha": "1f96413438de938667d59557306103a809762449", "node_id": "C_kwDOANBUbNoAKDFmOTY0MTM0MzhkZTkzODY2N2Q1OTU1NzMwNjEwM2E4MDk3NjI0NDk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-02-03T12:45:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T12:45:58Z"}, "message": "Merge #1812\n\n1812: parser: Allow parsing multiple reference types r=CohenArthur a=CohenArthur\n\nThe parser now recursively tries to parse a reference type after seeing a `&` or `&&` token.\r\n\r\ngcc/rust/ChangeLog:\r\n\r\n\t* parse/rust-parse-impl.h (Parser::parse_type): Handle double ampersan properly (Parser::parse_reference_type): Call into `parse_reference_type_inner` and wrap double reference types in another `AST::ReferenceType` node (Parser::parse_reference_type_inner): Add parsing implementation which does not care about the leading token (& or  &&) (Parser::parse_type_no_bounds): Handle double ampersand properly\r\n\t* parse/rust-parse.h: Declare `parse_reference_type_inner`\r\n\r\ngcc/testsuite/ChangeLog:\r\n\r\n\t* rust/compile/multi_reference_type.rs: New test.\r\n\r\nAddresses #1807 partly\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "bd1bf0a3a4869e4e9ed60bbfe299d38744430246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1bf0a3a4869e4e9ed60bbfe299d38744430246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f96413438de938667d59557306103a809762449", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3QIGCRBK7hj4Ov3rIwAAD6QIAFXZOXJcpQ6P1fQZ58KaLcM0\navAQ+v89DZRz8JmTECCFsEylWmWeilXigVt6j60WL1j5Tsg0qwpGgesdfMBGFncM\nk89zrzqR9Xy1VclWTZOGDMUjbZAjUB+E6YmJQAmcdcWsR2MT3ghoXmWhnh6zpRhd\nT7fbzRwJqSkM+eShPyidK/H+vX8dQtL951iFacgeupeLwtVO5pMlJ4ml74o6s7g+\n80Vkv14Y43uMEUBz02gC10cYAWd5LiyOBglIT3pd0edkaECXxcvj60OIAlb0D3xI\nUPTToND8ReeP69Jdpi5FcWbu+IoDI4xKg1htwyvraSuTkhPWJMGjJzudlLD2Rlo=\n=Wgc0\n-----END PGP SIGNATURE-----\n", "payload": "tree bd1bf0a3a4869e4e9ed60bbfe299d38744430246\nparent 71bd5b22726c536636628b62cdabfd489c06002e\nparent cddb1f2d9f965aa6386a71369109edd61506118e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1675428358 +0000\ncommitter GitHub <noreply@github.com> 1675428358 +0000\n\nMerge #1812\n\n1812: parser: Allow parsing multiple reference types r=CohenArthur a=CohenArthur\n\nThe parser now recursively tries to parse a reference type after seeing a `&` or `&&` token.\r\n\r\ngcc/rust/ChangeLog:\r\n\r\n\t* parse/rust-parse-impl.h (Parser::parse_type): Handle double ampersan properly (Parser::parse_reference_type): Call into `parse_reference_type_inner` and wrap double reference types in another `AST::ReferenceType` node (Parser::parse_reference_type_inner): Add parsing implementation which does not care about the leading token (& or  &&) (Parser::parse_type_no_bounds): Handle double ampersand properly\r\n\t* parse/rust-parse.h: Declare `parse_reference_type_inner`\r\n\r\ngcc/testsuite/ChangeLog:\r\n\r\n\t* rust/compile/multi_reference_type.rs: New test.\r\n\r\nAddresses #1807 partly\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f96413438de938667d59557306103a809762449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f96413438de938667d59557306103a809762449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f96413438de938667d59557306103a809762449/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71bd5b22726c536636628b62cdabfd489c06002e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bd5b22726c536636628b62cdabfd489c06002e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71bd5b22726c536636628b62cdabfd489c06002e"}, {"sha": "cddb1f2d9f965aa6386a71369109edd61506118e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddb1f2d9f965aa6386a71369109edd61506118e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddb1f2d9f965aa6386a71369109edd61506118e"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "e33a66d37a8d9005c0427e39f9bbb93c6d36eb53", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96413438de938667d59557306103a809762449/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96413438de938667d59557306103a809762449/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=1f96413438de938667d59557306103a809762449", "patch": "@@ -9237,6 +9237,7 @@ Parser<ManagedTokenSource>::parse_type (bool save_errors)\n       // raw pointer type\n       return parse_raw_pointer_type ();\n     case AMP: // does this also include AMP_AMP?\n+    case LOGICAL_AND:\n       // reference type\n       return parse_reference_type ();\n       case LIFETIME: {\n@@ -9886,14 +9887,10 @@ Parser<ManagedTokenSource>::parse_bare_function_type (\n \t\t\t       std::move (return_type), best_try_locus));\n }\n \n-// Parses a reference type (mutable or immutable, with given lifetime).\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::ReferenceType>\n-Parser<ManagedTokenSource>::parse_reference_type ()\n+Parser<ManagedTokenSource>::parse_reference_type_inner (Location locus)\n {\n-  Location locus = lexer.peek_token ()->get_locus ();\n-  skip_token (AMP);\n-\n   // parse optional lifetime\n   AST::Lifetime lifetime = AST::Lifetime::error ();\n   if (lexer.peek_token ()->get_id () == LIFETIME)\n@@ -9932,6 +9929,29 @@ Parser<ManagedTokenSource>::parse_reference_type ()\n \t\t\t    std::move (lifetime)));\n }\n \n+// Parses a reference type (mutable or immutable, with given lifetime).\n+template <typename ManagedTokenSource>\n+std::unique_ptr<AST::ReferenceType>\n+Parser<ManagedTokenSource>::parse_reference_type ()\n+{\n+  auto t = lexer.peek_token ();\n+  auto locus = t->get_locus ();\n+\n+  switch (t->get_id ())\n+    {\n+    case AMP:\n+      skip_token (AMP);\n+      return parse_reference_type_inner (locus);\n+    case LOGICAL_AND:\n+      skip_token (LOGICAL_AND);\n+      return std::unique_ptr<AST::ReferenceType> (\n+\tnew AST::ReferenceType (false, parse_reference_type_inner (locus),\n+\t\t\t\tlocus));\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n // Parses a raw (unsafe) pointer type.\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::RawPointerType>\n@@ -10079,7 +10099,8 @@ Parser<ManagedTokenSource>::parse_type_no_bounds ()\n     case ASTERISK:\n       // raw pointer type\n       return parse_raw_pointer_type ();\n-    case AMP: // does this also include AMP_AMP?\n+    case AMP: // does this also include AMP_AMP? Yes! Which is... LOGICAL_AND?\n+    case LOGICAL_AND:\n       // reference type\n       return parse_reference_type ();\n     case LIFETIME:"}, {"sha": "2f767bb2a53aea6db0bea03f8e084129790e8a8d", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96413438de938667d59557306103a809762449/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96413438de938667d59557306103a809762449/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=1f96413438de938667d59557306103a809762449", "patch": "@@ -604,6 +604,8 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::TypeNoBounds> parse_type_no_bounds ();\n   std::unique_ptr<AST::TypeNoBounds> parse_slice_or_array_type ();\n   std::unique_ptr<AST::RawPointerType> parse_raw_pointer_type ();\n+  std::unique_ptr<AST::ReferenceType>\n+  parse_reference_type_inner (Location locus);\n   std::unique_ptr<AST::ReferenceType> parse_reference_type ();\n   std::unique_ptr<AST::BareFunctionType>\n   parse_bare_function_type (std::vector<AST::LifetimeParam> for_lifetimes);"}, {"sha": "5ad7d84adbc20fb85b328bb66ad4e33803269dc5", "filename": "gcc/testsuite/rust/compile/multi_reference_type.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96413438de938667d59557306103a809762449/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmulti_reference_type.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96413438de938667d59557306103a809762449/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmulti_reference_type.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmulti_reference_type.rs?ref=1f96413438de938667d59557306103a809762449", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let a = 15u8;\n+    let a: &u8 = &a;\n+    let a: &&u8 = &a;\n+    let a: &&&u8 = &a;\n+    let _: &&&&u8 = &a;\n+\n+    let _: &&u8;\n+    let _: &mut &u8;\n+    let _: &&mut u8;\n+    let _: &mut &mut &u8;\n+}"}]}