{"sha": "48d3191e7bd6245bd2df625731f1ad9207a26655", "node_id": "C_kwDOANBUbNoAKDQ4ZDMxOTFlN2JkNjI0NWJkMmRmNjI1NzMxZjFhZDkyMDdhMjY2NTU", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-01-31T19:04:55Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-01-31T19:04:55Z"}, "message": "Constrain PHI handling in -Wuse-after-free [PR104232].\n\nResolves:\nPR middle-end/104232 - spurious -Wuse-after-free after conditional free\n\ngcc/ChangeLog:\n\n\tPR middle-end/104232\n\t* gimple-ssa-warn-access.cc (pointers_related_p): Add argument.\n\tHandle PHIs.  Add a synonymous overload.\n\t(pass_waccess::check_pointer_uses): Call pointers_related_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/104232\n\t* g++.dg/warn/Wuse-after-free4.C: New test.\n\t* gcc.dg/Wuse-after-free-2.c: New test.\n\t* gcc.dg/Wuse-after-free-3.c: New test.", "tree": {"sha": "cbce7d634ebd97450c2b28b0f849cebe7036f082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbce7d634ebd97450c2b28b0f849cebe7036f082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d3191e7bd6245bd2df625731f1ad9207a26655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d3191e7bd6245bd2df625731f1ad9207a26655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d3191e7bd6245bd2df625731f1ad9207a26655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d3191e7bd6245bd2df625731f1ad9207a26655/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ab99f7c854d654bf05abd50e3300714df381f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ab99f7c854d654bf05abd50e3300714df381f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ab99f7c854d654bf05abd50e3300714df381f3"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "ad5e2f4458eaa1a07dc5eae9b3569e20355170f2", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=48d3191e7bd6245bd2df625731f1ad9207a26655", "patch": "@@ -4080,7 +4080,8 @@ maybe_warn_mismatched_realloc (tree ptr, gimple *realloc_stmt, gimple *stmt)\n    either don't or their relationship cannot be determined.  */\n \n static bool\n-pointers_related_p (gimple *stmt, tree p, tree q, pointer_query &qry)\n+pointers_related_p (gimple *stmt, tree p, tree q, pointer_query &qry,\n+\t\t    auto_bitmap &visited)\n {\n   if (!ptr_derefs_may_alias_p (p, q))\n     return false;\n@@ -4093,7 +4094,47 @@ pointers_related_p (gimple *stmt, tree p, tree q, pointer_query &qry)\n        it involves a self-referential PHI.  Return a conservative result.  */\n     return false;\n \n-  return pref.ref == qref.ref;\n+  if (pref.ref == qref.ref)\n+    return true;\n+\n+  /* If either pointer is a PHI, iterate over all its operands and\n+     return true if they're all related to the other pointer.  */\n+  tree ptr = q;\n+  unsigned version;\n+  gphi *phi = pref.phi ();\n+  if (phi)\n+    version = SSA_NAME_VERSION (pref.ref);\n+  else\n+    {\n+      phi = qref.phi ();\n+      if (!phi)\n+\treturn false;\n+\n+      ptr = p;\n+      version = SSA_NAME_VERSION (qref.ref);\n+    }\n+\n+  if (!bitmap_set_bit (visited, version))\n+    return true;\n+\n+  unsigned nargs = gimple_phi_num_args (phi);\n+  for (unsigned i = 0; i != nargs; ++i)\n+    {\n+      tree arg = gimple_phi_arg_def (phi, i);\n+      if (!pointers_related_p (stmt, arg, ptr, qry, visited))\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n+/* Convenience wrapper for the above.  */\n+\n+static bool\n+pointers_related_p (gimple *stmt, tree p, tree q, pointer_query &qry)\n+{\n+  auto_bitmap visited;\n+  return pointers_related_p (stmt, p, q, qry, visited);\n }\n \n /* For a STMT either a call to a deallocation function or a clobber, warn\n@@ -4192,7 +4233,12 @@ pass_waccess::check_pointer_uses (gimple *stmt, tree ptr,\n \t    {\n \t      if (gimple_code (use_stmt) == GIMPLE_PHI)\n \t\t{\n+\t\t  /* Only add a PHI result to POINTERS if all its\n+\t\t     operands are related to PTR, otherwise continue.  */\n \t\t  tree lhs = gimple_phi_result (use_stmt);\n+\t\t  if (!pointers_related_p (stmt, lhs, ptr, m_ptr_qry))\n+\t\t    continue;\n+\n \t\t  if (TREE_CODE (lhs) == SSA_NAME)\n \t\t    {\n \t\t      pointers.safe_push (lhs);"}, {"sha": "599d9bfe3c7cbd687e10eec56e4ede325044e66d", "filename": "gcc/testsuite/g++.dg/warn/Wuse-after-free4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free4.C?ref=48d3191e7bd6245bd2df625731f1ad9207a26655", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/104232 - spurious -Wuse-after-free after conditional free\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+char* f (void);\n+\n+struct A\n+{\n+  char *p;\n+  A (): p () { }\n+  ~A ()\n+  {\n+    __builtin_free (p);           // { dg-bogus \"-Wuse-after-free\" }\n+  }\n+};\n+\n+int test_no_warn (void)\n+{\n+  A px, qx;\n+\n+  qx.p = f ();\n+  if (!qx.p)\n+    return 0;\n+\n+  px.p = f ();\n+  return 1;\n+}"}, {"sha": "9f7ed4529f0c60756cbdef082640f7b06488a47a", "filename": "gcc/testsuite/gcc.dg/Wuse-after-free-2.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c?ref=48d3191e7bd6245bd2df625731f1ad9207a26655", "patch": "@@ -0,0 +1,115 @@\n+/* PR middle-end/104232 - spurious -Wuse-after-free after conditional free\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void free (void*);\n+\n+void sink (void*);\n+\n+void nowarn_cond_2 (char *p0, char *q0, int i)\n+{\n+  char *r = i ? p0 : q0;\n+\n+  free (p0);\n+\n+  /* The use of a PHI operand could be diagnosed using the \"maybe\" form\n+     of the warning at level 2 but it's not done.  If it ever changes\n+     this test and those below will need to be updated.  */\n+  sink (r);\n+}\n+\n+void nowarn_cond_2_null (char *p0, int i)\n+{\n+  char *r = i ? p0 : 0;\n+\n+  free (p0);\n+  sink (r);\n+}\n+\n+void nowarn_cond_3 (char *p0, char *q0, int i)\n+{\n+  char *r = i < 0 ? p0 - 1 : 0 < i ? p0 + 1 : q0;\n+\n+  free (p0);\n+  sink (r);\n+}\n+\n+void nowarn_cond_3_null (char *p0, int i)\n+{\n+  char *r = i < 0 ? p0 - 1 : 0 < i ? p0 + 1 : 0;\n+\n+  free (p0);\n+  sink (r);\n+}\n+\n+void nowarn_cond_4 (char *p0, char *q0, int i)\n+{\n+  char *r = i < -1 ? p0 - 2 : i < 0 ? p0 - 1 : 1 < i ? p0 + 1 : q0;\n+\n+  free (p0);\n+  sink (r);\n+}\n+\n+int nowarn_cond_loop (char *p)\n+{\n+  char *q = p;\n+  while (*q)\n+    {\n+      if (*q == 'x')\n+        {\n+          q = \"\";\n+          break;\n+        }\n+      ++q;\n+    }\n+\n+  free (p);\n+  return *q;\n+}\n+\n+\n+void warn_cond_2_cst (char *p, int i)\n+{\n+  /* Same as nowarn_cond_2() above but with R being derived only from\n+     P, which means that any R's use after P has been freed should be\n+     diagnosed.  */\n+  char *r = i ? p + 1 : p + 2;\n+\n+  free (p);         // { dg-message \"call to 'free'\" }\n+  sink (r);         // { dg-warning \"pointer used after 'free'\" }\n+}\n+\n+void warn_cond_2_var (char *p, int i, int j)\n+{\n+  char *r = i ? p + i : p + j;\n+\n+  free (p);         // { dg-message \"call to 'free'\" }\n+  sink (r);         // { dg-warning \"pointer used after 'free'\" }\n+}\n+\n+void warn_cond_3_var (char *p0, int i, int j)\n+{\n+  char *r = i < 0 ? p0 - i : 0 < i ? p0 + j : p0 + i + j;\n+\n+  free (p0);        // { dg-message \"call to 'free'\" }\n+  sink (r + 1);     // { dg-warning \"pointer used after 'free'\" }\n+}\n+\n+int warn_cond_4 (char *p0, char *q0, int i)\n+{\n+  char *r = i < -1 ? p0 - 2 : i < 0 ? p0 - 1 : 1 < i ? p0 + 2 : p0 + 1;\n+\n+  free (p0);        // { dg-message \"call to 'free'\" }\n+  return *r;        // { dg-warning \"pointer used after 'free'\" }\n+}\n+\n+int warn_cond_loop (char *p)\n+{\n+  char *q = p;\n+\n+  while (*q)\n+    ++q;\n+\n+  free (p);         // { dg-message \"call to 'free'\" }\n+  return *q;        // { dg-warning \"pointer 'q' used after 'free'\" }\n+}"}, {"sha": "d1bcfcb3dda447e8581e8c1c032dcaf9baf624d4", "filename": "gcc/testsuite/gcc.dg/Wuse-after-free-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d3191e7bd6245bd2df625731f1ad9207a26655/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-3.c?ref=48d3191e7bd6245bd2df625731f1ad9207a26655", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/104232 - spurious -Wuse-after-free after conditional free\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+char* f (void);\n+\n+static inline void freep (void *p)\n+{\n+  __builtin_free (*(void**)p);    // { dg-bogus \"-Wuse-after-free\" }\n+}\n+\n+int test_no_warn (void)\n+{\n+  __attribute__ ((__cleanup__ (freep))) char *s = 0, *t = 0;\n+\n+  t = f ();\n+  if (!t)\n+    return 0;\n+\n+  s = f ();\n+  return 1;\n+}"}]}