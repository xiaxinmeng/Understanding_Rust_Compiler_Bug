{"sha": "b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2YjcxNWQ1YjgzOGQ5ODY5Zjg5ZDM1OTRlYmY3ZDBiN2NiMzc0Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-18T20:02:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-18T20:02:48Z"}, "message": "PR c++/58407 - deprecated implicit copy ops.\n\ngcc/c-family/\n\t* c.opt (Wdeprecated-copy): New flag.\ngcc/cp/\n\t* call.c (build_over_call): Warn about deprecated trivial fns.\n\t* class.c (classtype_has_user_copy_or_dtor): New.\n\t(type_build_ctor_call): Check TREE_DEPRECATED.\n\t(type_build_dtor_call): Likewise.\n\t* decl2.c (cp_warn_deprecated_use): Move from tree.c.\n\tAdd checks.  Return bool.  Handle -Wdeprecated-copy.\n\t(mark_used): Use it.\n\t* decl.c (grokdeclarator): Remove redundant checks.\n\t* typeck2.c (build_functional_cast): Likewise.\n\t* method.c (lazily_declare_fn): Mark deprecated copy ops.\n\t* init.c (build_aggr_init): Only set TREE_USED if there are\n\tside-effects.\nlibitm/\n\t* beginend.cc (save): Disable -Werror=deprecated-copy.\n\nFrom-SVN: r260381", "tree": {"sha": "5684d331d1a9d9e995bb252f9febf8e86618a0a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5684d331d1a9d9e995bb252f9febf8e86618a0a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f07c22376848e9923aa8455d2c0a059d9d0e01d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07c22376848e9923aa8455d2c0a059d9d0e01d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07c22376848e9923aa8455d2c0a059d9d0e01d5"}], "stats": {"total": 242, "additions": 200, "deletions": 42}, "files": [{"sha": "22c954754bf4f867f073e3852118e30bbe7e6288", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -1,3 +1,7 @@\n+2018-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (Wdeprecated-copy): New flag.\n+\n 2018-05-17  Martin Liska  <mliska@suse.cz>\n \n \t* c-warn.c (overflow_warning): Do not use"}, {"sha": "5114543c128c7c07ca0a529d0c957d0550ee90fa", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -464,6 +464,11 @@ Wdeprecated\n C C++ ObjC ObjC++ CPP(cpp_warn_deprecated) CppReason(CPP_W_DEPRECATED) Var(warn_deprecated) Init(1) Warning\n Warn if a deprecated compiler feature, class, method, or field is used.\n \n+Wdeprecated-copy\n+C++ ObjC++ Var(warn_deprecated_copy) Warning LangEnabledBy(C++ ObjC++, Wall)\n+Mark implicitly-declared copy operations as deprecated if the class has a\n+user-provided copy operation or destructor.\n+\n Wdesignated-init\n C ObjC Var(warn_designated_init) Init(1) Warning\n Warn about positional initialization of structs requiring designated initializers."}, {"sha": "e4fcffca05bc271f04e9acf81a7aef2fd16ff302", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -1,3 +1,19 @@\n+2018-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/58407 - deprecated implicit copy ops.\n+\t* call.c (build_over_call): Warn about deprecated trivial fns.\n+\t* class.c (classtype_has_user_copy_or_dtor): New.\n+\t(type_build_ctor_call): Check TREE_DEPRECATED.\n+\t(type_build_dtor_call): Likewise.\n+\t* decl2.c (cp_warn_deprecated_use): Move from tree.c.\n+\tAdd checks.  Return bool.  Handle -Wdeprecated-copy.\n+\t(mark_used): Use it.\n+\t* decl.c (grokdeclarator): Remove redundant checks.\n+\t* typeck2.c (build_functional_cast): Likewise.\n+\t* method.c (lazily_declare_fn): Mark deprecated copy ops.\n+\t* init.c (build_aggr_init): Only set TREE_USED if there are\n+\tside-effects.\n+\n 2018-05-18  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR c++/85782"}, {"sha": "1df4d14dfe6f30acb28c15bdd614db689b53eb5b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -8168,21 +8168,30 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t\t    /* See unsafe_copy_elision_p.  */\n \t\t    || DECL_BASE_CONSTRUCTOR_P (fn));\n \n-      /* [class.copy]: the copy constructor is implicitly defined even if\n-\t the implementation elided its use.  */\n-      if (!trivial && !force_elide)\n+      fa = argarray[0];\n+      bool unsafe = unsafe_copy_elision_p (fa, arg);\n+      bool eliding_temp = (TREE_CODE (arg) == TARGET_EXPR && !unsafe);\n+\n+      /* [class.copy]: the copy constructor is implicitly defined even if the\n+\t implementation elided its use.  But don't warn about deprecation when\n+\t eliding a temporary, as then no copy is actually performed.  */\n+      warning_sentinel s (warn_deprecated_copy, eliding_temp);\n+      if (force_elide)\n+\t/* The language says this isn't called.  */;\n+      else if (!trivial)\n \t{\n \t  if (!mark_used (fn, complain) && !(complain & tf_error))\n \t    return error_mark_node;\n \t  already_used = true;\n \t}\n+      else\n+\tcp_warn_deprecated_use (fn, complain);\n \n       /* If we're creating a temp and we already have one, don't create a\n \t new one.  If we're not creating a temp but we get one, use\n \t INIT_EXPR to collapse the temp into our target.  Otherwise, if the\n \t ctor is trivial, do a bitwise copy with a simple TARGET_EXPR for a\n \t temp or an INIT_EXPR otherwise.  */\n-      fa = argarray[0];\n       if (is_dummy_object (fa))\n \t{\n \t  if (TREE_CODE (arg) == TARGET_EXPR)\n@@ -8191,7 +8200,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t    return force_target_expr (DECL_CONTEXT (fn), arg, complain);\n \t}\n       else if ((trivial || TREE_CODE (arg) == TARGET_EXPR)\n-\t       && !unsafe_copy_elision_p (fa, arg))\n+\t       && !unsafe)\n \t{\n \t  tree to = cp_stabilize_reference (cp_build_fold_indirect_ref (fa));\n \n@@ -8241,6 +8250,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n           TREE_NO_WARNING (val) = 1;\n \t}\n \n+      cp_warn_deprecated_use (fn, complain);\n+\n       return val;\n     }\n   else if (trivial_fn_p (fn))"}, {"sha": "4960b4b5593b8fb9f0fcddd56fd12479ade69927", "filename": "gcc/cp/class.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -5171,6 +5171,40 @@ classtype_has_move_assign_or_move_ctor_p (tree t, bool user_p)\n   return false;\n }\n \n+/* If T, a class, has a user-provided copy constructor, copy assignment\n+   operator, or destructor, returns that function.  Otherwise, null.  */\n+\n+tree\n+classtype_has_user_copy_or_dtor (tree t)\n+{\n+  if (!CLASSTYPE_LAZY_COPY_CTOR (t))\n+    for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n+      {\n+\ttree fn = *iter;\n+\tif (user_provided_p (fn) && copy_fn_p (fn))\n+\t  return fn;\n+      }\n+\n+  if (!CLASSTYPE_LAZY_COPY_ASSIGN (t))\n+    for (ovl_iterator iter (get_class_binding_direct\n+\t\t\t    (t, assign_op_identifier));\n+\t iter; ++iter)\n+      {\n+\ttree fn = *iter;\n+\tif (user_provided_p (fn) && copy_fn_p (fn))\n+\t  return fn;\n+      }\n+\n+  if (!CLASSTYPE_LAZY_DESTRUCTOR (t))\n+    {\n+      tree fn = CLASSTYPE_DESTRUCTOR (t);\n+      if (user_provided_p (fn))\n+\treturn fn;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Nonzero if we need to build up a constructor call when initializing an\n    object of this class, either because it has a user-declared constructor\n    or because it doesn't have a default constructor (so we need to give an\n@@ -5201,6 +5235,7 @@ type_build_ctor_call (tree t)\n     {\n       tree fn = *iter;\n       if (!DECL_ARTIFICIAL (fn)\n+\t  || TREE_DEPRECATED (fn)\n \t  || DECL_DELETED_FN (fn))\n \treturn true;\n     }\n@@ -5228,6 +5263,7 @@ type_build_dtor_call (tree t)\n     {\n       tree fn = *iter;\n       if (!DECL_ARTIFICIAL (fn)\n+\t  || TREE_DEPRECATED (fn)\n \t  || DECL_DELETED_FN (fn))\n \treturn true;\n     }"}, {"sha": "b23a7c88863dbac78423e6798969c2e0691c29a1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -6103,6 +6103,7 @@ extern bool is_std_init_list\t\t\t(tree);\n extern bool is_list_ctor\t\t\t(tree);\n extern void validate_conversion_obstack\t\t(void);\n extern void mark_versions_used\t\t\t(tree);\n+extern bool cp_warn_deprecated_use\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n extern tree get_function_version_dispatcher\t(tree);\n \n /* in class.c */\n@@ -6164,6 +6165,7 @@ extern bool trivial_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool classtype_has_move_assign_or_move_ctor_p (tree, bool user_declared);\n+extern tree classtype_has_user_copy_or_dtor\t(tree);\n extern bool type_build_ctor_call\t\t(tree);\n extern bool type_build_dtor_call\t\t(tree);\n extern void explain_non_literal_class\t\t(tree);\n@@ -7157,7 +7159,6 @@ extern tree cxx_copy_lang_qualifiers\t\t(const_tree, const_tree);\n \n extern void cxx_print_statistics\t\t(void);\n extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);\n-extern void cp_warn_deprecated_use\t\t(tree);\n \n /* in ptree.c */\n extern void cxx_print_xnode\t\t\t(FILE *, tree, int);"}, {"sha": "f50812f9a870934480bc53b1b9e7505f1ac83729", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -10388,18 +10388,12 @@ grokdeclarator (const cp_declarator *declarator,\n       type = NULL_TREE;\n       type_was_error_mark_node = true;\n     }\n-  /* If the entire declaration is itself tagged as deprecated then\n-     suppress reports of deprecated items.  */\n-  if (type && TREE_DEPRECATED (type)\n-      && deprecated_state != DEPRECATED_SUPPRESS)\n-    cp_warn_deprecated_use (type);\n+  cp_warn_deprecated_use (type);\n   if (type && TREE_CODE (type) == TYPE_DECL)\n     {\n       typedef_decl = type;\n       type = TREE_TYPE (typedef_decl);\n-      if (TREE_DEPRECATED (type)\n-\t  && DECL_ARTIFICIAL (typedef_decl)\n-\t  && deprecated_state != DEPRECATED_SUPPRESS)\n+      if (DECL_ARTIFICIAL (typedef_decl))\n \tcp_warn_deprecated_use (type);\n     }\n   /* No type at all: default to `int', and set DEFAULTED_INT"}, {"sha": "b6e8e077bdce459a2fd1bb0633c0a403364b6693", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -5173,6 +5173,55 @@ maybe_instantiate_decl (tree decl)\n     }\n }\n \n+/* Maybe warn if DECL is deprecated, subject to COMPLAIN.  Returns whether or\n+   not a warning was emitted.  */\n+\n+bool\n+cp_warn_deprecated_use (tree decl, tsubst_flags_t complain)\n+{\n+  if (!(complain & tf_warning) || !decl\n+      || deprecated_state == DEPRECATED_SUPPRESS)\n+    return false;\n+\n+  if (!TREE_DEPRECATED (decl))\n+    {\n+      /* Perhaps this is a deprecated typedef.  */\n+      if (TYPE_P (decl) && TYPE_NAME (decl))\n+\tdecl = TYPE_NAME (decl);\n+\n+      if (!TREE_DEPRECATED (decl))\n+\treturn false;\n+    }\n+\n+  /* Don't warn within members of a deprecated type.  */\n+  if (TYPE_P (decl)\n+      && currently_open_class (decl))\n+    return false;\n+\n+  bool warned = false;\n+  if (cxx_dialect >= cxx11\n+      && DECL_P (decl)\n+      && DECL_ARTIFICIAL (decl)\n+      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n+      && copy_fn_p (decl))\n+    {\n+      warned = warning (OPT_Wdeprecated_copy,\n+\t\t\t\"implicitly-declared %qD is deprecated\", decl);\n+      if (warned)\n+\t{\n+\t  tree ctx = DECL_CONTEXT (decl);\n+\t  tree other = classtype_has_user_copy_or_dtor (ctx);\n+\t  inform (DECL_SOURCE_LOCATION (other),\n+\t\t  \"because %qT has user-provided %qD\",\n+\t\t  ctx, other);\n+\t}\n+    }\n+  else\n+    warned = warn_deprecated_use (decl, NULL_TREE);\n+\n+  return warned;\n+}\n+\n /* Mark DECL (either a _DECL or a BASELINK) as \"used\" in the program.\n    If DECL is a specialization or implicitly declared class member,\n    generate the actual definition.  Return false if something goes\n@@ -5237,9 +5286,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n       return false;\n     }\n \n-  if (TREE_DEPRECATED (decl) && (complain & tf_warning)\n-      && deprecated_state != DEPRECATED_SUPPRESS)\n-    warn_deprecated_use (decl, NULL_TREE);\n+  cp_warn_deprecated_use (decl, complain);\n \n   /* We can only check DECL_ODR_USED on variables or functions with\n      DECL_LANG_SPECIFIC set, and these are also the only decls that we"}, {"sha": "b558742abf65f62dc093a3c23120e06afa5acece", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -1733,11 +1733,6 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       && !DIRECT_LIST_INIT_P (init))\n     flags |= LOOKUP_ONLYCONVERTING;\n \n-  if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n-      && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (type)))\n-    /* Just know that we've seen something for this node.  */\n-    TREE_USED (exp) = 1;\n-\n   is_global = begin_init_stmts (&stmt_expr, &compound_stmt);\n   destroy_temps = stmts_are_full_exprs_p ();\n   current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n@@ -1748,6 +1743,12 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   TREE_READONLY (exp) = was_const;\n   TREE_THIS_VOLATILE (exp) = was_volatile;\n \n+  if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n+      && TREE_SIDE_EFFECTS (stmt_expr)\n+      && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (type)))\n+    /* Just know that we've seen something for this node.  */\n+    TREE_USED (exp) = 1;\n+\n   return stmt_expr;\n }\n "}, {"sha": "8e7590c5dbb8c88eaeb60d3eca04320cddff737a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -2394,8 +2394,19 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n      move assignment operator, the implicitly declared copy constructor is\n      defined as deleted.... */\n   if ((sfk == sfk_copy_assignment || sfk == sfk_copy_constructor)\n-      && classtype_has_move_assign_or_move_ctor_p (type, true))\n-    DECL_DELETED_FN (fn) = true;\n+      && cxx_dialect >= cxx11)\n+    {\n+      if (classtype_has_move_assign_or_move_ctor_p (type, true))\n+\tDECL_DELETED_FN (fn) = true;\n+      else if (classtype_has_user_copy_or_dtor (type))\n+\t/* The implicit definition of a copy constructor as defaulted is\n+\t   deprecated if the class has a user-declared copy assignment operator\n+\t   or a user-declared destructor. The implicit definition of a copy\n+\t   assignment operator as defaulted is deprecated if the class has a\n+\t   user-declared copy constructor or a user-declared destructor (15.4,\n+\t   15.8).  */\n+\tTREE_DEPRECATED (fn) = true;\n+    }\n \n   /* Destructors and assignment operators may be virtual.  */\n   if (sfk == sfk_destructor"}, {"sha": "15b9697a63ba9814463ed90ac28dc6d9091a7a5c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -5398,19 +5398,6 @@ cp_tree_code_length (enum tree_code code)\n     }\n }\n \n-/* Wrapper around warn_deprecated_use that doesn't warn for\n-   current_class_type.  */\n-\n-void\n-cp_warn_deprecated_use (tree node)\n-{\n-  if (TYPE_P (node)\n-      && current_class_type\n-      && TYPE_MAIN_VARIANT (node) == current_class_type)\n-    return;\n-  warn_deprecated_use (node, NULL_TREE);\n-}\n-\n /* Implement -Wzero_as_null_pointer_constant.  Return true if the\n    conditions for the warning hold, false otherwise.  */\n bool"}, {"sha": "ad0774c6731f042bdb43876e0db3af1f0f7846b9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -2064,9 +2064,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n     {\n       type = TREE_TYPE (exp);\n \n-      if (complain & tf_warning\n-\t  && TREE_DEPRECATED (type)\n-\t  && DECL_ARTIFICIAL (exp))\n+      if (DECL_ARTIFICIAL (exp))\n \tcp_warn_deprecated_use (type);\n     }\n   else"}, {"sha": "44b043384d924b51c98f16d46b52fd0393eab803", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -213,7 +213,8 @@ in the following sections.\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n -Wabi=@var{n}  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy @gol\n--Wdelete-non-virtual-dtor  -Wliteral-suffix  -Wmultiple-inheritance @gol\n+-Wdelete-non-virtual-dtor -Wdeprecated-copy  -Wliteral-suffix @gol\n+-Wmultiple-inheritance @gol\n -Wnamespaces  -Wnarrowing @gol\n -Wnoexcept  -Wnoexcept-type  -Wclass-memaccess @gol\n -Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n@@ -2900,6 +2901,14 @@ an instance of a derived class through a pointer to a base class if the\n base class does not have a virtual destructor.  This warning is enabled\n by @option{-Wall}.\n \n+@item -Wdeprecated-copy @r{(C++ and Objective-C++ only)}\n+@opindex Wdeprecated-copy\n+@opindex Wno-deprecated-copy\n+Warn that the implicit declaration of a copy constructor or copy\n+assignment operator is deprecated if the class has a user-provided\n+copy constructor, copy assignment operator, or destructor, in C++11\n+and up.  This warning is enabled by @option{-Wall}.\n+\n @item -Wliteral-suffix @r{(C++ and Objective-C++ only)}\n @opindex Wliteral-suffix\n @opindex Wno-literal-suffix"}, {"sha": "d33c6dc667db8e9b1d7a30afc57a3093eb967ca6", "filename": "gcc/testsuite/g++.dg/cpp0x/depr-copy1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy1.C?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -0,0 +1,29 @@\n+/* [depr.impldec] The implicit definition of a copy constructor as defaulted is\n+   deprecated if the class has a user-declared copy assignment operator or a\n+   user-declared destructor. The implicit definition of a copy assignment\n+   operator as defaulted is deprecated if the class has a user-declared copy\n+   constructor or a user-declared destructor (15.4, 15.8). In a future revision\n+   of this International Standard, these implicit definitions could become\n+   deleted (11.4).  */\n+\n+// { dg-additional-options -Wdeprecated-copy }\n+\n+struct X\n+{\n+  X();\n+  X(const X&);\n+};\n+struct A\n+{\n+  X x;\n+  ~A();\n+};\n+\n+void f(bool b)\n+{\n+  A a;\n+  if (b)\n+    throw A();\t\t\t// Don't warn about elided copy\n+  A a2 = A();\t\t\t// Here either.\n+  A a3 (a);\t\t\t// { dg-warning \"deprecated\" \"\" { target c++11 } }\n+}"}, {"sha": "b48e08406de0b64e11f829364840b08c6d91b1b5", "filename": "gcc/testsuite/g++.old-deja/g++.other/warn6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn6.C?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-W -Wall\" }\n+// { dg-options \"-W -Wall -Wno-deprecated-copy\" }\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 2 Mar 2001 <nathan@codesourcery.com>"}, {"sha": "7791d9e433f8cb50549f27e21178e14956b5bdfd", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -1,3 +1,7 @@\n+2018-05-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* beginend.cc (save): Disable -Werror=deprecated-copy.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/85106"}, {"sha": "057d4586b3760c2d3f0293fec77d23a869abe507", "filename": "libitm/beginend.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/libitm%2Fbeginend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46b715d5b838d9869f89d3594ebf7d0b7cb374c/libitm%2Fbeginend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fbeginend.cc?ref=b46b715d5b838d9869f89d3594ebf7d0b7cb374c", "patch": "@@ -431,7 +431,12 @@ GTM::gtm_transaction_cp::save(gtm_thread* tx)\n   // Save everything that we might have to restore on restarts or aborts.\n   jb = tx->jb;\n   undolog_size = tx->undolog.size();\n+\n+  /* FIXME!  Assignment of an aatree like alloc_actions is unsafe; if either\n+   *this or *tx is destroyed, the other ends up pointing to a freed node.  */\n+#pragma GCC diagnostic warning \"-Wdeprecated-copy\"\n   alloc_actions = tx->alloc_actions;\n+\n   user_actions_size = tx->user_actions.size();\n   id = tx->id;\n   prop = tx->prop;"}]}