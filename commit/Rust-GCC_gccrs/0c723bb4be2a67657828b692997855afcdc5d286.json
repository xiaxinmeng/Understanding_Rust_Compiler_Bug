{"sha": "0c723bb4be2a67657828b692997855afcdc5d286", "node_id": "C_kwDOANBUbNoAKDBjNzIzYmI0YmUyYTY3NjU3ODI4YjY5Mjk5Nzg1NWFmY2RjNWQyODY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-31T22:31:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-07T14:33:25Z"}, "message": "c, c++: attribute format on a ctor with a vbase [PR101833, PR47634]\n\nAttribute format takes three arguments: archetype, string-index, and\nfirst-to-check.  The last two specify the position in the function\nparameter list.  r63030 clarified that \"Since non-static C++ methods have\nan implicit this argument, the arguments of such methods should be counted\nfrom two, not one, when giving values for string-index and first-to-check.\"\nTherefore one has to write\n\n  struct D {\n    D(const char *, ...) __attribute__((format(printf, 2, 3)));\n  };\n\nHowever -- and this is the problem in this PR -- ctors with virtual\nbases also get two additional parameters: the in-charge parameter and\nthe VTT parameter (added in maybe_retrofit_in_chrg).  In fact we'll end up\nwith two clones of the ctor: an in-charge and a not-in-charge version (see\nbuild_cdtor_clones).  That means that the argument position the user\nspecified in the attribute argument will refer to different arguments,\ndepending on which constructor we're currently dealing with.  This can\ncause a range of problems: wrong errors, confusing warnings, or crashes.\n\nThis patch corrects that; for C we don't have to do anything, and in C++\nwe can use num_artificial_parms_for.  It would be wrong to rewrite the\nattributes the user supplied, so I've changed POS to be passed by\nreference so that we don't have to change all the call sites of\npositional_argument and we still get the default_conversion adjustment.\n\nAttribute format_arg is not affected, because it requires that the\nfunction returns \"const char *\" which will never be the case for cdtors.\n\n\tPR c++/101833\n\tPR c++/47634\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.cc (positional_argument): Pass POS by reference.  Deal\n\twith FN being either a function declaration or function type.  Use\n\tmaybe_adjust_arg_pos_for_attribute.\n\t* c-common.cc (check_function_arguments): Maybe pass FNDECL down to\n\tcheck_function_format.\n\t* c-common.h (maybe_adjust_arg_pos_for_attribute): Declare.\n\t(positional_argument): Adjust.\n\t* c-format.cc (get_constant): Rename to ...\n\t(validate_constant): ... this.  Take EXPR by reference.  Return bool\n\tinstead of tree.\n\t(handle_format_arg_attribute): Don't overwrite FORMAT_NUM_EXPR by the\n\treturn value of validate_constant.\n\t(decode_format_attr): Don't overwrite FORMAT_NUM_EXPR and\n\tFIRST_ARG_NUM_EXPR by the return value of validate_constant.\n\t(check_function_format): Adjust a parameter name.\n\t(handle_format_attribute): Maybe pass FNDECL down to decode_format_attr.\n\ngcc/c/ChangeLog:\n\n\t* c-objc-common.cc (maybe_adjust_arg_pos_for_attribute): New.\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (maybe_adjust_arg_pos_for_attribute): New.\n\ngcc/ChangeLog:\n\n\t* tree-core.h (struct attribute_spec): Update comment for HANDLER.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/attr-format-arg1.C: New test.\n\t* g++.dg/ext/attr-format1.C: New test.\n\t* g++.dg/ext/attr-format2.C: New test.\n\t* g++.dg/ext/attr-format3.C: New test.", "tree": {"sha": "38c8c63369f73a22cf6476c909890304e55633bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c8c63369f73a22cf6476c909890304e55633bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c723bb4be2a67657828b692997855afcdc5d286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c723bb4be2a67657828b692997855afcdc5d286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c723bb4be2a67657828b692997855afcdc5d286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c723bb4be2a67657828b692997855afcdc5d286/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3fbfda608a148f112f1d2f4bdd0e8bf9429cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3fbfda608a148f112f1d2f4bdd0e8bf9429cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3fbfda608a148f112f1d2f4bdd0e8bf9429cd9"}], "stats": {"total": 262, "additions": 207, "deletions": 55}, "files": [{"sha": "0f047a105c29b51d07c0223e94625eaa7d2343c1", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -594,18 +594,23 @@ attribute_takes_identifier_p (const_tree attr_id)\n }\n \n /* Verify that argument value POS at position ARGNO to attribute NAME\n-   applied to function TYPE refers to a function parameter at position\n-   POS and the expected type CODE.  Treat CODE == INTEGER_TYPE as\n-   matching all C integral types except bool.  If successful, return\n-   POS after default conversions, if any.  Otherwise, issue appropriate\n-   warnings and return null.  A non-zero 1-based ARGNO should be passed\n-   in by callers only for attributes with more than one argument.  */\n+   applied to function FN (which is either a function declaration or function\n+   type) refers to a function parameter at position POS and the expected type\n+   CODE.  Treat CODE == INTEGER_TYPE as matching all C integral types except\n+   bool.  If successful, return POS after default conversions (and possibly\n+   adjusted by ADJUST_POS).  Otherwise, issue appropriate warnings and return\n+   null.  A non-zero 1-based ARGNO should be passed in by callers only for\n+   attributes with more than one argument.\n+\n+   N.B. This function modifies POS.  */\n \n tree\n-positional_argument (const_tree fntype, const_tree atname, tree pos,\n+positional_argument (const_tree fn, const_tree atname, tree &pos,\n \t\t     tree_code code, int argno /* = 0 */,\n \t\t     int flags /* = posargflags () */)\n {\n+  const_tree fndecl = TYPE_P (fn) ? NULL_TREE : fn;\n+  const_tree fntype = TYPE_P (fn) ? fn : TREE_TYPE (fn);\n   if (pos && TREE_CODE (pos) != IDENTIFIER_NODE\n       && TREE_CODE (pos) != FUNCTION_DECL)\n     pos = default_conversion (pos);\n@@ -682,6 +687,11 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n   if (!prototype_p (fntype))\n     return pos;\n \n+   /* ADJUST_POS is non-zero in C++ when the function type has invisible\n+      parameters generated by the compiler, such as the in-charge or VTT\n+      parameters.  */\n+  const int adjust_pos = maybe_adjust_arg_pos_for_attribute (fndecl);\n+\n   /* Verify that the argument position does not exceed the number\n      of formal arguments to the function.  When POSARG_ELLIPSIS\n      is set, ARGNO may be beyond the last argument of a vararg\n@@ -690,7 +700,7 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n   if (!nargs\n       || !tree_fits_uhwi_p (pos)\n       || ((flags & POSARG_ELLIPSIS) == 0\n-\t  && !IN_RANGE (tree_to_uhwi (pos), 1, nargs)))\n+\t  && !IN_RANGE (tree_to_uhwi (pos) + adjust_pos, 1, nargs)))\n     {\n \n       if (argno < 1)\n@@ -707,8 +717,9 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n     }\n \n   /* Verify that the type of the referenced formal argument matches\n-     the expected type.  */\n-  unsigned HOST_WIDE_INT ipos = tree_to_uhwi (pos);\n+     the expected type.   Invisible parameters may have been added by\n+     the compiler, so adjust the position accordingly.  */\n+  unsigned HOST_WIDE_INT ipos = tree_to_uhwi (pos) + adjust_pos;\n \n   /* Zero was handled above.  */\n   gcc_assert (ipos != 0);\n@@ -791,7 +802,7 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n       return NULL_TREE;\n     }\n \n-  return pos;\n+  return build_int_cst (TREE_TYPE (pos), ipos);\n }\n \n /* Return the first of DECL or TYPE attributes installed in NODE if it's"}, {"sha": "6156e5fcb0cd5bf7eb7559021dab3b467ea86847", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -6071,8 +6071,8 @@ check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n   /* Check for errors in format strings.  */\n \n   if (warn_format || warn_suggest_attribute_format)\n-    check_function_format (fntype, TYPE_ATTRIBUTES (fntype), nargs, argarray,\n-\t\t\t   arglocs);\n+    check_function_format (fndecl ? fndecl : fntype, TYPE_ATTRIBUTES (fntype), nargs,\n+\t\t\t   argarray, arglocs);\n \n   if (warn_format)\n     check_function_sentinel (fntype, nargs, argarray);"}, {"sha": "f10be9bd67eaf8a568feac6e69b64260164ec3ea", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -1049,6 +1049,7 @@ extern tree finish_label_address_expr (tree, location_t);\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n extern bool lvalue_p (const_tree);\n+extern int maybe_adjust_arg_pos_for_attribute (const_tree);\n \n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n@@ -1493,7 +1494,7 @@ enum posargflags {\n   POSARG_ELLIPSIS = 2\n };\n \n-extern tree positional_argument (const_tree, const_tree, tree, tree_code,\n+extern tree positional_argument (const_tree, const_tree, tree &, tree_code,\n \t\t\t\t int = 0, int = posargflags ());\n \n extern enum flt_eval_method"}, {"sha": "ea57fde801c552076a162a7ddbcc3977b344f0ee", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -78,9 +78,9 @@ static bool check_format_string (const_tree argument,\n \t\t\t\t unsigned HOST_WIDE_INT format_num,\n \t\t\t\t int flags, bool *no_add_attrs,\n \t\t\t\t int expected_format_type);\n-static tree get_constant (const_tree fntype, const_tree atname, tree expr,\n-\t\t\t  int argno, unsigned HOST_WIDE_INT *value,\n-\t\t\t  int flags, bool validated_p);\n+static bool validate_constant (const_tree fn, const_tree atname, tree &expr,\n+\t\t\t       int argno, unsigned HOST_WIDE_INT *value,\n+\t\t\t       int flags, bool validated_p);\n static const char *convert_format_name_to_system_name (const char *attr_name);\n \n static int first_target_format_type;\n@@ -172,14 +172,12 @@ handle_format_arg_attribute (tree *node, tree atname,\n \t\t\t     tree args, int flags, bool *no_add_attrs)\n {\n   tree type = *node;\n-  /* Note that TREE_VALUE (args) is changed in place below.  */\n+  /* Note that TREE_VALUE (args) is changed in the validate_constant call.  */\n   tree *format_num_expr = &TREE_VALUE (args);\n   unsigned HOST_WIDE_INT format_num = 0;\n \n-  if (tree val = get_constant (type, atname, *format_num_expr, 0, &format_num,\n-\t\t\t       0, false))\n-    *format_num_expr = val;\n-  else\n+  if (!validate_constant (type, atname, *format_num_expr, 0, &format_num, 0,\n+\t\t\t  false))\n     {\n       *no_add_attrs = true;\n       return NULL_TREE;\n@@ -301,38 +299,39 @@ check_format_string (const_tree fntype, unsigned HOST_WIDE_INT format_num,\n /* Under the control of FLAGS, verify EXPR is a valid constant that\n    refers to a positional argument ARGNO having a string type (char*\n    or, for targets like Darwin, a pointer to struct CFString) to\n-   a function type FNTYPE declared with attribute ATNAME.\n-   If valid, store the constant's integer value in *VALUE and return\n-   the value.\n-   If VALIDATED_P is true assert the validation is successful.\n-   Returns the converted constant value on success, null otherwise.  */\n+   a function FN declared with attribute ATNAME.  If valid, store the\n+   constant's integer value in *VALUE and return true.  If VALIDATED_P\n+   is true assert the validation is successful.\n \n-static tree\n-get_constant (const_tree fntype, const_tree atname, tree expr, int argno,\n-\t      unsigned HOST_WIDE_INT *value, int flags, bool validated_p)\n+   N.B. This function modifies EXPR.  */\n+\n+static bool\n+validate_constant (const_tree fn, const_tree atname, tree &expr, int argno,\n+\t\t   unsigned HOST_WIDE_INT *value, int flags, bool validated_p)\n {\n   /* Require the referenced argument to have a string type.  For targets\n      like Darwin, also accept pointers to struct CFString.  */\n-  if (tree val = positional_argument (fntype, atname, expr, STRING_CST,\n+  if (tree val = positional_argument (fn, atname, expr, STRING_CST,\n \t\t\t\t      argno, flags))\n     {\n       *value = TREE_INT_CST_LOW (val);\n-      return val;\n+      return true;\n     }\n \n   gcc_assert (!validated_p);\n-  return NULL_TREE;\n+  return false;\n }\n \n /* Decode the arguments to a \"format\" attribute into a\n    function_format_info structure.  It is already known that the list\n    is of the right length.  If VALIDATED_P is true, then these\n    attributes have already been validated and must not be erroneous;\n-   if false, it will give an error message.  Returns true if the\n-   attributes are successfully decoded, false otherwise.  */\n+   if false, it will give an error message.  FN is either a function\n+   declaration or function type.  Returns true if the attributes are\n+   successfully decoded, false otherwise.  */\n \n static bool\n-decode_format_attr (const_tree fntype, tree atname, tree args,\n+decode_format_attr (const_tree fn, tree atname, tree args,\n \t\t    function_format_info *info, bool validated_p)\n {\n   tree format_type_id = TREE_VALUE (args);\n@@ -372,17 +371,13 @@ decode_format_attr (const_tree fntype, tree atname, tree args,\n \t}\n     }\n \n-  if (tree val = get_constant (fntype, atname, *format_num_expr,\n-\t\t\t       2, &info->format_num, 0, validated_p))\n-    *format_num_expr = val;\n-  else\n+  if (!validate_constant (fn, atname, *format_num_expr, 2, &info->format_num,\n+\t\t\t  0, validated_p))\n     return false;\n \n-  if (tree val = get_constant (fntype, atname, *first_arg_num_expr,\n-\t\t\t       3, &info->first_arg_num,\n-\t\t\t       (POSARG_ZERO | POSARG_ELLIPSIS), validated_p))\n-    *first_arg_num_expr = val;\n-  else\n+  if (!validate_constant (fn, atname, *first_arg_num_expr, 3,\n+\t\t\t  &info->first_arg_num,\n+\t\t\t  (POSARG_ZERO | POSARG_ELLIPSIS), validated_p))\n     return false;\n \n   if (info->first_arg_num != 0 && info->first_arg_num <= info->format_num)\n@@ -1154,13 +1149,12 @@ decode_format_type (const char *s, bool *is_raw /* = NULL */)\n \f\n /* Check the argument list of a call to printf, scanf, etc.\n    ATTRS are the attributes on the function type.  There are NARGS argument\n-   values in the array ARGARRAY.\n-   Also, if -Wsuggest-attribute=format,\n-   warn for calls to vprintf or vscanf in functions with no such format\n-   attribute themselves.  */\n+   values in the array ARGARRAY.  FN is either a function declaration or\n+   function type.  Also, if -Wsuggest-attribute=format, warn for calls to\n+   vprintf or vscanf in functions with no such format attribute themselves.  */\n \n void\n-check_function_format (const_tree fntype, tree attrs, int nargs,\n+check_function_format (const_tree fn, tree attrs, int nargs,\n \t\t       tree *argarray, vec<location_t> *arglocs)\n {\n   tree a;\n@@ -1174,7 +1168,7 @@ check_function_format (const_tree fntype, tree attrs, int nargs,\n \t{\n \t  /* Yup; check it.  */\n \t  function_format_info info;\n-\t  decode_format_attr (fntype, atname, TREE_VALUE (a), &info,\n+\t  decode_format_attr (fn, atname, TREE_VALUE (a), &info,\n \t\t\t      /*validated=*/true);\n \t  if (warn_format)\n \t    {\n@@ -5150,10 +5144,14 @@ convert_format_name_to_system_name (const char *attr_name)\n /* Handle a \"format\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n tree\n-handle_format_attribute (tree *node, tree atname, tree args,\n+handle_format_attribute (tree node[3], tree atname, tree args,\n \t\t\t int flags, bool *no_add_attrs)\n {\n   const_tree type = *node;\n+  /* NODE[2] may be NULL, and it also may be a PARM_DECL for function\n+     pointers.  */\n+  const_tree fndecl = ((node[2] && TREE_CODE (node[2]) == FUNCTION_DECL)\n+\t\t       ? node[2] : NULL_TREE);\n   function_format_info info;\n \n #ifdef TARGET_FORMAT_TYPES\n@@ -5179,7 +5177,8 @@ handle_format_attribute (tree *node, tree atname, tree args,\n   if (TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE)\n     TREE_VALUE (args) = canonicalize_attr_name (TREE_VALUE (args));\n \n-  if (!decode_format_attr (type, atname, args, &info, /* validated_p = */false))\n+  if (!decode_format_attr (fndecl ? fndecl : type, atname, args, &info,\n+\t\t\t   /* validated_p = */false))\n     {\n       *no_add_attrs = true;\n       return NULL_TREE;"}, {"sha": "70e10a98e3363c657f455b600f776834dd2c0e8c", "filename": "gcc/c/c-objc-common.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc%2Fc-objc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fc%2Fc-objc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.cc?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -394,3 +394,12 @@ c_get_alias_set (tree t)\n \n   return c_common_get_alias_set (t);\n }\n+\n+/* In C there are no invisible parameters like in C++ (this, in-charge, VTT,\n+   etc.).  */\n+\n+int\n+maybe_adjust_arg_pos_for_attribute (const_tree)\n+{\n+  return 0;\n+}"}, {"sha": "979728027ed5440dcb505bb93866d654b0714fc7", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -6119,6 +6119,25 @@ maybe_warn_zero_as_null_pointer_constant (tree expr, location_t loc)\n     }\n   return false;\n }\n+\n+/* FNDECL is a function declaration whose type may have been altered by\n+   adding extra parameters such as this, in-charge, or VTT.  When this\n+   takes place, the positional arguments supplied by the user (as in the\n+   'format' attribute arguments) may refer to the wrong argument.  This\n+   function returns an integer indicating how many arguments should be\n+   skipped.  */\n+\n+int\n+maybe_adjust_arg_pos_for_attribute (const_tree fndecl)\n+{\n+  if (!fndecl)\n+    return 0;\n+  int n = num_artificial_parms_for (fndecl);\n+  /* The manual states that it's the user's responsibility to account\n+     for the implicit this parameter.  */\n+  return n > 0 ? n - 1 : 0;\n+}\n+\n \f\n /* Release memory we no longer need after parsing.  */\n void"}, {"sha": "a7ad0f9ca3329ef2d817d6e87f1f7cc8749fc1a5", "filename": "gcc/testsuite/g++.dg/ext/attr-format-arg1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format-arg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format-arg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format-arg1.C?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/101833\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+struct B { };\n+\n+struct V : virtual B {\n+  const char *fmt (int, const char *) __attribute__((format_arg(3)));\n+};\n+\n+struct D : B {\n+  const char *fmt (int, const char *) __attribute__((format_arg(3)));\n+};\n+\n+extern void fmt (const char *, ...) __attribute__((format(printf, 1, 2)));\n+\n+void\n+g ()\n+{\n+  V v;\n+  fmt (v.fmt (1, \"%d\"), 1);\n+  fmt (v.fmt (1, \"%d\"), 1lu); // { dg-warning \"expects argument of type\" }\n+  D d;\n+  fmt (d.fmt (1, \"%d\"), 1);\n+  fmt (d.fmt (1, \"%d\"), 1lu); // { dg-warning \"expects argument of type\" }\n+}"}, {"sha": "1b8464ed6ac64761f686afdef030c4deb373b82c", "filename": "gcc/testsuite/g++.dg/ext/attr-format1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format1.C?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/47634\n+// { dg-do compile }\n+\n+class Base {\n+public:\n+  Base() { }\n+};\n+\n+class VDerived : public virtual Base {\n+public:\n+  VDerived(int x, const char * f, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+class Derived : public Base {\n+public:\n+  Derived(int x, const char * f, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+VDerived::VDerived(int, const char *, ...)\n+{\n+}\n+\n+Derived::Derived(int, const char *, ...)\n+{\n+}\n+\n+int\n+main(int, char **)\n+{\n+  throw VDerived(1, \"%s %d\", \"foo\", 1);\n+  throw Derived(1, \"%s %d\", \"bar\", 1);\n+}"}, {"sha": "7e6eec58047c66309d9971adb343f09d5a6fa407", "filename": "gcc/testsuite/g++.dg/ext/attr-format2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format2.C?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/101833\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+struct B { };\n+\n+struct V : virtual B {\n+  V(int, const char *, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+struct D : B {\n+  D(int, const char *, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+struct D2 : B {\n+  template<typename T>\n+  D2(T, const char *, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+struct V2 : virtual B {\n+  template<typename T>\n+  V2(T, const char *, ...) __attribute__((format(printf, 3, 4)));\n+};\n+\n+struct X {\n+  template<typename T>\n+  X(T, ...) __attribute__((format(printf, 2, 3)));\n+};\n+\n+V v(1, \"%s %d\", \"foo\", 1);\n+D d(1, \"%s %d\", \"foo\", 1);\n+D2 d2(1, \"%s %d\", \"foo\", 1);\n+V2 v2(1, \"%s %d\", \"foo\", 1);\n+\n+// Test that it actually works.\n+V e1(1, \"%d\", 1L); // { dg-warning \"expects argument of type\" }\n+D e2(1, \"%d\", 1L); // { dg-warning \"expects argument of type\" }\n+X e3(\"%d\", 1L); // { dg-warning \"expects argument of type\" }"}, {"sha": "60a672cd389d9dd11d30faec660076c54366dc31", "filename": "gcc/testsuite/g++.dg/ext/attr-format3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-format3.C?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/101833\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+class Base {};\n+\n+struct VDerived : virtual Base {\n+  VDerived(int, int, const char *, ...) __attribute__((format(printf, 2, 3))); // { dg-error \".format. attribute argument 2 value .2. refers to parameter type .int.\" }\n+  VDerived(int, const char *, ...) __attribute__((format(printf, 5, 6))); // { dg-warning \".format. attribute argument 2 value .5. exceeds\" }\n+} a(1, \"%s %d\", \"foo\", 1);\n+\n+struct Derived : Base {\n+  Derived(int, int, const char *, ...) __attribute__((format(printf, 2, 3))); // { dg-error \".format. attribute argument 2 value .2. refers to parameter type .int.\" }\n+  Derived(int, const char *, ...) __attribute__((format(printf, 5, 6))); // { dg-warning \".format. attribute argument 2 value .5. exceeds\" }\n+} b(1, \"%s %d\", \"foo\", 1);"}, {"sha": "93258e381c6b5d5d22e295965f22f7ebcdda8b1c", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c723bb4be2a67657828b692997855afcdc5d286/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=0c723bb4be2a67657828b692997855afcdc5d286", "patch": "@@ -2113,8 +2113,10 @@ struct attribute_spec {\n   bool function_type_required;\n   /* Specifies if attribute affects type's identity.  */\n   bool affects_type_identity;\n-  /* Function to handle this attribute.  NODE points to the node to which\n-     the attribute is to be applied.  If a DECL, it should be modified in\n+  /* Function to handle this attribute.  NODE points to a tree[3] array,\n+     where node[0] is the node to which the attribute is to be applied;\n+     node[1] is the last pushed/merged declaration if one exists, and node[2]\n+     may be the declaration for node[0].  If a DECL, it should be modified in\n      place; if a TYPE, a copy should be created.  NAME is the canonicalized\n      name of the attribute i.e. without any leading or trailing underscores.\n      ARGS is the TREE_LIST of the arguments (which may be NULL).  FLAGS gives"}]}