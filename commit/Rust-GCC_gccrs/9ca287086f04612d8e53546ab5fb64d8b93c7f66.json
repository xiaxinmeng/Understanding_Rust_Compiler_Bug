{"sha": "9ca287086f04612d8e53546ab5fb64d8b93c7f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhMjg3MDg2ZjA0NjEyZDhlNTM1NDZhYjVmYjY0ZDhiOTNjN2Y2Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-08-10T05:13:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-08-10T05:13:01Z"}, "message": "re PR fortran/64022 ([F2003][IEEE] ieee_support_flag does not handle kind=10 and kind=16 REAL variables)\n\n\tPR fortran/64022\n\t* gfortran.dg/ieee/large_4.f90: New test.\n\nFrom-SVN: r226755", "tree": {"sha": "9945bd544ac372857988de1ec77a57d427603c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9945bd544ac372857988de1ec77a57d427603c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca287086f04612d8e53546ab5fb64d8b93c7f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca287086f04612d8e53546ab5fb64d8b93c7f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca287086f04612d8e53546ab5fb64d8b93c7f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca287086f04612d8e53546ab5fb64d8b93c7f66/comments", "author": null, "committer": null, "parents": [{"sha": "f48dc6463d744261ee537a48fc34f9a9f6cc3e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48dc6463d744261ee537a48fc34f9a9f6cc3e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48dc6463d744261ee537a48fc34f9a9f6cc3e41"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "0e707eb89992715508b76aa594531550b368211c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ca287086f04612d8e53546ab5fb64d8b93c7f66", "patch": "@@ -1,3 +1,8 @@\n+2015-08-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR fortran/64022\n+\t* gfortran.dg/ieee/large_4.f90: New test.\n+\n 2015-08-08  Bud Davis  <jmdavis@link.com>\n \n \tPR fortran/59746\n@@ -93,8 +98,8 @@\n 2015-08-05  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.target/rl78: New directory.\n-        * gcc.target/rl78/rl78.exp: New file: Test driver.\n-        * gcc.target/rl78/test_addm3.c: New file: Test adds.\n+\t* gcc.target/rl78/rl78.exp: New file: Test driver.\n+\t* gcc.target/rl78/test_addm3.c: New file: Test adds.\n \n 2015-08-05  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "c653d299ce9384b59852de19e54dc6d4dc4d7248", "filename": "gcc/testsuite/gfortran.dg/ieee/large_4.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Flarge_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Flarge_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Flarge_4.f90?ref=9ca287086f04612d8e53546ab5fb64d8b93c7f66", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do run }\n+\n+program test_underflow_control\n+  use ieee_arithmetic\n+  use iso_fortran_env\n+\n+  ! kx and ky will be large real kinds, if supported, and single/double\n+  ! otherwise\n+  integer, parameter :: kx = &\n+    max(ieee_selected_real_kind(precision(0.d0) + 1), kind(0.))\n+  integer, parameter :: ky = &\n+    max(ieee_selected_real_kind(precision(0._kx) + 1), kind(0.d0))\n+\n+  logical l\n+  real(kind=kx), volatile :: x\n+  real(kind=ky), volatile :: y\n+\n+  if (ieee_support_underflow_control(x)) then\n+\n+    x = tiny(x)\n+    call ieee_set_underflow_mode(.true.)\n+    x = x / 2000._kx\n+    if (x == 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (.not. l) call abort\n+\n+    x = tiny(x)\n+    call ieee_set_underflow_mode(.false.)\n+    x = x / 2000._kx\n+    if (x > 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (l) call abort\n+\n+  end if\n+\n+  if (ieee_support_underflow_control(y)) then\n+\n+    y = tiny(y)\n+    call ieee_set_underflow_mode(.true.)\n+    y = y / 2000._ky\n+    if (y == 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (.not. l) call abort\n+\n+    y = tiny(y)\n+    call ieee_set_underflow_mode(.false.)\n+    y = y / 2000._ky\n+    if (y > 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (l) call abort\n+\n+  end if\n+\n+end program"}]}