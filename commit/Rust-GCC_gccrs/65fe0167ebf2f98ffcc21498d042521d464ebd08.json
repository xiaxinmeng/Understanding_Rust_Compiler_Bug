{"sha": "65fe0167ebf2f98ffcc21498d042521d464ebd08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmZTAxNjdlYmYyZjk4ZmZjYzIxNDk4ZDA0MjUyMWQ0NjRlYmQwOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T13:44:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T13:44:19Z"}, "message": "[multiple changes]\n\n2015-05-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.ads: Update the documentation of flags\n\tHas_Inherited_Default_Init_Cond and Has_Default_Init_Cond.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* impunit.adb: Add entry for a-dhfina.ads\n\t* a-dhfina.ads: New file.\n\n2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): if the array\n\ttype has convention Fortran, a multidimensional iterator varies\n\tthe first dimension fastest.\n\nFrom-SVN: r223068", "tree": {"sha": "c2c6c77606e9d6c4352d7cfbcf339daed8abfd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c6c77606e9d6c4352d7cfbcf339daed8abfd35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65fe0167ebf2f98ffcc21498d042521d464ebd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fe0167ebf2f98ffcc21498d042521d464ebd08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fe0167ebf2f98ffcc21498d042521d464ebd08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fe0167ebf2f98ffcc21498d042521d464ebd08/comments", "author": null, "committer": null, "parents": [{"sha": "45ce0f05e0d77adccc0d91fcc8404c6f37138526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ce0f05e0d77adccc0d91fcc8404c6f37138526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ce0f05e0d77adccc0d91fcc8404c6f37138526"}], "stats": {"total": 130, "additions": 110, "deletions": 20}, "files": [{"sha": "a9666ffddd456e5f2767ca67dd35cb3781f6e14b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65fe0167ebf2f98ffcc21498d042521d464ebd08", "patch": "@@ -1,10 +1,25 @@\n 2015-05-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n-\t* einfo.adb Node32 is now used as Encapsulating_State.\n+\t* einfo.ads: Update the documentation of flags\n+\tHas_Inherited_Default_Init_Cond and Has_Default_Init_Cond.\n+\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* impunit.adb: Add entry for a-dhfina.ads\n+\t* a-dhfina.ads: New file.\n+\n+2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): if the array\n+\ttype has convention Fortran, a multidimensional iterator varies\n+\tthe first dimension fastest.\n+\n+2015-05-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb: Node32 is now used as Encapsulating_State.\n \tNode37 is now used as Associated_Entity.\n \t(Associated_Entity): New routine.\n-\t(Encapsulating_State): Update the assertion guard\n-\tto include constants.\n+\t(Encapsulating_State): Update the assertion guard to include constants.\n \t(Set_Associated_Entity): New routine.\n \t(Set_Encapsulating_State): Update the assertion guard to\n \tinclude constants."}, {"sha": "e34c664d451529c04336e9d0b0da93b4aa725f7d", "filename": "gcc/ada/a-dhfina.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fa-dhfina.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fa-dhfina.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dhfina.ads?ref=65fe0167ebf2f98ffcc21498d042521d464ebd08", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  ADA.DIRECTORIES.HIERARCHICAL_FILE_NAMES                 --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Directories.Hierarchical_File_Names is\n+   pragma Unimplemented_Unit;\n+\n+   function Is_Simple_Name (Name : String) return Boolean;\n+\n+   function Is_Root_Directory_Name (Name : String) return Boolean;\n+\n+   function Is_Parent_Directory_Name (Name : String) return Boolean;\n+\n+   function Is_Current_Directory_Name (Name : String) return Boolean;\n+\n+   function Is_Full_Name (Name : String) return Boolean;\n+\n+   function Is_Relative_Name (Name : String) return Boolean;\n+\n+   function Simple_Name (Name : String) return String\n+     renames Ada.Directories.Simple_Name;\n+\n+   function Containing_Directory (Name : String) return String\n+     renames Ada.Directories.Containing_Directory;\n+\n+   function Initial_Directory (Name : String) return String;\n+\n+   function Relative_Name (Name : String) return String;\n+\n+   function Compose\n+     (Directory      : String := \"\";\n+      Relative_Name  : String;\n+      Extension      : String := \"\") return String;\n+\n+end Ada.Directories.Hierarchical_File_Names;"}, {"sha": "7a068f2e2a003b9b4657eb8817d36fa84176c544", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=65fe0167ebf2f98ffcc21498d042521d464ebd08", "patch": "@@ -1520,10 +1520,10 @@ package Einfo is\n --       value is set, but it may be overridden by an aspect declaration on\n --       type type derivation.\n \n---    Has_Default_Init_Cond (Flag3)\n---       Defined in type and subtype entities. Set if pragma Default_Initial_\n---       Condition applies to the type or subtype. This flag must be mutually\n---       exclusive with Has_Inherited_Default_Init_Cond.\n+--    Has_Default_Init_Cond (Flag3) [base type only]\n+--       Defined in all type entities. Set if pragma Default_Initial_Condition\n+--       applies to a private type and by extension to its full view. This flag\n+--       is mutually exclusive with flag Has_Inherited_Default_Init_Cond.\n \n --    Has_Delayed_Aspects (Flag200)\n --      Defined in all entities. Set if the Rep_Item chain for the entity has\n@@ -1538,7 +1538,7 @@ package Einfo is\n --       separate section (\"Delayed Freezing and Elaboration\") for details.\n \n --    Has_Delayed_Rep_Aspects (Flag261)\n---       Defined in all type and subtypes. This flag is set if there is at\n+--       Defined in all types and subtypes. This flag is set if there is at\n --       least one aspect for a representation characteristic that has to be\n --       delayed and is one of the characteristics that may be inherited by\n --       types derived from this type if not overridden. If this flag is set,\n@@ -1661,10 +1661,10 @@ package Einfo is\n --       type which has inheritable invariants, and in this case the flag will\n --       also be set in the private type.\n \n---    Has_Inherited_Default_Init_Cond (Flag133)\n---       Defined in type and subtype entities. Set if a derived type inherits\n---       pragma Default_Initial_Condition from its parent type. This flag must\n---       be mutually exclusive with Has_Default_Init_Cond.\n+--    Has_Inherited_Default_Init_Cond (Flag133) [base type only]\n+--       Defined in all type entities. Set when a derived type inherits pragma\n+--       Default_Initial_Condition from its parent type. This flag is mutually\n+--       exclusive with flag Has_Default_Init_Cond.\n \n --    Has_Initial_Value (Flag219)\n --       Defined in entities for variables and out parameters. Set if there\n@@ -5386,13 +5386,13 @@ package Einfo is\n    --    Has_Constrained_Partial_View        (Flag187)\n    --    Has_Controlled_Component            (Flag43)   (base type only)\n    --    Has_Default_Aspect                  (Flag39)   (base type only)\n-   --    Has_Default_Init_Cond               (Flag3)\n+   --    Has_Default_Init_Cond               (Flag3)    (base type only)\n    --    Has_Delayed_Rep_Aspects             (Flag261)\n    --    Has_Discriminants                   (Flag5)\n    --    Has_Dynamic_Predicate_Aspect        (Flag258)\n    --    Has_Independent_Components          (Flag34)   (base type only)\n    --    Has_Inheritable_Invariants          (Flag248)\n-   --    Has_Inherited_Default_Init_Cond     (Flag133)\n+   --    Has_Inherited_Default_Init_Cond     (Flag133)  (base type only)\n    --    Has_Invariants                      (Flag232)\n    --    Has_Non_Standard_Rep                (Flag75)   (base type only)\n    --    Has_Object_Size_Clause              (Flag172)"}, {"sha": "d88016f892195fb26a50097e4515dfafccdc0f4b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=65fe0167ebf2f98ffcc21498d042521d464ebd08", "patch": "@@ -3668,6 +3668,7 @@ package body Exp_Ch5 is\n       Loc        : constant Source_Ptr := Sloc (N);\n       Stats      : constant List_Id    := Statements (N);\n       Core_Loop  : Node_Id;\n+      Dim1       : Int;\n       Ind_Comp   : Node_Id;\n       Iterator   : Entity_Id;\n \n@@ -3684,6 +3685,8 @@ package body Exp_Ch5 is\n \n          --  Generate:\n          --    Element : Component_Type renames Array (Iterator);\n+         --    Iterator is the index value, or a list of index values\n+         --    in the case of a multidimensional array.\n \n          Ind_Comp :=\n            Make_Indexed_Component (Loc,\n@@ -3720,6 +3723,16 @@ package body Exp_Ch5 is\n       --       <original loop statements>\n       --    end loop;\n \n+      --  If this is an iteration over a multidimensional array, the\n+      --  innermost loop is over the last dimension in Ada, and over\n+      --  the first dimension in Fortran.\n+\n+      if Convention (Array_Typ) = Convention_Fortran then\n+         Dim1 := 1;\n+      else\n+         Dim1 := Array_Dim;\n+      end if;\n+\n       Core_Loop :=\n         Make_Loop_Statement (Loc,\n           Iteration_Scheme =>\n@@ -3732,15 +3745,23 @@ package body Exp_Ch5 is\n                       Prefix         => Relocate_Node (Array_Node),\n                       Attribute_Name => Name_Range,\n                       Expressions    => New_List (\n-                        Make_Integer_Literal (Loc, Array_Dim))),\n+                        Make_Integer_Literal (Loc, Dim1))),\n                   Reverse_Present             => Reverse_Present (I_Spec))),\n            Statements      => Stats,\n            End_Label       => Empty);\n \n-      --  Processing for multidimensional array\n+      --  Processing for multidimensional array. The body of each loop is\n+      --  a loop over a previous dimension, going in decreasing order in Ada\n+      --  and in increasing order in Fortran.\n \n       if Array_Dim > 1 then\n          for Dim in 1 .. Array_Dim - 1 loop\n+            if Convention (Array_Typ) = Convention_Fortran then\n+               Dim1 := Dim + 1;\n+            else\n+               Dim1 := Array_Dim - Dim;\n+            end if;\n+\n             Iterator := Make_Temporary (Loc, 'C');\n \n             --  Generate the dimension loops starting from the innermost one\n@@ -3761,16 +3782,23 @@ package body Exp_Ch5 is\n                             Prefix         => Relocate_Node (Array_Node),\n                             Attribute_Name => Name_Range,\n                             Expressions    => New_List (\n-                              Make_Integer_Literal (Loc, Array_Dim - Dim))),\n+                              Make_Integer_Literal (Loc, Dim1))),\n                     Reverse_Present              => Reverse_Present (I_Spec))),\n                 Statements       => New_List (Core_Loop),\n                 End_Label        => Empty);\n \n             --  Update the previously created object renaming declaration with\n-            --  the new iterator.\n+            --  the new iterator, by adding the index of the next loop to the\n+            --  indexed component, in the order that corresponds to the\n+            --  convention.\n \n-            Prepend_To (Expressions (Ind_Comp),\n-              New_Occurrence_Of (Iterator, Loc));\n+            if Convention (Array_Typ) = Convention_Fortran then\n+               Append_To (Expressions (Ind_Comp),\n+                 New_Occurrence_Of (Iterator, Loc));\n+            else\n+               Prepend_To (Expressions (Ind_Comp),\n+                 New_Occurrence_Of (Iterator, Loc));\n+            end if;\n          end loop;\n       end if;\n "}, {"sha": "bd32e8185499c60a86433a354420561e5aaddba9", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fe0167ebf2f98ffcc21498d042521d464ebd08/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=65fe0167ebf2f98ffcc21498d042521d464ebd08", "patch": "@@ -514,6 +514,7 @@ package body Impunit is\n       --  harmless (and useful) to make then available in Ada 2005 mode.\n \n     (\"a-cogeso\", T),  -- Ada.Containers.Generic_Sort\n+    (\"a-dhfina\", T),  -- Ada.Directories.Hierarchical_File_Names\n     (\"a-secain\", T),  -- Ada.Strings.Equal_Case_Insensitive\n     (\"a-shcain\", T),  -- Ada.Strings.Hash_Case_Insensitive\n     (\"a-slcain\", T),  -- Ada.Strings.Less_Case_Insensitive"}]}