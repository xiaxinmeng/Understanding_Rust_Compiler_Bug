{"sha": "a4901c083549b9173a1cb3e55741ef0dfc3a8472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5MDFjMDgzNTQ5YjkxNzNhMWNiM2U1NTc0MWVmMGRmYzNhODQ3Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:35:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T11:35:55Z"}, "message": "sem_ch6.adb (Is_Public_Subprogram_For): New procedure\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb (Is_Public_Subprogram_For): New procedure\n\t(Process_PPCs): Invariants only apply to public subprograms.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_util.ads, sem_attr.adb, restrict.adb,\n\trestrict.ads: Fix for No_Implicit_Aliasing in the renames case.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* a-finali.ads: Use pragma Pure_12 for this unit\n\t* aspects.adb: Add aspect Pure_12\n\t* aspects.ads: Add aspect Pure_12\n\t* opt.ads: Add note on Pure_12\n\t* par-prag.adb: Add dummy entry for Pure_12\n\t* sem_prag.adb: Implement Pure_12 pragma\n\t* snames.ads-tmpl: Add Entry for Pure_12\n\n2011-11-21  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* vms_data.ads: Add qualifiers for new gnatpp options\n\t'--call_threshold' and '--par_threshold\".\n\t* gnat_ugn.texi: Add description for new gnatpp options\n\t'--call_threshold' and '--par_threshold\".\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* lib.ads: Minor reformatting.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* lib-load.ads: Add comment.\n\nFrom-SVN: r181563", "tree": {"sha": "59878b2aee8b9ef9f117c9edec77057d4c951fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59878b2aee8b9ef9f117c9edec77057d4c951fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4901c083549b9173a1cb3e55741ef0dfc3a8472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4901c083549b9173a1cb3e55741ef0dfc3a8472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4901c083549b9173a1cb3e55741ef0dfc3a8472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4901c083549b9173a1cb3e55741ef0dfc3a8472/comments", "author": null, "committer": null, "parents": [{"sha": "4bf201ed2f9a1c163a02eae24a99440d2790e192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf201ed2f9a1c163a02eae24a99440d2790e192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf201ed2f9a1c163a02eae24a99440d2790e192"}], "stats": {"total": 302, "additions": 274, "deletions": 28}, "files": [{"sha": "a9c682b99728250fbf8a8444fccb0fa2d1aec61e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -1,3 +1,38 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb (Is_Public_Subprogram_For): New procedure\n+\t(Process_PPCs): Invariants only apply to public subprograms.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads, sem_attr.adb, restrict.adb,\n+\trestrict.ads: Fix for No_Implicit_Aliasing in the renames case.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-finali.ads: Use pragma Pure_12 for this unit\n+\t* aspects.adb: Add aspect Pure_12\n+\t* aspects.ads: Add aspect Pure_12\n+\t* opt.ads: Add note on Pure_12\n+\t* par-prag.adb: Add dummy entry for Pure_12\n+\t* sem_prag.adb: Implement Pure_12 pragma\n+\t* snames.ads-tmpl: Add Entry for Pure_12\n+\n+2011-11-21  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* vms_data.ads: Add qualifiers for new gnatpp options\n+\t'--call_threshold' and '--par_threshold\".\n+\t* gnat_ugn.texi: Add description for new gnatpp options\n+\t'--call_threshold' and '--par_threshold\".\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib.ads: Minor reformatting.\n+\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-load.ads: Add comment.\n+\n 2011-11-21  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_elab.adb: Minor reformatting"}, {"sha": "b53fd2a878468902fd6ee231c576c181c04e7d8c", "filename": "gcc/ada/a-finali.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fa-finali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fa-finali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-finali.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -34,14 +34,16 @@\n ------------------------------------------------------------------------------\n \n pragma Warnings (Off);\n---  System.Finalization_Root does not have category Remote_Types, but we\n---  allow it anyway.\n with System.Finalization_Root;\n pragma Warnings (On);\n \n package Ada.Finalization is\n+   pragma Pure_12;\n+   --  Ada.Finalization is declared pure in Ada 2012 (AI05-0212)\n+\n    pragma Preelaborate;\n    pragma Remote_Types;\n+   --  The above apply in versions of Ada before Ada 2012\n \n    type Controlled is abstract tagged private;\n    pragma Preelaborable_Initialization (Controlled);"}, {"sha": "d25ba15bde3e05f164c07be1a98e85b0297cce6a", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -255,6 +255,7 @@ package body Aspects is\n     Aspect_Preelaborate_05              => Aspect_Preelaborate_05,\n     Aspect_Pure                         => Aspect_Pure,\n     Aspect_Pure_05                      => Aspect_Pure_05,\n+    Aspect_Pure_12                      => Aspect_Pure_12,\n     Aspect_Remote_Call_Interface        => Aspect_Remote_Call_Interface,\n     Aspect_Remote_Types                 => Aspect_Remote_Types,\n     Aspect_Shared_Passive               => Aspect_Shared_Passive,"}, {"sha": "c1dbe72cd3fd70701b54436fcd05be9acca0501c", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -96,6 +96,7 @@ package Aspects is\n       Aspect_Preelaborate_05,               -- GNAT\n       Aspect_Pure,\n       Aspect_Pure_05,                       -- GNAT\n+      Aspect_Pure_12,                       -- GNAT\n       Aspect_Remote_Call_Interface,\n       Aspect_Remote_Types,\n       Aspect_Shared_Passive,\n@@ -154,6 +155,7 @@ package Aspects is\n                              Aspect_Compiler_Unit        => True,\n                              Aspect_Preelaborate_05      => True,\n                              Aspect_Pure_05              => True,\n+                             Aspect_Pure_12              => True,\n                              Aspect_Universal_Data       => True,\n                              Aspect_Ada_2005             => True,\n                              Aspect_Ada_2012             => True,\n@@ -324,6 +326,7 @@ package Aspects is\n      Aspect_Priority                     => Name_Priority,\n      Aspect_Pure                         => Name_Pure,\n      Aspect_Pure_05                      => Name_Pure_05,\n+     Aspect_Pure_12                      => Name_Pure_12,\n      Aspect_Pure_Function                => Name_Pure_Function,\n      Aspect_Read                         => Name_Read,\n      Aspect_Remote_Call_Interface        => Name_Remote_Call_Interface,"}, {"sha": "f9ad16fbc57aba5f27f4a697a37c89f1ee80081b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -13364,6 +13364,19 @@ and variants if there are @var{nnn} or more (the default\n value is 10).\n If @var{nnn} is 0, an additional indentation level is\n used for @b{case} alternatives and variants regardless of their number.\n+\n+@item ^--call_threshold=@var{nnn}^/MAX_ACT=@var{nnn}^\n+@cindex @option{^--call_threshold^/MAX_ACT^} (@command{gnatpp})\n+If the number of parameter associations is greater than @var{nnn} and if at\n+least one association uses named notation, start each association from\n+a new line. If @var{nnn} is 0, no check for the number of associations\n+is made, this is the default.\n+\n+@item ^--par_threshold=@var{nnn}^/MAX_PAR=@var{nnn}^\n+@cindex @option{^--par_threshold^/MAX_PAR^} (@command{gnatpp})\n+If the number of parameter specifications is greater than @var{nnn}\n+(or equal to @var{nnn} in case of a function), start each specification from\n+a new line. The default for @var{nnn} is 3.\n @end table\n \n @node Setting the Source Search Path"}, {"sha": "a029d3793b06721218e32469a83ca5b4420d2ec0", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,6 +155,7 @@ package Lib.Load is\n    --\n    --  PMES indicates the required setting of Parsing_Main_Extended_Unit during\n    --  loading of the unit. This flag is saved and restored over the call.\n+   --  Note: PMES is false for the subunit case, which seems wrong???\n \n    procedure Change_Main_Unit_To_Spec;\n    --  This procedure is called if the main unit file contains a No_Body pragma"}, {"sha": "2b3f90650cd21d0931493aa4485abda28c9ea09a", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -518,7 +518,7 @@ package Lib is\n    --  its subunits (considered recursively). Units for which this enquiry\n    --  returns True are those for which code will be generated. Nodes from\n    --  instantiations are included in the extended main unit for this call.\n-   --  If the main unit is itself a subunit, then the extended main unit\n+   --  If the main unit is itself a subunit, then the extended main code unit\n    --  includes its parent unit, and the parent unit spec if it is separate.\n \n    function In_Extended_Main_Code_Unit (Loc : Source_Ptr) return Boolean;\n@@ -533,7 +533,7 @@ package Lib is\n    --  returns True are those for which code will be generated. This differs\n    --  from In_Extended_Main_Code_Unit only in that instantiations are not\n    --  included for the purposes of this call. If the main unit is itself\n-   --  a subunit, then the extended main unit includes its parent unit,\n+   --  a subunit, then the extended main source unit includes its parent unit,\n    --  and the parent unit spec if it is separate.\n \n    function In_Extended_Main_Source_Unit (Loc : Source_Ptr) return Boolean;"}, {"sha": "def16bb30f7803154d51316c78d9928e2155f21a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -140,7 +140,7 @@ package Opt is\n    --  or internal units, so it reflects the Ada version explicitly set\n    --  using configuration pragmas or compiler switches (or if neither\n    --  appears, it remains set to Ada_Version_Default). This is used in\n-   --  the rare cases (notably for pragmas Preelaborate_05 and Pure_05)\n+   --  the rare cases (notably for pragmas Preelaborate_05 and Pure_05/12)\n    --  where in the run-time we want the explicit version set.\n \n    Ada_Version_Runtime : Ada_Version_Type := Ada_2012;"}, {"sha": "1a126759f6bb4ef9721abc1b0c02e8cd8e149e3e", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -1216,6 +1216,7 @@ begin\n            Pragma_Psect_Object                   |\n            Pragma_Pure                           |\n            Pragma_Pure_05                        |\n+           Pragma_Pure_12                        |\n            Pragma_Pure_Function                  |\n            Pragma_Queuing_Policy                 |\n            Pragma_Relative_Deadline              |"}, {"sha": "399547c61dbff480b2c3387beda27e1319eba9b3", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -183,6 +183,78 @@ package body Restrict is\n       end if;\n    end Check_SPARK_Restriction;\n \n+   --------------------------------\n+   -- Check_No_Implicit_Aliasing --\n+   --------------------------------\n+\n+   procedure Check_No_Implicit_Aliasing (Obj : Node_Id) is\n+      E : Entity_Id;\n+\n+   begin\n+      --  If restriction not active, nothing to check\n+\n+      if not Restriction_Active (No_Implicit_Aliasing) then\n+         return;\n+      end if;\n+\n+      --  If we have an entity name, check entity\n+\n+      if Is_Entity_Name (Obj) then\n+         E := Entity (Obj);\n+\n+         --  Restriction applies to entities that are objects\n+\n+         if Is_Object (E) then\n+            if Is_Aliased (E) then\n+               return;\n+\n+            elsif Present (Renamed_Object (E)) then\n+               Check_No_Implicit_Aliasing (Renamed_Object (E));\n+               return;\n+            end if;\n+\n+         --  If we don't have an object, then it's OK\n+\n+         else\n+            return;\n+         end if;\n+\n+      --  For selected component, check selector\n+\n+      elsif Nkind (Obj) = N_Selected_Component then\n+         Check_No_Implicit_Aliasing (Selector_Name (Obj));\n+         return;\n+\n+      --  Indexed component is OK if aliased components\n+\n+      elsif Nkind (Obj) = N_Indexed_Component then\n+         if Has_Aliased_Components (Etype (Prefix (Obj)))\n+           or else\n+             (Is_Access_Type (Etype (Prefix (Obj)))\n+               and then Has_Aliased_Components\n+                          (Designated_Type (Etype (Prefix (Obj)))))\n+         then\n+            return;\n+         end if;\n+\n+      --  For type conversion, check converted expression\n+\n+      elsif Nkind_In (Obj, N_Unchecked_Type_Conversion, N_Type_Conversion) then\n+         Check_No_Implicit_Aliasing (Expression (Obj));\n+         return;\n+\n+      --  Explicit dereference is always OK\n+\n+      elsif Nkind (Obj) = N_Explicit_Dereference then\n+         return;\n+      end if;\n+\n+      --  If we fall through, then we have an aliased view that does not meet\n+      --  the rules for being explicitly aliased, so issue restriction msg.\n+\n+      Check_Restriction (No_Implicit_Aliasing, Obj);\n+   end Check_No_Implicit_Aliasing;\n+\n    -----------------------------------------\n    -- Check_Implicit_Dynamic_Code_Allowed --\n    -----------------------------------------"}, {"sha": "681a2c1d7d910f358e6ffe57c092eaf49b38d1da", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -279,6 +279,13 @@ package Restrict is\n    --  Same as Check_SPARK_Restriction except there is a continuation message\n    --  Msg2 following the initial message Msg1.\n \n+   procedure Check_No_Implicit_Aliasing (Obj : Node_Id);\n+   --  Obj is a node for which Is_Aliased_View is True, which is being used in\n+   --  a context (e.g. 'Access) where no implicit aliasing is allowed if the\n+   --  restriction No_Implicit_Aliasing is set. This procedure checks for the\n+   --  case where the restriction is active and Obj does not meet the required\n+   --  rules for avoiding implicit aliases, and issues a restriction message.\n+\n    procedure Check_Implicit_Dynamic_Code_Allowed (N : Node_Id);\n    --  Tests to see if dynamic code generation (dynamically generated\n    --  trampolines, in particular) is allowed by the current restrictions"}, {"sha": "393a5e1298866a7fe536116d44d52ba112c805c5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -841,13 +841,8 @@ package body Sem_Attr is\n            and then not In_Instance\n            and then not In_Inlined_Body\n          then\n-            if Restriction_Check_Required (No_Implicit_Aliasing) then\n-               Error_Attr_P\n-                 (\"prefix of % attribute must be explicitly aliased\");\n-            else\n-               Error_Attr_P\n-                 (\"prefix of % attribute must be aliased\");\n-            end if;\n+            Error_Attr_P (\"prefix of % attribute must be aliased\");\n+            Check_No_Implicit_Aliasing (P);\n          end if;\n       end Analyze_Access_Attribute;\n \n@@ -2245,6 +2240,8 @@ package body Sem_Attr is\n                   if Restriction_Check_Required (No_Implicit_Aliasing) then\n                      if not Is_Aliased_View (P) then\n                         Check_Restriction (No_Implicit_Aliasing, P);\n+                     else\n+                        Check_No_Implicit_Aliasing (P);\n                      end if;\n                   end if;\n "}, {"sha": "56c107484030bfca84744c7061697882a521c1c2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -8536,19 +8536,19 @@ package body Sem_Ch6 is\n            and then In_Private_Part (Current_Scope)\n          then\n             Priv_Decls :=\n-              Private_Declarations (\n-                Specification (Unit_Declaration_Node (Current_Scope)));\n+              Private_Declarations\n+                (Specification (Unit_Declaration_Node (Current_Scope)));\n \n             return In_Package_Body (Current_Scope)\n               or else\n                 (Is_List_Member (Decl)\n-                   and then List_Containing (Decl) = Priv_Decls)\n+                  and then List_Containing (Decl) = Priv_Decls)\n               or else (Nkind (Parent (Decl)) = N_Package_Specification\n-                         and then not\n-                           Is_Compilation_Unit\n-                             (Defining_Entity (Parent (Decl)))\n-                         and then List_Containing (Parent (Parent (Decl)))\n-                                    = Priv_Decls);\n+                        and then not\n+                          Is_Compilation_Unit\n+                            (Defining_Entity (Parent (Decl)))\n+                        and then List_Containing (Parent (Parent (Decl))) =\n+                                                                Priv_Decls);\n          else\n             return False;\n          end if;\n@@ -9562,6 +9562,15 @@ package body Sem_Ch6 is\n       --  or IN OUT parameters of the subprogram, or (for a function) if the\n       --  return value has an invariant.\n \n+      function Is_Public_Subprogram_For (T : Entity_Id) return Boolean;\n+      --  T is the entity for a private type for which invariants are defined.\n+      --  This function returns True if the procedure corresponding to the\n+      --  value of Designator is a public procedure from the point of view of\n+      --  this type (i.e. its spec is in the visible part of the package that\n+      --  contains the declaration of the private type). A True value means\n+      --  that an invariant check is required (for an IN OUT parameter, or\n+      --  the returned value of a function.\n+\n       --------------\n       -- Grab_PPC --\n       --------------\n@@ -9689,6 +9698,45 @@ package body Sem_Ch6 is\n          return False;\n       end Invariants_Or_Predicates_Present;\n \n+      ------------------------------\n+      -- Is_Public_Subprogram_For --\n+      ------------------------------\n+\n+      --  The type T is a private type, its declaration is therefore in\n+      --  the list of public declarations of some package. The test for a\n+      --  public subprogram is that its declaration is in this same list\n+      --  of declarations for the same package (note that all the public\n+      --  declarations are in one list, and all the private declarations\n+      --  in another, so this deals with the public/private distinction).\n+\n+      function Is_Public_Subprogram_For (T : Entity_Id) return Boolean is\n+         DD : constant Node_Id := Unit_Declaration_Node (Designator);\n+         --  The subprogram declaration for the subprogram in question\n+\n+         TL : constant List_Id :=\n+                Visible_Declarations\n+                  (Specification (Unit_Declaration_Node (Scope (T))));\n+         --  The list of declarations containing the private declaration of\n+         --  the type. We know it is a private type, so we know its scope is\n+         --  the package in question, and we know it must be in the visible\n+         --  declarations of this package.\n+\n+      begin\n+         --  If the subprogram declaration is not a list member, it must be\n+         --  an Init_Proc, in which case we want to consider it to be a\n+         --  public subprogram, since we do get initializations to deal with.\n+\n+         if not Is_List_Member (DD) then\n+            return True;\n+\n+         --  Otherwise we test whether the subprogram is declared in the\n+         --  visible declarations of the package containing the type.\n+\n+         else\n+            return TL = List_Containing (DD);\n+         end if;\n+      end Is_Public_Subprogram_For;\n+\n    --  Start of processing for Process_PPCs\n \n    begin\n@@ -9985,10 +10033,13 @@ package body Sem_Ch6 is\n                      Parameter_Type      => New_Occurrence_Of (Ftyp, Loc),\n                      Defining_Identifier => Rent));\n \n-               --  Add invariant call if returning type with invariants\n+               --  Add invariant call if returning type with invariants and\n+               --  this is a public function, i.e. a function declared in the\n+               --  visible part of the package defining the private type.\n \n                if Has_Invariants (Etype (Rent))\n                  and then Present (Invariant_Procedure (Etype (Rent)))\n+                 and then Is_Public_Subprogram_For (Etype (Rent))\n                then\n                   Append_To (Plist,\n                     Make_Invariant_Call (New_Occurrence_Of (Rent, Loc)));\n@@ -10017,6 +10068,7 @@ package body Sem_Ch6 is\n \n                   if Has_Invariants (Ftype)\n                     and then Present (Invariant_Procedure (Ftype))\n+                    and then Is_Public_Subprogram_For (Ftype)\n                   then\n                      Append_To (Plist,\n                        Make_Invariant_Call"}, {"sha": "148c6dee6593b539943930b5cb8903cde7e31ce4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -12647,6 +12647,47 @@ package body Sem_Prag is\n             end if;\n          end Pure_05;\n \n+         -------------\n+         -- Pure_12 --\n+         -------------\n+\n+         --  pragma Pure_12 [(library_unit_NAME)];\n+\n+         --  This pragma is useable only in GNAT_Mode, where it is used like\n+         --  pragma Pure but it is only effective in Ada 2012 mode (otherwise\n+         --  it is ignored). It may be used after a pragma Preelaborate, in\n+         --  which case it overrides the effect of the pragma Preelaborate.\n+         --  This is used to implement AI05-0212 which recategorizes some\n+         --  run-time packages in Ada 2012 mode.\n+\n+         when Pragma_Pure_12 => Pure_12 : declare\n+            Ent : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Valid_Library_Unit_Pragma;\n+\n+            if not GNAT_Mode then\n+               Error_Pragma (\"pragma% only available in GNAT mode\");\n+            end if;\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n+            --  This is one of the few cases where we need to test the value of\n+            --  Ada_Version_Explicit rather than Ada_Version (which is always\n+            --  set to Ada_2012 in a predefined unit), we need to know the\n+            --  explicit version set to know if this pragma is active.\n+\n+            if Ada_Version_Explicit >= Ada_2012 then\n+               Ent := Find_Lib_Unit_Name;\n+               Set_Is_Preelaborated (Ent, False);\n+               Set_Is_Pure (Ent);\n+               Set_Suppress_Elaboration_Warnings (Ent);\n+            end if;\n+         end Pure_12;\n+\n          -------------------\n          -- Pure_Function --\n          -------------------\n@@ -14959,6 +15000,7 @@ package body Sem_Prag is\n       Pragma_Psect_Object                   => -1,\n       Pragma_Pure                           => -1,\n       Pragma_Pure_05                        => -1,\n+      Pragma_Pure_12                        => -1,\n       Pragma_Pure_Function                  => -1,\n       Pragma_Queuing_Policy                 => -1,\n       Pragma_Ravenscar                      => -1,"}, {"sha": "e1c2b1afe0725316cc65cce13f0e5a63f6fe8fa4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -6583,10 +6583,6 @@ package body Sem_Util is\n       if Is_Entity_Name (Obj) then\n          E := Entity (Obj);\n \n-         if Is_Object (E) and then not Is_Aliased (E) then\n-            Check_Restriction (No_Implicit_Aliasing, Obj);\n-         end if;\n-\n          return\n            (Is_Object (E)\n              and then"}, {"sha": "0d7253b6e295ddd0e7aa13b316400fb7eb83a99c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -775,8 +775,12 @@ package Sem_Util is\n \n    function Is_Aliased_View (Obj : Node_Id) return Boolean;\n    --  Determine if Obj is an aliased view, i.e. the name of an object to which\n-   --  'Access or 'Unchecked_Access can apply. Note that the implementation\n-   --  takes the No_Implicit_Aiasing restriction into account.\n+   --  'Access or 'Unchecked_Access can apply. Note that this routine uses the\n+   --  rules of the language, it does not take into account the restriction\n+   --  No_Implicit_Aliasing, so it can return True if the restriction is active\n+   --  and Obj violates the restriction. The caller is responsible for calling\n+   --  Restrict.Check_No_Implicit_Aliasing if True is returned, but there is a\n+   --  requirement for obeying the restriction in the call context.\n \n    function Is_Ancestor_Package\n      (E1 : Entity_Id;"}, {"sha": "d15892a5f023e50f90cf720f55142b557cdf7c04", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -524,6 +524,7 @@ package Snames is\n    Name_Psect_Object                   : constant Name_Id := N + $; -- VMS\n    Name_Pure                           : constant Name_Id := N + $;\n    Name_Pure_05                        : constant Name_Id := N + $; -- GNAT\n+   Name_Pure_12                        : constant Name_Id := N + $; -- GNAT\n    Name_Pure_Function                  : constant Name_Id := N + $; -- GNAT\n    Name_Relative_Deadline              : constant Name_Id := N + $; -- Ada 05\n    Name_Remote_Call_Interface          : constant Name_Id := N + $;\n@@ -1672,6 +1673,7 @@ package Snames is\n       Pragma_Psect_Object,\n       Pragma_Pure,\n       Pragma_Pure_05,\n+      Pragma_Pure_12,\n       Pragma_Pure_Function,\n       Pragma_Relative_Deadline,\n       Pragma_Remote_Call_Interface,"}, {"sha": "5aecd239c4b9caf0e6c49440ba5ccc518db275cd", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4901c083549b9173a1cb3e55741ef0dfc3a8472/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=a4901c083549b9173a1cb3e55741ef0dfc3a8472", "patch": "@@ -6200,6 +6200,14 @@ package VMS_Data is\n    --\n    --   Set the maximum line length, nnn from 32 ..256. The default is 79.\n \n+   S_Pretty_Maxact    : aliased constant S := \"/MAX_ACT=#\"                 &\n+                                                 \"--call_threshold=#\";\n+   --        /MAX_ACT=nnn\n+   --\n+   --  If the number of parameter associations is greater than nnn and if at\n+   --  least one association uses named notation, start each association from\n+   --  a new line\n+\n    S_Pretty_Maxind    : aliased constant S := \"/MAX_INDENT=#\"              &\n                                                  \"-T#\";\n    --        /MAX_INDENT=nnn\n@@ -6209,6 +6217,14 @@ package VMS_Data is\n    --   If nnn is zero, an additional indentation level is used for any\n    --   number of case alternatives and variants.\n \n+   S_Pretty_Maxpar    : aliased constant S := \"/MAX_PAR=#\"                 &\n+                                                 \"--par_threshold=#\";\n+   --        /MAX_PAR=nnn\n+   --\n+   --  If the number of parameter specifications is greater than nnn (or equal\n+   --  to nnn in case of a function), start each specification from a new line.\n+   --  The default value is 3.\n+\n    S_Pretty_Mess      : aliased constant S := \"/MESSAGES_PROJECT_FILE=\"    &\n                                             \"DEFAULT \"                     &\n                                                \"-vP0 \"                     &\n@@ -6401,7 +6417,9 @@ package VMS_Data is\n                         S_Pretty_Indent           'Access,\n                         S_Pretty_Keyword          'Access,\n                         S_Pretty_Maxlen           'Access,\n+                        S_Pretty_Maxact           'Access,\n                         S_Pretty_Maxind           'Access,\n+                        S_Pretty_Maxpar           'Access,\n                         S_Pretty_Mess             'Access,\n                         S_Pretty_Names            'Access,\n                         S_Pretty_No_Labels        'Access,"}]}