{"sha": "b81e7144aa0c032c6246e0962467b4284cacd234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxZTcxNDRhYTBjMDMyYzYyNDZlMDk2MjQ2N2I0Mjg0Y2FjZDIzNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-11-11T04:05:14Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-11-11T04:05:14Z"}, "message": "builtins.c (fold_builtin_cos): Use fold_strip_sign_ops().\n\n\t* builtins.c (fold_builtin_cos): Use fold_strip_sign_ops().\n\t(fold_builtin_hypot): Likewise.\n\t* fold-const.c (fold_strip_sign_ops): Handle \"odd\" builtins.\n\t\ntestsuite:\n\t* gcc.dg/builtins-20.c: Add more cases for stripping sign ops.\n\nFrom-SVN: r118683", "tree": {"sha": "d6296e3b6e9ca4e372d936e1dd953fec297ffde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6296e3b6e9ca4e372d936e1dd953fec297ffde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81e7144aa0c032c6246e0962467b4284cacd234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81e7144aa0c032c6246e0962467b4284cacd234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81e7144aa0c032c6246e0962467b4284cacd234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81e7144aa0c032c6246e0962467b4284cacd234/comments", "author": null, "committer": null, "parents": [{"sha": "345768ef3f0ad0f2b09cbd79ec4daf6ba48f51b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345768ef3f0ad0f2b09cbd79ec4daf6ba48f51b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345768ef3f0ad0f2b09cbd79ec4daf6ba48f51b7"}], "stats": {"total": 129, "additions": 110, "deletions": 19}, "files": [{"sha": "df5448b2fd76d4f3a73fee6be28b4ec412820f58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b81e7144aa0c032c6246e0962467b4284cacd234", "patch": "@@ -1,5 +1,9 @@\n 2006-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (fold_builtin_cos): Use fold_strip_sign_ops().\n+\t(fold_builtin_hypot): Likewise.\n+\t* fold-const.c (fold_strip_sign_ops): Handle \"odd\" builtins.\n+\n \t* fold-const.c (negate_mathfn_p): Add BUILT_IN_ERF.\n \n 2006-11-10  Roger Sayle  <roger@eyesopen.com>"}, {"sha": "f1fa123657c7666a8f5f647fa5f44ef0534a4c3c", "filename": "gcc/builtins.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b81e7144aa0c032c6246e0962467b4284cacd234", "patch": "@@ -7242,7 +7242,7 @@ static tree\n fold_builtin_cos (tree arglist, tree type, tree fndecl)\n {\n   tree arg = TREE_VALUE (arglist);\n-  tree res;\n+  tree res, narg;\n \n   if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n     return NULL_TREE;\n@@ -7252,12 +7252,9 @@ fold_builtin_cos (tree arglist, tree type, tree fndecl)\n     return res;\n   \n   /* Optimize cos(-x) into cos (x).  */\n-  if (TREE_CODE (arg) == NEGATE_EXPR)\n-    {\n-      tree args = build_tree_list (NULL_TREE,\n-\t\t\t\t   TREE_OPERAND (arg, 0));\n-      return build_function_call_expr (fndecl, args);\n-    }\n+  if ((narg = fold_strip_sign_ops (arg)))\n+    return build_function_call_expr (fndecl, \n+\t\t\t\t     build_tree_list (NULL_TREE, narg));\n \n   return NULL_TREE;\n }\n@@ -7765,7 +7762,7 @@ fold_builtin_hypot (tree fndecl, tree arglist, tree type)\n {\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  tree res;\n+  tree res, narg0, narg1;\n \n   if (!validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n     return NULL_TREE;\n@@ -7776,17 +7773,13 @@ fold_builtin_hypot (tree fndecl, tree arglist, tree type)\n   \n   /* If either argument to hypot has a negate or abs, strip that off.\n      E.g. hypot(-x,fabs(y)) -> hypot(x,y).  */\n-  if (TREE_CODE (arg0) == NEGATE_EXPR || TREE_CODE (arg1) == NEGATE_EXPR\n-      || TREE_CODE (arg0) == ABS_EXPR || TREE_CODE (arg1) == ABS_EXPR)\n-    {\n-      tree narg0 = (TREE_CODE (arg0) == NEGATE_EXPR\n-\t\t    || TREE_CODE (arg0) == ABS_EXPR)\n-\t? TREE_OPERAND (arg0, 0) : arg0;\n-      tree narg1 = (TREE_CODE (arg1) == NEGATE_EXPR\n-\t\t    || TREE_CODE (arg1) == ABS_EXPR)\n-\t? TREE_OPERAND (arg1, 0) : arg1;\n-      tree narglist = tree_cons (NULL_TREE, narg0,\n-\t\t\t\t build_tree_list (NULL_TREE, narg1));\n+  narg0 = fold_strip_sign_ops (arg0);\n+  narg1 = fold_strip_sign_ops (arg1);\n+  if (narg0 || narg1)\n+    {\n+      tree narglist = tree_cons (NULL_TREE, narg0 ? narg0 : arg0,\n+\t\t\t\t build_tree_list (NULL_TREE,\n+\t\t\t\t\t\t  narg1 ? narg1 : arg1));\n       return build_function_call_expr (fndecl, narglist);\n     }\n   "}, {"sha": "7c769d5c42e45971e40a14a2b3bc34047a7cc322", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b81e7144aa0c032c6246e0962467b4284cacd234", "patch": "@@ -13296,6 +13296,17 @@ fold_strip_sign_ops (tree exp)\n \t\t\t    arg1 ? arg1 : TREE_OPERAND (exp, 1));\n       break;\n \n+    case CALL_EXPR:\n+      /* Strip sign ops from the argument of \"odd\" math functions.  */\n+      if (negate_mathfn_p (builtin_mathfn_code (exp)))\n+        {\n+\t  arg0 = fold_strip_sign_ops (TREE_VALUE (TREE_OPERAND (exp, 1)));\n+\t  if (arg0)\n+\t    return build_function_call_expr (get_callee_fndecl (exp),\n+\t\t\t\t\t     build_tree_list (NULL_TREE, arg0));\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "b928b3667fa8664f8264e9b33bcc088c1a0ac365", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b81e7144aa0c032c6246e0962467b4284cacd234", "patch": "@@ -1,5 +1,7 @@\n 2006-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.dg/builtins-20.c: Add more cases for stripping sign ops.\n+\n \t* gcc.dg/torture/builtin-symmetric-1.c: New test.\n \n 2006-11-10 Paul Thomas <pault@gcc.gnu.org>"}, {"sha": "e9f27a0014bf3f224e79be0927b47eba37c74722", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81e7144aa0c032c6246e0962467b4284cacd234/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=b81e7144aa0c032c6246e0962467b4284cacd234", "patch": "@@ -38,6 +38,15 @@ void test1(double x)\n   if (cos(x) != cos(-x))\n     link_error ();\n \n+  if (cos(x) != cos(fabs(x)))\n+    link_error ();\n+\n+  if (cos(x) != cos(-fabs(x)))\n+    link_error ();\n+\n+  if (cos(tan(x)) != cos(tan(-fabs(x))))\n+    link_error ();\n+\n   if (sin(x)/cos(x) != tan(x))\n     link_error ();\n \n@@ -65,6 +74,21 @@ void test2(double x, double y)\n   if (-sin(x-y) != sin(y-x))\n     link_error ();\n \n+  if (cos(-x*y) != cos(x*y))\n+    link_error ();\n+\n+  if (cos(x*-y) != cos(x*y))\n+    link_error ();\n+\n+  if (cos(-x/y) != cos(x/y))\n+    link_error ();\n+\n+  if (cos(x/-y) != cos(x/y))\n+    link_error ();\n+\n+  if (cos(-fabs(tan(x/-y))) != cos(tan(x/y)))\n+    link_error ();\n+\n   if (hypot (x, 0) != fabs(x))\n     link_error ();\n \n@@ -103,13 +127,25 @@ void test2(double x, double y)\n \n   if (hypot (pure(x), -pure(x)) != fabs(pure(x)) * __builtin_sqrt(2))\n     link_error ();\n+\n+  if (hypot (tan(-x), tan(-fabs(y))) != hypot (tan(x), tan(y)))\n+    link_error ();\n }\n \n void test1f(float x)\n {\n   if (cosf(x) != cosf(-x))\n     link_error ();\n \n+  if (cosf(x) != cosf(fabsf(x)))\n+    link_error ();\n+\n+  if (cosf(x) != cosf(-fabsf(x)))\n+    link_error ();\n+\n+  if (cosf(tanf(x)) != cosf(tanf(-fabsf(x))))\n+    link_error ();\n+\n #ifdef HAVE_C99_RUNTIME\n   if (sinf(x)/cosf(x) != tanf(x))\n     link_error ();\n@@ -139,6 +175,21 @@ void test2f(float x, float y)\n   if (-sinf(x-y) != sinf(y-x))\n     link_error ();\n \n+  if (cosf(-x*y) != cosf(x*y))\n+    link_error ();\n+\n+  if (cosf(x*-y) != cosf(x*y))\n+    link_error ();\n+\n+  if (cosf(-x/y) != cosf(x/y))\n+    link_error ();\n+\n+  if (cosf(x/-y) != cosf(x/y))\n+    link_error ();\n+\n+  if (cosf(-fabsf(tanf(x/-y))) != cosf(tanf(x/y)))\n+    link_error ();\n+\n   if (hypotf (x, 0) != fabsf(x))\n     link_error ();\n \n@@ -177,6 +228,9 @@ void test2f(float x, float y)\n \n   if (hypotf (puref(x), -puref(x)) != fabsf(puref(x)) * __builtin_sqrtf(2))\n     link_error ();\n+\n+  if (hypotf (tanf(-x), tanf(-fabsf(y))) != hypotf (tanf(x), tanf(y)))\n+    link_error ();\n }\n \n \n@@ -185,6 +239,15 @@ void test1l(long double x)\n   if (cosl(x) != cosl(-x))\n     link_error ();\n \n+  if (cosl(x) != cosl(fabsl(x)))\n+    link_error ();\n+\n+  if (cosl(x) != cosl(-fabsl(x)))\n+    link_error ();\n+\n+  if (cosl(tanl(x)) != cosl(tanl(-fabsl(x))))\n+    link_error ();\n+\n #ifdef HAVE_C99_RUNTIME\n   if (sinl(x)/cosl(x) != tanl(x))\n     link_error ();\n@@ -214,6 +277,21 @@ void test2l(long double x, long double y)\n   if (-sinl(x-y) != sinl(y-x))\n     link_error ();\n \n+  if (cosl(-x*y) != cosl(x*y))\n+    link_error ();\n+\n+  if (cosl(x*-y) != cosl(x*y))\n+    link_error ();\n+\n+  if (cosl(-x/y) != cosl(x/y))\n+    link_error ();\n+\n+  if (cosl(x/-y) != cosl(x/y))\n+    link_error ();\n+\n+  if (cosl(-fabsl(tanl(x/-y))) != cosl(tanl(x/y)))\n+    link_error ();\n+\n   if (hypotl (x, 0) != fabsl(x))\n     link_error ();\n \n@@ -252,6 +330,9 @@ void test2l(long double x, long double y)\n \n   if (hypotl (purel(x), -purel(x)) != fabsl(purel(x)) * __builtin_sqrtl(2))\n     link_error ();\n+\n+  if (hypotl (tanl(-x), tanl(-fabsl(y))) != hypotl (tanl(x), tanl(y)))\n+    link_error ();\n }\n \n int main()"}]}