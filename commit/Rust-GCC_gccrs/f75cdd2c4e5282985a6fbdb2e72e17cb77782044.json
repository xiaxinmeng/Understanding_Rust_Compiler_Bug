{"sha": "f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1Y2RkMmM0ZTUyODI5ODVhNmZiZGIyZTcyZTE3Y2I3Nzc4MjA0NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T10:50:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T10:50:42Z"}, "message": "[AArch64] Add \"FULL\" to SVE mode iterator names\n\nAn upcoming patch will make more use of partial/unpacked SVE vectors.\nWe then need a distinction between mode iterators that include partial\nmodes and those that only include \"full\" modes.  This patch prepares\nfor that by adding \"FULL\" to the names of iterators that only select\nfull modes.  There should be no change in behaviour.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_ALL): Rename to...\n\t(SVE_FULL): ...this.\n\t(SVE_I): Rename to...\n\t(SVE_FULL_I): ...this.\n\t(SVE_F): Rename to...\n\t(SVE_FULL_F): ...this.\n\t(SVE_BHSI): Rename to...\n\t(SVE_FULL_BHSI): ...this.\n\t(SVE_HSD): Rename to...\n\t(SVE_FULL_HSD): ...this.\n\t(SVE_HSDI): Rename to...\n\t(SVE_FULL_HSDI): ...this.\n\t(SVE_HSF): Rename to...\n\t(SVE_FULL_HSF): ...this.\n\t(SVE_SD): Rename to...\n\t(SVE_FULL_SD): ...this.\n\t(SVE_SDI): Rename to...\n\t(SVE_FULL_SDI): ...this.\n\t(SVE_SDF): Rename to...\n\t(SVE_FULL_SDF): ...this.\n\t(SVE_S): Rename to...\n\t(SVE_FULL_S): ...this.\n\t(SVE_D): Rename to...\n\t(SVE_FULL_D): ...this.\n\t* config/aarch64/aarch64-sve.md: Apply the above renaming throughout.\n\t* config/aarch64/aarch64-sve2.md: Likewise.\n\nFrom-SVN: r278338", "tree": {"sha": "cd025988f2f4b1abe90299b45da48f409bfe18bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd025988f2f4b1abe90299b45da48f409bfe18bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb23241ba81aace0c881ccee4643632809741953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb23241ba81aace0c881ccee4643632809741953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb23241ba81aace0c881ccee4643632809741953"}], "stats": {"total": 2467, "additions": 1272, "deletions": 1195}, "files": [{"sha": "fbf188089cf0df049691cfb08ea7529f8cae03a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "patch": "@@ -1,3 +1,32 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_ALL): Rename to...\n+\t(SVE_FULL): ...this.\n+\t(SVE_I): Rename to...\n+\t(SVE_FULL_I): ...this.\n+\t(SVE_F): Rename to...\n+\t(SVE_FULL_F): ...this.\n+\t(SVE_BHSI): Rename to...\n+\t(SVE_FULL_BHSI): ...this.\n+\t(SVE_HSD): Rename to...\n+\t(SVE_FULL_HSD): ...this.\n+\t(SVE_HSDI): Rename to...\n+\t(SVE_FULL_HSDI): ...this.\n+\t(SVE_HSF): Rename to...\n+\t(SVE_FULL_HSF): ...this.\n+\t(SVE_SD): Rename to...\n+\t(SVE_FULL_SD): ...this.\n+\t(SVE_SDI): Rename to...\n+\t(SVE_FULL_SDI): ...this.\n+\t(SVE_SDF): Rename to...\n+\t(SVE_FULL_SDF): ...this.\n+\t(SVE_S): Rename to...\n+\t(SVE_FULL_S): ...this.\n+\t(SVE_D): Rename to...\n+\t(SVE_FULL_D): ...this.\n+\t* config/aarch64/aarch64-sve.md: Apply the above renaming throughout.\n+\t* config/aarch64/aarch64-sve2.md: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.opt (--param=aarch64-sve-compare-costs):"}, {"sha": "88eaaa37c03b506c54ae16c0b62541af9be73977", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 1108, "deletions": 1069, "changes": 2177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=f75cdd2c4e5282985a6fbdb2e72e17cb77782044"}, {"sha": "15142d1d775038522a653817d23e354044207112", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 105, "deletions": 100, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "patch": "@@ -20,12 +20,13 @@\n \n ;; Integer average (floor).\n (define_expand \"<u>avg<mode>3_floor\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_dup 3)\n-\t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n-\t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n-\t\t\t HADD)]\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t      (match_operand:SVE_FULL_I 2 \"register_operand\")]\n+\t     HADD)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   {\n@@ -35,12 +36,13 @@\n \n ;; Integer average (rounding).\n (define_expand \"<u>avg<mode>3_ceil\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_dup 3)\n-\t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n-\t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n-\t\t\t RHADD)]\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t      (match_operand:SVE_FULL_I 2 \"register_operand\")]\n+\t     RHADD)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   {\n@@ -50,12 +52,13 @@\n \n ;; Predicated halving addsub.\n (define_insn \"*<sur>h<addsub><mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (unspec:SVE_I [(match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n-\t\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\")]\n-\t\t\t HADDSUB)]\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w\")\n+\t      (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t     HADDSUB)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   \"@\n@@ -67,17 +70,18 @@\n ;; Multiply long top / bottom.\n (define_insn \"<su>mull<bt><Vwide>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VWIDE> [(match_operand:SVE_BHSI 1 \"register_operand\" \"w\")\n-\t\t\t (match_operand:SVE_BHSI 2 \"register_operand\" \"w\")]\n-\t\t\tMULLBT))]\n+\t(unspec:<VWIDE>\n+\t  [(match_operand:SVE_FULL_BHSI 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_BHSI 2 \"register_operand\" \"w\")]\n+\t  MULLBT))]\n   \"TARGET_SVE2\"\n   \"<su>mull<bt>\\t%0.<Vewtype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n ;; (Rounding) Right shift narrow bottom.\n (define_insn \"<r>shrnb<mode>\"\n-  [(set (match_operand:SVE_BHSI 0 \"register_operand\" \"=w\")\n-        (unspec:SVE_BHSI\n+  [(set (match_operand:SVE_FULL_BHSI 0 \"register_operand\" \"=w\")\n+        (unspec:SVE_FULL_BHSI\n \t  [(match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n \t   (match_operand 2 \"aarch64_simd_shift_imm_offset_<Vel>\" \"\")]\n \t  SHRNB))]\n@@ -87,9 +91,9 @@\n \n ;; (Rounding) Right shift narrow top.\n (define_insn \"<r>shrnt<mode>\"\n-  [(set (match_operand:SVE_BHSI 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_BHSI\n-\t  [(match_operand:SVE_BHSI 1 \"register_operand\" \"0\")\n+  [(set (match_operand:SVE_FULL_BHSI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_BHSI\n+\t  [(match_operand:SVE_FULL_BHSI 1 \"register_operand\" \"0\")\n \t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")\n \t   (match_operand 3 \"aarch64_simd_shift_imm_offset_<Vel>\" \"i\")]\n \t  SHRNT))]\n@@ -99,12 +103,13 @@\n \n ;; Unpredicated integer multiply-high-with-(round-and-)scale.\n (define_expand \"<su>mulh<r>s<mode>3\"\n-  [(set (match_operand:SVE_BHSI 0 \"register_operand\")\n-\t(unspec:SVE_BHSI\n+  [(set (match_operand:SVE_FULL_BHSI 0 \"register_operand\")\n+\t(unspec:SVE_FULL_BHSI\n \t  [(match_dup 3)\n-\t   (unspec:SVE_BHSI [(match_operand:SVE_BHSI 1 \"register_operand\")\n-\t\t\t     (match_operand:SVE_BHSI 2 \"register_operand\")]\n-\t\t\t    MULHRS)]\n+\t   (unspec:SVE_FULL_BHSI\n+\t     [(match_operand:SVE_FULL_BHSI 1 \"register_operand\")\n+\t      (match_operand:SVE_FULL_BHSI 2 \"register_operand\")]\n+\t     MULHRS)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   {\n@@ -125,15 +130,15 @@\n \n ;; Unpredicated signed / unsigned shift-right accumulate.\n (define_insn_and_rewrite \"*aarch64_sve2_sra<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n-\t(plus:SVE_I\n-\t  (unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n+\t(plus:SVE_FULL_I\n+\t  (unspec:SVE_FULL_I\n \t    [(match_operand 4)\n-\t     (SHIFTRT:SVE_I\n-\t       (match_operand:SVE_I 2 \"register_operand\" \"w\")\n-\t       (match_operand:SVE_I 3 \"aarch64_simd_rshift_imm\" \"Dr\"))]\n+\t     (SHIFTRT:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")\n+\t       (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\" \"Dr\"))]\n \t    UNSPEC_PRED_X)\n-\t (match_operand:SVE_I 1 \"register_operand\" \"0\")))]\n+\t (match_operand:SVE_FULL_I 1 \"register_operand\" \"0\")))]\n   \"TARGET_SVE2\"\n   \"<sra_op>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n   \"&& !CONSTANT_P (operands[4])\"\n@@ -144,12 +149,12 @@\n \n ;; Unpredicated 3-way exclusive OR.\n (define_insn \"*aarch64_sve2_eor3<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n-\t(xor:SVE_I\n-\t  (xor:SVE_I\n-\t    (match_operand:SVE_I 1 \"register_operand\" \"0, w, w, w\")\n-\t    (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w, w\"))\n-\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w, 0, w\")))]\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n+\t(xor:SVE_FULL_I\n+\t  (xor:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w, w, w\")\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, 0, w, w\"))\n+\t  (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, 0, w\")))]\n   \"TARGET_SVE2\"\n   \"@\n   eor3\\t%0.d, %0.d, %2.d, %3.d\n@@ -161,14 +166,14 @@\n \n ;; Use NBSL for vector NOR.\n (define_insn_and_rewrite \"*aarch64_sve2_nor<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_operand 3)\n-\t   (and:SVE_I\n-\t     (not:SVE_I\n-\t       (match_operand:SVE_I 1 \"register_operand\" \"%0, w\"))\n-\t     (not:SVE_I\n-\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")))]\n+\t   (and:SVE_FULL_I\n+\t     (not:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 1 \"register_operand\" \"%0, w\"))\n+\t     (not:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   \"@\n@@ -183,14 +188,14 @@\n \n ;; Use NBSL for vector NAND.\n (define_insn_and_rewrite \"*aarch64_sve2_nand<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_operand 3)\n-\t   (ior:SVE_I\n-\t     (not:SVE_I\n-\t       (match_operand:SVE_I 1 \"register_operand\" \"%0, w\"))\n-\t     (not:SVE_I\n-\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")))]\n+\t   (ior:SVE_FULL_I\n+\t     (not:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 1 \"register_operand\" \"%0, w\"))\n+\t     (not:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   \"@\n@@ -206,13 +211,13 @@\n ;; Unpredicated bitwise select.\n ;; (op3 ? bsl_mov : bsl_dup) == (((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n (define_insn \"*aarch64_sve2_bsl<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(xor:SVE_I\n-\t  (and:SVE_I\n-\t    (xor:SVE_I\n-\t      (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t      (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n-\t    (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (xor:SVE_FULL_I\n+\t      (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t      (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n \t  (match_dup BSL_DUP)))]\n   \"TARGET_SVE2\"\n   \"@\n@@ -224,16 +229,16 @@\n ;; Unpredicated bitwise inverted select.\n ;; (~(op3 ? bsl_mov : bsl_dup)) == (~(((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup))\n (define_insn_and_rewrite \"*aarch64_sve2_nbsl<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n \t  [(match_operand 4)\n-\t   (not:SVE_I\n-\t     (xor:SVE_I\n-\t       (and:SVE_I\n-\t\t (xor:SVE_I\n-\t\t   (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t\t   (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n-\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t   (not:SVE_FULL_I\n+\t     (xor:SVE_FULL_I\n+\t       (and:SVE_FULL_I\n+\t\t (xor:SVE_FULL_I\n+\t\t   (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n \t       (match_dup BSL_DUP)))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n@@ -250,17 +255,17 @@\n ;; Unpredicated bitwise select with inverted first operand.\n ;; (op3 ? ~bsl_mov : bsl_dup) == ((~(bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n (define_insn_and_rewrite \"*aarch64_sve2_bsl1n<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(xor:SVE_I\n-\t  (and:SVE_I\n-\t    (unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (unspec:SVE_FULL_I\n \t      [(match_operand 4)\n-\t       (not:SVE_I\n-\t\t (xor:SVE_I\n-\t\t   (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t\t   (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\")))]\n+\t       (not:SVE_FULL_I\n+\t\t (xor:SVE_FULL_I\n+\t\t   (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\")))]\n \t      UNSPEC_PRED_X)\n-\t    (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n \t  (match_dup BSL_DUP)))]\n   \"TARGET_SVE2\"\n   \"@\n@@ -276,17 +281,17 @@\n ;; Unpredicated bitwise select with inverted second operand.\n ;; (bsl_dup ? bsl_mov : ~op3) == ((bsl_dup & bsl_mov) | (~op3 & ~bsl_dup))\n (define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(ior:SVE_I\n-\t  (and:SVE_I\n-\t    (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t    (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n-\t  (unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(ior:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t  (unspec:SVE_FULL_I\n \t    [(match_operand 4)\n-\t     (and:SVE_I\n-\t       (not:SVE_I\n-\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n-\t       (not:SVE_I\n+\t     (and:SVE_FULL_I\n+\t       (not:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n+\t       (not:SVE_FULL_I\n \t\t (match_dup BSL_DUP)))]\n \t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE2\"\n@@ -303,18 +308,18 @@\n ;; Unpredicated bitwise select with inverted second operand, alternative form.\n ;; (bsl_dup ? bsl_mov : ~op3) == ((bsl_dup & bsl_mov) | (~bsl_dup & ~op3))\n (define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(ior:SVE_I\n-\t  (and:SVE_I\n-\t    (match_operand:SVE_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t    (match_operand:SVE_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n-\t  (unspec:SVE_I\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(ior:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t  (unspec:SVE_FULL_I\n \t    [(match_operand 4)\n-\t     (and:SVE_I\n-\t       (not:SVE_I\n+\t     (and:SVE_FULL_I\n+\t       (not:SVE_FULL_I\n \t\t (match_dup BSL_DUP))\n-\t       (not:SVE_I\n-\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))]\n+\t       (not:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")))]\n \t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE2\"\n   \"@"}, {"sha": "890b3a8d721e105bd9e87900d5157b8ddb76ab8e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75cdd2c4e5282985a6fbdb2e72e17cb77782044/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f75cdd2c4e5282985a6fbdb2e72e17cb77782044", "patch": "@@ -284,10 +284,6 @@\n ;; count.\n (define_mode_iterator VMUL_CHANGE_NLANES [V4HI V8HI V2SI V4SI V2SF V4SF])\n \n-;; All SVE vector modes.\n-(define_mode_iterator SVE_ALL [VNx16QI VNx8HI VNx4SI VNx2DI\n-\t\t\t       VNx8HF VNx4SF VNx2DF])\n-\n ;; Iterators for single modes, for \"@\" patterns.\n (define_mode_iterator VNx8HI_ONLY [VNx8HI])\n (define_mode_iterator VNx4SI_ONLY [VNx4SI])\n@@ -302,38 +298,46 @@\n \t\t\t\t  VNx64QI VNx32HI VNx16SI VNx8DI\n \t\t\t\t  VNx32HF VNx16SF VNx8DF])\n \n-;; SVE integer vector modes that have 8-bit, 16-bit or 32-bit elements.\n-(define_mode_iterator SVE_BHSI [VNx16QI VNx8HI VNx4SI])\n+;; All fully-packed SVE vector modes.\n+(define_mode_iterator SVE_FULL [VNx16QI VNx8HI VNx4SI VNx2DI\n+\t\t\t        VNx8HF VNx4SF VNx2DF])\n+\n+;; All fully-packed SVE integer vector modes.\n+(define_mode_iterator SVE_FULL_I [VNx16QI VNx8HI VNx4SI VNx2DI])\n \n-;; SVE integer vector modes that have 16-bit, 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_HSDI [VNx8HI VNx4SI VNx2DI])\n+;; All fully-packed SVE floating-point vector modes.\n+(define_mode_iterator SVE_FULL_F [VNx8HF VNx4SF VNx2DF])\n \n-;; SVE floating-point vector modes that have 16-bit or 32-bit elements.\n-(define_mode_iterator SVE_HSF [VNx8HF VNx4SF])\n+;; Fully-packed SVE integer vector modes that have 8-bit, 16-bit or 32-bit\n+;; elements.\n+(define_mode_iterator SVE_FULL_BHSI [VNx16QI VNx8HI VNx4SI])\n \n-;; SVE integer vector modes that have 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_SDI [VNx4SI VNx2DI])\n+;; Fully-packed SVE vector modes that have 16-bit, 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_FULL_HSD [VNx8HI VNx4SI VNx2DI VNx8HF VNx4SF VNx2DF])\n \n-;; SVE floating-point vector modes that have 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_SDF [VNx4SF VNx2DF])\n+;; Fully-packed SVE integer vector modes that have 16-bit, 32-bit or 64-bit\n+;; elements.\n+(define_mode_iterator SVE_FULL_HSDI [VNx8HI VNx4SI VNx2DI])\n \n-;; All SVE vector modes that have 16-bit, 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_HSD [VNx8HI VNx4SI VNx2DI VNx8HF VNx4SF VNx2DF])\n+;; Fully-packed SVE floating-point vector modes that have 16-bit or 32-bit\n+;; elements.\n+(define_mode_iterator SVE_FULL_HSF [VNx8HF VNx4SF])\n \n-;; All SVE vector modes that have 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_SD [VNx4SI VNx2DI VNx4SF VNx2DF])\n+;; Fully-packed SVE vector modes that have 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_FULL_SD [VNx4SI VNx2DI VNx4SF VNx2DF])\n \n-;; All SVE vector modes that have 32-bit elements.\n-(define_mode_iterator SVE_S [VNx4SI VNx4SF])\n+;; Fully-packed SVE integer vector modes that have 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_FULL_SDI [VNx4SI VNx2DI])\n \n-;; All SVE vector modes that have 64-bit elements.\n-(define_mode_iterator SVE_D [VNx2DI VNx2DF])\n+;; Fully-packed SVE floating-point vector modes that have 32-bit or 64-bit\n+;; elements.\n+(define_mode_iterator SVE_FULL_SDF [VNx4SF VNx2DF])\n \n-;; All SVE integer vector modes.\n-(define_mode_iterator SVE_I [VNx16QI VNx8HI VNx4SI VNx2DI])\n+;; Fully-packed SVE vector modes that have 32-bit elements.\n+(define_mode_iterator SVE_FULL_S [VNx4SI VNx4SF])\n \n-;; All SVE floating-point vector modes.\n-(define_mode_iterator SVE_F [VNx8HF VNx4SF VNx2DF])\n+;; Fully-packed SVE vector modes that have 64-bit elements.\n+(define_mode_iterator SVE_FULL_D [VNx2DI VNx2DF])\n \n ;; All partial SVE modes.\n (define_mode_iterator SVE_PARTIAL [VNx2QI"}]}