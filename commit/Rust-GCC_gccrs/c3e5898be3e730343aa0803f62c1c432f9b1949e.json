{"sha": "c3e5898be3e730343aa0803f62c1c432f9b1949e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlNTg5OGJlM2U3MzAzNDNhYTA4MDNmNjJjMWM0MzJmOWIxOTQ5ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-20T19:59:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-20T19:59:16Z"}, "message": "c-common.def: Remove STMT_EXPR (moved to cp/cp-tree.def).\n\n./\t* c-common.def: Remove STMT_EXPR (moved to cp/cp-tree.def).\n\t* c-common.h (STMT_EXPR_STMT): Don't define.\n\t(STMT_EXPR_NO_SCOPE): Don't define.\n\t* c-dump.c (c_dump_tree): Don't handle STMT_EXPR.\n\t* c-pretty-print.c (pp_c_primary_expression): Likewise.\n\t(pp_c_expression): Likewise.\ncp/\n\t* cp-tree.def: Add STMT_EXPR.\n\t* cp-tree.h (STMT_EXPR_NO_SCOPE): Define.\n\t(STMT_EXPR_STMT): Define.\n\t* cxx-pretty-print.c (pp_cxx_primary_expression): Handle\n\tSTMT_EXPR.\n\t(pp_cxx_expression): Likewise.\n\t(pp_cxx_statement): Call pp_cxx_statement, not pp_statement.\n\t* dump.c (cp_dump_tree): Handle STMT_EXPR.\n\nFrom-SVN: r98469", "tree": {"sha": "515ce80a388b72849e08cc877925e5d16b15e4e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/515ce80a388b72849e08cc877925e5d16b15e4e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e5898be3e730343aa0803f62c1c432f9b1949e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e5898be3e730343aa0803f62c1c432f9b1949e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e5898be3e730343aa0803f62c1c432f9b1949e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e5898be3e730343aa0803f62c1c432f9b1949e/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02d98c0d639a8b003ce35aade9efb89da4a156b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d98c0d639a8b003ce35aade9efb89da4a156b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02d98c0d639a8b003ce35aade9efb89da4a156b5"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "4181cbeb8f3bbdb3d66714b736a01ad4f006c9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -1,3 +1,12 @@\n+2005-04-20  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-common.def: Remove STMT_EXPR (moved to cp/cp-tree.def).\n+\t* c-common.h (STMT_EXPR_STMT): Don't define.\n+\t(STMT_EXPR_NO_SCOPE): Don't define.\n+\t* c-dump.c (c_dump_tree): Don't handle STMT_EXPR.\n+\t* c-pretty-print.c (pp_c_primary_expression): Likewise.\n+\t(pp_c_expression): Likewise.\n+\n 2005-04-20  Richard Henderson  <rth@redhat.com>\n \n \tPR target/21100"}, {"sha": "4f34a70ac17d51c818968fed3039f3f5f233ccc1", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -29,10 +29,6 @@ cp-tree.def in the cp subdir.  */\n    obtain the expression.  */\n DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)\n \n-/* A STMT_EXPR represents a statement-expression.  The\n-   STMT_EXPR_STMT is the statement given by the expression.  */\n-DEFTREECODE (STMT_EXPR, \"stmt_expr\", tcc_expression, 1)\n-\n /* A COMPOUND_LITERAL_EXPR represents a C99 compound literal.  The\n    COMPOUND_LITERAL_EXPR_DECL_STMT is the a DECL_STMT containing the decl\n    for the anonymous object represented by the COMPOUND_LITERAL;"}, {"sha": "80de15d3ef8cddb94dd70868a8c7e5ae99c68487", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -30,7 +30,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    0: TREE_NEGATED_INT (in INTEGER_CST).\n       IDENTIFIER_MARKED (used by search routines).\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n-      STMT_EXPR_NO_SCOPE (in STMT_EXPR)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n       STATEMENT_LIST_STMT_EXPR (in STATEMENT_LIST)\n@@ -713,13 +712,6 @@ extern void finish_file\t(void);\n    expression statement.  */\n #define EXPR_STMT_EXPR(NODE)    TREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n \n-/* STMT_EXPR accessor.  */\n-#define STMT_EXPR_STMT(NODE)    TREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)\n-\n-/* Nonzero if this statement-expression does not have an associated scope.  */\n-#define STMT_EXPR_NO_SCOPE(NODE) \\\n-   TREE_LANG_FLAG_0 (STMT_EXPR_CHECK (NODE))\n-\n /* COMPOUND_LITERAL_EXPR accessors.  */\n #define COMPOUND_LITERAL_EXPR_DECL_STMT(NODE)\t\t\\\n   TREE_OPERAND (COMPOUND_LITERAL_EXPR_CHECK (NODE), 0)"}, {"sha": "1b1bb7f31c52ef88fc9598c755689830b9367754", "filename": "gcc/c-dump.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -59,10 +59,6 @@ c_dump_tree (void *dump_info, tree t)\n       dump_child (\"expr\", EXPR_STMT_EXPR (t));\n       break;\n \n-    case STMT_EXPR:\n-      dump_child (\"stmt\", STMT_EXPR_STMT (t));\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "811a7bac15418652f6d3c67e5d60d00dfae0af92", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -1013,12 +1013,6 @@ pp_c_primary_expression (c_pretty_printer *pp, tree e)\n       pp_c_right_paren (pp);\n       break;\n \n-    case STMT_EXPR:\n-      pp_c_left_paren (pp);\n-      pp_statement (pp, STMT_EXPR_STMT (e));\n-      pp_c_right_paren (pp);\n-      break;\n-\n     default:\n       /* FIXME:  Make sure we won't get into an infinie loop.  */\n       pp_c_left_paren (pp);\n@@ -1786,7 +1780,6 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n     case FIELD_DECL:\n     case LABEL_DECL:\n     case ERROR_MARK:\n-    case STMT_EXPR:\n       pp_primary_expression (pp, e);\n       break;\n "}, {"sha": "d8e77cca3ff64c27e547a057e1181cded4e8ff10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -1,3 +1,14 @@\n+2005-04-20  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* cp-tree.def: Add STMT_EXPR.\n+\t* cp-tree.h (STMT_EXPR_NO_SCOPE): Define.\n+\t(STMT_EXPR_STMT): Define.\n+\t* cxx-pretty-print.c (pp_cxx_primary_expression): Handle\n+\tSTMT_EXPR.\n+\t(pp_cxx_expression): Likewise.\n+\t(pp_cxx_statement): Call pp_cxx_statement, not pp_statement.\n+\t* dump.c (cp_dump_tree): Handle STMT_EXPR.\n+\n 2005-04-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* decl.c (expand_static_init): Call build2 and build3 instead"}, {"sha": "e50bf3c682c44bb2d32fe6669673bc3bb64d9682", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -331,6 +331,11 @@ DEFTREECODE (ARROW_EXPR, \"arrow_expr\", tcc_expression, 1)\n    expansion.  */\n DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", tcc_unary, 1)\n \n+/* A STMT_EXPR represents a statement-expression during template\n+   expansion.  This is the GCC extension { ( ... ) }.  The\n+   STMT_EXPR_STMT is the statement given by the expression.  */\n+DEFTREECODE (STMT_EXPR, \"stmt_expr\", tcc_expression, 1)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "a27ee193747c0f8653f48075eba8aea69281ffdc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -47,6 +47,7 @@ struct diagnostic_context;\n       KOENIG_LOOKUP_P (in CALL_EXPR)\n       STATEMENT_LIST_NO_SCOPE (in STATEMENT_LIST).\n       EXPR_STMT_STMT_EXPR_RESULT (in EXPR_STMT)\n+      STMT_EXPR_NO_SCOPE (in STMT_EXPR)\n       BIND_EXPR_TRY_BLOCK (in BIND_EXPR)\n       TYPENAME_IS_ENUM_P (in TYPENAME_TYPE)\n       REFERENCE_REF_P (in INDIRECT_EXPR)\n@@ -262,6 +263,10 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define EXPR_STMT_STMT_EXPR_RESULT(NODE) \\\n   TREE_LANG_FLAG_0 (EXPR_STMT_CHECK (NODE))\n \n+/* Nonzero if this statement-expression does not have an associated scope.  */\n+#define STMT_EXPR_NO_SCOPE(NODE) \\\n+   TREE_LANG_FLAG_0 (STMT_EXPR_CHECK (NODE))\n+\n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, in the usual\n    sense of `same'.  */\n #define same_type_p(TYPE1, TYPE2) \\\n@@ -2940,6 +2945,9 @@ struct lang_decl GTY(())\n #define SWITCH_STMT_BODY(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n #define SWITCH_STMT_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n \n+/* STMT_EXPR accessor.  */\n+#define STMT_EXPR_STMT(NODE)    TREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)\n+\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types {\n   none_type = 0, /* Not a tag type.  */"}, {"sha": "2bffb735a26a985baa9e9cc90a6e07b401a1a803", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -345,6 +345,12 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_unqualified_id (pp, t);\n       break;\n \n+    case STMT_EXPR:\n+      pp_cxx_left_paren (pp);\n+      pp_cxx_statement (pp, STMT_EXPR_STMT (t));\n+      pp_cxx_right_paren (pp);\n+      break;\n+\n     default:\n       pp_c_primary_expression (pp_c_base (pp), t);\n       break;\n@@ -863,6 +869,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_TEMPLATE_PARM:\n+    case STMT_EXPR:\n       pp_cxx_primary_expression (pp, t);\n       break;\n \n@@ -1584,7 +1591,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_cxx_right_paren (pp);\n       pp_indentation (pp) += 3;\n       pp_needs_newline (pp) = true;\n-      pp_statement (pp, SWITCH_STMT_BODY (t));\n+      pp_cxx_statement (pp, SWITCH_STMT_BODY (t));\n       pp_newline_and_indent (pp, -3);\n       break;\n \n@@ -1600,15 +1607,15 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_expression (pp, WHILE_COND (t));\n       pp_cxx_right_paren (pp);\n       pp_newline_and_indent (pp, 3);\n-      pp_statement (pp, WHILE_BODY (t));\n+      pp_cxx_statement (pp, WHILE_BODY (t));\n       pp_indentation (pp) -= 3;\n       pp_needs_newline (pp) = true;\n       break;\n \n     case DO_STMT:\n       pp_cxx_identifier (pp, \"do\");\n       pp_newline_and_indent (pp, 3);\n-      pp_statement (pp, DO_BODY (t));\n+      pp_cxx_statement (pp, DO_BODY (t));\n       pp_newline_and_indent (pp, -3);\n       pp_cxx_identifier (pp, \"while\");\n       pp_space (pp);\n@@ -1624,7 +1631,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_space (pp);\n       pp_cxx_left_paren (pp);\n       if (FOR_INIT_STMT (t))\n-        pp_statement (pp, FOR_INIT_STMT (t));\n+        pp_cxx_statement (pp, FOR_INIT_STMT (t));\n       else\n         pp_cxx_semicolon (pp);\n       pp_needs_newline (pp) = false;\n@@ -1638,7 +1645,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n \tpp_expression (pp, FOR_EXPR (t));\n       pp_cxx_right_paren (pp);\n       pp_newline_and_indent (pp, 3);\n-      pp_statement (pp, FOR_BODY (t));\n+      pp_cxx_statement (pp, FOR_BODY (t));\n       pp_indentation (pp) -= 3;\n       pp_needs_newline (pp) = true;\n       break;"}, {"sha": "20c7ace5e8cfbe7fbad95646c3a83e5b6f749b1f", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e5898be3e730343aa0803f62c1c432f9b1949e/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=c3e5898be3e730343aa0803f62c1c432f9b1949e", "patch": "@@ -455,6 +455,10 @@ cp_dump_tree (void* dump_info, tree t)\n       dump_child (\"body\", WHILE_BODY (t));\n       break;\n \n+    case STMT_EXPR:\n+      dump_child (\"stmt\", STMT_EXPR_STMT (t));\n+      break;\n+\n     default:\n       break;\n     }"}]}