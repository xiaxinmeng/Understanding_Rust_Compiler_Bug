{"sha": "cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "node_id": "C_kwDOANBUbNoAKGNjOWNjNWE5YTVmYjBjMTY1MzJhMTZiODdmYmQxNTUwMzdhN2VkODk", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-03-03T18:59:21Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-03-03T18:59:21Z"}, "message": "[PR51534] [arm] split out pr51534 test for softfp\n\nThe test uses arm_hard_ok and arm_softfp_ok as if they were mutually\nexclusive, but they test whether the corresponding -mfloat-abi= flag\nis usable, not whether it is in effect, so it is possible for both to\npass, and then the test comes out with incorrect expectations\nwhichever the default float-abi is.\n\nSeparate the test into hard and softfp variants, and extend the softfp\nvariant to accept both ARM and Thumb opcodes; it unwarrantedly assumed\nthe latter.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR target/51534\n\t* gcc.target/arm/pr51534.c: Split softfp variant into...\n\t* gcc.target/arm/pr51534s.c: ... this, and support ARM too.", "tree": {"sha": "3808bc8bf13d82fdd400b4983d680b0e4719ef51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3808bc8bf13d82fdd400b4983d680b0e4719ef51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89/comments", "author": null, "committer": null, "parents": [{"sha": "cfa118fc089e38a94ec60ccf5b667aea015e5f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa118fc089e38a94ec60ccf5b667aea015e5f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa118fc089e38a94ec60ccf5b667aea015e5f60"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "ba21259bee554ea2aeef47ef5e5a0ef541ac088a", "filename": "gcc/testsuite/gcc.target/arm/pr51534.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534.c?ref=cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "patch": "@@ -1,9 +1,9 @@\n /* Test the vector comparison intrinsics when comparing to immediate zero.\n    */\n \n-/* { dg-do assemble } */\n+/* { dg-do assemble { target { arm_hard_ok } } } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O3\" } */\n+/* { dg-options \"-save-temps -mfloat-abi=hard -O3\" } */\n /* { dg-add-options arm_neon } */\n \n #include <arm_neon.h>\n@@ -64,9 +64,8 @@ GEN_COND_TESTS(vceq)\n /* { dg-final { scan-assembler-times \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n /* { dg-final { scan-assembler-times \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n /* { dg-final { scan-assembler-times \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmov\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, #0xffffffff\" 3 { target { arm_hard_ok } } } } */\n-/* { dg-final { scan-assembler-times \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4294967295\" 3 { target { arm_hard_ok } } } } */\n-/* { dg-final { scan-assembler-times \"mov\\[ \t\\]+r\\[0-9\\]+, #-1\" 6 { target { arm_softfp_ok } } } } */\n+/* { dg-final { scan-assembler-times \"vmov\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, #0xffffffff\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4294967295\" 3 } } */\n \n /* And ensure we don't have unexpected output too.  */\n /* { dg-final { scan-assembler-not \"vc\\[gl\\]\\[te\\]\\.u\\[0-9\\]+\\[ \t\\]+\\[qQdD\\]\\[0-9\\]+, \\[qQdD\\]\\[0-9\\]+, #0\" } } */"}, {"sha": "b1638919c2f75a5a43b159fd339b66eac89ab868", "filename": "gcc/testsuite/gcc.target/arm/pr51534s.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr51534s.c?ref=cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "patch": "@@ -0,0 +1,72 @@\n+/* Test the vector comparison intrinsics when comparing to immediate zero.\n+   */\n+\n+/* { dg-do assemble { target { arm_softfp_ok } } } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -mfloat-abi=softfp -O3\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+#define GEN_TEST(T, D, C, R) \\\n+  R test_##C##_##T (T a) { return C (a, D (0)); }\n+\n+#define GEN_DOUBLE_TESTS(S, T, C) \\\n+  GEN_TEST (T, vdup_n_s##S, C##_s##S, u##T) \\\n+  GEN_TEST (u##T, vdup_n_u##S, C##_u##S, u##T) \n+\n+#define GEN_QUAD_TESTS(S, T, C) \\\n+  GEN_TEST (T, vdupq_n_s##S, C##q_s##S, u##T) \\\n+  GEN_TEST (u##T, vdupq_n_u##S, C##q_u##S, u##T) \n+\n+#define GEN_COND_TESTS(C) \\\n+  GEN_DOUBLE_TESTS (8, int8x8_t, C) \\\n+  GEN_DOUBLE_TESTS (16, int16x4_t, C) \\\n+  GEN_DOUBLE_TESTS (32, int32x2_t, C) \\\n+  GEN_QUAD_TESTS (8, int8x16_t, C) \\\n+  GEN_QUAD_TESTS (16, int16x8_t, C) \\\n+  GEN_QUAD_TESTS (32, int32x4_t, C)\n+\n+GEN_COND_TESTS(vcgt)\n+GEN_COND_TESTS(vcge)\n+GEN_COND_TESTS(vclt)\n+GEN_COND_TESTS(vcle)\n+GEN_COND_TESTS(vceq)\n+\n+/* Scan for expected outputs.  */\n+/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vclt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler \"vcle\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mov\\[ \t\\]+r\\[0-9\\]+, #-1|mvn\\[ \t\\]+r\\[0-9\\]+, #0\" 6 } } */\n+\n+/* And ensure we don't have unexpected output too.  */\n+/* { dg-final { scan-assembler-not \"vc\\[gl\\]\\[te\\]\\.u\\[0-9\\]+\\[ \t\\]+\\[qQdD\\]\\[0-9\\]+, \\[qQdD\\]\\[0-9\\]+, #0\" } } */\n+\n+/* Tidy up.  */"}]}