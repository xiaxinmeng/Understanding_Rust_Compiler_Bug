{"sha": "e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlN2FhMzRhYjA3Zjg3OGI3YTBhYmQ4OWJkOTU0NGU5MDU3ZTRmNw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-11-21T14:58:19Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-11-21T14:58:19Z"}, "message": "re PR tree-optimization/78114 (gfortran.dg/vect/fast-math-mgrid-resid.f FAILs)\n\n\tgcc/testsuite\n\tPR testsuite/78114\n\t* gfortran.dg/vect/fast-math-mgrid-resid.f: Add additional\n\toptions.  Refine test by checking predictive commining PHI\n\tnodes in vectorized loop wrto vector factor.\n\nFrom-SVN: r242664", "tree": {"sha": "1017dd99b11a8776e8e7539f58cfa9be703559c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1017dd99b11a8776e8e7539f58cfa9be703559c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7/comments", "author": null, "committer": null, "parents": [{"sha": "1c7926f64cb0c7603a42fe2e924825cca4c2fc06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7926f64cb0c7603a42fe2e924825cca4c2fc06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7926f64cb0c7603a42fe2e924825cca4c2fc06"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "11f14f96b56ebbf47c6e3fe56005cc69f297a191", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "patch": "@@ -1,3 +1,10 @@\n+2016-11-21  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR testsuite/78114\n+\t* gfortran.dg/vect/fast-math-mgrid-resid.f: Add additional\n+\toptions.  Refine test by checking predictive commining PHI\n+\tnodes in vectorized loop wrto vector factor.\n+\n 2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/71973"}, {"sha": "54f1e9eac638a7031bce608b8e5c592b0b6b2850", "filename": "gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f?ref=e0e7aa34ab07f878b7a0abd89bd9544e9057e4f7", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_double }\n-! { dg-options \"-O3 -fpredictive-commoning -fdump-tree-pcom-details\" }\n-\n+! { dg-options \"-O3 --param vect-max-peeling-for-alignment=0 -fpredictive-commoning -fdump-tree-pcom-details\" }\n+! { dg-additional-options \"-mprefer-avx128\" { target { i?86-*-* x86_64-*-* } } }\n \n ******* RESID COMPUTES THE RESIDUAL:  R = V - AU\n *\n@@ -38,8 +38,8 @@ SUBROUTINE RESID(U,V,R,N,A)\n       RETURN\n       END\n ! we want to check that predictive commoning did something on the\n-! vectorized loop.\n-! { dg-final { scan-tree-dump-times \"Executing predictive commoning without unrolling\" 1 \"pcom\" { target lp64 } } }\n-! { dg-final { scan-tree-dump-times \"Executing predictive commoning without unrolling\" 2 \"pcom\" { target ia32 } } }\n-! { dg-final { scan-tree-dump-times \"Predictive commoning failed: no suitable chains\" 0 \"pcom\" } }\n-! { dg-final { scan-tree-dump-times \"Loop iterates only 1 time, nothing to do\" 1 \"pcom\" } }\n+! vectorized loop.  If vector factor is 2, the vectorized loop can\n+! be predictive commoned, we check if predictive commoning PHI node\n+! is created with vector(2) type.\n+! { dg-final { scan-tree-dump \"Executing predictive commoning without unrolling\" \"pcom\" } }\n+! { dg-final { scan-tree-dump \"vectp_u.*__lsm.* = PHI <.*vectp_u.*__lsm\" \"pcom\" } }"}]}