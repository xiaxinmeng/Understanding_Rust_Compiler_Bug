{"sha": "80850da1e9e9866ff7792865bebea52114d0231c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4NTBkYTFlOWU5ODY2ZmY3NzkyODY1YmViZWE1MjExNGQwMjMxYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-04T09:30:37Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-04T09:30:37Z"}, "message": "lra: Clobbers in a parallel are earlyclobbers (PR83245)\n\nThe documentation (rtl.texi) says:\n\n  When a @code{clobber} expression for a register appears inside a\n  @code{parallel} with other side effects, the register allocator\n  guarantees that the register is unoccupied both before and after that\n  insn if it is a hard register clobber.\n\nand at least the rs6000 backend relies on that (see PR83245).  This\npatch restores that behaviour.\n\nRegisters that are also used as operands in the instruction are not\ntreated as earlyclobber, so such insns also still work (PR80818, an\ns390 testcase).\n\n\n\tPR rtl-optimization/83245\n\t* lra.c (collect_non_operand_hard_regs): Treat clobbers of non-operand\n\thard registers as earlyclobber, also if not in an asm.\n\nFrom-SVN: r255377", "tree": {"sha": "b2fb5b95780d8b3443f180aa4ebd7bf4bdc96007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2fb5b95780d8b3443f180aa4ebd7bf4bdc96007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80850da1e9e9866ff7792865bebea52114d0231c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80850da1e9e9866ff7792865bebea52114d0231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80850da1e9e9866ff7792865bebea52114d0231c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80850da1e9e9866ff7792865bebea52114d0231c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "155f67eb98d082414be01425ca5eff3b9c3230fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155f67eb98d082414be01425ca5eff3b9c3230fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155f67eb98d082414be01425ca5eff3b9c3230fe"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "3b0f55ffe26ecc37ec466989732996269afdf32a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80850da1e9e9866ff7792865bebea52114d0231c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80850da1e9e9866ff7792865bebea52114d0231c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80850da1e9e9866ff7792865bebea52114d0231c", "patch": "@@ -1,3 +1,9 @@\n+2017-12-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/83245\n+\t* lra.c (collect_non_operand_hard_regs): Treat clobbers of non-operand\n+\thard registers as earlyclobber, also if not in an asm.\n+\n 2017-12-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR bootstrap/83265"}, {"sha": "0d76eac3f3b5bcbba8194c86da7ee495efc635f0", "filename": "gcc/lra.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80850da1e9e9866ff7792865bebea52114d0231c/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80850da1e9e9866ff7792865bebea52114d0231c/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=80850da1e9e9866ff7792865bebea52114d0231c", "patch": "@@ -888,14 +888,10 @@ collect_non_operand_hard_regs (rtx_insn *insn, rtx *x,\n \t\t\t\t\t    list, OP_IN, false);\n       break;\n     case CLOBBER:\n-      {\n-\tint code = INSN_CODE (insn);\n-\t/* We treat clobber of non-operand hard registers as early\n-\t   clobber (the behavior is expected from asm).  */\n-\tlist = collect_non_operand_hard_regs (insn, &XEXP (op, 0), data,\n-\t\t\t\t\t      list, OP_OUT, code < 0);\n-\tbreak;\n-      }\n+      /* We treat clobber of non-operand hard registers as early clobber.  */\n+      list = collect_non_operand_hard_regs (insn, &XEXP (op, 0), data,\n+\t\t\t\t\t    list, OP_OUT, true);\n+      break;\n     case PRE_INC: case PRE_DEC: case POST_INC: case POST_DEC:\n       list = collect_non_operand_hard_regs (insn, &XEXP (op, 0), data,\n \t\t\t\t\t    list, OP_INOUT, false);"}]}