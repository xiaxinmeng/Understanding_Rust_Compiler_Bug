{"sha": "e93050426d180c5d22653e349e066331785521f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzMDUwNDI2ZDE4MGM1ZDIyNjUzZTM0OWUwNjYzMzE3ODU1MjFmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-16T02:36:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-16T02:36:12Z"}, "message": "pt.c (lookup_template_class_1): Splice out abi_tag attribute if necessary.\n\n\t* pt.c (lookup_template_class_1): Splice out abi_tag attribute if\n\tnecessary.  Call inherit_targ_abi_tags here.\n\t* class.c (check_bases_and_members): Not here.\n\t(inherit_targ_abi_tags): Check CLASS_TYPE_P.\n\t* cp-tree.h: Declare inherit_targ_abi_tags.\n\nFrom-SVN: r215283", "tree": {"sha": "1286e6ce61333a793eefcac997b7d595c8367038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1286e6ce61333a793eefcac997b7d595c8367038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93050426d180c5d22653e349e066331785521f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93050426d180c5d22653e349e066331785521f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93050426d180c5d22653e349e066331785521f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93050426d180c5d22653e349e066331785521f0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4654c0cf4a05c0af9ff3d0969382d175f5b32e7e"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "1e79182e86e70fd33030360470f775d62add41bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e93050426d180c5d22653e349e066331785521f0", "patch": "@@ -1,3 +1,11 @@\n+2014-09-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (lookup_template_class_1): Splice out abi_tag attribute if\n+\tnecessary.  Call inherit_targ_abi_tags here.\n+\t* class.c (check_bases_and_members): Not here.\n+\t(inherit_targ_abi_tags): Check CLASS_TYPE_P.\n+\t* cp-tree.h: Declare inherit_targ_abi_tags.\n+\n 2014-09-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tDo not diagnose lambda default arguments in c++14 modes."}, {"sha": "6b86ef4d9235a0de5859579d9cbd6565f427b177", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e93050426d180c5d22653e349e066331785521f0", "patch": "@@ -1441,7 +1441,8 @@ check_abi_tags (tree t, tree subob)\n void\n inherit_targ_abi_tags (tree t)\n {\n-  if (CLASSTYPE_TEMPLATE_INFO (t) == NULL_TREE)\n+  if (!CLASS_TYPE_P (t)\n+      || CLASSTYPE_TEMPLATE_INFO (t) == NULL_TREE)\n     return;\n \n   mark_type_abi_tags (t, true);\n@@ -5460,9 +5461,6 @@ check_bases_and_members (tree t)\n   bool saved_nontrivial_dtor;\n   tree fn;\n \n-  /* Pick up any abi_tags from our template arguments before checking.  */\n-  inherit_targ_abi_tags (t);\n-\n   /* By default, we use const reference arguments and generate default\n      constructors.  */\n   cant_have_const_ctor = 0;"}, {"sha": "5d8badcfe7556083ffc89e6e57a706383d64ea95", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e93050426d180c5d22653e349e066331785521f0", "patch": "@@ -5206,6 +5206,7 @@ extern bool type_has_user_declared_move_assign(tree);\n extern bool type_build_ctor_call\t\t(tree);\n extern bool type_build_dtor_call\t\t(tree);\n extern void explain_non_literal_class\t\t(tree);\n+extern void inherit_targ_abi_tags\t\t(tree);\n extern void defaulted_late_check\t\t(tree);\n extern bool defaultable_fn_check\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);"}, {"sha": "b3a9c95ac609d4508a95a295353e5529e8252834", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93050426d180c5d22653e349e066331785521f0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e93050426d180c5d22653e349e066331785521f0", "patch": "@@ -7823,9 +7823,18 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \n       if (OVERLOAD_TYPE_P (t)\n \t  && !DECL_ALIAS_TEMPLATE_P (gen_tmpl))\n-\tif (tree attributes\n-\t    = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (template_type)))\n-\t  TYPE_ATTRIBUTES (t) = attributes;\n+\t{\n+\t  if (tree attributes\n+\t      = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (template_type)))\n+\t    {\n+\t      if (!TREE_CHAIN (attributes))\n+\t\tTYPE_ATTRIBUTES (t) = attributes;\n+\t      else\n+\t\tTYPE_ATTRIBUTES (t)\n+\t\t  = build_tree_list (TREE_PURPOSE (attributes),\n+\t\t\t\t     TREE_VALUE (attributes));\n+\t    }\n+\t}\n \n       /* Let's consider the explicit specialization of a member\n          of a class template specialization that is implicitly instantiated,\n@@ -7950,6 +7959,8 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       TREE_PUBLIC (type_decl) = 1;\n       determine_visibility (type_decl);\n \n+      inherit_targ_abi_tags (t);\n+\n       return t;\n     }\n }"}, {"sha": "f3208285161c5774e8f3fa72ba1bd7803c392abf", "filename": "gcc/testsuite/g++.dg/abi/abi-tag10.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93050426d180c5d22653e349e066331785521f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93050426d180c5d22653e349e066331785521f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag10.C?ref=e93050426d180c5d22653e349e066331785521f0", "patch": "@@ -0,0 +1,28 @@\n+#ifndef ABI_TAG\n+#define ABI_TAG __attribute__((__abi_tag__(\"cxx11\")))\n+#endif\n+\n+typedef unsigned long size_t;\n+\n+template<typename C>\n+struct char_traits { };\n+template<typename C>\n+struct allocator { };\n+\n+template<typename C, typename T = char_traits<C>, typename A = allocator<C> >\n+struct ABI_TAG basic_string { };\n+\n+typedef basic_string<char> string;\n+\n+template<typename T>\n+struct hash\n+{\n+  size_t\n+  operator()(T val) const;\n+};\n+\n+template<>\n+size_t\n+hash<string>::operator()(string) const { return 0; }\n+\n+// { dg-final { scan-assembler \"_ZNK4hashI12basic_stringB5cxx11Ic11char_traitsIcE9allocatorIcEEEclES5_\" } }"}]}