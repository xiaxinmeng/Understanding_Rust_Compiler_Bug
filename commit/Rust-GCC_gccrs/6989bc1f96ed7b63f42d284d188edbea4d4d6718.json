{"sha": "6989bc1f96ed7b63f42d284d188edbea4d4d6718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4OWJjMWY5NmVkN2I2M2Y0MmQyODRkMTg4ZWRiZWE0ZDRkNjcxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T08:36:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T08:36:25Z"}, "message": "[multiple changes]\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): Do style check on component\n\tname.\n\t* sem_ch10.adb (Analyze_Subunit): Do style check on parent unit name.\n\t* sem_ch8.adb (Find_Direct_Name): For non-overloadable entities, do\n\tstyle check.\n\t* sem_res.adb (Resolve_Entity_Name): Do style check for enumeration\n\tliterals.\n\n2010-06-22  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Scan_Make_Arg): No longer pass -nostdlib to the compiler as\n\tit has no effect. Always pass -nostdlib to gnatlink, even on VMS.\n\n2010-06-22  Pascal Obry  <obry@adacore.com>\n\n\t* g-socthi-mingw.adb: Fix implementation of the vectored sockets on\n\tWindows.\n\t(C_Recvmsg): Make sure the routine is atomic. Also fully\n\tfill vectors in the proper order.\n\t(C_Sendmsg): Make sure the routine is atomic.\n\nFrom-SVN: r161144", "tree": {"sha": "4e0e71abda7577cfd834627a3ee5ea5852a015fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0e71abda7577cfd834627a3ee5ea5852a015fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6989bc1f96ed7b63f42d284d188edbea4d4d6718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989bc1f96ed7b63f42d284d188edbea4d4d6718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6989bc1f96ed7b63f42d284d188edbea4d4d6718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989bc1f96ed7b63f42d284d188edbea4d4d6718/comments", "author": null, "committer": null, "parents": [{"sha": "964f13da3f36e1839758bc28f78dbcdfc6e81737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964f13da3f36e1839758bc28f78dbcdfc6e81737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964f13da3f36e1839758bc28f78dbcdfc6e81737"}], "stats": {"total": 199, "additions": 173, "deletions": 26}, "files": [{"sha": "8408a5592419078fb1e79d0d2e82cdd5323188b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -1,3 +1,26 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Do style check on component\n+\tname.\n+\t* sem_ch10.adb (Analyze_Subunit): Do style check on parent unit name.\n+\t* sem_ch8.adb (Find_Direct_Name): For non-overloadable entities, do\n+\tstyle check.\n+\t* sem_res.adb (Resolve_Entity_Name): Do style check for enumeration\n+\tliterals.\n+\n+2010-06-22  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): No longer pass -nostdlib to the compiler as\n+\tit has no effect. Always pass -nostdlib to gnatlink, even on VMS.\n+\n+2010-06-22  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-socthi-mingw.adb: Fix implementation of the vectored sockets on\n+\tWindows.\n+\t(C_Recvmsg): Make sure the routine is atomic. Also fully\n+\tfill vectors in the proper order.\n+\t(C_Sendmsg): Make sure the routine is atomic.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch8.adb: Update comment."}, {"sha": "6cf0058e96c9cdba1fdb8ccde7d6102c3e5aaeeb", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 104, "deletions": 8, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2009, AdaCore                     --\n+--                     Copyright (C) 2001-2010, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,8 +37,13 @@\n \n --  This version is for NT\n \n-with Interfaces.C.Strings; use Interfaces.C.Strings;\n-with System;               use System;\n+with Ada.Streams;             use Ada.Streams;\n+with Ada.Unchecked_Conversion;\n+with Interfaces.C.Strings;    use Interfaces.C.Strings;\n+with System;                  use System;\n+with System.Storage_Elements; use System.Storage_Elements;\n+\n+with GNAT.Task_Lock;\n \n package body GNAT.Sockets.Thin is\n \n@@ -273,8 +278,10 @@ package body GNAT.Sockets.Thin is\n    is\n       use type C.size_t;\n \n-      Res   : C.int;\n-      Count : C.int := 0;\n+      Res    : C.int;\n+      Count  : C.int := 0;\n+      Locked : Boolean := False;\n+      --  Set to false when the lock is activated\n \n       MH : Msghdr;\n       for MH'Address use Msg;\n@@ -283,26 +290,105 @@ package body GNAT.Sockets.Thin is\n       for Iovec'Address use MH.Msg_Iov;\n       pragma Import (Ada, Iovec);\n \n+      Iov_Index     : Integer;\n+      Current_Iovec : Vector_Element;\n+\n+      function To_Access is new Ada.Unchecked_Conversion\n+                                  (System.Address, Stream_Element_Reference);\n+      pragma Warnings (Off, Stream_Element_Reference);\n+\n+      Req : Request_Type (Name => N_Bytes_To_Read);\n+\n    begin\n       --  Windows does not provide an implementation of recvmsg(). The spec for\n       --  WSARecvMsg() is incompatible with the data types we define, and is\n       --  not available in all versions of Windows. So, we use C_Recv instead.\n \n-      for J in Iovec'Range loop\n+      --  First, wait for some data to be available if socket is blocking\n+\n+      declare\n+         Selector     : Selector_Type;\n+         R_Socket_Set : Socket_Set_Type;\n+         W_Socket_Set : Socket_Set_Type;\n+         Status       : Selector_Status;\n+         Req          : Request_Type (Name => Non_Blocking_IO);\n+      begin\n+         Control_Socket (Socket_Type (S), Req);\n+\n+         if not Req.Enabled then\n+            --  We are in a blocking IO mode\n+            Create_Selector (Selector);\n+\n+            Set (R_Socket_Set, Socket_Type (S));\n+\n+            Check_Selector (Selector, R_Socket_Set, W_Socket_Set, Status);\n+\n+            Close_Selector (Selector);\n+         end if;\n+      end;\n+\n+      GNAT.Task_Lock.Lock;\n+      Locked := True;\n+\n+      --  Check how much data are available\n+\n+      Control_Socket (Socket_Type (S), Req);\n+\n+      --  Fill the vectors\n+\n+      Iov_Index := -1;\n+      Current_Iovec := (Base => null, Length => 0);\n+\n+      loop\n+         if Current_Iovec.Length = 0 then\n+            Iov_Index := Iov_Index + 1;\n+            exit when Iov_Index > Integer (Iovec'Last);\n+            Current_Iovec := Iovec (SOSC.Msg_Iovlen_T (Iov_Index));\n+         end if;\n+\n          Res :=\n            C_Recv\n             (S,\n-             Iovec (J).Base.all'Address,\n-             C.int (Iovec (J).Length),\n+             Current_Iovec.Base.all'Address,\n+             C.int (Current_Iovec.Length),\n              Flags);\n \n          if Res < 0 then\n+            Task_Lock.Unlock;\n             return System.CRTL.ssize_t (Res);\n+\n+         elsif Res = 0 then\n+            exit;\n+\n          else\n+            pragma Assert (Stream_Element_Count (Res) <= Current_Iovec.Length);\n+\n             Count := Count + Res;\n+            Current_Iovec.Length :=\n+              Current_Iovec.Length - Stream_Element_Count (Res);\n+            Current_Iovec.Base :=\n+              To_Access (Current_Iovec.Base.all'Address\n+                + Storage_Offset (Res));\n+\n+            --  If we have read all the data that was initially available,\n+            --  do not attempt to receive more, since this might block, or\n+            --  merge data from successive datagrams in case of a datagram-\n+            --  oriented socket.\n+\n+            exit when Natural (Count) >= Req.Size;\n          end if;\n       end loop;\n+\n+      Task_Lock.Unlock;\n+\n       return System.CRTL.ssize_t (Count);\n+\n+   exception\n+      when others =>\n+         if Locked then\n+            Task_Lock.Unlock;\n+         end if;\n+         raise;\n    end C_Recvmsg;\n \n    --------------\n@@ -428,7 +514,10 @@ package body GNAT.Sockets.Thin is\n       --  not available in all versions of Windows. So, we'll use C_Sendto\n       --  instead.\n \n+      Task_Lock.Lock;\n+\n       for J in Iovec'Range loop\n+\n          Res :=\n            C_Sendto\n             (S,\n@@ -439,13 +528,20 @@ package body GNAT.Sockets.Thin is\n              Tolen => C.int (MH.Msg_Namelen));\n \n          if Res < 0 then\n+            Task_Lock.Unlock;\n             return System.CRTL.ssize_t (Res);\n          else\n             Count := Count + Res;\n          end if;\n       end loop;\n \n+      Task_Lock.Unlock;\n+\n       return System.CRTL.ssize_t (Count);\n+   exception\n+      when others =>\n+         Task_Lock.Unlock;\n+         raise;\n    end C_Sendmsg;\n \n    --------------"}, {"sha": "8251052258b646615e34ad86a76cc24bb2e8ce3e", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -8213,17 +8213,11 @@ package body Make is\n \n          elsif Argv (2 .. Argv'Last) = \"nostdlib\" then\n \n-            No_Stdlib := True;\n+            --  Pass -nstdlib to gnatbind and gnatlink\n \n-            Add_Switch (Argv, Compiler, And_Save => And_Save);\n+            No_Stdlib := True;\n             Add_Switch (Argv, Binder, And_Save => And_Save);\n-\n-            --  On Open VMS, do not pass -nostdlib to gnatlink, it will disable\n-            --  linking with all standard library files.\n-\n-            if not OpenVMS then\n-               Add_Switch (Argv, Linker, And_Save => And_Save);\n-            end if;\n+            Add_Switch (Argv, Linker, And_Save => And_Save);\n \n          elsif Argv (2 .. Argv'Last) = \"nostdinc\" then\n "}, {"sha": "5ce3ea6e83a473a3af05c39bea97cad0cf2ee968", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -54,6 +54,7 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stringt;  use Stringt;\n with Stand;    use Stand;\n+with Style;    use Style;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n@@ -3779,7 +3780,15 @@ package body Sem_Aggr is\n                New_Assoc := First (New_Assoc_List);\n                while Present (New_Assoc) loop\n                   Component := First (Choices (New_Assoc));\n-                  exit when Chars (Selectr) = Chars (Component);\n+\n+                  if Chars (Selectr) = Chars (Component) then\n+                     if Style_Check then\n+                        Check_Identifier (Selectr, Entity (Component));\n+                     end if;\n+\n+                     exit;\n+                  end if;\n+\n                   Next (New_Assoc);\n                end loop;\n "}, {"sha": "1ce76e89c25a00d77abccaaaaa8ab77e092f8cde", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -2140,6 +2140,19 @@ package body Sem_Ch10 is\n    --  Start of processing for Analyze_Subunit\n \n    begin\n+      if Style_Check then\n+         declare\n+            Nam : Node_Id := Name (Unit (N));\n+\n+         begin\n+            if Nkind (Nam) = N_Selected_Component then\n+               Nam := Selector_Name (Nam);\n+            end if;\n+\n+            Check_Identifier (Nam, Par_Unit);\n+         end;\n+      end if;\n+\n       if not Is_Empty_List (Context_Items (N)) then\n \n          --  Save current use clauses"}, {"sha": "3f1ea3bc56b9097c54710c69c0e882dd4680377a", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -4377,13 +4377,18 @@ package body Sem_Ch8 is\n             return;\n          end if;\n \n-         --  Set the entity. Note that the reason we call Set_Entity here, as\n-         --  opposed to Set_Entity_With_Style_Check is that in the overloaded\n-         --  case, the initial call can set the wrong homonym. The call that\n-         --  sets the right homonym is in Sem_Res and that call does use\n-         --  Set_Entity_With_Style_Check, so we don't miss a style check.\n-\n-         Set_Entity (N, E);\n+         --  Set the entity. Note that the reason we call Set_Entity for the\n+         --  overloadable case, as opposed to Set_Entity_With_Style_Check is\n+         --  that in the overloaded case, the initial call can set the wrong\n+         --  homonym. The call that sets the right homonym is in Sem_Res and\n+         --  that call does use Set_Entity_With_Style_Check, so we don't miss\n+         --  a style check.\n+\n+         if Is_Overloadable (E) then\n+            Set_Entity (N, E);\n+         else\n+            Set_Entity_With_Style_Check (N, E);\n+         end if;\n \n          if Is_Type (E) then\n             Set_Etype (N, E);"}, {"sha": "ca2059dba5c4d299dd9b6852c24e33b84c5d7eef", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989bc1f96ed7b63f42d284d188edbea4d4d6718/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6989bc1f96ed7b63f42d284d188edbea4d4d6718", "patch": "@@ -5793,6 +5793,14 @@ package body Sem_Res is\n          Set_Etype (N, Typ);\n          Eval_Named_Real (N);\n \n+      --  For enumeration literals, we need to make sure that a proper style\n+      --  check is done, since such literals are overloaded, and thus we did\n+      --  not do a style check during the first phase of analysis.\n+\n+      elsif Ekind (E) = E_Enumeration_Literal then\n+         Set_Entity_With_Style_Check (N, E);\n+         Eval_Entity_Name (N);\n+\n       --  Allow use of subtype only if it is a concurrent type where we are\n       --  currently inside the body. This will eventually be expanded into a\n       --  call to Self (for tasks) or _object (for protected objects). Any\n@@ -5847,7 +5855,6 @@ package body Sem_Res is\n            and then not In_Spec_Expression\n            and then not Is_Imported (E)\n          then\n-\n             if No_Initialization (Parent (E))\n               or else (Present (Full_View (E))\n                         and then No_Initialization (Parent (Full_View (E))))"}]}