{"sha": "4866b2f5db117f9e89f82c44ffed57178c09cc49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2NmIyZjVkYjExN2Y5ZTg5ZjgyYzQ0ZmZlZDU3MTc4YzA5Y2M0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T08:03:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T08:03:17Z"}, "message": "middle-end, c++: Treat shifts by negative as undefined [PR96929]\n\nThe PR38359 change made the -1 >> x to -1 optimization less useful by\nrequiring that the x must be non-negative.\nShifts by negative amount are UB, but we for historic reasons had in some\n(but not all) places some hack to treat shifts by negative value as the\nother direction shifts by the negated amount.\n\nThe following patch just removes that special handling, instead we punt on\noptimizing those (and ideally path isolation should catch that up and turn\nthose into __builtin_unreachable, perhaps with __builtin_warning next to\nit).  Folding the shifts in some places as if they were rotates and in other\nas if they were saturating just leads to inconsistencies.\n\nFor C++ constexpr diagnostics and -fpermissive, I've added code to pretend\nfold-const.c has not changed, without -fpermissive it will be an error\nanyway and I think it is better not to change all the diagnostics.\n\nDuring x86_64-linux and i686-linux bootstrap/regtest, my statistics\ngathering patch noted 185 unique -m32/-m64 x TU x function_name x shift_kind\nx fold-const/tree-ssa-ccp cases.  I have investigated the\n64 ../../gcc/config/i386/i386.c x86_output_aligned_bss LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/config/i386/i386-expand.c emit_memmov LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/config/i386/i386-expand.c ix86_expand_carry_flag_compare LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/expmed.c expand_divmod LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/lra-lives.c process_bb_lives LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/rtlanal.c nonzero_bits1 LSHIFT_EXPR wide_int_bitop\n64 ../../gcc/varasm.c optimize_constant_pool.isra LSHIFT_EXPR wide_int_bitop\ncases and all of them are either during jump threading (dom) or during PRE.\nFor jump threading, the most common case is 1 << floor_log2 (whatever) where\nfloor_log2 is return HOST_BITS_PER_WIDE_INT - 1 - clz_hwi (x);\nand clz_hwi is if (x == 0) return HOST_BITS_PER_WIDE_INT; return __builtin_clz* (x);\nand so has range [-1, 63] and a comparison against == 0 which makes the\nthreader think it might be nice to jump thread the case leading to 1 << -1.\nI think it is better to keep the 1 << -1 s in the IL for this and let path\nisolation turn that into __builtin_unreachable () if the user wishes so.\n\n2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96929\n\t* fold-const.c (wide_int_binop) <case LSHIFT_EXPR, case RSHIFT_EXPR>:\n\tReturn false on negative second argument rather than trying to handle\n\tit as shift in the other direction.\n\t* tree-ssa-ccp.c (bit_value_binop) <case LSHIFT_EXPR,\n\tcase RSHIFT_EXPR>: Punt on negative shift count rather than trying\n\tto handle it as shift in the other direction.\n\t* match.pd (-1 >> x to -1): Remove tree_expr_nonnegative_p check.\n\n\t* constexpr.c (cxx_eval_binary_expression): For shifts by constant\n\twith MSB set, emulate older wide_int_binop behavior to preserve\n\tdiagnostics and -fpermissive behavior.\n\n\t* gcc.dg/tree-ssa/pr96929.c: New test.", "tree": {"sha": "a6f0d8c0d3618f7fb78543baa5c3d2f5aa89c00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f0d8c0d3618f7fb78543baa5c3d2f5aa89c00b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4866b2f5db117f9e89f82c44ffed57178c09cc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4866b2f5db117f9e89f82c44ffed57178c09cc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4866b2f5db117f9e89f82c44ffed57178c09cc49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4866b2f5db117f9e89f82c44ffed57178c09cc49/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cd35cf3fdb70e2107f6b059f638f5bde4dae1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd35cf3fdb70e2107f6b059f638f5bde4dae1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd35cf3fdb70e2107f6b059f638f5bde4dae1c3"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "054ee524c7abe05c59786faa29d9a99293e08f28", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4866b2f5db117f9e89f82c44ffed57178c09cc49", "patch": "@@ -3162,6 +3162,21 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n   if (r == NULL_TREE)\n     r = fold_binary_loc (loc, code, type, lhs, rhs);\n \n+  if (r == NULL_TREE\n+      && (code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n+      && TREE_CODE (lhs) == INTEGER_CST\n+      && TREE_CODE (rhs) == INTEGER_CST\n+      && wi::neg_p (wi::to_wide (rhs)))\n+    {\n+      /* For diagnostics and -fpermissive emulate previous behavior of\n+\t handling shifts by negative amount.  */\n+      tree nrhs = const_unop (NEGATE_EXPR, TREE_TYPE (rhs), rhs);\n+      if (nrhs)\n+\tr = fold_binary_loc (loc,\n+\t\t\t     code == LSHIFT_EXPR ? RSHIFT_EXPR : LSHIFT_EXPR,\n+\t\t\t     type, lhs, nrhs);\n+    }\n+\n   if (r == NULL_TREE)\n     {\n       if (lhs == orig_lhs && rhs == orig_rhs)"}, {"sha": "632a241a9643a84b09b4a85c067c781dbed1c748", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4866b2f5db117f9e89f82c44ffed57178c09cc49", "patch": "@@ -992,26 +992,19 @@ wide_int_binop (wide_int &res,\n       res = wi::bit_and (arg1, arg2);\n       break;\n \n-    case RSHIFT_EXPR:\n     case LSHIFT_EXPR:\n       if (wi::neg_p (arg2))\n-\t{\n-\t  tmp = -arg2;\n-\t  if (code == RSHIFT_EXPR)\n-\t    code = LSHIFT_EXPR;\n-\t  else\n-\t    code = RSHIFT_EXPR;\n-\t}\n-      else\n-        tmp = arg2;\n+\treturn false;\n+      res = wi::lshift (arg1, arg2);\n+      break;\n \n-      if (code == RSHIFT_EXPR)\n-\t/* It's unclear from the C standard whether shifts can overflow.\n-\t   The following code ignores overflow; perhaps a C standard\n-\t   interpretation ruling is needed.  */\n-\tres = wi::rshift (arg1, tmp, sign);\n-      else\n-\tres = wi::lshift (arg1, tmp);\n+    case RSHIFT_EXPR:\n+      if (wi::neg_p (arg2))\n+\treturn false;\n+      /* It's unclear from the C standard whether shifts can overflow.\n+\t The following code ignores overflow; perhaps a C standard\n+\t interpretation ruling is needed.  */\n+      res = wi::rshift (arg1, arg2, sign);\n       break;\n \n     case RROTATE_EXPR:"}, {"sha": "4d290ad3c254b547e566547650ccfa9ddeda41b7", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4866b2f5db117f9e89f82c44ffed57178c09cc49", "patch": "@@ -2900,8 +2900,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Optimize -1 >> x for arithmetic right shifts.  */\n (simplify\n  (rshift integer_all_onesp@0 @1)\n- (if (!TYPE_UNSIGNED (type)\n-      && tree_expr_nonnegative_p (@1))\n+ (if (!TYPE_UNSIGNED (type))\n   @0))\n \n /* Optimize (x >> c) << c into x & (-1<<c).  */"}, {"sha": "65b6147f7a46171e047031f9d0e88b8829ab8de3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96929.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96929.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96929.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96929.c?ref=4866b2f5db117f9e89f82c44ffed57178c09cc49", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/96929 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \"baz \\\\\\(\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return -1;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" >> \" \"optimized\" } } */\n+\n+int baz (void);\n+\n+int\n+foo (void)\n+{\n+  return -1 >> baz ();\n+}\n+\n+int\n+bar (int y)\n+{\n+  int z = -1;\n+  return z >> y;\n+}"}, {"sha": "466be20f155d711daa3a51045bc2fe257e04d9d8", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4866b2f5db117f9e89f82c44ffed57178c09cc49/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=4866b2f5db117f9e89f82c44ffed57178c09cc49", "patch": "@@ -1432,13 +1432,7 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n \t  else\n \t    {\n \t      if (wi::neg_p (shift))\n-\t\t{\n-\t\t  shift = -shift;\n-\t\t  if (code == RSHIFT_EXPR)\n-\t\t    code = LSHIFT_EXPR;\n-\t\t  else\n-\t\t    code = RSHIFT_EXPR;\n-\t\t}\n+\t\tbreak;\n \t      if (code == RSHIFT_EXPR)\n \t\t{\n \t\t  *mask = wi::rshift (wi::ext (r1mask, width, sgn), shift, sgn);"}]}