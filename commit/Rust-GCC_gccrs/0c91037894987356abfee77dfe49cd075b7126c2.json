{"sha": "0c91037894987356abfee77dfe49cd075b7126c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5MTAzNzg5NDk4NzM1NmFiZmVlNzdkZmU0OWNkMDc1YjcxMjZjMg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-05-09T16:08:26Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-05-09T16:08:26Z"}, "message": "re PR tree-optimization/53185 (segmentation fault in vectorizable_load)\n\n\tPR tree-optimization/53185\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Disable\n\tpeeling when we see strided loads.\n\ntestsuite/\n\t* gcc.dg/vect/pr53185.c: New test.\n\nFrom-SVN: r187340", "tree": {"sha": "c309a04da0f209d341aaa7749a148bd7728505fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c309a04da0f209d341aaa7749a148bd7728505fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c91037894987356abfee77dfe49cd075b7126c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c91037894987356abfee77dfe49cd075b7126c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c91037894987356abfee77dfe49cd075b7126c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c91037894987356abfee77dfe49cd075b7126c2/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0cd199e8de7227c2fcac3cfb7f767d61678914b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cd199e8de7227c2fcac3cfb7f767d61678914b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0cd199e8de7227c2fcac3cfb7f767d61678914b"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7af99fc387c9796929f021ce0dd1ffae8cc4ad3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c91037894987356abfee77dfe49cd075b7126c2", "patch": "@@ -1,3 +1,9 @@\n+2012-05-09  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/53185\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Disable\n+\tpeeling when we see strided loads.\n+\n 2012-05-09  Matthias Klose  <doko@ubuntu.com>\n \n \t* gcc-ar.c (main): Don't check for execute bits for the plugin."}, {"sha": "3f1b78771892bf9e721a3087ce268ab1a9ce54ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c91037894987356abfee77dfe49cd075b7126c2", "patch": "@@ -1,3 +1,8 @@\n+2012-05-09  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/53185\n+\t* gcc.dg/vect/pr53185.c: New test.\n+\n 2012-05-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/53249"}, {"sha": "af1efba8d66530d4614e4794bce3f0a0fbebb2ea", "filename": "gcc/testsuite/gcc.dg/vect/pr53185.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185.c?ref=0c91037894987356abfee77dfe49cd075b7126c2", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-vectorize\" } */\n+unsigned short a, e;\n+int *b, *d;\n+int c;\n+extern int fn2();\n+void fn1 () {\n+  void *f;\n+  for (;;) {\n+    fn2 ();\n+    b = f;\n+    e = 0;\n+    for (; e < a; ++e)\n+      b[e] = d[e * c];\n+  }\n+}"}, {"sha": "715e3ffde616e847766afe9ce5269e9050d9e4aa", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c91037894987356abfee77dfe49cd075b7126c2/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=0c91037894987356abfee77dfe49cd075b7126c2", "patch": "@@ -1507,6 +1507,17 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n           && GROUP_FIRST_ELEMENT (stmt_info) != stmt)\n         continue;\n \n+      /* FORNOW: Any strided load prevents peeling.  The induction\n+         variable analysis will fail when the prologue loop is generated,\n+\t and so we can't generate the new base for the pointer.  */\n+      if (STMT_VINFO_STRIDE_LOAD_P (stmt_info))\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"strided load prevents peeling\");\n+\t  do_peeling = false;\n+\t  break;\n+\t}\n+\n       /* For invariant accesses there is nothing to enhance.  */\n       if (integer_zerop (DR_STEP (dr)))\n \tcontinue;"}]}