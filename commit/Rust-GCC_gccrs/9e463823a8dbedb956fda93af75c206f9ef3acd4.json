{"sha": "9e463823a8dbedb956fda93af75c206f9ef3acd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0NjM4MjNhOGRiZWRiOTU2ZmRhOTNhZjc1YzIwNmY5ZWYzYWNkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-09T09:20:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-09T09:20:23Z"}, "message": "re PR sanitizer/79944 (asan: incorrect instrumentation of atomic operations)\n\n\tPR sanitizer/79944\n\t* asan.c (get_mem_refs_of_builtin_call): For BUILT_IN_ATOMIC* and\n\tBUILT_IN_SYNC*, determine the access type from the size suffix and\n\talways build a MEM_REF with that type.  Handle forgotten\n\tBUILT_IN_SYNC_FETCH_AND_NAND_16 and BUILT_IN_SYNC_NAND_AND_FETCH_16.\n\n\t* c-c++-common/asan/pr79944.c: New test.\n\nFrom-SVN: r245991", "tree": {"sha": "c218b4135429d12cdd923142e06b51e3a85032ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c218b4135429d12cdd923142e06b51e3a85032ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e463823a8dbedb956fda93af75c206f9ef3acd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e463823a8dbedb956fda93af75c206f9ef3acd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e463823a8dbedb956fda93af75c206f9ef3acd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e463823a8dbedb956fda93af75c206f9ef3acd4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b62f323022656906067769236c31c74b9e10f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b62f323022656906067769236c31c74b9e10f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b62f323022656906067769236c31c74b9e10f47"}], "stats": {"total": 345, "additions": 181, "deletions": 164}, "files": [{"sha": "80d0aeaa6e450ea4a3f334d7037b2b2a27e53e29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e463823a8dbedb956fda93af75c206f9ef3acd4", "patch": "@@ -1,5 +1,11 @@\n 2017-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/79944\n+\t* asan.c (get_mem_refs_of_builtin_call): For BUILT_IN_ATOMIC* and\n+\tBUILT_IN_SYNC*, determine the access type from the size suffix and\n+\talways build a MEM_REF with that type.  Handle forgotten\n+\tBUILT_IN_SYNC_FETCH_AND_NAND_16 and BUILT_IN_SYNC_NAND_AND_FETCH_16.\n+\n \tPR target/79932\n \t* config/i386/avx512vlintrin.h (_mm256_cmpge_epi32_mask,\n \t_mm256_cmpge_epi64_mask, _mm256_cmpge_epu32_mask,"}, {"sha": "edcc6ea5a913825c1d11c61de113a5dea3183c44", "filename": "gcc/asan.c", "status": "modified", "additions": 154, "deletions": 164, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=9e463823a8dbedb956fda93af75c206f9ef3acd4", "patch": "@@ -603,218 +603,208 @@ get_mem_refs_of_builtin_call (const gcall *call,\n     case BUILT_IN_STRLEN:\n       source0 = gimple_call_arg (call, 0);\n       len = gimple_call_lhs (call);\n-      break ;\n+      break;\n \n     /* And now the __atomic* and __sync builtins.\n        These are handled differently from the classical memory memory\n        access builtins above.  */\n \n     case BUILT_IN_ATOMIC_LOAD_1:\n-    case BUILT_IN_ATOMIC_LOAD_2:\n-    case BUILT_IN_ATOMIC_LOAD_4:\n-    case BUILT_IN_ATOMIC_LOAD_8:\n-    case BUILT_IN_ATOMIC_LOAD_16:\n       is_store = false;\n-      /* fall through.  */\n-\n+      /* FALLTHRU */\n     case BUILT_IN_SYNC_FETCH_AND_ADD_1:\n-    case BUILT_IN_SYNC_FETCH_AND_ADD_2:\n-    case BUILT_IN_SYNC_FETCH_AND_ADD_4:\n-    case BUILT_IN_SYNC_FETCH_AND_ADD_8:\n-    case BUILT_IN_SYNC_FETCH_AND_ADD_16:\n-\n     case BUILT_IN_SYNC_FETCH_AND_SUB_1:\n-    case BUILT_IN_SYNC_FETCH_AND_SUB_2:\n-    case BUILT_IN_SYNC_FETCH_AND_SUB_4:\n-    case BUILT_IN_SYNC_FETCH_AND_SUB_8:\n-    case BUILT_IN_SYNC_FETCH_AND_SUB_16:\n-\n     case BUILT_IN_SYNC_FETCH_AND_OR_1:\n-    case BUILT_IN_SYNC_FETCH_AND_OR_2:\n-    case BUILT_IN_SYNC_FETCH_AND_OR_4:\n-    case BUILT_IN_SYNC_FETCH_AND_OR_8:\n-    case BUILT_IN_SYNC_FETCH_AND_OR_16:\n-\n     case BUILT_IN_SYNC_FETCH_AND_AND_1:\n-    case BUILT_IN_SYNC_FETCH_AND_AND_2:\n-    case BUILT_IN_SYNC_FETCH_AND_AND_4:\n-    case BUILT_IN_SYNC_FETCH_AND_AND_8:\n-    case BUILT_IN_SYNC_FETCH_AND_AND_16:\n-\n     case BUILT_IN_SYNC_FETCH_AND_XOR_1:\n-    case BUILT_IN_SYNC_FETCH_AND_XOR_2:\n-    case BUILT_IN_SYNC_FETCH_AND_XOR_4:\n-    case BUILT_IN_SYNC_FETCH_AND_XOR_8:\n-    case BUILT_IN_SYNC_FETCH_AND_XOR_16:\n-\n     case BUILT_IN_SYNC_FETCH_AND_NAND_1:\n-    case BUILT_IN_SYNC_FETCH_AND_NAND_2:\n-    case BUILT_IN_SYNC_FETCH_AND_NAND_4:\n-    case BUILT_IN_SYNC_FETCH_AND_NAND_8:\n-\n     case BUILT_IN_SYNC_ADD_AND_FETCH_1:\n-    case BUILT_IN_SYNC_ADD_AND_FETCH_2:\n-    case BUILT_IN_SYNC_ADD_AND_FETCH_4:\n-    case BUILT_IN_SYNC_ADD_AND_FETCH_8:\n-    case BUILT_IN_SYNC_ADD_AND_FETCH_16:\n-\n     case BUILT_IN_SYNC_SUB_AND_FETCH_1:\n-    case BUILT_IN_SYNC_SUB_AND_FETCH_2:\n-    case BUILT_IN_SYNC_SUB_AND_FETCH_4:\n-    case BUILT_IN_SYNC_SUB_AND_FETCH_8:\n-    case BUILT_IN_SYNC_SUB_AND_FETCH_16:\n-\n     case BUILT_IN_SYNC_OR_AND_FETCH_1:\n-    case BUILT_IN_SYNC_OR_AND_FETCH_2:\n-    case BUILT_IN_SYNC_OR_AND_FETCH_4:\n-    case BUILT_IN_SYNC_OR_AND_FETCH_8:\n-    case BUILT_IN_SYNC_OR_AND_FETCH_16:\n-\n     case BUILT_IN_SYNC_AND_AND_FETCH_1:\n-    case BUILT_IN_SYNC_AND_AND_FETCH_2:\n-    case BUILT_IN_SYNC_AND_AND_FETCH_4:\n-    case BUILT_IN_SYNC_AND_AND_FETCH_8:\n-    case BUILT_IN_SYNC_AND_AND_FETCH_16:\n-\n     case BUILT_IN_SYNC_XOR_AND_FETCH_1:\n-    case BUILT_IN_SYNC_XOR_AND_FETCH_2:\n-    case BUILT_IN_SYNC_XOR_AND_FETCH_4:\n-    case BUILT_IN_SYNC_XOR_AND_FETCH_8:\n-    case BUILT_IN_SYNC_XOR_AND_FETCH_16:\n-\n     case BUILT_IN_SYNC_NAND_AND_FETCH_1:\n-    case BUILT_IN_SYNC_NAND_AND_FETCH_2:\n-    case BUILT_IN_SYNC_NAND_AND_FETCH_4:\n-    case BUILT_IN_SYNC_NAND_AND_FETCH_8:\n-\n     case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1:\n-    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2:\n-    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4:\n-    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8:\n-    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16:\n-\n     case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1:\n-    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2:\n-    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4:\n-    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8:\n-    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16:\n-\n     case BUILT_IN_SYNC_LOCK_TEST_AND_SET_1:\n-    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_2:\n-    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_4:\n-    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_8:\n-    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_16:\n-\n     case BUILT_IN_SYNC_LOCK_RELEASE_1:\n-    case BUILT_IN_SYNC_LOCK_RELEASE_2:\n-    case BUILT_IN_SYNC_LOCK_RELEASE_4:\n-    case BUILT_IN_SYNC_LOCK_RELEASE_8:\n-    case BUILT_IN_SYNC_LOCK_RELEASE_16:\n-\n     case BUILT_IN_ATOMIC_EXCHANGE_1:\n-    case BUILT_IN_ATOMIC_EXCHANGE_2:\n-    case BUILT_IN_ATOMIC_EXCHANGE_4:\n-    case BUILT_IN_ATOMIC_EXCHANGE_8:\n-    case BUILT_IN_ATOMIC_EXCHANGE_16:\n-\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1:\n-    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2:\n-    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n-    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n-    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n-\n     case BUILT_IN_ATOMIC_STORE_1:\n-    case BUILT_IN_ATOMIC_STORE_2:\n-    case BUILT_IN_ATOMIC_STORE_4:\n-    case BUILT_IN_ATOMIC_STORE_8:\n-    case BUILT_IN_ATOMIC_STORE_16:\n-\n     case BUILT_IN_ATOMIC_ADD_FETCH_1:\n-    case BUILT_IN_ATOMIC_ADD_FETCH_2:\n-    case BUILT_IN_ATOMIC_ADD_FETCH_4:\n-    case BUILT_IN_ATOMIC_ADD_FETCH_8:\n-    case BUILT_IN_ATOMIC_ADD_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_SUB_FETCH_1:\n-    case BUILT_IN_ATOMIC_SUB_FETCH_2:\n-    case BUILT_IN_ATOMIC_SUB_FETCH_4:\n-    case BUILT_IN_ATOMIC_SUB_FETCH_8:\n-    case BUILT_IN_ATOMIC_SUB_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_AND_FETCH_1:\n-    case BUILT_IN_ATOMIC_AND_FETCH_2:\n-    case BUILT_IN_ATOMIC_AND_FETCH_4:\n-    case BUILT_IN_ATOMIC_AND_FETCH_8:\n-    case BUILT_IN_ATOMIC_AND_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_NAND_FETCH_1:\n-    case BUILT_IN_ATOMIC_NAND_FETCH_2:\n-    case BUILT_IN_ATOMIC_NAND_FETCH_4:\n-    case BUILT_IN_ATOMIC_NAND_FETCH_8:\n-    case BUILT_IN_ATOMIC_NAND_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_XOR_FETCH_1:\n-    case BUILT_IN_ATOMIC_XOR_FETCH_2:\n-    case BUILT_IN_ATOMIC_XOR_FETCH_4:\n-    case BUILT_IN_ATOMIC_XOR_FETCH_8:\n-    case BUILT_IN_ATOMIC_XOR_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_OR_FETCH_1:\n-    case BUILT_IN_ATOMIC_OR_FETCH_2:\n-    case BUILT_IN_ATOMIC_OR_FETCH_4:\n-    case BUILT_IN_ATOMIC_OR_FETCH_8:\n-    case BUILT_IN_ATOMIC_OR_FETCH_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_ADD_1:\n-    case BUILT_IN_ATOMIC_FETCH_ADD_2:\n-    case BUILT_IN_ATOMIC_FETCH_ADD_4:\n-    case BUILT_IN_ATOMIC_FETCH_ADD_8:\n-    case BUILT_IN_ATOMIC_FETCH_ADD_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_SUB_1:\n-    case BUILT_IN_ATOMIC_FETCH_SUB_2:\n-    case BUILT_IN_ATOMIC_FETCH_SUB_4:\n-    case BUILT_IN_ATOMIC_FETCH_SUB_8:\n-    case BUILT_IN_ATOMIC_FETCH_SUB_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_AND_1:\n-    case BUILT_IN_ATOMIC_FETCH_AND_2:\n-    case BUILT_IN_ATOMIC_FETCH_AND_4:\n-    case BUILT_IN_ATOMIC_FETCH_AND_8:\n-    case BUILT_IN_ATOMIC_FETCH_AND_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_NAND_1:\n-    case BUILT_IN_ATOMIC_FETCH_NAND_2:\n-    case BUILT_IN_ATOMIC_FETCH_NAND_4:\n-    case BUILT_IN_ATOMIC_FETCH_NAND_8:\n-    case BUILT_IN_ATOMIC_FETCH_NAND_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_XOR_1:\n-    case BUILT_IN_ATOMIC_FETCH_XOR_2:\n-    case BUILT_IN_ATOMIC_FETCH_XOR_4:\n-    case BUILT_IN_ATOMIC_FETCH_XOR_8:\n-    case BUILT_IN_ATOMIC_FETCH_XOR_16:\n-\n     case BUILT_IN_ATOMIC_FETCH_OR_1:\n+      access_size = 1;\n+      goto do_atomic;\n+\n+    case BUILT_IN_ATOMIC_LOAD_2:\n+      is_store = false;\n+      /* FALLTHRU */\n+    case BUILT_IN_SYNC_FETCH_AND_ADD_2:\n+    case BUILT_IN_SYNC_FETCH_AND_SUB_2:\n+    case BUILT_IN_SYNC_FETCH_AND_OR_2:\n+    case BUILT_IN_SYNC_FETCH_AND_AND_2:\n+    case BUILT_IN_SYNC_FETCH_AND_XOR_2:\n+    case BUILT_IN_SYNC_FETCH_AND_NAND_2:\n+    case BUILT_IN_SYNC_ADD_AND_FETCH_2:\n+    case BUILT_IN_SYNC_SUB_AND_FETCH_2:\n+    case BUILT_IN_SYNC_OR_AND_FETCH_2:\n+    case BUILT_IN_SYNC_AND_AND_FETCH_2:\n+    case BUILT_IN_SYNC_XOR_AND_FETCH_2:\n+    case BUILT_IN_SYNC_NAND_AND_FETCH_2:\n+    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2:\n+    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2:\n+    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_2:\n+    case BUILT_IN_SYNC_LOCK_RELEASE_2:\n+    case BUILT_IN_ATOMIC_EXCHANGE_2:\n+    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2:\n+    case BUILT_IN_ATOMIC_STORE_2:\n+    case BUILT_IN_ATOMIC_ADD_FETCH_2:\n+    case BUILT_IN_ATOMIC_SUB_FETCH_2:\n+    case BUILT_IN_ATOMIC_AND_FETCH_2:\n+    case BUILT_IN_ATOMIC_NAND_FETCH_2:\n+    case BUILT_IN_ATOMIC_XOR_FETCH_2:\n+    case BUILT_IN_ATOMIC_OR_FETCH_2:\n+    case BUILT_IN_ATOMIC_FETCH_ADD_2:\n+    case BUILT_IN_ATOMIC_FETCH_SUB_2:\n+    case BUILT_IN_ATOMIC_FETCH_AND_2:\n+    case BUILT_IN_ATOMIC_FETCH_NAND_2:\n+    case BUILT_IN_ATOMIC_FETCH_XOR_2:\n     case BUILT_IN_ATOMIC_FETCH_OR_2:\n+      access_size = 2;\n+      goto do_atomic;\n+\n+    case BUILT_IN_ATOMIC_LOAD_4:\n+      is_store = false;\n+      /* FALLTHRU */\n+    case BUILT_IN_SYNC_FETCH_AND_ADD_4:\n+    case BUILT_IN_SYNC_FETCH_AND_SUB_4:\n+    case BUILT_IN_SYNC_FETCH_AND_OR_4:\n+    case BUILT_IN_SYNC_FETCH_AND_AND_4:\n+    case BUILT_IN_SYNC_FETCH_AND_XOR_4:\n+    case BUILT_IN_SYNC_FETCH_AND_NAND_4:\n+    case BUILT_IN_SYNC_ADD_AND_FETCH_4:\n+    case BUILT_IN_SYNC_SUB_AND_FETCH_4:\n+    case BUILT_IN_SYNC_OR_AND_FETCH_4:\n+    case BUILT_IN_SYNC_AND_AND_FETCH_4:\n+    case BUILT_IN_SYNC_XOR_AND_FETCH_4:\n+    case BUILT_IN_SYNC_NAND_AND_FETCH_4:\n+    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4:\n+    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4:\n+    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_4:\n+    case BUILT_IN_SYNC_LOCK_RELEASE_4:\n+    case BUILT_IN_ATOMIC_EXCHANGE_4:\n+    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n+    case BUILT_IN_ATOMIC_STORE_4:\n+    case BUILT_IN_ATOMIC_ADD_FETCH_4:\n+    case BUILT_IN_ATOMIC_SUB_FETCH_4:\n+    case BUILT_IN_ATOMIC_AND_FETCH_4:\n+    case BUILT_IN_ATOMIC_NAND_FETCH_4:\n+    case BUILT_IN_ATOMIC_XOR_FETCH_4:\n+    case BUILT_IN_ATOMIC_OR_FETCH_4:\n+    case BUILT_IN_ATOMIC_FETCH_ADD_4:\n+    case BUILT_IN_ATOMIC_FETCH_SUB_4:\n+    case BUILT_IN_ATOMIC_FETCH_AND_4:\n+    case BUILT_IN_ATOMIC_FETCH_NAND_4:\n+    case BUILT_IN_ATOMIC_FETCH_XOR_4:\n     case BUILT_IN_ATOMIC_FETCH_OR_4:\n+      access_size = 4;\n+      goto do_atomic;\n+\n+    case BUILT_IN_ATOMIC_LOAD_8:\n+      is_store = false;\n+      /* FALLTHRU */\n+    case BUILT_IN_SYNC_FETCH_AND_ADD_8:\n+    case BUILT_IN_SYNC_FETCH_AND_SUB_8:\n+    case BUILT_IN_SYNC_FETCH_AND_OR_8:\n+    case BUILT_IN_SYNC_FETCH_AND_AND_8:\n+    case BUILT_IN_SYNC_FETCH_AND_XOR_8:\n+    case BUILT_IN_SYNC_FETCH_AND_NAND_8:\n+    case BUILT_IN_SYNC_ADD_AND_FETCH_8:\n+    case BUILT_IN_SYNC_SUB_AND_FETCH_8:\n+    case BUILT_IN_SYNC_OR_AND_FETCH_8:\n+    case BUILT_IN_SYNC_AND_AND_FETCH_8:\n+    case BUILT_IN_SYNC_XOR_AND_FETCH_8:\n+    case BUILT_IN_SYNC_NAND_AND_FETCH_8:\n+    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8:\n+    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8:\n+    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_8:\n+    case BUILT_IN_SYNC_LOCK_RELEASE_8:\n+    case BUILT_IN_ATOMIC_EXCHANGE_8:\n+    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n+    case BUILT_IN_ATOMIC_STORE_8:\n+    case BUILT_IN_ATOMIC_ADD_FETCH_8:\n+    case BUILT_IN_ATOMIC_SUB_FETCH_8:\n+    case BUILT_IN_ATOMIC_AND_FETCH_8:\n+    case BUILT_IN_ATOMIC_NAND_FETCH_8:\n+    case BUILT_IN_ATOMIC_XOR_FETCH_8:\n+    case BUILT_IN_ATOMIC_OR_FETCH_8:\n+    case BUILT_IN_ATOMIC_FETCH_ADD_8:\n+    case BUILT_IN_ATOMIC_FETCH_SUB_8:\n+    case BUILT_IN_ATOMIC_FETCH_AND_8:\n+    case BUILT_IN_ATOMIC_FETCH_NAND_8:\n+    case BUILT_IN_ATOMIC_FETCH_XOR_8:\n     case BUILT_IN_ATOMIC_FETCH_OR_8:\n+      access_size = 8;\n+      goto do_atomic;\n+\n+    case BUILT_IN_ATOMIC_LOAD_16:\n+      is_store = false;\n+      /* FALLTHRU */\n+    case BUILT_IN_SYNC_FETCH_AND_ADD_16:\n+    case BUILT_IN_SYNC_FETCH_AND_SUB_16:\n+    case BUILT_IN_SYNC_FETCH_AND_OR_16:\n+    case BUILT_IN_SYNC_FETCH_AND_AND_16:\n+    case BUILT_IN_SYNC_FETCH_AND_XOR_16:\n+    case BUILT_IN_SYNC_FETCH_AND_NAND_16:\n+    case BUILT_IN_SYNC_ADD_AND_FETCH_16:\n+    case BUILT_IN_SYNC_SUB_AND_FETCH_16:\n+    case BUILT_IN_SYNC_OR_AND_FETCH_16:\n+    case BUILT_IN_SYNC_AND_AND_FETCH_16:\n+    case BUILT_IN_SYNC_XOR_AND_FETCH_16:\n+    case BUILT_IN_SYNC_NAND_AND_FETCH_16:\n+    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16:\n+    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16:\n+    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_16:\n+    case BUILT_IN_SYNC_LOCK_RELEASE_16:\n+    case BUILT_IN_ATOMIC_EXCHANGE_16:\n+    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n+    case BUILT_IN_ATOMIC_STORE_16:\n+    case BUILT_IN_ATOMIC_ADD_FETCH_16:\n+    case BUILT_IN_ATOMIC_SUB_FETCH_16:\n+    case BUILT_IN_ATOMIC_AND_FETCH_16:\n+    case BUILT_IN_ATOMIC_NAND_FETCH_16:\n+    case BUILT_IN_ATOMIC_XOR_FETCH_16:\n+    case BUILT_IN_ATOMIC_OR_FETCH_16:\n+    case BUILT_IN_ATOMIC_FETCH_ADD_16:\n+    case BUILT_IN_ATOMIC_FETCH_SUB_16:\n+    case BUILT_IN_ATOMIC_FETCH_AND_16:\n+    case BUILT_IN_ATOMIC_FETCH_NAND_16:\n+    case BUILT_IN_ATOMIC_FETCH_XOR_16:\n     case BUILT_IN_ATOMIC_FETCH_OR_16:\n+      access_size = 16;\n+      /* FALLTHRU */\n+    do_atomic:\n       {\n \tdest = gimple_call_arg (call, 0);\n \t/* DEST represents the address of a memory location.\n \t   instrument_derefs wants the memory location, so lets\n \t   dereference the address DEST before handing it to\n \t   instrument_derefs.  */\n-\tif (TREE_CODE (dest) == ADDR_EXPR)\n-\t  dest = TREE_OPERAND (dest, 0);\n-\telse if (TREE_CODE (dest) == SSA_NAME || TREE_CODE (dest) == INTEGER_CST)\n-\t  dest = build2 (MEM_REF, TREE_TYPE (TREE_TYPE (dest)),\n-\t\t\t dest, build_int_cst (TREE_TYPE (dest), 0));\n-\telse\n-\t  gcc_unreachable ();\n-\n-\taccess_size = int_size_in_bytes (TREE_TYPE (dest));\n+\ttree type = build_nonstandard_integer_type (access_size\n+\t\t\t\t\t\t    * BITS_PER_UNIT, 1);\n+\tdest = build2 (MEM_REF, type, dest,\n+\t\t       build_int_cst (build_pointer_type (char_type_node), 0));\n+\tbreak;\n       }\n \n     default:"}, {"sha": "13218ac30eb286f657e2d10907ff302ace8b965c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e463823a8dbedb956fda93af75c206f9ef3acd4", "patch": "@@ -1,5 +1,8 @@\n 2017-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/79944\n+\t* c-c++-common/asan/pr79944.c: New test.\n+\n \tPR target/79932\n \t* gcc.target/i386/pr79932-2.c: New test.\n "}, {"sha": "62c56981b201f342ac18ed589c7ae7e1123c717c", "filename": "gcc/testsuite/c-c++-common/asan/pr79944.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr79944.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e463823a8dbedb956fda93af75c206f9ef3acd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr79944.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr79944.c?ref=9e463823a8dbedb956fda93af75c206f9ef3acd4", "patch": "@@ -0,0 +1,18 @@\n+/* PR sanitizer/79944 */\n+/* { dg-do run } */\n+\n+struct S { int i; char p[1024]; };\n+\n+int\n+main ()\n+{\n+  struct S *p = (struct S *) __builtin_malloc (__builtin_offsetof (struct S, p) + 64);\n+  p->i = 5;\n+  asm volatile (\"\" : \"+r\" (p) : : \"memory\");\n+  __atomic_fetch_add ((int *) p, 5, __ATOMIC_RELAXED);\n+  asm volatile (\"\" : \"+r\" (p) : : \"memory\");\n+  if (p->i != 10)\n+    __builtin_abort ();\n+  __builtin_free (p);\n+  return 0;\n+}"}]}