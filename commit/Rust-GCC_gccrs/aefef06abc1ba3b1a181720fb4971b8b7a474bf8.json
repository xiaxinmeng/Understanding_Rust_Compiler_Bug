{"sha": "aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmZWYwNmFiYzFiYTNiMWExODE3MjBmYjQ5NzFiOGI3YTQ3NGJmOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:32:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:32:12Z"}, "message": "config/i386/i386.c: Use rtx_code_label\n\ngcc/\n\t* config/i386/i386.c (setup_incoming_varargs_64): Strengthen local\n\t\"label\" from rtx to rtx_code_label *.\n\t(ix86_expand_prologue): Likewise.\n\t(ix86_expand_split_stack_prologue): Likewise for locals \"label\",\n\t\"varargs_label\".\n\t(ix86_split_idivmod): Likewise for locals \"end_label\" and\n\t\"qimode_label\".\n\t(ix86_expand_branch): Likewise for local \"label2\".\n\t(ix86_expand_aligntest): Likewise for return type and local \"label\".\n\t(expand_set_or_movmem_via_loop): Likewise for locals \"out_label\" and\n\t\"top_label\".\n\t(expand_movmem_epilogue): Likewise for the various locals named\n\t\"label\".\n\t(expand_setmem_epilogue): Likewise.\n\t(expand_small_movmem_or_setmem): Likewise for local \"label\".\n\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves):\n\tStrengthen param \"done_label\" from rtx * to rtx_code_label **.\n\tStrengthen locals \"loop_label\" and \"label\" from rtx to\n\trtx_code_label *.\n\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves):\n\tLikewise for locals \"loop_label\", \"label\".\n\t(ix86_expand_set_or_movmem): Likewise for locals \"label\",\n\t\"jump_around_label\", \"hot_label\".\n\t(ix86_expand_strlensi_unroll_1): Likewise for locals\n\t\"align_2_label\", align_3_label\", \"align_4_label\", \"end_0_label\",\n\t\"end_2_label\".\n\t(x86_emit_floatuns): Likewise for locals \"neglab\", \"donelab\".\n\t(void ix86_emit_i387_log1p): Likewise for locals \"label1\",\n\t\"label2\", \"jump_label\".\n\t(ix86_expand_sse_compare_and_jump): Likewise for return type and\n\tlocal \"label\".\n\t(ix86_expand_lfloorceil): Likewise for local \"label\".\n\t(ix86_expand_rint): Likewise.\n\t(ix86_expand_floorceildf_32): Likewise.\n\t(ix86_expand_floorceil): Likewise.\n\t(ix86_expand_rounddf_32): Likewise.\n\t(ix86_expand_trunc): Likewise.\n\t(ix86_expand_truncdf_32): Likewise.\n\t(ix86_expand_round): Likewise.\n\nFrom-SVN: r214443", "tree": {"sha": "3f1b5665877423576d447467252859eeba0e7f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f1b5665877423576d447467252859eeba0e7f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefef06abc1ba3b1a181720fb4971b8b7a474bf8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7041fccb24d611126314e352dcdf2e6001bc384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7041fccb24d611126314e352dcdf2e6001bc384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7041fccb24d611126314e352dcdf2e6001bc384"}], "stats": {"total": 152, "additions": 105, "deletions": 47}, "files": [{"sha": "d1259e640972e2a9e27e87ee31019fd9a3ffa2bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefef06abc1ba3b1a181720fb4971b8b7a474bf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefef06abc1ba3b1a181720fb4971b8b7a474bf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "patch": "@@ -1,3 +1,45 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/i386/i386.c (setup_incoming_varargs_64): Strengthen local\n+\t\"label\" from rtx to rtx_code_label *.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_expand_split_stack_prologue): Likewise for locals \"label\",\n+\t\"varargs_label\".\n+\t(ix86_split_idivmod): Likewise for locals \"end_label\" and\n+\t\"qimode_label\".\n+\t(ix86_expand_branch): Likewise for local \"label2\".\n+\t(ix86_expand_aligntest): Likewise for return type and local \"label\".\n+\t(expand_set_or_movmem_via_loop): Likewise for locals \"out_label\" and\n+\t\"top_label\".\n+\t(expand_movmem_epilogue): Likewise for the various locals named\n+\t\"label\".\n+\t(expand_setmem_epilogue): Likewise.\n+\t(expand_small_movmem_or_setmem): Likewise for local \"label\".\n+\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves):\n+\tStrengthen param \"done_label\" from rtx * to rtx_code_label **.\n+\tStrengthen locals \"loop_label\" and \"label\" from rtx to\n+\trtx_code_label *.\n+\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves):\n+\tLikewise for locals \"loop_label\", \"label\".\n+\t(ix86_expand_set_or_movmem): Likewise for locals \"label\",\n+\t\"jump_around_label\", \"hot_label\".\n+\t(ix86_expand_strlensi_unroll_1): Likewise for locals\n+\t\"align_2_label\", align_3_label\", \"align_4_label\", \"end_0_label\",\n+\t\"end_2_label\".\n+\t(x86_emit_floatuns): Likewise for locals \"neglab\", \"donelab\".\n+\t(void ix86_emit_i387_log1p): Likewise for locals \"label1\",\n+\t\"label2\", \"jump_label\".\n+\t(ix86_expand_sse_compare_and_jump): Likewise for return type and\n+\tlocal \"label\".\n+\t(ix86_expand_lfloorceil): Likewise for local \"label\".\n+\t(ix86_expand_rint): Likewise.\n+\t(ix86_expand_floorceildf_32): Likewise.\n+\t(ix86_expand_floorceil): Likewise.\n+\t(ix86_expand_rounddf_32): Likewise.\n+\t(ix86_expand_trunc): Likewise.\n+\t(ix86_expand_truncdf_32): Likewise.\n+\t(ix86_expand_round): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/h8300/h8300-protos.h (final_prescan_insn): Strengthen"}, {"sha": "abef0cfcaaaa7b8b465dfb944ea95025600bdd6a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 63, "deletions": 47, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefef06abc1ba3b1a181720fb4971b8b7a474bf8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefef06abc1ba3b1a181720fb4971b8b7a474bf8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aefef06abc1ba3b1a181720fb4971b8b7a474bf8", "patch": "@@ -8263,7 +8263,8 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   if (ix86_varargs_fpr_size)\n     {\n       enum machine_mode smode;\n-      rtx label, test;\n+      rtx_code_label *label;\n+      rtx test;\n \n       /* Now emit code to save SSE registers.  The AX parameter contains number\n \t of SSE parameter registers used to call this function, though all we\n@@ -11217,7 +11218,8 @@ ix86_expand_prologue (void)\n \t{\n \t  if (ix86_cmodel == CM_LARGE_PIC)\n \t    {\n-\t      rtx label, tmp_reg;\n+\t      rtx_code_label *label;\n+\t      rtx tmp_reg;\n \n \t      gcc_assert (Pmode == DImode);\n \t      label = gen_label_rtx ();\n@@ -11907,9 +11909,10 @@ ix86_expand_split_stack_prologue (void)\n   struct ix86_frame frame;\n   HOST_WIDE_INT allocate;\n   unsigned HOST_WIDE_INT args_size;\n-  rtx label, limit, current, jump_insn, allocate_rtx, call_insn, call_fusage;\n+  rtx_code_label *label;\n+  rtx limit, current, jump_insn, allocate_rtx, call_insn, call_fusage;\n   rtx scratch_reg = NULL_RTX;\n-  rtx varargs_label = NULL_RTX;\n+  rtx_code_label *varargs_label = NULL;\n   rtx fn;\n \n   gcc_assert (flag_split_stack && reload_completed);\n@@ -12025,7 +12028,8 @@ ix86_expand_split_stack_prologue (void)\n \n \t  if (ix86_cmodel == CM_LARGE_PIC)\n \t    {\n-\t      rtx label, x;\n+\t      rtx_code_label *label;\n+\t      rtx x;\n \n \t      label = gen_label_rtx ();\n \t      emit_label (label);\n@@ -17667,7 +17671,7 @@ void\n ix86_split_idivmod (enum machine_mode mode, rtx operands[],\n \t\t    bool signed_p)\n {\n-  rtx end_label, qimode_label;\n+  rtx_code_label *end_label, *qimode_label;\n   rtx insn, div, mod;\n   rtx scratch, tmp0, tmp1, tmp2;\n   rtx (*gen_divmod4_1) (rtx, rtx, rtx, rtx);\n@@ -19925,7 +19929,8 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n     case TImode:\n       /* Expand DImode branch into multiple compare+branch.  */\n       {\n-\trtx lo[2], hi[2], label2;\n+\trtx lo[2], hi[2];\n+\trtx_code_label *label2;\n \tenum rtx_code code1, code2, code3;\n \tenum machine_mode submode;\n \n@@ -22734,10 +22739,10 @@ predict_jump (int prob)\n \n /* Helper function for the string operations below.  Dest VARIABLE whether\n    it is aligned to VALUE bytes.  If true, jump to the label.  */\n-static rtx\n+static rtx_code_label *\n ix86_expand_aligntest (rtx variable, int value, bool epilogue)\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   rtx tmpcount = gen_reg_rtx (GET_MODE (variable));\n   if (GET_MODE (variable) == DImode)\n     emit_insn (gen_anddi3 (tmpcount, variable, GEN_INT (value)));\n@@ -22832,7 +22837,8 @@ expand_set_or_movmem_via_loop (rtx destmem, rtx srcmem,\n \t\t\t       rtx count, enum machine_mode mode, int unroll,\n \t\t\t       int expected_size, bool issetmem)\n {\n-  rtx out_label, top_label, iter, tmp;\n+  rtx_code_label *out_label, *top_label;\n+  rtx iter, tmp;\n   enum machine_mode iter_mode = counter_mode (count);\n   int piece_size_n = GET_MODE_SIZE (mode) * unroll;\n   rtx piece_size = GEN_INT (piece_size_n);\n@@ -23149,7 +23155,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n     {\n       if (max_size > 4)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 4, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 4, true);\n \t  src = change_address (srcmem, SImode, srcptr);\n \t  dest = change_address (destmem, SImode, destptr);\n \t  emit_insn (gen_strmov (destptr, dest, srcptr, src));\n@@ -23158,7 +23164,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n \t}\n       if (max_size > 2)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 2, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 2, true);\n \t  src = change_address (srcmem, HImode, srcptr);\n \t  dest = change_address (destmem, HImode, destptr);\n \t  emit_insn (gen_strmov (destptr, dest, srcptr, src));\n@@ -23167,7 +23173,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n \t}\n       if (max_size > 1)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 1, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 1, true);\n \t  src = change_address (srcmem, QImode, srcptr);\n \t  dest = change_address (destmem, QImode, destptr);\n \t  emit_insn (gen_strmov (destptr, dest, srcptr, src));\n@@ -23182,7 +23188,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n \n       if (max_size > 4)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 4, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 4, true);\n \t  src = change_address (srcmem, SImode, srcptr);\n \t  dest = change_address (destmem, SImode, destptr);\n \t  emit_move_insn (dest, src);\n@@ -23195,7 +23201,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n \t}\n       if (max_size > 2)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 2, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 2, true);\n \t  tmp = gen_rtx_PLUS (Pmode, srcptr, offset);\n \t  src = change_address (srcmem, HImode, tmp);\n \t  tmp = gen_rtx_PLUS (Pmode, destptr, offset);\n@@ -23210,7 +23216,7 @@ expand_movmem_epilogue (rtx destmem, rtx srcmem,\n \t}\n       if (max_size > 1)\n \t{\n-\t  rtx label = ix86_expand_aligntest (count, 1, true);\n+\t  rtx_code_label *label = ix86_expand_aligntest (count, 1, true);\n \t  tmp = gen_rtx_PLUS (Pmode, srcptr, offset);\n \t  src = change_address (srcmem, QImode, tmp);\n \t  tmp = gen_rtx_PLUS (Pmode, destptr, offset);\n@@ -23326,7 +23332,7 @@ expand_setmem_epilogue (rtx destmem, rtx destptr, rtx value, rtx vec_value,\n     }\n   if (max_size > 16)\n     {\n-      rtx label = ix86_expand_aligntest (count, 16, true);\n+      rtx_code_label *label = ix86_expand_aligntest (count, 16, true);\n       if (TARGET_64BIT)\n \t{\n \t  dest = change_address (destmem, DImode, destptr);\n@@ -23350,7 +23356,7 @@ expand_setmem_epilogue (rtx destmem, rtx destptr, rtx value, rtx vec_value,\n     }\n   if (max_size > 8)\n     {\n-      rtx label = ix86_expand_aligntest (count, 8, true);\n+      rtx_code_label *label = ix86_expand_aligntest (count, 8, true);\n       if (TARGET_64BIT)\n \t{\n \t  dest = change_address (destmem, DImode, destptr);\n@@ -23368,23 +23374,23 @@ expand_setmem_epilogue (rtx destmem, rtx destptr, rtx value, rtx vec_value,\n     }\n   if (max_size > 4)\n     {\n-      rtx label = ix86_expand_aligntest (count, 4, true);\n+      rtx_code_label *label = ix86_expand_aligntest (count, 4, true);\n       dest = change_address (destmem, SImode, destptr);\n       emit_insn (gen_strset (destptr, dest, gen_lowpart (SImode, value)));\n       emit_label (label);\n       LABEL_NUSES (label) = 1;\n     }\n   if (max_size > 2)\n     {\n-      rtx label = ix86_expand_aligntest (count, 2, true);\n+      rtx_code_label *label = ix86_expand_aligntest (count, 2, true);\n       dest = change_address (destmem, HImode, destptr);\n       emit_insn (gen_strset (destptr, dest, gen_lowpart (HImode, value)));\n       emit_label (label);\n       LABEL_NUSES (label) = 1;\n     }\n   if (max_size > 1)\n     {\n-      rtx label = ix86_expand_aligntest (count, 1, true);\n+      rtx_code_label *label = ix86_expand_aligntest (count, 1, true);\n       dest = change_address (destmem, QImode, destptr);\n       emit_insn (gen_strset (destptr, dest, gen_lowpart (QImode, value)));\n       emit_label (label);\n@@ -23408,7 +23414,7 @@ expand_set_or_movmem_prologue (rtx destmem, rtx srcmem,\n     {\n       if (align <= i)\n \t{\n-\t  rtx label = ix86_expand_aligntest (destptr, i, false);\n+\t  rtx_code_label *label = ix86_expand_aligntest (destptr, i, false);\n \t  if (issetmem)\n \t    {\n \t      if (vec_value && i > GET_MODE_SIZE (GET_MODE (value)))\n@@ -23437,7 +23443,7 @@ expand_small_movmem_or_setmem (rtx destmem, rtx srcmem,\n \t\t\t       rtx count, int size,\n \t\t\t       rtx done_label, bool issetmem)\n {\n-  rtx label = ix86_expand_aligntest (count, size, false);\n+  rtx_code_label *label = ix86_expand_aligntest (count, size, false);\n   enum machine_mode mode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 1);\n   rtx modesize;\n   int n;\n@@ -23562,15 +23568,15 @@ expand_set_or_movmem_prologue_epilogue_by_misaligned_moves (rtx destmem, rtx src\n \t\t\t\t\t\t\t    enum machine_mode mode,\n \t\t\t\t\t\t\t    rtx value, rtx vec_value,\n \t\t\t\t\t\t\t    rtx *count,\n-\t\t\t\t\t\t\t    rtx *done_label,\n+\t\t\t\t\t\t\t    rtx_code_label **done_label,\n \t\t\t\t\t\t\t    int size,\n \t\t\t\t\t\t\t    int desired_align,\n \t\t\t\t\t\t\t    int align,\n \t\t\t\t\t\t\t    unsigned HOST_WIDE_INT *min_size,\n \t\t\t\t\t\t\t    bool dynamic_check,\n \t\t\t\t\t\t\t    bool issetmem)\n {\n-  rtx loop_label = NULL, label;\n+  rtx_code_label *loop_label = NULL, *label;\n   int n;\n   rtx modesize;\n   int prolog_size = 0;\n@@ -24168,9 +24174,9 @@ ix86_expand_set_or_movmem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n {\n   rtx destreg;\n   rtx srcreg = NULL;\n-  rtx label = NULL;\n+  rtx_code_label *label = NULL;\n   rtx tmp;\n-  rtx jump_around_label = NULL;\n+  rtx_code_label *jump_around_label = NULL;\n   HOST_WIDE_INT align = 1;\n   unsigned HOST_WIDE_INT count = 0;\n   HOST_WIDE_INT expected_size = -1;\n@@ -24444,7 +24450,7 @@ ix86_expand_set_or_movmem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n \t}\n       else\n \t{\n-\t  rtx hot_label = gen_label_rtx ();\n+\t  rtx_code_label *hot_label = gen_label_rtx ();\n \t  if (jump_around_label == NULL_RTX)\n \t    jump_around_label = gen_label_rtx ();\n \t  emit_cmp_and_jump_insns (count_exp, GEN_INT (dynamic_check - 1),\n@@ -24642,10 +24648,10 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n {\n   int align;\n   rtx tmp;\n-  rtx align_2_label = NULL_RTX;\n-  rtx align_3_label = NULL_RTX;\n-  rtx align_4_label = gen_label_rtx ();\n-  rtx end_0_label = gen_label_rtx ();\n+  rtx_code_label *align_2_label = NULL;\n+  rtx_code_label *align_3_label = NULL;\n+  rtx_code_label *align_4_label = gen_label_rtx ();\n+  rtx_code_label *end_0_label = gen_label_rtx ();\n   rtx mem;\n   rtx tmpreg = gen_reg_rtx (SImode);\n   rtx scratch = gen_reg_rtx (SImode);\n@@ -24769,7 +24775,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n     }\n   else\n     {\n-       rtx end_2_label = gen_label_rtx ();\n+       rtx_code_label *end_2_label = gen_label_rtx ();\n        /* Is zero in the first two bytes? */\n \n        emit_insn (gen_testsi_ccno_1 (tmpreg, GEN_INT (0x8080)));\n@@ -39549,7 +39555,8 @@ x86_maybe_negate_const_int (rtx *loc, enum machine_mode mode)\n void\n x86_emit_floatuns (rtx operands[2])\n {\n-  rtx neglab, donelab, i0, i1, f0, in, out;\n+  rtx_code_label *neglab, *donelab;\n+  rtx i0, i1, f0, in, out;\n   enum machine_mode mode, inmode;\n \n   inmode = GET_MODE (operands[1]);\n@@ -41334,8 +41341,8 @@ ix86_emit_fp_unordered_jump (rtx label)\n \n void ix86_emit_i387_log1p (rtx op0, rtx op1)\n {\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n+  rtx_code_label *label1 = gen_label_rtx ();\n+  rtx_code_label *label2 = gen_label_rtx ();\n \n   rtx tmp = gen_reg_rtx (XFmode);\n   rtx tmp2 = gen_reg_rtx (XFmode);\n@@ -41369,7 +41376,7 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n   rtx e1, e2, res, tmp, tmp1, half;\n   rtx scratch = gen_reg_rtx (HImode);\n   rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n-  rtx jump_label = gen_label_rtx ();\n+  rtx_code_label *jump_label = gen_label_rtx ();\n   rtx insn;\n   rtx (*gen_abs) (rtx, rtx);\n   rtx (*gen_neg) (rtx, rtx);\n@@ -41805,12 +41812,13 @@ ix86_expand_sse_fabs (rtx op0, rtx *smask)\n    swapping the operands if SWAP_OPERANDS is true.  The expanded\n    code is a forward jump to a newly created label in case the\n    comparison is true.  The generated label rtx is returned.  */\n-static rtx\n+static rtx_code_label *\n ix86_expand_sse_compare_and_jump (enum rtx_code code, rtx op0, rtx op1,\n                                   bool swap_operands)\n {\n   enum machine_mode fpcmp_mode = ix86_fp_compare_mode (code);\n-  rtx label, tmp;\n+  rtx_code_label *label;\n+  rtx tmp;\n \n   if (swap_operands)\n     {\n@@ -41914,7 +41922,8 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n    */\n   enum machine_mode fmode = GET_MODE (op1);\n   enum machine_mode imode = GET_MODE (op0);\n-  rtx ireg, freg, label, tmp;\n+  rtx ireg, freg, tmp;\n+  rtx_code_label *label;\n \n   /* reg = (long)op1 */\n   ireg = gen_reg_rtx (imode);\n@@ -41950,7 +41959,8 @@ ix86_expand_rint (rtx operand0, rtx operand1)\n         return copysign (xa, operand1);\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx res, xa, label, TWO52, mask;\n+  rtx res, xa, TWO52, mask;\n+  rtx_code_label *label;\n \n   res = gen_reg_rtx (mode);\n   emit_move_insn (res, operand1);\n@@ -41993,7 +42003,8 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n         return x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, TWO52, tmp, label, one, res, mask;\n+  rtx xa, TWO52, tmp, one, res, mask;\n+  rtx_code_label *label;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -42056,7 +42067,8 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n \treturn x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, xi, TWO52, tmp, label, one, res, mask;\n+  rtx xa, xi, TWO52, tmp, one, res, mask;\n+  rtx_code_label *label;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -42119,7 +42131,8 @@ ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n         return x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, xa2, dxa, TWO52, tmp, label, half, mhalf, one, res, mask;\n+  rtx xa, xa2, dxa, TWO52, tmp, half, mhalf, one, res, mask;\n+  rtx_code_label *label;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -42184,7 +42197,8 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n \treturn x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, xi, TWO52, label, res, mask;\n+  rtx xa, xi, TWO52, res, mask;\n+  rtx_code_label *label;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -42219,7 +42233,8 @@ void\n ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n {\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, mask, TWO52, label, one, res, smask, tmp;\n+  rtx xa, mask, TWO52, one, res, smask, tmp;\n+  rtx_code_label *label;\n \n   /* C code for SSE variant we expand below.\n         double xa = fabs (x), x2;\n@@ -42284,7 +42299,8 @@ ix86_expand_round (rtx operand0, rtx operand1)\n         return copysign (xa, x);\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx res, TWO52, xa, label, xi, half, mask;\n+  rtx res, TWO52, xa, xi, half, mask;\n+  rtx_code_label *label;\n   const struct real_format *fmt;\n   REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n "}]}