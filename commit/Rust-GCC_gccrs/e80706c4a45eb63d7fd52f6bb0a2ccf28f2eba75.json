{"sha": "e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwNzA2YzRhNDVlYjYzZDdmZDUyZjZiYjBhMmNjZjI4ZjJlYmE3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-26T00:07:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-26T00:07:52Z"}, "message": "re PR c++/10990 (Cannot convert with dynamic_cast<> to a private base class from within a member function)\n\n\tPR c++/10990\n\t* search.c (lookup_base_r): Rely on accessible_p, rather than\n\ttrying to emulate that logic here.\n\n\tPR c++/10990\n\t* g++.dg/rtti/dyncast1.C: New test.\n\t* g++.dg/abi/mangle4.C: Correct base-specifier access.\n\t* g++.dg/lookup/scoped1.C: Remove XFAIL.\n\t* g++.old-deja/g++.martin/pmf1.C: Correct base-specifier access.\n\nFrom-SVN: r68507", "tree": {"sha": "acea28b21525c5f54e938a92d72480006a29a635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acea28b21525c5f54e938a92d72480006a29a635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/comments", "author": null, "committer": null, "parents": [{"sha": "3fe18f1d4722d2cc202978537ec28ba3668e5cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe18f1d4722d2cc202978537ec28ba3668e5cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe18f1d4722d2cc202978537ec28ba3668e5cc8"}], "stats": {"total": 123, "additions": 93, "deletions": 30}, "files": [{"sha": "1ad3dc1954f1b7654276f3673a80ddb5ba4aa95e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -1,5 +1,9 @@\n 2003-06-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10990\n+\t* search.c (lookup_base_r): Rely on accessible_p, rather than\n+\ttrying to emulate that logic here.\n+\n \tPR c++/10931\n \t* call.c (convert_like): Pass issue_conversion_warnings.\n \t(convert_like_with_context): Likewise."}, {"sha": "84df08088eec1d0db86aa493cf537489d7b3c8f0", "filename": "gcc/cp/search.c", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -188,8 +188,6 @@ lookup_base_r (tree binfo, tree base, base_access access,\n       found = bk_same_type;\n       if (is_virtual)\n \tfound = bk_via_virtual;\n-      if (is_non_public)\n-\tfound = bk_inaccessible;\n       \n       if (!*binfo_ptr)\n \t*binfo_ptr = binfo;\n@@ -317,30 +315,62 @@ lookup_base (tree t, tree base, base_access access, base_kind *kind_ptr)\n   bk = lookup_base_r (t_binfo, base, access & ~ba_quiet,\n \t\t      0, 0, 0, &binfo);\n \n-  switch (bk)\n-    {\n-    case bk_inaccessible:\n-      binfo = NULL_TREE;\n-      if (!(access & ba_quiet))\n-\t{\n-\t  error (\"`%T' is an inaccessible base of `%T'\", base, t);\n-\t  binfo = error_mark_node;\n-\t}\n-      break;\n-    case bk_ambig:\n-      if (access != ba_any)\n-\t{\n-\t  binfo = NULL_TREE;\n-\t  if (!(access & ba_quiet))\n-\t    {\n-\t      error (\"`%T' is an ambiguous base of `%T'\", base, t);\n-\t      binfo = error_mark_node;\n-\t    }\n-\t}\n-      break;\n-    default:;\n-    }\n-  \n+  /* Check that the base is unambiguous and accessible.  */\n+  if (access != ba_any)\n+    switch (bk)\n+      {\n+      case bk_not_base:\n+\tbreak;\n+\n+      case bk_ambig:\n+\tbinfo = NULL_TREE;\n+\tif (!(access & ba_quiet))\n+\t  {\n+\t    error (\"`%T' is an ambiguous base of `%T'\", base, t);\n+\t    binfo = error_mark_node;\n+\t  }\n+\tbreak;\n+\n+      default:\n+\tif (access != ba_ignore\n+\t    /* If BASE is incomplete, then BASE and TYPE are probably\n+\t       the same, in which case BASE is accessible.  If they\n+\t       are not the same, then TYPE is invalid.  In that case,\n+\t       there's no need to issue another error here, and\n+\t       there's no implicit typedef to use in the code that\n+\t       follows, so we skip the check.  */\n+\t    && COMPLETE_TYPE_P (base))\n+\t  {\n+\t    tree decl;\n+\n+\t    /* [class.access.base]\n+\n+\t       A base class is said to be accessible if an invented public\n+\t       member of the base class is accessible.  */\n+\t    /* Rather than inventing a public member, we use the implicit\n+\t       public typedef created in the scope of every class.  */\n+\t    decl = TYPE_FIELDS (base);\n+\t    while (TREE_CODE (decl) != TYPE_DECL\n+\t\t   || !DECL_ARTIFICIAL (decl)\n+\t\t   || DECL_NAME (decl) != constructor_name (base))\n+\t      decl = TREE_CHAIN (decl);\n+\t    while (ANON_AGGR_TYPE_P (t))\n+\t      t = TYPE_CONTEXT (t);\n+\t    if (!accessible_p (t, decl))\n+\t      {\n+\t\tif (!(access & ba_quiet))\n+\t\t  {\n+\t\t    error (\"`%T' is an inaccessible base of `%T'\", base, t);\n+\t\t    binfo = error_mark_node;\n+\t\t  }\n+\t\telse\n+\t\t  binfo = NULL_TREE;\n+\t\tbk = bk_inaccessible;\n+\t      }\n+\t  }\n+\tbreak;\n+      }\n+\n   if (kind_ptr)\n     *kind_ptr = bk;\n   \n@@ -788,7 +818,7 @@ dfs_accessible_p (tree binfo, void *data)\n }\n \n /* Returns nonzero if it is OK to access DECL through an object\n-   indiated by BINFO in the context of DERIVED.  */\n+   indicated by BINFO in the context of DERIVED.  */\n \n static int\n protected_accessible_p (tree decl, tree derived, tree binfo)"}, {"sha": "c593d4e646d7cf27b05289a0dc63f360283f52b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -1,5 +1,11 @@\n 2003-06-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10990\n+\t* g++.dg/rtti/dyncast1.C: New test.\n+\t* g++.dg/abi/mangle4.C: Correct base-specifier access.\n+\t* g++.dg/lookup/scoped1.C: Remove XFAIL.\n+\t* g++.old-deja/g++.martin/pmf1.C: Correct base-specifier access.\n+\n \tPR c++/10931\n \t* g++.dg/expr/static_cast1.C: New test.\n \t"}, {"sha": "ec65654e8e2145fc0d4db32f885386f3a3715f57", "filename": "gcc/testsuite/g++.dg/abi/mangle4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle4.C?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n \n class A {};\n-class B : A {};\n+class B : public A {};\n \n template<const A* a> class C {};\n template<const B* b> class D {};"}, {"sha": "f1d3f403ea2a0244ced9d193e58942e3c9492c5d", "filename": "gcc/testsuite/g++.dg/lookup/scoped1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -17,6 +17,6 @@ struct C: public B\n     ::A::i1 = 1;\n     ::A::i2 = 1;\t\t// { dg-error \"(access)|(context)\" \"\" }\n     ::A::f1 ();\n-    ::A::f2 ();\t\t\t// { dg-error \"access\" \"\" { xfail *-*-* } }\n+    ::A::f2 ();\t\t\t// { dg-error \"\" }\n   }\n };"}, {"sha": "204b4462f93063257fa275442a527b39fd37b193", "filename": "gcc/testsuite/g++.dg/rtti/dyncast1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast1.C?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -0,0 +1,23 @@\n+class JunkBase\n+{\n+public:\n+    virtual void DoSomething( void ) = 0;\n+protected:\n+    virtual ~JunkBase( void ) {};\n+    JunkBase( void ) {}\n+};\n+\n+class Junk : protected JunkBase\n+{\n+public:\n+    Junk( void ) : JunkBase() {}\n+    virtual ~Junk( void ) {}\n+protected:\n+    inline JunkBase * AsBase( void )\n+    { return dynamic_cast< JunkBase * >( this ); }\n+    virtual void DoSomething( void ) { }\n+};\n+\n+\n+\n+"}, {"sha": "108754b28df3f4d2b69ff65f1af04681da694d5d", "filename": "gcc/testsuite/g++.old-deja/g++.martin/pmf1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpmf1.C?ref=e80706c4a45eb63d7fd52f6bb0a2ccf28f2eba75", "patch": "@@ -5,7 +5,7 @@\n \n struct B{};\n \n-struct D:B{\n+struct D: public B{\n   virtual void foo();\n };\n "}]}