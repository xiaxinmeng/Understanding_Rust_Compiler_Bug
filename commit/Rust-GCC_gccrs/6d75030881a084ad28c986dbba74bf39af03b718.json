{"sha": "6d75030881a084ad28c986dbba74bf39af03b718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ3NTAzMDg4MWEwODRhZDI4Yzk4NmRiYmE3NGJmMzlhZjAzYjcxOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T21:22:17Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T21:22:17Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r580", "tree": {"sha": "8a135e1fbcbd8ba8745e09085293b11e53818254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a135e1fbcbd8ba8745e09085293b11e53818254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d75030881a084ad28c986dbba74bf39af03b718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d75030881a084ad28c986dbba74bf39af03b718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d75030881a084ad28c986dbba74bf39af03b718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d75030881a084ad28c986dbba74bf39af03b718/comments", "author": null, "committer": null, "parents": [{"sha": "5089e22e2773856e0d0d90e80d1ba4e7f4c54b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5089e22e2773856e0d0d90e80d1ba4e7f4c54b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5089e22e2773856e0d0d90e80d1ba4e7f4c54b49"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "c04b8b86b21f0b0502b63b599f2caed0d34e2798", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d75030881a084ad28c986dbba74bf39af03b718/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d75030881a084ad28c986dbba74bf39af03b718/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=6d75030881a084ad28c986dbba74bf39af03b718", "patch": "@@ -211,7 +211,7 @@ secondary_reload_class (class, mode, in)\n /* Generate the rtx that comes from an address expression in the md file */\n /* The expression to be build is BASE[INDEX:SCALE].  To recognize this,\n    scale must be converted from an exponent (from ASHIFT) to a\n-   muliplier (for MULT). */\n+   multiplier (for MULT). */\n rtx\n gen_indexed_expr (base, index, scale)\n      rtx base, index, scale;\n@@ -380,22 +380,55 @@ print_operand (file, x, code)\n   else if (GET_CODE (x) == REG)\n     fprintf (file, \"%s\", reg_names[REGNO (x)]);\n   else if (GET_CODE (x) == MEM)\n-    output_address (XEXP (x, 0));\n+    {\n+      rtx tmp = XEXP (x, 0);\n+#ifndef PC_RELATIVE\n+      if (GET_CODE (tmp) == SYMBOL_REF || GET_CODE (tmp) == LABEL_REF)\n+\t{\n+\t  char *out = XSTR (tmp, 0);\n+\t  if (out[0] == '*')\n+\t    fprintf (file, \"@%s\", &out[1]);\n+\t  else\n+\t    ASM_OUTPUT_LABELREF (file, out);\n+\t}\n+      else\n+#endif\n+\toutput_address (XEXP (x, 0));\n+    }\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != DImode)\n-    if (GET_MODE (x) == DFmode)\n-      { \n-        union { double d; int i[2]; } u;\n-\tu.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n-\tPUT_IMMEDIATE_PREFIX(file);\n-\tfprintf (file, \"0d%.20e\", u.d); \n-      }\n-    else\n-      { \n-        union { double d; int i[2]; } u;\n-\tu.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n-\tPUT_IMMEDIATE_PREFIX(file);\n-\tfprintf (file, \"0f%.20e\", u.d); \n-      }\n+    {\n+      if (GET_MODE (x) == DFmode)\n+\t{ \n+\t  union { double d; int i[2]; } u;\n+\t  u.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n+\t  PUT_IMMEDIATE_PREFIX(file);\n+#ifdef SEQUENT_ASM\n+\t  /* Sequent likes it's floating point constants as integers */\n+\t  fprintf (file, \"0Dx%08x%08x\", u.i[1], u.i[0])l\n+#else\n+#ifdef ENCORE_ASM\n+\t  fprintf (file, \"0f%.20e\", u.d); \n+#else\n+\t  fprintf (file, \"0d%.20e\", u.d); \n+#endif\n+#endif\n+\t}\n+      else\n+\t{ \n+\t  union { double d; int i[2]; } u;\n+\t  u.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n+\t  PUT_IMMEDIATE_PREFIX(file);\n+#ifdef SEQUENT_ASM\n+\t  {\n+\t    union { float f; long l; } uu;\n+\t    uu.f = u.d;\n+\t    fprintf (file, \"0Fx%08x\", uu.l);\n+\t  }\n+#else\n+\t  fprintf (file, \"0f%.20e\", u.d); \n+#endif\n+\t}\n+    }\n   else\n     {\n       PUT_IMMEDIATE_PREFIX(file);"}, {"sha": "89e0980b4e14bf3f680cba122a4927934f9c1d24", "filename": "gcc/config/ns32k/pc532.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d75030881a084ad28c986dbba74bf39af03b718/gcc%2Fconfig%2Fns32k%2Fpc532.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d75030881a084ad28c986dbba74bf39af03b718/gcc%2Fconfig%2Fns32k%2Fpc532.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fpc532.h?ref=6d75030881a084ad28c986dbba74bf39af03b718", "patch": "@@ -57,7 +57,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define CPP_PREDEFINES \"-Dns32000 -Dns32532 -Dpc532 -Dunix\"\n \n /* Use pc relative addressing whenever possible,\n-   it's more efficient than absolute (out-ns32k.c)\n+   it's more efficient than absolute (ns32k.c)\n    You have to fix a bug in gas 1.38.1 to make this work with gas,\n    patch available from jkp@cs.hut.fi. */\n \n@@ -66,3 +66,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* This machine appears to use GAS syntax.  */\n \n #define GAS_SYNTAX\n+\n+/* Every address needs to use a base reg.  */\n+\n+#define BASE_REG_NEEDED"}]}