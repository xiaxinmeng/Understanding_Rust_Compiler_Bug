{"sha": "672ff0b6fd7f43aa5415bff60ab212b893b9f474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyZmYwYjZmZDdmNDNhYTU0MTViZmY2MGFiMjEyYjg5M2I5ZjQ3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-26T13:19:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-26T13:19:59Z"}, "message": "re PR tree-optimization/64715 (__builtin_object_size (..., 1) fails to locate subobject)\n\n\tPR tree-optimization/64715\n\t* passes.def: Add another instance of pass_object_sizes before\n\tccp1.\n\t* tree-object-size.c (pass_object_sizes::execute): In\n\tfirst_pass_instance, only handle __bos (, 1) and __bos (, 3)\n\tcalls, and keep the call in the IL, as {MIN,MAX}_EXPR of the\n\t__bos result and the computed constant.  Remove redundant\n\tchecks, obsoleted by gimple_call_builtin_p test.\n\n\t* gcc.dg/builtin-object-size-15.c: New test.\n\t* gcc.dg/pr64715-1.c: New test.\n\t* gcc.dg/pr64715-2.c: New test.\n\nFrom-SVN: r221694", "tree": {"sha": "103331a842bf4bd31af5f4ef2d0b06f0304344e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/103331a842bf4bd31af5f4ef2d0b06f0304344e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672ff0b6fd7f43aa5415bff60ab212b893b9f474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672ff0b6fd7f43aa5415bff60ab212b893b9f474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672ff0b6fd7f43aa5415bff60ab212b893b9f474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672ff0b6fd7f43aa5415bff60ab212b893b9f474/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d00dce2749c652a0d63b646695249a9c5a820b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00dce2749c652a0d63b646695249a9c5a820b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00dce2749c652a0d63b646695249a9c5a820b94"}], "stats": {"total": 149, "additions": 135, "deletions": 14}, "files": [{"sha": "6a1a43fa2858083f52b186020e659dab14730e94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -1,5 +1,14 @@\n 2015-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/64715\n+\t* passes.def: Add another instance of pass_object_sizes before\n+\tccp1.\n+\t* tree-object-size.c (pass_object_sizes::execute): In\n+\tfirst_pass_instance, only handle __bos (, 1) and __bos (, 3)\n+\tcalls, and keep the call in the IL, as {MIN,MAX}_EXPR of the\n+\t__bos result and the computed constant.  Remove redundant\n+\tchecks, obsoleted by gimple_call_builtin_p test.\n+\n \t* var-tracking.c (variable_tracking_main_1): Don't track\n \tvariables for targetm.no_register_allocation targets.\n "}, {"sha": "c839b7984ca79bf9234f0719c63d61bde1148fdb", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -77,6 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n       PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n \t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n \t  NEXT_PASS (pass_rename_ssa_copies);\n+\t  NEXT_PASS (pass_object_sizes);\n \t  NEXT_PASS (pass_ccp);\n \t  /* After CCP we rewrite no longer addressed locals into SSA\n \t     form if possible.  */"}, {"sha": "a0fb7634d51279a3f56c5525b86566e93979059d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -1,3 +1,10 @@\n+2015-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/64715\n+\t* gcc.dg/builtin-object-size-15.c: New test.\n+\t* gcc.dg/pr64715-1.c: New test.\n+\t* gcc.dg/pr64715-2.c: New test.\n+\n 2015-03-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/65519"}, {"sha": "97018572bf8352d12a6ed7c2cfed495cacd01307", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-15.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  struct A { char buf1[9]; char buf2[1]; } a;\n+\n+  if (__builtin_object_size (a.buf1 + (0 + 4), 1) != 5)\n+    abort ();\n+  char *p = a.buf1;\n+  p += 1;\n+  p += 3;\n+  if (__builtin_object_size (p, 1) != 5)\n+    abort ();\n+  p = (char *) &a;\n+  char *q = p + 1;\n+  char *r = q + 3;\n+  char *t = r;\n+  if (r != (char *) &a + 4)\n+    t = (char *) &a + 1;\n+  if (__builtin_object_size (t, 1) != 6)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fbb635393fb0afc32087b13dcd5608bc5746cdc0", "filename": "gcc/testsuite/gcc.dg/pr64715-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-1.c?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/64715 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern inline __attribute__ ((always_inline, gnu_inline, artificial, nothrow, leaf)) char *\n+strcpy (char *__restrict dest, const char *__restrict src)\n+{\n+  return __builtin___strcpy_chk (dest, src, __builtin_object_size (dest, 2 > 1));\n+}\n+\n+const char *str1 = \"JIHGFEDCBA\";\n+void bar (char *);\n+\n+void\n+foo ()\n+{\n+  struct A { char buf1[9]; char buf2[1]; } a;\n+  strcpy (a.buf1 + (0 + 4), str1 + 5);\n+  bar ((char *) &a);\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin___strcpy_chk\\[^;\\n\\r\\]*, 5\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "4c7b581f60e895599e00d8f672a3cafef4bc011e", "filename": "gcc/testsuite/gcc.dg/pr64715-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64715-2.c?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/64715 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void bar (char *, int);\n+\n+void\n+foo (int x)\n+{\n+  char p[16], *q;\n+  q = p;\n+  if (x)\n+    q = p + 3;\n+  __builtin___strcpy_chk (q, \"abcdefghijkl\", __builtin_object_size (q, 1));\n+  bar (p, x);\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_memcpy \\\\\\(\\[^;\\n\\r\\]*, \\\"abcdefghijkl\\\", 13\\\\\\);\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "828a3d02dbc8d1ce4d890122b431f4b1dba0667a", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672ff0b6fd7f43aa5415bff60ab212b893b9f474/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=672ff0b6fd7f43aa5415bff60ab212b893b9f474", "patch": "@@ -1268,25 +1268,60 @@ pass_object_sizes::execute (function *fun)\n \t    continue;\n \n \t  init_object_sizes ();\n+\n+\t  /* In the first pass instance, only attempt to fold\n+\t     __builtin_object_size (x, 1) and __builtin_object_size (x, 3),\n+\t     and rather than folding the builtin to the constant if any,\n+\t     create a MIN_EXPR or MAX_EXPR of the __builtin_object_size\n+\t     call result and the computed constant.  */\n+\t  if (first_pass_instance)\n+\t    {\n+\t      tree ost = gimple_call_arg (call, 1);\n+\t      if (tree_fits_uhwi_p (ost))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT object_size_type = tree_to_uhwi (ost);\n+\t\t  tree ptr = gimple_call_arg (call, 0);\n+\t\t  tree lhs = gimple_call_lhs (call);\n+\t\t  if ((object_size_type == 1 || object_size_type == 3)\n+\t\t      && (TREE_CODE (ptr) == ADDR_EXPR\n+\t\t\t  || TREE_CODE (ptr) == SSA_NAME)\n+\t\t      && lhs)\n+\t\t    {\n+\t\t      tree type = TREE_TYPE (lhs);\n+\t\t      unsigned HOST_WIDE_INT bytes\n+\t\t\t= compute_builtin_object_size (ptr, object_size_type);\n+\t\t      if (bytes != (unsigned HOST_WIDE_INT) (object_size_type == 1\n+\t\t\t\t\t\t\t     ? -1 : 0)\n+\t\t\t  && wi::fits_to_tree_p (bytes, type))\n+\t\t\t{\n+\t\t\t  tree tem = make_ssa_name (type);\n+\t\t\t  gimple_call_set_lhs (call, tem);\n+\t\t\t  enum tree_code code\n+\t\t\t    = object_size_type == 1 ? MIN_EXPR : MAX_EXPR;\n+\t\t\t  tree cst = build_int_cstu (type, bytes);\n+\t\t\t  gimple g = gimple_build_assign (lhs, code, tem, cst);\n+\t\t\t  gsi_insert_after (&i, g, GSI_NEW_STMT);\n+\t\t\t  update_stmt (call);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      continue;\n+\t    }\n+\n \t  result = fold_call_stmt (as_a <gcall *> (call), false);\n \t  if (!result)\n \t    {\n-\t      if (gimple_call_num_args (call) == 2\n-\t\t  && POINTER_TYPE_P (TREE_TYPE (gimple_call_arg (call, 0))))\n+\t      tree ost = gimple_call_arg (call, 1);\n+\n+\t      if (tree_fits_uhwi_p (ost))\n \t\t{\n-\t\t  tree ost = gimple_call_arg (call, 1);\n+\t\t  unsigned HOST_WIDE_INT object_size_type = tree_to_uhwi (ost);\n \n-\t\t  if (tree_fits_uhwi_p (ost))\n-\t\t    {\n-\t\t      unsigned HOST_WIDE_INT object_size_type\n-\t\t\t= tree_to_uhwi (ost);\n-\n-\t\t      if (object_size_type < 2)\n-\t\t\tresult = fold_convert (size_type_node,\n-\t\t\t\t\t       integer_minus_one_node);\n-\t\t      else if (object_size_type < 4)\n-\t\t\tresult = build_zero_cst (size_type_node);\n-\t\t    }\n+\t\t  if (object_size_type < 2)\n+\t\t    result = fold_convert (size_type_node,\n+\t\t\t\t\t   integer_minus_one_node);\n+\t\t  else if (object_size_type < 4)\n+\t\t    result = build_zero_cst (size_type_node);\n \t\t}\n \n \t      if (!result)"}]}