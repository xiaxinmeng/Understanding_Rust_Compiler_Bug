{"sha": "01eb211bade92275e39254cc5a0dc21834dbcac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlYjIxMWJhZGU5MjI3NWUzOTI1NGNjNWEwZGMyMTgzNGRiY2FjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-15T19:58:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-15T19:58:15Z"}, "message": "libstdc++: Implement LWG 3070 in path::lexically_relative\n\n\t* src/c++17/fs_path.cc [_GLIBCXX_FILESYSTEM_IS_WINDOWS]\n\t(is_disk_designator): New helper function.\n\t(path::_Parser::root_path()): Use is_disk_designator.\n\t(path::lexically_relative(const path&)): Implement resolution of\n\tLWG 3070.\n\t* testsuite/27_io/filesystem/path/generation/relative.cc: Check with\n\tpath components that look like a root-name.\n\nFrom-SVN: r278313", "tree": {"sha": "5bc1f1bc46184968c816940f078b28e0f8840525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bc1f1bc46184968c816940f078b28e0f8840525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01eb211bade92275e39254cc5a0dc21834dbcac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01eb211bade92275e39254cc5a0dc21834dbcac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01eb211bade92275e39254cc5a0dc21834dbcac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01eb211bade92275e39254cc5a0dc21834dbcac4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838fd641a6ffb7e4734321de14385bece3e4506b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838fd641a6ffb7e4734321de14385bece3e4506b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838fd641a6ffb7e4734321de14385bece3e4506b"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "e6094bd7a729713fa50e693d210322f37f277314", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=01eb211bade92275e39254cc5a0dc21834dbcac4", "patch": "@@ -1,5 +1,13 @@\n 2019-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/c++17/fs_path.cc [_GLIBCXX_FILESYSTEM_IS_WINDOWS]\n+\t(is_disk_designator): New helper function.\n+\t(path::_Parser::root_path()): Use is_disk_designator.\n+\t(path::lexically_relative(const path&)): Implement resolution of\n+\tLWG 3070.\n+\t* testsuite/27_io/filesystem/path/generation/relative.cc: Check with\n+\tpath components that look like a root-name.\n+\n \t* doc/doxygen/user.cfg.in: Add <stop_token>.\n \t* include/precompiled/stdc++.h: Likewise.\n \t* include/std/stop_token: Fix definition of std::nostopstate."}, {"sha": "5fba971fef670b4154e8adb447efccacc1d6c51e", "filename": "libstdc++-v3/src/c++17/fs_path.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc?ref=01eb211bade92275e39254cc5a0dc21834dbcac4", "patch": "@@ -47,6 +47,13 @@ static inline bool is_dir_sep(path::value_type ch)\n #endif\n }\n \n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+static inline bool is_disk_designator(std::wstring_view s)\n+{\n+  return s.length() == 2 && s[1] == L':';\n+}\n+#endif\n+\n struct path::_Parser\n {\n   using string_view_type = std::basic_string_view<value_type>;\n@@ -117,7 +124,7 @@ struct path::_Parser\n \t  ++pos;\n       }\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-    else if (len > 1 && input[1] == L':')\n+    else if (is_disk_designator(input.substr(0, 2)))\n       {\n \t// got disk designator\n \troot.first.str = input.substr(0, 2);\n@@ -1747,6 +1754,19 @@ path::lexically_relative(const path& base) const\n   if (!has_root_directory() && base.has_root_directory())\n     return ret;\n   auto [a, b] = std::mismatch(begin(), end(), base.begin(), base.end());\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3070. path::lexically_relative causes surprising results if a filename\n+  // can also be a root-name\n+  if (!empty())\n+    for (auto& p : _M_cmpts)\n+      if (p._M_type() == _Type::_Filename && is_disk_designator(p.native()))\n+\treturn ret;\n+  if (!base.empty())\n+    for (auto i = b, end = base.end(); i != end; ++i)\n+      if (i->_M_type() == _Type::_Filename && is_disk_designator(i->native()))\n+\treturn ret;\n+#endif\n   if (a == end() && b == base.end())\n     ret = \".\";\n   else"}, {"sha": "b2ac27293b23e652412135ea8587923273c50ad3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generation/relative.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01eb211bade92275e39254cc5a0dc21834dbcac4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc?ref=01eb211bade92275e39254cc5a0dc21834dbcac4", "patch": "@@ -77,10 +77,26 @@ test03()\n   compare_paths( path(\"/dir/.\").lexically_relative(\"/dir/.\"), \".\" );\n }\n \n+void\n+test04()\n+{\n+#if defined(__MING32__) || defined(__MINGW64__)\n+  // DR 3070\n+  compare_paths(path(\"c:/f:o/bar\").lexically_relative(\"c:/f:o/bar\"), \".\");\n+  compare_paths(path(\"c:/foo/bar\").lexically_relative(\"c:/foo/b:r\"), \"..\\\\bar\");\n+  compare_paths(path(\"c:/foo/b:r\").lexically_relative(\"c:/foo/bar\"), \"..\\\\b:r\");\n+  compare_paths(path(\"c:/foo/b:\").lexically_relative(\"c:/foo/b:\"), \"\");\n+  compare_paths(path(\"c:/foo/bar\").lexically_relative(\"c:/foo/b:\"), \"\");\n+  compare_paths(path(\"c:/f:/bar\").lexically_relative(\"c:/foo/bar\"), \"\");\n+  compare_paths(path(\"foo/bar\").lexically_relative(\"foo/b:/bar\"), \"\");\n+#endif\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}