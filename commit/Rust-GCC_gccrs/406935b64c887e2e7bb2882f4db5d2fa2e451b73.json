{"sha": "406935b64c887e2e7bb2882f4db5d2fa2e451b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2OTM1YjY0Yzg4N2UyZTdiYjI4ODJmNGRiNWQyZmEyZTQ1MWI3Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:32:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:32:13Z"}, "message": "[multiple changes]\n\n2011-08-05  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch7.adb (Establish_Transient_Scope): in formal verification mode,\n\tif the node to wrap is a pragma check, this node and enclosed\n\texpression are not expanded, so do not apply any transformations here.\n\t* exp_prag.adb (Expand_Pragma_Check): document the need to avoid\n\tintroducing transient scopes.\n\n2011-08-05  Jose Ruiz  <ruiz@adacore.com>\n\n\t* adaint.c (__gnat_set_writable, __gnat_set_readable,\n\t__gnat_set_executable, __gnat_set_non_writable, __gnat_set_non_readable,\n\t__gnat_copy_attribs): On VxWorks 6.x and later, the required chmod\n\troutine is available, so we use the default implementation of these\n\tfunctions.\n\t* s-os_lib.ads (Copy_File, Copy_Time_Stamps): Document that there is\n\tsupport for copying attributes on VxWorks 6.\n\n2011-08-05  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb: Remove use of -gnatd.D.\n\t* gnat1drv.adb (Adjust_Global_Switches): adjust switches for ALFA mode\n\t* opt.ads: Simplify variables for ALFA mode, to keep one only\n\t* restrict.adb, sem_prag.adb: Adapt treatment done for CodePeer mode\n\tto ALFA mode.\n\n2011-08-05  Vincent Celier  <celier@adacore.com>\n\n\t* prj-conf.adb (Do_Autoconf): Look also for --RTS in\n\tBuilder'Default_Switches.\n\n2011-08-05  Vincent Celier  <celier@adacore.com>\n\n\t* makeusg.adb: Add lines for --create-map-file switches.\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): For a subprogram, if a type in the\n\tprofile is incomplete and the full view is available, replace it with\n\tthe full view.\n\t* sem_ch6.adb (Possible_Freeze): if a type in the profile is\n\tincomplete, freezing the subprogram is delayed until the full view is\n\tfrozen.\n\t* sem_type.adb (Disambiguate): an ambiguity between a user-defined\n\tfixed-point multiplication operator and the predefined operator is\n\tresolved in favor of the user-defined one.\n\nFrom-SVN: r177432", "tree": {"sha": "dc0e409b7901ff8a1bf1b8a411bb261a50030f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0e409b7901ff8a1bf1b8a411bb261a50030f21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406935b64c887e2e7bb2882f4db5d2fa2e451b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406935b64c887e2e7bb2882f4db5d2fa2e451b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406935b64c887e2e7bb2882f4db5d2fa2e451b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406935b64c887e2e7bb2882f4db5d2fa2e451b73/comments", "author": null, "committer": null, "parents": [{"sha": "cee0d6d251ede5cfd9873adec20f5a87b33022b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee0d6d251ede5cfd9873adec20f5a87b33022b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee0d6d251ede5cfd9873adec20f5a87b33022b7"}], "stats": {"total": 372, "additions": 295, "deletions": 77}, "files": [{"sha": "5759eaedfa10ca41702ead3ee9eff1a20f238bb3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -1,3 +1,50 @@\n+2011-08-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch7.adb (Establish_Transient_Scope): in formal verification mode,\n+\tif the node to wrap is a pragma check, this node and enclosed\n+\texpression are not expanded, so do not apply any transformations here.\n+\t* exp_prag.adb (Expand_Pragma_Check): document the need to avoid\n+\tintroducing transient scopes.\n+\n+2011-08-05  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* adaint.c (__gnat_set_writable, __gnat_set_readable,\n+\t__gnat_set_executable, __gnat_set_non_writable, __gnat_set_non_readable,\n+\t__gnat_copy_attribs): On VxWorks 6.x and later, the required chmod\n+\troutine is available, so we use the default implementation of these\n+\tfunctions.\n+\t* s-os_lib.ads (Copy_File, Copy_Time_Stamps): Document that there is\n+\tsupport for copying attributes on VxWorks 6.\n+\n+2011-08-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Remove use of -gnatd.D.\n+\t* gnat1drv.adb (Adjust_Global_Switches): adjust switches for ALFA mode\n+\t* opt.ads: Simplify variables for ALFA mode, to keep one only\n+\t* restrict.adb, sem_prag.adb: Adapt treatment done for CodePeer mode\n+\tto ALFA mode.\n+\n+2011-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-conf.adb (Do_Autoconf): Look also for --RTS in\n+\tBuilder'Default_Switches.\n+\n+2011-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeusg.adb: Add lines for --create-map-file switches.\n+\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): For a subprogram, if a type in the\n+\tprofile is incomplete and the full view is available, replace it with\n+\tthe full view.\n+\t* sem_ch6.adb (Possible_Freeze): if a type in the profile is\n+\tincomplete, freezing the subprogram is delayed until the full view is\n+\tfrozen.\n+\t* sem_type.adb (Disambiguate): an ambiguity between a user-defined\n+\tfixed-point multiplication operator and the predefined operator is\n+\tresolved in favor of the user-defined one.\n+\n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* init.c [__alpha__ && __osf__] (__gnat_error_handler): Use"}, {"sha": "556101df2e2e21e0a3b06d5c966f852cb1dc35dd", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -56,6 +56,10 @@ extern \"C\" {\n #include <vxCpuLib.h>\n #endif /* _WRS_CONFIG_SMP */\n \n+/* We need to know the VxWorks version because some file operations\n+   (such as chmod) are only available on VxWorks 6.  */\n+#include \"version.h\"\n+\n #endif /* VxWorks */\n \n #if (defined (__mips) && defined (__sgi)) || defined (__APPLE__)\n@@ -84,6 +88,17 @@ extern \"C\" {\n #include <unixio.h>\n #endif\n \n+#ifdef __vxworks\n+/* S_IREAD and S_IWRITE are not defined in VxWorks */\n+#ifndef S_IREAD\n+#define S_IREAD  (S_IRUSR | S_IRGRP | S_IROTH)\n+#endif\n+\n+#ifndef S_IWRITE\n+#define S_IWRITE (S_IWUSR)\n+#endif\n+#endif\n+\n /* We don't have libiberty, so use malloc.  */\n #define xmalloc(S) malloc (S)\n #define xrealloc(V,S) realloc (V,S)\n@@ -2191,7 +2206,8 @@ __gnat_set_writable (char *name)\n \n   SetFileAttributes\n     (wname, GetFileAttributes (wname) & ~FILE_ATTRIBUTE_READONLY);\n-#elif ! defined (__vxworks) && ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n+  ! defined(__nucleus__)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2213,7 +2229,8 @@ __gnat_set_executable (char *name)\n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_EXECUTE);\n \n-#elif ! defined (__vxworks) && ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n+  ! defined(__nucleus__)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2240,7 +2257,8 @@ __gnat_set_non_writable (char *name)\n \n   SetFileAttributes\n     (wname, GetFileAttributes (wname) | FILE_ATTRIBUTE_READONLY);\n-#elif ! defined (__vxworks) && ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n+  ! defined(__nucleus__)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2262,7 +2280,8 @@ __gnat_set_readable (char *name)\n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_READ);\n \n-#elif ! defined (__vxworks) && ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n+  ! defined(__nucleus__)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2283,7 +2302,8 @@ __gnat_set_non_readable (char *name)\n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, DENY_ACCESS, FILE_GENERIC_READ);\n \n-#elif ! defined (__vxworks) && ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n+  ! defined(__nucleus__)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -3555,7 +3575,8 @@ char __gnat_environment_char = '$';\n int\n __gnat_copy_attribs (char *from, char *to, int mode)\n {\n-#if defined (VMS) || defined (__vxworks) || defined (__nucleus__)\n+#if defined (VMS) || (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) || \\\n+  defined (__nucleus__)\n   return -1;\n \n #elif defined (_WIN32) && !defined (RTX)"}, {"sha": "329e687f06b363d22a01822582f4740d210b1e77", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -122,8 +122,8 @@ package body Debug is\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D\n-   --  d.E  SPARK generation mode\n-   --  d.F  Why generation mode\n+   --  d.E\n+   --  d.F  ALFA mode\n    --  d.G\n    --  d.H\n    --  d.I  SCIL generation mode\n@@ -580,11 +580,9 @@ package body Debug is\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n-   --  d.E  SPARK generation mode. Generate intermediate code for the sake of\n-   --       formal verification through SPARK and the SPARK toolset.\n-\n-   --  d.F  Why generation mode. Generate intermediate code for the sake of\n-   --       formal verification through Why and the Why VC generator.\n+   --  d.F  ALFA mode. Generate AST in a form suitable for formal verification,\n+   --       as well as additional cross reference information in ALI files to\n+   --       compute effects of subprograms.\n \n    --  d.I  Generate SCIL mode. Generate intermediate code for the sake of\n    --       of static analysis tools, and ensure additional tree consistency"}, {"sha": "443c6ff812a57994a2cd35fe78c0291c607c9a37", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -3532,6 +3532,16 @@ package body Exp_Ch7 is\n       elsif Nkind (Wrap_Node) = N_Iteration_Scheme then\n          null;\n \n+      --  In formal verification mode, if the node to wrap is a pragma check,\n+      --  this node and enclosed expression are not expanded, so do not apply\n+      --  any transformations here.\n+\n+      elsif ALFA_Mode\n+        and then Nkind (Wrap_Node) = N_Pragma\n+        and then Get_Pragma_Id (Wrap_Node) = Pragma_Check\n+      then\n+         null;\n+\n       else\n          Push_Scope (New_Internal_Entity (E_Block, Current_Scope, Loc, 'B'));\n          Set_Scope_Is_Transient;"}, {"sha": "5c3d2ca2777fd9f5e1cf4f119bbfe9589ba4263b", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -321,7 +321,10 @@ package body Exp_Prag is\n       --  be an explicit conditional in the source, not an implicit if, so we\n       --  do not call Make_Implicit_If_Statement.\n \n-      --  In formal verification mode, we keep the pragma check in the code\n+      --  In formal verification mode, we keep the pragma check in the code,\n+      --  and its enclosed expression is not expanded. This requires that no\n+      --  transient scope is introduced for pragma check in this mode in\n+      --  Exp_Ch7.Establish_Transient_Scope.\n \n       if ALFA_Mode then\n          return;"}, {"sha": "9bd0e9c1eb33140951eadb6e29212aec97de57fe", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -2461,6 +2461,18 @@ package body Freeze is\n                   Formal := First_Formal (E);\n                   while Present (Formal) loop\n                      F_Type := Etype (Formal);\n+\n+                     --  AI05-0151 : incomplete types can appear in a profile.\n+                     --  By the time the entity is frozen, the full view must\n+                     --  be available, unless it is a limited view.\n+\n+                     if Is_Incomplete_Type (F_Type)\n+                       and then Present (Full_View (F_Type))\n+                     then\n+                        F_Type := Full_View (F_Type);\n+                        Set_Etype (Formal, F_Type);\n+                     end if;\n+\n                      Freeze_And_Append (F_Type, N, Result);\n \n                      if Is_Private_Type (F_Type)\n@@ -2631,6 +2643,17 @@ package body Freeze is\n                      --  Freeze return type\n \n                      R_Type := Etype (E);\n+\n+                     --  AI05-0151: the return type may have been incomplete\n+                     --  at the point of declaration.\n+\n+                     if Ekind (R_Type) = E_Incomplete_Type\n+                       and then Present (Full_View (R_Type))\n+                     then\n+                        R_Type := Full_View (R_Type);\n+                        Set_Etype (E, R_Type);\n+                     end if;\n+\n                      Freeze_And_Append (R_Type, N, Result);\n \n                      --  Check suspicious return type for C function"}, {"sha": "be047854b62718af394d9938bb413f4090b38d34", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 77, "deletions": 8, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -390,17 +390,86 @@ procedure Gnat1drv is\n          Back_End_Handles_Limited_Types := False;\n       end if;\n \n-      --  Set switches for formal verification modes\n-\n-      if Debug_Flag_Dot_EE then\n-         ALFA_Through_SPARK_Mode := True;\n-      end if;\n+      --  Set switches for formal verification mode\n \n       if Debug_Flag_Dot_FF then\n-         ALFA_Through_Why_Mode := True;\n-      end if;\n \n-      ALFA_Mode := ALFA_Through_SPARK_Mode or ALFA_Through_Why_Mode;\n+         ALFA_Mode := True;\n+\n+         --  Turn off inlining, which would confuse formal verification output\n+         --  and gain nothing.\n+\n+         Front_End_Inlining := False;\n+         Inline_Active      := False;\n+\n+         --  Disable front-end optimizations, to keep the tree as close to the\n+         --  source code as possible, and also to avoid inconsistencies between\n+         --  trees when using different optimization switches.\n+\n+         Optimization_Level := 0;\n+\n+         --  Enable some restrictions systematically to simplify the generated\n+         --  code (and ease analysis). Note that restriction checks are also\n+         --  disabled in ALFA mode, see Restrict.Check_Restriction, and user\n+         --  specified Restrictions pragmas are ignored, see\n+         --  Sem_Prag.Process_Restrictions_Or_Restriction_Warnings.\n+\n+         Restrict.Restrictions.Set (No_Initialize_Scalars) := True;\n+\n+         --  Suppress all language checks since they are handled implicitly by\n+         --  the formal verification backend.\n+         --  Turn off dynamic elaboration checks.\n+         --  Turn off alignment checks.\n+         --  Turn off validity checking.\n+\n+         Suppress_Options := (others => True);\n+         Enable_Overflow_Checks := False;\n+         Dynamic_Elaboration_Checks := False;\n+         Reset_Validity_Check_Options;\n+\n+         --  Kill debug of generated code, since it messes up sloc values\n+\n+         Debug_Generated_Code := False;\n+\n+         --  Turn cross-referencing on in case it was disabled (e.g. by -gnatD)\n+\n+         Xref_Active := True;\n+\n+         --  Polling mode forced off, since it generates confusing junk\n+\n+         Polling_Required := False;\n+\n+         --  Set operating mode to Generate_Code to benefit from full front-end\n+         --  expansion (e.g. default arguments).\n+\n+         Operating_Mode := Generate_Code;\n+\n+         --  Skip call to gigi\n+\n+         Debug_Flag_HH := True;\n+\n+         --  Enable assertions and debug pragmas, since they give valuable\n+         --  extra information for formal verification.\n+\n+         Assertions_Enabled    := True;\n+         Debug_Pragmas_Enabled := True;\n+\n+         --  Turn off style check options since we are not interested in any\n+         --  front-end warnings when we are getting ALFA output.\n+\n+         Reset_Style_Check_Options;\n+\n+         --  Suppress compiler warnings, since what we are\n+         --  interested in here is what formal verification can find out.\n+\n+         Warning_Mode := Suppress;\n+\n+         --  Always perform semantics and generate ALI files in ALFA mode,\n+         --  so that a gnatmake -c -k will proceed further when possible.\n+\n+         Force_ALI_Tree_File := True;\n+         Try_Semantics := True;\n+      end if;\n    end Adjust_Global_Switches;\n \n    --------------------"}, {"sha": "f2889a26c0139d7af22825eb5fe76447524d8687", "filename": "gcc/ada/makeusg.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fmakeusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fmakeusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeusg.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -249,6 +249,14 @@ begin\n    Write_Eol;\n    Write_Eol;\n \n+   Write_Str (\"  --create-map-file   Create map file mainprog.map\");\n+   Write_Eol;\n+\n+   Write_Str (\"  --create-map-file=mapfile\");\n+   Write_Eol;\n+   Write_Str (\"                      Create map file mapfile\");\n+   Write_Eol;\n+\n    Write_Str (\"  --GCC=command       Use this gcc command\");\n    Write_Eol;\n "}, {"sha": "55e57c4c5e4ac92a36e9e648ba424bdc4b8b4c93", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -1855,24 +1855,16 @@ package Opt is\n    --  Used to store the ASIS version number read from a tree file to check if\n    --  it is the same as stored in the ASIS version number in Tree_IO.\n \n-   -----------------------------------\n-   -- Modes for Formal Verification --\n-   -----------------------------------\n+   ----------------------------------\n+   -- Mode for Formal Verification --\n+   ----------------------------------\n \n-   --  These modes are currently defined through debug flags\n+   --  This mode is currently defined through a debug flag\n \n    ALFA_Mode : Boolean := False;\n-   --  Set True if ALFA_Through_SPARK_Mode or else ALFA_Through_Why_Mode\n-\n-   ALFA_Through_SPARK_Mode : Boolean := False;\n-   --  Specific compiling mode targeting formal verification through\n-   --  the generation of SPARK code for those parts of the input code that\n-   --  belong to the ALFA subset of Ada. Set by debug flag -gnatd.E.\n-\n-   ALFA_Through_Why_Mode : Boolean := False;\n-   --  Specific compiling mode targeting formal verification through\n-   --  the generation of Why code for those parts of the input code that\n-   --  belong to the ALFA subset of Ada. Set by debuf flag -gnatd.F.\n+   --  Specific compiling mode targeting formal verification through the\n+   --  generation of Why code for those parts of the input code that belong to\n+   --  the ALFA subset of Ada. Set by debuf flag -gnatd.F.\n \n private\n "}, {"sha": "ab297e5ef979ca6034278484d39b935dfc48ff51", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -976,23 +976,24 @@ package body Prj.Conf is\n                   Builder : constant Package_Id :=\n                     Value_Of (Name_Builder, Project.Decl.Packages, Shared);\n                   Switch_Array_Id : Array_Element_Id;\n-                  Switch_Array : Array_Element;\n \n-                  Switch_List   : String_List_Id := Nil_String;\n-                  Switch : String_Element;\n+                  procedure Check_RTS_Switches;\n+                  --  Take into account eventual switches --RTS in\n+                  --  Switch_Array_Id.\n \n-                  Lang      : Name_Id;\n-                  Lang_Last : Positive;\n+                  ------------------------\n+                  -- Check_RTS_SWitches --\n+                  ------------------------\n \n-               begin\n-                  if Builder /= No_Package then\n-                     Switch_Array_Id :=\n-                       Value_Of\n-                         (Name      => Name_Switches,\n-                          In_Arrays =>\n-                            Shared.Packages.Table (Builder).Decl.Arrays,\n-                          Shared    => Shared);\n+                  procedure Check_RTS_Switches is\n+                     Switch_Array : Array_Element;\n+\n+                     Switch_List   : String_List_Id := Nil_String;\n+                     Switch : String_Element;\n \n+                     Lang      : Name_Id;\n+                     Lang_Last : Positive;\n+                  begin\n                      while Switch_Array_Id /= No_Array_Element loop\n                         Switch_Array :=\n                           Shared.Array_Elements.Table (Switch_Array_Id);\n@@ -1057,6 +1058,25 @@ package body Prj.Conf is\n \n                         Switch_Array_Id := Switch_Array.Next;\n                      end loop;\n+                  end Check_RTS_Switches;\n+\n+               begin\n+                  if Builder /= No_Package then\n+                     Switch_Array_Id :=\n+                       Value_Of\n+                         (Name      => Name_Switches,\n+                          In_Arrays =>\n+                            Shared.Packages.Table (Builder).Decl.Arrays,\n+                          Shared    => Shared);\n+                     Check_RTS_Switches;\n+\n+                     Switch_Array_Id :=\n+                       Value_Of\n+                         (Name      => Name_Default_Switches,\n+                          In_Arrays =>\n+                            Shared.Packages.Table (Builder).Decl.Arrays,\n+                          Shared    => Shared);\n+                     Check_RTS_Switches;\n                   end if;\n                end;\n             end if;"}, {"sha": "a8dcff6fd717797c41a6936954e02d91eab8f970", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -375,11 +375,12 @@ package body Restrict is\n    begin\n       Msg_Issued := False;\n \n-      --  In CodePeer mode, we do not want to check for any restriction, or set\n-      --  additional restrictions other than those already set in gnat1drv.adb\n-      --  so that we have consistency between each compilation.\n+      --  In CodePeer and ALFA mode, we do not want to check for any\n+      --  restriction, or set additional restrictions other than those already\n+      --  set in gnat1drv.adb so that we have consistency between each\n+      --  compilation.\n \n-      if CodePeer_Mode then\n+      if CodePeer_Mode or else ALFA_Mode then\n          return;\n       end if;\n "}, {"sha": "85e77ebbc74ac2a401c6be311615758d4d205463", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -343,7 +343,7 @@ package System.OS_Lib is\n    --  effect of \"cp -p\" on Unix systems, and None corresponds to the typical\n    --  effect of \"cp\" on Unix systems.\n \n-   --  Note: Time_Stamps and Full are not supported on VMS and VxWorks\n+   --  Note: Time_Stamps and Full are not supported on VMS and VxWorks 5\n \n    procedure Copy_File\n      (Name     : String;\n@@ -371,7 +371,7 @@ package System.OS_Lib is\n    --  furthermore Dest must be writable. Success will be set to True if the\n    --  operation was successful and False otherwise.\n    --\n-   --  Note: this procedure is not supported on VMS and VxWorks. On these\n+   --  Note: this procedure is not supported on VMS and VxWorks 5. On these\n    --  platforms, Success is always set to False.\n \n    function Read"}, {"sha": "537aa029e9492b716137dbf526b1f1ef0828d4da", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -4527,6 +4527,14 @@ package body Sem_Ch6 is\n \n          elsif Ekind (T) = E_Incomplete_Type and then From_With_Type (T) then\n             Set_Has_Delayed_Freeze (Designator);\n+\n+         --  AI05-0151 : incomplete types can now appear in the profile of a\n+         --  subprogram or entry declaration.\n+\n+         elsif Ekind (T) = E_Incomplete_Type\n+           and then Ada_Version >= Ada_2012\n+         then\n+            Set_Has_Delayed_Freeze (Designator);\n          end if;\n \n       end Possible_Freeze;"}, {"sha": "de3e3071608d6f2d7da28b278788ff57cff0f43f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -5059,9 +5059,9 @@ package body Sem_Prag is\n       --  Start of processing for Process_Restrictions_Or_Restriction_Warnings\n \n       begin\n-         --  Ignore all Restrictions pragma in CodePeer mode\n+         --  Ignore all Restrictions pragma in CodePeer and ALFA modes\n \n-         if CodePeer_Mode then\n+         if CodePeer_Mode or else ALFA_Mode then\n             return;\n          end if;\n \n@@ -5283,10 +5283,13 @@ package body Sem_Prag is\n       --  Start of processing for Process_Suppress_Unsuppress\n \n       begin\n-         --  Ignore pragma Suppress/Unsuppress in codepeer mode on user code:\n-         --  we want to generate checks for analysis purposes, as set by -gnatC\n+         --  Ignore pragma Suppress/Unsuppress in CodePeer and ALFA modes on\n+         --  user code: we want to generate checks for analysis purposes, as\n+         --  set respectively by -gnatC and -gnatd.F\n \n-         if CodePeer_Mode and then Comes_From_Source (N) then\n+         if (CodePeer_Mode or else ALFA_Mode)\n+           and then Comes_From_Source (N)\n+         then\n             return;\n          end if;\n \n@@ -9444,11 +9447,12 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n             Check_Restriction (No_Initialize_Scalars, N);\n \n-            --  Initialize_Scalars creates false positives in CodePeer,\n-            --  so ignore this pragma in this mode.\n+            --  Initialize_Scalars creates false positives in CodePeer, and\n+            --  incorrect negative results in ALFA mode, so ignore this pragma\n+            --  in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n-              and then not CodePeer_Mode\n+              and then not (CodePeer_Mode or else ALFA_Mode)\n             then\n                Init_Or_Norm_Scalars := True;\n                Initialize_Scalars := True;\n@@ -9475,10 +9479,10 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer mode, since this causes\n-            --  walk order issues.\n+            --  Pragma always active unless in CodePeer or ALFA mode, since\n+            --  this causes walk order issues.\n \n-            if not CodePeer_Mode then\n+            if not (CodePeer_Mode or else ALFA_Mode) then\n                Process_Inline (True);\n             end if;\n \n@@ -10917,10 +10921,11 @@ package body Sem_Prag is\n             Check_Arg_Count (0);\n             Check_Valid_Configuration_Pragma;\n \n-            --  Normalize_Scalars creates false positives in CodePeer, so\n-            --  ignore this pragma in this mode.\n+            --  Normalize_Scalars creates false positives in CodePeer, and\n+            --  incorrect negative results in ALFA mode, so ignore this pragma\n+            --  in these modes.\n \n-            if not CodePeer_Mode then\n+            if not (CodePeer_Mode or else ALFA_Mode) then\n                Normalize_Scalars := True;\n                Init_Or_Norm_Scalars := True;\n             end if;\n@@ -11287,9 +11292,9 @@ package body Sem_Prag is\n \n                   --  In the context of static code analysis, we do not need\n                   --  complex front-end expansions related to pragma Pack,\n-                  --  so disable handling of pragma Pack in this case.\n+                  --  so disable handling of pragma Pack in these cases.\n \n-                  if CodePeer_Mode then\n+                  if CodePeer_Mode or else ALFA_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}, {"sha": "14746773fd892051758bdeba85cc1b594a2be203", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406935b64c887e2e7bb2882f4db5d2fa2e451b73/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=406935b64c887e2e7bb2882f4db5d2fa2e451b73", "patch": "@@ -1932,11 +1932,18 @@ package body Sem_Type is\n          end if;\n \n       --  Otherwise, the predefined operator has precedence, or if the user-\n-      --  defined operation is directly visible we have a true ambiguity. If\n-      --  this is a fixed-point multiplication and division in Ada83 mode,\n+      --  defined operation is directly visible we have a true ambiguity.\n+\n+      --  If this is a fixed-point multiplication and division in Ada83 mode,\n       --  exclude the universal_fixed operator, which often causes ambiguities\n       --  in legacy code.\n \n+      --  Ditto in Ada2012, where an ambiguity may arise for an operation on\n+      --  a partial view that is completed with a fixed point type. See\n+      --  AI05-0020 and AI05-0209. The ambiguity is resolved in favor of the\n+      --  user-defined subprogram so that a client of the package has the\n+      --  same resulution as the body of the package.\n+\n       else\n          if (In_Open_Scopes (Scope (User_Subp))\n            or else Is_Potentially_Use_Visible (User_Subp))\n@@ -1945,7 +1952,13 @@ package body Sem_Type is\n             if Is_Fixed_Point_Type (Typ)\n               and then (Chars (Nam1) = Name_Op_Multiply\n                           or else Chars (Nam1) = Name_Op_Divide)\n-              and then Ada_Version = Ada_83\n+              and then\n+                (Ada_Version = Ada_83\n+                  or else\n+                   (Ada_Version >= Ada_2012\n+                      and then\n+                        In_Same_Declaration_List\n+                          (Typ, Unit_Declaration_Node (User_Subp))))\n             then\n                if It2.Nam = Predef_Subp then\n                   return It1;"}]}