{"sha": "6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxMmZhNmRjMDlhOGRlODQzZDlkNDkyMWQ5ZThmNzE3ZGVjNWE4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-12T19:37:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-12T19:37:21Z"}, "message": "i386.c (ix86_simd_clone_compute_vecsize_and_simdlen): Bump the upper SIMDLEN limits...\n\n\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n\tBump the upper SIMDLEN limits, so that if the return type or\n\tcharacteristic type if the return type is void can be passed in\n\tall available SSE2/AVX/AVX2/AVX512-F registers, the SIMDLEN is\n\tallowed.\n\n\t* c-c++-common/cilk-plus/SE/ef_error2.c (func2): Use vectorlength\n\t128 instead of 32.\n\nFrom-SVN: r234913", "tree": {"sha": "bca4d0d594bb17de510c93e22b980b91d0796409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca4d0d594bb17de510c93e22b980b91d0796409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13bd7c2bc5c87fd1c9193203bcc750dfed740802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bd7c2bc5c87fd1c9193203bcc750dfed740802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bd7c2bc5c87fd1c9193203bcc750dfed740802"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "949ab9e2c6d9f3c78e6b4637159f4e47b101b4ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "patch": "@@ -1,3 +1,11 @@\n+2016-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+\tBump the upper SIMDLEN limits, so that if the return type or\n+\tcharacteristic type if the return type is void can be passed in\n+\tall available SSE2/AVX/AVX2/AVX512-F registers, the SIMDLEN is\n+\tallowed.\n+\n 2016-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/70680"}, {"sha": "1fa007efdc3f8bd8e4db31b891e9cd1f9d570381", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "patch": "@@ -53761,7 +53761,7 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n \n   if (clonei->simdlen\n       && (clonei->simdlen < 2\n-\t  || clonei->simdlen > 128\n+\t  || clonei->simdlen > 1024\n \t  || (clonei->simdlen & (clonei->simdlen - 1)) != 0))\n     {\n       warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n@@ -53867,21 +53867,28 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       clonei->simdlen /= GET_MODE_BITSIZE (TYPE_MODE (base_type));\n     }\n   else if (clonei->simdlen > 16)\n-    switch (clonei->vecsize_int)\n-      {\n-      case 512:\n-\t/* For AVX512-F, support VLEN up to 128.  */\n-\tbreak;\n-      case 256:\n-\t/* For AVX2, support VLEN up to 32.  */\n-\tif (clonei->simdlen <= 32)\n-\t  break;\n-\t/* FALLTHRU */\n-      default:\n-\t/* Otherwise, support VLEN up to 16.  */\n-\twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n-\t\t    \"unsupported simdlen %d\", clonei->simdlen);\n-\treturn 0;\n+    {\n+      /* For compatibility with ICC, use the same upper bounds\n+\t for simdlen.  In particular, for CTYPE below, use the return type,\n+\t unless the function returns void, in that case use the characteristic\n+\t type.  If it is possible for given SIMDLEN to pass CTYPE value\n+\t in registers (8 [XYZ]MM* regs for 32-bit code, 16 [XYZ]MM* regs\n+\t for 64-bit code), accept that SIMDLEN, otherwise warn and don't\n+\t emit corresponding clone.  */\n+      tree ctype = ret_type;\n+      if (TREE_CODE (ret_type) == VOID_TYPE)\n+\tctype = base_type;\n+      int cnt = GET_MODE_BITSIZE (TYPE_MODE (ctype)) * clonei->simdlen;\n+      if (SCALAR_INT_MODE_P (TYPE_MODE (ctype)))\n+\tcnt /= clonei->vecsize_int;\n+      else\n+\tcnt /= clonei->vecsize_float;\n+      if (cnt > (TARGET_64BIT ? 16 : 8))\n+\t{\n+\t  warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t      \"unsupported simdlen %d\", clonei->simdlen);\n+\t  return 0;\n+\t}\n       }\n   return ret;\n }"}, {"sha": "d7964de422f4fff3f260fafc250ce8ce05a53ca3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "patch": "@@ -1,5 +1,8 @@\n 2016-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/cilk-plus/SE/ef_error2.c (func2): Use vectorlength\n+\t128 instead of 32.\n+\n \tPR c++/70571\n \t* g++.dg/ext/pr70571.C: New test.\n "}, {"sha": "89e0c39b02c3bbe4642f42087849c6bbf313959f", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512fa6dc09a8de843d9d4921d9e8f717dec5a80/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c?ref=6512fa6dc09a8de843d9d4921d9e8f717dec5a80", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n /* { dg-options \"-fcilkplus -Wall\" } */\n \n-__attribute__((vector (vectorlength(32)))) \n-//#pragma omp simd simdlen (32)\n+__attribute__((vector (vectorlength(128)))) \n+//#pragma omp simd simdlen (128)\n int func2 (int x, int y)  /* { dg-warning \"unsupported simdlen\" } */\n {\n   return (x+y);"}]}