{"sha": "c470260b418aad0883ea8399797eee81f836b425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MDI2MGI0MThhYWQwODgzZWE4Mzk5Nzk3ZWVlODFmODM2YjQyNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T12:52:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T12:52:49Z"}, "message": "(grokdeclarator): Properly validate __complex__ and create the various\nkinds of complex integer types.\n\nFrom-SVN: r6311", "tree": {"sha": "a52fd0d1dad3465db4b277842324db8a2f09e7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52fd0d1dad3465db4b277842324db8a2f09e7f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c470260b418aad0883ea8399797eee81f836b425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470260b418aad0883ea8399797eee81f836b425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470260b418aad0883ea8399797eee81f836b425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470260b418aad0883ea8399797eee81f836b425/comments", "author": null, "committer": null, "parents": [{"sha": "089481a600cfba2deacd7c599847227b60d8901f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089481a600cfba2deacd7c599847227b60d8901f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089481a600cfba2deacd7c599847227b60d8901f"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "aad110d34b69e165e1f835e659c188bf8cb69383", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470260b418aad0883ea8399797eee81f836b425/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470260b418aad0883ea8399797eee81f836b425/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c470260b418aad0883ea8399797eee81f836b425", "patch": "@@ -3994,6 +3994,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t}\n     }\n \n+  if ((specbits & (1 << (int) RID_COMPLEX))\n+      && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n+    {\n+      error (\"complex invalid for `%s'\", name);\n+      specbits &= ~ (1 << (int) RID_COMPLEX);\n+    }\n+\n   /* Decide whether an integer type is signed or not.\n      Optionally treat bitfields as signed by default.  */\n   if (specbits & 1 << (int) RID_UNSIGNED\n@@ -4031,9 +4038,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     type = long_integer_type_node;\n   else if (specbits & 1 << (int) RID_SHORT)\n     type = short_integer_type_node;\n-  else if (specbits & 1 << (int) RID_COMPLEX)\n+\n+  if (specbits & 1 << (int) RID_COMPLEX)\n     {\n-      if (defaulted_int)\n+      /* If we just have \"complex\", it is equivalent to\n+\t \"complex double\", but if any modifiers at all are specified it is\n+\t the complex form of TYPE.  E.g, \"complex short\" is\n+\t \"complex short int\".  */\n+\n+      if (defaulted_int && ! longlong\n+\t  && ! (specbits & ((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n+\t\t\t    | (1 << (int) RID_SIGNED)\n+\t\t\t    | (1 << (int) RID_UNSIGNED))))\n \ttype = complex_double_type_node;\n       else if (type == integer_type_node)\n \ttype = complex_integer_type_node;\n@@ -4044,7 +4060,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       else if (type == long_double_type_node)\n \ttype = complex_long_double_type_node;\n       else\n-\terror (\"invalid complex type\");\n+\ttype = build_complex_type (type);\n     }\n \n   /* Set CONSTP if this declaration is `const', whether by"}]}