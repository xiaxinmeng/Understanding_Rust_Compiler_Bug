{"sha": "69685820b3ac43bcf07ae609b0c1abbadc31753e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ODU4MjBiM2FjNDNiY2YwN2FlNjA5YjBjMWFiYmFkYzMxNzUzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T22:38:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T22:38:13Z"}, "message": "(assign_parms): Tighten up code that makes REG_EQUIV notes for parms.\n\nFrom-SVN: r12186", "tree": {"sha": "002945e6eb53242361a92783b96765d6e04612d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/002945e6eb53242361a92783b96765d6e04612d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69685820b3ac43bcf07ae609b0c1abbadc31753e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69685820b3ac43bcf07ae609b0c1abbadc31753e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69685820b3ac43bcf07ae609b0c1abbadc31753e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69685820b3ac43bcf07ae609b0c1abbadc31753e/comments", "author": null, "committer": null, "parents": [{"sha": "5fd7f37d2ea02f34575b9c9d9fc1ca28cda7e2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd7f37d2ea02f34575b9c9d9fc1ca28cda7e2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd7f37d2ea02f34575b9c9d9fc1ca28cda7e2f7"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "909b6959add0cb1aeaac403db9c44846f7bc51f3", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69685820b3ac43bcf07ae609b0c1abbadc31753e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69685820b3ac43bcf07ae609b0c1abbadc31753e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=69685820b3ac43bcf07ae609b0c1abbadc31753e", "patch": "@@ -3869,29 +3869,34 @@ assign_parms (fndecl, second_time)\n \t\t\t\t  XEXP (entry_parm, 0)))\n \t    {\n \t      rtx linsn = get_last_insn ();\n+\t      rtx sinsn, set;\n \n \t      /* Mark complex types separately.  */\n \t      if (GET_CODE (parmreg) == CONCAT)\n-\t        {\n-\t          REG_NOTES (linsn)\n-\t              = gen_rtx (EXPR_LIST, REG_EQUIV,\n-\t\t\t\t parm_reg_stack_loc[regnoi], REG_NOTES (linsn));\n-\n-\t\t  /* Now search backward for where we set the real part.  */\n-\t\t  for (; linsn != 0\n-\t\t       && ! reg_referenced_p (parm_reg_stack_loc[regnor],\n-\t\t\t\t\t      PATTERN (linsn));\n-\t\t       linsn = prev_nonnote_insn (linsn))\n-\t\t    ;\n-\n-\t          REG_NOTES (linsn)\n-\t              = gen_rtx (EXPR_LIST, REG_EQUIV,\n-\t\t\t\t parm_reg_stack_loc[regnor], REG_NOTES (linsn));\n-\t\t}\n-\t      else\n+\t\t/* Scan backwards for the set of the real and\n+\t\t   imaginary parts.  */\n+\t\tfor (sinsn = linsn; sinsn != 0;\n+\t\t     sinsn = prev_nonnote_insn (sinsn))\n+\t\t  {\n+\t\t    set = single_set (sinsn);\n+\t\t    if (set != 0\n+\t\t\t&& SET_DEST (set) == regno_reg_rtx [regnoi])\n+\t\t      REG_NOTES (sinsn)\n+\t\t\t= gen_rtx (EXPR_LIST, REG_EQUIV,\n+\t\t\t\t   parm_reg_stack_loc[regnoi],\n+\t\t\t\t   REG_NOTES (sinsn));\n+\t\t    else if (set != 0\n+\t\t\t     && SET_DEST (set) == regno_reg_rtx [regnor])\n+\t\t      REG_NOTES (sinsn)\n+\t\t\t= gen_rtx (EXPR_LIST, REG_EQUIV,\n+\t\t\t\t   parm_reg_stack_loc[regnor],\n+\t\t\t\t   REG_NOTES (sinsn));\n+\t\t  }\n+\t      else if ((set = single_set (linsn)) != 0\n+\t\t       && SET_DEST (set) == parmreg)\n \t        REG_NOTES (linsn)\n-\t         = gen_rtx (EXPR_LIST, REG_EQUIV,\n-\t\t\t    entry_parm, REG_NOTES (linsn));\n+\t\t  = gen_rtx (EXPR_LIST, REG_EQUIV,\n+\t\t\t     entry_parm, REG_NOTES (linsn));\n \t    }\n \n \t  /* For pointer data type, suggest pointer register.  */"}]}