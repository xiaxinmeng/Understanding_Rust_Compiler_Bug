{"sha": "a5d28a12246b32492c04d4ba551e70481d056363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkMjhhMTIyNDZiMzI0OTJjMDRkNGJhNTUxZTcwNDgxZDA1NjM2Mw==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2009-12-14T21:44:48Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2009-12-14T21:44:48Z"}, "message": "Remove code to un-precious-ize CC, CXX in libjava and v3.\n\nlibjava/:\n\t* configure.ac: Remove code to un-precious-ize CC, CXX,\n\tCXXFLAGS, CFLAGS, LDFLAGS.\n\t* configure: Regenerate.\n\nlibstdc++-v3/:\n\t* configure.ac: Remove code to un-precious-ize CC, CXX,\n\tCXXFLAGS, CFLAGS, LDFLAGS.\n\t* configure: Regenerate.\n\nFrom-SVN: r155240", "tree": {"sha": "afc70981452832c79e8ad5f97b34aaa766e9518b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc70981452832c79e8ad5f97b34aaa766e9518b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d28a12246b32492c04d4ba551e70481d056363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d28a12246b32492c04d4ba551e70481d056363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d28a12246b32492c04d4ba551e70481d056363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d28a12246b32492c04d4ba551e70481d056363/comments", "author": null, "committer": null, "parents": [{"sha": "2fef358e77a240b6853063c2f76729515c9ba6a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fef358e77a240b6853063c2f76729515c9ba6a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fef358e77a240b6853063c2f76729515c9ba6a8"}], "stats": {"total": 130, "additions": 45, "deletions": 85}, "files": [{"sha": "0701bd395a762dfe3a515cfe4519339ced33d2e1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -1,3 +1,9 @@\n+2009-12-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure.ac: Remove code to un-precious-ize CC, CXX,\n+\tCXXFLAGS, CFLAGS, LDFLAGS.\n+\t* configure: Regenerate.\n+\n 2009-12-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* include/pa-signal.h: Do not include ucontext.h."}, {"sha": "605225b19a0c36a9d58d939fe6ae2b202a59393b", "filename": "libjava/configure", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -961,8 +961,15 @@ with_jvm_jar_dir\n       ac_precious_vars='build_alias\n host_alias\n target_alias\n-CPP\n+CC\n+CFLAGS\n+LDFLAGS\n+LIBS\n CPPFLAGS\n+CXX\n+CXXFLAGS\n+CCC\n+CPP\n CXXCPP\n XMKMF'\n ac_subdirs_all='classpath libltdl'\n@@ -3339,18 +3346,9 @@ fi\n # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.\n \n \n-# (1) We use an abnormal CXX (without library references), so we\n-# must cache it under a different name.\n-# (2) CC, CFLAGS, CXX, CXXFLAGS, LDFLAGS must not be 'precious', or\n-# the non-multilib-adjusted value will be used in multilibs.\n-# (3) As a side effect, we must SUBST CXXFLAGS, CFLAGS, and LDFLAGS ourselves.\n-# (4) As another side effect, automake doesn't automatically include them\n-# in Makefile.in.\n-# (5) For libstdc++-v3, -fno-builtin must be present here so that a\n+# For libstdc++-v3, -fno-builtin must be present here so that a\n # non-conflicting form of std::exit can be guessed by AC_PROG_CXX, and\n # used in later tests.  This may not be necessary in libjava; I don't know.\n-\n-\n save_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS -fno-builtin\"\n ac_ext=c\n@@ -4406,10 +4404,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n CXXFLAGS=\"$save_CXXFLAGS\"\n \n-\n-\n-\n-\n am__api_version='1.11'\n \n # Find a good install program.  We prefer a C program (faster),\n@@ -13244,7 +13238,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13247 \"configure\"\n+#line 13241 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13350,7 +13344,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13353 \"configure\"\n+#line 13347 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19215,7 +19209,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 19218 \"configure\"\n+#line 19212 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "3721e1c34edcf63b1de65884c20831a57b1be9b9", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -142,27 +142,14 @@ AM_CONDITIONAL(JAVA_MAINTAINER_MODE, test \"$enable_java_maintainer_mode\" = yes)\n # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.\n GCC_NO_EXECUTABLES\n \n-# (1) We use an abnormal CXX (without library references), so we\n-# must cache it under a different name.\n-# (2) CC, CFLAGS, CXX, CXXFLAGS, LDFLAGS must not be 'precious', or\n-# the non-multilib-adjusted value will be used in multilibs.\n-# (3) As a side effect, we must SUBST CXXFLAGS, CFLAGS, and LDFLAGS ourselves.\n-# (4) As another side effect, automake doesn't automatically include them\n-# in Makefile.in.\n-# (5) For libstdc++-v3, -fno-builtin must be present here so that a\n+# For libstdc++-v3, -fno-builtin must be present here so that a\n # non-conflicting form of std::exit can be guessed by AC_PROG_CXX, and\n # used in later tests.  This may not be necessary in libjava; I don't know.\n-m4_rename([_AC_ARG_VAR_PRECIOUS],[glibcxx_PRECIOUS])\n-m4_define([_AC_ARG_VAR_PRECIOUS],[])\n save_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS -fno-builtin\"\n AC_PROG_CC\n AC_PROG_CXX\n CXXFLAGS=\"$save_CXXFLAGS\"\n-m4_rename_force([glibcxx_PRECIOUS],[_AC_ARG_VAR_PRECIOUS])\n-AC_SUBST(CFLAGS)\n-AC_SUBST(CXXFLAGS)\n-AC_SUBST(LDFLAGS)\n \n AM_INIT_AUTOMAKE([1.9.0])\n "}, {"sha": "1b57aedc4e6a9b53ac0ad26b461979a31d74b6e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -1,3 +1,9 @@\n+2009-12-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure.ac: Remove code to un-precious-ize CC, CXX,\n+\tCXXFLAGS, CFLAGS, LDFLAGS.\n+\t* configure: Regenerate.\n+\n 2009-12-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/queue/requirements/"}, {"sha": "6bd3c2273e5f980098ebe7aa363eca11df4c0fb5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -843,8 +843,15 @@ enable_version_specific_runtime_libs\n       ac_precious_vars='build_alias\n host_alias\n target_alias\n-CPP\n+CC\n+CFLAGS\n+LDFLAGS\n+LIBS\n CPPFLAGS\n+CXX\n+CXXFLAGS\n+CCC\n+CPP\n CXXCPP'\n \n \n@@ -3485,26 +3492,9 @@ am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'\n \n \n \n-# We're almost certainly being configured before anything else which uses\n-# C++, so all of our AC_PROG_* discoveries will be cached.  It's vital that\n-# we not cache the value of CXX that we \"discover\" here, because it's set\n-# to something unique for us and libjava.  Other target libraries need to\n-# find CXX for themselves.  We yank the rug out from under the normal AC_*\n-# process by sneakily renaming the cache variable.  This also lets us debug\n-# the value of \"our\" CXX in postmortems.\n-#\n-# We must also force CXX to /not/ be a precious variable, otherwise the\n-# wrong (non-multilib-adjusted) value will be used in multilibs.  This\n-# little trick also affects CPPFLAGS, CXXFLAGS, and LDFLAGS.  And as a side\n-# effect, CXXFLAGS is no longer automagically subst'd, so we have to do\n-# that ourselves.  Un-preciousing AC_PROG_CC also affects CC and CFLAGS.\n-#\n # -fno-builtin must be present here so that a non-conflicting form of\n # std::exit can be guessed by AC_PROG_CXX, and used in later tests.\n \n-\n-\n-\n save_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS -fno-builtin\"\n ac_ext=c\n@@ -4317,11 +4307,11 @@ if test -z \"$CXX\"; then\n set dummy $ac_tool_prefix$ac_prog; ac_word=$2\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n $as_echo_n \"checking for $ac_word... \" >&6; }\n-if test \"${glibcxx_cv_prog_CXX+set}\" = set; then :\n+if test \"${ac_cv_prog_CXX+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   if test -n \"$CXX\"; then\n-  glibcxx_cv_prog_CXX=\"$CXX\" # Let the user override the test.\n+  ac_cv_prog_CXX=\"$CXX\" # Let the user override the test.\n else\n as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n for as_dir in $PATH\n@@ -4330,7 +4320,7 @@ do\n   test -z \"$as_dir\" && as_dir=.\n     for ac_exec_ext in '' $ac_executable_extensions; do\n   if { test -f \"$as_dir/$ac_word$ac_exec_ext\" && $as_test_x \"$as_dir/$ac_word$ac_exec_ext\"; }; then\n-    glibcxx_cv_prog_CXX=\"$ac_tool_prefix$ac_prog\"\n+    ac_cv_prog_CXX=\"$ac_tool_prefix$ac_prog\"\n     $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n     break 2\n   fi\n@@ -4340,7 +4330,7 @@ IFS=$as_save_IFS\n \n fi\n fi\n-CXX=$glibcxx_cv_prog_CXX\n+CXX=$ac_cv_prog_CXX\n if test -n \"$CXX\"; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CXX\" >&5\n $as_echo \"$CXX\" >&6; }\n@@ -4560,9 +4550,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n CXXFLAGS=\"$save_CXXFLAGS\"\n \n-\n-\n-\n # Runs configure.host, and assorted other critical bits.  Sets\n # up critical shell variables.\n \n@@ -11454,7 +11441,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11457 \"configure\"\n+#line 11444 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11560,7 +11547,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11563 \"configure\"\n+#line 11550 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14897,7 +14884,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14900 \"configure\"\n+#line 14887 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15265,7 +15252,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15268 \"configure\"\n+#line 15255 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15302,7 +15289,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15305 \"configure\"\n+#line 15292 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15339,7 +15326,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15342 \"configure\"\n+#line 15329 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15377,7 +15364,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15380 \"configure\"\n+#line 15367 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15453,7 +15440,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15456 \"configure\"\n+#line 15443 \"configure\"\n int main()\n {\n   _Decimal32 d1;"}, {"sha": "2ee2bdbce28de7f83bba417b7954f8838fa3b160", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d28a12246b32492c04d4ba551e70481d056363/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=a5d28a12246b32492c04d4ba551e70481d056363", "patch": "@@ -78,34 +78,14 @@ AM_INIT_AUTOMAKE([1.9.3 no-define foreign no-dependencies -Wall -Wno-portability\n AH_TEMPLATE(PACKAGE, [Name of package])\n AH_TEMPLATE(VERSION, [Version number of package])\n \n-# We're almost certainly being configured before anything else which uses\n-# C++, so all of our AC_PROG_* discoveries will be cached.  It's vital that\n-# we not cache the value of CXX that we \"discover\" here, because it's set\n-# to something unique for us and libjava.  Other target libraries need to\n-# find CXX for themselves.  We yank the rug out from under the normal AC_*\n-# process by sneakily renaming the cache variable.  This also lets us debug\n-# the value of \"our\" CXX in postmortems.\n-#\n-# We must also force CXX to /not/ be a precious variable, otherwise the\n-# wrong (non-multilib-adjusted) value will be used in multilibs.  This\n-# little trick also affects CPPFLAGS, CXXFLAGS, and LDFLAGS.  And as a side\n-# effect, CXXFLAGS is no longer automagically subst'd, so we have to do\n-# that ourselves.  Un-preciousing AC_PROG_CC also affects CC and CFLAGS.\n-#\n # -fno-builtin must be present here so that a non-conflicting form of\n # std::exit can be guessed by AC_PROG_CXX, and used in later tests.\n \n-m4_define([ac_cv_prog_CXX],[glibcxx_cv_prog_CXX])\n-m4_rename([_AC_ARG_VAR_PRECIOUS],[glibcxx_PRECIOUS])\n-m4_define([_AC_ARG_VAR_PRECIOUS],[])\n save_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS -fno-builtin\"\n AC_PROG_CC\n AC_PROG_CXX\n CXXFLAGS=\"$save_CXXFLAGS\"\n-m4_rename_force([glibcxx_PRECIOUS],[_AC_ARG_VAR_PRECIOUS])\n-AC_SUBST(CFLAGS)\n-AC_SUBST(CXXFLAGS)\n \n # Runs configure.host, and assorted other critical bits.  Sets\n # up critical shell variables."}]}