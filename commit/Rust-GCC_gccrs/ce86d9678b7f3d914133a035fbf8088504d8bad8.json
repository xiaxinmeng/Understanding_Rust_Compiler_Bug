{"sha": "ce86d9678b7f3d914133a035fbf8088504d8bad8", "node_id": "C_kwDOANBUbNoAKGNlODZkOTY3OGI3ZjNkOTE0MTMzYTAzNWZiZjgwODg1MDRkOGJhZDg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-15T13:44:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-15T14:01:39Z"}, "message": "libstdc++: Fix detection of std::format support for __float128 [PR107693]\n\nstd::format gives linker errors on targets that define __float128 but\ndo not support using it with std::to_chars. This improves the handling\nof 128-bit flaoting-point types so they are disabled if unsupportable.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107693\n\t* include/std/format (_GLIBCXX_FORMAT_F128): Define to 2 when\n\tbasic_format_arg needs to use its _M_f128 member.\n\t(__extended_floating_point, __floating_point): Replace with ...\n\t(__formattable_floating_point): New concept.\n\t* testsuite/std/format/functions/format.cc: Check whether\n\t__float128 is supported. Also test _Float128.", "tree": {"sha": "e01701e4c0c82355aa7346e3e2fb48025c1de135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01701e4c0c82355aa7346e3e2fb48025c1de135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce86d9678b7f3d914133a035fbf8088504d8bad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce86d9678b7f3d914133a035fbf8088504d8bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce86d9678b7f3d914133a035fbf8088504d8bad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce86d9678b7f3d914133a035fbf8088504d8bad8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3895318beb8f21965c398c6b89ce6d542bda0aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3895318beb8f21965c398c6b89ce6d542bda0aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3895318beb8f21965c398c6b89ce6d542bda0aed"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "c79c8f2ce3160245615c16bae9e4ec9415efd24a", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce86d9678b7f3d914133a035fbf8088504d8bad8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce86d9678b7f3d914133a035fbf8088504d8bad8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=ce86d9678b7f3d914133a035fbf8088504d8bad8", "patch": "@@ -1213,40 +1213,35 @@ namespace __format\n       _Spec<_CharT> _M_spec{};\n     };\n \n+  // Decide how 128-bit floating-point types should be formatted (or not).\n+  // When supported, the typedef __format::__float128_t is the type that\n+  // format arguments should be converted to for storage in basic_format_arg.\n+  // Define the macro _GLIBCXX_FORMAT_F128 to say they're supported.\n+  // _GLIBCXX_FORMAT_F128=1 means __float128, _Float128 etc. will be formatted\n+  // by converting them to long double (or __ieee128 for powerpc64le).\n+  // _GLIBCXX_FORMAT_F128=2 means basic_format_arg needs to enable explicit\n+  // support for _Float128, rather than formatting it as another type.\n+#undef _GLIBCXX_FORMAT_F128\n+\n #ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n-# define _GLIBCXX_FORMAT_F128 1\n+\n+  // Format 128-bit floating-point types using __ieee128.\n   using __float128_t = __ieee128;\n-#elif defined _GLIBCXX_LDOUBLE_IS_IEEE_BINARY128\n # define _GLIBCXX_FORMAT_F128 1\n-  using __float128_t = long double;\n-#elif __FLT128_DIG__\n-# define _GLIBCXX_FORMAT_F128 2\n-  using __float128_t = _Float128;\n-#else\n-# undef _GLIBCXX_FORMAT_F128\n-#endif\n \n-#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n-  template<typename _Tp>\n-    concept __extended_floating_point = __is_same(_Tp, _Float128)\n-\t\t\t\t\t  || __is_same(_Tp, __ibm128)\n-\t\t\t\t\t  || __is_same(_Tp, __ieee128);\n-#elif _GLIBCXX_FORMAT_F128\n-  template<typename _Tp>\n-    concept __extended_floating_point = __is_same(_Tp, __float128_t);\n-#else\n-  template<typename _Tp>\n-    concept __extended_floating_point = false;\n-#endif\n+#elif defined _GLIBCXX_LDOUBLE_IS_IEEE_BINARY128\n \n-  template<typename _Tp>\n-    concept __floating_point = std::floating_point<_Tp>\n-\t\t\t\t || __extended_floating_point<_Tp>;\n+  // Format 128-bit floating-point types using long double.\n+  using __float128_t = long double;\n+# define _GLIBCXX_FORMAT_F128 1\n \n-  using std::to_chars;\n+#elif __FLT128_DIG__ && defined(__GLIBC_PREREQ) // see floating_to_chars.cc\n+\n+  // Format 128-bit floating-point types using _Float128.\n+  using __float128_t = _Float128;\n+# define _GLIBCXX_FORMAT_F128 2\n \n-#if _GLIBCXX_FORMAT_F128 == 2 \\\n-  && (__cplusplus == 202002L || !defined(_GLIBCXX_HAVE_FLOAT128_MATH))\n+# if __cplusplus == 202002L || !defined(_GLIBCXX_HAVE_FLOAT128_MATH)\n   // These overloads exist in the library, but are not declared for C++20.\n   // Make them available as std::__format::to_chars.\n   to_chars_result\n@@ -1260,8 +1255,16 @@ namespace __format\n   to_chars_result\n   to_chars(char*, char*, _Float128, chars_format, int) noexcept\n     __asm(\"_ZSt8to_charsPcS_DF128_St12chars_formati\");\n+# endif\n #endif\n \n+  using std::to_chars;\n+\n+  // We can format a floating-point type iff it is usable with to_chars.\n+  template<typename _Tp>\n+    concept __formattable_float = requires (_Tp __t, char* __p)\n+    { __format::to_chars(__p, __p, __t, chars_format::scientific, 6); };\n+\n   template<__char _CharT>\n     struct __formatter_fp\n     {\n@@ -1984,7 +1987,7 @@ namespace __format\n #endif\n \n   /// Format a floating-point value.\n-  template<__format::__floating_point _Tp, __format::__char _CharT>\n+  template<__format::__formattable_float _Tp, __format::__char _CharT>\n     struct formatter<_Tp, _CharT>\n     {\n       formatter() = default;\n@@ -2607,7 +2610,7 @@ namespace __format\n #ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n \t__ieee128 _M_f128;\n \t__ibm128  _M_ibm128;\n-#elif _GLIBCXX_FORMAT_F128\n+#elif _GLIBCXX_FORMAT_F128 == 2\n \t__float128_t _M_f128;\n #endif\n       };\n@@ -2663,7 +2666,7 @@ namespace __format\n \t  else if constexpr (is_same_v<_Tp, unsigned __int128>)\n \t    return __u._M_u128;\n #endif\n-#if _GLIBCXX_FORMAT_F128\n+#if _GLIBCXX_FORMAT_F128 == 2\n \t  else if constexpr (is_same_v<_Tp, __float128_t>)\n \t    return __u._M_f128;\n #endif\n@@ -2843,13 +2846,15 @@ namespace __format\n \t    return type_identity<_Float64>();\n # endif\n #endif\n-#ifdef __FLT128_DIG__\n+#if _GLIBCXX_FORMAT_F128\n+# if __FLT128_DIG__\n \t  else if constexpr (is_same_v<_Td, _Float128>)\n \t    return type_identity<__format::__float128_t>();\n-#endif\n-#if _GLIBCXX_USE_FLOAT128\n+# endif\n+# if __SIZEOF_FLOAT128__\n \t  else if constexpr (is_same_v<_Td, __float128>)\n \t    return type_identity<__format::__float128_t>();\n+# endif\n #endif\n \t  else if constexpr (__is_specialization_of<_Td, basic_string_view>)\n \t    return type_identity<basic_string_view<_CharT>>();\n@@ -2926,7 +2931,7 @@ namespace __format\n \t  else if constexpr (is_same_v<_Tp, _Float64>)\n \t    return _Arg_f64;\n #endif\n-#if _GLIBCXX_FORMAT_F128\n+#if _GLIBCXX_FORMAT_F128 == 2\n \t  else if constexpr (is_same_v<_Tp, __format::__float128_t>)\n \t    return _Arg_f128;\n #endif\n@@ -3015,7 +3020,7 @@ namespace __format\n #endif\n \t      // TODO _Arg_f16 etc.\n \n-#if _GLIBCXX_FORMAT_F128\n+#if _GLIBCXX_FORMAT_F128 == 2\n \t    case _Arg_f128:\n \t      return std::forward<_Visitor>(__vis)(_M_val._M_f128);\n #endif"}, {"sha": "165ef41b4b345f4503843c4fce2522955cbc7013", "filename": "libstdc++-v3/testsuite/std/format/functions/format.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce86d9678b7f3d914133a035fbf8088504d8bad8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce86d9678b7f3d914133a035fbf8088504d8bad8/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Ffunctions%2Fformat.cc?ref=ce86d9678b7f3d914133a035fbf8088504d8bad8", "patch": "@@ -5,6 +5,7 @@\n #include <string>\n #include <limits>\n #include <cstdint>\n+#include <cstdio>\n #include <testsuite_hooks.h>\n \n void\n@@ -289,12 +290,27 @@ test_p1652r1() // printf corner cases in std::format\n   VERIFY( s == \"3.31\" );\n }\n \n+template<typename T>\n+bool format_float()\n+{\n+    auto s = std::format(\"{:#} != {:<+7.3f}\", (T)-0.0, (T)0.5);\n+    return s == \"-0. != +0.500 \";\n+}\n+\n void\n test_float128()\n {\n #ifdef __SIZEOF_FLOAT128__\n-  auto s = std::format(\"{:#} != {:<+7.3f}\", (__float128)-0.0, (__float128)0.5);\n-  VERIFY( s == \"-0. != +0.500 \" );\n+  if constexpr (std::formattable<__float128, char>)\n+    VERIFY( format_float<__float128>() );\n+  else\n+    std::puts(\"Cannot format __float128 on this target\");\n+#endif\n+#if __FLT128_DIG__\n+  if constexpr (std::formattable<_Float128, char>)\n+    VERIFY( format_float<_Float128>() );\n+  else\n+    std::puts(\"Cannot format _Float128 on this target\");\n #endif\n }\n "}]}