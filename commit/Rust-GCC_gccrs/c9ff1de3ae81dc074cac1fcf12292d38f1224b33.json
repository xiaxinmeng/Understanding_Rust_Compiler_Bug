{"sha": "c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmZjFkZTNhZTgxZGMwNzRjYWMxZmNmMTIyOTJkMzhmMTIyNGIzMw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-11T21:31:35Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-11T21:31:35Z"}, "message": "re PR fortran/32937 (segfault with string and -fdefault-integer-8)\n\n\tPR fortran/32937\n\n\t* trans-array.c (gfc_conv_expr_descriptor): Use\n\tgfc_conv_const_charlen to generate backend_decl of right type.\n\t* trans-expr.c (gfc_conv_expr_op): Use correct return type.\n\t(gfc_build_compare_string): Use int type instead of default\n\tinteger kind for single character comparison.\n\t(gfc_conv_aliased_arg): Give backend_decl the right type.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Make\n\tcompare_string return an int.\n\n\t* gfortran.dg/char_length_6.f90: New test.\n\n\t* intrinsics/string_intrinsics.c (compare_string): Return an int.\n\t* libgfortran.h (compare_string): Likewise.\n\nFrom-SVN: r127363", "tree": {"sha": "f0f8bee8983ea715a8607999cc83e01bdcf62541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f8bee8983ea715a8607999cc83e01bdcf62541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4862826d55a2cdc42cfa3093b90349fc234dee6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4862826d55a2cdc42cfa3093b90349fc234dee6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4862826d55a2cdc42cfa3093b90349fc234dee6c"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "758ed4309bfabd49ee34905a3d60628ba77d5668", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -1,3 +1,15 @@\n+2007-08-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32937\n+\t* trans-array.c (gfc_conv_expr_descriptor): Use\n+\tgfc_conv_const_charlen to generate backend_decl of right type.\n+\t* trans-expr.c (gfc_conv_expr_op): Use correct return type.\n+\t(gfc_build_compare_string): Use int type instead of default\n+\tinteger kind for single character comparison.\n+\t(gfc_conv_aliased_arg): Give backend_decl the right type.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Make\n+\tcompare_string return an int.\n+\n 2007-08-11  Ian Lance Taylor  <iant@google.com>\n \n \t* f95-lang.c (gfc_get_alias_set): Change return type to"}, {"sha": "1cf00fd117bb843f08ad2a94c3cea374065eebcd", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -4573,9 +4573,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  else if (expr->ts.cl->length\n \t\t     && expr->ts.cl->length->expr_type == EXPR_CONSTANT)\n \t    {\n-\t      expr->ts.cl->backend_decl\n-\t\t= gfc_conv_mpz_to_tree (expr->ts.cl->length->value.integer,\n-\t\t\t\t\texpr->ts.cl->length->ts.kind);\n+\t      gfc_conv_const_charlen (expr->ts.cl);\n \t      loop.temp_ss->data.temp.type\n \t\t= gfc_typenode_for_spec (&expr->ts);\n \t      loop.temp_ss->string_length"}, {"sha": "4b0902f62d6afe055d7f913263a22d8c8a44d42d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -1999,8 +1999,7 @@ gfc_build_intrinsic_function_decls (void)\n   /* String functions.  */\n   gfor_fndecl_compare_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"compare_string\")),\n-\t\t\t\t     gfc_int4_type_node,\n-\t\t\t\t     4,\n+\t\t\t\t     integer_type_node, 4,\n \t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n \t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n "}, {"sha": "1ae601ff17a76344adf11b89b5dffce4bb71f991", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -1036,8 +1036,7 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   enum tree_code code;\n   gfc_se lse;\n   gfc_se rse;\n-  tree type;\n-  tree tmp;\n+  tree tmp, type;\n   int lop;\n   int checkstring;\n \n@@ -1186,7 +1185,7 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   if (lop)\n     {\n       /* The result of logical ops is always boolean_type_node.  */\n-      tmp = fold_build2 (code, type, lse.expr, rse.expr);\n+      tmp = fold_build2 (code, boolean_type_node, lse.expr, rse.expr);\n       se->expr = convert (type, tmp);\n     }\n   else\n@@ -1280,23 +1279,20 @@ gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2)\n {\n   tree sc1;\n   tree sc2;\n-  tree type;\n   tree tmp;\n \n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (str1)));\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (str2)));\n \n-  type = gfc_get_int_type (gfc_default_integer_kind);\n-\n   sc1 = gfc_to_single_character (len1, str1);\n   sc2 = gfc_to_single_character (len2, str2);\n \n   /* Deal with single character specially.  */\n   if (sc1 != NULL_TREE && sc2 != NULL_TREE)\n     {\n-      sc1 = fold_convert (type, sc1);\n-      sc2 = fold_convert (type, sc2);\n-      tmp = fold_build2 (MINUS_EXPR, type, sc1, sc2);\n+      sc1 = fold_convert (integer_type_node, sc1);\n+      sc2 = fold_convert (integer_type_node, sc2);\n+      tmp = fold_build2 (MINUS_EXPR, integer_type_node, sc1, sc2);\n     }\n    else\n      /* Build a call for the comparison.  */\n@@ -1860,6 +1856,7 @@ gfc_conv_aliased_arg (gfc_se * parmse, gfc_expr * expr,\n \t\t\t\tgfc_array_index_type);\n \t    tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t       tmp, tmp_se.expr);\n+\t    tmp = fold_convert (gfc_charlen_type_node, tmp);\n \t    expr->ts.cl->backend_decl = tmp;\n \n \t    break;"}, {"sha": "40291520026e6ce1f28a412e448eea6cabfaf886", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -1,3 +1,8 @@\n+2007-08-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32937\n+\t* gfortran.dg/char_length_6.f90: New test.\n+\n 2007-08-10  Ollie Wild  <aaw@google.com>\n \n \t* g++.dg/lookup/using18.C: New test."}, {"sha": "1a8b2f106c3113d6996a9dd5c8d9039e07f5b4a7", "filename": "gcc/testsuite/gfortran.dg/char_length_6.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_6.f90?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+!\n+program test\n+  character(2_8) :: c(2)\n+  logical :: l(2)\n+\n+  c = \"aa\"\n+  l = c .eq. \"aa\"\n+  if (any (.not. l)) call abort\n+\n+  call foo ([c(1)])\n+  l = c .eq. \"aa\"\n+  if (any (.not. l)) call abort\n+\n+contains\n+\n+  subroutine foo (c)\n+    character(2) :: c(1)\n+  end subroutine foo\n+\n+end"}, {"sha": "4e47f28575e2182059036b0072874a26f4501b76", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -1,3 +1,8 @@\n+2007-08-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsics/string_intrinsics.c (compare_string): Return an int.\n+\t* libgfortran.h (compare_string): Likewise.\n+\n 2007-08-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31270"}, {"sha": "be028114476601c5b8ed44caaec74a61a33ca678", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -79,7 +79,7 @@ export_proto(string_minmax);\n \n /* Strings of unequal length are extended with pad characters.  */\n \n-GFC_INTEGER_4\n+int\n compare_string (GFC_INTEGER_4 len1, const char * s1,\n \t\tGFC_INTEGER_4 len2, const char * s2)\n {"}, {"sha": "6013ce68618722353416bee4a8f136dc0d2057de", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ff1de3ae81dc074cac1fcf12292d38f1224b33/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=c9ff1de3ae81dc074cac1fcf12292d38f1224b33", "patch": "@@ -759,8 +759,8 @@ internal_proto(internal_unpack_c16);\n \n /* string_intrinsics.c */\n \n-extern GFC_INTEGER_4 compare_string (GFC_INTEGER_4, const char *,\n-\t\t\t\t     GFC_INTEGER_4, const char *);\n+extern int compare_string (GFC_INTEGER_4, const char *,\n+\t\t\t   GFC_INTEGER_4, const char *);\n iexport_proto(compare_string);\n \n /* random.c */"}]}