{"sha": "e660dbf7fe236acf74dfde6945bcc20d5468d2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2MGRiZjdmZTIzNmFjZjc0ZGZkZTY5NDViY2MyMGQ1NDY4ZDJhZg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2005-11-15T14:02:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:02:58Z"}, "message": "sem_ch6.adb (Check_Conformance): The null-exclusion feature can be omitted in case of stream attribute subprograms.\n\n2005-11-14  Javier Miranda  <miranda@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Conformance): The null-exclusion feature can be\n\tomitted in case of stream attribute subprograms.\n\t(Check_Inline_Pragma): Handle Inline and Inline_Always pragmas that\n\tappear immediately after a subprogram body, when there is no previous\n\tsubprogram declaration.\n\tChange name Is_Package to Is_Package_Or_Generic_Package\n\t(Process_Formals): A non null qualifier on a non null named access\n\ttype is not an error, and is a warning only if Redundant_Constructs\n\tare flagged.\n\nFrom-SVN: r107001", "tree": {"sha": "0646e5eaf6e1fcc93b10460d94f2a0e3d959ec1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0646e5eaf6e1fcc93b10460d94f2a0e3d959ec1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e660dbf7fe236acf74dfde6945bcc20d5468d2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e660dbf7fe236acf74dfde6945bcc20d5468d2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e660dbf7fe236acf74dfde6945bcc20d5468d2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e660dbf7fe236acf74dfde6945bcc20d5468d2af/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "950d3e7dae82649e89b09b4b471914a061bad5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950d3e7dae82649e89b09b4b471914a061bad5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950d3e7dae82649e89b09b4b471914a061bad5b9"}], "stats": {"total": 201, "additions": 149, "deletions": 52}, "files": [{"sha": "dae06218468c5aa0417cd9c9d5272063aeae671d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 149, "deletions": 52, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e660dbf7fe236acf74dfde6945bcc20d5468d2af/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e660dbf7fe236acf74dfde6945bcc20d5468d2af/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e660dbf7fe236acf74dfde6945bcc20d5468d2af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Expander; use Expander;\n with Exp_Ch7;  use Exp_Ch7;\n+with Exp_Tss;  use Exp_Tss;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Itypes;   use Itypes;\n@@ -236,7 +237,7 @@ package body Sem_Ch6 is\n       Analyze (P);\n \n       --  A call of the form A.B (X) may be an Ada05 call, which is rewritten\n-      --  as B(A, X). If the rewriting is successful, the call has been\n+      --  as B (A, X). If the rewriting is successful, the call has been\n       --  analyzed and we just return.\n \n       if Nkind (P) = N_Selected_Component\n@@ -890,43 +891,132 @@ package body Sem_Ch6 is\n       Missing_Ret  : Boolean;\n       P_Ent        : Entity_Id;\n \n-      procedure Check_Following_Pragma;\n-      --  If front-end inlining is enabled, look ahead to recognize a pragma\n-      --  that may appear after the body.\n+      procedure Check_Inline_Pragma (Spec : in out Node_Id);\n+      --  Look ahead to recognize a pragma that may appear after the body.\n+      --  If there is a previous spec, check that it appears in the same\n+      --  declarative part. If the pragma is Inline_Always, perform inlining\n+      --  unconditionally, otherwise only if Front_End_Inlining is requested.\n+      --  If the body acts as a spec, and inlining is required, we create a\n+      --  subprogram declaration for it, in order to attach the body to inline.\n+\n+      procedure Copy_Parameter_List (Plist : List_Id);\n+      --  Comment required ???\n \n       procedure Verify_Overriding_Indicator;\n       --  If there was a previous spec, the entity has been entered in the\n       --  current scope previously. If the body itself carries an overriding\n       --  indicator, check that it is consistent with the known status of the\n       --  entity.\n \n-      ----------------------------\n-      -- Check_Following_Pragma --\n-      ----------------------------\n+      -------------------------\n+      -- Check_Inline_Pragma --\n+      -------------------------\n \n-      procedure Check_Following_Pragma is\n-         Prag : Node_Id;\n+      procedure Check_Inline_Pragma (Spec : in out Node_Id) is\n+         Prag  : Node_Id;\n+         Plist : List_Id;\n \n       begin\n-         if Front_End_Inlining\n-           and then Is_List_Member (N)\n-           and then Present (Spec_Decl)\n-           and then List_Containing (N) = List_Containing (Spec_Decl)\n+         if not Expander_Active then\n+            return;\n+         end if;\n+\n+         if Is_List_Member (N)\n+           and then Present (Next (N))\n+           and then Nkind (Next (N)) = N_Pragma\n          then\n             Prag := Next (N);\n \n-            if Present (Prag)\n-              and then Nkind (Prag) = N_Pragma\n-              and then Get_Pragma_Id (Chars (Prag)) = Pragma_Inline\n+            if Nkind (Prag) = N_Pragma\n+              and then\n+                 (Get_Pragma_Id (Chars (Prag)) = Pragma_Inline_Always\n+                  or else\n+                    (Front_End_Inlining\n+                     and then Get_Pragma_Id (Chars (Prag)) = Pragma_Inline))\n               and then\n-              Chars\n-                (Expression (First (Pragma_Argument_Associations (Prag))))\n-                   = Chars (Body_Id)\n+                 Chars\n+                   (Expression (First (Pragma_Argument_Associations (Prag))))\n+                      = Chars (Body_Id)\n             then\n-               Analyze (Prag);\n+               Prag := Next (N);\n+            else\n+               Prag := Empty;\n             end if;\n+         else\n+            Prag := Empty;\n          end if;\n-      end Check_Following_Pragma;\n+\n+         if Present (Prag) then\n+            if Present (Spec_Id) then\n+               if List_Containing (N) =\n+                 List_Containing (Unit_Declaration_Node (Spec_Id))\n+               then\n+                  Analyze (Prag);\n+               end if;\n+\n+            else\n+               --  Create a subprogram declaration, to make treatment uniform.\n+\n+               declare\n+                  Subp : constant Entity_Id :=\n+                    Make_Defining_Identifier (Loc, Chars (Body_Id));\n+                  Decl : constant Node_Id :=\n+                    Make_Subprogram_Declaration (Loc,\n+                      Specification =>  New_Copy_Tree (Specification (N)));\n+               begin\n+                  Set_Defining_Unit_Name (Specification (Decl), Subp);\n+\n+                  if Present (First_Formal (Body_Id)) then\n+                     Plist := New_List;\n+                     Copy_Parameter_List (Plist);\n+                     Set_Parameter_Specifications\n+                       (Specification (Decl), Plist);\n+                  end if;\n+\n+                  Insert_Before (N, Decl);\n+                  Analyze (Decl);\n+                  Analyze (Prag);\n+                  Set_Has_Pragma_Inline (Subp);\n+\n+                  if Get_Pragma_Id (Chars (Prag)) = Pragma_Inline_Always then\n+                     Set_Is_Inlined (Subp);\n+                     Set_Next_Rep_Item (Prag, First_Rep_Item (Subp));\n+                     Set_First_Rep_Item (Subp, Prag);\n+                  end if;\n+\n+                  Spec := Subp;\n+               end;\n+            end if;\n+         end if;\n+      end Check_Inline_Pragma;\n+\n+      -------------------------\n+      -- Copy_Parameter_List --\n+      -------------------------\n+\n+      procedure Copy_Parameter_List (Plist : List_Id) is\n+         Formal : Entity_Id;\n+\n+      begin\n+         Formal := First_Formal (Body_Id);\n+\n+         while Present (Formal) loop\n+            Append\n+              (Make_Parameter_Specification (Loc,\n+                Defining_Identifier =>\n+                  Make_Defining_Identifier (Sloc (Formal),\n+                    Chars => Chars (Formal)),\n+                In_Present  => In_Present (Parent (Formal)),\n+                Out_Present => Out_Present (Parent (Formal)),\n+             Parameter_Type =>\n+                  New_Reference_To (Etype (Formal), Loc),\n+                Expression =>\n+                  New_Copy_Tree (Expression (Parent (Formal)))),\n+              Plist);\n+\n+            Next_Formal (Formal);\n+         end loop;\n+      end Copy_Parameter_List;\n \n       ---------------------------------\n       -- Verify_Overriding_Indicator --\n@@ -1071,6 +1161,8 @@ package body Sem_Ch6 is\n          end loop;\n       end if;\n \n+      Check_Inline_Pragma (Spec_Id);\n+\n       --  Case of fully private operation in the body of the protected type.\n       --  We must create a declaration for the subprogram, in order to attach\n       --  the protected subprogram that will be used in internal calls.\n@@ -1101,22 +1193,7 @@ package body Sem_Ch6 is\n                Plist := No_List;\n             end if;\n \n-            while Present (Formal) loop\n-               Append\n-                 (Make_Parameter_Specification (Loc,\n-                   Defining_Identifier =>\n-                     Make_Defining_Identifier (Sloc (Formal),\n-                       Chars => Chars (Formal)),\n-                   In_Present  => In_Present (Parent (Formal)),\n-                   Out_Present => Out_Present (Parent (Formal)),\n-                   Parameter_Type =>\n-                     New_Reference_To (Etype (Formal), Loc),\n-                   Expression =>\n-                     New_Copy_Tree (Expression (Parent (Formal)))),\n-                 Plist);\n-\n-               Next_Formal (Formal);\n-            end loop;\n+            Copy_Parameter_List (Plist);\n \n             if Nkind (Body_Spec) = N_Procedure_Specification then\n                New_Spec :=\n@@ -1337,14 +1414,11 @@ package body Sem_Ch6 is\n \n       elsif  Present (Spec_Id)\n         and then Expander_Active\n+        and then\n+          (Is_Always_Inlined (Spec_Id)\n+             or else (Has_Pragma_Inline (Spec_Id) and Front_End_Inlining))\n       then\n-         Check_Following_Pragma;\n-\n-         if Is_Always_Inlined (Spec_Id)\n-           or else (Has_Pragma_Inline (Spec_Id) and then Front_End_Inlining)\n-         then\n-            Build_Body_To_Inline (N, Spec_Id);\n-         end if;\n+         Build_Body_To_Inline (N, Spec_Id);\n       end if;\n \n       --  Ada 2005 (AI-262): In library subprogram bodies, after the analysis\n@@ -2451,9 +2525,29 @@ package body Sem_Ch6 is\n                     or else Is_Access_Constant (Etype (Old_Formal))\n                               /= Is_Access_Constant (Etype (New_Formal)))\n                then\n-                  Conformance_Error\n-                    (\"type of & does not match!\", New_Formal);\n-                  return;\n+                  --  It is allowed to omit the null-exclusion in case of\n+                  --  stream attribute subprograms\n+\n+                  declare\n+                     TSS_Name : TSS_Name_Type;\n+\n+                  begin\n+                     Get_Name_String (Chars (New_Id));\n+                     TSS_Name :=\n+                       TSS_Name_Type\n+                         (Name_Buffer\n+                            (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n+\n+                     if TSS_Name /= TSS_Stream_Read\n+                       and then TSS_Name /= TSS_Stream_Write\n+                       and then TSS_Name /= TSS_Stream_Input\n+                       and then TSS_Name /= TSS_Stream_Output\n+                     then\n+                        Conformance_Error\n+                          (\"type of & does not match!\", New_Formal);\n+                        return;\n+                     end if;\n+                  end;\n                end if;\n \n                --  Check default expressions for in parameters\n@@ -4696,7 +4790,7 @@ package body Sem_Ch6 is\n          Decl       : constant Node_Id := Unit_Declaration_Node (E);\n \n       begin\n-         if Is_Package (Current_Scope)\n+         if Is_Package_Or_Generic_Package (Current_Scope)\n            and then In_Private_Part (Current_Scope)\n          then\n             Priv_Decls :=\n@@ -5014,7 +5108,7 @@ package body Sem_Ch6 is\n                   --  the fact that the full view of a private extension\n                   --  re-inherits. It has to be dealt with.\n \n-                  if Is_Package (Current_Scope)\n+                  if Is_Package_Or_Generic_Package (Current_Scope)\n                     and then In_Private_Part (Current_Scope)\n                   then\n                      Check_Operation_From_Private_View (S, E);\n@@ -5423,9 +5517,12 @@ package body Sem_Ch6 is\n               and then Is_Access_Type (Formal_Type)\n               and then Null_Exclusion_Present (Param_Spec)\n             then\n-               if Can_Never_Be_Null (Formal_Type) then\n+               if Can_Never_Be_Null (Formal_Type)\n+                 and then Comes_From_Source (Related_Nod)\n+               then\n                   Error_Msg_N\n-                    (\"(Ada 2005) already a null-excluding type\", Related_Nod);\n+                    (\"null exclusion must apply to a type that does not \"\n+                       & \"exclude null ('R'M 3.10 (14)\", Related_Nod);\n                end if;\n \n                Formal_Type :="}]}