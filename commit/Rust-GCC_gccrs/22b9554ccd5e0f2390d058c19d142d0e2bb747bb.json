{"sha": "22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiOTU1NGNjZDVlMGYyMzkwZDA1OGMxOWQxNDJkMGUyYmI3NDdiYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-09-20T08:19:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-20T08:19:07Z"}, "message": "localename.cc (locale::_Imp): Remove typedefs.\n\n\n2000-09-19  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/localename.cc (locale::_Imp) : Remove typedefs.\n\t* bits/localefwd.h (locale::locale(const locale& __other, _Facet*\n\t__f): Consistency check,, call _Imp ctor with refererence argument\n\tof 1.\n\t* bits/localefwd.h: Change _S_num_categories to\n\t_S_categories_num. Add new data member, _S_facets_num, which is\n\tthe number of standard facets.\n\nFrom-SVN: r36550", "tree": {"sha": "e9af373fe09f9042abfcb5d4556b5e635dcab8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9af373fe09f9042abfcb5d4556b5e635dcab8f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/comments", "author": null, "committer": null, "parents": [{"sha": "98ee0cc56f40e98115b4a4ff38376c93edeb6457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee0cc56f40e98115b4a4ff38376c93edeb6457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ee0cc56f40e98115b4a4ff38376c93edeb6457"}], "stats": {"total": 151, "additions": 87, "deletions": 64}, "files": [{"sha": "73ea5e5e32c90a278c431754bf406c714b465c04", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "patch": "@@ -1,3 +1,13 @@\n+2000-09-19  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/localename.cc (locale::_Imp) : Remove typedefs.\t\n+\t* bits/localefwd.h (locale::locale(const locale& __other, _Facet*\n+\t__f): Consistency check,, call _Imp ctor with refererence argument\n+\tof 1.\n+\t* bits/localefwd.h: Change _S_num_categories to\n+\t_S_categories_num. Add new data member, _S_facets_num, which is\n+\tthe number of standard facets.\n+\n 2000-09-19  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/21_strings/howto.html:  Fix editor lossage from last commit."}, {"sha": "44e85604bdb62bd4414b75844eebd5871294b3a3", "filename": "libstdc++-v3/bits/localefwd.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h?ref=22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "patch": "@@ -294,13 +294,14 @@ namespace std\n     // The (shared) implementation\n     _Impl* \t\t_M_impl;  \n \n-    // The one true C reference locale\n+    // The \"C\" reference locale\n     static _Impl* \t_S_classic; \n \n     // Current global reference locale\n     static _Impl* \t_S_global;  \n \n-    static const int \t_S_num_categories = _Count_ones<all>::_S_count;\n+    static const int \t_S_categories_num = _Count_ones<all>::_S_count;\n+    static const int \t_S_facets_num = 26;\n \n     explicit \n     locale(_Impl*) throw();\n@@ -423,7 +424,7 @@ namespace std\n   template<typename _Facet>\n     locale::locale(const locale& __other, _Facet* __f)\n     {\n-      _M_impl = new _Impl(*__other._M_impl, 0);\n+      _M_impl = new _Impl(*__other._M_impl, 1);\n       _M_impl->_M_install_facet(&_Facet::id, __f);\n       _M_impl->_M_has_name = false;\n       _M_impl->_M_name = \"*\";"}, {"sha": "64996efb30427597737da6567643291f904aa922", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "patch": "@@ -55,7 +55,8 @@ namespace std {\n \n   locale::_Impl* \t\tlocale::_S_global; \n   locale::_Impl* \t\tlocale::_S_classic;\n-  const int \t\t\tlocale::_S_num_categories;\n+  const int \t\t\tlocale::_S_categories_num;\n+  const int \t\t\tlocale::_S_facets_num;\n \n   // Definitions for static const data members of locale::_Impl\n   const locale::id* const\n@@ -552,6 +553,11 @@ namespace std {\n   }\n \n \n+  locale::locale(_Impl* __ip) throw()\n+  : _M_impl(__ip)\n+  { __ip->_M_add_reference(); }\n+\n+\n   locale::locale(const char* __name)\n   {\n     if (__name)\n@@ -560,7 +566,7 @@ namespace std {\n \t  (_M_impl = _S_classic)->_M_add_reference();\n \t// Might throw:\n \telse\n-\t  _M_impl = new _Impl(*_S_classic, __name, all, 1);\n+\t  _M_impl = new _Impl(_S_facets_num, 1, true, __name);\n       }\n     else\n       throw runtime_error(\"attempt to create named locale from NULL name\");\n@@ -580,17 +586,6 @@ namespace std {\n       throw runtime_error(\"attempt to create locale from NULL named locale\");\n   }\n \n-  bool\n-  locale::operator==(const locale& __rhs) const throw()\n-  {\n-    return((this->name() != \"*\" && this->name() == __rhs.name())\n-\t   || _M_impl == __rhs._M_impl);\n-  }\n-\n-  locale::locale(_Impl* __ip) throw()\n-  : _M_impl(__ip)\n-  { __ip->_M_add_reference(); }\n-\n   locale::locale(const locale& __other, const locale& __one, category __cat)\n   {\n     __cat = _S_normalize_category(__cat);    // might throw\n@@ -610,6 +605,13 @@ namespace std {\n       _M_impl->_M_has_name = false;\n   }\n \n+  bool\n+  locale::operator==(const locale& __rhs) const throw()\n+  {\n+    return((this->name() != \"*\" && this->name() == __rhs.name())\n+\t   || _M_impl == __rhs._M_impl);\n+  }\n+\n   const locale&\n   locale::operator=(const locale& __other) throw()\n   {\n@@ -647,7 +649,7 @@ namespace std {\n \ttry {\n \t  // 26 Standard facets, 2 references.\n \t  // One reference for _M_classic, one for _M_global\n-\t  _S_classic = new _Impl(26, 2, true, \"C\");\n+\t  _S_classic = new _Impl(_S_facets_num, 2, true, \"C\");\n \t  _S_global = _S_classic; \n \n \t  _S_classic->_M_facet_init(new std::collate<char>);"}, {"sha": "7d6f259acce0dfeae9cd86f7b76afa03fb2493ff", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 57, "deletions": 47, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b9554ccd5e0f2390d058c19d142d0e2bb747bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=22b9554ccd5e0f2390d058c19d142d0e2bb747bb", "patch": "@@ -45,70 +45,80 @@ namespace std {\n     delete _M_category_names;\n   }\n \n-  // This constructor is used to correctly initialize the standard,\n-  // required facets.\n-  locale::_Impl::\n-  _Impl(size_t __numfacets, size_t __refs, bool __has_name = false, \n-\tstring __name = \"*\")\n-  : _M_references(__refs - 1), _M_facets(0), _M_category_names(0), \n-    _M_has_name(__has_name), _M_name(__name)\n-  { \n-    typedef vector<facet*, allocator<facet*> > __vec_facet;\n-    typedef vector<string, allocator<string> > __vec_string;\n-\n-    auto_ptr<__vec_facet> __pvf(new __vec_facet(__numfacets, (facet*)0));\n-    auto_ptr<__vec_string> __pcn(new __vec_string(_S_num_categories, _M_name));\n-    _M_facets = __pvf.release();\n-    _M_category_names = __pcn.release();\n-  }\n-  \n   locale::_Impl::\n   _Impl(const _Impl& __other, size_t __refs)\n   : _M_references(__refs - 1), _M_facets(0), _M_category_names(0), \n     _M_has_name(__other._M_has_name), _M_name(__other._M_name)\n   {\n-    typedef vector<facet*, allocator<facet*> > __vec_facet;\n-    typedef vector<string, allocator<string> > __vec_string;\n+    try\n+      {  _M_facets = new __vec_facet(*(__other._M_facets)); }\n+    catch(...) \n+      {\n+\tdelete _M_facets;\n+\tthrow;\n+      }\n \n-    auto_ptr<__vec_facet> __pvf(new __vec_facet(*(__other._M_facets)));\n-    auto_ptr<__vec_string> \n-      __pcn(new __vec_string(*(__other._M_category_names)));\n+    try \n+      {\t_M_category_names = new __vec_string(*(__other._M_category_names)); }\n+    catch(...) \n+      {\n+\tdelete _M_category_names;\n+\tthrow;\n+      }\n \n-    std::vector<facet*>::iterator __it = __pvf->begin();\n-    for (; __it != __pvf->end(); ++__it)\n+    std::vector<facet*>::iterator __it = _M_facets->begin();\n+    for (; __it != _M_facets->end(); ++__it)\n       (*__it)->_M_add_reference();\n-\n-    // These must be last since in the presence of an exception, the \n-    // destructor for 'this' won't run until AFTER execution has passed  \n-    // the closing brace of the constructor.\n-    _M_facets = __pvf.release();\n-    _M_category_names = __pcn.release();\n   }\n \n+  // This constructor is used to correctly initialize named locales,\n+  // including the standard \"C\" locale.\n+  locale::_Impl::\n+  _Impl(size_t __numfacets, size_t __refs, bool __has_name = false, \n+\tstring __name = \"*\")\n+  : _M_references(__refs - 1), _M_facets(0), _M_category_names(0), \n+    _M_has_name(__has_name), _M_name(__name)\n+  { \n+    try\n+      {  _M_facets = new __vec_facet(__numfacets, NULL); }\n+    catch(...) \n+      {\n+\tdelete _M_facets;\n+\tthrow;\n+      }\n+\n+    try \n+      {\t_M_category_names = new __vec_string(_S_categories_num, _M_name); }\n+    catch(...) \n+      {\n+\tdelete _M_category_names;\n+\tthrow;\n+      }\n+  }\n+  \n   // Construct specific categories, leaving unselected ones alone\n   locale::_Impl::\n   _Impl(const _Impl& __other, const string& __name, category __cat, \n \tsize_t __refs)\n     : _M_references(__refs - 1), _M_has_name(__other._M_name != \"*\")\n   {\n-    typedef vector<facet*, allocator<facet*> > __vec_facet;\n-    typedef vector<string, allocator<string> > __vec_string;\n-\n     __cat = _S_normalize_category(__cat);  // might throw\n-    try {\n-      _M_facets = new __vec_facet(*(__other._M_facets));\n-    }\n-    catch(...) {\n-      delete _M_facets;\n-      throw;\n-    }\n-    try {\n-       _M_category_names = new __vec_string(*(__other._M_category_names));\n-    }\n-    catch(...) {\n-      delete _M_category_names;\n-      throw;\n-    }\n+\n+    try \n+      { _M_facets = new __vec_facet(*(__other._M_facets)); }\n+    catch(...) \n+      {\n+\tdelete _M_facets;\n+\tthrow;\n+      }\n+\n+    try \n+      {\t_M_category_names = new __vec_string(*(__other._M_category_names)); }\n+    catch(...) \n+      {\n+\tdelete _M_category_names;\n+\tthrow;\n+      }\n \n     static void(_Impl::* ctors[]) (const char*) = \n     {"}]}