{"sha": "c8718cb3ef78c2e10ac42434330701b1e045a7e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3MThjYjNlZjc4YzJlMTBhYzQyNDM0MzMwNzAxYjFlMDQ1YTdlMg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-11-29T16:31:40Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-11-29T16:31:40Z"}, "message": "Fix PR c++/42260 and ensure PR c++/45383 is fixed\n\ngcc/cp/\n\tc++/42260\n\t* call.c (add_builtin_candidate): At this point the resulting type\n\tof an indirection operator should be complete.\n\ngcc/testsuite/\n\tc++/42260\n\tc++/45383\n\t* g++.dg/conversion/cast2.C: New test.\n\t* g++.dg/conversion/cond4/C: Likewise. Ensures we don't regress on\n\tPR c++/45383\n\nFrom-SVN: r167250", "tree": {"sha": "6e341f54dc5000bed430e6611dada4fd581bcbdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e341f54dc5000bed430e6611dada4fd581bcbdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8718cb3ef78c2e10ac42434330701b1e045a7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8718cb3ef78c2e10ac42434330701b1e045a7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8718cb3ef78c2e10ac42434330701b1e045a7e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8718cb3ef78c2e10ac42434330701b1e045a7e2/comments", "author": null, "committer": null, "parents": [{"sha": "9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7d5cae18d86f3db97d56a72cfea60e4fbb125a"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "40dd7e299e92bfffc5ffc471614d8a3a04b95e40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c8718cb3ef78c2e10ac42434330701b1e045a7e2", "patch": "@@ -1,3 +1,9 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42260\n+\t* call.c (add_builtin_candidate): At this point the resulting type\n+    \tof an indirection operator should be complete.\n+\n 2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/45383"}, {"sha": "0f016ca324a6573a509ddd6bcf4fd33dbecff53e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c8718cb3ef78c2e10ac42434330701b1e045a7e2", "patch": "@@ -2022,6 +2022,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \n     case INDIRECT_REF:\n       if (TREE_CODE (type1) == POINTER_TYPE\n+\t  && is_complete (TREE_TYPE (type1))\n \t  && (TYPE_PTROB_P (type1)\n \t      || TREE_CODE (TREE_TYPE (type1)) == FUNCTION_TYPE))\n \tbreak;"}, {"sha": "1cfb5b2dfe6b3ee57d6189126d8468c42997b7b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8718cb3ef78c2e10ac42434330701b1e045a7e2", "patch": "@@ -1,3 +1,10 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42260\n+\t* g++.dg/conversion/cast2.C: New test.\n+\t* g++.dg/conversion/cond4/C: Likewise. This ensures we don't regress on\n+\tPR c++/45383\n+\n 2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/45383"}, {"sha": "ac8329730ea66b3a0b6bccbcff9369263ce70aa0", "filename": "gcc/testsuite/g++.dg/conversion/cast2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcast2.C?ref=c8718cb3ef78c2e10ac42434330701b1e045a7e2", "patch": "@@ -0,0 +1,9 @@\n+// Origin: PR c++/42260\n+// { dg-do compile }\n+\n+struct A\n+{\n+      template<typename T> operator T*();\n+};\n+\n+int i = *A();// { dg-error \"no match\" }"}, {"sha": "3bd64763a1835359cfff97cd449517d553fc433d", "filename": "gcc/testsuite/g++.dg/conversion/cond4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8718cb3ef78c2e10ac42434330701b1e045a7e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fcond4.C?ref=c8718cb3ef78c2e10ac42434330701b1e045a7e2", "patch": "@@ -0,0 +1,31 @@\n+// Origin: PR c++/45383\n+// { dg-do run }\n+\n+struct null {\n+    null() {}\n+    template<class T>\n+    operator T*() const {\n+    return 0;\n+    }\n+\n+    template<class C, class T>\n+    operator T C::*() const {\n+    return 0;\n+    }\n+private:\n+    null(const null&);\n+    null& operator=(const null&);\n+    void operator&() const;\n+};\n+\n+static struct null null;\n+\n+int\n+main()\n+{\n+    int* ptr = null;\n+    if (ptr == null)\n+        return 0;\n+    if (ptr != null)\n+        return 1;\n+}"}]}