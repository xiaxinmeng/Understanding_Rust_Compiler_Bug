{"sha": "02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlYzc0YjlkMjZjNDAwZjIxOWExOTc1YTFkMzllMDNjMzliM2MwYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-08-26T21:38:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-08-26T21:38:46Z"}, "message": "re PR c++/24009 (C++ fails to print #include stack)\n\n\tPR c++/24009\n\t* input.h (restore_input_file_stack): Declare.\n\t(INPUT_FILE_STACK_BITS): Define.\n\t* toplev.c (fs_p, input_file_stack_history,\n\tinput_file_stack_restored, restore_input_file_stack): New.\n\t(push_srcloc, pop_srcloc): Check for input_file_stack_tick\n\toverflowing INPUT_FILE_STACK_BITS bits.  Save new state of stack.\n\t(pop_srcloc): Don't free old state of stack.\n\ncp:\n\t* parser.c (struct cp_token): Add input_file_stack_index.\n\t(eof_token): Update.\n\t(cp_lexer_get_preprocessor_token): Save input_file_stack_tick.\n\t(cp_lexer_set_source_position_from_token): Restore input file\n\tstack.\n\nFrom-SVN: r116479", "tree": {"sha": "a5124e3c47e8d988de14e9615b356c0d0eb3b461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5124e3c47e8d988de14e9615b356c0d0eb3b461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63d0dca480ee0f7ebe02d1e73c579e5547e1d6d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d0dca480ee0f7ebe02d1e73c579e5547e1d6d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d0dca480ee0f7ebe02d1e73c579e5547e1d6d2"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "7e4cd7ce31ac558c03dde1afaa7b996722c68c45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "patch": "@@ -1,3 +1,14 @@\n+2006-08-26  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/24009\n+\t* input.h (restore_input_file_stack): Declare.\n+\t(INPUT_FILE_STACK_BITS): Define.\n+\t* toplev.c (fs_p, input_file_stack_history,\n+\tinput_file_stack_restored, restore_input_file_stack): New.\n+\t(push_srcloc, pop_srcloc): Check for input_file_stack_tick\n+\toverflowing INPUT_FILE_STACK_BITS bits.  Save new state of stack.\n+\t(pop_srcloc): Don't free old state of stack.\n+\n 2006-08-26  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/27544"}, {"sha": "5c8b1cb156476a338a113bc80b9d4221a25d5a02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "patch": "@@ -1,3 +1,12 @@\n+2006-08-26  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/24009\n+\t* parser.c (struct cp_token): Add input_file_stack_index.\n+\t(eof_token): Update.\n+\t(cp_lexer_get_preprocessor_token): Save input_file_stack_tick.\n+\t(cp_lexer_set_source_position_from_token): Restore input file\n+\tstack.\n+\n 2006-08-26  Lee Millward  <lee.millward@codesourcery.com>\n \n         PR c++/28736"}, {"sha": "a97518ac9a58d2d57702af2bab86ae0b1847a9b3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "patch": "@@ -66,6 +66,8 @@ typedef struct cp_token GTY (())\n      KEYWORD is RID_MAX) iff this name was looked up and found to be\n      ambiguous.  An error has already been reported.  */\n   BOOL_BITFIELD ambiguous_p : 1;\n+  /* The input file stack index at which this token was found.  */\n+  unsigned input_file_stack_index : INPUT_FILE_STACK_BITS;\n   /* The value associated with this token, if any.  */\n   tree value;\n   /* The location at which this token was found.  */\n@@ -79,7 +81,7 @@ DEF_VEC_ALLOC_P (cp_token_position,heap);\n \n static const cp_token eof_token =\n {\n-  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, 0, false, NULL_TREE,\n+  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, 0, false, 0, NULL_TREE,\n #if USE_MAPPED_LOCATION\n   0\n #else\n@@ -393,6 +395,7 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n    /* Get a new token from the preprocessor.  */\n   token->type\n     = c_lex_with_flags (&token->value, &token->location, &token->flags);\n+  token->input_file_stack_index = input_file_stack_tick;\n   token->keyword = RID_MAX;\n   token->pragma_kind = PRAGMA_NONE;\n   token->in_system_header = in_system_header;\n@@ -450,14 +453,16 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n     }\n }\n \n-/* Update the globals input_location and in_system_header from TOKEN.  */\n+/* Update the globals input_location and in_system_header and the\n+   input file stack from TOKEN.  */\n static inline void\n cp_lexer_set_source_position_from_token (cp_token *token)\n {\n   if (token->type != CPP_EOF)\n     {\n       input_location = token->location;\n       in_system_header = token->in_system_header;\n+      restore_input_file_stack (token->input_file_stack_index);\n     }\n }\n "}, {"sha": "2fea1a65c9b488cb4ed2c019c4a0c31dce72401a", "filename": "gcc/input.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "patch": "@@ -84,6 +84,7 @@ extern void push_srcloc (location_t);\n extern void push_srcloc (const char *name, int line);\n #endif /* ! USE_MAPPED_LOCATION */\n extern void pop_srcloc (void);\n+extern void restore_input_file_stack (int);\n \n #define LOCATION_FILE(LOC) ((expand_location (LOC)).file)\n #define LOCATION_LINE(LOC) ((expand_location (LOC)).line)\n@@ -98,4 +99,7 @@ extern struct file_stack *input_file_stack;\n /* Incremented on each change to input_file_stack.  */\n extern int input_file_stack_tick;\n \n+/* The number of bits available for input_file_stack_tick.  */\n+#define INPUT_FILE_STACK_BITS\t31\n+\n #endif"}, {"sha": "53fcdfe580c830bd125b6683dad61a8e173f71e8", "filename": "gcc/toplev.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ec74b9d26c400f219a1975a1d39e03c39b3c0c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=02ec74b9d26c400f219a1975a1d39e03c39b3c0c", "patch": "@@ -164,6 +164,16 @@ struct file_stack *input_file_stack;\n /* Incremented on each change to input_file_stack.  */\n int input_file_stack_tick;\n \n+/* Record of input_file_stack at each tick.  */\n+typedef struct file_stack *fs_p;\n+DEF_VEC_P(fs_p);\n+DEF_VEC_ALLOC_P(fs_p,heap);\n+static VEC(fs_p,heap) *input_file_stack_history;\n+\n+/* Whether input_file_stack has been restored to a previous state (in\n+   which case there should be no more pushing).  */\n+static bool input_file_stack_restored;\n+\n /* Name to use as base of names for dump output files.  */\n \n const char *dump_base_name;\n@@ -951,6 +961,10 @@ push_srcloc (const char *file, int line)\n {\n   struct file_stack *fs;\n \n+  gcc_assert (!input_file_stack_restored);\n+  if (input_file_stack_tick == (int) ((1U << INPUT_FILE_STACK_BITS) - 1))\n+    sorry (\"GCC supports only %d input file changes\", input_file_stack_tick);\n+\n   fs = XNEW (struct file_stack);\n   fs->location = input_location;\n   fs->next = input_file_stack;\n@@ -962,6 +976,7 @@ push_srcloc (const char *file, int line)\n #endif\n   input_file_stack = fs;\n   input_file_stack_tick++;\n+  VEC_safe_push (fs_p, heap, input_file_stack_history, input_file_stack);\n }\n \n /* Pop the top entry off the stack of presently open source files.\n@@ -973,11 +988,30 @@ pop_srcloc (void)\n {\n   struct file_stack *fs;\n \n+  gcc_assert (!input_file_stack_restored);\n+  if (input_file_stack_tick == (int) ((1U << INPUT_FILE_STACK_BITS) - 1))\n+    sorry (\"GCC supports only %d input file changes\", input_file_stack_tick);\n+\n   fs = input_file_stack;\n   input_location = fs->location;\n   input_file_stack = fs->next;\n-  free (fs);\n   input_file_stack_tick++;\n+  VEC_safe_push (fs_p, heap, input_file_stack_history, input_file_stack);\n+}\n+\n+/* Restore the input file stack to its state as of TICK, for the sake\n+   of diagnostics after processing the whole input.  Once this has\n+   been called, push_srcloc and pop_srcloc may no longer be\n+   called.  */\n+void\n+restore_input_file_stack (int tick)\n+{\n+  if (tick == 0)\n+    input_file_stack = NULL;\n+  else\n+    input_file_stack = VEC_index (fs_p, input_file_stack_history, tick - 1);\n+  input_file_stack_tick = tick;\n+  input_file_stack_restored = true;\n }\n \n /* Compile an entire translation unit.  Write a file of assembly"}]}