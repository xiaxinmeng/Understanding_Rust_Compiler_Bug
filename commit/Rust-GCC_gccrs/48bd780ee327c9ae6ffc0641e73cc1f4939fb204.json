{"sha": "48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "node_id": "C_kwDOANBUbNoAKDQ4YmQ3ODBlZTMyN2M5YWU2ZmZjMDY0MWU3M2NjMWY0OTM5ZmIyMDQ", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T03:30:27Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T17:17:36Z"}, "message": "rs6000: Remove -m[no-]fold-gimple flag [PR103686]\n\nThe -m[no-]fold-gimple flag was really intended primarily for internal\ntesting while implementing GIMPLE folding for rs6000 vector built-in\nfunctions.  It ended up leaking into other places, causing problems such\nas PR103686 identifies.  Let's remove it.\n\nThere are a number of tests in the testsuite that require adjustment.\nSome specify -mfold-gimple directly, which is the default, so that is\nhandled by removing the option.  Others unnecessarily specify\n-mno-fold-gimple, as the tests work fine without this.  Again that is\nhandled by removing the option.  There are a couple of extra variants of\ntests specifically for -mno-fold-gimple; for those, we can just\tremove the\nwhole test.\n\ngcc.target/powerpc/builtins-1.c was more problematic.  It was written in\nsuch a way as to be extremely fragile.  For this one, I rewrote the whole\ntest in a different style, using individual functions to test each\nbuilt-in function.  These same tests are also largely covered by\nbuiltins-1-be-folded.c and builtins-1-le-folded.c, so I chose to\nexplicitly make this test -mbig for simplicity, and use -O2 for clean code\ngeneration.  I made some slight modifications to the expected instruction\ncounts as a result, and tested on both 32- and 64-bit.\n\n2022-02-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\tPR target/103686\n\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_builtin):\tRemove\n\ttest for !rs6000_fold_gimple.\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Likewise.\n\t* config/rs6000/rs6000.opt (mfold-gimple): Remove.\n\ngcc/testsuite/\n\tPR target/103686\n\t* gcc.target/powerpc/builtins-1-be-folded.c: Remove -mfold-gimple\n\toption.\n\t* gcc.target/powerpc/builtins-1-le-folded.c: Likewise.\n\t* gcc.target/powerpc/builtins-1.c: Rewrite to use small functions and\n\trestrict to -O2 -mbig for predictability.  Adjust instruction counts.\n\t* gcc.target/powerpc/builtins-5.c: Remove -mno-fold-gimple option.\n\t* gcc.target/powerpc/p8-vec-xl-xst.c: Likewise.\n\t* gcc.target/powerpc/pr83926.c: Likewise.\n\t* gcc.target/powerpc/pr86731-nogimplefold-longlong.c: Delete.\n\t* gcc.target/powerpc/pr86731-nogimplefold.c: Delete.\n\t* gcc.target/powerpc/swaps-p8-17.c: Remove -mno-fold-gimple option.", "tree": {"sha": "57734c18b2b615a7d2fd7f277cf184b69fb58d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57734c18b2b615a7d2fd7f277cf184b69fb58d7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/comments", "author": null, "committer": null, "parents": [{"sha": "3f30f2d1dbb3228b8468b26239fe60c2974ce2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac"}], "stats": {"total": 1434, "additions": 1002, "deletions": 432}, "files": [{"sha": "5d34c1bcfc96730bd9fd369fa3ff988140bfc8ec", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1299,9 +1299,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       fprintf (stderr, \"rs6000_gimple_fold_builtin %d %s %s\\n\",\n \t       fn_code, fn_name1, fn_name2);\n \n-  if (!rs6000_fold_gimple)\n-    return false;\n-\n   /* Prevent gimple folding for code that does not have a LHS, unless it is\n      allowed per the rs6000_builtin_valid_without_lhs helper function.  */\n   if (!gimple_call_lhs (stmt)"}, {"sha": "b6f2309adfbf8094e4bf2724ab9f6e534213bcc2", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -3833,10 +3833,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t   & OPTION_MASK_DIRECT_MOVE))\n     rs6000_isa_flags |= ~rs6000_isa_flags_explicit & OPTION_MASK_STRICT_ALIGN;\n \n-  if (!rs6000_fold_gimple)\n-     fprintf (stderr,\n-\t      \"gimple folding of rs6000 builtins has been disabled.\\n\");\n-\n   /* Add some warnings for VSX.  */\n   if (TARGET_VSX)\n     {"}, {"sha": "68c0cae6e639bf3cc308725a0156a07f628ff8fd", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -155,10 +155,6 @@ maltivec\n Target Mask(ALTIVEC) Var(rs6000_isa_flags)\n Use AltiVec instructions.\n \n-mfold-gimple\n-Target Var(rs6000_fold_gimple) Init(1)\n-Enable early gimple folding of builtins.\n-\n mhard-dfp\n Target Mask(DFP) Var(rs6000_isa_flags)\n Use decimal floating point instructions."}, {"sha": "3cc487de2ffd25805c7bdb6911fc0d81d7091587", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-be-folded.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be-folded.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { powerpc-*-* } } } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O2 -mfold-gimple\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n /* Based on builtins-1-le.c ; ensure that the power8 builtins are accepted by\n    the compiler, at O2 with gimple folding enabled.  */"}, {"sha": "7193cd570b7df3a91ecc9fa5e6b46743c82f273b", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-le-folded.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le-folded.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { powerpc64le-*-* } } } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O2 -mfold-gimple\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n /* Based on builtins-1-le.c ; ensure that the power8 builtins are accepted by\n    the compiler, at O2 with gimple folding enabled.  */"}, {"sha": "ffa95eda5757be1e054220f805944dcc1b57204b", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "modified", "additions": 996, "deletions": 316, "changes": 1312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,265 +1,953 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O0 -mno-fold-gimple -dp\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2 -mbig\" } */\n \n #include <altivec.h>\n \n-vector double y = { 2.0, 4.0 };\n-vector double z;\n+vector float\n+foo0 (vector float fa, vector float fb)\n+{\n+  return vec_and (fa, fb);\n+}\n+\n+vector float\n+foo1 (vector float fa, vector float fb)\n+{\n+  return vec_cpsgn (fa, fb);\n+}\n+\n+vector float\n+foo2 (vector float fa, vector float fb)\n+{\n+  return vec_mergeh (fa, fb);\n+}\n+\n+vector float\n+foo3 (vector float fa, vector float fb)\n+{\n+  return vec_mergel (fa, fb);\n+}\n+\n+vector double\n+foo4 (vector double da, vector double db)\n+{\n+  return vec_and (da, db);\n+}\n+\n+vector long long\n+foo5 (vector long long la, vector long long lb)\n+{\n+  return vec_and (la, lb);\n+}\n+\n+vector long long\n+foo6 (vector long long la, vector bool long long ld)\n+{\n+  return vec_and (la, ld);\n+}\n+\n+vector long long\n+foo7 (vector bool long long ld, vector long long lb)\n+{\n+  return vec_and (ld, lb);\n+}\n+\n+vector unsigned long long\n+foo8 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_and (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo9 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_and (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo10 (vector bool long long ud, vector unsigned long long ub)\n+{\n+  return vec_and (ud, ub);\n+}\n+\n+vector long long\n+foo11 (vector long long la, vector long long lb)\n+{\n+  return vec_andc (la, lb);\n+}\n+\n+vector long long\n+foo12 (vector long long la, vector bool long long ld)\n+{\n+  return vec_andc (la, ld);\n+}\n+\n+vector long long\n+foo13 (vector bool long long ld, vector long long lb)\n+{\n+  return vec_andc (ld, lb);\n+}\n+\n+vector unsigned long long\n+foo14 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_andc (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo15 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_andc (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo16 (vector bool long long ud, vector unsigned long long ub)\n+{\n+  return vec_andc (ud, ub);\n+}\n+\n+vector double\n+foo17 (vector double de, vector double df)\n+{\n+  return vec_cpsgn (de, df);\n+}\n+\n+vector double\n+foo18 (vector double de, vector double df)\n+{\n+  return vec_mergeh (de, df);\n+}\n+\n+vector double\n+foo19 (vector double de, vector double df)\n+{\n+  return vec_mergel (de, df);\n+}\n+\n+vector long long\n+foo20 (vector long long la, vector long long lb)\n+{\n+  return vec_mergeh (la, lb);\n+}\n+\n+vector long long\n+foo21 (vector long long la, vector bool long long ld)\n+{\n+  return vec_mergeh (la, ld);\n+}\n+\n+vector long long\n+foo22 (vector bool long long ld, vector long long lb)\n+{\n+  return vec_mergeh (ld, lb);\n+}\n+\n+vector unsigned long long\n+foo23 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_mergeh (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo24 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_mergeh (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo25 (vector bool long long ud, vector unsigned long long ub)\n+{\n+  return vec_mergeh (ud, ub);\n+}\n+\n+vector pixel\n+foo26 (vector pixel pa, vector pixel pb)\n+{\n+  return vec_mergeh (pa, pb);\n+}\n+\n+vector pixel\n+foo27 (vector pixel pa, vector pixel pb)\n+{\n+  return vec_mergel (pa, pb);\n+}\n+\n+vector long long\n+foo28 (vector long long la, vector long long lb)\n+{\n+  return vec_mergel (la, lb);\n+}\n+\n+vector long long\n+foo29 (vector long long la, vector bool long long ld)\n+{\n+  return vec_mergel (la, ld);\n+}\n+\n+vector long long\n+foo30 (vector bool long long ld, vector long long lb)\n+{\n+  return vec_mergel (ld, lb);\n+}\n+\n+vector unsigned long long\n+foo31 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_mergel (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo32 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_mergel (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo33 (vector bool long long ud, vector unsigned long long ub)\n+{\n+  return vec_mergel (ud, ub);\n+}\n+\n+vector long long\n+foo34 (vector long long la, vector long long lb)\n+{\n+  return vec_nor (la, lb);\n+}\n+\n+vector long long\n+foo35 (vector long long la, vector bool long long ld)\n+{\n+  return vec_nor (la, ld);\n+}\n+\n+vector long long\n+foo36 (vector bool long long ld, vector long long lb)\n+{\n+  return vec_nor (ld, lb);\n+}\n+\n+vector unsigned long long\n+foo37 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_nor (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo38 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_nor (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo39 (vector bool long long ud, vector unsigned long long ub)\n+{\n+  return vec_nor (ud, ub);\n+}\n+\n+vector long long\n+foo40 (vector long long la, vector long long lb, vector unsigned char ca)\n+{\n+  return vec_perm (la, lb, ca);\n+}\n+\n+vector unsigned char\n+foo41 (vector unsigned char ca, vector unsigned char cbb)\n+{\n+  return vec_and (ca, cbb);\n+}\n+\n+vector unsigned char\n+foo42 (vector unsigned char ca, vector unsigned char cbb)\n+{\n+  return vec_andc (ca, cbb);\n+}\n+\n+vector unsigned char\n+foo43 (vector unsigned char ca, vector unsigned char cbb)\n+{\n+  return vec_mergel (ca, cbb);\n+}\n+\n+vector unsigned long long\n+foo44 (vector unsigned long long ua, vector unsigned long long ub,\n+       vector unsigned char ca)\n+{\n+  return vec_perm (ua, ub, ca);\n+}\n+\n+vector long long\n+foo45 (vector long long la, vector long long lb, vector unsigned long long uc)\n+{\n+  return vec_sel (la, lb, uc);\n+}\n+\n+vector long long\n+foo46 (vector long long la, vector long long lb, vector bool long long ld)\n+{\n+  return vec_sel (la, lb, ld);\n+}\n+\n+vector unsigned long long\n+foo47 (vector unsigned long long ua, vector unsigned long long ub,\n+       vector long long lc)\n+{\n+  return vec_sel (ua, ub, lc);\n+}\n+\n+vector unsigned long long\n+foo48 (vector unsigned long long ua, vector unsigned long long ub,\n+       vector unsigned long long uc)\n+{\n+  return vec_sel (ua, ub, uc);\n+}\n+\n+vector unsigned long long\n+foo49 (vector unsigned long long ua, vector unsigned long long ub,\n+       vector bool long long ld)\n+{\n+  return vec_sel (ua, ub, ld);\n+}\n+\n+vector long long\n+foo50 (vector long long la, vector long long lb)\n+{\n+  return vec_xor (la, lb);\n+}\n+\n+vector long long\n+foo51 (vector long long la, vector bool long long ld)\n+{\n+  return vec_xor (la, ld);\n+}\n+\n+vector long long\n+foo52 (vector bool long long ld, vector long long la)\n+{\n+  return vec_xor (ld, la);\n+}\n+\n+vector unsigned long long\n+foo53 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_xor (ua, ub);\n+}\n+\n+vector unsigned long long\n+foo54 (vector unsigned long long ua, vector bool long long ud)\n+{\n+  return vec_xor (ua, ud);\n+}\n+\n+vector unsigned long long\n+foo55 (vector bool long long ud, vector unsigned long long ua)\n+{\n+  return vec_xor (ud, ua);\n+}\n+\n+int\n+foo56 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_eq (ua, ub);\n+}\n+\n+int\n+foo57 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_ge (ua, ub);\n+}\n+\n+int\n+foo58 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_gt (ua, ub);\n+}\n+\n+int\n+foo59 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_le (ua, ub);\n+}\n+\n+int\n+foo60 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_lt (ua, ub);\n+}\n+\n+int\n+foo61 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_all_ne (ua, ub);\n+}\n+\n+int\n+foo62 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_eq (ua, ub);\n+}\n+\n+int\n+foo63 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_ge (ua, ub);\n+}\n+\n+int\n+foo64 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_gt (ua, ub);\n+}\n+\n+int\n+foo65 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_le (ua, ub);\n+}\n+\n+int\n+foo66 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_lt (ua, ub);\n+}\n+\n+int\n+foo67 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_any_ne (ua, ub);\n+}\n+\n+vector short\n+foo68 (vector short ssa, vector short ssb)\n+{\n+  return vec_and (ssa, ssb);\n+}\n+\n+vector short\n+foo69 (vector short ssa, vector short ssb)\n+{\n+  return vec_mergeh (ssa, ssb);\n+}\n+\n+vector short\n+foo70 (vector short ssa, vector short ssb)\n+{\n+  return vec_mergel (ssa, ssb);\n+}\n+\n+vector int\n+foo71 (vector int sia, vector int sib)\n+{\n+  return vec_and (sia, sib);\n+}\n+\n+vector int\n+foo72 (vector int sia, vector int sib)\n+{\n+  return vec_andc (sia, sib);\n+}\n+\n+vector int\n+foo73 (vector int sia, vector int sib)\n+{\n+  return vec_mergel (sia, sib);\n+}\n+\n+vector unsigned int\n+foo74 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_and (uia, uib);\n+}\n+\n+vector unsigned int\n+foo75 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_andc (uia, uib);\n+}\n+\n+vector unsigned int\n+foo76 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_mergel (uia, uib);\n+}\n+\n+vector bool char\n+foo77 (vector bool char bca, vector bool char bcb)\n+{\n+  return vec_and (bca, bcb);\n+}\n+\n+vector bool char\n+foo78 (vector bool char bca, vector bool char bcb)\n+{\n+  return vec_andc (bca, bcb);\n+}\n+\n+vector bool char\n+foo79 (vector bool char bca, vector bool char bcb)\n+{\n+  return vec_mergel (bca, bcb);\n+}\n+\n+vector bool short\n+foo80 (vector bool short bsa, vector bool short bsb)\n+{\n+  return vec_and (bsa, bsb);\n+}\n+\n+vector bool short\n+foo81 (vector bool short bsa, vector bool short bsb)\n+{\n+  return vec_andc (bsa, bsb);\n+}\n+\n+vector bool short\n+foo82 (vector bool short bsa, vector bool short bsb)\n+{\n+  return vec_mergel (bsa, bsb);\n+}\n+\n+vector bool int\n+foo83 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_and (bia, bib);\n+}\n+\n+vector bool int\n+foo84 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_andc (bia, bib);\n+}\n+\n+vector bool int\n+foo85 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_mergel (bia, bib);\n+}\n+\n+vector unsigned int\n+foo86 (vector unsigned long long ua, vector unsigned long long ub)\n+{\n+  return vec_packsu (ua, ub);\n+}\n+\n+vector long long\n+foo87 (vector long long la)\n+{\n+  return vec_cntlz (la);\n+}\n+\n+vector unsigned long long\n+foo88 (vector unsigned long long ua)\n+{\n+  return vec_cntlz (ua);\n+}\n+\n+vector int\n+foo89 (vector int sia)\n+{\n+  return vec_cntlz (sia);\n+}\n+\n+vector unsigned int\n+foo90 (vector unsigned int uia)\n+{\n+  return vec_cntlz (uia);\n+}\n+\n+vector short\n+foo91 (vector short ssa)\n+{\n+  return vec_cntlz (ssa);\n+}\n+\n+vector unsigned short\n+foo92 (vector unsigned short usa, vector unsigned short usb)\n+{\n+  return vec_and (usa, usb);\n+}\n+\n+vector unsigned short\n+foo93 (vector unsigned short usa, vector unsigned short usb)\n+{\n+  return vec_andc (usa, usb);\n+}\n+\n+vector unsigned short\n+foo94 (vector unsigned short usa)\n+{\n+  return vec_cntlz (usa);\n+}\n+\n+vector unsigned short\n+foo95 (vector unsigned short usa, vector unsigned short usb)\n+{\n+  return vec_mergeh (usa, usb);\n+}\n+\n+vector unsigned short\n+foo96 (vector unsigned short usa, vector unsigned short usb)\n+{\n+  return vec_mergel (usa, usb);\n+}\n+\n+vector signed char\n+foo97 (vector signed char sca)\n+{\n+  return vec_cntlz (sca);\n+}\n+\n+vector signed char\n+foo98 (vector signed char sca, vector signed char scb)\n+{\n+  return vec_mergel (sca, scb);\n+}\n+\n+vector unsigned char\n+foo99 (vector unsigned char ca)\n+{\n+  return vec_cntlz (ca);\n+}\n+\n+vector double\n+foo100 (vector double *y)\n+{\n+  return vec_xl (0, y);\n+}\n+\n+void\n+foo101 (vector double dd, vector double *z)\n+{\n+  vec_xst (dd, 0, z);\n+}\n+\n+vector double\n+foo102 (vector double dd)\n+{\n+  return vec_round (dd);\n+}\n+\n+vector double\n+foo103 (vector double dd)\n+{\n+  return vec_rsqrt (dd);\n+}\n+\n+vector double\n+foo104 (vector double dd)\n+{\n+  return vec_rsqrte (dd);\n+}\n+\n+vector float\n+foo105 (vector float fa)\n+{\n+  return vec_round (fa);\n+}\n+\n+vector float\n+foo106 (vector float fa)\n+{\n+  return vec_rsqrt (fa);\n+}\n+\n+vector float\n+foo107 (vector float fa)\n+{\n+  return vec_rsqrte (fa);\n+}\n+\n+vector double\n+foo108 (vector double de)\n+{\n+  return vec_splat (de, 0);\n+}\n+\n+vector double\n+foo109 (vector double de)\n+{\n+  return vec_splat (de, 1);\n+}\n+\n+vector long long\n+foo110 (vector long long l2)\n+{\n+  return vec_splat (l2, 0);\n+}\n+\n+vector long long\n+foo111 (vector long long l2)\n+{\n+  return vec_splat (l2, 1);\n+}\n+\n+vector unsigned long long\n+foo112 (vector unsigned long long u2)\n+{\n+  return vec_splat (u2, 0);\n+}\n+\n+vector unsigned long long\n+foo113 (vector unsigned long long u2)\n+{\n+  return vec_splat (u2, 1);\n+}\n+\n+vector bool long long\n+foo114 (vector bool long long ld)\n+{\n+  return vec_splat (ld, 0);\n+}\n+\n+vector bool long long\n+foo115 (vector bool long long ld)\n+{\n+  return vec_splat (ld, 1);\n+}\n+\n+vector bool long long\n+foo116 (vector bool long long la, vector bool long long lb)\n+{\n+  return vec_mergee (la, lb);\n+}\n+\n+vector bool long long\n+foo117 (vector bool long long la, vector bool long long lb)\n+{\n+  return vec_mergeo (la, lb);\n+}\n \n-int main ()\n+vector bool long long\n+foo118 (vector bool long long la, vector bool long long lb)\n {\n-  vector float fa = {1.0, 2.0, 3.0, -4.0};\n-  vector float fb = {-2.0, -3.0, -4.0, -5.0};\n-  vector float fd = vec_and (fa, fb);\n-  vector float fc = vec_cpsgn (fa, fb);\n-  vector float fe = vec_mergeh (fa, fb);\n-  vector float ff = vec_mergel (fa, fb);\n-\n-  vector double da = {1.0, 2.0};\n-  vector double db = {-2.0, -3.0};\n-  vector double dz = vec_and (da, db);\n-\n-  vector signed int si_a = {1, 2, 3, 4};\n-  vector unsigned int ui_a = {1, 2, 3, 4};\n-\n-  vector long long la = {5L, 14L};\n-  vector long long lb = {3L, 86L};\n-  vector long long lc = vec_and (la, lb);\n-  vector bool long long ld = {0, -1};\n-  vector long long le = vec_and (la, ld);\n-  vector long long lf = vec_and (ld, lb);\n-\n-  vector unsigned long long ua = {5L, 14L};\n-  vector unsigned long long ub = {3L, 86L};\n-  vector unsigned long long uc = vec_and (ua, ub);\n-  vector bool long long ud = {0, -1};\n-  vector unsigned long long ue = vec_and (ua, ud);\n-  vector unsigned long long uf = vec_and (ud, ub);\n-\n-  vector long long lg = vec_andc (la, lb);\n-  vector long long lh = vec_andc (la, ld);\n-  vector long long li = vec_andc (ld, lb);\n-\n-  vector unsigned long long ug = vec_andc (ua, ub);\n-  vector unsigned long long uh = vec_andc (ua, ud);\n-  vector unsigned long long ui = vec_andc (ud, ub);\n-\n-  vector double de = {1.0, -4.0};\n-  vector double df = {-2.0, 5.0};\n-  vector double dg = vec_cpsgn (de, df);\n-  vector double dzw = vec_mergeh (de, df);\n-  vector double dze = vec_mergel (de, df);\n-\n-  vector long long lj = vec_mergeh (la, lb);\n-  vector long long lk = vec_mergeh (la, ld);\n-  vector long long ll = vec_mergeh (ld, la);\n-\n-  vector unsigned long long uj = vec_mergeh (ua, ub);\n-  vector unsigned long long uk = vec_mergeh (ua, ud);\n-  vector unsigned long long ul = vec_mergeh (ud, ua);\n-\n-  vector pixel pa = {9, 16, 25, 36, 1, 2, 3, 4};\n-  vector pixel pb = {25, 36, 1, 2, 45, 3, 4, 99};\n-  vector pixel pc = vec_mergeh (pa, pb);\n-  vector pixel pd = vec_mergel (pa, pb);\n-\n-  vector long long lm = vec_mergel (la, lb);\n-  vector long long ln = vec_mergel (la, ld);\n-  vector long long lo = vec_mergel (ld, la);\n-\n-  vector unsigned long long um = vec_mergel (ua, ub);\n-  vector unsigned long long un = vec_mergel (ua, ud);\n-  vector unsigned long long uo = vec_mergel (ud, ua);\n-\n-  vector long long lp = vec_nor (la, lb);\n-  vector long long lq = vec_nor (la, ld);\n-  vector long long lr = vec_nor (ld, la);\n-\n-  vector unsigned long long up = vec_nor (ua, ub);\n-  vector unsigned long long uq = vec_nor (ua, ud);\n-  vector unsigned long long ur = vec_nor (ud, ua);\n-\n-  vector unsigned char ca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n-  vector unsigned char cbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n-\n-  vector unsigned char ucba = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n-  vector unsigned char ucbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n-  vector unsigned char ucbc = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n-\n-  vector long long lv = vec_perm (la, lb, ca);\n-\n-  vector unsigned char  ucm = vec_and (ca, cbb);\n-  vector unsigned char  ucn = vec_andc (ca, cbb);\n-  vector unsigned char  uco = vec_mergel (ca, cbb);\n-\n-  vector unsigned long long uv = vec_perm (ua, ub, ca);\n-\n-  vector long long lx = vec_sel (la, lb, uc);\n-  vector long long ly = vec_sel (la, lb, ld);\n-\n-  vector unsigned long long uw = vec_sel (ua, ub, lc);\n-  vector unsigned long long ux = vec_sel (ua, ub, uc);\n-  vector unsigned long long uy = vec_sel (ua, ub, ld);\n-\n-  vector long long lz = vec_xor (la, lb);\n-  vector long long l0 = vec_xor (la, ld);\n-  vector long long l1 = vec_xor (ld, la);\n-\n-  vector unsigned long long uz = vec_xor (ua, ub);\n-  vector unsigned long long u0 = vec_xor (ua, ud);\n-  vector unsigned long long u1 = vec_xor (ud, ua);\n-\n-  int ia = vec_all_eq (ua, ub);\n-  int ib = vec_all_ge (ua, ub);\n-  int ic = vec_all_gt (ua, ub);\n-  int id = vec_all_le (ua, ub);\n-  int ie = vec_all_lt (ua, ub);\n-  int ig = vec_all_ne (ua, ub);\n-\n-  int ih = vec_any_eq (ua, ub);\n-  int ii = vec_any_ge (ua, ub);\n-  int ij = vec_any_gt (ua, ub);\n-  int ik = vec_any_le (ua, ub);\n-  int il = vec_any_lt (ua, ub);\n-  int im = vec_any_ne (ua, ub);\n-\n-  vector short ssa = {9, 16, 25, 36, 1, 2, 3, 4};\n-  vector short ssb = {-8, -27, -64, -125, 2, 3, 5, 3};\n-  vector short sscc = vec_and (ssa, ssb);\n-  vector short sscd = vec_mergeh (ssa, ssb);\n-  vector short ssce = vec_mergel (ssa, ssb);\n-\n-  vector int sia = {9, 16, 25, 36};\n-  vector int sib = {-8, -27, -64, -125};\n-  vector int sicc = vec_and (sia, sib);\n-  vector int sicd = vec_andc (sia, sib);\n-  vector int sig = vec_mergel (sia, sib);\n-\n-  vector unsigned int uia = {9, 16, 25, 36};\n-  vector unsigned int uib = {8, 27, 64, 125};\n-  vector unsigned int uicc = vec_and (uia, uib);\n-  vector unsigned int uidd = vec_andc (uia, uib);\n-  vector unsigned int uig = vec_mergel (uia, uib);\n-\n-  vector bool char bca = {0, 1, 4, 7};\n-  vector bool char bcb = {-8, 9, 2, 9};\n-  vector bool char bcc = vec_and (bca, bcb);\n-  vector bool char bcd = vec_andc (bca, bcb);\n-  vector bool char bce = vec_mergel (bca, bcb);\n-\n-  vector bool short bsa = {0, -1, -1, 0, 3, 4, 6, 7};\n-  vector bool short bsb = {-1, -1, 0, -1, 0, 0, 0, 0};\n-  vector bool short bscc = vec_and (bsa, bsb);\n-  vector bool short bscd = vec_andc (bsa, bsb);\n-  vector bool short bsce = vec_mergel (bsa, bsb);\n-\n-  vector bool int bia = {0, -1, -1, 0};\n-  vector bool int bib = {-1, -1, 0, -1};\n-  vector bool int bicc = vec_and (bia, bib);\n-  vector bool int bicd = vec_andc (bia, bib);\n-  vector bool int bide = vec_mergel (bia, bib);\n-\n-  vector unsigned int uie = vec_packsu (ua, ub);\n-\n-  vector long long l2 = vec_cntlz (la);\n-  vector unsigned long long u2 = vec_cntlz (ua);\n-  vector int sie = vec_cntlz (sia);\n-  vector unsigned int uif = vec_cntlz (uia);\n-  vector short sszz = vec_cntlz (ssa);\n-\n-  vector unsigned short usa = {81, 72, 63, 54, 45, 36, 27, 18};\n-  vector unsigned short usb = {81, 72, 63, 54, 45, 36, 27, 18};\n-  vector unsigned short usd = vec_and (usa, usb);\n-  vector unsigned short use = vec_andc (usa, usb);\n-  vector unsigned short usc = vec_cntlz (usa);\n-  vector unsigned short uscd = vec_mergeh (usa, usb);\n-  vector unsigned short usce = vec_mergel (usa, usb);\n-\n-  vector signed char sca = {-4, 3, -9, 15, -31, 31, 0, 0,\n-\t\t            1, 117, -36, 99, 98, 97, 96, 95};\n-  vector signed char scb = vec_cntlz (sca);\n-  vector signed char scc = vec_mergel (sca, scb);\n-\n-  vector unsigned char uca = {4, 3, 9, 15, 30, 31, 0, 0,\n-\t\t\t      1, 117, 36, 99, 98, 97, 96, 95};\n-  vector unsigned char cb = vec_cntlz (ca);\n-\n-  vector double dd = vec_xl (0, &y);\n-  vec_xst (dd, 0, &z);\n-\n-  vector double dzz = vec_round (dd);\n-  vector double dzz1 = vec_rsqrt (dd);\n-  vector double dzz2 = vec_rsqrte (dd);\n-\n-  vector float ff1 = vec_round (fa);\n-  vector float ff2 = vec_rsqrt (fa);\n-  vector float ff3 = vec_rsqrte (fa);\n-\n-  vector double dff = vec_splat (de, 0);\n-  vector double dgg = vec_splat (de, 1);\n-  vector long long l3 = vec_splat (l2, 0);\n-  vector long long l4 = vec_splat (l2, 1);\n-  vector unsigned long long u3 = vec_splat (u2, 0);\n-  vector unsigned long long u4 = vec_splat (u2, 1);\n-  vector bool long long l5 = vec_splat (ld, 0);\n-  vector bool long long l6 = vec_splat (ld, 1);\n-  vector bool long long l10 = vec_mergee (ld, ld);\n-  vector bool long long l11 = vec_mergeo (ld, ld);\n-  vector bool long long l15 = vec_and (ld, ld);\n-  \n-  vector long long l7 = vec_div (l3, l4);\n-  vector unsigned long long u5 = vec_div (u3, u4);\n-  vector long long l12 = vec_mergee (la, lb);\n-  vector long long l13 = vec_mergeo (la, lb);\n-  vector unsigned long long u8 = vec_mergee (u3, u4);\n-  vector unsigned long long u9 = vec_mergeo (u3, u4);\n-\n-  vector long long l8 = vec_mul (l3, l4);\n-  vector unsigned long long u6 = vec_mul (u3, u4);\n-\n-  vector int sz = vec_cts (fa, 0x1F);\n-  vector unsigned int usz = vec_ctu (fa, 0x1F);\n-\n-  vector float f1 = vec_mergee (fa, fb);\n-  vector float f2 = vec_mergeo (fa, fb);\n-\n-  vector double d1 = vec_mergee (da, db);\n-  vector double d2 = vec_mergeo (da, db);\n-\n-  vector float f3 = vec_ctf (si_a, 1);\n-  vector float f4 = vec_ctf (ui_a, 2);\n-\n-  vector bool char z_vbc2 = vec_splat (bca, 0);\n-  vector signed char z_vsc1 = vec_splat (sca, 1);\n-  vector unsigned char z_vuc1 = vec_splat (ucbc, 2);\n-\n-  vector bool int z_vbi1 = vec_splat (bia, 3);\n-  vector signed int z_vsi1 = vec_splat (sia, 1);\n-  vector unsigned int z_vui1 = vec_splat (uia, 2);\n-\n-  vector bool int z_bi2 = vec_mergee (bia, bib);\n-  vector signed int z_si2 = vec_mergee (sia, sib);\n-  vector unsigned int z_ui2 = vec_mergee (uia, uib);\n-  \n-  vector bool char z_bc2 = vec_mergeh (bca, bcb);\n-  vector signed char z_sc2 = vec_mergeh (sca, scb);\n-  vector bool int z_bi3 = vec_mergeh (bia, bib);\n-  vector signed int z_si3 = vec_mergeh (sia, sib);\n-  vector unsigned int z_ui3 = vec_mergeh (uia, uib);\n-  vector bool short z_bs1 = vec_mergeh (bsa, bsb);\n-\n-  vector bool int z_bi4 = vec_mergeo (bia, bib);\n-  vector signed int z_si4 = vec_mergeo (sia, sib);\n-  vector unsigned int z_ui4 = vec_mergeo (uia, uib);\n-  \n-  vector pixel int z_vp1 = vec_splat (pa, 1);\n-  vector bool short z_bs2 = vec_splat (bsa, 0);\n-  vector short signed int z_vss1 = vec_splat (ssa, 2);\n-  vector unsigned short int z_vuss1 = vec_splat (usa, 1);\n-\n-  return 0;\n+  return vec_and (la, lb);\n+}\n+\n+vector long long\n+foo119 (vector long long l3, vector long long l4)\n+{\n+  return vec_div (l3, l4);\n+}\n+\n+vector unsigned long long\n+foo120 (vector unsigned long long u3, vector unsigned long long u4)\n+{\n+  return vec_div (u3, u4);\n+}\n+\n+vector long long\n+foo121 (vector long long la, vector long long lb)\n+{\n+  return vec_mergee (la, lb);\n+}\n+\n+vector long long\n+foo122 (vector long long la, vector long long lb)\n+{\n+  return vec_mergeo (la, lb);\n+}\n+\n+vector unsigned long long\n+foo123 (vector unsigned long long u3, vector unsigned long long u4)\n+{\n+  return vec_mergee (u3, u4);\n+}\n+\n+vector unsigned long long\n+foo124 (vector unsigned long long u3, vector unsigned long long u4)\n+{\n+  return vec_mergeo (u3, u4);\n+}\n+\n+vector long long\n+foo125 (vector long long l3, vector long long l4)\n+{\n+  return vec_mul (l3, l4);\n+}\n+\n+vector unsigned long long\n+foo126 (vector unsigned long long u3, vector unsigned long long u4)\n+{\n+  return vec_mul (u3, u4);\n+}\n+\n+vector int\n+foo127 (vector float fa)\n+{\n+  return vec_cts (fa, 0x1F);\n+}\n+\n+vector unsigned int\n+foo128 (vector float fa)\n+{\n+  return vec_ctu (fa, 0x1F);\n+}\n+\n+vector float\n+foo129 (vector float fa, vector float fb)\n+{\n+  return vec_mergee (fa, fb);\n+}\n+\n+vector float\n+foo130 (vector float fa, vector float fb)\n+{\n+  return vec_mergeo (fa, fb);\n+}\n+\n+vector double\n+foo131 (vector double da, vector double db)\n+{\n+  return vec_mergee (da, db);\n+}\n+\n+vector double\n+foo132 (vector double da, vector double db)\n+{\n+  return vec_mergeo (da, db);\n+}\n+\n+vector float\n+foo133 (vector signed int si_a)\n+{\n+  return vec_ctf (si_a, 1);\n+}\n+\n+vector float\n+foo134 (vector unsigned int ui_a)\n+{\n+  return vec_ctf (ui_a, 2);\n+}\n+\n+vector bool char\n+foo135 (vector bool char bca)\n+{\n+  return vec_splat (bca, 0);\n+}\n+\n+vector signed char\n+foo136 (vector signed char sca)\n+{\n+  return vec_splat (sca, 1);\n+}\n+\n+vector unsigned char\n+foo137 (vector unsigned char ucbc)\n+{\n+  return vec_splat (ucbc, 2);\n+}\n+\n+vector bool int\n+foo138 (vector bool int bia)\n+{\n+  return vec_splat (bia, 3);\n+}\n+\n+vector signed int\n+foo139 (vector signed int sia)\n+{\n+  return vec_splat (sia, 1);\n+}\n+\n+vector unsigned int\n+foo140 (vector unsigned int uia)\n+{\n+  return vec_splat (uia, 2);\n+}\n+\n+vector bool int\n+foo141 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_mergee (bia, bib);\n+}\n+\n+vector signed int\n+foo142 (vector signed int sia, vector signed int sib)\n+{\n+  return vec_mergee (sia, sib);\n+}\n+\n+vector unsigned int\n+foo143 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_mergee (uia, uib);\n+}\n+\n+vector bool char\n+foo144 (vector bool char bca, vector bool char bcb)\n+{\n+  return vec_mergeh (bca, bcb);\n+}\n+\n+vector signed char\n+foo145 (vector signed char sca, vector signed char scb)\n+{\n+  return vec_mergeh (sca, scb);\n+}\n+\n+vector bool int\n+foo146 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_mergeh (bia, bib);\n+}\n+\n+vector signed int\n+foo147 (vector signed int sia, vector signed int sib)\n+{\n+  return vec_mergeh (sia, sib);\n+}\n+\n+vector unsigned int\n+foo148 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_mergeh (uia, uib);\n+}\n+\n+vector bool short\n+foo149 (vector bool short bsa, vector bool short bsb)\n+{\n+  return vec_mergeh (bsa, bsb);\n+}\n+\n+vector bool int\n+foo150 (vector bool int bia, vector bool int bib)\n+{\n+  return vec_mergeo (bia, bib);\n+}\n+\n+vector signed int\n+foo151 (vector signed int sia, vector signed int sib)\n+{\n+  return vec_mergeo (sia, sib);\n+}\n+\n+vector unsigned int\n+foo152 (vector unsigned int uia, vector unsigned int uib)\n+{\n+  return vec_mergeo (uia, uib);\n+}\n+\n+vector pixel\n+foo153 (vector pixel pa)\n+{\n+  return vec_splat (pa, 1);\n+}\n+\n+vector bool short\n+foo154 (vector bool short bsa)\n+{\n+  return vec_splat (bsa, 0);\n+}\n+\n+vector signed short\n+foo155 (vector signed short ssa)\n+{\n+  return vec_splat (ssa, 2);\n+}\n+\n+vector unsigned short\n+foo156 (vector unsigned short usa)\n+{\n+  return vec_splat (usa, 1);\n }\n \n /* Expected results:\n@@ -278,80 +966,72 @@ int main ()\n    vec_and             xxland\n    vec_andc            xxlandc\n    vec_cntlz           vclzd, vclzb, vclzw, vclzh\n-   vec_cpsgn           xvcpsgnsp           \n-   vec_ctf             xvmuldp \n+   vec_cpsgn           xvcpsgnsp, xvcpsgndp\n+   vec_ctf             vcfux, vcfsx\n    vec_cts             vctsxs\n    vec_ctu             vctuxs\n-   vec_div             divd, divdu | __divdi3(), __udivdi3()\n-   vec_mergel          vmrghb, vmrghh, xxmrghw\n-   vec_mergeh          xxmrglw, vmrglh, vmrglb\n+   vec_div             divd, divdu | __divdi3, __udivdi3\n+   vec_mergel          vmrglb, vmrglh, xxmrglw, xxpermdi\n+   vec_mergeh          xxmrghw, vmrghh, vmrghb, xxpermdi\n    vec_mul             mulld | mullw, mulhwu\n    vec_nor             xxlnor\n    vec_packsu          vpkudus\n    vec_perm            vperm\n    vec_round           xvrdpi\n    vec_sel             xxsel\n    vec_xor             xxlxor \n-   vec_rsqrt           xvrsqrtesp\n-   vec_rsqrte          xvrsqrtesp\n+   vec_rsqrt           xvrsqrtesp, xvrsqrtedp\n+   vec_rsqrte          xvrsqrtesp, xvrsqrtedp\n    vec_xl              lxvd2x\n    vec_xst             stxvd2x\n-   vec_splat           xxspltb, xxspltw, vsplth\n-   vec_mergee          xxmrgld, vmrgow\n-   vec_mergeo          xxmrghd, vmrgew  */\n-\n-/* { dg-final { scan-assembler-times \"vcmpequd\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtud\" 16 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 30 } } */\n-/* { dg-final { scan-assembler-times \"xxlandc\" 13 } } */\n-/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vclzd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vclzw\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vclzh\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvcpsgnsp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvcpsgndp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmuldp\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvcvdpsxds\" 0 } } */\n-/* { dg-final { scan-assembler-times \"vctsxs\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvcvdpuxds\" 0 } } */\n-/* { dg-final { scan-assembler-times \"vctuxs\" 2 } } */\n-\n-/* { dg-final { scan-assembler-times \"vmrghb\" 4 { target be } } } */\n-/* { dg-final { scan-assembler-times \"vmrghb\" 6 { target le } } } */\n-/* { dg-final { scan-assembler-times \"vmrghh\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xxmrghw\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxmrglw\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmrglh\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+   vec_splat           xxspltb | vspltb, xxspltw | vspltw, xxsplth | vsplth,\n+                       xxpermdi\n+   vec_mergee          xxpermdi, vmrgew\n+   vec_mergeo          xxpermdi, vmrgow  */\n+\n+/* { dg-final { scan-assembler-times {\\mvcmpequd\\.} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtud\\.} 8 } } */\n+/* { dg-final { scan-assembler-times {\\mxxland\\M} 17 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n+/* { dg-final { scan-assembler-times {\\mvclzb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvclzd\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvclzw\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvclzh\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcpsgnsp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcpsgndp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvcfsx\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvcfux\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvctsxs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvctuxs\\M} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\mvmrghb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrghh\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmrghw\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmrglw\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrglh\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 6 } } */\n /* { dg-final { scan-assembler-times {\\mvpkudus\\M} 1 } } */\n-/* { dg-final { scan-assembler-times \"vperm\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpi\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xxsel\" 5 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 6 } } */\n-/* { dg-final { scan-assembler-times \"divd\" 8  { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"divdu\" 2  { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"mulld\" 4  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvrfin\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 5 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 6 } } */\n+/* { dg-final { scan-assembler-times {\\mdivd\\M} 2  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mdivdu\\M} 2  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mmulld\\M} 4  { target lp64 } } } */\n /* check for .__divdi3 (AIX), __divdi3 (Linux) and ___divdi3 (Darwin) */\n /* { dg-final { scan-assembler-times {\\mbl \\.?_?__divdi3\\M} 2   { target { ilp32 } } } } */\n /* check for both .__udivdi3 (AIX), __udivdi3 (Linux) and ___udivdi3 (Darwin) */\n /* { dg-final { scan-assembler-times {\\mbl \\.?_?__udivdi3\\M} 2  { target { ilp32 } } } } */\n-/* { dg-final { scan-assembler-times \"mullw\" 12  { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times \"mulhwu\" 4  { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times \"xxmrgld\" 0 } } */\n-/* { dg-final { scan-assembler-times \"xxmrghd\" 0 } } */\n-/* { dg-final { scan-assembler-times \"xvrsqrtesp\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvrsqrtedp\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xxspltd\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vcfsx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcfux\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vspltb\" 6 } } */\n-/* { dg-final { scan-assembler-times \"vspltw\" 0 } } */\n-/* { dg-final { scan-assembler-times \"vmrgow\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vmrglb\" 4 { target le } } } */\n-/* { dg-final { scan-assembler-times \"vmrglb\" 6 { target be } } } */\n-/* { dg-final { scan-assembler-times \"vmrgew\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vsplth\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vcmpequd.\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtud.\" 16 } } */\n-/* { dg-final { scan-assembler-times \"vrfin\" 2 } } */\n-\n+/* { dg-final { scan-assembler-times {\\mmullw\\M} 12  { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxvrsqrtesp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrsqrtedp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvcfsx\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvcfux\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvspltb|xxspltb\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvspltw|xxspltw\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrgow\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrglb\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrgew\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvsplth|xxsplth\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 44 } } */"}, {"sha": "c6c7ebf3aefd6a8e6b6131c6b694388c66329e65", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O0 -mno-fold-gimple -dp\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O0 -dp\" } */\n \n #include <altivec.h>\n "}, {"sha": "ed31e60829608294f9da9b418e0ce5ad8b263888", "filename": "gcc/testsuite/gcc.target/powerpc/p8-vec-xl-xst.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8-vec-xl-xst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8-vec-xl-xst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8-vec-xl-xst.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile { target { le } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O2 -mno-fold-gimple\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n /* Verify fix for problem where vec_xl and vec_xst are not recognized\n    for the vector char and vector short cases on P8 only.  */"}, {"sha": "038238d13cfa570bda54e241d262a0a60ad66747", "filename": "gcc/testsuite/gcc.target/powerpc/pr83926.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83926.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83926.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83926.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n-/* { dg-options \"-O2 -mdejagnu-cpu=power8 -mno-fold-gimple\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n \n __attribute__ ((altivec(vector__))) long long\n sdiv (__attribute__ ((altivec(vector__))) long long a,"}, {"sha": "2c463120676e615ecd1fd48d095cd4c77d4166d4", "filename": "gcc/testsuite/gcc.target/powerpc/pr86731-nogimplefold-longlong.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold-longlong.c?ref=3f30f2d1dbb3228b8468b26239fe60c2974ce2ac", "patch": "@@ -1,32 +0,0 @@\n-/* PR86731.  Verify that the rs6000 gimple-folding code handles the\n-   left shift operation properly.  This is a testcase variation that\n-   explicitly disables gimple folding.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-maltivec -O3 -fwrapv -mno-fold-gimple -mpower8-vector \" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n-\n-\n-#include <altivec.h>\n-\n-vector unsigned long long splatu4(void)\n-{\n-        vector unsigned long long mzero = {-1,-1};\n-        return (vector unsigned long long) vec_sl(mzero, mzero);\n-}\n-\n-vector signed long long splats4(void)\n-{\n-        vector unsigned long long mzero = {-1,-1};\n-        return (vector signed long long) vec_sl(mzero, mzero);\n-}\n-\n-/* Codegen will consist of splat and shift instructions for most types.\n-   Noted variations:  if gimple folding is disabled, or if -fwrapv is not specified, the\n-   long long tests will generate a vspltisw+vsld pair, versus generating a lvx.  */\n-/* { dg-final { scan-assembler-times {\\mvspltis[bhw]\\M|\\mxxspltib\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvsl[bhwd]\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M} 0 } } */\n-"}, {"sha": "d424b0c488eb6214c642e95c28c0e041b80caf0d", "filename": "gcc/testsuite/gcc.target/powerpc/pr86731-nogimplefold.c", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f30f2d1dbb3228b8468b26239fe60c2974ce2ac/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr86731-nogimplefold.c?ref=3f30f2d1dbb3228b8468b26239fe60c2974ce2ac", "patch": "@@ -1,63 +0,0 @@\n-/* PR86731.  Verify that the rs6000 gimple-folding code handles the\n-   left shift operation properly.  This is a testcase variation that\n-   explicitly disables gimple folding.  */\n-\n-/* { dg-do compile } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-maltivec -O3 -fwrapv -mno-fold-gimple\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n-\n-\n-#include <altivec.h>\n-/* original test as reported.  */\n-vector unsigned int splat(void)\n-{\n-        vector unsigned int mzero = vec_splat_u32(-1);\n-        return (vector unsigned int) vec_sl(mzero, mzero);\n-}\n-\n-/* more testcase variations.  */\n-vector unsigned char splatu1(void)\n-{\n-        vector unsigned char mzero = vec_splat_u8(-1);\n-        return (vector unsigned char) vec_sl(mzero, mzero);\n-}\n-\n-vector unsigned short splatu2(void)\n-{\n-        vector unsigned short mzero = vec_splat_u16(-1);\n-        return (vector unsigned short) vec_sl(mzero, mzero);\n-}\n-\n-vector unsigned int splatu3(void)\n-{\n-        vector unsigned int mzero = vec_splat_u32(-1);\n-        return (vector unsigned int) vec_sl(mzero, mzero);\n-}\n-\n-vector signed char splats1(void)\n-{\n-        vector unsigned char mzero = vec_splat_u8(-1);\n-        return (vector signed char) vec_sl(mzero, mzero);\n-}\n-\n-vector signed short splats2(void)\n-{\n-        vector unsigned short mzero = vec_splat_u16(-1);\n-        return (vector signed short) vec_sl(mzero, mzero);\n-}\n-\n-vector signed int splats3(void)\n-{\n-        vector unsigned int mzero = vec_splat_u32(-1);\n-        return (vector signed int) vec_sl(mzero, mzero);\n-}\n-\n-/* Codegen will consist of splat and shift instructions for most types.\n-   Noted variations:  if gimple folding is disabled, or if -fwrapv is not specified, the\n-   long long tests will generate a vspltisw+vsld pair, versus generating a lvx.  */\n-/* { dg-final { scan-assembler-times {\\mvspltis[bhw]\\M|\\mxxspltib\\M} 7 } } */\n-/* { dg-final { scan-assembler-times {\\mvsl[bhwd]\\M} 7 } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M} 0 } } */\n-"}, {"sha": "342ccd64a04b2e5ce2a02752f38253d7944091f2", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-17.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bd780ee327c9ae6ffc0641e73cc1f4939fb204/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-17.c?ref=48bd780ee327c9ae6ffc0641e73cc1f4939fb204", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile { target { le } } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O1 -mno-fold-gimple\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O1\" } */\n /* { dg-final { scan-assembler \"lxvd2x\" } } */\n /* { dg-final { scan-assembler \"xxpermdi\" } } */\n "}]}