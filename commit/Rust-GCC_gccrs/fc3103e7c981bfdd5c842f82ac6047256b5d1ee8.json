{"sha": "fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMzMTAzZTdjOTgxYmZkZDVjODQyZjgyYWM2MDQ3MjU2YjVkMWVlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-02-10T16:22:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-02-10T16:22:29Z"}, "message": "re PR target/39139 (ICE with stringop and register var)\n\n\tPR target/39139\n\t* function.h (struct function): Add has_local_explicit_reg_vars\n\tbit.\n\t* gimplify.c (gimplify_bind_expr): Set it if local DECL_HARD_REGISTER\n\tVAR_DECLs were seen.\n\t* tree-ssa-live.c (remove_unused_locals): Recompute\n\tcfun->has_local_explicit_reg_vars.\n\t* tree-ssa-sink.c (statement_sink_location): Don't sink BLKmode\n\tcopies or clearings if cfun->has_local_explicit_reg_vars.\n\n\t* gcc.target/i386/pr39139.c: New test.\n\nFrom-SVN: r144065", "tree": {"sha": "eb1fb857e229b58695341024ec649f95610b921f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb1fb857e229b58695341024ec649f95610b921f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbf9ee15b8b1863086ac94c0e2657cd911655880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf9ee15b8b1863086ac94c0e2657cd911655880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf9ee15b8b1863086ac94c0e2657cd911655880"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "c5e00ed34f6ca134f0154d3115af5cd1e3efd90d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,3 +1,15 @@\n+2009-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39139\n+\t* function.h (struct function): Add has_local_explicit_reg_vars\n+\tbit.\n+\t* gimplify.c (gimplify_bind_expr): Set it if local DECL_HARD_REGISTER\n+\tVAR_DECLs were seen.\n+\t* tree-ssa-live.c (remove_unused_locals): Recompute\n+\tcfun->has_local_explicit_reg_vars.\n+\t* tree-ssa-sink.c (statement_sink_location): Don't sink BLKmode\n+\tcopies or clearings if cfun->has_local_explicit_reg_vars.\n+\n 2009-02-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39118"}, {"sha": "3f03727dfdcf6eee56d7b546c9212f4ce319a921", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,6 +1,6 @@\n /* Structure for saving state for a nested function.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2003, 2004, 2005, 2006, 2007, 2008\n+   1999, 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -596,6 +596,10 @@ struct function GTY(())\n \n   /* Nonzero if pass_tree_profile was run on this function.  */\n   unsigned int after_tree_profile : 1;\n+\n+  /* Nonzero if this function has local DECL_HARD_REGISTER variables.\n+     In this case code motion has to be done more carefully.  */\n+  unsigned int has_local_explicit_reg_vars : 1;\n };\n \n /* If va_list_[gf]pr_size is set to this, it means we don't know how"}, {"sha": "4af50291040ab91b88b78a854671844d2a14c159", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,6 +1,6 @@\n /* Tree lowering pass.  This pass converts the GENERIC functions-as-trees\n    tree representation into the GIMPLE form.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Major work done by Sebastian Pop <s.pop@laposte.net>,\n    Diego Novillo <dnovillo@redhat.com> and Jason Merrill <jason@redhat.com>.\n@@ -1240,6 +1240,9 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t    omp_add_variable (gimplify_omp_ctxp, t, GOVD_LOCAL | GOVD_SEEN);\n \n \t  DECL_SEEN_IN_BIND_EXPR_P (t) = 1;\n+\n+\t  if (DECL_HARD_REGISTER (t) && !is_global_var (t) && cfun)\n+\t    cfun->has_local_explicit_reg_vars = true;\n \t}\n \n       /* Preliminarily mark non-addressed complex variables as eligible"}, {"sha": "e5d166e302acfc69c37b97142429377a73078c0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,3 +1,8 @@\n+2009-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39139\n+\t* gcc.target/i386/pr39139.c: New test.\n+\n 2009-02-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39132"}, {"sha": "95ea7fda9ba6ad1faa1156b40e097354d4205866", "filename": "gcc/testsuite/gcc.target/i386/pr39139.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/39139 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+#ifdef __x86_64__\n+# define AX_REG asm (\"rax\")\n+# define DI_REG asm (\"rdi\")\n+# define SI_REG asm (\"rsi\")\n+#else\n+# define AX_REG asm (\"eax\")\n+# define DI_REG asm (\"edi\")\n+# define SI_REG asm (\"esi\")\n+#endif\n+\n+static inline int\n+foo (unsigned int x, void *y)\n+{\n+  register unsigned long r AX_REG;\n+  register unsigned long a1 DI_REG;\n+  register unsigned long a2 SI_REG;\n+  a1 = (unsigned long) x;\n+  a2 = (unsigned long) y;\n+  asm volatile (\"\" : \"=r\" (r), \"+r\" (a1), \"+r\" (a2) : : \"memory\");\n+  return (int) r;\n+}\n+\n+struct T { unsigned long t1, t2; unsigned int t3, t4, t5; };\n+\n+int\n+bar (unsigned long x, unsigned int y, unsigned long u, unsigned int v)\n+{\n+  long r;\n+  struct T e = { .t1 = x, .t2 = u };\n+\n+  if (x << y != u << v)\n+    return 5;\n+  r = foo (11, &e);\n+  return e.t3 == x;\n+}"}, {"sha": "8ebf30ec9269b318aa252227f23990ed8df42f77", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,5 +1,5 @@\n /* Liveness for SSA trees.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation,\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation,\n    Inc.\n    Contributed by Andrew MacLeod <amacleod@redhat.com>\n \n@@ -642,6 +642,8 @@ remove_unused_locals (void)\n \t  TREE_USED (e->goto_block) = true;\n     }\n \n+  cfun->has_local_explicit_reg_vars = false;\n+\n   /* Remove unmarked local vars from local_decls.  */\n   for (cell = &cfun->local_decls; *cell; )\n     {\n@@ -663,6 +665,10 @@ remove_unused_locals (void)\n \t      continue;\n \t    }\n \t}\n+      else if (TREE_CODE (var) == VAR_DECL\n+\t       && DECL_HARD_REGISTER (var)\n+\t       && !is_global_var (var))\n+\tcfun->has_local_explicit_reg_vars = true;\n       cell = &TREE_CHAIN (*cell);\n     }\n "}, {"sha": "82a027da049ba7310a79ffe32b56b085bb0534c3", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3103e7c981bfdd5c842f82ac6047256b5d1ee8/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=fc3103e7c981bfdd5c842f82ac6047256b5d1ee8", "patch": "@@ -1,5 +1,6 @@\n /* Code sinking for trees\n-   Copyright (C) 2001, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2007, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@dberlin.org>\n \n This file is part of GCC.\n@@ -301,7 +302,12 @@ statement_sink_location (gimple stmt, basic_block frombb,\n      We can't sink statements that have volatile operands.  \n \n      We don't want to sink dead code, so anything with 0 immediate uses is not\n-     sunk.  \n+     sunk.\n+\n+     Don't sink BLKmode assignments if current function has any local explicit\n+     register variables, as BLKmode assignments may involve memcpy or memset\n+     calls or, on some targets, inline expansion thereof that sometimes need\n+     to use specific hard registers.\n \n   */\n   code = gimple_assign_rhs_code (stmt);\n@@ -311,7 +317,9 @@ statement_sink_location (gimple stmt, basic_block frombb,\n       || code == FILTER_EXPR\n       || is_hidden_global_store (stmt)\n       || gimple_has_volatile_ops (stmt)\n-      || !ZERO_SSA_OPERANDS (stmt, SSA_OP_VUSE))\n+      || !ZERO_SSA_OPERANDS (stmt, SSA_OP_VUSE)\n+      || (cfun->has_local_explicit_reg_vars\n+\t  && TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt))) == BLKmode))\n     return false;\n   \n   FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, iter, SSA_OP_ALL_DEFS)"}]}