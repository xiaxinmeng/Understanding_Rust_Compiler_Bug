{"sha": "f2e16e973b957b130293059a4117c35dffe6b36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlMTZlOTczYjk1N2IxMzAyOTMwNTlhNDExN2MzNWRmZmU2YjM2YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-17T11:41:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-17T11:41:43Z"}, "message": "toplev.c (HAVE_conditional_execution): Provide default.\n\n\t* toplev.c (HAVE_conditional_execution): Provide default.\n\t(rest_of_handle_reorder_blocks): For conditional_execution target\n\tupdate liveness once after all transformations\n\t(rest_of_compilation): Do crossjumping before ce3.\n\nFrom-SVN: r76032", "tree": {"sha": "8e51ed2538908a0d4dc3ed8bbfac8b7537cdc823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e51ed2538908a0d4dc3ed8bbfac8b7537cdc823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e16e973b957b130293059a4117c35dffe6b36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e16e973b957b130293059a4117c35dffe6b36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e16e973b957b130293059a4117c35dffe6b36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e16e973b957b130293059a4117c35dffe6b36a/comments", "author": null, "committer": null, "parents": [{"sha": "f103e34d1dbc090a6bdb744bc1d7a568695ba491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f103e34d1dbc090a6bdb744bc1d7a568695ba491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f103e34d1dbc090a6bdb744bc1d7a568695ba491"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "1c11ea771e37dd92306ae383e22afb80f08cb429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e16e973b957b130293059a4117c35dffe6b36a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e16e973b957b130293059a4117c35dffe6b36a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2e16e973b957b130293059a4117c35dffe6b36a", "patch": "@@ -1,3 +1,10 @@\n+2004-01-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (HAVE_conditional_execution): Provide default.\n+\t(rest_of_handle_reorder_blocks): For conditional_execution target\n+\tupdate liveness once after all transformations\n+\t(rest_of_compilation): Do crossjumping before ce3.\n+\n 2004-01-17  Geoffrey Keating  <geoffk@apple.com>\n \n \t* alias.c (new_alias_set): Mark last_alias_set for PCH."}, {"sha": "6850914f099a640867cceaa9efe62f6b35e1729e", "filename": "gcc/toplev.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e16e973b957b130293059a4117c35dffe6b36a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e16e973b957b130293059a4117c35dffe6b36a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f2e16e973b957b130293059a4117c35dffe6b36a", "patch": "@@ -96,6 +96,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t\t\t\t   declarations for e.g. AIX 4.x.  */\n #endif\n \n+#ifndef HAVE_conditional_execution\n+#define HAVE_conditional_execution 0\n+#endif\n+\n /* Carry information from ASM_DECLARE_OBJECT_NAME\n    to ASM_FINISH_DECLARE_OBJECT.  */\n \n@@ -2294,21 +2298,31 @@ rest_of_handle_regrename (tree decl, rtx insns)\n static void\n rest_of_handle_reorder_blocks (tree decl, rtx insns)\n {\n+  bool changed;\n   open_dump_file (DFI_bbro, decl);\n \n   /* Last attempt to optimize CFG, as scheduling, peepholing and insn\n      splitting possibly introduced more crossjumping opportunities.  */\n-  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE\n-\t       | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n+  changed |= cleanup_cfg (CLEANUP_EXPENSIVE\n+\t\t  \t  | (!HAVE_conditional_execution\n+\t\t\t     ? CLEANUP_UPDATE_LIFE : 0));\n \n   if (flag_sched2_use_traces && flag_schedule_insns_after_reload)\n     tracer ();\n   if (flag_reorder_blocks)\n     reorder_basic_blocks ();\n   if (flag_reorder_blocks\n       || (flag_sched2_use_traces && flag_schedule_insns_after_reload))\n-    cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE);\n-\n+    changed |= cleanup_cfg (CLEANUP_EXPENSIVE\n+\t\t\t    | (!HAVE_conditional_execution\n+\t\t\t       ? CLEANUP_UPDATE_LIFE : 0));\n+\n+  /* On conditional execution targets we can not update the life cheaply, so\n+     we deffer the updating to after both cleanups.  This may lose some cases\n+     but should not be terribly bad.  */\n+  if (changed && HAVE_conditional_execution)\n+    update_life_info (NULL, UPDATE_LIFE_GLOBAL_RM_NOTES,\n+\t\t      PROP_DEATH_NOTES | PROP_REG_INFO);\n   close_dump_file (DFI_bbro, print_rtl_with_bb, insns);\n }\n \n@@ -3474,16 +3488,22 @@ rest_of_compilation (tree decl)\n     }\n #endif\n \n+  open_dump_file (DFI_ce3, decl);\n+  if (optimize)\n+    /* Last attempt to optimize CFG, as scheduling, peepholing and insn\n+       splitting possibly introduced more crossjumping opportunities.  */\n+    cleanup_cfg (CLEANUP_EXPENSIVE\n+\t\t | CLEANUP_UPDATE_LIFE \n+\t\t | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n   if (flag_if_conversion2)\n     {\n       timevar_push (TV_IFCVT2);\n-      open_dump_file (DFI_ce3, decl);\n \n       if_convert (1);\n \n-      close_dump_file (DFI_ce3, print_rtl_with_bb, insns);\n       timevar_pop (TV_IFCVT2);\n     }\n+  close_dump_file (DFI_ce3, print_rtl_with_bb, insns);\n \n   if (optimize > 0)\n     {"}]}