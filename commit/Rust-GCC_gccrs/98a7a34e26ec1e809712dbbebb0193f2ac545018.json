{"sha": "98a7a34e26ec1e809712dbbebb0193f2ac545018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhN2EzNGUyNmVjMWU4MDk3MTJkYmJlYmIwMTkzZjJhYzU0NTAxOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-04-10T17:18:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-04-10T17:18:15Z"}, "message": "re PR sanitizer/80348 (UBSAN: compile time crash in ubsan_instrument_division)\n\n\tPR sanitizer/80348\n\t* typeck.c (cp_build_binary_op): Use NULL_TREE instead of NULL.  Set\n\tORIG_TYPE earlier and not only when shortening.\n\n\t* g++.dg/ubsan/div-by-zero-3.C: New test.\n\nFrom-SVN: r246812", "tree": {"sha": "f72e0e27e76d0c06c364498bb0651309c7d8946a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72e0e27e76d0c06c364498bb0651309c7d8946a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98a7a34e26ec1e809712dbbebb0193f2ac545018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a7a34e26ec1e809712dbbebb0193f2ac545018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a7a34e26ec1e809712dbbebb0193f2ac545018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a7a34e26ec1e809712dbbebb0193f2ac545018/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46bf3f84b6a117d94ac7479c9e13e05af82d9931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bf3f84b6a117d94ac7479c9e13e05af82d9931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bf3f84b6a117d94ac7479c9e13e05af82d9931"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "0a19eaafbbe3e0b81f4d35bc563981c93170a2ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98a7a34e26ec1e809712dbbebb0193f2ac545018", "patch": "@@ -1,3 +1,9 @@\n+2017-04-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/80348\n+\t* typeck.c (cp_build_binary_op): Use NULL_TREE instead of NULL.  Set\n+\tORIG_TYPE earlier and not only when shortening.\n+\n 2017-04-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80356 - ICE with reference to function template argument."}, {"sha": "7aee0d6f0ac14d4954684ecc93e05dea1da7eb3c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=98a7a34e26ec1e809712dbbebb0193f2ac545018", "patch": "@@ -4105,7 +4105,7 @@ cp_build_binary_op (location_t location,\n \n   /* Data type in which the computation is to be performed.\n      In the simplest cases this is the common type of the arguments.  */\n-  tree result_type = NULL;\n+  tree result_type = NULL_TREE;\n \n   /* Nonzero means operands have already been type-converted\n      in whatever way is necessary.\n@@ -4121,7 +4121,6 @@ cp_build_binary_op (location_t location,\n   tree final_type = 0;\n \n   tree result, result_ovl;\n-  tree orig_type = NULL;\n \n   /* Nonzero if this is an operation like MIN or MAX which can\n      safely be computed in short if both args are promoted shorts.\n@@ -4153,7 +4152,7 @@ cp_build_binary_op (location_t location,\n   bool doing_shift = false;\n \n   /* Tree holding instrumentation expression.  */\n-  tree instrument_expr = NULL;\n+  tree instrument_expr = NULL_TREE;\n \n   if (code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n       || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR\n@@ -5042,6 +5041,10 @@ cp_build_binary_op (location_t location,\n       return tmp;\n     }\n \n+  /* Remember the original type; RESULT_TYPE might be changed later on\n+     by shorten_binary_op.  */\n+  tree orig_type = result_type;\n+\n   if (arithmetic_types_p)\n     {\n       bool first_complex = (code0 == COMPLEX_TYPE);\n@@ -5138,7 +5141,6 @@ cp_build_binary_op (location_t location,\n \n       if (shorten && none_complex)\n \t{\n-\t  orig_type = result_type;\n \t  final_type = result_type;\n \t  result_type = shorten_binary_op (result_type, op0, op1,\n \t\t\t\t\t   shorten == -1);\n@@ -5218,13 +5220,10 @@ cp_build_binary_op (location_t location,\n \t     original result_type.  */\n \t  tree cop0 = op0;\n \t  tree cop1 = op1;\n-\t  if (orig_type != NULL_TREE)\n-\t    {\n-\t      if (TREE_TYPE (cop0) != orig_type)\n-\t\tcop0 = cp_convert (orig_type, op0, complain);\n-\t      if (TREE_TYPE (cop1) != orig_type)\n-\t\tcop1 = cp_convert (orig_type, op1, complain);\n-\t    }\n+\t  if (TREE_TYPE (cop0) != orig_type)\n+\t    cop0 = cp_convert (orig_type, op0, complain);\n+\t  if (TREE_TYPE (cop1) != orig_type)\n+\t    cop1 = cp_convert (orig_type, op1, complain);\n \t  instrument_expr = ubsan_instrument_division (location, cop0, cop1);\n \t}\n       else if (doing_shift && (flag_sanitize & SANITIZE_SHIFT))"}, {"sha": "8df659e25e1dfda579cc604a4fe091914ab4a2fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98a7a34e26ec1e809712dbbebb0193f2ac545018", "patch": "@@ -1,3 +1,8 @@\n+2017-04-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/80348\n+\t* g++.dg/ubsan/div-by-zero-3.C: New test.\n+\n 2017-04-10  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/80153"}, {"sha": "589dd255c1ec9d1c7cc394dc16c4de29801d6d1b", "filename": "gcc/testsuite/g++.dg/ubsan/div-by-zero-3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a7a34e26ec1e809712dbbebb0193f2ac545018/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-3.C?ref=98a7a34e26ec1e809712dbbebb0193f2ac545018", "patch": "@@ -0,0 +1,22 @@\n+// PR sanitizer/80348\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=integer-divide-by-zero\" }\n+\n+extern long long int i;\n+void\n+fn1 ()\n+{\n+  (0 >= 10253361740180 >= long (0 >= 0)) % i;\n+}\n+\n+void\n+fn2 ()\n+{\n+  0 / unsigned (!(0 - 3) >= (0 > 0));\n+}\n+\n+void\n+fn3 ()\n+{\n+  (0 < 0 >= (0 < 0 < 0)) % (unsigned (2) << 0);\n+}"}]}