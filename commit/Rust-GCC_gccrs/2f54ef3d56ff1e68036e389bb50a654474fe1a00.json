{"sha": "2f54ef3d56ff1e68036e389bb50a654474fe1a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1NGVmM2Q1NmZmMWU2ODAzNmUzODliYjUwYTY1NDQ3NGZlMWEwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:08:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:08:00Z"}, "message": "[multiple changes]\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Has_Non_Null_Refinement): Rename to\n\tHas_Non_Null_Visible_Refinement.\n\t(Has_Null_Refinement): Rename to Has_Null_Visible_Refinement.\n\t* einfo.ads Update the documentation of\n\tattribute Has_Non_Null_Refinement and attribute Has_Null_Refinement.\n\t(Has_Non_Null_Refinement): Rename to Has_Non_Null_Visible_Refinement\n\tand update occurrences in entities.\n\t(Has_Null_Refinement): Rename to Has_Null_Visible_Refinement and update\n\toccurrences in entities.\n\t* sem_prag.adb (Check_In_Out_States): Update the calls to\n\tHas_[Non_]Null_Refinement.\n\t(Check_Input_States): Update the\n\tcalls to Has_[Non_]Null_Refinement.\n\t(Check_Output_States): Update the calls to Has_[Non_]Null_Refinement.\n\t(Check_Proof_In_States): Update the calls to Has_[Non_]Null_Refinement.\n\t(Collect_Global_Item): Update the calls to Has_[Non_]Null_Refinement.\n\t(Is_Null_Refined_State): Update the calls to Has_[Non_]Null_Refinement.\n\t(Match_Item): Update the calls to Has_[Non_]Null_Refinement.\n\t* sem_util.adb (Has_Non_Null_Refinement): New routine.\n\t(Has_Null_Refinement): New routine.\n\t* sem_util.ads (Has_Non_Null_Refinement): New routine.\n\t(Has_Null_Refinement): New routine.\n\n2015-11-18  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_util.adb: Minor reformatting and typo fixes.\n\nFrom-SVN: r230525", "tree": {"sha": "d96b8e960539cf0fe4e1ef1106858927cf7bb3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96b8e960539cf0fe4e1ef1106858927cf7bb3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f54ef3d56ff1e68036e389bb50a654474fe1a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f54ef3d56ff1e68036e389bb50a654474fe1a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f54ef3d56ff1e68036e389bb50a654474fe1a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f54ef3d56ff1e68036e389bb50a654474fe1a00/comments", "author": null, "committer": null, "parents": [{"sha": "d930784028af209c12327ae6ee0cc2b163fe82ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d930784028af209c12327ae6ee0cc2b163fe82ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d930784028af209c12327ae6ee0cc2b163fe82ae"}], "stats": {"total": 142, "additions": 110, "deletions": 32}, "files": [{"sha": "87dce3b86f006ffc2459ca8efe31a0a397f95ff1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -1,3 +1,32 @@\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Has_Non_Null_Refinement): Rename to\n+\tHas_Non_Null_Visible_Refinement.\n+\t(Has_Null_Refinement): Rename to Has_Null_Visible_Refinement.\n+\t* einfo.ads Update the documentation of\n+\tattribute Has_Non_Null_Refinement and attribute Has_Null_Refinement.\n+\t(Has_Non_Null_Refinement): Rename to Has_Non_Null_Visible_Refinement\n+\tand update occurrences in entities.\n+\t(Has_Null_Refinement): Rename to Has_Null_Visible_Refinement and update\n+\toccurrences in entities.\n+\t* sem_prag.adb (Check_In_Out_States): Update the calls to\n+\tHas_[Non_]Null_Refinement.\n+\t(Check_Input_States): Update the\n+\tcalls to Has_[Non_]Null_Refinement.\n+\t(Check_Output_States): Update the calls to Has_[Non_]Null_Refinement.\n+\t(Check_Proof_In_States): Update the calls to Has_[Non_]Null_Refinement.\n+\t(Collect_Global_Item): Update the calls to Has_[Non_]Null_Refinement.\n+\t(Is_Null_Refined_State): Update the calls to Has_[Non_]Null_Refinement.\n+\t(Match_Item): Update the calls to Has_[Non_]Null_Refinement.\n+\t* sem_util.adb (Has_Non_Null_Refinement): New routine.\n+\t(Has_Null_Refinement): New routine.\n+\t* sem_util.ads (Has_Non_Null_Refinement): New routine.\n+\t(Has_Null_Refinement): New routine.\n+\n+2015-11-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb: Minor reformatting and typo fixes.\n+\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch4.adb: Minor reformatting."}, {"sha": "b7c2732837d41bd7712b506b107b5b95dcb1a693", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -7301,11 +7301,11 @@ package body Einfo is\n         and then Present (Non_Limited_View (Id));\n    end Has_Non_Limited_View;\n \n-   -----------------------------\n-   -- Has_Non_Null_Refinement --\n-   -----------------------------\n+   -------------------------------------\n+   -- Has_Non_Null_Visible_Refinement --\n+   -------------------------------------\n \n-   function Has_Non_Null_Refinement (Id : E) return B is\n+   function Has_Non_Null_Visible_Refinement (Id : E) return B is\n    begin\n       --  \"Refinement\" is a concept applicable only to abstract states\n \n@@ -7322,7 +7322,7 @@ package body Einfo is\n       end if;\n \n       return False;\n-   end Has_Non_Null_Refinement;\n+   end Has_Non_Null_Visible_Refinement;\n \n    -----------------------------\n    -- Has_Null_Abstract_State --\n@@ -7337,11 +7337,11 @@ package body Einfo is\n           and then Is_Null_State (Node (First_Elmt (Abstract_States (Id))));\n    end Has_Null_Abstract_State;\n \n-   -------------------------\n-   -- Has_Null_Refinement --\n-   -------------------------\n+   ---------------------------------\n+   -- Has_Null_Visible_Refinement --\n+   ---------------------------------\n \n-   function Has_Null_Refinement (Id : E) return B is\n+   function Has_Null_Visible_Refinement (Id : E) return B is\n    begin\n       --  \"Refinement\" is a concept applicable only to abstract states\n \n@@ -7358,7 +7358,7 @@ package body Einfo is\n       end if;\n \n       return False;\n-   end Has_Null_Refinement;\n+   end Has_Null_Visible_Refinement;\n \n    --------------------\n    -- Has_Unmodified --"}, {"sha": "28fa5d6115dda0eefc1dda162dfa02a170cd1054", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -1761,9 +1761,10 @@ package Einfo is\n --       E_Abstract_State entities. True if their Non_Limited_View attribute\n --       is present.\n \n---    Has_Non_Null_Refinement (synth)\n---       Defined in E_Abstract_State entities. True if the state has at least\n---       one variable or state constituent in aspect/pragma Refined_State.\n+--    Has_Non_Null_Visible_Refinement (synth)\n+--       Defined in E_Abstract_State entities. True if the state has a visible\n+--       refinement of at least one variable or state constituent as expressed\n+--       in aspect/pragma Refined_State.\n \n --    Has_Non_Standard_Rep (Flag75) [implementation base type only]\n --       Defined in all type entities. Set when some representation clause\n@@ -1779,9 +1780,9 @@ package Einfo is\n --       Defined in package entities. True if the package is subject to a null\n --       Abstract_State aspect/pragma.\n \n---    Has_Null_Refinement (synth)\n---       Defined in E_Abstract_State entities. True if the state has a null\n---       refinement in aspect/pragma Refined_State.\n+--    Has_Null_Visible_Refinement (synth)\n+--       Defined in E_Abstract_State entities. True if the state has a visible\n+--       null refinement as expressed in aspect/pragma Refined_State.\n \n --    Has_Object_Size_Clause (Flag172)\n --       Defined in entities for types and subtypes. Set if an Object_Size\n@@ -5525,8 +5526,8 @@ package Einfo is\n    --    From_Limited_With                   (Flag159)\n    --    Has_Visible_Refinement              (Flag263)\n    --    Has_Non_Limited_View                (synth)\n-   --    Has_Non_Null_Refinement             (synth)\n-   --    Has_Null_Refinement                 (synth)\n+   --    Has_Non_Null_Visible_Refinement     (synth)\n+   --    Has_Null_Visible_Refinement         (synth)\n    --    Is_External_State                   (synth)\n    --    Is_Null_State                       (synth)\n    --    Is_Synchronized_State               (synth)\n@@ -7255,9 +7256,9 @@ package Einfo is\n    function Has_Entries                         (Id : E) return B;\n    function Has_Foreign_Convention              (Id : E) return B;\n    function Has_Non_Limited_View                (Id : E) return B;\n-   function Has_Non_Null_Refinement             (Id : E) return B;\n+   function Has_Non_Null_Visible_Refinement     (Id : E) return B;\n    function Has_Null_Abstract_State             (Id : E) return B;\n-   function Has_Null_Refinement                 (Id : E) return B;\n+   function Has_Null_Visible_Refinement         (Id : E) return B;\n    function Implementation_Base_Type            (Id : E) return E;\n    function Is_Base_Type                        (Id : E) return B;\n    function Is_Boolean_Type                     (Id : E) return B;"}, {"sha": "5810dd58636a5f4a9992656599c1f751d2de9837", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -6586,8 +6586,8 @@ package body Exp_Util is\n       if Is_Private_Type (Unc_Typ)\n         and then Has_Unknown_Discriminants (Unc_Typ)\n       then\n-         --  The caller requests a unque external name for both the private and\n-         --  the full subtype.\n+         --  The caller requests a unique external name for both the private\n+         --  and the full subtype.\n \n          if Present (Related_Id) then\n             Full_Subtyp :="}, {"sha": "d113a2c26549748e50f9df42e21caad5d784940c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -23308,7 +23308,7 @@ package body Sem_Prag is\n \n                return\n                  Ekind (Item_Id) = E_Abstract_State\n-                   and then Has_Null_Refinement (Item_Id);\n+                   and then Has_Null_Visible_Refinement (Item_Id);\n             else\n                return False;\n             end if;\n@@ -23359,7 +23359,7 @@ package body Sem_Prag is\n                   --  An abstract state with visible null refinement matches\n                   --  null or Empty (special case).\n \n-                  if Has_Null_Refinement (Dep_Item_Id)\n+                  if Has_Null_Visible_Refinement (Dep_Item_Id)\n                     and then (No (Ref_Item) or else Nkind (Ref_Item) = N_Null)\n                   then\n                      Record_Item (Dep_Item_Id);\n@@ -23368,7 +23368,7 @@ package body Sem_Prag is\n                   --  An abstract state with visible non-null refinement\n                   --  matches one of its constituents.\n \n-                  elsif Has_Non_Null_Refinement (Dep_Item_Id) then\n+                  elsif Has_Non_Null_Visible_Refinement (Dep_Item_Id) then\n                      if Is_Entity_Name (Ref_Item) then\n                         Ref_Item_Id := Entity_Of (Ref_Item);\n \n@@ -23698,7 +23698,7 @@ package body Sem_Prag is\n                   --  Ensure that all of the constituents are utilized as\n                   --  outputs in pragma Refined_Depends.\n \n-                  elsif Has_Non_Null_Refinement (Item_Id) then\n+                  elsif Has_Non_Null_Visible_Refinement (Item_Id) then\n                      Check_Constituent_Usage (Item_Id);\n                   end if;\n                end if;\n@@ -24270,7 +24270,7 @@ package body Sem_Prag is\n                --  Ensure that one of the three coverage variants is satisfied\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then Has_Non_Null_Refinement (Item_Id)\n+                 and then Has_Non_Null_Visible_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -24361,7 +24361,7 @@ package body Sem_Prag is\n                --  is of mode Input.\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then Has_Non_Null_Refinement (Item_Id)\n+                 and then Has_Non_Null_Visible_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -24455,7 +24455,7 @@ package body Sem_Prag is\n                --  have mode Output.\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then Has_Non_Null_Refinement (Item_Id)\n+                 and then Has_Non_Null_Visible_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -24545,7 +24545,7 @@ package body Sem_Prag is\n                --  is of mode Proof_In\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then Has_Non_Null_Refinement (Item_Id)\n+                 and then Has_Non_Null_Visible_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -24750,10 +24750,10 @@ package body Sem_Prag is\n             --  be null in which case there are no constituents.\n \n             if Ekind (Item_Id) = E_Abstract_State then\n-               if Has_Null_Refinement (Item_Id) then\n+               if Has_Null_Visible_Refinement (Item_Id) then\n                   Has_Null_State := True;\n \n-               elsif Has_Non_Null_Refinement (Item_Id) then\n+               elsif Has_Non_Null_Visible_Refinement (Item_Id) then\n                   Append_New_Elmt (Item_Id, States);\n \n                   if Item_Mode = Name_Input then"}, {"sha": "9a000ae7dc6f4e3ad4970e263c577726c5c0dd47", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -9078,6 +9078,25 @@ package body Sem_Util is\n       end if;\n    end Has_No_Obvious_Side_Effects;\n \n+   -----------------------------\n+   -- Has_Non_Null_Refinement --\n+   -----------------------------\n+\n+   function Has_Non_Null_Refinement (Id : Entity_Id) return Boolean is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+\n+      --  For a refinement to be non-null, the first constituent must be\n+      --  anything other than null.\n+\n+      if Present (Refinement_Constituents (Id)) then\n+         return\n+           Nkind (Node (First_Elmt (Refinement_Constituents (Id)))) /= N_Null;\n+      end if;\n+\n+      return False;\n+   end Has_Non_Null_Refinement;\n+\n    ------------------------\n    -- Has_Null_Exclusion --\n    ------------------------\n@@ -9168,6 +9187,25 @@ package body Sem_Util is\n       end if;\n    end Has_Null_Extension;\n \n+   -------------------------\n+   -- Has_Null_Refinement --\n+   -------------------------\n+\n+   function Has_Null_Refinement (Id : Entity_Id) return Boolean is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+\n+      --  For a refinement to be null, the state's sole constituent must be a\n+      --  null.\n+\n+      if Present (Refinement_Constituents (Id)) then\n+         return\n+           Nkind (Node (First_Elmt (Refinement_Constituents (Id)))) = N_Null;\n+      end if;\n+\n+      return False;\n+   end Has_Null_Refinement;\n+\n    -------------------------------\n    -- Has_Overriding_Initialize --\n    -------------------------------"}, {"sha": "cc53a57bb51eb6b95d3401e7a85a66f4a2fc032e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f54ef3d56ff1e68036e389bb50a654474fe1a00/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=2f54ef3d56ff1e68036e389bb50a654474fe1a00", "patch": "@@ -1059,9 +1059,19 @@ package Sem_Util is\n    --  routine in Remove_Side_Effects is much more extensive and perhaps could\n    --  be shared, so that this routine would be more accurate.\n \n+   function Has_Non_Null_Refinement (Id : Entity_Id) return Boolean;\n+   --  Determine whether abstract state Id has at least one nonnull constituent\n+   --  as expressed in pragma Refined_State. This function does not take into\n+   --  account the visible refinement region of abstract state Id.\n+\n    function Has_Null_Exclusion (N : Node_Id) return Boolean;\n    --  Determine whether node N has a null exclusion\n \n+   function Has_Null_Refinement (Id : Entity_Id) return Boolean;\n+   --  Determine whether abstract state Id has a null refinement as expressed\n+   --  in pragma Refined_State. This function does not take into account the\n+   --  visible refinement region of abstract state Id.\n+\n    function Has_Overriding_Initialize (T : Entity_Id) return Boolean;\n    --  Predicate to determine whether a controlled type has a user-defined\n    --  Initialize primitive (and, in Ada 2012, whether that primitive is"}]}