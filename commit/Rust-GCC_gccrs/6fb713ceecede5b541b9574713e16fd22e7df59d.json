{"sha": "6fb713ceecede5b541b9574713e16fd22e7df59d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiNzEzY2VlY2VkZTViNTQxYjk1NzQ3MTNlMTZmZDIyZTdkZjU5ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:40:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:40:16Z"}, "message": "(FUNCTION_ARG_PADDING): Add parens to make clearer.\n\n(MUST_PASS_IN_STACK): Don't allow machine to override (none currently do).\nDon't force in stack if wrong padding when padding isn't needed.\n\nFrom-SVN: r4172", "tree": {"sha": "f0ddaf3a4e49a250f91de52b712fe0ebcd50360b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0ddaf3a4e49a250f91de52b712fe0ebcd50360b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fb713ceecede5b541b9574713e16fd22e7df59d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb713ceecede5b541b9574713e16fd22e7df59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb713ceecede5b541b9574713e16fd22e7df59d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb713ceecede5b541b9574713e16fd22e7df59d/comments", "author": null, "committer": null, "parents": [{"sha": "67729b992aed9b55b35d140c6415513157f94580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67729b992aed9b55b35d140c6415513157f94580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67729b992aed9b55b35d140c6415513157f94580"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "d4fc662b8c78bb58d528f5212f82b47c85e7c71c", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb713ceecede5b541b9574713e16fd22e7df59d/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb713ceecede5b541b9574713e16fd22e7df59d/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=6fb713ceecede5b541b9574713e16fd22e7df59d", "patch": "@@ -179,7 +179,7 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n #define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\t\\\n   (((MODE) == BLKmode\t\t\t\t\t\t\t\\\n     ? ((TYPE) && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST\t\t\\\n-       && int_size_in_bytes (TYPE) < PARM_BOUNDARY / BITS_PER_UNIT)\t\\\n+       && int_size_in_bytes (TYPE) < (PARM_BOUNDARY / BITS_PER_UNIT))\t\\\n     : GET_MODE_BITSIZE (MODE) < PARM_BOUNDARY)\t\t\t\t\\\n    ? downward : upward)\n #else\n@@ -211,11 +211,6 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n    So a value padded in memory at the upper end can't go in a register.\n    For a little-endian machine, the reverse is true.  */\n \n-/* ??? Perhaps later rename this to FUNCTION_ARG_MUST_PASS_IN_STACK?\n-   (although it is a little long).  */\n-\n-#ifndef MUST_PASS_IN_STACK\n-\n #if BYTES_BIG_ENDIAN\n #define MUST_PASS_IN_STACK_BAD_PADDING\tupward\n #else\n@@ -227,9 +222,11 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n        || TREE_ADDRESSABLE (TYPE)\t\t\t\\\n        || ((MODE) == BLKmode \t\t\t\t\\\n+\t   && ! ((TYPE) != 0 && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST \\\n+\t\t && 0 == (int_size_in_bytes (TYPE)\t\\\n+\t\t\t  % (PARM_BOUNDARY / BITS_PER_UNIT))) \\\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == MUST_PASS_IN_STACK_BAD_PADDING))))\n-#endif\n \n /* Nonzero if type TYPE should be returned in memory.\n    Most machines can use the following default definition.  */"}]}