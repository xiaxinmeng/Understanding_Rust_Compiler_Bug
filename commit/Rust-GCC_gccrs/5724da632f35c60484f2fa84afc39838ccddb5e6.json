{"sha": "5724da632f35c60484f2fa84afc39838ccddb5e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyNGRhNjMyZjM1YzYwNDg0ZjJmYTg0YWZjMzk4MzhjY2RkYjVlNg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-07-02T00:45:55Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-07-02T00:45:55Z"}, "message": "gfortran.texi: Fixed typos and grammar.\n\n2005-07-01  Jerry DeLisle <jvdelisle@verizon.net>\n\n    * gfortran.texi: Fixed typos and grammar.\n    * invoke.texi: Fixed typos and grammar.\n\nFrom-SVN: r101527", "tree": {"sha": "d0d93f5f816936baacc326703f925befbdc86f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0d93f5f816936baacc326703f925befbdc86f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5724da632f35c60484f2fa84afc39838ccddb5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5724da632f35c60484f2fa84afc39838ccddb5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5724da632f35c60484f2fa84afc39838ccddb5e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5724da632f35c60484f2fa84afc39838ccddb5e6/comments", "author": null, "committer": null, "parents": [{"sha": "892ec0bd7de78b4fde346918145c5a1b316c22e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892ec0bd7de78b4fde346918145c5a1b316c22e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892ec0bd7de78b4fde346918145c5a1b316c22e0"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "7d78331629c40a39ed43188af466083542687d50", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5724da632f35c60484f2fa84afc39838ccddb5e6/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5724da632f35c60484f2fa84afc39838ccddb5e6/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=5724da632f35c60484f2fa84afc39838ccddb5e6", "patch": "@@ -172,7 +172,7 @@ not accurately reflect the status of the most recent @command{gfortran}.\n Gfortran is the GNU Fortran 95 compiler front end,\n designed initially as a free replacement for,\n or alternative to, the unix @command{f95} command;\n-@command{gfortran} is command you'll use to invoke the compiler.\n+@command{gfortran} is the command you'll use to invoke the compiler.\n \n Gfortran is still in an early state of development.\n @command{gfortran} can generate code for most constructs and expressions,\n@@ -244,7 +244,7 @@ that also understands and accepts Fortran source code.\n The @command{gcc} command is the @dfn{driver} program for\n all the languages in the GNU Compiler Collection (GCC);\n With @command{gcc},\n-you can compiler the source code of any language for\n+you can compile the source code of any language for\n which a front end is available in GCC.\n \n @item\n@@ -258,7 +258,7 @@ will automatically link the correct libraries to your program.\n \n @item\n A collection of run-time libraries.\n-These libraries contains the machine code needed to support\n+These libraries contain the machine code needed to support\n capabilities of the Fortran language that are not directly\n provided by the machine code generated by the\n @command{gfortran} compilation phase,\n@@ -292,16 +292,15 @@ GCC used to be the GNU ``C'' Compiler,\n but is now known as the @dfn{GNU Compiler Collection}.\n GCC provides the GNU system with a very versatile\n compiler middle end (shared optimization passes),\n-and with back ends (code generators) for many different\n+and back ends (code generators) for many different\n computer architectures and operating systems.\n The code of the middle end and back end are shared by all\n compiler front ends that are in the GNU Compiler Collection.\n \n A GCC front end is essentially a source code parser\n-and a pass to generate a representation of the semantics\n-of the program in the source code in the GCC language\n-independent intermediate language,\n-called @dfn{GENERIC}.\n+and an intermediate code generator.  The code generator translates the\n+semantics of the source code into a language independent form called\n+@dfn{GENERIC}.\n \n The parser takes a source file written in a\n particular computer language, reads and parses it,\n@@ -314,17 +313,16 @@ or just @dfn{AST} or ``tree'' for short.\n This data structure represents the whole program\n or a subroutine or a function.\n The ``tree'' is passed to the GCC middle end,\n-which will perform optimization passes on it,\n-pass the optimized AST and generate assembly\n-for the program unit.\n+which will perform optimization passes on it.  The optimized AST is then \n+handed off too the back end which assembles the program unit.\n \n Different phases in this translation process can be,\n and in fact @emph{are} merged in many compiler front ends.\n GNU Fortran 95 has a strict separation between the\n parser and code generator.\n \n-The goal of the gfortran project is to build a new front end for GCC:\n-A Fortran 95 front end.\n+The goal of the gfortran project is to build a new front end for GCC.\n+Specifically, a Fortran 95 front end.\n In a non-gfortran installation,\n @command{gcc} will not be able to compile Fortran 95 source code\n (only the ``C'' front end has to be compiled if you want to build GCC,\n@@ -398,7 +396,7 @@ or just a big bug....\n The start of the GNU Fortran 95 project was announced on\n the GCC homepage in March 18, 2000\n (even though Andy had already been working on it for a while,\n-or course).\n+of course).\n \n Gfortran is currently reaching the stage where is is able to compile real\n world programs.  However it is still under development and has many rough\n@@ -487,7 +485,7 @@ Flag for defining the kind number for default logicals.\n @item\n User-specified alignment rules for structures.\n @item\n-Flag to generate a @code{Makefile} info.\n+Flag to generate @code{Makefile} info.\n \n @item\n Automatically extend single precision constants to double.\n@@ -534,10 +532,10 @@ dereference instead of segfaulting.  There was some discussion about this\n option in the g95 development mailing list.\n \n @item\n-Allow setting default unit number.\n+Allow setting the default unit number.\n \n @item\n-Option to initialize of otherwise uninitialized integer and floating\n+Option to initialize otherwise uninitialized integer and floating\n point variables.\n \n @item\n@@ -566,7 +564,7 @@ action.\n Set precision for fp units that support it (i387).\n \n @item\n-Variables for setting fp rounding mode.\n+Variable for setting fp rounding mode.\n \n @item\n Variable to fill uninitialized variables with a user-defined bit\n@@ -686,7 +684,7 @@ Examples of standard conforming code equivalent to the above example, are:\n @section Extensions to namelist\n @cindex Namelist\n \n-@command{gfortran} fully supports the fortran95 standard for namelist io\n+@command{gfortran} fully supports the Fortran 95 standard for namelist I/O\n including array qualifiers, substrings and fully qualified derived types.\n The output from a namelist write is compatible with namelist read.  The\n output has all names in upper case and indentation to column 1 after the\n@@ -727,7 +725,7 @@ had been called:\n  CH=abcd,  /\n @end smallexample\n \n-To aid this dialog, when input is from stdin, errors produce send their\n+To aid this dialog, when input is from stdin, errors send their\n messages to stderr and execution continues, even if IOSTAT is set.\n \n @node X format descriptor"}, {"sha": "bef98a5918313a8501c37f6119bb36538d09b3d5", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5724da632f35c60484f2fa84afc39838ccddb5e6/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5724da632f35c60484f2fa84afc39838ccddb5e6/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=5724da632f35c60484f2fa84afc39838ccddb5e6", "patch": "@@ -464,8 +464,8 @@ debugging options.\n \n @cindex INCLUDE directive\n @cindex directive, INCLUDE\n-There options affect how affect how @command{gfortran} searches\n-for files specified via the @code{INCLUDE} directive, and where it searches\n+These options affect how @command{gfortran} searches\n+for files specified by the @code{INCLUDE} directive and where it searches\n for previously compiled modules.\n \n It also affects the search paths used by @command{cpp} when used to preprocess\n@@ -573,10 +573,8 @@ Do not transform names of entities specified in the Fortran\n source file by appending underscores to them.\n \n With @option{-funderscoring} in effect, @command{gfortran} appends one\n-underscore to external names with no underscores.\n-\n-This is done to ensure compatibility with code produced by many\n-UNIX Fortran compilers.\n+underscore to external names with no underscores.  This is done to ensure\n+compatibility with code produced by many UNIX Fortran compilers.\n \n @emph{Caution}: The default behavior of @command{gfortran} is\n incompatible with @command{f2c} and @command{g77}, please use the"}]}