{"sha": "079f946dad97b3def95bc6010e1a89f2058a69d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5Zjk0NmRhZDk3YjNkZWY5NWJjNjAxMGUxYTg5ZjIwNThhNjlkNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-20T20:29:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-20T20:29:26Z"}, "message": "fold-const.c (fold): Replace \"final_type\" with \"type\".\n\n\t* fold-const.c (fold): Replace \"final_type\" with \"type\".\n\tRemove variable \"final_type\".\n\nFrom-SVN: r79754", "tree": {"sha": "8fc107748eb318e0becc129e0e0ebbd750dff375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc107748eb318e0becc129e0e0ebbd750dff375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079f946dad97b3def95bc6010e1a89f2058a69d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079f946dad97b3def95bc6010e1a89f2058a69d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079f946dad97b3def95bc6010e1a89f2058a69d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079f946dad97b3def95bc6010e1a89f2058a69d5/comments", "author": null, "committer": null, "parents": [{"sha": "8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "230157fbc02152fc30df281b688f03df1610cafe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079f946dad97b3def95bc6010e1a89f2058a69d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079f946dad97b3def95bc6010e1a89f2058a69d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=079f946dad97b3def95bc6010e1a89f2058a69d5", "patch": "@@ -1,3 +1,8 @@\n+2004-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold): Replace \"final_type\" with \"type\".\n+\tRemove variable \"final_type\".\n+\n 2004-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* fold-const.c (fold): Constify \"type\"."}, {"sha": "58ed80613756be152584f1fa687291f002369417", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079f946dad97b3def95bc6010e1a89f2058a69d5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079f946dad97b3def95bc6010e1a89f2058a69d5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=079f946dad97b3def95bc6010e1a89f2058a69d5", "patch": "@@ -5646,7 +5646,6 @@ fold (tree expr)\n \t{\n \t  tree inside_type = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n \t  tree inter_type = TREE_TYPE (TREE_OPERAND (t, 0));\n-\t  tree final_type = type;\n \t  int inside_int = INTEGRAL_TYPE_P (inside_type);\n \t  int inside_ptr = POINTER_TYPE_P (inside_type);\n \t  int inside_float = FLOAT_TYPE_P (inside_type);\n@@ -5657,20 +5656,20 @@ fold (tree expr)\n \t  int inter_float = FLOAT_TYPE_P (inter_type);\n \t  unsigned int inter_prec = TYPE_PRECISION (inter_type);\n \t  int inter_unsignedp = TREE_UNSIGNED (inter_type);\n-\t  int final_int = INTEGRAL_TYPE_P (final_type);\n-\t  int final_ptr = POINTER_TYPE_P (final_type);\n-\t  int final_float = FLOAT_TYPE_P (final_type);\n-\t  unsigned int final_prec = TYPE_PRECISION (final_type);\n-\t  int final_unsignedp = TREE_UNSIGNED (final_type);\n+\t  int final_int = INTEGRAL_TYPE_P (type);\n+\t  int final_ptr = POINTER_TYPE_P (type);\n+\t  int final_float = FLOAT_TYPE_P (type);\n+\t  unsigned int final_prec = TYPE_PRECISION (type);\n+\t  int final_unsignedp = TREE_UNSIGNED (type);\n \n \t  /* In addition to the cases of two conversions in a row\n \t     handled below, if we are converting something to its own\n \t     type via an object of identical or wider precision, neither\n \t     conversion is needed.  */\n-\t  if (TYPE_MAIN_VARIANT (inside_type) == TYPE_MAIN_VARIANT (final_type)\n+\t  if (TYPE_MAIN_VARIANT (inside_type) == TYPE_MAIN_VARIANT (type)\n \t      && ((inter_int && final_int) || (inter_float && final_float))\n \t      && inter_prec >= final_prec)\n-\t    return fold (build1 (code, final_type,\n+\t    return fold (build1 (code, type,\n \t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* Likewise, if the intermediate and final types are either both\n@@ -5683,18 +5682,18 @@ fold (tree expr)\n \t       || (inter_float && inside_float))\n \t      && inter_prec >= inside_prec\n \t      && (inter_float || inter_unsignedp == inside_unsignedp)\n-\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n-\t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n+\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n+\t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n \t      && ! final_ptr)\n-\t    return fold (build1 (code, final_type,\n+\t    return fold (build1 (code, type,\n \t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* If we have a sign-extension of a zero-extended value, we can\n \t     replace that by a single zero-extension.  */\n \t  if (inside_int && inter_int && final_int\n \t      && inside_prec < inter_prec && inter_prec < final_prec\n \t      && inside_unsignedp && !inter_unsignedp)\n-\t    return fold (build1 (code, final_type,\n+\t    return fold (build1 (code, type,\n \t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* Two conversions in a row are not needed unless:\n@@ -5716,10 +5715,10 @@ fold (tree expr)\n \t\t  == (final_unsignedp && final_prec > inter_prec))\n \t      && ! (inside_ptr && inter_prec != final_prec)\n \t      && ! (final_ptr && inside_prec != inter_prec)\n-\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n-\t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n+\t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n+\t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n \t      && ! final_ptr)\n-\t    return fold (build1 (code, final_type,\n+\t    return fold (build1 (code, type,\n \t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \t}\n "}]}