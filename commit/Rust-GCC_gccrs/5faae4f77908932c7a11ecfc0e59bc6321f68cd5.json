{"sha": "5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhYWU0Zjc3OTA4OTMyYzdhMTFlY2ZjMGU1OWJjNjMyMWY2OGNkNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-08T05:59:25Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-08T05:59:25Z"}, "message": "mips.h (LONG_MAX_SPEC): Rewrite, along with SUBTARGET_CPP_SIZE_SPEC.\n\n* config/mips/mips.h (LONG_MAX_SPEC): Rewrite, along with\nSUBTARGET_CPP_SIZE_SPEC.\n* config/mips/abi64.h (LONG_MAX_SPEC): Delete.\n\nFrom-SVN: r50425", "tree": {"sha": "4adb9294b1eedf9db3b6e3200165c151be2eca61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4adb9294b1eedf9db3b6e3200165c151be2eca61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/comments", "author": null, "committer": null, "parents": [{"sha": "8a13c09297c2784bdf7628a54e74c0a845bc65d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a13c09297c2784bdf7628a54e74c0a845bc65d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a13c09297c2784bdf7628a54e74c0a845bc65d3"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "254d804ea5f9055c508240b3fde185fc21b38928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "patch": "@@ -1,5 +1,9 @@\n 2002-03-08  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* config/mips/mips.h (LONG_MAX_SPEC): Rewrite, along with\n+\tSUBTARGET_CPP_SIZE_SPEC.\n+\t* config/mips/abi64.h (LONG_MAX_SPEC): Delete.\n+\n \t* config/mips/mips.h (SUBTARGET_CPP_SIZE_SPEC): Simplify.\n \n 2002-03-07  Alexandre Oliva  <aoliva@redhat.com>"}, {"sha": "43887d532f5b18a08f07760fda14556b691109e7", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  64 bit ABI support.\n-   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -214,25 +214,6 @@ Boston, MA 02111-1307, USA.  */\n   (mips_abi == ABI_EABI && (NAMED)\t\t\t\t\t\\\n    && FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED))\n \n-/* Define LONG_MAX correctly for all users.  We need to handle 32 bit EABI,\n-   64 bit EABI, N32, and N64 as possible defaults.  The checks performed here\n-   are the same as the checks in override_options in mips.c that determines\n-   whether MASK_LONG64 will be set.\n-\n-   This does not handle inappropriate options or ununusal option\n-   combinations.  */\n-\n-#undef LONG_MAX_SPEC\n-#if ((MIPS_ABI_DEFAULT == ABI_64) || ((MIPS_ABI_DEFAULT == ABI_EABI) && ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_64BIT)))\n-#define LONG_MAX_SPEC \\\n-  \"%{!mabi=32:%{!mabi=n32:%{!mlong32:%{!mgp32:%{!mips1:%{!mips2:-D__LONG_MAX__=9223372036854775807L}}}}}}\"\n-#else\n-#define LONG_MAX_SPEC \\\n-  \"%{mabi=64:-D__LONG_MAX__=9223372036854775807L} \\\n-   %{mlong64:-D__LONG_MAX__=9223372036854775807L} \\\n-   %{mgp64:-D__LONG_MAX__=9223372036854775807L}\"\n-#endif\n-\n /* ??? Unimplemented stuff follows.  */\n \n /* ??? Add support for 16 byte/128 bit long doubles here when"}, {"sha": "24c6e976af951c09b62085f1099694f2e0ebd675", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5faae4f77908932c7a11ecfc0e59bc6321f68cd5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "patch": "@@ -1060,6 +1060,23 @@ extern int mips_abi;\n  %{mgp64:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n %{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n \"\n+#define LONG_MAX_SPEC \"\\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n+%{!mlong64:\\\n+ %{mabi=eabi|!mabi=*:\\\n+  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n+    %{mips3|mips4|mips5|mips64|mgp64: \\\n+      -D__LONG_MAX__=9223372036854775807L}}}}}}}} \\\n+\"\n+#else /* ABI_DEFAULT != ABI_EABI */\n+#define LONG_MAX_SPEC \"\\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n+%{!mlong64:\\\n+ %{mabi=eabi:\\\n+  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n+    %{mips3|mips4|mips5|mips64|mgp64: \\\n+      -D__LONG_MAX__=9223372036854775807L}}}}}}}} \\\n+\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_O64\n@@ -1131,6 +1148,21 @@ extern int mips_abi;\n  %{!mgp32:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n %{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n \"\n+#define LONG_MAX_SPEC \"\\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n+%{!mlong64:\\\n+ %{mabi=eabi|!mabi=*:\\\n+  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n+    -D__LONG_MAX__=9223372036854775807L}}}}}}}\\\n+\"\n+#else /* ABI_DEFAULT != ABI_EABI */\n+#define LONG_MAX_SPEC \"\\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n+%{!mlong64:\\\n+ %{mabi=eabi:\\\n+  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n+    -D__LONG_MAX__=9223372036854775807L}}}}}}}\\\n+\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_O64\n@@ -1188,16 +1220,6 @@ extern int mips_abi;\n #define SUBTARGET_CPP_SPEC \"\"\n #endif\n \n-/* If we're using 64bit longs, then we have to define __LONG_MAX__\n-   correctly.  Similarly for 64bit ints and __INT_MAX__.  */\n-#ifndef LONG_MAX_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_LONG64)\n-#define LONG_MAX_SPEC \"%{!mlong32:-D__LONG_MAX__=9223372036854775807L}\"\n-#else\n-#define LONG_MAX_SPEC \"%{mlong64:-D__LONG_MAX__=9223372036854775807L}\"\n-#endif\n-#endif\n-\n /* Define appropriate macros for fpr register size.  */\n #ifndef CPP_FPR_SPEC\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_FLOAT64)"}]}