{"sha": "6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwNWZhZGRmMGJkNWUyNjM5YjYwOTBiOTlkMmIwMTg2ZjVlNmUzMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-24T02:38:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-24T02:38:28Z"}, "message": "syscall: Only call varargs libc functions from C code.\n\nFrom-SVN: r205321", "tree": {"sha": "b799566fc3e96ceed28ddd0fcb8b09f6d0f4c4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b799566fc3e96ceed28ddd0fcb8b09f6d0f4c4de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/comments", "author": null, "committer": null, "parents": [{"sha": "473f48333b6f0a6fd348bab83a647a5ef4635246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473f48333b6f0a6fd348bab83a647a5ef4635246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473f48333b6f0a6fd348bab83a647a5ef4635246"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "0851b71e02ed1f8c18bf714de97d4461713fc37c", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -488,6 +488,7 @@ runtime_files = \\\n \truntime/go-unsafe-newarray.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unwind.c \\\n+\truntime/go-varargs.c \\\n \truntime/chan.c \\\n \truntime/cpuprof.c \\\n \truntime/env_posix.c \\"}, {"sha": "ca9df103620376a33ea1144146c9948ced4127d9", "filename": "libgo/Makefile.in", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -212,10 +212,10 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-type-float.lo go-type-identity.lo go-type-interface.lo \\\n \tgo-type-string.lo go-typedesc-equal.lo go-typestring.lo \\\n \tgo-unsafe-new.lo go-unsafe-newarray.lo go-unsafe-pointer.lo \\\n-\tgo-unwind.lo chan.lo cpuprof.lo env_posix.lo lfstack.lo \\\n-\t$(am__objects_1) mcache.lo mcentral.lo $(am__objects_2) \\\n-\tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo \\\n-\t$(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n+\tgo-unwind.lo go-varargs.lo chan.lo cpuprof.lo env_posix.lo \\\n+\tlfstack.lo $(am__objects_1) mcache.lo mcentral.lo \\\n+\t$(am__objects_2) mfinal.lo mfixalloc.lo mgc0.lo mheap.lo \\\n+\tmsize.lo $(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n \truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_4) \\\n \tiface.lo malloc.lo map.lo mprof.lo netpoll.lo reflect.lo \\\n \truntime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n@@ -819,6 +819,7 @@ runtime_files = \\\n \truntime/go-unsafe-newarray.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unwind.c \\\n+\truntime/go-varargs.c \\\n \truntime/chan.c \\\n \truntime/cpuprof.c \\\n \truntime/env_posix.c \\\n@@ -2451,6 +2452,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-newarray.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unwind.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-varargs.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/iface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lfstack.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lock_futex.Plo@am__quote@\n@@ -2979,6 +2981,13 @@ go-unwind.lo: runtime/go-unwind.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-unwind.lo `test -f 'runtime/go-unwind.c' || echo '$(srcdir)/'`runtime/go-unwind.c\n \n+go-varargs.lo: runtime/go-varargs.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-varargs.lo -MD -MP -MF $(DEPDIR)/go-varargs.Tpo -c -o go-varargs.lo `test -f 'runtime/go-varargs.c' || echo '$(srcdir)/'`runtime/go-varargs.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-varargs.Tpo $(DEPDIR)/go-varargs.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-varargs.c' object='go-varargs.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-varargs.lo `test -f 'runtime/go-varargs.c' || echo '$(srcdir)/'`runtime/go-varargs.c\n+\n chan.lo: runtime/chan.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT chan.lo -MD -MP -MF $(DEPDIR)/chan.Tpo -c -o chan.lo `test -f 'runtime/chan.c' || echo '$(srcdir)/'`runtime/chan.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/chan.Tpo $(DEPDIR)/chan.Plo"}, {"sha": "73854351c769db65eff4d8c45c57e23d091a4986", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -177,6 +177,9 @@\n /* Define to 1 if the system has the type `off64_t'. */\n #undef HAVE_OFF64_T\n \n+/* Define to 1 if you have the `open64' function. */\n+#undef HAVE_OPEN64\n+\n /* Define to 1 if you have the `openat' function. */\n #undef HAVE_OPENAT\n "}, {"sha": "46bb6066fb34f67ef9114fb7cec1eef712071160", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -14718,7 +14718,7 @@ else\n fi\n \n \n-for ac_func in accept4 dup3 epoll_create1 faccessat fallocate fchmodat fchownat futimesat getxattr inotify_add_watch inotify_init inotify_init1 inotify_rm_watch listxattr mkdirat mknodat openat pipe2 removexattr renameat setxattr sync_file_range splice tee unlinkat unshare utimensat\n+for ac_func in accept4 dup3 epoll_create1 faccessat fallocate fchmodat fchownat futimesat getxattr inotify_add_watch inotify_init inotify_init1 inotify_rm_watch listxattr mkdirat mknodat open64 openat pipe2 removexattr renameat setxattr sync_file_range splice tee unlinkat unshare utimensat\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "b43a15807494d98e21df635ffbce62527442c09d", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -506,7 +506,7 @@ AC_CHECK_FUNCS(strerror_r strsignal wait4 mincore setenv dl_iterate_phdr)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n \n-AC_CHECK_FUNCS(accept4 dup3 epoll_create1 faccessat fallocate fchmodat fchownat futimesat getxattr inotify_add_watch inotify_init inotify_init1 inotify_rm_watch listxattr mkdirat mknodat openat pipe2 removexattr renameat setxattr sync_file_range splice tee unlinkat unshare utimensat)\n+AC_CHECK_FUNCS(accept4 dup3 epoll_create1 faccessat fallocate fchmodat fchownat futimesat getxattr inotify_add_watch inotify_init inotify_init1 inotify_rm_watch listxattr mkdirat mknodat open64 openat pipe2 removexattr renameat setxattr sync_file_range splice tee unlinkat unshare utimensat)\n AC_TYPE_OFF_T\n AC_CHECK_TYPES([loff_t])\n "}, {"sha": "0cfedb71cf613ffc06fc239b3689cb0cf47268f3", "filename": "libgo/go/syscall/exec_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix.go?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -30,7 +30,7 @@ import (\n //chdir(path *byte) _C_int\n \n //sysnb\traw_fcntl(fd int, cmd int, arg int) (val int, err Errno)\n-//fcntl(fd _C_int, cmd _C_int, arg _C_int) _C_int\n+//__go_fcntl(fd _C_int, cmd _C_int, arg _C_int) _C_int\n \n //sysnb\traw_close(fd int) (err Errno)\n //close(fd _C_int) _C_int"}, {"sha": "d5bedd06aac126e25a6a054d67606fec20930410", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -9,7 +9,7 @@ package syscall\n import \"unsafe\"\n \n //sys\tOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error)\n-//openat(dirfd _C_int, path *byte, flags _C_int, mode Mode_t) _C_int\n+//__go_openat(dirfd _C_int, path *byte, flags _C_int, mode Mode_t) _C_int\n \n //sys\tfutimesat(dirfd int, path *byte, times *[2]Timeval) (err error)\n //futimesat(dirfd _C_int, path *byte, times *[2]Timeval) _C_int"}, {"sha": "8f5b020758363b0e9548048d3571e5284d807ecc", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -206,7 +206,7 @@ func FDZero(set *FdSet) {\n //fchown(fd _C_int, uid Uid_t, gid Gid_t) _C_int\n \n //sys\tfcntl(fd int, cmd int, arg int) (val int, err error)\n-//fcntl(fd _C_int, cmd _C_int, arg _C_int) _C_int\n+//__go_fcntl(fd _C_int, cmd _C_int, arg _C_int) _C_int\n \n //sys\tFdatasync(fd int) (err error)\n //fdatasync(fd _C_int) _C_int"}, {"sha": "fced6e57ddead70ad9a315c051e57b0f98a08799", "filename": "libgo/go/syscall/libcall_posix_largefile.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -19,7 +19,7 @@ package syscall\n //mmap64(addr *byte, length Size_t, prot _C_int, flags _C_int, fd _C_int, offset Offset_t) *byte\n \n //sys\tOpen(path string, mode int, perm uint32) (fd int, err error)\n-//open64(path *byte, mode _C_int, perm Mode_t) _C_int\n+//__go_open64(path *byte, mode _C_int, perm Mode_t) _C_int\n \n //sys\tPread(fd int, p []byte, offset int64) (n int, err error)\n //pread64(fd _C_int, buf *byte, count Size_t, offset Offset_t) Ssize_t"}, {"sha": "6c98e29873c81a3899875c3dfe0c8de400b38fc2", "filename": "libgo/go/syscall/libcall_posix_regfile.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -20,7 +20,7 @@ package syscall\n //mmap(addr *byte, length Size_t, prot _C_int, flags _C_int, fd _C_int, offset Offset_t) *byte\n \n //sys\tOpen(path string, mode int, perm uint32) (fd int, err error)\n-//open(path *byte, mode _C_int, perm Mode_t) _C_int\n+//__go_open(path *byte, mode _C_int, perm Mode_t) _C_int\n \n //sys\tPread(fd int, p []byte, offset int64) (n int, err error)\n //pread(fd _C_int, buf *byte, count Size_t, offset Offset_t) Ssize_t"}, {"sha": "682c08d64d4d11822a752c41e833b57c28ba684c", "filename": "libgo/runtime/go-varargs.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b05faddf0bd5e2639b6090b99d2b0186f5e6e31/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=6b05faddf0bd5e2639b6090b99d2b0186f5e6e31", "patch": "@@ -0,0 +1,47 @@\n+/* go-varargs.c -- functions for calling C varargs functions.\n+\n+   Copyright 2013 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include \"config.h\"\n+\n+#include <sys/types.h>\n+#include <fcntl.h>\n+\n+/* The syscall package calls C functions.  The Go compiler can not\n+   represent a C varargs functions.  On some systems it's important\n+   that the declaration of a function match the call.  This function\n+   holds non-varargs C functions that the Go code can call.  */\n+\n+int\n+__go_open (char *path, int mode, mode_t perm)\n+{\n+  return open (path, mode, perm);\n+}\n+\n+int\n+__go_fcntl (int fd, int cmd, int arg)\n+{\n+  return fcntl (fd, cmd, arg);\n+}\n+\n+#ifdef HAVE_OPEN64\n+\n+int\n+__go_open64 (char *path, int mode, mode_t perm)\n+{\n+  return open64 (path, mode, perm);\n+}\n+\n+#endif\n+\n+#ifdef HAVE_OPENAT\n+\n+int\n+__go_openat (int fd, char *path, int flags, mode_t mode)\n+{\n+  return openat (fd, path, flags, mode);\n+}\n+\n+#endif"}]}