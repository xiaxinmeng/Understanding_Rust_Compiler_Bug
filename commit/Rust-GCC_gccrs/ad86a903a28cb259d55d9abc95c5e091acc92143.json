{"sha": "ad86a903a28cb259d55d9abc95c5e091acc92143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4NmE5MDNhMjhjYjI1OWQ1NWQ5YWJjOTVjNWUwOTFhY2M5MjE0Mw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-24T21:02:36Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-24T21:02:36Z"}, "message": "prims.cc (_Jv_NewObjectArray): Use palcement new to create array.\n\n\t* prims.cc (_Jv_NewObjectArray): Use palcement new to create\n\tarray.\n\t(_Jv_NewPrimArray): Likewise.\n\tInclude <new>.\n\t* gcj/array.h (__JArray): `length' field now const.  Added\n\tconstructor.\n\t(class JArray): Added constructor.\n\nFrom-SVN: r37718", "tree": {"sha": "d4054b9ccee889a0365a1284dd577cf7e13c7d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4054b9ccee889a0365a1284dd577cf7e13c7d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad86a903a28cb259d55d9abc95c5e091acc92143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad86a903a28cb259d55d9abc95c5e091acc92143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad86a903a28cb259d55d9abc95c5e091acc92143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad86a903a28cb259d55d9abc95c5e091acc92143/comments", "author": null, "committer": null, "parents": [{"sha": "81d87b4e64fe9c7a72791a70e680df452cfc9e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d87b4e64fe9c7a72791a70e680df452cfc9e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d87b4e64fe9c7a72791a70e680df452cfc9e37"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "1d7f1791907d780b5aa53d47b4ba83f926eb8ae3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ad86a903a28cb259d55d9abc95c5e091acc92143", "patch": "@@ -1,3 +1,13 @@\n+2000-11-24  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* prims.cc (_Jv_NewObjectArray): Use palcement new to create\n+\tarray.\n+\t(_Jv_NewPrimArray): Likewise.\n+\tInclude <new>.\n+\t* gcj/array.h (__JArray): `length' field now const.  Added\n+\tconstructor.\n+\t(class JArray): Added constructor.\n+\n 2000-11-23  Mark Wielaard  <mark@klomp.org>\n \n \t* name-finder.cc (lookup): Check for a NULL _Jv_argv before attempting"}, {"sha": "7c6592416812dbc2438a28ad7f491c8a96adf22a", "filename": "libjava/gcj/array.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2Fgcj%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2Fgcj%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Farray.h?ref=ad86a903a28cb259d55d9abc95c5e091acc92143", "patch": "@@ -1,6 +1,6 @@\n // array.h - Header file for CNI arrays.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -17,11 +17,21 @@ extern \"Java\" {\n \n class __JArray : public java::lang::Object\n {\n+protected:\n+  // FIXME: this is a hack to work around a bug in the g++ Java\n+  // support.  If we add a constructor with a jsize argument to\n+  // JArray<T>, then g++ complains.\n+  __JArray () : length (0)\n+  {\n+  }\n public:\n-  // FIXME: we'd like this to be `const' but that causes problems with\n-  // the C++ compiler.\n-  jsize length;\n+  const jsize length;\n   friend jsize JvGetArrayLength (__JArray*);\n+\n+  // This probably shouldn't be public.\n+  __JArray (jsize l) : length (l)\n+  {\n+  }\n };\n \n template<class T>"}, {"sha": "22fa4b64070b32e5d63bf5fa9d0ea013f61bf85a", "filename": "libjava/prims.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad86a903a28cb259d55d9abc95c5e091acc92143/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=ad86a903a28cb259d55d9abc95c5e091acc92143", "patch": "@@ -67,6 +67,9 @@ details.  */\n #include <ltdl.h>\n #endif\n \n+// We use placement new.\n+#include <new>\n+\n // We allocate a single OutOfMemoryError exception which we keep\n // around for use if we run out of memory.\n static java::lang::OutOfMemoryError *no_memory;\n@@ -411,8 +414,9 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   obj = (jobjectArray) _Jv_AllocArray (size, klass);\n   if (__builtin_expect (! obj, false))\n     JvThrow (no_memory);\n-  obj->length = count;\n-  jobject* ptr = elements(obj);\n+  // Use placement new to initialize length field.\n+  new (obj) __JArray (count);\n+  jobject *ptr = elements(obj);\n   // We know the allocator returns zeroed memory.  So don't bother\n   // zeroing it again.\n   if (init)\n@@ -446,7 +450,8 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n   __JArray *arr = (__JArray*) _Jv_AllocObj (size + elsize * count, klass);\n   if (__builtin_expect (! arr, false))\n     JvThrow (no_memory);\n-  arr->length = count;\n+  // Use placement new to initialize length field.\n+  new (arr) __JArray (count);\n   // Note that we assume we are given zeroed memory by the allocator.\n \n   return arr;"}]}