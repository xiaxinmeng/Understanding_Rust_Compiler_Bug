{"sha": "056b09955b97083e9dfcd9825160a408433143bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2YjA5OTU1Yjk3MDgzZTlkZmNkOTgyNTE2MGE0MDg0MzMxNDNiZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-28T10:09:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-28T10:09:37Z"}, "message": "re PR middle-end/65962 (Missed vectorization of strided stores)\n\n2015-10-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65962\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n\tAvoid creating loop carried dependences also for outer loops\n\tof the loop a use to replace is in.\n\n\t* gcc.dg/vect/vect-62.c: Adjust.\n\nFrom-SVN: r229481", "tree": {"sha": "ba80069b39df85d44caecbb6100e56528305f45d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba80069b39df85d44caecbb6100e56528305f45d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056b09955b97083e9dfcd9825160a408433143bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056b09955b97083e9dfcd9825160a408433143bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056b09955b97083e9dfcd9825160a408433143bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056b09955b97083e9dfcd9825160a408433143bf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d27d749d70f21c40b58918b9aca2cfbb2f8d5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d27d749d70f21c40b58918b9aca2cfbb2f8d5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d27d749d70f21c40b58918b9aca2cfbb2f8d5e4"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "883f1b68959162702a3a921ef67f6ff043e8e673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b09955b97083e9dfcd9825160a408433143bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b09955b97083e9dfcd9825160a408433143bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=056b09955b97083e9dfcd9825160a408433143bf", "patch": "@@ -1,3 +1,10 @@\n+2015-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65962\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tAvoid creating loop carried dependences also for outer loops\n+\tof the loop a use to replace is in.\n+\n 2015-10-28  Richard Biener  <rguenther@suse.de>\n \n \t* common.opt (fchecking): New flag controlling flag_checking."}, {"sha": "2fd643ed1320299fa730ef0c742345751aa58437", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056b09955b97083e9dfcd9825160a408433143bf", "patch": "@@ -1,3 +1,8 @@\n+2015-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65962\n+\t* gcc.dg/vect/vect-62.c: Adjust.\n+\n 2015-10-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68067"}, {"sha": "f11301c84adf23cdd41b64aadd4c901a4766ea6b", "filename": "gcc/testsuite/gcc.dg/vect/vect-62.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c?ref=056b09955b97083e9dfcd9825160a408433143bf", "patch": "@@ -33,9 +33,8 @@ int main1 ()\n     }\n \n   /* Multidimensional array. Aligned. The \"inner\" dimensions\n-     are invariant in the inner loop. Vectorizable, but the\n-     vectorizer detects that everything is invariant and that\n-     the loop is better left untouched. (it should be optimized away). */\n+     are invariant in the inner loop.  The outer loop is\n+     vectorizable after invariant/store motion.  */\n   for (i = 0; i < N; i++)\n     {\n       for (j = 0; j < N; j++)\n@@ -65,5 +64,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */"}, {"sha": "7deb5a4ef562509dcc3d594fa17e85be04e733aa", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b09955b97083e9dfcd9825160a408433143bf/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=056b09955b97083e9dfcd9825160a408433143bf", "patch": "@@ -4082,8 +4082,9 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t      gimple *def_stmt = SSA_NAME_DEF_STMT (sprime);\n \t      basic_block def_bb = gimple_bb (def_stmt);\n \t      if (gimple_code (def_stmt) == GIMPLE_PHI\n-\t\t  && b->loop_father->header == def_bb)\n+\t\t  && def_bb->loop_father->header == def_bb)\n \t\t{\n+\t\t  loop_p loop = def_bb->loop_father;\n \t\t  ssa_op_iter iter;\n \t\t  tree op;\n \t\t  bool found = false;\n@@ -4092,9 +4093,8 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t      affine_iv iv;\n \t\t      def_bb = gimple_bb (SSA_NAME_DEF_STMT (op));\n \t\t      if (def_bb\n-\t\t\t  && flow_bb_inside_loop_p (b->loop_father, def_bb)\n-\t\t\t  && simple_iv (b->loop_father,\n-\t\t\t\t\tb->loop_father, op, &iv, true))\n+\t\t\t  && flow_bb_inside_loop_p (loop, def_bb)\n+\t\t\t  && simple_iv (loop, loop, op, &iv, true))\n \t\t\t{\n \t\t\t  found = true;\n \t\t\t  break;\n@@ -4110,7 +4110,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t\t  print_generic_expr (dump_file, sprime, 0);\n \t\t\t  fprintf (dump_file, \" which would add a loop\"\n \t\t\t\t   \" carried dependence to loop %d\\n\",\n-\t\t\t\t   b->loop_father->num);\n+\t\t\t\t   loop->num);\n \t\t\t}\n \t\t      /* Don't keep sprime available.  */\n \t\t      sprime = NULL_TREE;"}]}