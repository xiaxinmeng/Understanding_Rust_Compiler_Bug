{"sha": "992147ee6bc698a938feb38546ca25ce8b977651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyMTQ3ZWU2YmM2OThhOTM4ZmViMzg1NDZjYTI1Y2U4Yjk3NzY1MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-06T19:37:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-06T19:37:12Z"}, "message": "re PR target/59021 (new vzeroupper instructions generated with -mavx)\n\n\tPR target/59021\n\t* config/i386/i386.c (ix86_avx_u128_mode_needed): Require\n\tAVX_U128_DIRTY mode for call_insn RTXes that use AVX256 registers.\n\t(ix86_avx_u128_mode_needed): Return AVX_U128_DIRTY mode for call_insn\n\tRTXes that return in AVX256 register.\n\ntestsuite/ChangeLog:\n\n\tPR target/59021\n\t* gcc.target/i386/pr59021.c: New test.\n\nFrom-SVN: r204464", "tree": {"sha": "cf340a333dfb0fe4b2d672ec9e1a479acf1c29e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf340a333dfb0fe4b2d672ec9e1a479acf1c29e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/992147ee6bc698a938feb38546ca25ce8b977651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992147ee6bc698a938feb38546ca25ce8b977651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992147ee6bc698a938feb38546ca25ce8b977651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992147ee6bc698a938feb38546ca25ce8b977651/comments", "author": null, "committer": null, "parents": [{"sha": "b6e168f33a07cd23b7e760bab8e22aa0b907e8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e168f33a07cd23b7e760bab8e22aa0b907e8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e168f33a07cd23b7e760bab8e22aa0b907e8aa"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "cf1120099f928f8a7fdb0df8b58c675d206e007f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=992147ee6bc698a938feb38546ca25ce8b977651", "patch": "@@ -1,8 +1,15 @@\n+2013-11-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59021\n+\t* config/i386/i386.c (ix86_avx_u128_mode_needed): Require\n+\tAVX_U128_DIRTY mode for call_insn RTXes that use AVX256 registers.\n+\t(ix86_avx_u128_mode_needed): Return AVX_U128_DIRTY mode for call_insn\n+\tRTXes that return in AVX256 register.\n+\n 2013-11-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58653\n-\t* tree-predcom.c (ref_at_iteration): Rewrite to generate\n-\ta MEM_REF.\n+\t* tree-predcom.c (ref_at_iteration): Rewrite to generate a MEM_REF.\n \t(prepare_initializers_chain): Adjust.\n \n 2013-11-06  Andrew MacLeod  <amacleod@redhat.com>\n@@ -48,8 +55,8 @@\n \n 2013-11-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n-\t* config/i386/i386.c (ix86_expand_prologue): Optimize stack checking for\n-\tleaf functions without dynamic stack allocation.\n+\t* config/i386/i386.c (ix86_expand_prologue): Optimize stack\n+\tchecking for leaf functions without dynamic stack allocation.\n \t* config/ia64/ia64.c (ia64_emit_probe_stack_range): Adjust.\n \t(ia64_expand_prologue): Likewise.\n \t* config/mips/mips.c (mips_expand_prologue): Likewise.\n@@ -183,8 +190,7 @@\n 2013-11-05  Jeff Law  <law@redhat.com>\n \n \t* Makefile.in (OBJS): Add gimple-ssa-isolate-paths.o\n-\t* common.opt (-fisolate-erroneous-paths): Add option and\n-\tdocumentation.\n+\t* common.opt (-fisolate-erroneous-paths): Add option and documentation.\n \t* gimple-ssa-isolate-paths.c: New file.\n \t* gimple.c (check_loadstore): New function.\n \t(infer_nonnull_range): Moved into gimple.c from tree-vrp.c\n@@ -233,12 +239,12 @@\n \tvirtual_operand_p, is_gimple_reg, is_gimple_val, is_gimple_asm_val,\n \tis_gimple_min_lval, is_gimple_call_addr, is_gimple_mem_ref_addr,\n \tgimple_decl_printable_name, useless_type_conversion_p,\n-\ttypes_compatible_p, gimple_can_coalesce_p, copy_var_decl): Move to \n+\ttypes_compatible_p, gimple_can_coalesce_p, copy_var_decl): Move to\n \tgimple-expr.[ch].\n \t* gimple-expr.c: New File.\n \t(useless_type_conversion_p, gimple_set_body, gimple_body,\n \tgimple_has_body_p, gimple_decl_printable_name, copy_var_decl,\n-\tgimple_can_coalesce_p, extract_ops_from_tree_1, \n+\tgimple_can_coalesce_p, extract_ops_from_tree_1,\n \tgimple_cond_get_ops_from_tree, is_gimple_lvalue, is_gimple_condexpr,\n \tis_gimple_address, is_gimple_invariant_address,\n \tis_gimple_ip_invariant_address, is_gimple_min_invariant,"}, {"sha": "53e04c4f95edcedce48b6034ed7590a0a9c91eef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=992147ee6bc698a938feb38546ca25ce8b977651", "patch": "@@ -15708,7 +15708,7 @@ ix86_avx_u128_mode_needed (rtx insn)\n \t      rtx arg = XEXP (XEXP (link, 0), 0);\n \n \t      if (ix86_check_avx256_register (&arg, NULL))\n-\t\treturn AVX_U128_ANY;\n+\t\treturn AVX_U128_DIRTY;\n \t    }\n \t}\n \n@@ -15828,8 +15828,8 @@ ix86_avx_u128_mode_after (int mode, rtx insn)\n     {\n       bool avx_reg256_found = false;\n       note_stores (pat, ix86_check_avx256_stores, &avx_reg256_found);\n-      if (!avx_reg256_found)\n-\treturn AVX_U128_CLEAN;\n+\n+      return avx_reg256_found ? AVX_U128_DIRTY : AVX_U128_CLEAN;\n     }\n \n   /* Otherwise, return current mode.  Remember that if insn"}, {"sha": "463be1e1eee27f668534b1645c0a63a45c37a096", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=992147ee6bc698a938feb38546ca25ce8b977651", "patch": "@@ -1,3 +1,8 @@\n+2013-11-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59021\n+\t* gcc.target/i386/pr59021.c: New test.\n+\n 2013-11-06  James Lemke  <jwlemke@codesourcery.com>\n \n \t* lib/gcc-defs.exp (dg-additional-files-options): Extend regsub for"}, {"sha": "a1df27b105e0c9409911bdfa9024fdd11221ac25", "filename": "gcc/testsuite/gcc.target/i386/pr59021.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992147ee6bc698a938feb38546ca25ce8b977651/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59021.c?ref=992147ee6bc698a938feb38546ca25ce8b977651", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -mvzeroupper\" } */\n+\n+extern void abort (void);\n+\n+struct S {\n+  int i1;\n+  int i2;\n+  int i3;\n+};\n+\n+typedef double v4df  __attribute__ ((vector_size (32)));\n+\n+extern int foo (v4df, int i1, int i2, int i3, int i4, int i5, struct S s);\n+\n+void bar (v4df v, struct S s)\n+{\n+  int r = foo (v, 1, 2, 3, 4, 5, s);\n+  if (r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"vzeroupper\" } } */"}]}