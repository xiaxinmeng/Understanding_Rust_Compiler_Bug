{"sha": "f1e207107a8fca7d0f8792502b576688ede5df58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlMjA3MTA3YThmY2E3ZDBmODc5MjUwMmI1NzY2ODhlZGU1ZGY1OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-11-12T00:38:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-11-12T00:38:48Z"}, "message": "re PR c++/17577 (#pragma implementation no longer diagnoses use after file to which it applies)\n\ngcc/cp\n\tPR c++/17577:\n\t* lex.c (handle_pragma_implementation): Use cpp_included_before.\ngcc/testsuite\n\tPR c++/17577:\n\t* g++.dg/ext/pr17577.h: New file.\n\t* g++.dg/ext/pr17577.C: New file.\nlibcpp\n\tPR c++/17557:\n\t* include/cpplib.h (cpp_included_before): Declare.\n\t* files.c (struct file_hash_entry) <location>: New field.\n\t(_cpp_find_file): Initialize new field.\n\t(make_cpp_dir): Likewise.\n\t(cpp_included_before): New function.\n\nFrom-SVN: r130093", "tree": {"sha": "3f463456ccd4e5d3927d4137b115dbd7bb507c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f463456ccd4e5d3927d4137b115dbd7bb507c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e207107a8fca7d0f8792502b576688ede5df58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e207107a8fca7d0f8792502b576688ede5df58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e207107a8fca7d0f8792502b576688ede5df58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e207107a8fca7d0f8792502b576688ede5df58/comments", "author": null, "committer": null, "parents": [{"sha": "b131ad7c3db37bb79f21f5f6532447d0e030acaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b131ad7c3db37bb79f21f5f6532447d0e030acaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b131ad7c3db37bb79f21f5f6532447d0e030acaa"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "1cc38952d7cb5a1d5d6db9f3a2eed189986c149b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -1,3 +1,8 @@\n+2007-11-11  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c++/17577:\n+\t* lex.c (handle_pragma_implementation): Use cpp_included_before.\n+\n 2007-11-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/8570"}, {"sha": "136260bef492bc8cbbc91ecd47f334b28e38f51f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -572,14 +572,14 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   else\n     {\n       filename = ggc_strdup (TREE_STRING_POINTER (fname));\n-#if 0\n+#ifdef USE_MAPPED_LOCATION\n       /* We currently cannot give this diagnostic, as we reach this point\n \t only after cpplib has scanned the entire translation unit, so\n \t cpp_included always returns true.  A plausible fix is to compare\n \t the current source-location cookie with the first source-location\n \t cookie (if any) of the filename, but this requires completing the\n \t --enable-mapped-location project first.  See PR 17577.  */\n-      if (cpp_included (parse_in, filename))\n+      if (cpp_included_before (parse_in, filename, input_location))\n \twarning (0, \"#pragma implementation for %qs appears after \"\n \t\t \"file is included\", filename);\n #endif"}, {"sha": "b55f3c053ee7fb3a85d3c0c67cd195bce77f01eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -1,3 +1,9 @@\n+2007-11-11  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c++/17577:\n+\t* g++.dg/ext/pr17577.h: New file.\n+\t* g++.dg/ext/pr17577.C: New file.\n+\n 2007-11-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/8570"}, {"sha": "29b1d17d7057f8ad1e20e5d8fc0766cfa733054f", "filename": "gcc/testsuite/g++.dg/ext/pr17577.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.C?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -0,0 +1,6 @@\n+// Test for PR c++/17577.\n+\n+/* { dg-do compile } */\n+\n+#include \"pr17577.h\"\n+#pragma implementation \"pr17577.h\" /* { dg-warning \"appears after file\" } */"}, {"sha": "6ff0addb9dc541c7c5557d48ef0921406fd06f9b", "filename": "gcc/testsuite/g++.dg/ext/pr17577.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr17577.h?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -0,0 +1,2 @@\n+// Test for PR c++/17577.\n+#pragma interface"}, {"sha": "4c33bd7d8d357ecf53f4cb8bd4612624f4011c5d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -1,3 +1,17 @@\n+2007-11-11  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c++/17557:\n+\t* include/cpplib.h (cpp_included_before): Declare.\n+\t* files.c (struct file_hash_entry) <location>: New field.\n+\t(_cpp_find_file): Initialize new field.\n+\t(make_cpp_dir): Likewise.\n+\t(cpp_included_before): New function.\n+\n+2007-11-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* include/line-map.h (LINEMAP_POSITION_FOR_COLUMN): Wrap in\n+\tdo-while.\n+\n 2007-11-01  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/30805:"}, {"sha": "ae2f2945d9e58b5da32255bab26690e53a2d269a", "filename": "libcpp/files.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -142,6 +142,7 @@ struct file_hash_entry\n {\n   struct file_hash_entry *next;\n   cpp_dir *start_dir;\n+  source_location location;\n   union\n   {\n     _cpp_file *file;\n@@ -521,6 +522,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   entry = new_file_hash_entry (pfile);\n   entry->next = *hash_slot;\n   entry->start_dir = start_dir;\n+  entry->location = pfile->line_table->highest_location;\n   entry->u.file = file;\n   *hash_slot = entry;\n \n@@ -533,6 +535,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n       entry = new_file_hash_entry (pfile);\n       entry->next = *hash_slot;\n       entry->start_dir = pfile->bracket_include;\n+      entry->location = pfile->line_table->highest_location;\n       entry->u.file = file;\n       *hash_slot = entry;\n     }\n@@ -543,6 +546,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n       entry = new_file_hash_entry (pfile);\n       entry->next = *hash_slot;\n       entry->start_dir = pfile->quote_include;\n+      entry->location = pfile->line_table->highest_location;\n       entry->u.file = file;\n       *hash_slot = entry;\n     }\n@@ -993,6 +997,7 @@ make_cpp_dir (cpp_reader *pfile, const char *dir_name, int sysp)\n   entry = new_file_hash_entry (pfile);\n   entry->next = *hash_slot;\n   entry->start_dir = NULL;\n+  entry->location = pfile->line_table->highest_location;\n   entry->u.dir = dir;\n   *hash_slot = entry;\n \n@@ -1036,6 +1041,25 @@ cpp_included (cpp_reader *pfile, const char *fname)\n   return entry != NULL;\n }\n \n+/* Returns TRUE if a file FNAME has ever been successfully opened\n+   before LOCATION.  This routine is not intended to correctly handle\n+   filenames aliased by links or redundant . or .. traversals etc.  */\n+bool\n+cpp_included_before (cpp_reader *pfile, const char *fname,\n+\t\t     source_location location)\n+{\n+  struct file_hash_entry *entry;\n+\n+  entry = (struct file_hash_entry *)\n+     htab_find_with_hash (pfile->file_hash, fname, htab_hash_string (fname));\n+\n+  while (entry && (entry->start_dir == NULL || entry->u.file->err_no\n+\t\t   || entry->location > location))\n+    entry = entry->next;\n+\n+  return entry != NULL;\n+}\n+\n /* Calculate the hash value of a file hash entry P.  */\n \n static hashval_t"}, {"sha": "01e982fbceb36ce6141c9be802e683118ec8d4e4", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e207107a8fca7d0f8792502b576688ede5df58/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=f1e207107a8fca7d0f8792502b576688ede5df58", "patch": "@@ -853,6 +853,7 @@ extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *,\n \n /* In cppfiles.c */\n extern bool cpp_included (cpp_reader *, const char *);\n+extern bool cpp_included_before (cpp_reader *, const char *, source_location);\n extern void cpp_make_system_header (cpp_reader *, int, int);\n extern bool cpp_push_include (cpp_reader *, const char *);\n extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);"}]}