{"sha": "4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "node_id": "C_kwDOANBUbNoAKDRjZDg4YzRjZDYwYmNlN2EyZmQxNDE5MTMzNGE1NmFiMDhlYTUxODE", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-09T11:53:33Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-15T14:48:41Z"}, "message": "ast: Remove ExprStmtWithBlock / ExprStmtWithoutBlock distinction\n\nThis distinction isn't very helpful and makes correct parsing harder.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-full-decls.h (class ExprStmtWithoutBlock): Remove.\n\t(class ExprStmtWithBlock): Remove.\n\t* ast/rust-stmt.h (class ExprStmtWithoutBlock): Remove.\n\t(class ExprStmtWithBlock): Remove.\n\t(class ExprStmt):\n\tMake non-abstract, add common functionality from removed base classes.\n\t* ast/rust-ast.h: Move to_stmt to base class.\n\t* ast/rust-ast.cc (ExprStmtWithBlock::as_string): Remove.\n\t* ast/rust-macro.h: Use new signature for to_stmt.\n\t(ExprStmt::as_string): New method.\n\t(ExprStmtWithoutBlock::as_string): Remove.\n\t(BlockExpr::strip_tail_expr): Update for removed classes.\n\t(ExprStmtWithoutBlock::accept_vis): Remove.\n\t(ExprStmtWithBlock::accept_vis): Remove.\n\t(ExprStmt::accept_vis): New method.\n\t* ast/rust-ast-dump.cc (Dump::visit): Update for removed classes.\n\t* ast/rust-ast-dump.h: Likewise.\n\t* ast/rust-ast-collector.h: Likewise.\n\t* ast/rust-ast-collector.cc (TokenStream::visit): Likewise.\n\t* ast/rust-ast-visitor.h: Likewise.\n\t* checks/errors/rust-feature-gate.h: Likewise.\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::visit): Likewise.\n\t* expand/rust-expand-visitor.h: Likewise.\n\t* expand/rust-cfg-strip.cc (CfgStrip::visit): Likewise.\n\t* expand/rust-cfg-strip.h: Likewise.\n\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-base.h: Likewise.\n\t* hir/rust-ast-lower-stmt.cc (ASTLoweringStmt::visit): Likewise.\n\t* hir/rust-ast-lower-stmt.h: Likewise.\n\t* util/rust-attributes.cc (AttributeChecker::visit): Likewise.\n\t* util/rust-attributes.h: Likewise.\n\t* resolve/rust-ast-resolve-base.cc (ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.h: Likewise.\n\t* resolve/rust-ast-resolve-stmt.h: Likewise.\n\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::visit):\n\tLikewise.\n\t* resolve/rust-early-name-resolver.h: Likewise.\n\t* parse/rust-parse-impl.h (Parser::parse_match_expr): Likewise.\n\t(Parser::parse_stmt_or_expr_without_block): Likewise.\n\t* parse/rust-parse.h: Likewise.\n\nSigned-off-by: Matthew Jasper <mjjasper1@gmail.com>", "tree": {"sha": "059e2a37d4ab5b4c5728a952c5da12149a2c7a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/059e2a37d4ab5b4c5728a952c5da12149a2c7a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142b84e3c56252004348f57c0822dca39d437395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142b84e3c56252004348f57c0822dca39d437395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/142b84e3c56252004348f57c0822dca39d437395"}], "stats": {"total": 409, "additions": 87, "deletions": 322}, "files": [{"sha": "afc169516a104529d2aa15e4c78402d92d2161aa", "filename": "gcc/rust/ast/rust-ast-collector.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-collector.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -2666,13 +2666,7 @@ TokenCollector::visit (LetStmt &stmt)\n }\n \n void\n-TokenCollector::visit (ExprStmtWithoutBlock &stmt)\n-{\n-  visit (stmt.get_expr ());\n-}\n-\n-void\n-TokenCollector::visit (ExprStmtWithBlock &stmt)\n+TokenCollector::visit (ExprStmt &stmt)\n {\n   visit (stmt.get_expr ());\n }"}, {"sha": "d4712c276988c8c43d51aaef6fe975e29bef4712", "filename": "gcc/rust/ast/rust-ast-collector.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-collector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-collector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-collector.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -287,8 +287,7 @@ class TokenCollector : public ASTVisitor\n   // rust-stmt.h\n   void visit (EmptyStmt &stmt);\n   void visit (LetStmt &stmt);\n-  void visit (ExprStmtWithoutBlock &stmt);\n-  void visit (ExprStmtWithBlock &stmt);\n+  void visit (ExprStmt &stmt);\n \n   // rust-type.h\n   void visit (TraitBound &bound);"}, {"sha": "0c1ed758f6ff6bdd84ca4eec99ef273a8326435b", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -1689,13 +1689,7 @@ Dump::visit (LetStmt &stmt)\n }\n \n void\n-Dump::visit (ExprStmtWithoutBlock &stmt)\n-{\n-  visit (stmt.get_expr ());\n-}\n-\n-void\n-Dump::visit (ExprStmtWithBlock &stmt)\n+Dump::visit (ExprStmt &stmt)\n {\n   visit (stmt.get_expr ());\n }"}, {"sha": "f014ad1470c2f53f1a297bd7b069f1c9967452ce", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -269,8 +269,7 @@ class Dump : public ASTVisitor\n   // rust-stmt.h\n   void visit (EmptyStmt &stmt);\n   void visit (LetStmt &stmt);\n-  void visit (ExprStmtWithoutBlock &stmt);\n-  void visit (ExprStmtWithBlock &stmt);\n+  void visit (ExprStmt &stmt);\n \n   // rust-type.h\n   void visit (TraitBound &bound);"}, {"sha": "28bee1409bf8b1ff489a11effd38813af32cd548", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -159,8 +159,6 @@ class InlineAsm;\n class EmptyStmt;\n class LetStmt;\n class ExprStmt;\n-class ExprStmtWithoutBlock;\n-class ExprStmtWithBlock;\n \n // rust-item.h\n class TypeParam;"}, {"sha": "ccc819653b68e8b3dde0587da2787b9623641f1b", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -206,8 +206,7 @@ class ASTVisitor\n   // rust-stmt.h\n   virtual void visit (EmptyStmt &stmt) = 0;\n   virtual void visit (LetStmt &stmt) = 0;\n-  virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n-  virtual void visit (ExprStmtWithBlock &stmt) = 0;\n+  virtual void visit (ExprStmt &stmt) = 0;\n \n   // rust-type.h\n   virtual void visit (TraitBound &bound) = 0;"}, {"sha": "ea267f4e767a87ffa72762340e1dfaea010308be", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -1261,9 +1261,9 @@ MacroInvocData::as_string () const\n }\n \n std::string\n-ExprStmtWithBlock::as_string () const\n+ExprStmt::as_string () const\n {\n-  std::string str = indent_spaces (enter) + \"ExprStmtWithBlock: \\n\";\n+  std::string str = indent_spaces (enter) + \"ExprStmt: \\n\";\n \n   if (expr == nullptr)\n     {\n@@ -1273,6 +1273,8 @@ ExprStmtWithBlock::as_string () const\n     {\n       indent_spaces (enter);\n       str += expr->as_string ();\n+      if (semicolon_followed)\n+\tstr += \";\";\n       indent_spaces (out);\n     }\n \n@@ -2042,22 +2044,6 @@ TupleExpr::as_string () const\n   return str;\n }\n \n-std::string\n-ExprStmtWithoutBlock::as_string () const\n-{\n-  std::string str (\"ExprStmtWithoutBlock:\\n\");\n-  indent_spaces (enter);\n-  str += indent_spaces (stay);\n-\n-  if (expr == nullptr)\n-    str += \"none (this shouldn't happen and is probably an error)\";\n-  else\n-    str += expr->as_string ();\n-  indent_spaces (out);\n-\n-  return str;\n-}\n-\n std::string\n FunctionParam::as_string () const\n {\n@@ -4225,14 +4211,10 @@ BlockExpr::strip_tail_expr ()\n \t{\n \t  auto &stmt = static_cast<ExprStmt &> (*statements.back ());\n \n-\t  if (stmt.get_type () == ExprStmt::ExprStmtType::WITH_BLOCK)\n+\t  if (!stmt.is_semicolon_followed ())\n \t    {\n-\t      auto &stmt_block = static_cast<ExprStmtWithBlock &> (stmt);\n-\t      if (!stmt_block.is_semicolon_followed ())\n-\t\t{\n-\t\t  expr = std::move (stmt_block.get_expr ());\n-\t\t  statements.pop_back ();\n-\t\t}\n+\t      expr = std::move (stmt.get_expr ());\n+\t      statements.pop_back ();\n \t    }\n \t}\n     }\n@@ -4831,13 +4813,7 @@ LetStmt::accept_vis (ASTVisitor &vis)\n }\n \n void\n-ExprStmtWithoutBlock::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-ExprStmtWithBlock::accept_vis (ASTVisitor &vis)\n+ExprStmt::accept_vis (ASTVisitor &vis)\n {\n   vis.visit (*this);\n }"}, {"sha": "6dbbd3df0883ccb8984ff46c71650f5694222583", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -984,6 +984,8 @@ class Expr : public Node\n \n   virtual std::vector<Attribute> &get_outer_attrs () = 0;\n \n+  virtual Expr *to_stmt () const { return clone_expr_impl (); }\n+\n protected:\n   // Constructor\n   Expr () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n@@ -1028,8 +1030,6 @@ class ExprWithoutBlock : public Expr\n   {\n     return clone_expr_without_block_impl ();\n   }\n-\n-  virtual ExprWithoutBlock *to_stmt () const { return clone_expr_impl (); }\n };\n \n /* HACK: IdentifierExpr, delete when figure out identifier vs expr problem in"}, {"sha": "0889aaee6f7ce37993acf3dd494a06a20c335d68", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -802,7 +802,7 @@ class MacroInvocation : public TypeNoBounds,\n     return clone_macro_invocation_impl ();\n   }\n \n-  ExprWithoutBlock *to_stmt () const override\n+  Expr *to_stmt () const override\n \n   {\n     auto new_impl = clone_macro_invocation_impl ();"}, {"sha": "38ca2157f35b641ee661682a73489d340163ec94", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 18, "deletions": 120, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -179,154 +179,57 @@ class LetStmt : public Stmt\n   LetStmt *clone_stmt_impl () const override { return new LetStmt (*this); }\n };\n \n-/* Abstract base class for expression statements (statements containing an\n- * expression) */\n+// Expression statements (statements containing an expression)\n class ExprStmt : public Stmt\n {\n-public:\n-  enum ExprStmtType\n-  {\n-    WITH_BLOCK,\n-    WITHOUT_BLOCK\n-  };\n-\n-protected:\n+  std::unique_ptr<Expr> expr;\n   Location locus;\n+  bool semicolon_followed;\n \n public:\n   Location get_locus () const override final { return locus; }\n \n   bool is_item () const override final { return false; }\n \n   bool is_expr () const override final { return true; }\n-\n-  virtual ExprStmtType get_type () const = 0;\n-\n-protected:\n-  ExprStmt (Location locus) : locus (locus) {}\n-};\n-\n-/* Statement containing an expression without a block (or, due to technical\n- * difficulties, can only be guaranteed to hold an expression). */\n-class ExprStmtWithoutBlock : public ExprStmt\n-{\n-  // TODO: ensure that this works\n-  std::unique_ptr<ExprWithoutBlock> expr;\n-  /* HACK: cannot ensure type safety of ExprWithoutBlock due to Pratt parsing,\n-   * so have to store more general type of Expr. FIXME: fix this issue somehow\n-   * or redesign AST. */\n-  // std::unique_ptr<Expr> expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  ExprStmtWithoutBlock (std::unique_ptr<ExprWithoutBlock> expr, Location locus)\n-    : ExprStmt (locus), expr (std::move (expr->to_stmt ()))\n-  {}\n-\n-  /*ExprStmtWithoutBlock (std::unique_ptr<Expr> expr, Location locus)\n-    : ExprStmt (locus), expr (std::move (expr))\n-  {}*/\n-\n-  // Copy constructor with clone\n-  ExprStmtWithoutBlock (ExprStmtWithoutBlock const &other) : ExprStmt (other)\n-  {\n-    // guard to prevent null dereference (only required if error state)\n-    if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n-  }\n-  /*ExprStmtWithoutBlock (ExprStmtWithoutBlock const &other)\n-    : ExprStmt (other), expr (other.expr->clone_expr ())\n-  {}*/\n-\n-  // Overloaded assignment operator to clone\n-  ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock const &other)\n-  {\n-    ExprStmt::operator= (other);\n-    // expr = other.expr->clone_expr ();\n-\n-    // guard to prevent null dereference (only required if error state)\n-    if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n-    else\n-      expr = nullptr;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ExprStmtWithoutBlock (ExprStmtWithoutBlock &&other) = default;\n-  ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock &&other) = default;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // Invalid if expr is null, so base stripping on that.\n-  void mark_for_strip () override { expr = nullptr; }\n-  bool is_marked_for_strip () const override { return expr == nullptr; }\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<ExprWithoutBlock> &get_expr ()\n-  {\n-    rust_assert (expr != nullptr);\n-    return expr;\n-  }\n-\n-  ExprStmtType get_type () const override\n-  {\n-    return ExprStmtType::WITHOUT_BLOCK;\n-  };\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ExprStmtWithoutBlock *clone_stmt_impl () const override\n-  {\n-    return new ExprStmtWithoutBlock (*this);\n-  }\n-};\n-\n-// Statement containing an expression with a block\n-class ExprStmtWithBlock : public ExprStmt\n-{\n-  std::unique_ptr<ExprWithBlock> expr;\n-  bool semicolon_followed;\n-\n-public:\n   std::string as_string () const override;\n \n   std::vector<LetStmt *> locals;\n \n-  ExprStmtWithBlock (std::unique_ptr<ExprWithBlock> expr, Location locus,\n-\t\t     bool semicolon_followed)\n-    : ExprStmt (locus), expr (std::move (expr)),\n+  ExprStmt (std::unique_ptr<Expr> expr, Location locus, bool semicolon_followed)\n+    : expr (expr->to_stmt ()), locus (locus),\n       semicolon_followed (semicolon_followed)\n   {}\n \n   // Copy constructor with clone\n-  ExprStmtWithBlock (ExprStmtWithBlock const &other) : ExprStmt (other)\n+  ExprStmt (ExprStmt const &other)\n+    : locus (other.locus), semicolon_followed (other.semicolon_followed)\n   {\n     // guard to prevent null dereference (only required if error state)\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_with_block ();\n+      expr = other.expr->clone_expr ();\n   }\n \n   // Overloaded assignment operator to clone\n-  ExprStmtWithBlock &operator= (ExprStmtWithBlock const &other)\n+  ExprStmt &operator= (ExprStmt const &other)\n   {\n-    ExprStmt::operator= (other);\n+    Stmt::operator= (other);\n \n     // guard to prevent null dereference (only required if error state)\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_with_block ();\n+      expr = other.expr->clone_expr ();\n     else\n       expr = nullptr;\n \n+    locus = other.locus;\n+    semicolon_followed = other.semicolon_followed;\n+\n     return *this;\n   }\n \n   // move constructors\n-  ExprStmtWithBlock (ExprStmtWithBlock &&other) = default;\n-  ExprStmtWithBlock &operator= (ExprStmtWithBlock &&other) = default;\n+  ExprStmt (ExprStmt &&other) = default;\n+  ExprStmt &operator= (ExprStmt &&other) = default;\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -335,23 +238,18 @@ class ExprStmtWithBlock : public ExprStmt\n   bool is_marked_for_strip () const override { return expr == nullptr; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<ExprWithBlock> &get_expr ()\n+  std::unique_ptr<Expr> &get_expr ()\n   {\n     rust_assert (expr != nullptr);\n     return expr;\n   }\n \n   bool is_semicolon_followed () const { return semicolon_followed; }\n \n-  ExprStmtType get_type () const override { return ExprStmtType::WITH_BLOCK; };\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ExprStmtWithBlock *clone_stmt_impl () const override\n-  {\n-    return new ExprStmtWithBlock (*this);\n-  }\n+  ExprStmt *clone_stmt_impl () const override { return new ExprStmt (*this); }\n };\n \n } // namespace AST"}, {"sha": "4bae8c08b52c2ed5edb606ef46c171f0b231c758", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -168,8 +168,7 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::AltPattern &pattern) override {}\n   void visit (AST::EmptyStmt &stmt) override {}\n   void visit (AST::LetStmt &stmt) override {}\n-  void visit (AST::ExprStmtWithoutBlock &stmt) override {}\n-  void visit (AST::ExprStmtWithBlock &stmt) override {}\n+  void visit (AST::ExprStmt &stmt) override {}\n   void visit (AST::TraitBound &bound) override {}\n   void visit (AST::ImplTraitType &type) override {}\n   void visit (AST::TraitObjectType &type) override {}"}, {"sha": "ae06785c21510b651f33ba4e62862dbbc568f5e3", "filename": "gcc/rust/expand/rust-cfg-strip.cc", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -3010,25 +3010,7 @@ CfgStrip::visit (AST::LetStmt &stmt)\n     }\n }\n void\n-CfgStrip::visit (AST::ExprStmtWithoutBlock &stmt)\n-{\n-  // outer attributes associated with expr, so rely on expr\n-\n-  // guard - should prevent null pointer expr\n-  if (stmt.is_marked_for_strip ())\n-    return;\n-\n-  // strip if expr is to be stripped\n-  auto &expr = stmt.get_expr ();\n-  expr->accept_vis (*this);\n-  if (expr->is_marked_for_strip ())\n-    {\n-      stmt.mark_for_strip ();\n-      return;\n-    }\n-}\n-void\n-CfgStrip::visit (AST::ExprStmtWithBlock &stmt)\n+CfgStrip::visit (AST::ExprStmt &stmt)\n {\n   // outer attributes associated with expr, so rely on expr\n "}, {"sha": "03b47b21482722507a6eae0294b03b6b6c71da20", "filename": "gcc/rust/expand/rust-cfg-strip.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -206,8 +206,7 @@ class CfgStrip : public AST::ASTVisitor\n \n   void visit (AST::EmptyStmt &) override;\n   void visit (AST::LetStmt &stmt) override;\n-  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n-  void visit (AST::ExprStmtWithBlock &stmt) override;\n+  void visit (AST::ExprStmt &stmt) override;\n \n   void visit (AST::TraitBound &bound) override;\n   void visit (AST::ImplTraitType &type) override;"}, {"sha": "a0cfd00e9a0fdc4989d984bbf2b65ac0770d97d0", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -1290,13 +1290,7 @@ ExpandVisitor::visit (AST::LetStmt &stmt)\n }\n \n void\n-ExpandVisitor::visit (AST::ExprStmtWithoutBlock &stmt)\n-{\n-  visit (stmt.get_expr ());\n-}\n-\n-void\n-ExpandVisitor::visit (AST::ExprStmtWithBlock &stmt)\n+ExpandVisitor::visit (AST::ExprStmt &stmt)\n {\n   visit (stmt.get_expr ());\n }"}, {"sha": "7b245181995d1ed193f05aa85919c648eaf95c37", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -291,8 +291,7 @@ class ExpandVisitor : public AST::ASTVisitor\n \n   void visit (AST::EmptyStmt &) override;\n   void visit (AST::LetStmt &stmt) override;\n-  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n-  void visit (AST::ExprStmtWithBlock &stmt) override;\n+  void visit (AST::ExprStmt &stmt) override;\n \n   void visit (AST::TraitBound &bound) override;\n   void visit (AST::ImplTraitType &type) override;"}, {"sha": "38f0c3e04330fdb02310b711341af5bc3c86f118", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -467,10 +467,7 @@ void\n ASTLoweringBase::visit (AST::LetStmt &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExprStmtWithoutBlock &)\n-{}\n-void\n-ASTLoweringBase::visit (AST::ExprStmtWithBlock &)\n+ASTLoweringBase::visit (AST::ExprStmt &)\n {}\n \n // rust-type.h"}, {"sha": "6bfbcfae3f435e21ecdb4d2b54117b547c212ae4", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -234,8 +234,7 @@ class ASTLoweringBase : public AST::ASTVisitor\n   // rust-stmt.h\n   virtual void visit (AST::EmptyStmt &stmt);\n   virtual void visit (AST::LetStmt &stmt);\n-  virtual void visit (AST::ExprStmtWithoutBlock &stmt);\n-  virtual void visit (AST::ExprStmtWithBlock &stmt);\n+  virtual void visit (AST::ExprStmt &stmt);\n \n   // rust-type.h\n   virtual void visit (AST::TraitBound &bound);"}, {"sha": "d99a3f36a5af9f50db363fc11805d35006cdb094", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -55,23 +55,7 @@ ASTLoweringStmt::translate (AST::Stmt *stmt, bool *terminated)\n }\n \n void\n-ASTLoweringStmt::visit (AST::ExprStmtWithBlock &stmt)\n-{\n-  HIR::ExprWithBlock *expr\n-    = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get (),\n-\t\t\t\t\t   &terminated);\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t UNKNOWN_LOCAL_DEFID);\n-  translated\n-    = new HIR::ExprStmt (mapping, std::unique_ptr<HIR::ExprWithBlock> (expr),\n-\t\t\t stmt.get_locus (), !stmt.is_semicolon_followed ());\n-}\n-\n-void\n-ASTLoweringStmt::visit (AST::ExprStmtWithoutBlock &stmt)\n+ASTLoweringStmt::visit (AST::ExprStmt &stmt)\n {\n   HIR::Expr *expr\n     = ASTLoweringExpr::translate (stmt.get_expr ().get (), &terminated);\n@@ -80,8 +64,9 @@ ASTLoweringStmt::visit (AST::ExprStmtWithoutBlock &stmt)\n   Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n-  translated = new HIR::ExprStmt (mapping, std::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t  stmt.get_locus ());\n+  translated\n+    = new HIR::ExprStmt (mapping, std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t stmt.get_locus (), !stmt.is_semicolon_followed ());\n }\n \n void"}, {"sha": "7a1ebe6392a158af969bf1f0480e58c833af5e3f", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -31,8 +31,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n public:\n   static HIR::Stmt *translate (AST::Stmt *stmt, bool *terminated);\n \n-  void visit (AST::ExprStmtWithBlock &stmt) override;\n-  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n+  void visit (AST::ExprStmt &stmt) override;\n   void visit (AST::ConstantItem &constant) override;\n   void visit (AST::LetStmt &stmt) override;\n   void visit (AST::TupleStruct &struct_decl) override;"}, {"sha": "f19434d26aa853dfb5959198708be3ee75df3415", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 32, "deletions": 55, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -7387,23 +7387,23 @@ Parser<ManagedTokenSource>::parse_expr_with_block (AST::AttrVec outer_attrs)\n /* Parses a expression statement containing an expression with block.\n  * Disambiguates internally. */\n template <typename ManagedTokenSource>\n-std::unique_ptr<AST::ExprStmtWithBlock>\n+std::unique_ptr<AST::ExprStmt>\n Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n   AST::AttrVec outer_attrs)\n {\n   auto expr_parsed = parse_expr_with_block (std::move (outer_attrs));\n   auto locus = expr_parsed->get_locus ();\n \n   // return expr stmt created from expr\n-  return std::unique_ptr<AST::ExprStmtWithBlock> (\n-    new AST::ExprStmtWithBlock (std::move (expr_parsed), locus,\n-\t\t\t\tlexer.peek_token ()->get_id () == SEMICOLON));\n+  return std::unique_ptr<AST::ExprStmt> (\n+    new AST::ExprStmt (std::move (expr_parsed), locus,\n+\t\t       lexer.peek_token ()->get_id () == SEMICOLON));\n }\n \n /* Parses an expression statement containing an expression without block.\n  * Disambiguates further. */\n template <typename ManagedTokenSource>\n-std::unique_ptr<AST::ExprStmtWithoutBlock>\n+std::unique_ptr<AST::ExprStmt>\n Parser<ManagedTokenSource>::parse_expr_stmt_without_block (\n   AST::AttrVec outer_attrs, ParseRestrictions restrictions)\n {\n@@ -7432,8 +7432,8 @@ Parser<ManagedTokenSource>::parse_expr_stmt_without_block (\n     if (!skip_token (SEMICOLON))\n       return nullptr;\n \n-  return std::unique_ptr<AST::ExprStmtWithoutBlock> (\n-    new AST::ExprStmtWithoutBlock (std::move (expr), locus));\n+  return std::unique_ptr<AST::ExprStmt> (\n+    new AST::ExprStmt (std::move (expr), locus, true));\n }\n \n /* Parses an expression without a block associated with it (further\n@@ -8683,8 +8683,10 @@ Parser<ManagedTokenSource>::parse_match_expr (AST::AttrVec outer_attrs,\n       restrictions.expr_can_be_stmt = true;\n       restrictions.consume_semi = false;\n \n-      std::unique_ptr<AST::ExprStmt> expr = parse_expr_stmt ({}, restrictions);\n-      if (expr == nullptr)\n+      std::unique_ptr<AST::ExprStmt> expr_stmt\n+\t= parse_expr_stmt ({}, restrictions);\n+\n+      if (expr_stmt == nullptr)\n \t{\n \t  Error error (lexer.peek_token ()->get_locus (),\n \t\t       \"failed to parse expr in match arm in match expr\");\n@@ -8693,30 +8695,12 @@ Parser<ManagedTokenSource>::parse_match_expr (AST::AttrVec outer_attrs,\n \t  // skip somewhere?\n \t  return nullptr;\n \t}\n-      bool is_expr_without_block\n-\t= expr->get_type () == AST::ExprStmt::ExprStmtType::WITHOUT_BLOCK;\n \n-      // construct match case expr and add to cases\n-      switch (expr->get_type ())\n-\t{\n-\t  case AST::ExprStmt::ExprStmtType::WITH_BLOCK: {\n-\t    AST::ExprStmtWithBlock *cast\n-\t      = static_cast<AST::ExprStmtWithBlock *> (expr.get ());\n-\t    std::unique_ptr<AST::Expr> e = cast->get_expr ()->clone_expr ();\n-\t    match_arms.push_back (\n-\t      AST::MatchCase (std::move (arm), std::move (e)));\n-\t  }\n-\t  break;\n+      std::unique_ptr<AST::Expr> expr = expr_stmt->get_expr ()->clone_expr ();\n+      bool is_expr_without_block\n+\t= expr_stmt->get_expr ()->is_expr_without_block ();\n \n-\t  case AST::ExprStmt::ExprStmtType::WITHOUT_BLOCK: {\n-\t    AST::ExprStmtWithoutBlock *cast\n-\t      = static_cast<AST::ExprStmtWithoutBlock *> (expr.get ());\n-\t    std::unique_ptr<AST::Expr> e = cast->get_expr ()->clone_expr ();\n-\t    match_arms.push_back (\n-\t      AST::MatchCase (std::move (arm), std::move (e)));\n-\t  }\n-\t  break;\n-\t}\n+      match_arms.push_back (AST::MatchCase (std::move (arm), std::move (expr)));\n \n       // handle comma presence\n       if (lexer.peek_token ()->get_id () != COMMA)\n@@ -11793,9 +11777,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_with_block (\n   // internal block expr must either have semicolons followed, or evaluate to\n   // ()\n   auto locus = expr->get_locus ();\n-  std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-    new AST::ExprStmtWithBlock (std::move (expr), locus,\n-\t\t\t\ttok->get_id () == SEMICOLON));\n+  std::unique_ptr<AST::ExprStmt> stmt (\n+    new AST::ExprStmt (std::move (expr), locus, tok->get_id () == SEMICOLON));\n   if (tok->get_id () == SEMICOLON)\n     lexer.skip_token ();\n \n@@ -11920,9 +11903,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t    // must be expression statement\n \t    lexer.skip_token ();\n \n-\t    std::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t      new AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t     t->get_locus ()));\n+\t    std::unique_ptr<AST::ExprStmt> stmt (\n+\t      new AST::ExprStmt (std::move (expr), t->get_locus (), true));\n \t    return ExprOrStmt (std::move (stmt));\n \t  }\n \n@@ -11965,9 +11947,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t\t// must be expression statement\n \t\tlexer.skip_token ();\n \n-\t\tstd::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t\t  new AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t\t t->get_locus ()));\n+\t\tstd::unique_ptr<AST::ExprStmt> stmt (\n+\t\t  new AST::ExprStmt (std::move (expr), t->get_locus (), true));\n \t\treturn ExprOrStmt (std::move (stmt));\n \t      }\n \n@@ -12010,9 +11991,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t      // must be expression statement\n \t      lexer.skip_token ();\n \n-\t      std::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t\tnew AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t       t->get_locus ()));\n+\t      std::unique_ptr<AST::ExprStmt> stmt (\n+\t\tnew AST::ExprStmt (std::move (expr), t->get_locus (), true));\n \t      return ExprOrStmt (std::move (stmt));\n \t    }\n \n@@ -12035,9 +12015,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \n \t    if (expr)\n \t      {\n-\t\tstd::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t\t  new AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t\t t->get_locus ()));\n+\t\tstd::unique_ptr<AST::ExprStmt> stmt (\n+\t\t  new AST::ExprStmt (std::move (expr), t->get_locus (), true));\n \t\treturn ExprOrStmt (std::move (stmt));\n \t      }\n \t    else\n@@ -12238,9 +12217,8 @@ Parser<ManagedTokenSource>::parse_path_based_stmt_or_expr (\n \t  {\n \t    // statement\n \t    lexer.skip_token ();\n-\t    std::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t      new AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t     stmt_or_expr_loc));\n+\t    std::unique_ptr<AST::ExprStmt> stmt (\n+\t      new AST::ExprStmt (std::move (expr), stmt_or_expr_loc, true));\n \t    return ExprOrStmt (std::move (stmt));\n \t  }\n \n@@ -12266,9 +12244,9 @@ Parser<ManagedTokenSource>::parse_path_based_stmt_or_expr (\n \t  {\n \t    // statement\n \t    lexer.skip_token ();\n-\t    std::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t      new AST::ExprStmtWithoutBlock (std::move (struct_expr),\n-\t\t\t\t\t     stmt_or_expr_loc));\n+\t    std::unique_ptr<AST::ExprStmt> stmt (\n+\t      new AST::ExprStmt (std::move (struct_expr), stmt_or_expr_loc,\n+\t\t\t\t true));\n \t    return ExprOrStmt (std::move (stmt));\n \t  }\n \n@@ -12288,9 +12266,8 @@ Parser<ManagedTokenSource>::parse_path_based_stmt_or_expr (\n \t  {\n \t    lexer.skip_token ();\n \n-\t    std::unique_ptr<AST::ExprStmtWithoutBlock> stmt (\n-\t      new AST::ExprStmtWithoutBlock (std::move (expr),\n-\t\t\t\t\t     stmt_or_expr_loc));\n+\t    std::unique_ptr<AST::ExprStmt> stmt (\n+\t      new AST::ExprStmt (std::move (expr), stmt_or_expr_loc, true));\n \t    return ExprOrStmt (std::move (stmt));\n \t  }\n "}, {"sha": "a092290d880069c63c6e6799961c715d5534617d", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -637,9 +637,9 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::ExprStmt> parse_expr_stmt (AST::AttrVec outer_attrs,\n \t\t\t\t\t\t  ParseRestrictions restrictions\n \t\t\t\t\t\t  = ParseRestrictions ());\n-  std::unique_ptr<AST::ExprStmtWithBlock>\n+  std::unique_ptr<AST::ExprStmt>\n   parse_expr_stmt_with_block (AST::AttrVec outer_attrs);\n-  std::unique_ptr<AST::ExprStmtWithoutBlock>\n+  std::unique_ptr<AST::ExprStmt>\n   parse_expr_stmt_without_block (AST::AttrVec outer_attrs,\n \t\t\t\t ParseRestrictions restrictions\n \t\t\t\t = ParseRestrictions ());"}, {"sha": "6caa9e320632481f14da779d0294e2005ef1fbe6", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -587,11 +587,7 @@ ResolverBase::visit (AST::LetStmt &)\n {}\n \n void\n-ResolverBase::visit (AST::ExprStmtWithoutBlock &)\n-{}\n-\n-void\n-ResolverBase::visit (AST::ExprStmtWithBlock &)\n+ResolverBase::visit (AST::ExprStmt &)\n {}\n \n void"}, {"sha": "327ee702b47ccdfc2d8a6e46e3bce595631e010c", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -180,8 +180,7 @@ class ResolverBase : public AST::ASTVisitor\n \n   void visit (AST::EmptyStmt &);\n   void visit (AST::LetStmt &);\n-  void visit (AST::ExprStmtWithoutBlock &);\n-  void visit (AST::ExprStmtWithBlock &);\n+  void visit (AST::ExprStmt &);\n \n   void visit (AST::TraitBound &);\n   void visit (AST::ImplTraitType &);"}, {"sha": "52404f611f321c60c421a049ebfad7630e1af95f", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -43,12 +43,7 @@ class ResolveStmt : public ResolverBase\n     stmt->accept_vis (resolver);\n   }\n \n-  void visit (AST::ExprStmtWithBlock &stmt) override\n-  {\n-    ResolveExpr::go (stmt.get_expr ().get (), prefix, canonical_prefix);\n-  }\n-\n-  void visit (AST::ExprStmtWithoutBlock &stmt) override\n+  void visit (AST::ExprStmt &stmt) override\n   {\n     ResolveExpr::go (stmt.get_expr ().get (), prefix, canonical_prefix);\n   }"}, {"sha": "3c628d0189b18e59a5a9ea2f270c31ccc6dbf6d7", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -1157,13 +1157,7 @@ EarlyNameResolver::visit (AST::LetStmt &stmt)\n }\n \n void\n-EarlyNameResolver::visit (AST::ExprStmtWithoutBlock &stmt)\n-{\n-  stmt.get_expr ()->accept_vis (*this);\n-}\n-\n-void\n-EarlyNameResolver::visit (AST::ExprStmtWithBlock &stmt)\n+EarlyNameResolver::visit (AST::ExprStmt &stmt)\n {\n   stmt.get_expr ()->accept_vis (*this);\n }"}, {"sha": "9f1fc0d2e978ee29c42b2e5abc02cf97b79d089e", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -262,8 +262,7 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::AltPattern &pattern);\n   virtual void visit (AST::EmptyStmt &stmt);\n   virtual void visit (AST::LetStmt &stmt);\n-  virtual void visit (AST::ExprStmtWithoutBlock &stmt);\n-  virtual void visit (AST::ExprStmtWithBlock &stmt);\n+  virtual void visit (AST::ExprStmt &stmt);\n   virtual void visit (AST::TraitBound &bound);\n   virtual void visit (AST::ImplTraitType &type);\n   virtual void visit (AST::TraitObjectType &type);"}, {"sha": "64f82c1231b0f48559d177dfc1798ccf84bed2a4", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -775,11 +775,7 @@ AttributeChecker::visit (AST::LetStmt &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExprStmtWithoutBlock &)\n-{}\n-\n-void\n-AttributeChecker::visit (AST::ExprStmtWithBlock &)\n+AttributeChecker::visit (AST::ExprStmt &)\n {}\n \n // rust-type.h"}, {"sha": "bd635f2d7786888d412c356510beabf7a05b05e2", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd88c4cd60bce7a2fd14191334a56ab08ea5181/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=4cd88c4cd60bce7a2fd14191334a56ab08ea5181", "patch": "@@ -245,8 +245,7 @@ class AttributeChecker : public AST::ASTVisitor\n   // rust-stmt.h\n   void visit (AST::EmptyStmt &stmt);\n   void visit (AST::LetStmt &stmt);\n-  void visit (AST::ExprStmtWithoutBlock &stmt);\n-  void visit (AST::ExprStmtWithBlock &stmt);\n+  void visit (AST::ExprStmt &stmt);\n \n   // rust-type.h\n   void visit (AST::TraitBound &bound);"}]}