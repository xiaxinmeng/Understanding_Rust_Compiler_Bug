{"sha": "63ea33ce94b20832f590b30b780dcde3c2bb6139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlYTMzY2U5NGIyMDgzMmY1OTBiMzBiNzgwZGNkZTNjMmJiNjEzOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-25T08:18:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-25T08:18:47Z"}, "message": "(yylex): Diagnose `1.0fl'.  Issue just one diagnostic for `1e1000000f'.\n\nFrom-SVN: r1685", "tree": {"sha": "17c22574c9b6e08cc46e3730d85ead9447a20aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17c22574c9b6e08cc46e3730d85ead9447a20aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ea33ce94b20832f590b30b780dcde3c2bb6139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ea33ce94b20832f590b30b780dcde3c2bb6139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ea33ce94b20832f590b30b780dcde3c2bb6139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ea33ce94b20832f590b30b780dcde3c2bb6139/comments", "author": null, "committer": null, "parents": [{"sha": "9282f2f99b5ea1442fc568bd96eab0bd34e05c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9282f2f99b5ea1442fc568bd96eab0bd34e05c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9282f2f99b5ea1442fc568bd96eab0bd34e05c97"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "0afcc9106184efe05d9dec7147865d831d55ddfa", "filename": "gcc/c-lex.c", "status": "modified", "additions": 25, "deletions": 39, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ea33ce94b20832f590b30b780dcde3c2bb6139/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ea33ce94b20832f590b30b780dcde3c2bb6139/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=63ea33ce94b20832f590b30b780dcde3c2bb6139", "patch": "@@ -1313,8 +1313,7 @@ yylex ()\n \tif (floatflag != NOT_FLOAT)\n \t  {\n \t    tree type = double_type_node;\n-\t    char f_seen = 0;\n-\t    char l_seen = 0;\n+\t    int garbage_chars = 0, exceeds_double = 0;\n \t    REAL_VALUE_TYPE value;\n \t    jmp_buf handler;\n \n@@ -1378,53 +1377,40 @@ yylex ()\n \t\t/* ERANGE is also reported for underflow,\n \t\t   so test the value to distinguish overflow from that.  */\n \t\tif (*p1 != 0 && (value > 1.0 || value < -1.0))\n-\t\t  pedwarn (\"floating point number exceeds range of `double'\");\n+\t\t  {\n+\t\t    pedwarn (\"floating point number exceeds range of `double'\");\n+\t\t    exceeds_double = 1;\n+\t\t  }\n \t      }\n #endif\n \n \t    /* Read the suffixes to choose a data type.  */\n-\t    while (1)\n+\t    switch (c)\n+\t      {\n+\t      case 'f': case 'F':\n+\t\ttype = float_type_node;\n+\t\tvalue = REAL_VALUE_TRUNCATE (TYPE_MODE (type), value);\n+\t\tif (REAL_VALUE_ISINF (value) && ! exceeds_double && pedantic)\n+\t\t  pedwarn (\"floating point number exceeds range of `float'\");\n+\t\tgarbage_chars = -1;\n+\t\tbreak;\n+\n+\t      case 'l': case 'L':\n+\t\ttype = long_double_type_node;\n+\t\tgarbage_chars = -1;\n+\t\tbreak;\n+\t      }\n+\t    /* Note: garbage_chars is -1 if first char is *not* garbage.  */\n+\t    while (isalnum (c))\n \t      {\n-\t\tif (c == 'f' || c == 'F')\n-\t\t  {\n-\t\t    if (f_seen)\n-\t\t      error (\"two `f's in floating constant\");\n-\t\t    else\n-\t\t      {\n-\t\t\tf_seen = 1;\n-\t\t\ttype = float_type_node;\n-\t\t\tvalue = real_value_truncate (TYPE_MODE (type), value);\n-\t\t\tif (REAL_VALUE_ISINF (value) && pedantic)\n-\t\t\t  pedwarn (\"floating point number exceeds range of `float'\");\n-\t\t      }\n-\t\t  }\n-\t\telse if (c == 'l' || c == 'L')\n-\t\t  {\n-\t\t    if (l_seen)\n-\t\t      error (\"two `l's in floating constant\");\n-\t\t    l_seen = 1;\n-\t\t    type = long_double_type_node;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    if (isalnum (c))\n-\t\t      {\n-\t\t\terror (\"garbage at end of number\");\n-\t\t\twhile (isalnum (c))\n-\t\t\t  {\n-\t\t\t    if (p >= token_buffer + maxtoken - 3)\n-\t\t\t      p = extend_token_buffer (p);\n-\t\t\t    *p++ = c;\n-\t\t\t    c = getc (finput);\n-\t\t\t  }\n-\t\t      }\n-\t\t    break;\n-\t\t  }\n \t\tif (p >= token_buffer + maxtoken - 3)\n \t\t  p = extend_token_buffer (p);\n \t\t*p++ = c;\n \t\tc = getc (finput);\n+\t\tgarbage_chars++;\n \t      }\n+\t    if (garbage_chars > 0)\n+\t      error (\"garbage at end of number\");\n \n \t    /* Create a node with determined type and value.  */\n \t    yylval.ttype = build_real (type, value);"}]}