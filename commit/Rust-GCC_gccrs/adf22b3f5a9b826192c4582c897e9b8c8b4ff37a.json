{"sha": "adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRmMjJiM2Y1YTliODI2MTkyYzQ1ODJjODk3ZTliOGM4YjRmZjM3YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:22:20Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:22:20Z"}, "message": "S/390: Get rid of Y constraint in left and logical right\n shift patterns.\n\nWith this patch the substitution patterns added earlier are used for\nthe logical right shift and all the left shift patterns.\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"<shift><mode>3\"): Change predicate of\n\top2 to nonmemory_operand.\n\t(\"*<shift>di3_31\", \"*<shift>di3_31_and\"):\n\tMerge into single pattern definition ...\n\t(\"*<shift>di3_31<addr_style_op><masked_op>\"): New pattern.\n\t(\"*<shift><mode>3\", \"*<shift><mode>3_and\"): Merge into single\n\tpattern definition ...\n\t(\"*<shift><mode>3<addr_style_op><masked_op>\"): New pattern.\n\t* config/s390/subst.md: Add ashift and lshiftrt to SUBST\n\titerator.\n\nFrom-SVN: r233844", "tree": {"sha": "0eca7195ce47363e0394da08d683d4094333c799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eca7195ce47363e0394da08d683d4094333c799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/comments", "author": null, "committer": null, "parents": [{"sha": "191eb16d3adfc397f63d63c2bafa9be187f9f054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191eb16d3adfc397f63d63c2bafa9be187f9f054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191eb16d3adfc397f63d63c2bafa9be187f9f054"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "aa829f0eb2f449808979386f24562a96a0ee50d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "patch": "@@ -1,3 +1,16 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"<shift><mode>3\"): Change predicate of\n+\top2 to nonmemory_operand.\n+\t(\"*<shift>di3_31\", \"*<shift>di3_31_and\"):\n+\tMerge into single pattern definition ...\n+\t(\"*<shift>di3_31<addr_style_op><masked_op>\"): New pattern.\n+\t(\"*<shift><mode>3\", \"*<shift><mode>3_and\"): Merge into single\n+\tpattern definition ...\n+\t(\"*<shift><mode>3<addr_style_op><masked_op>\"): New pattern.\n+\t* config/s390/subst.md: Add ashift and lshiftrt to SUBST\n+\titerator.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/predicates.md (const_int_6bitset_operand): New"}, {"sha": "771d1e91c22c22ce88bcc089b4812d1707b0605c", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "patch": "@@ -8408,60 +8408,37 @@\n (define_expand \"<shift><mode>3\"\n   [(set (match_operand:DSI 0 \"register_operand\" \"\")\n         (SHIFT:DSI (match_operand:DSI 1 \"register_operand\" \"\")\n-                   (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))]\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\")\n \n+; ESA 64 bit register pair shift with reg or imm shift count\n ; sldl, srdl\n-(define_insn \"*<shift>di3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n+(define_insn \"*<shift>di3_31<addr_style_op><masked_op>\"\n+  [(set (match_operand:DI 0 \"register_operand\"            \"=d\")\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\"   \"0\")\n+                  (match_operand:SI 2 \"nonmemory_operand\" \"an\")))]\n   \"!TARGET_ZARCH\"\n-  \"s<lr>dl\\t%0,%Y2\"\n+  \"s<lr>dl\\t%0,<addr_style_op_ops>\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")\n    (set_attr \"z196prop\" \"z196_cracked\")])\n \n-; sll, srl, sllg, srlg, sllk, srlk\n-(define_insn \"*<shift><mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\"                          \"=d,d\")\n-        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\"             \"<d0>,d\")\n-                   (match_operand:SI 2 \"shift_count_or_setmem_operand\"    \"Y,Y\")))]\n-  \"\"\n-  \"@\n-   s<lr>l<g>\\t%0,<1>%Y2\n-   s<lr>l<gk>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n-   (set_attr \"atype\"    \"reg,reg\")\n-   (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n-\n-; sldl, srdl\n-(define_insn \"*<shift>di3_31_and\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n-  \"!TARGET_ZARCH && (INTVAL (operands[3]) & 63) == 63\"\n-  \"s<lr>dl\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n \n+; 64 bit register shift with reg or imm shift count\n ; sll, srl, sllg, srlg, sllk, srlk\n-(define_insn \"*<shift><mode>3_and\"\n-  [(set (match_operand:GPR 0 \"register_operand\"                                 \"=d,d\")\n-        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\"                    \"<d0>,d\")\n-                   (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\"   \"Y,Y\")\n-\t\t\t   (match_operand:SI 3 \"const_int_operand\"               \"n,n\"))))]\n-  \"(INTVAL (operands[3]) & 63) == 63\"\n+(define_insn \"*<shift><mode>3<addr_style_op><masked_op>\"\n+  [(set (match_operand:GPR 0 \"register_operand\"              \"=d, d\")\n+        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>, d\")\n+                   (match_operand:SI 2 \"nonmemory_operand\"   \"an,an\")))]\n+  \"\"\n   \"@\n-   s<lr>l<g>\\t%0,<1>%Y2\n-   s<lr>l<gk>\\t%0,%1,%Y2\"\n+   s<lr>l<g>\\t%0,<1><addr_style_op_ops>\n+   s<lr>l<gk>\\t%0,%1,<addr_style_op_ops>\"\n   [(set_attr \"op_type\"  \"RS<E>,RSY\")\n    (set_attr \"atype\"    \"reg,reg\")\n    (set_attr \"cpu_facility\" \"*,z196\")\n-   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n+   (set_attr \"z10prop\"  \"z10_super_E1,*\")])\n \n ;\n ; ashr(di|si)3 instruction pattern(s)."}, {"sha": "907676af3969175f7fd27aee35e9327ca0524ab0", "filename": "gcc/config/s390/subst.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2Fconfig%2Fs390%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf22b3f5a9b826192c4582c897e9b8c8b4ff37a/gcc%2Fconfig%2Fs390%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fsubst.md?ref=adf22b3f5a9b826192c4582c897e9b8c8b4ff37a", "patch": "@@ -19,7 +19,7 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_code_iterator SUBST [rotate])\n+(define_code_iterator SUBST [rotate ashift lshiftrt])\n \n ; This expands an register/immediate operand to a register+immediate\n ; operand to draw advantage of the address style operand format"}]}