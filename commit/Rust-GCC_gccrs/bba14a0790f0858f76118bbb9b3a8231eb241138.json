{"sha": "bba14a0790f0858f76118bbb9b3a8231eb241138", "node_id": "C_kwDOANBUbNoAKGJiYTE0YTA3OTBmMDg1OGY3NjExOGJiYjliM2E4MjMxZWIyNDExMzg", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:41:31Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:07Z"}, "message": "gccrs: Add compiler driver\n\nOur compiler driver is fairly simple so far. The key piece to enforce is\nthat a compilation unit in Rust is the whole crate, so the process for\ncompiling Rust means pointing the compiler at the main entry point such as\nsrc/lib.rs or src/main.rs where the expansion pass takes over loading the\nother source files to include them in the crate.\n\n\tgcc/rust/\n\t* rustspec.cc: New.", "tree": {"sha": "087a2009ff66ba8f5376d1acd2a510ca370dabbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/087a2009ff66ba8f5376d1acd2a510ca370dabbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba14a0790f0858f76118bbb9b3a8231eb241138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba14a0790f0858f76118bbb9b3a8231eb241138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba14a0790f0858f76118bbb9b3a8231eb241138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba14a0790f0858f76118bbb9b3a8231eb241138/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6264fa28a37ccbfb0e03798d1cbb11e09d1971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6264fa28a37ccbfb0e03798d1cbb11e09d1971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6264fa28a37ccbfb0e03798d1cbb11e09d1971"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "b05f8ae5454df4da12cf48d5988e6694494ab3d8", "filename": "gcc/rust/rustspec.cc", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba14a0790f0858f76118bbb9b3a8231eb241138/gcc%2Frust%2Frustspec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba14a0790f0858f76118bbb9b3a8231eb241138/gcc%2Frust%2Frustspec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frustspec.cc?ref=bba14a0790f0858f76118bbb9b3a8231eb241138", "patch": "@@ -0,0 +1,191 @@\n+/* rustspec.c -- Specific flags and argument handling of the gcc Rust front end.\n+   Copyright (C) 2009-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"opts.h\"\n+\n+// satisfy intellisense\n+#include \"options.h\"\n+\n+/* This bit is set if we saw a `-xfoo' language specification.  */\n+#define LANGSPEC (1 << 1)\n+/* This bit is set if they did `-lc'.  */\n+#define WITHLIBC (1 << 2)\n+/* Skip this option.  */\n+#define SKIPOPT (1 << 3)\n+\n+void\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n+\t\t      unsigned int *in_decoded_options_count,\n+\t\t      int *in_added_libraries)\n+{\n+  unsigned int i, j;\n+\n+  /* The new argument list will be contained in this.  */\n+  struct cl_decoded_option *new_decoded_options;\n+\n+  /* \"-lc\" if it appears on the command line.  */\n+  const struct cl_decoded_option *saw_libc = 0;\n+\n+  /* An array used to flag each argument that needs a bit set for\n+     LANGSPEC or WITHLIBC.  */\n+  int *args;\n+\n+  /* True if we saw -static.  */\n+  int static_link = 0;\n+\n+  /* True if we should add -shared-libgcc to the command-line.  */\n+  int shared_libgcc = 1;\n+\n+  /* The total number of arguments with the new stuff.  */\n+  unsigned int argc;\n+\n+  /* The argument list.  */\n+  struct cl_decoded_option *decoded_options;\n+\n+  /* The number of libraries added in.  */\n+  int added_libraries;\n+\n+  /* The total number of arguments with the new stuff.  */\n+  int num_args = 1;\n+\n+  /* Whether the -o option was used.  */\n+  bool saw_opt_o = false;\n+\n+  /* The first input file with an extension of .rs.  */\n+  const char *first_rust_file = NULL;\n+\n+  argc = *in_decoded_options_count;\n+  decoded_options = *in_decoded_options;\n+  added_libraries = *in_added_libraries;\n+\n+  args = XCNEWVEC (int, argc);\n+\n+  for (i = 1; i < argc; i++)\n+    {\n+      const char *arg = decoded_options[i].arg;\n+\n+      switch (decoded_options[i].opt_index)\n+\t{\n+\tcase OPT_l:\n+\t  if (strcmp (arg, \"c\") == 0)\n+\t    args[i] |= WITHLIBC;\n+\t  break;\n+\n+\tcase OPT_o:\n+\t  saw_opt_o = true;\n+\t  break;\n+\n+\tcase OPT_static:\n+\t  static_link = 1;\n+\t  break;\n+\n+\tcase OPT_static_libgcc:\n+\t  shared_libgcc = 0;\n+\t  break;\n+\n+\tcase OPT_SPECIAL_input_file:\n+\t  if (first_rust_file == NULL)\n+\t    {\n+\t      int len;\n+\n+\t      len = strlen (arg);\n+\t      if (len > 3 && strcmp (arg + len - 3, \".rs\") == 0)\n+\t\tfirst_rust_file = arg;\n+\t    }\n+\t  else\n+\t    {\n+\t      // FIXME: ARTHUR: Do we want to error here? If there's already one\n+\t      // file?\n+\t      // How do we error here? Do we want to instead just handle that in\n+\t      // the session manager?\n+\t    }\n+\n+\t  break;\n+\t}\n+    }\n+\n+    /* There's no point adding -shared-libgcc if we don't have a shared\n+       libgcc.  */\n+#ifndef ENABLE_SHARED_LIBGCC\n+  shared_libgcc = 0;\n+#endif\n+\n+  /* Make sure to have room for the trailing NULL argument.  */\n+  num_args = argc + shared_libgcc * 5 + 10;\n+  new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n+\n+  i = 0;\n+  j = 0;\n+\n+  /* Copy the 0th argument, i.e., the name of the program itself.  */\n+  new_decoded_options[j++] = decoded_options[i++];\n+\n+  /* NOTE: We start at 1 now, not 0.  */\n+  while (i < argc)\n+    {\n+      new_decoded_options[j] = decoded_options[i];\n+\n+      if (!saw_libc && (args[i] & WITHLIBC))\n+\t{\n+\t  --j;\n+\t  saw_libc = &decoded_options[i];\n+\t}\n+\n+      if ((args[i] & SKIPOPT) != 0)\n+\t--j;\n+\n+      i++;\n+      j++;\n+    }\n+\n+  /* If we didn't see a -o option, add one.  This is because we need\n+     the driver to pass all .rs files to rust1.  Without a -o option the\n+     driver will invoke rust1 separately for each input file.  FIXME:\n+     This should probably use some other interface to force the driver\n+     to set combine_inputs.  */\n+  if (!saw_opt_o)\n+    {\n+      generate_option (OPT_o, \"a.out\", 1, CL_DRIVER, &new_decoded_options[j]);\n+      j++;\n+    }\n+\n+  if (saw_libc)\n+    new_decoded_options[j++] = *saw_libc;\n+  if (shared_libgcc && !static_link)\n+    generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n+\n+  *in_decoded_options_count = j;\n+  *in_decoded_options = new_decoded_options;\n+  *in_added_libraries = added_libraries;\n+}\n+\n+/* Called before linking.  Returns 0 on success and -1 on failure.  */\n+int\n+lang_specific_pre_link (void) /* Not used for Rust.  */\n+{\n+  return 0;\n+}\n+\n+/* Number of extra output files that lang_specific_pre_link may generate.  */\n+int lang_specific_extra_outfiles = 0; /* Not used for Rust.  */"}]}