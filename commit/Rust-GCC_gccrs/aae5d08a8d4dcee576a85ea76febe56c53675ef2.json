{"sha": "aae5d08a8d4dcee576a85ea76febe56c53675ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlNWQwOGE4ZDRkY2VlNTc2YTg1ZWE3NmZlYmU1NmM1MzY3NWVmMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T07:16:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T07:16:07Z"}, "message": "c++: Fix further protected_set_expr_location related -fcompare-debug issues [PR94441]\n\nMy recent protected_set_expr_location changes work well when\nthat function is called unconditionally, but as the testcase shows, the C++\nFE has a few spots that do:\n  if (!EXPR_HAS_LOCATION (stmt))\n    protected_set_expr_location (stmt, locus);\nor similar.  Now, if we have for -g0 stmt of some expression that can\nhave location and has != UNKNOWN_LOCATION, while -g instead has\na STATEMENT_LIST containing some DEBUG_BEGIN_STMTs + that expression with\nthat location, we don't call protected_set_expr_location in the -g0 case,\nbut do call it in the -g case, because on the STATEMENT_LIST\n!EXPR_HAS_LOCATION.\nThe following patch introduces a helper function which digs up the single\nexpression of a STATEMENT_LIST and uses that expression in the\nEXPR_HAS_LOCATION check (plus changes protected_set_expr_location to\nalso use that helper).\n\nOr do we want a further wrapper, perhaps C++ FE only, that would do this\nprotected_set_expr_location_if_unset (stmt, locus)?\n\n2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/94441\n\t* tree-iterator.h (expr_single): Declare.\n\t* tree-iterator.c (expr_single): New function.\n\t* tree.h (protected_set_expr_location_if_unset): Declare.\n\t* tree.c (protected_set_expr_location): Use expr_single.\n\t(protected_set_expr_location_if_unset): New function.\n\n\t* parser.c (cp_parser_omp_for_loop): Use\n\tprotected_set_expr_location_if_unset.\n\t* cp-gimplify.c (genericize_if_stmt, genericize_cp_loop): Likewise.\n\n\t* g++.dg/opt/pr94441.C: New test.", "tree": {"sha": "994c134f624ee1e684e02604cb4efa1d7080e7bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994c134f624ee1e684e02604cb4efa1d7080e7bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae5d08a8d4dcee576a85ea76febe56c53675ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae5d08a8d4dcee576a85ea76febe56c53675ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae5d08a8d4dcee576a85ea76febe56c53675ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae5d08a8d4dcee576a85ea76febe56c53675ef2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e276490953638f2e0694ea39dfa2818d6d2d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e276490953638f2e0694ea39dfa2818d6d2d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e276490953638f2e0694ea39dfa2818d6d2d7d"}], "stats": {"total": 123, "additions": 93, "deletions": 30}, "files": [{"sha": "fdb685a99d1f42d7a3ca4435977772bb1f0be4a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -1,3 +1,12 @@\n+2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/94441\n+\t* tree-iterator.h (expr_single): Declare.\n+\t* tree-iterator.c (expr_single): New function.\n+\t* tree.h (protected_set_expr_location_if_unset): Declare.\n+\t* tree.c (protected_set_expr_location): Use expr_single.\n+\t(protected_set_expr_location_if_unset): New function.\n+\n 2020-04-03  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/92264"}, {"sha": "14038ccfe90a897dc55f54f2e82f064273ac8c7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -1,5 +1,10 @@\n 2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/94441\n+\t* parser.c (cp_parser_omp_for_loop): Use\n+\tprotected_set_expr_location_if_unset.\n+\t* cp-gimplify.c (genericize_if_stmt, genericize_cp_loop): Likewise.\n+\n \tPR c++/94477\n \t* pt.c (tsubst_expr) <case OMP_MASTER>: Clear\n \tomp_parallel_combined_clauses."}, {"sha": "f326d71637b927cbafdccaf89338b21abbb35187", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -226,8 +226,7 @@ genericize_if_stmt (tree *stmt_p)\n     stmt = else_;\n   else\n     stmt = build3 (COND_EXPR, void_type_node, cond, then_, else_);\n-  if (!EXPR_HAS_LOCATION (stmt))\n-    protected_set_expr_location (stmt, locus);\n+  protected_set_expr_location_if_unset (stmt, locus);\n   *stmt_p = stmt;\n }\n \n@@ -248,8 +247,7 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   tree stmt_list = NULL;\n   tree debug_begin = NULL;\n \n-  if (EXPR_LOCATION (incr) == UNKNOWN_LOCATION)\n-    protected_set_expr_location (incr, start_locus);\n+  protected_set_expr_location_if_unset (incr, start_locus);\n \n   cp_walk_tree (&cond, cp_genericize_r, data, NULL);\n   cp_walk_tree (&incr, cp_genericize_r, data, NULL);"}, {"sha": "7e5921e039f18b3cb68ac1b910ae7357c95fa723", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -39149,8 +39149,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t    incr = cp_parser_omp_for_incr (parser, real_decl);\n \t  else\n \t    incr = cp_parser_expression (parser);\n-\t  if (!EXPR_HAS_LOCATION (incr))\n-\t    protected_set_expr_location (incr, input_location);\n+\t  protected_set_expr_location_if_unset (incr, input_location);\n \t}\n \n     parse_close_paren:"}, {"sha": "c08bc0d68f74232a51fdfa07e6cd62709f6e2e5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -1,5 +1,8 @@\n 2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/94441\n+\t* g++.dg/opt/pr94441.C: New test.\n+\n \tPR c++/94477\n \t* g++.dg/gomp/pr94477.C: New test.\n "}, {"sha": "07ce43e04dbf862113bf745f5fa7fac220a78ad8", "filename": "gcc/testsuite/g++.dg/opt/pr94441.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94441.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94441.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94441.C?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -0,0 +1,16 @@\n+// PR debug/94441\n+// { dg-do compile }\n+// { dg-options \"-O3 -fno-forward-propagate --param=max-cse-insns=0 -flive-range-shrinkage -std=c++17 -fcompare-debug\" }\n+\n+template <class,class> struct Same;\n+template <class T> struct Same<T,T> {};\n+\n+auto f()\n+{\n+  if constexpr (sizeof(int)==3)\n+    return 42;\n+  else\n+    return 42L;\n+}\n+\n+Same<decltype(f()), long> s;"}, {"sha": "81833b592b5e1fa6c60c2a3bdd921dda30dcf1de", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -354,4 +354,45 @@ expr_last (tree expr)\n   return expr;\n }\n \n+/* If EXPR is a STATEMENT_LIST containing just DEBUG_BEGIN_STMTs and\n+   a single other stmt, return that other stmt (recursively).\n+   If it is a STATEMENT_LIST containing no non-DEBUG_BEGIN_STMTs or\n+   multiple, return NULL_TREE.\n+   Otherwise return EXPR.  */\n+\n+tree\n+expr_single (tree expr)\n+{\n+  if (expr == NULL_TREE)\n+    return expr;\n+\n+  if (TREE_CODE (expr) == STATEMENT_LIST)\n+    {\n+      /* With -gstatement-frontiers we could have a STATEMENT_LIST with\n+\t DEBUG_BEGIN_STMT(s) and only a single other stmt, which with\n+\t -g wouldn't be present and we'd have that single other stmt\n+\t directly instead.  */\n+      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (expr);\n+      if (!n)\n+\treturn NULL_TREE;\n+      while (TREE_CODE (n->stmt) == DEBUG_BEGIN_STMT)\n+\t{\n+\t  n = n->next;\n+\t  if (!n)\n+\t    return NULL_TREE;\n+\t}\n+      expr = n->stmt;\n+      do\n+\t{\n+\t  n = n->next;\n+\t  if (!n)\n+\t    return expr_single (expr);\n+\t}\n+      while (TREE_CODE (n->stmt) == DEBUG_BEGIN_STMT);\n+      return NULL_TREE;\n+    }\n+\n+  return expr;\n+}\n+\n #include \"gt-tree-iterator.h\""}, {"sha": "b16ff130728709f303ca8cd05cc829beca818403", "filename": "gcc/tree-iterator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.h?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -119,5 +119,6 @@ extern void append_to_statement_list (tree, tree *);\n extern void append_to_statement_list_force (tree, tree *);\n extern tree expr_first (tree);\n extern tree expr_last (tree);\n+extern tree expr_single (tree);\n \n #endif /* GCC_TREE_ITERATOR_H  */"}, {"sha": "fa956da28a461b3cd3ade626250bf7d317183f39", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -5148,33 +5148,23 @@ protected_set_expr_location (tree t, location_t loc)\n     SET_EXPR_LOCATION (t, loc);\n   else if (t && TREE_CODE (t) == STATEMENT_LIST)\n     {\n-      /* With -gstatement-frontiers we could have a STATEMENT_LIST with\n-\t DEBUG_BEGIN_STMT(s) and only a single other stmt, which with\n-\t -g wouldn't be present and we'd have that single other stmt\n-\t directly instead.  */\n-      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (t);\n-      if (!n)\n-\treturn;\n-      while (TREE_CODE (n->stmt) == DEBUG_BEGIN_STMT)\n-\t{\n-\t  n = n->next;\n-\t  if (!n)\n-\t    return;\n-\t}\n-      tree t2 = n->stmt;\n-      do\n-\t{\n-\t  n = n->next;\n-\t  if (!n)\n-\t    {\n-\t      protected_set_expr_location (t2, loc);\n-\t      return;\n-\t    }\n-\t}\n-      while (TREE_CODE (n->stmt) == DEBUG_BEGIN_STMT);\n+      t = expr_single (t);\n+      if (t && CAN_HAVE_LOCATION_P (t))\n+\tSET_EXPR_LOCATION (t, loc);\n     }\n }\n \n+/* Like PROTECTED_SET_EXPR_LOCATION, but only do that if T has\n+   UNKNOWN_LOCATION.  */\n+\n+void\n+protected_set_expr_location_if_unset (tree t, location_t loc)\n+{\n+  t = expr_single (t);\n+  if (t && !EXPR_HAS_LOCATION (t))\n+    protected_set_expr_location (t, loc);\n+}\n+\n /* Data used when collecting DECLs and TYPEs for language data removal.  */\n \n class free_lang_data_d"}, {"sha": "66dfa8762562947ded74b2db5e6f62d96234d10f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae5d08a8d4dcee576a85ea76febe56c53675ef2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=aae5d08a8d4dcee576a85ea76febe56c53675ef2", "patch": "@@ -1203,6 +1203,7 @@ get_expr_source_range (tree expr)\n }\n \n extern void protected_set_expr_location (tree, location_t);\n+extern void protected_set_expr_location_if_unset (tree, location_t);\n \n extern tree maybe_wrap_with_location (tree, location_t);\n "}]}