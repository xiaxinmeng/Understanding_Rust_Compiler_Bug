{"sha": "bb00d0974ebe66ca9dc6621e68498396cd542b28", "node_id": "C_kwDOANBUbNoAKGJiMDBkMDk3NGViZTY2Y2E5ZGM2NjIxZTY4NDk4Mzk2Y2Q1NDJiMjg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T15:22:23Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-12T06:48:59Z"}, "message": "Add default relation_kind to floating point range-op entries.\n\nThe methods from which these derive all have a default relation_kind.\nThis patch just adds the default, to make it easier to write unit\ntests later.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc: Add relation_kind = VREL_VARYING to all\n\tmethods.", "tree": {"sha": "f0dad503e83a79574b4054a5f21e8e5bc75d2375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0dad503e83a79574b4054a5f21e8e5bc75d2375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb00d0974ebe66ca9dc6621e68498396cd542b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb00d0974ebe66ca9dc6621e68498396cd542b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb00d0974ebe66ca9dc6621e68498396cd542b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb00d0974ebe66ca9dc6621e68498396cd542b28/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9e793b6543745a5a3aae9032478c056f167c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9e793b6543745a5a3aae9032478c056f167c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9e793b6543745a5a3aae9032478c056f167c9c"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "71cdd112b8640f6d492c10cbbdb16b879fecffe9", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb00d0974ebe66ca9dc6621e68498396cd542b28/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb00d0974ebe66ca9dc6621e68498396cd542b28/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=bb00d0974ebe66ca9dc6621e68498396cd542b28", "patch": "@@ -318,14 +318,14 @@ class foperator_identity : public range_operator_float\n public:\n   bool fold_range (frange &r, tree type ATTRIBUTE_UNUSED,\n \t\t   const frange &op1, const frange &op2 ATTRIBUTE_UNUSED,\n-\t\t   relation_kind) const final override\n+\t\t   relation_kind = VREL_VARYING) const final override\n   {\n     r = op1;\n     return true;\n   }\n   bool op1_range (frange &r, tree type ATTRIBUTE_UNUSED,\n \t\t  const frange &lhs, const frange &op2 ATTRIBUTE_UNUSED,\n-\t\t  relation_kind) const final override\n+\t\t  relation_kind = VREL_VARYING) const final override\n   {\n     r = lhs;\n     return true;\n@@ -341,17 +341,17 @@ class foperator_equal : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return equal_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override\n+\t\t  relation_kind rel = VREL_VARYING) const final override\n   {\n     return op1_range (r, type, lhs, op1, rel);\n   }\n@@ -447,14 +447,14 @@ class foperator_not_equal : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind rel = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return not_equal_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_not_equal;\n \n bool\n@@ -548,17 +548,17 @@ class foperator_lt : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return lt_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_lt;\n \n bool\n@@ -663,17 +663,17 @@ class foperator_le : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind rel = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return le_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind rel = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind rel = VREL_VARYING) const final override;\n } fop_le;\n \n bool\n@@ -770,17 +770,17 @@ class foperator_gt : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return gt_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_gt;\n \n bool\n@@ -885,17 +885,17 @@ class foperator_ge : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   relation_kind op1_op2_relation (const irange &lhs) const final override\n   {\n     return ge_op1_op2_relation (lhs);\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_ge;\n \n bool\n@@ -996,13 +996,13 @@ class foperator_unordered : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override\n+\t\t  relation_kind rel = VREL_VARYING) const final override\n   {\n     return op1_range (r, type, lhs, op1, rel);\n   }\n@@ -1073,13 +1073,13 @@ class foperator_ordered : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override\n+\t\t  relation_kind rel = VREL_VARYING) const final override\n   {\n     return op1_range (r, type, lhs, op1, rel);\n   }\n@@ -1139,10 +1139,10 @@ class foperator_abs : public range_operator_float\n public:\n   bool fold_range (frange &r, tree type,\n \t\t   const frange &op1, const frange &,\n-\t\t   relation_kind) const final override;\n+\t\t   relation_kind = VREL_VARYING) const final override;\n   bool op1_range (frange &r, tree type,\n \t\t  const frange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind rel = VREL_VARYING) const final override;\n } fop_abs;\n \n bool\n@@ -1227,7 +1227,7 @@ class foperator_unordered_lt : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override\n+\t\t   relation_kind rel = VREL_VARYING) const final override\n   {\n     if (op1.known_isnan () || op2.known_isnan ())\n       {\n@@ -1256,7 +1256,7 @@ class foperator_unordered_le : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override\n+\t\t   relation_kind rel = VREL_VARYING) const final override\n   {\n     if (op1.known_isnan () || op2.known_isnan ())\n       {\n@@ -1277,10 +1277,10 @@ class foperator_unordered_le : public range_operator_float\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_unordered_le;\n \n bool\n@@ -1337,7 +1337,7 @@ class foperator_unordered_gt : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override\n+\t\t   relation_kind rel = VREL_VARYING) const final override\n   {\n     if (op1.known_isnan () || op2.known_isnan ())\n       {\n@@ -1358,10 +1358,10 @@ class foperator_unordered_gt : public range_operator_float\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_unordered_gt;\n \n bool\n@@ -1420,7 +1420,7 @@ class foperator_unordered_ge : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override\n+\t\t   relation_kind rel = VREL_VARYING) const final override\n   {\n     if (op1.known_isnan () || op2.known_isnan ())\n       {\n@@ -1441,10 +1441,10 @@ class foperator_unordered_ge : public range_operator_float\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n } fop_unordered_ge;\n \n bool\n@@ -1502,7 +1502,7 @@ class foperator_unordered_equal : public range_operator_float\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n-\t\t   relation_kind rel) const final override\n+\t\t   relation_kind rel = VREL_VARYING) const final override\n   {\n     if (op1.known_isnan () || op2.known_isnan ())\n       {\n@@ -1523,10 +1523,10 @@ class foperator_unordered_equal : public range_operator_float\n   }\n   bool op1_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op2,\n-\t\t  relation_kind rel) const final override;\n+\t\t  relation_kind = VREL_VARYING) const final override;\n   bool op2_range (frange &r, tree type,\n \t\t  const irange &lhs, const frange &op1,\n-\t\t  relation_kind rel) const final override\n+\t\t  relation_kind rel = VREL_VARYING) const final override\n   {\n     return op1_range (r, type, lhs, op1, rel);\n   }"}]}