{"sha": "df1204ec90c671971a8da2e0551db3ffe5a6e567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxMjA0ZWM5MGM2NzE5NzFhOGRhMmUwNTUxZGIzZmZlNWE2ZTU2Nw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-12-03T09:03:13Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-12-03T09:03:13Z"}, "message": "arm.h (LIBCALL_VALUE, [...]): Remove.\n\n\t* config/arm/arm.h (LIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove.\n\t* config/arm/arm-protos.h (aapcs_libcall_value): Remove.\n\t* config/arm/arm.c (TARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(arm_libcall_value_1, arm_function_value_regno_p): New function.\n\t(arm_function_value, arm_libcall_value): Use arm_libcall_value_1.\n\t(aapcs_libcall_value): Make static.\n\t(arm_libcall_value): Add static qualifier.\n\nFrom-SVN: r181965", "tree": {"sha": "0981b52cb17f1acf6ee3fd9f12df1590c2804a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0981b52cb17f1acf6ee3fd9f12df1590c2804a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df1204ec90c671971a8da2e0551db3ffe5a6e567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1204ec90c671971a8da2e0551db3ffe5a6e567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1204ec90c671971a8da2e0551db3ffe5a6e567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1204ec90c671971a8da2e0551db3ffe5a6e567/comments", "author": null, "committer": null, "parents": [{"sha": "2fd401c8f190f1fe43e51a7f726f6ed6119a1f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd401c8f190f1fe43e51a7f726f6ed6119a1f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd401c8f190f1fe43e51a7f726f6ed6119a1f96"}], "stats": {"total": 103, "additions": 71, "deletions": 32}, "files": [{"sha": "3b4bf139961db39dd90686c91f1569c66747c459", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df1204ec90c671971a8da2e0551db3ffe5a6e567", "patch": "@@ -1,3 +1,13 @@\n+2011-12-03  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/arm/arm.h (LIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove.\n+\t* config/arm/arm-protos.h (aapcs_libcall_value): Remove.\n+\t* config/arm/arm.c (TARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(arm_libcall_value_1, arm_function_value_regno_p): New function.\n+\t(arm_function_value, arm_libcall_value): Use arm_libcall_value_1.\n+\t(aapcs_libcall_value): Make static.\n+\t(arm_libcall_value): Add static qualifier.\n+\n 2011-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/51387"}, {"sha": "9907ea55d0ea59353ecf6fc7d17ea4a9059e30cf", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=df1204ec90c671971a8da2e0551db3ffe5a6e567", "patch": "@@ -168,7 +168,6 @@ extern bool arm_pad_arg_upward (enum machine_mode, const_tree);\n extern bool arm_pad_reg_upward (enum machine_mode, tree, int);\n #endif\n extern int arm_apply_result_size (void);\n-extern rtx aapcs_libcall_value (enum machine_mode);\n \n #endif /* RTX_CODE */\n "}, {"sha": "eaac1cfba89ead9d48e17b00602357d107058e95", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=df1204ec90c671971a8da2e0551db3ffe5a6e567", "patch": "@@ -147,8 +147,9 @@ static enum machine_mode arm_promote_function_mode (const_tree,\n \t\t\t\t\t\t    const_tree, int);\n static bool arm_return_in_memory (const_tree, const_tree);\n static rtx arm_function_value (const_tree, const_tree, bool);\n+static rtx arm_libcall_value_1 (enum machine_mode);\n static rtx arm_libcall_value (enum machine_mode, const_rtx);\n-\n+static bool arm_function_value_regno_p (const unsigned int);\n static void arm_internal_label (FILE *, const char *, unsigned long);\n static void arm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t tree);\n@@ -184,6 +185,7 @@ static void arm_function_arg_advance (cumulative_args_t, enum machine_mode,\n static unsigned int arm_function_arg_boundary (enum machine_mode, const_tree);\n static rtx aapcs_allocate_return_reg (enum machine_mode, const_tree,\n \t\t\t\t      const_tree);\n+static rtx aapcs_libcall_value (enum machine_mode);\n static int aapcs_select_return_coproc (const_tree, const_tree);\n \n #ifdef OBJECT_FORMAT_ELF\n@@ -383,6 +385,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_LIBCALL_VALUE\n #define TARGET_LIBCALL_VALUE arm_libcall_value\n \n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P arm_function_value_regno_p\n+\n #undef  TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK arm_output_mi_thunk\n #undef  TARGET_ASM_CAN_OUTPUT_MI_THUNK\n@@ -3592,7 +3597,7 @@ arm_function_value(const_tree type, const_tree func,\n \t}\n     }\n \n-  return LIBCALL_VALUE (mode);\n+  return arm_libcall_value_1 (mode);\n }\n \n static int\n@@ -3682,7 +3687,32 @@ arm_libcall_uses_aapcs_base (const_rtx libcall)\n   return libcall && htab_find (libcall_htab, libcall) != NULL;\n }\n \n-rtx\n+static rtx\n+arm_libcall_value_1 (enum machine_mode mode)\n+{\n+  if (TARGET_AAPCS_BASED)\n+    return aapcs_libcall_value (mode);\n+  else if (TARGET_32BIT\n+\t   && TARGET_HARD_FLOAT_ABI\n+\t   && TARGET_FPA\n+\t   && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+    return gen_rtx_REG (mode, FIRST_FPA_REGNUM);\n+  else if (TARGET_32BIT\n+\t   && TARGET_HARD_FLOAT_ABI\n+\t   && TARGET_MAVERICK\n+\t   && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+    return gen_rtx_REG (mode, FIRST_CIRRUS_FP_REGNUM);\n+  else if (TARGET_IWMMXT_ABI\n+\t   && arm_vector_mode_supported_p (mode))\n+    return gen_rtx_REG (mode, FIRST_IWMMXT_REGNUM);\n+  else\n+    return gen_rtx_REG (mode, ARG_REGISTER (1));\n+}\n+\n+/* Define how to find the value returned by a library function\n+   assuming the value has mode MODE.  */\n+\n+static rtx\n arm_libcall_value (enum machine_mode mode, const_rtx libcall)\n {\n   if (TARGET_AAPCS_BASED && arm_pcs_default != ARM_PCS_AAPCS\n@@ -3695,7 +3725,33 @@ arm_libcall_value (enum machine_mode mode, const_rtx libcall)\n \n     }\n \n-  return LIBCALL_VALUE (mode);\n+  return arm_libcall_value_1 (mode);\n+}\n+\n+/* Implement TARGET_FUNCTION_VALUE_REGNO_P.  */\n+\n+static bool\n+arm_function_value_regno_p (const unsigned int regno)\n+{\n+  if (regno == ARG_REGISTER (1)\n+      || (TARGET_32BIT\n+\t  && TARGET_AAPCS_BASED\n+\t  && TARGET_VFP\n+\t  && TARGET_HARD_FLOAT\n+\t  && regno == FIRST_VFP_REGNUM)\n+      || (TARGET_32BIT\n+\t  && TARGET_HARD_FLOAT_ABI\n+\t  && TARGET_MAVERICK\n+\t  && regno == FIRST_CIRRUS_FP_REGNUM)\n+      || (TARGET_IWMMXT_ABI\n+\t  && regno == FIRST_IWMMXT_REGNUM)\n+      || (TARGET_32BIT\n+\t  && TARGET_HARD_FLOAT_ABI\n+\t  && TARGET_FPA\n+\t  && regno == FIRST_FPA_REGNUM))\n+    return true;\n+\n+  return false;\n }\n \n /* Determine the amount of memory needed to store the possible return\n@@ -4513,7 +4569,7 @@ aapcs_allocate_return_reg (enum machine_mode mode, const_tree type,\n   return gen_rtx_REG (mode, R0_REGNUM);\n }\n \n-rtx\n+static rtx\n aapcs_libcall_value (enum machine_mode mode)\n {\n   if (BYTES_BIG_ENDIAN && ALL_FIXED_POINT_MODE_P (mode)"}, {"sha": "8a9ed1f510bb133c3efaf03fe410fb58625c3f40", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1204ec90c671971a8da2e0551db3ffe5a6e567/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=df1204ec90c671971a8da2e0551db3ffe5a6e567", "patch": "@@ -1348,32 +1348,6 @@ do {\t\t\t\t\t\t\t\t\t      \\\n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL)  (TARGET_ARM ? 4 : 0)\n \n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-#define LIBCALL_VALUE(MODE)  \t\t\t\t\t\t\\\n-  (TARGET_AAPCS_BASED ? aapcs_libcall_value (MODE)\t\t\t\\\n-   : (TARGET_32BIT && TARGET_HARD_FLOAT_ABI && TARGET_FPA\t\t\\\n-      && GET_MODE_CLASS (MODE) == MODE_FLOAT)\t\t\t\t\\\n-   ? gen_rtx_REG (MODE, FIRST_FPA_REGNUM)\t\t\t\t\\\n-   : TARGET_32BIT && TARGET_HARD_FLOAT_ABI && TARGET_MAVERICK\t\t\\\n-     && GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\\\n-   ? gen_rtx_REG (MODE, FIRST_CIRRUS_FP_REGNUM) \t\t\t\\\n-   : TARGET_IWMMXT_ABI && arm_vector_mode_supported_p (MODE)    \t\\\n-   ? gen_rtx_REG (MODE, FIRST_IWMMXT_REGNUM) \t\t\t\t\\\n-   : gen_rtx_REG (MODE, ARG_REGISTER (1)))\n-\n-/* 1 if REGNO is a possible register number for a function value.  */\n-#define FUNCTION_VALUE_REGNO_P(REGNO)\t\t\t\t\\\n-  ((REGNO) == ARG_REGISTER (1)\t\t\t\t\t\\\n-   || (TARGET_AAPCS_BASED && TARGET_32BIT \t\t\t\\\n-       && TARGET_VFP && TARGET_HARD_FLOAT\t\t\t\\\n-       && (REGNO) == FIRST_VFP_REGNUM)\t\t\t\t\\\n-   || (TARGET_32BIT && ((REGNO) == FIRST_CIRRUS_FP_REGNUM)\t\\\n-       && TARGET_HARD_FLOAT_ABI && TARGET_MAVERICK)\t\t\\\n-   || ((REGNO) == FIRST_IWMMXT_REGNUM && TARGET_IWMMXT_ABI)\t\\\n-   || (TARGET_32BIT && ((REGNO) == FIRST_FPA_REGNUM)\t\t\\\n-       && TARGET_HARD_FLOAT_ABI && TARGET_FPA))\n-\n /* Amount of memory needed for an untyped call to save all possible return\n    registers.  */\n #define APPLY_RESULT_SIZE arm_apply_result_size()"}]}