{"sha": "ac30c8b8d035cd9259040150f059f1cf3542f626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzMGM4YjhkMDM1Y2Q5MjU5MDQwMTUwZjA1OWYxY2YzNTQyZjYyNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-17T16:25:45Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-17T16:28:11Z"}, "message": "float.h: C2x *_IS_IEC_60559 macros\n\nC2x adds float.h macros that say whether float, double and long double\nmatch an IEC 60559 (IEEE 754) format and operations.  Add these\nmacros to GCC's float.h.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n\n\t* c-cppbuiltin.c (builtin_define_float_constants): Define\n\t\"*_IS_IEC_60559__\" macros.\n\ngcc/\n2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n\n\t* ginclude/float.h [__STDC_VERSION__ > 201710L] (FLT_IS_IEC_60559,\n\tDBL_IS_IEC_60559, LDBL_IS_IEC_60559): New macros.\n\ngcc/testsuite/\n2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n\n\t* gcc.dg/c11-float-6.c, gcc.dg/c2x-float-10.c: New tests.", "tree": {"sha": "74a267e1b58daaf2b2dc87c438f06a7bc7d88b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74a267e1b58daaf2b2dc87c438f06a7bc7d88b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac30c8b8d035cd9259040150f059f1cf3542f626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac30c8b8d035cd9259040150f059f1cf3542f626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac30c8b8d035cd9259040150f059f1cf3542f626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac30c8b8d035cd9259040150f059f1cf3542f626/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8895913273b97d07f9576f5eb497d39b78166daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8895913273b97d07f9576f5eb497d39b78166daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8895913273b97d07f9576f5eb497d39b78166daf"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "d35b087bdcc4639c66c351a45b4307fb92d84955", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=ac30c8b8d035cd9259040150f059f1cf3542f626", "patch": "@@ -317,6 +317,16 @@ builtin_define_float_constants (const char *name_prefix,\n       sprintf (name, \"__FP_FAST_FMA%s\", fma_suffix);\n       builtin_define_with_int_value (name, 1);\n     }\n+\n+  /* For C2x *_IS_IEC_60559.  0 means the type does not match an IEC\n+     60559 format, 1 that it matches a format but not operations and 2\n+     that it matches a format and operations (but may not conform to\n+     Annex F; we take this as meaning exceptions and rounding modes\n+     need not be supported).  */\n+  sprintf (name, \"__%s_IS_IEC_60559__\", name_prefix);\n+  builtin_define_with_int_value (name,\n+\t\t\t\t (fmt->ieee_bits == 0\n+\t\t\t\t  ? 0 : (fmt->round_towards_zero ? 1 : 2)));\n }\n \n /* Define __DECx__ constants for TYPE using NAME_PREFIX and SUFFIX. */"}, {"sha": "83c5ad55a530cae0699cb3d4fae17004c0739553", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=ac30c8b8d035cd9259040150f059f1cf3542f626", "patch": "@@ -248,6 +248,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DBL_NORM_MAX\t__DBL_NORM_MAX__\n #define LDBL_NORM_MAX\t__LDBL_NORM_MAX__\n \n+/* Whether each type matches an IEC 60559 format (1 for format, 2 for\n+   format and operations).  */\n+#undef FLT_IS_IEC_60559\n+#undef DBL_IS_IEC_60559\n+#undef LDBL_IS_IEC_60559\n+#define FLT_IS_IEC_60559\t__FLT_IS_IEC_60559__\n+#define DBL_IS_IEC_60559\t__DBL_IS_IEC_60559__\n+#define LDBL_IS_IEC_60559\t__LDBL_IS_IEC_60559__\n+\n /* Infinity in type float, or overflow if infinity not supported.  */\n #undef INFINITY\n #define INFINITY\t(__builtin_inff ())"}, {"sha": "b0381e57884e56867e6aa44d4b22998c3c0556a2", "filename": "gcc/testsuite/gcc.dg/c11-float-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-6.c?ref=ac30c8b8d035cd9259040150f059f1cf3542f626", "patch": "@@ -0,0 +1,17 @@\n+/* Test *_IS_IEC_60559 not defined for C11.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+#ifdef FLT_IS_IEC_60559\n+#error \"FLT_IS_IEC_60559 defined\"\n+#endif\n+\n+#ifdef DBL_IS_IEC_60559\n+#error \"DBL_IS_IEC_60559 defined\"\n+#endif\n+\n+#ifdef LDBL_IS_IEC_60559\n+#error \"LDBL_IS_IEC_60559 defined\"\n+#endif"}, {"sha": "7b53a6ab050307f1096de5a0480d9dd6ec5e643b", "filename": "gcc/testsuite/gcc.dg/c2x-float-10.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac30c8b8d035cd9259040150f059f1cf3542f626/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c?ref=ac30c8b8d035cd9259040150f059f1cf3542f626", "patch": "@@ -0,0 +1,33 @@\n+/* Test *_IS_IEC_60559 macros.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+#ifndef FLT_IS_IEC_60559\n+#error \"FLT_IS_IEC_60559 undefined\"\n+#endif\n+\n+#ifndef DBL_IS_IEC_60559\n+#error \"DBL_IS_IEC_60559 undefined\"\n+#endif\n+\n+#ifndef LDBL_IS_IEC_60559\n+#error \"LDBL_IS_IEC_60559 undefined\"\n+#endif\n+\n+#if defined __pdp11__ || defined __vax__\n+_Static_assert (FLT_IS_IEC_60559 == 0);\n+_Static_assert (DBL_IS_IEC_60559 == 0);\n+_Static_assert (LDBL_IS_IEC_60559 == 0);\n+#else\n+_Static_assert (FLT_IS_IEC_60559 == 2);\n+_Static_assert (DBL_IS_IEC_60559 == 2);\n+#if LDBL_MANT_DIG == 106 || LDBL_MIN_EXP == -16382\n+/* IBM long double and m68k extended format do not meet the definition\n+   of an IEC 60559 interchange or extended format.  */\n+_Static_assert (LDBL_IS_IEC_60559 == 0);\n+#else\n+_Static_assert (LDBL_IS_IEC_60559 == 2);\n+#endif\n+#endif"}]}