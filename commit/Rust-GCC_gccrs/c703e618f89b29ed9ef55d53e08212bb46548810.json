{"sha": "c703e618f89b29ed9ef55d53e08212bb46548810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwM2U2MThmODliMjllZDllZjU1ZDUzZTA4MjEyYmI0NjU0ODgxMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-06-28T18:17:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-06-28T18:17:47Z"}, "message": "fold-const.c (contains_label_1): Fix comments.\n\n\t* fold-const.c (contains_label_1): Fix comments.\n\t(contains_label_p): Do not walk trees multiple time.\n\nFrom-SVN: r149037", "tree": {"sha": "0f507166d92e93e0bc84d36f63f1c28d7123d5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f507166d92e93e0bc84d36f63f1c28d7123d5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c703e618f89b29ed9ef55d53e08212bb46548810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c703e618f89b29ed9ef55d53e08212bb46548810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c703e618f89b29ed9ef55d53e08212bb46548810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c703e618f89b29ed9ef55d53e08212bb46548810/comments", "author": null, "committer": null, "parents": [{"sha": "08a6b8e049f9935cc314a669b2120ff07cd7fbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a6b8e049f9935cc314a669b2120ff07cd7fbeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a6b8e049f9935cc314a669b2120ff07cd7fbeb"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "1c9a1c2959ffb84e14e84f36dde04effe2113812", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -1,3 +1,8 @@\n+2009-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (contains_label_1): Fix comments.\n+\t(contains_label_p): Do not walk trees multiple time.\n+\n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n         * config/i386/i386.h (enum ix86_fpcmp_strategy): New."}, {"sha": "39548e2792e3453c5d1d3fd6cf14ccd5776d935b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -13225,35 +13225,36 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n     } /* switch (code) */\n }\n \n-/* Callback for walk_tree, looking for LABEL_EXPR.\n-   Returns tree TP if it is LABEL_EXPR. Otherwise it returns NULL_TREE.\n-   Do not check the sub-tree of GOTO_EXPR.  */\n+/* Callback for walk_tree, looking for LABEL_EXPR.  Return *TP if it is\n+   a LABEL_EXPR; otherwise return NULL_TREE.  Do not check the subtrees\n+   of GOTO_EXPR.  */\n \n static tree\n-contains_label_1 (tree *tp,\n-                  int *walk_subtrees,\n-                  void *data ATTRIBUTE_UNUSED)\n+contains_label_1 (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n   switch (TREE_CODE (*tp))\n     {\n     case LABEL_EXPR:\n       return *tp;\n+\n     case GOTO_EXPR:\n       *walk_subtrees = 0;\n-    /* no break */\n+\n+      /* ... fall through ...  */\n+\n     default:\n       return NULL_TREE;\n     }\n }\n \n-/* Checks whether the sub-tree ST contains a label LABEL_EXPR which is\n-   accessible from outside the sub-tree. Returns NULL_TREE if no\n-   addressable label is found.  */\n+/* Return whether the sub-tree ST contains a label which is accessible from\n+   outside the sub-tree.  */\n \n static bool\n contains_label_p (tree st)\n {\n-  return (walk_tree (&st, contains_label_1 , NULL, NULL) != NULL_TREE);\n+  return\n+   (walk_tree_without_duplicates (&st, contains_label_1 , NULL) != NULL_TREE);\n }\n \n /* Fold a ternary expression of code CODE and type TYPE with operands"}, {"sha": "32acab383f7a65ddfb36dd749127b5361fbd0b03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -1,3 +1,10 @@\n+2009-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/overflow_sum2.adb: New test\n+\t* gnat.dg/namet.ads: New helper.\n+\n+\t* gnat.dg/test_overflow_sum.adb: Rename to overflow_sum.adb.\n+\n 2009-06-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34112"}, {"sha": "01e4002fbcf1f6ca6559012ec116c68722b23326", "filename": "gcc/testsuite/gnat.dg/namet.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnamet.ads?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -0,0 +1,11 @@\n+package Namet is\n+\n+  Hash_Num : constant Integer := 2**12;\n+\n+  subtype Hash_Index_Type is Integer range 0 .. Hash_Num - 1;\n+\n+  Name_Buffer : String (1 .. 16*1024);\n+\n+  Name_Len : Natural;\n+\n+end Namet;"}, {"sha": "56d8fe99ec9edf2ccb6a5ef852b4ab776a763c99", "filename": "gcc/testsuite/gnat.dg/overflow_sum.adb", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum.adb?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -1,8 +1,8 @@\n --  { dg-do run }\n --  { dg-options \"-gnato\" }\n \n-procedure test_overflow_sum is\n-   pragma Unsuppress (Overflow_Check);\n+procedure Overflow_Sum is\n+\n    function sum (a, b, c, d, e, f, g, h, i, j, k, l, m,\n                  n, o, p, q, r, s, t, u, v, w, x, y, z : Integer)\n                  return Integer\n@@ -42,4 +42,4 @@ begin\n    exception\n       when Constraint_Error => null;\n    end;\n-end test_overflow_sum;\n+end;", "previous_filename": "gcc/testsuite/gnat.dg/test_overflow_sum.adb"}, {"sha": "8374eee13227e1a4b2e11470e2594de819dd0f2d", "filename": "gcc/testsuite/gnat.dg/overflow_sum2.adb", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c703e618f89b29ed9ef55d53e08212bb46548810/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum2.adb?ref=c703e618f89b29ed9ef55d53e08212bb46548810", "patch": "@@ -0,0 +1,32 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnato\" }\n+\n+with Namet; use Namet;\n+\n+function Overflow_Sum2 return Hash_Index_Type is\n+\n+  Even_Name_Len : Integer;\n+\n+begin\n+\n+  if Name_Len > 12 then\n+    Even_Name_Len := (Name_Len) / 2 * 2;\n+\n+  return ((((((((((((\n+    Character'Pos (Name_Buffer (01))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len - 10))) * 2 +\n+    Character'Pos (Name_Buffer (03))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len - 08))) * 2 +\n+    Character'Pos (Name_Buffer (05))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len - 06))) * 2 +\n+    Character'Pos (Name_Buffer (07))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len - 04))) * 2 +\n+    Character'Pos (Name_Buffer (09))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len - 02))) * 2 +\n+    Character'Pos (Name_Buffer (11))) * 2 +\n+    Character'Pos (Name_Buffer (Even_Name_Len))) mod Hash_Num;\n+  end if;\n+\n+  return 0;\n+\n+end;"}]}