{"sha": "33558beb6ade3caee5803e93001d625d82877730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1NThiZWI2YWRlM2NhZWU1ODAzZTkzMDAxZDYyNWQ4Mjg3NzczMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T23:07:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T23:07:52Z"}, "message": "(fold...\n\n(fold, case NOP_EXPR): Delete a pair of conversions back to the\noriginal type when intermediate type is at least as wide.\n\nFrom-SVN: r5046", "tree": {"sha": "c76ae0d85d486aedb7c9a9d27cd9953742a42628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76ae0d85d486aedb7c9a9d27cd9953742a42628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33558beb6ade3caee5803e93001d625d82877730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33558beb6ade3caee5803e93001d625d82877730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33558beb6ade3caee5803e93001d625d82877730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33558beb6ade3caee5803e93001d625d82877730/comments", "author": null, "committer": null, "parents": [{"sha": "819126a60788afcdf2beafcf26ebf2127b9eb518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819126a60788afcdf2beafcf26ebf2127b9eb518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819126a60788afcdf2beafcf26ebf2127b9eb518"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "e3eab5b276ea3e787a55267134424ab6e2c64124", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33558beb6ade3caee5803e93001d625d82877730/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33558beb6ade3caee5803e93001d625d82877730/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=33558beb6ade3caee5803e93001d625d82877730", "patch": "@@ -3342,6 +3342,22 @@ fold (expr)\n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n       /* Other kinds of FIX are not handled properly by fold_convert.  */\n+\n+      /* In addition to the cases of two conversions in a row \n+\t handled below, if we are converting something to its own\n+\t type via an object of identical or wider precision, neither\n+\t conversion is needed.  */\n+      if ((TREE_CODE (TREE_OPERAND (t, 0)) == NOP_EXPR\n+\t   || TREE_CODE (TREE_OPERAND (t, 0)) == CONVERT_EXPR)\n+\t  && TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 0), 0)) == TREE_TYPE (t)\n+\t  && ((INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t       && INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\t      || (FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t\t  && FLOAT_TYPE_P (TREE_TYPE (t))))\n+\t  && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t      >= TYPE_PRECISION (TREE_TYPE (t))))\n+\treturn TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n+\n       /* Two conversions in a row are not needed unless:\n \t - the intermediate type is narrower than both initial and final, or\n \t - the intermediate type and innermost type differ in signedness,"}]}