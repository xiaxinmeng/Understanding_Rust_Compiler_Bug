{"sha": "a3b99b84609af310c72b4d6221621f5b63a3c169", "node_id": "C_kwDOANBUbNoAKGEzYjk5Yjg0NjA5YWYzMTBjNzJiNGQ2MjIxNjIxZjViNjNhM2MxNjk", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2023-01-14T17:51:55Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2023-01-14T17:54:30Z"}, "message": "[aarch64] Fold ldr+dup to ld1rq for little endian targets.\n\ngcc/ChangeLog:\n\t* config/aarch64/aarch64-sve.md (aarch64_vec_duplicate_vq<mode>_le):\n\tChange to define_insn_and_split to fold ldr+dup to ld1rq.\n\t* config/aarch64/predicates.md (aarch64_sve_dup_ld1rq_operand): New.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/aarch64/sve/acle/general/pr96463-2.c: Adjust.", "tree": {"sha": "49bdd3dd9dcad1a6b8fff0b20cae0238196df0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49bdd3dd9dcad1a6b8fff0b20cae0238196df0db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b99b84609af310c72b4d6221621f5b63a3c169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b99b84609af310c72b4d6221621f5b63a3c169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b99b84609af310c72b4d6221621f5b63a3c169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b99b84609af310c72b4d6221621f5b63a3c169/comments", "author": null, "committer": null, "parents": [{"sha": "9afc914809ca90d03a9a8f53c439ebf4c62cf544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9afc914809ca90d03a9a8f53c439ebf4c62cf544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9afc914809ca90d03a9a8f53c439ebf4c62cf544"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "4548375b8d68ae50717578ee8cd631f0ce2768d5", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a3b99b84609af310c72b4d6221621f5b63a3c169", "patch": "@@ -2533,14 +2533,34 @@\n )\n \n ;; Duplicate an Advanced SIMD vector to fill an SVE vector (LE version).\n-(define_insn \"@aarch64_vec_duplicate_vq<mode>_le\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w\")\n+\n+(define_insn_and_split \"@aarch64_vec_duplicate_vq<mode>_le\"\n+  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w, w\")\n \t(vec_duplicate:SVE_FULL\n-\t  (match_operand:<V128> 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:<V128> 1 \"aarch64_sve_dup_ld1rq_operand\" \"w, UtQ\")))\n+   (clobber (match_scratch:VNx16BI 2 \"=X, Upl\"))]\n   \"TARGET_SVE && !BYTES_BIG_ENDIAN\"\n   {\n-    operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\n-    return \"dup\\t%0.q, %1.q[0]\";\n+    switch (which_alternative)\n+      {\n+\tcase 0:\n+\t  operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\n+\t  return \"dup\\t%0.q, %1.q[0]\";\n+\tcase 1:\n+\t  return \"#\";\n+\tdefault:\n+\t  gcc_unreachable ();\n+      }\n+  }\n+  \"&& MEM_P (operands[1])\"\n+  [(const_int 0)]\n+  {\n+    if (GET_CODE (operands[2]) == SCRATCH)\n+      operands[2] = gen_reg_rtx (VNx16BImode);\n+    emit_move_insn (operands[2], CONSTM1_RTX (VNx16BImode));\n+    rtx gp = gen_lowpart (<VPRED>mode, operands[2]);\n+    emit_insn (gen_aarch64_sve_ld1rq<mode> (operands[0], operands[1], gp));\n+    DONE;\n   }\n )\n "}, {"sha": "6062f37025eacc761e201b73d3a97e66bf3ddaf5", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a3b99b84609af310c72b4d6221621f5b63a3c169", "patch": "@@ -676,6 +676,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_ld1r_operand\")))\n \n+(define_predicate \"aarch64_sve_dup_ld1rq_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"aarch64_sve_ld1rq_operand\")))\n+\n (define_predicate \"aarch64_sve_ptrue_svpattern_immediate\"\n   (and (match_code \"const\")\n        (match_test \"aarch64_sve_ptrue_svpattern_p (op, NULL)\")))"}, {"sha": "93daf23c25b3f636ae15955c4ee9c3e1fa352c67", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr96463-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96463-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b99b84609af310c72b4d6221621f5b63a3c169/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96463-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96463-2.c?ref=a3b99b84609af310c72b4d6221621f5b63a3c169", "patch": "@@ -26,4 +26,5 @@ TEST(svfloat64_t, float64_t, f64)\n \n TEST(svbfloat16_t, bfloat16_t, bf16)\n \n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.q, z[0-9]+\\.q\\[0\\]} 12 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tld1rq} 12 } } */"}]}