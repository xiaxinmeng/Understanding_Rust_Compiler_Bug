{"sha": "3eefa646f4c90689953d63d6ef861692a858fd61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlZmE2NDZmNGM5MDY4OTk1M2Q2M2Q2ZWY4NjE2OTJhODU4ZmQ2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-12T21:30:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-12T21:30:56Z"}, "message": "gimple-ssa-sprintf.c (try_substitute_return_value): Remove info.nowrite calls with no lhs that can't throw.\n\n\t* gimple-ssa-sprintf.c (try_substitute_return_value): Remove\n\tinfo.nowrite calls with no lhs that can't throw.  Return bool\n\twhether gsi_remove has been called or not.\n\t(pass_sprintf_length::handle_gimple_call): Return bool whether\n\ttry_substitute_return_value called gsi_remove.  Formatting fix.\n\t(pass_sprintf_length::execute): Don't use gsi_remove if\n\thandle_gimple_call returned true.\n\n\t* gcc.dg/tree-ssa/builtin-snprintf-1.c: New test.\n\nFrom-SVN: r244384", "tree": {"sha": "e30ea92b84e0d2c031c221ebdc2c4f8029c6bb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30ea92b84e0d2c031c221ebdc2c4f8029c6bb83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eefa646f4c90689953d63d6ef861692a858fd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefa646f4c90689953d63d6ef861692a858fd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eefa646f4c90689953d63d6ef861692a858fd61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefa646f4c90689953d63d6ef861692a858fd61/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b34f29a19deb8c59bd151d50435e28472f1d23ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34f29a19deb8c59bd151d50435e28472f1d23ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34f29a19deb8c59bd151d50435e28472f1d23ae"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "5ea3fd9dbbb55ec810c2990c52f26dc6bbdd53ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eefa646f4c90689953d63d6ef861692a858fd61", "patch": "@@ -1,5 +1,13 @@\n 2017-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimple-ssa-sprintf.c (try_substitute_return_value): Remove\n+\tinfo.nowrite calls with no lhs that can't throw.  Return bool\n+\twhether gsi_remove has been called or not.\n+\t(pass_sprintf_length::handle_gimple_call): Return bool whether\n+\ttry_substitute_return_value called gsi_remove.  Formatting fix.\n+\t(pass_sprintf_length::execute): Don't use gsi_remove if\n+\thandle_gimple_call returned true.\n+\n \tPR bootstrap/79069\n \t* cfgrtl.c (rtl_tidy_fallthru_edge): For any_uncondjump_p that can't\n \tbe removed due to side-effects, don't remove following barrier nor"}, {"sha": "a9b730bb3dc978a5dc3f4ed3f8a62a2f75d7b2c3", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=3eefa646f4c90689953d63d6ef861692a858fd61", "patch": "@@ -128,7 +128,7 @@ class pass_sprintf_length : public gimple_opt_pass\n       fold_return_value = param;\n     }\n \n-  void handle_gimple_call (gimple_stmt_iterator*);\n+  bool handle_gimple_call (gimple_stmt_iterator *);\n \n   struct call_info;\n   bool compute_format_length (call_info &, format_result *);\n@@ -2738,9 +2738,11 @@ get_destination_size (tree dest)\n    described by INFO, substitute the result for the return value of\n    the call.  The result is suitable if the number of bytes it represents\n    is known and exact.  A result that isn't suitable for substitution may\n-   have its range set to the range of return values, if that is known.  */\n+   have its range set to the range of return values, if that is known.\n+   Return true if the call is removed and gsi_next should not be performed\n+   in the caller.  */\n \n-static void\n+static bool\n try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t\t\t     const pass_sprintf_length::call_info &info,\n \t\t\t     const format_result &res)\n@@ -2800,6 +2802,24 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t\t   res.constant ? \"constant\" : \"variable\");\n \t}\n     }\n+  else if (lhs == NULL_TREE\n+\t   && info.nowrite\n+\t   && !stmt_ends_bb_p (info.callstmt))\n+    {\n+      /* Remove the call to the bounded function with a zero size\n+\t (e.g., snprintf(0, 0, \"%i\", 123)) if there is no lhs.  */\n+      unlink_stmt_vdef (info.callstmt);\n+      gsi_remove (gsi, true);\n+      if (dump_file)\n+\t{\n+\t  location_t callloc = gimple_location (info.callstmt);\n+\t  fprintf (dump_file, \"On line %i removing \",\n+\t\t   LOCATION_LINE (callloc));\n+\t  print_generic_expr (dump_file, info.func, dump_flags);\n+\t  fprintf (dump_file, \" call.\\n\");\n+\t}\n+      return true;\n+    }\n   else\n     {\n       unsigned HOST_WIDE_INT maxbytes;\n@@ -2855,19 +2875,22 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t\t     inbounds, (unsigned long)res.number_chars - 1, ign);\n \t}\n     }\n+\n+  return false;\n }\n \n /* Determine if a GIMPLE CALL is to one of the sprintf-like built-in\n-   functions and if so, handle it.  */\n+   functions and if so, handle it.  Return true if the call is removed\n+   and gsi_next should not be performed in the caller.  */\n \n-void\n+bool\n pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n {\n   call_info info = call_info ();\n \n   info.callstmt = gsi_stmt (*gsi);\n   if (!gimple_call_builtin_p (info.callstmt, BUILT_IN_NORMAL))\n-    return;\n+    return false;\n \n   info.func = gimple_call_fndecl (info.callstmt);\n   info.fncode = DECL_FUNCTION_CODE (info.func);\n@@ -2958,7 +2981,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n       break;\n \n     default:\n-      return;\n+      return false;\n     }\n \n   /* The first argument is a pointer to the destination.  */\n@@ -3022,11 +3045,9 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n     }\n \n   if (idx_objsize != HOST_WIDE_INT_M1U)\n-    {\n-      if (tree size = gimple_call_arg (info.callstmt, idx_objsize))\n-\t  if (tree_fits_uhwi_p (size))\n-\t    objsize = tree_to_uhwi (size);\n-    }\n+    if (tree size = gimple_call_arg (info.callstmt, idx_objsize))\n+      if (tree_fits_uhwi_p (size))\n+\tobjsize = tree_to_uhwi (size);\n \n   if (info.bounded && !dstsize)\n     {\n@@ -3051,7 +3072,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t  location_t loc = gimple_location (info.callstmt);\n \t  warning_at (EXPR_LOC_OR_LOC (dstptr, loc),\n \t\t      info.warnopt (), \"null destination pointer\");\n-\t  return;\n+\t  return false;\n \t}\n \n       /* Set the object size to the smaller of the two arguments\n@@ -3080,12 +3101,12 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n       location_t loc = gimple_location (info.callstmt);\n       warning_at (EXPR_LOC_OR_LOC (info.format, loc),\n \t\t  info.warnopt (), \"null format string\");\n-      return;\n+      return false;\n     }\n \n   info.fmtstr = get_format_string (info.format, &info.fmtloc);\n   if (!info.fmtstr)\n-    return;\n+    return false;\n \n   /* The result is the number of bytes output by the formatted function,\n      including the terminating NUL.  */\n@@ -3101,7 +3122,8 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n       && optimize > 0\n       && flag_printf_return_value\n       && (!flag_rounding_math || !res.floating))\n-    try_substitute_return_value (gsi, info, res);\n+    return try_substitute_return_value (gsi, info, res);\n+  return false;\n }\n \n /* Execute the pass for function FUN.  */\n@@ -3112,14 +3134,17 @@ pass_sprintf_length::execute (function *fun)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n-      for (gimple_stmt_iterator si = gsi_start_bb (bb); !gsi_end_p (si);\n-\t   gsi_next (&si))\n+      for (gimple_stmt_iterator si = gsi_start_bb (bb); !gsi_end_p (si); )\n \t{\n \t  /* Iterate over statements, looking for function calls.  */\n \t  gimple *stmt = gsi_stmt (si);\n \n-\t  if (is_gimple_call (stmt))\n-\t    handle_gimple_call (&si);\n+\t  if (is_gimple_call (stmt) && handle_gimple_call (&si))\n+\t    /* If handle_gimple_call returns true, the iterator is\n+\t       already pointing to the next statement.  */\n+\t    continue;\n+\n+\t  gsi_next (&si);\n \t}\n     }\n "}, {"sha": "fdbeeb54c727531a5f80c20349818de2f5b8f4eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3eefa646f4c90689953d63d6ef861692a858fd61", "patch": "@@ -1,3 +1,7 @@\n+2017-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-snprintf-1.c: New test.\n+\n 2017-01-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/79051"}, {"sha": "202e009d7cfcc06830e0d1502087cbc8fc8bba9e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eefa646f4c90689953d63d6ef861692a858fd61/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-1.c?ref=3eefa646f4c90689953d63d6ef861692a858fd61", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fprintf-return-value -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_snprintf\" \"optimized\"} } */\n+\n+int\n+foo (void)\n+{\n+  int a = __builtin_snprintf (0, 0, \"%s\", \"abcdefgh\");\n+  return a;\n+}\n+\n+void\n+bar (void)\n+{\n+  __builtin_snprintf (0, 0, \"%s\", \"abcdefgh\");\n+}"}]}