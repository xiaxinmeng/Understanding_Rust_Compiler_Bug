{"sha": "f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4YTZhZTQ0ZGIyMDE0NWYwZDNkZWVjZjlhMGZmNDYxNTNiN2NiNA==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2015-01-22T10:55:32Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-01-22T10:55:32Z"}, "message": "re PR driver/64690 (-freport-bug issue with comments)\n\n2015-01-22  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\tPR driver/64690\n\t* gcc.c (insert_comments): New function.\n\t(try_generate_repro): Call it.\n\t(append_text): Removed.\n\nFrom-SVN: r219990", "tree": {"sha": "47ba3178546f5353e4a374eccefb3e4ced072bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ba3178546f5353e4a374eccefb3e4ced072bb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4/comments", "author": null, "committer": null, "parents": [{"sha": "0c3068e0068c5850939c83c6719e8905db0342b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3068e0068c5850939c83c6719e8905db0342b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3068e0068c5850939c83c6719e8905db0342b1"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "7a1c6e567f1320be9e898d4cd07fc6634e2f4a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "patch": "@@ -1,3 +1,10 @@\n+2015-01-22  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR driver/64690\n+\t* gcc.c (insert_comments): New function.\n+\t(try_generate_repro): Call it.\n+\t(append_text): Removed.\n+\n 2015-01-22  Richard Biener  <rguenther@suse.de>\n \n \t* ipa-inline.c (can_inline_edge_p): Disable inlining of edges"}, {"sha": "c1e5ca5037657ea133d5f7952d73b44911bf9bb8", "filename": "gcc/gcc.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78a6ae44db20145f0d3deecf9a0ff46153b7cb4/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f78a6ae44db20145f0d3deecf9a0ff46153b7cb4", "patch": "@@ -6487,6 +6487,29 @@ run_attempt (const char **new_argv, const char *out_temp,\n   return status;\n }\n \n+/* This routine reads lines from IN file, adds C++ style comments\n+   at the begining of each line and writes result into OUT.  */\n+\n+static void\n+insert_comments (const char *file_in, const char *file_out)\n+{\n+  FILE *in = fopen (file_in, \"rb\");\n+  FILE *out = fopen (file_out, \"wb\");\n+  char line[256];\n+\n+  bool add_comment = true;\n+  while (fgets (line, sizeof (line), in))\n+    {\n+      if (add_comment)\n+\tfputs (\"// \", out);\n+      fputs (line, out);\n+      add_comment = strchr (line, '\\n') != NULL;\n+    }\n+\n+  fclose (in);\n+  fclose (out);\n+}\n+\n /* This routine adds preprocessed source code into the given ERR_FILE.\n    To do this, it adds \"-E\" to NEW_ARGV and execute RUN_ATTEMPT routine to\n    add information in report file.  RUN_ATTEMPT should return\n@@ -6523,19 +6546,6 @@ do_report_bug (const char **new_argv, const int nargs,\n     }\n }\n \n-/* Append string STR to file FILE.  */\n-\n-static void\n-append_text (char *file, const char *str)\n-{\n-  int fd = open (file, O_RDWR | O_APPEND);\n-  if (fd < 0)\n-    return;\n-\n-  write (fd, str, strlen (str));\n-  close (fd);\n-}\n-\n /* Try to reproduce ICE.  If bug is reproducible, generate report .err file\n    containing GCC configuration, backtrace, compiler's command line options\n    and preprocessed source code.  */\n@@ -6598,16 +6608,10 @@ try_generate_repro (const char **argv)\n \t  emit_system_info = 1;\n \t}\n \n-      if (emit_system_info)\n-\tappend_text (temp_stderr_files[attempt], \"/*\\n\");\n-\n       status = run_attempt (new_argv, temp_stdout_files[attempt],\n \t\t\t    temp_stderr_files[attempt], emit_system_info,\n \t\t\t    append);\n \n-      if (emit_system_info)\n-\tappend_text (temp_stderr_files[attempt], \"*/\\n\");\n-\n       if (status != ATTEMPT_STATUS_ICE)\n \t{\n \t  fnotice (stderr, \"The bug is not reproducible, so it is\"\n@@ -6619,11 +6623,17 @@ try_generate_repro (const char **argv)\n   if (!check_repro (temp_stdout_files, temp_stderr_files))\n     goto out;\n \n-  /* In final attempt we append compiler options and preprocesssed code to last\n-     generated .err file with configuration and backtrace.  */\n-  do_report_bug (new_argv, nargs,\n-\t\t &temp_stderr_files[RETRY_ICE_ATTEMPTS - 1],\n-\t\t &temp_stdout_files[RETRY_ICE_ATTEMPTS - 1]);\n+  {\n+    /* Insert commented out backtrace into report file.  */\n+    char **stderr_commented = &temp_stdout_files[RETRY_ICE_ATTEMPTS - 1];\n+    insert_comments (temp_stderr_files[RETRY_ICE_ATTEMPTS - 1],\n+\t\t     *stderr_commented);\n+\n+    /* In final attempt we append compiler options and preprocesssed code to last\n+       generated .out file with configuration and backtrace.  */\n+    char **output = &temp_stdout_files[RETRY_ICE_ATTEMPTS - 1];\n+    do_report_bug (new_argv, nargs, stderr_commented, output);\n+  }\n \n out:\n   for (i = 0; i < RETRY_ICE_ATTEMPTS * 2; i++)"}]}