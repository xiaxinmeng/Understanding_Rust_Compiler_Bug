{"sha": "8591575ff8d7959e829fd13eb171aefe2a60bc19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5MTU3NWZmOGQ3OTU5ZTgyOWZkMTNlYjE3MWFlZmUyYTYwYmMxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-09T12:49:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-09T12:49:23Z"}, "message": "typeck.c (build_class_member_access_expr): Move -Winvalid-offsetof code...\n\n\t* typeck.c (build_class_member_access_expr): Move\n\t-Winvalid-offsetof code...\n\t* semantics.c (finish_offsetof): ...here.\n\t* parser.c (cp_parser_builtin_offsetof): Remember the location of\n\tthe type argument.\n\t* pt.c (tsubst_copy_and_build) [OFFSETOF_EXPR]: Preserve it.\n\nFrom-SVN: r215070", "tree": {"sha": "eec8d8211d7808205af1ac2ac89e273765de0a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec8d8211d7808205af1ac2ac89e273765de0a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8591575ff8d7959e829fd13eb171aefe2a60bc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8591575ff8d7959e829fd13eb171aefe2a60bc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8591575ff8d7959e829fd13eb171aefe2a60bc19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8591575ff8d7959e829fd13eb171aefe2a60bc19/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97f518b3fe714bb026f8070aa475e86ddbcca509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f518b3fe714bb026f8070aa475e86ddbcca509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f518b3fe714bb026f8070aa475e86ddbcca509"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "ae54a68b73a47c219d0dca8d829601f6a48591f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -1,5 +1,12 @@\n 2014-09-08  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (build_class_member_access_expr): Move\n+\t-Winvalid-offsetof code...\n+\t* semantics.c (finish_offsetof): ...here.\n+\t* parser.c (cp_parser_builtin_offsetof): Remember the location of\n+\tthe type argument.\n+\t* pt.c (tsubst_copy_and_build) [OFFSETOF_EXPR]: Preserve it.\n+\n \tPR c++/62255\n \t* pt.c (instantiate_decl): Handle recursive instantiation of\n \tstatic data member."}, {"sha": "19f52329f25fd5d79ee9bb9af6c3cac0418e6993", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -5879,7 +5879,7 @@ extern tree finish_underlying_type\t        (tree);\n extern tree calculate_bases                     (tree);\n extern tree finish_bases                        (tree, bool);\n extern tree calculate_direct_bases              (tree);\n-extern tree finish_offsetof\t\t\t(tree);\n+extern tree finish_offsetof\t\t\t(tree, location_t);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);\n extern void emit_associated_thunks\t\t(tree);"}, {"sha": "c696fd2e6be3135bca3385f35011e3470f69ffb4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -8577,6 +8577,7 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   /* Consume the opening `('.  */\n   cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n   /* Parse the type-id.  */\n+  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n   type = cp_parser_type_id (parser);\n   /* Look for the `,'.  */\n   cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n@@ -8633,9 +8634,12 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   /* If we're processing a template, we can't finish the semantics yet.\n      Otherwise we can fold the entire expression now.  */\n   if (processing_template_decl)\n-    expr = build1 (OFFSETOF_EXPR, size_type_node, expr);\n+    {\n+      expr = build1 (OFFSETOF_EXPR, size_type_node, expr);\n+      SET_EXPR_LOCATION (expr, loc);\n+    }\n   else\n-    expr = finish_offsetof (expr);\n+    expr = finish_offsetof (expr, loc);\n \n  failure:\n   parser->integral_constant_expression_p = save_ice_p;"}, {"sha": "44569e23b1f6ccfc0c49b8aca04a9aedb6513900", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -15440,7 +15440,8 @@ tsubst_copy_and_build (tree t,\n       }\n \n     case OFFSETOF_EXPR:\n-      RETURN (finish_offsetof (RECUR (TREE_OPERAND (t, 0))));\n+      RETURN (finish_offsetof (RECUR (TREE_OPERAND (t, 0)),\n+\t\t\t       EXPR_LOCATION (t)));\n \n     case TRAIT_EXPR:\n       {"}, {"sha": "aee92ddc1d0adac69600d79fd05c94e9b7f314b6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -3814,7 +3814,7 @@ finish_bases (tree type, bool direct)\n    fold_offsetof.  */\n \n tree\n-finish_offsetof (tree expr)\n+finish_offsetof (tree expr, location_t loc)\n {\n   if (TREE_CODE (expr) == PSEUDO_DTOR_EXPR)\n     {\n@@ -3846,6 +3846,13 @@ finish_offsetof (tree expr)\n       tree object = TREE_OPERAND (expr, 0);\n       if (!complete_type_or_else (TREE_TYPE (object), object))\n \treturn error_mark_node;\n+      if (warn_invalid_offsetof\n+\t  && CLASS_TYPE_P (TREE_TYPE (object))\n+\t  && CLASSTYPE_NON_STD_LAYOUT (TREE_TYPE (object))\n+\t  && cp_unevaluated_operand == 0)\n+\tpedwarn (loc, OPT_Winvalid_offsetof,\n+\t\t \"offsetof within non-standard-layout type %qT is undefined\",\n+\t\t TREE_TYPE (object));\n     }\n   return fold_offsetof (expr);\n }"}, {"sha": "aa82f1c0a78fc4726d02dc5079d2726de4e0d7f6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -2359,10 +2359,8 @@ build_class_member_access_expr (tree object, tree member,\n \t    {\n \t      if (complain & tf_error)\n \t\t{\n-\t\t  error (\"invalid access to non-static data member %qD of \"\n-\t\t\t \"NULL object\",\n-\t\t\t member);\n-\t\t  error (\"(perhaps the %<offsetof%> macro was used incorrectly)\");\n+\t\t  error (\"invalid access to non-static data member %qD in \"\n+\t\t\t \"virtual base of NULL object\", member);\n \t\t}\n \t      return error_mark_node;\n \t    }\n@@ -2375,27 +2373,6 @@ build_class_member_access_expr (tree object, tree member,\n \t  gcc_assert (object != error_mark_node);\n \t}\n \n-      /* Complain about other invalid uses of offsetof, even though they will\n-\t give the right answer.  Note that we complain whether or not they\n-\t actually used the offsetof macro, since there's no way to know at this\n-\t point.  So we just give a warning, instead of a pedwarn.  */\n-      /* Do not produce this warning for base class field references, because\n-\t we know for a fact that didn't come from offsetof.  This does occur\n-\t in various testsuite cases where a null object is passed where a\n-\t vtable access is required.  */\n-      if (null_object_p && warn_invalid_offsetof\n-\t  && CLASSTYPE_NON_STD_LAYOUT (object_type)\n-\t  && !DECL_FIELD_IS_BASE (member)\n-\t  && cp_unevaluated_operand == 0\n-\t  && (complain & tf_warning))\n-\t{\n-\t  warning (OPT_Winvalid_offsetof, \n-                   \"invalid access to non-static data member %qD \"\n-                   \" of NULL object\", member);\n-\t  warning (OPT_Winvalid_offsetof, \n-                   \"(perhaps the %<offsetof%> macro was used incorrectly)\");\n-\t}\n-\n       /* If MEMBER is from an anonymous aggregate, we have converted\n \t OBJECT so that it refers to the class containing the\n \t anonymous union.  Generate a reference to the anonymous union"}, {"sha": "ca9522a6016e945fd256922af025301e942c824c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -5098,12 +5098,10 @@ warnings produced by @option{-Winline} to appear or disappear.\n @opindex Wno-invalid-offsetof\n @opindex Winvalid-offsetof\n Suppress warnings from applying the @samp{offsetof} macro to a non-POD\n-type.  According to the 1998 ISO C++ standard, applying @samp{offsetof}\n-to a non-POD type is undefined.  In existing C++ implementations,\n-however, @samp{offsetof} typically gives meaningful results even when\n-applied to certain kinds of non-POD types (such as a simple\n-@samp{struct} that fails to be a POD type only by virtue of having a\n-constructor).  This flag is for users who are aware that they are\n+type.  According to the 2014 ISO C++ standard, applying @samp{offsetof}\n+to a non-standard-layout type is undefined.  In existing C++ implementations,\n+however, @samp{offsetof} typically gives meaningful results.\n+This flag is for users who are aware that they are\n writing nonportable code and who have deliberately chosen to ignore the\n warning about it.\n "}, {"sha": "5a66511f2bdf7a7b844f65ea6efaed3550d062bd", "filename": "gcc/testsuite/g++.dg/abi/offsetof.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -4,7 +4,6 @@\n // implementation thereof.\n \n // Yes, this is bad, naughty, evil code.  But it seems to be well-formed.\n-// So we'll just warn.\n \n // { dg-do run }\n \n@@ -18,5 +17,5 @@ struct C: public B { };\n \n int main ()\n {\n-  return ((__SIZE_TYPE__) &((C*)0)->i) != sizeof(void*); // { dg-warning \"offsetof|invalid\" \"\" }\n+  return ((__SIZE_TYPE__) &((C*)0)->i) != sizeof(void*);\n }"}, {"sha": "8d98242656041bd72c4b379a035583cb0aa20a9d", "filename": "gcc/testsuite/g++.dg/other/offsetof3.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -1,7 +1,6 @@\n-/* Verify that offsetof warns if given a non-standard-layout class */\n+/* Verify that offsetof complains if given a non-standard-layout class.  */\n /* Copyright (C) 2003 Free Software Foundation, Inc. */\n /* Contributed by Matt Austern <austern@apple.com> 15 May 2003 */\n-/* { dg-do compile } */\n \n struct X\n {\n@@ -13,5 +12,4 @@ protected:\n typedef X* pX;\n typedef __SIZE_TYPE__ size_t;\n \n-size_t yoff = size_t(&(pX(0)->y)); /* { dg-warning \"invalid access\" \"\" } */\n-/* { dg-warning \"macro was used incorrectly\" \"macro\" { target *-*-* } 16 } */\n+size_t yoff = __builtin_offsetof (X, y); /* { dg-error \"35:non-standard-layout\" } */"}, {"sha": "86b14488246131f370b2c9d7b4d9c6a4411d4966", "filename": "gcc/testsuite/g++.dg/other/offsetof5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8591575ff8d7959e829fd13eb171aefe2a60bc19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C?ref=8591575ff8d7959e829fd13eb171aefe2a60bc19", "patch": "@@ -9,14 +9,14 @@ struct A\n   int &i;\n };\n \n-int j = offsetof (A, i);\t\t// { dg-warning \"invalid access|offsetof\" }\n+int j = offsetof (A, i);\t\t// { dg-error \"offsetof\" }\n \n template <typename T>\n struct S\n {\n   T h;\n   T &i;\n-  static const int j = offsetof (S, i);\t// { dg-warning \"invalid access|offsetof\" }\n+  static const int j = offsetof (S, i);\t// { dg-error \"offsetof\" }\n };\n \n int k = S<int>::j;\t\t\t// { dg-message \"required from here\" }"}]}