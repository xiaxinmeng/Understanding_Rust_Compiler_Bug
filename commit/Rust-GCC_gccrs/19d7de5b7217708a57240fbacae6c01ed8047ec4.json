{"sha": "19d7de5b7217708a57240fbacae6c01ed8047ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkN2RlNWI3MjE3NzA4YTU3MjQwZmJhY2FlNmMwMWVkODA0N2VjNA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-02-09T10:40:19Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-02-09T10:40:19Z"}, "message": "Makefile.in: Remove .sym rule (not used).\n\n2012-02-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* gcc-interface/Makefile.in: Remove .sym rule (not used).\n\tRemove adamsg.o object (requires native message compiler).\n\t* init.c (CMA$_EXIT_THREAD, MTH$_FLOOVEMAT, SS$_INTDIV): Define as a\n\tmacro instead of as extern int.\n\t(ADA$_ALREADY_OPEN, ADA$_CONSTRAINT_ERRO, ADA$_DATA_ERROR)\n\t(ADA$_DEVICE_ERROR, ADA$_END_ERROR, ADA$_FAC_MODE_MISMAT)\n\t(ADA$_IOSYSFAILED, ADA$_KEYSIZERR, ADA$_KEY_MISMATCH)\n\t(ADA$_LAYOUT_ERROR, ADA$_LINEXCMRS, ADA$_MAXLINEXC)\n\t(ADA$_MODE_ERROR, ADA$_MRN_MISMATCH, ADA$_MRS_MISMATCH)\n\t(ADA$_NAME_ERROR, ADA$_NOT_OPEN, ADA$_ORG_MISMATCH)\n\t(ADA$_PROGRAM_ERROR, ADA$_RAT_MISMATCH, ADA$_RFM_MISMATCH)\n\t(ADA$_STAOVF, ADA$_STATUS_ERROR, ADA$_STORAGE_ERROR)\n\t(ADA$_UNSUPPORTED, ADA$_USE_ERROR): Likewise.\n\t(struct cond_except): Field cond is now an unsigned int.\n\t(dec_ada_cond_except_table): Adjust.\n\t(cond_except_table): Likewise.\n\t(cond_resignal_table): Likewise.\n\t(__gnat_default_resignal_p): Fix style.\n\nFrom-SVN: r184041", "tree": {"sha": "f43cde06b6e7f67892da3c82b6d404a3d5832038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43cde06b6e7f67892da3c82b6d404a3d5832038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d7de5b7217708a57240fbacae6c01ed8047ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d7de5b7217708a57240fbacae6c01ed8047ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d7de5b7217708a57240fbacae6c01ed8047ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d7de5b7217708a57240fbacae6c01ed8047ec4/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15ed19ff324f45494d471b65c321804f1858cd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ed19ff324f45494d471b65c321804f1858cd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ed19ff324f45494d471b65c321804f1858cd26"}], "stats": {"total": 171, "additions": 90, "deletions": 81}, "files": [{"sha": "5b6372dbdf30c95ec2e6cd7d7738cd9a3254324a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=19d7de5b7217708a57240fbacae6c01ed8047ec4", "patch": "@@ -1,3 +1,24 @@\n+2012-02-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/Makefile.in: Remove .sym rule (not used).\n+\tRemove adamsg.o object (requires native message compiler).\n+\t* init.c (CMA$_EXIT_THREAD, MTH$_FLOOVEMAT, SS$_INTDIV): Define as a\n+\tmacro instead of as extern int.\n+\t(ADA$_ALREADY_OPEN, ADA$_CONSTRAINT_ERRO, ADA$_DATA_ERROR)\n+\t(ADA$_DEVICE_ERROR, ADA$_END_ERROR, ADA$_FAC_MODE_MISMAT)\n+\t(ADA$_IOSYSFAILED, ADA$_KEYSIZERR, ADA$_KEY_MISMATCH)\n+\t(ADA$_LAYOUT_ERROR, ADA$_LINEXCMRS, ADA$_MAXLINEXC)\n+\t(ADA$_MODE_ERROR, ADA$_MRN_MISMATCH, ADA$_MRS_MISMATCH)\n+\t(ADA$_NAME_ERROR, ADA$_NOT_OPEN, ADA$_ORG_MISMATCH)\n+\t(ADA$_PROGRAM_ERROR, ADA$_RAT_MISMATCH, ADA$_RFM_MISMATCH)\n+\t(ADA$_STAOVF, ADA$_STATUS_ERROR, ADA$_STORAGE_ERROR)\n+\t(ADA$_UNSUPPORTED, ADA$_USE_ERROR): Likewise.\n+\t(struct cond_except): Field cond is now an unsigned int.\n+\t(dec_ada_cond_except_table): Adjust.\n+\t(cond_except_table): Likewise.\n+\t(cond_resignal_table): Likewise.\n+\t(__gnat_default_resignal_p): Fix style.\n+\n 2012-02-08  Vincent Celier  <celier@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Add g-byorma.o to gnatbind objects"}, {"sha": "4fb3ba7d705ff1f930ccab9031ef4a8809adaf77", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=19d7de5b7217708a57240fbacae6c01ed8047ec4", "patch": "@@ -1487,10 +1487,6 @@ hyphen = _\n LN = cp -p\n LN_S = cp -p\n \n-.SUFFIXES: .sym\n-\n-.o.sym:\n-\t@ gnu:[bin]vmssymvec $<\n endif\n \n ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ))),)\n@@ -1566,16 +1562,11 @@ ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(targ)))\n     endif\n   endif\n \n-adamsg.o: adamsg.msg\n-\t-$(DECC) --cc=message adamsg.msg -o adamsg.o\n-\n   EXTRA_GNATMAKE_OBJS = mlib-tgt-vms_common.o\n \n   GMEM_LIB = gmemlib\n   EH_MECHANISM=-gcc\n   GNATLIB_SHARED=gnatlib-shared-vms\n-  EXTRA_LIBGNAT_SRCS+=adamsg.msg\n-  EXTRA_LIBGNAT_OBJS+=adamsg.o\n   EXTRA_GNATRTL_NONTASKING_OBJS+=s-po32gl.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-tpopde.o\n   EXTRA_GNATTOOLS = \\"}, {"sha": "79c5c5b535b0963de384abacc4ca7ed66c5acccf", "filename": "gcc/ada/init.c", "status": "modified", "additions": 69, "deletions": 72, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d7de5b7217708a57240fbacae6c01ed8047ec4/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=19d7de5b7217708a57240fbacae6c01ed8047ec4", "patch": "@@ -1117,12 +1117,12 @@ int __gnat_features_set = 0;\n \n /* These codes are in standard message libraries.  */\n extern int C$_SIGKILL;\n-extern int CMA$_EXIT_THREAD;\n extern int SS$_DEBUG;\n-extern int SS$_INTDIV;\n extern int LIB$_KEYNOTFOU;\n extern int LIB$_ACTIMAGE;\n-extern int MTH$_FLOOVEMAT;       /* Some ACVC_21 CXA tests */\n+#define CMA$_EXIT_THREAD 4227492\n+#define MTH$_FLOOVEMAT 1475268       /* Some ACVC_21 CXA tests */\n+#define SS$_INTDIV 1156\n \n /* These codes are non standard, which is to say the author is\n    not sure if they are defined in the standard message libraries\n@@ -1131,7 +1131,7 @@ extern int MTH$_FLOOVEMAT;       /* Some ACVC_21 CXA tests */\n #define FDL$_UNPRIKW 11829410\n \n struct cond_except {\n-  const int *cond;\n+  unsigned int cond;\n   const struct Exception_Data *except;\n };\n \n@@ -1181,85 +1181,82 @@ extern struct Exception_Data *Coded_Exception (Exception_Code);\n extern Exception_Code Base_Code_In (Exception_Code);\n \n /* DEC Ada exceptions are not defined in a header file, so they\n-   must be declared as external addresses.  */\n-\n-extern int ADA$_PROGRAM_ERROR;\n-extern int ADA$_LOCK_ERROR;\n-extern int ADA$_EXISTENCE_ERROR;\n-extern int ADA$_KEY_ERROR;\n-extern int ADA$_KEYSIZERR;\n-extern int ADA$_STAOVF;\n-extern int ADA$_CONSTRAINT_ERRO;\n-extern int ADA$_IOSYSFAILED;\n-extern int ADA$_LAYOUT_ERROR;\n-extern int ADA$_STORAGE_ERROR;\n-extern int ADA$_DATA_ERROR;\n-extern int ADA$_DEVICE_ERROR;\n-extern int ADA$_END_ERROR;\n-extern int ADA$_MODE_ERROR;\n-extern int ADA$_NAME_ERROR;\n-extern int ADA$_STATUS_ERROR;\n-extern int ADA$_NOT_OPEN;\n-extern int ADA$_ALREADY_OPEN;\n-extern int ADA$_USE_ERROR;\n-extern int ADA$_UNSUPPORTED;\n-extern int ADA$_FAC_MODE_MISMAT;\n-extern int ADA$_ORG_MISMATCH;\n-extern int ADA$_RFM_MISMATCH;\n-extern int ADA$_RAT_MISMATCH;\n-extern int ADA$_MRS_MISMATCH;\n-extern int ADA$_MRN_MISMATCH;\n-extern int ADA$_KEY_MISMATCH;\n-extern int ADA$_MAXLINEXC;\n-extern int ADA$_LINEXCMRS;\n+   must be declared.  */\n+\n+#define ADA$_ALREADY_OPEN\t0x0031a594\n+#define ADA$_CONSTRAINT_ERRO\t0x00318324\n+#define ADA$_DATA_ERROR\t\t0x003192c4\n+#define ADA$_DEVICE_ERROR\t0x003195e4\n+#define ADA$_END_ERROR\t\t0x00319904\n+#define ADA$_FAC_MODE_MISMAT\t0x0031a8b3\n+#define ADA$_IOSYSFAILED\t0x0031af04\n+#define ADA$_KEYSIZERR\t\t0x0031aa3c\n+#define ADA$_KEY_MISMATCH\t0x0031a8e3\n+#define ADA$_LAYOUT_ERROR\t0x00319c24\n+#define ADA$_LINEXCMRS\t\t0x0031a8f3\n+#define ADA$_MAXLINEXC\t\t0x0031a8eb\n+#define ADA$_MODE_ERROR\t\t0x00319f44\n+#define ADA$_MRN_MISMATCH\t0x0031a8db\n+#define ADA$_MRS_MISMATCH\t0x0031a8d3\n+#define ADA$_NAME_ERROR\t\t0x0031a264\n+#define ADA$_NOT_OPEN\t\t0x0031a58c\n+#define ADA$_ORG_MISMATCH\t0x0031a8bb\n+#define ADA$_PROGRAM_ERROR\t0x00318964\n+#define ADA$_RAT_MISMATCH\t0x0031a8cb\n+#define ADA$_RFM_MISMATCH\t0x0031a8c3\n+#define ADA$_STAOVF\t\t0x00318cac\n+#define ADA$_STATUS_ERROR\t0x0031a584\n+#define ADA$_STORAGE_ERROR\t0x00318c84\n+#define ADA$_UNSUPPORTED\t0x0031a8ab\n+#define ADA$_USE_ERROR\t\t0x0031a8a4\n \n /* DEC Ada specific conditions.  */\n static const struct cond_except dec_ada_cond_except_table [] = {\n-  {&ADA$_PROGRAM_ERROR,   &program_error},\n-  {&ADA$_USE_ERROR,       &Use_Error},\n-  {&ADA$_KEYSIZERR,       &program_error},\n-  {&ADA$_STAOVF,          &storage_error},\n-  {&ADA$_CONSTRAINT_ERRO, &constraint_error},\n-  {&ADA$_IOSYSFAILED,     &Device_Error},\n-  {&ADA$_LAYOUT_ERROR,    &Layout_Error},\n-  {&ADA$_STORAGE_ERROR,   &storage_error},\n-  {&ADA$_DATA_ERROR,      &Data_Error},\n-  {&ADA$_DEVICE_ERROR,    &Device_Error},\n-  {&ADA$_END_ERROR,       &End_Error},\n-  {&ADA$_MODE_ERROR,      &Mode_Error},\n-  {&ADA$_NAME_ERROR,      &Name_Error},\n-  {&ADA$_STATUS_ERROR,    &Status_Error},\n-  {&ADA$_NOT_OPEN,        &Use_Error},\n-  {&ADA$_ALREADY_OPEN,    &Use_Error},\n-  {&ADA$_USE_ERROR,       &Use_Error},\n-  {&ADA$_UNSUPPORTED,     &Use_Error},\n-  {&ADA$_FAC_MODE_MISMAT, &Use_Error},\n-  {&ADA$_ORG_MISMATCH,    &Use_Error},\n-  {&ADA$_RFM_MISMATCH,    &Use_Error},\n-  {&ADA$_RAT_MISMATCH,    &Use_Error},\n-  {&ADA$_MRS_MISMATCH,    &Use_Error},\n-  {&ADA$_MRN_MISMATCH,    &Use_Error},\n-  {&ADA$_KEY_MISMATCH,    &Use_Error},\n-  {&ADA$_MAXLINEXC,       &constraint_error},\n-  {&ADA$_LINEXCMRS,       &constraint_error},\n-  {0,                     0}\n+  {ADA$_PROGRAM_ERROR,   &program_error},\n+  {ADA$_USE_ERROR,       &Use_Error},\n+  {ADA$_KEYSIZERR,       &program_error},\n+  {ADA$_STAOVF,          &storage_error},\n+  {ADA$_CONSTRAINT_ERRO, &constraint_error},\n+  {ADA$_IOSYSFAILED,     &Device_Error},\n+  {ADA$_LAYOUT_ERROR,    &Layout_Error},\n+  {ADA$_STORAGE_ERROR,   &storage_error},\n+  {ADA$_DATA_ERROR,      &Data_Error},\n+  {ADA$_DEVICE_ERROR,    &Device_Error},\n+  {ADA$_END_ERROR,       &End_Error},\n+  {ADA$_MODE_ERROR,      &Mode_Error},\n+  {ADA$_NAME_ERROR,      &Name_Error},\n+  {ADA$_STATUS_ERROR,    &Status_Error},\n+  {ADA$_NOT_OPEN,        &Use_Error},\n+  {ADA$_ALREADY_OPEN,    &Use_Error},\n+  {ADA$_USE_ERROR,       &Use_Error},\n+  {ADA$_UNSUPPORTED,     &Use_Error},\n+  {ADA$_FAC_MODE_MISMAT, &Use_Error},\n+  {ADA$_ORG_MISMATCH,    &Use_Error},\n+  {ADA$_RFM_MISMATCH,    &Use_Error},\n+  {ADA$_RAT_MISMATCH,    &Use_Error},\n+  {ADA$_MRS_MISMATCH,    &Use_Error},\n+  {ADA$_MRN_MISMATCH,    &Use_Error},\n+  {ADA$_KEY_MISMATCH,    &Use_Error},\n+  {ADA$_MAXLINEXC,       &constraint_error},\n+  {ADA$_LINEXCMRS,       &constraint_error},\n+  {0,                    0}\n };\n \n #if 0\n    /* Already handled by a pragma Import_Exception\n       in Aux_IO_Exceptions */\n-  {&ADA$_LOCK_ERROR,      &Lock_Error},\n-  {&ADA$_EXISTENCE_ERROR, &Existence_Error},\n-  {&ADA$_KEY_ERROR,       &Key_Error},\n+  {ADA$_LOCK_ERROR,      &Lock_Error},\n+  {ADA$_EXISTENCE_ERROR, &Existence_Error},\n+  {ADA$_KEY_ERROR,       &Key_Error},\n #endif\n \n #endif /* IN_RTS */\n \n /* Non-DEC Ada specific conditions.  We could probably also put\n    SS$_HPARITH here and possibly SS$_ACCVIO, SS$_STKOVF.  */\n static const struct cond_except cond_except_table [] = {\n-  {&MTH$_FLOOVEMAT, &constraint_error},\n-  {&SS$_INTDIV,     &constraint_error},\n+  {MTH$_FLOOVEMAT, &constraint_error},\n+  {SS$_INTDIV,     &constraint_error},\n   {0,               0}\n };\n \n@@ -1297,7 +1294,7 @@ resignal_predicate (int code);\n \n static const int * const cond_resignal_table [] = {\n   &C$_SIGKILL,\n-  &CMA$_EXIT_THREAD,\n+  (int *)CMA$_EXIT_THREAD,\n   &SS$_DEBUG,\n   &LIB$_KEYNOTFOU,\n   &LIB$_ACTIMAGE,\n@@ -1324,8 +1321,8 @@ __gnat_default_resignal_p (int code)\n       return 1;\n \n   for (i = 0, iexcept = 0;\n-       cond_resignal_table [i] &&\n-       !(iexcept = LIB$MATCH_COND (&code, &cond_resignal_table [i]));\n+       cond_resignal_table [i]\n+         && !(iexcept = LIB$MATCH_COND (&code, &cond_resignal_table [i]));\n        i++);\n \n   return iexcept;\n@@ -1410,7 +1407,7 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n       msg = message;\n \n       exception->Name_Length = 19;\n-      /* ??? The full name really should be get sys$getmsg returns.  */\n+      /* ??? The full name really should be get SYS$GETMSG returns.  */\n       exception->Full_Name = \"IMPORTED_EXCEPTION\";\n       exception->Import_Code = base_code;\n "}]}