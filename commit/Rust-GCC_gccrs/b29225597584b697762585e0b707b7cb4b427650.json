{"sha": "b29225597584b697762585e0b707b7cb4b427650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5MjI1NTk3NTg0YjY5Nzc2MjU4NWUwYjcwN2I3Y2I0YjQyNzY1MA==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-22T03:01:24Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-01-22T14:03:53Z"}, "message": "rs6000: Support variable insert and Expand vec_insert in expander [PR79251]\n\nvec_insert accepts 3 arguments, arg0 is input vector, arg1 is the value\nto be insert, arg2 is the place to insert arg1 to arg0.  Current expander\ngenerates stxv+stwx+lxv if arg2 is variable instead of constant, which\ncauses serious store hit load performance issue on Power.  This patch tries\n 1) Build VIEW_CONVERT_EXPR for vec_insert (i, v, n) like v[n&3] = i to\nunify the gimple code, then expander could use vec_set_optab to expand.\n 2) Expand the IFN VEC_SET to fast instructions: lvsr+insert+lvsl.\nIn this way, \"vec_insert (i, v, n)\" and \"v[n&3] = i\" won't be expanded too\nearly in gimple stage if arg2 is variable, avoid generating store hit load\ninstructions.\n\nFor Power9 V4SI:\n\taddi 9,1,-16\n\trldic 6,6,2,60\n\tstxv 34,-16(1)\n\tstwx 5,9,6\n\tlxv 34,-16(1)\n=>\n\trlwinm 6,6,2,28,29\n\tmtvsrwz 0,5\n\tlvsr 1,0,6\n\tlvsl 0,0,6\n\txxperm 34,34,33\n\txxinsertw 34,0,12\n\txxperm 34,34,32\n\nThough instructions increase from 5 to 7, the performance is improved\n60% in typical cases.\nTested with V2DI, V2DF V4SI, V4SF, V8HI, V16QI on Power9-LE.\n\n2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n\ngcc/ChangeLog:\n\n\tPR target/79251\n\tPR target/98065\n\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tAjdust variable index vec_insert from address dereference to\n\tARRAY_REF(VIEW_CONVERT_EXPR) tree expression.\n\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_set_var):\n\tNew declaration.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var): New function.\n\n2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr79251.p9.c: New test.\n\t* gcc.target/powerpc/pr79251-run.c: New test.\n\t* gcc.target/powerpc/pr79251.h: New header.", "tree": {"sha": "60bcab945b7232d2cc66303b5b8c17304e288087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60bcab945b7232d2cc66303b5b8c17304e288087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29225597584b697762585e0b707b7cb4b427650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29225597584b697762585e0b707b7cb4b427650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29225597584b697762585e0b707b7cb4b427650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29225597584b697762585e0b707b7cb4b427650/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46027c6544d3680b3647d3c771c9844b8b95772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46027c6544d3680b3647d3c771c9844b8b95772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46027c6544d3680b3647d3c771c9844b8b95772"}], "stats": {"total": 144, "additions": 130, "deletions": 14}, "files": [{"sha": "4a237ae322ac1089610b928ded1b5fd0d1489d91", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -1512,9 +1512,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg1;\n       tree arg2;\n       tree arg1_type;\n-      tree arg1_inner_type;\n       tree decl, stmt;\n-      tree innerptrtype;\n       machine_mode mode;\n \n       /* No second or third arguments. */\n@@ -1566,8 +1564,13 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  return build_call_expr (call, 3, arg1, arg0, arg2);\n \t}\n \n-      /* Build *(((arg1_inner_type*)&(vector type){arg1})+arg2) = arg0. */\n-      arg1_inner_type = TREE_TYPE (arg1_type);\n+      /* Build *(((arg1_inner_type*)&(vector type){arg1})+arg2) = arg0 with\n+\t VIEW_CONVERT_EXPR.  i.e.:\n+\t D.3192 = v1;\n+\t _1 = n & 3;\n+\t VIEW_CONVERT_EXPR<int[4]>(D.3192)[_1] = i;\n+\t v1 = D.3192;\n+\t D.3194 = v1;  */\n       if (TYPE_VECTOR_SUBPARTS (arg1_type) == 1)\n \targ2 = build_int_cst (TREE_TYPE (arg2), 0);\n       else\n@@ -1582,6 +1585,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       TREE_USED (decl) = 1;\n       TREE_TYPE (decl) = arg1_type;\n       TREE_READONLY (decl) = TYPE_READONLY (arg1_type);\n+      TREE_ADDRESSABLE (decl) = 1;\n       if (c_dialect_cxx ())\n \t{\n \t  stmt = build4 (TARGET_EXPR, arg1_type, decl, arg1,\n@@ -1592,19 +1596,12 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t{\n \t  DECL_INITIAL (decl) = arg1;\n \t  stmt = build1 (DECL_EXPR, arg1_type, decl);\n-\t  TREE_ADDRESSABLE (decl) = 1;\n \t  SET_EXPR_LOCATION (stmt, loc);\n \t  stmt = build1 (COMPOUND_LITERAL_EXPR, arg1_type, stmt);\n \t}\n-\n-      innerptrtype = build_pointer_type (arg1_inner_type);\n-\n-      stmt = build_unary_op (loc, ADDR_EXPR, stmt, 0);\n-      stmt = convert (innerptrtype, stmt);\n-      stmt = build_binary_op (loc, PLUS_EXPR, stmt, arg2, 1);\n-      stmt = build_indirect_ref (loc, stmt, RO_NULL);\n-      stmt = build2 (MODIFY_EXPR, TREE_TYPE (stmt), stmt,\n-\t\t     convert (TREE_TYPE (stmt), arg0));\n+      stmt = build_array_ref (loc, stmt, arg2);\n+      stmt = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg0), stmt,\n+\t\t\t  convert (TREE_TYPE (stmt), arg0));\n       stmt = build2 (COMPOUND_EXPR, arg1_type, stmt, decl);\n       return stmt;\n     }"}, {"sha": "9a46a4147431111d982ff8aa5a3affdd59a310c1", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -58,6 +58,7 @@ extern bool rs6000_split_128bit_ok_p (rtx []);\n extern void rs6000_expand_float128_convert (rtx, rtx, bool);\n extern void rs6000_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, rtx);\n+extern void rs6000_expand_vector_set_var (rtx, rtx, rtx);\n extern void rs6000_expand_vector_extract (rtx, rtx, rtx);\n extern void rs6000_split_vec_extract_var (rtx, rtx, rtx, rtx, rtx);\n extern rtx rs6000_adjust_vec_address (rtx, rtx, rtx, rtx, machine_mode);"}, {"sha": "68832a389527291abe3c727f81cac5e648708d23", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -6993,6 +6993,12 @@ rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n \n   if (VECTOR_MEM_VSX_P (mode))\n     {\n+      if (!CONST_INT_P (elt_rtx))\n+\t{\n+\t  rs6000_expand_vector_set_var (target, val, elt_rtx);\n+\t  return;\n+\t}\n+\n       rtx insn = NULL_RTX;\n \n       if (mode == V2DFmode)\n@@ -7083,6 +7089,53 @@ rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n   emit_insn (gen_rtx_SET (target, x));\n }\n \n+/* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n+   is variable and also counts by vector element size.  */\n+\n+void\n+rs6000_expand_vector_set_var (rtx target, rtx val, rtx idx)\n+{\n+  machine_mode mode = GET_MODE (target);\n+\n+  gcc_assert (VECTOR_MEM_VSX_P (mode) && !CONST_INT_P (idx));\n+\n+  gcc_assert (GET_MODE (idx) == E_SImode);\n+\n+  machine_mode inner_mode = GET_MODE (val);\n+\n+  rtx tmp = gen_reg_rtx (GET_MODE (idx));\n+  int width = GET_MODE_SIZE (inner_mode);\n+\n+  gcc_assert (width >= 1 && width <= 8);\n+\n+  int shift = exact_log2 (width);\n+  /* Generate the IDX for permute shift, width is the vector element size.\n+     idx = idx * width.  */\n+  emit_insn (gen_ashlsi3 (tmp, idx, GEN_INT (shift)));\n+\n+  tmp = convert_modes (DImode, SImode, tmp, 1);\n+\n+  /*  lvsr    v1,0,idx.  */\n+  rtx pcvr = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_altivec_lvsr_reg (pcvr, tmp));\n+\n+  /*  lvsl    v2,0,idx.  */\n+  rtx pcvl = gen_reg_rtx (V16QImode);\n+  emit_insn (gen_altivec_lvsl_reg (pcvl, tmp));\n+\n+  rtx sub_target = simplify_gen_subreg (V16QImode, target, mode, 0);\n+\n+  rtx permr\n+    = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target, pcvr);\n+  emit_insn (permr);\n+\n+  rs6000_expand_vector_set (target, val, const0_rtx);\n+\n+  rtx perml\n+    = gen_altivec_vperm_v8hiv16qi (sub_target, sub_target, sub_target, pcvl);\n+  emit_insn (perml);\n+}\n+\n /* Extract field ELT from VEC into TARGET.  */\n \n void"}, {"sha": "08f69df11464f838605c9f6f25a1b6f9c1b537fb", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251-run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.c?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-O2 -maltivec\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+#include \"pr79251.h\"\n+\n+TEST_VEC_INSERT_ALL (test)\n+\n+#define run_test(TYPE, num)                                                    \\\n+  {                                                                            \\\n+    vector TYPE v;                                                             \\\n+    vector TYPE u = {0x0};                                                     \\\n+    for (long k = 0; k < 16 / sizeof (TYPE); k++)                              \\\n+      v[k] = 0xaa;                                                             \\\n+    for (long k = 0; k < 16 / sizeof (TYPE); k++)                              \\\n+      {                                                                        \\\n+\tu = test##num (v, 254, k);                                             \\\n+\tif (u[k] != (TYPE) 254)                                                \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_VEC_INSERT_ALL (run_test)\n+  return 0;\n+}"}, {"sha": "addb067f9ed8d13f93a0b8f61e85fda9adee4d47", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.h?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -0,0 +1,19 @@\n+\n+#define test(TYPE, num)                                                        \\\n+  __attribute__ ((noinline, noclone))                                          \\\n+    vector TYPE test##num (vector TYPE v, TYPE i, signed int n)                \\\n+  {                                                                            \\\n+    return vec_insert (i, v, n);                                               \\\n+  }\n+\n+#define TEST_VEC_INSERT_ALL(T)                                                 \\\n+  T (char, 0)                                                                  \\\n+  T (unsigned char, 1)                                                         \\\n+  T (short, 2)                                                                 \\\n+  T (unsigned short, 3)                                                        \\\n+  T (int, 4)                                                                   \\\n+  T (unsigned int, 5)                                                          \\\n+  T (long long, 6)                                                             \\\n+  T (unsigned long long, 7)                                                    \\\n+  T (float, 8)                                                                 \\\n+  T (double, 9)"}, {"sha": "ec1cb2558887b07afc34d36b9a49fcd1f48690f9", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29225597584b697762585e0b707b7cb4b427650/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c?ref=b29225597584b697762585e0b707b7cb4b427650", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9 -maltivec\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+#include \"pr79251.h\"\n+\n+TEST_VEC_INSERT_ALL (test)\n+\n+/* { dg-final { scan-assembler-not {\\mstxw\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mlvsr\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mvinserth\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvinsertb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 } } */"}]}