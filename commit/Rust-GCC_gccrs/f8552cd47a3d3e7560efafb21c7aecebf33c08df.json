{"sha": "f8552cd47a3d3e7560efafb21c7aecebf33c08df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1NTJjZDQ3YTNkM2U3NTYwZWZhZmIyMWM3YWVjZWJmMzNjMDhkZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-07-31T10:06:24Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-07-31T10:06:24Z"}, "message": "interface.c (gfc_procedure_use): Return gfc_try instead of\n\n2012-07-31  Tobias Burnus  <burnus@net-b.de>\n\n        * interface.c (gfc_procedure_use): Return gfc_try instead of\n        * void.\n        * gfortran.h (gfc_procedure_use): Update prototype.\n        * resolve.c (gfc_iso_c_func_interface): Allow noninteroperable\n        procedures for c_funloc for TS29113.\n        * (gfc_iso_c_sub_interface): Ditto for c_f_procpointer. Add\n        diagnostic for c_ptr vs. c_funptr for c_f_(proc)pointer.\n\n2012-07-31  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/c_funloc_tests_6.f90: New.\n        * gfortran.dg/c_funloc_tests_7.f90: New.\n        * gfortran.dg/c_funloc_tests_5.f03: Compile with -std=f2003.\n\nFrom-SVN: r190003", "tree": {"sha": "e46dd35f0466f4852d2e30688fa40b2cba761798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46dd35f0466f4852d2e30688fa40b2cba761798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8552cd47a3d3e7560efafb21c7aecebf33c08df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8552cd47a3d3e7560efafb21c7aecebf33c08df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8552cd47a3d3e7560efafb21c7aecebf33c08df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8552cd47a3d3e7560efafb21c7aecebf33c08df/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4adf72f1405b6a3a972dd59f1a1a0bec7b6fe18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf72f1405b6a3a972dd59f1a1a0bec7b6fe18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf72f1405b6a3a972dd59f1a1a0bec7b6fe18a"}], "stats": {"total": 149, "additions": 126, "deletions": 23}, "files": [{"sha": "fcd07f1b59ec2a226e3ca467bfa7b75eb8961d40", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -1,3 +1,12 @@\n+2012-07-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* interface.c (gfc_procedure_use): Return gfc_try instead of void.\n+\t* gfortran.h (gfc_procedure_use): Update prototype.\n+\t* resolve.c (gfc_iso_c_func_interface): Allow noninteroperable\n+\tprocedures for c_funloc for TS29113.\n+\t* (gfc_iso_c_sub_interface): Ditto for c_f_procpointer. Add\n+\tdiagnostic for c_ptr vs. c_funptr for c_f_(proc)pointer.\n+\n 2012-07-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/51081"}, {"sha": "8fea23da1c3b1972f1474f2b84d483c4aa86b288", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -2849,7 +2849,7 @@ int gfc_compare_types (gfc_typespec *, gfc_typespec *);\n int gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, const char *, int, int,\n \t\t\t    char *, int, const char *, const char *);\n void gfc_check_interfaces (gfc_namespace *);\n-void gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n+gfc_try gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n void gfc_ppc_use (gfc_component *, gfc_actual_arglist **, locus *);\n gfc_symbol *gfc_search_interface (gfc_interface *, int,\n \t\t\t\t  gfc_actual_arglist **);"}, {"sha": "0f8951cd7c47ecb1d8f61e0f61e804dbdebc4eb9", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -2927,7 +2927,7 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n    well, the actual argument list will also end up being properly\n    sorted.  */\n \n-void\n+gfc_try\n gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n {\n   /* Warn about calls with an implicit interface.  Special case\n@@ -2954,22 +2954,22 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t  gfc_error(\"The pointer object '%s' at %L must have an explicit \"\n \t\t    \"function interface or be declared as array\",\n \t\t    sym->name, where);\n-\t  return;\n+\t  return FAILURE;\n \t}\n \n       if (sym->attr.allocatable && !sym->attr.external)\n \t{\n \t  gfc_error(\"The allocatable object '%s' at %L must have an explicit \"\n \t\t    \"function interface or be declared as array\",\n \t\t    sym->name, where);\n-\t  return;\n+\t  return FAILURE;\n \t}\n \n       if (sym->attr.allocatable)\n \t{\n \t  gfc_error(\"Allocatable function '%s' at %L must have an explicit \"\n \t\t    \"function interface\", sym->name, where);\n-\t  return;\n+\t  return FAILURE;\n \t}\n \n       for (a = *ap; a; a = a->next)\n@@ -3009,7 +3009,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t      && a->expr->ts.type == BT_UNKNOWN)\n \t    {\n \t      gfc_error (\"MOLD argument to NULL required at %L\", &a->expr->where);\n-\t      return;\n+\t      return FAILURE;\n \t    }\n \n \t  /* TS 29113, C407b.  */\n@@ -3018,19 +3018,23 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t    {\n \t      gfc_error (\"Assumed-rank argument requires an explicit interface \"\n \t\t\t \"at %L\", &a->expr->where);\n-\t      return;\n+\t      return FAILURE;\n \t    }\n \t}\n \n-      return;\n+      return SUCCESS;\n     }\n \n   if (!compare_actual_formal (ap, sym->formal, 0, sym->attr.elemental, where))\n-    return;\n+    return FAILURE;\n+\n+  if (check_intents (sym->formal, *ap) == FAILURE)\n+    return FAILURE;\n \n-  check_intents (sym->formal, *ap);\n   if (gfc_option.warn_aliasing)\n     check_some_aliasing (sym->formal, *ap);\n+\n+  return SUCCESS;\n }\n \n "}, {"sha": "dcce3f56ce1fb13b71eab8aa8ef564e8ac95bd59", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -3011,20 +3011,18 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n             {\n               /* TODO: Update this error message to allow for procedure\n                  pointers once they are implemented.  */\n-              gfc_error_now (\"Parameter '%s' to '%s' at %L must be a \"\n+              gfc_error_now (\"Argument '%s' to '%s' at %L must be a \"\n                              \"procedure\",\n                              args_sym->name, sym->name,\n                              &(args->expr->where));\n               retval = FAILURE;\n             }\n-\t  else if (args_sym->attr.is_bind_c != 1)\n-\t    {\n-\t      gfc_error_now (\"Parameter '%s' to '%s' at %L must be \"\n-\t\t\t     \"BIND(C)\",\n-\t\t\t     args_sym->name, sym->name,\n-\t\t\t     &(args->expr->where));\n-\t      retval = FAILURE;\n-\t    }\n+\t  else if (args_sym->attr.is_bind_c != 1\n+\t\t   && gfc_notify_std (GFC_STD_F2008_TS, \"Noninteroperable \"\n+\t\t\t\t      \"argument '%s' to '%s' at %L\",\n+\t\t\t\t      args_sym->name, sym->name,\n+\t\t\t\t      &(args->expr->where)) == FAILURE)\n+\t    retval = FAILURE;\n         }\n       \n       /* for c_loc/c_funloc, the new symbol is the same as the old one */\n@@ -3479,7 +3477,11 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \n   /* Make sure the actual arguments are in the necessary order (based on the \n      formal args) before resolving.  */\n-  gfc_procedure_use (sym, &c->ext.actual, &(c->loc));\n+  if (gfc_procedure_use (sym, &c->ext.actual, &(c->loc)) == FAILURE)\n+    {\n+      c->resolved_sym = sym;\n+      return MATCH_ERROR;\n+    }\n \n   if ((sym->intmod_sym_id == ISOCBINDING_F_POINTER) ||\n       (sym->intmod_sym_id == ISOCBINDING_F_PROCPOINTER))\n@@ -3490,6 +3492,15 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \t{\n \t  if (c->ext.actual != NULL && c->ext.actual->next != NULL)\n \t    {\n+\t      if (c->ext.actual->expr->ts.type != BT_DERIVED\n+\t\t  || c->ext.actual->expr->ts.u.derived->intmod_sym_id\n+\t\t     != ISOCBINDING_PTR)\n+\t\t{\n+\t\t  gfc_error (\"Argument at %L to C_F_POINTER shall have the type\"\n+\t\t\t     \" C_PTR\", &c->ext.actual->expr->where);\n+\t\t  m = MATCH_ERROR;\n+\t\t}\n+\n \t      /* Make sure we got a third arg if the second arg has non-zero\n \t\t rank.\tWe must also check that the type and rank are\n \t\t correct since we short-circuit this check in\n@@ -3515,7 +3526,26 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \t\t}\n \t    }\n \t}\n-      \n+      else /* ISOCBINDING_F_PROCPOINTER.  */\n+\t{\n+\t  if (c->ext.actual\n+\t      && (c->ext.actual->expr->ts.type != BT_DERIVED\n+\t\t  || c->ext.actual->expr->ts.u.derived->intmod_sym_id\n+\t\t     != ISOCBINDING_FUNPTR))\n+\t    {\n+\t      gfc_error (\"Argument at %L to C_F_FUNPOINTER shall have the type \"\n+\t                 \"C_FUNPTR\", &c->ext.actual->expr->where);\n+              m = MATCH_ERROR;\n+\t    }\n+\t  if (c->ext.actual && c->ext.actual->next\n+\t      && !gfc_expr_attr (c->ext.actual->next->expr).is_bind_c\n+\t      && gfc_notify_std (GFC_STD_F2008_TS, \"Noninteroperable \"\n+\t\t\t\t \"procedure-pointer at %L to C_F_FUNPOINTER\",\n+\t\t\t\t &c->ext.actual->next->expr->where)\n+\t\t   == FAILURE)\n+\t    m = MATCH_ERROR;\n+\t}\n+\n       if (m != MATCH_ERROR)\n \t{\n \t  /* the 1 means to add the optional arg to formal list */"}, {"sha": "b02534c080fbaec38dfee68e4822b27a1d95dce1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -1,3 +1,9 @@\n+2012-07-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/c_funloc_tests_6.f90: New.\n+\t* gfortran.dg/c_funloc_tests_7.f90: New.\n+\t* gfortran.dg/c_funloc_tests_5.f03: Compile with -std=f2003.\n+\n 2012-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53624"}, {"sha": "f3fdb2b6f645611d782a31e95d67cb14009615c2", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_5.f03", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n ! Test that the arg checking for c_funloc verifies the procedures are \n ! C interoperable.\n module c_funloc_tests_5\n@@ -7,9 +8,9 @@ module c_funloc_tests_5\n   subroutine sub0() bind(c)\n     type(c_funptr) :: my_c_funptr\n \n-    my_c_funptr = c_funloc(sub1) ! { dg-error \"must be BIND.C.\" }\n+    my_c_funptr = c_funloc(sub1) ! { dg-error \"TS 29113: Noninteroperable argument\" }\n \n-    my_c_funptr = c_funloc(func0) ! { dg-error \"must be BIND.C.\" }\n+    my_c_funptr = c_funloc(func0) ! { dg-error \"TS 29113: Noninteroperable argument\" }\n   end subroutine sub0\n \n   subroutine sub1() "}, {"sha": "e09b0bb375ad8f5c86b33d12a654e436e607404b", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_6.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! Check relaxed TS29113 constraints for procedures\n+! and c_f_*pointer argument checking for c_ptr/c_funptr.\n+!\n+\n+use iso_c_binding\n+implicit none\n+type(c_ptr) :: cp\n+type(c_funptr) :: cfp\n+\n+interface\n+  subroutine sub() bind(C)\n+  end subroutine sub\n+end interface\n+integer(c_int), pointer :: int\n+procedure(sub), pointer :: fsub\n+\n+integer, external :: noCsub\n+procedure(integer), pointer :: fint\n+\n+cp = c_funloc (sub) ! { dg-error \"Can't convert TYPE.c_funptr. to TYPE.c_ptr.\" })\n+cfp = c_loc (int)   ! { dg-error \"Can't convert TYPE.c_ptr. to TYPE.c_funptr.\" }\n+\n+call c_f_pointer (cfp, int)     ! { dg-error \"Argument at .1. to C_F_POINTER shall have the type C_PTR\" }\n+call c_f_procpointer (cp, fsub) ! { dg-error \"Argument at .1. to C_F_FUNPOINTER shall have the type C_FUNPTR\" }\n+\n+cfp = c_funloc (noCsub) ! { dg-error \"TS 29113: Noninteroperable argument 'nocsub' to 'c_funloc'\" }\n+call c_f_procpointer (cfp, fint) ! { dg-error \"TS 29113: Noninteroperable procedure-pointer at .1. to C_F_FUNPOINTER\" }\n+end"}, {"sha": "8e51c892cbda7b2a805933e1fad78d8efe507628", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_7.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8552cd47a3d3e7560efafb21c7aecebf33c08df/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_7.f90?ref=f8552cd47a3d3e7560efafb21c7aecebf33c08df", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008ts -fdump-tree-original\" }\n+!\n+! Check relaxed TS29113 constraints for procedures\n+! and c_f_*pointer argument checking for c_ptr/c_funptr.\n+!\n+\n+use iso_c_binding\n+implicit none\n+type(c_funptr) :: cfp\n+\n+integer, external :: noCsub\n+procedure(integer), pointer :: fint\n+\n+cfp = c_funloc (noCsub)\n+call c_f_procpointer (cfp, fint)\n+end\n+\n+! { dg-final { scan-tree-dump-times \"cfp =\\[^;\\]+ nocsub;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"fint =\\[^;\\]+ cfp;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+"}]}