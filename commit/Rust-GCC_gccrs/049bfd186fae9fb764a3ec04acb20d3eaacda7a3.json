{"sha": "049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5YmZkMTg2ZmFlOWZiNzY0YTNlYzA0YWNiMjBkM2VhYWNkYTdhMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-01-19T10:57:34Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-01-19T10:58:21Z"}, "message": "OpenMP/Fortran: Fixes for {use,is}_device_ptr\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/98476\n\t* openmp.c (resolve_omp_clauses): Change use_device_ptr\n\tto use_device_addr for unless type(c_ptr); check all\n\tlist item for is_device_ptr.\n\ngcc/ChangeLog:\n\n\tPR fortran/98476\n\t* omp-low.c (lower_omp_target): Handle nonpointer is_device_ptr.\n\nlibgomp/ChangeLog:\n\n\tPR fortran/98476\n\t* testsuite/libgomp.fortran/is_device_ptr-1.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/98476\n\t* gfortran.dg/gomp/map-3.f90: Update expected scan-dump-tree.\n\t* gfortran.dg/gomp/is_device_ptr-2.f90: New test.\n\t* gfortran.dg/gomp/use_device_ptr-1.f90: New test.", "tree": {"sha": "ccfc528fa1495feaf59625d72f52ad034f229d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfc528fa1495feaf59625d72f52ad034f229d37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8741c98f2876a430c12c85b396d29a87c9c488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8741c98f2876a430c12c85b396d29a87c9c488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8741c98f2876a430c12c85b396d29a87c9c488"}], "stats": {"total": 183, "additions": 160, "deletions": 23}, "files": [{"sha": "9a3a8f63b5e28d5f27ff7133768bab524310dd84", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -5345,22 +5345,25 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t}\n \t    break;\n \t  case OMP_LIST_IS_DEVICE_PTR:\n-\t    if (!n->sym->attr.dummy)\n-\t      gfc_error (\"Non-dummy object %qs in %s clause at %L\",\n-\t\t\t n->sym->name, name, &n->where);\n-\t    if (n->sym->attr.allocatable\n-\t\t|| (n->sym->ts.type == BT_CLASS\n-\t\t    && CLASS_DATA (n->sym)->attr.allocatable))\n-\t      gfc_error (\"ALLOCATABLE object %qs in %s clause at %L\",\n-\t\t\t n->sym->name, name, &n->where);\n-\t    if (n->sym->attr.pointer\n-\t\t|| (n->sym->ts.type == BT_CLASS\n-\t\t    && CLASS_DATA (n->sym)->attr.pointer))\n-\t      gfc_error (\"POINTER object %qs in %s clause at %L\",\n-\t\t\t n->sym->name, name, &n->where);\n-\t    if (n->sym->attr.value)\n-\t      gfc_error (\"VALUE object %qs in %s clause at %L\",\n-\t\t\t n->sym->name, name, &n->where);\n+\t    for (n = omp_clauses->lists[list]; n != NULL; n = n->next)\n+\t      {\n+\t\tif (!n->sym->attr.dummy)\n+\t\t  gfc_error (\"Non-dummy object %qs in %s clause at %L\",\n+\t\t\t     n->sym->name, name, &n->where);\n+\t\tif (n->sym->attr.allocatable\n+\t\t    || (n->sym->ts.type == BT_CLASS\n+\t\t\t&& CLASS_DATA (n->sym)->attr.allocatable))\n+\t\t  gfc_error (\"ALLOCATABLE object %qs in %s clause at %L\",\n+\t\t\t     n->sym->name, name, &n->where);\n+\t\tif (n->sym->attr.pointer\n+\t\t    || (n->sym->ts.type == BT_CLASS\n+\t\t\t&& CLASS_DATA (n->sym)->attr.pointer))\n+\t\t  gfc_error (\"POINTER object %qs in %s clause at %L\",\n+\t\t\t     n->sym->name, name, &n->where);\n+\t\tif (n->sym->attr.value)\n+\t\t  gfc_error (\"VALUE object %qs in %s clause at %L\",\n+\t\t\t     n->sym->name, name, &n->where);\n+\t      }\n \t    break;\n \t  case OMP_LIST_USE_DEVICE_PTR:\n \t  case OMP_LIST_USE_DEVICE_ADDR:\n@@ -5657,6 +5660,38 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t    break;\n \t  }\n       }\n+  /* OpenMP 5.1: use_device_ptr acts like use_device_addr, except for\n+     type(c_ptr).  */\n+  if (omp_clauses->lists[OMP_LIST_USE_DEVICE_PTR])\n+    {\n+      gfc_omp_namelist *n_prev, *n_next, *n_addr;\n+      n_addr = omp_clauses->lists[OMP_LIST_USE_DEVICE_ADDR];\n+      for (; n_addr && n_addr->next; n_addr = n_addr->next)\n+\t;\n+      n_prev = NULL;\n+      n = omp_clauses->lists[OMP_LIST_USE_DEVICE_PTR];\n+      while (n)\n+\t{\n+\t  n_next = n->next;\n+\t  if (n->sym->ts.type != BT_DERIVED\n+\t      || n->sym->ts.u.derived->ts.f90_type != BT_VOID)\n+\t    {\n+\t      n->next = NULL;\n+\t      if (n_addr)\n+\t\tn_addr->next = n;\n+\t      else\n+\t\tomp_clauses->lists[OMP_LIST_USE_DEVICE_ADDR] = n;\n+\t      n_addr = n;\n+\t      if (n_prev)\n+\t\tn_prev->next = n_next;\n+\t      else\n+\t\tomp_clauses->lists[OMP_LIST_USE_DEVICE_PTR] = n_next;\n+\t    }\n+\t  else\n+\t    n_prev = n;\n+\t  n = n_next;\n+\t}\n+    }\n   if (omp_clauses->safelen_expr)\n     resolve_positive_int_expr (omp_clauses->safelen_expr, \"SAFELEN\");\n   if (omp_clauses->simdlen_expr)"}, {"sha": "df5b6cec58623e7fe9f1a45550ba837042ae250b", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -12520,7 +12520,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t    || omp_is_allocatable_or_ptr (ovar))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n-\t\t    if (TREE_CODE (type) != ARRAY_TYPE\n+\t\t    if (POINTER_TYPE_P (type)\n+\t\t\t&& TREE_CODE (type) != ARRAY_TYPE\n \t\t\t&& ((OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t\t    && !omp_is_allocatable_or_ptr (ovar))\n \t\t\t   || (omp_is_reference (ovar)\n@@ -12784,7 +12785,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tif (omp_is_reference (var))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n-\t\t    if (TREE_CODE (type) != ARRAY_TYPE\n+\t\t    if (POINTER_TYPE_P (type)\n+\t\t\t&& TREE_CODE (type) != ARRAY_TYPE\n \t\t\t&& (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t\t    || (omp_is_reference (var)\n \t\t\t\t&& omp_is_allocatable_or_ptr (var))))"}, {"sha": "bf498208aa852bbf0f11c597bba309489ce71d31", "filename": "gcc/testsuite/gfortran.dg/gomp/is_device_ptr-2.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -0,0 +1,21 @@\n+! PR fortran/98476\n+\n+subroutine abc(cc)\n+    integer, target :: cc, dd\n+    cc = 131\n+    dd = 484\n+\n+    !$omp target enter data map(to: cc, dd)\n+\n+    !$omp target data use_device_addr(cc) use_device_ptr(dd)\n+      !$omp target is_device_ptr(cc, dd)  ! { dg-error \"Non-dummy object 'cc' in IS_DEVICE_PTR clause at\" }\n+        if (cc /= 131 .or. dd /= 484) stop 1\n+        cc = 44\n+        dd = 45\n+      !$omp end target\n+    !$omp end target data\n+\n+    !$omp target exit data map(from:cc, dd)\n+\n+    if (cc /= 44 .or. dd /= 45) stop 5\n+end"}, {"sha": "bdd2890b277f6257649bb15c4ca08dc685d59888", "filename": "gcc/testsuite/gfortran.dg/gomp/map-3.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -1,10 +1,10 @@\n ! { dg-additional-options \"-fdump-tree-original\" }\n \n subroutine bar\n-integer, target :: x\n+integer, target :: x, x2\n integer, allocatable, target :: y(:,:), z(:,:)\n x = 7\n-!$omp target enter data map(to:x)\n+!$omp target enter data map(to:x, x2)\n \n x = 8\n !$omp target data map(always, to: x)\n@@ -15,7 +15,7 @@ subroutine bar\n call foo2(x)\n !$omp end target data\n \n-!$omp target data use_device_addr(x)\n+!$omp target data use_device_addr(x2)\n call foo2(x)\n !$omp end target data\n !$omp target exit data map(release:x)\n@@ -31,8 +31,8 @@ subroutine bar\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp target enter data map\\\\(to:x\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(always,to:x\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target data use_device_ptr\\\\(x\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data use_device_addr\\\\(x\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data use_device_addr\\\\(x2\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target exit data map\\\\(release:x\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) y.data \\\\\\[len: .*\\\\) map\\\\(to:y \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*y.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(y\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) z.data \\\\\\[len: .*\\\\) map\\\\(to:z \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*z.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_ptr\\\\(z\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) z.data \\\\\\[len: .*\\\\) map\\\\(to:z \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*z.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(z\\\\)\" 1 \"original\" } }"}, {"sha": "6f47fddf7cb2814147c7f1eadaf3aee18d549574", "filename": "gcc/testsuite/gfortran.dg/gomp/use_device_ptr-1.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fuse_device_ptr-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fuse_device_ptr-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fuse_device_ptr-1.f90?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+! PR fortran/98476\n+\n+use iso_c_binding, only: c_ptr\n+implicit none (external, type)\n+\n+interface\n+  subroutine bar(x)\n+    import\n+    type(c_ptr), value :: x\n+  end\n+end interface\n+\n+type(c_ptr) :: x\n+\n+!$omp target data map(alloc: x)\n+!$omp target data use_device_ptr(x)\n+  call bar(x)\n+!$omp end target data\n+!$omp end target data\n+end\n+\n+! { dg-final { scan-tree-dump-times \"pragma omp target data use_device_ptr\\\\(x\\\\)\" 1 \"original\" } }"}, {"sha": "30a927a19ba199e312acf9a115d821aa27a1d400", "filename": "libgomp/testsuite/libgomp.fortran/is_device_ptr-1.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049bfd186fae9fb764a3ec04acb20d3eaacda7a3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-1.f90?ref=049bfd186fae9fb764a3ec04acb20d3eaacda7a3", "patch": "@@ -0,0 +1,54 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+! PR fortran/98476\n+\n+program abc\n+  implicit none\n+  integer a, b\n+\n+  a = 83\n+  b = 73\n+  call test(a, b)\n+\n+contains\n+  subroutine test(aa, bb)\n+    use iso_c_binding, only: c_ptr, c_loc, c_f_pointer\n+    integer :: aa, bb\n+    integer, target :: cc, dd\n+    type(c_ptr) :: pcc, pdd\n+    cc = 131\n+    dd = 484\n+\n+    !$omp target enter data map(to: aa, bb, cc, dd)\n+\n+    !$omp target data use_device_ptr(aa, cc) use_device_addr(bb, dd)\n+      pcc = c_loc(cc)\n+      pdd = c_loc(dd)\n+\n+      ! TODO: has_device_addr(cc, dd)\n+      !$omp target is_device_ptr(aa, bb)\n+        if (aa /= 83 .or. bb /= 73) stop 1\n+        aa = 42\n+        bb = 43\n+        block\n+          integer, pointer :: c2, d2\n+          call c_f_pointer(pcc, c2)\n+          call c_f_pointer(pdd, d2)\n+          if (c2 /= 131 .or. d2 /= 484) stop 2\n+          c2 = 44\n+          d2 = 45\n+        end block\n+      !$omp end target\n+    !$omp end target data\n+\n+    !$omp target exit data map(from:aa, bb, cc, dd)\n+\n+    if (aa /= 42 .or. bb /= 43) stop 3\n+    if (cc /= 44 .or. dd /= 45) stop 5\n+  endsubroutine\n+end program\n+\n+! { dg-final { scan-tree-dump-times \"omp target data .*use_device_addr\\\\(aa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp target data .*use_device_addr\\\\(bb\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp target data .*use_device_addr\\\\(cc\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp target data .*use_device_addr\\\\(dd\\\\)\" 1 \"original\" } }"}]}