{"sha": "e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllNGIzYTg5MmQwZDE5NDE4ZjIzYmIxN2JkZWFjMzNmOWE4YmZkMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-09T22:31:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-09T22:31:53Z"}, "message": "re PR lto/41638 (Back-end builtins are mishandled)\n\n2009-10-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41638\n\t* target-def.h (TARGET_BUILTIN_DECL): Define.\n\t(TARGET_INITIALIZER): Add TARGET_BUILTIN_DECL.\n\t* target.h (struct gcc_target): Add builtin_decl target hook.\n\t* doc/tm.texi (TARGET_BUILTIN_DECL): Document.\n\n\t* lto-streamer-in.c (lto_get_builtin_tree): Fix handling of\n\ttarget builtins.\n\t* lto-streamer-out.c (lto_output_tree_pointers): Use sorry,\n\tnot gcc_unreachable.\n\t(lto_output_builtin_tree): Sorry if the target does not support\n\tstreaming target builtins.\n\n\t* config/rs6000/rs6000.c (TARGET_BUILTIN_DECL): Define.\n\t(rs6000_builtin_decl): New function.\n\t* config/i386/i386.c (TARGET_BUILTIN_DECL): Define.\n\t(ix86_builtin_decl): New function.\n\nFrom-SVN: r152606", "tree": {"sha": "8ac7173644937212b4dfddf787410b0ecfa43674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ac7173644937212b4dfddf787410b0ecfa43674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0a9804e353b33d339e20f0aa2bd458a4ff08649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a9804e353b33d339e20f0aa2bd458a4ff08649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a9804e353b33d339e20f0aa2bd458a4ff08649"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "50aebde213958df4bd82b27296cdefc130ead125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -1,3 +1,21 @@\n+2009-10-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41638\n+\t* target-def.h (TARGET_BUILTIN_DECL): Define.\n+\t(TARGET_INITIALIZER): Add TARGET_BUILTIN_DECL.\n+\t* target.h (struct gcc_target): Add builtin_decl target hook.\n+\t* doc/tm.texi (TARGET_BUILTIN_DECL): Document.\n+\t* lto-streamer-in.c (lto_get_builtin_tree): Fix handling of\n+\ttarget builtins.\n+\t* lto-streamer-out.c (lto_output_tree_pointers): Use sorry,\n+\tnot gcc_unreachable.\n+\t(lto_output_builtin_tree): Sorry if the target does not support\n+\tstreaming target builtins.\n+\t* config/rs6000/rs6000.c (TARGET_BUILTIN_DECL): Define.\n+\t(rs6000_builtin_decl): New function.\n+\t* config/i386/i386.c (TARGET_BUILTIN_DECL): Define.\n+\t(ix86_builtin_decl): New function.\n+\n 2009-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/41445"}, {"sha": "0d0628bc3830d8a8d07cbbaafd826e7d4906d79d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -23443,6 +23443,17 @@ ix86_init_builtins (void)\n     ix86_init_builtins_va_builtins_abi ();\n }\n \n+/* Return the ix86 builtin for CODE.  */\n+\n+static tree\n+ix86_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (code >= IX86_BUILTIN_MAX)\n+    return error_mark_node;\n+\n+  return ix86_builtins[code];\n+}\n+\n /* Errors in the source file can cause expand_expr to return const0_rtx\n    where we expect a vector.  To avoid crashing, use one of the vector\n    clear instructions.  */\n@@ -29666,6 +29677,8 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n \n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS ix86_init_builtins\n+#undef TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL ix86_builtin_decl\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n "}, {"sha": "319af631933f348eebf50b1fad44967bea130631", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -947,6 +947,8 @@ static bool rs6000_builtin_support_vector_misalignment (enum\n static void def_builtin (int, const char *, tree, int);\n static bool rs6000_vector_alignment_reachable (const_tree, bool);\n static void rs6000_init_builtins (void);\n+static tree rs6000_builtin_decl (unsigned, bool);\n+\n static rtx rs6000_expand_unop_builtin (enum insn_code, tree, rtx);\n static rtx rs6000_expand_binop_builtin (enum insn_code, tree, rtx);\n static rtx rs6000_expand_ternop_builtin (enum insn_code, tree, rtx);\n@@ -1332,6 +1334,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS rs6000_init_builtins\n+#undef TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL rs6000_builtin_decl\n \n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n@@ -11144,6 +11148,17 @@ rs6000_init_builtins (void)\n #endif\n }\n \n+/* Returns the rs6000 builtin decl for CODE.  */\n+\n+static tree\n+rs6000_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (code >= RS6000_BUILTIN_COUNT)\n+    return error_mark_node;\n+\n+  return rs6000_builtin_decls[code];\n+}\n+\n /* Search through a set of builtins and enable the mask bits.\n    DESC is an array of builtins.\n    SIZE is the total number of builtins."}, {"sha": "db42742e9e2f87628e34a68dc9d701b2a56ffe3e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -10532,6 +10532,16 @@ only language front ends that use those two functions will call\n @samp{TARGET_INIT_BUILTINS}.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_BUILTIN_FUNCTION (unsigned @var{code}, bool @var{initialize_p})\n+Define this hook if you have any machine-specific built-in functions\n+that need to be defined.  It should be a function that returns the\n+builtin function declaration for the builtin function code @var{code}.\n+If there is no such builtin and it cannot be initialized at this time\n+if @var{initialize_p} is true the function should return @code{NULL_TREE}.\n+If @var{code} is out of range the function should return\n+@code{error_mark_node}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} rtx TARGET_EXPAND_BUILTIN (tree @var{exp}, rtx @var{target}, rtx @var{subtarget}, enum machine_mode @var{mode}, int @var{ignore})\n \n Expand a call to a machine specific built-in function that was set up by"}, {"sha": "d9c207d0b7f09dd6708f99a74987991cc56196be", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -2377,13 +2377,22 @@ lto_get_builtin_tree (struct lto_input_block *ib, struct data_in *data_in)\n   gcc_assert (fclass == BUILT_IN_NORMAL || fclass == BUILT_IN_MD);\n \n   fcode = (enum built_in_function) lto_input_uleb128 (ib);\n-  gcc_assert (fcode < END_BUILTINS);\n \n   ix = lto_input_sleb128 (ib);\n   gcc_assert (ix == (int) ix);\n \n-  result = built_in_decls[fcode];\n-  gcc_assert (result);\n+  if (fclass == BUILT_IN_NORMAL)\n+    {\n+      gcc_assert (fcode < END_BUILTINS);\n+      result = built_in_decls[fcode];\n+      gcc_assert (result);\n+    }\n+  else if (fclass == BUILT_IN_MD)\n+    {\n+      result = targetm.builtin_decl (fcode, true);\n+      if (!result || result == error_mark_node)\n+\tfatal_error (\"target specific builtin not available\");\n+    }\n \n   asmname = input_string (data_in, ib);\n   if (asmname)"}, {"sha": "9d097f0b5033d2f474e6e12c7819f7f62838b614", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -1165,16 +1165,10 @@ lto_output_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    {\n-      /* FIXME lto.  Not handled yet.  */\n-      gcc_unreachable ();\n-    }\n+    sorry (\"gimple bytecode streams do not support the optimization attribute\");\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    {\n-      /* FIXME lto.  Not handled yet.  */\n-      gcc_unreachable ();\n-    }\n+    sorry (\"gimple bytecode streams do not support the target attribute\");\n }\n \n \n@@ -1234,6 +1228,11 @@ lto_output_builtin_tree (struct output_block *ob, tree expr, int ix)\n {\n   gcc_assert (lto_stream_as_builtin_p (expr));\n \n+  if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_MD\n+      && !targetm.builtin_decl)\n+    sorry (\"gimple bytecode streams do not support machine specific builtin \"\n+\t   \"functions on this target\");\n+\n   output_record_start (ob, LTO_builtin_decl);\n   output_uleb128 (ob, DECL_BUILT_IN_CLASS (expr));\n   output_uleb128 (ob, DECL_FUNCTION_CODE (expr));"}, {"sha": "96b43eb9a9ded8aebbab0e04d7a2a7022240ba6d", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -437,6 +437,7 @@\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n #define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n #define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n+#define TARGET_BUILTIN_DECL NULL\n \n /* In tree-ssa-math-opts.c  */\n #define TARGET_BUILTIN_RECIPROCAL default_builtin_reciprocal\n@@ -880,6 +881,7 @@\n   TARGET_ALIGN_ANON_BITFIELD,\t\t\t\\\n   TARGET_NARROW_VOLATILE_BITFIELD,\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n+  TARGET_BUILTIN_DECL,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\"}, {"sha": "c65063cbfc604a8d9a7ffbb19e8883badb8a79da", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=e9e4b3a892d0d19418f23bb17bdeac33f9a8bfd2", "patch": "@@ -562,6 +562,12 @@ struct gcc_target\n   /* Set up target-specific built-in functions.  */\n   void (* init_builtins) (void);\n \n+  /* Initialize (if INITIALIZE_P is true) and return the target-specific\n+     built-in function decl for CODE.\n+     Return NULL if that is not possible.  Return error_mark_node if CODE\n+     is outside of the range of valid target builtin function codes.  */\n+  tree (* builtin_decl) (unsigned code, bool initialize_p);\n+\n   /* Expand a target-specific builtin.  */\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);"}]}