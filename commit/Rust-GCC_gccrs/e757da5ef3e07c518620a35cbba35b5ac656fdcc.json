{"sha": "e757da5ef3e07c518620a35cbba35b5ac656fdcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1N2RhNWVmM2UwN2M1MTg2MjBhMzVjYmJhMzViNWFjNjU2ZmRjYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-22T23:21:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-22T23:21:24Z"}, "message": "recog.c (validate_replace_rtx_group): New function.\n\n\ufffd\n        * recog.c (validate_replace_rtx_group): New function.\n        * recog.h (validate_replace_rtx_group): Declare it.\n        * regmove.c (optimize_reg_copy_3): If any substitution fails, then undo\n        the entire group of substitutions.\n\nFrom-SVN: r21910", "tree": {"sha": "6e6ec836aedf9ef4467ecc2d2415fd0259f4e746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e6ec836aedf9ef4467ecc2d2415fd0259f4e746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e757da5ef3e07c518620a35cbba35b5ac656fdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e757da5ef3e07c518620a35cbba35b5ac656fdcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e757da5ef3e07c518620a35cbba35b5ac656fdcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e757da5ef3e07c518620a35cbba35b5ac656fdcc/comments", "author": null, "committer": null, "parents": [{"sha": "edfac33e828bec837550da110999793dd436a551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfac33e828bec837550da110999793dd436a551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfac33e828bec837550da110999793dd436a551"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "980b76f70d7c7a059364c0b840a9d199a35f4c0e", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e757da5ef3e07c518620a35cbba35b5ac656fdcc/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e757da5ef3e07c518620a35cbba35b5ac656fdcc/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=e757da5ef3e07c518620a35cbba35b5ac656fdcc", "patch": "@@ -32,6 +32,7 @@ extern int constrain_operands\t\tPROTO((int, int));\n extern int memory_address_p\t\tPROTO((enum machine_mode, rtx));\n extern int strict_memory_address_p\tPROTO((enum machine_mode, rtx));\n extern int validate_replace_rtx\t\tPROTO((rtx, rtx, rtx));\n+extern void validate_replace_rtx_group\tPROTO((rtx, rtx, rtx));\n extern int validate_replace_src\t\tPROTO((rtx, rtx, rtx));\n extern int reg_fits_class_p\t\tPROTO((rtx, enum reg_class, int,\n \t\t\t\t\t       enum machine_mode));"}, {"sha": "b4f7b6dd1bc316899448e2bfbbbdde5427d01b2c", "filename": "gcc/regmove.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e757da5ef3e07c518620a35cbba35b5ac656fdcc/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e757da5ef3e07c518620a35cbba35b5ac656fdcc/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=e757da5ef3e07c518620a35cbba35b5ac656fdcc", "patch": "@@ -549,23 +549,32 @@ optimize_reg_copy_3 (insn, dest, src)\n   old_mode = GET_MODE (src_reg);\n   PUT_MODE (src_reg, GET_MODE (src));\n   XEXP (src, 0) = SET_SRC (set);\n-  if (! validate_change (p, &SET_SRC (set), src, 0))\n-    {\n-      PUT_MODE (src_reg, old_mode);\n-      XEXP (src, 0) = src_reg;\n-      return;\n-    }\n+\n+  /* Include this change in the group so that it's easily undone if\n+     one of the changes in the group is invalid.  */\n+  validate_change (p, &SET_SRC (set), src, 1);\n+\n+  /* Now walk forward making additional replacements.  We want to be able\n+     to undo all the changes if a later substitution fails.  */\n   subreg = gen_rtx_SUBREG (old_mode, src_reg, 0);\n   while (p = NEXT_INSN (p), p != insn)\n     {\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \tcontinue;\n-      /* If we can not perform the replacement, then abort now\n-\t to make debugging easier.  */\n-      if (! validate_replace_rtx (src_reg, subreg, p))\n-\tabort ();\n+\n+      /* Make a tenative change.  */\n+      validate_replace_rtx_group (src_reg, subreg, p);\n+    }\n+\n+  validate_replace_rtx_group (src, src_reg, insn);\n+\n+  /* Now see if all the changes are valid.  */\n+  if (! apply_change_group ())\n+    {\n+      /* One or more changes were no good.  Back out everything.  */\n+      PUT_MODE (src_reg, old_mode);\n+      XEXP (src, 0) = src_reg;\n     }\n-  validate_replace_rtx (src, src_reg, insn);\n }\n \n \f"}]}