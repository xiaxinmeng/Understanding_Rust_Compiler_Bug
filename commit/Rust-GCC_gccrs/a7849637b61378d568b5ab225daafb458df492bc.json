{"sha": "a7849637b61378d568b5ab225daafb458df492bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4NDk2MzdiNjEzNzhkNTY4YjVhYjIyNWRhYWZiNDU4ZGY0OTJiYw==", "commit": {"author": {"name": "Bernhard Fischer", "email": "aldot@gcc.gnu.org", "date": "2008-06-20T08:30:26Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2008-06-20T08:30:26Z"}, "message": "tree-ssa-pre.c: Fix typo in comment.\n\n2008-06-20  Bernhard Fischer  <aldot@gcc.gnu.org>\n\n        * tree-ssa-pre.c: Fix typo in comment.\n        (init_antic, fini_antic): Add explicit funtions for\n        initializing and deinitializing ANTIC and AVAIL sets.\n        (create_expression_by_pieces): Fix typo in comment.\n        Remove redundant set of new_stuff and use NULL_TREE instead of\n        NULL.\n        (execute_pre): Eventually dump details about ANTIC_IN.\n\nFrom-SVN: r136984", "tree": {"sha": "5daa9e57b80706495de3926d03f89389ef66ac28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5daa9e57b80706495de3926d03f89389ef66ac28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7849637b61378d568b5ab225daafb458df492bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7849637b61378d568b5ab225daafb458df492bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7849637b61378d568b5ab225daafb458df492bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7849637b61378d568b5ab225daafb458df492bc/comments", "author": null, "committer": null, "parents": [{"sha": "ece3f6639db4f74c38080858ff7629695635c284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece3f6639db4f74c38080858ff7629695635c284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece3f6639db4f74c38080858ff7629695635c284"}], "stats": {"total": 147, "additions": 93, "deletions": 54}, "files": [{"sha": "908ccc1e71bd0a297ed5e77d0114d1866947e5e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7849637b61378d568b5ab225daafb458df492bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7849637b61378d568b5ab225daafb458df492bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7849637b61378d568b5ab225daafb458df492bc", "patch": "@@ -1,3 +1,13 @@\n+2008-06-20  Bernhard Fischer  <aldot@gcc.gnu.org>\n+\n+        * tree-ssa-pre.c: Fix typo in comment.\n+        (init_antic, fini_antic): Add explicit funtions for\n+        initializing and deinitializing ANTIC and AVAIL sets.\n+        (create_expression_by_pieces): Fix typo in comment.\n+        Remove redundant set of new_stuff and use NULL_TREE instead of\n+        NULL.\n+        (execute_pre): Eventually dump details about ANTIC_IN.\n+\n 2008-06-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* collect2.c (main, add_to_list): Fix for -Wc++-compat.\n@@ -14,7 +24,7 @@\n 2008-06-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* doc/rtl.texi: Updated subreg section.\n-\t\n+\n 2008-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36523"}, {"sha": "5e3cfd679ff425cfe078870bb899995b3723596b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 82, "deletions": 53, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7849637b61378d568b5ab225daafb458df492bc/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7849637b61378d568b5ab225daafb458df492bc/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a7849637b61378d568b5ab225daafb458df492bc", "patch": "@@ -132,7 +132,7 @@ along with GCC; see the file COPYING3.  If not see\n \n    Expression nodes have value handles associated with them as a\n    cache.  Otherwise, we'd have to look them up again in the hash\n-   table This makes significant difference (factor of two or more) on\n+   table.  This makes significant difference (factor of two or more) on\n    some test cases.  They can be thrown away after the pass is\n    finished.  */\n \n@@ -1967,6 +1967,73 @@ compute_partial_antic_aux (basic_block block,\n   return changed;\n }\n \n+/* Initialize data structures used for ANTIC and AVAIL.  */\n+\n+static void\n+init_antic (void)\n+{\n+  basic_block bb;\n+\n+  next_expression_id = 0;\n+  expressions = NULL;\n+  expression_vuses = NULL;\n+\n+  postorder = XNEWVEC (int, n_basic_blocks - NUM_FIXED_BLOCKS);\n+  post_order_compute (postorder, false, false);\n+\n+  bitmap_obstack_initialize (&grand_bitmap_obstack);\n+  obstack_init (&temp_call_expr_obstack);\n+  seen_during_translate = BITMAP_ALLOC (&grand_bitmap_obstack);\n+\n+  bitmap_set_pool = create_alloc_pool (\"Bitmap sets\",\n+\t\t\t\t\tsizeof (struct bitmap_set), 30);\n+  binary_node_pool = create_alloc_pool (\"Binary tree nodes\",\n+\t\t\t\t\ttree_code_size (PLUS_EXPR), 30);\n+  unary_node_pool = create_alloc_pool (\"Unary tree nodes\",\n+\t\t\t\t       tree_code_size (NEGATE_EXPR), 30);\n+  reference_node_pool = create_alloc_pool (\"Reference tree nodes\",\n+\t\t\t\t\t   tree_code_size (ARRAY_REF), 30);\n+  comparison_node_pool = create_alloc_pool (\"Comparison tree nodes\",\n+\t\t\t\t\t    tree_code_size (EQ_EXPR), 30);\n+\n+  phi_translate_table = htab_create (5110, expr_pred_trans_hash,\n+\t\t\t\t     expr_pred_trans_eq, free);\n+  maximal_set = in_fre ? NULL : bitmap_set_new ();\n+\n+  FOR_ALL_BB (bb)\n+    {\n+      bb->aux = xcalloc (1, sizeof (struct bb_bitmap_sets));\n+      EXP_GEN (bb) = bitmap_set_new ();\n+      PHI_GEN (bb) = bitmap_set_new ();\n+      TMP_GEN (bb) = bitmap_set_new ();\n+      AVAIL_OUT (bb) = bitmap_set_new ();\n+    }\n+}\n+\n+/* Deinitialize data structures used for ANTIC and AVAIL.  */\n+\n+static void\n+fini_antic (void)\n+{\n+  basic_block bb;\n+\n+  free (postorder);\n+  bitmap_obstack_release (&grand_bitmap_obstack);\n+  free_alloc_pool (bitmap_set_pool);\n+  free_alloc_pool (binary_node_pool);\n+  free_alloc_pool (reference_node_pool);\n+  free_alloc_pool (unary_node_pool);\n+  free_alloc_pool (comparison_node_pool);\n+\n+  if (maximal_set)\n+    bitmap_set_free (maximal_set);\n+  FOR_ALL_BB (bb)\n+    {\n+      free (bb->aux);\n+      bb->aux = NULL;\n+    }\n+}\n+\n /* Compute ANTIC and partial ANTIC sets.  */\n \n static void\n@@ -2414,7 +2481,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts,\n \t\t\t\t  false, NULL);\n \n   /* If we have any intermediate expressions to the value sets, add them\n-     to the value sets and chain them on in the instruction stream.  */\n+     to the value sets and chain them in the instruction stream.  */\n   if (forced_stmts)\n     {\n       tsi = tsi_start (forced_stmts);\n@@ -2931,7 +2998,6 @@ insert (void)\n   while (new_stuff)\n     {\n       num_iterations++;\n-      new_stuff = false;\n       new_stuff = insert_aux (ENTRY_BLOCK_PTR);\n     }\n   statistics_histogram_event (cfun, \"insert iterations\", num_iterations);\n@@ -3833,7 +3899,7 @@ remove_dead_inserted_code (void)\n \n \t  if (TREE_CODE (t) == PHI_NODE)\n \t    {\n-\t      remove_phi_node (t, NULL, true);\n+\t      remove_phi_node (t, NULL_TREE, true);\n \t    }\n \t  else\n \t    {\n@@ -3851,11 +3917,6 @@ remove_dead_inserted_code (void)\n static void\n init_pre (bool do_fre)\n {\n-  basic_block bb;\n-\n-  next_expression_id = 0;\n-  expressions = NULL;\n-  expression_vuses = NULL;\n   in_fre = do_fre;\n \n   inserted_exprs = NULL;\n@@ -3870,40 +3931,10 @@ init_pre (bool do_fre)\n   connect_infinite_loops_to_exit ();\n   memset (&pre_stats, 0, sizeof (pre_stats));\n \n-\n-  postorder = XNEWVEC (int, n_basic_blocks - NUM_FIXED_BLOCKS);\n-  post_order_compute (postorder, false, false);\n-\n-  FOR_ALL_BB (bb)\n-    bb->aux = xcalloc (1, sizeof (struct bb_bitmap_sets));\n-\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  bitmap_obstack_initialize (&grand_bitmap_obstack);\n-  phi_translate_table = htab_create (5110, expr_pred_trans_hash,\n-\t\t\t\t     expr_pred_trans_eq, free);\n-  seen_during_translate = BITMAP_ALLOC (&grand_bitmap_obstack);\n-  bitmap_set_pool = create_alloc_pool (\"Bitmap sets\",\n-\t\t\t\t       sizeof (struct bitmap_set), 30);\n-  binary_node_pool = create_alloc_pool (\"Binary tree nodes\",\n-\t\t\t\t\ttree_code_size (PLUS_EXPR), 30);\n-  unary_node_pool = create_alloc_pool (\"Unary tree nodes\",\n-\t\t\t\t       tree_code_size (NEGATE_EXPR), 30);\n-  reference_node_pool = create_alloc_pool (\"Reference tree nodes\",\n-\t\t\t\t\t   tree_code_size (ARRAY_REF), 30);\n-  comparison_node_pool = create_alloc_pool (\"Comparison tree nodes\",\n-\t\t\t\t\t    tree_code_size (EQ_EXPR), 30);\n-  obstack_init (&temp_call_expr_obstack);\n-\n-  FOR_ALL_BB (bb)\n-    {\n-      EXP_GEN (bb) = bitmap_set_new ();\n-      PHI_GEN (bb) = bitmap_set_new ();\n-      TMP_GEN (bb) = bitmap_set_new ();\n-      AVAIL_OUT (bb) = bitmap_set_new ();\n-    }\n-  maximal_set = in_fre ? NULL : bitmap_set_new ();\n+  init_antic ();\n \n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n }\n@@ -3914,26 +3945,14 @@ init_pre (bool do_fre)\n static void\n fini_pre (void)\n {\n-  basic_block bb;\n   unsigned int i;\n \n-  free (postorder);\n   VEC_free (tree, heap, inserted_exprs);\n   VEC_free (tree, heap, need_creation);\n-  bitmap_obstack_release (&grand_bitmap_obstack);\n-  free_alloc_pool (bitmap_set_pool);\n-  free_alloc_pool (binary_node_pool);\n-  free_alloc_pool (reference_node_pool);\n-  free_alloc_pool (unary_node_pool);\n-  free_alloc_pool (comparison_node_pool);\n   htab_delete (phi_translate_table);\n   remove_fake_exit_edges ();\n \n-  FOR_ALL_BB (bb)\n-    {\n-      free (bb->aux);\n-      bb->aux = NULL;\n-    }\n+  fini_antic ();\n \n   free_dominance_info (CDI_POST_DOMINATORS);\n \n@@ -4009,6 +4028,16 @@ execute_pre (bool do_fre)\n   if (!do_fre && n_basic_blocks < 4000)\n     {\n       compute_antic ();\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      basic_block bb;\n+\n+      FOR_ALL_BB (bb)\n+\t{\n+\t  print_bitmap_set (dump_file, ANTIC_IN (bb), \"antic_in\", bb->index);\n+\t}\n+    }\n+\n       insert ();\n     }\n "}]}