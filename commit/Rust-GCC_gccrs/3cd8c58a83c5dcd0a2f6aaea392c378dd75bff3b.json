{"sha": "3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkOGM1OGE4M2M1ZGNkMGEyZjZhYWVhMzkyYzM3OGRkNzViZmYzYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-04T08:41:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-04T08:41:16Z"}, "message": "bitmap.c (bitmap_print): Make bitno unsigned.\n\n\t* bitmap.c (bitmap_print): Make bitno unsigned.\n\t* bt-load.c (clear_btr_from_live_range,\n\tbtr_def_live_range): Likewise.\n\t* caller-save.c (save_call_clobbered_regs): Likewise.\n\t* cfganal.c (compute_dominance_frontiers_1): Likewise.\n\t* cfgcleanup.c (thread_jump): Likewise.\n\t* cfgrtl.c (safe_insert_insn_on_edge): Likewise.\n\t* conflict.c (conflict_graph_compute): Likewise.\n\t* ddg.c (add_deps_for_use): Likewise.\n\t* df.c (df_refs_update): Likewise.\n\t* except.c (remove_eh_handler): Likewise.\n\t* flow.c (verify_local_live_at_start, update_life_info,\n\tinitialize_uninitialized_subregs, propagate_one_insn,\n\tfree_propagate_block_info, propagate_block, find_use_as_address,\n\treg_set_to_hard_reg_set): Likewise.\n\t* gcse.c (clear_modify_mem_tables): Likewise.\n\t* global.c (global_conflicts, build_insn_chain): Likewise.\n\t* ifcvt.c (dead_or_predicable): Likewise.\n\t* local-alloc.c (update_equiv_regs): Likewise.\n\t* loop.c (load_mems): Likewise.\n\t* ra-build.c (livethrough_conflicts_bb, conflicts_between_webs):\n\tLikewise.\n\t* ra-rewrite.c (reloads_to_loads, rewrite_program2, actual_spill):\n\tLikewise.\n\t* reload1.c (order_regs_for_reload, finish_spills): Likewise.\n\t* sched-deps.c (sched_analyze_insn, free_deps): Likewise.\n\t* sched-rgn.c (propagate_deps\n\t* tree-cfg.c (tree_purge_all_dead_eh_edges): Likewise.\n\t* tree-dfa.c (dump_dfa_stats\n\ttree-into-ssa.c (compute_global_livein, insert_phi_nodes,\n\tinsert_phi_nodes_for, debug_def_blocks_r, invalidate_name_tags):\n\tLikewise.\n\t* tree-outof-ssa.c (coalesce_ssa_name, coalesce_vars,\n\tfree_temp_expr_table, find_replaceable_exprs): Likewise.\n\t* tree-sra.c (scan_function, scalarize_parms): Likewise.\n\t* tree-ssa-alias.c (init_alias_info,\n\tcompute_points_to_and_addr_escape,\n\tcompute_flow_sensitive_aliasing, maybe_create_global_var): Likewise.\n\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary): Likewise.\n\t* tree-ssa-live.c (new_tree_live_info, live_worklist,\n\tcalculate_live_on_entry, calculate_live_on_exit, compare_pairs,\n\tsort_coalesce_list, build_tree_conflict_graph, dump_live_info\n\ttree-ssa-loop-manip.c (add_exit_phis_var): Likewise.\n\ttree-ssa-operands.c (get_asm_expr_operands, add_call_clobber_ops,\n\tadd_call_read_ops): Likewise.\n\t* tree-ssa-pre.c (bitmap_print_value_set, insert_aux): Likewise.\n\t* tree-ssa-live.h (num_var_partitions): Return unsigned.\n\nFrom-SVN: r90053", "tree": {"sha": "1abce55874e65e7a9055d728035fdf072a46f0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1abce55874e65e7a9055d728035fdf072a46f0b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/comments", "author": null, "committer": null, "parents": [{"sha": "0dc0a70b2fd4796405a68e8102a3bc6bf58eea6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc0a70b2fd4796405a68e8102a3bc6bf58eea6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc0a70b2fd4796405a68e8102a3bc6bf58eea6f"}], "stats": {"total": 280, "additions": 156, "deletions": 124}, "files": [{"sha": "e2e6032374e0c2844eedff6ac417275e8f4675f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1,3 +1,53 @@\n+2004-11-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* bitmap.c (bitmap_print): Make bitno unsigned.\n+\t* bt-load.c (clear_btr_from_live_range,\n+\tbtr_def_live_range): Likewise.\n+\t* caller-save.c (save_call_clobbered_regs): Likewise.\n+\t* cfganal.c (compute_dominance_frontiers_1): Likewise.\n+\t* cfgcleanup.c (thread_jump): Likewise.\n+\t* cfgrtl.c (safe_insert_insn_on_edge): Likewise.\n+\t* conflict.c (conflict_graph_compute): Likewise.\n+\t* ddg.c (add_deps_for_use): Likewise.\n+\t* df.c (df_refs_update): Likewise.\n+\t* except.c (remove_eh_handler): Likewise.\n+\t* flow.c (verify_local_live_at_start, update_life_info,\n+\tinitialize_uninitialized_subregs, propagate_one_insn,\n+\tfree_propagate_block_info, propagate_block, find_use_as_address,\n+\treg_set_to_hard_reg_set): Likewise.\n+\t* gcse.c (clear_modify_mem_tables): Likewise.\n+\t* global.c (global_conflicts, build_insn_chain): Likewise.\n+\t* ifcvt.c (dead_or_predicable): Likewise.\n+\t* local-alloc.c (update_equiv_regs): Likewise.\n+\t* loop.c (load_mems): Likewise.\n+\t* ra-build.c (livethrough_conflicts_bb, conflicts_between_webs):\n+\tLikewise.\n+\t* ra-rewrite.c (reloads_to_loads, rewrite_program2, actual_spill):\n+\tLikewise.\n+\t* reload1.c (order_regs_for_reload, finish_spills): Likewise.\n+\t* sched-deps.c (sched_analyze_insn, free_deps): Likewise.\n+\t* sched-rgn.c (propagate_deps\n+\t* tree-cfg.c (tree_purge_all_dead_eh_edges): Likewise.\n+\t* tree-dfa.c (dump_dfa_stats\n+\ttree-into-ssa.c (compute_global_livein, insert_phi_nodes,\n+\tinsert_phi_nodes_for, debug_def_blocks_r, invalidate_name_tags):\n+\tLikewise.\n+\t* tree-outof-ssa.c (coalesce_ssa_name, coalesce_vars,\n+\tfree_temp_expr_table, find_replaceable_exprs): Likewise.\n+\t* tree-sra.c (scan_function, scalarize_parms): Likewise.\n+\t* tree-ssa-alias.c (init_alias_info,\n+\tcompute_points_to_and_addr_escape,\n+\tcompute_flow_sensitive_aliasing, maybe_create_global_var): Likewise.\n+\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary): Likewise.\n+\t* tree-ssa-live.c (new_tree_live_info, live_worklist,\n+\tcalculate_live_on_entry, calculate_live_on_exit, compare_pairs,\n+\tsort_coalesce_list, build_tree_conflict_graph, dump_live_info\n+\ttree-ssa-loop-manip.c (add_exit_phis_var): Likewise.\n+\ttree-ssa-operands.c (get_asm_expr_operands, add_call_clobber_ops,\n+\tadd_call_read_ops): Likewise.\n+\t* tree-ssa-pre.c (bitmap_print_value_set, insert_aux): Likewise.\n+\t* tree-ssa-live.h (num_var_partitions): Return unsigned.\n+\n 2004-11-03  Dorit Naishlos  <dorit@il.ibm.com>\n \n \tPR tree-optimization/18009"}, {"sha": "36acbc4d43fe8558d2a036ca0854f392bdf10ba8", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -846,7 +846,7 @@ void\n bitmap_print (FILE *file, bitmap head, const char *prefix, const char *suffix)\n {\n   const char *comma = \"\";\n-  int i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   fputs (prefix, file);"}, {"sha": "abfe8cd3dde285e39179debecddd2425806fdf28", "filename": "gcc/bt-load.c", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -821,7 +821,7 @@ block_at_edge_of_live_range_p (int bb, btr_def def)\n static void\n clear_btr_from_live_range (btr_def def)\n {\n-  int bb;\n+  unsigned bb;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (def->live_range, 0, bb, bi)\n@@ -845,7 +845,7 @@ clear_btr_from_live_range (btr_def def)\n static void\n add_btr_to_live_range (btr_def def)\n {\n-  int bb;\n+  unsigned bb;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (def->live_range, 0, bb, bi)\n@@ -975,11 +975,9 @@ btr_def_live_range (btr_def def, HARD_REG_SET *btrs_live_in_range)\n       def->live_range = BITMAP_XMALLOC ();\n \n       bitmap_set_bit (def->live_range, def->bb->index);\n-      if (flag_btr_bb_exclusive)\n-\tCOPY_HARD_REG_SET (*btrs_live_in_range, btrs_live[def->bb->index]);\n-      else\n-\tCOPY_HARD_REG_SET (*btrs_live_in_range,\n-\t\t\t   btrs_live_at_end[def->bb->index]);\n+      COPY_HARD_REG_SET (*btrs_live_in_range,\n+\t\t\t (flag_btr_bb_exclusive\n+\t\t\t  ? btrs_live : btrs_live_at_end)[def->bb->index]);\n \n       for (user = def->uses; user != NULL; user = user->next)\n \taugment_live_range (def->live_range, btrs_live_in_range,\n@@ -991,26 +989,16 @@ btr_def_live_range (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t the set of target registers live over it, because migration\n \t of other PT instructions may have affected it.\n       */\n-      int bb;\n-      int def_bb = def->bb->index;\n+      unsigned bb;\n+      unsigned def_bb = flag_btr_bb_exclusive ? -1 : def->bb->index;\n       bitmap_iterator bi;\n \n       CLEAR_HARD_REG_SET (*btrs_live_in_range);\n-      if (flag_btr_bb_exclusive)\n+      EXECUTE_IF_SET_IN_BITMAP (def->live_range, 0, bb, bi)\n \t{\n-\t  EXECUTE_IF_SET_IN_BITMAP (def->live_range, 0, bb, bi)\n-\t    {\n-\t      IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live[bb]);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  EXECUTE_IF_SET_IN_BITMAP (def->live_range, 0, bb, bi)\n-\t    {\n-\t      IOR_HARD_REG_SET (*btrs_live_in_range,\n-\t\t\t\t(def_bb == bb\n-\t\t\t\t ? btrs_live_at_end : btrs_live) [bb]);\n-\t    }\n+\t  IOR_HARD_REG_SET (*btrs_live_in_range,\n+\t\t\t    (def_bb == bb\n+\t\t\t     ? btrs_live_at_end : btrs_live) [bb]);\n \t}\n     }\n   if (!def->other_btr_uses_before_def &&"}, {"sha": "62873fcd34ffc7af3c0693e29c00c1f8097814df", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -408,7 +408,7 @@ save_call_clobbered_regs (void)\n \n \t  if (code == CALL_INSN && ! find_reg_note (insn, REG_NORETURN, NULL))\n \t    {\n-\t      int regno;\n+\t      unsigned regno;\n \t      HARD_REG_SET hard_regs_to_save;\n \t      reg_set_iterator rsi;\n "}, {"sha": "651f15345528179070506803ea625b7ac5287609", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -970,7 +970,7 @@ compute_dominance_frontiers_1 (bitmap *frontiers, basic_block bb, sbitmap done)\n        c;\n        c = next_dom_son (CDI_DOMINATORS, c))\n     {\n-      int x;\n+      unsigned x;\n       bitmap_iterator bi;\n \n       EXECUTE_IF_SET_IN_BITMAP (frontiers[c->index], 0, x, bi)"}, {"sha": "7f7a07b225e543a32acaef84d0ed3d33c4476084", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -279,7 +279,7 @@ thread_jump (int mode, edge e, basic_block b)\n   rtx set1, set2, cond1, cond2, insn;\n   enum rtx_code code1, code2, reversed_code2;\n   bool reverse1 = false;\n-  int i;\n+  unsigned i;\n   regset nonequal;\n   bool failed = false;\n   reg_set_iterator rsi;\n@@ -348,7 +348,8 @@ thread_jump (int mode, edge e, basic_block b)\n   cselib_init (false);\n \n   /* First process all values computed in the source basic block.  */\n-  for (insn = NEXT_INSN (BB_HEAD (e->src)); insn != NEXT_INSN (BB_END (e->src));\n+  for (insn = NEXT_INSN (BB_HEAD (e->src));\n+       insn != NEXT_INSN (BB_END (e->src));\n        insn = NEXT_INSN (insn))\n     if (INSN_P (insn))\n       cselib_process_insn (insn);\n@@ -360,7 +361,8 @@ thread_jump (int mode, edge e, basic_block b)\n      processing as if it were same basic block.\n      Our goal is to prove that whole block is an NOOP.  */\n \n-  for (insn = NEXT_INSN (BB_HEAD (b)); insn != NEXT_INSN (BB_END (b)) && !failed;\n+  for (insn = NEXT_INSN (BB_HEAD (b));\n+       insn != NEXT_INSN (BB_END (b)) && !failed;\n        insn = NEXT_INSN (insn))\n     {\n       if (INSN_P (insn))\n@@ -369,7 +371,7 @@ thread_jump (int mode, edge e, basic_block b)\n \n \t  if (GET_CODE (pat) == PARALLEL)\n \t    {\n-\t      for (i = 0; i < XVECLEN (pat, 0); i++)\n+\t      for (i = 0; i < (unsigned)XVECLEN (pat, 0); i++)\n \t\tfailed |= mark_effect (XVECEXP (pat, 0, i), nonequal);\n \t    }\n \t  else"}, {"sha": "17f7b75d425a7f0fc98d05073a689efc7e6ad4ba", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1463,7 +1463,8 @@ safe_insert_insn_on_edge (rtx insn, edge e)\n   regset_head killed_head;\n   regset killed = INITIALIZE_REG_SET (killed_head);\n   rtx save_regs = NULL_RTX;\n-  int regno, noccmode;\n+  unsigned regno;\n+  int noccmode;\n   enum machine_mode mode;\n   reg_set_iterator rsi;\n "}, {"sha": "ebb40566b42daa250dfec16897f30c7765b8dca1", "filename": "gcc/conflict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -439,8 +439,8 @@ conflict_graph_compute (regset regs, partition p)\n       insn = BB_END (bb);\n       for (insn = BB_END (bb); insn != head; insn = PREV_INSN (insn))\n \t{\n-\t  int born_reg;\n-\t  int live_reg;\n+\t  unsigned born_reg;\n+\t  unsigned live_reg;\n \t  rtx link;\n \n \t  /* Are we interested in this insn? */"}, {"sha": "aba6347d737b3a4e8f6f6ccab751881d0c3f0f3b", "filename": "gcc/ddg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -311,7 +311,7 @@ add_deps_for_use (ddg_ptr g, struct df *df, struct ref *use)\n static void\n build_inter_loop_deps (ddg_ptr g, struct df *df)\n {\n-  int rd_num, u_num;\n+  unsigned rd_num, u_num;\n   struct bb_info *bb_info;\n   bitmap_iterator bi;\n "}, {"sha": "c29274a0030899fc81cd934605806624c53499f1", "filename": "gcc/df.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -2238,7 +2238,7 @@ static int\n df_refs_update (struct df *df, bitmap blocks)\n {\n   basic_block bb;\n-  int count = 0, bbno;\n+  unsigned count = 0, bbno;\n \n   df->n_regs = max_reg_num ();\n   if (df->n_regs >= df->reg_size)"}, {"sha": "2a2e8da14f8c6c91f920f9fffc8acc38e00b2c61", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -2279,7 +2279,7 @@ remove_eh_handler (struct eh_region *region)\n   cfun->eh->region_array[region->region_number] = outer;\n   if (region->aka)\n     {\n-      int i;\n+      unsigned i;\n       bitmap_iterator bi;\n \n       EXECUTE_IF_SET_IN_BITMAP (region->aka, 0, i, bi)"}, {"sha": "bcd279a5cfe838b125329bd891e08773e0f97d3d", "filename": "gcc/flow.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -520,7 +520,7 @@ verify_local_live_at_start (regset new_live_at_start, basic_block bb)\n     }\n   else\n     {\n-      int i;\n+      unsigned i;\n       reg_set_iterator rsi;\n \n       /* Find the set of changed registers.  */\n@@ -570,7 +570,7 @@ update_life_info (sbitmap blocks, enum update_life_extent extent, int prop_flags\n {\n   regset tmp;\n   regset_head tmp_head;\n-  int i;\n+  unsigned i;\n   int stabilized_prop_flags = prop_flags;\n   basic_block bb;\n \n@@ -1352,7 +1352,7 @@ initialize_uninitialized_subregs (void)\n {\n   rtx insn;\n   edge e;\n-  int reg, did_something = 0;\n+  unsigned reg, did_something = 0;\n   find_regno_partial_param param;\n   edge_iterator ei;\n \n@@ -1517,7 +1517,7 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n   int insn_is_dead = 0;\n   int libcall_is_dead = 0;\n   rtx note;\n-  int i;\n+  unsigned i;\n \n   if (! INSN_P (insn))\n     return prev;\n@@ -1963,7 +1963,7 @@ free_propagate_block_info (struct propagate_block_info *pbi)\n   if (pbi->flags & PROP_REG_INFO)\n     {\n       int num = pbi->insn_num;\n-      int i;\n+      unsigned i;\n       reg_set_iterator rsi;\n \n       EXECUTE_IF_SET_IN_REG_SET (pbi->reg_live, 0, i, rsi)\n@@ -2008,7 +2008,7 @@ propagate_block (basic_block bb, regset live, regset local_set,\n \n   if (flags & PROP_REG_INFO)\n     {\n-      int i;\n+      unsigned i;\n       reg_set_iterator rsi;\n \n       /* Process the regs live at the end of the block.\n@@ -4135,7 +4135,7 @@ find_use_as_address (rtx x, rtx reg, HOST_WIDE_INT plusconst)\n void\n dump_regset (regset r, FILE *outf)\n {\n-  int i;\n+  unsigned i;\n   reg_set_iterator rsi;\n \n   if (r == NULL)\n@@ -4324,7 +4324,7 @@ clear_log_links (sbitmap blocks)\n void\n reg_set_to_hard_reg_set (HARD_REG_SET *to, bitmap from)\n {\n-  int i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (from, 0, i, bi)"}, {"sha": "25c53c77ae06d9526cd6c9728f90d27c968f26b1", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -2271,7 +2271,7 @@ free_insn_expr_list_list (rtx *listp)\n static void\n clear_modify_mem_tables (void)\n {\n-  int i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (modify_mem_list_set, 0, i, bi)"}, {"sha": "728914b947fd82f06de9cacbd0de911944e09f49", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -669,7 +669,7 @@ allocno_compare (const void *v1p, const void *v2p)\n static void\n global_conflicts (void)\n {\n-  int i;\n+  unsigned i;\n   basic_block b;\n   rtx insn;\n   int *block_start_allocnos;\n@@ -1816,7 +1816,7 @@ build_insn_chain (rtx first)\n \n       if (first == BB_HEAD (b))\n \t{\n-\t  int i;\n+\t  unsigned i;\n \t  bitmap_iterator bi;\n \n \t  CLEAR_REG_SET (live_relevant_regs);"}, {"sha": "554131126472f5747908c0b477ba8173609d675e", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -3133,7 +3133,7 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n       regset_head merge_set_head, tmp_head, test_live_head, test_set_head;\n       regset merge_set, tmp, test_live, test_set;\n       struct propagate_block_info *pbi;\n-      int i, fail = 0;\n+      unsigned i, fail = 0;\n       bitmap_iterator bi;\n \n       /* Check for no calls or trapping operations.  */"}, {"sha": "42b9838e50898fd0ad2bf3c857c0d07b8c04e65a", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1118,7 +1118,8 @@ update_equiv_regs (void)\n   /* Clear all dead REGNOs from all basic block's live info.  */\n   if (clear_regnos)\n     {\n-      int j;\n+      unsigned j;\n+      \n       if (clear_regnos > 8)\n \t{\n \t  FOR_EACH_BB (bb)"}, {"sha": "995df4863c2a994e1d6d6de41fe44ff7aac040ec", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -10929,7 +10929,7 @@ load_mems (const struct loop *loop)\n \t  cselib_val *e = cselib_lookup (mem, VOIDmode, 0);\n \t  rtx set;\n \t  rtx best = mem;\n-\t  int j;\n+\t  unsigned j;\n \t  struct elt_loc_list *const_equiv = 0;\n \t  reg_set_iterator rsi;\n "}, {"sha": "7601a319811dfa9198425501c58a2cf69fe4afd3", "filename": "gcc/ra-build.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1022,7 +1022,8 @@ livethrough_conflicts_bb (basic_block bb)\n   struct ra_bb_info *info = (struct ra_bb_info *) bb->aux;\n   rtx insn;\n   bitmap all_defs;\n-  int first, use_id;\n+  int first;\n+  unsigned use_id;\n   unsigned int deaths = 0;\n   unsigned int contains_call = 0;\n \n@@ -2193,7 +2194,7 @@ conflicts_between_webs (struct df *df)\n       for (; cl; cl = cl->next)\n         if (cl->conflicts)\n \t  {\n-\t    int j;\n+\t    unsigned j;\n \t    struct web *web1 = find_subweb_2 (supweb1, cl->size_word);\n \t    bitmap_iterator bi;\n "}, {"sha": "2f4ce6cfcf1e9c431625e5d3f0b3a0f69ef0b5a4", "filename": "gcc/ra-rewrite.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fra-rewrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fra-rewrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-rewrite.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -996,7 +996,8 @@ reloads_to_loads (struct rewrite_info *ri, struct ref **refs,\n       struct web *web = ref2web[DF_REF_ID (refs[n])];\n       struct web *supweb = find_web_for_subweb (web);\n       int is_death;\n-      int j;\n+      unsigned j;\n+      \n       /* Only emit reloads when entering their interference\n \t region.  A use of a spilled web never opens an\n \t interference region, independent of it's color.  */\n@@ -1062,7 +1063,7 @@ rewrite_program2 (bitmap new_deaths)\n     {\n       basic_block last_bb = NULL;\n       rtx last_block_insn;\n-      int i, j;\n+      unsigned i, j;\n       bitmap_iterator bi;\n \n       if (!INSN_P (insn))\n@@ -1355,7 +1356,7 @@ rewrite_program2 (bitmap new_deaths)\n \t  CLEAR_HARD_REG_SET (cum_colors);\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    {\n-\t      int j;\n+\t      unsigned j;\n \n \t      if (num >= 5)\n \t\tbreak;\n@@ -1629,7 +1630,7 @@ reset_changed_flag (void)\n void\n actual_spill (void)\n {\n-  int i;\n+  unsigned i;\n   bitmap_iterator bi;\n   bitmap new_deaths = BITMAP_XMALLOC ();\n "}, {"sha": "d70fb299f81927ceff3986c54978bcaf9dd3d2d4", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1589,7 +1589,7 @@ count_pseudo (int reg)\n static void\n order_regs_for_reload (struct insn_chain *chain)\n {\n-  int i;\n+  unsigned i;\n   HARD_REG_SET used_by_pseudos;\n   HARD_REG_SET used_by_pseudos2;\n   reg_set_iterator rsi;\n@@ -3543,7 +3543,7 @@ finish_spills (int global)\n {\n   struct insn_chain *chain;\n   int something_changed = 0;\n-  int i;\n+  unsigned i;\n   reg_set_iterator rsi;\n \n   /* Build the spill_regs array for the function.  */\n@@ -3613,7 +3613,7 @@ finish_spills (int global)\n \t and call retry_global_alloc.\n \t We change spill_pseudos here to only contain pseudos that did not\n \t get a new hard register.  */\n-      for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n+      for (i = FIRST_PSEUDO_REGISTER; i < (unsigned)max_regno; i++)\n \tif (reg_old_renumber[i] != reg_renumber[i])\n \t  {\n \t    HARD_REG_SET forbidden;\n@@ -3661,7 +3661,7 @@ finish_spills (int global)\n     }\n \n   /* Let alter_reg modify the reg rtx's for the modified pseudos.  */\n-  for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n+  for (i = FIRST_PSEUDO_REGISTER; i < (unsigned)max_regno; i++)\n     {\n       int regno = reg_renumber[i];\n       if (reg_old_renumber[i] == regno)"}, {"sha": "ea32c704ee48d3b4199948fc269a6bd02f2f9ef9", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -821,7 +821,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n {\n   RTX_CODE code = GET_CODE (x);\n   rtx link;\n-  int i;\n+  unsigned i;\n   reg_set_iterator rsi;\n \n   if (code == COND_EXEC)\n@@ -845,8 +845,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n     }\n   else if (code == PARALLEL)\n     {\n-      int i;\n-      for (i = XVECLEN (x, 0) - 1; i >= 0; i--)\n+      for (i = XVECLEN (x, 0); i--;)\n \t{\n \t  rtx sub = XVECEXP (x, 0, i);\n \t  code = GET_CODE (sub);\n@@ -1006,7 +1005,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n \t    }\n \t}\n \n-      for (i = 0; i < deps->max_reg; i++)\n+      for (i = 0; i < (unsigned)deps->max_reg; i++)\n \t{\n \t  struct deps_reg *reg_last = &deps->reg_last[i];\n \t  reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n@@ -1461,7 +1460,7 @@ init_deps (struct deps *deps)\n void\n free_deps (struct deps *deps)\n {\n-  int i;\n+  unsigned i;\n   reg_set_iterator rsi;\n \n   free_INSN_LIST_list (&deps->pending_read_insns);"}, {"sha": "dcff0b5f0d877d8415350f44b0ad301be73f7f10", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1986,7 +1986,7 @@ propagate_deps (int bb, struct deps *pred_deps)\n   FOR_EACH_EDGE (e, ei, block->succs)\n     {\n       struct deps *succ_deps;\n-      int reg;\n+      unsigned reg;\n       reg_set_iterator rsi;\n \n       /* Only bbs \"below\" bb, in the same region, are interesting.  */"}, {"sha": "3c8a505815fd5cfae93775603dc66a832f0553e5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -5126,7 +5126,7 @@ bool\n tree_purge_all_dead_eh_edges (bitmap blocks)\n {\n   bool changed = false;\n-  size_t i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i, bi)"}, {"sha": "6dc49a021fc16be1f0cc28675951415d30262238", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -688,7 +688,7 @@ dump_dfa_stats (FILE *file)\n \n   size = num_referenced_vars * sizeof (tree);\n   total += size;\n-  fprintf (file, fmt_str_1, \"Referenced variables\", num_referenced_vars,\n+  fprintf (file, fmt_str_1, \"Referenced variables\", (unsigned long)num_referenced_vars,\n \t   SCALE (size), LABEL (size));\n \n   size = dfa_stats.num_stmt_anns * sizeof (struct stmt_ann_d);"}, {"sha": "10da8003093e1ae4e6e07ffd3442187a7384e06a", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -230,7 +230,7 @@ void\n compute_global_livein (bitmap livein, bitmap def_blocks)\n {\n   basic_block bb, *worklist, *tos;\n-  int i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   tos = worklist\n@@ -603,7 +603,7 @@ void insert_phi_nodes_1 (tree var, bitmap *dfs, varray_type *work_stack)\n static void\n insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)\n {\n-  size_t i;\n+  unsigned i;\n   varray_type work_stack;\n   bitmap_iterator bi;\n \n@@ -1005,7 +1005,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)\n {\n   struct def_blocks_d *def_map;\n   bitmap phi_insertion_points;\n-  int bb_index;\n+  unsigned bb_index;\n   edge e;\n   tree phi;\n   basic_block bb;\n@@ -1036,7 +1036,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)\n      We now always use fully pruned SSA form.  */\n   while (VARRAY_ACTIVE_SIZE (*work_stack) > 0)\n     {\n-      int dfs_index;\n+      unsigned dfs_index;\n       bitmap_iterator bi;\n \n       bb = VARRAY_TOP_GENERIC_PTR_NOGC (*work_stack);\n@@ -1303,24 +1303,12 @@ debug_def_blocks (void)\n static int\n debug_def_blocks_r (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n-  unsigned long i;\n   struct def_blocks_d *db_p = (struct def_blocks_d *) *slot;\n-  bitmap_iterator bi;\n   \n   fprintf (stderr, \"VAR: \");\n   print_generic_expr (stderr, db_p->var, dump_flags);\n-  fprintf (stderr, \", DEF_BLOCKS: { \");\n-  EXECUTE_IF_SET_IN_BITMAP (db_p->def_blocks, 0, i, bi)\n-    {\n-      fprintf (stderr, \"%ld \", i);\n-    }\n-  fprintf (stderr, \"}\");\n-  fprintf (stderr, \", LIVEIN_BLOCKS: { \");\n-  EXECUTE_IF_SET_IN_BITMAP (db_p->livein_blocks, 0, i, bi)\n-    {\n-      fprintf (stderr, \"%ld \", i);\n-    }\n-  fprintf (stderr, \"}\\n\");\n+  bitmap_print (stderr, db_p->def_blocks, \", DEF_BLOCKS: { \", \"}\");\n+  bitmap_print (stderr, db_p->livein_blocks, \", LIVEIN_BLOCKS: { \", \"}\\n\");\n \n   return 1;\n }\n@@ -1382,7 +1370,7 @@ get_def_blocks_for (tree var)\n static void\n invalidate_name_tags (bitmap vars_to_rename)\n {\n-  size_t i;\n+  unsigned i;\n   bool rename_name_tags_p;\n   bitmap_iterator bi;\n "}, {"sha": "afa05c1eeb6d155d079bcafb69068dd0f0acbe94", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -681,7 +681,7 @@ coalesce_abnormal_edges (var_map map, conflict_graph graph, root_var_p rv)\n static tree_live_info_p\n coalesce_ssa_name (var_map map, int flags)\n {\n-  int num, x, i;\n+  unsigned num, x, i;\n   sbitmap live;\n   tree var, phi;\n   root_var_p rv;\n@@ -718,7 +718,7 @@ coalesce_ssa_name (var_map map, int flags)\n \t      int p = var_to_partition (map, res);\n \t      if (p == NO_PARTITION)\n \t\tcontinue;\n-\t      for (x = 0; x < PHI_NUM_ARGS (phi); x++)\n+\t      for (x = 0; x < (unsigned)PHI_NUM_ARGS (phi); x++)\n \t\t{\n \t\t  tree arg = PHI_ARG_DEF (phi, x);\n \t\t  int p2;\n@@ -1057,7 +1057,7 @@ coalesce_vars (var_map map, tree_live_info_p liveinfo)\n   basic_block bb;\n   type_var_p tv;\n   tree var;\n-  int x, p, p2;\n+  unsigned x, p, p2;\n   coalesce_list_p cl;\n   conflict_graph graph;\n \n@@ -1077,26 +1077,27 @@ coalesce_vars (var_map map, tree_live_info_p liveinfo)\n   FOR_EACH_BB (bb)\n     {\n       tree phi, arg;\n-      int p;\n+      unsigned p;\n+      \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  p = var_to_partition (map, PHI_RESULT (phi));\n \n \t  /* Skip virtual PHI nodes.  */\n-\t  if (p == NO_PARTITION)\n+\t  if (p == (unsigned)NO_PARTITION)\n \t    continue;\n \n \t  make_live_on_entry (liveinfo, bb, p);\n \n \t  /* Each argument is a potential copy operation. Add any arguments \n \t     which are not coalesced to the result to the coalesce list.  */\n-\t  for (x = 0; x < PHI_NUM_ARGS (phi); x++)\n+\t  for (x = 0; x < (unsigned)PHI_NUM_ARGS (phi); x++)\n \t    {\n \t      arg = PHI_ARG_DEF (phi, x);\n \t      if (!phi_ssa_name_p (arg))\n \t        continue;\n \t      p2 = var_to_partition (map, arg);\n-\t      if (p2 == NO_PARTITION)\n+\t      if (p2 == (unsigned)NO_PARTITION)\n \t\tcontinue;\n \t      if (p != p2)\n \t        add_coalesce (cl, p, p2, 1);\n@@ -1278,7 +1279,7 @@ free_temp_expr_table (temp_expr_table_p t)\n   tree *ret = NULL;\n \n #ifdef ENABLE_CHECKING\n-  int x;\n+  unsigned x;\n   for (x = 0; x <= num_var_partitions (t->map); x++)\n     gcc_assert (!t->partition_dep_list[x]);\n #endif\n@@ -1695,7 +1696,7 @@ static tree *\n find_replaceable_exprs (var_map map)\n {\n   basic_block bb;\n-  int i;\n+  unsigned i;\n   temp_expr_table_p table;\n   tree *ret;\n "}, {"sha": "561585babaa74e2d3ae4788e9ac4f430bde6543f", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1018,7 +1018,7 @@ scan_function (void)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      size_t i;\n+      unsigned i;\n \n       fputs (\"\\nScan results:\\n\", dump_file);\n       EXECUTE_IF_SET_IN_BITMAP (sra_candidates, 0, i, bi)\n@@ -1967,7 +1967,7 @@ static void\n scalarize_parms (void)\n {\n   tree list = NULL;\n-  size_t i;\n+  unsigned i;\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (needs_copy_in, 0, i, bi)"}, {"sha": "87f460ac2b25c2a4551c38830038c78d2ce39855", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -379,7 +379,7 @@ init_alias_info (void)\n   /* If aliases have been computed before, clear existing information.  */\n   if (aliases_computed_p)\n     {\n-      size_t i;\n+      unsigned i;\n       bitmap_iterator bi;\n \n       /* Clear the call-clobbered set.  We are going to re-discover\n@@ -570,7 +570,7 @@ static void\n compute_points_to_and_addr_escape (struct alias_info *ai)\n {\n   basic_block bb;\n-  size_t i;\n+  unsigned i;\n   tree op;\n   ssa_op_iter iter;\n \n@@ -831,7 +831,7 @@ compute_flow_sensitive_aliasing (struct alias_info *ai)\n \n   for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n     {\n-      size_t j;\n+      unsigned j;\n       tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n       var_ann_t v_ann = var_ann (SSA_NAME_VAR (ptr));\n@@ -1480,7 +1480,7 @@ setup_pointers_and_addressables (struct alias_info *ai)\n static void\n maybe_create_global_var (struct alias_info *ai)\n {\n-  size_t i, n_clobbered;\n+  unsigned i, n_clobbered;\n   bitmap_iterator bi;\n   \n   /* No need to create it, if we have one already.  */"}, {"sha": "54733541a0e9f34e51f898481cc2390b9c31b6d5", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -508,7 +508,7 @@ find_obviously_necessary_stmts (struct edge_list *el)\n static void\n mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el)\n {\n-  int edge_number;\n+  unsigned edge_number;\n \n   gcc_assert (bb != EXIT_BLOCK_PTR);\n "}, {"sha": "b3f0b78553461a1e6945785570ac5eea6cc846d1", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -433,7 +433,7 @@ static tree_live_info_p\n new_tree_live_info (var_map map)\n {\n   tree_live_info_p live;\n-  int x;\n+  unsigned x;\n \n   live = (tree_live_info_p) xmalloc (sizeof (struct tree_live_info_d));\n   live->map = map;\n@@ -483,7 +483,7 @@ delete_tree_live_info (tree_live_info_p live)\n static void\n live_worklist (tree_live_info_p live, varray_type stack, int i)\n {\n-  int b;\n+  unsigned b;\n   tree var;\n   basic_block def_bb = NULL;\n   edge e;\n@@ -557,7 +557,7 @@ tree_live_info_p\n calculate_live_on_entry (var_map map)\n {\n   tree_live_info_p live;\n-  int i;\n+  unsigned i;\n   basic_block bb;\n   bitmap saw_def;\n   tree phi, var, stmt;\n@@ -583,7 +583,7 @@ calculate_live_on_entry (var_map map)\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n-\t  for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n+\t  for (i = 0; i < (unsigned)PHI_NUM_ARGS (phi); i++)\n \t    {\n \t      var = PHI_ARG_DEF (phi, i);\n \t      if (!phi_ssa_name_p (var))\n@@ -648,7 +648,7 @@ calculate_live_on_entry (var_map map)\n       int entry_block = e->dest->index;\n       if (e->dest == EXIT_BLOCK_PTR)\n         continue;\n-      for (i = 0; i < num_var_partitions (map); i++)\n+      for (i = 0; i < (unsigned)num_var_partitions (map); i++)\n \t{\n \t  basic_block tmp;\n \t  tree d;\n@@ -732,7 +732,7 @@ void\n calculate_live_on_exit (tree_live_info_p liveinfo)\n {\n   unsigned b;\n-  int i, x;\n+  unsigned i, x;\n   bitmap *on_exit;\n   basic_block bb;\n   edge e;\n@@ -741,14 +741,14 @@ calculate_live_on_exit (tree_live_info_p liveinfo)\n   var_map map = liveinfo->map;\n \n   on_exit = (bitmap *)xmalloc (last_basic_block * sizeof (bitmap));\n-  for (x = 0; x < last_basic_block; x++)\n+  for (x = 0; x < (unsigned)last_basic_block; x++)\n     on_exit[x] = BITMAP_XMALLOC ();\n \n   /* Set all the live-on-exit bits for uses in PHIs.  */\n   FOR_EACH_BB (bb)\n     {\n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tfor (i = 0; i < PHI_NUM_ARGS (phi); i++)\n+\tfor (i = 0; i < (unsigned)PHI_NUM_ARGS (phi); i++)\n \t  { \n \t    t = PHI_ARG_DEF (phi, i);\n \t    e = PHI_ARG_EDGE (phi, i);\n@@ -1168,7 +1168,7 @@ int compare_pairs (const void *p1, const void *p2)\n void\n sort_coalesce_list (coalesce_list_p cl)\n {\n-  int x, num, count;\n+  unsigned x, num, count;\n   partition_pair_p chain, p;\n   partition_pair_p  *list;\n \n@@ -1296,7 +1296,7 @@ build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,\n   conflict_graph graph;\n   var_map map;\n   bitmap live;\n-  int x, y, i;\n+  unsigned x, y, i;\n   basic_block bb;\n   varray_type partition_link, tpa_to_clear, tpa_nodes;\n   unsigned l;\n@@ -1421,7 +1421,7 @@ build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,\n       EXECUTE_IF_SET_IN_BITMAP (live, 0, x, bi)\n         {\n \t  i = tpa_find_tree (tpa, x);\n-\t  if (i != TPA_NONE)\n+\t  if (i != (unsigned)TPA_NONE)\n \t    {\n \t      int start = VARRAY_INT (tpa_nodes, i);\n \t      /* If start is 0, a new root reference list is being started.\n@@ -1750,7 +1750,7 @@ void\n dump_live_info (FILE *f, tree_live_info_p live, int flag)\n {\n   basic_block bb;\n-  int i;\n+  unsigned i;\n   var_map map = live->map;\n   bitmap_iterator bi;\n "}, {"sha": "c0c1d183ab39c7c3d1ef4965c53c15e89ef2c290", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -69,7 +69,7 @@ extern tree make_ssa_temp (tree);\n extern void register_ssa_partition_check (tree ssa_var);\n #endif\n \n-static inline int num_var_partitions (var_map);\n+static inline unsigned num_var_partitions (var_map);\n static inline tree var_to_partition_to_var (var_map, tree);\n static inline tree partition_to_var (var_map, int);\n static inline int var_to_partition (var_map, tree);\n@@ -82,7 +82,7 @@ extern var_map create_ssa_var_map (int);\n \n /* Number of partitions in MAP.  */\n \n-static inline int \n+static inline unsigned\n num_var_partitions (var_map map)\n {\n   return map->num_partitions;"}, {"sha": "17267b2d909392d9d2e8489382434fe7cb749ea6", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -152,7 +152,7 @@ static void\n add_exit_phis_var (tree var, bitmap livein, bitmap exits)\n {\n   bitmap def;\n-  int index;\n+  unsigned index;\n   basic_block def_bb = bb_for_stmt (SSA_NAME_DEF_STMT (var));\n   bitmap_iterator bi;\n "}, {"sha": "9161cce8573d4d1d5cd1fef7738bf73304c798b2", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -1267,7 +1267,7 @@ get_asm_expr_operands (tree stmt)\n   for (link = ASM_CLOBBERS (stmt); link; link = TREE_CHAIN (link))\n     if (strcmp (TREE_STRING_POINTER (TREE_VALUE (link)), \"memory\") == 0)\n       {\n-\tsize_t i;\n+\tunsigned i;\n \tbitmap_iterator bi;\n \n \t/* Clobber all call-clobbered variables (or .GLOBAL_VAR if we\n@@ -1599,7 +1599,7 @@ add_call_clobber_ops (tree stmt)\n     add_stmt_operand (&global_var, stmt, opf_is_def);\n   else\n     {\n-      size_t i;\n+      unsigned i;\n       bitmap_iterator bi;\n \n       EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, bi)\n@@ -1631,7 +1631,7 @@ add_call_read_ops (tree stmt)\n     add_stmt_operand (&global_var, stmt, opf_none);\n   else\n     {\n-      size_t i;\n+      unsigned i;\n       \n       EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, bi)\n \t{"}, {"sha": "91622d3d8dc58a14d59c8441a975919a60dda918", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3cd8c58a83c5dcd0a2f6aaea392c378dd75bff3b", "patch": "@@ -768,7 +768,7 @@ bitmap_print_value_set (FILE *outfile, bitmap_set_t set,\n   fprintf (outfile, \"%s[%d] := { \", setname, blockindex);\n   if (set)\n     {\n-      int i;\n+      unsigned i;\n       bitmap_iterator bi;\n \n       EXECUTE_IF_SET_IN_BITMAP (set->expressions, 0, i, bi)\n@@ -778,7 +778,7 @@ bitmap_print_value_set (FILE *outfile, bitmap_set_t set,\n \t  fprintf (outfile, \" (\");\n \t  print_generic_expr (outfile, get_value_handle (ssa_name (i)), 0);\n \t  fprintf (outfile, \") \");\n-\t  if (bitmap_last_set_bit (set->expressions) != i)\n+\t  if (bitmap_last_set_bit (set->expressions) != (int)i)\n \t    fprintf (outfile, \", \");\n \t}\n     }\n@@ -1415,7 +1415,7 @@ insert_aux (basic_block block)\n       dom = get_immediate_dominator (CDI_DOMINATORS, block);\n       if (dom)\n \t{\n-\t  int i;\n+\t  unsigned i;\n \t  bitmap_iterator bi;\n \n \t  bitmap_set_t newset = NEW_SETS (dom);"}]}