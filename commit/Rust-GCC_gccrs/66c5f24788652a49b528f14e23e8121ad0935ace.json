{"sha": "66c5f24788652a49b528f14e23e8121ad0935ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjNWYyNDc4ODY1MmE0OWI1MjhmMTRlMjNlODEyMWFkMDkzNWFjZQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@riscy-ip.com", "date": "2021-05-20T12:21:41Z"}, "committer": {"name": "Joern Rennecke", "email": "joern.rennecke@riscy-ip.com", "date": "2021-05-20T12:21:41Z"}, "message": "libstdc++: Disable floating_to_chars.cc on 16 bit targets\n\nThis patch conditionally disables the compilation of floating_to_chars.cc\non 16 bit targets, thus fixing a build failure for these targets as\nthe POW10_SPLIT_2 array exceeds the maximum object size.\n\nlibstdc++-v3/\n\tPR libstdc++/100361\n\t* include/std/charconv (to_chars): Hide the overloads for\n\tfloating-point types for 16 bit targets.\n\t* src/c++17/floating_to_chars.cc: Don't compile for 16 bit targets.\n\t* testsuite/20_util/to_chars/double.cc: Run this test only on\n\tsize32plus targets.\n\t* testsuite/20_util/to_chars/float.cc: Likewise.\n\t* testsuite/20_util/to_chars/long_double.cc: Likewise.", "tree": {"sha": "6ff082292f9467871f06345fa7873dd956b6e2b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff082292f9467871f06345fa7873dd956b6e2b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c5f24788652a49b528f14e23e8121ad0935ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c5f24788652a49b528f14e23e8121ad0935ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c5f24788652a49b528f14e23e8121ad0935ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c5f24788652a49b528f14e23e8121ad0935ace/comments", "author": null, "committer": null, "parents": [{"sha": "928e4ff1aea45165efbdc8ba6e409b191c2dde6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928e4ff1aea45165efbdc8ba6e409b191c2dde6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928e4ff1aea45165efbdc8ba6e409b191c2dde6c"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "ac9c34d4601bbe778636d9de2ea250673f0d7a3e", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=66c5f24788652a49b528f14e23e8121ad0935ace", "patch": "@@ -703,7 +703,8 @@ namespace __detail\n \t     chars_format __fmt = chars_format::general) noexcept;\n #endif\n \n-#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 \\\n+    && __SIZE_WIDTH__ >= 32\n   // Floating-point std::to_chars\n \n   // Overloads for float."}, {"sha": "44f547a77b4c2c2cd2bc4289d580d0f812d322f1", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=66c5f24788652a49b528f14e23e8121ad0935ace", "patch": "@@ -50,7 +50,9 @@ extern \"C\" int __sprintfieee128(char*, const char*, ...);\n \n // This implementation crucially assumes float/double have the\n // IEEE binary32/binary64 formats.\n-#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 \\\n+    /* And it also assumes that uint64_t POW10_SPLIT_2[3133][3] is valid.  */\\\n+    && __SIZE_WIDTH__ >= 32\n \n // Determine the binary format of 'long double'.\n "}, {"sha": "64e62213044af15c83d6fa6e6d59e5bf414c9db6", "filename": "libstdc++-v3/testsuite/20_util/to_chars/double.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc?ref=66c5f24788652a49b528f14e23e8121ad0935ace", "patch": "@@ -33,6 +33,7 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-effective-target ieee-floats }\n+// { dg-require-effective-target size32plus }\n \n #include <charconv>\n "}, {"sha": "73b9081d4ff96b403ceedb5baaa879e9feb12c35", "filename": "libstdc++-v3/testsuite/20_util/to_chars/float.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc?ref=66c5f24788652a49b528f14e23e8121ad0935ace", "patch": "@@ -33,6 +33,7 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-effective-target ieee-floats }\n+// { dg-require-effective-target size32plus }\n \n #include <charconv>\n "}, {"sha": "447e5368811a6be6a5375ed7a22c655c1233d8d1", "filename": "libstdc++-v3/testsuite/20_util/to_chars/long_double.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c5f24788652a49b528f14e23e8121ad0935ace/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc?ref=66c5f24788652a49b528f14e23e8121ad0935ace", "patch": "@@ -35,6 +35,7 @@\n // { dg-xfail-run-if \"Non-conforming printf (see PR98384)\" { *-*-solaris* *-*-darwin* } }\n \n // { dg-require-effective-target ieee-floats }\n+// { dg-require-effective-target size32plus }\n \n #include <charconv>\n "}]}