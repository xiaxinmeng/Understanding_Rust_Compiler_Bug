{"sha": "2df1df945fac85d7b3d084001414a66a2709d8fe", "node_id": "C_kwDOANBUbNoAKDJkZjFkZjk0NWZhYzg1ZDdiM2QwODQwMDE0MTRhNjZhMjcwOWQ4ZmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-21T09:38:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-21T09:38:59Z"}, "message": "expand: Fix up expand_cond_expr_using_cmove [PR106030]\n\nIf expand_cond_expr_using_cmove can't find a cmove optab for a particular\nmode, it tries to promote the mode and perform the cmove in the promoted\nmode.\n\nThe testcase in the patch ICEs on arm because in that case we pass temp which\nhas the promoted mode (SImode) as target to expand_operands where the\noperands have the non-promoted mode (QImode).\nLater on the function uses paradoxical subregs:\n  if (GET_MODE (op1) != mode)\n    op1 = gen_lowpart (mode, op1);\n\n  if (GET_MODE (op2) != mode)\n    op2 = gen_lowpart (mode, op2);\nto change the operand modes.\n\nThe following patch fixes it by passing NULL_RTX as target if it has\npromoted mode.\n\n2022-06-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/106030\n\t* expr.cc (expand_cond_expr_using_cmove): Pass NULL_RTX instead of\n\ttemp to expand_operands if mode has been promoted.\n\n\t* gcc.c-torture/compile/pr106030.c: New test.", "tree": {"sha": "0337368494e50e9b977c299dde87ed58656e3512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0337368494e50e9b977c299dde87ed58656e3512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df1df945fac85d7b3d084001414a66a2709d8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df1df945fac85d7b3d084001414a66a2709d8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df1df945fac85d7b3d084001414a66a2709d8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df1df945fac85d7b3d084001414a66a2709d8fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57424087e82db140c06d4ea73f9700d5291c5bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57424087e82db140c06d4ea73f9700d5291c5bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57424087e82db140c06d4ea73f9700d5291c5bc2"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "c90cde35006bf44b560cdb2ecb6cfc113bf3fb89", "filename": "gcc/expr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df1df945fac85d7b3d084001414a66a2709d8fe/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df1df945fac85d7b3d084001414a66a2709d8fe/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=2df1df945fac85d7b3d084001414a66a2709d8fe", "patch": "@@ -8832,7 +8832,8 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n   expanding_cond_expr_using_cmove = true;\n   start_sequence ();\n   expand_operands (treeop1, treeop2,\n-\t\t   temp, &op1, &op2, EXPAND_NORMAL);\n+\t\t   mode == orig_mode ? temp : NULL_RTX, &op1, &op2,\n+\t\t   EXPAND_NORMAL);\n \n   if (TREE_CODE (treeop0) == SSA_NAME\n       && (srcstmt = get_def_for_expr_class (treeop0, tcc_comparison)))"}, {"sha": "7514b348ff997708ecde403ec5f92a75b770432d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr106030.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df1df945fac85d7b3d084001414a66a2709d8fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106030.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df1df945fac85d7b3d084001414a66a2709d8fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106030.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106030.c?ref=2df1df945fac85d7b3d084001414a66a2709d8fe", "patch": "@@ -0,0 +1,16 @@\n+/* PR middle-end/106030 */\n+\n+int a, b, c;\n+\n+char\n+foo (int x, int y)\n+{\n+  return x * y;\n+}\n+\n+void\n+bar (void)\n+{\n+  char d = (foo <= b) * a;\n+  c = foo (2 != bar, d);\n+}"}]}