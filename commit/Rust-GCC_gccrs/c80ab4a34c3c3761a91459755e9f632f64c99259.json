{"sha": "c80ab4a34c3c3761a91459755e9f632f64c99259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwYWI0YTM0YzNjMzc2MWE5MTQ1OTc1NWU5ZjYzMmY2NGM5OTI1OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-04T15:59:19Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-04T15:59:19Z"}, "message": "Support __builtin_expect_with_probability for analysis of # of loop iterations.\n\n2019-07-04  Martin Liska  <mliska@suse.cz>\n\n\t* tree-ssa-loop-niter.c (get_upper_bound_based_on_builtin_expr_with_prob):\n\tNew function.\n\t(estimate_numbers_of_iterations):\n\tSupport __builtin_expect_with_probability for analysis\n\tof # of loop iterations.\n\nFrom-SVN: r273087", "tree": {"sha": "bf5aeca394c04d8447ed83b34be19552a09c2721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5aeca394c04d8447ed83b34be19552a09c2721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80ab4a34c3c3761a91459755e9f632f64c99259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80ab4a34c3c3761a91459755e9f632f64c99259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80ab4a34c3c3761a91459755e9f632f64c99259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80ab4a34c3c3761a91459755e9f632f64c99259/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee118c14f71f43a4b82c439cd4381e034bd2786a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee118c14f71f43a4b82c439cd4381e034bd2786a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee118c14f71f43a4b82c439cd4381e034bd2786a"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "d4e999194f091aa97b6c5c0cf236ffaef6fdd55e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80ab4a34c3c3761a91459755e9f632f64c99259/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80ab4a34c3c3761a91459755e9f632f64c99259/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c80ab4a34c3c3761a91459755e9f632f64c99259", "patch": "@@ -1,3 +1,11 @@\n+2019-07-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (get_upper_bound_based_on_builtin_expr_with_prob):\n+\tNew function.\n+\t(estimate_numbers_of_iterations):\n+\tSupport __builtin_expect_with_probability for analysis\n+\tof # of loop iterations.\n+\n 2019-07-04  Alexandre Oliva <oliva@adacore.com>\n \n \t* doc/generic.texi (Cleanups): Document EH_ELSE_EXPR."}, {"sha": "5e75a412d93e980d65b41b2102af23283218f149", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80ab4a34c3c3761a91459755e9f632f64c99259/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80ab4a34c3c3761a91459755e9f632f64c99259/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=c80ab4a34c3c3761a91459755e9f632f64c99259", "patch": "@@ -4183,6 +4183,55 @@ maybe_lower_iteration_bound (struct loop *loop)\n   delete not_executed_last_iteration;\n }\n \n+/* Get expected upper bound for number of loop iterations for\n+   BUILT_IN_EXPECT_WITH_PROBABILITY for a condition COND.  */\n+\n+static tree\n+get_upper_bound_based_on_builtin_expr_with_prob (gcond *cond)\n+{\n+  if (cond == NULL)\n+    return NULL_TREE;\n+\n+  tree lhs = gimple_cond_lhs (cond);\n+  if (TREE_CODE (lhs) != SSA_NAME)\n+    return NULL_TREE;\n+\n+  gimple *stmt = SSA_NAME_DEF_STMT (gimple_cond_lhs (cond));\n+  gcall *def = dyn_cast<gcall *> (stmt);\n+  if (def == NULL)\n+    return NULL_TREE;\n+\n+  tree decl = gimple_call_fndecl (def);\n+  if (!decl\n+      || !fndecl_built_in_p (decl, BUILT_IN_EXPECT_WITH_PROBABILITY)\n+      || gimple_call_num_args (stmt) != 3)\n+    return NULL_TREE;\n+\n+  tree c = gimple_call_arg (def, 1);\n+  tree condt = TREE_TYPE (lhs);\n+  tree res = fold_build2 (gimple_cond_code (cond),\n+\t\t\t  condt, c,\n+\t\t\t  gimple_cond_rhs (cond));\n+  if (TREE_CODE (res) != INTEGER_CST)\n+    return NULL_TREE;\n+\n+\n+  tree prob = gimple_call_arg (def, 2);\n+  tree t = TREE_TYPE (prob);\n+  tree one\n+    = build_real_from_int_cst (t,\n+\t\t\t       integer_one_node);\n+  if (integer_zerop (res))\n+    prob = fold_build2 (MINUS_EXPR, t, one, prob);\n+  tree r = fold_build2 (RDIV_EXPR, t, one, prob);\n+  if (TREE_CODE (r) != REAL_CST)\n+    return NULL_TREE;\n+\n+  HOST_WIDE_INT probi\n+    = real_to_integer (TREE_REAL_CST_PTR (r));\n+  return build_int_cst (condt, probi);\n+}\n+\n /* Records estimates on numbers of iterations of LOOP.  If USE_UNDEFINED_P\n    is true also use estimates derived from undefined behavior.  */\n \n@@ -4231,6 +4280,23 @@ estimate_numbers_of_iterations (struct loop *loop)\n   likely_exit = single_likely_exit (loop);\n   FOR_EACH_VEC_ELT (exits, i, ex)\n     {\n+      if (ex == likely_exit)\n+\t{\n+\t  gimple *stmt = last_stmt (ex->src);\n+\t  if (stmt != NULL)\n+\t    {\n+\t      gcond *cond = dyn_cast<gcond *> (stmt);\n+\t      tree niter_bound\n+\t\t= get_upper_bound_based_on_builtin_expr_with_prob (cond);\n+\t      if (niter_bound != NULL_TREE)\n+\t\t{\n+\t\t  widest_int max = derive_constant_upper_bound (niter_bound);\n+\t\t  record_estimate (loop, niter_bound, max, cond,\n+\t\t\t\t   true, true, false);\n+\t\t}\n+\t    }\n+\t}\n+\n       if (!number_of_iterations_exit (loop, ex, &niter_desc, false, false))\n \tcontinue;\n "}]}