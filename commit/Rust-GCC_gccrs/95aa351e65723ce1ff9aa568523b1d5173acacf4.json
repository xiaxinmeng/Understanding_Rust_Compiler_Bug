{"sha": "95aa351e65723ce1ff9aa568523b1d5173acacf4", "node_id": "C_kwDOANBUbNoAKDk1YWEzNTFlNjU3MjNjZTFmZjlhYTU2ODUyM2IxZDUxNzNhY2FjZjQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-15T09:21:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-15T09:25:50Z"}, "message": "Support generics in check for valid types in arithmetic expressions\n\nWhen we check for valid types we need to be sure to call destructure which\nwill extract out any generics so that we are checking the actual concrete\ntype that is being used here.\n\nFixes #1383", "tree": {"sha": "335a66022bc0c5b0472b5f3d98d17fc445c9adaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/335a66022bc0c5b0472b5f3d98d17fc445c9adaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95aa351e65723ce1ff9aa568523b1d5173acacf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95aa351e65723ce1ff9aa568523b1d5173acacf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95aa351e65723ce1ff9aa568523b1d5173acacf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95aa351e65723ce1ff9aa568523b1d5173acacf4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9f7f287ef0a775ac6a504d743e20c2f5488f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9f7f287ef0a775ac6a504d743e20c2f5488f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9f7f287ef0a775ac6a504d743e20c2f5488f6f"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "df07cb3e9202110044bc61e3fed95fdcd8c4e8b0", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95aa351e65723ce1ff9aa568523b1d5173acacf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95aa351e65723ce1ff9aa568523b1d5173acacf4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=95aa351e65723ce1ff9aa568523b1d5173acacf4", "patch": "@@ -1060,9 +1060,11 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t Location expr_locus);\n \n   bool\n-  validate_arithmetic_type (TyTy::BaseType *type,\n+  validate_arithmetic_type (const TyTy::BaseType *tyty,\n \t\t\t    HIR::ArithmeticOrLogicalExpr::ExprType expr_type)\n   {\n+    const TyTy::BaseType *type = tyty->destructure ();\n+\n     // https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators\n     // this will change later when traits are added\n     switch (expr_type)\n@@ -1078,10 +1080,10 @@ class TypeCheckExpr : public TypeCheckBase\n \t       || (type->get_kind () == TyTy::TypeKind::USIZE)\n \t       || (type->get_kind () == TyTy::TypeKind::ISIZE)\n \t       || (type->get_kind () == TyTy::TypeKind::INFER\n-\t\t   && (((TyTy::InferType *) type)->get_infer_kind ()\n+\t\t   && (((const TyTy::InferType *) type)->get_infer_kind ()\n \t\t       == TyTy::InferType::INTEGRAL))\n \t       || (type->get_kind () == TyTy::TypeKind::INFER\n-\t\t   && (((TyTy::InferType *) type)->get_infer_kind ()\n+\t\t   && (((const TyTy::InferType *) type)->get_infer_kind ()\n \t\t       == TyTy::InferType::FLOAT));\n \n \t// integers or bools\n@@ -1094,7 +1096,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t       || (type->get_kind () == TyTy::TypeKind::ISIZE)\n \t       || (type->get_kind () == TyTy::TypeKind::BOOL)\n \t       || (type->get_kind () == TyTy::TypeKind::INFER\n-\t\t   && (((TyTy::InferType *) type)->get_infer_kind ()\n+\t\t   && (((const TyTy::InferType *) type)->get_infer_kind ()\n \t\t       == TyTy::InferType::INTEGRAL));\n \n \t// integers only\n@@ -1105,10 +1107,12 @@ class TypeCheckExpr : public TypeCheckBase\n \t       || (type->get_kind () == TyTy::TypeKind::USIZE)\n \t       || (type->get_kind () == TyTy::TypeKind::ISIZE)\n \t       || (type->get_kind () == TyTy::TypeKind::INFER\n-\t\t   && (((TyTy::InferType *) type)->get_infer_kind ()\n+\t\t   && (((const TyTy::InferType *) type)->get_infer_kind ()\n \t\t       == TyTy::InferType::INTEGRAL));\n       }\n+\n     gcc_unreachable ();\n+    return false;\n   }\n \n   /* The return value of TypeCheckExpr::Resolve */"}, {"sha": "cca12e8fc714c41a6fb373be01ba7fd487402c6d", "filename": "gcc/testsuite/rust/compile/issue-1383.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95aa351e65723ce1ff9aa568523b1d5173acacf4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95aa351e65723ce1ff9aa568523b1d5173acacf4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs?ref=95aa351e65723ce1ff9aa568523b1d5173acacf4", "patch": "@@ -0,0 +1,8 @@\n+pub fn generic_function<X>(a: X) -> X {\n+    a\n+}\n+\n+fn main() -> i32 {\n+    let a = generic_function(123);\n+    a - 123\n+}"}]}