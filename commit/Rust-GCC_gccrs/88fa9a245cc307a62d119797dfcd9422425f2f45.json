{"sha": "88fa9a245cc307a62d119797dfcd9422425f2f45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmYTlhMjQ1Y2MzMDdhNjJkMTE5Nzk3ZGZjZDk0MjI0MjVmMmY0NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2016-04-18T09:52:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T09:52:22Z"}, "message": "sem_ch6.adb (Analyze_Expression_Function): Set Inlined flag on the entity of a subprogram declaration that is completed by...\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Set Inlined flag\n\ton the entity of a subprogram declaration that is completed by\n\tan expression function.\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Current_Instance): A entity given by a subtype\n\tdeclaration can appear in an aspect specification for a dynamic\n\tpredicate, and a pragma for aspect Predicate_Failure.\n\t* exp_util.adb (Replace_Subtype_References): Replace current\n\toccurrences of the subtype to which a dynamic predicate applies,\n\tbyt the expression that triggers a predicate check. Needed to\n\timplement new aspect Predicate_Failure.\n\nFrom-SVN: r235107", "tree": {"sha": "e9c856e0730b169877d12cfd886fb7003f6dbad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9c856e0730b169877d12cfd886fb7003f6dbad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88fa9a245cc307a62d119797dfcd9422425f2f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fa9a245cc307a62d119797dfcd9422425f2f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fa9a245cc307a62d119797dfcd9422425f2f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fa9a245cc307a62d119797dfcd9422425f2f45/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b47778e62c578bea9b4e34dc4cf6f7f4d01e8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b47778e62c578bea9b4e34dc4cf6f7f4d01e8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b47778e62c578bea9b4e34dc4cf6f7f4d01e8bc"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "c9d9ba05a854a5bd4dc09937738ee7adeb8ecc15", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=88fa9a245cc307a62d119797dfcd9422425f2f45", "patch": "@@ -1,3 +1,19 @@\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Set Inlined flag\n+\ton the entity of a subprogram declaration that is completed by\n+\tan expression function.\n+\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Current_Instance): A entity given by a subtype\n+\tdeclaration can appear in an aspect specification for a dynamic\n+\tpredicate, and a pragma for aspect Predicate_Failure.\n+\t* exp_util.adb (Replace_Subtype_References): Replace current\n+\toccurrences of the subtype to which a dynamic predicate applies,\n+\tbyt the expression that triggers a predicate check. Needed to\n+\timplement new aspect Predicate_Failure.\n+\n 2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* a-intsig.ads, a-intsig.adb: Removed, no longer used."}, {"sha": "2bed3f64c9d560389a256173b18399198314b0e6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=88fa9a245cc307a62d119797dfcd9422425f2f45", "patch": "@@ -46,6 +46,7 @@ with Rident;   use Rident;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch13; use Sem_Ch13;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n@@ -6503,9 +6504,38 @@ package body Exp_Util is\n      (Typ  : Entity_Id;\n       Expr : Node_Id) return Node_Id\n    is\n-      Loc      : constant Source_Ptr := Sloc (Expr);\n-      Arg_List : List_Id;\n-      Nam      : Name_Id;\n+      procedure Replace_Subtype_Reference (N : Node_Id);\n+      --  Replace current occurrences of the subtype to which a dynamic\n+      --  predicate applies, by the expression that triggers a predicate\n+      --  check. This is needed for aspect Predicate_Failure, for which\n+      --  we do not generate a wrapper procedure, but simply modify the\n+      --  expression for the pragma of the predicate check.\n+\n+      --------------------------------\n+      --  Replace_Subtype_Reference --\n+      --------------------------------\n+\n+      procedure Replace_Subtype_Reference (N : Node_Id) is\n+      begin\n+         Rewrite (N, New_Copy_Tree (Expr));\n+\n+         --  We want to treat the node as if it comes from source, so\n+         --  that ASIS will not ignore it.\n+\n+         Set_Comes_From_Source (N, True);\n+      end Replace_Subtype_Reference;\n+\n+      procedure Replace_Subtype_References is\n+        new Replace_Type_References_Generic (Replace_Subtype_Reference);\n+\n+      --  Local variables\n+\n+      Loc       : constant Source_Ptr := Sloc (Expr);\n+      Arg_List  : List_Id;\n+      Fail_Expr : Node_Id;\n+      Nam       : Name_Id;\n+\n+   --  Start of processing for Make_Predicate_Check\n \n    begin\n       --  If predicate checks are suppressed, then return a null statement. For\n@@ -6540,12 +6570,19 @@ package body Exp_Util is\n         Make_Pragma_Argument_Association (Loc,\n           Expression => Make_Predicate_Call (Typ, Expr)));\n \n+      --  If subtype has Predicate_Failure defined, add the correponding\n+      --  expression as an additional pragma parameter, after replacing\n+      --  current instances with the expression being checked.\n+\n       if Has_Aspect (Typ, Aspect_Predicate_Failure) then\n+         Fail_Expr :=\n+           New_Copy_Tree\n+             (Expression (Find_Aspect (Typ, Aspect_Predicate_Failure)));\n+         Replace_Subtype_References (Fail_Expr, Typ);\n+\n          Append_To (Arg_List,\n            Make_Pragma_Argument_Association (Loc,\n-             Expression =>\n-               New_Copy_Tree\n-                 (Expression (Find_Aspect (Typ, Aspect_Predicate_Failure)))));\n+             Expression => Fail_Expr));\n       end if;\n \n       return"}, {"sha": "7f424791e6f356ed0426928f131667d36fc1d151", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=88fa9a245cc307a62d119797dfcd9422425f2f45", "patch": "@@ -362,7 +362,7 @@ package body Sem_Ch6 is\n          Set_Is_Inlined (Prev);\n \n       --  If the expression function is a completion, the previous declaration\n-      --  must come from source. We know already that appears in the current\n+      --  must come from source. We know already that it appears in the current\n       --  scope. The entity itself may be internally created if within a body\n       --  to be inlined.\n \n@@ -371,6 +371,7 @@ package body Sem_Ch6 is\n         and then not Is_Formal_Subprogram (Prev)\n       then\n          Set_Has_Completion (Prev, False);\n+         Set_Is_Inlined (Prev);\n \n          --  An expression function that is a completion freezes the\n          --  expression. This means freezing the return type, and if it is\n@@ -411,7 +412,6 @@ package body Sem_Ch6 is\n          --  Not clear that the backend can inline it in this case ???\n \n          if Has_Completion (Prev) then\n-            Set_Is_Inlined (Prev);\n \n             --  The formals of the expression function are body formals,\n             --  and do not appear in the ali file, which will only contain"}, {"sha": "7bfe72455b9046c9742a55348a9261c027f0e194", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fa9a245cc307a62d119797dfcd9422425f2f45/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=88fa9a245cc307a62d119797dfcd9422425f2f45", "patch": "@@ -11574,6 +11574,23 @@ package body Sem_Util is\n               and then Defining_Entity (P) = Typ\n             then\n                return True;\n+\n+            --  A subtype name may appear in an aspect specification for a\n+            --  Predicate_Failure aspect, for which we do not construct a\n+            --  wrapper procedure. The subtype will be replaced by the\n+            --  expression being tested when the corresponding predicate\n+            --  check is expanded.\n+\n+            elsif Nkind (P) = N_Aspect_Specification\n+              and then Nkind (Parent (P)) = N_Subtype_Declaration\n+            then\n+               return True;\n+\n+            elsif Nkind (P) = N_Pragma\n+              and then\n+                Get_Pragma_Id (Pragma_Name (P)) = Pragma_Predicate_Failure\n+            then\n+               return True;\n             end if;\n \n             P := Parent (P);"}]}