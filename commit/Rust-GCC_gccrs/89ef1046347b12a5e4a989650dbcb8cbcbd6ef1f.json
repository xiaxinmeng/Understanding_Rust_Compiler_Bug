{"sha": "89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllZjEwNDYzNDdiMTJhNWU0YTk4OTY1MGRiY2I4Y2JjYmQ2ZWYxZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-01T05:53:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-01T05:53:52Z"}, "message": "Call default_conversion for NAME.\n\n(build_shared_structure_initializer):\nCall default_conversion for NAME.\n(add_objc_string): Make an ADDR_EXPR to return.\n(init_objc_symtab): Make ADDR_EXPR for UOBJC_SELECTOR_TABLE_decl.\n\nBuild all CONSTRUCTORs with types.\n(build_constructor): New function.  All CONSTRUCTOR builds changed.\n(init_def_list, init_objc_symtab): New arg TYPE.\n(init_module_descriptor): Likewise.\n(init_objc_symtab): Pass TYPE arg to init_def_list.\n(generate_objc_symtab_decl): Pass TYPE arg to init_objc_symtab.\n(build_module_descriptor): Pass TYPE arg to init_module_descriptor.\n(build_descriptor_table_initializer): New arg TYPE.\n(generate_method_descriptors): Pass TYPE arg to\nbuild_descriptor_table_initializer.\n(generate_protocols): Pass TYPE arg to build_protocol_initializer.\n(uild_protocol_initializer): New arg TYPE.\n(build_ivar_list_initializer): New arg TYPE.\n(generate_ivar_lists): Pass TYPE arg to build_ivar_list_initializer.\n(build_dispatch_table_initializer): New arg TYPE.\n(generate_dispatch_tables): Pass TYPE arg to\nbuild_dispatch_table_initializer.\n(build_category_initializer): New arg TYPE.\n(build_shared_structure_initializer): New arg TYPE.\n(generate_category): Pass TYPE arg to build_category_initializer.\n(generate_shared_structures): Pass TYPE arg to\nbuild_shared_structure_initializer.\n\nFrom-SVN: r5049", "tree": {"sha": "d9378276fe02773c1c0f5be4e8bcb42e318bc6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9378276fe02773c1c0f5be4e8bcb42e318bc6e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f/comments", "author": null, "committer": null, "parents": [{"sha": "61e215dd1f4d56583102a08cd2b9c0533caed3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e215dd1f4d56583102a08cd2b9c0533caed3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e215dd1f4d56583102a08cd2b9c0533caed3ac"}], "stats": {"total": 189, "additions": 123, "deletions": 66}, "files": [{"sha": "3b08b9d8585c2d59d36e9e54a0a10052e1a69cb2", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 123, "deletions": 66, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=89ef1046347b12a5e4a989650dbcb8cbcbd6ef1f", "patch": "@@ -145,8 +145,9 @@ static void finish_objc\t\t\t\tPROTO((void));\n /* code generation */\n \n static void synth_module_prologue\t\tPROTO((void));\n+static tree build_constructor\t\t\tPROTO((tree, tree));\n static char *build_module_descriptor\t\tPROTO((void));\n-static tree init_module_descriptor\t\tPROTO((void));\n+static tree init_module_descriptor\t\tPROTO((tree));\n static tree build_objc_method_call\t\tPROTO((int, tree, tree, tree, tree, tree));\n static void generate_strings\t\t\tPROTO((void));\n static void build_selector_translation_table\tPROTO((void));\n@@ -158,8 +159,8 @@ static tree build_private_template\t\tPROTO((tree));\n static void build_class_template\t\tPROTO((void));\n static void build_category_template\t\tPROTO((void));\n static tree build_super_template\t\tPROTO((void));\n-static tree build_category_initializer\t\tPROTO((tree, tree, tree, tree, tree));\n-static tree build_protocol_initializer\t\tPROTO((tree, tree, tree, tree));\n+static tree build_category_initializer\t\tPROTO((tree, tree, tree, tree, tree, tree));\n+static tree build_protocol_initializer\t\tPROTO((tree, tree, tree, tree, tree));\n \n static void synth_forward_declarations\t\tPROTO((void));\n static void generate_ivar_lists\t\t\tPROTO((void));\n@@ -253,8 +254,8 @@ static tree lookup_protocol_in_reflist\t\tPROTO((tree, tree));\n static tree create_builtin_decl\t\t\tPROTO((enum tree_code, tree, char *));\n static tree my_build_string\t\t\tPROTO((int, char *));\n static void build_objc_symtab_template\t\tPROTO((void));\n-static tree init_def_list\t\t\tPROTO((void));\n-static tree init_objc_symtab\t\t\tPROTO((void));\n+static tree init_def_list\t\t\tPROTO((tree));\n+static tree init_objc_symtab\t\t\tPROTO((tree));\n static void forward_declare_categories\t\tPROTO((void));\n static void generate_objc_symtab_decl\t\tPROTO((void));\n static tree build_selector\t\t\tPROTO((tree));\n@@ -264,7 +265,7 @@ static tree build_class_reference_decl\t\tPROTO((tree));\n static void add_class_reference\t\t\tPROTO((tree));\n static tree objc_copy_list\t\t\tPROTO((tree, tree *));\n static tree build_protocol_template\t\tPROTO((void));\n-static tree build_descriptor_table_initializer\tPROTO((tree, int *));\n+static tree build_descriptor_table_initializer\tPROTO((tree, tree, int *));\n static tree build_method_prototype_list_template PROTO((tree, int));\n static tree build_method_prototype_template\tPROTO((void));\n static int forwarding_offset\t\t\tPROTO((tree));\n@@ -278,11 +279,11 @@ static void generate_protocols\t\t\tPROTO((void));\n static void check_ivars\t\t\t\tPROTO((tree, tree));\n static tree build_ivar_list_template\t\tPROTO((tree, int));\n static tree build_method_list_template\t\tPROTO((tree, int));\n-static tree build_ivar_list_initializer\t\tPROTO((tree, int *));\n+static tree build_ivar_list_initializer\t\tPROTO((tree, tree, int *));\n static tree generate_ivars_list\t\t\tPROTO((tree, char *, int, tree));\n-static tree build_dispatch_table_initializer\tPROTO((tree, int *));\n+static tree build_dispatch_table_initializer\tPROTO((tree, tree, int *));\n static tree generate_dispatch_table\t\tPROTO((tree, char *, int, tree));\n-static tree build_shared_structure_initializer\tPROTO((tree, tree, tree, tree, int, tree, tree, tree));\n+static tree build_shared_structure_initializer\tPROTO((tree, tree, tree, tree, tree, int, tree, tree, tree));\n static void generate_category\t\t\tPROTO((tree));\n static int is_objc_type_qualifier\t\tPROTO((tree));\n static tree adjust_type_for_id_default\t\tPROTO((tree));\n@@ -1171,13 +1172,26 @@ build_objc_string_object (strings)\n   initlist = tree_cons (NULLT, build_unary_op (ADDR_EXPR, string, 1),\n \t\t\tinitlist);\n   initlist = tree_cons (NULLT, build_int_2 (length, 0), initlist);\n-  constructor = build (CONSTRUCTOR, constant_string_type, NULLT,\n-\t\t       nreverse (initlist));\n+  constructor = build_constructor (constant_string_type,\n+\t\t\t\t   nreverse (initlist));\n+\n+  return build_unary_op (ADDR_EXPR, constructor, 1);\n+}\n+\n+/* Build a static constant CONSTRUCTOR\n+   with type TYPE and elements ELTS.  */\n+\n+static tree\n+build_constructor (type, elts)\n+     tree type, elts;\n+{\n+  tree constructor = build (CONSTRUCTOR, type, NULL_TREE, elts);\n+\n   TREE_CONSTANT (constructor) = 1;\n   TREE_STATIC (constructor) = 1;\n   TREE_READONLY (constructor) = 1;\n \n-  return build_unary_op (ADDR_EXPR, constructor, 1);\n+  return constructor;\n }\n \f\n /* Take care of defining and initializing _OBJC_SYMBOLS.  */\n@@ -1245,7 +1259,8 @@ build_objc_symtab_template ()\n    This is a CONSTRUCTOR.  */\n \n static tree\n-init_def_list ()\n+init_def_list (type)\n+     tree type;\n {\n   tree expr, initlist = NULLT;\n   struct imp_entry *impent;\n@@ -1269,13 +1284,14 @@ init_def_list ()\n \t    initlist = tree_cons (NULLT, expr, initlist);\n \t  }\n       }\n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* Construct the initial value for all of _objc_symtab.  */\n \n static tree\n-init_objc_symtab ()\n+init_objc_symtab (type)\n+     tree type;\n {\n   tree initlist;\n \n@@ -1288,7 +1304,10 @@ init_objc_symtab ()\n   if (flag_next_runtime || ! sel_ref_chain)\n     initlist = tree_cons (NULLT, build_int_2 (0, 0), initlist);\n   else\n-    initlist = tree_cons (NULLT, UOBJC_SELECTOR_TABLE_decl, initlist);\n+    initlist = tree_cons (NULLT,\n+\t\t\t  build_unary_op (ADDR_EXPR,\n+\t\t\t\t\t  UOBJC_SELECTOR_TABLE_decl, 1),\n+\t\t\t  initlist);\n \n   /* cls_def_cnt = { ..., 5, ... } */\n \n@@ -1301,9 +1320,15 @@ init_objc_symtab ()\n   /* cls_def = { ..., { &Foo, &Bar, ...}, ... } */\n \n   if (imp_count || cat_count)\n-    initlist = tree_cons (NULLT, init_def_list (), initlist);\n+    {\n+      tree field = TYPE_FIELDS (type);\n+      field = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (field))));\n+\n+      initlist = tree_cons (NULLT, init_def_list (TREE_TYPE (field)),\n+\t\t\t    initlist);\n+    }\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* Push forward-declarations of all the categories\n@@ -1354,11 +1379,14 @@ generate_objc_symtab_decl ()\n   end_temporary_allocation ();\t/* start_decl trying to be smart about inits */\n   TREE_USED (UOBJC_SYMBOLS_decl) = 1;\n   DECL_IGNORED_P (UOBJC_SYMBOLS_decl) = 1;\n-  finish_decl (UOBJC_SYMBOLS_decl, init_objc_symtab (), NULLT);\n+  finish_decl (UOBJC_SYMBOLS_decl,\n+\t       init_objc_symtab (TREE_TYPE (UOBJC_SYMBOLS_decl)),\n+\t       NULLT);\n }\n \f\n static tree\n-init_module_descriptor ()\n+init_module_descriptor (type)\n+     tree type;\n {\n   tree initlist, expr;\n \n@@ -1385,7 +1413,7 @@ init_module_descriptor ()\n     expr = build_int_2 (0, 0);\n   initlist = tree_cons (NULLT, expr, initlist);\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* Write out the data structures to describe Objective C classes defined.\n@@ -1446,7 +1474,9 @@ build_module_descriptor ()\n \n   end_temporary_allocation ();\t/* start_decl trying to be smart about inits */\n   DECL_IGNORED_P (UOBJC_MODULES_decl) = 1;\n-  finish_decl (UOBJC_MODULES_decl, init_module_descriptor (), NULLT);\n+  finish_decl (UOBJC_MODULES_decl,\n+\t       init_module_descriptor (TREE_TYPE (UOBJC_MODULES_decl)),\n+\t       NULLT);\n \n   /* Mark the decl to avoid \"defined but not used\" warning. */\n   DECL_IN_SYSTEM_HEADER (UOBJC_MODULES_decl) = 1;\n@@ -1747,7 +1777,8 @@ build_selector_translation_table ()\n       /* NULL terminate the list and fix the decl for output. */\n       initlist = tree_cons (NULLT, build_int_2 (0, 0), initlist);\n       DECL_INITIAL (UOBJC_SELECTOR_TABLE_decl) = (tree) 1;\n-      initlist = build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+      initlist = build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n+\t\t\t\t    nreverse (initlist));\n       finish_decl (UOBJC_SELECTOR_TABLE_decl, initlist, NULLT);\n     }\n }\n@@ -1910,7 +1941,7 @@ add_objc_string (ident, section)\n   while (*chain)\n     {\n       if (TREE_VALUE (*chain) == ident)\n-\treturn TREE_PURPOSE (*chain);\n+\treturn build_unary_op (ADDR_EXPR, TREE_PURPOSE (*chain), 1);\n \n       chain = &TREE_CHAIN (*chain);\n     }\n@@ -1919,7 +1950,7 @@ add_objc_string (ident, section)\n \n   *chain = perm_tree_cons (decl, ident, NULLT);\n \n-  return decl;\n+  return build_unary_op (ADDR_EXPR, decl, 1);\n }\n \n static tree\n@@ -2226,7 +2257,8 @@ build_protocol_template ()\n }\n \n static tree\n-build_descriptor_table_initializer (entries, size)\n+build_descriptor_table_initializer (type, entries, size)\n+     tree type;\n      tree entries;\n      int *size;\n {\n@@ -2243,7 +2275,7 @@ build_descriptor_table_initializer (entries, size)\n     }\n   while (entries);\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* struct objc_method_prototype_list {\n@@ -2456,7 +2488,8 @@ generate_descriptor_table (type, name, size, list, proto)\n   initlist = build_tree_list (NULLT, build_int_2 (size, 0));\n   initlist = tree_cons (NULLT, list, initlist);\n \n-  finish_decl (decl, build_nt (CONSTRUCTOR, NULLT, nreverse (initlist)), NULLT);\n+  finish_decl (decl, build_constructor (type, nreverse (initlist)),\n+\t       NULLT);\n \n   return decl;\n }\n@@ -2480,14 +2513,18 @@ generate_method_descriptors (protocol)\t/* generate_dispatch_tables */\n   chain = PROTOCOL_CLS_METHODS (protocol);\n   if (chain)\n     {\n-      size = 0;\n+      tree field;\n \n-      initlist = build_descriptor_table_initializer (chain, &size);\n+      size = 0;\n \n       method_list_template\n \t= build_method_prototype_list_template (objc_method_prototype_template,\n \t\t\t\t\t\tsize);\n \n+      field = TREE_CHAIN (TYPE_FIELDS (method_list_template));\n+      initlist = build_descriptor_table_initializer (TREE_TYPE (field),\n+\t\t\t\t\t\t     chain, &size);\n+\n       UOBJC_CLASS_METHODS_decl\n \t= generate_descriptor_table (method_list_template,\n \t\t\t\t     \"_OBJC_PROTOCOL_CLASS_METHODS\",\n@@ -2501,12 +2538,16 @@ generate_method_descriptors (protocol)\t/* generate_dispatch_tables */\n   chain = PROTOCOL_NST_METHODS (protocol);\n   if (chain)\n     {\n+      tree field;\n+\n       size = 0;\n-      initlist = build_descriptor_table_initializer (chain, &size);\n \n       method_list_template\n \t= build_method_prototype_list_template (objc_method_prototype_template,\n \t\t\t\t\t\tsize);\n+      field = TREE_CHAIN (TYPE_FIELDS (method_list_template));\n+      initlist = build_descriptor_table_initializer (TREE_TYPE (field),\n+\t\t\t\t\t\t     chain, &size);\n \n       UOBJC_INSTANCE_METHODS_decl\n \t= generate_descriptor_table (method_list_template,\n@@ -2691,7 +2732,8 @@ generate_protocols ()\n \n       /* UOBJC_INSTANCE_METHODS_decl/UOBJC_CLASS_METHODS_decl are set\n \t by generate_method_descriptors, which is called above.  */\n-      initlist = build_protocol_initializer (protocol_name_expr, refs_expr,\n+      initlist = build_protocol_initializer (TREE_TYPE (decl),\n+\t\t\t\t\t     protocol_name_expr, refs_expr,\n \t\t\t\t\t     UOBJC_INSTANCE_METHODS_decl,\n \t\t\t\t\t     UOBJC_CLASS_METHODS_decl);\n       finish_decl (decl, initlist, NULLT);\n@@ -2702,8 +2744,9 @@ generate_protocols ()\n }\n \n static tree\n-build_protocol_initializer (protocol_name, protocol_list,\n+build_protocol_initializer (type, protocol_name, protocol_list,\n \t\t\t    instance_methods, class_methods)\n+     tree type;\n      tree protocol_name;\n      tree protocol_list;\n      tree instance_methods;\n@@ -2743,7 +2786,7 @@ build_protocol_initializer (protocol_name, protocol_list,\n       expr = build_unary_op (ADDR_EXPR, class_methods, 0);\n       initlist = tree_cons (NULLT, expr, initlist);\n     }\n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n /* end code generation for protocols... */\n \f\n@@ -3214,7 +3257,8 @@ build_method_list_template (list_type, size)\n }\n \n static tree\n-build_ivar_list_initializer (field_decl, size)\n+build_ivar_list_initializer (type, field_decl, size)\n+     tree type;\n      tree field_decl;\n      int *size;\n {\n@@ -3258,7 +3302,7 @@ build_ivar_list_initializer (field_decl, size)\n     }\n   while (field_decl);\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n static tree\n@@ -3280,7 +3324,9 @@ generate_ivars_list (type, name, size, list)\n   initlist = build_tree_list (NULLT, build_int_2 (size, 0));\n   initlist = tree_cons (NULLT, list, initlist);\n \n-  finish_decl (decl, build_nt (CONSTRUCTOR, NULLT, nreverse (initlist)), NULLT);\n+  finish_decl (decl,\n+\t       build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n+\t       NULLT);\n \n   return decl;\n }\n@@ -3311,13 +3357,13 @@ generate_ivar_lists ()\n       && (chain = TYPE_FIELDS (objc_class_template)))\n     {\n       size = 0;\n-      initlist = build_ivar_list_initializer (chain, &size);\n-\n       ivar_list_template = build_ivar_list_template (objc_ivar_template, size);\n+      initlist = build_ivar_list_initializer (ivar_list_template,\n+\t\t\t\t\t      chain, &size);\n \n-      UOBJC_CLASS_VARIABLES_decl =\n-\tgenerate_ivars_list (ivar_list_template, \"_OBJC_CLASS_VARIABLES\",\n-\t\t\t     size, initlist);\n+      UOBJC_CLASS_VARIABLES_decl\n+\t= generate_ivars_list (ivar_list_template, \"_OBJC_CLASS_VARIABLES\",\n+\t\t\t       size, initlist);\n       /* cast! */\n       TREE_TYPE (UOBJC_CLASS_VARIABLES_decl) = variable_length_type;\n     }\n@@ -3328,13 +3374,13 @@ generate_ivar_lists ()\n   if (chain)\n     {\n       size = 0;\n-      initlist = build_ivar_list_initializer (chain, &size);\n-\n       ivar_list_template = build_ivar_list_template (objc_ivar_template, size);\n+      initlist = build_ivar_list_initializer (ivar_list_template,\n+\t\t\t\t\t      chain, &size);\n \n-      UOBJC_INSTANCE_VARIABLES_decl =\n-\tgenerate_ivars_list (ivar_list_template, \"_OBJC_INSTANCE_VARIABLES\",\n-\t\t\t     size, initlist);\n+      UOBJC_INSTANCE_VARIABLES_decl\n+\t= generate_ivars_list (ivar_list_template, \"_OBJC_INSTANCE_VARIABLES\",\n+\t\t\t       size, initlist);\n       /* cast! */\n       TREE_TYPE (UOBJC_INSTANCE_VARIABLES_decl) = variable_length_type;\n     }\n@@ -3345,7 +3391,8 @@ generate_ivar_lists ()\n }\n \n static tree\n-build_dispatch_table_initializer (entries, size)\n+build_dispatch_table_initializer (type, entries, size)\n+     tree type;\n      tree entries;\n      int *size;\n {\n@@ -3367,7 +3414,7 @@ build_dispatch_table_initializer (entries, size)\n     }\n   while (entries);\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* To accomplish method prototyping without generating all kinds of\n@@ -3441,7 +3488,9 @@ generate_dispatch_table (type, name, size, list)\n   initlist = tree_cons (NULLT, build_int_2 (size, 0), initlist);\n   initlist = tree_cons (NULLT, list, initlist);\n \n-  finish_decl (decl, build_nt (CONSTRUCTOR, NULLT, nreverse (initlist)), NULLT);\n+  finish_decl (decl,\n+\t       build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n+\t       NULLT);\n \n   return decl;\n }\n@@ -3467,10 +3516,11 @@ generate_dispatch_tables ()\n   if (chain)\n     {\n       size = 0;\n-      initlist = build_dispatch_table_initializer (chain, &size);\n \n       method_list_template = build_method_list_template (objc_method_template,\n \t\t\t\t\t\t\t size);\n+      initlist = build_dispatch_table_initializer (method_list_template,\n+\t\t\t\t\t\t   chain, &size);\n \n       UOBJC_CLASS_METHODS_decl\n \t= generate_dispatch_table (method_list_template,\n@@ -3489,19 +3539,20 @@ generate_dispatch_tables ()\n   if (chain)\n     {\n       size = 0;\n-      initlist = build_dispatch_table_initializer (chain, &size);\n \n       method_list_template = build_method_list_template (objc_method_template,\n \t\t\t\t\t\t\t size);\n+      initlist = build_dispatch_table_initializer (method_list_template,\n+\t\t\t\t\t\t   chain, &size);\n       if (TREE_CODE (implementation_context) == CLASS_IMPLEMENTATION_TYPE)\n-\tUOBJC_INSTANCE_METHODS_decl =\n-\t    generate_dispatch_table (method_list_template,\n+\tUOBJC_INSTANCE_METHODS_decl\n+\t  = generate_dispatch_table (method_list_template,\n \t\t\t\t     \"_OBJC_INSTANCE_METHODS\",\n \t\t\t\t     size, initlist);\n       else\n \t/* we have a category */\n-\tUOBJC_INSTANCE_METHODS_decl =\n-\t    generate_dispatch_table (method_list_template,\n+\tUOBJC_INSTANCE_METHODS_decl\n+\t  = generate_dispatch_table (method_list_template,\n \t\t\t\t     \"_OBJC_CATEGORY_INSTANCE_METHODS\",\n \t\t\t\t     size, initlist);\n       /* cast! */\n@@ -3590,15 +3641,17 @@ generate_protocol_list (i_or_p)\n   refs_decl = start_decl (expr_decl, decl_specs, 1);\n   end_temporary_allocation ();\n \n-  finish_decl (refs_decl, build_nt (CONSTRUCTOR, NULLT,\n-\t\t\t\t    nreverse (initlist)), NULLT);\n+  finish_decl (refs_decl, build_constructor (TREE_TYPE (refs_decl),\n+\t\t\t\t\t     nreverse (initlist)),\n+\t       NULLT);\n \n   return refs_decl;\n }\n \n static tree\n-build_category_initializer (cat_name, class_name,\n+build_category_initializer (type, cat_name, class_name,\n \t\t\t    instance_methods, class_methods, protocol_list)\n+     tree type;\n      tree cat_name;\n      tree class_name;\n      tree instance_methods;\n@@ -3647,7 +3700,7 @@ build_category_initializer (cat_name, class_name,\n \tinitlist = tree_cons (NULLT, expr, initlist);\n      }\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* struct objc_class {\n@@ -3670,8 +3723,9 @@ build_category_initializer (cat_name, class_name,\n    };  */\n \n static tree\n-build_shared_structure_initializer (isa, super, name, size, status,\n+build_shared_structure_initializer (type, isa, super, name, size, status,\n \t\t\t\t    dispatch_table, ivar_list, protocol_list)\n+     tree type;\n      tree isa;\n      tree super;\n      tree name;\n@@ -3690,7 +3744,7 @@ build_shared_structure_initializer (isa, super, name, size, status,\n   initlist = tree_cons (NULLT, super, initlist);\n \n   /* name = */\n-  initlist = tree_cons (NULLT, name, initlist);\n+  initlist = tree_cons (NULLT, default_conversion (name), initlist);\n \n   /* version = */\n   initlist = tree_cons (NULLT, build_int_2 (0, 0), initlist);\n@@ -3756,7 +3810,7 @@ build_shared_structure_initializer (isa, super, name, size, status,\n      initlist = tree_cons (NULLT, expr, initlist);\n      }\n \n-  return build_nt (CONSTRUCTOR, NULLT, nreverse (initlist));\n+  return build_constructor (type, nreverse (initlist));\n }\n \n /* static struct objc_category _OBJC_CATEGORY_<name> = { ... };  */\n@@ -3799,7 +3853,8 @@ generate_category (cat)\n \t\t     decl_specs, 1);\n   end_temporary_allocation ();\n \n-  initlist = build_category_initializer (cat_name_expr, class_name_expr,\n+  initlist = build_category_initializer (TREE_TYPE (decl),\n+\t\t\t\t\t cat_name_expr, class_name_expr,\n \t\t\t\t\t UOBJC_INSTANCE_METHODS_decl,\n \t\t\t\t\t UOBJC_CLASS_METHODS_decl,\n \t\t\t\t\t protocol_decl);\n@@ -3882,7 +3937,8 @@ generate_shared_structures ()\n \n   initlist\n     = build_shared_structure_initializer\n-      (root_expr, super_expr, name_expr,\n+      (TREE_TYPE (decl),\n+       root_expr, super_expr, name_expr,\n        build_int_2 ((TREE_INT_CST_LOW (TYPE_SIZE (objc_class_template))\n \t\t    / BITS_PER_UNIT),\n \t\t    0),\n@@ -3900,7 +3956,8 @@ generate_shared_structures ()\n \n   initlist\n     = build_shared_structure_initializer\n-      (build_unary_op (ADDR_EXPR, UOBJC_METACLASS_decl, 0),\n+      (TREE_TYPE (decl),\n+       build_unary_op (ADDR_EXPR, UOBJC_METACLASS_decl, 0),\n        super_expr, name_expr,\n        build_int_2 ((TREE_INT_CST_LOW (TYPE_SIZE (CLASS_STATIC_TEMPLATE (implementation_template)))\n \t\t    / BITS_PER_UNIT),"}]}