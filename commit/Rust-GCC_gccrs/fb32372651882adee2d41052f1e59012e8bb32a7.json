{"sha": "fb32372651882adee2d41052f1e59012e8bb32a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzMjM3MjY1MTg4MmFkZWUyZDQxMDUyZjFlNTkwMTJlOGJiMzJhNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-26T11:52:29Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-14T15:57:08Z"}, "message": "configure: Avoid unnecessary constraints on executables for $build.\n\nThe executables for GCC's c-family compilers must be built with no-PIE\nbecause they use PCH and the current model for this requires that the\nexe is always lauched at the same address.  Since the other language\ncompilers share code with the c-family this constraint is also applied\nto them.\n\nHowever, the executables that run on $build (generators, and parsers\nfor md and def files) need not have any such constraint they do not\nconsume PCH files.\n\nThis change simplifies the configuration and Makefile content by\nremoving the code enforcing no-PIE on these exes.  This also fixes a\nbootstrap issue with some Darwin versions and clang as the bootstrap\ncompiler,  where -no-PIE causes the correct relocation model to be\nswitched off leading to invalid user-space code.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Remove variables related to applying no-PIE\n\tto the exes on $build.\n\t* configure: Regenerate.\n\t* configure.ac: Remove configuration related to applying\n\tno-PIE to the exes on $build.", "tree": {"sha": "511ddedb5b824131a0f08fdf60d2a1579caf1869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/511ddedb5b824131a0f08fdf60d2a1579caf1869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb32372651882adee2d41052f1e59012e8bb32a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb32372651882adee2d41052f1e59012e8bb32a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb32372651882adee2d41052f1e59012e8bb32a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb32372651882adee2d41052f1e59012e8bb32a7/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ee703c479081ac2ea67eb67041551216e66783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ee703c479081ac2ea67eb67041551216e66783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ee703c479081ac2ea67eb67041551216e66783"}], "stats": {"total": 35, "additions": 2, "deletions": 33}, "files": [{"sha": "b8229adf58019e7b5ad5e272ea2de7c232995e41", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fb32372651882adee2d41052f1e59012e8bb32a7", "patch": "@@ -799,13 +799,8 @@ DIR = ../gcc\n # Native compiler for the build machine and its switches.\n CC_FOR_BUILD = @CC_FOR_BUILD@\n CXX_FOR_BUILD = @CXX_FOR_BUILD@\n-NO_PIE_CFLAGS_FOR_BUILD = @NO_PIE_CFLAGS_FOR_BUILD@\n-NO_PIE_FLAG_FOR_BUILD = @NO_PIE_FLAG_FOR_BUILD@\n BUILD_CFLAGS= @BUILD_CFLAGS@ $(GENERATOR_CFLAGS) -DGENERATOR_FILE\n BUILD_CXXFLAGS = @BUILD_CXXFLAGS@ $(GENERATOR_CFLAGS) -DGENERATOR_FILE\n-BUILD_NO_PIE_CFLAGS = @BUILD_NO_PIE_CFLAGS@\n-BUILD_CFLAGS += $(BUILD_NO_PIE_CFLAGS)\n-BUILD_CXXFLAGS += $(BUILD_NO_PIE_CFLAGS)\n \n # Native compiler that we use.  This may be C++ some day.\n COMPILER_FOR_BUILD = $(CXX_FOR_BUILD)\n@@ -817,8 +812,6 @@ BUILD_LINKERFLAGS = $(BUILD_CXXFLAGS)\n \n # Native linker and preprocessor flags.  For x-fragment overrides.\n BUILD_LDFLAGS=@BUILD_LDFLAGS@\n-BUILD_NO_PIE_FLAG = @BUILD_NO_PIE_FLAG@\n-BUILD_LDFLAGS += $(BUILD_NO_PIE_FLAG)\n BUILD_CPPFLAGS= -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n \t\t-I$(srcdir)/../include @INCINTL@ $(CPPINC) $(CPPFLAGS)\n "}, {"sha": "36dba4e09d6dc3f58dcd1a2a976c67f9231d70b7", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=fb32372651882adee2d41052f1e59012e8bb32a7", "patch": "@@ -753,10 +753,6 @@ FGREP\n SED\n LIBTOOL\n collect2\n-NO_PIE_FLAG_FOR_BUILD\n-NO_PIE_CFLAGS_FOR_BUILD\n-BUILD_NO_PIE_FLAG\n-BUILD_NO_PIE_CFLAGS\n STMP_FIXINC\n BUILD_LDFLAGS\n BUILD_CXXFLAGS\n@@ -13324,24 +13320,14 @@ BUILD_CXXFLAGS='$(ALL_CXXFLAGS)'\n BUILD_LDFLAGS='$(LDFLAGS)'\n STMP_FIXINC=stmp-fixinc\n \n-BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS)'\n-BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)'\n-\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n     BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CFLAGS_FOR_BUILD)'\n     BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n-\n-    NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}\n-    NO_PIE_FLAG_FOR_BUILD=${NO_PIE_FLAG_FOR_BUILD-${NO_PIE_FLAG}}\n-    BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS_FOR_BUILD)'\n-    BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG_FOR_BUILD)'\n fi\n \n-\n-\n # Expand extra_headers to include complete path.\n # This substitutes for lots of t-* files.\n extra_headers_list=\n@@ -19468,7 +19454,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19471 \"configure\"\n+#line 19457 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19574,7 +19560,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19577 \"configure\"\n+#line 19563 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "fadd34dbbb6325bc8bd87831f812bed1ab92fa46", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb32372651882adee2d41052f1e59012e8bb32a7/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=fb32372651882adee2d41052f1e59012e8bb32a7", "patch": "@@ -2466,23 +2466,13 @@ BUILD_CXXFLAGS='$(ALL_CXXFLAGS)' AC_SUBST(BUILD_CXXFLAGS)\n BUILD_LDFLAGS='$(LDFLAGS)'\tAC_SUBST(BUILD_LDFLAGS)\n STMP_FIXINC=stmp-fixinc\t\tAC_SUBST(STMP_FIXINC)\n \n-BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS)' AC_SUBST(BUILD_NO_PIE_CFLAGS)\n-BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)' AC_SUBST(BUILD_NO_PIE_FLAG)\n-\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n     BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CFLAGS_FOR_BUILD)'\n     BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n-\n-    NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}\n-    NO_PIE_FLAG_FOR_BUILD=${NO_PIE_FLAG_FOR_BUILD-${NO_PIE_FLAG}}\n-    BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS_FOR_BUILD)'\n-    BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG_FOR_BUILD)'\n fi\n-AC_SUBST(NO_PIE_CFLAGS_FOR_BUILD)\n-AC_SUBST(NO_PIE_FLAG_FOR_BUILD)\n \n # Expand extra_headers to include complete path.\n # This substitutes for lots of t-* files."}]}