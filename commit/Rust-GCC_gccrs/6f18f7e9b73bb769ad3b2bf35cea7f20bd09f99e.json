{"sha": "6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxOGY3ZTliNzNiYjc2OWFkM2IyYmYzNWNlYTdmMjBiZDA5Zjk5ZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2000-12-29T02:41:05Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-12-29T02:41:05Z"}, "message": "search.c (binfo_for_vtable): Return least derived class, not most.\n\n\t* search.c (binfo_for_vtable): Return least derived class, not\n\tmost.  Handle secondary vtables.\n\nFrom-SVN: r38521", "tree": {"sha": "daa61e406fe46535f96ed8ad813fbe1d1bb3b167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa61e406fe46535f96ed8ad813fbe1d1bb3b167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e/comments", "author": null, "committer": null, "parents": [{"sha": "328a8516f5a6cdf253e2285659e428c7c2ad9600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328a8516f5a6cdf253e2285659e428c7c2ad9600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328a8516f5a6cdf253e2285659e428c7c2ad9600"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "92a8419ec7679ab38218c35bdb1a9e77cfeac504", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "patch": "@@ -1,3 +1,8 @@\n+2000-12-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* search.c (binfo_for_vtable): Return least derived class, not\n+\tmost.  Handle secondary vtables.\n+\n 2000-12-22  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (build_binary_op): Fix pmf comparison logic."}, {"sha": "72f00901350ad8e2dbe722744ebbc2fab1e1c2b9", "filename": "gcc/cp/search.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6f18f7e9b73bb769ad3b2bf35cea7f20bd09f99e", "patch": "@@ -3250,20 +3250,33 @@ types_overlap_p (empty_type, next_type)\n   return oi.found_overlap;\n }\n \n-/* Given a vtable VAR, determine which binfo it comes from.\n+/* Given a vtable VAR, determine which of the inherited classes the vtable\n+   inherits (in a loose sense) functions from.\n \n-   FIXME What about secondary vtables?  */\n+   FIXME: This does not work with the new ABI.  */\n \n tree\n binfo_for_vtable (var)\n      tree var;\n {\n-  tree binfo = TYPE_BINFO (DECL_CONTEXT (var));\n+  tree main_binfo = TYPE_BINFO (DECL_CONTEXT (var));\n+  tree binfos = TYPE_BINFO_BASETYPES (BINFO_TYPE (main_binfo));\n+  int n_baseclasses = CLASSTYPE_N_BASECLASSES (BINFO_TYPE (main_binfo));\n+  int i;\n+\n+  for (i = 0; i < n_baseclasses; i++)\n+    {\n+      tree base_binfo = TREE_VEC_ELT (binfos, i);\n+      if (base_binfo != NULL_TREE && BINFO_VTABLE (base_binfo) == var)\n+\treturn base_binfo;\n+    }\n \n-  while (CLASSTYPE_HAS_PRIMARY_BASE_P (BINFO_TYPE (binfo)))\n-    binfo = get_primary_binfo (binfo);\n+  /* If no secondary base classes matched, return the primary base, if\n+     there is one.   */\n+  if (CLASSTYPE_HAS_PRIMARY_BASE_P (BINFO_TYPE (main_binfo)))\n+    return get_primary_binfo (main_binfo);\n \n-  return binfo;\n+  return main_binfo;\n }\n \n /* Returns the binfo of the first direct or indirect virtual base from"}]}