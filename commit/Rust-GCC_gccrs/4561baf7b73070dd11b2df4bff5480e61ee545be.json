{"sha": "4561baf7b73070dd11b2df4bff5480e61ee545be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2MWJhZjdiNzMwNzBkZDExYjJkZjRiZmY1NDgwZTYxZWU1NDViZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-01T13:33:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T13:33:29Z"}, "message": "sem_ch4.adb (Operator_Check): improve error message when both a with_clause and a use_clause are needed to...\n\n2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Operator_Check): improve error message when both a\n\twith_clause and a use_clause are needed to make operator usage legal.\n\t* sem_util.ads, sem_util.adb (Unit_Is_Visible): new predicate to\n\tdetermine whether a compilation unit is visible within an other,\n\teither through a with_clause in the current unit, or a with_clause in\n\tits library unit or one one of its parents.\n\nFrom-SVN: r177033", "tree": {"sha": "5db2ecfad60ce171d0472d82dbc75e3dcef7b3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db2ecfad60ce171d0472d82dbc75e3dcef7b3f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4561baf7b73070dd11b2df4bff5480e61ee545be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561baf7b73070dd11b2df4bff5480e61ee545be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4561baf7b73070dd11b2df4bff5480e61ee545be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561baf7b73070dd11b2df4bff5480e61ee545be/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "383e179e1a5299cc07ff74141b50bd55ff479bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383e179e1a5299cc07ff74141b50bd55ff479bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383e179e1a5299cc07ff74141b50bd55ff479bfd"}], "stats": {"total": 139, "additions": 135, "deletions": 4}, "files": [{"sha": "364abb5730592640c9c34726f1d0b1d2108646fd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4561baf7b73070dd11b2df4bff5480e61ee545be", "patch": "@@ -1,3 +1,12 @@\n+2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Operator_Check): improve error message when both a\n+\twith_clause and a use_clause are needed to make operator usage legal.\n+\t* sem_util.ads, sem_util.adb (Unit_Is_Visible): new predicate to\n+\tdetermine whether a compilation unit is visible within an other,\n+\teither through a with_clause in the current unit, or a with_clause in\n+\tits library unit or one one of its parents.\n+\n 2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb (Expand_N_Iterator_Loop): handle properly an iterator"}, {"sha": "af65aea0a21ff6b6cf528a405e8197fa0fd5e90a", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4561baf7b73070dd11b2df4bff5480e61ee545be", "patch": "@@ -3222,8 +3222,8 @@ package body Sem_Ch4 is\n       if Present (Loop_Parameter_Specification (N)) then\n          Iterator :=\n            Make_Iteration_Scheme (Loc,\n-              Loop_Parameter_Specification =>\n-                Loop_Parameter_Specification (N));\n+             Loop_Parameter_Specification =>\n+               Loop_Parameter_Specification (N));\n       else\n          Iterator :=\n            Make_Iteration_Scheme (Loc,\n@@ -5687,8 +5687,22 @@ package body Sem_Ch4 is\n                Error_Msg_NE -- CODEFIX\n                  (\"operator for} is not directly visible!\",\n                   N, First_Subtype (Candidate_Type));\n-               Error_Msg_N -- CODEFIX\n-                 (\"use clause would make operation legal!\",  N);\n+\n+               declare\n+                  U : constant Node_Id :=\n+                        Cunit (Get_Source_Unit (Candidate_Type));\n+\n+               begin\n+                  if Unit_Is_Visible (U) then\n+                     Error_Msg_N -- CODEFIX\n+                       (\"use clause would make operation legal!\",  N);\n+\n+                  else\n+                     Error_Msg_NE  --  CODEFIX\n+                       (\"add with_clause and use_clause for&!\",\n+                          N, Defining_Entity (Unit (U)));\n+                  end if;\n+               end;\n                return;\n \n             --  If either operand is a junk operand (e.g. package name), then"}, {"sha": "689a04f0980d1ee05bc55d47a0b7e08750558aa2", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4561baf7b73070dd11b2df4bff5480e61ee545be", "patch": "@@ -11533,6 +11533,109 @@ package body Sem_Util is\n       return N;\n    end Unit_Declaration_Node;\n \n+   ---------------------\n+   -- Unit_Is_Visible --\n+   ---------------------\n+\n+   function Unit_Is_Visible (U : Entity_Id) return Boolean is\n+      Curr        : constant Node_Id   := Cunit (Current_Sem_Unit);\n+      Curr_Entity : constant Entity_Id := Cunit_Entity (Current_Sem_Unit);\n+\n+      function Unit_In_Parent_Context (Par_Unit : Node_Id) return Boolean;\n+      --  For a child unit, check whether unit appears in a with_clause\n+      --  of a parent.\n+\n+      function Unit_In_Context (Comp_Unit : Node_Id) return Boolean;\n+      --  Scan the context clause of one compilation unit looking for a\n+      --  with_clause for the unit in question.\n+\n+      ----------------------------\n+      -- Unit_In_Parent_Context --\n+      ----------------------------\n+\n+      function Unit_In_Parent_Context (Par_Unit : Node_Id) return Boolean\n+      is\n+      begin\n+         if Unit_In_Context (Par_Unit) then\n+            return True;\n+\n+         elsif Is_Child_Unit (Defining_Entity (Unit (Par_Unit))) then\n+            return Unit_In_Parent_Context (Parent_Spec (Unit (Par_Unit)));\n+\n+         else\n+            return False;\n+         end if;\n+      end Unit_In_Parent_Context;\n+\n+      ---------------------\n+      -- Unit_In_Context --\n+      ---------------------\n+\n+      function Unit_In_Context (Comp_Unit : Node_Id) return Boolean is\n+         Clause : Node_Id;\n+\n+      begin\n+         Clause := First (Context_Items (Comp_Unit));\n+         while Present (Clause) loop\n+            if Nkind (Clause) = N_With_Clause then\n+               if Library_Unit (Clause) = U then\n+                  return True;\n+\n+               --  The with_clause may denote a renaming of the unit we are\n+               --  looking for, eg. Text_IO which renames Ada.Text_IO.\n+\n+               elsif\n+                 Renamed_Entity (Entity (Name (Clause)))\n+                   = Defining_Entity (Unit (U))\n+               then\n+                  return True;\n+               end if;\n+            end if;\n+\n+            Next (Clause);\n+         end loop;\n+         return False;\n+      end Unit_In_Context;\n+\n+   begin\n+\n+      --  The currrent unit is directly visible.\n+\n+      if Curr = U then\n+         return True;\n+\n+      elsif Unit_In_Context (Curr) then\n+         return True;\n+\n+      --  If the current unit is a body, check the context of the spec.\n+\n+      elsif Nkind (Unit (Curr)) = N_Package_Body\n+        or else\n+          (Nkind (Unit (Curr)) = N_Subprogram_Body\n+            and then not Acts_As_Spec (Unit (Curr)))\n+      then\n+\n+         if Unit_In_Context (Library_Unit (Curr)) then\n+            return True;\n+         end if;\n+      end if;\n+\n+      --  If the spec is a child unit, examine the parents.\n+\n+      if Is_Child_Unit (Curr_Entity) then\n+         if Nkind (Unit (Curr)) in N_Unit_Body then\n+            return\n+              Unit_In_Parent_Context\n+                (Parent_Spec (Unit (Library_Unit (Curr))));\n+         else\n+            return Unit_In_Parent_Context (Parent_Spec (Unit (Curr)));\n+         end if;\n+\n+      else\n+         return False;\n+      end if;\n+   end Unit_Is_Visible;\n+\n    ------------------------------\n    -- Universal_Interpretation --\n    ------------------------------"}, {"sha": "df74a1f568931495b0872653f791824624df0411", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561baf7b73070dd11b2df4bff5480e61ee545be/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4561baf7b73070dd11b2df4bff5480e61ee545be", "patch": "@@ -1316,6 +1316,11 @@ package Sem_Util is\n    --  it returns the subprogram, task or protected body node for it. The unit\n    --  may be a child unit with any number of ancestors.\n \n+   function Unit_Is_Visible (U : Entity_Id) return Boolean;\n+   --  Determine whether a compilation unit is visible in the current context,\n+   --  because there is a with_clause that makes the unit available. Used to\n+   --  provide better messages on common visiblity errors on operators.\n+\n    function Universal_Interpretation (Opnd : Node_Id) return Entity_Id;\n    --  Yields Universal_Integer or Universal_Real if this is a candidate\n "}]}