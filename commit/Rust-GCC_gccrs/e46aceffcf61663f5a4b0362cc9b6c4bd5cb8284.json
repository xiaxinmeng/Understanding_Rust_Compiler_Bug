{"sha": "e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2YWNlZmZjZjYxNjYzZjVhNGIwMzYyY2M5YjZjNGJkNWNiODI4NA==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-12-15T00:47:13Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-12-15T00:47:13Z"}, "message": "re PR fortran/18197 (bus error on returning from a function)\n\nfortran/\n2005-12-14  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/18197\n        * resolve.c (resolve_formal_arglist): Remove code to set\n        the type of a function symbol from it's result symbol.\n\n\ntestsuite/\n2005-12-14  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/18197\n        * gfortran.dg/dummy_functions_1.f90: New.\n\nFrom-SVN: r108555", "tree": {"sha": "a05e348fcff6ea06e396da59a74aab213dbd8ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a05e348fcff6ea06e396da59a74aab213dbd8ee5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/comments", "author": null, "committer": null, "parents": [{"sha": "a9573616d4d584841268badcc24aca18fbac632a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9573616d4d584841268badcc24aca18fbac632a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9573616d4d584841268badcc24aca18fbac632a"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "0d364d4a6093a711c29df6a954e4e6c7d6e10cdb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "patch": "@@ -1,3 +1,9 @@\n+2005-12-14  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/18197\n+\t* resolve.c (resolve_formal_arglist): Remove code to set\n+\tthe type of a function symbol from it's result symbol.\n+\n 2005-12-13  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-expr.c (gfc_conv_substring): Use fold_build2 and"}, {"sha": "d9f0e77ee8ef080dc5bcb2d271874e9fee3c8e96", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "patch": "@@ -137,16 +137,6 @@ resolve_formal_arglist (gfc_symbol * proc)\n \t{\n \t  if (!sym->attr.function || sym->result == sym)\n \t    gfc_set_default_type (sym, 1, sym->ns);\n-\t  else\n-\t    {\n-              /* Set the type of the RESULT, then copy.  */\n-\t      if (sym->result->ts.type == BT_UNKNOWN)\n-\t\tgfc_set_default_type (sym->result, 1, sym->result->ns);\n-\n-\t      sym->ts = sym->result->ts;\n-\t      if (sym->as == NULL)\n-\t\tsym->as = gfc_copy_array_spec (sym->result->as);\n-\t    }\n \t}\n \n       gfc_resolve_array_spec (sym->as, 0);"}, {"sha": "664fa4ab8fa7645fbcc7a18318ebbabebf6a2511", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "patch": "@@ -1,3 +1,8 @@\n+2005-12-14  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/18197\n+\t* gfortran.dg/dummy_functions_1.f90: New.\n+\n 2005-12-14  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR rtl-optimization/25310\n@@ -38939,3 +38944,4 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n+"}, {"sha": "dfcf644c25568d1dfbac4678e3086cf6958f99d9", "filename": "gcc/testsuite/gfortran.dg/dummy_functions_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_functions_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_functions_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_functions_1.f90?ref=e46aceffcf61663f5a4b0362cc9b6c4bd5cb8284", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! PR 18197: Check that dummy functions with RESULT variable and dimension works.\n+module innerfun\n+contains\n+  function f(n,x) result(y)\n+    integer, intent(in) :: n\n+    real, dimension(:), intent(in) :: x\n+    real, dimension(n) :: y\n+    y = 1\n+  end function f\n+end module innerfun\n+\n+module outerfun\n+contains\n+   subroutine foo(n,funname)\n+     integer, intent(in) :: n\n+     real, dimension(n) :: y\n+     real, dimension(2) :: x\n+     interface\n+       function funname(n,x) result(y)\n+         integer, intent(in) :: n\n+         real, dimension(:), intent(in) :: x\n+         real, dimension(n)  :: y\n+       end function funname\n+     end interface\n+\n+     y = funname(n, (/ 0.2, 0.3 /) )\n+\n+   end subroutine foo\n+end module outerfun\n+\n+program test\n+   use outerfun\n+   use innerfun\n+   call foo(3,f)\n+end program test"}]}