{"sha": "4845c776841fc408fa7aadde21db18270b6b1b12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0NWM3NzY4NDFmYzQwOGZhN2FhZGRlMjFkYjE4MjcwYjZiMWIxMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-04T13:04:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-05T17:19:51Z"}, "message": "Mark clone with const\n\nTyTy::Clone should be const to enforce compiler checks that we do not\nchange the object.", "tree": {"sha": "eaeb64e508a7d79f23c6d96b26067a54f99cd3ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaeb64e508a7d79f23c6d96b26067a54f99cd3ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4845c776841fc408fa7aadde21db18270b6b1b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4845c776841fc408fa7aadde21db18270b6b1b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4845c776841fc408fa7aadde21db18270b6b1b12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4845c776841fc408fa7aadde21db18270b6b1b12/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874b783748d06cdcd199df3b68777a928a8f2158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874b783748d06cdcd199df3b68777a928a8f2158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874b783748d06cdcd199df3b68777a928a8f2158"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "a1315fb339499424d369cb12822cee8769d6d755", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845c776841fc408fa7aadde21db18270b6b1b12/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845c776841fc408fa7aadde21db18270b6b1b12/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=4845c776841fc408fa7aadde21db18270b6b1b12", "patch": "@@ -127,7 +127,7 @@ InferType::cast (BaseType *other)\n }\n \n BaseType *\n-InferType::clone ()\n+InferType::clone () const\n {\n   return new InferType (get_ref (), get_ty_ref (), get_infer_kind (),\n \t\t\tget_combined_refs ());\n@@ -201,7 +201,7 @@ ErrorType::cast (BaseType *other)\n }\n \n BaseType *\n-ErrorType::clone ()\n+ErrorType::clone () const\n {\n   return new ErrorType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -531,7 +531,7 @@ ADTType::is_equal (const BaseType &other) const\n }\n \n BaseType *\n-ADTType::clone ()\n+ADTType::clone () const\n {\n   std::vector<StructFieldType *> cloned_fields;\n   for (auto &f : fields)\n@@ -687,7 +687,7 @@ TupleType::is_equal (const BaseType &other) const\n }\n \n BaseType *\n-TupleType::clone ()\n+TupleType::clone () const\n {\n   return new TupleType (get_ref (), get_ty_ref (), fields,\n \t\t\tget_combined_refs ());\n@@ -808,7 +808,7 @@ FnType::is_equal (const BaseType &other) const\n }\n \n BaseType *\n-FnType::clone ()\n+FnType::clone () const\n {\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > cloned_params;\n   for (auto &p : params)\n@@ -1011,7 +1011,7 @@ FnPtr::is_equal (const BaseType &other) const\n }\n \n BaseType *\n-FnPtr::clone ()\n+FnPtr::clone () const\n {\n   std::vector<TyVar> cloned_params;\n   for (auto &p : params)\n@@ -1097,7 +1097,7 @@ ArrayType::get_element_type () const\n }\n \n BaseType *\n-ArrayType::clone ()\n+ArrayType::clone () const\n {\n   return new ArrayType (get_ref (), get_ty_ref (), get_capacity (),\n \t\t\telement_type, get_combined_refs ());\n@@ -1150,7 +1150,7 @@ BoolType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-BoolType::clone ()\n+BoolType::clone () const\n {\n   return new BoolType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1216,7 +1216,7 @@ IntType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-IntType::clone ()\n+IntType::clone () const\n {\n   return new IntType (get_ref (), get_ty_ref (), get_int_kind (),\n \t\t      get_combined_refs ());\n@@ -1293,7 +1293,7 @@ UintType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-UintType::clone ()\n+UintType::clone () const\n {\n   return new UintType (get_ref (), get_ty_ref (), get_uint_kind (),\n \t\t       get_combined_refs ());\n@@ -1364,7 +1364,7 @@ FloatType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-FloatType::clone ()\n+FloatType::clone () const\n {\n   return new FloatType (get_ref (), get_ty_ref (), get_float_kind (),\n \t\t\tget_combined_refs ());\n@@ -1427,7 +1427,7 @@ USizeType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-USizeType::clone ()\n+USizeType::clone () const\n {\n   return new USizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1479,7 +1479,7 @@ ISizeType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-ISizeType::clone ()\n+ISizeType::clone () const\n {\n   return new ISizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1531,7 +1531,7 @@ CharType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-CharType::clone ()\n+CharType::clone () const\n {\n   return new CharType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1600,7 +1600,7 @@ ReferenceType::get_base () const\n }\n \n BaseType *\n-ReferenceType::clone ()\n+ReferenceType::clone () const\n {\n   return new ReferenceType (get_ref (), get_ty_ref (), base, is_mutable (),\n \t\t\t    get_combined_refs ());\n@@ -1686,7 +1686,7 @@ PointerType::get_base () const\n }\n \n BaseType *\n-PointerType::clone ()\n+PointerType::clone () const\n {\n   return new PointerType (get_ref (), get_ty_ref (), base, is_mutable (),\n \t\t\t  get_combined_refs ());\n@@ -1765,10 +1765,10 @@ ParamType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-ParamType::clone ()\n+ParamType::clone () const\n {\n-  return new ParamType (get_symbol (), get_ref (), get_ty_ref (),\n-\t\t\tget_generic_param (), get_combined_refs ());\n+  return new ParamType (get_symbol (), get_ref (), get_ty_ref (), param,\n+\t\t\tget_combined_refs ());\n }\n \n std::string\n@@ -1833,7 +1833,7 @@ ParamType::handle_substitions (SubstitutionArgumentMappings mappings)\n }\n \n BaseType *\n-StrType::clone ()\n+StrType::clone () const\n {\n   return new StrType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1937,7 +1937,7 @@ NeverType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-NeverType::clone ()\n+NeverType::clone () const\n {\n   return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n@@ -1989,7 +1989,7 @@ PlaceholderType::can_eq (const BaseType *other, bool emit_errors) const\n }\n \n BaseType *\n-PlaceholderType::clone ()\n+PlaceholderType::clone () const\n {\n   return new PlaceholderType (get_ref (), get_ty_ref (), get_combined_refs ());\n }"}, {"sha": "6abae53eb5fe58e7b45c6c13c04bb66e9e45a557", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4845c776841fc408fa7aadde21db18270b6b1b12/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4845c776841fc408fa7aadde21db18270b6b1b12/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=4845c776841fc408fa7aadde21db18270b6b1b12", "patch": "@@ -194,10 +194,10 @@ class BaseType\n \n   /* Returns a pointer to a clone of this. The caller is responsible for\n    * releasing the memory of the returned ty. */\n-  virtual BaseType *clone () = 0;\n+  virtual BaseType *clone () const = 0;\n \n   // get_combined_refs returns the chain of node refs involved in unification\n-  std::set<HirId> get_combined_refs () { return combined; }\n+  std::set<HirId> get_combined_refs () const { return combined; }\n \n   void append_reference (HirId id) { combined.insert (id); }\n \n@@ -300,7 +300,7 @@ class InferType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   InferTypeKind get_infer_kind () const { return infer_kind; }\n \n@@ -337,7 +337,7 @@ class ErrorType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   std::string get_name () const override final { return as_string (); }\n };\n@@ -368,7 +368,7 @@ class ParamType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   std::string get_symbol () const;\n \n@@ -462,7 +462,7 @@ class TupleType : public BaseType\n \n   BaseType *get_field (size_t index) const;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool is_concrete () const override final\n   {\n@@ -527,7 +527,7 @@ class SubstitutionParamMapping\n       }\n   }\n \n-  SubstitutionParamMapping clone ()\n+  SubstitutionParamMapping clone () const\n   {\n     return SubstitutionParamMapping (generic, static_cast<ParamType *> (\n \t\t\t\t\t\tparam->clone ()));\n@@ -728,7 +728,7 @@ class SubstitutionRef\n     return substitutions;\n   }\n \n-  std::vector<SubstitutionParamMapping> clone_substs ()\n+  std::vector<SubstitutionParamMapping> clone_substs () const\n   {\n     std::vector<SubstitutionParamMapping> clone;\n \n@@ -885,9 +885,9 @@ class ADTType : public BaseType, public SubstitutionRef\n       identifier (identifier), fields (fields), adt_kind (adt_kind)\n   {}\n \n-  ADTKind get_adt_kind () { return adt_kind; }\n-  bool is_tuple_struct () { return adt_kind == TUPLE_STRUCT; }\n-  bool is_union () { return adt_kind == UNION; }\n+  ADTKind get_adt_kind () const { return adt_kind; }\n+  bool is_tuple_struct () const { return adt_kind == TUPLE_STRUCT; }\n+  bool is_union () const { return adt_kind == UNION; }\n \n   bool is_unit () const override { return this->fields.empty (); }\n \n@@ -942,7 +942,7 @@ class ADTType : public BaseType, public SubstitutionRef\n     return nullptr;\n   }\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   std::vector<StructFieldType *> &get_fields () { return fields; }\n   const std::vector<StructFieldType *> &get_fields () const { return fields; }\n@@ -1076,7 +1076,7 @@ class FnType : public BaseType, public SubstitutionRef\n \n   BaseType *get_return_type () const { return type; }\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool needs_generic_substitutions () const override final\n   {\n@@ -1136,7 +1136,7 @@ class FnPtr : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   void iterate_params (std::function<bool (BaseType *)> cb) const\n   {\n@@ -1186,7 +1186,7 @@ class ArrayType : public BaseType\n \n   BaseType *get_element_type () const;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool is_concrete () const final override\n   {\n@@ -1221,7 +1221,7 @@ class BoolType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n };\n \n class IntType : public BaseType\n@@ -1259,7 +1259,7 @@ class IntType : public BaseType\n \n   IntKind get_int_kind () const { return int_kind; }\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1302,7 +1302,7 @@ class UintType : public BaseType\n \n   UintKind get_uint_kind () const { return uint_kind; }\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1343,7 +1343,7 @@ class FloatType : public BaseType\n \n   FloatKind get_float_kind () const { return float_kind; }\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1374,7 +1374,7 @@ class USizeType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n };\n \n class ISizeType : public BaseType\n@@ -1400,7 +1400,7 @@ class ISizeType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n };\n \n class CharType : public BaseType\n@@ -1426,7 +1426,7 @@ class CharType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n };\n \n class ReferenceType : public BaseType\n@@ -1458,7 +1458,7 @@ class ReferenceType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool contains_type_parameters () const override final\n   {\n@@ -1504,7 +1504,7 @@ class PointerType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   bool contains_type_parameters () const override final\n   {\n@@ -1547,7 +1547,7 @@ class StrType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n };\n \n // https://doc.rust-lang.org/std/primitive.never.html\n@@ -1581,7 +1581,7 @@ class NeverType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   std::string get_name () const override final { return as_string (); }\n \n@@ -1612,7 +1612,7 @@ class PlaceholderType : public BaseType\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n-  BaseType *clone () final override;\n+  BaseType *clone () const final override;\n \n   std::string get_name () const override final { return as_string (); }\n "}]}