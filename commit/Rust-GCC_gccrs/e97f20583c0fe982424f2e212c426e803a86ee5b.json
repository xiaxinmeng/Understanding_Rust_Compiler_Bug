{"sha": "e97f20583c0fe982424f2e212c426e803a86ee5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ZjIwNTgzYzBmZTk4MjQyNGYyZTIxMmM0MjZlODAzYTg2ZWU1Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-11-28T12:59:34Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-11-28T12:59:34Z"}, "message": "bfin.c (bfin_secondary_reload): Renamed from secondary_input_reload_class, made static.\n\n\t* config/bfin/bfin.c (bfin_secondary_reload): Renamed from\n\tsecondary_input_reload_class, made static.  Adapt to new\n\tinfrastructure.\n\t(secondary_output_reload_class): Delete.\n\t(TARGET_SECONDARY_RELOAD): New macro.\n\t* config/bfin/bfin.h (SECONDARY_INPUT_RELOAD_CLASS,\n\tSECONDARY_OUTPUT_RELOAD_CLASS): Delete.\n\nFrom-SVN: r107601", "tree": {"sha": "298eadea9b793ec37c0f235f512fd5db1fe80ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/298eadea9b793ec37c0f235f512fd5db1fe80ea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97f20583c0fe982424f2e212c426e803a86ee5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f20583c0fe982424f2e212c426e803a86ee5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97f20583c0fe982424f2e212c426e803a86ee5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f20583c0fe982424f2e212c426e803a86ee5b/comments", "author": null, "committer": null, "parents": [{"sha": "646c0835465a8438ce3543bfcae30becf641a63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646c0835465a8438ce3543bfcae30becf641a63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646c0835465a8438ce3543bfcae30becf641a63e"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "aaed30c82903a780e1cfeaf2905ef8d9c4abd64e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e97f20583c0fe982424f2e212c426e803a86ee5b", "patch": "@@ -1,3 +1,13 @@\n+2005-11-28  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c (bfin_secondary_reload): Renamed from\n+\tsecondary_input_reload_class, made static.  Adapt to new\n+\tinfrastructure.\n+\t(secondary_output_reload_class): Delete.\n+\t(TARGET_SECONDARY_RELOAD): New macro.\n+\t* config/bfin/bfin.h (SECONDARY_INPUT_RELOAD_CLASS,\n+\tSECONDARY_OUTPUT_RELOAD_CLASS): Delete.\n+\n 2005-11-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21166"}, {"sha": "c635c9768384056570a2e09acf8be3dce31ca605", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=e97f20583c0fe982424f2e212c426e803a86ee5b", "patch": "@@ -1714,9 +1714,9 @@ bfin_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    CLASS requires an extra scratch register.  Return the class needed for the\n    scratch register.  */\n \n-enum reg_class\n-secondary_input_reload_class (enum reg_class class, enum machine_mode mode,\n-\t\t\t      rtx x)\n+static enum reg_class\n+bfin_secondary_reload (bool in_p, rtx x, enum reg_class class,\n+\t\t     enum machine_mode mode, secondary_reload_info *sri)\n {\n   /* If we have HImode or QImode, we can only use DREGS as secondary registers;\n      in most other cases we can also use PREGS.  */\n@@ -1750,11 +1750,13 @@ secondary_input_reload_class (enum reg_class class, enum machine_mode mode,\n \treturn NO_REGS;\n       /* If destination is a DREG, we can do this without a scratch register\n \t if the constant is valid for an add instruction.  */\n-      if (class == DREGS || class == DPREGS)\n-\treturn large_constant_p ? PREGS : NO_REGS;\n+      if ((class == DREGS || class == DPREGS)\n+\t  && ! large_constant_p)\n+\treturn NO_REGS;\n       /* Reloading to anything other than a DREG?  Use a PREG scratch\n \t register.  */\n-      return PREGS;\n+      sri->icode = CODE_FOR_reload_insi;\n+      return NO_REGS;\n     }\n \n   /* Data can usually be moved freely between registers of most classes.\n@@ -1783,15 +1785,6 @@ secondary_input_reload_class (enum reg_class class, enum machine_mode mode,\n       return default_class;\n   return NO_REGS;\n }\n-\n-/* Like secondary_input_reload_class; and all we do is call that function.  */\n-\n-enum reg_class\n-secondary_output_reload_class (enum reg_class class, enum machine_mode mode,\n-\t\t\t       rtx x)\n-{\n-  return secondary_input_reload_class (class, mode, x);\n-}\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -3008,4 +3001,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n \n+#undef TARGET_SECONDARY_RELOAD\n+#define TARGET_SECONDARY_RELOAD bfin_secondary_reload\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "5ac00368c43962034177535633a0c0f45f8bce3f", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f20583c0fe982424f2e212c426e803a86ee5b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=e97f20583c0fe982424f2e212c426e803a86ee5b", "patch": "@@ -515,11 +515,6 @@ enum reg_class\n    perhaps another, smaller class.  */\n #define PREFERRED_RELOAD_CLASS(X, CLASS) (CLASS)\n \n-#define  SECONDARY_OUTPUT_RELOAD_CLASS(class,mode,x) \\\n-    secondary_output_reload_class(class,mode,x)\n-#define  SECONDARY_INPUT_RELOAD_CLASS(class,mode,x)  \\\n-    secondary_input_reload_class(class,mode,x)\n-\n /* Function Calling Conventions. */\n \n /* The type of the current function; normal functions are of type"}]}