{"sha": "cf822c0484ada5e9d939eec9c490303b35a5734a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4MjJjMDQ4NGFkYTVlOWQ5MzllZWM5YzQ5MDMwM2IzNWE1NzM0YQ==", "commit": {"author": {"name": "Brooks Moses", "email": "bmoses@stanford.edu", "date": "2006-10-05T04:58:18Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-10-05T04:58:18Z"}, "message": "gfortran.texi: (Current Status): update and rewrite to reflect actual status more accurately.\n\n2006-10-04  Brooks Moses  <bmoses@stanford.edu>\n\n\t* gfortran.texi: (Current Status): update and rewrite to reflect\n\tactual status more accurately.\n\nFrom-SVN: r117449", "tree": {"sha": "c1e6fd82fb0f592b84622a1910b2b1722bc4f1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e6fd82fb0f592b84622a1910b2b1722bc4f1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf822c0484ada5e9d939eec9c490303b35a5734a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf822c0484ada5e9d939eec9c490303b35a5734a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf822c0484ada5e9d939eec9c490303b35a5734a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf822c0484ada5e9d939eec9c490303b35a5734a/comments", "author": null, "committer": null, "parents": [{"sha": "dfb2717d35b6a5fb99626c148fed54f925ad399c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb2717d35b6a5fb99626c148fed54f925ad399c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb2717d35b6a5fb99626c148fed54f925ad399c"}], "stats": {"total": 122, "additions": 49, "deletions": 73}, "files": [{"sha": "73715f940be0b01037c0600aab5bd7d3d527d127", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf822c0484ada5e9d939eec9c490303b35a5734a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf822c0484ada5e9d939eec9c490303b35a5734a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cf822c0484ada5e9d939eec9c490303b35a5734a", "patch": "@@ -1,3 +1,8 @@\n+2006-10-04  Brooks Moses  <bmoses@stanford.edu>\n+\n+\t* gfortran.texi: (Current Status): update and rewrite to reflect\n+\tactual status more accurately.\n+\n 2006-10-04  Brooks Moses  <bmoses@stanford.edu>\n \n \t* gfortran.texi: Consistently refer to the compiler as \"GNU"}, {"sha": "f48f28ab72a9bf3bf7c06c3c46412c3f2c49433d", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 44, "deletions": 73, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf822c0484ada5e9d939eec9c490303b35a5734a/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf822c0484ada5e9d939eec9c490303b35a5734a/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=cf822c0484ada5e9d939eec9c490303b35a5734a", "patch": "@@ -374,58 +374,49 @@ the GCC homepage in March 18, 2000\n (even though Andy had already been working on it for a while,\n of course).\n \n-The GNU Fortran compiler is currently reaching the stage where is is able to\n-compile real\n-world programs.  However it is still under development and has many rough\n-edges.\n-\n @menu\n-* Compiler Status::\n-* Library Status::\n+* Compiler and Library Status::\n * Proposed Extensions::\n @end menu\n \n-@node Compiler Status\n-@section Compiler Status\n-\n-@table @emph\n-@item Front end\n-This is the part of the GNU Fortran compiler which parses a source file, verifies that it\n-is valid Fortran, performs compile time replacement of constants\n-(PARAMETER variables) and reads and generate module files. This is\n-almost complete. Every Fortran 95 source should be accepted, and most\n-none-Fortran 95 source should be rejected. If you find a source file where\n-this is not true, please tell us. You can use the -fsyntax-only switch to\n-make @command{gfortran} quit after running the front end, effectively reducing it to\n-a syntax checker.\n-\n-@item Middle end interface\n-These are the parts of GNU Fortran that take the parse tree generated by the\n-front end and translate it to the GENERIC form required by the GCC back\n-end. Work is ongoing in these parts of GNU Fortran, but a large part has\n-already been completed.\n-@end table\n-\n-@node Library Status\n-@section Library Status\n-\n-Some intrinsic functions map directly to library functions, and in most\n-cases the name of the library function used depends on the type of the\n-arguments.  For some intrinsics we generate inline code, and for others,\n-such as sin, cos and sqrt, we rely on the backend to use special\n-instructions in the floating point unit of the CPU if available, or to\n-fall back to a call to libm if these are not available.\n-\n-Implementation of some non-elemental intrinsic functions (eg. DOT_PRODUCT,\n-AVERAGE) is not yet optimal. This is hard because we have to make decisions\n-whether to use inline code (good for small arrays as no function call\n-overhead occurs) or generate function calls (good for large arrays as it\n-allows use of hand-optimized assembly routines, SIMD instructions, etc.)\n+@node Compiler and Library Status\n+@section Compiler and Library Status\n+\n+The GNU Fortran compiler is able to compile nearly all\n+standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs,\n+including a number of standard and non-standard extensions, and can be\n+used on real-world programs.  In particular, the supported extensions\n+include OpenMP, Cray-style pointers, and several Fortran 2003 features\n+such as enumeration, stream I/O, and some of the enhancements to\n+allocatable array support from TR 15581.  However, it is still under\n+development and has a few remaining rough edges.\n+\n+At present, the GNU Fortran compiler passes the\n+@uref{http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html, \n+NIST Fortran 77 Test Suite}, and produces acceptable results on the\n+@uref{http://www.netlib.org/lapack/faq.html#1.21, LAPACK Test Suite}.\n+It also provides respectable performance on \n+the @uref{http://www.polyhedron.com/pb05.html, Polyhedron Fortran\n+compiler benchmarks} and the\n+@uref{http://www.llnl.gov/asci_benchmarks/asci/limited/lfk/README.html,\n+Livermore Fortran Kernels test}.  It has been used to compile a number of\n+large real-world programs, including\n+@uref{http://mysite.verizon.net/serveall/moene.pdf, the HIRLAM\n+weather-forecasting code} and\n+@uref{http://www.theochem.uwa.edu.au/tonto/, the Tonto quantum \n+chemistry package}.\n+\n+Among other things, the GNU Fortran compiler is intended as a replacement\n+for G77.  At this point, nearly all programs that could be compiled with\n+G77 can be compiled with GNU Fortran, although there are a few minor known\n+regressions.\n+\n+The primary work remaining to be done on GNU Fortran falls into three\n+categories: bug fixing (primarily regarding the treatment of invalid code\n+and providing useful error messages), improving the compiler optimizations\n+and the performance of compiled code, and extending the compiler to support\n+future standards -- in particular, Fortran 2003.\n \n-The IO library is in a mostly usable state.  Unformatted I/O for\n-@code{REAL(KIND=10)} variables is currently not recommended.\n-\n-Array intrinsics mostly work.\n \n @node Proposed Extensions\n @section Proposed Extensions\n@@ -437,11 +428,9 @@ J3 Fortran 95 standard.\n \n @subsection Compiler extensions: \n @itemize @bullet\n-@item\n-Flag for defining the kind number for default logicals.\n-\n @item\n User-specified alignment rules for structures.\n+\n @item\n Flag to generate @code{Makefile} info.\n \n@@ -452,10 +441,6 @@ Automatically extend single precision constants to double.\n Compile code that conserves memory by dynamically allocating common and\n module storage either on stack or heap.\n \n-@item\n-Flag to cause the compiler to distinguish between upper and lower case\n-names.  The Fortran 95 standard does not distinguish them.\n-\n @item\n Compile flag to generate code for array conformance checking (suggest -CC).\n \n@@ -472,31 +457,12 @@ Flag to force local variables into static space.\n @item\n Flag to force local variables onto stack.\n \n-@item\n-Flag to compile lines beginning with ``D''.\n-\n-@item\n-Flag to ignore lines beginning with ``D''.\n-\n @item\n Flag for maximum errors before ending compile.\n \n-@item\n-Generate code to check for null pointer dereferences -- prints locus of\n-dereference instead of segfaulting.  There was some discussion about this\n-option in the g95 development mailing list.\n-\n-@item\n-Allow setting the default unit number.\n-\n @item\n Option to initialize otherwise uninitialized integer and floating\n point variables.\n-\n-@item\n-Support for Fortran 200x. This includes several new features including\n-floating point exceptions, extended use of allocatable arrays, C\n-interoperability, Parameterizer data types and function pointers.\n @end itemize\n \n \n@@ -545,6 +511,11 @@ Environment variable forcing standard output to be line buffered (unix).\n \n @end itemize\n \n+\n+@c ---------------------------------------------------------------------\n+@c Runtime\n+@c ---------------------------------------------------------------------\n+\n @node Runtime\n @chapter Runtime:  Influencing runtime behavior with environment variables\n @cindex Runtime"}]}