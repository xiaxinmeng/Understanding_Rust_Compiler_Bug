{"sha": "1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhOGIxZGQxMzhhMGI0YWVjM2JjNTc0N2I3Mjk4NDc1MzM1ZTRkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-02T20:03:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-02T20:03:16Z"}, "message": "decl.c (gnat_to_gnu_component_type): Force at least unit size for the component size of an array with aliased components.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Force at least\n\tunit size for the component size of an array with aliased components.\n\t(maybe_pad_type): Do not warn for MAX_EXPR.\n\nFrom-SVN: r152417", "tree": {"sha": "6c00917bd9a69d7134985539e11695ed15c7ec5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c00917bd9a69d7134985539e11695ed15c7ec5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/comments", "author": null, "committer": null, "parents": [{"sha": "9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "967e4f034969c2e0f37afafda6379d98dabcc825", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "patch": "@@ -1,3 +1,9 @@\n+2009-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Force at least\n+\tunit size for the component size of an array with aliased components.\n+\t(maybe_pad_type): Do not warn for MAX_EXPR.\n+\n 2009-09-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Factor out"}, {"sha": "22ee89e6675b768a3b906f3a423d4be6e7de79ce", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "patch": "@@ -4990,6 +4990,17 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t     Is_Bit_Packed_Array (gnat_array) ? TYPE_DECL : VAR_DECL,\n \t\t     true, Has_Component_Size_Clause (gnat_array));\n \n+  /* If the array has aliased components and the component size can be zero,\n+     force at least unit size to ensure that the components have distinct\n+     addresses.  */\n+  if (!gnu_comp_size\n+      && Has_Aliased_Components (gnat_array)\n+      && (integer_zerop (TYPE_SIZE (gnu_type))\n+\t  || (TREE_CODE (gnu_type) == ARRAY_TYPE\n+\t      && !TREE_CONSTANT (TYPE_SIZE (gnu_type)))))\n+    gnu_comp_size\n+      = size_binop (MAX_EXPR, TYPE_SIZE (gnu_type), bitsize_unit_node);\n+\n   /* If the component type is a RECORD_TYPE that has a self-referential size,\n      then use the maximum size for the component size.  */\n   if (!gnu_comp_size\n@@ -6210,6 +6221,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \n   if (Present (gnat_entity)\n       && size\n+      && TREE_CODE (size) != MAX_EXPR\n       && !operand_equal_p (size, orig_size, 0)\n       && !(TREE_CODE (size) == INTEGER_CST\n \t   && TREE_CODE (orig_size) == INTEGER_CST"}, {"sha": "f2dba40ab97bf4ddffdeda50f751e7099d8eb0b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "patch": "@@ -1,3 +1,8 @@\n+2009-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array11.adb: New test.\n+\t* gnat.dg/array12.adb: Likewise.\n+\n 2009-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array10.adb: New test."}, {"sha": "0a7edcf46d026d13a54d1303d115648a0f80bd55", "filename": "gcc/testsuite/gnat.dg/array11.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb?ref=1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+\n+procedure Array11 is\n+\n+  type Rec is null record;\n+  type Ptr is access all Rec;\n+\n+  type Arr1 is array (1..8) of aliased Rec; -- { dg-warning \"padded\" }\n+  type Arr2 is array (Long_Integer) of aliased Rec; -- { dg-warning \"padded\" }\n+\n+  A1 : Arr1;\n+  A2 : Arr2; -- { dg-warning \"Storage_Error will be raised\" }\n+\n+begin\n+  null;\n+end;"}, {"sha": "3748d5ec206b82583e8bea08962d5f6ce5045289", "filename": "gcc/testsuite/gnat.dg/array12.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2Fgnat.dg%2Farray12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa8b1dd138a0b4aec3bc5747b7298475335e4d7/gcc%2Ftestsuite%2Fgnat.dg%2Farray12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray12.adb?ref=1aa8b1dd138a0b4aec3bc5747b7298475335e4d7", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do run }\n+\n+procedure Array12 is\n+\n+  function N return Integer is\n+  begin\n+    return 0;\n+  end;\n+\n+  subtype Element is String (1 .. N);\n+  type Ptr is access all Element;\n+  type Vector is array (Positive range <>) of aliased Element;\n+\n+  V : Vector (1..2);\n+\n+begin\n+  if Ptr'(V(1)'Access) = V(2)'Access then\n+    raise Program_Error;\n+  end if;\n+end;"}]}