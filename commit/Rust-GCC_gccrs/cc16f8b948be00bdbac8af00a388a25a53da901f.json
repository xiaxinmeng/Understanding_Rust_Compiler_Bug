{"sha": "cc16f8b948be00bdbac8af00a388a25a53da901f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxNmY4Yjk0OGJlMDBiZGJhYzhhZjAwYTM4OGEyNWE1M2RhOTAxZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-19T18:14:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-19T18:14:22Z"}, "message": "locale_facets.tcc (num_get::_M_extract_int, [...]): According to 22.2.2.1.2, p8-9, first look for decimal_point and thousands_sep.\n\n2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_int,\n\tnum_get::_M_extract_float): According to 22.2.2.1.2, p8-9,\n\tfirst look for decimal_point and thousands_sep.\n\t* testsuite/22_locale/num_get/get/char/11.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/11.cc: Likewise.\n\nFrom-SVN: r74841", "tree": {"sha": "ff1b04fd3a6e2c553c61890d46904a37bdbad8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff1b04fd3a6e2c553c61890d46904a37bdbad8c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc16f8b948be00bdbac8af00a388a25a53da901f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc16f8b948be00bdbac8af00a388a25a53da901f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc16f8b948be00bdbac8af00a388a25a53da901f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc16f8b948be00bdbac8af00a388a25a53da901f/comments", "author": null, "committer": null, "parents": [{"sha": "9175d628d00f9f3a5a98a19aba733f6e66452f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9175d628d00f9f3a5a98a19aba733f6e66452f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9175d628d00f9f3a5a98a19aba733f6e66452f8f"}], "stats": {"total": 248, "additions": 198, "deletions": 50}, "files": [{"sha": "34bf9d61a739e7fc4d62b75e9d4bdcd2c068d37f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc16f8b948be00bdbac8af00a388a25a53da901f", "patch": "@@ -1,3 +1,11 @@\n+2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_int,\n+\tnum_get::_M_extract_float): According to 22.2.2.1.2, p8-9,\n+\tfirst look for decimal_point and thousands_sep.\n+\t* testsuite/22_locale/num_get/get/char/11.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/11.cc: Likewise.\n+\n 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get::_M_extract_float):"}, {"sha": "4dd3be11a3e43eed6193254c7e060ce4818859dc", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cc16f8b948be00bdbac8af00a388a25a53da901f", "patch": "@@ -169,18 +169,22 @@ namespace std\n       string __found_grouping;\n       int __sep_pos = 0;\n       bool __e;\n+      const char_type* __p;\n       while (__beg != __end)\n         {\n-\t  // Only look in digits.\n+\t  // According to 22.2.2.1.2, p8-9, first look for decimal_point\n+\t  // and thousands_sep.\n \t  const char_type __c = *__beg;\n-          const char_type* __p = __traits_type::find(__lit + _S_izero, 10, \n-\t\t\t\t\t\t     __c);\n-          if (__p)\n+\t  if (__traits_type::eq(__c, __lc->_M_decimal_point) \n+\t      && !__found_dec && !__found_sci)\n \t    {\n-\t      // Try first for acceptable digit; record it if found.\n-\t      __xtrc += _S_atoms_in[__p - __lit];\n-\t      __found_mantissa = true;\n-\t      ++__sep_pos;\n+\t      // According to the standard, if no grouping chars are seen,\n+\t      // no grouping check is applied. Therefore __found_grouping\n+\t      // must be adjusted only if __dec comes after some __sep.\n+\t      if (__found_grouping.size())\n+\t\t__found_grouping += static_cast<char>(__sep_pos);\n+\t      __xtrc += '.';\n+\t      __found_dec = true;\n \t      ++__beg;\n \t    }\n           else if (__lc->_M_use_grouping\n@@ -201,16 +205,11 @@ namespace std\n \t\t  break;\n \t\t}\n             }\n-\t  else if (__traits_type::eq(__c, __lc->_M_decimal_point) \n-\t\t   && !__found_dec && !__found_sci)\n+          else if (__p = __traits_type::find(__lit + _S_izero, 10, __c))\n \t    {\n-\t      // According to the standard, if no grouping chars are seen,\n-\t      // no grouping check is applied. Therefore __found_grouping\n-\t      // must be adjusted only if __dec comes after some __sep.\n-\t      if (__found_grouping.size())\n-\t\t__found_grouping += static_cast<char>(__sep_pos);\n-\t      __xtrc += '.';\n-\t      __found_dec = true;\n+\t      __xtrc += _S_atoms_in[__p - __lit];\n+\t      __found_mantissa = true;\n+\t      ++__sep_pos;\n \t      ++__beg;\n \t    }\n \t  else if ((__e = __traits_type::eq(__c, __lit[_S_ie]) \n@@ -337,14 +336,34 @@ namespace std\n \tbool __overflow = false;\n \t_ValueT __result = 0;\n \tconst char_type* __lit_zero = __lit + _S_izero;\n+\tconst char_type* __p;\n \tif (__negative)\n \t  {\n \t    const _ValueT __min = numeric_limits<_ValueT>::min() / __base;\n \t    for (; __beg != __end; ++__beg)\n \t      {\n-\t\tconst char_type* __p = __traits_type::find(__lit_zero,\n-\t\t\t\t\t\t\t   __len, *__beg);\n-\t\tif (__p)\n+\t\t// According to 22.2.2.1.2, p8-9, first look for decimal_point\n+\t\t// and thousands_sep.\n+\t\tconst char_type __c = *__beg;\t\t\n+\t\tif (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\t  break;\n+\t\telse if (__lc->_M_use_grouping\n+\t\t\t && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+\t\t  {\n+\t\t    // NB: Thousands separator at the beginning of a string\n+\t\t    // is a no-no, as is two consecutive thousands separators.\n+\t\t    if (__sep_pos)\n+\t\t      {\n+\t\t\t__found_grouping += static_cast<char>(__sep_pos);\n+\t\t\t__sep_pos = 0;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\t__err |= ios_base::failbit;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__p = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n \t\t    int __digit = __p - __lit_zero;\n \t\t    if (__digit > 15)\n@@ -360,11 +379,22 @@ namespace std\n \t\t\t__found_num = true;\n \t\t      }\n \t\t  }\n+\t\telse\n+\t\t  // Not a valid input item.\n+\t\t  break;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    const _ValueT __max = numeric_limits<_ValueT>::max() / __base;\n+\t    for (; __beg != __end; ++__beg)\n+\t      {\n+\t\tconst char_type __c = *__beg;\t\t\n+\t\tif (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\t  break;\n \t\telse if (__lc->_M_use_grouping\n-\t\t\t && __traits_type::eq(*__beg, __lc->_M_thousands_sep))\n+\t\t\t && __traits_type::eq(__c, __lc->_M_thousands_sep))\n \t\t  {\n-\t\t    // NB: Thousands separator at the beginning of a string\n-\t\t    // is a no-no, as is two consecutive thousands separators.\n \t\t    if (__sep_pos)\n \t\t      {\n \t\t\t__found_grouping += static_cast<char>(__sep_pos);\n@@ -376,19 +406,7 @@ namespace std\n \t\t\tbreak;\n \t\t      }\n \t\t  }\n-\t\telse\n-\t\t  // Not a valid input item.\n-\t\t  break;\n-\t      }\n-\t  }\n-\telse\n-\t  {\n-\t    const _ValueT __max = numeric_limits<_ValueT>::max() / __base;\n-\t    for (; __beg != __end; ++__beg)\n-\t      {\n-\t\tconst char_type* __p = __traits_type::find(__lit_zero,\n-\t\t\t\t\t\t\t   __len, *__beg);\n-\t\tif (__p)\n+\t\telse if (__p = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n \t\t    int __digit = __p - __lit_zero;\n \t\t    if (__digit > 15)\n@@ -404,20 +422,6 @@ namespace std\n \t\t\t__found_num = true;\n \t\t      }\n \t\t  }\n-\t\telse if (__lc->_M_use_grouping\n-\t\t\t && __traits_type::eq(*__beg, __lc->_M_thousands_sep))\n-\t\t  {\n-\t\t    if (__sep_pos)\n-\t\t      {\n-\t\t\t__found_grouping += static_cast<char>(__sep_pos);\n-\t\t\t__sep_pos = 0;\n-\t\t      }\n-\t\t    else\n-\t\t      {\n-\t\t\t__err |= ios_base::failbit;\n-\t\t\tbreak;\n-\t\t      }\n-\t\t  }\n \t\telse\n \t\t  break;\n \t      }"}, {"sha": "fde63c4ae1d7dc6f50874073224fc15438e4a567", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/11.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F11.cc?ref=cc16f8b948be00bdbac8af00a388a25a53da901f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<char>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  char do_thousands_sep() const { return '2'; }\n+  char do_decimal_point() const { return '4'; }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss;\n+  iss.imbue(locale(iss.getloc(), static_cast<numpunct<char>*>(new Punct)));\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 13.0;\n+  long l = 0l;\n+  long l1 = 13l;\n+  \n+  iss.str(\"1234\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss.str(\"1234\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( l == l1 );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e438fbe61a1d5bf5ea27f2effc77cd96853103fc", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/11.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc16f8b948be00bdbac8af00a388a25a53da901f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F11.cc?ref=cc16f8b948be00bdbac8af00a388a25a53da901f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<wchar_t>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  wchar_t do_thousands_sep() const { return L'2'; }\n+  wchar_t do_decimal_point() const { return L'4'; }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss;\n+  iss.imbue(locale(iss.getloc(), static_cast<numpunct<wchar_t>*>(new Punct)));\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 13.0;\n+  long l = 0l;\n+  long l1 = 13l;\n+  \n+  iss.str(L\"1234\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss.str(L\"1234\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( l == l1 );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}