{"sha": "372020711f3052816cec3343369b73d47babb431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcyMDIwNzExZjMwNTI4MTZjZWMzMzQzMzY5YjczZDQ3YmFiYjQzMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2012-12-19T15:51:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2012-12-19T15:51:24Z"}, "message": "arm.md (f_minmaxs, f_minmaxd): New types.\n\ngcc/\n\n2012-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm.md (f_minmaxs, f_minmaxd): New types.\n\t* config/arm/vfp.md (smax<mode>3): New pattern.\n\t(smin<mode>3): Likewise.\n\n\ngcc/testsuite/\n\n2012-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* gcc.target/arm/vmaxnmdf.c: New test.\n\t* gcc.target/arm/vmaxnmsf.c: Likewise.\n\t* gcc.target/arm/vminnmsf.c: Likewise.\n\t* gcc.target/arm/vminnmdf.c: Likewise.\n\nFrom-SVN: r194612", "tree": {"sha": "454c741c95774cf5b90adf834852f2630c56bf1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454c741c95774cf5b90adf834852f2630c56bf1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/372020711f3052816cec3343369b73d47babb431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372020711f3052816cec3343369b73d47babb431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372020711f3052816cec3343369b73d47babb431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372020711f3052816cec3343369b73d47babb431/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2865ea6615305f56b2b3138b6f49e608f8bd891f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2865ea6615305f56b2b3138b6f49e608f8bd891f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2865ea6615305f56b2b3138b6f49e608f8bd891f"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "e60c4d902e57cb33955b78889a76407b52b069c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -1,3 +1,9 @@\n+2012-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (f_minmaxs, f_minmaxd): New types.\n+\t* config/arm/vfp.md (smax<mode>3): New pattern.\n+\t(smin<mode>3): Likewise.\n+\n 2012-12-19  Richard Biener  <rguenther@suse.de>\n \n \t* targhooks.h (default_canonicalize_comparison): Fix prototype."}, {"sha": "385a58dd65219172bfcf7a9946c3a239e9eed20d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -286,6 +286,8 @@\n   fmacd,\\\n   f_rints,\\\n   f_rintd,\\\n+  f_minmaxs,\\\n+  f_minmaxd,\\\n   f_flag,\\\n   f_loads,\\\n   f_loadd,\\"}, {"sha": "3f2975ff546bbe6fad9e7b4750174220eef91758", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -1265,6 +1265,31 @@\n    (set_attr \"type\" \"f_rint<vfp_type>\")]\n )\n \n+;; MIN_EXPR and MAX_EXPR eventually map to 'smin' and 'smax' in RTL.\n+;; The 'smax' and 'smin' RTL standard pattern names do not specify which\n+;; operand will be returned when both operands are zero (i.e. they may not\n+;; honour signed zeroes), or when either operand is NaN.  Therefore GCC\n+;; only introduces MIN_EXPR/MAX_EXPR in fast math mode or when not honouring\n+;; NaNs.\n+\n+(define_insn \"smax<mode>3\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+        (smax:SDF (match_operand:SDF 1 \"register_operand\" \"<F_constraint>\")\n+\t\t  (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 <vfp_double_cond>\"\n+  \"vmaxnm.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"type\" \"f_minmax<vfp_type>\")]\n+)\n+\n+(define_insn \"smin<mode>3\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+        (smin:SDF (match_operand:SDF 1 \"register_operand\" \"<F_constraint>\")\n+\t\t  (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPU_ARMV8 <vfp_double_cond>\"\n+  \"vminnm.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"type\" \"f_minmax<vfp_type>\")]\n+)\n+\n ;; Unimplemented insns:\n ;; fldm*\n ;; fstm*"}, {"sha": "8e1e53ccb6df42003d54d4df6faefbcf3ac78e2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -1,3 +1,10 @@\n+2012-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/vmaxnmdf.c: New test.\n+\t* gcc.target/arm/vmaxnmsf.c: Likewise.\n+\t* gcc.target/arm/vminnmsf.c: Likewise.\n+\t* gcc.target/arm/vminnmdf.c: Likewise.\n+\n 2012-12-19  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/gomp/use_intrinsic_1.f90: Moved"}, {"sha": "1a172b8c012da68dbe69da7fbf04c72d05d4e99c", "filename": "gcc/testsuite/gcc.target/arm/vmaxnmdf.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmdf.c?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_vfp_ok } */\n+/* { dg-options \"-ffast-math\" } */\n+/* { dg-add-options arm_v8_vfp } */\n+\n+double\n+foo (double x, double y)\n+{\n+  return __builtin_fmax (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmaxnm.f64\\td\\[0-9\\]+\" 1 } } */"}, {"sha": "bc2326187fd5a944b858377fabd25bc1a1d5b6ec", "filename": "gcc/testsuite/gcc.target/arm/vmaxnmsf.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvmaxnmsf.c?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_vfp_ok } */\n+/* { dg-options \"-ffast-math\" } */\n+/* { dg-add-options arm_v8_vfp } */\n+\n+float\n+foo (float x, float y)\n+{\n+  return __builtin_fmaxf (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmaxnm.f32\\ts\\[0-9\\]+\" 1 } } */"}, {"sha": "c2a6915b2e3fe2631bbf03333e3f2814ad3dad86", "filename": "gcc/testsuite/gcc.target/arm/vminnmdf.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmdf.c?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_vfp_ok } */\n+/* { dg-options \"-ffast-math\" } */\n+/* { dg-add-options arm_v8_vfp } */\n+\n+double\n+foo (double x, double y)\n+{\n+  return __builtin_fmin (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminnm.f64\\td\\[0-9\\]+\" 1 } } */"}, {"sha": "eee43bce1e7c3b522657a4bd146e864ef79ce949", "filename": "gcc/testsuite/gcc.target/arm/vminnmsf.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372020711f3052816cec3343369b73d47babb431/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvminnmsf.c?ref=372020711f3052816cec3343369b73d47babb431", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_vfp_ok } */\n+/* { dg-options \"-ffast-math\" } */\n+/* { dg-add-options arm_v8_vfp } */\n+\n+float\n+foo (float x, float y)\n+{\n+  return __builtin_fminf (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminnm.f32\\ts\\[0-9\\]+\" 1 } } */"}]}