{"sha": "2a0621b9495e51d093141dc35e2e176d608df79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwNjIxYjk0OTVlNTFkMDkzMTQxZGMzNWUyZTE3NmQ2MDhkZjc5Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-16T18:24:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-16T18:24:08Z"}, "message": "scan.h: Convert to ISO C.\n\n\t* scan.h: Convert to ISO C.\n\t* system.h: Likewise.\n\nFrom-SVN: r68027", "tree": {"sha": "caea83bfff1499eade153bc41526765715e0958f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caea83bfff1499eade153bc41526765715e0958f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a0621b9495e51d093141dc35e2e176d608df79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0621b9495e51d093141dc35e2e176d608df79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0621b9495e51d093141dc35e2e176d608df79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0621b9495e51d093141dc35e2e176d608df79f/comments", "author": null, "committer": null, "parents": [{"sha": "83415b0b13399f66dfd7f7a7ea29cd956a49868a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83415b0b13399f66dfd7f7a7ea29cd956a49868a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83415b0b13399f66dfd7f7a7ea29cd956a49868a"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "09979e757ca4e3fcd69c228b95ba9041a6b6ce78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a0621b9495e51d093141dc35e2e176d608df79f", "patch": "@@ -1,5 +1,8 @@\n 2003-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* scan.h: Convert to ISO C.\n+\t* system.h: Likewise.\n+\n \t* c-format.c (dynamic_format_types): New pointer for dynamic data.\n \t(find_length_info_modifier_index, init_dynamic_asm_fprintf_info):\n \tNew functions split out of..."}, {"sha": "7062cdaf90ed83206e0c36b84e72655023b1ad14", "filename": "gcc/scan.h", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=2a0621b9495e51d093141dc35e2e176d608df79f", "patch": "@@ -33,14 +33,6 @@ typedef struct sstring\n #define MAKE_SSTRING_SPACE(STR, COUNT) \\\n   if ((STR)->limit - (STR)->ptr < (COUNT)) make_sstring_space (STR, COUNT);\n \n-#ifndef _PARAMS\n-#if defined(ANSI_PROTOTYPES) || defined(__cplusplus)\n-#define _PARAMS(args) args\n-#else\n-#define _PARAMS(args) ()\n-#endif\n-#endif\n-\n struct partial_proto;\n struct fn_decl\n {\n@@ -52,26 +44,26 @@ struct fn_decl\n \n struct cpp_token;\n \n-extern void sstring_append _PARAMS((sstring *, sstring *));\n-extern void make_sstring_space _PARAMS((sstring *, int));\n-extern int skip_spaces _PARAMS((FILE *, int));\n-extern int scan_ident _PARAMS((FILE *, sstring *, int));\n-extern int scan_string _PARAMS((FILE *, sstring *, int));\n-extern int read_upto _PARAMS((FILE *, sstring *, int));\n-extern unsigned long hash _PARAMS((const char *));\n-extern void recognized_function _PARAMS((const struct cpp_token *,\n-\t\t\t\t\t unsigned int, int, int));\n-extern void recognized_extern _PARAMS((const struct cpp_token *));\n-extern unsigned int hashstr _PARAMS((const char *, unsigned int));\n+extern void sstring_append (sstring *, sstring *);\n+extern void make_sstring_space (sstring *, int);\n+extern int skip_spaces (FILE *, int);\n+extern int scan_ident (FILE *, sstring *, int);\n+extern int scan_string (FILE *, sstring *, int);\n+extern int read_upto (FILE *, sstring *, int);\n+extern unsigned long hash (const char *);\n+extern void recognized_function (const struct cpp_token *,\n+\t\t\t\t unsigned int, int, int);\n+extern void recognized_extern (const struct cpp_token *);\n+extern unsigned int hashstr (const char *, unsigned int);\n \n-extern int scan_decls _PARAMS((struct cpp_reader *, int, char **));\n+extern int scan_decls (struct cpp_reader *, int, char **);\n \n /* get_token is a simple C lexer.  */\n #define IDENTIFIER_TOKEN 300\n #define CHAR_TOKEN 301\n #define STRING_TOKEN 302\n #define INT_TOKEN 303\n-extern int get_token _PARAMS ((FILE *, sstring *));\n+extern int get_token (FILE *, sstring *);\n \n /* Current file and line numer, taking #-directives into account */\n extern int source_lineno;"}, {"sha": "6448c0cfc43fdf0abfc4a88029fa4357b564b55f", "filename": "gcc/system.h", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0621b9495e51d093141dc35e2e176d608df79f/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2a0621b9495e51d093141dc35e2e176d608df79f", "patch": "@@ -23,12 +23,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_SYSTEM_H\n #define GCC_SYSTEM_H\n \n-/* We must include stdarg.h/varargs.h before stdio.h.  */\n-#ifdef ANSI_PROTOTYPES\n+/* We must include stdarg.h before stdio.h.  */\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n \n #ifndef va_copy\n # ifdef __va_copy\n@@ -77,14 +73,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #  undef fputs\n #  define fputs(String, Stream) fputs_unlocked (String, Stream)\n #  if defined (HAVE_DECL_FPUTS_UNLOCKED) && !HAVE_DECL_FPUTS_UNLOCKED\n-extern int fputs_unlocked PARAMS ((const char *, FILE *));\n+extern int fputs_unlocked (const char *, FILE *);\n #  endif\n # endif\n # ifdef HAVE_FWRITE_UNLOCKED\n #  undef fwrite\n #  define fwrite(Ptr, Size, N, Stream) fwrite_unlocked (Ptr, Size, N, Stream)\n #  if defined (HAVE_DECL_FWRITE_UNLOCKED) && !HAVE_DECL_FWRITE_UNLOCKED\n-extern int fwrite_unlocked PARAMS ((const PTR, size_t, size_t, FILE *));\n+extern int fwrite_unlocked (const void *, size_t, size_t, FILE *);\n #  endif\n # endif\n # ifdef HAVE_FPRINTF_UNLOCKED\n@@ -93,7 +89,7 @@ extern int fwrite_unlocked PARAMS ((const PTR, size_t, size_t, FILE *));\n    we have varargs macros.  */\n #  define fprintf fprintf_unlocked\n #  if defined (HAVE_DECL_FPRINTF_UNLOCKED) && !HAVE_DECL_FPRINTF_UNLOCKED\n-extern int fprintf_unlocked PARAMS ((FILE *, const char *, ...));\n+extern int fprintf_unlocked (FILE *, const char *, ...);\n #  endif\n # endif\n \n@@ -283,84 +279,80 @@ extern int errno;\n    is running so be careful to test \"defined (HAVE_DECL_*)\".  */\n \n #if defined (HAVE_DECL_ATOF) && !HAVE_DECL_ATOF\n-extern double atof PARAMS ((const char *));\n+extern double atof (const char *);\n #endif\n \n #if defined (HAVE_DECL_ATOL) && !HAVE_DECL_ATOL\n-extern long atol PARAMS ((const char *));\n+extern long atol (const char *);\n #endif\n \n #if defined (HAVE_DECL_FREE) && !HAVE_DECL_FREE\n-extern void free PARAMS ((PTR));\n+extern void free (void *);\n #endif\n \n #if defined (HAVE_DECL_GETCWD) && !HAVE_DECL_GETCWD\n-extern char *getcwd PARAMS ((char *, size_t));\n+extern char *getcwd (char *, size_t);\n #endif\n \n #if defined (HAVE_DECL_GETENV) && !HAVE_DECL_GETENV\n-extern char *getenv PARAMS ((const char *));\n+extern char *getenv (const char *);\n #endif\n \n #if defined (HAVE_DECL_GETOPT) && !HAVE_DECL_GETOPT\n-extern int getopt PARAMS ((int, char * const *, const char *));\n+extern int getopt (int, char * const *, const char *);\n #endif\n \n #if defined (HAVE_DECL_GETWD) && !HAVE_DECL_GETWD\n-extern char *getwd PARAMS ((char *));\n+extern char *getwd (char *);\n #endif\n \n #if defined (HAVE_DECL_SBRK) && !HAVE_DECL_SBRK\n-extern PTR sbrk PARAMS ((int));\n+extern void *sbrk (int);\n #endif\n \n #if defined (HAVE_DECL_STRSTR) && !HAVE_DECL_STRSTR\n-extern char *strstr PARAMS ((const char *, const char *));\n+extern char *strstr (const char *, const char *);\n #endif\n \n #ifdef HAVE_MALLOC_H\n #include <malloc.h>\n #endif\n \n #if defined (HAVE_DECL_MALLOC) && !HAVE_DECL_MALLOC\n-extern PTR malloc PARAMS ((size_t));\n+extern void *malloc (size_t);\n #endif\n \n #if defined (HAVE_DECL_CALLOC) && !HAVE_DECL_CALLOC\n-extern PTR calloc PARAMS ((size_t, size_t));\n+extern void *calloc (size_t, size_t);\n #endif\n \n #if defined (HAVE_DECL_REALLOC) && !HAVE_DECL_REALLOC\n-extern PTR realloc PARAMS ((PTR, size_t));\n+extern void *realloc (void *, size_t);\n #endif\n \n /* If the system doesn't provide strsignal, we get it defined in\n    libiberty but no declaration is supplied.  */\n #if !defined (HAVE_STRSIGNAL) \\\n     || (defined (HAVE_DECL_STRSIGNAL) && !HAVE_DECL_STRSIGNAL)\n # ifndef strsignal\n-extern const char *strsignal PARAMS ((int));\n+extern const char *strsignal (int);\n # endif\n #endif\n \n #ifdef HAVE_GETRLIMIT\n # if defined (HAVE_DECL_GETRLIMIT) && !HAVE_DECL_GETRLIMIT\n #  ifndef getrlimit\n-#   ifdef ANSI_PROTOTYPES\n struct rlimit;\n-#   endif\n-extern int getrlimit PARAMS ((int, struct rlimit *));\n+extern int getrlimit (int, struct rlimit *);\n #  endif\n # endif\n #endif\n \n #ifdef HAVE_SETRLIMIT\n # if defined (HAVE_DECL_SETRLIMIT) && !HAVE_DECL_SETRLIMIT\n #  ifndef setrlimit\n-#   ifdef ANSI_PROTOTYPES\n struct rlimit;\n-#   endif\n-extern int setrlimit PARAMS ((int, const struct rlimit *));\n+extern int setrlimit (int, const struct rlimit *);\n #  endif\n # endif\n #endif\n@@ -372,7 +364,7 @@ extern int setrlimit PARAMS ((int, const struct rlimit *));\n #endif\n \n #if defined (HAVE_DECL_ABORT) && !HAVE_DECL_ABORT\n-extern void abort PARAMS ((void));\n+extern void abort (void);\n #endif\n \n /* 1 if we have C99 designated initializers.  */"}]}