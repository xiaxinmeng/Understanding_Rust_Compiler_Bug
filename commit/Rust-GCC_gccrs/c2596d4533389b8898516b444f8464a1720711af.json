{"sha": "c2596d4533389b8898516b444f8464a1720711af", "node_id": "C_kwDOANBUbNoAKGMyNTk2ZDQ1MzMzODliODg5ODUxNmI0NDRmODQ2NGExNzIwNzExYWY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-06-17T17:44:40Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-08T08:34:59Z"}, "message": "ada: Fix expansion of 'Wide_Image and 'Wide_Wide_Image on composite types\n\nAttributes Wide_Image and Wide_Wide_Image applied to composite types are\nnow expanded just like attribute Image.\n\ngcc/ada/\n\n\t* exp_imgv.adb\n\t(Expand_Wide_Image_Attribute): Handle just like attribute Image.\n\t(Expand_Wide_Wide_Image_Attribute): Likewise.\n\t* exp_put_image.adb\n\t(Build_Image_Call): Adapt to also work for Wide and Wide_Wide\n\tattributes.\n\t* exp_put_image.ads\n\t(Build_Image_Call): Update comment.\n\t* rtsfind.ads\n\t(RE_Id): Support wide variants of Get.\n\t(RE_Unit_Table): Likewise.", "tree": {"sha": "2ac6ed1559db1940265052bdaf2d006ef14d7e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ac6ed1559db1940265052bdaf2d006ef14d7e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2596d4533389b8898516b444f8464a1720711af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2596d4533389b8898516b444f8464a1720711af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2596d4533389b8898516b444f8464a1720711af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2596d4533389b8898516b444f8464a1720711af/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7857d873293d2333e1cc8e67ff9bb963fc8b4d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7857d873293d2333e1cc8e67ff9bb963fc8b4d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7857d873293d2333e1cc8e67ff9bb963fc8b4d1f"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "398e4771c147c5aaf9333a6da3de949a24448bbe", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=c2596d4533389b8898516b444f8464a1720711af", "patch": "@@ -1842,6 +1842,15 @@ package body Exp_Imgv is\n          return;\n       end if;\n \n+      --  If Image should be transformed using Put_Image, then do so. See\n+      --  Exp_Put_Image for details.\n+\n+      if Exp_Put_Image.Image_Should_Call_Put_Image (N) then\n+         Rewrite (N, Exp_Put_Image.Build_Image_Call (N));\n+         Analyze_And_Resolve (N, Standard_Wide_String, Suppress => All_Checks);\n+         return;\n+      end if;\n+\n       Rtyp := Root_Type (Entity (Pref));\n \n       Insert_Actions (N, New_List (\n@@ -1942,6 +1951,16 @@ package body Exp_Imgv is\n          return;\n       end if;\n \n+      --  If Image should be transformed using Put_Image, then do so. See\n+      --  Exp_Put_Image for details.\n+\n+      if Exp_Put_Image.Image_Should_Call_Put_Image (N) then\n+         Rewrite (N, Exp_Put_Image.Build_Image_Call (N));\n+         Analyze_And_Resolve\n+           (N, Standard_Wide_Wide_String, Suppress => All_Checks);\n+         return;\n+      end if;\n+\n       Rtyp := Root_Type (Entity (Pref));\n \n       Insert_Actions (N, New_List ("}, {"sha": "f90f0206f2785ebb9f660bddad459bf96067bdd7", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=c2596d4533389b8898516b444f8464a1720711af", "patch": "@@ -1058,12 +1058,14 @@ package body Exp_Put_Image is\n    ----------------------\n \n    function Build_Image_Call (N : Node_Id) return Node_Id is\n-      --  For T'Image (X) Generate an Expression_With_Actions node:\n+      --  For T'[[Wide_]Wide_]Image (X) Generate an Expression_With_Actions\n+      --  node:\n       --\n       --     do\n       --        S : Buffer;\n       --        U_Type'Put_Image (S, X);\n-      --        Result : constant String := Get (S);\n+      --        Result : constant [[Wide_]Wide_]String :=\n+      --          [[Wide_[Wide_]]Get (S);\n       --        Destroy (S);\n       --     in Result end\n       --\n@@ -1091,14 +1093,33 @@ package body Exp_Put_Image is\n             Image_Prefix));\n       Result_Entity : constant Entity_Id :=\n         Make_Temporary (Loc, 'R');\n+\n+      subtype Image_Name_Id is Name_Id with Static_Predicate =>\n+        Image_Name_Id in Name_Image | Name_Wide_Image | Name_Wide_Wide_Image;\n+      --  Attribute names that will be mapped to the corresponding result types\n+      --  and functions.\n+\n+      Attribute_Name_Id : constant Name_Id := Attribute_Name (N);\n+\n+      Result_Typ    : constant Entity_Id :=\n+        (case Image_Name_Id'(Attribute_Name_Id) is\n+            when Name_Image           => Stand.Standard_String,\n+            when Name_Wide_Image      => Stand.Standard_Wide_String,\n+            when Name_Wide_Wide_Image => Stand.Standard_Wide_Wide_String);\n+      Get_Func_Id   : constant RE_Id :=\n+        (case Image_Name_Id'(Attribute_Name_Id) is\n+            when Name_Image           => RE_Get,\n+            when Name_Wide_Image      => RE_Wide_Get,\n+            when Name_Wide_Wide_Image => RE_Wide_Wide_Get);\n+\n       Result_Decl : constant Node_Id :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Result_Entity,\n           Object_Definition =>\n-            New_Occurrence_Of (Stand.Standard_String, Loc),\n+            New_Occurrence_Of (Result_Typ, Loc),\n           Expression =>\n             Make_Function_Call (Loc,\n-              Name => New_Occurrence_Of (RTE (RE_Get), Loc),\n+              Name => New_Occurrence_Of (RTE (Get_Func_Id), Loc),\n               Parameter_Associations => New_List (\n                 New_Occurrence_Of (Sink_Entity, Loc))));\n       Actions : List_Id;"}, {"sha": "d4055d10b96751538dcfc5a075e21a4f48bf7b85", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=c2596d4533389b8898516b444f8464a1720711af", "patch": "@@ -91,9 +91,9 @@ package Exp_Put_Image is\n    --  T'Image.\n \n    function Build_Image_Call (N : Node_Id) return Node_Id;\n-   --  N is a call to T'Image, and this translates it into the appropriate code\n-   --  to call T'Put_Image into a buffer and then extract the string from the\n-   --  buffer.\n+   --  N is a call to T'[[Wide_]Wide_]Image, and this translates it into the\n+   --  appropriate code to call T'Put_Image into a buffer and then extract the\n+   --  [[wide] wide] string from the buffer.\n \n    procedure Preload_Root_Buffer_Type (Compilation_Unit : Node_Id);\n    --  Call RTE (RE_Root_Buffer_Type) if necessary, to load the packages"}, {"sha": "ce49e2df14938c0f77f36d59d4684fdd2b86221d", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2596d4533389b8898516b444f8464a1720711af/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=c2596d4533389b8898516b444f8464a1720711af", "patch": "@@ -609,6 +609,8 @@ package Rtsfind is\n \n      RE_Buffer_Type,                     -- Ada.Strings.Text_Buffers.Unbounded\n      RE_Get,                             -- Ada.Strings.Text_Buffers.Unbounded\n+     RE_Wide_Get,                        -- Ada.Strings.Text_Buffers.Unbounded\n+     RE_Wide_Wide_Get,                   -- Ada.Strings.Text_Buffers.Unbounded\n \n      RE_Wait_For_Release,                -- Ada.Synchronous_Barriers\n \n@@ -2245,6 +2247,8 @@ package Rtsfind is\n \n      RE_Buffer_Type                      => Ada_Strings_Text_Buffers_Unbounded,\n      RE_Get                              => Ada_Strings_Text_Buffers_Unbounded,\n+     RE_Wide_Get                         => Ada_Strings_Text_Buffers_Unbounded,\n+     RE_Wide_Wide_Get                    => Ada_Strings_Text_Buffers_Unbounded,\n \n      RE_Wait_For_Release                 => Ada_Synchronous_Barriers,\n "}]}