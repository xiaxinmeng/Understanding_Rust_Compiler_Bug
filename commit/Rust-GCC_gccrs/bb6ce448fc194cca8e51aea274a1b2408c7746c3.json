{"sha": "bb6ce448fc194cca8e51aea274a1b2408c7746c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2Y2U0NDhmYzE5NGNjYThlNTFhZWEyNzRhMWIyNDA4Yzc3NDZjMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-01T08:55:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-01T08:55:28Z"}, "message": "[AArch64] Use calls for SVE TLSDESC\n\nOne (unintended) side effect of the patches to support multiple\nABIs is that we can now represent tlsdesc calls as normal calls\non SVE targets.  This is likely to be handled more efficiently than\nclobber_high, and for example fixes the long-standing failure in\ngcc.target/aarch64/sve/tls_preserve_1.c.\n\n2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/91452\n\t* config/aarch64/aarch64.h (ARM_PCS_TLSDESC): New arm_pcs.\n\t* config/aarch64/aarch64-protos.h (aarch64_tlsdesc_abi_id): Declare.\n\t* config/aarch64/aarch64.c (aarch64_hard_regno_call_part_clobbered):\n\tHandle ARM_PCS_TLSDESC.\n\t(aarch64_tlsdesc_abi_id): New function.\n\t* config/aarch64/aarch64.md (tlsdesc_small_sve_<mode>): Use a call\n\trtx instead of a list of clobbers and clobber_highs.\n\t(tlsdesc_small_<mode>): Update accordingly.\n\nFrom-SVN: r276392", "tree": {"sha": "68b931434c970e8816f535c5d45d8598fca5a87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b931434c970e8816f535c5d45d8598fca5a87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6ce448fc194cca8e51aea274a1b2408c7746c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6ce448fc194cca8e51aea274a1b2408c7746c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6ce448fc194cca8e51aea274a1b2408c7746c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6ce448fc194cca8e51aea274a1b2408c7746c3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08cc4d925f640c3cd0336bae4dc6004244a5c80a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cc4d925f640c3cd0336bae4dc6004244a5c80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cc4d925f640c3cd0336bae4dc6004244a5c80a"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "e0aa3ac69fe7886fc9d1b8c53c3ad4845bf8e74c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb6ce448fc194cca8e51aea274a1b2408c7746c3", "patch": "@@ -1,3 +1,15 @@\n+2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/91452\n+\t* config/aarch64/aarch64.h (ARM_PCS_TLSDESC): New arm_pcs.\n+\t* config/aarch64/aarch64-protos.h (aarch64_tlsdesc_abi_id): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_call_part_clobbered):\n+\tHandle ARM_PCS_TLSDESC.\n+\t(aarch64_tlsdesc_abi_id): New function.\n+\t* config/aarch64/aarch64.md (tlsdesc_small_sve_<mode>): Use a call\n+\trtx instead of a list of clobbers and clobber_highs.\n+\t(tlsdesc_small_<mode>): Update accordingly.\n+\n 2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_expand_call): Take an"}, {"sha": "ab27a1263f54981586f2b9d036f143030820208b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=bb6ce448fc194cca8e51aea274a1b2408c7746c3", "patch": "@@ -533,6 +533,7 @@ bool aarch64_uimm12_shift (HOST_WIDE_INT);\n bool aarch64_use_return_insn_p (void);\n const char *aarch64_output_casesi (rtx *);\n \n+unsigned int aarch64_tlsdesc_abi_id ();\n enum aarch64_symbol_type aarch64_classify_symbol (rtx, HOST_WIDE_INT);\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);"}, {"sha": "7ee31a66b12d7354759f06449955e933421f5fe0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bb6ce448fc194cca8e51aea274a1b2408c7746c3", "patch": "@@ -1896,12 +1896,13 @@ aarch64_hard_regno_call_part_clobbered (unsigned int abi_id,\n {\n   if (FP_REGNUM_P (regno))\n     {\n-      bool simd_p = (abi_id == ARM_PCS_SIMD);\n       poly_int64 per_register_size = GET_MODE_SIZE (mode);\n       unsigned int nregs = hard_regno_nregs (regno, mode);\n       if (nregs > 1)\n \tper_register_size = exact_div (per_register_size, nregs);\n-      return maybe_gt (per_register_size, simd_p ? 16 : 8);\n+      if (abi_id == ARM_PCS_SIMD || abi_id == ARM_PCS_TLSDESC)\n+\treturn maybe_gt (per_register_size, 16);\n+      return maybe_gt (per_register_size, 8);\n     }\n   return false;\n }\n@@ -13953,6 +13954,26 @@ aarch64_can_inline_p (tree caller, tree callee)\n   return true;\n }\n \n+/* Return the ID of the TLDESC ABI, initializing the descriptor if hasn't\n+   been already.  */\n+\n+unsigned int\n+aarch64_tlsdesc_abi_id ()\n+{\n+  predefined_function_abi &tlsdesc_abi = function_abis[ARM_PCS_TLSDESC];\n+  if (!tlsdesc_abi.initialized_p ())\n+    {\n+      HARD_REG_SET full_reg_clobbers;\n+      CLEAR_HARD_REG_SET (full_reg_clobbers);\n+      SET_HARD_REG_BIT (full_reg_clobbers, R0_REGNUM);\n+      SET_HARD_REG_BIT (full_reg_clobbers, CC_REGNUM);\n+      for (int regno = P0_REGNUM; regno <= P15_REGNUM; ++regno)\n+\tSET_HARD_REG_BIT (full_reg_clobbers, regno);\n+      tlsdesc_abi.initialize (ARM_PCS_TLSDESC, full_reg_clobbers);\n+    }\n+  return tlsdesc_abi.id ();\n+}\n+\n /* Return true if SYMBOL_REF X binds locally.  */\n \n static bool"}, {"sha": "abd14a2f92c06828adfc6d2e2e81b63a6163d3a3", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=bb6ce448fc194cca8e51aea274a1b2408c7746c3", "patch": "@@ -784,6 +784,7 @@ enum arm_pcs\n {\n   ARM_PCS_AAPCS64,\t\t/* Base standard AAPCS for 64 bit.  */\n   ARM_PCS_SIMD,\t\t\t/* For aarch64_vector_pcs functions.  */\n+  ARM_PCS_TLSDESC,\t\t/* For targets of tlsdesc calls.  */\n   ARM_PCS_UNKNOWN\n };\n "}, {"sha": "e7a6930465e5433c68f3d9c9b4ba2b9f82aaf7ce", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 58, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6ce448fc194cca8e51aea274a1b2408c7746c3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bb6ce448fc194cca8e51aea274a1b2408c7746c3", "patch": "@@ -6805,7 +6805,12 @@\n   \"TARGET_TLS_DESC\"\n   {\n     if (TARGET_SVE)\n-      emit_insn (gen_tlsdesc_small_sve_<mode> (operands[0]));\n+      {\n+\trtx abi = gen_int_mode (aarch64_tlsdesc_abi_id (), DImode);\n+\trtx_insn *call\n+\t  = emit_call_insn (gen_tlsdesc_small_sve_<mode> (operands[0], abi));\n+\tRTL_CONST_CALL_P (call) = 1;\n+      }\n     else\n       emit_insn (gen_tlsdesc_small_advsimd_<mode> (operands[0]));\n     DONE;\n@@ -6827,67 +6832,20 @@\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n \n-;; For SVE, model tlsdesc calls as clobbering the lower 128 bits of\n-;; all vector registers, and clobber all predicate registers, on\n-;; top of the usual R0 and LR.\n+;; For SVE, model tlsdesc calls as normal calls, with the callee ABI\n+;; describing the extra call-preserved guarantees.  This would work\n+;; for non-SVE too, but avoiding a call is probably better if we can.\n (define_insn \"tlsdesc_small_sve_<mode>\"\n   [(set (reg:PTR R0_REGNUM)\n-        (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]\n-\t\t    UNSPEC_TLSDESC))\n+\t(call (mem:DI (unspec:PTR\n+\t\t\t[(match_operand 0 \"aarch64_valid_symref\")]\n+\t\t\tUNSPEC_TLSDESC))\n+\t      (const_int 0)))\n+   (unspec:DI [(match_operand:DI 1 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n    (clobber (reg:DI LR_REGNUM))\n-   (clobber (reg:CC CC_REGNUM))\n-   (clobber_high (reg:TI V0_REGNUM))\n-   (clobber_high (reg:TI V1_REGNUM))\n-   (clobber_high (reg:TI V2_REGNUM))\n-   (clobber_high (reg:TI V3_REGNUM))\n-   (clobber_high (reg:TI V4_REGNUM))\n-   (clobber_high (reg:TI V5_REGNUM))\n-   (clobber_high (reg:TI V6_REGNUM))\n-   (clobber_high (reg:TI V7_REGNUM))\n-   (clobber_high (reg:TI V8_REGNUM))\n-   (clobber_high (reg:TI V9_REGNUM))\n-   (clobber_high (reg:TI V10_REGNUM))\n-   (clobber_high (reg:TI V11_REGNUM))\n-   (clobber_high (reg:TI V12_REGNUM))\n-   (clobber_high (reg:TI V13_REGNUM))\n-   (clobber_high (reg:TI V14_REGNUM))\n-   (clobber_high (reg:TI V15_REGNUM))\n-   (clobber_high (reg:TI V16_REGNUM))\n-   (clobber_high (reg:TI V17_REGNUM))\n-   (clobber_high (reg:TI V18_REGNUM))\n-   (clobber_high (reg:TI V19_REGNUM))\n-   (clobber_high (reg:TI V20_REGNUM))\n-   (clobber_high (reg:TI V21_REGNUM))\n-   (clobber_high (reg:TI V22_REGNUM))\n-   (clobber_high (reg:TI V23_REGNUM))\n-   (clobber_high (reg:TI V24_REGNUM))\n-   (clobber_high (reg:TI V25_REGNUM))\n-   (clobber_high (reg:TI V26_REGNUM))\n-   (clobber_high (reg:TI V27_REGNUM))\n-   (clobber_high (reg:TI V28_REGNUM))\n-   (clobber_high (reg:TI V29_REGNUM))\n-   (clobber_high (reg:TI V30_REGNUM))\n-   (clobber_high (reg:TI V31_REGNUM))\n-   (clobber (reg:VNx2BI P0_REGNUM))\n-   (clobber (reg:VNx2BI P1_REGNUM))\n-   (clobber (reg:VNx2BI P2_REGNUM))\n-   (clobber (reg:VNx2BI P3_REGNUM))\n-   (clobber (reg:VNx2BI P4_REGNUM))\n-   (clobber (reg:VNx2BI P5_REGNUM))\n-   (clobber (reg:VNx2BI P6_REGNUM))\n-   (clobber (reg:VNx2BI P7_REGNUM))\n-   (clobber (reg:VNx2BI P8_REGNUM))\n-   (clobber (reg:VNx2BI P9_REGNUM))\n-   (clobber (reg:VNx2BI P10_REGNUM))\n-   (clobber (reg:VNx2BI P11_REGNUM))\n-   (clobber (reg:VNx2BI P12_REGNUM))\n-   (clobber (reg:VNx2BI P13_REGNUM))\n-   (clobber (reg:VNx2BI P14_REGNUM))\n-   (clobber (reg:VNx2BI P15_REGNUM))\n-   (clobber (match_scratch:DI 1 \"=r\"))\n-   (use (reg:DI FP_REGNUM))]\n+   (clobber (match_scratch:DI 2 \"=r\"))]\n   \"TARGET_TLS_DESC && TARGET_SVE\"\n-  \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>1, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n+  \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>2, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%2\"\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n "}]}