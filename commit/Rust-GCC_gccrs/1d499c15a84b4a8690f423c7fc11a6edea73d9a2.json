{"sha": "1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0OTljMTVhODRiNGE4NjkwZjQyM2M3ZmMxMWE2ZWRlYTczZDlhMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:11:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:22Z"}, "message": "[Ada] Unnesting: fix for constrained arrays and improve static constants\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.adb (Needs_Fat_Pointer): A fat pointer is required if\n\tthe entity has a private type whose full view is an\n\tunconstrained array type.\n\t(Rewrite_One_Ref): If the reference is to a static constant, use\n\tits value rather than create a reference through the activation\n\trecord. This is more efficient, and furthermore indispensable if\n\tthe context requires a static constant, such as in a branch of a\n\tcase statement.\n\nFrom-SVN: r267003", "tree": {"sha": "32a7b015a9ecee4938f533c60a8d8d0d56e6f799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32a7b015a9ecee4938f533c60a8d8d0d56e6f799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d499c15a84b4a8690f423c7fc11a6edea73d9a2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a4578b6c6d1febbb569a473c1142135906cab18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4578b6c6d1febbb569a473c1142135906cab18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4578b6c6d1febbb569a473c1142135906cab18"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "33d2a1499d4ac1dc4c52ee76143be2288b70c2a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d499c15a84b4a8690f423c7fc11a6edea73d9a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d499c15a84b4a8690f423c7fc11a6edea73d9a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "patch": "@@ -1,3 +1,14 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Needs_Fat_Pointer): A fat pointer is required if\n+\tthe entity has a private type whose full view is an\n+\tunconstrained array type.\n+\t(Rewrite_One_Ref): If the reference is to a static constant, use\n+\tits value rather than create a reference through the activation\n+\trecord. This is more efficient, and furthermore indispensable if\n+\tthe context requires a static constant, such as in a branch of a\n+\tcase statement.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Apply"}, {"sha": "57b2a9e190c65e78b354f4b86dec1d6de0321cd0", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d499c15a84b4a8690f423c7fc11a6edea73d9a2/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d499c15a84b4a8690f423c7fc11a6edea73d9a2/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=1d499c15a84b4a8690f423c7fc11a6edea73d9a2", "patch": "@@ -246,10 +246,19 @@ package body Exp_Unst is\n    -----------------------\n \n    function Needs_Fat_Pointer (E : Entity_Id) return Boolean is\n+      Typ : Entity_Id;\n    begin\n-      return Is_Formal (E)\n-        and then Is_Array_Type (Etype (E))\n-        and then not Is_Constrained (Etype (E));\n+      if Is_Formal (E) then\n+         Typ := Etype (E);\n+         if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n+            Typ := Full_View (Typ);\n+         end if;\n+\n+         return Is_Array_Type (Typ)\n+           and then not Is_Constrained (Typ);\n+      else\n+         return False;\n+      end if;\n    end Needs_Fat_Pointer;\n \n    ----------------\n@@ -2168,6 +2177,21 @@ package body Exp_Unst is\n                   goto Continue;\n                end if;\n \n+               --  If this is a reference to a global constant, use its value\n+               --  rather than create a reference. It is more efficient and\n+               --  furthermore indispensable if the context requires a\n+               --  constant, such as a branch of a case statement.\n+\n+               if Ekind (UPJ.Ent) = E_Constant\n+                 and then Is_True_Constant (UPJ.Ent)\n+                 and then Present (Constant_Value (UPJ.Ent))\n+                 and then Is_Static_Expression (Constant_Value (UPJ.Ent))\n+               then\n+                  Rewrite (UPJ.Ref,\n+                    New_Copy_Tree (Constant_Value (UPJ.Ent)));\n+                  goto Continue;\n+               end if;\n+\n                --  Push the current scope, so that the pointer type Tnn, and\n                --  any subsidiary entities resulting from the analysis of the\n                --  rewritten reference, go in the right entity chain."}]}