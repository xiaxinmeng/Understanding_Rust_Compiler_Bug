{"sha": "5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MGRiYzE0YjQyNDMwZDhiY2YxZDM0N2QzZmM2NTVkMjQyYjg0ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-19T22:09:13Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-19T22:09:13Z"}, "message": "re PR fortran/83344 (Use of uninitialized memory with ASSOCIATE and strings)\n\n2018-02-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83344\n\tPR fortran/83975\n\t* resolve.c (resolve_assoc_var): Rearrange the logic for the\n\tdetermination of the character length of associate names. If\n\tthe associate name is missing a length expression or the length\n\texpression is not a constant and the target is not a variable,\n\tmake the associate name allocatable and deferred length.\n\t* trans-decl.c (gfc_get_symbol_decl): Null the character length\n\tbackend_decl for deferred length associate names that are not\n\tvariables. Set 'length' to gfc_index_zero_node for character\n\tassociate names, whose character length is a PARM_DECL.\n\n2018-02-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83344\n\tPR fortran/83975\n\t* gfortran.dg/associate_22.f90: Enable commented out test.\n\t* gfortran.dg/associate_36.f90: New test.\n\nFrom-SVN: r257827", "tree": {"sha": "6cc61d1ee188ac070aa47e36dba8c05370e5b2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cc61d1ee188ac070aa47e36dba8c05370e5b2bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/comments", "author": null, "committer": null, "parents": [{"sha": "00b94487352ad836f175eb288fea31d91426b080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94487352ad836f175eb288fea31d91426b080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b94487352ad836f175eb288fea31d91426b080"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "e3818ab6a9271c8b1b10a8cb7661f18fde2f25f9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -1,3 +1,17 @@\n+2018-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83344\n+\tPR fortran/83975\n+\t* resolve.c (resolve_assoc_var): Rearrange the logic for the\n+\tdetermination of the character length of associate names. If\n+\tthe associate name is missing a length expression or the length\n+\texpression is not a constant and the target is not a variable,\n+\tmake the associate name allocatable and deferred length.\n+\t* trans-decl.c (gfc_get_symbol_decl): Null the character length\n+\tbackend_decl for deferred length associate names that are not\n+\tvariables. Set 'length' to gfc_index_zero_node for character\n+\tassociate names, whose character length is a PARM_DECL.\n+\n 2018-02-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/35339"}, {"sha": "fee5b1becf54cf1da2673eff903a05ca8662275e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -8635,30 +8635,26 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n   if (sym->ts.type == BT_CHARACTER && !sym->attr.select_type_temporary)\n     {\n       if (!sym->ts.u.cl)\n-\t{\n-\t  if (target->expr_type != EXPR_CONSTANT\n-\t      && !target->ts.u.cl->length)\n-\t    {\n-\t      sym->ts.u.cl = gfc_get_charlen();\n-\t      sym->ts.deferred = 1;\n+\tsym->ts.u.cl = target->ts.u.cl;\n \n-\t      /* This is reset in trans-stmt.c after the assignment\n-\t\t of the target expression to the associate name.  */\n-\t      sym->attr.allocatable = 1;\n-\t    }\n-\t  else\n-\t    sym->ts.u.cl = target->ts.u.cl;\n+      if (!sym->ts.u.cl->length\n+\t  && !sym->ts.deferred\n+\t  && target->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  sym->ts.u.cl->length =\n+\t\tgfc_get_int_expr (gfc_charlen_int_kind, NULL,\n+\t\t\t\t  target->value.character.length);\n \t}\n-\n-      if (!sym->ts.u.cl->length && !sym->ts.deferred)\n+      else if ((!sym->ts.u.cl->length\n+\t\t|| sym->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n+\t\t&& target->expr_type != EXPR_VARIABLE)\n \t{\n-\t  if (target->expr_type == EXPR_CONSTANT)\n-\t    sym->ts.u.cl->length =\n-\t      gfc_get_int_expr (gfc_charlen_int_kind, NULL,\n-\t\t\t\ttarget->value.character.length);\n-\t  else\n-\t    gfc_error (\"Not Implemented: Associate target with type character\"\n-\t\t       \" and non-constant length at %L\", &target->where);\n+\t  sym->ts.u.cl = gfc_get_charlen();\n+\t  sym->ts.deferred = 1;\n+\n+\t  /* This is reset in trans-stmt.c after the assignment\n+\t     of the target expression to the associate name.  */\n+\t  sym->attr.allocatable = 1;\n \t}\n     }\n "}, {"sha": "a50c50da206c40d1cedbc3ddfef2251f48441a7c", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -1707,12 +1707,13 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  && sym->assoc && sym->assoc->target\n \t  && ((sym->assoc->target->expr_type == EXPR_VARIABLE\n \t       && sym->assoc->target->symtree->n.sym->ts.type != BT_CHARACTER)\n-\t      || sym->assoc->target->expr_type == EXPR_FUNCTION))\n+\t      || sym->assoc->target->expr_type != EXPR_VARIABLE))\n \tsym->ts.u.cl->backend_decl = NULL_TREE;\n \n       if (sym->attr.associate_var\n \t  && sym->ts.u.cl->backend_decl\n-\t  && VAR_P (sym->ts.u.cl->backend_decl))\n+\t  && (VAR_P (sym->ts.u.cl->backend_decl)\n+\t      || TREE_CODE (sym->ts.u.cl->backend_decl) == PARM_DECL))\n \tlength = gfc_index_zero_node;\n       else\n \tlength = gfc_create_string_length (sym);"}, {"sha": "531d29ad4cfddee65bf619dde18af49ca1705f01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -1,3 +1,10 @@\n+2018-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83344\n+\tPR fortran/83975\n+\t* gfortran.dg/associate_22.f90: Enable commented out test.\n+\t* gfortran.dg/associate_36.f90: New test.\n+\n 2018-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/84146"}, {"sha": "35daf89098df9f14c53c14bb5e6e1d8acc2d0152", "filename": "gcc/testsuite/gfortran.dg/associate_22.f90", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -24,11 +24,10 @@ program foo\n    end associate\n \n    ! This failed.\n-   ! This still doesn't work correctly, see PR 83344\n-!   a = trim(s) // 'abc'\n-!   associate(w => trim(s) // 'abc')\n-!      if (trim(w) /= trim(a)) STOP 4\n-!   end associate\n+   a = trim(s) // 'abc'\n+   associate(w => trim(s) // 'abc')\n+      if (trim(w) /= trim(a)) STOP 4\n+   end associate\n \n    ! This failed.\n    associate(x => trim('abc'))"}, {"sha": "ba236b431aabc368873e1dc23826860af5928964", "filename": "gcc/testsuite/gfortran.dg/associate_36.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60dbc14b42430d8bcf1d347d3fc655d242b84e/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_36.f90?ref=5c60dbc14b42430d8bcf1d347d3fc655d242b84e", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR83344.\n+!\n+! Contributed by <Janne Blomqvist  <jb@gcc.gnu.org>\n+!\n+program foo\n+   implicit none\n+   character(len=1) a\n+   character(len=2) b\n+   character(len=3) c\n+   a = 'a'\n+   call bah(a, len (a))\n+   b = 'bb'\n+   call bah(b, len (b))\n+   c = 'ccc'\n+   call bah(c, len (c))\n+   contains\n+      subroutine bah(x, clen)\n+         implicit none\n+         integer :: clen\n+         character(len=*), intent(in) :: x\n+         associate(y => x)\n+            if (len(y) .ne. clen) stop 1\n+            if (y .ne. x) stop 2\n+         end associate\n+      end subroutine bah\n+end program foo"}]}