{"sha": "99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2MTVjZjU5NTI2NmNkYmUyN2ZiM2NhZjIwMWZhMzhiZDFmOGQ4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-01T14:58:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-01T14:58:47Z"}, "message": "[01/11] Schedule SLP earlier\n\nvect_transform_loop used to call vect_schedule_slp lazily when it\ncame across the first SLP statement, but it seems easier to do it\nbefore the main loop.\n\n2018-07-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vect_transform_loop_stmt): Remove slp_scheduled\n\targument.\n\t(vect_transform_loop): Update calls accordingly.  Schedule SLP\n\tinstances before the main loop, if any exist.\n\nFrom-SVN: r263214", "tree": {"sha": "c3cd9db15b94315b851f47112e11c29d82857102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3cd9db15b94315b851f47112e11c29d82857102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99615cf595266cdbe27fb3caf201fa38bd1f8d8b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "047fba343dc9fba211a10058bc423c6373cc57f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047fba343dc9fba211a10058bc423c6373cc57f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047fba343dc9fba211a10058bc423c6373cc57f8"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "ac149395c8150ebab8c7fd884d41953bc9aa6336", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99615cf595266cdbe27fb3caf201fa38bd1f8d8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99615cf595266cdbe27fb3caf201fa38bd1f8d8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "patch": "@@ -1,3 +1,10 @@\n+2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop_stmt): Remove slp_scheduled\n+\targument.\n+\t(vect_transform_loop): Update calls accordingly.  Schedule SLP\n+\tinstances before the main loop, if any exist.\n+\n 2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/86749"}, {"sha": "607e722f9d9be687969cbc577f0a362cf3061c34", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99615cf595266cdbe27fb3caf201fa38bd1f8d8b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99615cf595266cdbe27fb3caf201fa38bd1f8d8b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=99615cf595266cdbe27fb3caf201fa38bd1f8d8b", "patch": "@@ -8199,14 +8199,12 @@ scale_profile_for_vect_loop (struct loop *loop, unsigned vf)\n }\n \n /* Vectorize STMT_INFO if relevant, inserting any new instructions before GSI.\n-   When vectorizing STMT_INFO as a store, set *SEEN_STORE to its stmt_vec_info.\n-   *SLP_SCHEDULE is a running record of whether we have called\n-   vect_schedule_slp.  */\n+   When vectorizing STMT_INFO as a store, set *SEEN_STORE to its\n+   stmt_vec_info.  */\n \n static void\n vect_transform_loop_stmt (loop_vec_info loop_vinfo, stmt_vec_info stmt_info,\n-\t\t\t  gimple_stmt_iterator *gsi,\n-\t\t\t  stmt_vec_info *seen_store, bool *slp_scheduled)\n+\t\t\t  gimple_stmt_iterator *gsi, stmt_vec_info *seen_store)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   poly_uint64 vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n@@ -8237,24 +8235,10 @@ vect_transform_loop_stmt (loop_vec_info loop_vinfo, stmt_vec_info stmt_info,\n \tdump_printf_loc (MSG_NOTE, vect_location, \"multiple-types.\\n\");\n     }\n \n-  /* SLP.  Schedule all the SLP instances when the first SLP stmt is\n-     reached.  */\n-  if (slp_vect_type slptype = STMT_SLP_TYPE (stmt_info))\n-    {\n-\n-      if (!*slp_scheduled)\n-\t{\n-\t  *slp_scheduled = true;\n-\n-\t  DUMP_VECT_SCOPE (\"scheduling SLP instances\");\n-\n-\t  vect_schedule_slp (loop_vinfo);\n-\t}\n-\n-      /* Hybrid SLP stmts must be vectorized in addition to SLP.  */\n-      if (slptype == pure_slp)\n-\treturn;\n-    }\n+  /* Pure SLP statements have already been vectorized.  We still need\n+     to apply loop vectorization to hybrid SLP statements.  */\n+  if (PURE_SLP_STMT (stmt_info))\n+    return;\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"transform statement.\\n\");\n@@ -8284,7 +8268,6 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   tree niters_vector_mult_vf = NULL_TREE;\n   poly_uint64 vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   unsigned int lowest_vf = constant_lower_bound (vf);\n-  bool slp_scheduled = false;\n   gimple *stmt;\n   bool check_profitability = false;\n   unsigned int th;\n@@ -8390,6 +8373,14 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n     /* This will deal with any possible peeling.  */\n     vect_prepare_for_masked_peels (loop_vinfo);\n \n+  /* Schedule the SLP instances first, then handle loop vectorization\n+     below.  */\n+  if (!loop_vinfo->slp_instances.is_empty ())\n+    {\n+      DUMP_VECT_SCOPE (\"scheduling SLP instances\");\n+      vect_schedule_slp (loop_vinfo);\n+    }\n+\n   /* FORNOW: the vectorizer supports only loops which body consist\n      of one basic block (header + empty latch). When the vectorizer will\n      support more involved loop forms, the order by which the BBs are\n@@ -8468,16 +8459,15 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t\t\t  stmt_vec_info pat_stmt_info\n \t\t\t    = loop_vinfo->lookup_stmt (gsi_stmt (subsi));\n \t\t\t  vect_transform_loop_stmt (loop_vinfo, pat_stmt_info,\n-\t\t\t\t\t\t    &si, &seen_store,\n-\t\t\t\t\t\t    &slp_scheduled);\n+\t\t\t\t\t\t    &si, &seen_store);\n \t\t\t}\n \t\t      stmt_vec_info pat_stmt_info\n \t\t\t= STMT_VINFO_RELATED_STMT (stmt_info);\n \t\t      vect_transform_loop_stmt (loop_vinfo, pat_stmt_info, &si,\n-\t\t\t\t\t\t&seen_store, &slp_scheduled);\n+\t\t\t\t\t\t&seen_store);\n \t\t    }\n \t\t  vect_transform_loop_stmt (loop_vinfo, stmt_info, &si,\n-\t\t\t\t\t    &seen_store, &slp_scheduled);\n+\t\t\t\t\t    &seen_store);\n \t\t}\n \t      gsi_next (&si);\n \t      if (seen_store)"}]}