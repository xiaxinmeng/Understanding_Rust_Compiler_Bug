{"sha": "11056ab7687f7156846e93557c9171b77713bd7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwNTZhYjc2ODdmNzE1Njg0NmU5MzU1N2M5MTcxYjc3NzEzYmQ3ZQ==", "commit": {"author": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2021-01-11T18:05:57Z"}, "committer": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2021-02-01T18:13:42Z"}, "message": "tree-optimization/98499 - fix modref analysis on RVO statements\n\nBefore the change RVO gimple statements were treated as local\nstores by modres analysis. But in practice RVO escapes target.\n\n2021-02-01  Sergei Trofimovich  <siarheit@google.com>\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/98499\n\t* ipa-modref.c (analyze_ssa_name_flags): treat RVO\n\tconservatively and assume all possible side-effects.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/98499\n\t* g++.dg/pr98499.C: new test.", "tree": {"sha": "5f6dd9686df74d079fbd0f61f6fb795a4e9d7122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f6dd9686df74d079fbd0f61f6fb795a4e9d7122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11056ab7687f7156846e93557c9171b77713bd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11056ab7687f7156846e93557c9171b77713bd7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11056ab7687f7156846e93557c9171b77713bd7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11056ab7687f7156846e93557c9171b77713bd7e/comments", "author": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfdf51d8595537937f990947a7a36d3a63dca5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfdf51d8595537937f990947a7a36d3a63dca5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfdf51d8595537937f990947a7a36d3a63dca5f"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "7aaf53be8f4613ea4e1fb1058c37e4c34d3e0f17", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11056ab7687f7156846e93557c9171b77713bd7e/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11056ab7687f7156846e93557c9171b77713bd7e/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=11056ab7687f7156846e93557c9171b77713bd7e", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n \n    The following information is computed\n      1) load/store access tree described in ipa-modref-tree.h\n-\tThis is used by tree-ssa-alias to disambiguate load/dtores\n+\tThis is used by tree-ssa-alias to disambiguate load/stores\n      2) EAF flags used by points-to analysis (in tree-ssa-structlias).\n \tand defined in tree-core.h.\n    and stored to optimization_summaries.\n@@ -1604,7 +1604,7 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n \tcontinue;\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"%*s  Analyzing stmt:\", depth * 4, \"\");\n+\t  fprintf (dump_file, \"%*s  Analyzing stmt: \", depth * 4, \"\");\n \t  print_gimple_stmt (dump_file, use_stmt, 0);\n \t}\n \n@@ -1621,9 +1621,19 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n       else if (gcall *call = dyn_cast <gcall *> (use_stmt))\n \t{\n \t  tree callee = gimple_call_fndecl (call);\n-\n+\t  /* Return slot optiomization would require bit of propagation;\n+\t     give up for now.  */\n+\t  if (gimple_call_return_slot_opt_p (call)\n+\t      && gimple_call_lhs (call) != NULL_TREE\n+\t      && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (call))))\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"%*s  Unhandled return slot opt\\n\",\n+\t\t\t depth * 4, \"\");\n+\t      lattice[index].merge (0);\n+\t    }\n \t  /* Recursion would require bit of propagation; give up for now.  */\n-\t  if (callee && !ipa && recursive_call_p (current_function_decl,\n+\t  else if (callee && !ipa && recursive_call_p (current_function_decl,\n \t\t\t\t\t\t  callee))\n \t    lattice[index].merge (0);\n \t  else"}, {"sha": "ace088aeed9e942e761f30396e5cc5f997ccf4ba", "filename": "gcc/testsuite/g++.dg/pr98499.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11056ab7687f7156846e93557c9171b77713bd7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98499.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11056ab7687f7156846e93557c9171b77713bd7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98499.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98499.C?ref=11056ab7687f7156846e93557c9171b77713bd7e", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/98499.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct string {\n+  // pointer to local store\n+  char * _M_buf;\n+  // local store\n+  char _M_local_buf[16];\n+\n+  __attribute__((noinline)) string() : _M_buf(_M_local_buf) {}\n+\n+  ~string() {\n+    if (_M_buf != _M_local_buf)\n+      __builtin_trap();\n+  }\n+\n+  string(const string &__str); // no copies\n+};\n+\n+__attribute__((noinline)) static string dir_name() { return string(); }\n+class Importer {\n+  string base_path;\n+\n+public:\n+  __attribute__((noinline)) Importer() : base_path (dir_name()) {}\n+};\n+\n+int main() {\n+  Importer imp;\n+}"}]}