{"sha": "9d2dc7da92fe49bbe74ce104538cb307d57d5241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyZGM3ZGE5MmZlNDliYmU3NGNlMTA0NTM4Y2IzMDdkNTdkNTI0MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-19T01:17:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-19T01:17:20Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Treat truth values as non-negative.\n\n\t* fold-const.c (tree_expr_nonnegative_p): Treat truth values as\n\tnon-negative.\n\ntestsuite:\n\t* gcc.dg/compare3.c: New test.\n\nFrom-SVN: r38374", "tree": {"sha": "23b18faca8ab99ff8e2cc6d506b05afe56fdd6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b18faca8ab99ff8e2cc6d506b05afe56fdd6e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2dc7da92fe49bbe74ce104538cb307d57d5241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2dc7da92fe49bbe74ce104538cb307d57d5241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2dc7da92fe49bbe74ce104538cb307d57d5241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2dc7da92fe49bbe74ce104538cb307d57d5241/comments", "author": null, "committer": null, "parents": [{"sha": "d0b6af711c43f070719fa06f4bc154405377b295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b6af711c43f070719fa06f4bc154405377b295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b6af711c43f070719fa06f4bc154405377b295"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "23c0eb5f38e2c82f2021b24788361de033f8c6d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d2dc7da92fe49bbe74ce104538cb307d57d5241", "patch": "@@ -1,3 +1,8 @@\n+2000-12-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Treat truth values as\n+\tnon-negative.\n+\n Tue Dec 19 00:37:08 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* reload.c (push_reload): When using a dying register for the reload"}, {"sha": "a0a76b2d4916f8413dc9710915a0cf390080c1e7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9d2dc7da92fe49bbe74ce104538cb307d57d5241", "patch": "@@ -7299,8 +7299,12 @@ tree_expr_nonnegative_p (t)\n       return rtl_expr_nonnegative_p (RTL_EXPR_RTL (t));\n       \n     default:\n-      /* We don't know sign of `t', so be safe and return false.  */\n-      return 0;\n+      if (truth_value_p (TREE_CODE (t)))\n+\t/* Truth values evaluate to 0 or 1, which is nonnegative.  */\n+\treturn 1;\n+      else\n+\t/* We don't know sign of `t', so be conservative and return false.  */\n+\treturn 0;\n     }\n }\n "}, {"sha": "06c54bc3d1f9f3369f02d9de29da2f3e9209b512", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d2dc7da92fe49bbe74ce104538cb307d57d5241", "patch": "@@ -1,3 +1,7 @@\n+2000-12-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/compare3.c: New test.\n+\n 2000-12-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format-warnll-1.c: New test."}, {"sha": "eda3faf2754a7b1a4041e6edf0ff5c05136f4de6", "filename": "gcc/testsuite/gcc.dg/compare3.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2dc7da92fe49bbe74ce104538cb307d57d5241/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c?ref=9d2dc7da92fe49bbe74ce104538cb307d57d5241", "patch": "@@ -0,0 +1,59 @@\n+/* Test for a bogus warning on comparison between signed and unsigned.\n+   This was inspired by code in gcc. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+\n+int tf = 1;\n+\n+void f(int x, unsigned int y)\n+{\n+  /* Test comparing conditional expressions containing truth values.\n+     This can occur explicitly, or e.g. when (foo?2:(bar?1:0)) is\n+     optimized into (foo?2:(bar!=0)).  */\n+  x > (tf?64:(tf!=x)); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n+  y > (tf?64:(tf!=x)); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n+  x > (tf?(tf!=x):64); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n+  y > (tf?(tf!=x):64); /* { dg-bogus \"signed and unsigned\" \"case 4\" } */\n+\n+  x > (tf?64:(tf==x)); /* { dg-bogus \"signed and unsigned\" \"case 5\" } */\n+  y > (tf?64:(tf==x)); /* { dg-bogus \"signed and unsigned\" \"case 6\" } */\n+  x > (tf?(tf==x):64); /* { dg-bogus \"signed and unsigned\" \"case 7\" } */\n+  y > (tf?(tf==x):64); /* { dg-bogus \"signed and unsigned\" \"case 8\" } */\n+\n+  x > (tf?64:(tf>x)); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n+  y > (tf?64:(tf>x)); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n+  x > (tf?(tf>x):64); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */\n+  y > (tf?(tf>x):64); /* { dg-bogus \"signed and unsigned\" \"case 12\" } */\n+\n+  x < (tf?64:(tf<x)); /* { dg-bogus \"signed and unsigned\" \"case 13\" } */\n+  y < (tf?64:(tf<x)); /* { dg-bogus \"signed and unsigned\" \"case 14\" } */\n+  x < (tf?(tf<x):64); /* { dg-bogus \"signed and unsigned\" \"case 15\" } */\n+  y < (tf?(tf<x):64); /* { dg-bogus \"signed and unsigned\" \"case 16\" } */\n+\n+  x > (tf?64:(tf>=x)); /* { dg-bogus \"signed and unsigned\" \"case 17\" } */\n+  y > (tf?64:(tf>=x)); /* { dg-bogus \"signed and unsigned\" \"case 18\" } */\n+  x > (tf?(tf>=x):64); /* { dg-bogus \"signed and unsigned\" \"case 19\" } */\n+  y > (tf?(tf>=x):64); /* { dg-bogus \"signed and unsigned\" \"case 20\" } */\n+\n+  x > (tf?64:(tf<=x)); /* { dg-bogus \"signed and unsigned\" \"case 21\" } */\n+  y > (tf?64:(tf<=x)); /* { dg-bogus \"signed and unsigned\" \"case 22\" } */\n+  x > (tf?(tf<=x):64); /* { dg-bogus \"signed and unsigned\" \"case 23\" } */\n+  y > (tf?(tf<=x):64); /* { dg-bogus \"signed and unsigned\" \"case 24\" } */\n+\n+  x > (tf?64:(tf&&x)); /* { dg-bogus \"signed and unsigned\" \"case 25\" } */\n+  y > (tf?64:(tf&&x)); /* { dg-bogus \"signed and unsigned\" \"case 26\" } */\n+  x > (tf?(tf&&x):64); /* { dg-bogus \"signed and unsigned\" \"case 27\" } */\n+  y > (tf?(tf&&x):64); /* { dg-bogus \"signed and unsigned\" \"case 28\" } */\n+\n+  x > (tf?64:(tf||x)); /* { dg-bogus \"signed and unsigned\" \"case 29\" } */\n+  y > (tf?64:(tf||x)); /* { dg-bogus \"signed and unsigned\" \"case 30\" } */\n+  x > (tf?(tf||x):64); /* { dg-bogus \"signed and unsigned\" \"case 31\" } */\n+  y > (tf?(tf||x):64); /* { dg-bogus \"signed and unsigned\" \"case 32\" } */\n+\n+  x > (tf?64:(!tf)); /* { dg-bogus \"signed and unsigned\" \"case 33\" } */\n+  y > (tf?64:(!tf)); /* { dg-bogus \"signed and unsigned\" \"case 34\" } */\n+  x > (tf?(!tf):64); /* { dg-bogus \"signed and unsigned\" \"case 35\" } */\n+  y > (tf?(!tf):64); /* { dg-bogus \"signed and unsigned\" \"case 36\" } */\n+\n+}"}]}