{"sha": "9bd622427288a8aac7e095842021b175087356d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkNjIyNDI3Mjg4YThhYWM3ZTA5NTg0MjAyMWIxNzUwODczNTZkNg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-06-30T15:15:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-06-30T15:15:26Z"}, "message": "[AArch64][1/2] Add support INS (element) instruction to copy lanes between vectors\n\n2016-06-30  James Greenhalgh  <james.greenhalgh@arm.com>\n            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (*aarch64_simd_vec_copy_lane<mode>):\n\tNew define_insn.\n\t(*aarch64_simd_vec_copy_lane_<vswap_width_name><mode>): Likewise.\n\n\t* gcc.target/aarch64/vget_set_lane_1.c: New test.\n\n\nCo-Authored-By: Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n\nFrom-SVN: r237882", "tree": {"sha": "287cfe7959c29df698baf1e88eed9ebce402cb60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/287cfe7959c29df698baf1e88eed9ebce402cb60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd622427288a8aac7e095842021b175087356d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd622427288a8aac7e095842021b175087356d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd622427288a8aac7e095842021b175087356d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd622427288a8aac7e095842021b175087356d6/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "603107fbb0da3acb1ce296dfef1a592a6451c0b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603107fbb0da3acb1ce296dfef1a592a6451c0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603107fbb0da3acb1ce296dfef1a592a6451c0b4"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "1d807ce5625b7a5f57d40d74752f101f3f4938d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd622427288a8aac7e095842021b175087356d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd622427288a8aac7e095842021b175087356d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bd622427288a8aac7e095842021b175087356d6", "patch": "@@ -1,3 +1,10 @@\n+2016-06-30  James Greenhalgh  <james.greenhalgh@arm.com>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_simd_vec_copy_lane<mode>):\n+\tNew define_insn.\n+\t(*aarch64_simd_vec_copy_lane_<vswap_width_name><mode>): Likewise.\n+\n 2016-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR driver/71651"}, {"sha": "a19d1711b5bcb516e4aca6a22d1b79df4f32923f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd622427288a8aac7e095842021b175087356d6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd622427288a8aac7e095842021b175087356d6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9bd622427288a8aac7e095842021b175087356d6", "patch": "@@ -546,6 +546,49 @@\n   [(set_attr \"type\" \"neon_from_gp<q>, neon_ins<q>, neon_load1_1reg<q>\")]\n )\n \n+(define_insn \"*aarch64_simd_vec_copy_lane<mode>\"\n+  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n+\t(vec_merge:VALL\n+\t    (vec_duplicate:VALL\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:VALL 3 \"register_operand\" \"w\")\n+\t\t(parallel\n+\t\t  [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+\t    (match_operand:VALL 1 \"register_operand\" \"0\")\n+\t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    int elt = ENDIAN_LANE_N (<MODE>mode, exact_log2 (INTVAL (operands[2])));\n+    operands[2] = GEN_INT (HOST_WIDE_INT_1 << elt);\n+    operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n+\n+    return \"ins\\t%0.<Vetype>[%p2], %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_ins<q>\")]\n+)\n+\n+(define_insn \"*aarch64_simd_vec_copy_lane_<vswap_width_name><mode>\"\n+  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n+\t(vec_merge:VALL\n+\t    (vec_duplicate:VALL\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:<VSWAP_WIDTH> 3 \"register_operand\" \"w\")\n+\t\t(parallel\n+\t\t  [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+\t    (match_operand:VALL 1 \"register_operand\" \"0\")\n+\t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    int elt = ENDIAN_LANE_N (<MODE>mode, exact_log2 (INTVAL (operands[2])));\n+    operands[2] = GEN_INT (HOST_WIDE_INT_1 << elt);\n+    operands[4] = GEN_INT (ENDIAN_LANE_N (<VSWAP_WIDTH>mode,\n+\t\t\t   INTVAL (operands[4])));\n+\n+    return \"ins\\t%0.<Vetype>[%p2], %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_ins<q>\")]\n+)\n+\n (define_insn \"aarch64_simd_lshr<mode>\"\n  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n        (lshiftrt:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")"}, {"sha": "1bd8ef6688cf8c3ebcc05a161d2694867c556e92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd622427288a8aac7e095842021b175087356d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd622427288a8aac7e095842021b175087356d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bd622427288a8aac7e095842021b175087356d6", "patch": "@@ -1,3 +1,8 @@\n+2016-06-30  James Greenhalgh  <james.greenhalgh@arm.com>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/vget_set_lane_1.c: New test.\n+\n 2016-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR driver/71651"}, {"sha": "07a77de319206c5c6dad1c0d2d9bcc998583f9c1", "filename": "gcc/testsuite/gcc.target/aarch64/vget_set_lane_1.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd622427288a8aac7e095842021b175087356d6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_set_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd622427288a8aac7e095842021b175087356d6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_set_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_set_lane_1.c?ref=9bd622427288a8aac7e095842021b175087356d6", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define BUILD_TEST(TYPE1, TYPE2, Q1, Q2, SUFFIX, INDEX1, INDEX2)\t\\\n+TYPE1 __attribute__((noinline,noclone))\t\t\t\t\\\n+test_copy##Q1##_lane##Q2##_##SUFFIX (TYPE1 a, TYPE2 b)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vset##Q1##_lane_##SUFFIX (vget##Q2##_lane_##SUFFIX (b, INDEX2),\\\n+\t\t\t\t    a, INDEX1);\t\t\t\t\\\n+}\n+\n+BUILD_TEST (poly8x8_t, poly8x8_t, , , p8, 7, 6)\n+BUILD_TEST (int8x8_t,  int8x8_t,  , , s8, 7, 6)\n+BUILD_TEST (uint8x8_t, uint8x8_t, , , u8, 7, 6)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.b\\\\\\[7\\\\\\], v1.b\\\\\\[6\\\\\\]\" 3 } } */\n+BUILD_TEST (poly16x4_t, poly16x4_t, , , p16, 3, 2)\n+BUILD_TEST (int16x4_t,  int16x4_t,  , , s16, 3, 2)\n+BUILD_TEST (uint16x4_t, uint16x4_t, , , u16, 3, 2)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.h\\\\\\[3\\\\\\], v1.h\\\\\\[2\\\\\\]\" 3 } } */\n+BUILD_TEST (float32x2_t, float32x2_t, , , f32, 1, 0)\n+BUILD_TEST (int32x2_t,   int32x2_t,   , , s32, 1, 0)\n+BUILD_TEST (uint32x2_t,  uint32x2_t,  , , u32, 1, 0)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.s\\\\\\[1\\\\\\], v1.s\\\\\\[0\\\\\\]\" 3 } } */\n+\n+BUILD_TEST (poly8x8_t, poly8x16_t, , q, p8, 7, 15)\n+BUILD_TEST (int8x8_t,  int8x16_t,  , q, s8, 7, 15)\n+BUILD_TEST (uint8x8_t, uint8x16_t, , q, u8, 7, 15)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.b\\\\\\[7\\\\\\], v1.b\\\\\\[15\\\\\\]\" 3 } } */\n+BUILD_TEST (poly16x4_t, poly16x8_t, , q, p16, 3, 7)\n+BUILD_TEST (int16x4_t,  int16x8_t,  , q, s16, 3, 7)\n+BUILD_TEST (uint16x4_t, uint16x8_t, , q, u16, 3, 7)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.h\\\\\\[3\\\\\\], v1.h\\\\\\[7\\\\\\]\" 3 } } */\n+BUILD_TEST (float32x2_t, float32x4_t, , q, f32, 1, 3)\n+BUILD_TEST (int32x2_t,   int32x4_t,   , q, s32, 1, 3)\n+BUILD_TEST (uint32x2_t,  uint32x4_t,  , q, u32, 1, 3)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.s\\\\\\[1\\\\\\], v1.s\\\\\\[3\\\\\\]\" 3 } } */\n+\n+BUILD_TEST (poly8x16_t, poly8x8_t, q, , p8, 15, 7)\n+BUILD_TEST (int8x16_t,  int8x8_t,  q, , s8, 15, 7)\n+BUILD_TEST (uint8x16_t, uint8x8_t, q, , u8, 15, 7)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.b\\\\\\[15\\\\\\], v1.b\\\\\\[7\\\\\\]\" 3 } } */\n+BUILD_TEST (poly16x8_t, poly16x4_t, q, , p16, 7, 3)\n+BUILD_TEST (int16x8_t,  int16x4_t,  q, , s16, 7, 3)\n+BUILD_TEST (uint16x8_t, uint16x4_t, q, , u16, 7, 3)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.h\\\\\\[7\\\\\\], v1.h\\\\\\[3\\\\\\]\" 3 } } */\n+BUILD_TEST (float32x4_t, float32x2_t, q, , f32, 3, 1)\n+BUILD_TEST (int32x4_t,   int32x2_t,   q, , s32, 3, 1)\n+BUILD_TEST (uint32x4_t,  uint32x2_t,  q, , u32, 3, 1)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.s\\\\\\[3\\\\\\], v1.s\\\\\\[1\\\\\\]\" 3 } } */\n+BUILD_TEST (float64x2_t, float64x1_t, q, , f64, 1, 0)\n+BUILD_TEST (int64x2_t,   int64x1_t,   q, , s64, 1, 0)\n+BUILD_TEST (uint64x2_t,  uint64x1_t,  q, , u64, 1, 0)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.d\\\\\\[1\\\\\\], v1.d\\\\\\[0\\\\\\]\" 3 } } */\n+\n+BUILD_TEST (poly8x16_t, poly8x16_t, q, q, p8, 14, 15)\n+BUILD_TEST (int8x16_t,  int8x16_t,  q, q, s8, 14, 15)\n+BUILD_TEST (uint8x16_t, uint8x16_t, q, q, u8, 14, 15)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.b\\\\\\[14\\\\\\], v1.b\\\\\\[15\\\\\\]\" 3 } } */\n+BUILD_TEST (poly16x8_t, poly16x8_t, q, q, p16, 6, 7)\n+BUILD_TEST (int16x8_t,  int16x8_t,  q, q, s16, 6, 7)\n+BUILD_TEST (uint16x8_t, uint16x8_t, q, q, u16, 6, 7)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.h\\\\\\[6\\\\\\], v1.h\\\\\\[7\\\\\\]\" 3 } } */\n+BUILD_TEST (float32x4_t, float32x4_t, q, q, f32, 2, 3)\n+BUILD_TEST (int32x4_t,   int32x4_t,   q, q, s32, 2, 3)\n+BUILD_TEST (uint32x4_t,  uint32x4_t,  q, q, u32, 2, 3)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.s\\\\\\[2\\\\\\], v1.s\\\\\\[3\\\\\\]\" 3 } } */\n+BUILD_TEST (float64x2_t, float64x2_t, q, q, f64, 1, 1)\n+BUILD_TEST (int64x2_t,   int64x2_t,   q,  q, s64, 1, 1)\n+BUILD_TEST (uint64x2_t,  uint64x2_t,  q, q, u64, 1, 1)\n+/* { dg-final { scan-assembler-times \"ins\\\\tv0.d\\\\\\[1\\\\\\], v1.d\\\\\\[1\\\\\\]\" 3 } } */"}]}