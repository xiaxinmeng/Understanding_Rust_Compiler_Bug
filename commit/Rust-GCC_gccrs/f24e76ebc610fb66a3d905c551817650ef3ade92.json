{"sha": "f24e76ebc610fb66a3d905c551817650ef3ade92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0ZTc2ZWJjNjEwZmI2NmEzZDkwNWM1NTE4MTc2NTBlZjNhZGU5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-12-05T10:38:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-12-05T10:38:58Z"}, "message": "re PR rtl-optimization/13145 (bootstrap failure on mips-linux)\n\n\tPR bootstrap/13145\n\t* config/mips/mips.h (FIRST_PSEUDO_REGISTER): Adjust comment.\n\t* config/mips/mips.c (mips_reg_names, mips_sw_reg_names): Add $fcall.\n\t(mips_load_got): Always create a constant MEM.\n\t(mips_expand_call): Use load_callsi and load_calldi.\n\t* config/mips/mips.md (UNSPEC_LOAD_CALL, FAKE_CALL_REGNO): New consts.\n\t(load_callsi, load_calldi): New patterns.\n\nFrom-SVN: r74323", "tree": {"sha": "97e96c255d90c0fd061728c563d186b4038b08eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e96c255d90c0fd061728c563d186b4038b08eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24e76ebc610fb66a3d905c551817650ef3ade92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24e76ebc610fb66a3d905c551817650ef3ade92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24e76ebc610fb66a3d905c551817650ef3ade92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24e76ebc610fb66a3d905c551817650ef3ade92/comments", "author": null, "committer": null, "parents": [{"sha": "b00b4b8855dd3e8593b0872b3cef35ac4b555a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00b4b8855dd3e8593b0872b3cef35ac4b555a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00b4b8855dd3e8593b0872b3cef35ac4b555a4f"}], "stats": {"total": 82, "additions": 68, "deletions": 14}, "files": [{"sha": "824cb149a826f63cb275ca1e5852285e1def9911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f24e76ebc610fb66a3d905c551817650ef3ade92", "patch": "@@ -1,3 +1,13 @@\n+2003-12-05  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR bootstrap/13145\n+\t* config/mips/mips.h (FIRST_PSEUDO_REGISTER): Adjust comment.\n+\t* config/mips/mips.c (mips_reg_names, mips_sw_reg_names): Add $fcall.\n+\t(mips_load_got): Always create a constant MEM.\n+\t(mips_expand_call): Use load_callsi and load_calldi.\n+\t* config/mips/mips.md (UNSPEC_LOAD_CALL, FAKE_CALL_REGNO): New consts.\n+\t(load_callsi, load_calldi): New patterns.\n+\n 2003-12-05  Peter Gerwinski <peter@gerwinski.de>\n \n         * tree.def (PLACEHOLDER_EXPR): Clarify commentary."}, {"sha": "f73b1a9798518a3cb58597f60a1b830f025b1994", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f24e76ebc610fb66a3d905c551817650ef3ade92", "patch": "@@ -569,7 +569,7 @@ char mips_reg_names[][8] =\n  \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\n  \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"$f31\",\n  \"hi\",   \"lo\",   \"\",     \"$fcc0\",\"$fcc1\",\"$fcc2\",\"$fcc3\",\"$fcc4\",\n- \"$fcc5\",\"$fcc6\",\"$fcc7\",\"\", \"\",     \"\",     \"\",     \"\",\n+ \"$fcc5\",\"$fcc6\",\"$fcc7\",\"\", \"\",     \"\",     \"\",     \"$fakec\",\n  \"$c0r0\", \"$c0r1\", \"$c0r2\", \"$c0r3\", \"$c0r4\", \"$c0r5\", \"$c0r6\", \"$c0r7\",\n  \"$c0r8\", \"$c0r9\", \"$c0r10\",\"$c0r11\",\"$c0r12\",\"$c0r13\",\"$c0r14\",\"$c0r15\",\n  \"$c0r16\",\"$c0r17\",\"$c0r18\",\"$c0r19\",\"$c0r20\",\"$c0r21\",\"$c0r22\",\"$c0r23\",\n@@ -598,7 +598,7 @@ char mips_sw_reg_names[][8] =\n   \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\n   \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"$f31\",\n   \"hi\",   \"lo\",   \"\",     \"$fcc0\",\"$fcc1\",\"$fcc2\",\"$fcc3\",\"$fcc4\",\n-  \"$fcc5\",\"$fcc6\",\"$fcc7\",\"$rap\", \"\",     \"\",     \"\",     \"\",\n+  \"$fcc5\",\"$fcc6\",\"$fcc7\",\"$rap\", \"\",     \"\",     \"\",     \"$fakec\",\n   \"$c0r0\", \"$c0r1\", \"$c0r2\", \"$c0r3\", \"$c0r4\", \"$c0r5\", \"$c0r6\", \"$c0r7\",\n   \"$c0r8\", \"$c0r9\", \"$c0r10\",\"$c0r11\",\"$c0r12\",\"$c0r13\",\"$c0r14\",\"$c0r15\",\n   \"$c0r16\",\"$c0r17\",\"$c0r18\",\"$c0r19\",\"$c0r20\",\"$c0r21\",\"$c0r22\",\"$c0r23\",\n@@ -1658,14 +1658,10 @@ mips_load_got (rtx base, rtx addr, enum mips_symbol_type symbol_type)\n   mem = gen_rtx_MEM (ptr_mode, gen_rtx_LO_SUM (Pmode, base, offset));\n   set_mem_alias_set (mem, mips_got_alias_set);\n \n-  /* GOT references can't trap.  */\n+  /* GOT entries are constant and references to them can't trap.  */\n+  RTX_UNCHANGING_P (mem) = 1;\n   MEM_NOTRAP_P (mem) = 1;\n \n-  /* If we allow a function's address to be lazily bound, its entry\n-     may change after the first call.  Other entries are constant.  */\n-  if (symbol_type != SYMBOL_GOTOFF_CALL)\n-    RTX_UNCHANGING_P (mem) = 1;\n-\n   return mem;\n }\n \n@@ -3193,11 +3189,19 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, int sibcall_p)\n     {\n       if (TARGET_EXPLICIT_RELOCS && global_got_operand (addr, VOIDmode))\n \t{\n-\t  rtx high = mips_unspec_offset_high (pic_offset_table_rtx,\n-\t\t\t\t\t      addr, SYMBOL_GOTOFF_CALL);\n-\t  addr = mips_load_got (high, addr, SYMBOL_GOTOFF_CALL);\n+\t  rtx high, lo_sum_symbol;\n+\n+\t  high = mips_unspec_offset_high (pic_offset_table_rtx,\n+\t\t\t\t\t  addr, SYMBOL_GOTOFF_CALL);\n+\t  lo_sum_symbol = mips_unspec_address (addr, SYMBOL_GOTOFF_CALL);\n+\t  addr = gen_reg_rtx (Pmode);\n+\t  if (Pmode == SImode)\n+\t    emit_insn (gen_load_callsi (addr, high, lo_sum_symbol));\n+\t  else\n+\t    emit_insn (gen_load_calldi (addr, high, lo_sum_symbol));\n \t}\n-      addr = force_reg (Pmode, addr);\n+      else\n+\taddr = force_reg (Pmode, addr);\n     }\n \n   if (TARGET_MIPS16"}, {"sha": "e144d64bc413bcf5b72048c6953164cbe6346072", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=f24e76ebc610fb66a3d905c551817650ef3ade92", "patch": "@@ -1468,7 +1468,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n    - 8 condition code registers\n    - 2 accumulator registers (hi and lo)\n    - 32 registers each for coprocessors 0, 2 and 3\n-   - 6 dummy entries that were used at various times in the past.  */\n+   - FAKE_CALL_REGNO (see the comment above load_callsi for details)\n+   - 5 dummy entries that were used at various times in the past.  */\n \n #define FIRST_PSEUDO_REGISTER 176\n "}, {"sha": "5b758c876935915788defac4bcf9b02bd00756c7", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24e76ebc610fb66a3d905c551817650ef3ade92/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f24e76ebc610fb66a3d905c551817650ef3ade92", "patch": "@@ -54,8 +54,11 @@\n    (UNSPEC_SDL\t\t\t24)\n    (UNSPEC_SDR\t\t\t25)\n    (UNSPEC_LOADGP\t\t26)\n+   (UNSPEC_LOAD_CALL\t\t27)\n \n-   (UNSPEC_ADDRESS_FIRST\t100)])\n+   (UNSPEC_ADDRESS_FIRST\t100)\n+\n+   (FAKE_CALL_REGNO\t\t79)])\n \f\n ;; ....................\n ;;\n@@ -8331,6 +8334,42 @@ ld\\t%2,%1-%S1(%2)\\;daddu\\t%2,%2,$31\\;%*j\\t%2%/\"\n ;;\n ;;  ....................\n \n+;; Instructions to load a call address from the GOT.  The address might\n+;; point to a function or to a lazy binding stub.  In the latter case,\n+;; the stub will use the dynamic linker to resolve the function, which\n+;; in turn will change the GOT entry to point to the function's real\n+;; address.\n+;;\n+;; This means that every call, even pure and constant ones, can\n+;; potentially modify the GOT entry.  And once a stub has been called,\n+;; we must not call it again.\n+;;\n+;; We represent this restriction using an imaginary fixed register that\n+;; acts like a GOT version number.  By making the register call-clobbered,\n+;; we tell the target-independent code that the address could be changed\n+;; by any call insn.\n+(define_insn \"load_callsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=c\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")\n+\t\t    (reg:SI FAKE_CALL_REGNO)]\n+\t\t   UNSPEC_LOAD_CALL))]\n+  \"TARGET_ABICALLS\"\n+  \"lw\\t%0,%R2(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"load_calldi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")\n+\t\t    (reg:DI FAKE_CALL_REGNO)]\n+\t\t   UNSPEC_LOAD_CALL))]\n+  \"TARGET_ABICALLS\"\n+  \"ld\\t%0,%R2(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; Sibling calls.  All these patterns use jump instructions.\n \n ;; If TARGET_SIBCALLS, call_insn_operand will only accept constant"}]}