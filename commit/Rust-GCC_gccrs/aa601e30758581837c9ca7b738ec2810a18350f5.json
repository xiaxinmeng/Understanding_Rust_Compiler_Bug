{"sha": "aa601e30758581837c9ca7b738ec2810a18350f5", "node_id": "C_kwDOANBUbNoAKGFhNjAxZTMwNzU4NTgxODM3YzljYTdiNzM4ZWMyODEwYTE4MzUwZjU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-10T23:10:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-10T23:10:21Z"}, "message": "analyzer: don't warn for deref-before-check for checks in macros [PR108745]\n\nIntegration testing shows this patch fixes all 9 known false positives\nfrom -Wanalyzer-deref-before-check within ImageMagick-7.1.0-57, and\neliminates 34 further as-yet unassessed such diagnostics, without\neliminating the 1 known true positive.\n\nThis improves the rate of true positives for the warning from\n1.56% to 4.76% of the total:\n\n-Wanalyzer-deref-before-check: 1.56% -> 4.76% (GOOD: 1 BAD: 63->20)\n    TRUE:  1\n   FALSE: 15 ->  6 (-9)\n             ImageMagick-7.1.0-57:  9 ->  0 (-9)\n    TODO: 48 -> 14 (-34)\n             ImageMagick-7.1.0-57: 21 ->  1 (-20)\n                       qemu-7.2.0: 25 -> 11 (-14)\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108745\n\t* sm-malloc.cc (deref_before_check::emit): Reject the warning if\n\tthe check occurs within a macro defintion.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108745\n\t* gcc.dg/analyzer/deref-before-check-macro-pr108745.c: New test.\n\t* gcc.dg/analyzer/deref-before-check-macro.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5bc184795ea6a8607334f310a0f4bcb8ce053c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bc184795ea6a8607334f310a0f4bcb8ce053c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa601e30758581837c9ca7b738ec2810a18350f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa601e30758581837c9ca7b738ec2810a18350f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa601e30758581837c9ca7b738ec2810a18350f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa601e30758581837c9ca7b738ec2810a18350f5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "305037ee3ed49641cc1db2a0e92e3eeb9a7ec2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305037ee3ed49641cc1db2a0e92e3eeb9a7ec2b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305037ee3ed49641cc1db2a0e92e3eeb9a7ec2b5"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "c24fe7374812d11e3e691b752c7a6da5079d8c00", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=aa601e30758581837c9ca7b738ec2810a18350f5", "patch": "@@ -1519,6 +1519,43 @@ class deref_before_check : public malloc_diagnostic\n \t!= &m_check_enode->get_point ().get_call_string ())\n       return false;\n \n+    /* Reject the warning if the check occurs within a macro defintion.\n+       This avoids false positives for such code as:\n+\n+\t#define throw_error \\\n+\t   do {             \\\n+\t     if (p)         \\\n+\t       cleanup (p); \\\n+\t     return;        \\\n+\t   } while (0)\n+\n+\tif (p->idx >= n)\n+\t  throw_error ();\n+\n+       where the usage of \"throw_error\" implicitly adds a check\n+       on 'p'.\n+\n+       We do warn when the check is in a macro expansion if we can get\n+       at the location of the condition and it is't part of the\n+       definition, so that we warn for checks such as:\n+\t   if (words[0][0] == '@')\n+\t     return;\n+\t   g_assert(words[0] != NULL); <--- here\n+       Unfortunately we don't have locations for individual gimple\n+       arguments, so in:\n+\t   g_assert (ptr);\n+       we merely have a gimple_cond\n+\t   if (p_2(D) == 0B)\n+       with no way of getting at the location of the condition separately\n+       from that of the gimple_cond (where the \"if\" is within the macro\n+       definition).  We reject the warning for such cases.\n+\n+       We do warn when the *deref* occurs in a macro, since this can be\n+       a source of real bugs; see e.g. PR 77425.  */\n+    location_t check_loc = m_check_enode->get_point ().get_location ();\n+    if (linemap_location_from_macro_definition_p (line_table, check_loc))\n+      return false;\n+\n     /* Reject the warning if the deref's BB doesn't dominate that\n        of the check, so that we don't warn e.g. for shared cleanup\n        code that checks a pointer for NULL, when that code is sometimes"}, {"sha": "92f5a02645de7741ed797e84feea5b6bbcb4f499", "filename": "gcc/testsuite/gcc.dg/analyzer/deref-before-check-macro-pr108745.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro-pr108745.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro-pr108745.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro-pr108745.c?ref=aa601e30758581837c9ca7b738ec2810a18350f5", "patch": "@@ -0,0 +1,54 @@\n+/* Reduced from ImageMagick-7.1.0-57.  */\n+\n+#define NULL ((void *)0)\n+\n+typedef __builtin_va_list va_list;\n+typedef __SIZE_TYPE__ size_t;\n+\n+typedef struct _ExceptionInfo ExceptionInfo;\n+\n+void\n+ThrowMagickException(ExceptionInfo*,\n+\t\t     const char*,\n+\t\t     const char*,\n+\t\t     ...) __attribute__((__format__(__printf__, 3, 4)));\n+\n+typedef struct _Image\n+{\n+  /* [...snip...] */\n+  size_t columns, rows, depth, colors;\n+  /* [...snip...] */\n+} Image;\n+\n+typedef struct _ImageInfo\n+{\n+  /* [...snip...] */\n+  char filename[4096];\n+  /* [...snip...] */\n+} ImageInfo;\n+\n+extern Image *AcquireImage(const ImageInfo*, ExceptionInfo*);\n+extern void CloseBlob(Image*);\n+extern Image *DestroyImageList(Image*);\n+\n+#define ThrowReaderException(tag) \\\n+{ \\\n+  (void) ThrowMagickException(exception, tag, \\\n+    \"`%s'\",image_info->filename); \\\n+  if ((image) != (Image *) NULL) \\\n+    { \\\n+      (void) CloseBlob(image); \\\n+      image=DestroyImageList(image); \\\n+    } \\\n+  return((Image *) NULL); \\\n+}\n+\n+Image*\n+ReadMAPImage(const ImageInfo* image_info, ExceptionInfo* exception)\n+{\n+  Image* image;\n+  image = AcquireImage(image_info, exception);\n+  if ((image->columns == 0) || (image->rows == 0))\n+    ThrowReaderException(\"MustSpecifyImageSize\");\n+  return image;\n+}"}, {"sha": "5146129772f96d359bf59ec03a55d6c304a1395e", "filename": "gcc/testsuite/gcc.dg/analyzer/deref-before-check-macro.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa601e30758581837c9ca7b738ec2810a18350f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-macro.c?ref=aa601e30758581837c9ca7b738ec2810a18350f5", "patch": "@@ -0,0 +1,25 @@\n+#define NULL ((void*)0)\n+\n+#define MY_ASSERT(COND)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (!(COND)) { __builtin_abort(); }\t\t\\\n+  } while (0)\n+\n+int test_1 (int *p)\n+{\n+  int result = *p;\n+  MY_ASSERT (p); /* { dg-warning \"check of 'p' for NULL after already dereferencing it\" \"\" { xfail *-*-* } } */\n+  /* Due to lack of locations for gimple arguments we can't get\n+     at the location of the condition separately from the\n+     gimple_cond stmt, and thus can't distinguish if it's in the\n+     macro definition or in the supplied params; we defer to\n+     rejecting the diagnostic.  */\n+  return result;\n+}\n+\n+int test_2 (int *p)\n+{\n+  int result = *p;\n+  MY_ASSERT (p != NULL); /* { dg-warning \"check of 'p' for NULL after already dereferencing it\" \"\" { xfail *-*-* } } */\n+  return result;\n+}"}]}