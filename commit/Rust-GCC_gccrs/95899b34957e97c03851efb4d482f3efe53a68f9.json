{"sha": "95899b34957e97c03851efb4d482f3efe53a68f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4OTliMzQ5NTdlOTdjMDM4NTFlZmI0ZDQ4MmYzZWZlNTNhNjhmOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-26T17:51:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-26T17:51:21Z"}, "message": "calls.c (combine_pending_stack_adjustment_and_call): Make preferred_unit_stack_boundary argument unsigned.\n\n        * calls.c (combine_pending_stack_adjustment_and_call): Make\n        preferred_unit_stack_boundary argument unsigned.  Make\n        unadjusted_alignment unsigned.\n        (expand_call): Make preferred_stack_boundary and\n        preferred_unit_stack_boundary variables unsigned.\n        * function.c (assign_stack_local_1): Make alignment unsigned.\n        * function.h (struct function): Make stack_alignment_needed,\n        preferred_stack_boundary unsigned.\n        * config/i386/i386.c (ix86_preferred_stack_boundary): Make unsigned.\n        (ix86_compute_frame_layout): Make stack_alignment_needed,\n        preferred_alignment variables unsigned.\n        * config/i386/i386.h (ix86_preferred_stack_boundary): Make unsigned.\n\nFrom-SVN: r85196", "tree": {"sha": "b2e42d89a129ea0ff3aed66930e42e06d38d76b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e42d89a129ea0ff3aed66930e42e06d38d76b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95899b34957e97c03851efb4d482f3efe53a68f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95899b34957e97c03851efb4d482f3efe53a68f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95899b34957e97c03851efb4d482f3efe53a68f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95899b34957e97c03851efb4d482f3efe53a68f9/comments", "author": null, "committer": null, "parents": [{"sha": "86df8c86f3388f75c029e307f12a138ab89daa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86df8c86f3388f75c029e307f12a138ab89daa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86df8c86f3388f75c029e307f12a138ab89daa77"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "0052cbb7322bf02749e2c4571f6739d6f3bc7f9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -1,3 +1,18 @@\n+2004-06-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* calls.c (combine_pending_stack_adjustment_and_call): Make\n+\tpreferred_unit_stack_boundary argument unsigned.  Make\n+\tunadjusted_alignment unsigned.\n+\t(expand_call): Make preferred_stack_boundary and\n+\tpreferred_unit_stack_boundary variables unsigned.\n+\t* function.c (assign_stack_local_1): Make alignment unsigned. \n+\t* function.h (struct function): Make stack_alignment_needed, \n+\tpreferred_stack_boundary unsigned.\n+\t* config/i386/i386.c (ix86_preferred_stack_boundary): Make unsigned.\n+\t(ix86_compute_frame_layout): Make stack_alignment_needed, \n+\tpreferred_alignment variables unsigned.\n+\t* config/i386/i386.h (ix86_preferred_stack_boundary): Make unsigned.\n+\n 2004-07-26  Tom Tromey  <tromey@redhat.com>\n \n \t* tree.h: Fix typo in comment."}, {"sha": "bf90ceb1f68fd12cd8f1768cb025055562d807e6", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -143,7 +143,7 @@ static int check_sibcall_argument_overlap_1 (rtx);\n static int check_sibcall_argument_overlap (rtx, struct arg_data *, int);\n \n static int combine_pending_stack_adjustment_and_call (int, struct args_size *,\n-\t\t\t\t\t\t      int);\n+\t\t\t\t\t\t      unsigned int);\n static tree fix_unsafe_tree (tree);\n static bool shift_returned_value (tree, rtx *);\n \n@@ -1582,14 +1582,14 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n static int\n combine_pending_stack_adjustment_and_call (int unadjusted_args_size,\n \t\t\t\t\t   struct args_size *args_size,\n-\t\t\t\t\t   int preferred_unit_stack_boundary)\n+\t\t\t\t\t   unsigned int preferred_unit_stack_boundary)\n {\n   /* The number of bytes to pop so that the stack will be\n      under-aligned by UNADJUSTED_ARGS_SIZE bytes.  */\n   HOST_WIDE_INT adjustment;\n   /* The alignment of the stack after the arguments are pushed, if we\n      just pushed the arguments without adjust the stack here.  */\n-  HOST_WIDE_INT unadjusted_alignment;\n+  unsigned HOST_WIDE_INT unadjusted_alignment;\n \n   unadjusted_alignment\n     = ((stack_pointer_delta + unadjusted_args_size)\n@@ -1968,9 +1968,9 @@ expand_call (tree exp, rtx target, int ignore)\n   tree addr = TREE_OPERAND (exp, 0);\n   int i;\n   /* The alignment of the stack, in bits.  */\n-  HOST_WIDE_INT preferred_stack_boundary;\n+  unsigned HOST_WIDE_INT preferred_stack_boundary;\n   /* The alignment of the stack, in bytes.  */\n-  HOST_WIDE_INT preferred_unit_stack_boundary;\n+  unsigned HOST_WIDE_INT preferred_unit_stack_boundary;\n   /* The static chain value to use for this call.  */\n   rtx static_chain_value;\n   /* See if this is \"nothrow\" function call.  */"}, {"sha": "de3edbe22741ea9eaac547e8f46e95e86199ad68", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -819,7 +819,7 @@ const char *ix86_align_jumps_string;\n const char *ix86_preferred_stack_boundary_string;\n \n /* Preferred alignment for stack boundary in bits.  */\n-int ix86_preferred_stack_boundary;\n+unsigned int ix86_preferred_stack_boundary;\n \n /* Values 1-5: see jump.c */\n int ix86_branch_cost;\n@@ -5084,14 +5084,17 @@ static void\n ix86_compute_frame_layout (struct ix86_frame *frame)\n {\n   HOST_WIDE_INT total_size;\n-  int stack_alignment_needed = cfun->stack_alignment_needed / BITS_PER_UNIT;\n+  unsigned int stack_alignment_needed;\n   HOST_WIDE_INT offset;\n-  int preferred_alignment = cfun->preferred_stack_boundary / BITS_PER_UNIT;\n+  unsigned int preferred_alignment;\n   HOST_WIDE_INT size = get_frame_size ();\n \n   frame->nregs = ix86_nsaved_regs ();\n   total_size = size;\n \n+  stack_alignment_needed = cfun->stack_alignment_needed / BITS_PER_UNIT;\n+  preferred_alignment = cfun->preferred_stack_boundary / BITS_PER_UNIT;\n+\n   /* During reload iteration the amount of registers saved can change.\n      Recompute the value as needed.  Do not recompute when amount of registers\n      didn't change as reload does mutiple calls to the function and does not"}, {"sha": "40bf959d81f7d80e972396ab12d7b9320e14e241", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -2981,7 +2981,7 @@ extern enum asm_dialect ix86_asm_dialect;\n extern int ix86_regparm;\n extern const char *ix86_regparm_string;\n \n-extern int ix86_preferred_stack_boundary;\n+extern unsigned int ix86_preferred_stack_boundary;\n extern const char *ix86_preferred_stack_boundary_string;\n \n extern int ix86_branch_cost;"}, {"sha": "2d4ace5cff278eaefb84e5f7caa473ba1c423ba7", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -395,7 +395,7 @@ assign_stack_local_1 (enum machine_mode mode, HOST_WIDE_INT size, int align,\n {\n   rtx x, addr;\n   int bigend_correction = 0;\n-  int alignment;\n+  unsigned int alignment;\n   int frame_off, frame_alignment, frame_phase;\n \n   if (align == 0)"}, {"sha": "60baf84e12debbe24cda95ac661292a24d8f2a66", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95899b34957e97c03851efb4d482f3efe53a68f9/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=95899b34957e97c03851efb4d482f3efe53a68f9", "patch": "@@ -304,9 +304,9 @@ struct function GTY(())\n   /* tm.h can use this to store whatever it likes.  */\n   struct machine_function * GTY ((maybe_undef)) machine;\n   /* The largest alignment of slot allocated on the stack.  */\n-  int stack_alignment_needed;\n+  unsigned int stack_alignment_needed;\n   /* Preferred alignment of the end of stack frame.  */\n-  int preferred_stack_boundary;\n+  unsigned int preferred_stack_boundary;\n   /* Set when the call to function itself has been emit.  */\n   bool recursive_call_emit;\n   /* Set when the tail call has been produced.  */"}]}