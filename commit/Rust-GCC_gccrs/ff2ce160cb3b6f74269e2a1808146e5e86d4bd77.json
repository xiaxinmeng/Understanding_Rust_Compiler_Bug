{"sha": "ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyY2UxNjBjYjNiNmY3NDI2OWUyYTE4MDgxNDZlNWU4NmQ0YmQ3Nw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-05-04T23:34:37Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-05-04T23:34:37Z"}, "message": "Remove extra spacing at the end of the line.\n\nFrom-SVN: r173401", "tree": {"sha": "e7b62387f42efcd449bcaf9d81979cd5f72c016a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7b62387f42efcd449bcaf9d81979cd5f72c016a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/comments", "author": null, "committer": null, "parents": [{"sha": "91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e4938b8c0f979f84c2b66d1ff5370e83e00eb0"}], "stats": {"total": 1122, "additions": 561, "deletions": 561}, "files": [{"sha": "d9867fb56f045c93d22444a4acbdf16921cbf11c", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -626,15 +626,15 @@ may be used at a later point in the program.  This information is\n used, for instance, during register allocation, as the pseudo\n registers only need to be assigned to a unique hard register or to a\n stack slot if they are live.  The hard registers and stack slots may\n-be freely reused for other values when a register is dead.  \n+be freely reused for other values when a register is dead.\n \n Liveness information is available in the back end starting with\n @code{pass_df_initialize} and ending with @code{pass_df_finish}.  Three\n flavors of live analysis are available: With @code{LR}, it is possible\n to determine at any point @code{P} in the function if the register may be\n used on some path from @code{P} to the end of the function.  With\n @code{UR}, it is possible to determine if there is a path from the\n-beginning of the function to @code{P} that defines the variable.  \n+beginning of the function to @code{P} that defines the variable.\n @code{LIVE} is the intersection of the @code{LR} and @code{UR} and a\n variable is live at @code{P} if there is both an assignment that reaches\n it from the beginning of the function and a use that can be reached on\n@@ -645,7 +645,7 @@ In general @code{LIVE} is the most useful of the three.  The macros\n The macros take a basic block number and return a bitmap that is indexed\n by the register number.  This information is only guaranteed to be up to\n date after calls are made to @code{df_analyze}.  See the file\n-@code{df-core.c} for details on using the dataflow.  \n+@code{df-core.c} for details on using the dataflow.\n \n \n @findex REG_DEAD, REG_UNUSED"}, {"sha": "5f844f307817c976de308c0b484cc461d8805d09", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -934,8 +934,8 @@ Teemu Torma for thread safe exception handling support.\n Leonard Tower wrote parts of the parser, RTL generator, and RTL\n definitions, and of the VAX machine description.\n \n-@item \n-Daniel Towner and Hariharan Sandanagobalane contributed and \n+@item\n+Daniel Towner and Hariharan Sandanagobalane contributed and\n maintain the picoChip port.\n \n @item"}, {"sha": "821d81687effd1d3213c6c2b89ec421416005681", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -1964,7 +1964,7 @@ generate unique identifiers.  Care must be taken to ensure that\n which use it.  Otherwise, the precompiled headers will not be used.\n \n @item __GFORTRAN__\n-The GNU Fortran compiler defines this. \n+The GNU Fortran compiler defines this.\n \n @item __GNUC__\n @itemx __GNUC_MINOR__"}, {"sha": "b5702dbf7d8c061cc24cf71086699d25f3692878", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -37,7 +37,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Complex::             Data types for complex numbers.\n * Floating Types::      Additional Floating Types.\n * Half-Precision::      Half-Precision Floating Point.\n-* Decimal Float::       Decimal Floating Types. \n+* Decimal Float::       Decimal Floating Types.\n * Hex Floats::          Hexadecimal floating-point constants.\n * Fixed-Point::         Fixed-Point Types.\n * Named Address Spaces::Named address spaces.\n@@ -455,7 +455,7 @@ does not refer to anything that has gone out of scope, you should be\n safe.\n \n GCC implements taking the address of a nested function using a technique\n-called @dfn{trampolines}.  This technique was described in \n+called @dfn{trampolines}.  This technique was described in\n @cite{Lexical Closures for C++} (Thomas M. Breuel, USENIX\n C++ Conference Proceedings, October 17-21, 1988).\n \n@@ -619,7 +619,7 @@ myopen (const char *path, int oflag, ...)\n         @}\n       return open (path, oflag, __builtin_va_arg_pack ());\n     @}\n-    \n+\n   if (__builtin_va_arg_pack_len () < 1)\n     return __open_2 (path, oflag);\n \n@@ -942,7 +942,7 @@ The @code{__float128} type is supported on hppa HP-UX targets.\n @cindex @code{__fp16} data type\n \n On ARM targets, GCC supports half-precision (16-bit) floating point via\n-the @code{__fp16} type.  You must enable this type explicitly \n+the @code{__fp16} type.  You must enable this type explicitly\n with the @option{-mfp16-format} command-line option in order to use it.\n \n ARM supports two incompatible representations for half-precision\n@@ -963,22 +963,22 @@ values in the range of @math{2^{-14}} to 131008.\n The @code{__fp16} type is a storage format only.  For purposes\n of arithmetic and other operations, @code{__fp16} values in C or C++\n expressions are automatically promoted to @code{float}.  In addition,\n-you cannot declare a function with a return value or parameters \n+you cannot declare a function with a return value or parameters\n of type @code{__fp16}.\n \n Note that conversions from @code{double} to @code{__fp16}\n involve an intermediate conversion to @code{float}.  Because\n of rounding, this can sometimes produce a different result than a\n direct conversion.\n \n-ARM provides hardware support for conversions between \n+ARM provides hardware support for conversions between\n @code{__fp16} and @code{float} values\n as an extension to VFP and NEON (Advanced SIMD).  GCC generates\n code using these hardware instructions if you compile with\n-options to select an FPU that provides them; \n+options to select an FPU that provides them;\n for example, @option{-mfpu=neon-fp16 -mfloat-abi=softfp},\n in addition to the @option{-mfp16-format} option to select\n-a half-precision format.  \n+a half-precision format.\n \n Language-level support for the @code{__fp16} data type is\n independent of whether GCC generates code using hardware floating-point\n@@ -1995,7 +1995,7 @@ The @code{aligned} attribute can also be used for variables and fields\n @cindex @code{alloc_size} attribute\n The @code{alloc_size} attribute is used to tell the compiler that the\n function return value points to memory, where the size is given by\n-one or two of the functions parameters.  GCC uses this \n+one or two of the functions parameters.  GCC uses this\n information to improve the correctness of @code{__builtin_object_size}.\n \n The function parameter(s) denoting the allocated size are specified by\n@@ -2004,7 +2004,7 @@ is either the value of the single function argument specified or the product\n of the two function arguments specified.  Argument numbering starts at\n one.\n \n-For instance, \n+For instance,\n \n @smallexample\n void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))\n@@ -2213,7 +2213,7 @@ On systems that support the @code{visibility} attribute, this\n attribute also implies ``default'' visibility.  It is an error to\n explicitly specify any other visibility.\n \n-In previous versions of GCC, the @code{dllexport} attribute was ignored \n+In previous versions of GCC, the @code{dllexport} attribute was ignored\n for inlined functions, unless the @option{-fkeep-inline-functions} flag\n had been used.  The default behaviour now is to emit all dllexported\n inline functions; however, this can cause object file-size bloat, in\n@@ -2424,10 +2424,10 @@ standard modes, the X/Open function @code{strfmon} is also checked as\n are @code{printf_unlocked} and @code{fprintf_unlocked}.\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n \n-For Objective-C dialects, @code{NSString} (or @code{__NSString__}) is \n+For Objective-C dialects, @code{NSString} (or @code{__NSString__}) is\n recognized in the same context.  Declarations including these format attributes\n will be parsed for correct syntax, however the result of checking of such format\n-strings is not yet defined, and will not be carried out by this version of the \n+strings is not yet defined, and will not be carried out by this version of the\n compiler.\n \n The target may also provide additional types of format checks.\n@@ -2752,7 +2752,7 @@ command-line switch.  The @code{long_call} and @code{far} attributes are\n synonyms, and cause the compiler to always call\n the function by first loading its address into a register, and then using\n the contents of that register.  The @code{near} attribute has the opposite\n-effect; it specifies that non-PIC calls should be made using the more \n+effect; it specifies that non-PIC calls should be made using the more\n efficient @code{jal} instruction.\n \n @item malloc\n@@ -2773,11 +2773,11 @@ value.\n \n On MIPS targets, you can use the @code{mips16} and @code{nomips16}\n function attributes to locally select or turn off MIPS16 code generation.\n-A function with the @code{mips16} attribute is emitted as MIPS16 code, \n-while MIPS16 code generation is disabled for functions with the \n-@code{nomips16} attribute.  These attributes override the \n+A function with the @code{mips16} attribute is emitted as MIPS16 code,\n+while MIPS16 code generation is disabled for functions with the\n+@code{nomips16} attribute.  These attributes override the\n @option{-mips16} and @option{-mno-mips16} options on the command line\n-(@pxref{MIPS Options}).  \n+(@pxref{MIPS Options}).\n \n When compiling files containing mixed MIPS16 and non-MIPS16 code, the\n preprocessor symbol @code{__mips16} reflects the setting on the command line,\n@@ -2854,11 +2854,11 @@ and newer.\n @cindex function without a prologue/epilogue code\n Use this attribute on the ARM, AVR, MCORE, RX and SPU ports to indicate that\n the specified function does not need prologue/epilogue sequences generated by\n-the compiler.  It is up to the programmer to provide these sequences. The \n-only statements that can be safely included in naked functions are \n+the compiler.  It is up to the programmer to provide these sequences. The\n+only statements that can be safely included in naked functions are\n @code{asm} statements that do not have operands.  All other statements,\n-including declarations of local variables, @code{if} statements, and so \n-forth, should be avoided.  Naked functions should be used to implement the \n+including declarations of local variables, @code{if} statements, and so\n+forth, should be avoided.  Naked functions should be used to implement the\n body of an assembly function, while allowing the compiler to construct\n the requisite function declaration for the assembler.\n \n@@ -3173,10 +3173,10 @@ regardless of whether they are used or not.\n @item save_volatiles\n @cindex save volatile registers on the MicroBlaze\n Use this attribute on the MicroBlaze to indicate that the function is\n-an interrupt handler.  All volatile registers (in addition to non-volatile \n-registers) will be saved in the function prologue.  If the function is a leaf \n-function, only volatiles used by the function are saved.  A normal function \n-return is generated instead of a return from interrupt.  \n+an interrupt handler.  All volatile registers (in addition to non-volatile\n+registers) will be saved in the function prologue.  If the function is a leaf\n+function, only volatiles used by the function are saved.  A normal function\n+return is generated instead of a return from interrupt.\n \n @item section (\"@var{section-name}\")\n @cindex @code{section} function attribute\n@@ -4270,7 +4270,7 @@ up to a maximum of 8 byte alignment, then specifying @code{aligned(16)}\n in an @code{__attribute__} will still only provide you with 8 byte\n alignment.  See your linker documentation for further information.\n \n-The @code{aligned} attribute can also be used for functions \n+The @code{aligned} attribute can also be used for functions\n (@pxref{Function Attributes}.)\n \n @item cleanup (@var{cleanup_function})\n@@ -5162,7 +5162,7 @@ packed))}.\n Three attributes currently are defined for PowerPC configurations:\n @code{altivec}, @code{ms_struct} and @code{gcc_struct}.\n \n-For full documentation of the @code{ms_struct} and @code{gcc_struct} \n+For full documentation of the @code{ms_struct} and @code{gcc_struct}\n attributes please see the documentation in @ref{i386 Type Attributes}.\n \n The @code{altivec} attribute allows one to declare AltiVec vector data\n@@ -5832,7 +5832,7 @@ int frob(int x)\n \n In this (inefficient) example, the @code{frob} instruction sets the\n carry bit to indicate an error.  The @code{jc} instruction detects\n-this and branches to the @code{error} label.  Finally, the output \n+this and branches to the @code{error} label.  Finally, the output\n of the @code{frob} instruction (@code{%r5}) is stored into the memory\n for variable @code{y}, which is later read by the @code{return} statement.\n \n@@ -5888,7 +5888,7 @@ occasions we'd like to keep the overhead to the absolute minimum.\n The normal code path consists of a single @code{nop} instruction.\n However, we record the address of this @code{nop} together with the\n address of a label that calls the @code{trace} function.  This allows\n-the @code{nop} instruction to be patched at runtime to be an \n+the @code{nop} instruction to be patched at runtime to be an\n unconditional branch to the stored label.  It is assumed that an\n optimizing compiler will move the labeled block out of line, to\n optimize the fall through path from the @code{asm}.\n@@ -12770,10 +12770,10 @@ bit-fields.  See the Solaris man page for @code{cmn_err} for more information.\n @node Darwin Format Checks\n @subsection Darwin Format Checks\n \n-Darwin targets support the @code{CFString} (or @code{__CFString__}) in the format \n+Darwin targets support the @code{CFString} (or @code{__CFString__}) in the format\n attribute context.  Declarations made with such attribution will be parsed for correct syntax\n and format argument types.  However, parsing of the format string itself is currently undefined\n-and will not be carried out by this version of the compiler.  \n+and will not be carried out by this version of the compiler.\n \n Additionally, @code{CFStringRefs} (defined by the @code{CoreFoundation} headers) may\n also be used as format arguments.  Note that the relevant headers are only likely to be\n@@ -13027,8 +13027,8 @@ adding a call to the @code{.init} section.\n \n For compatibility with the Solaris and Tru64 UNIX system headers, GCC\n supports two @code{#pragma} directives which change the name used in\n-assembly for a given declaration.  @code{#pragma extern_prefix} is only \n-available on platforms whose system headers need it. To get this effect \n+assembly for a given declaration.  @code{#pragma extern_prefix} is only\n+available on platforms whose system headers need it. To get this effect\n on all platforms supported by GCC, use the asm labels extension (@pxref{Asm\n Labels}).\n \n@@ -13277,7 +13277,7 @@ For example:\n #undef X\n #define X -1\n #pragma pop_macro(\"X\")\n-int x [X]; \n+int x [X];\n @end smallexample\n \n In this example, the definition of X as 1 is saved by @code{#pragma\n@@ -14305,7 +14305,7 @@ If @code{type} is const qualified or is a reference type then the trait is\n false.  Otherwise if @code{__has_trivial_assign (type)} is true then the trait\n is true, else if @code{type} is a cv class or union type with copy assignment\n operators that are known not to throw an exception then the trait is true,\n-else it is false.  Requires: @code{type} shall be a complete type, \n+else it is false.  Requires: @code{type} shall be a complete type,\n (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_nothrow_copy (type)\n@@ -14319,20 +14319,20 @@ Requires: @code{type} shall be a complete type, (possibly cv-qualified)\n If @code{__has_trivial_constructor (type)} is true then the trait is\n true, else if @code{type} is a cv class or union type (or array\n thereof) with a default constructor that is known not to throw an\n-exception then the trait is true, else it is false.  Requires: \n-@code{type} shall be a complete type, (possibly cv-qualified) \n+exception then the trait is true, else it is false.  Requires:\n+@code{type} shall be a complete type, (possibly cv-qualified)\n @code{void}, or an array of unknown bound.\n \n @item __has_trivial_assign (type)\n If @code{type} is const qualified or is a reference type then the trait is\n false.  Otherwise if @code{__is_pod (type)} is true then the trait is\n true, else if @code{type} is a cv class or union type with a trivial\n copy assignment ([class.copy]) then the trait is true, else it is\n-false.  Requires: @code{type} shall be a complete type, (possibly \n+false.  Requires: @code{type} shall be a complete type, (possibly\n cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_trivial_copy (type)\n-If @code{__is_pod (type)} is true or @code{type} is a reference type \n+If @code{__is_pod (type)} is true or @code{type} is a reference type\n then the trait is true, else if @code{type} is a cv class or union type\n with a trivial copy constructor ([class.copy]) then the trait\n is true, else it is false.  Requires: @code{type} shall be a complete\n@@ -14384,7 +14384,7 @@ Otherwise @code{type} is considered empty if and only if: @code{type}\n has no non-static data members, or all non-static data members, if\n any, are bit-fields of length 0, and @code{type} has no virtual\n members, and @code{type} has no virtual base classes, and @code{type}\n-has no base classes @code{base_type} for which \n+has no base classes @code{base_type} for which\n @code{__is_empty (base_type)} is false.  Requires: @code{type} shall\n be a complete type, (possibly cv-qualified) @code{void}, or an array\n of unknown bound."}, {"sha": "e635b69a0eb4e6cdca14c668a2a6e27a995210b5", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -541,19 +541,19 @@ coverage files.\n @node Cross-profiling\n @section Data file relocation to support cross-profiling\n \n-Running the program will cause profile output to be generated.  For each \n-source file compiled with @option{-fprofile-arcs}, an accompanying @file{.gcda} \n-file will be placed in the object file directory. That implicitly requires \n-running the program on the same system as it was built or having the same \n+Running the program will cause profile output to be generated.  For each\n+source file compiled with @option{-fprofile-arcs}, an accompanying @file{.gcda}\n+file will be placed in the object file directory. That implicitly requires\n+running the program on the same system as it was built or having the same\n absolute directory structure on the target system. The program will try\n to create the needed directory structure, if it is not already present.\n \n To support cross-profiling, a program compiled with @option{-fprofile-arcs}\n-can relocate the data files based on two environment variables: \n+can relocate the data files based on two environment variables:\n \n @itemize @bullet\n @item\n-GCOV_PREFIX contains the prefix to add to the absolute paths \n+GCOV_PREFIX contains the prefix to add to the absolute paths\n in the object file. Prefix can be absolute, or relative.  The\n default is no prefix.\n "}, {"sha": "0cc8dfb22cc23aed8318fe99aeb23c8aea5c164b", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -621,7 +621,7 @@ internal representation, except for declarations of functions\n @menu\n * Working with declarations::  Macros and functions that work on\n declarations.\n-* Internal structure:: How declaration nodes are represented. \n+* Internal structure:: How declaration nodes are represented.\n @end menu\n \n @node Working with declarations\n@@ -734,11 +734,11 @@ referenced in debug bind statements.\n \n @item FIELD_DECL\n These nodes represent non-static data members.  The @code{DECL_SIZE} and\n-@code{DECL_ALIGN} behave as for @code{VAR_DECL} nodes.  \n-The position of the field within the parent record is specified by a \n+@code{DECL_ALIGN} behave as for @code{VAR_DECL} nodes.\n+The position of the field within the parent record is specified by a\n combination of three attributes.  @code{DECL_FIELD_OFFSET} is the position,\n counting in bytes, of the @code{DECL_OFFSET_ALIGN}-bit sized word containing\n-the bit of the field closest to the beginning of the structure.  \n+the bit of the field closest to the beginning of the structure.\n @code{DECL_FIELD_BIT_OFFSET} is the bit offset of the first bit of the field\n within this word; this may be nonzero even for fields that are not bit-fields,\n since @code{DECL_OFFSET_ALIGN} may be greater than the natural alignment\n@@ -810,7 +810,7 @@ used to represent @code{CONST_DECL}.\n \n @item struct tree_parm_decl\n This structure inherits from @code{struct tree_decl_with_rtl}.  It is\n-used to represent @code{PARM_DECL}.  \n+used to represent @code{PARM_DECL}.\n \n @item struct tree_decl_with_vis\n This structure inherits from @code{struct tree_decl_with_rtl}.  It\n@@ -819,11 +819,11 @@ a section name and assembler name.\n \n @item struct tree_var_decl\n This structure inherits from @code{struct tree_decl_with_vis}.  It is\n-used to represent @code{VAR_DECL}.  \n+used to represent @code{VAR_DECL}.\n \n @item struct tree_function_decl\n This structure inherits from @code{struct tree_decl_with_vis}.  It is\n-used to represent @code{FUNCTION_DECL}.  \n+used to represent @code{FUNCTION_DECL}.\n \n @end table\n @node Adding new DECL node types\n@@ -1574,8 +1574,8 @@ function to call; it is always an expression whose type is a\n @code{POINTER_TYPE}.\n \n The number of arguments to the call is returned by @code{call_expr_nargs},\n-while the arguments themselves can be accessed with the @code{CALL_EXPR_ARG} \n-macro.  The arguments are zero-indexed and numbered left-to-right.  \n+while the arguments themselves can be accessed with the @code{CALL_EXPR_ARG}\n+macro.  The arguments are zero-indexed and numbered left-to-right.\n You can iterate over the arguments using @code{FOR_EACH_CALL_EXPR_ARG}, as in:\n \n @smallexample\n@@ -1695,26 +1695,26 @@ its sole argument yields the representation for @code{ap}.\n @tindex VEC_PACK_TRUNC_EXPR\n @tindex VEC_PACK_SAT_EXPR\n @tindex VEC_PACK_FIX_TRUNC_EXPR\n-@tindex VEC_EXTRACT_EVEN_EXPR \n+@tindex VEC_EXTRACT_EVEN_EXPR\n @tindex VEC_EXTRACT_ODD_EXPR\n @tindex VEC_INTERLEAVE_HIGH_EXPR\n @tindex VEC_INTERLEAVE_LOW_EXPR\n \n @table @code\n @item VEC_LSHIFT_EXPR\n @itemx VEC_RSHIFT_EXPR\n-These nodes represent whole vector left and right shifts, respectively.  \n-The first operand is the vector to shift; it will always be of vector type.  \n+These nodes represent whole vector left and right shifts, respectively.\n+The first operand is the vector to shift; it will always be of vector type.\n The second operand is an expression for the number of bits by which to\n shift.  Note that the result is undefined if the second operand is larger\n than or equal to the first operand's type size.\n \n @item VEC_WIDEN_MULT_HI_EXPR\n @itemx VEC_WIDEN_MULT_LO_EXPR\n These nodes represent widening vector multiplication of the high and low\n-parts of the two input vectors, respectively.  Their operands are vectors \n-that contain the same number of elements (@code{N}) of the same integral type.  \n-The result is a vector that contains half as many elements, of an integral type \n+parts of the two input vectors, respectively.  Their operands are vectors\n+that contain the same number of elements (@code{N}) of the same integral type.\n+The result is a vector that contains half as many elements, of an integral type\n whose size is twice as wide.  In the case of @code{VEC_WIDEN_MULT_HI_EXPR} the\n high @code{N/2} elements of the two vector are multiplied to produce the\n vector of @code{N/2} products. In the case of @code{VEC_WIDEN_MULT_LO_EXPR} the\n@@ -1724,7 +1724,7 @@ vector of @code{N/2} products.\n @item VEC_UNPACK_HI_EXPR\n @itemx VEC_UNPACK_LO_EXPR\n These nodes represent unpacking of the high and low parts of the input vector,\n-respectively.  The single operand is a vector that contains @code{N} elements \n+respectively.  The single operand is a vector that contains @code{N} elements\n of the same integral or floating point type.  The result is a vector\n that contains half as many elements, of an integral or floating point type\n whose size is twice as wide.  In the case of @code{VEC_UNPACK_HI_EXPR} the\n@@ -1770,19 +1770,19 @@ vector.\n \n @item VEC_EXTRACT_EVEN_EXPR\n @itemx VEC_EXTRACT_ODD_EXPR\n-These nodes represent extracting of the even/odd elements of the two input \n-vectors, respectively. Their operands and result are vectors that contain the \n+These nodes represent extracting of the even/odd elements of the two input\n+vectors, respectively. Their operands and result are vectors that contain the\n same number of elements of the same type.\n \n @item VEC_INTERLEAVE_HIGH_EXPR\n @itemx VEC_INTERLEAVE_LOW_EXPR\n These nodes represent merging and interleaving of the high/low elements of the\n-two input vectors, respectively. The operands and the result are vectors that \n+two input vectors, respectively. The operands and the result are vectors that\n contain the same number of elements (@code{N}) of the same type.\n-In the case of @code{VEC_INTERLEAVE_HIGH_EXPR}, the high @code{N/2} elements of \n+In the case of @code{VEC_INTERLEAVE_HIGH_EXPR}, the high @code{N/2} elements of\n the first input vector are interleaved with the high @code{N/2} elements of the\n second input vector. In the case of @code{VEC_INTERLEAVE_LOW_EXPR}, the low\n-@code{N/2} elements of the first input vector are interleaved with the low \n+@code{N/2} elements of the first input vector are interleaved with the low\n @code{N/2} elements of the second input vector.\n \n @end table\n@@ -2616,7 +2616,7 @@ language-dependent info about GENERIC types.\n \n @item POINTER_TYPE\n Used to represent pointer types, and pointer to data member types.  If\n-@code{TREE_TYPE} \n+@code{TREE_TYPE}\n is a pointer to data member type, then @code{TYPE_PTRMEM_P} will hold.\n For a pointer to data member type of the form @samp{T X::*},\n @code{TYPE_PTRMEM_CLASS_TYPE} will be the type @code{X}, while"}, {"sha": "b75dc7278a1c12b240ad2722c4b3be00fecb8043", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 211, "deletions": 211, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -122,7 +122,7 @@ structure takes 4 words (32 bytes) on 64 bit hosts:\n \n @itemize @bullet\n @item @code{code}\n-Main identifier for a GIMPLE instruction. \n+Main identifier for a GIMPLE instruction.\n \n @item @code{subcode}\n Used to distinguish different variants of the same basic\n@@ -185,7 +185,7 @@ advantage of the 32-bit hole left by the previous fields.\n \n @item @code{bb}\n Basic block holding the instruction.\n- \n+\n @item @code{block}\n Lexical block holding this statement.  Also used for debug\n information generation.\n@@ -318,7 +318,7 @@ union gimple_statement_d\n @};\n @end smallexample\n \n- \n+\n @node GIMPLE instruction set\n @section GIMPLE instruction set\n @cindex GIMPLE instruction set\n@@ -692,11 +692,11 @@ program is running (and which is valid in all functions).\n @deftypefn {GIMPLE function} bool is_gimple_assign (gimple g)\n Return true if the code of g is @code{GIMPLE_ASSIGN}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool is_gimple_call (gimple g)\n Return true if the code of g is @code{GIMPLE_CALL}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool is_gimple_debug (gimple g)\n Return true if the code of g is @code{GIMPLE_DEBUG}.\n @end deftypefn\n@@ -718,21 +718,21 @@ expression to a variable.\n This section documents all the functions available to handle each\n of the GIMPLE instructions.\n \n-@subsection Common accessors \n+@subsection Common accessors\n The following are common accessors for gimple statements.\n \n @deftypefn {GIMPLE function} {enum gimple_code} gimple_code (gimple g)\n Return the code for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} basic_block gimple_bb (gimple g)\n Return the basic block to which statement @code{G} belongs to.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_block (gimple g)\n Return the lexical scope block holding statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_expr_type (gimple stmt)\n Return the type of the main expression computed by @code{STMT}. Return\n @code{void_type_node} if @code{STMT} computes nothing. This will only return\n@@ -753,135 +753,135 @@ by the @code{RHS} of the assignment.\n @deftypefn {GIMPLE function} void gimple_set_block (gimple g, tree block)\n Set the lexical scope block of @code{G} to @code{BLOCK}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} location_t gimple_locus (gimple g)\n Return locus information for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_locus (gimple g, location_t locus)\n Set locus information for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_locus_empty_p (gimple g)\n Return true if @code{G} does not have locus information.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_no_warning_p (gimple stmt)\n Return true if no warnings should be emitted for statement @code{STMT}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_visited (gimple stmt, bool visited_p)\n Set the visited status on statement @code{STMT} to @code{VISITED_P}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_visited_p (gimple stmt)\n Return the visited status on statement @code{STMT}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_plf (gimple stmt, enum plf_mask plf, bool val_p)\n Set pass local flag @code{PLF} on statement @code{STMT} to @code{VAL_P}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {unsigned int} gimple_plf (gimple stmt, enum plf_mask plf)\n Return the value of pass local flag @code{PLF} on statement @code{STMT}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_has_ops (gimple g)\n Return true if statement @code{G} has register or memory operands.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_has_mem_ops (gimple g)\n Return true if statement @code{G} has memory operands.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} unsigned gimple_num_ops (gimple g)\n Return the number of operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_ops (gimple g)\n Return the array of operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_op (gimple g, unsigned i)\n Return operand @code{I} for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_op_ptr (gimple g, unsigned i)\n Return a pointer to operand @code{I} for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_op (gimple g, unsigned i, tree op)\n Set operand @code{I} of statement @code{G} to @code{OP}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bitmap gimple_addresses_taken (gimple stmt)\n Return the set of symbols that have had their address taken by\n @code{STMT}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {struct def_optype_d *} gimple_def_ops (gimple g)\n Return the set of @code{DEF} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_def_ops (gimple g, struct def_optype_d *def)\n Set @code{DEF} to be the set of @code{DEF} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {struct use_optype_d *} gimple_use_ops (gimple g)\n Return the set of @code{USE} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_use_ops (gimple g, struct use_optype_d *use)\n Set @code{USE} to be the set of @code{USE} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {struct voptype_d *} gimple_vuse_ops (gimple g)\n Return the set of @code{VUSE} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_vuse_ops (gimple g, struct voptype_d *ops)\n Set @code{OPS} to be the set of @code{VUSE} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {struct voptype_d *} gimple_vdef_ops (gimple g)\n Return the set of @code{VDEF} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_vdef_ops (gimple g, struct voptype_d *ops)\n Set @code{OPS} to be the set of @code{VDEF} operands for statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bitmap gimple_loaded_syms (gimple g)\n Return the set of symbols loaded by statement @code{G}.  Each element of\n the set is the @code{DECL_UID} of the corresponding symbol.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bitmap gimple_stored_syms (gimple g)\n Return the set of symbols stored by statement @code{G}.  Each element of\n the set is the @code{DECL_UID} of the corresponding symbol.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_modified_p (gimple g)\n Return true if statement @code{G} has operands and the modified field\n has been set.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_has_volatile_ops (gimple stmt)\n Return true if statement @code{STMT} contains volatile operands.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_set_has_volatile_ops (gimple stmt, bool volatilep)\n Return true if statement @code{STMT} contains volatile operands.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void update_stmt (gimple s)\n Mark statement @code{S} as modified, and update it.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void update_stmt_if_modified (gimple s)\n Update statement @code{S} if it has been marked modified.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} gimple gimple_copy (gimple stmt)\n Return a deep copy of statement @code{STMT}.\n @end deftypefn\n@@ -941,57 +941,57 @@ VECs.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_asm_ninputs (gimple g)\n-Return the number of input operands for @code{GIMPLE_ASM} @code{G}. \n+Return the number of input operands for @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_asm_noutputs (gimple g)\n-Return the number of output operands for @code{GIMPLE_ASM} @code{G}. \n+Return the number of output operands for @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_asm_nclobbers (gimple g)\n-Return the number of clobber operands for @code{GIMPLE_ASM} @code{G}. \n+Return the number of clobber operands for @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_asm_input_op (gimple g, unsigned index)\n-Return input operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}. \n+Return input operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_asm_set_input_op (gimple g, unsigned index, tree in_op)\n-Set @code{IN_OP} to be input operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}. \n+Set @code{IN_OP} to be input operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_asm_output_op (gimple g, unsigned index)\n-Return output operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}. \n+Return output operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_asm_set_output_op (gimple g, @\n unsigned index, tree out_op)\n-Set @code{OUT_OP} to be output operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}. \n+Set @code{OUT_OP} to be output operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_asm_clobber_op (gimple g, unsigned index)\n-Return clobber operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}. \n+Return clobber operand @code{INDEX} of @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_asm_set_clobber_op (gimple g, unsigned index, tree clobber_op)\n-Set @code{CLOBBER_OP} to be clobber operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}. \n+Set @code{CLOBBER_OP} to be clobber operand @code{INDEX} in @code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {const char *} gimple_asm_string (gimple g)\n Return the string representing the assembly instruction in\n-@code{GIMPLE_ASM} @code{G}. \n+@code{GIMPLE_ASM} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_asm_volatile_p (gimple g)\n-Return true if @code{G} is an asm statement marked volatile. \n+Return true if @code{G} is an asm statement marked volatile.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_asm_set_volatile (gimple g)\n-Mark asm statement @code{G} as volatile. \n+Mark asm statement @code{G} as volatile.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_asm_clear_volatile (gimple g)\n-Remove volatile marker from asm statement @code{G}. \n+Remove volatile marker from asm statement @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_ASSIGN}\n@@ -1040,7 +1040,7 @@ for a unary expression.\n Return the code of the expression computed on the @code{RHS} of\n assignment statement @code{G}.\n @end deftypefn\n- \n+\n \n @deftypefn {GIMPLE function} {enum gimple_rhs_class} gimple_assign_rhs_class (gimple g)\n Return the gimple rhs class of the code for the expression\n@@ -1051,24 +1051,24 @@ return @code{GIMPLE_INVALID_RHS}.\n @deftypefn {GIMPLE function} tree gimple_assign_lhs (gimple g)\n Return the @code{LHS} of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_assign_lhs_ptr (gimple g)\n Return a pointer to the @code{LHS} of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_assign_rhs1 (gimple g)\n Return the first operand on the @code{RHS} of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_assign_rhs1_ptr (gimple g)\n Return the address of the first operand on the @code{RHS} of assignment\n statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_assign_rhs2 (gimple g)\n Return the second operand on the @code{RHS} of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_assign_rhs2_ptr (gimple g)\n Return the address of the second operand on the @code{RHS} of assignment\n statement @code{G}.\n@@ -1077,7 +1077,7 @@ statement @code{G}.\n @deftypefn {GIMPLE function} tree gimple_assign_rhs3 (gimple g)\n Return the third operand on the @code{RHS} of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_assign_rhs3_ptr (gimple g)\n Return the address of the third operand on the @code{RHS} of assignment\n statement @code{G}.\n@@ -1086,22 +1086,22 @@ statement @code{G}.\n @deftypefn {GIMPLE function} void gimple_assign_set_lhs (gimple g, tree lhs)\n Set @code{LHS} to be the @code{LHS} operand of assignment statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_assign_set_rhs1 (gimple g, tree rhs)\n Set @code{RHS} to be the first operand on the @code{RHS} of assignment\n statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_assign_set_rhs2 (gimple g, tree rhs)\n Set @code{RHS} to be the second operand on the @code{RHS} of assignment\n statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_assign_set_rhs3 (gimple g, tree rhs)\n Set @code{RHS} to be the third operand on the @code{RHS} of assignment\n statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} bool gimple_assign_cast_p (gimple s)\n Return true if @code{S} is a type-cast assignment.\n @end deftypefn\n@@ -1117,12 +1117,12 @@ and a body of statements in sequence @code{BODY}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_bind_vars (gimple g)\n-Return the variables declared in the @code{GIMPLE_BIND} statement @code{G}. \n+Return the variables declared in the @code{GIMPLE_BIND} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_set_vars (gimple g, tree vars)\n Set @code{VARS} to be the set of variables declared in the @code{GIMPLE_BIND}\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_append_vars (gimple g, tree vars)\n@@ -1132,15 +1132,15 @@ statement @code{G}.\n \n @deftypefn {GIMPLE function} gimple_seq gimple_bind_body (gimple g)\n Return the GIMPLE sequence contained in the @code{GIMPLE_BIND} statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_set_body (gimple g, gimple_seq seq)\n Set @code{SEQ} to be sequence contained in the @code{GIMPLE_BIND} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_add_stmt (gimple gs, gimple stmt)\n-Append a statement to the end of a @code{GIMPLE_BIND}'s body. \n+Append a statement to the end of a @code{GIMPLE_BIND}'s body.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_add_seq (gimple gs, gimple_seq seq)\n@@ -1150,12 +1150,12 @@ body.\n \n @deftypefn {GIMPLE function} tree gimple_bind_block (gimple g)\n Return the @code{TREE_BLOCK} node associated with @code{GIMPLE_BIND} statement\n-@code{G}. This is analogous to the @code{BIND_EXPR_BLOCK} field in trees. \n+@code{G}. This is analogous to the @code{BIND_EXPR_BLOCK} field in trees.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_bind_set_block (gimple g, tree block)\n Set @code{BLOCK} to be the @code{TREE_BLOCK} node associated with @code{GIMPLE_BIND}\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n \n@@ -1190,87 +1190,87 @@ Identical to @code{gimple_build_call} but the arguments are stored in a\n @deftypefn {GIMPLE function} tree gimple_call_lhs (gimple g)\n Return the @code{LHS} of call statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_call_lhs_ptr (gimple g)\n Return a pointer to the @code{LHS} of call statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_call_set_lhs (gimple g, tree lhs)\n Set @code{LHS} to be the @code{LHS} operand of call statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_call_fn (gimple g)\n Return the tree node representing the function called by call\n statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_call_set_fn (gimple g, tree fn)\n Set @code{FN} to be the function called by call statement @code{G}.  This has\n to be a gimple value specifying the address of the called\n function.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_call_fndecl (gimple g)\n If a given @code{GIMPLE_CALL}'s callee is a @code{FUNCTION_DECL}, return it.\n Otherwise return @code{NULL}.  This function is analogous to\n @code{get_callee_fndecl} in @code{GENERIC}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_call_set_fndecl (gimple g, tree fndecl)\n Set the called function to @code{FNDECL}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_call_return_type (gimple g)\n Return the type returned by call statement @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_call_chain (gimple g)\n-Return the static chain for call statement @code{G}. \n+Return the static chain for call statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_call_set_chain (gimple g, tree chain)\n-Set @code{CHAIN} to be the static chain for call statement @code{G}. \n+Set @code{CHAIN} to be the static chain for call statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_call_num_args (gimple g)\n-Return the number of arguments used by call statement @code{G}. \n+Return the number of arguments used by call statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_call_arg (gimple g, unsigned index)\n Return the argument at position @code{INDEX} for call statement @code{G}.  The\n first argument is 0.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_call_arg_ptr (gimple g, unsigned index)\n Return a pointer to the argument at position @code{INDEX} for call\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_call_set_arg (gimple g, unsigned index, tree arg)\n Set @code{ARG} to be the argument at position @code{INDEX} for call statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_call_set_tail (gimple s)\n Mark call statement @code{S} as being a tail call (i.e., a call just\n before the exit of a function). These calls are candidate for\n-tail call optimization. \n+tail call optimization.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_call_tail_p (gimple s)\n-Return true if @code{GIMPLE_CALL} @code{S} is marked as a tail call. \n+Return true if @code{GIMPLE_CALL} @code{S} is marked as a tail call.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_call_mark_uninlinable (gimple s)\n-Mark @code{GIMPLE_CALL} @code{S} as being uninlinable. \n+Mark @code{GIMPLE_CALL} @code{S} as being uninlinable.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_call_cannot_inline_p (gimple s)\n-Return true if @code{GIMPLE_CALL} @code{S} cannot be inlined. \n+Return true if @code{GIMPLE_CALL} @code{S} cannot be inlined.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_call_noreturn_p (gimple s)\n-Return true if @code{S} is a noreturn call. \n+Return true if @code{S} is a noreturn call.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple gimple_call_copy_skip_args (gimple stmt, bitmap args_to_skip)\n@@ -1290,25 +1290,25 @@ for the handler.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_catch_types (gimple g)\n-Return the types handled by @code{GIMPLE_CATCH} statement @code{G}. \n+Return the types handled by @code{GIMPLE_CATCH} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_catch_types_ptr (gimple g)\n Return a pointer to the types handled by @code{GIMPLE_CATCH} statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_catch_handler (gimple g)\n Return the GIMPLE sequence representing the body of the handler\n-of @code{GIMPLE_CATCH} statement @code{G}. \n+of @code{GIMPLE_CATCH} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_catch_set_types (gimple g, tree t)\n-Set @code{T} to be the set of types handled by @code{GIMPLE_CATCH} @code{G}. \n+Set @code{T} to be the set of types handled by @code{GIMPLE_CATCH} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_catch_set_handler (gimple g, gimple_seq handler)\n-Set @code{HANDLER} to be the body of @code{GIMPLE_CATCH} @code{G}. \n+Set @code{HANDLER} to be the body of @code{GIMPLE_CATCH} @code{G}.\n @end deftypefn\n \n \n@@ -1332,60 +1332,60 @@ tree @code{COND}.  @code{T_LABEL} and @code{F_LABEL} are as in @code{gimple_buil\n \n @deftypefn {GIMPLE function} {enum tree_code} gimple_cond_code (gimple g)\n Return the code of the predicate computed by conditional\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_set_code (gimple g, enum tree_code code)\n Set @code{CODE} to be the predicate code for the conditional statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_cond_lhs (gimple g)\n Return the @code{LHS} of the predicate computed by conditional statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_set_lhs (gimple g, tree lhs)\n Set @code{LHS} to be the @code{LHS} operand of the predicate computed by\n-conditional statement @code{G}. \n+conditional statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_cond_rhs (gimple g)\n Return the @code{RHS} operand of the predicate computed by conditional\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_set_rhs (gimple g, tree rhs)\n Set @code{RHS} to be the @code{RHS} operand of the predicate computed by\n-conditional statement @code{G}. \n+conditional statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_cond_true_label (gimple g)\n Return the label used by conditional statement @code{G} when its\n-predicate evaluates to true. \n+predicate evaluates to true.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_set_true_label (gimple g, tree label)\n Set @code{LABEL} to be the label used by conditional statement @code{G} when\n-its predicate evaluates to true. \n+its predicate evaluates to true.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_set_false_label (gimple g, tree label)\n Set @code{LABEL} to be the label used by conditional statement @code{G} when\n-its predicate evaluates to false. \n+its predicate evaluates to false.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_cond_false_label (gimple g)\n Return the label used by conditional statement @code{G} when its\n-predicate evaluates to false. \n+predicate evaluates to false.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_make_false (gimple g)\n-Set the conditional @code{COND_STMT} to be of the form 'if (1 == 0)'. \n+Set the conditional @code{COND_STMT} to be of the form 'if (1 == 0)'.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_cond_make_true (gimple g)\n-Set the conditional @code{COND_STMT} to be of the form 'if (1 == 1)'. \n+Set the conditional @code{COND_STMT} to be of the form 'if (1 == 1)'.\n @end deftypefn\n \n @node @code{GIMPLE_DEBUG}\n@@ -1475,34 +1475,34 @@ types.  @code{FAILURE} is a sequence with the filter's failure action.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_eh_filter_types (gimple g)\n-Return the types handled by @code{GIMPLE_EH_FILTER} statement @code{G}. \n+Return the types handled by @code{GIMPLE_EH_FILTER} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_eh_filter_types_ptr (gimple g)\n Return a pointer to the types handled by @code{GIMPLE_EH_FILTER}\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_eh_filter_failure (gimple g)\n Return the sequence of statement to execute when @code{GIMPLE_EH_FILTER}\n-statement fails. \n+statement fails.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_eh_filter_set_types (gimple g, tree types)\n-Set @code{TYPES} to be the set of types handled by @code{GIMPLE_EH_FILTER} @code{G}. \n+Set @code{TYPES} to be the set of types handled by @code{GIMPLE_EH_FILTER} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_eh_filter_set_failure (gimple g, gimple_seq failure)\n Set @code{FAILURE} to be the sequence of statements to execute on\n-failure for @code{GIMPLE_EH_FILTER} @code{G}. \n+failure for @code{GIMPLE_EH_FILTER} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_eh_filter_must_not_throw (gimple g)\n-Return the @code{EH_FILTER_MUST_NOT_THROW} flag. \n+Return the @code{EH_FILTER_MUST_NOT_THROW} flag.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_eh_filter_set_must_not_throw (gimple g, bool mntp)\n-Set the @code{EH_FILTER_MUST_NOT_THROW} flag. \n+Set the @code{EH_FILTER_MUST_NOT_THROW} flag.\n @end deftypefn\n \n \n@@ -1516,12 +1516,12 @@ label, @code{LABEL}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_label_label (gimple g)\n-Return the @code{LABEL_DECL} node used by @code{GIMPLE_LABEL} statement @code{G}. \n+Return the @code{LABEL_DECL} node used by @code{GIMPLE_LABEL} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_label_set_label (gimple g, tree label)\n Set @code{LABEL} to be the @code{LABEL_DECL} node used by @code{GIMPLE_LABEL}\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n \n@@ -1530,7 +1530,7 @@ Build a @code{GIMPLE_GOTO} statement to label @code{DEST}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_goto_dest (gimple g)\n-Return the destination of the unconditional jump @code{G}. \n+Return the destination of the unconditional jump @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_goto_set_dest (gimple g, tree dest)\n@@ -1547,7 +1547,7 @@ Build a @code{GIMPLE_NOP} statement.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_nop_p (gimple g)\n-Returns @code{TRUE} if statement @code{G} is a @code{GIMPLE_NOP}. \n+Returns @code{TRUE} if statement @code{G} is a @code{GIMPLE_NOP}.\n @end deftypefn\n \n @node @code{GIMPLE_OMP_ATOMIC_LOAD}\n@@ -1561,19 +1561,19 @@ assignment.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_atomic_load_set_lhs (gimple g, tree lhs)\n-Set the @code{LHS} of an atomic load. \n+Set the @code{LHS} of an atomic load.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_atomic_load_lhs (gimple g)\n-Get the @code{LHS} of an atomic load. \n+Get the @code{LHS} of an atomic load.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_atomic_load_set_rhs (gimple g, tree rhs)\n-Set the @code{RHS} of an atomic set. \n+Set the @code{RHS} of an atomic set.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_atomic_load_rhs (gimple g)\n-Get the @code{RHS} of an atomic set. \n+Get the @code{RHS} of an atomic set.\n @end deftypefn\n \n \n@@ -1587,11 +1587,11 @@ stored.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_atomic_store_set_val (gimple g, tree val)\n-Set the value being stored in an atomic store. \n+Set the value being stored in an atomic store.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_atomic_store_val (gimple g)\n-Return the value being stored in an atomic store. \n+Return the value being stored in an atomic store.\n @end deftypefn\n \n @node @code{GIMPLE_OMP_CONTINUE}\n@@ -1608,25 +1608,25 @@ the control variable.\n Return the definition of the control variable on a\n @code{GIMPLE_OMP_CONTINUE} in @code{S}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_continue_control_def_ptr (gimple s)\n Same as above, but return the pointer.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_continue_set_control_def (gimple s)\n Set the control variable definition for a @code{GIMPLE_OMP_CONTINUE}\n statement in @code{S}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_continue_control_use (gimple s)\n Return the use of the control variable on a @code{GIMPLE_OMP_CONTINUE}\n in @code{S}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_continue_control_use_ptr (gimple s)\n Same as above, but return the pointer.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_continue_set_control_use (gimple s)\n Set the control variable use for a @code{GIMPLE_OMP_CONTINUE} statement\n in @code{S}.\n@@ -1644,16 +1644,16 @@ optional identifier for this critical block.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_critical_name (gimple g)\n-Return the name associated with @code{OMP_CRITICAL} statement @code{G}. \n+Return the name associated with @code{OMP_CRITICAL} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_critical_name_ptr (gimple g)\n Return a pointer to the name associated with @code{OMP} critical\n-statement @code{G}. \n+statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_critical_set_name (gimple g, tree name)\n-Set @code{NAME} to be the name associated with @code{OMP} critical statement @code{G}. \n+Set @code{NAME} to be the name associated with @code{OMP} critical statement @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_OMP_FOR}\n@@ -1674,81 +1674,81 @@ compare @code{INDEX} and @code{FINAL}.  @code{INCR} is the increment expression.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_clauses (gimple g)\n-Return the clauses associated with @code{OMP_FOR} @code{G}. \n+Return the clauses associated with @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_for_clauses_ptr (gimple g)\n-Return a pointer to the @code{OMP_FOR} @code{G}. \n+Return a pointer to the @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_clauses (gimple g, tree clauses)\n-Set @code{CLAUSES} to be the list of clauses associated with @code{OMP_FOR} @code{G}. \n+Set @code{CLAUSES} to be the list of clauses associated with @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_index (gimple g)\n-Return the index variable for @code{OMP_FOR} @code{G}. \n+Return the index variable for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_for_index_ptr (gimple g)\n-Return a pointer to the index variable for @code{OMP_FOR} @code{G}. \n+Return a pointer to the index variable for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_index (gimple g, tree index)\n-Set @code{INDEX} to be the index variable for @code{OMP_FOR} @code{G}. \n+Set @code{INDEX} to be the index variable for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_initial (gimple g)\n-Return the initial value for @code{OMP_FOR} @code{G}. \n+Return the initial value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_for_initial_ptr (gimple g)\n-Return a pointer to the initial value for @code{OMP_FOR} @code{G}. \n+Return a pointer to the initial value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_initial (gimple g, tree initial)\n Set @code{INITIAL} to be the initial value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_final (gimple g)\n-Return the final value for @code{OMP_FOR} @code{G}. \n+Return the final value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_for_final_ptr (gimple g)\n-turn a pointer to the final value for @code{OMP_FOR} @code{G}. \n+turn a pointer to the final value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_final (gimple g, tree final)\n-Set @code{FINAL} to be the final value for @code{OMP_FOR} @code{G}. \n+Set @code{FINAL} to be the final value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_for_incr (gimple g)\n-Return the increment value for @code{OMP_FOR} @code{G}. \n+Return the increment value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_for_incr_ptr (gimple g)\n-Return a pointer to the increment value for @code{OMP_FOR} @code{G}. \n+Return a pointer to the increment value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_incr (gimple g, tree incr)\n-Set @code{INCR} to be the increment value for @code{OMP_FOR} @code{G}. \n+Set @code{INCR} to be the increment value for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_omp_for_pre_body (gimple g)\n Return the sequence of statements to execute before the @code{OMP_FOR}\n-statement @code{G} starts. \n+statement @code{G} starts.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_for_set_pre_body (gimple g, gimple_seq pre_body)\n Set @code{PRE_BODY} to be the sequence of statements to execute before\n the @code{OMP_FOR} statement @code{G} starts.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_omp_for_set_cond (gimple g, enum tree_code cond)\n-Set @code{COND} to be the condition code for @code{OMP_FOR} @code{G}. \n+Set @code{COND} to be the condition code for @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {enum tree_code} gimple_omp_for_cond (gimple g)\n-Return the condition code associated with @code{OMP_FOR} @code{G}. \n+Return the condition code associated with @code{OMP_FOR} @code{G}.\n @end deftypefn\n \n \n@@ -1792,63 +1792,63 @@ the function created for the parallel threads to execute.\n Return true if @code{OMP} parallel statement @code{G} has the\n @code{GF_OMP_PARALLEL_COMBINED} flag set.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_omp_parallel_set_combined_p (gimple g)\n Set the @code{GF_OMP_PARALLEL_COMBINED} field in @code{OMP} parallel statement\n @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} gimple_seq gimple_omp_body (gimple g)\n-Return the body for the @code{OMP} statement @code{G}. \n+Return the body for the @code{OMP} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_set_body (gimple g, gimple_seq body)\n-Set @code{BODY} to be the body for the @code{OMP} statement @code{G}. \n+Set @code{BODY} to be the body for the @code{OMP} statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_parallel_clauses (gimple g)\n-Return the clauses associated with @code{OMP_PARALLEL} @code{G}. \n+Return the clauses associated with @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_parallel_clauses_ptr (gimple g)\n-Return a pointer to the clauses associated with @code{OMP_PARALLEL} @code{G}. \n+Return a pointer to the clauses associated with @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_parallel_set_clauses (gimple g, tree clauses)\n Set @code{CLAUSES} to be the list of clauses associated with\n-@code{OMP_PARALLEL} @code{G}. \n+@code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_parallel_child_fn (gimple g)\n Return the child function used to hold the body of @code{OMP_PARALLEL}\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_parallel_child_fn_ptr (gimple g)\n Return a pointer to the child function used to hold the body of\n-@code{OMP_PARALLEL} @code{G}. \n+@code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_parallel_set_child_fn (gimple g, tree child_fn)\n-Set @code{CHILD_FN} to be the child function for @code{OMP_PARALLEL} @code{G}. \n+Set @code{CHILD_FN} to be the child function for @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_parallel_data_arg (gimple g)\n Return the artificial argument used to send variables and values\n-from the parent to the children threads in @code{OMP_PARALLEL} @code{G}. \n+from the parent to the children threads in @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_parallel_data_arg_ptr (gimple g)\n-Return a pointer to the data argument for @code{OMP_PARALLEL} @code{G}. \n+Return a pointer to the data argument for @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_parallel_set_data_arg (gimple g, tree data_arg)\n-Set @code{DATA_ARG} to be the data argument for @code{OMP_PARALLEL} @code{G}. \n+Set @code{DATA_ARG} to be the data argument for @code{OMP_PARALLEL} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool is_gimple_omp (gimple stmt)\n Returns true when the gimple statement @code{STMT} is any of the OpenMP\n-types. \n+types.\n @end deftypefn\n \n \n@@ -1864,7 +1864,7 @@ non-waiting return.\n @deftypefn {GIMPLE function} void gimple_omp_return_set_nowait (gimple s)\n Set the nowait flag on @code{GIMPLE_OMP_RETURN} statement @code{S}.\n @end deftypefn\n- \n+\n \n @deftypefn {GIMPLE function} bool gimple_omp_return_nowait_p (gimple g)\n Return true if @code{OMP} return statement @code{G} has the\n@@ -1885,7 +1885,7 @@ Build a @code{GIMPLE_OMP_SECTION} statement for a sections statement.\n Return true if @code{OMP} section statement @code{G} has the\n @code{GF_OMP_SECTION_LAST} flag set.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_omp_section_set_last (gimple g)\n Set the @code{GF_OMP_SECTION_LAST} flag on @code{G}.\n @end deftypefn\n@@ -1910,28 +1910,28 @@ Build a @code{GIMPLE_OMP_SECTIONS_SWITCH} statement.\n Return the control variable associated with the\n @code{GIMPLE_OMP_SECTIONS} in @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} {tree *} gimple_omp_sections_control_ptr (gimple g)\n Return a pointer to the clauses associated with the\n @code{GIMPLE_OMP_SECTIONS} in @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} void gimple_omp_sections_set_control (gimple g, tree control)\n Set @code{CONTROL} to be the set of clauses associated with the\n @code{GIMPLE_OMP_SECTIONS} in @code{G}.\n @end deftypefn\n- \n+\n @deftypefn {GIMPLE function} tree gimple_omp_sections_clauses (gimple g)\n-Return the clauses associated with @code{OMP_SECTIONS} @code{G}. \n+Return the clauses associated with @code{OMP_SECTIONS} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_sections_clauses_ptr (gimple g)\n-Return a pointer to the clauses associated with @code{OMP_SECTIONS} @code{G}. \n+Return a pointer to the clauses associated with @code{OMP_SECTIONS} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_sections_set_clauses (gimple g, tree clauses)\n Set @code{CLAUSES} to be the set of clauses associated with @code{OMP_SECTIONS}\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n \n@@ -1947,15 +1947,15 @@ copyprivate, nowait.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_omp_single_clauses (gimple g)\n-Return the clauses associated with @code{OMP_SINGLE} @code{G}. \n+Return the clauses associated with @code{OMP_SINGLE} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_omp_single_clauses_ptr (gimple g)\n-Return a pointer to the clauses associated with @code{OMP_SINGLE} @code{G}. \n+Return a pointer to the clauses associated with @code{OMP_SINGLE} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_omp_single_set_clauses (gimple g, tree clauses)\n-Set @code{CLAUSES} to be the clauses associated with @code{OMP_SINGLE} @code{G}. \n+Set @code{CLAUSES} to be the clauses associated with @code{OMP_SINGLE} @code{G}.\n @end deftypefn\n \n \n@@ -1968,35 +1968,35 @@ Build a @code{PHI} node with len argument slots for variable var.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_phi_capacity (gimple g)\n-Return the maximum number of arguments supported by @code{GIMPLE_PHI} @code{G}. \n+Return the maximum number of arguments supported by @code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} unsigned gimple_phi_num_args (gimple g)\n Return the number of arguments in @code{GIMPLE_PHI} @code{G}. This must always\n be exactly the number of incoming edges for the basic block\n-holding @code{G}. \n+holding @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_phi_result (gimple g)\n-Return the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}. \n+Return the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {tree *} gimple_phi_result_ptr (gimple g)\n-Return a pointer to the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}. \n+Return a pointer to the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_phi_set_result (gimple g, tree result)\n-Set @code{RESULT} to be the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}. \n+Set @code{RESULT} to be the @code{SSA} name created by @code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} {struct phi_arg_d *} gimple_phi_arg (gimple g, index)\n Return the @code{PHI} argument corresponding to incoming edge @code{INDEX} for\n-@code{GIMPLE_PHI} @code{G}. \n+@code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_phi_set_arg (gimple g, index, struct phi_arg_d * phiarg)\n Set @code{PHIARG} to be the argument corresponding to incoming edge\n-@code{INDEX} for @code{GIMPLE_PHI} @code{G}. \n+@code{INDEX} for @code{GIMPLE_PHI} @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_RESX}\n@@ -2011,11 +2011,11 @@ region from which control is flowing.\n @end deftypefn\n \n @deftypefn {GIMPLE function} int gimple_resx_region (gimple g)\n-Return the region number for @code{GIMPLE_RESX} @code{G}. \n+Return the region number for @code{GIMPLE_RESX} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_resx_set_region (gimple g, int region)\n-Set @code{REGION} to be the region number for @code{GIMPLE_RESX} @code{G}. \n+Set @code{REGION} to be the region number for @code{GIMPLE_RESX} @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_RETURN}\n@@ -2027,11 +2027,11 @@ Build a @code{GIMPLE_RETURN} statement whose return value is retval.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_return_retval (gimple g)\n-Return the return value for @code{GIMPLE_RETURN} @code{G}. \n+Return the return value for @code{GIMPLE_RETURN} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_return_set_retval (gimple g, tree retval)\n-Set @code{RETVAL} to be the return value for @code{GIMPLE_RETURN} @code{G}. \n+Set @code{RETVAL} to be the return value for @code{GIMPLE_RETURN} @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_SWITCH}\n@@ -2057,41 +2057,41 @@ that contain the labels.\n \n @deftypefn {GIMPLE function} unsigned gimple_switch_num_labels (gimple g)\n Return the number of labels associated with the switch statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_switch_set_num_labels (gimple g, @\n unsigned nlabels)\n Set @code{NLABELS} to be the number of labels for the switch statement\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_switch_index (gimple g)\n-Return the index variable used by the switch statement @code{G}. \n+Return the index variable used by the switch statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_switch_set_index (gimple g, tree index)\n-Set @code{INDEX} to be the index variable for switch statement @code{G}. \n+Set @code{INDEX} to be the index variable for switch statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_switch_label (gimple g, unsigned index)\n Return the label numbered @code{INDEX}. The default label is 0, followed\n-by any labels in a switch statement. \n+by any labels in a switch statement.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_switch_set_label (gimple g, unsigned @\n index, tree label)\n Set the label number @code{INDEX} to @code{LABEL}. 0 is always the default\n-label. \n+label.\n @end deftypefn\n \n @deftypefn {GIMPLE function} tree gimple_switch_default_label (gimple g)\n-Return the default label for a switch statement. \n+Return the default label for a switch statement.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_switch_set_default_label (gimple g, @\n tree label)\n-Set the default label for a switch statement. \n+Set the default label for a switch statement.\n @end deftypefn\n \n \n@@ -2111,36 +2111,36 @@ construct.\n \n @deftypefn {GIMPLE function} {enum gimple_try_flags} gimple_try_kind (gimple g)\n Return the kind of try block represented by @code{GIMPLE_TRY} @code{G}. This is\n-either @code{GIMPLE_TRY_CATCH} or @code{GIMPLE_TRY_FINALLY}. \n+either @code{GIMPLE_TRY_CATCH} or @code{GIMPLE_TRY_FINALLY}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_try_catch_is_cleanup (gimple g)\n-Return the @code{GIMPLE_TRY_CATCH_IS_CLEANUP} flag. \n+Return the @code{GIMPLE_TRY_CATCH_IS_CLEANUP} flag.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_try_eval (gimple g)\n Return the sequence of statements used as the body for @code{GIMPLE_TRY}\n-@code{G}. \n+@code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_try_cleanup (gimple g)\n Return the sequence of statements used as the cleanup body for\n-@code{GIMPLE_TRY} @code{G}. \n+@code{GIMPLE_TRY} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_try_set_catch_is_cleanup (gimple g, @\n bool catch_is_cleanup)\n-Set the @code{GIMPLE_TRY_CATCH_IS_CLEANUP} flag. \n+Set the @code{GIMPLE_TRY_CATCH_IS_CLEANUP} flag.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_try_set_eval (gimple g, gimple_seq eval)\n Set @code{EVAL} to be the sequence of statements to use as the body for\n-@code{GIMPLE_TRY} @code{G}. \n+@code{GIMPLE_TRY} @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_try_set_cleanup (gimple g, gimple_seq cleanup)\n Set @code{CLEANUP} to be the sequence of statements to use as the\n-cleanup body for @code{GIMPLE_TRY} @code{G}. \n+cleanup body for @code{GIMPLE_TRY} @code{G}.\n @end deftypefn\n \n @node @code{GIMPLE_WITH_CLEANUP_EXPR}\n@@ -2153,25 +2153,25 @@ clean-up expression.\n @end deftypefn\n \n @deftypefn {GIMPLE function} gimple_seq gimple_wce_cleanup (gimple g)\n-Return the cleanup sequence for cleanup statement @code{G}. \n+Return the cleanup sequence for cleanup statement @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_wce_set_cleanup (gimple g, gimple_seq cleanup)\n-Set @code{CLEANUP} to be the cleanup sequence for @code{G}. \n+Set @code{CLEANUP} to be the cleanup sequence for @code{G}.\n @end deftypefn\n \n @deftypefn {GIMPLE function} bool gimple_wce_cleanup_eh_only (gimple g)\n-Return the @code{CLEANUP_EH_ONLY} flag for a @code{WCE} tuple. \n+Return the @code{CLEANUP_EH_ONLY} flag for a @code{WCE} tuple.\n @end deftypefn\n \n @deftypefn {GIMPLE function} void gimple_wce_set_cleanup_eh_only (gimple g, bool eh_only_p)\n-Set the @code{CLEANUP_EH_ONLY} flag for a @code{WCE} tuple. \n+Set the @code{CLEANUP_EH_ONLY} flag for a @code{WCE} tuple.\n @end deftypefn\n \n \n-@node GIMPLE sequences \n-@section GIMPLE sequences \n-@cindex GIMPLE sequences \n+@node GIMPLE sequences\n+@section GIMPLE sequences\n+@cindex GIMPLE sequences\n \n GIMPLE sequences are the tuple equivalent of @code{STATEMENT_LIST}'s\n used in @code{GENERIC}.  They are used to chain statements together, and\n@@ -2256,9 +2256,9 @@ Sets the sequence of statements in @code{BB} to @code{SEQ}.\n Determine whether @code{SEQ} contains exactly one statement.\n @end deftypefn\n \n-@node Sequence iterators \n-@section Sequence iterators \n-@cindex Sequence iterators \n+@node Sequence iterators\n+@section Sequence iterators\n+@cindex Sequence iterators\n \n Sequence iterators are convenience constructs for iterating\n through statements in a sequence.  Given a sequence @code{SEQ}, here is\n@@ -2516,7 +2516,7 @@ corresponding prototype in @code{gimple.h}.\n @node Statement and operand traversals\n @section Statement and operand traversals\n @cindex Statement and operand traversals\n- \n+\n There are two functions available for walking statements and\n sequences: @code{walk_gimple_stmt} and @code{walk_gimple_seq},\n accordingly, and a third function for walking the operands in a"}, {"sha": "55986a195c4b305f88bb00c8a1b74399cef77f22", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -371,7 +371,7 @@ struct GTY((variable_size)) sorted_fields_type @{\n @};\n @end smallexample\n \n-Then the objects of @code{struct sorted_fields_type} are allocated in GC \n+Then the objects of @code{struct sorted_fields_type} are allocated in GC\n memory as follows:\n @smallexample\n   field_vec = ggc_alloc_sorted_fields_type (size);"}, {"sha": "d783a2f15bf68c4d0527ab80d35ffad97d52a42e", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -214,15 +214,15 @@ initialization when a compilation driver is being initialized.\n @item HOST_LONG_LONG_FORMAT\n If defined, the string used to indicate an argument of type @code{long\n long} to functions like @code{printf}.  The default value is\n-@code{\"ll\"}. \n+@code{\"ll\"}.\n \n @item HOST_LONG_FORMAT\n If defined, the string used to indicate an argument of type @code{long}\n-to functions like @code{printf}.  The default value is @code{\"l\"}. \n+to functions like @code{printf}.  The default value is @code{\"l\"}.\n \n @item HOST_PTR_PRINTF\n If defined, the string used to indicate an argument of type @code{void *}\n-to functions like @code{printf}.  The default value is @code{\"%p\"}. \n+to functions like @code{printf}.  The default value is @code{\"%p\"}.\n @end ftable\n \n In addition, if @command{configure} generates an incorrect definition of"}, {"sha": "c19cbf9d47c5bfb34670da85496bf24cbbb97b75", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -45,7 +45,7 @@\n @end ifset\n \n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, \n+@c 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n @c 2010, 2011 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -461,7 +461,7 @@ included in releases.\n \n @item @TeX{} (any working version)\n \n-Necessary for running @command{texi2dvi} and @command{texi2pdf}, which \n+Necessary for running @command{texi2dvi} and @command{texi2pdf}, which\n are used when running @command{make dvi} or @command{make pdf} to create\n DVI or PDF files, respectively.\n \n@@ -1214,7 +1214,7 @@ On MIPS targets, make @option{-mno-llsc} the default when no\n On MIPS targets, make @option{-msynci} the default when no\n @option{-mno-synci} option is passed.\n \n-@item --without-synci \n+@item --without-synci\n On MIPS targets, make @option{-mno-synci} the default when no\n @option{-msynci} option is passed.  This is the default.\n \n@@ -1711,7 +1711,7 @@ the directory specified with @option{--with-sysroot}.  This option is\n only useful when you are already using @option{--with-sysroot}.  You\n can use @option{--with-build-sysroot} when you are configuring with\n @option{--prefix} set to a directory that is different from the one in\n-which you are installing GCC and your target libraries.  \n+which you are installing GCC and your target libraries.\n \n This option affects the system root for the compiler used to build\n target libraries (which runs on the build system); it does not affect\n@@ -1903,8 +1903,8 @@ Note that if --enable-java-home is used, --with-arch-directory=ARCH must also\n be specified.\n \n @item --with-arch-directory=ARCH\n-Specifies the name to use for the @file{jre/lib/ARCH} directory in the SDK \n-environment created when --enable-java-home is passed. Typical names for this \n+Specifies the name to use for the @file{jre/lib/ARCH} directory in the SDK\n+environment created when --enable-java-home is passed. Typical names for this\n directory include i386, amd64, ia64, etc.\n \n @item --with-os-directory=DIR\n@@ -1916,7 +1916,7 @@ Specifies the JPackage origin name. This defaults to the 'gcj' in\n java-1.5.0-gcj.\n \n @item --with-arch-suffix=SUFFIX\n-Specifies the suffix for the sdk directory. Defaults to the empty string. \n+Specifies the suffix for the sdk directory. Defaults to the empty string.\n Examples include '.x86_64' in 'java-1.5.0-gcj-1.5.0.0.x86_64'.\n \n @item --with-jvm-root-dir=DIR\n@@ -1928,7 +1928,7 @@ Specifies where to install jars. Default is $(prefix)/lib/jvm-exports.\n @item --with-python-dir=DIR\n Specifies where to install the Python modules used for aot-compile. DIR should\n not include the prefix used in installation. For example, if the Python modules\n-are to be installed in /usr/lib/python2.5/site-packages, then \n+are to be installed in /usr/lib/python2.5/site-packages, then\n --with-python-dir=/lib/python2.5/site-packages should be passed. If this is\n not specified, then the Python modules are installed in $(prefix)/share/python.\n \n@@ -2344,7 +2344,7 @@ compilation options.  Check your target's definition of\n \n GNU Make 3.80 and above, which is necessary to build GCC, support\n building in parallel.  To activate this, you can use @samp{make -j 2}\n-instead of @samp{make}.  You can also specify a bigger number, and \n+instead of @samp{make}.  You can also specify a bigger number, and\n in most cases using a value greater than the number of processors in\n your machine will result in fewer and shorter I/O latency hits, thus\n improving overall throughput; this is especially true for slow drives\n@@ -4411,27 +4411,27 @@ respects, this target is the same as the\n @heading @anchor{windows}Microsoft Windows\n \n @subheading Intel 16-bit versions\n-The 16-bit versions of Microsoft Windows, such as Windows 3.1, are not \n+The 16-bit versions of Microsoft Windows, such as Windows 3.1, are not\n supported.\n \n-However, the 32-bit port has limited support for Microsoft \n+However, the 32-bit port has limited support for Microsoft\n Windows 3.11 in the Win32s environment, as a target only.  See below.\n \n @subheading Intel 32-bit versions\n \n-The 32-bit versions of Windows, including Windows 95, Windows NT, Windows \n-XP, and Windows Vista, are supported by several different target \n-platforms.  These targets differ in which Windows subsystem they target \n+The 32-bit versions of Windows, including Windows 95, Windows NT, Windows\n+XP, and Windows Vista, are supported by several different target\n+platforms.  These targets differ in which Windows subsystem they target\n and which C libraries are used.\n \n @itemize\n-@item Cygwin @uref{#x-x-cygwin,,*-*-cygwin}: Cygwin provides a user-space \n+@item Cygwin @uref{#x-x-cygwin,,*-*-cygwin}: Cygwin provides a user-space\n Linux API emulation layer in the Win32 subsystem.\n-@item Interix @uref{#x-x-interix,,*-*-interix}: The Interix subsystem \n+@item Interix @uref{#x-x-interix,,*-*-interix}: The Interix subsystem\n provides native support for POSIX.\n-@item MinGW @uref{#x-x-mingw32,,*-*-mingw32}: MinGW is a native GCC port for \n+@item MinGW @uref{#x-x-mingw32,,*-*-mingw32}: MinGW is a native GCC port for\n the Win32 subsystem that provides a subset of POSIX.\n-@item MKS i386-pc-mks: NuTCracker from MKS.  See \n+@item MKS i386-pc-mks: NuTCracker from MKS.  See\n @uref{http://www.mkssoftware.com/} for more information.\n @end itemize\n \n@@ -4445,19 +4445,19 @@ Presently Windows for Itanium is not supported.\n \n @subheading Windows CE\n \n-Windows CE is supported as a target only on ARM (arm-wince-pe), Hitachi \n+Windows CE is supported as a target only on ARM (arm-wince-pe), Hitachi\n SuperH (sh-wince-pe), and MIPS (mips-wince-pe).\n \n @subheading Other Windows Platforms\n \n GCC no longer supports Windows NT on the Alpha or PowerPC.\n \n-GCC no longer supports the Windows POSIX subsystem.  However, it does \n+GCC no longer supports the Windows POSIX subsystem.  However, it does\n support the Interix subsystem.  See above.\n \n Old target names including *-*-winnt and *-*-windowsnt are no longer used.\n \n-PW32 (i386-pc-pw32) support was never completed, and the project seems to \n+PW32 (i386-pc-pw32) support was never completed, and the project seems to\n be inactive.  See @uref{http://pw32.sourceforge.net/} for more information.\n \n UWIN support has been removed due to a lack of maintenance.\n@@ -4484,9 +4484,9 @@ or version 2.20 or above if building your own.\n @end html\n @heading @anchor{x-x-interix}*-*-interix\n \n-The Interix target is used by OpenNT, Interix, Services For UNIX (SFU), \n-and Subsystem for UNIX-based Applications (SUA).  Applications compiled \n-with this target run in the Interix subsystem, which is separate from \n+The Interix target is used by OpenNT, Interix, Services For UNIX (SFU),\n+and Subsystem for UNIX-based Applications (SUA).  Applications compiled\n+with this target run in the Interix subsystem, which is separate from\n the Win32 subsystem.  This target was last known to work in GCC 3.3.\n \n @html"}, {"sha": "2a46c377b0e7c11e2a41e05815004409506f8c55", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -3055,7 +3055,7 @@ promoted to @code{double}.  CPUs with a 32-bit ``single-precision''\n floating-point unit implement @code{float} in hardware, but emulate\n @code{double} in software.  On such a machine, doing computations\n using @code{double} values is much more expensive because of the\n-overhead required for software emulation.  \n+overhead required for software emulation.\n \n It is easy to accidentally do computations with @code{double} because\n floating-point literals are implicitly of type @code{double}.  For\n@@ -3064,7 +3064,7 @@ example, in:\n @group\n float area(float radius)\n @{\n-   return 3.14159 * radius * radius;        \n+   return 3.14159 * radius * radius;\n @}\n @end group\n @end smallexample\n@@ -3309,11 +3309,11 @@ look like this:\n @end group\n @end smallexample\n \n-Also warn for dangerous uses of the \n+Also warn for dangerous uses of the\n ?: with omitted middle operand GNU extension. When the condition\n in the ?: operator is a boolean expression the omitted value will\n be always 1. Often the user expects it to be a value computed\n-inside the conditional expression instead. \n+inside the conditional expression instead.\n \n This warning is enabled by @option{-Wall}.\n \n@@ -3538,7 +3538,7 @@ For an automatic variable, if there exists a path from the function\n entry to a use of the variable that is initialized, but there exist\n some other paths the variable is not initialized, the compiler will\n emit a warning if it can not prove the uninitialized paths do not\n-happen at runtime. These warnings are made optional because GCC is \n+happen at runtime. These warnings are made optional because GCC is\n not smart enough to see all the reasons why the code might be correct\n despite appearing to have an error.  Here is one example of how\n this can happen:\n@@ -3758,7 +3758,7 @@ headers---for that, @option{-Wunknown-pragmas} must also be used.\n @opindex Wtrampolines\n @opindex Wno-trampolines\n  Warn about trampolines generated for pointers to nested functions.\n- \n+\n  A trampoline is a small piece of data or code that is created at run\n  time on the stack when the address of a nested function is taken, and\n  is used to call the nested function indirectly.  For some targets, it\n@@ -5875,7 +5875,7 @@ Not all optimizations are controlled directly by a flag.  Only\n optimizations that have a flag are listed in this section.\n \n Most optimizations are only enabled if an @option{-O} level is set on\n-the command line.  Otherwise they are disabled, even if individual             \n+the command line.  Otherwise they are disabled, even if individual\n optimization flags are specified.\n \n Depending on the target and how GCC was configured, a slightly different\n@@ -6634,48 +6634,48 @@ This only makes sense when scheduling after register allocation, i.e.@: with\n \n @item -fsched-group-heuristic\n @opindex fsched-group-heuristic\n-Enable the group heuristic in the scheduler.  This heuristic favors \n-the instruction that belongs to a schedule group.  This is enabled \n-by default when scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+Enable the group heuristic in the scheduler.  This heuristic favors\n+the instruction that belongs to a schedule group.  This is enabled\n+by default when scheduling is enabled, i.e.@: with @option{-fschedule-insns}\n or @option{-fschedule-insns2} or at @option{-O2} or higher.\n \n @item -fsched-critical-path-heuristic\n @opindex fsched-critical-path-heuristic\n-Enable the critical-path heuristic in the scheduler.  This heuristic favors \n-instructions on the critical path.  This is enabled by default when \n-scheduling is enabled, i.e.@: with @option{-fschedule-insns} \n+Enable the critical-path heuristic in the scheduler.  This heuristic favors\n+instructions on the critical path.  This is enabled by default when\n+scheduling is enabled, i.e.@: with @option{-fschedule-insns}\n or @option{-fschedule-insns2} or at @option{-O2} or higher.\n \n @item -fsched-spec-insn-heuristic\n @opindex fsched-spec-insn-heuristic\n-Enable the speculative instruction heuristic in the scheduler.  This \n-heuristic favors speculative instructions with greater dependency weakness.  \n-This is enabled by default when scheduling is enabled, i.e.@: \n-with @option{-fschedule-insns} or @option{-fschedule-insns2} \n+Enable the speculative instruction heuristic in the scheduler.  This\n+heuristic favors speculative instructions with greater dependency weakness.\n+This is enabled by default when scheduling is enabled, i.e.@:\n+with @option{-fschedule-insns} or @option{-fschedule-insns2}\n or at @option{-O2} or higher.\n \n @item -fsched-rank-heuristic\n @opindex fsched-rank-heuristic\n-Enable the rank heuristic in the scheduler.  This heuristic favors \n-the instruction belonging to a basic block with greater size or frequency.  \n-This is enabled by default when scheduling is enabled, i.e.@: \n-with @option{-fschedule-insns} or @option{-fschedule-insns2} or \n+Enable the rank heuristic in the scheduler.  This heuristic favors\n+the instruction belonging to a basic block with greater size or frequency.\n+This is enabled by default when scheduling is enabled, i.e.@:\n+with @option{-fschedule-insns} or @option{-fschedule-insns2} or\n at @option{-O2} or higher.\n \n @item -fsched-last-insn-heuristic\n @opindex fsched-last-insn-heuristic\n-Enable the last-instruction heuristic in the scheduler.  This heuristic \n+Enable the last-instruction heuristic in the scheduler.  This heuristic\n favors the instruction that is less dependent on the last instruction\n-scheduled.  This is enabled by default when scheduling is enabled, \n-i.e.@: with @option{-fschedule-insns} or @option{-fschedule-insns2} or \n+scheduled.  This is enabled by default when scheduling is enabled,\n+i.e.@: with @option{-fschedule-insns} or @option{-fschedule-insns2} or\n at @option{-O2} or higher.\n \n @item -fsched-dep-count-heuristic\n @opindex fsched-dep-count-heuristic\n-Enable the dependent-count heuristic in the scheduler.  This heuristic \n-favors the instruction that has more instructions depending on it.  \n-This is enabled by default when scheduling is enabled, i.e.@: \n-with @option{-fschedule-insns} or @option{-fschedule-insns2} or \n+Enable the dependent-count heuristic in the scheduler.  This heuristic\n+favors the instruction that has more instructions depending on it.\n+This is enabled by default when scheduling is enabled, i.e.@:\n+with @option{-fschedule-insns} or @option{-fschedule-insns2} or\n at @option{-O2} or higher.\n \n @item -freschedule-modulo-scheduled-loops\n@@ -7636,7 +7636,7 @@ With the linker plugin enabled, the linker will extract the needed\n GIMPLE files from @file{libfoo.a} and pass them on to the running GCC\n to make them part of the aggregated GIMPLE image to be optimized.\n \n-If you are not using a linker with linker plugin support and/or do not \n+If you are not using a linker with linker plugin support and/or do not\n enable linker plugin then the objects inside @file{libfoo.a}\n will be extracted and linked as usual, but they will not participate\n in the LTO optimization process.\n@@ -7645,7 +7645,7 @@ Link time optimizations do not require the presence of the whole program to\n operate.  If the program does not require any symbols to be exported, it is\n possible to combine @option{-flto} and with @option{-fwhole-program} to allow\n the interprocedural optimizers to use more aggressive assumptions which may\n-lead to improved optimization opportunities. \n+lead to improved optimization opportunities.\n Use of @option{-fwhole-program} is not needed when linker plugin is\n active (see @option{-fuse-linker-plugin}).\n \n@@ -7666,11 +7666,11 @@ parallel jobs by utilizing an installed @command{make} program.  The\n environment variable @env{MAKE} may be used to override the program\n used.  The default value for @var{n} is 1.\n \n-You can also specify @option{-flto=jobserver} to use GNU make's \n-job server mode to determine the number of parallel jobs. This \n+You can also specify @option{-flto=jobserver} to use GNU make's\n+job server mode to determine the number of parallel jobs. This\n is useful when the Makefile calling GCC is already executing in parallel.\n The parent Makefile will need a @samp{+} prepended to the command recipe\n-for this to work. This will likely only work if @env{MAKE} is \n+for this to work. This will likely only work if @env{MAKE} is\n GNU make.\n \n This option is disabled by default.\n@@ -7707,7 +7707,7 @@ or in GNU ld 2.21 or newer.\n \n This option enables the extraction of object files with GIMPLE bytecode out of\n library archives. This improves the quality of optimization by exposing more\n-code the link time optimizer.  This information specify what symbols \n+code the link time optimizer.  This information specify what symbols\n can be accessed externally (by non-LTO object or during dynamic linking).\n Resulting code quality improvements on binaries (and shared libraries that do\n use hidden visibility) is similar to @code{-fwhole-program}.  See\n@@ -12501,7 +12501,7 @@ in this case.\n @opindex mvzeroupper\n This option instructs GCC to emit a @code{vzeroupper} instruction\n before a transfer of control flow out of the function to minimize\n-AVX to SSE transition penalty as well as remove unnecessary zeroupper \n+AVX to SSE transition penalty as well as remove unnecessary zeroupper\n intrinsics.\n \n @item -mcx16\n@@ -13949,10 +13949,10 @@ This option is deprecated.  Use @option{-fno-zero-initialized-in-bss} instead.\n @item -mcpu=@var{cpu-type}\n @opindex mcpu=\n Use features of and schedule code for given CPU.\n-Supported values are in the format @samp{v@var{X}.@var{YY}.@var{Z}}, \n-where @var{X} is a major version, @var{YY} is the minor version, and \n+Supported values are in the format @samp{v@var{X}.@var{YY}.@var{Z}},\n+where @var{X} is a major version, @var{YY} is the minor version, and\n @var{Z} is compatibility code.  Example values are @samp{v3.00.a},\n-@samp{v4.00.b}, @samp{v5.00.a}, @samp{v5.00.b}, @samp{v5.00.b}, @samp{v6.00.a}. \n+@samp{v4.00.b}, @samp{v5.00.a}, @samp{v5.00.b}, @samp{v5.00.b}, @samp{v6.00.a}.\n \n @item -mxl-soft-mul\n @opindex mxl-soft-mul\n@@ -13995,29 +13995,29 @@ Use hardware floating point conversion instructions.\n Use hardware floating point square root instruction.\n \n @item -mxl-mode-@var{app-model}\n-Select application model @var{app-model}.  Valid models are \n+Select application model @var{app-model}.  Valid models are\n @table @samp\n @item executable\n normal executable (default), uses startup code @file{crt0.o}.\n \n @item xmdstub\n-for use with Xilinx Microprocessor Debugger (XMD) based \n-software intrusive debug agent called xmdstub. This uses startup file \n+for use with Xilinx Microprocessor Debugger (XMD) based\n+software intrusive debug agent called xmdstub. This uses startup file\n @file{crt1.o} and sets the start address of the program to be 0x800.\n \n @item bootstrap\n for applications that are loaded using a bootloader.\n-This model uses startup file @file{crt2.o} which does not contain a processor \n-reset vector handler. This is suitable for transferring control on a \n+This model uses startup file @file{crt2.o} which does not contain a processor\n+reset vector handler. This is suitable for transferring control on a\n processor reset to the bootloader rather than the application.\n \n @item novectors\n-for applications that do not require any of the \n+for applications that do not require any of the\n MicroBlaze vectors. This option may be useful for applications running\n within a monitoring application. This model uses @file{crt3.o} as a startup file.\n @end table\n \n-Option @option{-xl-mode-@var{app-model}} is a deprecated alias for \n+Option @option{-xl-mode-@var{app-model}} is a deprecated alias for\n @option{-mxl-mode-@var{app-model}}.\n \n @end table\n@@ -16784,7 +16784,7 @@ a small dividend to be unlikely, and inv20l assumes it to be likely.\n \n @item -maccumulate-outgoing-args\n @opindex maccumulate-outgoing-args\n-Reserve space once for outgoing arguments in the function prologue rather \n+Reserve space once for outgoing arguments in the function prologue rather\n than around each call.  Generally beneficial for performance and size.  Also\n needed for unwinding to avoid changing the stack frame around conditional code.\n "}, {"sha": "04347aa6dbeb4be7e066897c20de1133c66a9bc1", "filename": "gcc/doc/libgcc.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -502,8 +502,8 @@ The software decimal floating point library implements IEEE 754-2008\n decimal floating point arithmetic and is only activated on selected\n targets.\n \n-The software decimal floating point library supports either DPD \n-(Densely Packed Decimal) or BID (Binary Integer Decimal) encoding \n+The software decimal floating point library supports either DPD\n+(Densely Packed Decimal) or BID (Binary Integer Decimal) encoding\n as selected at configure time.\n \n "}, {"sha": "980c1f79042de1e7d0af3efc46dffd92604591b2", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -498,28 +498,28 @@ syntactic order is important in some classical data dependence tests,\n and mapping this order to the elements of this array avoids costly\n queries to the loop body representation.\n \n-Three types of data references are currently handled: ARRAY_REF, \n-INDIRECT_REF and COMPONENT_REF@. The data structure for the data reference \n-is @code{data_reference}, where @code{data_reference_p} is a name of a \n-pointer to the data reference structure. The structure contains the \n+Three types of data references are currently handled: ARRAY_REF,\n+INDIRECT_REF and COMPONENT_REF@. The data structure for the data reference\n+is @code{data_reference}, where @code{data_reference_p} is a name of a\n+pointer to the data reference structure. The structure contains the\n following elements:\n \n @itemize\n-@item @code{base_object_info}: Provides information about the base object \n-of the data reference and its access functions. These access functions \n-represent the evolution of the data reference in the loop relative to \n-its base, in keeping with the classical meaning of the data reference \n-access function for the support of arrays. For example, for a reference \n-@code{a.b[i][j]}, the base object is @code{a.b} and the access functions, \n-one for each array subscript, are: \n+@item @code{base_object_info}: Provides information about the base object\n+of the data reference and its access functions. These access functions\n+represent the evolution of the data reference in the loop relative to\n+its base, in keeping with the classical meaning of the data reference\n+access function for the support of arrays. For example, for a reference\n+@code{a.b[i][j]}, the base object is @code{a.b} and the access functions,\n+one for each array subscript, are:\n @code{@{i_init, + i_step@}_1, @{j_init, +, j_step@}_2}.\n \n-@item @code{first_location_in_loop}: Provides information about the first \n-location accessed by the data reference in the loop and about the access \n-function used to represent evolution relative to this location. This data \n-is used to support pointers, and is not used for arrays (for which we \n+@item @code{first_location_in_loop}: Provides information about the first\n+location accessed by the data reference in the loop and about the access\n+function used to represent evolution relative to this location. This data\n+is used to support pointers, and is not used for arrays (for which we\n have base objects). Pointer accesses are represented as a one-dimensional\n-access that starts from the first location accessed in the loop. For \n+access that starts from the first location accessed in the loop. For\n example:\n \n @smallexample\n@@ -528,27 +528,27 @@ example:\n           *((int *)p + i + j) = a[i][j];\n @end smallexample\n \n-The access function of the pointer access is @code{@{0, + 4B@}_for2} \n-relative to @code{p + i}. The access functions of the array are \n-@code{@{i_init, + i_step@}_for1} and @code{@{j_init, +, j_step@}_for2} \n+The access function of the pointer access is @code{@{0, + 4B@}_for2}\n+relative to @code{p + i}. The access functions of the array are\n+@code{@{i_init, + i_step@}_for1} and @code{@{j_init, +, j_step@}_for2}\n relative to @code{a}.\n \n-Usually, the object the pointer refers to is either unknown, or we can't \n-prove that the access is confined to the boundaries of a certain object. \n+Usually, the object the pointer refers to is either unknown, or we can't\n+prove that the access is confined to the boundaries of a certain object.\n \n-Two data references can be compared only if at least one of these two \n-representations has all its fields filled for both data references. \n+Two data references can be compared only if at least one of these two\n+representations has all its fields filled for both data references.\n \n-The current strategy for data dependence tests is as follows: \n-If both @code{a} and @code{b} are represented as arrays, compare \n+The current strategy for data dependence tests is as follows:\n+If both @code{a} and @code{b} are represented as arrays, compare\n @code{a.base_object} and @code{b.base_object};\n-if they are equal, apply dependence tests (use access functions based on \n+if they are equal, apply dependence tests (use access functions based on\n base_objects).\n-Else if both @code{a} and @code{b} are represented as pointers, compare \n-@code{a.first_location} and @code{b.first_location}; \n-if they are equal, apply dependence tests (use access functions based on \n+Else if both @code{a} and @code{b} are represented as pointers, compare\n+@code{a.first_location} and @code{b.first_location};\n+if they are equal, apply dependence tests (use access functions based on\n first location).\n-However, if @code{a} and @code{b} are represented differently, only try \n+However, if @code{a} and @code{b} are represented differently, only try\n to prove that the bases are definitely different.\n \n @item Aliasing information.\n@@ -571,7 +571,7 @@ data references, and the description of this dependence relation is\n given in the @code{subscripts}, @code{dir_vects}, and @code{dist_vects}\n arrays,\n @item a boolean that determines whether the dependence relation can be\n-represented by a classical distance vector, \n+represented by a classical distance vector,\n @item an array @code{subscripts} that contains a description of each\n subscript of the data references.  Given two array accesses a\n subscript is the tuple composed of the access functions for a given\n@@ -652,4 +652,4 @@ for the common data dependence tests.\n \n The interface used by the Omega solver for describing the linear\n programming problems is described in @file{omega.h}, and the solver is\n-@code{omega_solve_problem}.  \n+@code{omega_solve_problem}."}, {"sha": "6fdcce5355d9fc674c6af13835fcab7d1865235d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -1967,7 +1967,7 @@ Integer/Floating point constant that can be loaded into a register using\n three instructions\n \n @item m\n-Memory operand.  \n+Memory operand.\n Normally, @code{m} does not allow addresses that update the base register.\n If @samp{<} or @samp{>} constraint is also used, they are allowed and\n therefore on PowerPC targets in that case it is only safe\n@@ -2142,7 +2142,7 @@ Signed 8-bit integer constant.\n 0, 1, 2, or 3 (shifts for the @code{lea} instruction).\n \n @item N\n-Unsigned 8-bit integer constant (for @code{in} and @code{out} \n+Unsigned 8-bit integer constant (for @code{in} and @code{out}\n instructions).\n \n @ifset INTERNALS\n@@ -3022,70 +3022,70 @@ Vector zero\n @item SPU---@file{config/spu/spu.h}\n @table @code\n @item a\n-An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 64 bit value.  \n+An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 64 bit value.\n \n @item c\n-An immediate for and/xor/or instructions.  const_int is treated as a 64 bit value.  \n+An immediate for and/xor/or instructions.  const_int is treated as a 64 bit value.\n \n @item d\n-An immediate for the @code{iohl} instruction.  const_int is treated as a 64 bit value.  \n+An immediate for the @code{iohl} instruction.  const_int is treated as a 64 bit value.\n \n @item f\n-An immediate which can be loaded with @code{fsmbi}.  \n+An immediate which can be loaded with @code{fsmbi}.\n \n @item A\n-An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 32 bit value.  \n+An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 32 bit value.\n \n @item B\n-An immediate for most arithmetic instructions.  const_int is treated as a 32 bit value.  \n+An immediate for most arithmetic instructions.  const_int is treated as a 32 bit value.\n \n @item C\n-An immediate for and/xor/or instructions.  const_int is treated as a 32 bit value.  \n+An immediate for and/xor/or instructions.  const_int is treated as a 32 bit value.\n \n @item D\n-An immediate for the @code{iohl} instruction.  const_int is treated as a 32 bit value.  \n+An immediate for the @code{iohl} instruction.  const_int is treated as a 32 bit value.\n \n @item I\n-A constant in the range [@minus{}64, 63] for shift/rotate instructions.  \n+A constant in the range [@minus{}64, 63] for shift/rotate instructions.\n \n @item J\n-An unsigned 7-bit constant for conversion/nop/channel instructions.  \n+An unsigned 7-bit constant for conversion/nop/channel instructions.\n \n @item K\n-A signed 10-bit constant for most arithmetic instructions.  \n+A signed 10-bit constant for most arithmetic instructions.\n \n @item M\n-A signed 16 bit immediate for @code{stop}.  \n+A signed 16 bit immediate for @code{stop}.\n \n @item N\n-An unsigned 16-bit constant for @code{iohl} and @code{fsmbi}.  \n+An unsigned 16-bit constant for @code{iohl} and @code{fsmbi}.\n \n @item O\n-An unsigned 7-bit constant whose 3 least significant bits are 0.  \n+An unsigned 7-bit constant whose 3 least significant bits are 0.\n \n @item P\n-An unsigned 3-bit constant for 16-byte rotates and shifts \n+An unsigned 3-bit constant for 16-byte rotates and shifts\n \n @item R\n-Call operand, reg, for indirect calls \n+Call operand, reg, for indirect calls\n \n @item S\n-Call operand, symbol, for relative calls.  \n+Call operand, symbol, for relative calls.\n \n @item T\n-Call operand, const_int, for absolute calls.  \n+Call operand, const_int, for absolute calls.\n \n @item U\n-An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is sign extended to 128 bit.  \n+An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is sign extended to 128 bit.\n \n @item W\n-An immediate for shift and rotate instructions.  const_int is treated as a 32 bit value.  \n+An immediate for shift and rotate instructions.  const_int is treated as a 32 bit value.\n \n @item Y\n-An immediate for and/xor/or instructions.  const_int is sign extended as a 128 bit.  \n+An immediate for and/xor/or instructions.  const_int is sign extended as a 128 bit.\n \n @item Z\n-An immediate for the @code{iohl} instruction.  const_int is sign extended to 128 bit.  \n+An immediate for the @code{iohl} instruction.  const_int is sign extended to 128 bit.\n \n @end table\n \n@@ -3435,7 +3435,7 @@ be specially marked, to give @code{reload} more information.\n Machine-specific constraints can be given names of arbitrary length,\n but they must be entirely composed of letters, digits, underscores\n (@samp{_}), and angle brackets (@samp{< >}).  Like C identifiers, they\n-must begin with a letter or underscore. \n+must begin with a letter or underscore.\n \n In order to avoid ambiguity in operand constraint strings, no\n constraint can have a name that begins with any other constraint's\n@@ -3900,15 +3900,15 @@ specify field index and operand 0 place to store value into.\n \n @cindex @code{vec_extract_even@var{m}} instruction pattern\n @item @samp{vec_extract_even@var{m}}\n-Extract even elements from the input vectors (operand 1 and operand 2). \n+Extract even elements from the input vectors (operand 1 and operand 2).\n The even elements of operand 2 are concatenated to the even elements of operand\n-1 in their original order. The result is stored in operand 0. \n-The output and input vectors should have the same modes. \n+1 in their original order. The result is stored in operand 0.\n+The output and input vectors should have the same modes.\n \n @cindex @code{vec_extract_odd@var{m}} instruction pattern\n @item @samp{vec_extract_odd@var{m}}\n-Extract odd elements from the input vectors (operand 1 and operand 2). \n-The odd elements of operand 2 are concatenated to the odd elements of operand \n+Extract odd elements from the input vectors (operand 1 and operand 2).\n+The odd elements of operand 2 are concatenated to the odd elements of operand\n 1 in their original order. The result is stored in operand 0.\n The output and input vectors should have the same modes.\n \n@@ -3923,7 +3923,7 @@ and input vectors should have the same modes (@code{N} elements). The high\n @item @samp{vec_interleave_low@var{m}}\n Merge low elements of the two input vectors into the output vector. The output\n and input vectors should have the same modes (@code{N} elements). The low\n-@code{N/2} elements of the first input vector are interleaved with the low \n+@code{N/2} elements of the first input vector are interleaved with the low\n @code{N/2} elements of the second input vector.\n \n @cindex @code{vec_init@var{m}} instruction pattern\n@@ -4053,17 +4053,17 @@ and the scalar result is stored in the least significant bits of operand 0\n @item @samp{sdot_prod@var{m}}\n @cindex @code{udot_prod@var{m}} instruction pattern\n @item @samp{udot_prod@var{m}}\n-Compute the sum of the products of two signed/unsigned elements. \n-Operand 1 and operand 2 are of the same mode. Their product, which is of a \n-wider mode, is computed and added to operand 3. Operand 3 is of a mode equal or \n+Compute the sum of the products of two signed/unsigned elements.\n+Operand 1 and operand 2 are of the same mode. Their product, which is of a\n+wider mode, is computed and added to operand 3. Operand 3 is of a mode equal or\n wider than the mode of the product. The result is placed in operand 0, which\n-is of the same mode as operand 3. \n+is of the same mode as operand 3.\n \n @cindex @code{ssum_widen@var{m3}} instruction pattern\n @item @samp{ssum_widen@var{m3}}\n @cindex @code{usum_widen@var{m3}} instruction pattern\n @item @samp{usum_widen@var{m3}}\n-Operands 0 and 2 are of the same mode, which is wider than the mode of \n+Operands 0 and 2 are of the same mode, which is wider than the mode of\n operand 1. Add operand 1 to operand 2 and place the widened result in\n operand 0. (This is used express accumulation of elements into an accumulator\n of a wider mode.)\n@@ -7761,7 +7761,7 @@ The forth construction (@samp{absence_set}) means that each functional\n unit in the first string can be reserved only if each pattern of units\n whose names are in the second string is not reserved.  This is an\n asymmetric relation (actually @samp{exclusion_set} is analogous to\n-this one but it is symmetric).  For example it might be useful in a \n+this one but it is symmetric).  For example it might be useful in a\n @acronym{VLIW} description to say that @samp{slot0} cannot be reserved\n after either @samp{slot1} or @samp{slot2} have been reserved.  This\n can be described as:"}, {"sha": "44bd67182a2c831f63b9f6f6d15b8a0ad68dcf6d", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -1029,7 +1029,7 @@ If you want your own collection object to be usable with fast\n enumeration, you need to have it implement the method\n \n @smallexample\n-- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state \n+- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state\n                                       objects: (id *)objects\n                                         count: (unsigned long)len;\n @end smallexample\n@@ -1138,7 +1138,7 @@ the method\n + (BOOL) resolveInstanceMethod: (SEL)selector;\n @end smallexample\n \n-in the case of an instance method, or \n+in the case of an instance method, or\n \n @smallexample\n + (BOOL) resolveClassMethod: (SEL)selector;"}, {"sha": "1fee7d9020e51c5298e02553d495963549fa8c6c", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -435,23 +435,23 @@ The optimizations also use various utility functions contained in\n \n Vectorization.  This pass transforms loops to operate on vector types\n instead of scalar types.  Data parallelism across loop iterations is exploited\n-to group data elements from consecutive iterations into a vector and operate \n-on them in parallel.  Depending on available target support the loop is \n+to group data elements from consecutive iterations into a vector and operate\n+on them in parallel.  Depending on available target support the loop is\n conceptually unrolled by a factor @code{VF} (vectorization factor), which is\n-the number of elements operated upon in parallel in each iteration, and the \n+the number of elements operated upon in parallel in each iteration, and the\n @code{VF} copies of each scalar operation are fused to form a vector operation.\n Additional loop transformations such as peeling and versioning may take place\n-to align the number of iterations, and to align the memory accesses in the \n+to align the number of iterations, and to align the memory accesses in the\n loop.\n The pass is implemented in @file{tree-vectorizer.c} (the main driver),\n-@file{tree-vect-loop.c} and @file{tree-vect-loop-manip.c} (loop specific parts \n-and general loop utilities), @file{tree-vect-slp} (loop-aware SLP \n+@file{tree-vect-loop.c} and @file{tree-vect-loop-manip.c} (loop specific parts\n+and general loop utilities), @file{tree-vect-slp} (loop-aware SLP\n functionality), @file{tree-vect-stmts.c} and @file{tree-vect-data-refs.c}.\n Analysis of data references is in @file{tree-data-ref.c}.\n \n SLP Vectorization.  This pass performs vectorization of straight-line code. The\n pass is implemented in @file{tree-vectorizer.c} (the main driver),\n-@file{tree-vect-slp.c}, @file{tree-vect-stmts.c} and \n+@file{tree-vect-slp.c}, @file{tree-vect-stmts.c} and\n @file{tree-vect-data-refs.c}.\n \n Autoparallelization.  This pass splits the loop iteration space to run\n@@ -470,7 +470,7 @@ This pass applies if-conversion to simple loops to help vectorizer.\n We identify if convertible loops, if-convert statements and merge\n basic blocks in one big block.  The idea is to present loop in such\n form so that vectorizer can have one to one mapping between statements\n-and available vector operations.  This pass is located in \n+and available vector operations.  This pass is located in\n @file{tree-if-conv.c} and is described by @code{pass_if_conversion}.\n \n @item Conditional constant propagation"}, {"sha": "2ab2b62021d5fc0100f75636750390b5aacacd7f", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -14,7 +14,7 @@ Plugins are supported on platforms that support @option{-ldl\n and invoked at pre-determined locations in the compilation\n process.\n \n-Plugins are loaded with \n+Plugins are loaded with\n \n @option{-fplugin=/path/to/@var{name}.so} @option{-fplugin-arg-@var{name}-@var{key1}[=@var{value1}]}\n \n@@ -264,7 +264,7 @@ plugin_init (struct plugin_name_args *plugin_info,\n @end smallexample\n \n \n-@section Interacting with the GCC Garbage Collector \n+@section Interacting with the GCC Garbage Collector\n \n Some plugins may want to be informed when GGC (the GCC Garbage\n Collector) is running. They can register callbacks for the\n@@ -277,7 +277,7 @@ done by registering a callback (called with a null @code{gcc_data})\n for the @code{PLUGIN_GGC_MARKING} event. Such callbacks can call the\n @code{ggc_set_mark} routine, preferably thru the @code{ggc_mark} macro\n (and conversely, these routines should usually not be used in plugins\n-outside of the @code{PLUGIN_GGC_MARKING} event).  \n+outside of the @code{PLUGIN_GGC_MARKING} event).\n \n Some plugins may need to add extra GGC root tables, e.g. to handle their own\n @code{GTY}-ed data. This can be done with the @code{PLUGIN_REGISTER_GGC_ROOTS}\n@@ -336,7 +336,7 @@ static struct attribute_spec user_attr =\n /* Plugin callback called during attribute registration.\n Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)\n */\n-static void \n+static void\n register_attributes (void *event_data, void *data)\n @{\n   warning (0, G_(\"Callback to register attributes\"));\n@@ -356,16 +356,16 @@ pragmas.\n      register_callback (plugin_name, PLUGIN_PRAGMAS,\n                         register_my_pragma, NULL);\n */\n-static void \n-register_my_pragma (void *event_data, void *data) \n+static void\n+register_my_pragma (void *event_data, void *data)\n @{\n   warning (0, G_(\"Callback to register pragmas\"));\n   c_register_pragma (\"GCCPLUGIN\", \"sayhello\", handle_pragma_sayhello);\n @}\n @end smallexample\n \n It is suggested to pass @code{\"GCCPLUGIN\"} (or a short name identifying\n-your plugin) as the ``space'' argument of your pragma. \n+your plugin) as the ``space'' argument of your pragma.\n \n \n @section Recording information about pass execution"}, {"sha": "6995a293c6ccc5a10b99ddbe8745941afb2ac9ce", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -1394,7 +1394,7 @@ Algol or Pascal function variables including a static chain.\n @findex MODE_CC\n @item MODE_CC\n Modes representing condition code values.  These are @code{CCmode} plus\n-any @code{CC_MODE} modes listed in the @file{@var{machine}-modes.def}.  \n+any @code{CC_MODE} modes listed in the @file{@var{machine}-modes.def}.\n @xref{Jump Patterns},\n also see @ref{Condition Code}.\n \n@@ -1755,7 +1755,7 @@ a multi-part @code{reg} that actually refers to several registers.\n \n Each pseudo register has a natural mode.  If it is necessary to\n operate on it in a different mode, the register must be\n-enclosed in a @code{subreg}.  \n+enclosed in a @code{subreg}.\n \n There are currently three supported types for the first operand of a\n @code{subreg}:\n@@ -1812,7 +1812,7 @@ When used as an lvalue, the low-order bits of the source value\n are stored in @var{reg} and the high-order bits are discarded.\n When used as an rvalue, the low-order bits of the @code{subreg} are\n taken from @var{reg} while the high-order bits may or may not be\n-defined.  \n+defined.\n \n The high-order bits of rvalues are in the following circumstances:\n \n@@ -1849,7 +1849,7 @@ would set the lower two bytes of @var{z} to @var{y} and set the upper\n two bytes to an unknown value assuming @code{SUBREG_PROMOTED_VAR_P} is\n false.\n \n-@item Normal subregs \n+@item Normal subregs\n When @var{m1} is at least as narrow as @var{m2} the @code{subreg}\n expression is called @dfn{normal}.\n \n@@ -1898,7 +1898,7 @@ values.  This works because they handle them solely as a collection of\n integer values, with no particular numerical value.  Only real.c and\n the runtime libraries care about @code{FLOAT_WORDS_BIG_ENDIAN}.\n \n-Thus, \n+Thus,\n \n @smallexample\n (subreg:HI (reg:SI @var{x}) 2)\n@@ -2624,9 +2624,9 @@ a set bit indicates it is taken from @var{vec1}.\n This describes an operation that selects parts of a vector.  @var{vec1} is\n the source vector, and @var{selection} is a @code{parallel} that contains a\n @code{const_int} for each of the subparts of the result vector, giving the\n-number of the source subpart that should be stored into it.  \n+number of the source subpart that should be stored into it.\n The result mode @var{m} is either the submode for a single element of\n-@var{vec1} (if only one subpart is selected), or another vector mode \n+@var{vec1} (if only one subpart is selected), or another vector mode\n with that element submode (if multiple subparts are selected).\n \n @findex vec_concat\n@@ -3697,7 +3697,7 @@ A list (chain of @code{insn_list} expressions) giving information about\n dependencies between instructions within a basic block.  Neither a jump\n nor a label may come between the related insns.  These are only used by\n the schedulers and by combine.  This is a deprecated data structure.\n-Def-use and use-def chains are now preferred. \n+Def-use and use-def chains are now preferred.\n \n @findex REG_NOTES\n @item REG_NOTES (@var{i})\n@@ -3808,8 +3808,8 @@ construct.  It is used when the optimization to partition basic blocks\n into hot and cold sections is turned on.\n \n @findex REG_SETJMP\n-@item REG_SETJMP \n-Appears attached to each @code{CALL_INSN} to @code{setjmp} or a \n+@item REG_SETJMP\n+Appears attached to each @code{CALL_INSN} to @code{setjmp} or a\n related function.\n @end table\n "}, {"sha": "81bccc525c0bb2c3482b8d934ea022f73c1e7dfc", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -366,7 +366,7 @@ A copy of @file{texinfo.tex} known to work with the GCC manuals.\n @end table\n \n DVI-formatted manuals are generated by @samp{make dvi}, which uses\n-@command{texi2dvi} (via the Makefile macro @code{$(TEXI2DVI)}).  \n+@command{texi2dvi} (via the Makefile macro @code{$(TEXI2DVI)}).\n PDF-formatted manuals are generated by @samp{make pdf}, which uses\n @command{texi2pdf} (via the Makefile macro @code{$(TEXI2PDF)}).  HTML\n formatted manuals are generated by @samp{make html}.  Info"}, {"sha": "3e9720ab4fc9916f914f1b3f67b2f5650f627a5f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -532,24 +532,24 @@ Any prefixes specified by the user with @option{-B}.\n \n @item\n The environment variable @code{GCC_EXEC_PREFIX} or, if @code{GCC_EXEC_PREFIX}\n-is not set and the compiler has not been installed in the configure-time \n+is not set and the compiler has not been installed in the configure-time\n @var{prefix}, the location in which the compiler has actually been installed.\n \n @item\n The directories specified by the environment variable @code{COMPILER_PATH}.\n \n @item\n The macro @code{STANDARD_EXEC_PREFIX}, if the compiler has been installed\n-in the configured-time @var{prefix}. \n+in the configured-time @var{prefix}.\n \n @item\n-The location @file{/usr/libexec/gcc/}, but only if this is a native compiler. \n+The location @file{/usr/libexec/gcc/}, but only if this is a native compiler.\n \n @item\n-The location @file{/usr/lib/gcc/}, but only if this is a native compiler. \n+The location @file{/usr/lib/gcc/}, but only if this is a native compiler.\n \n @item\n-The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native \n+The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native\n compiler.\n @end enumerate\n \n@@ -569,21 +569,21 @@ The directories specified by the environment variable @code{LIBRARY_PATH}\n \n @item\n The macro @code{STANDARD_EXEC_PREFIX}, but only if the toolchain is installed\n-in the configured @var{prefix} or this is a native compiler. \n+in the configured @var{prefix} or this is a native compiler.\n \n @item\n The location @file{/usr/lib/gcc/}, but only if this is a native compiler.\n \n @item\n-The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native \n+The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native\n compiler.\n \n @item\n-The macro @code{MD_STARTFILE_PREFIX}, if defined, but only if this is a \n+The macro @code{MD_STARTFILE_PREFIX}, if defined, but only if this is a\n native compiler, or we have a target system root.\n \n @item\n-The macro @code{MD_STARTFILE_PREFIX_1}, if defined, but only if this is a \n+The macro @code{MD_STARTFILE_PREFIX_1}, if defined, but only if this is a\n native compiler, or we have a target system root.\n \n @item\n@@ -4413,10 +4413,10 @@ compiled.\n \n @deftypefn {Target Hook} rtx TARGET_LIBCALL_VALUE (enum machine_mode @var{mode}, const_rtx @var{fun})\n Define this hook if the back-end needs to know the name of the libcall\n-function in order to determine where the result should be returned.  \n+function in order to determine where the result should be returned.\n \n The mode of the result is given by @var{mode} and the name of the called\n-library function is given by @var{fun}.  The hook should return an RTX \n+library function is given by @var{fun}.  The hook should return an RTX\n representing the place where the library function result will be returned.\n \n If this hook is not defined, then LIBCALL_VALUE will be used.\n@@ -5145,12 +5145,12 @@ when it is called.\n If the target defines @code{TARGET_ASM_TRAMPOLINE_TEMPLATE}, then the\n first thing this hook should do is emit a block move into @var{m_tramp}\n from the memory block returned by @code{assemble_trampoline_template}.\n-Note that the block move need only cover the constant parts of the \n+Note that the block move need only cover the constant parts of the\n trampoline.  If the target isolates the variable parts of the trampoline\n to the end, not all @code{TRAMPOLINE_SIZE} bytes need be copied.\n \n If the target requires any other actions, such as flushing caches or\n-enabling stack execution, these actions should be performed after \n+enabling stack execution, these actions should be performed after\n initializing the trampoline proper.\n @end deftypefn\n \n@@ -5354,7 +5354,7 @@ A C expression that is 1 if the RTX @var{x} is a constant which\n is a valid address.  On most machines the default definition of\n @code{(CONSTANT_P (@var{x}) && GET_CODE (@var{x}) != CONST_DOUBLE)}\n is acceptable, but a few machines are more restrictive as to which\n-constant addresses are supported. \n+constant addresses are supported.\n @end defmac\n \n @defmac CONSTANT_P (@var{x})\n@@ -5668,7 +5668,7 @@ preserved (e.g.@: used only by a reduction computation). Otherwise, the\n \n @deftypefn {Target Hook} int TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST (enum vect_cost_for_stmt @var{type_of_cost}, tree @var{vectype}, int @var{misalign})\n Returns cost of different scalar or vector statements for vectorization cost model.\n-For vector memory operations the cost may depend on type (@var{vectype}) and \n+For vector memory operations the cost may depend on type (@var{vectype}) and\n misalignment value (@var{misalign}).\n @end deftypefn\n \n@@ -6266,7 +6266,7 @@ than @code{CLEAR_RATIO}.\n @defmac SET_RATIO (@var{speed})\n The threshold of number of scalar move insns, @emph{below} which a sequence\n of insns should be generated to set memory to a constant value, instead of\n-a block set insn or a library call.  \n+a block set insn or a library call.\n Increasing the value will always make code faster, but\n eventually incurs high cost in increased code size.\n \n@@ -6278,8 +6278,8 @@ If you don't define this, it defaults to the value of @code{MOVE_RATIO}.\n \n @defmac SET_BY_PIECES_P (@var{size}, @var{alignment})\n A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant value, or whether some \n-other mechanism will be used.  Used by @code{__builtin_memset} when \n+used to set a chunk of memory to a constant value, or whether some\n+other mechanism will be used.  Used by @code{__builtin_memset} when\n storing values other than constant zero.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{SET_RATIO}.\n@@ -7130,7 +7130,7 @@ must modify the definition of @samp{movsi} to do something appropriate\n when the source operand contains a symbolic address.  You may also\n need to alter the handling of switch statements so that they use\n relative addresses.\n-@c i rearranged the order of the macros above to try to force one of \n+@c i rearranged the order of the macros above to try to force one of\n @c them to the next line, to eliminate an overfull hbox. --mew 10feb93\n \n @defmac PIC_OFFSET_TABLE_REGNUM\n@@ -7289,7 +7289,7 @@ for the file format in use is appropriate.\n \n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_SOURCE_FILENAME (FILE *@var{file}, const char *@var{name})\n Output COFF information or DWARF debugging information which indicates that filename @var{name} is the current source file to the stdio stream @var{file}.\n- \n+\n  This target hook need not be defined if the standard form of output for the file format in use is appropriate.\n @end deftypefn\n \n@@ -7318,7 +7318,7 @@ this section is associated.\n @deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_SECTION (tree @var{decl}, enum node_frequency @var{freq}, bool @var{startup}, bool @var{exit})\n Return preferred text (sub)section for function @var{decl}.\n Main purpose of this function is to separate cold, normal and hot\n-functions. @var{startup} is true when function is known to be used only \n+functions. @var{startup} is true when function is known to be used only\n at startup (from static constructors or it is @code{main()}).\n @var{exit} is true when function is known to be used only at exit\n (from static destructors).\n@@ -10533,14 +10533,14 @@ given mode.\n @defmac CLZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n @defmacx CTZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n A C expression that indicates whether the architecture defines a value\n-for @code{clz} or @code{ctz} with a zero operand.  \n+for @code{clz} or @code{ctz} with a zero operand.\n A result of @code{0} indicates the value is undefined.\n If the value is defined for only the RTL expression, the macro should\n evaluate to @code{1}; if the value applies also to the corresponding optab\n entry (which is normally the case if it expands directly into\n-the corresponding RTL), then the macro should evaluate to @code{2}.  \n+the corresponding RTL), then the macro should evaluate to @code{2}.\n In the cases where the value is defined, @var{value} should be set to\n-this value.  \n+this value.\n \n If this macro is not defined, the value of @code{clz} or\n @code{ctz} at zero is assumed to be undefined.\n@@ -10573,7 +10573,7 @@ to @code{Pmode}.\n @defmac FUNCTION_MODE\n An alias for the machine mode used for memory references to functions\n being called, in @code{call} RTL expressions.  On most CISC machines,\n-where an instruction can begin at any byte address, this should be \n+where an instruction can begin at any byte address, this should be\n @code{QImode}.  On most RISC machines, where all instructions have fixed\n size and alignment, this should be a mode with the same size and alignment\n as the machine instruction words - typically @code{SImode} or @code{HImode}.\n@@ -10960,7 +10960,7 @@ passed along.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SET_CURRENT_FUNCTION (tree @var{decl})\n-The compiler invokes this hook whenever it changes its current function \n+The compiler invokes this hook whenever it changes its current function\n context (@code{cfun}).  You can define this function if\n the back end needs to perform any initialization or reset actions on a\n per-function basis.  For example, it may be used to implement function\n@@ -11174,32 +11174,32 @@ the front end.\n \n @deftypefn {Target Hook} {const char *} TARGET_INVALID_PARAMETER_TYPE (const_tree @var{type})\n If defined, this macro returns the diagnostic message when it is\n-invalid for functions to include parameters of type @var{type}, \n+invalid for functions to include parameters of type @var{type},\n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @deftypefn {Target Hook} {const char *} TARGET_INVALID_RETURN_TYPE (const_tree @var{type})\n If defined, this macro returns the diagnostic message when it is\n-invalid for functions to have return type @var{type}, \n+invalid for functions to have return type @var{type},\n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_PROMOTED_TYPE (const_tree @var{type})\n-If defined, this target hook returns the type to which values of \n-@var{type} should be promoted when they appear in expressions, \n+If defined, this target hook returns the type to which values of\n+@var{type} should be promoted when they appear in expressions,\n analogous to the integer promotions, or @code{NULL_TREE} to use the\n front end's normal promotion rules.  This hook is useful when there are\n target-specific types with special promotion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_CONVERT_TO_TYPE (tree @var{type}, tree @var{expr})\n-If defined, this hook returns the result of converting @var{expr} to \n-@var{type}.  It should return the converted expression, \n+If defined, this hook returns the result of converting @var{expr} to\n+@var{type}.  It should return the converted expression,\n or @code{NULL_TREE} to apply the front end's normal conversion rules.\n-This hook is useful when there are target-specific types with special \n+This hook is useful when there are target-specific types with special\n conversion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n@@ -11217,7 +11217,7 @@ NeXT runtime. By default, OBJC_JBLEN is defined to an innocuous value.\n \n @defmac LIBGCC2_UNWIND_ATTRIBUTE\n Define this macro if any target-specific attributes need to be attached\n-to the functions in @file{libgcc} that provide low-level support for \n+to the functions in @file{libgcc} that provide low-level support for\n call stack unwinding.  It is used in declarations in @file{unwind-generic.h}\n and the associated definitions of those functions.\n @end defmac"}, {"sha": "d31e5e305bbd777ddce1dd40543270c0ff4879c0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -532,24 +532,24 @@ Any prefixes specified by the user with @option{-B}.\n \n @item\n The environment variable @code{GCC_EXEC_PREFIX} or, if @code{GCC_EXEC_PREFIX}\n-is not set and the compiler has not been installed in the configure-time \n+is not set and the compiler has not been installed in the configure-time\n @var{prefix}, the location in which the compiler has actually been installed.\n \n @item\n The directories specified by the environment variable @code{COMPILER_PATH}.\n \n @item\n The macro @code{STANDARD_EXEC_PREFIX}, if the compiler has been installed\n-in the configured-time @var{prefix}. \n+in the configured-time @var{prefix}.\n \n @item\n-The location @file{/usr/libexec/gcc/}, but only if this is a native compiler. \n+The location @file{/usr/libexec/gcc/}, but only if this is a native compiler.\n \n @item\n-The location @file{/usr/lib/gcc/}, but only if this is a native compiler. \n+The location @file{/usr/lib/gcc/}, but only if this is a native compiler.\n \n @item\n-The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native \n+The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native\n compiler.\n @end enumerate\n \n@@ -569,21 +569,21 @@ The directories specified by the environment variable @code{LIBRARY_PATH}\n \n @item\n The macro @code{STANDARD_EXEC_PREFIX}, but only if the toolchain is installed\n-in the configured @var{prefix} or this is a native compiler. \n+in the configured @var{prefix} or this is a native compiler.\n \n @item\n The location @file{/usr/lib/gcc/}, but only if this is a native compiler.\n \n @item\n-The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native \n+The macro @code{MD_EXEC_PREFIX}, if defined, but only if this is a native\n compiler.\n \n @item\n-The macro @code{MD_STARTFILE_PREFIX}, if defined, but only if this is a \n+The macro @code{MD_STARTFILE_PREFIX}, if defined, but only if this is a\n native compiler, or we have a target system root.\n \n @item\n-The macro @code{MD_STARTFILE_PREFIX_1}, if defined, but only if this is a \n+The macro @code{MD_STARTFILE_PREFIX_1}, if defined, but only if this is a\n native compiler, or we have a target system root.\n \n @item\n@@ -4371,10 +4371,10 @@ compiled.\n \n @hook TARGET_LIBCALL_VALUE\n Define this hook if the back-end needs to know the name of the libcall\n-function in order to determine where the result should be returned.  \n+function in order to determine where the result should be returned.\n \n The mode of the result is given by @var{mode} and the name of the called\n-library function is given by @var{fun}.  The hook should return an RTX \n+library function is given by @var{fun}.  The hook should return an RTX\n representing the place where the library function result will be returned.\n \n If this hook is not defined, then LIBCALL_VALUE will be used.\n@@ -5097,12 +5097,12 @@ when it is called.\n If the target defines @code{TARGET_ASM_TRAMPOLINE_TEMPLATE}, then the\n first thing this hook should do is emit a block move into @var{m_tramp}\n from the memory block returned by @code{assemble_trampoline_template}.\n-Note that the block move need only cover the constant parts of the \n+Note that the block move need only cover the constant parts of the\n trampoline.  If the target isolates the variable parts of the trampoline\n to the end, not all @code{TRAMPOLINE_SIZE} bytes need be copied.\n \n If the target requires any other actions, such as flushing caches or\n-enabling stack execution, these actions should be performed after \n+enabling stack execution, these actions should be performed after\n initializing the trampoline proper.\n @end deftypefn\n \n@@ -5306,7 +5306,7 @@ A C expression that is 1 if the RTX @var{x} is a constant which\n is a valid address.  On most machines the default definition of\n @code{(CONSTANT_P (@var{x}) && GET_CODE (@var{x}) != CONST_DOUBLE)}\n is acceptable, but a few machines are more restrictive as to which\n-constant addresses are supported. \n+constant addresses are supported.\n @end defmac\n \n @defmac CONSTANT_P (@var{x})\n@@ -5620,7 +5620,7 @@ preserved (e.g.@: used only by a reduction computation). Otherwise, the\n \n @hook TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n Returns cost of different scalar or vector statements for vectorization cost model.\n-For vector memory operations the cost may depend on type (@var{vectype}) and \n+For vector memory operations the cost may depend on type (@var{vectype}) and\n misalignment value (@var{misalign}).\n @end deftypefn\n \n@@ -6218,7 +6218,7 @@ than @code{CLEAR_RATIO}.\n @defmac SET_RATIO (@var{speed})\n The threshold of number of scalar move insns, @emph{below} which a sequence\n of insns should be generated to set memory to a constant value, instead of\n-a block set insn or a library call.  \n+a block set insn or a library call.\n Increasing the value will always make code faster, but\n eventually incurs high cost in increased code size.\n \n@@ -6230,8 +6230,8 @@ If you don't define this, it defaults to the value of @code{MOVE_RATIO}.\n \n @defmac SET_BY_PIECES_P (@var{size}, @var{alignment})\n A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant value, or whether some \n-other mechanism will be used.  Used by @code{__builtin_memset} when \n+used to set a chunk of memory to a constant value, or whether some\n+other mechanism will be used.  Used by @code{__builtin_memset} when\n storing values other than constant zero.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{SET_RATIO}.\n@@ -7077,7 +7077,7 @@ must modify the definition of @samp{movsi} to do something appropriate\n when the source operand contains a symbolic address.  You may also\n need to alter the handling of switch statements so that they use\n relative addresses.\n-@c i rearranged the order of the macros above to try to force one of \n+@c i rearranged the order of the macros above to try to force one of\n @c them to the next line, to eliminate an overfull hbox. --mew 10feb93\n \n @defmac PIC_OFFSET_TABLE_REGNUM\n@@ -7261,7 +7261,7 @@ this section is associated.\n @hook TARGET_ASM_FUNCTION_SECTION\n Return preferred text (sub)section for function @var{decl}.\n Main purpose of this function is to separate cold, normal and hot\n-functions. @var{startup} is true when function is known to be used only \n+functions. @var{startup} is true when function is known to be used only\n at startup (from static constructors or it is @code{main()}).\n @var{exit} is true when function is known to be used only at exit\n (from static destructors).\n@@ -10459,14 +10459,14 @@ given mode.\n @defmac CLZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n @defmacx CTZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n A C expression that indicates whether the architecture defines a value\n-for @code{clz} or @code{ctz} with a zero operand.  \n+for @code{clz} or @code{ctz} with a zero operand.\n A result of @code{0} indicates the value is undefined.\n If the value is defined for only the RTL expression, the macro should\n evaluate to @code{1}; if the value applies also to the corresponding optab\n entry (which is normally the case if it expands directly into\n-the corresponding RTL), then the macro should evaluate to @code{2}.  \n+the corresponding RTL), then the macro should evaluate to @code{2}.\n In the cases where the value is defined, @var{value} should be set to\n-this value.  \n+this value.\n \n If this macro is not defined, the value of @code{clz} or\n @code{ctz} at zero is assumed to be undefined.\n@@ -10499,7 +10499,7 @@ to @code{Pmode}.\n @defmac FUNCTION_MODE\n An alias for the machine mode used for memory references to functions\n being called, in @code{call} RTL expressions.  On most CISC machines,\n-where an instruction can begin at any byte address, this should be \n+where an instruction can begin at any byte address, this should be\n @code{QImode}.  On most RISC machines, where all instructions have fixed\n size and alignment, this should be a mode with the same size and alignment\n as the machine instruction words - typically @code{SImode} or @code{HImode}.\n@@ -10884,7 +10884,7 @@ passed along.\n @end deftypefn\n \n @hook TARGET_SET_CURRENT_FUNCTION\n-The compiler invokes this hook whenever it changes its current function \n+The compiler invokes this hook whenever it changes its current function\n context (@code{cfun}).  You can define this function if\n the back end needs to perform any initialization or reset actions on a\n per-function basis.  For example, it may be used to implement function\n@@ -11098,32 +11098,32 @@ the front end.\n \n @hook TARGET_INVALID_PARAMETER_TYPE\n If defined, this macro returns the diagnostic message when it is\n-invalid for functions to include parameters of type @var{type}, \n+invalid for functions to include parameters of type @var{type},\n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @hook TARGET_INVALID_RETURN_TYPE\n If defined, this macro returns the diagnostic message when it is\n-invalid for functions to have return type @var{type}, \n+invalid for functions to have return type @var{type},\n or @code{NULL} if validity should be determined by\n the front end.  This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @hook TARGET_PROMOTED_TYPE\n-If defined, this target hook returns the type to which values of \n-@var{type} should be promoted when they appear in expressions, \n+If defined, this target hook returns the type to which values of\n+@var{type} should be promoted when they appear in expressions,\n analogous to the integer promotions, or @code{NULL_TREE} to use the\n front end's normal promotion rules.  This hook is useful when there are\n target-specific types with special promotion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n @hook TARGET_CONVERT_TO_TYPE\n-If defined, this hook returns the result of converting @var{expr} to \n-@var{type}.  It should return the converted expression, \n+If defined, this hook returns the result of converting @var{expr} to\n+@var{type}.  It should return the converted expression,\n or @code{NULL_TREE} to apply the front end's normal conversion rules.\n-This hook is useful when there are target-specific types with special \n+This hook is useful when there are target-specific types with special\n conversion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n@@ -11141,7 +11141,7 @@ NeXT runtime. By default, OBJC_JBLEN is defined to an innocuous value.\n \n @defmac LIBGCC2_UNWIND_ATTRIBUTE\n Define this macro if any target-specific attributes need to be attached\n-to the functions in @file{libgcc} that provide low-level support for \n+to the functions in @file{libgcc} that provide low-level support for\n call stack unwinding.  It is used in declarations in @file{unwind-generic.h}\n and the associated definitions of those functions.\n @end defmac"}, {"sha": "b09b094560b5bfd137be21169bbe61469fc962fa", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ce160cb3b6f74269e2a1808146e5e86d4bd77/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=ff2ce160cb3b6f74269e2a1808146e5e86d4bd77", "patch": "@@ -184,7 +184,7 @@ must be made to @code{update_stmt} when complete.  Calling one of the\n call to @code{update_stmt}.\n \n @subsection Operand Iterators And Access Routines\n-@cindex Operand Iterators \n+@cindex Operand Iterators\n @cindex Operand Access Routines\n \n Operands are collected by @file{tree-ssa-operands.c}.  They are stored\n@@ -194,9 +194,9 @@ operand iterators or an access routine.\n The following access routines are available for examining operands:\n \n @enumerate\n-@item @code{SINGLE_SSA_@{USE,DEF,TREE@}_OPERAND}: These accessors will return \n-NULL unless there is exactly one operand matching the specified flags.  If \n-there is exactly one operand, the operand is returned as either a @code{tree}, \n+@item @code{SINGLE_SSA_@{USE,DEF,TREE@}_OPERAND}: These accessors will return\n+NULL unless there is exactly one operand matching the specified flags.  If\n+there is exactly one operand, the operand is returned as either a @code{tree},\n @code{def_operand_p}, or @code{use_operand_p}.\n \n @smallexample\n@@ -205,16 +205,16 @@ use_operand_p u = SINGLE_SSA_USE_OPERAND (stmt, SSA_ALL_VIRTUAL_USES);\n def_operand_p d = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_ALL_DEFS);\n @end smallexample\n \n-@item @code{ZERO_SSA_OPERANDS}: This macro returns true if there are no \n+@item @code{ZERO_SSA_OPERANDS}: This macro returns true if there are no\n operands matching the specified flags.\n \n @smallexample\n if (ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n   return;\n @end smallexample\n \n-@item @code{NUM_SSA_OPERANDS}: This macro Returns the number of operands \n-matching 'flags'.  This actually executes a loop to perform the count, so \n+@item @code{NUM_SSA_OPERANDS}: This macro Returns the number of operands\n+matching 'flags'.  This actually executes a loop to perform the count, so\n only use this if it is really needed.\n \n @smallexample\n@@ -331,8 +331,8 @@ documentation in @file{tree-ssa-operands.h}.\n There are also a couple of variants on the stmt iterators regarding PHI\n nodes.\n \n-@code{FOR_EACH_PHI_ARG} Works exactly like \n-@code{FOR_EACH_SSA_USE_OPERAND}, except it works over @code{PHI} arguments \n+@code{FOR_EACH_PHI_ARG} Works exactly like\n+@code{FOR_EACH_SSA_USE_OPERAND}, except it works over @code{PHI} arguments\n instead of statement operands.\n \n @smallexample\n@@ -351,10 +351,10 @@ FOR_EACH_PHI_ARG (use_p, phi_stmt, iter, SSA_OP_ALL_USES)\n   my_code;\n @end smallexample\n \n-@code{FOR_EACH_PHI_OR_STMT_@{USE,DEF@}} works exactly like \n+@code{FOR_EACH_PHI_OR_STMT_@{USE,DEF@}} works exactly like\n @code{FOR_EACH_SSA_@{USE,DEF@}_OPERAND}, except it will function on\n either a statement or a @code{PHI} node.  These should be used when it is\n-appropriate but they are not quite as efficient as the individual \n+appropriate but they are not quite as efficient as the individual\n @code{FOR_EACH_PHI} and @code{FOR_EACH_SSA} routines.\n \n @smallexample\n@@ -372,7 +372,7 @@ FOR_EACH_PHI_OR_STMT_DEF (def_operand_p, phi, iter, flags)\n @subsection Immediate Uses\n @cindex Immediate Uses\n \n-Immediate use information is now always available.  Using the immediate use \n+Immediate use information is now always available.  Using the immediate use\n iterators, you may examine every use of any @code{SSA_NAME}. For instance,\n to change each use of @code{ssa_var} to @code{ssa_var2} and call fold_stmt on\n each stmt after that is done:\n@@ -393,18 +393,18 @@ each stmt after that is done:\n \n There are 2 iterators which can be used. @code{FOR_EACH_IMM_USE_FAST} is\n used when the immediate uses are not changed, i.e., you are looking at the\n-uses, but not setting them.  \n+uses, but not setting them.\n \n-If they do get changed, then care must be taken that things are not changed \n-under the iterators, so use the @code{FOR_EACH_IMM_USE_STMT} and \n-@code{FOR_EACH_IMM_USE_ON_STMT} iterators.  They attempt to preserve the \n-sanity of the use list by moving all the uses for a statement into \n-a controlled position, and then iterating over those uses.  Then the \n+If they do get changed, then care must be taken that things are not changed\n+under the iterators, so use the @code{FOR_EACH_IMM_USE_STMT} and\n+@code{FOR_EACH_IMM_USE_ON_STMT} iterators.  They attempt to preserve the\n+sanity of the use list by moving all the uses for a statement into\n+a controlled position, and then iterating over those uses.  Then the\n optimization can manipulate the stmt when all the uses have been\n-processed.  This is a little slower than the FAST version since it adds a \n-placeholder element and must sort through the list a bit for each statement.  \n-This placeholder element must be also be removed if the loop is \n-terminated early.  The macro @code{BREAK_FROM_IMM_USE_SAFE} is provided \n+processed.  This is a little slower than the FAST version since it adds a\n+placeholder element and must sort through the list a bit for each statement.\n+This placeholder element must be also be removed if the loop is\n+terminated early.  The macro @code{BREAK_FROM_IMM_USE_SAFE} is provided\n to do this :\n \n @smallexample\n@@ -420,15 +420,15 @@ to do this :\n @end smallexample\n \n There are checks in @code{verify_ssa} which verify that the immediate use list\n-is up to date, as well as checking that an optimization didn't break from the \n-loop without using this macro.  It is safe to simply 'break'; from a \n+is up to date, as well as checking that an optimization didn't break from the\n+loop without using this macro.  It is safe to simply 'break'; from a\n @code{FOR_EACH_IMM_USE_FAST} traverse.\n \n Some useful functions and macros:\n @enumerate\n @item  @code{has_zero_uses (ssa_var)} : Returns true if there are no uses of\n @code{ssa_var}.\n-@item   @code{has_single_use (ssa_var)} : Returns true if there is only a \n+@item   @code{has_single_use (ssa_var)} : Returns true if there is only a\n single use of @code{ssa_var}.\n @item   @code{single_imm_use (ssa_var, use_operand_p *ptr, tree *stmt)} :\n Returns true if there is only a single use of @code{ssa_var}, and also returns\n@@ -443,18 +443,18 @@ isn't located in a @code{PHI} node.\n @end enumerate\n \n Note that uses are not put into an immediate use list until their statement is\n-actually inserted into the instruction stream via a @code{bsi_*} routine.  \n+actually inserted into the instruction stream via a @code{bsi_*} routine.\n \n-It is also still possible to utilize lazy updating of statements, but this \n-should be used only when absolutely required.  Both alias analysis and the \n-dominator optimizations currently do this.  \n+It is also still possible to utilize lazy updating of statements, but this\n+should be used only when absolutely required.  Both alias analysis and the\n+dominator optimizations currently do this.\n \n-When lazy updating is being used, the immediate use information is out of date \n+When lazy updating is being used, the immediate use information is out of date\n and cannot be used reliably.  Lazy updating is achieved by simply marking\n-statements modified via calls to @code{mark_stmt_modified} instead of \n-@code{update_stmt}.  When lazy updating is no longer required, all the \n-modified statements must have @code{update_stmt} called in order to bring them \n-up to date.  This must be done before the optimization is finished, or \n+statements modified via calls to @code{mark_stmt_modified} instead of\n+@code{update_stmt}.  When lazy updating is no longer required, all the\n+modified statements must have @code{update_stmt} called in order to bring them\n+up to date.  This must be done before the optimization is finished, or\n @code{verify_ssa} will trigger an abort.\n \n This is done with a simple loop over the instruction stream:\n@@ -561,7 +561,7 @@ Some optimization passes make changes to the function that\n invalidate the SSA property.  This can happen when a pass has\n added new symbols or changed the program so that variables that\n were previously aliased aren't anymore.  Whenever something like this\n-happens, the affected symbols must be renamed into SSA form again.  \n+happens, the affected symbols must be renamed into SSA form again.\n Transformations that emit new code or replicate existing statements\n will also need to update the SSA form@.\n "}]}