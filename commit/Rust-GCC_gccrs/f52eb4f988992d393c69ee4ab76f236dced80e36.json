{"sha": "f52eb4f988992d393c69ee4ab76f236dced80e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyZWI0Zjk4ODk5MmQzOTNjNjllZTRhYjc2ZjIzNmRjZWQ4MGUzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T19:22:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T19:22:05Z"}, "message": "vect: Fix up lowering of TRUNC_MOD_EXPR by negative constant [PR94524]\n\nThe first testcase below is miscompiled, because for the division part\nof the lowering we canonicalize negative divisors to their absolute value\n(similarly how expmed.c canonicalizes it), but when multiplying the division\nresult back by the VECTOR_CST, we use the original constant, which can\ncontain negative divisors.\n\nFixed by computing ABS_EXPR of the VECTOR_CST.  Unfortunately, fold-const.c\ndoesn't support const_unop (ABS_EXPR, VECTOR_CST) and I think it is too late\nin GCC 10 cycle to add it now.\n\nFurthermore, while modulo by most negative constant happens to return the\nright value, it does that only by invoking UB in the IL, because\nwe then expand division by that 1U+INT_MAX and say for INT_MIN % INT_MIN\ncompute the division as -1, and then multiply by INT_MIN, which is signed\ninteger overflow.  We in theory could do the computation in unsigned vector\ntypes instead, but is it worth bothering.  People that are doing % INT_MIN\nare either testing for standard conformance, or doing something wrong.\nSo, I've also added punting on % INT_MIN, both in vect lowering and vect\npattern recognition (we punt already for / INT_MIN).\n\n2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94524\n\t* tree-vect-generic.c (expand_vector_divmod): If any elt of op1 is\n\tnegative for signed TRUNC_MOD_EXPR, multiply with absolute value of\n\top1 rather than op1 itself at the end.  Punt for signed modulo by\n\tmost negative constant.\n\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Punt for signed\n\tmodulo by most negative constant.\n\n\t* gcc.c-torture/execute/pr94524-1.c: New test.\n\t* gcc.c-torture/execute/pr94524-2.c: New test.", "tree": {"sha": "f0e536209ea52b193d614cd54c906c4b24d9e607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e536209ea52b193d614cd54c906c4b24d9e607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f52eb4f988992d393c69ee4ab76f236dced80e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52eb4f988992d393c69ee4ab76f236dced80e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52eb4f988992d393c69ee4ab76f236dced80e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52eb4f988992d393c69ee4ab76f236dced80e36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9a711575d8fdf9e75f01d7a0e84d558600df40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9a711575d8fdf9e75f01d7a0e84d558600df40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9a711575d8fdf9e75f01d7a0e84d558600df40"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "dcdfae1ae8cfb8013b2dd2bc6aeaefbbf07582c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -1,3 +1,13 @@\n+2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94524\n+\t* tree-vect-generic.c (expand_vector_divmod): If any elt of op1 is\n+\tnegative for signed TRUNC_MOD_EXPR, multiply with absolute value of\n+\top1 rather than op1 itself at the end.  Punt for signed modulo by\n+\tmost negative constant.\n+\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Punt for signed\n+\tmodulo by most negative constant.\n+\n 2020-04-08  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/93946"}, {"sha": "134280d1369e8f68c3dad8a91328e4f46368c8d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -1,5 +1,9 @@\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94524\n+\t* gcc.c-torture/execute/pr94524-1.c: New test.\n+\t* gcc.c-torture/execute/pr94524-2.c: New test.\n+\n \tPR c++/94314\n \t* g++.dg/pr94314.C (A::operator new, B::operator new, C::operator new):\n \tUse __SIZE_TYPE__ instead of unsigned long."}, {"sha": "e7365ad97fd1c69614c5472223dbc42b8a1dfc55", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94524-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-1.c?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/94524 */\n+\n+typedef signed char __attribute__ ((__vector_size__ (16))) V;\n+\n+static __attribute__ ((__noinline__, __noclone__)) V\n+foo (V c)\n+{\n+  c %= (signed char) -19;\n+  return (V) c;\n+}\n+\n+int\n+main ()\n+{\n+  V x = foo ((V) { 31 });\n+  if (x[0] != 12)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9c74b7be403567fac04b25d77d9b1bf2bf2f5c9d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94524-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94524-2.c?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -0,0 +1,25 @@\n+/* PR tree-optimization/94524 */\n+\n+typedef signed char __attribute__ ((__vector_size__ (16))) V;\n+\n+static __attribute__ ((__noinline__, __noclone__)) V\n+foo (V c)\n+{\n+  c %= (signed char) -128;\n+  return (V) c;\n+}\n+\n+int\n+main ()\n+{\n+  V x = foo ((V) { -128 });\n+  if (x[0] != 0)\n+    __builtin_abort ();\n+  x = foo ((V) { -127 });\n+  if (x[0] != -127)\n+    __builtin_abort ();\n+  x = foo ((V) { 127 });\n+  if (x[0] != 127)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8b00f3250543e1b95630aa372b8a6429318f3d3d", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -478,6 +478,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n {\n   bool use_pow2 = true;\n   bool has_vector_shift = true;\n+  bool use_abs_op1 = false;\n   int mode = -1, this_mode;\n   int pre_shift = -1, post_shift;\n   unsigned int nunits = nunits_for_known_piecewise_op (type);\n@@ -618,8 +619,11 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \n \t  /* n rem d = n rem -d */\n \t  if (code == TRUNC_MOD_EXPR && d < 0)\n-\t    d = abs_d;\n-\t  else if (abs_d == HOST_WIDE_INT_1U << (prec - 1))\n+\t    {\n+\t      d = abs_d;\n+\t      use_abs_op1 = true;\n+\t    }\n+\t  if (abs_d == HOST_WIDE_INT_1U << (prec - 1))\n \t    {\n \t      /* This case is not handled correctly below.  */\n \t      mode = -2;\n@@ -899,6 +903,23 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   if (op == unknown_optab\n       || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n     return NULL_TREE;\n+  if (use_abs_op1)\n+    {\n+      tree_vector_builder elts;\n+      if (!elts.new_unary_operation (type, op1, false))\n+\treturn NULL_TREE;\n+      unsigned int count = elts.encoded_nelts ();\n+      for (unsigned int i = 0; i < count; ++i)\n+\t{\n+\t  tree elem1 = VECTOR_CST_ELT (op1, i);\n+\n+\t  tree elt = const_unop (ABS_EXPR, TREE_TYPE (elem1), elem1);\n+\t  if (elt == NULL_TREE)\n+\t    return NULL_TREE;\n+\t  elts.quick_push (elt);\n+\t}\n+      op1 = elts.build ();\n+    }\n   tem = gimplify_build2 (gsi, MULT_EXPR, type, cur_op, op1);\n   op = optab_for_tree_code (MINUS_EXPR, type, optab_default);\n   if (op == unknown_optab"}, {"sha": "dd0c19dc5e50e3cc11e0aa1a86a22114fdee20c5", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52eb4f988992d393c69ee4ab76f236dced80e36/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=f52eb4f988992d393c69ee4ab76f236dced80e36", "patch": "@@ -3365,8 +3365,8 @@ vect_recog_divmod_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \t  d = abs_d;\n \t  oprnd1 = build_int_cst (itype, abs_d);\n \t}\n-      else if (HOST_BITS_PER_WIDE_INT >= prec\n-\t       && abs_d == HOST_WIDE_INT_1U << (prec - 1))\n+      if (HOST_BITS_PER_WIDE_INT >= prec\n+\t  && abs_d == HOST_WIDE_INT_1U << (prec - 1))\n \t/* This case is not handled correctly below.  */\n \treturn NULL;\n "}]}