{"sha": "6a4d67604e3bf62a35668b98cf87465d5be73ec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ZDY3NjA0ZTNiZjYyYTM1NjY4Yjk4Y2Y4NzQ2NWQ1YmU3M2VjMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-05-20T18:06:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-05-20T18:06:55Z"}, "message": "params.c: Fix formatting.\n\n\t* params.c: Fix formatting.\n\t* params.h: Likewise.\n\t* predict.c: Likewise.\n\t* prefix.c: Likewise.\n\t* print-rtl.c: Likewise.\n\t* print-tree.c: Likewise.\n\t* profile.c: Likewise.\n\nFrom-SVN: r53670", "tree": {"sha": "6f48ee558ae32b2a271ec40182fded8214a3342f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f48ee558ae32b2a271ec40182fded8214a3342f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4d67604e3bf62a35668b98cf87465d5be73ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4d67604e3bf62a35668b98cf87465d5be73ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4d67604e3bf62a35668b98cf87465d5be73ec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4d67604e3bf62a35668b98cf87465d5be73ec3/comments", "author": null, "committer": null, "parents": [{"sha": "fe1cc883cd4a3c6095219d60a72213bbd4ac5b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1cc883cd4a3c6095219d60a72213bbd4ac5b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1cc883cd4a3c6095219d60a72213bbd4ac5b81"}], "stats": {"total": 143, "additions": 75, "deletions": 68}, "files": [{"sha": "dc31e66ff0b6c3fe2cc068868ee4a89264f62748", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -1,3 +1,13 @@\n+2002-05-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* params.c: Fix formatting.\n+\t* params.h: Likewise.\n+\t* predict.c: Likewise.\n+\t* prefix.c: Likewise.\n+\t* print-rtl.c: Likewise.\n+\t* print-tree.c: Likewise.\n+\t* profile.c: Likewise.\n+\n 2002-05-20  H.J. Lu  (hjl@gnu.org)\n \n \t* gcc/config/mips/linux.h (SDB_DEBUGGING_INFO): Undefine."}, {"sha": "72c67bebf3bf749586875b3b921a75c8b689a555", "filename": "gcc/params.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -37,14 +37,14 @@ static size_t num_compiler_params;\n \n /* Add the N PARAMS to the current list of compiler parameters.  */\n \n-void \n+void\n add_params (params, n)\n      const param_info params[];\n      size_t n;\n {\n   /* Allocate enough space for the new parameters.  */\n-  compiler_params = \n-    ((param_info *) \n+  compiler_params =\n+    ((param_info *)\n      xrealloc (compiler_params,\n \t       (num_compiler_params + n) * sizeof (param_info)));\n   /* Copy them into the table.  */\n@@ -79,6 +79,3 @@ set_param_value (name, value)\n   /* If we didn't find this parameter, issue an error message.  */\n   error (\"invalid parameter `%s'\", name);\n }\n-\n-     \n-  "}, {"sha": "27021aa7c7ded49f5388fa6a02eafd1fa935550a", "filename": "gcc/params.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -59,7 +59,7 @@ extern param_info *compiler_params;\n \n /* Add the N PARAMS to the current list of compiler parameters.  */\n \n-extern void add_params \n+extern void add_params\n   PARAMS ((const param_info params[], size_t n));\n \n /* Set the VALUE associated with the parameter given by NAME.  */\n@@ -75,14 +75,14 @@ typedef enum compiler_param\n #define DEFPARAM(enumerator, option, msgid, default) \\\n   enumerator,\n #include \"params.def\"\n-#undef DEFPARAM  \n+#undef DEFPARAM\n   LAST_PARAM\n } compiler_param;\n \n /* The value of the parameter given by ENUM.  */\n #define PARAM_VALUE(ENUM) \\\n   (compiler_params[(int) ENUM].value)\n-  \n+\n /* Macros for the various parameters.  */\n #define MAX_INLINE_INSNS_SINGLE \\\n   PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SINGLE)"}, {"sha": "b0be982761d950f6bc0ac867175f0ab6858793b5", "filename": "gcc/predict.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -74,9 +74,9 @@ static void propagate_freq\t\t PARAMS ((basic_block));\n static void estimate_bb_frequencies\t PARAMS ((struct loops *));\n static void counts_to_freqs\t\t PARAMS ((void));\n static void process_note_predictions\t PARAMS ((basic_block, int *, int *,\n-                                                  sbitmap *));\n+\t\t\t\t\t\t  sbitmap *));\n static void process_note_prediction\t PARAMS ((basic_block, int *, int *,\n-                                                  sbitmap *, int, int));\n+\t\t\t\t\t\t  sbitmap *, int, int));\n static bool last_basic_block_p           PARAMS ((basic_block));\n static void compute_function_frequency\t PARAMS ((void));\n static void choose_function_section\t PARAMS ((void));\n@@ -375,10 +375,10 @@ combine_predictions_for_insn (insn, bb)\n \n \t  dump_prediction (predictor, probability, bb,\n \t\t\t   !first_match || best_predictor == predictor);\n-          *pnote = XEXP (*pnote, 1);\n+\t  *pnote = XEXP (*pnote, 1);\n \t}\n       else\n-        pnote = &XEXP (*pnote, 1);\n+\tpnote = &XEXP (*pnote, 1);\n     }\n \n   if (!prob_note)\n@@ -705,7 +705,7 @@ last_basic_block_p (bb)\n    should be index of basic block in that we need to alter branch predictions\n    (i.e. the first of our dominators such that we do not post-dominate it)\n    (but we fill this information on demand, so -1 may be there in case this\n-   was not needed yet). */\n+   was not needed yet).  */\n \n static void\n process_note_prediction (bb, heads, dominators, post_dominators, pred, flags)\n@@ -1117,7 +1117,7 @@ expensive_function_p (threshold)\n      is available and function has not been executed at all.  */\n   if (ENTRY_BLOCK_PTR->frequency == 0)\n     return true;\n-    \n+\n   /* Maximally BB_FREQ_MAX^2 so overflow won't happen.  */\n   limit = ENTRY_BLOCK_PTR->frequency * threshold;\n   for (i = 0; i < n_basic_blocks; i++)"}, {"sha": "b7b162aac498e543f594848a797f6a8958ecc46f", "filename": "gcc/prefix.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -42,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n    be considered a \"key\" and looked up as follows:\n \n    -- If this is a Win32 OS, then the Registry will be examined for\n-      an entry of \"key\" in \n+      an entry of \"key\" in\n \n       HKEY_LOCAL_MACHINE\\SOFTWARE\\Free Software Foundation\\<KEY>\n \n@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n    as an environment variable, whose value will be returned.\n \n    Once all this is done, any '/' will be converted to DIR_SEPARATOR,\n-   if they are different. \n+   if they are different.\n \n    NOTE:  using resolve_keyed_path under Win32 requires linking with\n    advapi32.dll.  */\n@@ -149,10 +149,10 @@ lookup_key (key)\n \t\t\t     KEY_READ, &reg_key);\n \n       if (res != ERROR_SUCCESS)\n-        {\n-          reg_key = (HKEY) INVALID_HANDLE_VALUE;\n-          return 0;\n-        }\n+\t{\n+\t  reg_key = (HKEY) INVALID_HANDLE_VALUE;\n+\t  return 0;\n+\t}\n     }\n \n   size = 32;"}, {"sha": "823ffa0c5139d1f35066b96344859fcc356cb6b4", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -85,7 +85,7 @@ print_mem_expr (outfile, expr)\n   if (TREE_CODE (expr) == COMPONENT_REF)\n     {\n       if (TREE_OPERAND (expr, 0))\n-        print_mem_expr (outfile, TREE_OPERAND (expr, 0));\n+\tprint_mem_expr (outfile, TREE_OPERAND (expr, 0));\n       else\n \tfputs (\" <variable>\", outfile);\n       fprintf (outfile, \".%s\",\n@@ -151,34 +151,34 @@ print_rtx (in_rtx)\n \tfputc ('(', outfile);\n       else\n \tfprintf (outfile, \"(%s\", GET_RTX_NAME (GET_CODE (in_rtx)));\n-      \n+\n       if (! flag_simple)\n \t{\n \t  if (RTX_FLAG (in_rtx, in_struct))\n \t    fputs (\"/s\", outfile);\n \n \t  if (RTX_FLAG (in_rtx, volatil))\n \t    fputs (\"/v\", outfile);\n-\t  \n+\n \t  if (RTX_FLAG (in_rtx, unchanging))\n \t    fputs (\"/u\", outfile);\n-\t  \n+\n \t  if (RTX_FLAG (in_rtx, integrated))\n \t    fputs (\"/i\", outfile);\n-\t  \n+\n \t  if (RTX_FLAG (in_rtx, frame_related))\n \t    fputs (\"/f\", outfile);\n-\t  \n+\n \t  if (RTX_FLAG (in_rtx, jump))\n \t    fputs (\"/j\", outfile);\n-\t  \n+\n \t  if (RTX_FLAG (in_rtx, call))\n \t    fputs (\"/c\", outfile);\n \n \t  if (GET_MODE (in_rtx) != VOIDmode)\n \t    {\n \t      /* Print REG_NOTE names for EXPR_LIST and INSN_LIST.  */\n-\t      if (GET_CODE (in_rtx) == EXPR_LIST \n+\t      if (GET_CODE (in_rtx) == EXPR_LIST\n \t\t  || GET_CODE (in_rtx) == INSN_LIST)\n \t\tfprintf (outfile, \":%s\",\n \t\t\t GET_REG_NOTE_NAME (GET_MODE (in_rtx)));\n@@ -246,7 +246,7 @@ print_rtx (in_rtx)\n \t\tif (flag_dump_unnumbered)\n \t\t  fprintf (outfile, \"#\");\n \t\telse\n-\t\t  fprintf (outfile, HOST_PTR_PRINTF, \n+\t\t  fprintf (outfile, HOST_PTR_PRINTF,\n \t\t\t   (char *) NOTE_BLOCK (in_rtx));\n \t\tsawclose = 1;\n \t\tbreak;\n@@ -284,15 +284,15 @@ print_rtx (in_rtx)\n \t\t  fprintf (outfile, \" \\\"\\\"\");\n \t\tbreak;\n \n-              case NOTE_INSN_PREDICTION:\n-                if (NOTE_PREDICTION (in_rtx))\n-                  fprintf (outfile, \" [ %d %d ] \",\n-                    (int)NOTE_PREDICTION_ALG (in_rtx),\n-                    (int) NOTE_PREDICTION_FLAGS (in_rtx));\n-                else\n-                  fprintf (outfile, \" [ ERROR ]\");\n-                break;\n-                            \n+\t      case NOTE_INSN_PREDICTION:\n+\t\tif (NOTE_PREDICTION (in_rtx))\n+\t\t  fprintf (outfile, \" [ %d %d ] \",\n+\t\t\t   (int)NOTE_PREDICTION_ALG (in_rtx),\n+\t\t\t   (int) NOTE_PREDICTION_FLAGS (in_rtx));\n+\t\telse\n+\t\t  fprintf (outfile, \" [ ERROR ]\");\n+\t\tbreak;\n+\n \t      default:\n \t\t{\n \t\t  const char * const str = X0STR (in_rtx, i);\n@@ -329,7 +329,7 @@ print_rtx (in_rtx)\n \tif (sawclose)\n \t  {\n \t    fprintf (outfile, \"\\n%s%*s\",\n-                     print_rtx_head, indent * 2, \"\");\n+\t\t     print_rtx_head, indent * 2, \"\");\n \t    sawclose = 0;\n \t  }\n \tfputs (\"[ \", outfile);\n@@ -531,7 +531,7 @@ print_rtx (in_rtx)\n     case CODE_LABEL:\n       fprintf (outfile, \" [%d uses]\", LABEL_NUSES (in_rtx));\n       if (LABEL_ALTERNATE_NAME (in_rtx))\n-        fprintf (outfile, \" [alternate name: %s]\",\n+\tfprintf (outfile, \" [alternate name: %s]\",\n \t\t LABEL_ALTERNATE_NAME (in_rtx));\n       break;\n \n@@ -731,14 +731,14 @@ print_rtl (outf, rtx_first)\n \t  if (! flag_dump_unnumbered\n \t      || GET_CODE (tmp_rtx) != NOTE || NOTE_LINE_NUMBER (tmp_rtx) < 0)\n \t    {\n-              fputs (print_rtx_head, outfile);\n+\t      fputs (print_rtx_head, outfile);\n \t      print_rtx (tmp_rtx);\n \t      fprintf (outfile, \"\\n\");\n \t    }\n \tbreak;\n \n       default:\n-        fputs (print_rtx_head, outfile);\n+\tfputs (print_rtx_head, outfile);\n \tprint_rtx (rtx_first);\n       }\n }"}, {"sha": "40ee816efb2b42773623a55a76f1b1d089dd6c43", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -384,7 +384,7 @@ print_node (file, prefix, node, indent)\n \n       print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n       print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n-      \n+\n       if (TREE_CODE (node) != FUNCTION_DECL\n \t  || DECL_INLINE (node) || DECL_BUILT_IN (node))\n \tindent_to (file, indent + 3);\n@@ -415,7 +415,7 @@ print_node (file, prefix, node, indent)\n       if (DECL_POINTER_ALIAS_SET_KNOWN_P (node))\n \t{\n \t  fprintf (file, \" alias set \");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, \n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t\t   DECL_POINTER_ALIAS_SET (node));\n \t}\n \n@@ -633,7 +633,7 @@ print_node (file, prefix, node, indent)\n       if (TREE_CODE (node) == EXPR_WITH_FILE_LOCATION)\n \t{\n \t  indent_to (file, indent+4);\n-          fprintf (file, \"%s:%d:%d\", \n+\t  fprintf (file, \"%s:%d:%d\",\n \t\t   (EXPR_WFL_FILENAME_NODE (node ) ?\n \t\t    EXPR_WFL_FILENAME (node) : \"(no file info)\"),\n \t\t   EXPR_WFL_LINENO (node), EXPR_WFL_COLNO (node));"}, {"sha": "5929a9138fcd22a657b2a726d1580bd73b351bd0", "filename": "gcc/profile.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d67604e3bf62a35668b98cf87465d5be73ec3/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6a4d67604e3bf62a35668b98cf87465d5be73ec3", "patch": "@@ -209,7 +209,7 @@ output_gcov_string (string, delimiter)\n }\n \f\n \n-/* Computes hybrid profile for all matching entries in da_file. \n+/* Computes hybrid profile for all matching entries in da_file.\n    Sets max_counter_in_program as a side effect.  */\n \n static gcov_type *\n@@ -244,7 +244,7 @@ get_exec_counts ()\n \t  }\n     }\n \n-  /* now read and combine all matching profiles. */\n+  /* now read and combine all matching profiles.  */\n \n   profile = xmalloc (sizeof (gcov_type) * num_edges);\n   rewind (da_file);\n@@ -698,7 +698,7 @@ compute_checksum ()\n   long chsum = 0;\n   int i;\n \n-  \n+\n   for (i = 0; i < n_basic_blocks ; i++)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n@@ -741,9 +741,9 @@ branch_prob ()\n   profile_info.current_function_cfg_checksum = compute_checksum ();\n \n   if (rtl_dump_file)\n-    fprintf (rtl_dump_file, \"CFG checksum is %ld\\n\", \n+    fprintf (rtl_dump_file, \"CFG checksum is %ld\\n\",\n \tprofile_info.current_function_cfg_checksum);\n-  \n+\n   /* Start of a function.  */\n   if (flag_test_coverage)\n     output_gcov_string (current_function_name, (long) -2);\n@@ -820,14 +820,14 @@ branch_prob ()\n \t  if (rtl_dump_file)\n \t    fprintf (rtl_dump_file, \"Adding fake exit edge to bb %i\\n\",\n \t\t     bb->index);\n-          make_edge (bb, EXIT_BLOCK_PTR, EDGE_FAKE);\n+\t  make_edge (bb, EXIT_BLOCK_PTR, EDGE_FAKE);\n \t}\n       if (need_entry_edge && !have_entry_edge)\n \t{\n \t  if (rtl_dump_file)\n \t    fprintf (rtl_dump_file, \"Adding fake entry edge to bb %i\\n\",\n \t\t     bb->index);\n-          make_edge (ENTRY_BLOCK_PTR, bb, EDGE_FAKE);\n+\t  make_edge (ENTRY_BLOCK_PTR, bb, EDGE_FAKE);\n \t}\n     }\n \n@@ -844,10 +844,10 @@ branch_prob ()\n       /* Mark edges we've replaced by fake edges above as ignored.  */\n       if ((e->flags & (EDGE_ABNORMAL | EDGE_ABNORMAL_CALL))\n \t  && e->src != ENTRY_BLOCK_PTR && e->dest != EXIT_BLOCK_PTR)\n-        {\n+\t{\n \t  EDGE_INFO (e)->ignore = 1;\n \t  ignored_edges++;\n-        }\n+\t}\n     }\n \n #ifdef ENABLE_CHECKING\n@@ -860,10 +860,10 @@ branch_prob ()\n     {\n       int i = 0;\n       for (i = 0 ; i < n_basic_blocks; i++)\n-        {\n+\t{\n \t  basic_block bb = BASIC_BLOCK (i);\n \t  rtx insn = bb->head;\n-          static int ignore_next_note = 0;\n+\t  static int ignore_next_note = 0;\n \n \t  /* We are looking for line number notes.  Search backward before\n \t     basic block to find correct ones.  */\n@@ -916,7 +916,7 @@ branch_prob ()\n \t\t}\n \t      insn = NEXT_INSN (insn);\n \t    }\n-        }\n+\t}\n       __write_long (0, bb_file, 4);\n     }\n \n@@ -933,10 +933,10 @@ branch_prob ()\n       edge e = INDEX_EDGE (el, i);\n       struct edge_info *inf = EDGE_INFO (e);\n       if ((e->flags & EDGE_FAKE) && !inf->ignore && !inf->on_tree)\n-        {\n-          inf->ignore = 1;\n-          ignored_edges++;\n-        }\n+\t{\n+\t  inf->ignore = 1;\n+\t  ignored_edges++;\n+\t}\n     }\n \n   total_num_blocks += n_basic_blocks + 2;\n@@ -965,7 +965,7 @@ branch_prob ()\n \n       /* write checksum.  */\n       __write_long (profile_info.current_function_cfg_checksum, bbg_file, 4);\n-      \n+\n       /* The plus 2 stands for entry and exit block.  */\n       __write_long (n_basic_blocks + 2, bbg_file, 4);\n       __write_long (num_edges - ignored_edges + 1, bbg_file, 4);\n@@ -1099,14 +1099,14 @@ find_spanning_tree (el)\n     {\n       edge e = INDEX_EDGE (el, i);\n       if (((e->flags & (EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_FAKE))\n-           || e->dest == EXIT_BLOCK_PTR\n-          )\n+\t   || e->dest == EXIT_BLOCK_PTR\n+\t   )\n \t  && !EDGE_INFO (e)->ignore\n \t  && (find_group (e->src) != find_group (e->dest)))\n \t{\n \t  if (rtl_dump_file)\n \t    fprintf (rtl_dump_file, \"Abnormal edge %d to %d put to tree\\n\",\n-                     e->src->index, e->dest->index);\n+\t\t     e->src->index, e->dest->index);\n \t  EDGE_INFO (e)->on_tree = 1;\n \t  union_groups (e->src, e->dest);\n \t}\n@@ -1122,7 +1122,7 @@ find_spanning_tree (el)\n \t{\n \t  if (rtl_dump_file)\n \t    fprintf (rtl_dump_file, \"Critical edge %d to %d put to tree\\n\",\n-                     e->src->index, e->dest->index);\n+\t\t     e->src->index, e->dest->index);\n \t  EDGE_INFO (e)->on_tree = 1;\n \t  union_groups (e->src, e->dest);\n \t}\n@@ -1137,7 +1137,7 @@ find_spanning_tree (el)\n \t{\n \t  if (rtl_dump_file)\n \t    fprintf (rtl_dump_file, \"Normal edge %d to %d put to tree\\n\",\n-                     e->src->index, e->dest->index);\n+\t\t     e->src->index, e->dest->index);\n \t  EDGE_INFO (e)->on_tree = 1;\n \t  union_groups (e->src, e->dest);\n \t}"}]}