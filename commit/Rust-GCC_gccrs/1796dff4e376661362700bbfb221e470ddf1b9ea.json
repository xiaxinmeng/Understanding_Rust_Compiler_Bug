{"sha": "1796dff4e376661362700bbfb221e470ddf1b9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5NmRmZjRlMzc2NjYxMzYyNzAwYmJmYjIyMWU0NzBkZGYxYjllYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-02-11T17:56:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-11T17:56:39Z"}, "message": "fold-const.c (split_tree): Don't assume a constant isn't splittable.\n\n        * fold-const.c (split_tree): Don't assume a constant isn't splittable.\n        (fold): Don't assume a constant isn't foldable.\n        * tree.c (build): Set TREE_CONSTANT for an expression with no\n        side-effects and constant operands.\n        (build1): Likewise.\n\nFrom-SVN: r39585", "tree": {"sha": "e0d0c93720e1f9622f8a6d02f91e442f6654c194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0d0c93720e1f9622f8a6d02f91e442f6654c194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1796dff4e376661362700bbfb221e470ddf1b9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1796dff4e376661362700bbfb221e470ddf1b9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1796dff4e376661362700bbfb221e470ddf1b9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1796dff4e376661362700bbfb221e470ddf1b9ea/comments", "author": null, "committer": null, "parents": [{"sha": "11c7e5a2f0d0564fe2811f86dad61cf9bf204dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c7e5a2f0d0564fe2811f86dad61cf9bf204dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c7e5a2f0d0564fe2811f86dad61cf9bf204dd9"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "69c063654e4513408c260a61bec1c2c49841f27c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1796dff4e376661362700bbfb221e470ddf1b9ea", "patch": "@@ -1,3 +1,11 @@\n+2001-02-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* fold-const.c (split_tree): Don't assume a constant isn't splittable.\n+\t(fold): Don't assume a constant isn't foldable.\n+\t* tree.c (build): Set TREE_CONSTANT for an expression with no\n+\tside-effects and constant operands.\n+\t(build1): Likewise.\n+\n 2001-02-10  Richard Henderson  <rth@redhat.com>\n \n \t* jump.c (squeeze_notes): Revert 2000-05-12 change."}, {"sha": "3cb1869981b83d9c0d759de8630f310fe681fda9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1796dff4e376661362700bbfb221e470ddf1b9ea", "patch": "@@ -1357,9 +1357,6 @@ split_tree (in, code, conp, litp, negate_p)\n \n   if (TREE_CODE (in) == INTEGER_CST || TREE_CODE (in) == REAL_CST)\n     *litp = in;\n-  else if (TREE_CONSTANT (in))\n-    *conp = in;\n-\n   else if (TREE_CODE (in) == code\n \t   || (! FLOAT_TYPE_P (TREE_TYPE (in))\n \t       /* We can associate addition and subtraction together (even\n@@ -1399,6 +1396,8 @@ split_tree (in, code, conp, litp, negate_p)\n       if (neg_conp_p) *conp = negate_expr (*conp);\n       if (neg_var_p) var = negate_expr (var);\n     }\n+  else if (TREE_CONSTANT (in))\n+    *conp = in;\n   else\n     var = in;\n \n@@ -4711,7 +4710,7 @@ fold (expr)\n   tree type = TREE_TYPE (expr);\n   register tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n   register enum tree_code code = TREE_CODE (t);\n-  register int kind;\n+  register int kind = TREE_CODE_CLASS (code);\n   int invert;\n   /* WINS will be nonzero when the switch is done\n      if all operands are constant.  */\n@@ -4722,19 +4721,14 @@ fold (expr)\n   if (code == RTL_EXPR || (code == SAVE_EXPR && SAVE_EXPR_RTL (t)) != 0)\n     return t;\n \n-  /* Return right away if already constant.  */\n-  if (TREE_CONSTANT (t))\n-    {\n-      if (code == CONST_DECL)\n-\treturn DECL_INITIAL (t);\n-      return t;\n-    }\n+  /* Return right away if a constant.  */\n+  if (kind == 'c')\n+    return t;\n \n #ifdef MAX_INTEGER_COMPUTATION_MODE\n   check_max_integer_computation_mode (expr);\n #endif\n \n-  kind = TREE_CODE_CLASS (code);\n   if (code == NOP_EXPR || code == FLOAT_EXPR || code == CONVERT_EXPR)\n     {\n       tree subop;"}, {"sha": "b45dc19a8137b5717d4b9d27cc7527867591ff77", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1796dff4e376661362700bbfb221e470ddf1b9ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1796dff4e376661362700bbfb221e470ddf1b9ea", "patch": "@@ -2323,6 +2323,7 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n   register int length;\n   register int i;\n   int fro;\n+  int constant;\n \n   VA_START (p, tt);\n \n@@ -2341,6 +2342,13 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n      to do this.  */\n   fro = first_rtl_op (code);\n \n+  /* Expressions without side effects may be constant if their\n+     arguments are as well.  */\n+  constant = (TREE_CODE_CLASS (code) == '<'\n+\t      || TREE_CODE_CLASS (code) == '1'\n+\t      || TREE_CODE_CLASS (code) == '2'\n+\t      || TREE_CODE_CLASS (code) == 'c');\n+\n   if (length == 2)\n     {\n       /* This is equivalent to the loop below, but faster.  */\n@@ -2356,6 +2364,8 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    TREE_SIDE_EFFECTS (t) = 1;\n \t  if (!TREE_READONLY (arg0))\n \t    TREE_READONLY (t) = 0;\n+\t  if (!TREE_CONSTANT (arg0))\n+\t    constant = 0;\n \t}\n \n       if (arg1 && fro > 1)\n@@ -2364,6 +2374,8 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    TREE_SIDE_EFFECTS (t) = 1;\n \t  if (!TREE_READONLY (arg1))\n \t    TREE_READONLY (t) = 0;\n+\t  if (!TREE_CONSTANT (arg1))\n+\t    constant = 0;\n \t}\n     }\n   else if (length == 1)\n@@ -2390,10 +2402,14 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    {\n \t      if (TREE_SIDE_EFFECTS (operand))\n \t\tTREE_SIDE_EFFECTS (t) = 1;\n+\t      if (!TREE_CONSTANT (operand))\n+\t\tconstant = 0;\n \t    }\n \t}\n     }\n   va_end (p);\n+\n+  TREE_CONSTANT (t) = constant;\n   return t;\n }\n \n@@ -2466,6 +2482,8 @@ build1 (code, type, node)\n       break;\n \n     default:\n+      if (TREE_CODE_CLASS (code) == '1' && TREE_CONSTANT (node))\n+\tTREE_CONSTANT (t) = 1;\n       break;\n     }\n "}]}