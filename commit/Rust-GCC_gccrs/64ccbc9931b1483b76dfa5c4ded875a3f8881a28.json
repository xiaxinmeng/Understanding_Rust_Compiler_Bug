{"sha": "64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjY2JjOTkzMWIxNDgzYjc2ZGZhNWM0ZGVkODc1YTNmODg4MWEyOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-04-08T07:27:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-04-08T07:27:38Z"}, "message": "configure.in (host_xm_file, [...]): Include hwint.h.\n\n        * configure.in (host_xm_file, build_xm_file): Include hwint.h.\n        Use case statements instead of \"if test -a ... -a ... -a ...\"\n        * machmode.h: Don't define HOST_WIDE_INT, etc. Wrap use of\n        HOST_WIDE_INT in #ifdef.\n        * mips.h: Include hwint.h instead of providing definitions for\n        HOST_WIDE_INT, etc.  Wrap uses of HOST_WIDE_INT in #ifdef.\n\nFrom-SVN: r26291", "tree": {"sha": "2d6ce2dd20cea01177b812cce1a4ad5f24e5c338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6ce2dd20cea01177b812cce1a4ad5f24e5c338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/comments", "author": null, "committer": null, "parents": [{"sha": "4410d49162691a1aa453303e0b66d1198a6bb0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4410d49162691a1aa453303e0b66d1198a6bb0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4410d49162691a1aa453303e0b66d1198a6bb0ae"}], "stats": {"total": 186, "additions": 58, "deletions": 128}, "files": [{"sha": "a5abdebdfe38eee55a44e140b512578abbdf3642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "patch": "@@ -1,3 +1,14 @@\n+Thu Apr  8 10:22:23 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.in (host_xm_file, build_xm_file): Include hwint.h.\n+\tUse case statements instead of \"if test -a ... -a ... -a ...\"\n+\n+\t* machmode.h: Don't define HOST_WIDE_INT, etc. Wrap use of\n+ \tHOST_WIDE_INT in #ifdef.\n+\n+\t* mips.h: Include hwint.h instead of providing definitions for\n+\tHOST_WIDE_INT, etc.  Wrap uses of HOST_WIDE_INT in #ifdef.\n+\n Thu Apr  8 06:16:14 EDT 1999  John Wehle  (john@feith.com)\n \n \t* i386.md (truncdfsf2, truncxfsf2,"}, {"sha": "d28e26a7830a2e2f36bdcda7f4dfafd8143e98cc", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "patch": "@@ -162,27 +162,17 @@ extern struct rtx_def *embedded_pic_fnaddr_rtx;\t/* function address */\n extern int mips_string_length;\t\t/* length of strings for mips16 */\n extern struct rtx_def *mips16_gp_pseudo_rtx; /* psuedo reg holding $gp */\n \n-/* Functions within mips.c that we reference.  Some of these return  type\n-   HOST_WIDE_INT, so define that here.  This is a copy of code in machmode.h.\n+/* Functions within mips.c that we reference.  Some of these return\n+   type HOST_WIDE_INT, so define that here.  */\n \n-   ??? It would be good to try to put this as common code someplace.  */\n-\n-#ifndef HOST_BITS_PER_WIDE_INT\n-\n-#if HOST_BITS_PER_LONG > HOST_BITS_PER_INT\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT long\n-#else\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_INT\n-#define HOST_WIDE_INT int\n-#endif\n-\n-#endif\n+#include \"hwint.h\"\n \n extern int\t\tarith32_operand ();\n extern int\t\tarith_operand ();\n extern int\t\tcmp_op ();\n+#ifdef HOST_WIDE_INT\n extern HOST_WIDE_INT\tcompute_frame_size ();\n+#endif\n extern int\t\tconst_float_1_operand ();\n extern void\t\texpand_block_move ();\n extern int\t\tequality_op ();\n@@ -205,7 +195,9 @@ extern void\t\tmips_asm_file_start ();\n extern int\t\tmips_can_use_return_insn ();\n extern int\t\tmips_const_double_ok ();\n extern void\t\tmips_count_memory_refs ();\n+#ifdef HOST_WIDE_INT\n extern HOST_WIDE_INT\tmips_debugger_offset ();\n+#endif\n extern void\t\tmips_declare_object ();\n extern int\t\tmips_epilogue_delay_slots ();\n extern void\t\tmips_expand_epilogue ();"}, {"sha": "c6c284231a45701de654d3c0702d320837ea21a4", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "patch": "@@ -5795,14 +5795,14 @@ fi\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n null_defines=\n-host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file}\"\n+host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} hwint.h\"\n \n # If host=build, it is correct to have hconfig include auto-host.h\n # as well.  If host!=build, we are in error and need to do more \n # work to find out the build config parameters.\n if test x$host = x$build\n then\n-\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file}\"\n+\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file} hwint.h\"\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -5824,7 +5824,7 @@ else\n \tmv auto-host.h ../auto-build.h\n \tcd ..\n \trm -rf $tempdir\n-\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file}\"\n+\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file} hwint.h\"\n fi\n \n xm_file=\"gansidecl.h ${xm_file}\"\n@@ -7817,29 +7817,29 @@ out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\n for f in $tm_file; do\n-\tif test $f != \"gansidecl.h\" ; then\n-\t\ttm_file_list=\"${tm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\ttm_file_list=\"${tm_file_list} $f\"\n-\tfi\n+  case $f in\n+    gansidecl.h )\n+       tm_file_list=\"${tm_file_list} $f\" ;;\n+    *) tm_file_list=\"${tm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n host_xm_file_list=\n for f in $host_xm_file; do\n-\tif test $f != \"auto-host.h\" -a $f != \"gansidecl.h\" ; then\n-\t\thost_xm_file_list=\"${host_xm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\thost_xm_file_list=\"${host_xm_file_list} $f\"\n-\tfi\n+  case $f in\n+    auto-host.h | gansidecl.h | hwint.h )\n+       host_xm_file_list=\"${host_xm_file_list} $f\" ;;\n+    *) host_xm_file_list=\"${host_xm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n build_xm_file_list=\n for f in $build_xm_file; do\n-\tif test $f != \"auto-build.h\" -a $f != \"auto-host.h\" -a $f != \"gansidecl.h\" ; then\n-\t\tbuild_xm_file_list=\"${build_xm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\tbuild_xm_file_list=\"${build_xm_file_list} $f\"\n-\tfi\n+  case $f in\n+    auto-build.h | auto-host.h | gansidecl.h | hwint.h )\n+       build_xm_file_list=\"${build_xm_file_list} $f\" ;;\n+    *) build_xm_file_list=\"${build_xm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n # Define macro CROSS_COMPILE in compilation"}, {"sha": "75852375563512ba23c1e1793134038bdb1d4474", "filename": "gcc/configure.in", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "patch": "@@ -3551,14 +3551,14 @@ fi\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n null_defines=\n-host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file}\"\n+host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} hwint.h\"\n \n # If host=build, it is correct to have hconfig include auto-host.h\n # as well.  If host!=build, we are in error and need to do more \n # work to find out the build config parameters.\n if test x$host = x$build\n then\n-\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file}\"\n+\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file} hwint.h\"\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -3580,7 +3580,7 @@ else\n \tmv auto-host.h ../auto-build.h\n \tcd ..\n \trm -rf $tempdir\n-\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file}\"\n+\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file} hwint.h\"\n fi\n \n xm_file=\"gansidecl.h ${xm_file}\"\n@@ -3726,29 +3726,29 @@ out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\n for f in $tm_file; do\n-\tif test $f != \"gansidecl.h\" ; then\n-\t\ttm_file_list=\"${tm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\ttm_file_list=\"${tm_file_list} $f\"\n-\tfi\n+  case $f in\n+    gansidecl.h )\n+       tm_file_list=\"${tm_file_list} $f\" ;;\n+    *) tm_file_list=\"${tm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n host_xm_file_list=\n for f in $host_xm_file; do\n-\tif test $f != \"auto-host.h\" -a $f != \"gansidecl.h\" ; then\n-\t\thost_xm_file_list=\"${host_xm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\thost_xm_file_list=\"${host_xm_file_list} $f\"\n-\tfi\n+  case $f in\n+    auto-host.h | gansidecl.h | hwint.h )\n+       host_xm_file_list=\"${host_xm_file_list} $f\" ;;\n+    *) host_xm_file_list=\"${host_xm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n build_xm_file_list=\n for f in $build_xm_file; do\n-\tif test $f != \"auto-build.h\" -a $f != \"auto-host.h\" -a $f != \"gansidecl.h\" ; then\n-\t\tbuild_xm_file_list=\"${build_xm_file_list} \\$(srcdir)/config/$f\"\n-\telse\n-\t\tbuild_xm_file_list=\"${build_xm_file_list} $f\"\n-\tfi\n+  case $f in\n+    auto-build.h | auto-host.h | gansidecl.h | hwint.h )\n+       build_xm_file_list=\"${build_xm_file_list} $f\" ;;\n+    *) build_xm_file_list=\"${build_xm_file_list} \\$(srcdir)/config/$f\" ;;\n+  esac\n done\n \n # Define macro CROSS_COMPILE in compilation"}, {"sha": "581400700acead6d077bf8506f51c27e24e5e9b2", "filename": "gcc/machmode.h", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ccbc9931b1483b76dfa5c4ded875a3f8881a28/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=64ccbc9931b1483b76dfa5c4ded875a3f8881a28", "patch": "@@ -24,20 +24,6 @@ Boston, MA 02111-1307, USA.  */\n /* Strictly speaking, this isn't the proper place to include these definitions,\n    but this file is included by every GCC file. */\n \n-/* Find the largest host integer type and set its size and type.  */\n-\n-#ifndef HOST_BITS_PER_WIDE_INT\n-\n-#if HOST_BITS_PER_LONG > HOST_BITS_PER_INT\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT long\n-#else\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_INT\n-#define HOST_WIDE_INT int\n-#endif\n-\n-#endif\n-\n /* Provide a default way to print an address in hex via printf.  */\n \n #ifndef HOST_PTR_PRINTF\n@@ -50,69 +36,6 @@ Boston, MA 02111-1307, USA.  */\n # endif\n #endif /* ! HOST_PTR_PRINTF */\n \n-/* Provide defaults for the way to print a HOST_WIDE_INT\n-   in various manners.  */\n-\n-#ifndef HOST_WIDE_INT_PRINT_DEC\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#define HOST_WIDE_INT_PRINT_DEC \"%d\"\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT_PRINT_DEC \"%ld\"\n-#else\n-#define HOST_WIDE_INT_PRINT_DEC \"%lld\"\n-#endif\n-#endif\n-#endif\n-\n-#ifndef HOST_WIDE_INT_PRINT_UNSIGNED\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%u\"\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%lu\"\n-#else\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%llu\"\n-#endif\n-#endif\n-#endif\n-\n-#ifndef HOST_WIDE_INT_PRINT_HEX\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#define HOST_WIDE_INT_PRINT_HEX \"0x%x\"\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT_PRINT_HEX \"0x%lx\"\n-#else\n-#define HOST_WIDE_INT_PRINT_HEX \"0x%llx\"\n-#endif\n-#endif\n-#endif\n-\n-#ifndef HOST_WIDE_INT_PRINT_DOUBLE_HEX\n-#if HOST_BITS_PER_WIDE_INT == 64\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%x%016x\"\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%lx%016lx\"\n-#else\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%016llx\"\n-#endif\n-#endif\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%x%08x\"\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%lx%08lx\"\n-#else\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%08llx\"\n-#endif\n-#endif\n-#endif\n-#endif\n-\n /* Make an enum class that gives all the machine modes.  */\n \n #define DEF_MACHMODE(SYM, NAME, TYPE, SIZE, UNIT, WIDER)  SYM,\n@@ -181,13 +104,17 @@ extern int mode_unit_size[];\n \n #define GET_MODE_BITSIZE(MODE)  (BITS_PER_UNIT * mode_size[(int) (MODE)])\n \n+#ifdef HOST_WIDE_INT\n+\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n extern unsigned HOST_WIDE_INT mode_mask_array[];\n \n #define GET_MODE_MASK(MODE) mode_mask_array[(int) (MODE)]\n \n+#endif /* HOST_WIDE_INT */\n+\n /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */\n \n extern unsigned char mode_wider_mode[];"}]}