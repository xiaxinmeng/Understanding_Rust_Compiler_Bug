{"sha": "52702016ad1b45888ddd37e95e3eb093181fd4d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3MDIwMTZhZDFiNDU4ODhkZGQzN2U5NWUzZWIwOTMxODFmZDRkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-29T09:10:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-29T09:10:44Z"}, "message": "re PR c++/60228 (ICE using lambda in #pragma omp declare reduction)\n\n\tPR c++/60228\n\t* parser.c (cp_parser_omp_declare_reduction_exprs): If\n\tprocessing_template_decl, wrap the combiner or initializer\n\tinto EXPR_STMT.\n\t* decl.c (start_preparsed_function): Don't start a lambda scope\n\tfor DECL_OMP_DECLARE_REDUCTION_P functions.\n\t(finish_function): Don't finish a lambda scope for\n\tDECL_OMP_DECLARE_REDUCTION_P functions, nor cp_fold_function\n\tthem nor cp_genericize them.\n\t* mangle.c (decl_mangling_context): Look through\n\tDECL_OMP_DECLARE_REDUCTION_P functions.\n\t* semantics.c (expand_or_defer_fn_1): For DECL_OMP_DECLARE_REDUCTION_P\n\tfunctions, use tentative linkage, don't keep their bodies with\n\t-fkeep-inline-functions and return false at the end.\n\n\t* g++.dg/gomp/openmp-simd-2.C: Don't expect bodies for\n\tDECL_OMP_DECLARE_REDUCTION_P functions.\n\n\t* testsuite/libgomp.c++/udr-20.C: New test.\n\t* testsuite/libgomp.c++/udr-21.C: New test.\n\nFrom-SVN: r278832", "tree": {"sha": "568163140fea7442c6e8bd868b88174618d79123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568163140fea7442c6e8bd868b88174618d79123"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52702016ad1b45888ddd37e95e3eb093181fd4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52702016ad1b45888ddd37e95e3eb093181fd4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52702016ad1b45888ddd37e95e3eb093181fd4d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52702016ad1b45888ddd37e95e3eb093181fd4d3/comments", "author": null, "committer": null, "parents": [{"sha": "b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f44388f3bb9b42553ea516984db4c4d4baa5bc"}], "stats": {"total": 108, "additions": 0, "deletions": 108}, "files": [{"sha": "83388758edd9c5fe1bf667f06aab371a5f664eed", "filename": "libgomp/testsuite/libgomp.c++/udr-20.C", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52702016ad1b45888ddd37e95e3eb093181fd4d3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52702016ad1b45888ddd37e95e3eb093181fd4d3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C?ref=52702016ad1b45888ddd37e95e3eb093181fd4d3", "patch": "@@ -52,57 +52,3 @@ main ()\n   A::foo ();\n   B<long>::foo ();\n }\n-// PR c++/60228\n-// { dg-additional-options \"-std=c++11\" }\n-\n-extern \"C\" void abort ();\n-\n-struct A\n-{\n-  typedef int T;\n-  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return 0; }()) initializer (omp_priv = [](){ return 0; }())\n-  static void foo ();\n-};\n-\n-template <typename T>\n-struct B\n-{\n-  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return T (0); }()) initializer (omp_priv = [](){ return T (0); }())\n-  static void foo ();\n-};\n-\n-void\n-A::foo ()\n-{\n-  int r = 0, s = 0;\n-  #pragma omp parallel for reduction (x : r, s)\n-  for (int i = 0; i < 64; i++)\n-    {\n-      r++;\n-      s += i;\n-    }\n-  if (r != 64 || s != (64 * 63) / 2)\n-    abort ();\n-}\n-\n-template <typename T>\n-void\n-B<T>::foo ()\n-{\n-  T r = 0, s = 0;\n-  #pragma omp parallel for reduction (x : r, s)\n-  for (int i = 0; i < 64; i++)\n-    {\n-      r++;\n-      s += i;\n-    }\n-  if (r != 64 || s != (64 * 63) / 2)\n-    abort ();\n-}\n-\n-int\n-main ()\n-{\n-  A::foo ();\n-  B<long>::foo ();\n-}"}, {"sha": "9ec655718fdac23501def91242a426c41e3728e1", "filename": "libgomp/testsuite/libgomp.c++/udr-21.C", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52702016ad1b45888ddd37e95e3eb093181fd4d3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52702016ad1b45888ddd37e95e3eb093181fd4d3/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C?ref=52702016ad1b45888ddd37e95e3eb093181fd4d3", "patch": "@@ -52,57 +52,3 @@ main ()\n   A::foo ();\n   B<short>::foo ();\n }\n-// PR c++/60228\n-// { dg-additional-options \"-std=c++11\" }\n-\n-extern \"C\" void abort ();\n-\n-struct A\n-{\n-  typedef int T;\n-  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n-  static void foo ();\n-};\n-\n-template <typename T>\n-struct B\n-{\n-  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n-  static void foo ();\n-};\n-\n-void\n-A::foo ()\n-{\n-  int r = 0, s = 0;\n-  #pragma omp parallel for reduction (y : r, s)\n-  for (int i = 0; i < 64; i++)\n-    {\n-      r++;\n-      s += i;\n-    }\n-  if (r != 64 || s != (64 * 63) / 2)\n-    abort ();\n-}\n-\n-template <typename T>\n-void\n-B<T>::foo ()\n-{\n-  T r = 0, s = 0;\n-  #pragma omp parallel for reduction (y : r, s)\n-  for (int i = 0; i < 64; i++)\n-    {\n-      r++;\n-      s += i;\n-    }\n-  if (r != 64 || s != (64 * 63) / 2)\n-    abort ();\n-}\n-\n-int\n-main ()\n-{\n-  A::foo ();\n-  B<short>::foo ();\n-}"}]}