{"sha": "f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlN2VhODFkMTM2OWQ0ZDZjYjZkOGU0NDBhZWZiMzQwNzE0MmUwNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-30T14:27:44Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-30T14:27:44Z"}, "message": "Fortran: -fno-automatic and -fopenacc / recusion check cleanup\n\nOptions: -fopenmp and -fopenacc imply concurrent calls to a\nprocedure; now also -fopenacc implies -frecursive, disabling\nthat larger local const-size array variables use static memory.\n\nRun-time recursion check: Always reset the check variable at the\nend of the procedure; this avoids a bogus error with -fopenmp\nwhen called twice nonconcurrently/nonrecursively. (Issue requires\nusing -fno-automatic or -fmax-stack-var-size= to trigger.)\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/98010\n\tPR fortran/98013\n\t* options.c (gfc_post_options): Also imply recursive with\n\t-fopenacc.\n\t* trans-decl.c (gfc_generate_function_code): Simplify condition.", "tree": {"sha": "4f8d38858a78db5b1288637ff4807290bee08bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8d38858a78db5b1288637ff4807290bee08bda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2610c786f7496c5006bb68d6801ef7450bd231a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2610c786f7496c5006bb68d6801ef7450bd231a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2610c786f7496c5006bb68d6801ef7450bd231a9"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "66be1d586fbe8ed36fe16cc2c29ca56fc605ef6c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "patch": "@@ -412,22 +412,24 @@ gfc_post_options (const char **pfilename)\n   else if (!flag_automatic && flag_recursive)\n     gfc_warning_now (OPT_Woverwrite_recursive, \"Flag %<-fno-automatic%> \"\n \t\t     \"overwrites %<-frecursive%>\");\n-  else if (!flag_automatic && flag_openmp)\n-    gfc_warning_now (0, \"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n-\t\t     \"%<-fopenmp%>\");\n+  else if (!flag_automatic && (flag_openmp || flag_openacc))\n+    gfc_warning_now (0, \"Flag %<-fno-automatic%> overwrites %<-frecursive%> \"\n+\t\t     \"implied by %qs\", flag_openmp ? \"-fopenmp\" : \"-fopenacc\");\n   else if (flag_max_stack_var_size != -2 && flag_recursive)\n     gfc_warning_now (0, \"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t     flag_max_stack_var_size);\n-  else if (flag_max_stack_var_size != -2 && flag_openmp)\n-    gfc_warning_now (0, \"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n-\t\t     \"implied by %<-fopenmp%>\", flag_max_stack_var_size);\n+  else if (flag_max_stack_var_size != -2 && (flag_openmp || flag_openacc))\n+    gfc_warning_now (0, \"Flag %<-fmax-stack-var-size=%d%> overwrites \"\n+\t\t     \"%<-frecursive%> implied by %qs\", flag_max_stack_var_size,\n+\t\t     flag_openmp ? \"-fopenmp\" : \"-fopenacc\");\n \n   /* Implement -frecursive as -fmax-stack-var-size=-1.  */\n   if (flag_recursive)\n     flag_max_stack_var_size = -1;\n \n   /* Implied -frecursive; implemented as -fmax-stack-var-size=-1.  */\n-  if (flag_max_stack_var_size == -2 && flag_openmp && flag_automatic)\n+  if (flag_max_stack_var_size == -2 && flag_automatic\n+      && (flag_openmp || flag_openacc))\n     {\n       flag_recursive = 1;\n       flag_max_stack_var_size = -1;"}, {"sha": "37a0c85fa302f16a69121d2ffa46dd067c89ca9e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e7ea81d1369d4d6cb6d8e440aefb3407142e05/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=f4e7ea81d1369d4d6cb6d8e440aefb3407142e05", "patch": "@@ -6967,8 +6967,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   gfc_init_block (&cleanup);\n \n   /* Reset recursion-check variable.  */\n-  if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION)\n-      && !is_recursive && !flag_openmp && recurcheckvar != NULL_TREE)\n+  if (recurcheckvar != NULL_TREE)\n     {\n       gfc_add_modify (&cleanup, recurcheckvar, logical_false_node);\n       recurcheckvar = NULL;"}]}