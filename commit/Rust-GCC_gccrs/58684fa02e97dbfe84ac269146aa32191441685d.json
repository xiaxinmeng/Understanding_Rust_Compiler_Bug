{"sha": "58684fa02e97dbfe84ac269146aa32191441685d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2ODRmYTAyZTk3ZGJmZTg0YWMyNjkxNDZhYTMyMTkxNDQxNjg1ZA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-06-15T10:03:07Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-06-15T10:03:07Z"}, "message": "loongson2ef.md: New file.\n\n\t* config/mips/loongson2ef.md: New file.\n\t* config/mips/mips.md (UNSPEC_LOONGSON_ALU1_TURN_ENABLED_INSN)\n\t(UNSPEC_LOONGSON_ALU2_TURN_ENABLED_INSN)\n\t(UNSPEC_LOONGSON_FALU1_TURN_ENABLED_INSN)\n\t(UNSPEC_LOONGSON_FALU2_TURN_ENABLED_INSN): New constants.\n\t(define_attr \"cpu\"): Rename loongson2e and loongson2f to loongson_2e\n\tand loongson_2f.\n\t(loongson2ef.md): New include.\n\t* config/mips/loongson.md (vec_pack_ssat_<mode>, vec_pack_usat_<mode>)\n\t(add<mode>3, paddd, ssadd<mode>3, usadd<mode>3)\n\t(loongson_and_not_<mode>, loongson_average_<mode>, loongson_eq_<mode>)\n\t(loongson_gt_<mode>, loongson_extract_halfword)\n\t(loongson_insert_halfword_0, loongson_insert_halfword_2)\n\t(loongson_insert_halfword_3, loongson_mult_add, smax<mode>3)\n\t(umax<mode>3, smin<mode>3, umin<mode>3, loongson_move_byte_mask)\n\t(umul<mode>3_highpart, smul<mode>3_highpart, loongson_smul_lowpart)\n\t(loongson_umul_word, loongson_pasubub, reduc_uplus_<mode>)\n\t(loongson_psadbh, loongson_pshufh, loongson_psll<mode>)\n\t(loongson_psra<mode>, loongson_psrl<mode>, sub<mode>3, psubd)\n\t(sssub<mode>3, ussub<mode>3, vec_interleave_high<mode>)\n\t(vec_interleave_low<mode>): Define type attribute.\n\t* config/mips/mips.c (mips_ls2): New static variable.\n\t(mips_issue_rate): Update to handle tuning for Loongson 2E/2F.\n\t(mips_ls2_init_dfa_post_cycle_insn, mips_init_dfa_post_cycle_insn)\n\t(sched_ls2_dfa_post_advance_cycle, mips_dfa_post_advance_cycle):\n\tImplement target scheduling hooks.\n\t(mips_multipass_dfa_lookahead): Update to handle tuning for\n\tLoongson 2E/2F.\n\t(mips_sched_init): Initialize data for Loongson scheduling.\n\t(mips_ls2_variable_issue): New static function.\n\t(mips_variable_issue): Update to handle tuning for Loongson 2E/2F.\n\tAdd sanity check.\n\t(TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN)\n\t(TARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Override target hooks.\n\t* config/mips/mips.h (TUNE_LOONGSON_2EF): New macros.\n\t(ISA_HAS_XFER_DELAY, ISA_HAS_FCMP_DELAY, ISA_HAS_HILO_INTERLOCKS):\n\tHandle ST Loongson 2E/2F cores.\n\t(CPU_UNITS_QUERY): Define macro to enable querying of DFA units.\n\nFrom-SVN: r136805", "tree": {"sha": "1b6d70e1e8d6afb15b79450a882c31079c754452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b6d70e1e8d6afb15b79450a882c31079c754452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58684fa02e97dbfe84ac269146aa32191441685d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58684fa02e97dbfe84ac269146aa32191441685d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58684fa02e97dbfe84ac269146aa32191441685d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58684fa02e97dbfe84ac269146aa32191441685d/comments", "author": null, "committer": null, "parents": [{"sha": "1cbc62c077deab75b6ced6c89874d25f5b785ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbc62c077deab75b6ced6c89874d25f5b785ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbc62c077deab75b6ced6c89874d25f5b785ec9"}], "stats": {"total": 619, "additions": 577, "deletions": 42}, "files": [{"sha": "196c1aef134eac0043a5d5b3b3fe08a09093a0a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -1,3 +1,44 @@\n+2008-06-15  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* config/mips/loongson2ef.md: New file.\n+\t* config/mips/mips.md (UNSPEC_LOONGSON_ALU1_TURN_ENABLED_INSN)\n+\t(UNSPEC_LOONGSON_ALU2_TURN_ENABLED_INSN)\n+\t(UNSPEC_LOONGSON_FALU1_TURN_ENABLED_INSN)\n+\t(UNSPEC_LOONGSON_FALU2_TURN_ENABLED_INSN): New constants.\n+\t(define_attr \"cpu\"): Rename loongson2e and loongson2f to loongson_2e\n+\tand loongson_2f.\n+\t(loongson2ef.md): New include.\n+\t* config/mips/loongson.md (vec_pack_ssat_<mode>, vec_pack_usat_<mode>)\n+\t(add<mode>3, paddd, ssadd<mode>3, usadd<mode>3)\n+\t(loongson_and_not_<mode>, loongson_average_<mode>, loongson_eq_<mode>)\n+\t(loongson_gt_<mode>, loongson_extract_halfword)\n+\t(loongson_insert_halfword_0, loongson_insert_halfword_2)\n+\t(loongson_insert_halfword_3, loongson_mult_add, smax<mode>3)\n+\t(umax<mode>3, smin<mode>3, umin<mode>3, loongson_move_byte_mask)\n+\t(umul<mode>3_highpart, smul<mode>3_highpart, loongson_smul_lowpart)\n+\t(loongson_umul_word, loongson_pasubub, reduc_uplus_<mode>)\n+\t(loongson_psadbh, loongson_pshufh, loongson_psll<mode>)\n+\t(loongson_psra<mode>, loongson_psrl<mode>, sub<mode>3, psubd)\n+\t(sssub<mode>3, ussub<mode>3, vec_interleave_high<mode>)\n+\t(vec_interleave_low<mode>): Define type attribute.\n+\t* config/mips/mips.c (mips_ls2): New static variable.\n+\t(mips_issue_rate): Update to handle tuning for Loongson 2E/2F.\n+\t(mips_ls2_init_dfa_post_cycle_insn, mips_init_dfa_post_cycle_insn)\n+\t(sched_ls2_dfa_post_advance_cycle, mips_dfa_post_advance_cycle):\n+\tImplement target scheduling hooks.\n+\t(mips_multipass_dfa_lookahead): Update to handle tuning for\n+\tLoongson 2E/2F.\n+\t(mips_sched_init): Initialize data for Loongson scheduling.\n+\t(mips_ls2_variable_issue): New static function.\n+\t(mips_variable_issue): Update to handle tuning for Loongson 2E/2F.\n+\tAdd sanity check.\n+\t(TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN)\n+\t(TARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Override target hooks.\n+\t* config/mips/mips.h (TUNE_LOONGSON_2EF): New macros.\n+\t(ISA_HAS_XFER_DELAY, ISA_HAS_FCMP_DELAY, ISA_HAS_HILO_INTERLOCKS):\n+\tHandle ST Loongson 2E/2F cores.\n+\t(CPU_UNITS_QUERY): Define macro to enable querying of DFA units.\n+\n 2008-06-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* omp-low.c (extract_omp_for_data): Fix comment typo."}, {"sha": "73d183ac95c6ae50dfe7af85df5f7d04c559d65e", "filename": "gcc/config/mips/loongson.md", "status": "modified", "additions": 76, "deletions": 38, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Floongson.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Floongson.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson.md?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -108,7 +108,8 @@\n \t (ss_truncate:<V_squash>\n \t  (match_operand:VWH 2 \"register_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"packss<V_squash_double_suffix>\\t%0,%1,%2\")\n+  \"packss<V_squash_double_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Pack with unsigned saturation.\n (define_insn \"vec_pack_usat_<mode>\"\n@@ -119,15 +120,17 @@\n \t (us_truncate:<V_squash>\n \t  (match_operand:VH 2 \"register_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"packus<V_squash_double_suffix>\\t%0,%1,%2\")\n+  \"packus<V_squash_double_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Addition, treating overflow by wraparound.\n (define_insn \"add<mode>3\"\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n         (plus:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t   (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"padd<V_suffix>\\t%0,%1,%2\")\n+  \"padd<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Addition of doubleword integers stored in FP registers.\n ;; Overflow is treated by wraparound.\n@@ -141,23 +144,26 @@\n \t\t    (match_operand:DI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PADDD))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"paddd\\t%0,%1,%2\")\n+  \"paddd\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Addition, treating overflow by signed saturation.\n (define_insn \"ssadd<mode>3\"\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (ss_plus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"padds<V_suffix>\\t%0,%1,%2\")\n+  \"padds<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Addition, treating overflow by unsigned saturation.\n (define_insn \"usadd<mode>3\"\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (us_plus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"paddus<V_suffix>\\t%0,%1,%2\")\n+  \"paddus<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Logical AND NOT.\n (define_insn \"loongson_pandn_<V_suffix>\"\n@@ -166,7 +172,8 @@\n \t (not:VWHBDI (match_operand:VWHBDI 1 \"register_operand\" \"f\"))\n \t (match_operand:VWHBDI 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pandn\\t%0,%1,%2\")\n+  \"pandn\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Average.\n (define_insn \"loongson_pavg<V_suffix>\"\n@@ -175,7 +182,8 @@\n \t\t     (match_operand:VHB 2 \"register_operand\" \"f\")]\n \t\t    UNSPEC_LOONGSON_PAVG))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pavg<V_suffix>\\t%0,%1,%2\")\n+  \"pavg<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Equality test.\n (define_insn \"loongson_pcmpeq<V_suffix>\"\n@@ -184,7 +192,8 @@\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PCMPEQ))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pcmpeq<V_suffix>\\t%0,%1,%2\")\n+  \"pcmpeq<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Greater-than test.\n (define_insn \"loongson_pcmpgt<V_suffix>\"\n@@ -193,7 +202,8 @@\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PCMPGT))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pcmpgt<V_suffix>\\t%0,%1,%2\")\n+  \"pcmpgt<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Extract halfword.\n (define_insn \"loongson_pextr<V_suffix>\"\n@@ -202,7 +212,8 @@\n  \t\t    (match_operand:SI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PEXTR))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pextr<V_suffix>\\t%0,%1,%2\")\n+  \"pextr<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Insert halfword.\n (define_insn \"loongson_pinsr<V_suffix>_0\"\n@@ -211,31 +222,35 @@\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PINSR_0))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pinsr<V_suffix>_0\\t%0,%1,%2\")\n+  \"pinsr<V_suffix>_0\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n (define_insn \"loongson_pinsr<V_suffix>_1\"\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PINSR_1))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pinsr<V_suffix>_1\\t%0,%1,%2\")\n+  \"pinsr<V_suffix>_1\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n (define_insn \"loongson_pinsr<V_suffix>_2\"\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PINSR_2))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pinsr<V_suffix>_2\\t%0,%1,%2\")\n+  \"pinsr<V_suffix>_2\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n (define_insn \"loongson_pinsr<V_suffix>_3\"\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (unspec:VH [(match_operand:VH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PINSR_3))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pinsr<V_suffix>_3\\t%0,%1,%2\")\n+  \"pinsr<V_suffix>_3\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n ;; Multiply and add packed integers.\n (define_insn \"loongson_pmadd<V_stretch_half_suffix>\"\n@@ -244,47 +259,53 @@\n \t\t\t\t  (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t\t\t UNSPEC_LOONGSON_PMADD))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmadd<V_stretch_half_suffix>\\t%0,%1,%2\")\n+  \"pmadd<V_stretch_half_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Maximum of signed halfwords.\n (define_insn \"smax<mode>3\"\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (smax:VH (match_operand:VH 1 \"register_operand\" \"f\")\n \t\t (match_operand:VH 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmaxs<V_suffix>\\t%0,%1,%2\")\n+  \"pmaxs<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Maximum of unsigned bytes.\n (define_insn \"umax<mode>3\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=f\")\n         (umax:VB (match_operand:VB 1 \"register_operand\" \"f\")\n \t\t (match_operand:VB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmaxu<V_suffix>\\t%0,%1,%2\")\n+  \"pmaxu<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Minimum of signed halfwords.\n (define_insn \"smin<mode>3\"\n   [(set (match_operand:VH 0 \"register_operand\" \"=f\")\n         (smin:VH (match_operand:VH 1 \"register_operand\" \"f\")\n \t\t (match_operand:VH 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmins<V_suffix>\\t%0,%1,%2\")\n+  \"pmins<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Minimum of unsigned bytes.\n (define_insn \"umin<mode>3\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=f\")\n         (umin:VB (match_operand:VB 1 \"register_operand\" \"f\")\n \t\t (match_operand:VB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pminu<V_suffix>\\t%0,%1,%2\")\n+  \"pminu<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Move byte mask.\n (define_insn \"loongson_pmovmsk<V_suffix>\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=f\")\n         (unspec:VB [(match_operand:VB 1 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMOVMSK))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmovmsk<V_suffix>\\t%0,%1\")\n+  \"pmovmsk<V_suffix>\\t%0,%1\"\n+  [(set_attr \"type\" \"fabs\")])\n \n ;; Multiply unsigned integers and store high result.\n (define_insn \"umul<mode>3_highpart\"\n@@ -293,7 +314,8 @@\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULHU))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmulhu<V_suffix>\\t%0,%1,%2\")\n+  \"pmulhu<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Multiply signed integers and store high result.\n (define_insn \"smul<mode>3_highpart\"\n@@ -302,7 +324,8 @@\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULH))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmulh<V_suffix>\\t%0,%1,%2\")\n+  \"pmulh<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Multiply signed integers and store low result.\n (define_insn \"loongson_pmull<V_suffix>\"\n@@ -311,7 +334,8 @@\n \t\t    (match_operand:VH 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULL))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmull<V_suffix>\\t%0,%1,%2\")\n+  \"pmull<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Multiply unsigned word integers.\n (define_insn \"loongson_pmulu<V_suffix>\"\n@@ -320,7 +344,8 @@\n \t\t    (match_operand:VW 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PMULU))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pmulu<V_suffix>\\t%0,%1,%2\")\n+  \"pmulu<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Absolute difference.\n (define_insn \"loongson_pasubub\"\n@@ -329,15 +354,17 @@\n \t\t    (match_operand:VB 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PASUBUB))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pasubub\\t%0,%1,%2\")\n+  \"pasubub\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Sum of unsigned byte integers.\n (define_insn \"reduc_uplus_<mode>\"\n   [(set (match_operand:<V_stretch_half> 0 \"register_operand\" \"=f\")\n         (unspec:<V_stretch_half> [(match_operand:VB 1 \"register_operand\" \"f\")]\n \t\t\t\t UNSPEC_LOONGSON_BIADD))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"biadd\\t%0,%1\")\n+  \"biadd\\t%0,%1\"\n+  [(set_attr \"type\" \"fabs\")])\n \n ;; Sum of absolute differences.\n (define_insn \"loongson_psadbh\"\n@@ -346,7 +373,8 @@\n \t\t\t\t  (match_operand:VB 2 \"register_operand\" \"f\")]\n \t\t\t\t UNSPEC_LOONGSON_PSADBH))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pasubub\\t%0,%1,%2;biadd\\t%0,%0\")\n+  \"pasubub\\t%0,%1,%2;biadd\\t%0,%0\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Shuffle halfwords.\n (define_insn \"loongson_pshufh\"\n@@ -356,39 +384,44 @@\n \t\t    (match_operand:SI 3 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PSHUFH))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"pshufh\\t%0,%2,%3\")\n+  \"pshufh\\t%0,%2,%3\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Shift left logical.\n (define_insn \"loongson_psll<V_suffix>\"\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (ashift:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t    (match_operand:SI 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psll<V_suffix>\\t%0,%1,%2\")\n+  \"psll<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmul\")])\n \n ;; Shift right arithmetic.\n (define_insn \"loongson_psra<V_suffix>\"\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (ashiftrt:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psra<V_suffix>\\t%0,%1,%2\")\n+  \"psra<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n ;; Shift right logical.\n (define_insn \"loongson_psrl<V_suffix>\"\n   [(set (match_operand:VWH 0 \"register_operand\" \"=f\")\n         (lshiftrt:VWH (match_operand:VWH 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SI 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psrl<V_suffix>\\t%0,%1,%2\")\n+  \"psrl<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n ;; Subtraction, treating overflow by wraparound.\n (define_insn \"sub<mode>3\"\n   [(set (match_operand:VWHB 0 \"register_operand\" \"=f\")\n         (minus:VWHB (match_operand:VWHB 1 \"register_operand\" \"f\")\n \t\t    (match_operand:VWHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psub<V_suffix>\\t%0,%1,%2\")\n+  \"psub<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Subtraction of doubleword integers stored in FP registers.\n ;; Overflow is treated by wraparound.\n@@ -400,23 +433,26 @@\n \t\t    (match_operand:DI 2 \"register_operand\" \"f\")]\n \t\t   UNSPEC_LOONGSON_PSUBD))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psubd\\t%0,%1,%2\")\n+  \"psubd\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Subtraction, treating overflow by signed saturation.\n (define_insn \"sssub<mode>3\"\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (ss_minus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psubs<V_suffix>\\t%0,%1,%2\")\n+  \"psubs<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Subtraction, treating overflow by unsigned saturation.\n (define_insn \"ussub<mode>3\"\n   [(set (match_operand:VHB 0 \"register_operand\" \"=f\")\n         (us_minus:VHB (match_operand:VHB 1 \"register_operand\" \"f\")\n \t\t      (match_operand:VHB 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"psubus<V_suffix>\\t%0,%1,%2\")\n+  \"psubus<V_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fadd\")])\n \n ;; Unpack high data.\n (define_insn \"vec_interleave_high<mode>\"\n@@ -425,7 +461,8 @@\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PUNPCKH))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"punpckh<V_stretch_half_suffix>\\t%0,%1,%2\")\n+  \"punpckh<V_stretch_half_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n ;; Unpack low data.\n (define_insn \"vec_interleave_low<mode>\"\n@@ -434,4 +471,5 @@\n \t\t      (match_operand:VWHB 2 \"register_operand\" \"f\")]\n \t\t     UNSPEC_LOONGSON_PUNPCKL))]\n   \"TARGET_HARD_FLOAT && TARGET_LOONGSON_VECTORS\"\n-  \"punpckl<V_stretch_half_suffix>\\t%0,%1,%2\")\n+  \"punpckl<V_stretch_half_suffix>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fdiv\")])"}, {"sha": "8d29482210221130aa5bdb8cbe3fda8bcb39b851", "filename": "gcc/config/mips/loongson2ef.md", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson2ef.md?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -0,0 +1,240 @@\n+;; Pipeline model for ST Microelectronics Loongson-2E/2F cores.\n+\n+;; Copyright (C) 2008 Free Software Foundation, Inc.\n+;; Contributed by CodeSourcery.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Automaton for integer instructions.\n+(define_automaton \"ls2_alu\")\n+\n+;; ALU1 and ALU2.\n+;; We need to query these units to adjust round-robin counter.\n+(define_query_cpu_unit \"ls2_alu1_core,ls2_alu2_core\" \"ls2_alu\")\n+\n+;; Pseudo units to help modeling of ALU1/2 round-robin dispatch strategy.\n+(define_cpu_unit \"ls2_alu1_turn,ls2_alu2_turn\" \"ls2_alu\")\n+\n+;; Pseudo units to enable/disable ls2_alu[12]_turn units.\n+;; ls2_alu[12]_turn unit can be subscribed only after ls2_alu[12]_turn_enabled\n+;; unit is subscribed.\n+(define_cpu_unit \"ls2_alu1_turn_enabled,ls2_alu2_turn_enabled\" \"ls2_alu\")\n+(presence_set \"ls2_alu1_turn\" \"ls2_alu1_turn_enabled\")\n+(presence_set \"ls2_alu2_turn\" \"ls2_alu2_turn_enabled\")\n+\n+;; Reservations for ALU1 (ALU2) instructions.\n+;; Instruction goes to ALU1 (ALU2) and makes next ALU1/2 instruction to\n+;; be dispatched to ALU2 (ALU1).\n+(define_reservation \"ls2_alu1\"\n+  \"(ls2_alu1_core+ls2_alu2_turn_enabled)|ls2_alu1_core\")\n+(define_reservation \"ls2_alu2\"\n+  \"(ls2_alu2_core+ls2_alu1_turn_enabled)|ls2_alu2_core\")\n+\n+;; Reservation for ALU1/2 instructions.\n+;; Instruction will go to ALU1 iff ls2_alu1_turn_enabled is subscribed and\n+;; switch the turn to ALU2 by subscribing ls2_alu2_turn_enabled.\n+;; Or to ALU2 otherwise.\n+(define_reservation \"ls2_alu\"\n+  \"(ls2_alu1_core+ls2_alu1_turn+ls2_alu2_turn_enabled)\n+   |(ls2_alu1_core+ls2_alu1_turn)\n+   |(ls2_alu2_core+ls2_alu2_turn+ls2_alu1_turn_enabled)\n+   |(ls2_alu2_core+ls2_alu2_turn)\")\n+\n+;; Automaton for floating-point instructions.\n+(define_automaton \"ls2_falu\")\n+\n+;; FALU1 and FALU2.\n+;; We need to query these units to adjust round-robin counter.\n+(define_query_cpu_unit \"ls2_falu1_core,ls2_falu2_core\" \"ls2_falu\")\n+\n+;; Pseudo units to help modeling of FALU1/2 round-robin dispatch strategy.\n+(define_cpu_unit \"ls2_falu1_turn,ls2_falu2_turn\" \"ls2_falu\")\n+\n+;; Pseudo units to enable/disable ls2_falu[12]_turn units.\n+;; ls2_falu[12]_turn unit can be subscribed only after\n+;; ls2_falu[12]_turn_enabled unit is subscribed.\n+(define_cpu_unit \"ls2_falu1_turn_enabled,ls2_falu2_turn_enabled\" \"ls2_falu\")\n+(presence_set \"ls2_falu1_turn\" \"ls2_falu1_turn_enabled\")\n+(presence_set \"ls2_falu2_turn\" \"ls2_falu2_turn_enabled\")\n+\n+;; Reservations for FALU1 (FALU2) instructions.\n+;; Instruction goes to FALU1 (FALU2) and makes next FALU1/2 instruction to\n+;; be dispatched to FALU2 (FALU1).\n+(define_reservation \"ls2_falu1\"\n+  \"(ls2_falu1_core+ls2_falu2_turn_enabled)|ls2_falu1_core\")\n+(define_reservation \"ls2_falu2\"\n+  \"(ls2_falu2_core+ls2_falu1_turn_enabled)|ls2_falu2_core\")\n+\n+;; Reservation for FALU1/2 instructions.\n+;; Instruction will go to FALU1 iff ls2_falu1_turn_enabled is subscribed and\n+;; switch the turn to FALU2 by subscribing ls2_falu2_turn_enabled.\n+;; Or to FALU2 otherwise.\n+(define_reservation \"ls2_falu\"\n+  \"(ls2_falu1+ls2_falu1_turn+ls2_falu2_turn_enabled)\n+   |(ls2_falu1+ls2_falu1_turn)\n+   |(ls2_falu2+ls2_falu2_turn+ls2_falu1_turn_enabled)\n+   |(ls2_falu2+ls2_falu2_turn)\")\n+\n+;; The following 4 instructions each subscribe one of\n+;; ls2_[f]alu{1,2}_turn_enabled units according to this attribute.\n+;; These instructions are used in mips.c: sched_ls2_dfa_post_advance_cycle.\n+\n+(define_attr \"ls2_turn_type\" \"alu1,alu2,falu1,falu2,unknown\"\n+  (const_string \"unknown\"))\n+\n+;; Subscribe ls2_alu1_turn_enabled.\n+(define_insn \"ls2_alu1_turn_enabled_insn\"\n+  [(unspec [(const_int 0)] UNSPEC_LOONGSON_ALU1_TURN_ENABLED_INSN)]\n+  \"TUNE_LOONGSON_2EF\"\n+  { gcc_unreachable (); }\n+  [(set_attr \"ls2_turn_type\" \"alu1\")])\n+\n+(define_insn_reservation \"ls2_alu1_turn_enabled\" 0\n+  (eq_attr \"ls2_turn_type\" \"alu1\")\n+  \"ls2_alu1_turn_enabled\")\n+\n+;; Subscribe ls2_alu2_turn_enabled.\n+(define_insn \"ls2_alu2_turn_enabled_insn\"\n+  [(unspec [(const_int 0)] UNSPEC_LOONGSON_ALU2_TURN_ENABLED_INSN)]\n+  \"TUNE_LOONGSON_2EF\"\n+  { gcc_unreachable (); }\n+  [(set_attr \"ls2_turn_type\" \"alu2\")])\n+\n+(define_insn_reservation \"ls2_alu2_turn_enabled\" 0\n+  (eq_attr \"ls2_turn_type\" \"alu2\")\n+  \"ls2_alu2_turn_enabled\")\n+\n+;; Subscribe ls2_falu1_turn_enabled.\n+(define_insn \"ls2_falu1_turn_enabled_insn\"\n+  [(unspec [(const_int 0)] UNSPEC_LOONGSON_FALU1_TURN_ENABLED_INSN)]\n+  \"TUNE_LOONGSON_2EF\"\n+  { gcc_unreachable (); }\n+  [(set_attr \"ls2_turn_type\" \"falu1\")])\n+\n+(define_insn_reservation \"ls2_falu1_turn_enabled\" 0\n+  (eq_attr \"ls2_turn_type\" \"falu1\")\n+  \"ls2_falu1_turn_enabled\")\n+\n+;; Subscribe ls2_falu2_turn_enabled.\n+(define_insn \"ls2_falu2_turn_enabled_insn\"\n+  [(unspec [(const_int 0)] UNSPEC_LOONGSON_FALU2_TURN_ENABLED_INSN)]\n+  \"TUNE_LOONGSON_2EF\"\n+  { gcc_unreachable (); }\n+  [(set_attr \"ls2_turn_type\" \"falu2\")])\n+\n+(define_insn_reservation \"ls2_falu2_turn_enabled\" 0\n+  (eq_attr \"ls2_turn_type\" \"falu2\")\n+  \"ls2_falu2_turn_enabled\")\n+\n+;; Automaton for memory operations.\n+(define_automaton \"ls2_mem\")\n+\n+;; Memory unit.\n+(define_query_cpu_unit \"ls2_mem\" \"ls2_mem\")\n+\n+;; Reservation for integer instructions.\n+(define_insn_reservation \"ls2_alu\" 2\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"arith,condmove,const,logical,mfhilo,move,\n+                        mthilo,nop,shift,signext,slt\"))\n+  \"ls2_alu\")\n+\n+;; Reservation for branch instructions.\n+(define_insn_reservation \"ls2_branch\" 2\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"branch,jump,call,trap\"))\n+  \"ls2_alu1\")\n+\n+;; Reservation for integer multiplication instructions.\n+(define_insn_reservation \"ls2_imult\" 5\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"imul,imul3\"))\n+  \"ls2_alu2,ls2_alu2_core\")\n+\n+;; Reservation for integer division / remainder instructions.\n+;; These instructions use the SRT algorithm and hence take 2-38 cycles.\n+(define_insn_reservation \"ls2_idiv\" 20\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"ls2_alu2,ls2_alu2_core*18\")\n+\n+;; Reservation for memory load instructions.\n+(define_insn_reservation \"ls2_load\" 5\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"load,fpload,mfc,mtc\"))\n+  \"ls2_mem\")\n+\n+;; Reservation for memory store instructions.\n+;; With stores we assume they don't alias with dependent loads.\n+;; Therefore we set the latency to zero.\n+(define_insn_reservation \"ls2_store\" 0\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"store,fpstore\"))\n+  \"ls2_mem\")\n+\n+;; Reservation for floating-point instructions of latency 3.\n+(define_insn_reservation \"ls2_fp3\" 3\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"fabs,fneg,fcmp,fmove\"))\n+  \"ls2_falu1\")\n+\n+;; Reservation for floating-point instructions of latency 5.\n+(define_insn_reservation \"ls2_fp5\" 5\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"ls2_falu1\")\n+\n+;; Reservation for floating-point instructions that can go\n+;; to either of FALU1/2 units.\n+(define_insn_reservation \"ls2_falu\" 7\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"fadd,fmul,fmadd\"))\n+  \"ls2_falu\")\n+\n+;; Reservation for floating-point division / remainder instructions.\n+;; These instructions use the SRT algorithm and hence take a variable amount\n+;; of cycles:\n+;; div.s takes 5-11 cycles\n+;; div.d takes 5-18 cycles\n+(define_insn_reservation \"ls2_fdiv\" 9\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"fdiv\"))\n+  \"ls2_falu2,ls2_falu2_core*7\")\n+\n+;; Reservation for floating-point sqrt instructions.\n+;; These instructions use the SRT algorithm and hence take a variable amount\n+;; of cycles:\n+;; sqrt.s takes 5-17 cycles\n+;; sqrt.d takes 5-32 cycles\n+(define_insn_reservation \"ls2_fsqrt\" 15\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"fsqrt\"))\n+  \"ls2_falu2,ls2_falu2_core*13\")\n+\n+;; Two consecutive ALU instructions.\n+(define_insn_reservation \"ls2_multi\" 4\n+  (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"(ls2_alu1,ls2_alu2_core)|(ls2_alu2,ls2_alu1_core)\")\n+\n+;; Reservation for everything else.  Normally, this reservation\n+;; will only be used to handle cases like compiling for non-loongson\n+;; CPUs with -mtune=loongson2?.\n+;;\n+;; This reservation depends upon the fact that DFA will check\n+;; reservations in the same order as they appear in the file.\n+(define_insn_reservation \"ls2_unknown\" 1\n+  (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n+  \"ls2_alu1_core+ls2_alu2_core+ls2_falu1_core+ls2_falu2_core+ls2_mem\")"}, {"sha": "3ef0b331373fe12076a24334b5aba838b90ef102", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -9778,6 +9778,41 @@ mips_store_data_bypass_p (rtx out_insn, rtx in_insn)\n   return !store_data_bypass_p (out_insn, in_insn);\n }\n \f\n+\n+/* Variables and flags used in scheduler hooks when tuning for\n+   Loongson 2E/2F.  */\n+static struct\n+{\n+  /* Variables to support Loongson 2E/2F round-robin [F]ALU1/2 dispatch\n+     strategy.  */\n+\n+  /* If true, then next ALU1/2 instruction will go to ALU1.  */\n+  bool alu1_turn_p;\n+\n+  /* If true, then next FALU1/2 unstruction will go to FALU1.  */\n+  bool falu1_turn_p;\n+\n+  /* Codes to query if [f]alu{1,2}_core units are subscribed or not.  */\n+  int alu1_core_unit_code;\n+  int alu2_core_unit_code;\n+  int falu1_core_unit_code;\n+  int falu2_core_unit_code;\n+\n+  /* True if current cycle has a multi instruction.\n+     This flag is used in mips_ls2_dfa_post_advance_cycle.  */\n+  bool cycle_has_multi_p;\n+\n+  /* Instructions to subscribe ls2_[f]alu{1,2}_turn_enabled units.\n+     These are used in mips_ls2_dfa_post_advance_cycle to initialize\n+     DFA state.\n+     E.g., when alu1_turn_enabled_insn is issued it makes next ALU1/2\n+     instruction to go ALU1.  */\n+  rtx alu1_turn_enabled_insn;\n+  rtx alu2_turn_enabled_insn;\n+  rtx falu1_turn_enabled_insn;\n+  rtx falu2_turn_enabled_insn;\n+} mips_ls2;\n+\n /* Implement TARGET_SCHED_ADJUST_COST.  We assume that anti and output\n    dependencies have no cost, except on the 20Kc where output-dependence\n    is treated like input-dependence.  */\n@@ -9828,11 +9863,124 @@ mips_issue_rate (void)\n \t reach the theoretical max of 4.  */\n       return 3;\n \n+    case PROCESSOR_LOONGSON_2E:\n+    case PROCESSOR_LOONGSON_2F:\n+      return 4;\n+\n     default:\n       return 1;\n     }\n }\n \n+/* Implement TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN hook for Loongson2.  */\n+\n+static void\n+mips_ls2_init_dfa_post_cycle_insn (void)\n+{\n+  start_sequence ();\n+  emit_insn (gen_ls2_alu1_turn_enabled_insn ());\n+  mips_ls2.alu1_turn_enabled_insn = get_insns ();\n+  end_sequence ();\n+\n+  start_sequence ();\n+  emit_insn (gen_ls2_alu2_turn_enabled_insn ());\n+  mips_ls2.alu2_turn_enabled_insn = get_insns ();\n+  end_sequence ();\n+\n+  start_sequence ();\n+  emit_insn (gen_ls2_falu1_turn_enabled_insn ());\n+  mips_ls2.falu1_turn_enabled_insn = get_insns ();\n+  end_sequence ();\n+\n+  start_sequence ();\n+  emit_insn (gen_ls2_falu2_turn_enabled_insn ());\n+  mips_ls2.falu2_turn_enabled_insn = get_insns ();\n+  end_sequence ();\n+\n+  mips_ls2.alu1_core_unit_code = get_cpu_unit_code (\"ls2_alu1_core\");\n+  mips_ls2.alu2_core_unit_code = get_cpu_unit_code (\"ls2_alu2_core\");\n+  mips_ls2.falu1_core_unit_code = get_cpu_unit_code (\"ls2_falu1_core\");\n+  mips_ls2.falu2_core_unit_code = get_cpu_unit_code (\"ls2_falu2_core\");\n+}\n+\n+/* Implement TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN hook.\n+   Init data used in mips_dfa_post_advance_cycle.  */\n+\n+static void\n+mips_init_dfa_post_cycle_insn (void)\n+{\n+  if (TUNE_LOONGSON_2EF)\n+    mips_ls2_init_dfa_post_cycle_insn ();\n+}\n+\n+/* Initialize STATE when scheduling for Loongson 2E/2F.\n+   Support round-robin dispatch scheme by enabling only one of\n+   ALU1/ALU2 and one of FALU1/FALU2 units for ALU1/2 and FALU1/2 instructions\n+   respectively.  */\n+\n+static void\n+mips_ls2_dfa_post_advance_cycle (state_t state)\n+{\n+  if (cpu_unit_reservation_p (state, mips_ls2.alu1_core_unit_code))\n+    {\n+      /* Though there are no non-pipelined ALU1 insns,\n+\t we can get an instruction of type 'multi' before reload.  */\n+      gcc_assert (mips_ls2.cycle_has_multi_p);\n+      mips_ls2.alu1_turn_p = false;\n+    }\n+\n+  mips_ls2.cycle_has_multi_p = false;\n+\n+  if (cpu_unit_reservation_p (state, mips_ls2.alu2_core_unit_code))\n+    /* We have a non-pipelined alu instruction in the core,\n+       adjust round-robin counter.  */\n+    mips_ls2.alu1_turn_p = true;\n+\n+  if (mips_ls2.alu1_turn_p)\n+    {\n+      if (state_transition (state, mips_ls2.alu1_turn_enabled_insn) >= 0)\n+\tgcc_unreachable ();\n+    }\n+  else\n+    {\n+      if (state_transition (state, mips_ls2.alu2_turn_enabled_insn) >= 0)\n+\tgcc_unreachable ();\n+    }\n+\n+  if (cpu_unit_reservation_p (state, mips_ls2.falu1_core_unit_code))\n+    {\n+      /* There are no non-pipelined FALU1 insns.  */\n+      gcc_unreachable ();\n+      mips_ls2.falu1_turn_p = false;\n+    }\n+\n+  if (cpu_unit_reservation_p (state, mips_ls2.falu2_core_unit_code))\n+    /* We have a non-pipelined falu instruction in the core,\n+       adjust round-robin counter.  */\n+    mips_ls2.falu1_turn_p = true;\n+\n+  if (mips_ls2.falu1_turn_p)\n+    {\n+      if (state_transition (state, mips_ls2.falu1_turn_enabled_insn) >= 0)\n+\tgcc_unreachable ();\n+    }\n+  else\n+    {\n+      if (state_transition (state, mips_ls2.falu2_turn_enabled_insn) >= 0)\n+\tgcc_unreachable ();\n+    }\n+}\n+\n+/* Implement TARGET_SCHED_DFA_POST_ADVANCE_CYCLE.\n+   This hook is being called at the start of each cycle.  */\n+\n+static void\n+mips_dfa_post_advance_cycle (void)\n+{\n+  if (TUNE_LOONGSON_2EF)\n+    mips_ls2_dfa_post_advance_cycle (curr_state);\n+}\n+\n /* Implement TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD.  This should\n    be as wide as the scheduling freedom in the DFA.  */\n \n@@ -9843,6 +9991,9 @@ mips_multipass_dfa_lookahead (void)\n   if (TUNE_SB1)\n     return 4;\n \n+  if (TUNE_LOONGSON_2EF)\n+    return 4;\n+\n   return 0;\n }\n \f\n@@ -10103,6 +10254,12 @@ mips_sched_init (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n   mips_macc_chains_last_hilo = 0;\n   vr4130_last_insn = 0;\n   mips_74k_agen_init (NULL_RTX);\n+\n+  /* When scheduling for Loongson2, branch instructions go to ALU1,\n+     therefore basic block is most likely to start with round-robin counter\n+     pointed to ALU2.  */\n+  mips_ls2.alu1_turn_p = false;\n+  mips_ls2.falu1_turn_p = true;\n }\n \n /* Implement TARGET_SCHED_REORDER and TARGET_SCHED_REORDER2.  */\n@@ -10128,6 +10285,37 @@ mips_sched_reorder (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n   return mips_issue_rate ();\n }\n \n+/* Update round-robin counters for ALU1/2 and FALU1/2.  */\n+\n+static void\n+mips_ls2_variable_issue (rtx insn)\n+{\n+  if (mips_ls2.alu1_turn_p)\n+    {\n+      if (cpu_unit_reservation_p (curr_state, mips_ls2.alu1_core_unit_code))\n+\tmips_ls2.alu1_turn_p = false;\n+    }\n+  else\n+    {\n+      if (cpu_unit_reservation_p (curr_state, mips_ls2.alu2_core_unit_code))\n+\tmips_ls2.alu1_turn_p = true;\n+    }\n+\n+  if (mips_ls2.falu1_turn_p)\n+    {\n+      if (cpu_unit_reservation_p (curr_state, mips_ls2.falu1_core_unit_code))\n+\tmips_ls2.falu1_turn_p = false;\n+    }\n+  else\n+    {\n+      if (cpu_unit_reservation_p (curr_state, mips_ls2.falu2_core_unit_code))\n+\tmips_ls2.falu1_turn_p = true;\n+    }\n+\n+  if (recog_memoized (insn) >= 0)\n+    mips_ls2.cycle_has_multi_p |= (get_attr_type (insn) == TYPE_MULTI);\n+}\n+\n /* Implement TARGET_SCHED_VARIABLE_ISSUE.  */\n \n static int\n@@ -10143,7 +10331,16 @@ mips_variable_issue (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n       vr4130_last_insn = insn;\n       if (TUNE_74K)\n \tmips_74k_agen_init (insn);\n+      else if (TUNE_LOONGSON_2EF)\n+\tmips_ls2_variable_issue (insn);\n     }\n+\n+  /* Instructions of type 'multi' should all be split before\n+     the second scheduling pass.  */\n+  gcc_assert (!reload_completed\n+\t      || recog_memoized (insn) < 0\n+\t      || get_attr_type (insn) != TYPE_MULTI);\n+\n   return more;\n }\n \f\n@@ -12881,6 +13078,10 @@ mips_order_regs_for_local_alloc (void)\n #define TARGET_SCHED_ADJUST_COST mips_adjust_cost\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE mips_issue_rate\n+#undef TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN\n+#define TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN mips_init_dfa_post_cycle_insn\n+#undef TARGET_SCHED_DFA_POST_ADVANCE_CYCLE\n+#define TARGET_SCHED_DFA_POST_ADVANCE_CYCLE mips_dfa_post_advance_cycle\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   mips_multipass_dfa_lookahead"}, {"sha": "5bcebd845e01d8c8b554ea95e3c2f090a2415a0a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -266,6 +266,8 @@ enum mips_code_readable_setting {\n \t\t\t\t     || mips_tune == PROCESSOR_74KF1_1  \\\n \t\t\t\t     || mips_tune == PROCESSOR_74KF3_2)\n #define TUNE_20KC\t\t    (mips_tune == PROCESSOR_20KC)\n+#define TUNE_LOONGSON_2EF           (mips_tune == PROCESSOR_LOONGSON_2E\t\\\n+\t\t\t\t     || mips_tune == PROCESSOR_LOONGSON_2F)\n \n /* Whether vector modes and intrinsics for ST Microelectronics\n    Loongson-2E/2F processors should be enabled.  In o32 pairs of\n@@ -891,10 +893,12 @@ enum mips_code_readable_setting {\n \t\t\t\t && !TARGET_MIPS16)\n \n /* Likewise mtc1 and mfc1.  */\n-#define ISA_HAS_XFER_DELAY\t(mips_isa <= 3)\n+#define ISA_HAS_XFER_DELAY\t(mips_isa <= 3\t\t\t\\\n+\t\t\t\t && !TARGET_LOONGSON_2EF)\n \n /* Likewise floating-point comparisons.  */\n-#define ISA_HAS_FCMP_DELAY\t(mips_isa <= 3)\n+#define ISA_HAS_FCMP_DELAY\t(mips_isa <= 3\t\t\t\\\n+\t\t\t\t && !TARGET_LOONGSON_2EF)\n \n /* True if mflo and mfhi can be immediately followed by instructions\n    which write to the HI and LO registers.\n@@ -911,7 +915,8 @@ enum mips_code_readable_setting {\n #define ISA_HAS_HILO_INTERLOCKS\t(ISA_MIPS32\t\t\t\t\\\n \t\t\t\t || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t || TARGET_MIPS5500)\n+\t\t\t\t || TARGET_MIPS5500\t\t\t\\\n+\t\t\t\t || TARGET_LOONGSON_2EF)\n \n /* ISA includes synci, jr.hb and jalr.hb.  */\n #define ISA_HAS_SYNCI (ISA_MIPS32R2 && !TARGET_MIPS16)\n@@ -3212,3 +3217,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n extern const struct mips_rtx_cost_data *mips_cost;\n extern enum mips_code_readable_setting mips_code_readable;\n #endif\n+\n+/* Enable querying of DFA units.  */\n+#define CPU_UNITS_QUERY 1"}, {"sha": "d75ea8cd3b08eac416264a11a04e894207e9bb25", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58684fa02e97dbfe84ac269146aa32191441685d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=58684fa02e97dbfe84ac269146aa32191441685d", "patch": "@@ -239,6 +239,12 @@\n    (UNSPEC_LOONGSON_PUNPCKL\t519)\n    (UNSPEC_LOONGSON_PADDD\t520)\n    (UNSPEC_LOONGSON_PSUBD\t521)\n+\n+   ;; Used in loongson2ef.md\n+   (UNSPEC_LOONGSON_ALU1_TURN_ENABLED_INSN   530)\n+   (UNSPEC_LOONGSON_ALU2_TURN_ENABLED_INSN   531)\n+   (UNSPEC_LOONGSON_FALU1_TURN_ENABLED_INSN  532)\n+   (UNSPEC_LOONGSON_FALU2_TURN_ENABLED_INSN  533)\n   ]\n )\n \n@@ -441,7 +447,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,74kf3_2,loongson2e,loongson2f,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000,xlr\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,74kf3_2,loongson_2e,loongson_2f,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000,xlr\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -793,6 +799,7 @@\n (include \"sb1.md\")\n (include \"sr71k.md\")\n (include \"xlr.md\")\n+(include \"loongson2ef.md\")\n (include \"generic.md\")\n \f\n ;;"}]}