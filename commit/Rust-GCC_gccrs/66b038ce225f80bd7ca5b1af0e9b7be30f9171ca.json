{"sha": "66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiMDM4Y2UyMjVmODBiZDdjYTViMWFmMGU5YjdiZTMwZjkxNzFjYQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2012-08-15T22:15:44Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-08-15T22:15:44Z"}, "message": "spu.c: Include \"cfgloop.h\".\n\n\t* config/spu/spu.c: Include \"cfgloop.h\".\n\t(spu_machine_dependent_reorg): Call loop_optimizer_init and\n\tloop_optimizer_finalize.  Use bb_loop_depth instead of loop_depth.\n\tDirectly compare loop_father values where appropriate.\n\t* config/spu/t-spu-elf (spu.o): Update dependencies.\n\nFrom-SVN: r190421", "tree": {"sha": "64c0020bb4381a06037a1c269adb806f53cdad42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c0020bb4381a06037a1c269adb806f53cdad42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/comments", "author": null, "committer": null, "parents": [{"sha": "0b2d443bef10e972db37d28d4626ab8dbbf4abcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2d443bef10e972db37d28d4626ab8dbbf4abcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2d443bef10e972db37d28d4626ab8dbbf4abcc"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "12cecd51059828457c4e7175abaf6030720c9ae7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "patch": "@@ -1,3 +1,11 @@\n+2012-08-15  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.c: Include \"cfgloop.h\".\n+\t(spu_machine_dependent_reorg): Call loop_optimizer_init and\n+\tloop_optimizer_finalize.  Use bb_loop_depth instead of loop_depth.\n+\tDirectly compare loop_father values where appropriate.\n+\t* config/spu/t-spu-elf (spu.o): Update dependencies.\n+\n 2012-08-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (tree-cfg.o): Also depend on $(TARGET_H)."}, {"sha": "51e0dfbb08351999372314c687954c3f42cd62bf", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "patch": "@@ -53,6 +53,7 @@\n #include \"timevar.h\"\n #include \"df.h\"\n #include \"dumpfile.h\"\n+#include \"cfgloop.h\"\n \n /* Builtin types, data and prototypes. */\n \n@@ -2458,6 +2459,10 @@ spu_machine_dependent_reorg (void)\n   in_spu_reorg = 1;\n   compute_bb_for_insn ();\n \n+  /* (Re-)discover loops so that bb->loop_father can be used\n+     in the analysis below.  */\n+  loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+\n   compact_blocks ();\n \n   spu_bb_info =\n@@ -2562,14 +2567,13 @@ spu_machine_dependent_reorg (void)\n \t     fallthru block. This catches the cases when it is a simple\n \t     loop or when there is an initial branch into the loop. */\n \t  if (prev && (loop_exit || simple_loop)\n-\t      && prev->loop_depth <= bb->loop_depth)\n+\t      && bb_loop_depth (prev) <= bb_loop_depth (bb))\n \t    prop = prev;\n \n \t  /* If there is only one adjacent predecessor.  Don't propagate\n-\t     outside this loop.  This loop_depth test isn't perfect, but\n-\t     I'm not sure the loop_father member is valid at this point.  */\n+\t     outside this loop.  */\n \t  else if (prev && single_pred_p (bb)\n-\t\t   && prev->loop_depth == bb->loop_depth)\n+\t\t   && prev->loop_father == bb->loop_father)\n \t    prop = prev;\n \n \t  /* If this is the JOIN block of a simple IF-THEN then\n@@ -2578,7 +2582,7 @@ spu_machine_dependent_reorg (void)\n \t\t   && EDGE_COUNT (bb->preds) == 2\n \t\t   && EDGE_COUNT (prev->preds) == 1\n \t\t   && EDGE_PRED (prev, 0)->src == prev2\n-\t\t   && prev2->loop_depth == bb->loop_depth\n+\t\t   && prev2->loop_father == bb->loop_father\n \t\t   && GET_CODE (branch_target) != REG)\n \t    prop = prev;\n \n@@ -2600,7 +2604,7 @@ spu_machine_dependent_reorg (void)\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"propagate from %i to %i (loop depth %i) \"\n \t\t\t \"for %i (loop_exit %i simple_loop %i dist %i)\\n\",\n-\t\t\t bb->index, prop->index, bb->loop_depth,\n+\t\t\t bb->index, prop->index, bb_loop_depth (bb),\n \t\t\t INSN_UID (branch), loop_exit, simple_loop,\n \t\t\t branch_addr - INSN_ADDRESSES (INSN_UID (bbend)));\n \n@@ -2657,6 +2661,8 @@ spu_machine_dependent_reorg (void)\n \n   spu_var_tracking ();\n \n+  loop_optimizer_finalize ();\n+\n   free_bb_for_insn ();\n \n   in_spu_reorg = 0;"}, {"sha": "83a16191d18fe1e2cf6c140c47aef33b6de868a7", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b038ce225f80bd7ca5b1af0e9b7be30f9171ca/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=66b038ce225f80bd7ca5b1af0e9b7be30f9171ca", "patch": "@@ -23,7 +23,7 @@ spu.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   real.h insn-config.h conditions.h insn-attr.h flags.h $(RECOG_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n   output.h $(BASIC_BLOCK_H) $(GGC_H) $(HASHTAB_H) \\\n-  $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h \\\n+  $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h $(CFGLOOP_H) \\\n   $(srcdir)/config/spu/spu-protos.h \\\n   $(srcdir)/config/spu/spu-builtins.def \n "}]}