{"sha": "04cc7d7c136f99982541145e155c8281dc57dc1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRjYzdkN2MxMzZmOTk5ODI1NDExNDVlMTU1YzgyODFkYzU3ZGMxYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-25T18:06:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-25T18:06:32Z"}, "message": "Solaris/Irix compatibility patches.\n\nFrom-SVN: r180440", "tree": {"sha": "1332bfef8a166ad506aba500e3aad8d13a8c32bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1332bfef8a166ad506aba500e3aad8d13a8c32bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04cc7d7c136f99982541145e155c8281dc57dc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc7d7c136f99982541145e155c8281dc57dc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cc7d7c136f99982541145e155c8281dc57dc1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc7d7c136f99982541145e155c8281dc57dc1b/comments", "author": null, "committer": null, "parents": [{"sha": "f9367b7c7010b02d6a6dca7278b01ea3fab17d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9367b7c7010b02d6a6dca7278b01ea3fab17d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9367b7c7010b02d6a6dca7278b01ea3fab17d91"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "02b9ec34cf3bd89e948aada9430636c21b3aeb8a", "filename": "libgo/go/syscall/exec_stubs.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -17,3 +17,7 @@ func Exec(argv0 string, argv []string, envv []string) (err int) {\n func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, errno int) {\n \treturn -1, ENOSYS;\n }\n+\n+func raw_ptrace(request int, pid int, addr *byte, data *byte) int {\n+\treturn ENOSYS\n+}"}, {"sha": "96dfa4d847ce509d207df15b79d5e8e96e784279", "filename": "libgo/go/syscall/exec_unix.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -16,9 +16,6 @@ import (\n //sysnb\traw_fork() (pid Pid_t, errno int)\n //fork() Pid_t\n \n-//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (errno int)\n-//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n-\n //sysnb raw_setsid() (errno int)\n //setsid() Pid_t\n "}, {"sha": "ae4535597138e9c95de1abf0ac82e405e21b92c4", "filename": "libgo/go/syscall/libcall_irix.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -0,0 +1,8 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (errno int)\n+//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "58422e16e8bef78f28e7a8caf7ff0eaa9b2c9472", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -29,6 +29,9 @@ func Futimes(fd int, tv []Timeval) (errno int) {\n //sys\tptrace(request int, pid int, addr uintptr, data uintptr) (errno int)\n //ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n \n+//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (errno int)\n+//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long\n+\n func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, errno int) {\n \t// The peek requests are machine-size oriented, so we wrap it\n \t// to retrieve arbitrary-length data.\n@@ -192,6 +195,9 @@ func PtraceDetach(pid int) (errno int) { return ptrace(PTRACE_DETACH, pid, 0, 0)\n //sys\tFchownat(dirfd int, path string, uid int, gid int, flags int) (errno int)\n //fchownat(dirfd int, path *byte, owner Uid_t, group Gid_t, flags int) int\n \n+//sys\tFlock(fd int, how int) (errno int)\n+//flock(fd int, how int) int\n+\n // FIXME: mksysinfo statfs\n // //sys\tFstatfs(fd int, buf *Statfs_t) (errno int)\n // //fstatfs(fd int, buf *Statfs_t) int"}, {"sha": "0baec6276f13cc0a89f4f9b0e2647cecc0bfc346", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -199,9 +199,6 @@ func FDZero(set *FdSet) {\n //sys\tFdatasync(fd int) (errno int)\n //fdatasync(fd int) int\n \n-//sys\tFlock(fd int, how int) (errno int)\n-//flock(fd int, how int) int\n-\n //sys\tFsync(fd int) (errno int)\n //fsync(fd int) int\n "}, {"sha": "9c4e966f1ae9ca99ae8a3b08c1222655f8536045", "filename": "libgo/go/syscall/libcall_solaris_386.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -7,3 +7,6 @@ package syscall\n // 32-bit Solaris 2/x86 needs to use _nuname internally, cf. <sys/utsname.h>.\n //sysnb\tUname(buf *Utsname) (errno int)\n //_nuname(buf *Utsname) int\n+\n+//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (errno int)\n+//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "f0d335dbb67792a97ee19210ed3e1a6a222dc864", "filename": "libgo/go/syscall/libcall_solaris_amd64.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+// 64-bit ptrace(3C) doesn't exist\n+func raw_ptrace(request int, pid int, addr *byte, data *byte) int {\n+\treturn ENOSYS\n+}"}, {"sha": "ae4535597138e9c95de1abf0ac82e405e21b92c4", "filename": "libgo/go/syscall/libcall_solaris_sparc.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -0,0 +1,8 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (errno int)\n+//ptrace(request int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "f0d335dbb67792a97ee19210ed3e1a6a222dc864", "filename": "libgo/go/syscall/libcall_solaris_sparc64.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc7d7c136f99982541145e155c8281dc57dc1b/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go?ref=04cc7d7c136f99982541145e155c8281dc57dc1b", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+// 64-bit ptrace(3C) doesn't exist\n+func raw_ptrace(request int, pid int, addr *byte, data *byte) int {\n+\treturn ENOSYS\n+}"}]}