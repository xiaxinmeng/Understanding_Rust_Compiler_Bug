{"sha": "466c212744b8307eef2e40272ceda90e8fc12f97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2YzIxMjc0NGI4MzA3ZWVmMmU0MDI3MmNlZGE5MGU4ZmMxMmY5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:10:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:10:20Z"}, "message": "[multiple changes]\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Asynchronous_Select): If the trigger\n\tof the asynchronous select is a dispatching call, transform the\n\tabortable part into a procedure, to avoid duplication of local\n\tloop variables that may appear within.\n\n2013-07-08  Vincent Celier  <celier@adacore.com>\n\n\t* projects.texi: Update the documentation of suffixes in package\n\tNaming.\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Conforming_Types): Anonymous_access_to_subprograsm\n\ttypes are type conformant if the designated type of one is\n\tprotected and the other is not. Convention only matters when\n\tchecking subtype conformance.\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, propagate\n\tback the fully resolved operands to the original function call\n\tso that all semantic information remains available to ASIS.\n\nFrom-SVN: r200767", "tree": {"sha": "d6f48d9fd1c23407b976f1d27ac24452feefb143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6f48d9fd1c23407b976f1d27ac24452feefb143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/466c212744b8307eef2e40272ceda90e8fc12f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466c212744b8307eef2e40272ceda90e8fc12f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466c212744b8307eef2e40272ceda90e8fc12f97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466c212744b8307eef2e40272ceda90e8fc12f97/comments", "author": null, "committer": null, "parents": [{"sha": "7b23a7acb483d484bb91601f6b55c1699227ba4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b23a7acb483d484bb91601f6b55c1699227ba4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b23a7acb483d484bb91601f6b55c1699227ba4b"}], "stats": {"total": 183, "additions": 138, "deletions": 45}, "files": [{"sha": "a463f6a2b1319417219448a639051aea4de68863", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=466c212744b8307eef2e40272ceda90e8fc12f97", "patch": "@@ -1,3 +1,28 @@\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): If the trigger\n+\tof the asynchronous select is a dispatching call, transform the\n+\tabortable part into a procedure, to avoid duplication of local\n+\tloop variables that may appear within.\n+\n+2013-07-08  Vincent Celier  <celier@adacore.com>\n+\n+\t* projects.texi: Update the documentation of suffixes in package\n+\tNaming.\n+\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Conforming_Types): Anonymous_access_to_subprograsm\n+\ttypes are type conformant if the designated type of one is\n+\tprotected and the other is not. Convention only matters when\n+\tchecking subtype conformance.\n+\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, propagate\n+\tback the fully resolved operands to the original function call\n+\tso that all semantic information remains available to ASIS.\n+\n 2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb: minor reformatting (remove obsolete comment)."}, {"sha": "fdafd22a6d2d4118ca09724ddf7b6af1770f14bd", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=466c212744b8307eef2e40272ceda90e8fc12f97", "patch": "@@ -6756,6 +6756,40 @@ package body Exp_Ch9 is\n       S   : Entity_Id;  --  Primitive operation slot\n       T   : Entity_Id;  --  Additional status flag\n \n+      procedure Rewrite_Abortable_Part;\n+      --  If the trigger is a dispatching call, the expansion inserts multiple\n+      --  copies of the abortable part. This is both inefficient, and may lead\n+      --  to duplicate definitions that the back-end will reject, when the\n+      --  abortable part includes loops. This procedure rewrites the abortable\n+      --  part into a call to a generated procedure.\n+\n+      ----------------------------\n+      -- Rewrite_Abortable_Part --\n+      ----------------------------\n+\n+      procedure Rewrite_Abortable_Part is\n+         Proc : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uA);\n+         Decl : Node_Id;\n+\n+      begin\n+         Decl :=\n+           Make_Subprogram_Body (Loc,\n+             Specification              =>\n+               Make_Procedure_Specification (Loc, Defining_Unit_Name => Proc),\n+             Declarations               => New_List,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc, Astats));\n+         Insert_Before (N, Decl);\n+         Analyze (Decl);\n+\n+         --  Rewrite abortable part into a call to this procedure.\n+\n+         Astats :=\n+           New_List (\n+             Make_Procedure_Call_Statement (Loc,\n+               Name => New_Occurrence_Of (Proc, Loc)));\n+      end Rewrite_Abortable_Part;\n+\n    begin\n       Process_Statements_For_Controlled_Objects (Trig);\n       Process_Statements_For_Controlled_Objects (Abrt);\n@@ -6791,12 +6825,13 @@ package body Exp_Ch9 is\n          if Ada_Version >= Ada_2005\n            and then\n              (No (Original_Node (Ecall))\n-                or else not Nkind_In (Original_Node (Ecall),\n-                                        N_Delay_Relative_Statement,\n-                                        N_Delay_Until_Statement))\n+               or else not Nkind_In (Original_Node (Ecall),\n+                                     N_Delay_Relative_Statement,\n+                                     N_Delay_Until_Statement))\n          then\n             Extract_Dispatching_Call (Ecall, Call_Ent, Obj, Actuals, Formals);\n \n+            Rewrite_Abortable_Part;\n             Decls := New_List;\n             Stmts := New_List;\n \n@@ -6831,9 +6866,9 @@ package body Exp_Ch9 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uD),\n-                Object_Definition =>\n-                  New_Reference_To (\n-                    RTE (RE_Dummy_Communication_Block), Loc)));\n+                Object_Definition   =>\n+                  New_Reference_To\n+                    (RTE (RE_Dummy_Communication_Block), Loc)));\n \n             K := Build_K (Loc, Decls, Obj);\n \n@@ -6875,8 +6910,7 @@ package body Exp_Ch9 is\n \n             Prepend_To (Cleanup_Stmts,\n               Make_Assignment_Statement (Loc,\n-                Name =>\n-                  New_Reference_To (Bnn, Loc),\n+                Name       => New_Reference_To (Bnn, Loc),\n                 Expression =>\n                   Make_Unchecked_Type_Conversion (Loc,\n                     Subtype_Mark =>\n@@ -6889,10 +6923,10 @@ package body Exp_Ch9 is\n             Prepend_To (Cleanup_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n-                  New_Reference_To (\n-                    Find_Prim_Op (Etype (Etype (Obj)),\n-                      Name_uDisp_Asynchronous_Select),\n-                    Loc),\n+                  New_Reference_To\n+                    (Find_Prim_Op\n+                       (Etype (Etype (Obj)), Name_uDisp_Asynchronous_Select),\n+                     Loc),\n                 Parameter_Associations =>\n                   New_List (\n                     New_Copy_Tree (Obj),             --  <object>\n@@ -7117,10 +7151,10 @@ package body Exp_Ch9 is\n             Append_To (Conc_Typ_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n-                  New_Reference_To (\n-                    Find_Prim_Op (Etype (Etype (Obj)),\n-                      Name_uDisp_Get_Prim_Op_Kind),\n-                    Loc),\n+                  New_Reference_To\n+                    (Find_Prim_Op (Etype (Etype (Obj)),\n+                                   Name_uDisp_Get_Prim_Op_Kind),\n+                     Loc),\n                 Parameter_Associations =>\n                   New_List (\n                     New_Copy_Tree (Obj),\n@@ -7240,11 +7274,11 @@ package body Exp_Ch9 is\n \n             Abortable_Block :=\n               Make_Block_Statement (Loc,\n-                Identifier => New_Reference_To (Blk_Ent, Loc),\n+                Identifier                 => New_Reference_To (Blk_Ent, Loc),\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => Astats),\n-                Has_Created_Identifier => True,\n+                Has_Created_Identifier     => True,\n                 Is_Asynchronous_Call_Block => True);\n \n             --  Append call to if Enqueue (When, DB'Unchecked_Access) then\n@@ -7292,8 +7326,8 @@ package body Exp_Ch9 is\n                   Make_Object_Declaration (Loc,\n                     Defining_Identifier => Dblock_Ent,\n                     Aliased_Present     => True,\n-                    Object_Definition   => New_Reference_To (\n-                      RTE (RE_Delay_Block), Loc))),\n+                    Object_Definition   =>\n+                      New_Reference_To (RTE (RE_Delay_Block), Loc))),\n \n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n@@ -7318,10 +7352,9 @@ package body Exp_Ch9 is\n \n          Decl := First (Decls);\n          while Present (Decl)\n-           and then\n-             (Nkind (Decl) /= N_Object_Declaration\n-               or else not Is_RTE (Etype (Object_Definition (Decl)),\n-                                   RE_Communication_Block))\n+           and then (Nkind (Decl) /= N_Object_Declaration\n+                      or else not Is_RTE (Etype (Object_Definition (Decl)),\n+                                          RE_Communication_Block))\n          loop\n             Next (Decl);\n          end loop;\n@@ -7338,13 +7371,12 @@ package body Exp_Ch9 is\n          --    Mode => Asynchronous_Call;\n          --    Block => Bnn);\n \n-         Stmt := First (Stmts);\n-\n          --  Skip assignments to temporaries created for in-out parameters\n \n          --  This makes unwarranted assumptions about the shape of the expanded\n          --  tree for the call, and should be cleaned up ???\n \n+         Stmt := First (Stmts);\n          while Nkind (Stmt) /= N_Procedure_Call_Statement loop\n             Next (Stmt);\n          end loop;"}, {"sha": "7072e0e6ada51adc07909649cdf0ecad7bb65f83", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=466c212744b8307eef2e40272ceda90e8fc12f97", "patch": "@@ -926,16 +926,21 @@ The following attributes can be defined in package @code{Naming}:\n   that contain declaration (header files in C for instance). The attribute\n   is indexed on the language.\n   The two attributes are equivalent, but the latter is obsolescent.\n+\n+  If the value of the attribute is the empty string, it indicates to the\n+  Project Manager that the only specifications/header files for the language\n+  are those specified with attributes @code{Spec} or\n+  @code{Specification_Exceptions}.\n+\n   If @code{Spec_Suffix (\"Ada\")} is not specified, then the default is\n   @code{\"^.ads^.ADS^\"}.\n-  The value must satisfy the following requirements:\n+\n+  A non empty value must satisfy the following requirements:\n \n   @itemize -\n-  @item It must not be empty\n-  @item It cannot start with an alphanumeric character\n-  @item It cannot start with an underscore followed by an alphanumeric character\n   @item It must include at least one dot\n-\n+  @item If @code{Dot_Replacement} is a single dot, then it cannot include\n+        more than one dot.\n   @end itemize\n \n @item @b{Body_Suffix} and @b{Implementation_Suffix}:\n@@ -945,6 +950,14 @@ The following attributes can be defined in package @code{Naming}:\n   code (bodies in Ada). They are indexed on the language. The second\n   version is obsolescent and fully replaced by the first attribute.\n \n+  For each language of a project, one of these two attributes need to be\n+  specified, either in the project itself or in the configuration project file.\n+\n+  If the value of the attribute is the empty string, it indicates to the\n+  Project Manager that the only source files for the language\n+  are those specified with attributes @code{Body} or\n+  @code{Implementation_Exceptions}.\n+\n   These attributes must satisfy the same requirements as @code{Spec_Suffix}.\n   In addition, they must be different from any of the values in\n   @code{Spec_Suffix}.\n@@ -956,10 +969,10 @@ The following attributes can be defined in package @code{Naming}:\n   suffixes will be a body if the longest suffix is @code{Body_Suffix (\"Ada\")}\n   or a spec if the longest suffix is @code{Spec_Suffix (\"Ada\")}.\n \n-  If the suffix does not start with a '.', a file with a name exactly equal\n-  to the suffix will also be part of the project (for instance if you define\n-  the suffix as @code{Makefile}, a file called @file{Makefile} will be part\n-  of the project. This capability is usually not interesting  when building.\n+  If the suffix does not start with a '.', a file with a name exactly equal to\n+  the suffix will also be part of the project (for instance if you define the\n+  suffix as @code{Makefile.in}, a file called @file{Makefile.in} will be part\n+  of the project. This capability is usually not interesting when building.\n   However, it might become useful when a project is also used to\n   find the list of source files in an editor, like the GNAT Programming System\n   (GPS).\n@@ -968,7 +981,11 @@ The following attributes can be defined in package @code{Naming}:\n @cindex @code{Separate_Suffix}\n   This attribute is specific to Ada. It denotes the suffix used in file names\n   that contain separate bodies. If it is not specified, then it defaults to\n-  same value as @code{Body_Suffix (\"Ada\")}. The same rules apply as for the\n+  same value as @code{Body_Suffix (\"Ada\")}.\n+\n+  The value of this attribute cannot be the empty string.\n+\n+  Otherwise, the same rules apply as for the\n   @code{Body_Suffix} attribute. The only accepted index is \"Ada\".\n \n @item @b{Spec} or @b{Specification}:"}, {"sha": "57712d83d9cbd35af875d6fa22970d34a8f97ead", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=466c212744b8307eef2e40272ceda90e8fc12f97", "patch": "@@ -2789,11 +2789,11 @@ package body Sem_Ch6 is\n               and then\n                 (Nkind (Original_Node (Spec_Decl)) =\n                                         N_Subprogram_Renaming_Declaration\n-                   or else (Present (Corresponding_Body (Spec_Decl))\n-                             and then\n-                               Nkind (Unit_Declaration_Node\n-                                        (Corresponding_Body (Spec_Decl))) =\n-                                           N_Subprogram_Renaming_Declaration))\n+                  or else (Present (Corresponding_Body (Spec_Decl))\n+                            and then\n+                              Nkind (Unit_Declaration_Node\n+                                       (Corresponding_Body (Spec_Decl))) =\n+                                          N_Subprogram_Renaming_Declaration))\n             then\n                Conformant := True;\n \n@@ -7663,13 +7663,16 @@ package body Sem_Ch6 is\n       end if;\n \n       --  Ada 2005 (AI-254): Anonymous access-to-subprogram types must be\n-      --  treated recursively because they carry a signature.\n+      --  treated recursively because they carry a signature. As far as\n+      --  conformance is concerned, convention plays no role, and either\n+      --  or both could be access to protected subprograms.\n \n       Are_Anonymous_Access_To_Subprogram_Types :=\n-        Ekind (Type_1) = Ekind (Type_2)\n+        Ekind_In (Type_1, E_Anonymous_Access_Subprogram_Type,\n+                          E_Anonymous_Access_Protected_Subprogram_Type)\n           and then\n-            Ekind_In (Type_1, E_Anonymous_Access_Subprogram_Type,\n-                              E_Anonymous_Access_Protected_Subprogram_Type);\n+        Ekind_In (Type_2, E_Anonymous_Access_Subprogram_Type,\n+                          E_Anonymous_Access_Protected_Subprogram_Type);\n \n       --  Test anonymous access type case. For this case, static subtype\n       --  matching is required for mode conformance (RM 6.3.1(15)). We check"}, {"sha": "9b26f096f884363e0f77784efc07d259b6c99579", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466c212744b8307eef2e40272ceda90e8fc12f97/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=466c212744b8307eef2e40272ceda90e8fc12f97", "patch": "@@ -1576,6 +1576,22 @@ package body Sem_Res is\n       else\n          Resolve (N, Typ);\n       end if;\n+\n+      --  If in ASIS_Mode, propagate operand types to original actuals of\n+      --  function call, which would otherwise not be fully resolved.\n+\n+      if ASIS_Mode then\n+         if Is_Binary then\n+            Set_Parameter_Associations\n+              (Original_Node (N),\n+               New_List (New_Copy_Tree (Left_Opnd (N)),\n+                         New_Copy_Tree (Right_Opnd (N))));\n+         else\n+            Set_Parameter_Associations\n+              (Original_Node (N),\n+               New_List (New_Copy_Tree (Right_Opnd (N))));\n+         end if;\n+      end if;\n    end Make_Call_Into_Operator;\n \n    -------------------"}]}