{"sha": "47811d7dbe38c4e47c83426aa29ae41d7db055c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4MTFkN2RiZTM4YzRlNDdjODM0MjZhYTI5YWU0MWQ3ZGIwNTVjMQ==", "commit": {"author": {"name": "Luis Machado", "email": "luis.machado@linaro.org", "date": "2018-05-07T15:47:14Z"}, "committer": {"name": "Luis Machado", "email": "luisgpm@gcc.gnu.org", "date": "2018-05-07T15:47:14Z"}, "message": "re PR bootstrap/85681 (r259995 breaks bootstrap on x86_64-*-freebsd)\n\n2018-05-07  Luis Machado  <luis.machado@linaro.org>\n\n\tPR bootstrap/85681\n\tRevert:\n\t2018-05-07  Luis Machado  <luis.machado@linaro.org>\n\n\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n\t<prefetch_dynamic_strides>: New const bool field.\n\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n\tprefetch_dynamic_strides.\n\t(exynosm1_prefetch_tune): Likewise.\n\t(thunderxt88_prefetch_tune): Likewise.\n\t(thunderx_prefetch_tune): Likewise.\n\t(thunderx2t99_prefetch_tune): Likewise.\n\t(qdf24xx_prefetch_tune): Likewise. Set prefetch_dynamic_strides to false.\n\t(aarch64_override_options_internal): Update to set\n\tPARAM_PREFETCH_DYNAMIC_STRIDES.\n\t* doc/invoke.texi (prefetch-dynamic-strides): Document new option.\n\t* params.def (PARAM_PREFETCH_DYNAMIC_STRIDES): New.\n\t* params.h (PARAM_PREFETCH_DYNAMIC_STRIDES): Define.\n\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Account for\n\tprefetch-dynamic-strides setting.\n\n\t2018-05-07  Luis Machado  <luis.machado@linaro.org>\n\n\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n\t<minimum_stride>: New const int field.\n\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n\tminimum_stride field.\n\t(exynosm1_prefetch_tune): Likewise.\n\t(thunderxt88_prefetch_tune): Likewise.\n\t(thunderx_prefetch_tune): Likewise.\n\t(thunderx2t99_prefetch_tune): Likewise.\n\t(qdf24xx_prefetch_tune): Likewise. Set minimum_stride to 2048.\n\t(aarch64_override_options_internal): Update to set\n\tPARAM_PREFETCH_MINIMUM_STRIDE.\n\t* doc/invoke.texi (prefetch-minimum-stride): Document new option.\n\t* params.def (PARAM_PREFETCH_MINIMUM_STRIDE): New.\n\t* params.h (PARAM_PREFETCH_MINIMUM_STRIDE): Define.\n\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Return false if\n\tstride is constant and is below the minimum stride threshold.\n\nFrom-SVN: r260000", "tree": {"sha": "ba5b251e40d7685d9bb682e933059f22c8f5a2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5b251e40d7685d9bb682e933059f22c8f5a2ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47811d7dbe38c4e47c83426aa29ae41d7db055c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47811d7dbe38c4e47c83426aa29ae41d7db055c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47811d7dbe38c4e47c83426aa29ae41d7db055c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47811d7dbe38c4e47c83426aa29ae41d7db055c1/comments", "author": {"login": "luislinaro", "id": 53092780, "node_id": "MDQ6VXNlcjUzMDkyNzgw", "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luislinaro", "html_url": "https://github.com/luislinaro", "followers_url": "https://api.github.com/users/luislinaro/followers", "following_url": "https://api.github.com/users/luislinaro/following{/other_user}", "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions", "organizations_url": "https://api.github.com/users/luislinaro/orgs", "repos_url": "https://api.github.com/users/luislinaro/repos", "events_url": "https://api.github.com/users/luislinaro/events{/privacy}", "received_events_url": "https://api.github.com/users/luislinaro/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd056e39d11a88adad5ab91fd3a0a556803e72a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd056e39d11a88adad5ab91fd3a0a556803e72a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd056e39d11a88adad5ab91fd3a0a556803e72a7"}], "stats": {"total": 145, "additions": 43, "deletions": 102}, "files": [{"sha": "cb5582b86adb8e7ebf3f1e0954966e6a80a51866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -1,3 +1,45 @@\n+2018-05-07  Luis Machado  <luis.machado@linaro.org>\n+\n+\tPR bootstrap/85681\n+\tRevert:\n+\t2018-05-07  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n+\t<prefetch_dynamic_strides>: New const bool field.\n+\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n+\tprefetch_dynamic_strides.\n+\t(exynosm1_prefetch_tune): Likewise.\n+\t(thunderxt88_prefetch_tune): Likewise.\n+\t(thunderx_prefetch_tune): Likewise.\n+\t(thunderx2t99_prefetch_tune): Likewise.\n+\t(qdf24xx_prefetch_tune): Likewise. Set prefetch_dynamic_strides to false.\n+\t(aarch64_override_options_internal): Update to set\n+\tPARAM_PREFETCH_DYNAMIC_STRIDES.\n+\t* doc/invoke.texi (prefetch-dynamic-strides): Document new option.\n+\t* params.def (PARAM_PREFETCH_DYNAMIC_STRIDES): New.\n+\t* params.h (PARAM_PREFETCH_DYNAMIC_STRIDES): Define.\n+\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Account for\n+\tprefetch-dynamic-strides setting.\n+\n+\t2018-05-07  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n+\t<minimum_stride>: New const int field.\n+\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n+\tminimum_stride field.\n+\t(exynosm1_prefetch_tune): Likewise.\n+\t(thunderxt88_prefetch_tune): Likewise.\n+\t(thunderx_prefetch_tune): Likewise.\n+\t(thunderx2t99_prefetch_tune): Likewise.\n+\t(qdf24xx_prefetch_tune): Likewise. Set minimum_stride to 2048.\n+\t(aarch64_override_options_internal): Update to set\n+\tPARAM_PREFETCH_MINIMUM_STRIDE.\n+\t* doc/invoke.texi (prefetch-minimum-stride): Document new option.\n+\t* params.def (PARAM_PREFETCH_MINIMUM_STRIDE): New.\n+\t* params.h (PARAM_PREFETCH_MINIMUM_STRIDE): Define.\n+\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Return false if\n+\tstride is constant and is below the minimum stride threshold.\n+\n 2018-05-07  Luis Machado  <luis.machado@linaro.org>\n \n \t* config/aarch64/aarch64.c (qdf24xx_prefetch_tune) <l2_cache_size>: Set"}, {"sha": "cda2895d28e7496f8fd6c1b365c4bb497b54c323", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -230,12 +230,6 @@ struct cpu_prefetch_tune\n   const int l1_cache_size;\n   const int l1_cache_line_size;\n   const int l2_cache_size;\n-  /* Whether software prefetch hints should be issued for non-constant\n-     strides.  */\n-  const bool prefetch_dynamic_strides;\n-  /* The minimum constant stride beyond which we should use prefetch\n-     hints for.  */\n-  const int minimum_stride;\n   const int default_opt_level;\n };\n "}, {"sha": "6847b9a683c3c9b3f3824f779875064ac029f70a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -547,8 +547,6 @@ static const cpu_prefetch_tune generic_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   -1,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n-  true,\t\t\t/* prefetch_dynamic_strides */\n-  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -558,8 +556,6 @@ static const cpu_prefetch_tune exynosm1_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n-  true,\t\t\t/* prefetch_dynamic_strides */\n-  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -569,9 +565,7 @@ static const cpu_prefetch_tune qdf24xx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   512,\t\t\t/* l2_cache_size  */\n-  false,\t\t/* prefetch_dynamic_strides */\n-  2048,\t\t\t/* minimum_stride */\n-  3\t\t\t/* default_opt_level  */\n+  -1\t\t\t/* default_opt_level  */\n };\n \n static const cpu_prefetch_tune thunderxt88_prefetch_tune =\n@@ -580,8 +574,6 @@ static const cpu_prefetch_tune thunderxt88_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   16*1024,\t\t/* l2_cache_size  */\n-  true,\t\t\t/* prefetch_dynamic_strides */\n-  -1,\t\t\t/* minimum_stride */\n   3\t\t\t/* default_opt_level  */\n };\n \n@@ -591,8 +583,6 @@ static const cpu_prefetch_tune thunderx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n-  true,\t\t\t/* prefetch_dynamic_strides */\n-  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -602,8 +592,6 @@ static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   256,\t\t\t/* l2_cache_size  */\n-  true,\t\t\t/* prefetch_dynamic_strides */\n-  -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n \n@@ -10608,16 +10596,6 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t   aarch64_tune_params.prefetch->l2_cache_size,\n \t\t\t   opts->x_param_values,\n \t\t\t   global_options_set.x_param_values);\n-  if (!aarch64_tune_params.prefetch->prefetch_dynamic_strides)\n-    maybe_set_param_value (PARAM_PREFETCH_DYNAMIC_STRIDES,\n-\t\t\t   0,\n-\t\t\t   opts->x_param_values,\n-\t\t\t   global_options_set.x_param_values);\n-  if (aarch64_tune_params.prefetch->minimum_stride >= 0)\n-    maybe_set_param_value (PARAM_PREFETCH_MINIMUM_STRIDE,\n-\t\t\t   aarch64_tune_params.prefetch->minimum_stride,\n-\t\t\t   opts->x_param_values,\n-\t\t\t   global_options_set.x_param_values);\n \n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, SCHED_PRESSURE_MODEL,"}, {"sha": "255149fcfb87001eaebc5477d9d697d274ff1432", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -10733,31 +10733,6 @@ The size of L1 cache, in kilobytes.\n @item l2-cache-size\n The size of L2 cache, in kilobytes.\n \n-@item prefetch-dynamic-strides\n-Whether the loop array prefetch pass should issue software prefetch hints\n-for strides that are non-constant.  In some cases this may be\n-beneficial, though the fact the stride is non-constant may make it\n-hard to predict when there is clear benefit to issuing these hints.\n-\n-Set to 1, the default, if the prefetch hints should be issued for non-constant\n-strides.  Set to 0 if prefetch hints should be issued only for strides that\n-are known to be constant and below @option{prefetch-minimum-stride}.\n-\n-@item prefetch-minimum-stride\n-Minimum constant stride, in bytes, to start using prefetch hints for.  If\n-the stride is less than this threshold, prefetch hints will not be issued.\n-\n-This setting is useful for processors that have hardware prefetchers, in\n-which case there may be conflicts between the hardware prefetchers and\n-the software prefetchers.  If the hardware prefetchers have a maximum\n-stride they can handle, it should be used here to improve the use of\n-software prefetchers.\n-\n-A value of -1, the default, means we don't have a threshold and therefore\n-prefetch hints can be issued for any constant stride.\n-\n-This setting is only useful for strides that are known and constant.\n-\n @item loop-interchange-max-num-stmts\n The maximum number of stmts in a loop to be interchanged.\n "}, {"sha": "dad47ec2b000069d284c8af20a13a73dba02281b", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -790,24 +790,6 @@ DEFPARAM (PARAM_L2_CACHE_SIZE,\n \t  \"The size of L2 cache.\",\n \t  512, 0, 0)\n \n-/* Whether software prefetch hints should be issued for non-constant\n-   strides.  */\n-\n-DEFPARAM (PARAM_PREFETCH_DYNAMIC_STRIDES,\n-\t  \"prefetch-dynamic-strides\",\n-\t  \"Whether software prefetch hints should be issued for non-constant \"\n-\t  \"strides.\",\n-\t  1, 0, 1)\n-\n-/* The minimum constant stride beyond which we should use prefetch hints\n-   for.  */\n-\n-DEFPARAM (PARAM_PREFETCH_MINIMUM_STRIDE,\n-\t  \"prefetch-minimum-stride\",\n-\t  \"The minimum constant stride beyond which we should use prefetch \"\n-\t  \"hints for.\",\n-\t  -1, 0, 0)\n-\n /* Maximum number of statements in loop nest for loop interchange.  */\n \n DEFPARAM (PARAM_LOOP_INTERCHANGE_MAX_NUM_STMTS,"}, {"sha": "98249d2a1f6ff2c23d69c2a3d13fda45a8d6d6c9", "filename": "gcc/params.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -196,10 +196,6 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n #define L2_CACHE_SIZE \\\n   PARAM_VALUE (PARAM_L2_CACHE_SIZE)\n-#define PREFETCH_DYNAMIC_STRIDES \\\n-  PARAM_VALUE (PARAM_PREFETCH_DYNAMIC_STRIDES)\n-#define PREFETCH_MINIMUM_STRIDE \\\n-  PARAM_VALUE (PARAM_PREFETCH_MINIMUM_STRIDE)\n #define USE_CANONICAL_TYPES \\\n   PARAM_VALUE (PARAM_USE_CANONICAL_TYPES)\n #define IRA_MAX_LOOPS_NUM \\"}, {"sha": "2f10db185904b2df06e533306edb9c8239730272", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47811d7dbe38c4e47c83426aa29ae41d7db055c1/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=47811d7dbe38c4e47c83426aa29ae41d7db055c1", "patch": "@@ -992,32 +992,6 @@ prune_by_reuse (struct mem_ref_group *groups)\n static bool\n should_issue_prefetch_p (struct mem_ref *ref)\n {\n-  /* Do we want to issue prefetches for non-constant strides?  */\n-  if (!cst_and_fits_in_hwi (ref->group->step) && PREFETCH_DYNAMIC_STRIDES == 0)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file,\n-\t\t \"Skipping non-constant step for reference %u:%u\\n\",\n-\t\t ref->group->uid, ref->uid);\n-      return false;\n-    }\n-\n-  /* Some processors may have a hardware prefetcher that may conflict with\n-     prefetch hints for a range of strides.  Make sure we don't issue\n-     prefetches for such cases if the stride is within this particular\n-     range.  */\n-  if (cst_and_fits_in_hwi (ref->group->step)\n-      && absu_hwi (int_cst_value (ref->group->step)) < PREFETCH_MINIMUM_STRIDE)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file,\n-\t\t \"Step for reference %u:%u (%d) is less than the mininum \"\n-\t\t \"required stride of %d\\n\",\n-\t\t ref->group->uid, ref->uid, int_cst_value (ref->group->step),\n-\t\t PREFETCH_MINIMUM_STRIDE);\n-      return false;\n-    }\n-\n   /* For now do not issue prefetches for only first few of the\n      iterations.  */\n   if (ref->prefetch_before != PREFETCH_ALL)"}]}