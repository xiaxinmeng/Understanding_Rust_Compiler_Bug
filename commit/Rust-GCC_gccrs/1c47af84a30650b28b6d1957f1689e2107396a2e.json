{"sha": "1c47af84a30650b28b6d1957f1689e2107396a2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0N2FmODRhMzA2NTBiMjhiNmQxOTU3ZjE2ODllMjEwNzM5NmEyZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-23T07:49:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-23T07:49:24Z"}, "message": "emmintrin.h (_mm_loadh_pd): Don't cast pointer arg to __v2si.\n\n        * config/i386/emmintrin.h (_mm_loadh_pd): Don't cast pointer arg\n        to __v2si.\n        (_mm_storeh_pd, _mm_loadl_pd, _mm_storel_pd): Likewise.\n        * config/i386/i386.c (ix86_init_mmx_sse_builtins): Use double* or\n        const double* for __builtin_ia32_loadhpd, __builtin_ia32_loadlpd,\n        __builtin_ia32_storehpd, __builtin_ia32_storelpd.\n        (ix86_expand_builtin): Update to match.\n        (ix86_expand_vector_init): Use sse2_loadlpd.\n        * config/i386/i386.md (vec_setv2df): Use sse2_loadlpd, sse2_loadhpd.\n        (vec_extractv2df): Use sse2_storelpd, sse2_storehpd.\n        (sse2_storehpd, sse2_loadhpd, sse2_storelpd, sse2_loadlpd): New.\n        (sse2_movhpd): Remove.\n\nFrom-SVN: r92536", "tree": {"sha": "63ed3848efe9dfc80d70dfe0829b304716de04c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63ed3848efe9dfc80d70dfe0829b304716de04c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c47af84a30650b28b6d1957f1689e2107396a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c47af84a30650b28b6d1957f1689e2107396a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c47af84a30650b28b6d1957f1689e2107396a2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c47af84a30650b28b6d1957f1689e2107396a2e/comments", "author": null, "committer": null, "parents": [{"sha": "5e5f01b969fcc0449e7826dae1343f10bfca69e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f01b969fcc0449e7826dae1343f10bfca69e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5f01b969fcc0449e7826dae1343f10bfca69e8"}], "stats": {"total": 238, "additions": 165, "deletions": 73}, "files": [{"sha": "fe3acf1ae49a4babc0597b72303325417f08130a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c47af84a30650b28b6d1957f1689e2107396a2e", "patch": "@@ -1,3 +1,18 @@\n+2004-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/emmintrin.h (_mm_loadh_pd): Don't cast pointer arg\n+\tto __v2si.\n+\t(_mm_storeh_pd, _mm_loadl_pd, _mm_storel_pd): Likewise.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Use double* or\n+\tconst double* for __builtin_ia32_loadhpd, __builtin_ia32_loadlpd,\n+\t__builtin_ia32_storehpd, __builtin_ia32_storelpd.\n+\t(ix86_expand_builtin): Update to match.\n+\t(ix86_expand_vector_init): Use sse2_loadlpd.\n+\t* config/i386/i386.md (vec_setv2df): Use sse2_loadlpd, sse2_loadhpd.\n+\t(vec_extractv2df): Use sse2_storelpd, sse2_storehpd.\n+\t(sse2_storehpd, sse2_loadhpd, sse2_storelpd, sse2_loadlpd): New.\n+\t(sse2_movhpd): Remove.\n+\n 2004-12-23  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/18751"}, {"sha": "49c6a7f8147672ce21120a12c73ece94e71049f5", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=1c47af84a30650b28b6d1957f1689e2107396a2e", "patch": "@@ -937,25 +937,25 @@ _mm_unpacklo_pd (__m128d __A, __m128d __B)\n static __inline __m128d\n _mm_loadh_pd (__m128d __A, double const *__B)\n {\n-  return (__m128d)__builtin_ia32_loadhpd ((__v2df)__A, (__v2si *)__B);\n+  return (__m128d)__builtin_ia32_loadhpd ((__v2df)__A, __B);\n }\n \n static __inline void\n _mm_storeh_pd (double *__A, __m128d __B)\n {\n-  __builtin_ia32_storehpd ((__v2si *)__A, (__v2df)__B);\n+  __builtin_ia32_storehpd (__A, (__v2df)__B);\n }\n \n static __inline __m128d\n _mm_loadl_pd (__m128d __A, double const *__B)\n {\n-  return (__m128d)__builtin_ia32_loadlpd ((__v2df)__A, (__v2si *)__B);\n+  return (__m128d)__builtin_ia32_loadlpd ((__v2df)__A, __B);\n }\n \n static __inline void\n _mm_storel_pd (double *__A, __m128d __B)\n {\n-  __builtin_ia32_storelpd ((__v2si *)__A, (__v2df)__B);\n+  __builtin_ia32_storelpd (__A, (__v2df)__B);\n }\n \n static __inline int"}, {"sha": "2a9dca24d34017a8e7d494e54a3cfa18d73dfc17", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1c47af84a30650b28b6d1957f1689e2107396a2e", "patch": "@@ -12551,12 +12551,9 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tV2DF_type_node, V2DF_type_node,\n \t\t\t\tinteger_type_node,\n \t\t\t\tNULL_TREE);\n-  tree v2df_ftype_v2df_pv2si\n+  tree v2df_ftype_v2df_pcdouble\n     = build_function_type_list (V2DF_type_node,\n-\t\t\t\tV2DF_type_node, pv2si_type_node, NULL_TREE);\n-  tree void_ftype_pv2si_v2df\n-    = build_function_type_list (void_type_node,\n-\t\t\t\tpv2si_type_node, V2DF_type_node, NULL_TREE);\n+\t\t\t\tV2DF_type_node, pcdouble_type_node, NULL_TREE);\n   tree void_ftype_pdouble_v2df\n     = build_function_type_list (void_type_node,\n \t\t\t\tpdouble_type_node, V2DF_type_node, NULL_TREE);\n@@ -12858,10 +12855,10 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE2, \"__builtin_ia32_storeupd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREUPD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_storesd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STORESD);\n \n-  def_builtin (MASK_SSE2, \"__builtin_ia32_loadhpd\", v2df_ftype_v2df_pv2si, IX86_BUILTIN_LOADHPD);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_loadlpd\", v2df_ftype_v2df_pv2si, IX86_BUILTIN_LOADLPD);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_storehpd\", void_ftype_pv2si_v2df, IX86_BUILTIN_STOREHPD);\n-  def_builtin (MASK_SSE2, \"__builtin_ia32_storelpd\", void_ftype_pv2si_v2df, IX86_BUILTIN_STORELPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadhpd\", v2df_ftype_v2df_pcdouble, IX86_BUILTIN_LOADHPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadlpd\", v2df_ftype_v2df_pcdouble, IX86_BUILTIN_LOADLPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storehpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREHPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storelpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STORELPD);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_movmskpd\", int_ftype_v2df, IX86_BUILTIN_MOVMSKPD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_pmovmskb128\", int_ftype_v16qi, IX86_BUILTIN_PMOVMSKB128);\n@@ -13405,8 +13402,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_LOADLPD:\n       icode = (fcode == IX86_BUILTIN_LOADHPS ? CODE_FOR_sse_movhps\n \t       : fcode == IX86_BUILTIN_LOADLPS ? CODE_FOR_sse_movlps\n-\t       : fcode == IX86_BUILTIN_LOADHPD ? CODE_FOR_sse2_movhpd\n-\t       : CODE_FOR_sse2_movsd);\n+\t       : fcode == IX86_BUILTIN_LOADHPD ? CODE_FOR_sse2_loadhpd\n+\t       : CODE_FOR_sse2_loadlpd);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -13430,12 +13427,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n     case IX86_BUILTIN_STOREHPS:\n     case IX86_BUILTIN_STORELPS:\n-    case IX86_BUILTIN_STOREHPD:\n-    case IX86_BUILTIN_STORELPD:\n       icode = (fcode == IX86_BUILTIN_STOREHPS ? CODE_FOR_sse_movhps\n-\t       : fcode == IX86_BUILTIN_STORELPS ? CODE_FOR_sse_movlps\n-\t       : fcode == IX86_BUILTIN_STOREHPD ? CODE_FOR_sse2_movhpd\n-\t       : CODE_FOR_sse2_movsd);\n+\t       : CODE_FOR_sse_movlps);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -13451,7 +13444,28 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if (! pat)\n \treturn 0;\n       emit_insn (pat);\n-      return 0;\n+      return const0_rtx;\n+\n+    case IX86_BUILTIN_STOREHPD:\n+    case IX86_BUILTIN_STORELPD:\n+      icode = (fcode == IX86_BUILTIN_STOREHPD ? CODE_FOR_sse2_storehpd\n+\t       : CODE_FOR_sse2_storelpd);\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+\n+      op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n+      if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n+\top1 = copy_to_mode_reg (mode1, op1);\n+\n+      pat = GEN_FCN (icode) (op0, op1);\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return const0_rtx;\n \n     case IX86_BUILTIN_MOVNTPS:\n       return ix86_expand_store_builtin (CODE_FOR_sse_movntv4sf, arglist);\n@@ -15189,24 +15203,29 @@ ix86_expand_vector_init (rtx target, rtx vals)\n \n   /* ... values where only first field is non-constant are best loaded\n      from the pool and overwritten via move later.  */\n-  if (!i)\n+  if (i == 0)\n     {\n-      rtx op = simplify_gen_subreg (mode, XVECEXP (vals, 0, 0),\n-\t\t\t\t    GET_MODE_INNER (mode), 0);\n-\n-      op = force_reg (mode, op);\n       XVECEXP (vals, 0, 0) = CONST0_RTX (GET_MODE_INNER (mode));\n       emit_move_insn (target, gen_rtx_CONST_VECTOR (mode, XVEC (vals, 0)));\n+\n       switch (GET_MODE (target))\n \t{\n-\t  case V2DFmode:\n-\t    emit_insn (gen_sse2_movsd (target, target, op));\n-\t    break;\n-\t  case V4SFmode:\n+\tcase V2DFmode:\n+\t  emit_insn (gen_sse2_loadlpd (target, target, XVECEXP (vals, 0, 0)));\n+\t  break;\n+\n+\tcase V4SFmode:\n+\t  {\n+\t    /* ??? We can represent this better.  */\n+\t    rtx op = simplify_gen_subreg (mode, XVECEXP (vals, 0, 0),\n+\t\t\t\t          GET_MODE_INNER (mode), 0);\n+\t    op = force_reg (mode, op);\n \t    emit_insn (gen_sse_movss (target, target, op));\n-\t    break;\n-\t  default:\n-\t    break;\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n \t}\n       return;\n     }"}, {"sha": "ff0f9f9dd8442ee7c9bfc86db656a896569440b4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 98, "deletions": 40, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c47af84a30650b28b6d1957f1689e2107396a2e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1c47af84a30650b28b6d1957f1689e2107396a2e", "patch": "@@ -4734,16 +4734,10 @@\n   switch (INTVAL (operands[2]))\n     {\n     case 0:\n-      emit_insn (gen_sse2_movsd (operands[0], operands[0],\n-\t\t\t\t simplify_gen_subreg (V2DFmode, operands[1],\n-\t\t\t\t\t\t      DFmode, 0)));\n+      emit_insn (gen_sse2_loadlpd (operands[0], operands[0], operands[1]));\n       break;\n     case 1:\n-      {\n-\trtx op1 = simplify_gen_subreg (V2DFmode, operands[1], DFmode, 0);\n-\n-\temit_insn (gen_sse2_unpcklpd (operands[0], operands[0], op1));\n-      }\n+      emit_insn (gen_sse2_loadhpd (operands[0], operands[0], operands[1]));\n       break;\n     default:\n       abort ();\n@@ -4760,14 +4754,10 @@\n   switch (INTVAL (operands[2]))\n     {\n     case 0:\n-      emit_move_insn (operands[0], gen_lowpart (DFmode, operands[1]));\n+      emit_insn (gen_sse2_storelpd (operands[0], operands[1]));\n       break;\n     case 1:\n-      {\n-\trtx dest = simplify_gen_subreg (V2DFmode, operands[0], DFmode, 0);\n-\n-\temit_insn (gen_sse2_unpckhpd (dest, operands[1], operands[1]));\n-      }\n+      emit_insn (gen_sse2_storehpd (operands[0], operands[1]));\n       break;\n     default:\n       abort ();\n@@ -23731,17 +23721,103 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_movhpd\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(vec_merge:V2DF\n-\t (match_operand:V2DF 1 \"nonimmediate_operand\" \"0,0\")\n-\t (match_operand:V2DF 2 \"nonimmediate_operand\" \"m,x\")\n-\t (const_int 1)))]\n-  \"TARGET_SSE2 && (GET_CODE (operands[1]) == MEM || GET_CODE (operands[2]) == MEM)\"\n-  \"movhpd\\t{%2, %0|%0, %2}\"\n+;; Store the high double of the source vector into the double destination.\n+(define_insn \"sse2_storehpd\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,Y,Y\")\n+\t(vec_select:DF\n+\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" Y,0,o\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movhpd\\t{%1, %0|%0, %1}\n+   unpckhpd\\t%0, %0\n+   #\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(vec_select:DF\n+\t  (match_operand:V2DF 1 \"memory_operand\" \"\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(const_int 0)]\n+{\n+  emit_move_insn (operands[0], adjust_address (operands[1], DFmode, 8));\n+  DONE;\n+})\n+\n+;; Load the high double of the target vector from the source scalar.\n+(define_insn \"sse2_loadhpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=Y,Y,o\")\n+\t(vec_concat:V2DF\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,0,0\")\n+\t    (parallel [(const_int 0)]))\n+\t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,Y,Y\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movhpd\\t{%2, %0|%0, %2}\n+   unpcklpd\\t{%2, %0|%0, %2}\n+   #\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_split\n+  [(set (match_operand:V2DF 0 \"memory_operand\" \"\")\n+\t(vec_concat:V2DF\n+\t  (vec_select:DF (match_dup 0) (parallel [(const_int 0)]))\n+\t  (match_operand:DF 1 \"register_operand\" \"\")))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(const_int 0)]\n+{\n+  emit_move_insn (adjust_address (operands[0], DFmode, 8), operands[1]);\n+  DONE;\n+})\n+\n+;; Store the low double of the source vector into the double destination.\n+(define_expand \"sse2_storelpd\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_select:DF\n+\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[1] = gen_lowpart (DFmode, operands[1]);\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+;; Load the load double of the target vector from the source scalar.\n+(define_insn \"sse2_loadlpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=Y,Y,m\")\n+\t(vec_concat:V2DF\n+\t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,Y,Y\")\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,0,0\")\n+\t    (parallel [(const_int 1)]))))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movlpd\\t{%2, %0|%0, %2}\n+   movsd\\t{%2, %0|%0, %2}\n+   movlpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+;; Merge the low part of the source vector into the low part of the target.\n+(define_insn \"sse2_movsd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=Y,Y,m\")\n+        (vec_merge:V2DF\n+         (match_operand:V2DF 1 \"nonimmediate_operand\" \"0,0,0\")\n+         (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m,Y\")\n+         (const_int 2)))]\n+  \"TARGET_SSE2\"\n+  \"@movsd\\t{%2, %0|%0, %2}\n+    movlpd\\t{%2, %0|%0, %2}\n+    movlpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"DF,V2DF,V2DF\")])\n+\n (define_expand \"sse2_loadsd\"\n   [(match_operand:V2DF 0 \"register_operand\" \"\")\n    (match_operand:DF 1 \"memory_operand\" \"\")]\n@@ -23763,24 +23839,6 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"DF\")])\n \n-;; ??? We ought to be using ix86_binary_operator_ok on this pattern, so\n-;; that we enforce the whole matching memory thing through combine et al.\n-;; But that requires that things be set up properly when invoked via an\n-;; intrinsic, which we don't do.  Which leads to instantiate virtual regs\n-;; lossage, as seen compiling gcc.dg/i386-sse-2.c for x86_64 at -O0.\n-(define_insn \"sse2_movsd\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(vec_merge:V2DF\n-\t (match_operand:V2DF 1 \"nonimmediate_operand\" \"0,0,0\")\n-\t (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t (const_int 2)))]\n-  \"TARGET_SSE2\"\n-  \"@movsd\\t{%2, %0|%0, %2}\n-    movlpd\\t{%2, %0|%0, %2}\n-    movlpd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"DF,V2DF,V2DF\")])\n-\n (define_insn \"sse2_storesd\"\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(vec_select:DF"}]}