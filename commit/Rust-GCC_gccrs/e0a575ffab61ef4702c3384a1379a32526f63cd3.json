{"sha": "e0a575ffab61ef4702c3384a1379a32526f63cd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhNTc1ZmZhYjYxZWY0NzAyYzMzODRhMTM3OWEzMjUyNmY2M2NkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-15T20:57:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-15T20:57:54Z"}, "message": "re PR bootstrap/68271 (Boostrap fails on x86_64-apple-darwin14 at r230084)\n\n\tPR bootstrap/68271\n\t* parser.h (cp_token): Remove pragma_kind field.  Add comment\n\twith number of unused bits.\n\t* parser.c (eof_token): Remove pragma_kind field initializer.\n\t(cp_lexer_get_preprocessor_token): Don't set pragma_kind\n\tfield, don't clear CPP_PRAGMA u.value.\n\t(cp_parser_pragma_kind): New function.\n\t(cp_parser_omp_sections_scope, cp_parser_oacc_kernels_parallel,\n\tcp_parser_omp_construct, cp_parser_initial_pragma,\n\tcp_parser_pragma): Use cp_parser_pragma_kind instead of accessing\n\tpragma_kind field.\n\n\t* c-pragma.c (c_register_pragma_1): Adjust comment to note that\n\tC++ FE no longer has limit on number of pragmas.\n\nFrom-SVN: r232451", "tree": {"sha": "3927c071c279417ba6da71ec62c1b8168f4e595f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3927c071c279417ba6da71ec62c1b8168f4e595f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a575ffab61ef4702c3384a1379a32526f63cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a575ffab61ef4702c3384a1379a32526f63cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a575ffab61ef4702c3384a1379a32526f63cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a575ffab61ef4702c3384a1379a32526f63cd3/comments", "author": null, "committer": null, "parents": [{"sha": "afbc5ae887b898d2a828d37e1dd8117a079e8243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbc5ae887b898d2a828d37e1dd8117a079e8243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbc5ae887b898d2a828d37e1dd8117a079e8243"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "595b92fe74ba5fa671159aa9e27f18d7d21315dd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e0a575ffab61ef4702c3384a1379a32526f63cd3", "patch": "@@ -1,4 +1,10 @@\n-2015-01-14 Ryan Burn  <contact@rnburn.com>\n+2016-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/68271\n+\t* c-pragma.c (c_register_pragma_1): Adjust comment to note that\n+\tC++ FE no longer has limit on number of pragmas.\n+\n+2015-01-14  Ryan Burn  <contact@rnburn.com>\n \n \tPR c++/69048\n \t* cilk.c (create_cilk_wrapper_body): Call fold_build_cleanup_point_expr"}, {"sha": "4e72f65581c1f49c17e88d0e12841260e27ae16b", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=e0a575ffab61ef4702c3384a1379a32526f63cd3", "patch": "@@ -1372,8 +1372,9 @@ c_register_pragma_1 (const char *space, const char *name,\n       id = registered_pragmas.length ();\n       id += PRAGMA_FIRST_EXTERNAL - 1;\n \n-      /* The C++ front end allocates 8 bits in cp_token; the C front end\n-\t allocates 8 bits in c_token.  At present this is sufficient.  */\n+      /* The C front end allocates 8 bits in c_token.  The C++ front end\n+\t keeps the pragma kind in the form of INTEGER_CST, so no small\n+\t limit applies.  At present this is sufficient.  */\n       gcc_assert (id < 256);\n     }\n "}, {"sha": "ba08d09297da521df94a2395fddef3c5e2854ec4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0a575ffab61ef4702c3384a1379a32526f63cd3", "patch": "@@ -1,3 +1,17 @@\n+2016-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/68271\n+\t* parser.h (cp_token): Remove pragma_kind field.  Add comment\n+\twith number of unused bits.\n+\t* parser.c (eof_token): Remove pragma_kind field initializer.\n+\t(cp_lexer_get_preprocessor_token): Don't set pragma_kind\n+\tfield, don't clear CPP_PRAGMA u.value.\n+\t(cp_parser_pragma_kind): New function.\n+\t(cp_parser_omp_sections_scope, cp_parser_oacc_kernels_parallel,\n+\tcp_parser_omp_construct, cp_parser_initial_pragma,\n+\tcp_parser_pragma): Use cp_parser_pragma_kind instead of accessing\n+\tpragma_kind field.\n+\n 2016-01-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68847"}, {"sha": "8dd7e498f7feb39cb18451d2c3b79e1d71c7e316", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e0a575ffab61ef4702c3384a1379a32526f63cd3", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static cp_token eof_token =\n {\n-  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, false, false, false, 0, { NULL }\n+  CPP_EOF, RID_MAX, 0, false, false, false, 0, { NULL }\n };\n \n /* The various kinds of non integral constant we encounter. */\n@@ -782,7 +782,6 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n     = c_lex_with_flags (&token->u.value, &token->location, &token->flags,\n \t\t\tlexer == NULL ? 0 : C_LEX_STRING_NO_JOIN);\n   token->keyword = RID_MAX;\n-  token->pragma_kind = PRAGMA_NONE;\n   token->purged_p = false;\n   token->error_reported = false;\n \n@@ -848,13 +847,6 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n \tdefault:            token->keyword = C_RID_CODE (token->u.value);\n \t}\n     }\n-  else if (token->type == CPP_PRAGMA)\n-    {\n-      /* We smuggled the cpp_token->u.pragma value in an INTEGER_CST.  */\n-      token->pragma_kind = ((enum pragma_kind)\n-\t\t\t    TREE_INT_CST_LOW (token->u.value));\n-      token->u.value = NULL_TREE;\n-    }\n }\n \n /* Update the globals input_location and the input file stack from TOKEN.  */\n@@ -2689,6 +2681,18 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n   return token->keyword == keyword;\n }\n \n+/* Return TOKEN's pragma_kind if it is CPP_PRAGMA, otherwise\n+   PRAGMA_NONE.  */\n+\n+static enum pragma_kind\n+cp_parser_pragma_kind (cp_token *token)\n+{\n+  if (token->type != CPP_PRAGMA)\n+    return PRAGMA_NONE;\n+  /* We smuggled the cpp_token->u.pragma value in an INTEGER_CST.  */\n+  return (enum pragma_kind) TREE_INT_CST_LOW (token->u.value);\n+}\n+\n /* Helper function for cp_parser_error.\n    Having peeked a token of kind TOK1_KIND that might signify\n    a conflict marker, peek successor tokens to determine\n@@ -33937,7 +33941,8 @@ cp_parser_omp_sections_scope (cp_parser *parser)\n \n   stmt = push_stmt_list ();\n \n-  if (cp_lexer_peek_token (parser->lexer)->pragma_kind != PRAGMA_OMP_SECTION)\n+  if (cp_parser_pragma_kind (cp_lexer_peek_token (parser->lexer))\n+      != PRAGMA_OMP_SECTION)\n     {\n       substmt = cp_parser_omp_structured_block (parser);\n       substmt = build1 (OMP_SECTION, void_type_node, substmt);\n@@ -33952,7 +33957,7 @@ cp_parser_omp_sections_scope (cp_parser *parser)\n       if (tok->type == CPP_EOF)\n \tbreak;\n \n-      if (tok->pragma_kind == PRAGMA_OMP_SECTION)\n+      if (cp_parser_pragma_kind (tok) == PRAGMA_OMP_SECTION)\n \t{\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_parser_require_pragma_eol (parser, tok);\n@@ -35356,7 +35361,7 @@ cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n {\n   omp_clause_mask mask;\n   enum tree_code code;\n-  switch (pragma_tok->pragma_kind)\n+  switch (cp_parser_pragma_kind (pragma_tok))\n     {\n     case PRAGMA_OACC_KERNELS:\n       strcat (p_name, \" kernels\");\n@@ -36572,7 +36577,7 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok)\n   char p_name[sizeof \"#pragma omp teams distribute parallel for simd\"];\n   omp_clause_mask mask (0);\n \n-  switch (pragma_tok->pragma_kind)\n+  switch (cp_parser_pragma_kind (pragma_tok))\n     {\n     case PRAGMA_OACC_ATOMIC:\n       cp_parser_omp_atomic (parser, pragma_tok);\n@@ -36971,7 +36976,7 @@ cp_parser_initial_pragma (cp_token *first_token)\n   tree name = NULL;\n \n   cp_lexer_get_preprocessor_token (NULL, first_token);\n-  if (first_token->pragma_kind != PRAGMA_GCC_PCH_PREPROCESS)\n+  if (cp_parser_pragma_kind (first_token) != PRAGMA_GCC_PCH_PREPROCESS)\n     return;\n \n   cp_lexer_get_preprocessor_token (NULL, first_token);\n@@ -37046,7 +37051,7 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n   gcc_assert (pragma_tok->type == CPP_PRAGMA);\n   parser->lexer->in_pragma = true;\n \n-  id = pragma_tok->pragma_kind;\n+  id = cp_parser_pragma_kind (pragma_tok);\n   if (id != PRAGMA_OMP_DECLARE_REDUCTION && id != PRAGMA_OACC_ROUTINE)\n     cp_ensure_no_omp_declare_simd (parser);\n   switch (id)"}, {"sha": "ccbace9e0bf0a5c15928e8c07272528bdfedd544", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a575ffab61ef4702c3384a1379a32526f63cd3/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=e0a575ffab61ef4702c3384a1379a32526f63cd3", "patch": "@@ -47,8 +47,6 @@ struct GTY (()) cp_token {\n   ENUM_BITFIELD (rid) keyword : 8;\n   /* Token flags.  */\n   unsigned char flags;\n-  /* Identifier for the pragma.  */\n-  ENUM_BITFIELD (pragma_kind) pragma_kind : 8;\n   /* True if this token is from a context where it is implicitly extern \"C\" */\n   BOOL_BITFIELD implicit_extern_c : 1;\n   /* True if an error has already been reported for this token, such as a\n@@ -59,6 +57,7 @@ struct GTY (()) cp_token {\n      it is no longer a valid token and it should be considered\n      deleted.  */\n   BOOL_BITFIELD purged_p : 1;\n+  /* 5 unused bits.  */\n   /* The location at which this token was found.  */\n   location_t location;\n   /* The value associated with this token, if any.  */"}]}