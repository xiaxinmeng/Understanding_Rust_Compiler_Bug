{"sha": "ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3NTVmZjE2ZDNkYWUwNzg4YzFjZGUzZmUwZTk2MGIwMDEwM2NmNg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T10:43:02Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T10:43:02Z"}, "message": "[AArch64 Testsuite] Fix fallout from FCM changes.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/scalar_intrinsics.c (force_simd): New.\n\t(test_vceqd_s64): Force arguments to SIMD registers.\n\t(test_vceqzd_s64): Likewise.\n\t(test_vcged_s64): Likewise.\n\t(test_vcled_s64): Likewise.\n\t(test_vcgezd_s64): Likewise.\n\t(test_vcged_u64): Likewise.\n\t(test_vcgtd_s64): Likewise.\n\t(test_vcltd_s64): Likewise.\n\t(test_vcgtzd_s64): Likewise.\n\t(test_vcgtd_u64): Likewise.\n\t(test_vclezd_s64): Likewise.\n\t(test_vcltzd_s64): Likewise.\n\t(test_vtst_s64): Likewise.\n\t(test_vtst_u64): Likewise.\n\nFrom-SVN: r198493", "tree": {"sha": "efcd3d0885b51d1c7f10d48169a78e21f13cd69b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efcd3d0885b51d1c7f10d48169a78e21f13cd69b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad755ff16d3dae0788c1cde3fe0e960b00103cf6/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c19979f0fed0f2a52e51cdbb592654c3e7b8245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c19979f0fed0f2a52e51cdbb592654c3e7b8245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c19979f0fed0f2a52e51cdbb592654c3e7b8245"}], "stats": {"total": 130, "additions": 112, "deletions": 18}, "files": [{"sha": "dcc19cfd7e6d6daca090b54926d8aa72e2d54979", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad755ff16d3dae0788c1cde3fe0e960b00103cf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad755ff16d3dae0788c1cde3fe0e960b00103cf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "patch": "@@ -1,3 +1,21 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_intrinsics.c (force_simd): New.\n+\t(test_vceqd_s64): Force arguments to SIMD registers.\n+\t(test_vceqzd_s64): Likewise.\n+\t(test_vcged_s64): Likewise.\n+\t(test_vcled_s64): Likewise.\n+\t(test_vcgezd_s64): Likewise.\n+\t(test_vcged_u64): Likewise.\n+\t(test_vcgtd_s64): Likewise.\n+\t(test_vcltd_s64): Likewise.\n+\t(test_vcgtzd_s64): Likewise.\n+\t(test_vcgtd_u64): Likewise.\n+\t(test_vclezd_s64): Likewise.\n+\t(test_vcltzd_s64): Likewise.\n+\t(test_vtst_s64): Likewise.\n+\t(test_vtst_u64): Likewise.\n+\n 2013-05-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57092"}, {"sha": "e984b8ec339a6a955e58c613e48575b995b60ac7", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 94, "deletions": 18, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad755ff16d3dae0788c1cde3fe0e960b00103cf6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad755ff16d3dae0788c1cde3fe0e960b00103cf6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=ad755ff16d3dae0788c1cde3fe0e960b00103cf6", "patch": "@@ -1,7 +1,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n-#include \"../../../config/aarch64/arm_neon.h\"\n+#include <arm_neon.h>\n+\n+/* Used to force a variable to a SIMD register.  */\n+#define force_simd(V1)   asm volatile (\"mov %d0, %d1\"\t\t\\\n+\t   : \"=w\"(V1)\t\t\t\t\t\t\\\n+\t   : \"w\"(V1)\t\t\t\t\t\t\\\n+\t   : /* No clobbers */);\n \n /* { dg-final { scan-assembler-times \"\\\\tadd\\\\tx\\[0-9\\]+\" 2 } } */\n \n@@ -31,91 +37,148 @@ test_vaddd_s64_2 (int64x1_t a, int64x1_t b, int64x1_t c, int64x1_t d)\n uint64x1_t\n test_vceqd_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vceqd_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vceqd_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmeq\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n \n uint64x1_t\n test_vceqzd_s64 (int64x1_t a)\n {\n-  return vceqzd_s64 (a);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vceqzd_s64 (a);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmge\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n \n uint64x1_t\n test_vcged_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vcged_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcged_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n uint64x1_t\n test_vcled_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vcled_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcled_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\tcmge\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+/* Idiom recognition will cause this testcase not to generate\n+   the expected cmge instruction, so do not check for it.  */\n \n uint64x1_t\n test_vcgezd_s64 (int64x1_t a)\n {\n-  return vcgezd_s64 (a);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vcgezd_s64 (a);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmhs\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n \n uint64x1_t\n test_vcged_u64 (uint64x1_t a, uint64x1_t b)\n {\n-  return vcged_u64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcged_u64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmgt\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n \n uint64x1_t\n test_vcgtd_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vcgtd_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcgtd_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n uint64x1_t\n test_vcltd_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vcltd_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcltd_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmgt\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n \n uint64x1_t\n test_vcgtzd_s64 (int64x1_t a)\n {\n-  return vcgtzd_s64 (a);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vcgtzd_s64 (a);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmhi\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n \n uint64x1_t\n test_vcgtd_u64 (uint64x1_t a, uint64x1_t b)\n {\n-  return vcgtd_u64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vcgtd_u64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tcmle\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n \n uint64x1_t\n test_vclezd_s64 (int64x1_t a)\n {\n-  return vclezd_s64 (a);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vclezd_s64 (a);\n+  force_simd (res);\n+  return res;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\tcmlt\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+/* Idiom recognition will cause this testcase not to generate\n+   the expected cmlt instruction, so do not check for it.  */\n \n uint64x1_t\n test_vcltzd_s64 (int64x1_t a)\n {\n-  return vcltzd_s64 (a);\n+  uint64x1_t res;\n+  force_simd (a);\n+  res = vcltzd_s64 (a);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tdup\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.b\" 2 } } */\n@@ -179,13 +242,23 @@ test_vdupd_lane_u64 (uint64x2_t a)\n int64x1_t\n test_vtst_s64 (int64x1_t a, int64x1_t b)\n {\n-  return vtstd_s64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vtstd_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n uint64x1_t\n test_vtst_u64 (uint64x1_t a, uint64x1_t b)\n {\n-  return vtstd_u64 (a, b);\n+  uint64x1_t res;\n+  force_simd (a);\n+  force_simd (b);\n+  res = vtstd_s64 (a, b);\n+  force_simd (res);\n+  return res;\n }\n \n /* { dg-final { scan-assembler-times \"\\\\taddp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n@@ -722,7 +795,10 @@ test_vrshld_u64 (uint64x1_t a, uint64x1_t b)\n   return vrshld_u64 (a, b);\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\tasr\\\\tx\\[0-9\\]+\" 1 } } */\n+/* Other intrinsics can generate an asr instruction (vcltzd, vcgezd),\n+   so we cannot check scan-assembler-times.  */\n+\n+/* { dg-final { scan-assembler \"\\\\tasr\\\\tx\\[0-9\\]+\" } } */\n \n int64x1_t\n test_vshrd_n_s64 (int64x1_t a)"}]}