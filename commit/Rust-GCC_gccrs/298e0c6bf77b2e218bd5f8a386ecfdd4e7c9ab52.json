{"sha": "298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4ZTBjNmJmNzdiMmUyMThiZDVmOGEzODZlY2ZkZDRlN2M5YWI1Mg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2018-08-21T14:47:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:47:25Z"}, "message": "[Ada] Document entries of the target parametrization file\n\n2018-08-21  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument entries of the target parametrization file.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r263725", "tree": {"sha": "c346eb3d2ceeb10786d888bbe6d3e01343a548c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c346eb3d2ceeb10786d888bbe6d3e01343a548c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78645ad8c7bfaa223ab35595773a4af56660403b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78645ad8c7bfaa223ab35595773a4af56660403b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78645ad8c7bfaa223ab35595773a4af56660403b"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "0c558c0cb060aadee6c49a924363d620ccfc6dc7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "patch": "@@ -1,3 +1,9 @@\n+2018-08-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument entries of the target parametrization file.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb: Set scope of elaboration flag for 'Access."}, {"sha": "1455087b1eb9b58636bbbea3a8e89682b15e2f57", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "patch": "@@ -1692,13 +1692,44 @@ Alphabetical List of All Switches\n     Maximum_Alignment          : Pos; -- Maximum permitted alignment\n     Max_Unaligned_Field        : Pos; -- Maximum size for unaligned bit field\n     Pointer_Size               : Pos; -- System.Address'Size\n-    Short_Enums                : Nat; -- Short foreign convention enums?\n+    Short_Enums                : Nat; -- Foreign enums use short size?\n     Short_Size                 : Pos; -- Standard.Short_Integer'Size\n     Strict_Alignment           : Nat; -- Strict alignment?\n     System_Allocator_Alignment : Nat; -- Alignment for malloc calls\n     Wchar_T_Size               : Pos; -- Interfaces.C.wchar_t'Size\n     Words_BE                   : Nat; -- Words stored big-endian?\n \n+  ``Bits_Per_Unit`` is the number of bits in a storage unit, the equivalent of\n+  GCC macro ``BITS_PER_UNIT`` documented as follows: `Define this macro to be\n+  the number of bits in an addressable storage unit (byte); normally 8.`\n+\n+  ``Bits_Per_Word`` is the number of bits in a machine word, the equivalent of\n+  GCC macro ``BITS_PER_WORD`` documented as follows: `Number of bits in a word;\n+  normally 32.`\n+\n+  ``Double_Scalar_Alignment`` is the alignment for a scalar whose size is two\n+  machine words. It should be the same as the alignment for C ``long_long`` on\n+  most targets.\n+\n+  ``Maximum_Alignment`` is the maximum alignment that the compiler might choose\n+  by default for a type or object, which is also the maximum alignment that can\n+  be specified in GNAT. It is computed for GCC backends as ``BIGGEST_ALIGNMENT\n+  / BITS_PER_UNIT`` where GCC macro ``BIGGEST_ALIGNMENT`` is documented as\n+  follows: `Biggest alignment that any data type can require on this machine,\n+  in bits.`\n+\n+  ``Max_Unaligned_Field`` is the maximum size for unaligned bit field, which is\n+  64 for the majority of GCC targets (but can be different on some targets like\n+  AAMP).\n+\n+  ``Strict_Alignment`` is the equivalent of GCC macro ``STRICT_ALIGNMENT``\n+  documented as follows: `Define this macro to be the value 1 if instructions\n+  will fail to work if given data not on the nominal alignment. If instructions\n+  will merely go slower in that case, define this macro as 0.`\n+\n+  ``System_Allocator_Alignment`` is the guaranteed alignment of data returned\n+  by calls to ``malloc``.\n+\n \n   The format of the input file is as follows. First come the values of\n   the variables defined above, with one line per value:"}, {"sha": "aeaa1461c05abe08a16057ab431dc7ef8562fef3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=298e0c6bf77b2e218bd5f8a386ecfdd4e7c9ab52", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Aug 17, 2018\n+GNAT User's Guide for Native Platforms , Aug 20, 2018\n \n AdaCore\n \n@@ -9429,14 +9429,40 @@ Long_Size                  : Pos; -- Standard.Long_Integer'Size\n Maximum_Alignment          : Pos; -- Maximum permitted alignment\n Max_Unaligned_Field        : Pos; -- Maximum size for unaligned bit field\n Pointer_Size               : Pos; -- System.Address'Size\n-Short_Enums                : Nat; -- Short foreign convention enums?\n+Short_Enums                : Nat; -- Foreign enums use short size?\n Short_Size                 : Pos; -- Standard.Short_Integer'Size\n Strict_Alignment           : Nat; -- Strict alignment?\n System_Allocator_Alignment : Nat; -- Alignment for malloc calls\n Wchar_T_Size               : Pos; -- Interfaces.C.wchar_t'Size\n Words_BE                   : Nat; -- Words stored big-endian?\n @end example\n \n+@code{Bits_Per_Unit} is the number of bits in a storage unit, the equivalent of\n+GCC macro @code{BITS_PER_UNIT} documented as follows: @cite{Define this macro to be the number of bits in an addressable storage unit (byte); normally 8.}\n+\n+@code{Bits_Per_Word} is the number of bits in a machine word, the equivalent of\n+GCC macro @code{BITS_PER_WORD} documented as follows: @cite{Number of bits in a word; normally 32.}\n+\n+@code{Double_Scalar_Alignment} is the alignment for a scalar whose size is two\n+machine words. It should be the same as the alignment for C @code{long_long} on\n+most targets.\n+\n+@code{Maximum_Alignment} is the maximum alignment that the compiler might choose\n+by default for a type or object, which is also the maximum alignment that can\n+be specified in GNAT. It is computed for GCC backends as @code{BIGGEST_ALIGNMENT\n+/ BITS_PER_UNIT} where GCC macro @code{BIGGEST_ALIGNMENT} is documented as\n+follows: @cite{Biggest alignment that any data type can require on this machine@comma{} in bits.}\n+\n+@code{Max_Unaligned_Field} is the maximum size for unaligned bit field, which is\n+64 for the majority of GCC targets (but can be different on some targets like\n+AAMP).\n+\n+@code{Strict_Alignment} is the equivalent of GCC macro @code{STRICT_ALIGNMENT}\n+documented as follows: @cite{Define this macro to be the value 1 if instructions will fail to work if given data not on the nominal alignment. If instructions will merely go slower in that case@comma{} define this macro as 0.}\n+\n+@code{System_Allocator_Alignment} is the guaranteed alignment of data returned\n+by calls to @code{malloc}.\n+\n The format of the input file is as follows. First come the values of\n the variables defined above, with one line per value:\n "}]}