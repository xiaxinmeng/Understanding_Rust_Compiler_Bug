{"sha": "9ceca3020a62d208756ff281a189ce9f955fbc80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlY2EzMDIwYTYyZDIwODc1NmZmMjgxYTE4OWNlOWY5NTVmYmM4MA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-14T21:07:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-14T21:07:12Z"}, "message": "expr.c (highest_pow2_factor): Return unsigned.\n\n        * expr.c (highest_pow2_factor): Return unsigned.\n        * expr.h (offset_address): Likewise.\n        * emit-rtl.c (offset_address): POW2 argument now unsigned.\n\nFrom-SVN: r65589", "tree": {"sha": "652df28dade21191f3be003ebe664b78678e4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/652df28dade21191f3be003ebe664b78678e4891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ceca3020a62d208756ff281a189ce9f955fbc80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceca3020a62d208756ff281a189ce9f955fbc80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceca3020a62d208756ff281a189ce9f955fbc80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceca3020a62d208756ff281a189ce9f955fbc80/comments", "author": null, "committer": null, "parents": [{"sha": "712b7a052fc05a2373ed40c1fd13b3cfb0e7df62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712b7a052fc05a2373ed40c1fd13b3cfb0e7df62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712b7a052fc05a2373ed40c1fd13b3cfb0e7df62"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "0ffd927494a71c4aea7fd5e292143c03b88dce73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ceca3020a62d208756ff281a189ce9f955fbc80", "patch": "@@ -1,3 +1,9 @@\n+2003-04-14  Olivier Hainque <hainque@act-europe.fr>\n+\n+        * expr.c (highest_pow2_factor): Return unsigned.\n+        * expr.h (offset_address): Likewise.\n+        * emit-rtl.c (offset_address): POW2 argument now unsigned.\n+        \n 2003-04-14  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (expand_builtin_strlen):  Evaluate the lengths of"}, {"sha": "058100c07726e1b3674c8256c177039ed40cada5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9ceca3020a62d208756ff281a189ce9f955fbc80", "patch": "@@ -2314,7 +2314,7 @@ rtx\n offset_address (memref, offset, pow2)\n      rtx memref;\n      rtx offset;\n-     HOST_WIDE_INT pow2;\n+     unsigned HOST_WIDE_INT pow2;\n {\n   rtx new, addr = XEXP (memref, 0);\n \n@@ -2342,8 +2342,7 @@ offset_address (memref, offset, pow2)\n      we don't know.  */\n   MEM_ATTRS (new)\n     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,\n-\t\t     MIN (MEM_ALIGN (memref),\n-\t\t\t  (unsigned HOST_WIDE_INT) pow2 * BITS_PER_UNIT),\n+\t\t     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),\n \t\t     GET_MODE (new));\n   return new;\n }"}, {"sha": "d20342413339a92556564774777c0d7642daa877", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9ceca3020a62d208756ff281a189ce9f955fbc80", "patch": "@@ -166,8 +166,11 @@ static rtx store_field\t\tPARAMS ((rtx, HOST_WIDE_INT,\n \t\t\t\t\t tree, enum machine_mode, int, tree,\n \t\t\t\t\t int));\n static rtx var_rtx\t\tPARAMS ((tree));\n-static HOST_WIDE_INT highest_pow2_factor PARAMS ((tree));\n-static HOST_WIDE_INT highest_pow2_factor_for_type PARAMS ((tree, tree));\n+\n+static unsigned HOST_WIDE_INT highest_pow2_factor PARAMS ((tree));\n+static unsigned HOST_WIDE_INT highest_pow2_factor_for_type PARAMS ((tree,\n+\t\t\t\t\t\t\t\t    tree));\n+\n static int is_aligning_offset\tPARAMS ((tree, tree));\n static rtx expand_increment\tPARAMS ((tree, int, int));\n static rtx do_store_flag\tPARAMS ((tree, rtx, enum machine_mode, int));\n@@ -6335,11 +6338,11 @@ check_max_integer_computation_mode (exp)\n /* Return the highest power of two that EXP is known to be a multiple of.\n    This is used in updating alignment of MEMs in array references.  */\n \n-static HOST_WIDE_INT\n+static unsigned HOST_WIDE_INT\n highest_pow2_factor (exp)\n      tree exp;\n {\n-  HOST_WIDE_INT c0, c1;\n+  unsigned HOST_WIDE_INT c0, c1;\n \n   switch (TREE_CODE (exp))\n     {\n@@ -6405,12 +6408,12 @@ highest_pow2_factor (exp)\n /* Similar, except that it is known that the expression must be a multiple\n    of the alignment of TYPE.  */\n \n-static HOST_WIDE_INT\n+static unsigned HOST_WIDE_INT\n highest_pow2_factor_for_type (type, exp)\n      tree type;\n      tree exp;\n {\n-  HOST_WIDE_INT type_align, factor;\n+  unsigned HOST_WIDE_INT type_align, factor;\n \n   factor = highest_pow2_factor (exp);\n   type_align = TYPE_ALIGN (type) / BITS_PER_UNIT;"}, {"sha": "214ada97bdac21d32167ea6b5957ed9f39ec7463", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceca3020a62d208756ff281a189ce9f955fbc80/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9ceca3020a62d208756ff281a189ce9f955fbc80", "patch": "@@ -642,7 +642,7 @@ extern rtx adjust_automodify_address_1 PARAMS ((rtx, enum machine_mode,\n /* Return a memory reference like MEMREF, but whose address is changed by\n    adding OFFSET, an RTX, to it.  POW2 is the highest power of two factor\n    known to be in OFFSET (possibly 1).  */\n-extern rtx offset_address PARAMS ((rtx, rtx, HOST_WIDE_INT));\n+extern rtx offset_address PARAMS ((rtx, rtx, unsigned HOST_WIDE_INT));\n \n /* Return a memory reference like MEMREF, but with its address changed to\n    ADDR.  The caller is asserting that the actual piece of memory pointed"}]}