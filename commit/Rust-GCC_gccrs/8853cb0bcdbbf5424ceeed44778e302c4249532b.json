{"sha": "8853cb0bcdbbf5424ceeed44778e302c4249532b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1M2NiMGJjZGJiZjU0MjRjZWVlZDQ0Nzc4ZTMwMmM0MjQ5NTMyYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-03-08T11:30:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-03-08T11:30:26Z"}, "message": "utils.c (finish_record_type): Clear DECL_BIT_FIELD on sufficiently aligned bit-fields...\n\n\t* utils.c (finish_record_type): Clear DECL_BIT_FIELD on sufficiently\n\taligned bit-fields, bumping the alignment of the record type if deemed\n\tprofitable.\n\t(value_factor_p): Return false instead of 0.\n\nFrom-SVN: r133028", "tree": {"sha": "6c1f733a1df630a5933cb80960a1e3724216b3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c1f733a1df630a5933cb80960a1e3724216b3f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8853cb0bcdbbf5424ceeed44778e302c4249532b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8853cb0bcdbbf5424ceeed44778e302c4249532b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8853cb0bcdbbf5424ceeed44778e302c4249532b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8853cb0bcdbbf5424ceeed44778e302c4249532b/comments", "author": null, "committer": null, "parents": [{"sha": "66abe22c0716119ac01164cebd147d86a0ed8c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66abe22c0716119ac01164cebd147d86a0ed8c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66abe22c0716119ac01164cebd147d86a0ed8c70"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "77ceedae6ff5f2a6b144e3b7f802f259792852da", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8853cb0bcdbbf5424ceeed44778e302c4249532b", "patch": "@@ -1,3 +1,10 @@\n+2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* utils.c (finish_record_type): Clear DECL_BIT_FIELD on sufficiently\n+\taligned bit-fields, bumping the alignment of the record type if deemed\n+\tprofitable.\n+\t(value_factor_p): Return false instead of 0.\n+\n 2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <E_Signed_Integer_Subtype>: Add support"}, {"sha": "f1ffa4f7b297dc3518b0c2939a2f0c93275e543e", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=8853cb0bcdbbf5424ceeed44778e302c4249532b", "patch": "@@ -752,6 +752,7 @@ finish_record_type (tree record_type, tree fieldlist, int rep_level,\n   tree size = bitsize_zero_node;\n   bool had_size = TYPE_SIZE (record_type) != 0;\n   bool had_size_unit = TYPE_SIZE_UNIT (record_type) != 0;\n+  bool had_align = TYPE_ALIGN (record_type) != 0;\n   tree field;\n \n   if (name && TREE_CODE (name) == TYPE_DECL)\n@@ -804,24 +805,55 @@ finish_record_type (tree record_type, tree fieldlist, int rep_level,\n \n   for (field = fieldlist; field; field = TREE_CHAIN (field))\n     {\n-      tree pos = bit_position (field);\n-\n       tree type = TREE_TYPE (field);\n+      tree pos = bit_position (field);\n       tree this_size = DECL_SIZE (field);\n-      tree this_ada_size = DECL_SIZE (field);\n+      tree this_ada_size;\n \n-      if ((TREE_CODE (type) == RECORD_TYPE || TREE_CODE (type) == UNION_TYPE\n-\t  || TREE_CODE (type) == QUAL_UNION_TYPE)\n+      if ((TREE_CODE (type) == RECORD_TYPE\n+\t   || TREE_CODE (type) == UNION_TYPE\n+\t   || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t  && !TYPE_IS_FAT_POINTER_P (type)\n \t  && !TYPE_CONTAINS_TEMPLATE_P (type)\n \t  && TYPE_ADA_SIZE (type))\n \tthis_ada_size = TYPE_ADA_SIZE (type);\n+      else\n+\tthis_ada_size = this_size;\n \n       /* Clear DECL_BIT_FIELD for the cases layout_decl does not handle.  */\n-      if (DECL_BIT_FIELD (field) && !STRICT_ALIGNMENT\n-\t  && value_factor_p (pos, BITS_PER_UNIT)\n+      if (DECL_BIT_FIELD (field)\n \t  && operand_equal_p (this_size, TYPE_SIZE (type), 0))\n-\tDECL_BIT_FIELD (field) = 0;\n+\t{\n+\t  unsigned int align = TYPE_ALIGN (type);\n+\n+\t  /* In the general case, type alignment is required.  */\n+\t  if (value_factor_p (pos, align))\n+\t    {\n+\t      /* The enclosing record type must be sufficiently aligned.\n+\t\t Otherwise, if no alignment was specified for it and it\n+\t\t has been laid out already, bump its alignment to the\n+\t\t desired one if this is compatible with its size.  */\n+\t      if (TYPE_ALIGN (record_type) >= align)\n+\t\t{\n+\t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n+\t\t  DECL_BIT_FIELD (field) = 0;\n+\t\t}\n+\t      else if (!had_align\n+\t\t       && rep_level == 0\n+\t\t       && value_factor_p (TYPE_SIZE (record_type), align))\n+\t\t{\n+\t\t  TYPE_ALIGN (record_type) = align;\n+\t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n+\t\t  DECL_BIT_FIELD (field) = 0;\n+\t\t}\n+\t    }\n+\n+\t  /* In the non-strict alignment case, only byte alignment is.  */\n+\t  if (!STRICT_ALIGNMENT\n+\t      && DECL_BIT_FIELD (field)\n+\t      && value_factor_p (pos, BITS_PER_UNIT))\n+\t    DECL_BIT_FIELD (field) = 0;\n+\t}\n \n       /* If we still have DECL_BIT_FIELD set at this point, we know the field\n \t is technically not addressable.  Except that it can actually be\n@@ -830,7 +862,9 @@ finish_record_type (tree record_type, tree fieldlist, int rep_level,\n       DECL_NONADDRESSABLE_P (field)\n \t|= DECL_BIT_FIELD (field) && DECL_MODE (field) != BLKmode;\n \n-      if ((rep_level > 0) && !DECL_BIT_FIELD (field))\n+      /* A type must be as aligned as its most aligned field that is not\n+\t a bit-field.  But this is already enforced by layout_type.  */\n+      if (rep_level > 0 && !DECL_BIT_FIELD (field))\n \tTYPE_ALIGN (record_type)\n \t  = MAX (TYPE_ALIGN (record_type), DECL_ALIGN (field));\n \n@@ -1800,7 +1834,7 @@ value_factor_p (tree value, HOST_WIDE_INT factor)\n     return (value_factor_p (TREE_OPERAND (value, 0), factor)\n             || value_factor_p (TREE_OPERAND (value, 1), factor));\n \n-  return 0;\n+  return false;\n }\n \n /* Given 2 consecutive field decls PREV_FIELD and CURR_FIELD, return true"}, {"sha": "4915a4229f2501af3915d1c3c6066dde020f54bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8853cb0bcdbbf5424ceeed44778e302c4249532b", "patch": "@@ -1,3 +1,7 @@\n+2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack4.adb: New test.\n+\n 2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/small_alignment.adb: New test."}, {"sha": "2c73e1dd4ea3b6cf4c01df42cbaeb9ae11bf06a0", "filename": "gcc/testsuite/gnat.dg/pack4.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Ftestsuite%2Fgnat.dg%2Fpack4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8853cb0bcdbbf5424ceeed44778e302c4249532b/gcc%2Ftestsuite%2Fgnat.dg%2Fpack4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack4.adb?ref=8853cb0bcdbbf5424ceeed44778e302c4249532b", "patch": "@@ -0,0 +1,38 @@\n+-- { dg-do run }\n+\n+procedure Pack4 is\n+\n+   type Time_T is record\n+      Hour : Integer;\n+   end record;\n+\n+   type Date_And_Time_T is record\n+      Date : Integer;\n+      Time : Time_T;\n+   end record;\n+\n+   pragma Pack(Date_And_Time_T);\n+\n+   procedure\n+     Assign_Hour_Of (T : out Time_T)\n+   is\n+   begin\n+      T.Hour := 44;\n+   end;\n+\n+   procedure\n+     Clobber_Hour_Of (DT: out Date_And_Time_T)\n+   is\n+   begin\n+      Assign_Hour_Of (Dt.Time);\n+   end;\n+\n+   DT : Date_And_Time_T;\n+\n+begin\n+   DT.Time.Hour := 22;\n+   Clobber_Hour_Of (DT);\n+   if DT.Time.Hour /= 44 then\n+     raise Program_Error;\n+   end if;\n+end;"}]}