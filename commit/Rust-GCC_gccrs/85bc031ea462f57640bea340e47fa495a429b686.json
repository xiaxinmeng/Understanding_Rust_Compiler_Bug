{"sha": "85bc031ea462f57640bea340e47fa495a429b686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViYzAzMWVhNDYyZjU3NjQwYmVhMzQwZTQ3ZmE0OTVhNDI5YjY4Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-16T02:10:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-16T02:10:32Z"}, "message": "pa.h (LEGITIMIZE_ADDRESS): Handle (plus (mult (X) (Y)) (Z)) when Y is 2, 4, or 8 specially.\n\n\t* pa.h LEGITIMIZE_ADDRESS): Handle (plus (mult (X) (Y)) (Z))\n\twhen Y is 2, 4, or 8 specially.\n\nFrom-SVN: r3256", "tree": {"sha": "1de7b8bdfc7d6a67a11301abaf9da4c756f5b126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de7b8bdfc7d6a67a11301abaf9da4c756f5b126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85bc031ea462f57640bea340e47fa495a429b686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bc031ea462f57640bea340e47fa495a429b686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85bc031ea462f57640bea340e47fa495a429b686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bc031ea462f57640bea340e47fa495a429b686/comments", "author": null, "committer": null, "parents": [{"sha": "f9b06ea4457c8b09f4abd72bbd0aed6fab2d4718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b06ea4457c8b09f4abd72bbd0aed6fab2d4718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b06ea4457c8b09f4abd72bbd0aed6fab2d4718"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "14257e50ebb5bb6a01691adebad075a0e35fb50e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bc031ea462f57640bea340e47fa495a429b686/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bc031ea462f57640bea340e47fa495a429b686/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=85bc031ea462f57640bea340e47fa495a429b686", "patch": "@@ -1254,7 +1254,16 @@ extern union tree_node *current_function_decl;\n    (In the rare case of an FP register used in an integer MODE, we depend\n    on secondary reloads and the final output pass to clean things up.)\n \n-   Also change REG+(X*Y) into REG.  (With X*Y in an extra pseudo).  */\n+\n+   It is also beneficial to handle (plus (mult (X) (Y)) (Z)) in a special\n+   manner if Y is 2, 4, or 8.  (allows more shadd insns and shifted indexed\n+   adressing modes to be used).\n+\n+   Put X and Z into registers.  Then put the entire expression into\n+   a register.\n+\n+   Other REG+(X*Y) addresses are placed into a register with the\n+   X*Y subexpression placed in a register of its own.  */\n \n #define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)\t\\\n { if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n@@ -1271,6 +1280,21 @@ extern union tree_node *current_function_decl;\n       X = plus_constant (ptr_reg, offset & mask);\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == MULT\t\\\n+      && GET_CODE (XEXP (XEXP (X, 0), 1)) == CONST_INT\t\t\\\n+      && shadd_constant_p (INTVAL (XEXP (XEXP (X, 0), 1))))\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int val = INTVAL (XEXP (XEXP (X, 0), 1));\t\t\t\\\n+      rtx reg1, reg2;\t\t\t\t\t\t\\\n+      reg1 = force_reg (SImode, force_operand (XEXP (X, 1), 0));\\\n+      reg2 = force_reg (SImode, \t\t\t\t\\\n+\t\t\tforce_operand (XEXP (XEXP (X, 0), 0), 0));\\\n+      (X) = force_reg (SImode,\t\t\t\t\t\\\n+\t\t       gen_rtx (PLUS, SImode,\t\t\t\\\n+\t\t\t\tgen_rtx (MULT, SImode, reg2, \t\\\n+\t\t\t\t\t GEN_INT (val)),\t\\\n+\t\t\t\treg1));\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == MULT)\t\\\n     (X) = force_operand (gen_rtx (PLUS, SImode, XEXP (X, 1),\t\\\n \t\t                  force_operand (XEXP (X, 0), 0)), 0);\\"}]}