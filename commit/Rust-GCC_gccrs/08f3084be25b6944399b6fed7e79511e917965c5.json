{"sha": "08f3084be25b6944399b6fed7e79511e917965c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmMzA4NGJlMjViNjk0NDM5OWI2ZmVkN2U3OTUxMWU5MTc5NjVjNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-11-26T23:09:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-11-26T23:09:56Z"}, "message": "sse.md (mulv16qi3): Change back from an expander to an insn-and-split.\n\n\t* config/i386/sse.md (mulv16qi3): Change back from an expander\n\tto an insn-and-split.\n\t(mulv4si): Mention AVX not XOP for AVX exception.\n\t(*sse2_mulv4si3): Likewise.\n\t(mulv2di3): Use vmulld not vpmacsdd for XOP expansion.  Tidy.\ntestsuite/\n        * gcc.target/i386/xop-imul64-vector.c: Look for vpmulld not vpmacsdd.\n\nFrom-SVN: r154693", "tree": {"sha": "6515762140e8fc6e5dc62dab95770fa40bca59a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6515762140e8fc6e5dc62dab95770fa40bca59a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f3084be25b6944399b6fed7e79511e917965c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f3084be25b6944399b6fed7e79511e917965c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f3084be25b6944399b6fed7e79511e917965c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f3084be25b6944399b6fed7e79511e917965c5/comments", "author": null, "committer": null, "parents": [{"sha": "5e1a89f009a30cd501dd5dfb4e9ab99e0ca3052b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1a89f009a30cd501dd5dfb4e9ab99e0ca3052b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1a89f009a30cd501dd5dfb4e9ab99e0ca3052b"}], "stats": {"total": 118, "additions": 66, "deletions": 52}, "files": [{"sha": "e3c27aa7a661574817bce2bb4d723864c009ba24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08f3084be25b6944399b6fed7e79511e917965c5", "patch": "@@ -1,3 +1,11 @@\n+2009-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/sse.md (mulv16qi3): Change back from an expander\n+\tto an insn-and-split.\n+\t(mulv4si): Mention AVX not XOP for AVX exception.\n+\t(*sse2_mulv4si3): Likewise.\n+\t(mulv2di3): Use vmulld not vpmacsdd for XOP expansion.  Tidy.\n+\n 2009-11-26  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* cfgexpand (n_stack_vars_conflict): New static variable."}, {"sha": "12c5b17014b70c35de29a02f07550764e260fd53", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=08f3084be25b6944399b6fed7e79511e917965c5", "patch": "@@ -5227,11 +5227,15 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"mulv16qi3\"\n+(define_insn_and_split \"mulv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n \t(mult:V16QI (match_operand:V16QI 1 \"register_operand\" \"\")\n \t\t    (match_operand:V16QI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   rtx t[6];\n   int i;\n@@ -5592,7 +5596,7 @@\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  if (TARGET_SSE4_1 || TARGET_XOP)\n+  if (TARGET_SSE4_1 || TARGET_AVX)\n     ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\n })\n \n@@ -5621,7 +5625,7 @@\n   [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n \t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE4_1 && !TARGET_XOP\n+  \"TARGET_SSE2 && !TARGET_SSE4_1 && !TARGET_AVX\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -5683,17 +5687,20 @@\n   rtx t1, t2, t3, t4, t5, t6, thirtytwo;\n   rtx op0, op1, op2;\n \n+  op0 = operands[0];\n+  op1 = operands[1];\n+  op2 = operands[2];\n+\n   if (TARGET_XOP)\n     {\n       /* op1: A,B,C,D, op2: E,F,G,H */\n-      op0 = operands[0];\n-      op1 = gen_lowpart (V4SImode, operands[1]);\n-      op2 = gen_lowpart (V4SImode, operands[2]);\n+      op1 = gen_lowpart (V4SImode, op1);\n+      op2 = gen_lowpart (V4SImode, op2);\n+\n       t1 = gen_reg_rtx (V4SImode);\n       t2 = gen_reg_rtx (V4SImode);\n-      t3 = gen_reg_rtx (V4SImode);\n+      t3 = gen_reg_rtx (V2DImode);\n       t4 = gen_reg_rtx (V2DImode);\n-      t5 = gen_reg_rtx (V2DImode);\n \n       /* t1: B,A,D,C */\n       emit_insn (gen_sse2_pshufd_1 (t1, op1,\n@@ -5702,55 +5709,50 @@\n \t\t\t\t    GEN_INT (3),\n \t\t\t\t    GEN_INT (2)));\n \n-      /* t2: 0 */\n-      emit_move_insn (t2, CONST0_RTX (V4SImode));\n-\n-      /* t3: (B*E),(A*F),(D*G),(C*H) */\n-      emit_insn (gen_xop_pmacsdd (t3, t1, op2, t2));\n+      /* t2: (B*E),(A*F),(D*G),(C*H) */\n+      emit_insn (gen_mulv4si3 (t2, t1, op2));\n \n       /* t4: (B*E)+(A*F), (D*G)+(C*H) */\n-      emit_insn (gen_xop_phadddq (t4, t3));\n+      emit_insn (gen_xop_phadddq (t3, t2));\n \n       /* t5: ((B*E)+(A*F))<<32, ((D*G)+(C*H))<<32 */\n-      emit_insn (gen_ashlv2di3 (t5, t4, GEN_INT (32)));\n+      emit_insn (gen_ashlv2di3 (t4, t3, GEN_INT (32)));\n \n       /* op0: (((B*E)+(A*F))<<32)+(B*F), (((D*G)+(C*H))<<32)+(D*H) */\n-      emit_insn (gen_xop_pmacsdql (op0, op1, op2, t5));\n-      DONE;\n+      emit_insn (gen_xop_pmacsdql (op0, op1, op2, t4));\n+    }\n+  else\n+    {\n+      t1 = gen_reg_rtx (V2DImode);\n+      t2 = gen_reg_rtx (V2DImode);\n+      t3 = gen_reg_rtx (V2DImode);\n+      t4 = gen_reg_rtx (V2DImode);\n+      t5 = gen_reg_rtx (V2DImode);\n+      t6 = gen_reg_rtx (V2DImode);\n+      thirtytwo = GEN_INT (32);\n+\n+      /* Multiply low parts.  */\n+      emit_insn (gen_sse2_umulv2siv2di3 (t1, gen_lowpart (V4SImode, op1),\n+\t\t\t\t         gen_lowpart (V4SImode, op2)));\n+\n+      /* Shift input vectors left 32 bits so we can multiply high parts.  */\n+      emit_insn (gen_lshrv2di3 (t2, op1, thirtytwo));\n+      emit_insn (gen_lshrv2di3 (t3, op2, thirtytwo));\n+\n+      /* Multiply high parts by low parts.  */\n+      emit_insn (gen_sse2_umulv2siv2di3 (t4, gen_lowpart (V4SImode, op1),\n+\t\t\t\t\t gen_lowpart (V4SImode, t3)));\n+      emit_insn (gen_sse2_umulv2siv2di3 (t5, gen_lowpart (V4SImode, op2),\n+\t\t\t\t\t gen_lowpart (V4SImode, t2)));\n+\n+      /* Shift them back.  */\n+      emit_insn (gen_ashlv2di3 (t4, t4, thirtytwo));\n+      emit_insn (gen_ashlv2di3 (t5, t5, thirtytwo));\n+\n+      /* Add the three parts together.  */\n+      emit_insn (gen_addv2di3 (t6, t1, t4));\n+      emit_insn (gen_addv2di3 (op0, t6, t5));\n     }\n-\n-  op0 = operands[0];\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  t1 = gen_reg_rtx (V2DImode);\n-  t2 = gen_reg_rtx (V2DImode);\n-  t3 = gen_reg_rtx (V2DImode);\n-  t4 = gen_reg_rtx (V2DImode);\n-  t5 = gen_reg_rtx (V2DImode);\n-  t6 = gen_reg_rtx (V2DImode);\n-  thirtytwo = GEN_INT (32);\n-\n-  /* Multiply low parts.  */\n-  emit_insn (gen_sse2_umulv2siv2di3 (t1, gen_lowpart (V4SImode, op1),\n-\t\t\t\t     gen_lowpart (V4SImode, op2)));\n-\n-  /* Shift input vectors left 32 bits so we can multiply high parts.  */\n-  emit_insn (gen_lshrv2di3 (t2, op1, thirtytwo));\n-  emit_insn (gen_lshrv2di3 (t3, op2, thirtytwo));\n-\n-  /* Multiply high parts by low parts.  */\n-  emit_insn (gen_sse2_umulv2siv2di3 (t4, gen_lowpart (V4SImode, op1),\n-\t\t\t\t     gen_lowpart (V4SImode, t3)));\n-  emit_insn (gen_sse2_umulv2siv2di3 (t5, gen_lowpart (V4SImode, op2),\n-\t\t\t\t     gen_lowpart (V4SImode, t2)));\n-\n-  /* Shift them back.  */\n-  emit_insn (gen_ashlv2di3 (t4, t4, thirtytwo));\n-  emit_insn (gen_ashlv2di3 (t5, t5, thirtytwo));\n-\n-  /* Add the three parts together.  */\n-  emit_insn (gen_addv2di3 (t6, t1, t4));\n-  emit_insn (gen_addv2di3 (op0, t6, t5));\n   DONE;\n })\n "}, {"sha": "b38a901f648b64489dd2f48eb9cac873ac0a4340", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08f3084be25b6944399b6fed7e79511e917965c5", "patch": "@@ -1,3 +1,7 @@\n+2009-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/i386/xop-imul64-vector.c: Look for vpmulld not vpmacsdd.\n+\n 2009-11-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42026, DR 239"}, {"sha": "382677e6050f5208365a501f400ac7336187bbdc", "filename": "gcc/testsuite/gcc.target/i386/xop-imul64-vector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul64-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3084be25b6944399b6fed7e79511e917965c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul64-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul64-vector.c?ref=08f3084be25b6944399b6fed7e79511e917965c5", "patch": "@@ -31,6 +31,6 @@ int main ()\n   exit (0);\n }\n \n-/* { dg-final { scan-assembler \"vpmacsdd\" } } */\n+/* { dg-final { scan-assembler \"vpmulld\" } } */\n /* { dg-final { scan-assembler \"vphadddq\" } } */\n /* { dg-final { scan-assembler \"vpmacsdql\" } } */"}]}