{"sha": "1d86619909ec3d30b1363d66a6caff2f2b279ad2", "node_id": "C_kwDOANBUbNoAKDFkODY2MTk5MDllYzNkMzBiMTM2M2Q2NmE2Y2FmZjJmMmIyNzlhZDI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-22T08:13:26Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T13:15:36Z"}, "message": "const: Add basic const context checking\n\nThis commit serves as a base to ensure that only the allowed subset of\nthe language is called from const contexts. For example, this limits\nfunction calls to calls to const functions only when in a const context", "tree": {"sha": "400f4dfb8755ee8734a46202d6d95acf7b3200e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400f4dfb8755ee8734a46202d6d95acf7b3200e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d86619909ec3d30b1363d66a6caff2f2b279ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d86619909ec3d30b1363d66a6caff2f2b279ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d86619909ec3d30b1363d66a6caff2f2b279ad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d86619909ec3d30b1363d66a6caff2f2b279ad2/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2160d34c5ff8060723c4b71d31c3d195f51eaa06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2160d34c5ff8060723c4b71d31c3d195f51eaa06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2160d34c5ff8060723c4b71d31c3d195f51eaa06"}], "stats": {"total": 1012, "additions": 1011, "deletions": 1}, "files": [{"sha": "78c3d0f6e7890ddc4b6dc6b9604bc9665f5e3cb6", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -120,6 +120,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check-base.o \\\n     rust/rust-autoderef.o \\\n     rust/rust-substitution-mapper.o \\\n+    rust/rust-const-checker.o \\\n     rust/rust-lint-marklive.o \\\n     rust/rust-lint-unused-var.o \\\n     rust/rust-hir-type-check-path.o \\"}, {"sha": "bb6ae1052e130c8e4de48cb519f9a38d60759fd4", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "added", "additions": 803, "deletions": 0, "changes": 803, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -0,0 +1,803 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-const-checker.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+ConstChecker::ConstChecker ()\n+  : resolver (*Resolver::Resolver::get ()),\n+    mappings (*Analysis::Mappings::get ())\n+{}\n+\n+void\n+ConstChecker::go (HIR::Crate &crate)\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IdentifierExpr &ident_expr)\n+{}\n+\n+void\n+ConstChecker::visit (Lifetime &lifetime)\n+{}\n+\n+void\n+ConstChecker::visit (LifetimeParam &lifetime_param)\n+{}\n+\n+void\n+ConstChecker::visit (PathInExpression &path)\n+{}\n+\n+void\n+ConstChecker::visit (TypePathSegment &segment)\n+{}\n+\n+void\n+ConstChecker::visit (TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+ConstChecker::visit (TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+ConstChecker::visit (TypePath &path)\n+{}\n+\n+void\n+ConstChecker::visit (QualifiedPathInExpression &path)\n+{}\n+\n+void\n+ConstChecker::visit (QualifiedPathInType &path)\n+{}\n+\n+void\n+ConstChecker::visit (LiteralExpr &expr)\n+{}\n+\n+void\n+ConstChecker::visit (BorrowExpr &expr)\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (DereferenceExpr &expr)\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ErrorPropagationExpr &expr)\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (NegationExpr &expr)\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ArithmeticOrLogicalExpr &expr)\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ComparisonExpr &expr)\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (LazyBooleanExpr &expr)\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TypeCastExpr &expr)\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (AssignmentExpr &expr)\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (CompoundAssignmentExpr &expr)\n+{\n+  expr.get_left_expr ()->accept_vis (*this);\n+  expr.get_right_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (GroupedExpr &expr)\n+{\n+  expr.get_expr_in_parens ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ArrayElemsValues &elems)\n+{\n+  for (auto &elem : elems.get_values ())\n+    elem->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ArrayElemsCopied &elems)\n+{\n+  elems.get_elem_to_copy ()->accept_vis (*this);\n+\n+  const_context.enter (elems.get_mappings ().get_hirid ());\n+\n+  elems.get_num_copies_expr ()->accept_vis (*this);\n+\n+  const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (ArrayExpr &expr)\n+{\n+  expr.get_internal_elements ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ArrayIndexExpr &expr)\n+{\n+  expr.get_array_expr ()->accept_vis (*this);\n+  expr.get_index_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TupleExpr &expr)\n+{\n+  for (auto &elem : expr.get_tuple_elems ())\n+    elem->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TupleIndexExpr &expr)\n+{\n+  expr.get_tuple_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (StructExprStruct &expr)\n+{}\n+\n+void\n+ConstChecker::visit (StructExprFieldIdentifier &field)\n+{}\n+\n+void\n+ConstChecker::visit (StructExprFieldIdentifierValue &field)\n+{\n+  field.get_value ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (StructExprFieldIndexValue &field)\n+{\n+  field.get_value ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (StructExprStructFields &expr)\n+{\n+  for (auto &field : expr.get_fields ())\n+    field->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (StructExprStructBase &expr)\n+{}\n+\n+void\n+ConstChecker::check_function_call (HirId fn_id, Location locus)\n+{\n+  if (!const_context.is_in_context ())\n+    return;\n+\n+  auto maybe_fn = mappings.lookup_hir_item (fn_id);\n+  if (!maybe_fn || maybe_fn->get_item_kind () != Item::ItemKind::Function)\n+    return;\n+\n+  auto fn = static_cast<Function *> (maybe_fn);\n+  if (!fn->get_qualifiers ().is_const ())\n+    rust_error_at (locus, \"only functions marked as %<const%> are allowed to \"\n+\t\t\t  \"be called from constant contexts\");\n+}\n+\n+void\n+ConstChecker::visit (CallExpr &expr)\n+{\n+  auto fn = expr.get_fnexpr ();\n+  if (!fn)\n+    return;\n+\n+  NodeId ast_node_id = fn->get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  // We don't care about types here\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  check_function_call (definition_id, expr.get_locus ());\n+\n+  for (auto &arg : expr.get_arguments ())\n+    arg->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (MethodCallExpr &expr)\n+{\n+  expr.get_receiver ()->accept_vis (*this);\n+\n+  for (auto &arg : expr.get_arguments ())\n+    arg->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (FieldAccessExpr &expr)\n+{\n+  expr.get_receiver_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ClosureExprInner &expr)\n+{}\n+\n+void\n+ConstChecker::visit (BlockExpr &expr)\n+{\n+  for (auto &stmt : expr.get_statements ())\n+    stmt->accept_vis (*this);\n+\n+  if (expr.has_expr ())\n+    expr.get_final_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ClosureExprInnerTyped &expr)\n+{}\n+\n+void\n+ConstChecker::visit (ContinueExpr &expr)\n+{}\n+\n+void\n+ConstChecker::visit (BreakExpr &expr)\n+{\n+  if (expr.has_break_expr ())\n+    expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (RangeFromToExpr &expr)\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (RangeFromExpr &expr)\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (RangeToExpr &expr)\n+{\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (RangeFullExpr &expr)\n+{}\n+\n+void\n+ConstChecker::visit (RangeFromToInclExpr &expr)\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (RangeToInclExpr &expr)\n+{\n+  // FIXME: Visit to_expr\n+}\n+\n+void\n+ConstChecker::visit (ReturnExpr &expr)\n+{\n+  if (expr.has_return_expr ())\n+    expr.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (UnsafeBlockExpr &expr)\n+{\n+  expr.get_block_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (LoopExpr &expr)\n+{\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (WhileLoopExpr &expr)\n+{\n+  expr.get_predicate_expr ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (WhileLetLoopExpr &expr)\n+{\n+  expr.get_cond ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ForLoopExpr &expr)\n+{\n+  expr.get_iterator_expr ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfExpr &expr)\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfExprConseqElse &expr)\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+  expr.get_else_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfExprConseqIf &expr)\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+  expr.get_conseq_if_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfExprConseqIfLet &expr)\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+\n+  // TODO: Visit conseq if let expression\n+}\n+\n+void\n+ConstChecker::visit (IfLetExpr &expr)\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfLetExprConseqElse &expr)\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+\n+  // TODO: Visit else expression\n+}\n+\n+void\n+ConstChecker::visit (IfLetExprConseqIf &expr)\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (IfLetExprConseqIfLet &expr)\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+\n+  // TODO: Visit conseq if let expression\n+}\n+\n+void\n+ConstChecker::visit (MatchExpr &expr)\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+\n+  for (auto &match_arm : expr.get_match_cases ())\n+    match_arm.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (AwaitExpr &expr)\n+{\n+  // TODO: Visit expression\n+}\n+\n+void\n+ConstChecker::visit (AsyncBlockExpr &expr)\n+{\n+  // TODO: Visit block expression\n+}\n+\n+void\n+ConstChecker::visit (TypeParam &param)\n+{}\n+\n+void\n+ConstChecker::visit (ConstGenericParam &param)\n+{}\n+\n+void\n+ConstChecker::visit (LifetimeWhereClauseItem &item)\n+{}\n+\n+void\n+ConstChecker::visit (TypeBoundWhereClauseItem &item)\n+{}\n+\n+void\n+ConstChecker::visit (Module &module)\n+{\n+  for (auto &item : module.get_items ())\n+    item->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ExternCrate &crate)\n+{}\n+\n+void\n+ConstChecker::visit (UseTreeGlob &use_tree)\n+{}\n+\n+void\n+ConstChecker::visit (UseTreeList &use_tree)\n+{}\n+\n+void\n+ConstChecker::visit (UseTreeRebind &use_tree)\n+{}\n+\n+void\n+ConstChecker::visit (UseDeclaration &use_decl)\n+{}\n+\n+void\n+ConstChecker::visit (Function &function)\n+{\n+  auto const_fn = function.get_qualifiers ().is_const ();\n+  if (const_fn)\n+    const_context.enter (function.get_mappings ().get_hirid ());\n+\n+  function.get_definition ()->accept_vis (*this);\n+\n+  if (const_fn)\n+    const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (TypeAlias &type_alias)\n+{}\n+\n+void\n+ConstChecker::visit (StructStruct &struct_item)\n+{}\n+\n+void\n+ConstChecker::visit (TupleStruct &tuple_struct)\n+{}\n+\n+void\n+ConstChecker::visit (EnumItem &item)\n+{}\n+\n+void\n+ConstChecker::visit (EnumItemTuple &item)\n+{}\n+\n+void\n+ConstChecker::visit (EnumItemStruct &item)\n+{}\n+\n+void\n+ConstChecker::visit (EnumItemDiscriminant &item)\n+{\n+  const_context.enter (item.get_mappings ().get_hirid ());\n+\n+  item.get_discriminant_expression ()->accept_vis (*this);\n+\n+  const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (Enum &enum_item)\n+{}\n+\n+void\n+ConstChecker::visit (Union &union_item)\n+{}\n+\n+void\n+ConstChecker::visit (ConstantItem &const_item)\n+{\n+  const_context.enter (const_item.get_mappings ().get_hirid ());\n+\n+  const_item.get_expr ()->accept_vis (*this);\n+\n+  const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (StaticItem &static_item)\n+{\n+  const_context.enter (static_item.get_mappings ().get_hirid ());\n+\n+  static_item.get_expr ()->accept_vis (*this);\n+\n+  const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (TraitItemFunc &item)\n+{\n+  if (item.has_block_defined ())\n+    item.get_block_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TraitItemConst &item)\n+{\n+  if (item.has_expr ())\n+    item.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TraitItemType &item)\n+{}\n+\n+void\n+ConstChecker::visit (Trait &trait)\n+{\n+  for (auto &item : trait.get_trait_items ())\n+    item->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ImplBlock &impl)\n+{\n+  for (auto &item : impl.get_impl_items ())\n+    item->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ExternalStaticItem &item)\n+{}\n+\n+void\n+ConstChecker::visit (ExternalFunctionItem &item)\n+{}\n+\n+void\n+ConstChecker::visit (ExternBlock &block)\n+{\n+  // FIXME: Do we need to do this?\n+  for (auto &item : block.get_extern_items ())\n+    item->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (LiteralPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (IdentifierPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (WildcardPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (RangePatternBoundLiteral &bound)\n+{}\n+\n+void\n+ConstChecker::visit (RangePatternBoundPath &bound)\n+{}\n+\n+void\n+ConstChecker::visit (RangePatternBoundQualPath &bound)\n+{}\n+\n+void\n+ConstChecker::visit (RangePattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (ReferencePattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (StructPatternFieldTuplePat &field)\n+{}\n+\n+void\n+ConstChecker::visit (StructPatternFieldIdentPat &field)\n+{}\n+\n+void\n+ConstChecker::visit (StructPatternFieldIdent &field)\n+{}\n+\n+void\n+ConstChecker::visit (StructPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (TupleStructItemsNoRange &tuple_items)\n+{}\n+\n+void\n+ConstChecker::visit (TupleStructItemsRange &tuple_items)\n+{}\n+\n+void\n+ConstChecker::visit (TupleStructPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (TuplePatternItemsMultiple &tuple_items)\n+{}\n+\n+void\n+ConstChecker::visit (TuplePatternItemsRanged &tuple_items)\n+{}\n+\n+void\n+ConstChecker::visit (TuplePattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (GroupedPattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (SlicePattern &pattern)\n+{}\n+\n+void\n+ConstChecker::visit (EmptyStmt &stmt)\n+{}\n+\n+void\n+ConstChecker::visit (LetStmt &stmt)\n+{\n+  if (stmt.has_init_expr ())\n+    stmt.get_init_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ExprStmtWithoutBlock &stmt)\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (ExprStmtWithBlock &stmt)\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+ConstChecker::visit (TraitBound &bound)\n+{}\n+\n+void\n+ConstChecker::visit (ImplTraitType &type)\n+{}\n+\n+void\n+ConstChecker::visit (TraitObjectType &type)\n+{}\n+\n+void\n+ConstChecker::visit (ParenthesisedType &type)\n+{}\n+\n+void\n+ConstChecker::visit (ImplTraitTypeOneBound &type)\n+{}\n+\n+void\n+ConstChecker::visit (TupleType &type)\n+{}\n+\n+void\n+ConstChecker::visit (NeverType &type)\n+{}\n+\n+void\n+ConstChecker::visit (RawPointerType &type)\n+{}\n+\n+void\n+ConstChecker::visit (ReferenceType &type)\n+{}\n+\n+void\n+ConstChecker::visit (ArrayType &type)\n+{\n+  const_context.enter (type.get_mappings ().get_hirid ());\n+\n+  type.get_size_expr ()->accept_vis (*this);\n+\n+  const_context.exit ();\n+}\n+\n+void\n+ConstChecker::visit (SliceType &type)\n+{}\n+\n+void\n+ConstChecker::visit (InferredType &type)\n+{}\n+\n+void\n+ConstChecker::visit (BareFunctionType &type)\n+{}\n+\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "a474fc83d101586bc0152752071aaf9ce87a0fce", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -0,0 +1,183 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_CONST_CHECKER_H\n+#define RUST_CONST_CHECKER_H\n+\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir-type-check.h\"\n+#include \"rust-stacked-contexts.h\"\n+#include \"rust-name-resolver.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+class ConstChecker : public HIRFullVisitor\n+{\n+public:\n+  ConstChecker ();\n+\n+  void go (HIR::Crate &crate);\n+\n+private:\n+  /**\n+   * Check that only const functions are called in const contexts\n+   */\n+  void check_function_call (HirId fn_id, Location locus);\n+\n+  StackedContexts<HirId> const_context;\n+  Resolver::Resolver &resolver;\n+  Analysis::Mappings &mappings;\n+\n+  virtual void visit (IdentifierExpr &ident_expr) override;\n+  virtual void visit (Lifetime &lifetime) override;\n+  virtual void visit (LifetimeParam &lifetime_param) override;\n+  virtual void visit (PathInExpression &path) override;\n+  virtual void visit (TypePathSegment &segment) override;\n+  virtual void visit (TypePathSegmentGeneric &segment) override;\n+  virtual void visit (TypePathSegmentFunction &segment) override;\n+  virtual void visit (TypePath &path) override;\n+  virtual void visit (QualifiedPathInExpression &path) override;\n+  virtual void visit (QualifiedPathInType &path) override;\n+  virtual void visit (LiteralExpr &expr) override;\n+  virtual void visit (BorrowExpr &expr) override;\n+  virtual void visit (DereferenceExpr &expr) override;\n+  virtual void visit (ErrorPropagationExpr &expr) override;\n+  virtual void visit (NegationExpr &expr) override;\n+  virtual void visit (ArithmeticOrLogicalExpr &expr) override;\n+  virtual void visit (ComparisonExpr &expr) override;\n+  virtual void visit (LazyBooleanExpr &expr) override;\n+  virtual void visit (TypeCastExpr &expr) override;\n+  virtual void visit (AssignmentExpr &expr) override;\n+  virtual void visit (CompoundAssignmentExpr &expr) override;\n+  virtual void visit (GroupedExpr &expr) override;\n+  virtual void visit (ArrayElemsValues &elems) override;\n+  virtual void visit (ArrayElemsCopied &elems) override;\n+  virtual void visit (ArrayExpr &expr) override;\n+  virtual void visit (ArrayIndexExpr &expr) override;\n+  virtual void visit (TupleExpr &expr) override;\n+  virtual void visit (TupleIndexExpr &expr) override;\n+  virtual void visit (StructExprStruct &expr) override;\n+  virtual void visit (StructExprFieldIdentifier &field) override;\n+  virtual void visit (StructExprFieldIdentifierValue &field) override;\n+  virtual void visit (StructExprFieldIndexValue &field) override;\n+  virtual void visit (StructExprStructFields &expr) override;\n+  virtual void visit (StructExprStructBase &expr) override;\n+  virtual void visit (CallExpr &expr) override;\n+  virtual void visit (MethodCallExpr &expr) override;\n+  virtual void visit (FieldAccessExpr &expr) override;\n+  virtual void visit (ClosureExprInner &expr) override;\n+  virtual void visit (BlockExpr &expr) override;\n+  virtual void visit (ClosureExprInnerTyped &expr) override;\n+  virtual void visit (ContinueExpr &expr) override;\n+  virtual void visit (BreakExpr &expr) override;\n+  virtual void visit (RangeFromToExpr &expr) override;\n+  virtual void visit (RangeFromExpr &expr) override;\n+  virtual void visit (RangeToExpr &expr) override;\n+  virtual void visit (RangeFullExpr &expr) override;\n+  virtual void visit (RangeFromToInclExpr &expr) override;\n+  virtual void visit (RangeToInclExpr &expr) override;\n+  virtual void visit (ReturnExpr &expr) override;\n+  virtual void visit (UnsafeBlockExpr &expr) override;\n+  virtual void visit (LoopExpr &expr) override;\n+  virtual void visit (WhileLoopExpr &expr) override;\n+  virtual void visit (WhileLetLoopExpr &expr) override;\n+  virtual void visit (ForLoopExpr &expr) override;\n+  virtual void visit (IfExpr &expr) override;\n+  virtual void visit (IfExprConseqElse &expr) override;\n+  virtual void visit (IfExprConseqIf &expr) override;\n+  virtual void visit (IfExprConseqIfLet &expr) override;\n+  virtual void visit (IfLetExpr &expr) override;\n+  virtual void visit (IfLetExprConseqElse &expr) override;\n+  virtual void visit (IfLetExprConseqIf &expr) override;\n+  virtual void visit (IfLetExprConseqIfLet &expr) override;\n+  virtual void visit (MatchExpr &expr) override;\n+  virtual void visit (AwaitExpr &expr) override;\n+  virtual void visit (AsyncBlockExpr &expr) override;\n+  virtual void visit (TypeParam &param) override;\n+  virtual void visit (ConstGenericParam &param) override;\n+  virtual void visit (LifetimeWhereClauseItem &item) override;\n+  virtual void visit (TypeBoundWhereClauseItem &item) override;\n+  virtual void visit (Module &module) override;\n+  virtual void visit (ExternCrate &crate) override;\n+  virtual void visit (UseTreeGlob &use_tree) override;\n+  virtual void visit (UseTreeList &use_tree) override;\n+  virtual void visit (UseTreeRebind &use_tree) override;\n+  virtual void visit (UseDeclaration &use_decl) override;\n+  virtual void visit (Function &function) override;\n+  virtual void visit (TypeAlias &type_alias) override;\n+  virtual void visit (StructStruct &struct_item) override;\n+  virtual void visit (TupleStruct &tuple_struct) override;\n+  virtual void visit (EnumItem &item) override;\n+  virtual void visit (EnumItemTuple &item) override;\n+  virtual void visit (EnumItemStruct &item) override;\n+  virtual void visit (EnumItemDiscriminant &item) override;\n+  virtual void visit (Enum &enum_item) override;\n+  virtual void visit (Union &union_item) override;\n+  virtual void visit (ConstantItem &const_item) override;\n+  virtual void visit (StaticItem &static_item) override;\n+  virtual void visit (TraitItemFunc &item) override;\n+  virtual void visit (TraitItemConst &item) override;\n+  virtual void visit (TraitItemType &item) override;\n+  virtual void visit (Trait &trait) override;\n+  virtual void visit (ImplBlock &impl) override;\n+  virtual void visit (ExternalStaticItem &item) override;\n+  virtual void visit (ExternalFunctionItem &item) override;\n+  virtual void visit (ExternBlock &block) override;\n+  virtual void visit (LiteralPattern &pattern) override;\n+  virtual void visit (IdentifierPattern &pattern) override;\n+  virtual void visit (WildcardPattern &pattern) override;\n+  virtual void visit (RangePatternBoundLiteral &bound) override;\n+  virtual void visit (RangePatternBoundPath &bound) override;\n+  virtual void visit (RangePatternBoundQualPath &bound) override;\n+  virtual void visit (RangePattern &pattern) override;\n+  virtual void visit (ReferencePattern &pattern) override;\n+  virtual void visit (StructPatternFieldTuplePat &field) override;\n+  virtual void visit (StructPatternFieldIdentPat &field) override;\n+  virtual void visit (StructPatternFieldIdent &field) override;\n+  virtual void visit (StructPattern &pattern) override;\n+  virtual void visit (TupleStructItemsNoRange &tuple_items) override;\n+  virtual void visit (TupleStructItemsRange &tuple_items) override;\n+  virtual void visit (TupleStructPattern &pattern) override;\n+  virtual void visit (TuplePatternItemsMultiple &tuple_items) override;\n+  virtual void visit (TuplePatternItemsRanged &tuple_items) override;\n+  virtual void visit (TuplePattern &pattern) override;\n+  virtual void visit (GroupedPattern &pattern) override;\n+  virtual void visit (SlicePattern &pattern) override;\n+  virtual void visit (EmptyStmt &stmt) override;\n+  virtual void visit (LetStmt &stmt) override;\n+  virtual void visit (ExprStmtWithoutBlock &stmt) override;\n+  virtual void visit (ExprStmtWithBlock &stmt) override;\n+  virtual void visit (TraitBound &bound) override;\n+  virtual void visit (ImplTraitType &type) override;\n+  virtual void visit (TraitObjectType &type) override;\n+  virtual void visit (ParenthesisedType &type) override;\n+  virtual void visit (ImplTraitTypeOneBound &type) override;\n+  virtual void visit (TupleType &type) override;\n+  virtual void visit (NeverType &type) override;\n+  virtual void visit (RawPointerType &type) override;\n+  virtual void visit (ReferenceType &type) override;\n+  virtual void visit (ArrayType &type) override;\n+  virtual void visit (SliceType &type) override;\n+  virtual void visit (InferredType &type) override;\n+  virtual void visit (BareFunctionType &type) override;\n+};\n+\n+} // namespace HIR\n+} // namespace Rust\n+\n+#endif /* !RUST_CONST_CHECKER_H */"}, {"sha": "e3c211e77cb006ce45cd14bd493b8ee1d2f07a6f", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -17,15 +17,16 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-session-manager.h\"\n-#include \"rust-unsafe-checker.h\"\n #include \"rust-diagnostics.h\"\n+#include \"rust-unsafe-checker.h\"\n #include \"rust-lex.h\"\n #include \"rust-parse.h\"\n #include \"rust-macro-expand.h\"\n #include \"rust-ast-resolve.h\"\n #include \"rust-ast-lower.h\"\n #include \"rust-hir-type-check.h\"\n #include \"rust-privacy-check.h\"\n+#include \"rust-const-checker.h\"\n #include \"rust-tycheck-dump.h\"\n #include \"rust-compile.h\"\n #include \"rust-cfg-parser.h\"\n@@ -796,6 +797,8 @@ Session::parse_file (const char *filename)\n     return;\n \n   HIR::UnsafeChecker ().go (hir);\n+  HIR::ConstChecker ().go (hir);\n+\n   if (saw_errors ())\n     return;\n "}, {"sha": "5f19c674c947c5818205fb1de8b5f2a33028ed1c", "filename": "gcc/testsuite/rust/compile/const1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -0,0 +1,6 @@\n+fn bar() {}\n+\n+const fn foo() {\n+    bar(); // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" }\n+}\n+"}, {"sha": "17b6de573dd29aa63548c72571eddb4484d61fc7", "filename": "gcc/testsuite/rust/compile/const2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-w\" }\n+\n+const fn foo() {\n+    const fn bar() {}\n+\n+    bar();\n+}"}, {"sha": "22dc3d356cacca470699724b7ee3bc17d72ba223", "filename": "gcc/testsuite/rust/compile/const3.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86619909ec3d30b1363d66a6caff2f2b279ad2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs?ref=1d86619909ec3d30b1363d66a6caff2f2b279ad2", "patch": "@@ -0,0 +1,7 @@\n+fn size() -> usize {\n+    15\n+}\n+\n+fn main() {\n+    let a = [15; size()]; // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" }\n+}"}]}