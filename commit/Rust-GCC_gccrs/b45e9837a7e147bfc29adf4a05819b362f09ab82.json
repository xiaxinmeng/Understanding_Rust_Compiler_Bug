{"sha": "b45e9837a7e147bfc29adf4a05819b362f09ab82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1ZTk4MzdhN2UxNDdiZmMyOWFkZjRhMDU4MTliMzYyZjA5YWI4Mg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-02T20:04:27Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-02T20:04:27Z"}, "message": "m68hc11.c (m68hc11_shift_operator): New function.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_shift_operator): New function.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_shift_operator): Declare.\n\t* config/m68hc11/m68hc11.h (PREDICATE_CODES): Register.\n\t* config/m68hc11/m68hc11.md (\"rotrhi3\", \"rotlhi3\"): New patterns for\n\trotatert and rotate.\n\t(\"rotrhi3_const\", \"rotlhi3_const\"): Rename of old 'rotrhi3' insns.\n\t(\"*rotrhi3\", \"*rotlhi3\"): New insn pattern for non-const rotatert.\n\t(\"*rotrhi3_addr\"): New split for shift insns on address register.\n\t(\"*lshrhi3\", \"*ashrhi3\", \"*ashlhi3_2\"): Use new split.\n\t* config/m68hc11/larith.asm (___rotlhi3): New asm function.\n\t(___rotrhi3): Likewise.\n\t* config/m68hc11/t-m68hc11-gas (LIB1ASMFUNCS): Build them.\n\nFrom-SVN: r63677", "tree": {"sha": "0ef9b98630bafb452e8e53713d7ad883956f7692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef9b98630bafb452e8e53713d7ad883956f7692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b45e9837a7e147bfc29adf4a05819b362f09ab82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45e9837a7e147bfc29adf4a05819b362f09ab82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45e9837a7e147bfc29adf4a05819b362f09ab82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45e9837a7e147bfc29adf4a05819b362f09ab82/comments", "author": null, "committer": null, "parents": [{"sha": "b1cbe78c098fb70428d66647274f39860aa95977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1cbe78c098fb70428d66647274f39860aa95977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1cbe78c098fb70428d66647274f39860aa95977"}], "stats": {"total": 214, "additions": 184, "deletions": 30}, "files": [{"sha": "03eb0fac32ee455c9fbeac23dd0ac70ba734d09d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -1,3 +1,18 @@\n+2003-03-02  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_shift_operator): New function.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_shift_operator): Declare.\n+\t* config/m68hc11/m68hc11.h (PREDICATE_CODES): Register.\n+\t* config/m68hc11/m68hc11.md (\"rotrhi3\", \"rotlhi3\"): New patterns for \n+\trotatert and rotate.\n+\t(\"rotrhi3_const\", \"rotlhi3_const\"): Rename of old 'rotrhi3' insns.\n+\t(\"*rotrhi3\", \"*rotlhi3\"): New insn pattern for non-const rotatert.\n+\t(\"*rotrhi3_addr\"): New split for shift insns on address register.\n+\t(\"*lshrhi3\", \"*ashrhi3\", \"*ashlhi3_2\"): Use new split.\n+\t* config/m68hc11/larith.asm (___rotlhi3): New asm function.\n+\t(___rotrhi3): Likewise.\n+\t* config/m68hc11/t-m68hc11-gas (LIB1ASMFUNCS): Build them.\n+\n 2003-03-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* toplev.c (aux_base_name): Moved from toplev.h."}, {"sha": "0acf91228597655d5cf82aa72f4c472e4caddc62", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -1,5 +1,5 @@\n /* libgcc routines for M68HC11 & M68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -578,6 +578,47 @@ Return_zero:\n \trts\n #endif\n \n+#ifdef L_rotrhi3\n+\t.sect .text\n+\t.globl ___rotrhi3\n+\n+___rotrhi3:\n+\txgdx\n+\tclra\n+\tandb\t#0x0f\n+\txgdx\n+\tbeq\tReturn\n+Loop:\n+\ttap\n+\trorb\n+\trora\n+\tdex\n+\tbne\tLoop\n+Return:\n+\trts\n+#endif\n+\n+#ifdef L_rotlhi3\n+\t.sect .text\n+\t.globl ___rotlhi3\n+\n+___rotlhi3:\n+\txgdx\n+\tclra\n+\tandb\t#0x0f\n+\txgdx\n+\tbeq\tReturn\n+Loop:\n+\tasrb\n+\trolb\n+\trola\n+\trolb\n+\tdex\n+\tbne\tLoop\n+Return:\n+\trts\n+#endif\n+\n #ifdef L_ashrhi3\n \t.sect .text\n \t.globl ___ashrhi3"}, {"sha": "5bb69cf98517b0e00abb12301647faf166827edb", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in m68hc11.c\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GNU CC.\n@@ -117,6 +117,7 @@ extern int arith_src_operand PARAMS((rtx, enum machine_mode));\n extern int m68hc11_logical_operator PARAMS((rtx, enum machine_mode));\n extern int m68hc11_arith_operator PARAMS((rtx, enum machine_mode));\n extern int m68hc11_non_shift_operator PARAMS((rtx, enum machine_mode));\n+extern int m68hc11_shift_operator PARAMS((rtx, enum machine_mode));\n extern int m68hc11_unary_operator PARAMS((rtx, enum machine_mode));\n extern int non_push_operand PARAMS((rtx, enum machine_mode));\n extern int hard_reg_operand PARAMS((rtx, enum machine_mode));"}, {"sha": "e99b844edea2364304e4b8d1aa659bfb3266ffb9", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -1140,6 +1140,16 @@ m68hc11_non_shift_operator (op, mode)\n     || GET_CODE (op) == PLUS || GET_CODE (op) == MINUS;\n }\n \n+/* Return true if op is a shift operator.  */\n+int\n+m68hc11_shift_operator (op, mode)\n+     register rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return GET_CODE (op) == ROTATE || GET_CODE (op) == ROTATERT\n+    || GET_CODE (op) == LSHIFTRT || GET_CODE (op) == ASHIFT\n+    || GET_CODE (op) == ASHIFTRT;\n+}\n \n int\n m68hc11_unary_operator (op, mode)"}, {"sha": "df4f8184e0c79e51ed976afe9eda16277e1eeea9", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -1643,6 +1643,7 @@ do {                                                                    \\\n \t\t\t      ROTATE, ROTATERT }},\t\t\t\\\n {\"m68hc11_non_shift_operator\", {AND, IOR, XOR, PLUS, MINUS}},\t\t\\\n {\"m68hc11_unary_operator\",   {NEG, NOT, SIGN_EXTEND, ZERO_EXTEND}},\t\\\n+{\"m68hc11_shift_operator\",   {ASHIFT, ASHIFTRT, LSHIFTRT, ROTATE, ROTATERT}},\\\n {\"non_push_operand\",         {SUBREG, REG, MEM}},\t\t\t\\\n {\"reg_or_some_mem_operand\",  {SUBREG, REG, MEM}},\t\t\t\\\n {\"tst_operand\",              {SUBREG, REG, MEM}},\t\t\t\\"}, {"sha": "8117d486973991b9eaec500739c1c6430f82709c", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 113, "deletions": 27, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -4757,13 +4757,16 @@\n \n \n (define_insn \"*ashlhi3_2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-                   (match_operand:HI 2 \"register_operand\" \"+x\")))\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,*x\")\n+\t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n+                   (match_operand:HI 2 \"register_operand\" \"+x,+d\")))\n    (clobber (match_dup 2))]\n   \"\"\n   \"*\n {\n+  if (A_REG_P (operands[0]))\n+    return \\\"#\\\";\n+\n   CC_STATUS_INIT;\n   return \\\"bsr\\\\t___lshlhi3\\\";\n }\")\n@@ -5046,21 +5049,17 @@\n }\")\n \n (define_insn \"*ashrhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,x\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,*x\")\n \t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n \t             (match_operand:HI 2 \"register_operand\" \"+x,+d\")))\n    (clobber (match_dup 2))]\n   \"\"\n   \"*\n {\n-  CC_STATUS_INIT;\n-  if (D_REG_P (operands[2]))\n-    output_asm_insn (\\\"xgd%0\\\", operands);\n+  if (A_REG_P (operands[0]))\n+    return \\\"#\\\";\n \n   output_asm_insn (\\\"bsr\\\\t___ashrhi3\\\", operands);\n-  if (D_REG_P (operands[2]))\n-    output_asm_insn (\\\"xgd%0\\\", operands);\n-\n   return \\\"\\\"; \n }\")\n \n@@ -5594,22 +5593,17 @@\n }\")\n \n (define_insn \"*lshrhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,x\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,*x\")\n \t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n \t\t     (match_operand:HI 2 \"register_operand\" \"+x,+d\")))\n    (clobber (match_dup 2))]\n   \"\"\n   \"*\n {\n-  CC_STATUS_INIT;\n-  if (D_REG_P (operands[2]))\n-    output_asm_insn (\\\"xgd%0\\\", operands);\n-\n-  output_asm_insn (\\\"bsr\\\\t___lshrhi3\\\", operands);\n-  if (D_REG_P (operands[2]))\n-    output_asm_insn (\\\"xgd%0\\\", operands);\n+  if (A_REG_P (operands[0]))\n+    return \\\"#\\\";\n \n-  return \\\"\\\"; \n+  return \\\"bsr\\\\t___lshrhi3\\\";\n }\")\n \n (define_expand \"lshrqi3\"\n@@ -5780,7 +5774,41 @@\n   return \\\"\\\";\n }\")\n \n-(define_insn \"rotlhi3\"\n+(define_insn \"rotrqi3\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d,!q\")\n+\t(rotatert:QI (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"i,i\")))]\n+  \"\"\n+  \"*\n+{\n+  m68hc11_gen_rotate (ROTATERT, insn, operands);\n+  return \\\"\\\";\n+}\")\n+\n+(define_expand \"rotlhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(rotate:HI (match_operand:HI 1 \"general_operand\" \"\")\n+\t           (match_operand:HI 2 \"general_operand\" \"\")))]\n+   \"\"\n+   \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx scratch = gen_reg_rtx (HImode);\n+      operand1 = force_reg (HImode, operand1);\n+\n+      emit_move_insn (scratch, operands[2]);\n+      emit_insn (gen_rtx (PARALLEL, VOIDmode,\n+\t\t gen_rtvec (2, gen_rtx (SET, VOIDmode,\n+\t\t\t\t\toperand0,\n+\t\t\t\t\tgen_rtx_ROTATE (HImode,\n+\t\t\t\t\t\toperand1, scratch)),\n+\t\t\t      gen_rtx (CLOBBER, VOIDmode, scratch))));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"rotlhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(rotate:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"const_int_operand\" \"i\")))]\n@@ -5791,18 +5819,44 @@\n   return \\\"\\\";\n }\")\n \n-(define_insn \"rotrqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d,!q\")\n-\t(rotatert:QI (match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"i,i\")))]\n+(define_insn \"*rotlhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,*x\")\n+\t(rotate:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t\t   (match_operand:HI 2 \"general_operand\" \"+x,+d\")))\n+   (clobber (match_dup 2))]\n   \"\"\n   \"*\n {\n-  m68hc11_gen_rotate (ROTATERT, insn, operands);\n-  return \\\"\\\";\n+  if (A_REG_P (operands[0]))\n+    return \\\"#\\\";\n+\n+  return \\\"bsr\\\\t___rotlhi3\\\";\n+}\")\n+\n+(define_expand \"rotrhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(rotatert:HI (match_operand:HI 1 \"general_operand\" \"\")\n+\t             (match_operand:HI 2 \"general_operand\" \"\")))]\n+   \"\"\n+   \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx scratch = gen_reg_rtx (HImode);\n+      operand1 = force_reg (HImode, operand1);\n+\n+      emit_move_insn (scratch, operands[2]);\n+      emit_insn (gen_rtx (PARALLEL, VOIDmode,\n+\t\t gen_rtvec (2, gen_rtx (SET, VOIDmode,\n+\t\t\t\t\toperand0,\n+\t\t\t\t\tgen_rtx_ROTATERT (HImode,\n+\t\t\t\t\t\toperand1, scratch)),\n+\t\t\t      gen_rtx (CLOBBER, VOIDmode, scratch))));\n+      DONE;\n+    }\n }\")\n \n-(define_insn \"rotrhi3\"\n+(define_insn \"rotrhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(rotatert:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"const_int_operand\" \"i\")))]\n@@ -5813,6 +5867,38 @@\n   return \\\"\\\";\n }\")\n \n+(define_insn \"*rotrhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,*x\")\n+\t(rotatert:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t\t     (match_operand:HI 2 \"general_operand\" \"+x,+d\")))\n+   (clobber (match_dup 2))]\n+  \"\"\n+  \"*\n+{\n+  if (A_REG_P (operands[0]))\n+    return \\\"#\\\";\n+\n+  return \\\"bsr\\\\t___rotrhi3\\\";\n+}\")\n+\n+;; Split a shift operation on an address register in a shift\n+;; on D_REGNUM.\n+(define_split /* \"*rotrhi3_addr\" */\n+  [(set (match_operand:HI 0 \"hard_addr_reg_operand\" \"\")\n+\t(match_operator:HI 3 \"m68hc11_shift_operator\"\n+\t    [(match_operand:HI 1 \"register_operand\" \"\")\n+\t     (match_operand:HI 2 \"register_operand\" \"\")]))\n+   (clobber (match_dup 2))]\n+  \"z_replacement_completed == 2\"\n+  [(parallel [(set (reg:HI D_REGNUM) (match_dup 0))\n+              (set (match_dup 0) (reg:HI D_REGNUM))])\n+   (parallel [(set (reg:HI D_REGNUM) \n+\t\t   (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 0)]))\n+\t      (clobber (match_dup 0))])\n+   (parallel [(set (reg:HI D_REGNUM) (match_dup 0))\n+              (set (match_dup 0) (reg:HI D_REGNUM))])]\n+  \"\")\n+\n ;;--------------------------------------------------------------------\n ;;-  Jumps and transfers\n ;;--------------------------------------------------------------------"}, {"sha": "b5404cc84797347d76f8f0c66c9a93e1fc25a679", "filename": "gcc/config/m68hc11/t-m68hc11-gas", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45e9837a7e147bfc29adf4a05819b362f09ab82/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas?ref=b45e9837a7e147bfc29adf4a05819b362f09ab82", "patch": "@@ -23,7 +23,7 @@ LIB1ASMFUNCS = _mulsi3 \\\n \t_regs_min _regs_frame _regs_d1_2 \\\n \t_regs_d3_4 _regs_d5_6 _regs_d7_8 _regs_d9_16 _regs_d17_32 \\\n \t_premain __exit _abort _cleanup \\\n-\t_adddi3 _subdi3 _notdi2 \\\n+\t_adddi3 _subdi3 _notdi2 _rotlhi3 _rotrhi3 \\\n \t_ashrhi3 _lshrhi3 _lshlhi3 _ashrqi3 _lshlqi3 _map_data _init_bss \\\n \t_ctor _dtor __far_trampoline\n "}]}