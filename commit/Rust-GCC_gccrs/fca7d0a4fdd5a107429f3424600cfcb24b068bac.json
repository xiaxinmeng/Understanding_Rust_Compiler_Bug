{"sha": "fca7d0a4fdd5a107429f3424600cfcb24b068bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhN2QwYTRmZGQ1YTEwNzQyOWYzNDI0NjAwY2ZjYjI0YjA2OGJhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-31T09:51:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-31T09:51:40Z"}, "message": "[AArch64] Remove use of wider vector modes\n\nThe AArch64 port defined x2, x3 and x4 vector modes that were only used\nin the rtl for the AdvSIMD LD{2,3,4} patterns.  It seems unlikely that\nthis rtl would have led to any valid simplifications, since the values\ninvolved were unspecs that had a different number of operands from the\nnon-dreg versions.  (The dreg UNSPEC_LD2 had a single operand, while\nthe qreg one had two operands.)\n\nAs it happened, the patterns led to invalid simplifications on big-\nendian targets due to a mix-up in the operand order, see Tamar's fix\nin r240271.\n\nThis patch therefore replaces the rtl patterns with dedicated unspecs.\nThis allows the x2, x3 and x4 modes to be removed, avoiding a clash\nwith 256-bit and 512-bit SVE.\n\n2017-08-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-modes.def: Remove 32-, 48- and 64-byte\n\tvector modes.\n\t* config/aarch64/iterators.md (VRL2, VRL3, VRL4): Delete.\n\t* config/aarch64/aarch64.md (UNSPEC_LD2_DREG, UNSPEC_LD3_DREG)\n\t(UNSPEC_LD4_DREG): New unspecs.\n\t* config/aarch64/aarch64-simd.md (aarch64_ld2<mode>_dreg_le)\n\t(aarch64_ld2<mode>_dreg_be): Replace with...\n\t(aarch64_ld2<mode>_dreg): ...this pattern and use the new DREG\n\tunspec.\n\t(aarch64_ld3<mode>_dreg_le)\n\t(aarch64_ld3<mode>_dreg_be): Replace with...\n\t(aarch64_ld3<mode>_dreg): ...this pattern and use the new DREG\n\tunspec.\n\t(aarch64_ld4<mode>_dreg_le)\n\t(aarch64_ld4<mode>_dreg_be): Replace with...\n\t(aarch64_ld4<mode>_dreg): ...this pattern and use the new DREG\n\tunspec.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251555", "tree": {"sha": "0f7e727646b7d001f5297fc0d4c5a4dea6988b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7e727646b7d001f5297fc0d4c5a4dea6988b75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca7d0a4fdd5a107429f3424600cfcb24b068bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca7d0a4fdd5a107429f3424600cfcb24b068bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca7d0a4fdd5a107429f3424600cfcb24b068bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca7d0a4fdd5a107429f3424600cfcb24b068bac/comments", "author": null, "committer": null, "parents": [{"sha": "3aebc597181a97c7b064f04d8e8aa30f79c51451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aebc597181a97c7b064f04d8e8aa30f79c51451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aebc597181a97c7b064f04d8e8aa30f79c51451"}], "stats": {"total": 333, "additions": 56, "deletions": 277}, "files": [{"sha": "71728b74ae522fad2550c83c9fe329526b1e969d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca7d0a4fdd5a107429f3424600cfcb24b068bac", "patch": "@@ -1,3 +1,25 @@\n+2017-08-31  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def: Remove 32-, 48- and 64-byte\n+\tvector modes.\n+\t* config/aarch64/iterators.md (VRL2, VRL3, VRL4): Delete.\n+\t* config/aarch64/aarch64.md (UNSPEC_LD2_DREG, UNSPEC_LD3_DREG)\n+\t(UNSPEC_LD4_DREG): New unspecs.\n+\t* config/aarch64/aarch64-simd.md (aarch64_ld2<mode>_dreg_le)\n+\t(aarch64_ld2<mode>_dreg_be): Replace with...\n+\t(aarch64_ld2<mode>_dreg): ...this pattern and use the new DREG\n+\tunspec.\n+\t(aarch64_ld3<mode>_dreg_le)\n+\t(aarch64_ld3<mode>_dreg_be): Replace with...\n+\t(aarch64_ld3<mode>_dreg): ...this pattern and use the new DREG\n+\tunspec.\n+\t(aarch64_ld4<mode>_dreg_le)\n+\t(aarch64_ld4<mode>_dreg_be): Replace with...\n+\t(aarch64_ld4<mode>_dreg): ...this pattern and use the new DREG\n+\tunspec.\n+\n 2017-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/81987"}, {"sha": "195976c223aac20a030dbdde04bebc3d96f55ed2", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=fca7d0a4fdd5a107429f3424600cfcb24b068bac", "patch": "@@ -44,15 +44,5 @@ INT_MODE (OI, 32);\n INT_MODE (CI, 48);\n INT_MODE (XI, 64);\n \n-/* Vector modes for register lists.  */\n-VECTOR_MODES (INT, 32);\t\t/* V32QI V16HI V8SI V4DI.  */\n-VECTOR_MODES (FLOAT, 32);\t/* V8SF V4DF.  */\n-\n-VECTOR_MODES (INT, 48);\t\t/* V32QI V16HI V8SI V4DI.  */\n-VECTOR_MODES (FLOAT, 48);\t/* V8SF V4DF.  */\n-\n-VECTOR_MODES (INT, 64);\t\t/* V32QI V16HI V8SI V4DI.  */\n-VECTOR_MODES (FLOAT, 64);\t/* V8SF V4DF.  */\n-\n /* Quad float: 128-bit floating mode for long doubles.  */\n FLOAT_MODE (TF, 16, ieee_quad_format);"}, {"sha": "f7609616c34d333f0ca6afda79e9780f8dd6ed7f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 31, "deletions": 252, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fca7d0a4fdd5a107429f3424600cfcb24b068bac", "patch": "@@ -4963,278 +4963,62 @@\n   DONE;\n })\n \n-(define_insn \"aarch64_ld2<mode>_dreg_le\"\n+(define_insn \"aarch64_ld2<mode>_dreg\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(subreg:OI\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD2)\n-\t     (vec_duplicate:VD (const_int 0)))\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD2)\n-\t     (vec_duplicate:VD (const_int 0)))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld2\\\\t{%S0.<Vtype> - %T0.<Vtype>}, %1\"\n-  [(set_attr \"type\" \"neon_load2_2reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld2<mode>_dreg_be\"\n-  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(subreg:OI\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (vec_duplicate:VD (const_int 0))\n-\t     (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD2))\n-\t    (vec_concat:<VDBL>\n-\t     (vec_duplicate:VD (const_int 0))\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD2))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:OI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD2_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld2\\\\t{%S0.<Vtype> - %T0.<Vtype>}, %1\"\n   [(set_attr \"type\" \"neon_load2_2reg<q>\")]\n )\n \n-(define_insn \"aarch64_ld2<mode>_dreg_le\"\n-  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(subreg:OI\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD2)\n-\t     (const_int 0))\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD2)\n-\t     (const_int 0))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld1\\\\t{%S0.1d - %T0.1d}, %1\"\n-  [(set_attr \"type\" \"neon_load1_2reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld2<mode>_dreg_be\"\n+(define_insn \"aarch64_ld2<mode>_dreg\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(subreg:OI\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (const_int 0)\n-\t     (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD2))\n-\t    (vec_concat:<VDBL>\n-\t     (const_int 0)\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD2))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:OI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD2_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld1\\\\t{%S0.1d - %T0.1d}, %1\"\n   [(set_attr \"type\" \"neon_load1_2reg<q>\")]\n )\n \n-(define_insn \"aarch64_ld3<mode>_dreg_le\"\n-  [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(subreg:CI\n-\t (vec_concat:<VRL3>\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD3)\n-\t     (vec_duplicate:VD (const_int 0)))\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)\n-\t     (vec_duplicate:VD (const_int 0))))\n-\t  (vec_concat:<VDBL>\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)\n-\t     (vec_duplicate:VD (const_int 0)))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld3\\\\t{%S0.<Vtype> - %U0.<Vtype>}, %1\"\n-  [(set_attr \"type\" \"neon_load3_3reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld3<mode>_dreg_be\"\n+(define_insn \"aarch64_ld3<mode>_dreg\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(subreg:CI\n-\t (vec_concat:<VRL3>\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (vec_duplicate:VD (const_int 0))\n-\t     (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD3))\n-\t    (vec_concat:<VDBL>\n-\t     (vec_duplicate:VD (const_int 0))\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)))\n-\t  (vec_concat:<VDBL>\n-\t     (vec_duplicate:VD (const_int 0))\n-\t     (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD3))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:CI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD3_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld3\\\\t{%S0.<Vtype> - %U0.<Vtype>}, %1\"\n   [(set_attr \"type\" \"neon_load3_3reg<q>\")]\n )\n \n-(define_insn \"aarch64_ld3<mode>_dreg_le\"\n-  [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(subreg:CI\n-\t (vec_concat:<VRL3>\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD3)\n-\t     (const_int 0))\n-\t    (vec_concat:<VDBL>\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)\n-\t     (const_int 0)))\n-\t  (vec_concat:<VDBL>\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)\n-\t     (const_int 0))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld1\\\\t{%S0.1d - %U0.1d}, %1\"\n-  [(set_attr \"type\" \"neon_load1_3reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld3<mode>_dreg_be\"\n+(define_insn \"aarch64_ld3<mode>_dreg\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(subreg:CI\n-\t (vec_concat:<VRL3>\n-\t  (vec_concat:<VRL2>\n-\t    (vec_concat:<VDBL>\n-\t     (const_int 0)\n-\t     (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD3))\n-\t    (vec_concat:<VDBL>\n-\t     (const_int 0)\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD3)))\n-\t  (vec_concat:<VDBL>\n-\t     (const_int 0)\n-\t     (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD3))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:CI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD3_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld1\\\\t{%S0.1d - %U0.1d}, %1\"\n   [(set_attr \"type\" \"neon_load1_3reg<q>\")]\n )\n \n-(define_insn \"aarch64_ld4<mode>_dreg_le\"\n+(define_insn \"aarch64_ld4<mode>_dreg\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(subreg:XI\n-\t (vec_concat:<VRL4>\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD4)\n-\t       (vec_duplicate:VD (const_int 0)))\n-\t      (vec_concat:<VDBL>\n-\t\t(unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t\t(vec_duplicate:VD (const_int 0))))\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t       (vec_duplicate:VD (const_int 0)))\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t       (vec_duplicate:VD (const_int 0))))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld4\\\\t{%S0.<Vtype> - %V0.<Vtype>}, %1\"\n-  [(set_attr \"type\" \"neon_load4_4reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld4<mode>_dreg_be\"\n-  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(subreg:XI\n-\t (vec_concat:<VRL4>\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (vec_duplicate:VD (const_int 0))\n-\t       (unspec:VD\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD4))\n-\t      (vec_concat:<VDBL>\n-\t\t(vec_duplicate:VD (const_int 0))\n-\t\t(unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)))\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (vec_duplicate:VD (const_int 0))\n-\t       (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4))\n-\t     (vec_concat:<VDBL>\n-\t       (vec_duplicate:VD (const_int 0))\n-\t       (unspec:VD [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:XI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD4_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld4\\\\t{%S0.<Vtype> - %V0.<Vtype>}, %1\"\n   [(set_attr \"type\" \"neon_load4_4reg<q>\")]\n )\n \n-(define_insn \"aarch64_ld4<mode>_dreg_le\"\n-  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(subreg:XI\n-\t (vec_concat:<VRL4>\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD4)\n-\t       (const_int 0))\n-\t      (vec_concat:<VDBL>\n-\t        (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t\t(const_int 0)))\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t       (const_int 0))\n-\t     (vec_concat:<VDBL>\n-\t       (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)\n-\t       (const_int 0)))) 0))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"ld1\\\\t{%S0.1d - %V0.1d}, %1\"\n-  [(set_attr \"type\" \"neon_load1_4reg<q>\")]\n-)\n-\n-(define_insn \"aarch64_ld4<mode>_dreg_be\"\n+(define_insn \"aarch64_ld4<mode>_dreg\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(subreg:XI\n-\t (vec_concat:<VRL4>\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (const_int 0)\n-\t       (unspec:DX\n-\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\tUNSPEC_LD4))\n-\t      (vec_concat:<VDBL>\n-\t\t(const_int 0)\n-\t\t(unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)))\n-\t   (vec_concat:<VRL2>\n-\t     (vec_concat:<VDBL>\n-\t       (const_int 0)\n-\t       (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4))\n-\t     (vec_concat:<VDBL>\n-\t       (const_int 0)\n-\t       (unspec:DX [(match_dup 1)]\n-\t\t\tUNSPEC_LD4)))) 0))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+\t(unspec:XI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD4_DREG))]\n+  \"TARGET_SIMD\"\n   \"ld1\\\\t{%S0.1d - %V0.1d}, %1\"\n   [(set_attr \"type\" \"neon_load1_4reg<q>\")]\n )\n@@ -5248,12 +5032,7 @@\n   rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n   set_mem_size (mem, <VSTRUCT:nregs> * 8);\n \n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_aarch64_ld<VSTRUCT:nregs><VDC:mode>_dreg_be (operands[0],\n-\t\t\t\t\t\t\t\tmem));\n-  else\n-    emit_insn (gen_aarch64_ld<VSTRUCT:nregs><VDC:mode>_dreg_le (operands[0],\n-\t\t\t\t\t\t\t\tmem));\n+  emit_insn (gen_aarch64_ld<VSTRUCT:nregs><VDC:mode>_dreg (operands[0], mem));\n   DONE;\n })\n "}, {"sha": "7552bf36ba29044c0806330c05bb8bf24f865dd8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fca7d0a4fdd5a107429f3424600cfcb24b068bac", "patch": "@@ -98,10 +98,13 @@\n     UNSPEC_GOTTINYTLS\n     UNSPEC_LD1\n     UNSPEC_LD2\n+    UNSPEC_LD2_DREG\n     UNSPEC_LD2_DUP\n     UNSPEC_LD3\n+    UNSPEC_LD3_DREG\n     UNSPEC_LD3_DUP\n     UNSPEC_LD4\n+    UNSPEC_LD4_DREG\n     UNSPEC_LD4_DUP\n     UNSPEC_LD2_LANE\n     UNSPEC_LD3_LANE"}, {"sha": "c8cb54f71ab05b07a5e51a88d346e12952dbc986", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca7d0a4fdd5a107429f3424600cfcb24b068bac/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=fca7d0a4fdd5a107429f3424600cfcb24b068bac", "patch": "@@ -711,21 +711,6 @@\n ;; ld..._lane and st..._lane operations.\n (define_mode_attr nregs [(OI \"2\") (CI \"3\") (XI \"4\")])\n \n-(define_mode_attr VRL2 [(V8QI \"V32QI\") (V4HI \"V16HI\")\n-\t\t\t(V4HF \"V16HF\")\n-\t\t\t(V2SI \"V8SI\")  (V2SF \"V8SF\")\n-\t\t\t(DI   \"V4DI\")  (DF   \"V4DF\")])\n-\n-(define_mode_attr VRL3 [(V8QI \"V48QI\") (V4HI \"V24HI\")\n-\t\t\t(V4HF \"V24HF\")\n-\t\t\t(V2SI \"V12SI\")  (V2SF \"V12SF\")\n-\t\t\t(DI   \"V6DI\")  (DF   \"V6DF\")])\n-\n-(define_mode_attr VRL4 [(V8QI \"V64QI\") (V4HI \"V32HI\")\n-\t\t\t(V4HF \"V32HF\")\n-\t\t\t(V2SI \"V16SI\")  (V2SF \"V16SF\")\n-\t\t\t(DI   \"V8DI\")  (DF   \"V8DF\")])\n-\n ;; Mode for atomic operation suffixes\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])"}]}