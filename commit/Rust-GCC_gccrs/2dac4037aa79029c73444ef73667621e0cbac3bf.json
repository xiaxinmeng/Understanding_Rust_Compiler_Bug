{"sha": "2dac4037aa79029c73444ef73667621e0cbac3bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhYzQwMzdhYTc5MDI5YzczNDQ0ZWY3MzY2NzYyMWUwY2JhYzNiZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-07-03T21:03:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-07-03T21:03:51Z"}, "message": "decl.c (min_location): New.\n\n/cp\n2018-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (min_location): New.\n\t(smallest_type_quals_location): Use the latter.\n\t(check_concept_fn): Use DECL_SOURCE_LOCATION.\n\t(grokdeclarator): Use accurate locations in a number of error\n\tmessages involving ds_thread, ds_storage_class, ds_virtual,\n\tds_constexpr, ds_typedef and ds_friend; exploit min_location.\n\n/testsuite\n2018-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/other/locations1.C: New.\n\t* g++.dg/tls/locations1.C: Likewise.\n\t* g++.dg/diagnostic/virtual-constexpr.C: Likewise.\n\t* g++.dg/diagnostic/virtual-static.C: Likewise.\n\t* g++.dg/concepts/fn-concept2.C: Test the locations too.\n\t* g++.dg/cpp0x/constexpr-virtual5.C: Likewise.\n\t* g++.dg/cpp0x/pr51463.C: Likewise.\n\t* g++.dg/other/typedef1.C: Likewise.\n\t* g++.dg/parse/dtor13.C: Likewise.\n\t* g++.dg/template/error44.C: Likewise.\n\t* g++.dg/template/typedef4.C: Likewise.\n\t* g++.dg/template/typedef5.C: Likewise.\n\t* g++.dg/tls/diag-2.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash11.C: Likewise.\n\nFrom-SVN: r262358", "tree": {"sha": "dacfba87beb457d2ccd0472b01945d853d49b6d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dacfba87beb457d2ccd0472b01945d853d49b6d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dac4037aa79029c73444ef73667621e0cbac3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dac4037aa79029c73444ef73667621e0cbac3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dac4037aa79029c73444ef73667621e0cbac3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dac4037aa79029c73444ef73667621e0cbac3bf/comments", "author": null, "committer": null, "parents": [{"sha": "c3c3ddbbcc8c2830ee76d6ed760f5343c983f916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c3ddbbcc8c2830ee76d6ed760f5343c983f916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c3ddbbcc8c2830ee76d6ed760f5343c983f916"}], "stats": {"total": 230, "additions": 171, "deletions": 59}, "files": [{"sha": "c27e2deb2ce29ad6179d9ac94f86251223a0a8b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,3 +1,12 @@\n+2018-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (min_location): New.\n+\t(smallest_type_quals_location): Use the latter.\n+\t(check_concept_fn): Use DECL_SOURCE_LOCATION.\n+\t(grokdeclarator): Use accurate locations in a number of error\n+\tmessages involving ds_thread, ds_storage_class, ds_virtual,\n+\tds_constexpr, ds_typedef and ds_friend; exploit min_location.\n+\n 2018-07-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86201"}, {"sha": "0ea3c4a3490808739b3d326d32e3d4ec0f477724", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 67, "deletions": 31, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -8545,15 +8545,18 @@ check_concept_fn (tree fn)\n {\n   // A constraint is nullary.\n   if (DECL_ARGUMENTS (fn))\n-    error (\"concept %q#D declared with function parameters\", fn);\n+    error_at (DECL_SOURCE_LOCATION (fn),\n+\t      \"concept %q#D declared with function parameters\", fn);\n \n   // The declared return type of the concept shall be bool, and\n   // it shall not be deduced from it definition.\n   tree type = TREE_TYPE (TREE_TYPE (fn));\n   if (is_auto (type))\n-    error (\"concept %q#D declared with a deduced return type\", fn);\n+    error_at (DECL_SOURCE_LOCATION (fn),\n+\t      \"concept %q#D declared with a deduced return type\", fn);\n   else if (type != boolean_type_node)\n-    error (\"concept %q#D with non-%<bool%> return type %qT\", fn, type);\n+    error_at (DECL_SOURCE_LOCATION (fn),\n+\t      \"concept %q#D with non-%<bool%> return type %qT\", fn, type);\n }\n \n /* Helper function.  Replace the temporary this parameter injected\n@@ -9795,6 +9798,18 @@ create_array_type_for_decl (tree name, tree type, tree size)\n   return build_cplus_array_type (type, itype);\n }\n \n+/* Returns the smallest location that is not UNKNOWN_LOCATION.  */\n+\n+static location_t\n+min_location (location_t loca, location_t locb)\n+{\n+  if (loca == UNKNOWN_LOCATION\n+      || (locb != UNKNOWN_LOCATION\n+\t  && linemap_location_before_p (line_table, locb, loca)))\n+    return locb;\n+  return loca;\n+}\n+\n /* Returns the smallest location != UNKNOWN_LOCATION among the\n    three stored in LOCATIONS[ds_const], LOCATIONS[ds_volatile],\n    and LOCATIONS[ds_restrict].  */\n@@ -9807,13 +9822,11 @@ smallest_type_quals_location (int type_quals, const location_t* locations)\n   if (type_quals & TYPE_QUAL_CONST)\n     loc = locations[ds_const];\n \n-  if ((type_quals & TYPE_QUAL_VOLATILE)\n-      && (loc == UNKNOWN_LOCATION || locations[ds_volatile] < loc))\n-    loc = locations[ds_volatile];\n+  if (type_quals & TYPE_QUAL_VOLATILE)\n+    loc = min_location (loc, locations[ds_volatile]);\n \n-  if ((type_quals & TYPE_QUAL_RESTRICT)\n-      && (loc == UNKNOWN_LOCATION || locations[ds_restrict] < loc))\n-    loc = locations[ds_restrict];\n+  if (type_quals & TYPE_QUAL_RESTRICT)\n+    loc = min_location (loc, locations[ds_restrict]);\n \n   return loc;\n }\n@@ -10710,14 +10723,20 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       if (staticp == 2)\n \t{\n-\t  error (\"member %qD cannot be declared both %<virtual%> \"\n-\t\t \"and %<static%>\", dname);\n+\t  rich_location richloc (line_table, declspecs->locations[ds_virtual]);\n+\t  richloc.add_range (declspecs->locations[ds_storage_class], false);\n+\t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n+\t\t    \"and %<static%>\", dname);\n \t  storage_class = sc_none;\n \t  staticp = 0;\n \t}\n       if (constexpr_p)\n-\terror (\"member %qD cannot be declared both %<virtual%> \"\n-\t       \"and %<constexpr%>\", dname);\n+\t{\n+\t  rich_location richloc (line_table, declspecs->locations[ds_virtual]);\n+\t  richloc.add_range (declspecs->locations[ds_constexpr], false);\n+\t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n+\t\t    \"and %<constexpr%>\", dname);\n+\t}\n     }\n   friendp = decl_spec_seq_has_spec_p (declspecs, ds_friend);\n \n@@ -10726,18 +10745,27 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       if (typedef_p)\n \t{\n-\t  error (\"typedef declaration invalid in parameter declaration\");\n+\t  error_at (declspecs->locations[ds_typedef],\n+\t\t    \"typedef declaration invalid in parameter declaration\");\n \t  return error_mark_node;\n \t}\n       else if (template_parm_flag && storage_class != sc_none)\n \t{\n-\t  error (\"storage class specified for template parameter %qs\", name);\n+\t  error_at (min_location (declspecs->locations[ds_thread],\n+\t\t\t\t  declspecs->locations[ds_storage_class]),\n+\t\t    \"storage class specified for template parameter %qs\",\n+\t\t    name);\n \t  return error_mark_node;\n \t}\n       else if (storage_class == sc_static\n \t       || storage_class == sc_extern\n \t       || thread_p)\n-\terror (\"storage class specifiers invalid in parameter declarations\");\n+\t{\n+\t  error_at (min_location (declspecs->locations[ds_thread],\n+\t\t\t\t  declspecs->locations[ds_storage_class]),\n+\t\t    \"storage class specified for parameter %qs\", name);\n+\t  return error_mark_node;\n+\t}\n \n       /* Function parameters cannot be concept. */\n       if (concept_p)\n@@ -10871,15 +10899,15 @@ grokdeclarator (const cp_declarator *declarator,\n \t;\n       else\n \t{\n+\t  location_t loc\n+\t    = min_location (declspecs->locations[ds_thread],\n+\t\t\t    declspecs->locations[ds_storage_class]);\n \t  if (decl_context == FIELD)\n-\t    error (\"storage class specified for %qs\", name);\n+\t    error_at (loc, \"storage class specified for %qs\", name);\n+\t  else if (decl_context == PARM || decl_context == CATCHPARM)\n+\t    error_at (loc, \"storage class specified for parameter %qs\", name);\n \t  else\n-\t    {\n-\t      if (decl_context == PARM || decl_context == CATCHPARM)\n-\t\terror (\"storage class specified for parameter %qs\", name);\n-\t      else\n-\t\terror (\"storage class specified for typename\");\n-\t    }\n+\t    error_at (loc, \"storage class specified for typename\");\n \t  if (storage_class == sc_register\n \t      || storage_class == sc_auto\n \t      || storage_class == sc_extern\n@@ -10900,7 +10928,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t   && storage_class != sc_static)\n     {\n       if (declspecs->gnu_thread_keyword_p)\n-\tpedwarn (input_location, 0, \"function-scope %qs implicitly auto and \"\n+\tpedwarn (declspecs->locations[ds_thread],\n+\t\t 0, \"function-scope %qs implicitly auto and \"\n \t\t \"declared %<__thread%>\", name);\n \n       /* When thread_local is applied to a variable of block scope the\n@@ -10912,7 +10941,10 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (storage_class && friendp)\n     {\n-      error (\"storage class specifiers invalid in friend function declarations\");\n+      error_at (min_location (declspecs->locations[ds_thread],\n+\t\t\t      declspecs->locations[ds_storage_class]),\n+\t\t\"storage class specifiers invalid in friend function \"\n+\t\t\"declarations\");\n       storage_class = sc_none;\n       staticp = 0;\n     }\n@@ -11238,7 +11270,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tif (virtualp)\n \t\t  {\n \t\t    /* Cannot be both friend and virtual.  */\n-\t\t    error (\"virtual functions cannot be friends\");\n+\t\t    error_at (declspecs->locations[ds_friend],\n+\t\t\t      \"virtual functions cannot be friends\");\n \t\t    friendp = 0;\n \t\t  }\n \t\tif (decl_context == NORMAL)\n@@ -12369,15 +12402,18 @@ grokdeclarator (const cp_declarator *declarator,\n \telse if (thread_p)\n \t  {\n \t    if (declspecs->gnu_thread_keyword_p)\n-\t      error (\"storage class %<__thread%> invalid for function %qs\",\n-\t\t     name);\n+\t      error_at (declspecs->locations[ds_thread],\n+\t\t\t\"storage class %<__thread%> invalid for function %qs\",\n+\t\t\tname);\n \t    else\n-\t      error (\"storage class %<thread_local%> invalid for function %qs\",\n-\t\t     name);\n+\t      error_at (declspecs->locations[ds_thread],\n+\t\t\t\"storage class %<thread_local%> invalid for \"\n+\t\t\t\"function %qs\", name);\n \t  }\n \n         if (virt_specifiers)\n-          error (\"virt-specifiers in %qs not allowed outside a class definition\", name);\n+          error (\"virt-specifiers in %qs not allowed outside a class \"\n+\t\t \"definition\", name);\n \t/* Function declaration not at top level.\n \t   Storage classes other than `extern' are not allowed\n \t   and `extern' makes no difference.  */"}, {"sha": "d4f97d24162e4b27ba795635bbaeeb3a40e66848", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,3 +1,20 @@\n+2018-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/other/locations1.C: New.\n+\t* g++.dg/tls/locations1.C: Likewise.\n+\t* g++.dg/diagnostic/virtual-constexpr.C: Likewise.\n+\t* g++.dg/diagnostic/virtual-static.C: Likewise.\n+\t* g++.dg/concepts/fn-concept2.C: Test the locations too.\n+\t* g++.dg/cpp0x/constexpr-virtual5.C: Likewise.\n+\t* g++.dg/cpp0x/pr51463.C: Likewise.\n+\t* g++.dg/other/typedef1.C: Likewise.\n+\t* g++.dg/parse/dtor13.C: Likewise.\n+\t* g++.dg/template/error44.C: Likewise.\n+\t* g++.dg/template/typedef4.C: Likewise.\n+\t* g++.dg/template/typedef5.C: Likewise.\n+\t* g++.dg/tls/diag-2.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash11.C: Likewise.\n+\n 2018-07-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86201"}, {"sha": "fe88dce1bd4863b27866a2841d1d1ffecd653f25", "filename": "gcc/testsuite/g++.dg/concepts/fn-concept2.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,7 +1,10 @@\n // { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n-  concept auto C1() { return 0; } // { dg-error \"deduced return type\" }\n+  concept auto C1() { return 0; } // { dg-error \"16:concept .concept auto C1\\\\(\\\\). declared with a deduced return type\" }\n \n template<typename T>\n-  concept int C2() { return 0; } // { dg-error \"return type\" }\n+  concept int C2() { return 0; } // { dg-error \"15:concept .concept int C2\\\\(\\\\). with non-.bool. return type .int.\" }\n+\n+template<typename T>\n+  concept bool C3(int) { return 0; } // { dg-error \"16:concept .concept bool C3\\\\(int\\\\). declared with function parameters\" }"}, {"sha": "2465f9d9b4f3b095afb07b8d24c89384d1ffcfbe", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n struct S {\n-  constexpr virtual int f() { return 1; }  // { dg-error \"both 'virtual' and 'constexpr'\" }\n+  constexpr virtual int f() { return 1; }  // { dg-error \"13:member .f. cannot be declared both .virtual. and .constexpr.\" }\n };"}, {"sha": "472a812205aadfed6c93b3727f59539fb0613c04", "filename": "gcc/testsuite/g++.dg/cpp0x/pr51463.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51463.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51463.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51463.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -3,5 +3,6 @@\n \n struct A\n {\n-  static virtual int i = 0;\t// { dg-error \"both 'virtual' and 'static'|declared as\" }\n+  static virtual int i = 0;\t// { dg-error \"10:member .i. cannot be declared both .virtual. and .static.\" }\n+  // { dg-error \"declared as\" \"\" { target *-*-* } .-1 }\n };"}, {"sha": "2c83236cae9f735ba74d76527dcea8d65622af2f", "filename": "gcc/testsuite/g++.dg/diagnostic/virtual-constexpr.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct S\n+{\n+  virtual constexpr void foo();  // { dg-error \"3:member .foo. cannot be declared both .virtual. and .constexpr.\" }\n+/* { dg-begin-multiline-output \"\" }\n+   virtual constexpr void foo();\n+   ^~~~~~~ ~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+  constexpr virtual void bar();  // { dg-error \"13:member .bar. cannot be declared both .virtual. and .constexpr.\" }\n+/* { dg-begin-multiline-output \"\" }\n+   constexpr virtual void bar();\n+   ~~~~~~~~~ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+};"}, {"sha": "bffb05e5b8116f1a7141a3706f9c220eac8b7a02", "filename": "gcc/testsuite/g++.dg/diagnostic/virtual-static.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-static.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-static.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-static.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+struct S\n+{\n+  virtual static void foo();  // { dg-error \"3:member .foo. cannot be declared both .virtual. and .static.\" }\n+/* { dg-begin-multiline-output \"\" }\n+   virtual static void foo();\n+   ^~~~~~~ ~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+  static virtual void bar();  // { dg-error \"10:member .bar. cannot be declared both .virtual. and .static.\" }\n+/* { dg-begin-multiline-output \"\" }\n+   static virtual void bar();\n+   ~~~~~~ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+};"}, {"sha": "77b009f19c8a55eb51a4bd16a35900be8214b28b", "filename": "gcc/testsuite/g++.dg/other/locations1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flocations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flocations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flocations1.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -0,0 +1 @@\n+void foo(static int p);  // { dg-error \"10:storage class specified\" }"}, {"sha": "83eab1625b8507f983600b3bee351fd210f9f60d", "filename": "gcc/testsuite/g++.dg/other/typedef1.C", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,7 +1,10 @@\n // PR c++/27572\n // { dg-do compile }\n \n-void f1(typedef) {}        // { dg-error \"no type|typedef declaration\" }\n-void f2(typedef x) {}      // { dg-error \"type|typedef declaration\" }\n-void f3(typedef x[]) {}    // { dg-error \"type|typedef declaration\" }\n-void f4(typedef int x) {}  // { dg-error \"typedef declaration\" }\n+void f1(typedef) {}        // { dg-error \"9:typedef declaration\" }\n+// { dg-error \"no type\" \"\" { target *-*-* } .-1 }\n+void f2(typedef x) {}      // { dg-error \"9:typedef declaration\" }\n+// { dg-error \"type\" \"\" { target *-*-* } .-1 }\n+void f3(typedef x[]) {}    // { dg-error \"9:typedef declaration\" }\n+// { dg-error \"type\" \"\" { target *-*-* } .-1 }\n+void f4(typedef int x) {}  // { dg-error \"9:typedef declaration\" }"}, {"sha": "c68d41e83720b4fa53ae70bc8508f826e39df10b", "filename": "gcc/testsuite/g++.dg/parse/dtor13.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor13.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -3,6 +3,7 @@\n \n struct A\n {\n-  static friend A::~A(); /* { dg-error \"storage class specifiers|extra qualification|implicitly friend\" } */\n+  static friend A::~A(); /* { dg-error \"3:storage class specifiers\" } */\n+  /* { dg-error \"extra qualification|implicitly friend\" \"\" { target *-*-* } .-1 } */\n };\n "}, {"sha": "8cf40801efbf056d13e98c04f78f0f09feb26adf", "filename": "gcc/testsuite/g++.dg/template/error44.C", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror44.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,7 +1,8 @@\n // PR c++/32056\n \n-template <auto int T> struct A {}; // { dg-error \"storage class specified|two or more\" }\n-template <extern int T> struct B {}; // { dg-error \"storage class specified\" }\n-template <static int T> struct C {}; // { dg-error \"storage class specified\" }\n-template <register int T> struct D {}; // { dg-error \"storage class specified\" }\n-template <mutable int T> struct E {}; // { dg-error \"storage class specified\" }\n+template <auto int T> struct A {}; // { dg-error \"11:storage class specified\" \"\" { target c++98_only } }\n+// { dg-error \"two or more\" \"\" { target c++11 } .-1 }\n+template <extern int T> struct B {}; // { dg-error \"11:storage class specified\" }\n+template <static int T> struct C {}; // { dg-error \"11:storage class specified\" }\n+template <register int T> struct D {}; // { dg-error \"11:storage class specified\" }\n+template <mutable int T> struct E {}; // { dg-error \"11:storage class specified\" }"}, {"sha": "f776f331c669f797e6873907bf10762edf2ff815", "filename": "gcc/testsuite/g++.dg/template/typedef4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef4.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,7 +1,8 @@\n // PR c++/27572\n // { dg-do compile }\n \n-template<typedef> void foo();  // { dg-error \"no type|typedef declaration|template\" }\n+template<typedef> void foo();  // { dg-error \"10:typedef declaration\" }\n+// { dg-error \"no type|template\" \"\" { target *-*-* } .-1 }\n \n void bar()\n {"}, {"sha": "eaa6143355694228e957bee616586eabe14f30d7", "filename": "gcc/testsuite/g++.dg/template/typedef5.C", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -1,7 +1,10 @@\n // PR c++/27572\n // { dg-do compile }\n \n-template<typedef,int>        struct A1; // { dg-error \"no type|typedef declaration|default argument\" }\n-template<typedef x,int>      struct A2; // { dg-error \"type|typedef declaration|default argument\" }\n-template<typedef x[],int>    struct A3; // { dg-error \"no type|typedef declaration|expected\" }\n-template<typedef int x, int> struct A4; // { dg-error \"typedef declaration|default argument\" }\n+template<typedef,int>        struct A1; // { dg-error \"10:typedef declaration\" }\n+// { dg-error \"no type|default argument\" \"\" { target *-*-* } .-1 }\n+template<typedef x,int>      struct A2; // { dg-error \"10:typedef declaration\" }\n+// { dg-error \"type|default argument\" \"\" { target *-*-* } .-1 }\n+template<typedef x[],int>    struct A3; // { dg-error \"typedef declaration|no type|expected\" }\n+template<typedef int x, int> struct A4; // { dg-error \"10:typedef declaration\" }\n+// { dg-error \"default argument\" \"\" { target *-*-* } .-1 }"}, {"sha": "c247a9787a26d353933034c68550459751845372", "filename": "gcc/testsuite/g++.dg/tls/diag-2.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -8,19 +8,19 @@ typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n \n void foo()\n {\n-  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared '__thread'\" } */\n+  __thread int l1;\t\t/* { dg-error \"3:function-scope .l1. implicitly auto and declared '__thread'\" } */\n   auto __thread int l2;\t\t/* { dg-error \"multiple storage classes|data types\" } */\n   __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n   register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n }\t\t\t\t/* { dg-error \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } .-1 } */\n \n-__thread void f1 ();\t\t/* { dg-error \"invalid for function\" } */\n-extern __thread void f2 ();\t/* { dg-error \"invalid for function\" } */\n-static __thread void f3 ();\t/* { dg-error \"invalid for function\" } */\n-__thread void f4 () { }\t\t/* { dg-error \"invalid for function\" } */\n+__thread void f1 ();\t\t/* { dg-error \"1:storage class .__thread. invalid for function\" } */\n+extern __thread void f2 ();\t/* { dg-error \"8:storage class .__thread. invalid for function\" } */\n+static __thread void f3 ();\t/* { dg-error \"8:storage class .__thread. invalid for function\" } */\n+__thread void f4 () { }\t\t/* { dg-error \"1:storage class .__thread. invalid for function\" } */\n \n-void bar(__thread int p1);\t/* { dg-error \"(invalid in parameter)|(specified for parameter)\" } */\n+void bar(__thread int p1);\t/* { dg-error \"10:storage class specified for parameter\" } */\n \n struct A {\n-  __thread int i;\t\t/* { dg-error \"storage class specified\" } */\n+  __thread int i;\t\t/* { dg-error \"3:storage class specified\" } */\n };"}, {"sha": "8ca3c6eb1f65873c687f56ed09c6fd8db08926cf", "filename": "gcc/testsuite/g++.dg/tls/locations1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Flocations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Flocations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Flocations1.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-require-effective-target tls } */\n+\n+template <__thread int T> struct F {}; // { dg-error \"11:storage class specified\" }\n+template <static __thread int T> struct G {}; // { dg-error \"11:storage class specified\" }"}, {"sha": "246f5a03aa557642a823ab46598dce2033533744", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash11.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dac4037aa79029c73444ef73667621e0cbac3bf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C?ref=2dac4037aa79029c73444ef73667621e0cbac3bf", "patch": "@@ -9,13 +9,14 @@ class A {\n \tint\th;\n \tA() { i=10; j=20; }\n \tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }\n-\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }// { dg-error \"\" }  virtual.*\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); } // { dg-error \"2:virtual functions cannot be friends\" }\n };\n \n class B : public A {\n     public:\n \tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }// { dg-error \"\" }  member.*// ERROR -  member.*\n-\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }// { dg-error \"\" }  virtual.*// ERROR -  member.*// ERROR -  member.*\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }  // { dg-error \"2:virtual functions cannot be friends\" }\n+// { dg-error \"private\" \"\" { target *-*-* } .-1 }\n };\n \n int"}]}