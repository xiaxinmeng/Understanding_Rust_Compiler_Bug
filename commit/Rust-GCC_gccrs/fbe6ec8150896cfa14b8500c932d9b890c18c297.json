{"sha": "fbe6ec8150896cfa14b8500c932d9b890c18c297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlNmVjODE1MDg5NmNmYTE0Yjg1MDBjOTMyZDliODkwYzE4YzI5Nw==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2004-02-10T18:38:19Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2004-02-10T18:38:19Z"}, "message": "emit-rtl.c (set_decl_incoming_rtl): New.\n\n\tPR/14058\n\t* emit-rtl.c (set_decl_incoming_rtl): New.\n\t* tree.h (set_decl_incoming_rtl): New.\n\t* function.c (assign_parms): Use set_decl_incoming_rtl for setting\n\tDECL_INCOMING_RTL.\n\t* ada/misc.c (adjust_decl_rtl): Likewise.\n\nFrom-SVN: r77611", "tree": {"sha": "8c381fb07eefd127e201f05bbc881c960cd8ca97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c381fb07eefd127e201f05bbc881c960cd8ca97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe6ec8150896cfa14b8500c932d9b890c18c297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe6ec8150896cfa14b8500c932d9b890c18c297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe6ec8150896cfa14b8500c932d9b890c18c297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe6ec8150896cfa14b8500c932d9b890c18c297/comments", "author": null, "committer": null, "parents": [{"sha": "8a4baa83a1ed5cc8fb7089263c768398a4b92f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4baa83a1ed5cc8fb7089263c768398a4b92f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4baa83a1ed5cc8fb7089263c768398a4b92f64"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "a3e050d89904f82f598013077909f00a8fbb85b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbe6ec8150896cfa14b8500c932d9b890c18c297", "patch": "@@ -1,3 +1,12 @@\n+2004-02-10  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\tPR/14058\n+\t* emit-rtl.c (set_decl_incoming_rtl): New.\n+\t* tree.h (set_decl_incoming_rtl): New.\n+\t* function.c (assign_parms): Use set_decl_incoming_rtl for setting\n+\tDECL_INCOMING_RTL.\n+\t* ada/misc.c (adjust_decl_rtl): Likewise.\n+\n 2004-02-10  Per Bothner  <per@bothner.com>\n \n \t* c-opts.c (c_common_post_options):   Don't emit working directory"}, {"sha": "6a40590df9f02a1520726b4af06e84aaf18e6699", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=fbe6ec8150896cfa14b8500c932d9b890c18c297", "patch": "@@ -774,7 +774,7 @@ adjust_decl_rtl (tree decl)\n       DECL_SIZE (decl) = TYPE_SIZE (new_type);\n \n       if (TREE_CODE (decl) == PARM_DECL)\n-\tDECL_INCOMING_RTL (decl) = XEXP (DECL_INCOMING_RTL (decl), 0);\n+\tset_decl_incoming_rtl (decl, XEXP (DECL_INCOMING_RTL (decl), 0));\n \n       /* If DECL_INITIAL was set, it should be updated to show that\n \t the decl is initialized to the address of that thing."}, {"sha": "814e2bb5bcb316e235cb0a6ccc308cb086ffcc24", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fbe6ec8150896cfa14b8500c932d9b890c18c297", "patch": "@@ -828,6 +828,40 @@ set_decl_rtl (tree t, rtx x)\n     }\n }\n \n+/* Assign the RTX X to parameter declaration T.  */\n+void\n+set_decl_incoming_rtl (tree t, rtx x)\n+{\n+  DECL_INCOMING_RTL (t) = x;\n+\n+  if (!x)\n+    return;\n+  /* For register, we maintain the reverse information too.  */\n+  if (GET_CODE (x) == REG)\n+    REG_ATTRS (x) = get_reg_attrs (t, 0);\n+  else if (GET_CODE (x) == SUBREG)\n+    REG_ATTRS (SUBREG_REG (x))\n+      = get_reg_attrs (t, -SUBREG_BYTE (x));\n+  if (GET_CODE (x) == CONCAT)\n+    {\n+      if (REG_P (XEXP (x, 0)))\n+        REG_ATTRS (XEXP (x, 0)) = get_reg_attrs (t, 0);\n+      if (REG_P (XEXP (x, 1)))\n+\tREG_ATTRS (XEXP (x, 1))\n+\t  = get_reg_attrs (t, GET_MODE_UNIT_SIZE (GET_MODE (XEXP (x, 0))));\n+    }\n+  if (GET_CODE (x) == PARALLEL)\n+    {\n+      int i;\n+      for (i = 0; i < XVECLEN (x, 0); i++)\n+\t{\n+\t  rtx y = XVECEXP (x, 0, i);\n+\t  if (REG_P (XEXP (y, 0)))\n+\t    REG_ATTRS (XEXP (y, 0)) = get_reg_attrs (t, INTVAL (XEXP (y, 1)));\n+\t}\n+    }\n+}\n+\n /* Identify REG (which may be a CONCAT) as a user register.  */\n \n void"}, {"sha": "e2024f2b26c1ea3f3c1466769de215466527a02b", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fbe6ec8150896cfa14b8500c932d9b890c18c297", "patch": "@@ -4645,7 +4645,7 @@ assign_parms (tree fndecl)\n \tentry_parm = stack_parm;\n \n       /* Record permanently how this parm was passed.  */\n-      DECL_INCOMING_RTL (parm) = entry_parm;\n+      set_decl_incoming_rtl (parm, entry_parm);\n \n       /* If there is actually space on the stack for this parm,\n \t count it in stack_args_size; otherwise set stack_parm to 0\n@@ -4714,7 +4714,7 @@ assign_parms (tree fndecl)\n \t\t&& INTVAL (XEXP (XVECEXP (entry_parm, 0, i), 1)) == 0)\n \t      {\n \t\tentry_parm = XEXP (XVECEXP (entry_parm, 0, i), 0);\n-\t\tDECL_INCOMING_RTL (parm) = entry_parm;\n+\t\tset_decl_incoming_rtl (parm, entry_parm);\n \t\tbreak;\n \t      }\n \t}\n@@ -5225,20 +5225,22 @@ assign_parms (tree fndecl)\n \t{\n \t  if (TREE_CODE (TREE_TYPE (parm)) == COMPLEX_TYPE)\n \t    {\n+\t      rtx tmp;\n+\n \t      SET_DECL_RTL (parm,\n \t\t\t    gen_rtx_CONCAT (DECL_MODE (parm),\n \t\t\t\t\t    DECL_RTL (fnargs),\n \t\t\t\t\t    DECL_RTL (TREE_CHAIN (fnargs))));\n-\t      DECL_INCOMING_RTL (parm)\n-\t\t= gen_rtx_CONCAT (DECL_MODE (parm),\n-\t\t\t\t  DECL_INCOMING_RTL (fnargs),\n-\t\t\t\t  DECL_INCOMING_RTL (TREE_CHAIN (fnargs)));\n+\t      tmp = gen_rtx_CONCAT (DECL_MODE (parm),\n+\t\t\t\t    DECL_INCOMING_RTL (fnargs),\n+\t\t\t\t    DECL_INCOMING_RTL (TREE_CHAIN (fnargs)));\n+\t      set_decl_incoming_rtl (parm, tmp);\n \t      fnargs = TREE_CHAIN (fnargs);\n \t    }\n \t  else\n \t    {\n \t      SET_DECL_RTL (parm, DECL_RTL (fnargs));\n-\t      DECL_INCOMING_RTL (parm) = DECL_INCOMING_RTL (fnargs);\n+\t      set_decl_incoming_rtl (parm, DECL_INCOMING_RTL (fnargs));\n \t    }\n \t  fnargs = TREE_CHAIN (fnargs);\n \t}"}, {"sha": "6f19cab177a404430115d77b54752bb74ad7df80", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe6ec8150896cfa14b8500c932d9b890c18c297/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fbe6ec8150896cfa14b8500c932d9b890c18c297", "patch": "@@ -3080,6 +3080,7 @@ extern const char *dump_flag_name (enum tree_dump_index);\n /* Assign the RTX to declaration.  */\n \n extern void set_decl_rtl (tree, rtx);\n+extern void set_decl_incoming_rtl (tree, rtx);\n \f\n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic"}]}