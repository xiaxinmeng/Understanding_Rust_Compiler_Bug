{"sha": "0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExOTBkZmQ0YWYyN2FmYjhlYWYwMzA4MmFmODFhY2JiNWJmOGE4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T08:37:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T08:37:37Z"}, "message": "[multiple changes]\n\n2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12 (Check_Private_View): Revert previous change.\n\t* sem_res.adb (Conversion_Check): Do not emit the error message if the\n\tconversion is in a generic instance.\n\n2011-08-31  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cbhase.adb (Symmetric_Difference): Dereference correct node array.\n\t* a-chtgbo.adb (Free): Allow 0 as index value.\n\n2011-08-31  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cborma.adb (Insert): Add comment to explain why no element\n\tassignment.\n\n2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.adb (Find_Body_Discriminal): Test whether the scope of the\n\tspec discriminant is already a concurrent type, in which case just use\n\tit, otherwise fetch the Corresponding_Concurrent_Type as before.\n\nFrom-SVN: r178356", "tree": {"sha": "05f58af667e348f42a36576e56904ec7c8c9e1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f58af667e348f42a36576e56904ec7c8c9e1c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/comments", "author": null, "committer": null, "parents": [{"sha": "8861e60f317087011b73617dd4efa5eb9e7a1acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8861e60f317087011b73617dd4efa5eb9e7a1acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8861e60f317087011b73617dd4efa5eb9e7a1acf"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "06d90912372460d704c9b74995a623f627c180bf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -1,3 +1,25 @@\n+2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12 (Check_Private_View): Revert previous change.\n+\t* sem_res.adb (Conversion_Check): Do not emit the error message if the\n+\tconversion is in a generic instance.\n+\n+2011-08-31  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cbhase.adb (Symmetric_Difference): Dereference correct node array.\n+\t* a-chtgbo.adb (Free): Allow 0 as index value.\n+\n+2011-08-31  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cborma.adb (Insert): Add comment to explain why no element\n+\tassignment.\n+\n+2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb (Find_Body_Discriminal): Test whether the scope of the\n+\tspec discriminant is already a concurrent type, in which case just use\n+\tit, otherwise fetch the Corresponding_Concurrent_Type as before.\n+\n 2011-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* system-irix-n64.ads, system-linux-armeb.ads, system-linux-armel.ads,"}, {"sha": "faef78e99719cd51f63ca81a2705bd5b820e046f", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -1274,7 +1274,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n             -------------\n \n             procedure Process (R_Node : Count_Type) is\n-               N : Node_Type renames Left.Nodes (R_Node);\n+               N : Node_Type renames Right.Nodes (R_Node);\n                X : Count_Type;\n                B : Boolean;\n "}, {"sha": "4cc2686bb2271ca146f2e5c3510c8e9c0e44e1e4", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -773,7 +773,16 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       begin\n          Node.Key := Key;\n \n-         --  Why is the following commented out ???\n+         --  Were this insertion operation to accept an element parameter, this\n+         --  is the point where the element value would be used, to update the\n+         --  element component of the new node. However, this insertion\n+         --  operation is special, in the sense that it does not accept an\n+         --  element parameter. Rather, this version of Insert allocates a node\n+         --  (inserting it among the active nodes of the container in the\n+         --  normal way, with the node's position being determined by the Key),\n+         --  and passes back a cursor designating the node. It is then up to\n+         --  the caller to assign a value to the node's element.\n+\n          --  Node.Element := New_Item;\n       end Assign;\n "}, {"sha": "a9c0c8a443497bfc2486e21ce8f99f45c8292a90", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -136,15 +136,19 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n      (HT : in out Hash_Table_Type'Class;\n       X  : Count_Type)\n    is\n-      pragma Assert (X > 0);\n+      N : Nodes_Type renames HT.Nodes;\n+\n+   begin\n+      if X = 0 then\n+         return;\n+      end if;\n+\n       pragma Assert (X <= HT.Capacity);\n \n-      N : Nodes_Type renames HT.Nodes;\n       --  pragma Assert (N (X).Prev >= 0);  -- node is active\n       --  Find a way to mark a node as active vs. inactive; we could\n       --  use a special value in Color_Type for this.  ???\n \n-   begin\n       --  The hash table actually contains two data structures: a list for\n       --  the \"active\" nodes that contain elements that have been inserted\n       --  onto the container, and another for the \"inactive\" nodes of the free"}, {"sha": "4cf739fb282d1736731913905950cc8e98e1af4f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -5748,17 +5748,12 @@ package body Sem_Ch12 is\n             end if;\n \n          --  For composite types with inconsistent representation exchange\n-         --  component types accordingly. We exchange the private and full view\n-         --  of a designated type when the related access type is an actual in\n-         --  an instance. This ensures that the full view of designated type is\n-         --  available when inside the body of the instance.\n-         --  Is this right ???\n+         --  component types accordingly.\n \n          elsif Is_Access_Type (T)\n            and then Is_Private_Type (Designated_Type (T))\n            and then not Has_Private_View (N)\n            and then Present (Full_View (Designated_Type (T)))\n-           and then Used_As_Generic_Actual (T)\n          then\n             Switch_View (Designated_Type (T));\n "}, {"sha": "c2aa40469454013a1a99201d701cb36aabacbb5e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -10155,7 +10155,19 @@ package body Sem_Res is\n          Msg   : String) return Boolean\n       is\n       begin\n-         if not Valid then\n+         if not Valid\n+\n+            --  A generic unit has already been analyzed and we have verified\n+            --  that a particular conversion is OK in that context. Since the\n+            --  instance is reanalyzed without relying on the relationships\n+            --  established during the analysis of the generic, it is possible\n+            --  to end up with inconsistent views of private types. Do not emit\n+            --  the error message in such cases. The rest of the machinery in\n+            --  Valid_Conversion still ensures the proper compatibility of\n+            --  target and operand types.\n+\n+           and then not In_Instance\n+         then\n             Error_Msg_N (Msg, Operand);\n          end if;\n "}, {"sha": "a63a7bfd7717d62a36a5bf08486aad4725d84f4f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a190dfd4af27afb8eaf03082af81acbb5bf8a80/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0a190dfd4af27afb8eaf03082af81acbb5bf8a80", "patch": "@@ -3701,13 +3701,22 @@ package body Sem_Util is\n    function Find_Body_Discriminal\n      (Spec_Discriminant : Entity_Id) return Entity_Id\n    is\n-      pragma Assert (Is_Concurrent_Record_Type (Scope (Spec_Discriminant)));\n-\n-      Tsk  : constant Entity_Id :=\n-               Corresponding_Concurrent_Type (Scope (Spec_Discriminant));\n+      Tsk  : Entity_Id;\n       Disc : Entity_Id;\n \n    begin\n+      --  If expansion is suppressed, then the scope can be the concurrent type\n+      --  itself rather than a corresponding concurrent record type.\n+\n+      if Is_Concurrent_Type (Scope (Spec_Discriminant)) then\n+         Tsk := Scope (Spec_Discriminant);\n+\n+      else\n+         pragma Assert (Is_Concurrent_Record_Type (Scope (Spec_Discriminant)));\n+\n+         Tsk := Corresponding_Concurrent_Type (Scope (Spec_Discriminant));\n+      end if;\n+\n       --  Find discriminant of original concurrent type, and use its current\n       --  discriminal, which is the renaming within the task/protected body.\n "}]}