{"sha": "a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliODM4NGQ2ZTgzMDBiY2JjY2FlYWFlYjYwMTk4ZmMyNDAxN2E0MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-27T07:21:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-27T07:21:59Z"}, "message": "m88k.c (m88k_builtin_saveregs): Break out the constructor code to m88k_va_start, leaving only the register spill.\n\n        * m88k.c (m88k_builtin_saveregs): Break out the constructor code\n        to m88k_va_start, leaving only the register spill.\n        (m88k_build_va_list): New.\n        (m88k_va_start): New.\n        (m88k_va_arg): New.\n        * m88k.h (BUILD_VA_LIST_TYPE): New.\n        (EXPAND_BUILTIN_VA_START): New.\n        (EXPAND_BUILTIN_VA_ARG): New.\n\nFrom-SVN: r28287", "tree": {"sha": "0104165917c00ff14461729227dffaf37bfda17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0104165917c00ff14461729227dffaf37bfda17c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/comments", "author": null, "committer": null, "parents": [{"sha": "cc95be936a83c9f546c8e049272fcb7f1dc828f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc95be936a83c9f546c8e049272fcb7f1dc828f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc95be936a83c9f546c8e049272fcb7f1dc828f9"}], "stats": {"total": 242, "additions": 189, "deletions": 53}, "files": [{"sha": "3046572a71ff5be11ea58b8ebe7abfefc0428efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "patch": "@@ -1,3 +1,14 @@\n+Tue Jul 27 00:18:34 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* m88k.c (m88k_builtin_saveregs): Break out the constructor code\n+\tto m88k_va_start, leaving only the register spill.\n+\t(m88k_build_va_list): New.\n+\t(m88k_va_start): New.\n+\t(m88k_va_arg): New.\n+\t* m88k.h (BUILD_VA_LIST_TYPE): New.\n+\t(EXPAND_BUILTIN_VA_START): New.\n+\t(EXPAND_BUILTIN_VA_ARG): New.\n+\n Mon Jul 26 19:07:11 1999  Geoff Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.c (rs6000_expand_builtin_saveregs):"}, {"sha": "5d54fdd077baaae19fd76b711ad8f438b170d693", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 161, "deletions": 51, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "patch": "@@ -2574,60 +2574,34 @@ m88k_function_arg (args_so_far, mode, type, named)\n }\n \f\n /* Do what is necessary for `va_start'.  We look at the current function\n-   to determine if stdargs or varargs is used and fill in an initial\n-   va_list.  A pointer to this constructor is returned.  */\n+   to determine if stdargs or varargs is used and spill as necessary. \n+   We return a pointer to the spill area.  */\n \n struct rtx_def *\n m88k_builtin_saveregs ()\n {\n-  rtx block, addr, argsize, dest;\n+  rtx addr, dest;\n   tree fntype = TREE_TYPE (current_function_decl);\n   int argadj = ((!(TYPE_ARG_TYPES (fntype) != 0\n \t\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n \t\t       != void_type_node)))\n \t\t? -UNITS_PER_WORD : 0) + UNITS_PER_WORD - 1;\n   int fixed;\n+\n   variable_args_p = 1;\n \n+  fixed = 0;\n   if (CONSTANT_P (current_function_arg_offset_rtx))\n     {\n       fixed = (XINT (current_function_arg_offset_rtx, 0)\n \t       + argadj) / UNITS_PER_WORD;\n-      argsize = GEN_INT (fixed);\n-    }\n-  else\n-    {\n-      fixed = 0;\n-      argsize = plus_constant (current_function_arg_offset_rtx, argadj);\n-      argsize = expand_shift (RSHIFT_EXPR, Pmode, argsize,\n-\t\t\t      build_int_2 (2, 0), argsize, 0);\n     }\n \n-  /* Allocate the va_list constructor */\n-  block = assign_stack_local (BLKmode, 3 * UNITS_PER_WORD, BITS_PER_WORD);\n-  MEM_SET_IN_STRUCT_P (block, 1);\n-  RTX_UNCHANGING_P (block) = 1;\n-  RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n-\n-  /* Store the argsize as the __va_arg member.  */\n-  emit_move_insn (change_address (block, SImode, XEXP (block, 0)),\n-\t\t  argsize);\n-\n-  /* Store the arg pointer in the __va_stk member.  */\n-  emit_move_insn (change_address (block, Pmode,\n-\t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t UNITS_PER_WORD)),\n-\t\t  copy_to_reg (virtual_incoming_args_rtx));\n-\n   /* Allocate the register space, and store it as the __va_reg member.  */\n   addr = assign_stack_local (BLKmode, 8 * UNITS_PER_WORD, -1);\n-  MEM_SET_IN_STRUCT_P (addr, 1);\n+  MEM_ALIAS_SET (addr) = get_varargs_alias_set ();\n   RTX_UNCHANGING_P (addr) = 1;\n   RTX_UNCHANGING_P (XEXP (addr, 0)) = 1;\n-  emit_move_insn (change_address (block, Pmode,\n-\t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t 2 * UNITS_PER_WORD)),\n-\t\t  copy_to_reg (XEXP (addr, 0)));\n \n   /* Now store the incoming registers.  */\n   if (fixed < 8)\n@@ -2637,28 +2611,164 @@ m88k_builtin_saveregs ()\n \t\t\t\t\t    fixed * UNITS_PER_WORD));\n       move_block_from_reg (2 + fixed, dest, 8 - fixed,\n \t\t\t   UNITS_PER_WORD * (8 - fixed));\n-    }\n \n-  if (current_function_check_memory_usage)\n-    {\n-      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n-\t\t\t block, ptr_mode,\n-\t\t\t GEN_INT (3 * UNITS_PER_WORD), TYPE_MODE (sizetype),\n-\t\t\t GEN_INT (MEMORY_USE_RW),\n-\t\t\t TYPE_MODE (integer_type_node));\n-      if (fixed < 8)\n-\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n-\t\t\t   dest, ptr_mode,\n-\t\t\t   GEN_INT (UNITS_PER_WORD * (8 - fixed)),\n-\t\t\t   TYPE_MODE (sizetype),\n-\t\t\t   GEN_INT (MEMORY_USE_RW),\n-\t\t\t   TYPE_MODE (integer_type_node));\n+      if (current_function_check_memory_usage)\n+\t{\n+\t  emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n+\t\t\t     dest, ptr_mode,\n+\t\t\t     GEN_INT (UNITS_PER_WORD * (8 - fixed)),\n+\t\t\t     TYPE_MODE (sizetype),\n+\t\t\t     GEN_INT (MEMORY_USE_RW),\n+\t\t\t     TYPE_MODE (integer_type_node));\n+\t}\n     }\n \n-  /* Return the address of the va_list constructor, but don't put it in a\n-     register.  This fails when not optimizing and produces worse code when\n-     optimizing.  */\n-  return XEXP (block, 0);\n+  /* Return the address of the save area, but don't put it in a\n+     register.  This fails when not optimizing and produces worse code\n+     when optimizing.  */\n+  return XEXP (addr, 0);\n+}\n+\n+/* Define the `__builtin_va_list' type for the ABI.  */\n+\n+tree\n+m88k_build_va_list ()\n+{\n+  tree field_reg, field_stk, field_arg, int_ptr_type_node, record;\n+\n+  int_ptr_type_node = build_pointer_type (integer_type_node);\n+\n+  record = make_node (RECORD_TYPE);\n+\n+  field_arg = build_decl (FIELD_DECL, get_identifier (\"__va_arg\"),\n+\t\t\t  integer_type_node);\n+  field_stk = build_decl (FIELD_DECL, get_identifier (\"__va_stk\"),\n+\t\t\t  int_ptr_type_node);\n+  field_reg = build_decl (FIELD_DECL, get_identifier (\"__va_reg\"),\n+\t\t\t  int_ptr_type_node);\n+\n+  DECL_FIELD_CONTEXT (field_arg) = record;\n+  DECL_FIELD_CONTEXT (field_stk) = record;\n+  DECL_FIELD_CONTEXT (field_reg) = record;\n+\n+  TYPE_FIELDS (record) = field_arg;\n+  TREE_CHAIN (field_arg) = field_stk;\n+  TREE_CHAIN (field_stk) = field_reg;\n+\n+  layout_type (record);\n+  return record;\n+}\n+\n+/* Implement `va_start' for varargs and stdarg.  */\n+\n+void\n+m88k_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p;\n+     tree valist;\n+     rtx nextarg ATTRIBUTE_UNUSED;\n+{\n+  tree field_reg, field_stk, field_arg;\n+  tree reg, stk, arg, t;\n+\n+  field_arg = TYPE_FIELDS (va_list_type_node);\n+  field_stk = TREE_CHAIN (field_arg);\n+  field_reg = TREE_CHAIN (field_stk);\n+\n+  arg = build (COMPONENT_REF, TREE_TYPE (field_arg), valist, field_arg);\n+  stk = build (COMPONENT_REF, TREE_TYPE (field_stk), valist, field_stk);\n+  reg = build (COMPONENT_REF, TREE_TYPE (field_reg), valist, field_reg);\n+\n+  /* Fill in the ARG member.  */\n+  {\n+    tree fntype = TREE_TYPE (current_function_decl);\n+    int argadj = ((!(TYPE_ARG_TYPES (fntype) != 0\n+\t\t     && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n+\t\t\t != void_type_node)))\n+\t\t  ? -UNITS_PER_WORD : 0) + UNITS_PER_WORD - 1;\n+    tree argsize;\n+\n+    if (CONSTANT_P (current_function_arg_offset_rtx))\n+      {\n+\tint fixed = (INTVAL (current_function_arg_offset_rtx)\n+\t\t     + argadj) / UNITS_PER_WORD;\n+\n+\targsize = build_int_2 (fixed, 0);\n+      }\n+    else\n+      {\n+\targsize = make_tree (integer_type_node,\n+\t\t\t     current_function_arg_offset_rtx);\n+\targsize = fold (build (PLUS_EXPR, integer_type_node, argsize,\n+\t\t\t       build_int_2 (argadj, 0)));\n+\targsize = fold (build (RSHIFT_EXPR, integer_type_node, argsize,\n+\t\t\t       build_int_2 (2, 0)));\n+      }\n+\n+    t = build (MODIFY_EXPR, TREE_TYPE (arg), arg, argsize);\n+    TREE_SIDE_EFFECTS (t) = 1;\n+    expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  }\n+\n+  /* Store the arg pointer in the __va_stk member.  */\n+  t = make_tree (TREE_TYPE (stk), virtual_incoming_args_rtx);\n+  t = build (MODIFY_EXPR, TREE_TYPE (stk), stk, t);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* Tuck the return value from __builtin_saveregs into __va_reg.  */\n+  t = make_tree (TREE_TYPE (reg), expand_builtin_saveregs ());\n+  t = build (MODIFY_EXPR, TREE_TYPE (reg), reg, t);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+}\n+\n+/* Implement `va_arg'.  */\n+\n+rtx\n+m88k_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  tree field_reg, field_stk, field_arg;\n+  tree reg, stk, arg, arg_align, base, t;\n+  int size, wsize, align, reg_p;\n+  rtx addr_rtx;\n+\n+  field_arg = TYPE_FIELDS (va_list_type_node);\n+  field_stk = TREE_CHAIN (field_arg);\n+  field_reg = TREE_CHAIN (field_stk);\n+\n+  arg = build (COMPONENT_REF, TREE_TYPE (field_arg), valist, field_arg);\n+  stk = build (COMPONENT_REF, TREE_TYPE (field_stk), valist, field_stk);\n+  reg = build (COMPONENT_REF, TREE_TYPE (field_reg), valist, field_reg);\n+\n+  size = int_size_in_bytes (type);\n+  wsize = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  align = 1 << ((TYPE_ALIGN (type) / BITS_PER_UNIT) >> 3);\n+  reg_p = (AGGREGATE_TYPE_P (type)\n+\t   ? size == UNITS_PER_WORD && TYPE_ALIGN (type) == BITS_PER_WORD\n+\t   : size <= 2*UNITS_PER_WORD);\n+\n+  /* Align __va_arg to the (doubleword?) boundary above.  */\n+  t = build (PLUS_EXPR, TREE_TYPE (arg), arg, build_int_2 (align - 1, 0));\n+  arg_align = build (BIT_AND_EXPR, TREE_TYPE (t), t, build_int_2 (-align, -1));\n+  arg_align = save_expr (arg_align);\n+\n+  /* Decide if we should read from stack or regs.  */\n+  t = build (LT_EXPR, integer_type_node, arg_align, build_int_2 (8, 0));\n+  base = build (COND_EXPR, TREE_TYPE (reg), t, reg, stk);\n+\n+  /* Find the final address.  */\n+  t = build (PLUS_EXPR, TREE_TYPE (base), base, arg_align);\n+  addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n+  addr_rtx = copy_to_reg (addr_rtx);\n+\n+  /* Increment __va_arg.  */\n+  t = build (PLUS_EXPR, TREE_TYPE (arg), arg_align, build_int_2 (wsize, 0));\n+  t = build (MODIFY_EXPR, TREE_TYPE (arg), arg, t);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  return addr_rtx;\n }\n \f\n /* If cmpsi has not been generated, emit code to do the test.  Return the"}, {"sha": "2fa1c94bd8c1825857f03216d9e81626e422ecfb", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b8384d6e8300bcbccaeaaeb60198fc24017a40/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=a9b8384d6e8300bcbccaeaaeb60198fc24017a40", "patch": "@@ -198,13 +198,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"m88k, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.12 $\"\n+#define VERSION_INFO2   \"$Revision: 1.13 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.12 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.13 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1095,6 +1095,21 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    ARGLIST is the argument list; see expr.c.  */\n #define EXPAND_BUILTIN_SAVEREGS() m88k_builtin_saveregs ()\n \n+/* Define the `__builtin_va_list' type for the ABI.  */\n+#define BUILD_VA_LIST_TYPE(VALIST) \\\n+  (VALIST) = m88k_build_va_list ()\n+extern union tree_node *m88k_build_va_list ();\n+\n+/* Implement `va_start' for varargs and stdarg.  */\n+#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n+  m88k_va_start (stdarg, valist, nextarg)\n+extern void m88k_va_start ();\n+\n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  m88k_va_arg (valist, type)\n+extern struct rtx_def *m88k_va_arg ();\n+\n /* Generate the assembly code for function entry. */\n #define FUNCTION_PROLOGUE(FILE, SIZE) m88k_begin_prologue(FILE, SIZE)\n "}]}