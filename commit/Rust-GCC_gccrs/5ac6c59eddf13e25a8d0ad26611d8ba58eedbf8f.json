{"sha": "5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjNmM1OWVkZGYxM2UyNWE4ZDBhZDI2NjExZDhiYTU4ZWVkYmY4Zg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-06-24T13:41:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-06-24T13:41:40Z"}, "message": "Properly handle pointer addition/subtraction.\n\n2011-06-24  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR rtl-optimization/49504\n\t* rtlanal.c (nonzero_bits1): Properly handle addition or\n\tsubtraction a pointer in Pmode if pointers extend unsigned.\n\nFrom-SVN: r175377", "tree": {"sha": "2350453a447ab6f8f45feff8caeeb64c32acc98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2350453a447ab6f8f45feff8caeeb64c32acc98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b807e627309cb88537a127946c22abf31d358c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b807e627309cb88537a127946c22abf31d358c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b807e627309cb88537a127946c22abf31d358c51"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "3034c6433ca80fe8e2bd84872e3a12551f7142a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "patch": "@@ -1,3 +1,9 @@\n+2011-06-24  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/49504\n+\t* rtlanal.c (nonzero_bits1): Properly handle addition or\n+\tsubtraction a pointer in Pmode if pointers extend unsigned.\n+\n 2011-06-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimizations/49516"}, {"sha": "e5c045df38ec25d03a5f69c30b49fe949a89c580", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=5ac6c59eddf13e25a8d0ad26611d8ba58eedbf8f", "patch": "@@ -4134,20 +4134,6 @@ nonzero_bits1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \n \tif (result_low > 0)\n \t  nonzero &= ~(((unsigned HOST_WIDE_INT) 1 << result_low) - 1);\n-\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t/* If pointers extend unsigned and this is an addition or subtraction\n-\t   to a pointer in Pmode, all the bits above ptr_mode are known to be\n-\t   zero.  */\n-\t/* As we do not know which address space the pointer is refering to,\n-\t   we can do this only if the target does not support different pointer\n-\t   or address modes depending on the address space.  */\n-\tif (target_default_pointer_address_modes_p ()\n-\t    && POINTERS_EXTEND_UNSIGNED > 0 && GET_MODE (x) == Pmode\n-\t    && (code == PLUS || code == MINUS)\n-\t    && REG_P (XEXP (x, 0)) && REG_POINTER (XEXP (x, 0)))\n-\t  nonzero &= GET_MODE_MASK (ptr_mode);\n-#endif\n       }\n       break;\n "}]}