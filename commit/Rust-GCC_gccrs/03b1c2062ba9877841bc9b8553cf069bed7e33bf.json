{"sha": "03b1c2062ba9877841bc9b8553cf069bed7e33bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiMWMyMDYyYmE5ODc3ODQxYmM5Yjg1NTNjZjA2OWJlZDdlMzNiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-07-05T19:44:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-07-05T19:44:28Z"}, "message": "re PR c++/18681 ([DR 45] template friend declaration not recognized)\n\n        PR c++/18681\n        * friend.c (is_friend): Fix DR 45 implementation.\n\nFrom-SVN: r115208", "tree": {"sha": "05e265b45537a3c04e8ec138ba9dd7850fe1ccb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e265b45537a3c04e8ec138ba9dd7850fe1ccb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b1c2062ba9877841bc9b8553cf069bed7e33bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b1c2062ba9877841bc9b8553cf069bed7e33bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b1c2062ba9877841bc9b8553cf069bed7e33bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b1c2062ba9877841bc9b8553cf069bed7e33bf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad6d4e435e96bddcf72757a4e5df802e6c447922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6d4e435e96bddcf72757a4e5df802e6c447922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6d4e435e96bddcf72757a4e5df802e6c447922"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "b1a1cbd1459ddc99dae9fb63b0a75c0a1d4c85c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03b1c2062ba9877841bc9b8553cf069bed7e33bf", "patch": "@@ -1,3 +1,8 @@\n+2006-07-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/18681\n+\t* friend.c (is_friend): Fix DR 45 implementation.\n+\n 2006-07-05  Richard Guenther  <rguenther@suse.de>\n \tAndrew Pinski  <pinskia@gcc.gnu.org>\n "}, {"sha": "0c9712e60ca903ca2cd077dbe83a4ca633acecca", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=03b1c2062ba9877841bc9b8553cf069bed7e33bf", "patch": "@@ -78,13 +78,8 @@ is_friend (tree type, tree supplicant)\n   else\n     /* It's a type.  */\n     {\n-      /* Nested classes are implicitly friends of their enclosing types, as\n-\t per core issue 45 (this is a change from the standard).  */\n-      for (context = supplicant;\n-\t   context && TYPE_P (context);\n-\t   context = TYPE_CONTEXT (context))\n-\tif (type == context)\n-\t  return 1;\n+      if (same_type_p (supplicant, type))\n+\treturn 1;\n \n       list = CLASSTYPE_FRIEND_CLASSES (TREE_TYPE (TYPE_MAIN_DECL (type)));\n       for (; list ; list = TREE_CHAIN (list))\n@@ -98,13 +93,23 @@ is_friend (tree type, tree supplicant)\n \t}\n     }\n \n-  if (declp && DECL_FUNCTION_MEMBER_P (supplicant))\n-    context = DECL_CONTEXT (supplicant);\n-  else if (! declp)\n-    /* Local classes have the same access as the enclosing function.  */\n-    context = decl_function_context (TYPE_MAIN_DECL (supplicant));\n+  if (declp)\n+    {\n+      if (DECL_FUNCTION_MEMBER_P (supplicant))\n+\tcontext = DECL_CONTEXT (supplicant);\n+      else\n+\tcontext = NULL_TREE;\n+    }\n   else\n-    context = NULL_TREE;\n+    {\n+      if (TYPE_CLASS_SCOPE_P (supplicant))\n+\t/* Nested classes get the same access as their enclosing types, as\n+\t   per DR 45 (this is a change from the standard).  */\n+\tcontext = TYPE_CONTEXT (supplicant);\n+      else\n+\t/* Local classes have the same access as the enclosing function.  */\n+\tcontext = decl_function_context (TYPE_MAIN_DECL (supplicant));\n+    }\n \n   /* A namespace is not friend to anybody.  */\n   if (context && TREE_CODE (context) == NAMESPACE_DECL)"}, {"sha": "0682ff286bdb7f7cc2c3dfcb74fbf65066c0cdda", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=03b1c2062ba9877841bc9b8553cf069bed7e33bf", "patch": "@@ -792,8 +792,8 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n     if (protected_accessible_p (decl, TREE_VALUE (t), binfo))\n       return 1;\n \n-  /* Nested classes are implicitly friends of their enclosing types, as\n-     per core issue 45 (this is a change from the standard).  */\n+  /* Nested classes have the same access as their enclosing types, as\n+     per DR 45 (this is a change from the standard).  */\n   if (TYPE_P (scope))\n     for (t = TYPE_CONTEXT (scope); t && TYPE_P (t); t = TYPE_CONTEXT (t))\n       if (protected_accessible_p (decl, t, binfo))"}, {"sha": "fa2eccbea741940688ae67d8b76571c0b1d9ec34", "filename": "gcc/testsuite/g++.dg/lookup/friend10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b1c2062ba9877841bc9b8553cf069bed7e33bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend10.C?ref=03b1c2062ba9877841bc9b8553cf069bed7e33bf", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/18681\n+// Bug: The friend declaration in A failed to give C::D access to A::B\n+// as specified in DR 45.\n+\n+class A\n+{\n+  struct B;\n+  friend class C;\n+};\n+\n+class C\n+{\n+  struct D\n+  {\n+    void f();\n+  };\n+};\n+\n+void C::D::f()\n+{\n+  A::B* p;\n+}"}]}