{"sha": "6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3MDhhNmJjZGZkMmQ1YTIwOWMwMGRkN2I1M2U0OTIzMDRmZjUxMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2005-02-13T17:10:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-02-13T17:10:47Z"}, "message": "temporarily revert last changes\n\nFrom-SVN: r94987", "tree": {"sha": "549e3f6fc29784d6befac2152f4febd2e04f0e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549e3f6fc29784d6befac2152f4febd2e04f0e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e188dca09888ace1fd4563f196bf0cc87e644a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e188dca09888ace1fd4563f196bf0cc87e644a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e188dca09888ace1fd4563f196bf0cc87e644a8"}], "stats": {"total": 148, "additions": 21, "deletions": 127}, "files": [{"sha": "2c70f9933d70afa24e3c2d68bebfc8bd9b2d42c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "patch": "@@ -1,5 +1,7 @@\n 2005-02-13  Jason Merrill  <jason@redhat.com>\n \n+\t[reverted temporarily]\n+\n \tPR mudflap/19319\n \t* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Make return\n \tslot explicit."}, {"sha": "5d6e5c5085467247c1f9f34607c811fce47de56a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 59, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "patch": "@@ -8973,29 +8973,6 @@ fold (tree expr)\n \t\t\t     build2 (LE_EXPR, type,\n \t\t\t\t     TREE_OPERAND (arg0, 0), arg1)));\n \n-      /* Convert ABS_EXPR<x> >= 0 to true.  */\n-      else if (code == GE_EXPR\n-\t       && tree_expr_nonnegative_p (arg0)\n-\t       && ! TREE_SIDE_EFFECTS (arg0)\n-\t       && (integer_zerop (arg1)\n-\t\t   || (! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n-                       && real_zerop (arg1))))\n-\treturn constant_boolean_node (true, type);\n-\n-      /* Convert ABS_EXPR<x> < 0 to false.  */\n-      else if (code == LT_EXPR\n-\t       && tree_expr_nonnegative_p (arg0)\n-\t       && ! TREE_SIDE_EFFECTS (arg0)\n-\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n-\treturn constant_boolean_node (false, type);\n-\n-      /* Convert ABS_EXPR<x> == 0 or ABS_EXPR<x> != 0 to x == 0 or x != 0.  */\n-      else if ((code == EQ_EXPR || code == NE_EXPR)\n-\t       && TREE_CODE (arg0) == ABS_EXPR\n-\t       && ! TREE_SIDE_EFFECTS (arg0)\n-\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n-\treturn fold (build2 (code, type, TREE_OPERAND (arg0, 0), arg1));\n-\n       /* If this is an EQ or NE comparison with zero and ARG0 is\n \t (1 << foo) & bar, convert it to (bar >> foo) & 1.  Both require\n \t two operations, but the latter can be done in one less insn\n@@ -11217,21 +11194,17 @@ build_fold_addr_expr (tree t)\n   return build_fold_addr_expr_with_type (t, build_pointer_type (TREE_TYPE (t)));\n }\n \n-/* Given a pointer value T, return a simplified version of an indirection\n-   through T, or NULL_TREE if no simplification is possible.  */\n+/* Builds an expression for an indirection through T, simplifying some\n+   cases.  */\n \n-static tree\n-fold_indirect_ref_1 (tree t)\n+tree\n+build_fold_indirect_ref (tree t)\n {\n   tree type = TREE_TYPE (TREE_TYPE (t));\n   tree sub = t;\n   tree subtype;\n \n   STRIP_NOPS (sub);\n-  subtype = TREE_TYPE (sub);\n-  if (!POINTER_TYPE_P (subtype))\n-    return NULL_TREE;\n-\n   if (TREE_CODE (sub) == ADDR_EXPR)\n     {\n       tree op = TREE_OPERAND (sub, 0);\n@@ -11246,41 +11219,15 @@ fold_indirect_ref_1 (tree t)\n     }\n \n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n+  subtype = TREE_TYPE (sub);\n   if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n       && lang_hooks.types_compatible_p (type, TREE_TYPE (TREE_TYPE (subtype))))\n     {\n       sub = build_fold_indirect_ref (sub);\n       return build4 (ARRAY_REF, type, sub, size_zero_node, NULL_TREE, NULL_TREE);\n     }\n \n-  return NULL_TREE;\n-}\n-\n-/* Builds an expression for an indirection through T, simplifying some\n-   cases.  */\n-\n-tree\n-build_fold_indirect_ref (tree t)\n-{\n-  tree sub = fold_indirect_ref_1 (t);\n-\n-  if (sub)\n-    return sub;\n-  else\n-    return build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (t)), t);\n-}\n-\n-/* Given an INDIRECT_REF T, return either T or a simplified version.  */\n-\n-tree\n-fold_indirect_ref (tree t)\n-{\n-  tree sub = fold_indirect_ref_1 (TREE_OPERAND (t, 0));\n-\n-  if (sub)\n-    return sub;\n-  else\n-    return t;\n+  return build1 (INDIRECT_REF, type, t);\n }\n \n /* Strip non-trapping, non-side-effecting tree nodes from an expression"}, {"sha": "0fd39436325dfcdfc29bca9a025bd20920414bf4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 13, "deletions": 67, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "patch": "@@ -1433,15 +1433,8 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n   VARRAY_GENERIC_PTR_NOGC_INIT (stack, 10, \"stack\");\n \n   /* We can handle anything that get_inner_reference can deal with.  */\n-  for (p = expr_p; ; p = &TREE_OPERAND (*p, 0))\n-    {\n-      /* Fold INDIRECT_REFs now to turn them into ARRAY_REFs.  */\n-      if (TREE_CODE (*p) == INDIRECT_REF)\n-\t*p = fold_indirect_ref (*p);\n-      if (!handled_component_p (*p))\n-\tbreak;\n-      VARRAY_PUSH_GENERIC_PTR_NOGC (stack, *p);\n-    }\n+  for (p = expr_p; handled_component_p (*p); p = &TREE_OPERAND (*p, 0))\n+    VARRAY_PUSH_GENERIC_PTR_NOGC (stack, *p);\n \n   gcc_assert (VARRAY_ACTIVE_SIZE (stack));\n \n@@ -2852,10 +2845,16 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t     This kind of code arises in C++ when an object is bound\n \t     to a const reference, and if \"x\" is a TARGET_EXPR we want\n \t     to take advantage of the optimization below.  */\n-\t  tree t = fold_indirect_ref (*from_p);\n-\t  if (t != *from_p)\n+\t  tree pointer;\n+\n+\t  pointer = TREE_OPERAND (*from_p, 0);\n+\t  STRIP_NOPS (pointer);\n+\t  if (TREE_CODE (pointer) == ADDR_EXPR\n+\t      && (lang_hooks.types_compatible_p \n+\t\t  (TREE_TYPE (TREE_OPERAND (pointer, 0)),\n+\t\t   TREE_TYPE (*from_p))))\n \t    {\n-\t      *from_p = t;\n+\t      *from_p = TREE_OPERAND (pointer, 0); \n \t      ret = GS_OK;\n \t    }\n \t  else\n@@ -2913,55 +2912,6 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t  ret = GS_UNHANDLED;\n \tbreak;\n \n-      case CALL_EXPR:\n-\t/* For calls that return in memory, give *to_p as the CALL_EXPR's\n-\t   return slot so that we don't generate a temporary.  */\n-\tif (aggregate_value_p (*from_p, *from_p))\n-\t  {\n-\t    tree init = *from_p;\n-\t    tree fn = TREE_OPERAND (init, 0);\n-\t    tree args = TREE_OPERAND (init, 1);\n-\t    tree rettype = TREE_TYPE (TREE_TYPE (TREE_TYPE (fn)));\n-\t    tree arg = *to_p;\n-\t    tree type;\n-\n-\t    /* Only use the original target if *to_p isn't already\n-\t       addressable; if its address escapes, and the called function\n-\t       uses the NRV optimization, a conforming program could see\n-\t       *to_p change before the called function returns.  */\n-\t    bool use_temp = !is_gimple_non_addressable (*to_p);\n-\t    if (use_temp)\n-\t      {\n-\t\targ = create_tmp_var (rettype, \"ret\");\n-\t\t*from_p = arg;\n-\t      }\n-\n-\t    type = TREE_TYPE (arg);\n-\t    /* FIXME: Mark the address as not escaping.  */\n-\t    lang_hooks.mark_addressable (arg);\n-\t    arg = build1 (ADDR_EXPR, build_pointer_type (type), arg);\n-\t    /* The return type might have different cv-quals from arg.  */\n-\t    arg = convert (build_pointer_type (rettype), arg);\n-\t    args = tree_cons (NULL_TREE, arg, args);\n-\t    init = build3 (CALL_EXPR, rettype, fn, args, NULL_TREE);\n-\t    CALL_EXPR_HAS_RETURN_SLOT_ADDR (init) = 1;\n-\t    TREE_USED (init) = 1;\n-\n-\t    if (use_temp)\n-\t      gimplify_and_add (init, pre_p);\n-\t    else if (want_value)\n-\t      {\n-\t\tgimplify_and_add (init, pre_p);\n-\t\t*expr_p = *to_p;\n-\t      }\n-\t    else\n-\t      *expr_p = init;\n-\t    ret = GS_OK;\n-\t  }\n-\telse\n-\t  ret = GS_UNHANDLED;\n-\tbreak;\n-\n       default:\n \tret = GS_UNHANDLED;\n \tbreak;\n@@ -3594,7 +3544,7 @@ gimplify_target_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t  ret = GS_OK;\n           if (TREE_CODE (init) == BIND_EXPR)\n \t    gimplify_bind_expr (&init, temp, pre_p);\n-\t  if (init != temp)\n+          if (init != temp)\n \t    {\n \t      init = build (MODIFY_EXPR, void_type_node, temp, init);\n \t      ret = gimplify_expr (&init, pre_p, post_p, is_gimple_stmt,\n@@ -3845,13 +3795,9 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  recalculate_side_effects (*expr_p);\n \t  break;\n \n-\tcase INDIRECT_REF:\n-\t  *expr_p = fold_indirect_ref (*expr_p);\n-\t  if (*expr_p != save_expr)\n-\t    break;\n-\t  /* else fall through.  */\n \tcase ALIGN_INDIRECT_REF:\n \tcase MISALIGNED_INDIRECT_REF:\n+\tcase INDIRECT_REF:\n \t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n \t\t\t       is_gimple_reg, fb_rvalue);\n \t  recalculate_side_effects (*expr_p);"}, {"sha": "dea3136e009bb67ed1ec2805e1328ae8bd02aed2", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b708a6bcdfd2d5a209c00dd7b53e492304ff512/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6b708a6bcdfd2d5a209c00dd7b53e492304ff512", "patch": "@@ -3546,7 +3546,6 @@ extern tree fold_build_cleanup_point_expr (tree type, tree expr);\n extern tree fold_strip_sign_ops (tree);\n extern tree build_fold_addr_expr_with_type (tree, tree);\n extern tree build_fold_indirect_ref (tree);\n-extern tree fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);\n extern tree build_low_bits_mask (tree, unsigned);\n "}]}