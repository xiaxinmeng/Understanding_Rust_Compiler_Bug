{"sha": "0f6898f9d8c981eb70410bb9fd19d08ce1f684b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2ODk4ZjlkOGM5ODFlYjcwNDEwYmI5ZmQxOWQwOGNlMWY2ODRiOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-05T09:40:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-16T09:17:56Z"}, "message": "[Ada] Add centralized capacity check in Generic_Bignums\n\ngcc/ada/\n\n\t* libgnat/s-genbig.adb (\"**\"): Remove capacity limit check.\n\tImprove code by using an extended return.\n\t(Normalize): Perform capacity limit check here instead which is\n\tthe centralized place where (potentially large) big integers are\n\tallocated.", "tree": {"sha": "1067145f295f624c17fbdb7c058548d47e0b6d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1067145f295f624c17fbdb7c058548d47e0b6d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e06a62f5bb4baaf3701a9a29e03c80d2ae50a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e06a62f5bb4baaf3701a9a29e03c80d2ae50a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e06a62f5bb4baaf3701a9a29e03c80d2ae50a49"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "71aff9b6f6f7bf24625e15036f329c14ea67f453", "filename": "gcc/ada/libgnat/s-genbig.adb", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6898f9d8c981eb70410bb9fd19d08ce1f684b8/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-genbig.adb?ref=0f6898f9d8c981eb70410bb9fd19d08ce1f684b8", "patch": "@@ -98,6 +98,7 @@ package body System.Generic_Bignums is\n    --  Given a digit vector and sign, allocate and construct a big integer\n    --  value. Note that X may have leading zeroes which must be removed, and if\n    --  the result is zero, the sign is forced positive.\n+   --  If X is too big, Storage_Error is raised.\n \n    function \"**\" (X : Bignum; Y : SD) return Big_Integer;\n    --  Exponentiation routine where we know right operand is one word\n@@ -274,32 +275,18 @@ package body System.Generic_Bignums is\n                XY2  : aliased Big_Integer := X ** (Y / 2);\n                XY2S : aliased Big_Integer :=\n                  Big_Mul (To_Bignum (XY2), To_Bignum (XY2));\n-               Res  : Big_Integer;\n \n             begin\n                Free_Big_Integer (XY2);\n \n-               --  Raise storage error if intermediate value is getting too\n-               --  large, which we arbitrarily define as 200 words for now.\n-               --  ??? Consider putting a limit instead in a wrapper of\n-               --  Allocate_Big_Integer and update all calls to\n-               --  Allocate_Big_Integer to call this wrapper, to catch all such\n-               --  cases.\n-\n-               if To_Bignum (XY2S).Len > 200 then\n-                  Free_Big_Integer (XY2S);\n-                  raise Storage_Error with\n-                    \"exponentiation result is too large\";\n-               end if;\n-\n-               --  Otherwise take care of even/odd cases\n-\n                if (Y and 1) = 0 then\n                   return XY2S;\n                else\n-                  Res := Big_Mul (To_Bignum (XY2S), X);\n-                  Free_Big_Integer (XY2S);\n-                  return Res;\n+                  return Res : constant Big_Integer :=\n+                    Big_Mul (To_Bignum (XY2S), X)\n+                  do\n+                     Free_Big_Integer (XY2S);\n+                  end return;\n                end if;\n             end;\n       end case;\n@@ -1108,6 +1095,8 @@ package body System.Generic_Bignums is\n    -- Normalize --\n    ---------------\n \n+   Bignum_Limit : constant := 200;\n+\n    function Normalize\n      (X   : Digit_Vector;\n       Neg : Boolean := False) return Big_Integer\n@@ -1120,6 +1109,10 @@ package body System.Generic_Bignums is\n          J := J + 1;\n       end loop;\n \n+      if X'Last - J > Bignum_Limit then\n+         raise Storage_Error with \"big integer limit exceeded\";\n+      end if;\n+\n       return Allocate_Big_Integer (X (J .. X'Last), J <= X'Last and then Neg);\n    end Normalize;\n "}]}