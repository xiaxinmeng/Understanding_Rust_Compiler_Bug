{"sha": "ece46666cd43d0996769a2e97d8acef7faa94b4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlNDY2NjZjZDQzZDA5OTY3NjlhMmU5N2Q4YWNlZjdmYWE5NGI0ZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-05-23T17:49:10Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-05-23T17:49:10Z"}, "message": "match.pd: Relax some tree_nop_conversion_p\n\n2016-05-23  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (a * (1 << b), ~x & ~y, ~X ^ ~Y, (X ^ Y) ^ Y, ~ (-A),\n\t~ (A - 1), ~(~X >> Y), ~(~X >>r Y)): Relax constraints.\n\ngcc/testsuite/\n\t* gcc.dg/fold-notshift-2.c: Adjust.\n\nFrom-SVN: r236601", "tree": {"sha": "fff4a123b19c2bf2f538648f2f64ba9d9b634207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff4a123b19c2bf2f538648f2f64ba9d9b634207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece46666cd43d0996769a2e97d8acef7faa94b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece46666cd43d0996769a2e97d8acef7faa94b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece46666cd43d0996769a2e97d8acef7faa94b4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece46666cd43d0996769a2e97d8acef7faa94b4d/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb5e62d648ee35bf23639af2fda4ebadde9f1338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5e62d648ee35bf23639af2fda4ebadde9f1338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5e62d648ee35bf23639af2fda4ebadde9f1338"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "6091b6957029f8e2ee39d64a10a97df606a501f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ece46666cd43d0996769a2e97d8acef7faa94b4d", "patch": "@@ -1,3 +1,8 @@\n+2016-05-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (a * (1 << b), ~x & ~y, ~X ^ ~Y, (X ^ Y) ^ Y, ~ (-A),\n+\t~ (A - 1), ~(~X >> Y), ~(~X >>r Y)): Relax constraints.\n+\n 2016-05-23  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadbackward.c (profitable_jump_thread_path): New function"}, {"sha": "8d05e86b7bf5eb0aec5606bbb5e4169aeb4ca440", "filename": "gcc/match.pd", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ece46666cd43d0996769a2e97d8acef7faa94b4d", "patch": "@@ -454,7 +454,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n  (mult:c @0 (convert? (lshift integer_onep@1 @2)))\n   (if (! FLOAT_TYPE_P (type)\n-       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+       && (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t   || TYPE_UNSIGNED (TREE_TYPE (@1))))\n    (lshift @0 @2)))\n \n /* Fold (C1/X)*C2 into (C1*C2)/X.  */\n@@ -655,8 +656,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      rop (bit_ior bit_and)\n  (simplify\n   (op (convert1? (bit_not @0)) (convert2? (bit_not @1)))\n-  (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n-       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+  (if (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+       && element_precision (type) <= element_precision (TREE_TYPE (@1)))\n    (bit_not (rop (convert @0) (convert @1))))))\n \n /* If we are XORing or adding two BIT_AND_EXPR's, both of which are and'ing\n@@ -681,8 +682,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Convert ~X ^ ~Y to X ^ Y.  */\n (simplify\n  (bit_xor (convert1? (bit_not @0)) (convert2? (bit_not @1)))\n- (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n-      && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+ (if (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+      && element_precision (type) <= element_precision (TREE_TYPE (@1)))\n   (bit_xor (convert @0) (convert @1))))\n \n /* Convert ~X ^ C to X ^ ~C.  */\n@@ -722,8 +723,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* (X ^ Y) ^ Y -> X  */\n (simplify\n  (bit_xor:c (convert? (bit_xor:c @0 @1)) (convert? @1))\n- (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n-  (convert @0)))\n+ (convert @0))\n /* (X & Y) & (X & Z) -> (X & Y) & Z\n    (X | Y) | (X | Z) -> (X | Y) | Z  */\n (for op (bit_and bit_ior)\n@@ -915,17 +915,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Convert ~ (-A) to A - 1.  */\n (simplify\n  (bit_not (convert? (negate @0)))\n- (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+ (if (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+      || !TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (convert (minus @0 { build_each_one_cst (TREE_TYPE (@0)); }))))\n \n /* Convert ~ (A - 1) or ~ (A + -1) to -A.  */\n (simplify\n  (bit_not (convert? (minus @0 integer_each_onep)))\n- (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+ (if (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+      || !TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (convert (negate @0))))\n (simplify\n  (bit_not (convert? (plus @0 integer_all_onesp)))\n- (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+ (if (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+      || !TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (convert (negate @0))))\n \n /* Part of convert ~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify.  */\n@@ -1505,9 +1508,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n  (bit_not (convert1?:s (rshift:s (convert2?@0 (bit_not @1)) @2)))\n   (if (!TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && element_precision (TREE_TYPE (@0))\n-          <= element_precision (TREE_TYPE (@1))\n-       && element_precision (type) <= element_precision (TREE_TYPE (@0)))\n+       && (element_precision (TREE_TYPE (@0))\n+\t   <= element_precision (TREE_TYPE (@1))\n+\t   || !TYPE_UNSIGNED (TREE_TYPE (@1))))\n    (with\n     { tree shift_type = TREE_TYPE (@0); }\n      (convert (rshift (convert:shift_type @1) @2)))))\n@@ -1517,8 +1520,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for rotate (lrotate rrotate)\n  (simplify\n   (bit_not (convert1?:s (rotate:s (convert2?@0 (bit_not @1)) @2)))\n-   (if (element_precision (TREE_TYPE (@0)) <= element_precision (TREE_TYPE (@1))\n-        && element_precision (type) <= element_precision (TREE_TYPE (@0)))\n+   (if ((element_precision (TREE_TYPE (@0))\n+\t <= element_precision (TREE_TYPE (@1))\n+\t || !TYPE_UNSIGNED (TREE_TYPE (@1)))\n+        && (element_precision (type) <= element_precision (TREE_TYPE (@0))\n+\t    || !TYPE_UNSIGNED (TREE_TYPE (@0))))\n     (with\n      { tree rotate_type = TREE_TYPE (@0); }\n       (convert (rotate (convert:rotate_type @1) @2))))))"}, {"sha": "4d39198acd35a921b34abaf77be3afd5dbbc1116", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ece46666cd43d0996769a2e97d8acef7faa94b4d", "patch": "@@ -1,3 +1,7 @@\n+2016-05-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/fold-notshift-2.c: Adjust.\n+\n 2016-05-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/49859"}, {"sha": "f8aab2a005eada42aedc05dc9ecfc37c53c6863d", "filename": "gcc/testsuite/gcc.dg/fold-notshift-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-notshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece46666cd43d0996769a2e97d8acef7faa94b4d/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-notshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-notshift-2.c?ref=ece46666cd43d0996769a2e97d8acef7faa94b4d", "patch": "@@ -15,17 +15,17 @@ sl (int a, int b)\n   return ~((~a) << b);\n }\n \n-typedef __INT32_TYPE__ int32_t;\n+typedef unsigned __INT32_TYPE__ uint32_t;\n typedef __INT64_TYPE__ int64_t;\n \n int64_t\n-asr_widen1 (int32_t a, int b)\n+asr_widen1 (uint32_t a, int b)\n {\n   return ~((int64_t)(~a) >> b);\n }\n \n int64_t\n-asr_widen2 (int32_t a, int b)\n+asr_widen2 (uint32_t a, int b)\n {\n   return ~(int64_t)(~a >> b);\n }"}]}