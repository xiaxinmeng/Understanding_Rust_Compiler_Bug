{"sha": "f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhODNlZTNhOTBhNWRhNGJiYjgzZGQ0MjRlNTQwMjhiMDMzZWZiNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-09T21:47:40Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-09T21:47:40Z"}, "message": "ggc-none.c, [...] (ggc_alloc_obj): Rename it ggc_alloc, drop second argument, never clear returned memory.\n\ntoplevel:\n\t* ggc-none.c, ggc-simple.c, ggc-page.c (ggc_alloc_obj): Rename\n\tit ggc_alloc, drop second argument, never clear returned memory.\n\t* ggc-common.c (ggc_alloc_string): Use ggc_alloc.\n\t(ggc_alloc_cleared): New.\n\t* ggc.h: Prototype ggc_alloc and ggc_alloc_cleared, not\n\tggc_alloc_obj.  Remove ggc_alloc macro.\n\t(ggc_alloc_rtx, ggc_alloc_rtvec, ggc_alloc_tree): Use ggc_alloc.\n\n\t* rtl.c (rtvec_alloc): Clear the vector always.\n\t(rtx_alloc): Clear the first word always.  Remove dirty\n\tobstack tricks (this routine is no longer a bottleneck).\n\t* tree.c (make_node): Clear the new node always.\n\t(make_tree_vec): Likewise.\n\t(tree_cons): Clear the common structure always.\n\t(build1): Likewise; also, clear TREE_COMPLEXITY.\n\t* gengenrtl.c: Use puts wherever possible.  Remove extra\n\tnewlines.\n\t(gendef): Clear the first word of an RTX in the generator\n\tfunction, irrespective of ggc_p.  Initialize '0' slots to\n\tNULL.\n\t(genlegend): Don't generate obstack_alloc_rtx routine, just a\n\tthin wrapper macro around obstack_alloc.\n\n\t* stmt.c (expand_fixup): Use ggc_alloc.\n\t* c-typeck.c (add_pending_init): Use ggc_alloc.\n\t* emit-rtl.c (init_emit_once): Clear CONST_DOUBLE_CHAIN(tem).\n\t* varasm.c (immed_double_const): Set CONST_DOUBLE_MEM(r) to\n\tconst0_rtx when it is created.\n\t(immed_real_const_1): Set CONST_DOUBLE_CHAIN(r) to NULL_RTX if\n\twe are not in a function.\n\n\t* tree.c (tree_class_check_failed): Make second arg an int.\n\t* tree.h: Update prototype.\n\ncp:\n\t* call.c (add_candidate): Use ggc_alloc_cleared.\n\t* decl.c (lookup_label): Likewise.\n\t* lex.c (retrofit_lang_decl): Likewise.\n\nFrom-SVN: r34478", "tree": {"sha": "c3287938dc002562d04b768dfaa35a310e1a8fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3287938dc002562d04b768dfaa35a310e1a8fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/comments", "author": null, "committer": null, "parents": [{"sha": "fe06b6968b5d88aa4785716043233a864774f374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe06b6968b5d88aa4785716043233a864774f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe06b6968b5d88aa4785716043233a864774f374"}], "stats": {"total": 272, "additions": 139, "deletions": 133}, "files": [{"sha": "f4e9ea5692019791b0e9de112e02a692aa7c4497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -1,7 +1,43 @@\n+2000-06-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* ggc-none.c, ggc-simple.c, ggc-page.c (ggc_alloc_obj): Rename\n+\tit ggc_alloc, drop second argument, never clear returned memory.\n+\t* ggc-common.c (ggc_alloc_string): Use ggc_alloc.\n+\t(ggc_alloc_cleared): New.\n+\t* ggc.h: Prototype ggc_alloc and ggc_alloc_cleared, not\n+\tggc_alloc_obj.  Remove ggc_alloc macro.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec, ggc_alloc_tree): Use ggc_alloc.\n+\n+\t* rtl.c (rtvec_alloc): Clear the vector always.\n+\t(rtx_alloc): Clear the first word always.  Remove dirty\n+\tobstack tricks (this routine is no longer a bottleneck).\n+\t* tree.c (make_node): Clear the new node always.\n+\t(make_tree_vec): Likewise.\n+\t(tree_cons): Clear the common structure always.  \n+\t(build1): Likewise; also, clear TREE_COMPLEXITY.\n+\t* gengenrtl.c: Use puts wherever possible.  Remove extra\n+\tnewlines.\n+\t(gendef): Clear the first word of an RTX in the generator\n+\tfunction, irrespective of ggc_p.  Initialize '0' slots to\n+\tNULL.\n+\t(genlegend): Don't generate obstack_alloc_rtx routine, just a\n+\tthin wrapper macro around obstack_alloc.\n+\n+\t* stmt.c (expand_fixup): Use ggc_alloc.\n+\t* c-typeck.c (add_pending_init): Use ggc_alloc.\n+\t* emit-rtl.c (init_emit_once): Clear CONST_DOUBLE_CHAIN(tem).\n+\t* varasm.c (immed_double_const): Set CONST_DOUBLE_MEM(r) to\n+\tconst0_rtx when it is created.\n+\t(immed_real_const_1): Set CONST_DOUBLE_CHAIN(r) to NULL_RTX if\n+\twe are not in a function.\n+\n+\t* tree.c (tree_class_check_failed): Make second arg an int.\n+\t* tree.h: Update prototype.\n+\n 2000-06-09  Geoff Keating  <geoffk@cygnus.com>\n \n \t* tree.h (VOID_TYPE_P): Don't look at the TYPE_MAIN_VARIANT\n-\tof an error_type_node.\n+\tof an error_mark_node.\n \n Fri Jun  9 20:35:13 2000  Denis Chertykov  <denisc@overta.ru>\n "}, {"sha": "6f19fc4207b14c633b6d099c42cd7ca8749e0005", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -5595,7 +5595,7 @@ add_pending_init (purpose, value)\n \t}\n     }\n \n-  r = (struct init_node *) ggc_alloc_obj (sizeof (struct init_node), 0);\n+  r = (struct init_node *) ggc_alloc (sizeof (struct init_node));\n   r->purpose = purpose;\n   r->value = value;\n "}, {"sha": "1f570cc9d6e873860f765e43c518ee05013e59cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -1,3 +1,9 @@\n+2000-06-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* call.c (add_candidate): Use ggc_alloc_cleared.\n+\t* decl.c (lookup_label): Likewise.\n+\t* lex.c (retrofit_lang_decl): Likewise.\n+\n 2000-06-09  Jason Merrill  <jason@casey.soma.redhat.com>\n \n \t* semantics.c (expand_body): Push to TV_EXPAND."}, {"sha": "dcbe6c7602600f4ecd098eb3985d18b3c409e089", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -1250,7 +1250,7 @@ add_candidate (candidates, fn, convs, viable)\n      int viable;\n {\n   struct z_candidate *cand\n-    = (struct z_candidate *) ggc_alloc_obj (sizeof (struct z_candidate), 1);\n+    = (struct z_candidate *) ggc_alloc_cleared (sizeof (struct z_candidate));\n \n   cand->fn = fn;\n   cand->convs = convs;"}, {"sha": "ad53c09a07f4164d14fb804a7328e226f5fefc83", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -4832,7 +4832,7 @@ lookup_label (id)\n      We do this before calling make_label_decl so that we get the\n      IDENTIFIER_LABEL_VALUE before the new label is declared.  */\n   ent = ((struct named_label_list *)\n-\t ggc_alloc_obj (sizeof (struct named_label_list), 1));\n+\t ggc_alloc_cleared (sizeof (struct named_label_list)));\n   ent->old_value = IDENTIFIER_LABEL_VALUE (id);\n   ent->next = named_labels;\n   named_labels = ent;"}, {"sha": "a4dc2cf30b63dffa3b6ad0e716fbb93595f8330a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -4776,7 +4776,7 @@ retrofit_lang_decl (t)\n   else\n     size = sizeof (struct lang_decl_flags);\n \n-  ld = (struct lang_decl *) ggc_alloc_obj (size, 1);\n+  ld = (struct lang_decl *) ggc_alloc_cleared (size);\n \n   DECL_LANG_SPECIFIC (t) = ld;\n   if (current_lang_name == lang_name_cplusplus)"}, {"sha": "fcabed2e5283f9da4f9746d911bf18fccdefe5c2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -4125,6 +4125,7 @@ init_emit_once (line_numbers)\n \n \t  bcopy ((char *) &u, (char *) &CONST_DOUBLE_LOW (tem), sizeof u);\n \t  CONST_DOUBLE_MEM (tem) = cc0_rtx;\n+\t  CONST_DOUBLE_CHAIN (tem) = NULL_RTX;\n \t  PUT_MODE (tem, mode);\n \n \t  const_tiny_rtx[i][(int) mode] = tem;"}, {"sha": "54dccf1d0dff2ba3560f44e46ed9294575fb9f6a", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -272,7 +272,7 @@ genmacro (idx)\n     if (*p != '0')\n       printf (\", (ARG%d)\", i++);\n \n-  printf (\")\\n\");\n+  puts (\")\");\n }\n \n /* Generate the code for the function to generate RTL whose\n@@ -293,39 +293,39 @@ gendef (format)\n     if (*p != '0')\n       printf (\", arg%d\", i++);\n \n-  printf (\")\\n     RTX_CODE code;\\n     enum machine_mode mode;\\n\");\n+  puts (\")\\n     RTX_CODE code;\\n     enum machine_mode mode;\");\n   for (p = format, i = 0; *p != 0; p++)\n     if (*p != '0')\n       printf (\"     %sarg%d;\\n\", type_from_format (*p), i++);\n \n   /* Now write out the body of the function itself, which allocates\n      the memory and initializes it.  */\n-  printf (\"{\\n\");\n-  printf (\"  rtx rt;\\n\");\n-  printf (\"  if (ggc_p)\\n\");\n-  printf (\"    rt = ggc_alloc_rtx (%d);\\n\", \n-\t   (int) strlen (format));\n-  printf (\"  else\\n\");\n-  printf (\"    rt = obstack_alloc_rtx (sizeof (struct rtx_def) + %d * sizeof (rtunion));\\n\",\n-\t   (int) strlen (format) - 1);\n-\n-  printf (\"  PUT_CODE (rt, code);\\n\");\n-  printf (\"  PUT_MODE (rt, mode);\\n\");\n+  puts (\"{\");\n+  puts (\"  rtx rt;\");\n+  puts (\"  if (ggc_p)\");\n+  printf (\"    rt = ggc_alloc_rtx (%d);\\n\", (int) strlen (format));\n+  puts (\"  else\");\n+  printf (\"    rt = obstack_alloc_rtx (%d);\\n\", (int) strlen (format));\n+\n+  puts (\"  memset (rt, 0, sizeof (struct rtx_def) - sizeof (rtunion));\\n\");\n+  puts (\"  PUT_CODE (rt, code);\");\n+  puts (\"  PUT_MODE (rt, mode);\");\n \n   for (p = format, i = j = 0; *p ; ++p, ++i)\n     if (*p != '0')\n       printf (\"  %s (rt, %d) = arg%d;\\n\", accessor_from_format (*p), i, j++);\n+    else\n+      printf (\"  X0EXP (rt, %d) = NULL_RTX;\\n\", i);\n \n-  printf (\"\\n  return rt;\\n}\\n\\n\");\n+  puts (\"\\n  return rt;\\n}\\n\");\n }\n \n /* Generate the documentation header for files we write.  */\n \n static void\n genlegend ()\n {\n-  printf (\"/* Generated automatically by the program `gengenrtl'\\n\");\n-  printf (\"   from the RTL description file `rtl.def' */\\n\\n\");\n+  puts (\"/* Generated automatically by gengenrtl from rtl.def.  */\\n\");\n }\n \n /* Generate the text of the header file we make, genrtl.h.  */\n@@ -339,7 +339,7 @@ genheader ()\n   for (fmt = formats; *fmt; ++fmt)\n     gendecl (*fmt);\n \n-  printf (\"\\n\");\n+  putchar ('\\n');\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (! special_format (defs[i].format))\n@@ -353,19 +353,16 @@ gencode ()\n {\n   const char **fmt;\n \n-  puts (\"#include \\\"config.h\\\"\\n\");\n-  puts (\"#include \\\"system.h\\\"\\n\");\n-  puts (\"#include \\\"obstack.h\\\"\\n\");\n-  puts (\"#include \\\"rtl.h\\\"\\n\");\n-  puts (\"#include \\\"ggc.h\\\"\\n\\n\");\n-  puts (\"extern struct obstack *rtl_obstack;\\n\\n\");\n-  puts (\"static rtx obstack_alloc_rtx PARAMS ((int length));\\n\");\n-  puts (\"static rtx\\n\");\n-  puts (\"obstack_alloc_rtx (length)\\n\");\n-  puts (\"     register int length;\\n{\\n\");\n-  puts (\"  rtx rt = (rtx) obstack_alloc (rtl_obstack, length);\\n\\n\");\n-  puts (\"  memset(rt, 0, sizeof(struct rtx_def) - sizeof(rtunion));\\n\\n\");\n-  puts (\"  return rt;\\n}\\n\\n\");\n+  puts (\"#include \\\"config.h\\\"\");\n+  puts (\"#include \\\"system.h\\\"\");\n+  puts (\"#include \\\"obstack.h\\\"\");\n+  puts (\"#include \\\"rtl.h\\\"\");\n+  puts (\"#include \\\"ggc.h\\\"\\n\");\n+  puts (\"extern struct obstack *rtl_obstack;\\n\");\n+  puts (\"#define obstack_alloc_rtx(n)\t\t\t\t\t\\\\\");\n+  puts (\"    ((rtx) obstack_alloc (rtl_obstack,\t\t\t\t\\\\\");\n+  puts (\"\t\t\t  sizeof (struct rtx_def)\t\t\\\\\");\n+  puts (\"\t\t\t  + ((n) - 2) * sizeof (rtunion)))\\n\");\n \n   for (fmt = formats; *fmt != 0; fmt++)\n     gendef (*fmt);"}, {"sha": "fc8fb6537909f4aef0a6b03b20840277fb81a689", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -580,14 +580,24 @@ ggc_alloc_string (contents, length)\n       length = strlen (contents);\n     }\n \n-  string = (char *) ggc_alloc_obj (length + 1, 0);\n+  string = (char *) ggc_alloc (length + 1);\n   if (contents != NULL)\n     memcpy (string, contents, length);\n   string[length] = 0;\n \n   return string;\n }\n \n+/* Allocate a block of memory, then clear it.  */\n+void *\n+ggc_alloc_cleared (size)\n+     size_t size;\n+{\n+  void *buf = ggc_alloc (size);\n+  memset (buf, 0, size);\n+  return buf;\n+}\n+\n /* Print statistics that are independent of the collector in use.  */\n \n void"}, {"sha": "f006ae89a0f43cd6ba3090fa8bee15ecf6d7c3d8", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -36,12 +36,8 @@\n int ggc_p = 0;\n \n void *\n-ggc_alloc_obj (size, zero)\n+ggc_alloc (size)\n      size_t size;\n-     int zero;\n {\n-  void *p = xmalloc (size);\n-  if (zero)\n-    memset (p, 0, size);\n-  return p;\n+  return xmalloc (size);\n }"}, {"sha": "2a7e1014fd2b5a2cebb589d6ed441722baf872c5", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -611,9 +611,8 @@ static unsigned char const size_lookup[257] =\n    memory is zeroed; otherwise, its contents are undefined.  */\n \n void *\n-ggc_alloc_obj (size, zero)\n+ggc_alloc (size)\n      size_t size;\n-     int zero;\n {\n   unsigned order, word, bit, object_offset;\n   struct page_entry *entry;\n@@ -703,14 +702,11 @@ ggc_alloc_obj (size, zero)\n   result = entry->page + object_offset;\n \n #ifdef GGC_POISON\n-  /* `Poison' the entire allocated object before zeroing the requested area,\n-     so that bytes beyond the end, if any, will not necessarily be zero.  */\n+  /* `Poison' the entire allocated object, including any padding at\n+     the end.  */\n   memset (result, 0xaf, 1 << order);\n #endif\n \n-  if (zero)\n-    memset (result, 0, size);\n-\n   /* Keep track of how many bytes are being allocated.  This\n      information is used in deciding when to collect.  */\n   G.allocated += (size_t) 1 << order;"}, {"sha": "86afaf17e12b4d141315186e4a49d57e4331b198", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -182,9 +182,8 @@ tree_lookup (v)\n /* Alloc SIZE bytes of GC'able memory.  If ZERO, clear the memory.  */\n \n void *\n-ggc_alloc_obj (size, zero)\n+ggc_alloc (size)\n      size_t size;\n-     int zero;\n {\n   struct ggc_mem *x;\n \n@@ -195,11 +194,8 @@ ggc_alloc_obj (size, zero)\n   x->context = G.context;\n   x->size = size;\n \n-  if (zero)\n-    memset (&x->u, 0, size);\n #ifdef GGC_POISON\n-  else\n-    memset (&x->u, 0xaf, size);\n+  memset (&x->u, 0xaf, size);\n #endif\n \n   tree_insert (x);"}, {"sha": "81e7012dcd63643f7e58a7b92843ac6a41388fe2", "filename": "gcc/ggc.h", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -128,20 +128,19 @@ extern void ggc_pop_context PARAMS ((void));\n /* Allocation.  */\n \n /* The internal primitive.  */\n-void *ggc_alloc_obj PARAMS ((size_t, int));\n+void *ggc_alloc PARAMS ((size_t));\n+/* Like ggc_alloc, but allocates cleared memory.  */\n+void *ggc_alloc_cleared PARAMS ((size_t));\n \n-#define ggc_alloc_rtx(NSLOTS)\t\t\t\t\t\t     \\\n-  ((struct rtx_def *) ggc_alloc_obj (sizeof (struct rtx_def)\t\t     \\\n-\t\t\t\t     + ((NSLOTS) - 1) * sizeof (rtunion), 1))\n+#define ggc_alloc_rtx(NSLOTS)\t\t\t\t\t\t  \\\n+  ((struct rtx_def *) ggc_alloc (sizeof (struct rtx_def)\t\t  \\\n+\t\t\t\t + ((NSLOTS) - 1) * sizeof (rtunion)))\n \n #define ggc_alloc_rtvec(NELT)\t\t\t\t\t\t  \\\n-  ((struct rtvec_def *) ggc_alloc_obj (sizeof (struct rtvec_def)\t  \\\n-\t\t\t\t       + ((NELT) - 1) * sizeof (rtx), 1))\n+  ((struct rtvec_def *) ggc_alloc (sizeof (struct rtvec_def)\t\t  \\\n+\t\t\t\t   + ((NELT) - 1) * sizeof (rtx)))\n \n-#define ggc_alloc_tree(LENGTH)\t\t\t\t\\\n-  ((union tree_node *) ggc_alloc_obj ((LENGTH), 1))\n-\n-#define ggc_alloc(SIZE)  ggc_alloc_obj((SIZE), 0)\n+#define ggc_alloc_tree(LENGTH) ((union tree_node *) ggc_alloc (LENGTH))\n \n char *ggc_alloc_string PARAMS ((const char *contents, int length));\n "}, {"sha": "6c771f695e44ddd34a125af9c11bc688568e9a5d", "filename": "gcc/rtl.c", "status": "modified", "additions": 14, "deletions": 39, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -279,17 +279,11 @@ rtvec_alloc (n)\n   if (ggc_p)\n     rt = ggc_alloc_rtvec (n);\n   else\n-    {\n-      int i;\n-\n-      rt = (rtvec) obstack_alloc (rtl_obstack,\n-\t\t\t\t  sizeof (struct rtvec_def)\n-\t\t\t\t  + (( n - 1) * sizeof (rtx)));\n-\n-      /* clear out the vector */\n-      for (i = 0; i < n; i++)\n-\trt->elem[i] = 0;\n-    }\n+    rt = (rtvec) obstack_alloc (rtl_obstack,\n+\t\t\t\tsizeof (struct rtvec_def)\n+\t\t\t\t+ ((n - 1) * sizeof (rtx)));\n+  /* clear out the vector */\n+  memset (&rt->elem[0], 0, n * sizeof (rtx));\n \n   PUT_NUM_ELEM (rt, n);\n   return rt;\n@@ -303,39 +297,20 @@ rtx_alloc (code)\n   RTX_CODE code;\n {\n   rtx rt;\n+  int n = GET_RTX_LENGTH (code);\n \n   if (ggc_p)\n-    rt = ggc_alloc_rtx (GET_RTX_LENGTH (code));\n+    rt = ggc_alloc_rtx (n);\n   else\n-    {\n-      register struct obstack *ob = rtl_obstack;\n-      register int nelts = GET_RTX_LENGTH (code);\n-      register int length = sizeof (struct rtx_def)\n-\t+ (nelts - 1) * sizeof (rtunion);\n-\n-      /* This function is called more than any other in GCC, so we\n-\t manipulate the obstack directly.\n+    rt = (rtx) obstack_alloc (rtl_obstack,\n+\t\t\t      sizeof (struct rtx_def)\n+\t\t\t      + ((n - 1) * sizeof (rtunion)));\n \n-\t Even though rtx objects are word aligned, we may be sharing\n-\t an obstack with tree nodes, which may have to be double-word\n-\t aligned.  So align our length to the alignment mask in the\n-\t obstack.  */\n-\n-      length = (length + ob->alignment_mask) & ~ ob->alignment_mask;\n-\n-      if (ob->chunk_limit - ob->next_free < length)\n-\t_obstack_newchunk (ob, length);\n-      rt = (rtx)ob->object_base;\n-      ob->next_free += length;\n-      ob->object_base = ob->next_free;\n-\n-      /* We want to clear everything up to the FLD array.  Normally,\n-\t this is one int, but we don't want to assume that and it\n-\t isn't very portable anyway; this is.  */\n-\n-      memset (rt, 0, sizeof (struct rtx_def) - sizeof (rtunion));\n-    }\n+  /* We want to clear everything up to the FLD array.  Normally, this\n+     is one int, but we don't want to assume that and it isn't very\n+     portable anyway; this is.  */\n \n+  memset (rt, 0, sizeof (struct rtx_def) - sizeof (rtunion));\n   PUT_CODE (rt, code);\n   return rt;\n }"}, {"sha": "14ce4a9b39e71941eb6bf60f3a9da9fb369e1e80", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -1011,7 +1011,7 @@ expand_fixup (tree_label, rtl_label, last_insn)\n     {\n       /* Ok, a fixup is needed.  Add a fixup to the list of such.  */\n       struct goto_fixup *fixup\n-\t= (struct goto_fixup *) ggc_alloc_obj (sizeof (struct goto_fixup), 0);\n+\t= (struct goto_fixup *) ggc_alloc (sizeof (struct goto_fixup));\n       /* In case an old stack level is restored, make sure that comes\n \t after any pending stack adjust.  */\n       /* ?? If the fixup isn't to come at the present position,"}, {"sha": "103240302620f6a5d1e9509afe117fbfcb383b94", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -1041,10 +1041,9 @@ make_node (code)\n   if (ggc_p)\n     t = ggc_alloc_tree (length);\n   else\n-    {\n-      t = (tree) obstack_alloc (obstack, length);\n-      memset ((PTR) t, 0, length);\n-    }\n+    t = (tree) obstack_alloc (obstack, length);\n+\n+  memset ((PTR) t, 0, length);\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;\n@@ -1604,11 +1603,9 @@ make_tree_vec (len)\n   if (ggc_p)\n     t = ggc_alloc_tree (length);\n   else\n-    {\n-      t = (tree) obstack_alloc (obstack, length);\n-      bzero ((PTR) t, length);\n-    }\n+    t = (tree) obstack_alloc (obstack, length);\n \n+  memset ((PTR) t, 0, length);\n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n   TREE_SET_PERMANENT (t);\n@@ -2164,10 +2161,9 @@ tree_cons (purpose, value, chain)\n   if (ggc_p)\n     node = ggc_alloc_tree (sizeof (struct tree_list));\n   else\n-    {\n-      node = (tree) obstack_alloc (current_obstack, sizeof (struct tree_list));\n-      memset (node, 0, sizeof (struct tree_common));\n-    }\n+    node = (tree) obstack_alloc (current_obstack, sizeof (struct tree_list));\n+\n+  memset (node, 0, sizeof (struct tree_common));\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int) x_kind]++;\n@@ -3384,20 +3380,20 @@ build1 (code, type, node)\n   if (ggc_p)\n     t = ggc_alloc_tree (length);\n   else\n-    {\n-      t = (tree) obstack_alloc (obstack, length);\n-      memset ((PTR) t, 0, length);\n-    }\n+    t = (tree) obstack_alloc (obstack, length);\n+\n+  memset ((PTR) t, 0, sizeof (struct tree_common));\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;\n   tree_node_sizes[(int)kind] += length;\n #endif\n \n-  TREE_TYPE (t) = type;\n   TREE_SET_CODE (t, code);\n   TREE_SET_PERMANENT (t);\n \n+  TREE_TYPE (t) = type;\n+  TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n   if (node && first_rtl_op (code) != 0 && TREE_SIDE_EFFECTS (node))\n     TREE_SIDE_EFFECTS (t) = 1;\n@@ -5599,7 +5595,7 @@ tree_check_failed (node, code, file, line, function)\n void\n tree_class_check_failed (node, cl, file, line, function)\n      const tree node;\n-     char cl;\n+     int cl;\n      const char *file;\n      int line;\n      const char *function;"}, {"sha": "5f5488d655544ec97fa4979a657a4d88ff9b12ab", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -309,10 +309,10 @@ struct tree_common\n     __t; })\n \n extern void tree_check_failed PARAMS ((const tree, enum tree_code,\n-\t\t\t\t     const char *, int, const char *))\n+\t\t\t\t       const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n-extern void tree_class_check_failed PARAMS ((const tree, char,\n-\t\t\t\t\t   const char *, int, const char *))\n+extern void tree_class_check_failed PARAMS ((const tree, int,\n+\t\t\t\t\t     const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n \n #else /* not ENABLE_TREE_CHECKING, or not gcc */"}, {"sha": "d2da769ea4b8772d79ed6d778df089535b46522e", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a83ee3a90a5da4bbb83dd424e54028b033efb7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f8a83ee3a90a5da4bbb83dd424e54028b033efb7", "patch": "@@ -2121,7 +2121,7 @@ immed_double_const (i0, i1, mode)\n \n   push_obstacks_nochange ();\n   rtl_in_saveable_obstack ();\n-  r = gen_rtx_CONST_DOUBLE (mode, NULL_RTX, i0, i1);\n+  r = gen_rtx_CONST_DOUBLE (mode, const0_rtx, i0, i1);\n   pop_obstacks ();\n \n   /* Don't touch const_double_chain if not inside any function.  */\n@@ -2131,11 +2131,6 @@ immed_double_const (i0, i1, mode)\n       const_double_chain = r;\n     }\n \n-  /* Store const0_rtx in mem-slot since this CONST_DOUBLE is on the chain.\n-     Actual use of mem-slot is only through force_const_mem.  */\n-\n-  CONST_DOUBLE_MEM (r) = const0_rtx;\n-\n   return r;\n }\n \n@@ -2201,12 +2196,15 @@ immed_real_const_1 (d, mode)\n   PUT_MODE (r, mode);\n   bcopy ((char *) &u, (char *) &CONST_DOUBLE_LOW (r), sizeof u);\n \n-  /* Don't touch const_double_chain if not inside any function.  */\n+  /* If we aren't inside a function, don't put r on the\n+     const_double_chain.  */\n   if (current_function_decl != 0)\n     {\n       CONST_DOUBLE_CHAIN (r) = const_double_chain;\n       const_double_chain = r;\n     }\n+  else\n+    CONST_DOUBLE_CHAIN (r) = NULL_RTX;\n \n   /* Store const0_rtx in CONST_DOUBLE_MEM since this CONST_DOUBLE is on the\n      chain, but has not been allocated memory.  Actual use of CONST_DOUBLE_MEM"}]}