{"sha": "e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2ZjVmM2U1YWFkNzBkMTJjNmVhMDE5Yzk5MDI4YTRkYWY1ZGMyYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-09-09T19:19:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-09T19:19:41Z"}, "message": "re PR other/37419 (mpfr related memory corruption)\n\n\tPR other/37419\n\t* ipa-prop.h (ipa_propagate_indirect_call_infos): Change last argument\n\tto pointer to vector pointer.\n\t* ipa-prop.c (ipa_propagate_indirect_call_infos,\n\tpropagate_info_to_inlined_callees): Likewise.\n\t(update_call_notes_after_inlining): Likewise.  Push new indirect edge\n\tto *new_edges instead of new_edges.  Reread IPA_EDGE_REF after\n\tipa_check_create_edge_args.\n\t* ipa-inline.c (cgraph_decide_recursive_inlining): Change last argument\n\tto pointer to vector pointer.\n\t(cgraph_decide_inlining_of_small_function): Adjust\n\tcgraph_decide_recursive_inlining and ipa_propagate_indirect_call_infos\n\tcalls.\n\nFrom-SVN: r140168", "tree": {"sha": "ca835f110fff1af809098b873bed9ffc70011b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca835f110fff1af809098b873bed9ffc70011b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71aaa2ff33c3699b3feafc9b409f83bf8b52213c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71aaa2ff33c3699b3feafc9b409f83bf8b52213c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71aaa2ff33c3699b3feafc9b409f83bf8b52213c"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "0ac1add3c39ff3e95c3f29fa53247725a09ad908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "patch": "@@ -1,5 +1,19 @@\n 2008-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR other/37419\n+\t* ipa-prop.h (ipa_propagate_indirect_call_infos): Change last argument\n+\tto pointer to vector pointer.\n+\t* ipa-prop.c (ipa_propagate_indirect_call_infos,\n+\tpropagate_info_to_inlined_callees): Likewise.\n+\t(update_call_notes_after_inlining): Likewise.  Push new indirect edge\n+\tto *new_edges instead of new_edges.  Reread IPA_EDGE_REF after\n+\tipa_check_create_edge_args.\n+\t* ipa-inline.c (cgraph_decide_recursive_inlining): Change last argument\n+\tto pointer to vector pointer.\n+\t(cgraph_decide_inlining_of_small_function): Adjust\n+\tcgraph_decide_recursive_inlining and ipa_propagate_indirect_call_infos\n+\tcalls.\n+\n \tPR target/37438\n \t* config/i386/i386.md (zero_extendqihi2_movzbl): Enable when optimizing\n \tfor size, not speed."}, {"sha": "88566fed007d8817546b15c56eadc263b4f64bcc", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "patch": "@@ -646,11 +646,12 @@ lookup_recursive_calls (struct cgraph_node *node, struct cgraph_node *where,\n \n /* Decide on recursive inlining: in the case function has recursive calls,\n    inline until body size reaches given argument.  If any new indirect edges\n-   are discovered in the process, add them to NEW_EDGES, unless it is NULL.  */\n+   are discovered in the process, add them to *NEW_EDGES, unless NEW_EDGES\n+   is NULL.  */\n \n static bool\n cgraph_decide_recursive_inlining (struct cgraph_node *node,\n-\t\t\t\t  VEC (cgraph_edge_p, heap) *new_edges)\n+\t\t\t\t  VEC (cgraph_edge_p, heap) **new_edges)\n {\n   int limit = PARAM_VALUE (PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO);\n   int max_depth = PARAM_VALUE (PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO);\n@@ -980,7 +981,9 @@ cgraph_decide_inlining_of_small_functions (void)\n \t  where = edge->caller;\n \t  if (where->global.inlined_to)\n \t    where = where->global.inlined_to;\n-\t  if (!cgraph_decide_recursive_inlining (where, new_indirect_edges))\n+\t  if (!cgraph_decide_recursive_inlining (where,\n+\t\t\t\t\t\t flag_indirect_inlining\n+\t\t\t\t\t\t ? &new_indirect_edges : NULL))\n \t    continue;\n \t  if (flag_indirect_inlining)\n \t    add_new_edges_to_heap (heap, new_indirect_edges);\n@@ -1002,7 +1005,7 @@ cgraph_decide_inlining_of_small_functions (void)\n \t  cgraph_mark_inline_edge (edge, true);\n \t  if (flag_indirect_inlining)\n \t    {\n-\t      ipa_propagate_indirect_call_infos (edge, new_indirect_edges);\n+\t      ipa_propagate_indirect_call_infos (edge, &new_indirect_edges);\n \t      add_new_edges_to_heap (heap, new_indirect_edges);\n \t    }\n \t  update_callee_keys (heap, callee, updated_nodes);"}, {"sha": "f8b73439ed903806d6d08010e45e12aa2a0bb734", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "patch": "@@ -890,12 +890,12 @@ print_edge_addition_message (FILE *f, struct ipa_param_call_note *nt,\n /* Update the param called notes associated with NODE when CS is being inlined,\n    assuming NODE is (potentially indirectly) inlined into CS->callee.\n    Moreover, if the callee is discovered to be constant, create a new cgraph\n-   edge for it.  Newly discovered indirect edges will be added to NEW_EDGES,\n-   unless it is NULL.  */\n+   edge for it.  Newly discovered indirect edges will be added to *NEW_EDGES,\n+   unless NEW_EDGES is NULL.  */\n static void\n update_call_notes_after_inlining (struct cgraph_edge *cs,\n \t\t\t\t  struct cgraph_node *node,\n-\t\t\t\t  VEC (cgraph_edge_p, heap) *new_edges)\n+\t\t\t\t  VEC (cgraph_edge_p, heap) **new_edges)\n {\n   struct ipa_node_params *info = IPA_NODE_REF (node);\n   struct ipa_edge_args *top = IPA_EDGE_REF (cs);\n@@ -949,7 +949,8 @@ update_call_notes_after_inlining (struct cgraph_edge *cs,\n \t  new_indirect_edge->indirect_call = 1;\n \t  ipa_check_create_edge_args ();\n \t  if (new_edges)\n-\t    VEC_safe_push (cgraph_edge_p, heap, new_edges, new_indirect_edge);\n+\t    VEC_safe_push (cgraph_edge_p, heap, *new_edges, new_indirect_edge);\n+\t  top = IPA_EDGE_REF (cs);\n \t}\n     }\n }\n@@ -959,11 +960,11 @@ update_call_notes_after_inlining (struct cgraph_edge *cs,\n    update_call_notes_after_inlining on all nodes and\n    update_jump_functions_after_inlining on all non-inlined edges that lead out\n    of this subtree.  Newly discovered indirect edges will be added to\n-   NEW_EDGES, unless it is NULL.  */\n+   *NEW_EDGES, unless NEW_EDGES is NULL.  */\n static void\n propagate_info_to_inlined_callees (struct cgraph_edge *cs,\n \t\t\t\t   struct cgraph_node *node,\n-\t\t\t\t   VEC (cgraph_edge_p, heap) *new_edges)\n+\t\t\t\t   VEC (cgraph_edge_p, heap) **new_edges)\n {\n   struct cgraph_edge *e;\n \n@@ -979,10 +980,10 @@ propagate_info_to_inlined_callees (struct cgraph_edge *cs,\n /* Update jump functions and call note functions on inlining the call site CS.\n    CS is expected to lead to a node already cloned by\n    cgraph_clone_inline_nodes.  Newly discovered indirect edges will be added to\n-   NEW_EDGES, unless it is NULL.  */\n+   *NEW_EDGES, unless NEW_EDGES is NULL.  */\n void\n ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n-\t\t\t\t   VEC (cgraph_edge_p, heap) *new_edges)\n+\t\t\t\t   VEC (cgraph_edge_p, heap) **new_edges)\n {\n   propagate_info_to_inlined_callees (cs, cs->callee, new_edges);\n }"}, {"sha": "c1bc1a2003a2c6c74b7e2be78a5e925506ec0efb", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=e56f5f3e5aad70d12c6ea019c99028a4daf5dc2b", "patch": "@@ -378,7 +378,7 @@ void ipa_create_param_decls_array (struct cgraph_node *);\n void ipa_detect_param_modifications (struct cgraph_node *);\n void ipa_analyze_params_uses (struct cgraph_node *);\n void ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n-\t\t\t\t\tVEC (cgraph_edge_p, heap) *new_edges);\n+\t\t\t\t\tVEC (cgraph_edge_p, heap) **new_edges);\n \n /* Debugging interface.  */\n void ipa_print_node_params (FILE *, struct cgraph_node *node);"}]}