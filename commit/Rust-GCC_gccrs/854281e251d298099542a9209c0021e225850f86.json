{"sha": "854281e251d298099542a9209c0021e225850f86", "node_id": "C_kwDOANBUbNoAKDg1NDI4MWUyNTFkMjk4MDk5NTQyYTkyMDljMDAyMWUyMjU4NTBmODY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-09T16:30:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-10T00:01:46Z"}, "message": "Add script to generate gource\n\nThis script tries to isolate our changes to GCC minus the changes to\ngcc/config so that we can visualize our development history.", "tree": {"sha": "213b1c25fd1458c013107b3a703a661ce4b634e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213b1c25fd1458c013107b3a703a661ce4b634e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854281e251d298099542a9209c0021e225850f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854281e251d298099542a9209c0021e225850f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854281e251d298099542a9209c0021e225850f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854281e251d298099542a9209c0021e225850f86/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0024bc2f028369b871a65ceb11b2fddfb0f9c3aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "f14a2e52c6e34f77b2c58b8128efd9605472c70e", "filename": "gcc/rust/gource-gccrs.sh", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854281e251d298099542a9209c0021e225850f86/gcc%2Frust%2Fgource-gccrs.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854281e251d298099542a9209c0021e225850f86/gcc%2Frust%2Fgource-gccrs.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fgource-gccrs.sh?ref=854281e251d298099542a9209c0021e225850f86", "patch": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env bash\n+set -e\n+\n+usage() { echo \"Usage: $0 [-o output.mp4] [-r 1600x1080]\" 1>&2; }\n+\n+RESOLUTION=\"1600x1080\"\n+output=\"\"\n+while getopts ho:r: flag; do\n+    case \"${flag}\" in\n+        o)\n+            output=${OPTARG}\n+            ;;\n+        r)\n+            RESOLUTION=${OPTARG}\n+            ;;\n+        h)\n+            usage\n+            exit 0\n+            ;;\n+        *)\n+            usage\n+            exit 1\n+            ;;\n+    esac\n+done\n+\n+# we require gource and ffmpeg to generate this stuff\n+if ! [ -x \"$(command -v git)\" ]; then\n+  echo 'Error: git is not installed.' >&2\n+  exit 1\n+fi\n+if ! [ -x \"$(command -v gource)\" ]; then\n+  echo 'Error: gource is not installed.' >&2\n+  exit 1\n+fi\n+if ! [ -x \"$(command -v ffmpeg)\" ]; then\n+  echo 'Error: ffmpeg is not installed.' >&2\n+  exit 1\n+fi\n+\n+# are we in the root of the repo?\n+if [ ! -d \".git\" ]; then\n+    echo \".git directory not found, this script must be run at root repo\"\n+    exit 1\n+fi\n+\n+# if the output already exists then we should stop\n+if test -f \"$output\"; then\n+    echo \"$output already exists.\"\n+    exit 1\n+fi\n+\n+# check if .ppm exists\n+if test -f \"gource.ppm\"; then\n+    echo \"gource.ppm already exists.\"\n+    exit 1\n+fi\n+\n+# is cargo-gccrs here?\n+if [ ! -d \"cargo-gccrs\" ]; then\n+    git clone git@github.com:Rust-GCC/cargo-gccrs.git\n+fi\n+\n+# get the log file for cargo gccrs\n+pushd cargo-gccrs\n+rm -f cargo.log\n+gource --output-custom-log cargo.log .\n+sed -i -E \"s#(.+)\\|#\\1|/cargo#\" cargo.log\n+mv cargo.log ../\n+popd\n+\n+# generate the log file for gccrs\n+git log --pretty=format:user:%aN%n%ct \\\n+    --reverse \\\n+    --raw \\\n+    --encoding=UTF-8 \\\n+    --no-renames \\\n+    --no-show-signature \\\n+    -- \\\n+    .github \\\n+    Dockerfile \\\n+    *.md \\\n+    gcc/rust \\\n+    gcc/testsuite/rust \\\n+    gcc/testsuite/rust.test > gccrs-raw.log\n+gource --log-format git --output-custom-log gccrs.log - < gccrs-raw.log\n+rm -f gccrs-raw.log\n+\n+# combine them\n+combined_log=\"$(mktemp /tmp/gource.XXXXXX)\"\n+cat cargo.log gccrs.log | sort -n > \"$combined_log\"\n+rm -f gccrs.log\n+rm -f cargo.log\n+\n+echo \"Committers:\"\n+awk -F\\| {'print  $2'} < \"$combined_log\"| sort | uniq\n+echo \"======================\"\n+\n+GOURCE_RESOLUTION_ARG=\"-$RESOLUTION\"\n+GOURCE_OUTPUT_ARGS=\"\"\n+if [ -n \"$output\" ]; then\n+    GOURCE_OUTPUT_ARGS=\"--output-ppm-stream gource.ppm\"\n+fi\n+\n+# actually generate the gource\n+gource \"$combined_log\" \\\n+       --title \"GCC Rust\" \\\n+       -s 0.4 \\\n+       -i 0 \\\n+       \"$GOURCE_RESOLUTION_ARG\" \\\n+       --highlight-users \\\n+       --highlight-dirs \\\n+       --file-extensions \\\n+       --hide mouse \\\n+       --key \\\n+       --stop-at-end \\\n+       \"$GOURCE_OUTPUT_ARGS\"\n+\n+# cleanup the log\n+rm -f \"$combined_log\"\n+\n+# transcode it\n+if [ -n \"$output\" ]; then\n+    # this seems to encode at a high quality but ends up being many gb in size\n+    ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -preset ultrafast -pix_fmt yuv420p -crf 1 -threads 0 -bf 0 \"$output\"\n+fi\n+\n+echo \"crabby on film: $output\"\n+echo \"(\\/)(\u00ba\uff5e\u00ba)(\\/)\""}]}