{"sha": "3788cc1761ef491333f243e4e846c7246a3cc5bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4OGNjMTc2MWVmNDkxMzMzZjI0M2U0ZTg0NmM3MjQ2YTNjYzViYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-11-12T00:27:31Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-11-12T00:27:31Z"}, "message": "params.def (ggc-min-expand, [...]): New parameters.\n\n\t* params.def (ggc-min-expand, ggc-min-heapsize): New parameters.\n\t* doc/invoke.texi: Document them.\n\n\t* ggc-page.c: Include params.h.  Remove definitions of\n\tGGC_MIN_EXPAND_FOR_GC, GGC_MIN_LAST_ALLOCATED.  Replace\n\tGGC_POISON with ENABLE_GC_CHECKING in ifdefs, delete #define.\n\t(init_gcc): Don't set G.allocated_last_gc here.\n\t(ggc_collect): Use PARAM_VALUE (GGC_MIN_HEAPSIZE) and\n\tPARAM_VALUE (GGC_MIN_EXPAND) to decide whether or not to\n\tperform collection.\n\t* ggc-simple.c: Similarly.\n\t* Makefile.in (ggc-common.o, ggc-simple.o): Add $(PARAMS_H) to\n\tdependencies.\n\nFrom-SVN: r59034", "tree": {"sha": "81c813b5d55e959c7d6c49278a2c5c9c344cf7d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81c813b5d55e959c7d6c49278a2c5c9c344cf7d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3788cc1761ef491333f243e4e846c7246a3cc5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3788cc1761ef491333f243e4e846c7246a3cc5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3788cc1761ef491333f243e4e846c7246a3cc5bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3788cc1761ef491333f243e4e846c7246a3cc5bb/comments", "author": null, "committer": null, "parents": [{"sha": "dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd697f8c1dfd5244373ade9fd67df3e35fa807f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd697f8c1dfd5244373ade9fd67df3e35fa807f5"}], "stats": {"total": 149, "additions": 84, "deletions": 65}, "files": [{"sha": "9d7ab216bca86636ca5fdd9ed4aeeb9b09cccfb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -1,3 +1,19 @@\n+2002-11-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* params.def (ggc-min-expand, ggc-min-heapsize): New parameters.\n+\t* doc/invoke.texi: Document them.\n+\n+\t* ggc-page.c: Include params.h.  Remove definitions of\n+\tGGC_MIN_EXPAND_FOR_GC, GGC_MIN_LAST_ALLOCATED.  Replace\n+\tGGC_POISON with ENABLE_GC_CHECKING in ifdefs, delete #define.\n+\t(init_gcc): Don't set G.allocated_last_gc here.\n+\t(ggc_collect): Use PARAM_VALUE (GGC_MIN_HEAPSIZE) and\n+\tPARAM_VALUE (GGC_MIN_EXPAND) to decide whether or not to\n+\tperform collection.\n+\t* ggc-simple.c: Similarly.\n+\t* Makefile.in (ggc-common.o, ggc-simple.o): Add $(PARAMS_H) to\n+\tdependencies.\n+\n 2002-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gthr-dce.h: Fix formatting."}, {"sha": "2c43e255cd4cd6e2bec1e3491ead1bdd36eb9fff", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -1329,10 +1329,11 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) varray.h $(HASHTAB_H) \\\n \tssa.h cselib.h insn-addr.h\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\\n-\tflags.h $(GGC_H) varray.h $(HASHTAB_H) $(TM_P_H) langhooks.h\n+\tflags.h $(GGC_H) varray.h $(HASHTAB_H) $(TM_P_H) langhooks.h \\\n+\t$(PARAMS_H)\n \n ggc-simple.o: ggc-simple.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-\t$(GGC_H) varray.h $(TIMEVAR_H) $(TM_P_H)\n+\t$(GGC_H) varray.h $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H)\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n \ttoplev.h $(GGC_H) varray.h $(TIMEVAR_H) $(TM_P_H)"}, {"sha": "dc8a4363912b5750da1c00cd088a3504740952b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -4233,6 +4233,29 @@ compilation for profile feedback and one for compilation without.  The value\n for compilation with profile feedback needs to be more conservative (higher) in\n order to make tracer effective.\n \n+@item ggc-min-expand\n+\n+GCC uses a garbage collector to manage its own memory allocation.  This\n+parameter specifies the minimum percentage by which the garbage\n+collector's heap should be allowed to expand between collections.\n+Tuning this may improve compilation speed; it has no effect on code\n+generation.\n+\n+The default is 30%.  Setting this parameter to zero causes a full\n+collection to occur at every opportunity.  This is extremely slow, but\n+can be useful for debugging.\n+\n+@item ggc-min-heapsize\n+\n+Minimum size of the garbage collector's heap before it begins bothering\n+to collect garbage.  The first collection occurs after the heap expands\n+by @option{ggc-min-expand}% beyond @option{ggc-min-heapsize}.  Again,\n+tuning this may improve compilation speed, and has no effect on code\n+generation.\n+\n+The default is 4096 (four megabytes).  Setting this parameter very large\n+effectively disables garbage collection.\n+\n @end table\n @end table\n "}, {"sha": "31c646349f38e3dd91a35f8198b3b1e7d7ca65b1", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 11, "deletions": 38, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -28,6 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n+#include \"params.h\"\n \n /* Prefer MAP_ANON(YMOUS) to /dev/zero, since we don't need to keep a\n    file open.  Prefer either to valloc.  */\n@@ -88,23 +89,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    deallocated at the start of the next collection if they haven't\n    been recycled by then.  */\n \n-\n-/* Define GGC_POISON to poison memory marked unused by the collector.  */\n-#undef GGC_POISON\n-\n-/* Define GGC_ALWAYS_COLLECT to perform collection every time\n-   ggc_collect is invoked.  Otherwise, collection is performed only\n-   when a significant amount of memory has been allocated since the\n-   last collection.  */\n-#undef GGC_ALWAYS_COLLECT\n-\n-#ifdef ENABLE_GC_CHECKING\n-#define GGC_POISON\n-#endif\n-#ifdef ENABLE_GC_ALWAYS_COLLECT\n-#define GGC_ALWAYS_COLLECT\n-#endif\n-\n /* Define GGC_DEBUG_LEVEL to print debugging information.\n      0: No debugging output.\n      1: GC statistics only.\n@@ -364,16 +348,6 @@ static struct globals\n #define BITMAP_SIZE(Num_objects) \\\n   (CEIL ((Num_objects), HOST_BITS_PER_LONG) * sizeof(long))\n \n-/* Skip garbage collection if the current allocation is not at least\n-   this factor times the allocation at the end of the last collection.\n-   In other words, total allocation must expand by (this factor minus\n-   one) before collection is performed.  */\n-#define GGC_MIN_EXPAND_FOR_GC (1.3)\n-\n-/* Bound `allocated_last_gc' to 4MB, to prevent the memory expansion\n-   test from triggering too often when the heap is small.  */\n-#define GGC_MIN_LAST_ALLOCATED (4 * 1024 * 1024)\n-\n /* Allocate pages in chunks of this size, to throttle calls to memory\n    allocation routines.  The first page is used, the rest go onto the\n    free list.  This cannot be larger than HOST_BITS_PER_INT for the\n@@ -399,7 +373,7 @@ static void sweep_pages PARAMS ((void));\n static void ggc_recalculate_in_use_p PARAMS ((page_entry *));\n static void compute_inverse PARAMS ((unsigned));\n \n-#ifdef GGC_POISON\n+#ifdef ENABLE_GC_CHECKING\n static void poison_pages PARAMS ((void));\n #endif\n \n@@ -968,7 +942,7 @@ ggc_alloc (size)\n   /* Calculate the object's address.  */\n   result = entry->page + object_offset;\n \n-#ifdef GGC_POISON\n+#ifdef ENABLE_GC_CHECKING\n   /* `Poison' the entire allocated object, including any padding at\n      the end.  */\n   memset (result, 0xaf, OBJECT_SIZE (order));\n@@ -1129,8 +1103,6 @@ init_ggc ()\n   G.debug_file = stdout;\n #endif\n \n-  G.allocated_last_gc = GGC_MIN_LAST_ALLOCATED;\n-\n #ifdef USING_MMAP\n   /* StunOS has an amazing off-by-one error for the first mmap allocation\n      after fiddling with RLIMIT_STACK.  The result, as hard as it is to\n@@ -1430,7 +1402,7 @@ sweep_pages ()\n     }\n }\n \n-#ifdef GGC_POISON\n+#ifdef ENABLE_GC_CHECKING\n /* Clobber all free objects.  */\n \n static inline void\n@@ -1476,10 +1448,13 @@ ggc_collect ()\n   /* Avoid frequent unnecessary work by skipping collection if the\n      total allocations haven't expanded much since the last\n      collection.  */\n-#ifndef GGC_ALWAYS_COLLECT\n-  if (G.allocated < GGC_MIN_EXPAND_FOR_GC * G.allocated_last_gc)\n+  size_t allocated_last_gc =\n+    MAX (G.allocated_last_gc, (size_t)PARAM_VALUE (GGC_MIN_HEAPSIZE) * 1024);\n+\n+  size_t min_expand = allocated_last_gc * PARAM_VALUE (GGC_MIN_EXPAND) / 100;\n+\n+  if (G.allocated < allocated_last_gc + min_expand)\n     return;\n-#endif\n \n   timevar_push (TV_GC);\n   if (!quiet_flag)\n@@ -1496,15 +1471,13 @@ ggc_collect ()\n   clear_marks ();\n   ggc_mark_roots ();\n \n-#ifdef GGC_POISON\n+#ifdef ENABLE_GC_CHECKING\n   poison_pages ();\n #endif\n \n   sweep_pages ();\n \n   G.allocated_last_gc = G.allocated;\n-  if (G.allocated_last_gc < GGC_MIN_LAST_ALLOCATED)\n-    G.allocated_last_gc = GGC_MIN_LAST_ALLOCATED;\n \n   timevar_pop (TV_GC);\n "}, {"sha": "30b8725c0056f614303b8a99d5cb31d35c1a5d1b", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -27,30 +27,23 @@\n #include \"varray.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n+#include \"params.h\"\n \n /* Debugging flags.  */\n \n /* Zap memory before freeing to catch dangling pointers.  */\n-#define GGC_POISON\n+#undef GGC_POISON\n \n /* Collect statistics on how bushy the search tree is.  */\n #undef GGC_BALANCE\n \n-/* Perform collection every time ggc_collect is invoked.  Otherwise,\n-   collection is performed only when a significant amount of memory\n-   has been allocated since the last collection.  */\n-#undef GGC_ALWAYS_COLLECT\n-\n /* Always verify that the to-be-marked memory is collectable.  */\n #undef GGC_ALWAYS_VERIFY\n \n #ifdef ENABLE_GC_CHECKING\n #define GGC_POISON\n #define GGC_ALWAYS_VERIFY\n #endif\n-#ifdef ENABLE_GC_ALWAYS_COLLECT\n-#define GGC_ALWAYS_COLLECT\n-#endif\n \n #ifndef HOST_BITS_PER_PTR\n #define HOST_BITS_PER_PTR  HOST_BITS_PER_LONG\n@@ -115,16 +108,6 @@ static struct globals\n   int context;\n } G;\n \n-/* Skip garbage collection if the current allocation is not at least\n-   this factor times the allocation at the end of the last collection.\n-   In other words, total allocation must expand by (this factor minus\n-   one) before collection is performed.  */\n-#define GGC_MIN_EXPAND_FOR_GC (1.3)\n-\n-/* Bound `allocated_last_gc' to 4MB, to prevent the memory expansion\n-   test from triggering too often when the heap is small.  */\n-#define GGC_MIN_LAST_ALLOCATED (4 * 1024 * 1024)\n-\n /* Local function prototypes.  */\n \n static void tree_insert PARAMS ((struct ggc_mem *));\n@@ -324,10 +307,16 @@ sweep_objs (root)\n void\n ggc_collect ()\n {\n-#ifndef GGC_ALWAYS_COLLECT\n-  if (G.allocated < GGC_MIN_EXPAND_FOR_GC * G.allocated_last_gc)\n+  /* Avoid frequent unnecessary work by skipping collection if the\n+     total allocations haven't expanded much since the last\n+     collection.  */\n+  size_t allocated_last_gc =\n+    MAX (G.allocated_last_gc, (size_t)PARAM_VALUE (GGC_MIN_HEAPSIZE) * 1024);\n+\n+  size_t min_expand = allocated_last_gc * PARAM_VALUE (GGC_MIN_EXPAND) / 100;\n+\n+  if (G.allocated < allocated_last_gc + min_expand)\n     return;\n-#endif\n \n #ifdef GGC_BALANCE\n   debug_ggc_balance ();\n@@ -345,8 +334,6 @@ ggc_collect ()\n   sweep_objs (&G.root);\n \n   G.allocated_last_gc = G.allocated;\n-  if (G.allocated_last_gc < GGC_MIN_LAST_ALLOCATED)\n-    G.allocated_last_gc = GGC_MIN_LAST_ALLOCATED;\n \n   timevar_pop (TV_GC);\n \n@@ -363,7 +350,6 @@ ggc_collect ()\n void\n init_ggc ()\n {\n-  G.allocated_last_gc = GGC_MIN_LAST_ALLOCATED;\n }\n \n /* Start a new GGC context.  Memory allocated in previous contexts"}, {"sha": "f65469081fd78bf7d7555ac9c106d621534a94dd", "filename": "gcc/params.def", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cc1761ef491333f243e4e846c7246a3cc5bb/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=3788cc1761ef491333f243e4e846c7246a3cc5bb", "patch": "@@ -190,6 +190,26 @@ DEFPARAM(TRACER_MIN_BRANCH_PROBABILITY,\n \t \"Stop forward growth if the probability of best edge is less than \\\n this threshold (in percents). Used when profile feedback is not available\",\n \t 50)\n+\n+#ifdef ENABLE_GC_ALWAYS_COLLECT\n+# define GGC_MIN_EXPAND_DEFAULT 0\n+#else\n+# define GGC_MIN_EXPAND_DEFAULT 30\n+#endif\n+\n+DEFPARAM(GGC_MIN_EXPAND,\n+\t \"ggc-min-expand\",\n+\t \"Minimum heap expansion to trigger garbage collection, as \\\n+a percentage of the total size of the heap.\",\n+\t GGC_MIN_EXPAND_DEFAULT)\n+\n+#undef GGC_MIN_EXPAND_DEFAULT\n+\n+DEFPARAM(GGC_MIN_HEAPSIZE,\n+\t \"ggc-min-heapsize\",\n+\t \"Minimum heap size before we start collecting garbage, in kilobytes.\",\n+\t 4096)\n+\n /*\n Local variables:\n mode:c"}]}