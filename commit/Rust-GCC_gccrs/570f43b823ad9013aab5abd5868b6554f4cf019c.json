{"sha": "570f43b823ad9013aab5abd5868b6554f4cf019c", "node_id": "C_kwDOANBUbNoAKDU3MGY0M2I4MjNhZDkwMTNhYWI1YWJkNTg2OGI2NTU0ZjRjZjAxOWM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-27T13:26:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:13Z"}, "message": "[Ada] Do not create large objects for indefinite protected types\n\nThis plugs a small loophole in the Needs_Secondary_Stack predicate for\nsome protected types and record types containing protected components.\n\ngcc/ada/\n\n\t* sem_util.adb (Caller_Known_Size_Record): Make entry assertion\n\tmore robust and add guard for null argument.  For protected\n\ttypes, invoke Caller_Known_Size_Record on\n\tCorresponding_Record_Type.\n\t(Needs_Secondary_Stack): Likewise.", "tree": {"sha": "c810a6ef7c98545e20a9e1a41f701b811bb1e8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c810a6ef7c98545e20a9e1a41f701b811bb1e8d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/570f43b823ad9013aab5abd5868b6554f4cf019c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570f43b823ad9013aab5abd5868b6554f4cf019c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570f43b823ad9013aab5abd5868b6554f4cf019c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570f43b823ad9013aab5abd5868b6554f4cf019c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c3959a8af920616878e587e64dbd01620b87db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c3959a8af920616878e587e64dbd01620b87db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c3959a8af920616878e587e64dbd01620b87db"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "854afdf1170e8e9a76bf6d1e754c7f7d2ee299ee", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f43b823ad9013aab5abd5868b6554f4cf019c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f43b823ad9013aab5abd5868b6554f4cf019c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=570f43b823ad9013aab5abd5868b6554f4cf019c", "patch": "@@ -23305,7 +23305,7 @@ package body Sem_Util is\n       ------------------------------\n \n       function Caller_Known_Size_Record (Typ : Entity_Id) return Boolean is\n-         pragma Assert (Typ = Underlying_Type (Typ));\n+         pragma Assert (if Present (Typ) then Typ = Underlying_Type (Typ));\n \n          function Depends_On_Discriminant (Typ : Entity_Id) return Boolean;\n          --  Called for untagged record and protected types. Return True if Typ\n@@ -23342,6 +23342,14 @@ package body Sem_Util is\n          end Depends_On_Discriminant;\n \n       begin\n+         --  This is a protected type without Corresponding_Record_Type set,\n+         --  typically because expansion is disabled. The safe thing to do is\n+         --  to return True, so Needs_Secondary_Stack returns False.\n+\n+         if No (Typ) then\n+            return True;\n+         end if;\n+\n          --  First see if we have a variant part and return False if it depends\n          --  on discriminants.\n \n@@ -23367,14 +23375,18 @@ package body Sem_Util is\n                                 Underlying_Type (Etype (Comp));\n \n                begin\n-                  if Is_Record_Type (Comp_Type)\n-                        or else\n-                     Is_Protected_Type (Comp_Type)\n-                  then\n+                  if Is_Record_Type (Comp_Type) then\n                      if not Caller_Known_Size_Record (Comp_Type) then\n                         return False;\n                      end if;\n \n+                  elsif Is_Protected_Type (Comp_Type) then\n+                     if not Caller_Known_Size_Record\n+                              (Corresponding_Record_Type (Comp_Type))\n+                     then\n+                        return False;\n+                     end if;\n+\n                   elsif Is_Array_Type (Comp_Type) then\n                      if Size_Depends_On_Discriminant (Comp_Type) then\n                         return False;\n@@ -23478,7 +23490,7 @@ package body Sem_Util is\n    begin\n       --  This is a private type which is not completed yet. This can only\n       --  happen in a default expression (of a formal parameter or of a\n-      --  record component). Do not expand transient scope in this case.\n+      --  record component). The safe thing to do is to return False.\n \n       if No (Typ) then\n          return False;\n@@ -23533,12 +23545,17 @@ package body Sem_Util is\n       elsif Is_Definite_Subtype (Typ) or else Is_Task_Type (Typ) then\n          return Large_Max_Size_Mutable (Typ);\n \n-      --  Indefinite (discriminated) record or protected type\n+      --  Indefinite (discriminated) record type\n \n-      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n+      elsif Is_Record_Type (Typ) then\n          return not Caller_Known_Size_Record (Typ);\n \n-      --  Unconstrained array\n+      --  Indefinite (discriminated) protected type\n+\n+      elsif Is_Protected_Type (Typ) then\n+         return not Caller_Known_Size_Record (Corresponding_Record_Type (Typ));\n+\n+      --  Unconstrained array type\n \n       else\n          pragma Assert (Is_Array_Type (Typ) and not Is_Definite_Subtype (Typ));"}]}