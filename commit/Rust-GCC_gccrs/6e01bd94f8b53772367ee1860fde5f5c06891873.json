{"sha": "6e01bd94f8b53772367ee1860fde5f5c06891873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwMWJkOTRmOGI1Mzc3MjM2N2VlMTg2MGZkZTVmNWMwNjg5MTg3Mw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-04-02T15:39:55Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-04-02T15:39:55Z"}, "message": "tm.texi (USE_LOAD_POST_DECREMENT, [...]): Document.\n\n\t* tm.texi (USE_LOAD_POST_DECREMENT, USE_LOAD_PRE_DECREMENT,\n\tUSE_STORE_POST_DECREMENT, USE_STORE_PRE_DECREMENT): Document.\n\t(USE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Fix documentation.\n\t* rtl.h\t(USE_LOAD_POST_DECREMENT, USE_LOAD_PRE_DECREMENT,\n\tUSE_STORE_POST_DECREMENT, USE_STORE_PRE_DECREMENT,\n\tUSE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Provide default\n\tdefinition.\n\t* expr.c: (USE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Delete default\n\tdefinition.\n\nFrom-SVN: r26134", "tree": {"sha": "6f697a65ccb6286b9ce4a6e8687a4a9f20a8d2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f697a65ccb6286b9ce4a6e8687a4a9f20a8d2fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e01bd94f8b53772367ee1860fde5f5c06891873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e01bd94f8b53772367ee1860fde5f5c06891873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e01bd94f8b53772367ee1860fde5f5c06891873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e01bd94f8b53772367ee1860fde5f5c06891873/comments", "author": null, "committer": null, "parents": [{"sha": "8f0327178b2158f8c6ee5996b2bd12c7dde8dbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0327178b2158f8c6ee5996b2bd12c7dde8dbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0327178b2158f8c6ee5996b2bd12c7dde8dbe8"}], "stats": {"total": 127, "additions": 93, "deletions": 34}, "files": [{"sha": "2df336ddadff5b370a09e496e84f53bad902cbfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e01bd94f8b53772367ee1860fde5f5c06891873", "patch": "@@ -1,3 +1,20 @@\n+Sat Apr  3 11:37:20 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* tm.texi (USE_LOAD_POST_DECREMENT, USE_LOAD_PRE_DECREMENT,\n+\tUSE_STORE_POST_DECREMENT, USE_STORE_PRE_DECREMENT): Document.\n+\t(USE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n+\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Fix documentation.\n+\n+\t* rtl.h\t(USE_LOAD_POST_DECREMENT, USE_LOAD_PRE_DECREMENT,\n+\tUSE_STORE_POST_DECREMENT, USE_STORE_PRE_DECREMENT,\n+\tUSE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n+\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Provide default\n+\tdefinition.\n+\n+\t* expr.c: (USE_LOAD_POST_INCREMENT, USE_LOAD_PRE_INCREMENT,\n+\tUSE_STORE_POST_INCREMENT, USE_STORE_PRE_INCREMENT): Delete default\n+\tdefinition.\n+\n Fri Apr  2 16:03:05 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* fixinc.dgux, fixinc.interix, fixinc.irix, fixinc.ptx: Deleted."}, {"sha": "d2ebdc31b73a5f0cb0dd5278139a09b497295bbe", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6e01bd94f8b53772367ee1860fde5f5c06891873", "patch": "@@ -1402,26 +1402,6 @@ convert_modes (mode, oldmode, x, unsignedp)\n #define MOVE_MAX_PIECES   MOVE_MAX\n #endif\n \n-/* Some architectures do not have complete pre/post increment/decrement\n-   instruction sets, or only move some modes efficiently. these macros\n-   allow us to fine tune move_by_pieces for these targets. */\n-\n-#ifndef USE_LOAD_POST_INCREMENT\n-#define USE_LOAD_POST_INCREMENT(MODE)   HAVE_POST_INCREMENT\n-#endif\n-\n-#ifndef USE_LOAD_PRE_DECREMENT\n-#define USE_LOAD_PRE_DECREMENT(MODE)    HAVE_PRE_DECREMENT\n-#endif\n-\n-#ifndef USE_STORE_POST_INCREMENT\n-#define USE_STORE_POST_INCREMENT(MODE)  HAVE_POST_INCREMENT\n-#endif\n-\n-#ifndef USE_STORE_PRE_DECREMENT\n-#define USE_STORE_PRE_DECREMENT(MODE)   HAVE_PRE_DECREMENT\n-#endif\n-\n /* Generate several move instructions to copy LEN bytes\n    from block FROM to block TO.  (These are MEM rtx's with BLKmode).\n    The caller must pass FROM and TO"}, {"sha": "2661934dd18d241f2434cf9ac68c03485ba1ee3a", "filename": "gcc/rtl.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6e01bd94f8b53772367ee1860fde5f5c06891873", "patch": "@@ -755,6 +755,44 @@ extern char *note_insn_name[];\n #define HAVE_POST_DECREMENT 0\n #endif\n \n+\n+/* Some architectures do not have complete pre/post increment/decrement\n+   instruction sets, or only move some modes efficiently.  These macros\n+   allow us to tune autoincrement generation.  */\n+\n+#ifndef USE_LOAD_POST_INCREMENT\n+#define USE_LOAD_POST_INCREMENT(MODE)   HAVE_POST_INCREMENT\n+#endif\n+\n+#ifndef USE_LOAD_POST_DECREMENT\n+#define USE_LOAD_POST_DECREMENT(MODE)   HAVE_POST_DECREMENT\n+#endif\n+\n+#ifndef USE_LOAD_PRE_INCREMENT\n+#define USE_LOAD_PRE_INCREMENT(MODE)    HAVE_PRE_INCREMENT\n+#endif\n+\n+#ifndef USE_LOAD_PRE_DECREMENT\n+#define USE_LOAD_PRE_DECREMENT(MODE)    HAVE_PRE_DECREMENT\n+#endif\n+\n+#ifndef USE_STORE_POST_INCREMENT\n+#define USE_STORE_POST_INCREMENT(MODE)  HAVE_POST_INCREMENT\n+#endif\n+\n+#ifndef USE_STORE_POST_DECREMENT\n+#define USE_STORE_POST_DECREMENT(MODE)  HAVE_POST_DECREMENT\n+#endif\n+\n+#ifndef USE_STORE_PRE_INCREMENT\n+#define USE_STORE_PRE_INCREMENT(MODE)   HAVE_PRE_INCREMENT\n+#endif\n+\n+#ifndef USE_STORE_PRE_DECREMENT\n+#define USE_STORE_PRE_DECREMENT(MODE)   HAVE_PRE_DECREMENT\n+#endif\n+\n+\n /* Accessors for RANGE_INFO.  */\n /* For RANGE_{START,END} notes return the RANGE_START note.  */\n #define RANGE_INFO_NOTE_START(INSN) (XEXP (INSN, 0))"}, {"sha": "8e6797a9e7f726ef1f12b9dc32499e51b80b3f7e", "filename": "gcc/tm.texi", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e01bd94f8b53772367ee1860fde5f5c06891873/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=6e01bd94f8b53772367ee1860fde5f5c06891873", "patch": "@@ -4777,37 +4777,61 @@ If you don't define this, a reasonable default is used.\n @item MOVE_BY_PIECES_P (@var{size}, @var{alignment})\n A C expression used to determine whether @code{move_by_pieces} will be used to\n copy a chunk of memory, or whether some other block move mechanism\n-will be used. Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n+will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{MOVE_RATIO}.\n \n @findex MOVE_MAX_PIECES\n @item MOVE_MAX_PIECES\n A C expression used by @code{move_by_pieces} to determine the largest unit\n-a load or store used to copy memory is. Defaults to @code{MOVE_MAX}.\n+a load or store used to copy memory is.  Defaults to @code{MOVE_MAX}.\n \n @findex USE_LOAD_POST_INCREMENT\n @item USE_LOAD_POST_INCREMENT (@var{mode})\n-A C expression used to determine whether a load postincrement is\n-a good thing for @code{move_by_pieces} to use for a given mode. Defaults\n-to the value of @code{HAVE_POST_INCREMENT}.\n+A C expression used to determine whether a load postincrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_POST_INCREMENT}.\n+\n+@findex USE_LOAD_POST_DECREMENT\n+@item USE_LOAD_POST_DECREMENT (@var{mode})\n+A C expression used to determine whether a load postdecrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_POST_DECREMENT}.\n \n @findex USE_LOAD_PRE_INCREMENT\n @item USE_LOAD_PRE_INCREMENT (@var{mode})\n-A C expression used to determine whether a load preincrement is\n-a good thing for @code{move_by_pieces} to use for a given mode. Defaults\n-to the value of @code{HAVE_PRE_INCREMENT}.\n+A C expression used to determine whether a load preincrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_PRE_INCREMENT}.\n+\n+@findex USE_LOAD_PRE_DECREMENT\n+@item USE_LOAD_PRE_DECREMENT (@var{mode})\n+A C expression used to determine whether a load predecrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_PRE_DECREMENT}.\n \n @findex USE_STORE_POST_INCREMENT\n @item USE_STORE_POST_INCREMENT (@var{mode})\n-A C expression used to determine whether a store postincrement is\n-a good thing for @code{move_by_pieces} to use for a given mode. Defaults\n-to the value of @code{HAVE_POST_INCREMENT}.\n+A C expression used to determine whether a store postincrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_POST_INCREMENT}.\n+\n+@findex USE_STORE_POST_DECREMENT\n+@item USE_STORE_POST_DECREMENT (@var{mode})\n+A C expression used to determine whether a store postdeccrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_POST_DECREMENT}.\n \n @findex USE_STORE_PRE_INCREMENT\n @item USE_STORE_PRE_INCREMENT (@var{mode})\n-This macro is used to determine whether a store preincrement is\n-a good thing for @code{move_by_pieces} to use for a given mode. Defaults\n-to the value of @code{HAVE_PRE_INCREMENT}.\n+This macro is used to determine whether a store preincrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_PRE_INCREMENT}.\n+\n+@findex USE_STORE_PRE_DECREMENT\n+@item USE_STORE_PRE_DECREMENT (@var{mode})\n+This macro is used to determine whether a store predecrement is a good\n+thing to use for a given mode.  Defaults to the value of\n+@code{HAVE_PRE_DECREMENT}.\n \n @findex NO_FUNCTION_CSE\n @item NO_FUNCTION_CSE"}]}