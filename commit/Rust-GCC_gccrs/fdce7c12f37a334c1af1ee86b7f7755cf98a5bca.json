{"sha": "fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjZTdjMTJmMzdhMzM0YzFhZjFlZTg2YjdmNzc1NWNmOThhNWJjYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-17T17:59:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-17T17:59:24Z"}, "message": "i386.h (LEGITIMIZE_RELOAD_ADDRESS): Remove.\n\n\t* config/i386/i386.h (LEGITIMIZE_RELOAD_ADDRESS): Remove.\n\t* config/i386/i386.c (ix86_legitimize_reload_address): Ditto.\n\t* config/i386/i386-protos.h (ix86_legitimize_reload_address): Ditto.\n\nFrom-SVN: r222193", "tree": {"sha": "bb0c9740454989021f4387e46040f66eb21caa0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb0c9740454989021f4387e46040f66eb21caa0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faabf7880c81f3e7689476fe86aa35399c2219f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faabf7880c81f3e7689476fe86aa35399c2219f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faabf7880c81f3e7689476fe86aa35399c2219f1"}], "stats": {"total": 75, "additions": 6, "deletions": 69}, "files": [{"sha": "4fbb70bc07402f71a1e24036cf89b792390f4b1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "patch": "@@ -1,3 +1,9 @@\n+2015-04-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (LEGITIMIZE_RELOAD_ADDRESS): Remove.\n+\t* config/i386/i386.c (ix86_legitimize_reload_address): Ditto.\n+\t* config/i386/i386-protos.h (ix86_legitimize_reload_address): Ditto.\n+\n 2015-04-17  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \tPR target/65535"}, {"sha": "2c90c2c5ccde92a1816dff34c2372a0c81e84a91", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "patch": "@@ -67,8 +67,6 @@ extern bool ix86_expand_set_or_movmem (rtx, rtx, rtx, rtx, rtx, rtx,\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern bool legitimate_pic_address_disp_p (rtx);\n-extern bool ix86_legitimize_reload_address (rtx, machine_mode,\n-\t\t\t\t\t    int, int, int);\n extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n "}, {"sha": "da6918624afaf1dfab821891f8a883bf0b700971", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "patch": "@@ -13320,62 +13320,6 @@ legitimate_pic_address_disp_p (rtx disp)\n   return false;\n }\n \n-/* Our implementation of LEGITIMIZE_RELOAD_ADDRESS.  Returns a value to\n-   replace the input X, or the original X if no replacement is called for.\n-   The output parameter *WIN is 1 if the calling macro should goto WIN,\n-   0 if it should not.  */\n-\n-bool\n-ix86_legitimize_reload_address (rtx x, machine_mode, int opnum, int type,\n-\t\t\t       \tint)\n-{\n-  /* Reload can generate:\n-\n-     (plus:DI (plus:DI (unspec:DI [(const_int 0 [0])] UNSPEC_TP)\n-\t\t       (reg:DI 97))\n-\t      (reg:DI 2 cx))\n-\n-     This RTX is rejected from ix86_legitimate_address_p due to\n-     non-strictness of base register 97.  Following this rejection, \n-     reload pushes all three components into separate registers,\n-     creating invalid memory address RTX.\n-\n-     Following code reloads only the invalid part of the\n-     memory address RTX.  */\n-\n-  if (GET_CODE (x) == PLUS\n-      && REG_P (XEXP (x, 1))\n-      && GET_CODE (XEXP (x, 0)) == PLUS\n-      && REG_P (XEXP (XEXP (x, 0), 1)))\n-    {\n-      rtx base, index;\n-      bool something_reloaded = false;\n-\n-      base = XEXP (XEXP (x, 0), 1);      \n-      if (!REG_OK_FOR_BASE_STRICT_P (base))\n-\t{\n-\t  push_reload (base, NULL_RTX, &XEXP (XEXP (x, 0), 1), NULL,\n-\t\t       BASE_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n-\t\t       opnum, (enum reload_type) type);\n-\t  something_reloaded = true;\n-\t}\n-\n-      index = XEXP (x, 1);\n-      if (!REG_OK_FOR_INDEX_STRICT_P (index))\n-\t{\n-\t  push_reload (index, NULL_RTX, &XEXP (x, 1), NULL,\n-\t\t       INDEX_REG_CLASS, GET_MODE (x), VOIDmode, 0, 0,\n-\t\t       opnum, (enum reload_type) type);\n-\t  something_reloaded = true;\n-\t}\n-\n-      gcc_assert (something_reloaded);\n-      return true;\n-    }\n-\n-  return false;\n-}\n-\n /* Determine if op is suitable RTX for an address register.\n    Return naked register if a register or a register subreg is\n    found, otherwise return NULL_RTX.  */"}, {"sha": "fa2e6c26a0cdcd8822dfae88b6ed921212b46fe9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "patch": "@@ -1830,17 +1830,6 @@ typedef struct ix86_args {\n \n #define CONSTANT_ADDRESS_P(X)  constant_address_p (X)\n \n-/* Try a machine-dependent way of reloading an illegitimate address\n-   operand.  If we find one, push the reload and jump to WIN.  This\n-   macro is used in only one place: `find_reloads_address' in reload.c.  */\n-\n-#define LEGITIMIZE_RELOAD_ADDRESS(X, MODE, OPNUM, TYPE, INDL, WIN)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (ix86_legitimize_reload_address ((X), (MODE), (OPNUM),\t\t\\\n-\t\t\t\t      (int)(TYPE), (INDL)))\t\t\\\n-    goto WIN;\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n /* If defined, a C expression to determine the base term of address X.\n    This macro is used in only one place: `find_base_term' in alias.c.\n "}]}