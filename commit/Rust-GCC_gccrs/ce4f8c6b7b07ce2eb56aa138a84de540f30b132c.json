{"sha": "ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0ZjhjNmI3YjA3Y2UyZWI1NmFhMTM4YTg0ZGU1NDBmMzBiMTMyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-19T04:00:59Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-19T04:00:59Z"}, "message": "testsuite_performance.h (time_counter): New.\n\n\n2003-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/testsuite_performance.h (time_counter): New.\n\t(resource_counter): New.\n\t(report_performance): New.\n\t(start_counters): New.\n\t(stop_counters): New.\n\t(clear_counters): New.\n\t* testsuite/performance/allocator.cc: Instrument.\n\t* testsuite/performance/cout_insert_int.cc: Same.\n\t* testsuite/performance/complex_norm.cc: Same.\n\t* testsuite/performance/filebuf_sputc.cc: New.\n\t* testsuite/performance/fstream_seek_write.cc: Same.\n\t* testsuite/performance/ifstream_getline.cc: Same.\n\t* testsuite/performance/map_create_fill.cc: Same.\n\t* testsuite/performance/ofstream_insert_float.cc: Same.\n\t* testsuite/performance/ofstream_insert_int.cc: Same.\n\t* testsuite/performance/string_append.cc: Convert.\n\t* scripts/check_performance: New.\n\t* testsuite/Makefile.am (check-performance): New.\n\t(CLEANFILES): Add.\n\nFrom-SVN: r68175", "tree": {"sha": "5fb5e827f14d1e3b023cb8539f22b20c7c5bf70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb5e827f14d1e3b023cb8539f22b20c7c5bf70c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/comments", "author": null, "committer": null, "parents": [{"sha": "3a978d72e699a1410ba46ca7630d6733e9420a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a978d72e699a1410ba46ca7630d6733e9420a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a978d72e699a1410ba46ca7630d6733e9420a50"}], "stats": {"total": 752, "additions": 672, "deletions": 80}, "files": [{"sha": "2c7df3300b93cb91c4fff83de9cb9800dbdced8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -1,3 +1,25 @@\n+2003-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/testsuite_performance.h (time_counter): New.\n+\t(resource_counter): New.\n+\t(report_performance): New.\n+\t(start_counters): New.\n+\t(stop_counters): New.\n+\t(clear_counters): New.\t\n+\t* testsuite/performance/allocator.cc: Instrument.\n+\t* testsuite/performance/cout_insert_int.cc: Same.\n+\t* testsuite/performance/complex_norm.cc: Same.\n+\t* testsuite/performance/filebuf_sputc.cc: New.\n+\t* testsuite/performance/fstream_seek_write.cc: Same.\n+\t* testsuite/performance/ifstream_getline.cc: Same.\n+\t* testsuite/performance/map_create_fill.cc: Same.\n+\t* testsuite/performance/ofstream_insert_float.cc: Same.\n+\t* testsuite/performance/ofstream_insert_int.cc: Same.\n+\t* testsuite/performance/string_append.cc: Convert.\t\n+\t* scripts/check_performance: New.\n+\t* testsuite/Makefile.am (check-performance): New.\n+\t(CLEANFILES): Add.\n+\t\n 2003-06-18  Paolo Carlini  <pcarlini@unitus.it>\n             Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "5fdf5817505aa0ed588e432b8e07bf60ba513de2", "filename": "libstdc++-v3/scripts/check_performance", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env bash\n+\n+# Script to do performance testing.\n+\n+# Invocation \n+# check_performance SRC_DIR BUILD_DIR\n+\n+# 1: variables\n+#\n+SRC_DIR=$1\n+BUILD_DIR=$2\n+\n+# Now that we've successfully translated the numerical option into\n+# a symbolic one, we can safely ignore it.\n+shift\n+\n+# This has been true all along.  Found out about it the hard way...\n+case $BASH_VERSION in\n+    1*)  \n+\techo 'You need bash 2.x to run check_performance.  Exiting.'; \n+\texit 1 ;;\n+    *)   ;;  \n+esac\n+\n+flags_script=$BUILD_DIR/scripts/testsuite_flags\n+INCLUDES=`$flags_script --build-includes`\n+FLAGS=`$flags_script --cxxflags`\n+COMPILER=`$flags_script --build-cxx`\n+SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc \\\n+         -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n+ST_FLAG=\"-static\"\n+LINK=$SH_FLAG\n+CXX=\"$COMPILER $INCLUDES $FLAGS $LINK\"\n+\n+\n+TESTS_FILE=\"testsuite_files_performance\"\n+\n+for NAME in `cat $TESTS_FILE`\n+do\n+  echo $NAME\n+  FILE_NAME=\"`basename $NAME`\"\n+  EXE_NAME=\"`echo $FILE_NAME | sed 's/cc$/exe/'`\"\n+  $CXX $SRC_DIR/testsuite/$NAME -o $EXE_NAME\n+  ./$EXE_NAME\n+  echo \"\"\n+done\n+\n+exit 0"}, {"sha": "218261b146642e09372b56aff8a172bd7c8b6475", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -125,31 +125,31 @@ check-abi-verbose:\n endif\n \n \n-# These two special 'check-script' rules use the bash script 'check'\n-# to do testing. This script is not as portable as the dejagnu test\n-# harness, and is thus off by default. It does produce interesting\n-# output however, including various performance analysis items like\n-# compile time, execution time, and binary size.\n-check_survey = ${glibcpp_builddir}/scripts/check_survey\n-check-script: ${check_survey}\n-\t-@(chmod + ${check_survey}; \\\n-\t  ${check_survey} 0)\n+# These two special 'check-script' rules use the bash script\n+# 'check_survey' to do testing. This script is not as portable as the\n+# dejagnu test harness, and is thus off by default. It does produce\n+# interesting output however, including various performance analysis\n+# items like compile time, execution time, and binary size.\n+survey_script = ${glibcpp_builddir}/scripts/check_survey\n+check-script: ${survey_script}\n+\t-@(chmod + ${survey_script}; \\\n+\t  ${survey_script} 0)\n \n-check-script-install: ${check_survey}\n-\t-@(chmod + ${check_survey}; \\\n-\t  ${check_survey} 0)\n+check-script-install: ${survey_script}\n+\t-@(chmod + ${survey_script}; \\\n+\t  ${survey_script} 0)\n \n \n # Runs the testsuite/performance tests.  \n # Some of these tests create large (~75MB) files, allocate huge\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n-check_performance=${glibcpp_srcdir}/scripts/check_performance\n-check-performance: ${check_performance}\n-\t-@(chmod + ${check_performance}; \\\n-\t  ${check_performance} ${glibcpp_srcdir} ${glibcpp_builddir})\n+performance_script=${glibcpp_srcdir}/scripts/check_performance\n+check-performance: ${performance_script}\n+\t-@(chmod + ${performance_script}; \\\n+\t  ${performance_script} ${glibcpp_srcdir} ${glibcpp_builddir})\n \n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols\n+\t     testsuite_* site.exp abi_check baseline_symbols *.performance"}, {"sha": "ecec0e72ac699f3aaf569698de50b970d9a12971", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -181,24 +181,24 @@ abi_check_SOURCES = abi_check.cc\n \n baseline_dir = @baseline_dir@\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n-extract_symvers = @glibcpp_srcdir@/scripts/extract_symvers\n+extract_symvers = @glibcpp_srcdir@/config/abi/extract_symvers\n \n-# These two special 'check-script' rules use the bash script 'check'\n-# to do testing. This script is not as portable as the dejagnu test\n-# harness, and is thus off by default. It does produce interesting\n-# output however, including various performance analysis items like\n-# compile time, execution time, and binary size.\n-check_survey = ${glibcpp_builddir}/scripts/check_survey\n+# These two special 'check-script' rules use the bash script\n+# 'check_survey' to do testing. This script is not as portable as the\n+# dejagnu test harness, and is thus off by default. It does produce\n+# interesting output however, including various performance analysis\n+# items like compile time, execution time, and binary size.\n+survey_script = ${glibcpp_builddir}/scripts/check_survey\n \n # Runs the testsuite/performance tests.  \n # Some of these tests create large (~75MB) files, allocate huge\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n-check_performance = ${glibcpp_srcdir}/scripts/check_performance\n+performance_script = ${glibcpp_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols\n+\t     testsuite_* site.exp abi_check baseline_symbols *.performance\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -527,16 +527,16 @@ new-abi-baseline:\n @GLIBCPP_TEST_ABI_TRUE@\t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file})\n @GLIBCPP_TEST_ABI_FALSE@check-abi:\n @GLIBCPP_TEST_ABI_FALSE@check-abi-verbose:\n-check-script: ${check_survey}\n-\t-@(chmod + ${check_survey}; \\\n-\t  ${check_survey} 0)\n-\n-check-script-install: ${check_survey}\n-\t-@(chmod + ${check_survey}; \\\n-\t  ${check_survey} 0)\n-check-performance: ${check_performance}\n-\t-@(chmod + ${check_performance}; \\\n-\t  ${check_performance} ${glibcpp_srcdir} ${glibcpp_builddir})\n+check-script: ${survey_script}\n+\t-@(chmod + ${survey_script}; \\\n+\t  ${survey_script} 0)\n+\n+check-script-install: ${survey_script}\n+\t-@(chmod + ${survey_script}; \\\n+\t  ${survey_script} 0)\n+check-performance: ${performance_script}\n+\t-@(chmod + ${performance_script}; \\\n+\t  ${performance_script} ${glibcpp_srcdir} ${glibcpp_builddir})\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "42997e952ca3ccdf19a02583be06ae74a98483b6", "filename": "libstdc++-v3/testsuite/performance/allocator.cc", "status": "modified", "additions": 185, "deletions": 7, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -25,15 +25,193 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <list>\n+/*\n+ * \n+ *\n+ * The goal with this application is to compare the performance\n+ * between different STL allocators relative to the default\n+ * __pool_alloc.\n+ *\n+ * The container used for the tests is vector, which as stated by\n+ * SGI \"Vector is the simplest of the STL container classes, and in \n+ * many cases the most efficient.\".\n+ *\n+ * NOTE! The vector<> container does some \"caching\" of it's own and\n+ * therefore we redeclare the variable in each iteration (forcing the\n+ * const/destr to be called and thus free memory).\n+ *\n+ * NOTE! The usage of gettimeofday is unwanted since it's not POSIX,\n+ * however I have not found a more generic system call to use - \n+ * ideas are greatly appriciated!\n+ *\n+ * NOTE! This version only does operations on vector<int>. More/other\n+ * data types should maybe also be tested - ideas are always welcome!\n+ *\n+ * I assume that glibc/underlying malloc() implementation has been\n+ * compiled with -O2 thus should this application also be compiled\n+ * with -O2 in order to get relevant results.\n+ */\n+\n+// 2003-02-05 Stefan Olsson <stefan@snon.net>\n+\n+#include <vector>\n+#include <sys/time.h>\n+#include <ext/mt_allocator.h>\n+#include <ext/malloc_allocator.h>\n+#include <testsuite_performance.h>\n+\n+using namespace std;\n+using __gnu_cxx::__malloc_alloc;\n+using __gnu_cxx::__mt_alloc;\n+\n+/*\n+ * In order to avoid that the time it takes for the application to \n+ * startup/shutdown affect the end result, we define a target \n+ * duration (in seconds) for which all tests should run.\n+ * Each test is responsible for \"calibrating\" their # of iterations \n+ * to come as close as possible to this target based on the time\n+ * it takes to complete the test using the default __pool_alloc.\n+ */\n+int target_run_time = 10;\n+\n+/*\n+ * The number of iterations to be performed in order to figure out\n+ * the \"speed\" of this computer and adjust the number of iterations\n+ * needed to come close to target_run_time.\n+ */\n+int calibrate_iterations = 100000;\n+\n+/*\n+ * The number of values to insert in the vector, 32 will cause \n+ * 5 (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n+ * This means that all allocations are within _MAX_BYTES = 128\n+ * as defined in stl_alloc.h for __pool_alloc.\n+ * Whether or not this value is relevant in \"the real world\" \n+ * or not I don't know and should probably be investigated in \n+ * more detail.\n+ */\n+int insert_values = 32;\n+\n+static struct timeval _tstart, _tend;\n+static struct timezone tz;\n+\n+void\n+tstart(void)\n+{\n+  gettimeofday(&_tstart, &tz);\n+}\n+\n+void\n+tend(void)\n+{\n+  gettimeofday(&_tend, &tz);\n+}\n+\n+double\n+tval()\n+{\n+  double t1, t2;\n+\n+  t1 =(double)_tstart.tv_sec +(double)_tstart.tv_usec/(1000*1000);\n+  t2 =(double)_tend.tv_sec +(double)_tend.tv_usec/(1000*1000);\n+  return t2 - t1;\n+}\n+\n+int\n+calibrate_test_ints(void)\n+{\n+  tstart();\n+  for (int i = 0; i < calibrate_iterations; i++)\n+  {\n+    vector<int> v1;\n+\n+    for(int j = 0; j < insert_values; j++)\n+      v1.push_back(1);\n+  }\n+  tend();\n+\n+  return(int)((double)target_run_time / tval()) * calibrate_iterations;\n+}\n+\n+double\n+test_ints_pool_alloc(int iterations)\n+{\n+  tstart();\n+  for(int i = 0; i < iterations; i++)\n+  {\n+    vector<int> v1;\n+\n+    for(int j = 0; j < insert_values; j++)\n+      v1.push_back(1);\n+  }\n+  tend();\n+\n+  return tval();\n+}\n+\n+double\n+test_ints_malloc_alloc(int iterations)\n+{\n+  tstart();\n+  for(int i = 0; i < iterations; i++)\n+  {\n+    vector<int, __malloc_alloc<0> > v1;\n+\n+    for(int j = 0; j < insert_values; j++)\n+    {\n+      v1.push_back(1);\n+    }\n+  }\n+  tend();\n+\n+  return tval();\n+}\n+\n+double\n+test_ints_mt_alloc(int iterations)\n+{\n+  tstart();\n+  for(int i = 0; i < iterations; i++)\n+  {\n+    vector<int, __mt_alloc<0> > v1;\n+\n+    for(int j = 0; j < insert_values; j++)\n+    {\n+      v1.push_back(1);\n+    }\n+  }\n+  tend();\n+\n+  return tval();\n+}\n \n-// Primarily a test of the default allocator.\n // http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\n-int main ()\n+// http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n+int main(void)\n {\n-  std::list<int> List;\n-  for (int i = 0; i < 10000000; ++i )\n-    List.push_back( int() );\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  int iterations = calibrate_test_ints();\n+\n+  start_counters(time, resource);\n+  test_ints_pool_alloc(iterations);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"default\", time, resource);\n+  clear_counters(time, resource);\n+\n+  start_counters(time, resource);\n+  test_ints_malloc_alloc(iterations);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"malloc\", time, resource);\n+  clear_counters(time, resource);\n+\n+  start_counters(time, resource);\n+  test_ints_mt_alloc(iterations);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"mt\", time, resource);\n+\n   return 0;\n }\n-"}, {"sha": "952e727ba56a0967dad67c25c938ca6fb39920ae", "filename": "libstdc++-v3/testsuite/performance/complex_norm.cc", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcomplex_norm.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,34 +26,58 @@\n // the GNU General Public License.\n \n #include <complex>\n+#include <testsuite_performance.h>\n \n // based on libstdc++/5730, use --fast-math\n int main()\n {\n-  typedef std::complex<double> complex_type;\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 2000;\n+\n+  typedef complex<double> complex_type;\n   complex_type u[2048];\n \n   for (int i = 0; i < 2048; ++i)\n     u[i] = 1.0;\n \n-  for (int i = 0; i < 2000; ++i) \n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i) \n     {\n       complex_type * p = u;\n       for (int j = 0; j < 2048; ++j) \n \t{\n-#if 1\n \t  double u2 = norm(*p);\n-#else\n+\t  double t = u2 * 0.1;\n+\t  *p *= complex_type(cos(t), sin(t));\n+\t  ++p;\n+\t}\n+    }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"norm\", time, resource);\n+  clear_counters(time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i) \n+    {\n+      complex_type * p = u;\n+      for (int j = 0; j < 2048; ++j) \n+\t{\n \t  // Shouldn't be slower than the above.\n \t  double ur = real(*p); \n \t  double ui = imag(*p);\n \t  double u2 = ur * ur + ui * ui;\n-#endif\n \t  double t = u2 * 0.1;\n \t  *p *= complex_type(cos(t), sin(t));\n \t  ++p;\n \t}\n     }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n   return 0;\n }\n "}, {"sha": "66f15df032b71181b68f203060a65b6f66284294", "filename": "libstdc++-v3/testsuite/performance/cout_insert_int.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fcout_insert_int.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,11 +26,23 @@\n // the GNU General Public License.\n \n #include <iostream>\n+#include <testsuite_performance.h>\n \n // libstdc++/7076\n int main() \n {\n-  for (int i = 0; i < 150000; i++)\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 150000;\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; i++)\n     std::cout << i << '\\n';\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n   return 0;\n } "}, {"sha": "513f75d44f596cc71407b4d444e249e92fe522cf", "filename": "libstdc++-v3/testsuite/performance/filebuf_sputc.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdio>\n+#include <fstream>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/9876\n+int main() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 100000000;\n+\n+  // C\n+  FILE* file = fopen(\"tmp\", \"w+\");\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    putc(i % 100, file);\n+  stop_counters(time, resource);\n+  fclose(file);\n+  report_performance(__FILE__, \"C\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // C unlocked\n+  file = fopen(\"tmp\", \"w+\");\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    putc_unlocked(i % 100, file);\n+  stop_counters(time, resource);\n+  fclose(file);\n+  report_performance(__FILE__, \"C unlocked\", time, resource);\n+  clear_counters(time, resource);\n+\n+\n+  // C++\n+  filebuf buf;\n+  buf.open(\"tmp\", ios_base::out | ios_base::in | ios_base::trunc);\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    buf.sputc(i % 100);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"C++\", time, resource);\n+\n+  return 0;\n+}"}, {"sha": "d14fd610f0eb59bf607df4d60cddd56b5915e24c", "filename": "libstdc++-v3/testsuite/performance/fstream_seek_write.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,21 +26,32 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <testsuite_performance.h>\n \n // libstdc++/10672\n int main() \n {\n   using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 300000;\n+\n   fstream s(\"tmp_perf_seek\", ios::binary | ios::in | ios::out | ios::trunc);\n   if (s.good())\n     {\n-      for (int i = 0; i < 300000; i++) \n+      start_counters(time, resource);\n+      for (int i = 0; i < iterations; i++) \n \t{\n \t  s.seekp(0);\n \t  s.write((char *) & i, sizeof(int));\n \t  s.seekp(sizeof(int));\n \t  s.write((char *) & i, sizeof(int));\n \t}\n+      stop_counters(time, resource);\n+      report_performance(__FILE__, \"\", time, resource);\n     }\n+\n   return 0;\n }"}, {"sha": "e7b06f3ec4cc88c50995d1ccaef1603b5da6aaf0", "filename": "libstdc++-v3/testsuite/performance/ifstream_getline.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_getline.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,17 +26,26 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <testsuite_performance.h>\n \n // libstdc++/5001 (100,000 line input file)\n int main ()\n {\n   using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n   const char* name = \"/usr/share/dict/linux.words\";\n \n   ifstream in(name);\n   char buffer[BUFSIZ];\n+  start_counters(time, resource);\n   while(!in.eof()) \n-    {\n-      in.getline(buffer, BUFSIZ);\n-    }\n+    in.getline(buffer, BUFSIZ);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n }"}, {"sha": "5c3698ba383930ea8768fa99e9f8838363392cae", "filename": "libstdc++-v3/testsuite/performance/map_create_fill.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fmap_create_fill.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -20,30 +20,34 @@\n \n #include <map>\n #include <testsuite_hooks.h>\n-\n-static bool test = true;\n+#include <testsuite_performance.h>\n \n static void create_and_fill(const unsigned int n)\n {\n   typedef std::map<int, int>  Map;\n   Map                         m;\n+  bool test = true;\n   \n   for (unsigned int i = 0; i < n; ++i)\n     m[i] = i;\n-  VERIFY ( m.size() == n );\n+  VERIFY( m.size() == n );\n }\n \n-void test01()\n+// http://gcc.gnu.org/ml/libstdc++/2003-03/msg00000.html\n+int main()\n {\n-  const unsigned n = 10000000;\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 100000000;\n   \n-  for (unsigned int i = 0; i < n; ++i)\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n     create_and_fill( 0 );\n-}\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n \n-// http://gcc.gnu.org/ml/libstdc++/2003-03/msg00000.html\n-int main()\n-{\n-  test01();\n   return 0;\n }"}, {"sha": "549e2030ddd496de747026f46f7374552b8ab09f", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_float.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,15 +26,27 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <testsuite_performance.h>\n \n // based on libstdc++/8761 poor fstream performance (converted to float)\n int main() \n {\n-  std::ofstream out(\"tmp_perf_float.txt\");\n-  for (int i = 0; i < 10000000; ++i)\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 10000000;\n+\n+  ofstream out(\"tmp_perf_float.txt\");\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n     {\n       float f = static_cast<float>(i);\n       out << f << \"\\n\";\n     }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n   return 0;\n };"}, {"sha": "f068767a1784b0da4184b7d593c64abc5325e29c", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_int.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -26,12 +26,24 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <testsuite_performance.h>\n \n // libstdc++/8761 poor fstream performance\n int main() \n {\n-  std::ofstream out(\"tmp_perf_int.txt\");\n-  for (int i = 0; i < 10000000; ++i)\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const int iterations = 10000000;\n+\n+  ofstream out(\"tmp_perf_int.txt\");\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n     out << i << \"\\n\";\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n   return 0;\n };"}, {"sha": "c07c3af069970dc55c03e768b0104e91b7805cc9", "filename": "libstdc++-v3/testsuite/performance/string_append.cc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fstring_append.cc?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -28,6 +28,7 @@\n #include <ctime>\n #include <iostream>\n #include <string>\n+#include <testsuite_performance.h>\n \n using namespace std;\n \n@@ -36,7 +37,7 @@ test_append_char(int how_much)\n {\n   string buf; // no preallocation\n   for (int i = 0; i < how_much; ++i)\n-     buf.append(static_cast<string::size_type>(1) , 'x');\n+    buf.append(static_cast<string::size_type>(1) , 'x');\n }\n \n void\n@@ -45,29 +46,31 @@ test_append_string(int how_much)\n   string s(static_cast<string::size_type>(1) , 'x');\n   string buf; // no preallocation\n   for (int i = 0; i < how_much; ++i)\n-     buf.append(s);\n+    buf.append(s);\n }\n \n void \n run_benchmark1(int how_much)\n {\n-  clock_t t0 = clock();\n+  using namespace __gnu_cxx_test;\n+  time_counter time;\n+  resource_counter resource;\n+  start_counters(time, resource);\n   test_append_char(how_much);\n-  clock_t t1 = clock();\n-  cout << \"Execution time of \" << how_much\n-       << \" string::append(char) calls: \" \n-       << (static_cast<float>(t1 - t0)/CLOCKS_PER_SEC) << \" sec.\"<< endl;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"char\", time, resource);\n }\n \n void \n run_benchmark2(int how_much)\n {\n-  clock_t t0 = clock();\n+  using namespace __gnu_cxx_test;\n+  time_counter time;\n+  resource_counter resource;\n+  start_counters(time, resource);\n   test_append_string(how_much);\n-  clock_t t1 = clock();\n-  cout << \"Execution time of \" << how_much\n-       << \" string::append(const string&) calls: \" \n-       << (static_cast<float>(t1 - t0)/CLOCKS_PER_SEC) << \" sec.\" << endl;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"string\", time, resource);\n }\n \n // libstdc++/5380"}, {"sha": "b9b76cd031ee0f8a43f54964776c30dd1795078c", "filename": "libstdc++-v3/testsuite/testsuite_performance.h", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4f8c6b7b07ce2eb56aa138a84de540f30b132c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h?ref=ce4f8c6b7b07ce2eb56aa138a84de540f30b132c", "patch": "@@ -0,0 +1,184 @@\n+// -*- C++ -*-\n+// Testing performance utilities for the C++ library testsuite.\n+//\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_PERFORMANCE_H\n+#define _GLIBCPP_PERFORMANCE_H\n+\n+#include <sys/times.h>\n+#include <sys/resource.h>\n+#include <malloc.h>\n+#include <string>\n+#include <fstream>\n+#include <iomanip>\n+\n+namespace __gnu_cxx_test\n+{\n+  class time_counter\n+  {\n+    clock_t\telapsed_begin;\n+    clock_t\telapsed_end;\n+    tms\t\ttms_begin;\n+    tms\t\ttms_end;\n+    \n+  public:\n+    time_counter() \n+    { this->clear(); }\n+\n+    void \n+    clear()\n+    {\n+      elapsed_begin = 0;\n+      elapsed_end = 0;\n+      memset(&tms_begin, 0, sizeof(tms));\n+      memset(&tms_end, 0, sizeof(tms));\n+    }\n+\n+    void\n+    start()\n+    { elapsed_begin = times(&tms_begin); }\n+    \n+    void\n+    stop()\n+    { elapsed_end = times(&tms_end); }\n+\n+    size_t\n+    real_time() const\n+    { return elapsed_end - elapsed_begin; }\n+\n+    size_t\n+    user_time() const\n+    { return tms_end.tms_utime - tms_begin.tms_utime; }\n+\n+    size_t\n+    system_time() const\n+    { return tms_end.tms_stime - tms_begin.tms_stime; }\n+  };\n+\n+  class resource_counter\n+  {\n+    int\t\twho;\n+    rusage\trusage_begin;\n+    rusage\trusage_end;\n+    struct mallinfo  \tallocation_begin;\n+    struct mallinfo  \tallocation_end;\n+\n+  public:\n+    resource_counter(int i = RUSAGE_SELF) : who(i)\n+    { this->clear(); }\n+    \n+    void \n+    clear()\n+    { \n+      memset(&rusage_begin, 0, sizeof(rusage_begin)); \n+      memset(&rusage_end, 0, sizeof(rusage_end)); \n+      memset(&allocation_begin, 0, sizeof(allocation_begin)); \n+      memset(&allocation_end, 0, sizeof(allocation_end)); \n+    }\n+\n+    void\n+    start()\n+    { \n+      if (getrusage(who, &rusage_begin) != 0 )\n+\tmemset(&rusage_begin, 0, sizeof(rusage_begin));\n+      allocation_begin = mallinfo();\n+    }\n+    \n+    void\n+    stop()\n+    { \n+      if (getrusage(who, &rusage_end) != 0 )\n+\tmemset(&rusage_end, 0, sizeof(rusage_end));\n+      allocation_end = mallinfo();\n+    }\n+\n+    int\n+    allocated_memory() const\n+    { return allocation_end.arena - allocation_begin.arena; }\n+    \n+    long \n+    hard_page_fault() const\n+    { return rusage_end.ru_majflt - rusage_begin.ru_majflt; }\n+\n+    long \n+    swapped() const\n+    { return rusage_end.ru_nswap - rusage_begin.ru_nswap; }\n+  };\n+\n+  void\n+  start_counters(time_counter& t, resource_counter& r)\n+  {\n+    t.start();\n+    r.start();\n+  }\n+\n+  void\n+  stop_counters(time_counter& t, resource_counter& r)\n+  {\n+    t.stop();\n+    r.stop();\n+  }\n+\n+  void\n+  clear_counters(time_counter& t, resource_counter& r)\n+  {\n+    t.clear();\n+    r.clear();\n+  }\n+\n+  void\n+  report_performance(const std::string file, const std::string comment, \n+\t\t     const time_counter& t, const resource_counter& r)\n+  {\n+    const char space = ' ';\n+    const char tab = '\\t';\n+    const char* name = \"libstdc++-v3.performance\";\n+    std::string::const_iterator i = file.begin() + file.find_last_of('/') + 1;\n+    std::string testname(i, file.end());\n+\n+    std::ofstream out(name, std::ios_base::app);\n+\n+    out.setf(std::ios_base::left);\n+    out << std::setw(25) << testname << tab;\n+    out << std::setw(10) << comment << tab;\n+\n+    out.setf(std::ios_base::right);\n+    out << std::setw(4) << t.real_time() << \"r\" << space;\n+    out << std::setw(4) << t.user_time() << \"u\" << space;\n+    out << std::setw(4) << t.system_time() << \"s\" << space;\n+    //    out << std::setw(4) << r.allocated_memory() << \"mem\" << space;\n+    out << std::setw(4) << r.hard_page_fault() << \"pf\" << space;\n+    \n+    out << std::endl;\n+    out.close();\n+  }\n+}; // namespace __gnu_cxx_test\n+\n+#endif // _GLIBCPP_PERFORMANCE_H\n+"}]}