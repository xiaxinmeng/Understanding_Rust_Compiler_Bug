{"sha": "f1c80977503ef50a812c3545c9b902fd65c086eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjODA5Nzc1MDNlZjUwYTgxMmMzNTQ1YzliOTAyZmQ2NWMwODZlYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:13:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:13:04Z"}, "message": "[multiple changes]\n\n2013-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Process_Convention): Move Stdcall tests to\n\tSet_Convention_From_Pragma so that they are applied to each\n\tentry of a homonym set.\n\t(Process_Convention): Don't try to set convention if already set.\n\n2013-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatbind.adb: Minor reformatting.\n\n2013-04-24  Vincent Celier  <celier@adacore.com>\n\n\t* clean.adb (Gnatclean): Add the default project search\n\tdirectories in the project search path after scanning the\n\tswitches on the command line.\n\t(Initialize): Do not put the default project search directories in the\n\tproject search path.\n\t* gnatcmd.adb (GNATcmd): Add the default project search\n\tdirectories in the project search path after scanning the switches\n\ton the command line.\n\t* make.adb (Initialize): Add the default project search\n\tdirectories in the project search path after scanning the switches\n\ton the command line.\n\n2013-04-24  Yannick Moy  <moy@adacore.com>\n\n\t* restrict.ads (Restriction_Warnings): Initialize with all False value.\n\n2013-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.ads, checks.adb (Predicate_Checks_Suppressed): New function.\n\t* exp_util.ads, exp_util.adb (Make_Predicate_Check): Check setting of\n\tPredicate_Check.\n\t* snames.ads-tmpl (Name_Predicate_Check): New check name.\n\t* types.ads (Predicate_Check): New definition.\n\t* gnat_rm.texi: Add documentation for Predicate_Check.\n\nFrom-SVN: r198226", "tree": {"sha": "05e7930e1c95e146a56c96c5b0caef56ec0f883c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e7930e1c95e146a56c96c5b0caef56ec0f883c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c80977503ef50a812c3545c9b902fd65c086eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c80977503ef50a812c3545c9b902fd65c086eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c80977503ef50a812c3545c9b902fd65c086eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c80977503ef50a812c3545c9b902fd65c086eb/comments", "author": null, "committer": null, "parents": [{"sha": "ced8450b58d295f31cf70f31812008f8c5f497bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced8450b58d295f31cf70f31812008f8c5f497bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced8450b58d295f31cf70f31812008f8c5f497bc"}], "stats": {"total": 270, "additions": 199, "deletions": 71}, "files": [{"sha": "92076bad0f855809ea9a3a77458e07c1a9c81241", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -1,3 +1,41 @@\n+2013-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention): Move Stdcall tests to\n+\tSet_Convention_From_Pragma so that they are applied to each\n+\tentry of a homonym set.\n+\t(Process_Convention): Don't try to set convention if already set.\n+\n+2013-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatbind.adb: Minor reformatting.\n+\n+2013-04-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* clean.adb (Gnatclean): Add the default project search\n+\tdirectories in the project search path after scanning the\n+\tswitches on the command line.\n+\t(Initialize): Do not put the default project search directories in the\n+\tproject search path.\n+\t* gnatcmd.adb (GNATcmd): Add the default project search\n+\tdirectories in the project search path after scanning the switches\n+\ton the command line.\n+\t* make.adb (Initialize): Add the default project search\n+\tdirectories in the project search path after scanning the switches\n+\ton the command line.\n+\n+2013-04-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* restrict.ads (Restriction_Warnings): Initialize with all False value.\n+\n+2013-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.ads, checks.adb (Predicate_Checks_Suppressed): New function.\n+\t* exp_util.ads, exp_util.adb (Make_Predicate_Check): Check setting of\n+\tPredicate_Check.\n+\t* snames.ads-tmpl (Name_Predicate_Check): New check name.\n+\t* types.ads (Predicate_Check): New definition.\n+\t* gnat_rm.texi: Add documentation for Predicate_Check.\n+\n 2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch8.adb (Expand_N_Subprogram_Renaming_Declaration): If this"}, {"sha": "d0d8c2c3051bd9891907b7ad930b6cfa769b5ea2", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -7750,6 +7750,19 @@ package body Checks is\n       end if;\n    end Overflow_Checks_Suppressed;\n \n+   ---------------------------------\n+   -- Predicate_Checks_Suppressed --\n+   ---------------------------------\n+\n+   function Predicate_Checks_Suppressed (E : Entity_Id) return Boolean is\n+   begin\n+      if Present (E) and then Checks_May_Be_Suppressed (E) then\n+         return Is_Check_Suppressed (E, Predicate_Check);\n+      else\n+         return Scope_Suppress.Suppress (Predicate_Check);\n+      end if;\n+   end Predicate_Checks_Suppressed;\n+\n    -----------------------------\n    -- Range_Checks_Suppressed --\n    -----------------------------"}, {"sha": "2d9c25e31ae786c3704bfb6424edc586d21a1388", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,6 +56,7 @@ package Checks is\n    function Index_Checks_Suppressed           (E : Entity_Id) return Boolean;\n    function Length_Checks_Suppressed          (E : Entity_Id) return Boolean;\n    function Overflow_Checks_Suppressed        (E : Entity_Id) return Boolean;\n+   function Predicate_Checks_Suppressed       (E : Entity_Id) return Boolean;\n    function Range_Checks_Suppressed           (E : Entity_Id) return Boolean;\n    function Storage_Checks_Suppressed         (E : Entity_Id) return Boolean;\n    function Tag_Checks_Suppressed             (E : Entity_Id) return Boolean;"}, {"sha": "0b3622c8f5f7922134bca00fdc69befeb5ff4afb", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -1377,6 +1377,13 @@ package body Clean is\n \n       Parse_Cmd_Line;\n \n+      --  Add the default project search directories now, after the directories\n+      --  that have been specified by switches -aP<dir>.\n+\n+      Prj.Env.Initialize_Default_Project_Path\n+        (Root_Environment.Project_Path,\n+         Target_Name => Sdefault.Target_Name.all);\n+\n       if Verbose_Mode then\n          Display_Copyright;\n       end if;\n@@ -1550,9 +1557,6 @@ package body Clean is\n          Snames.Initialize;\n \n          Prj.Tree.Initialize (Root_Environment, Gnatmake_Flags);\n-         Prj.Env.Initialize_Default_Project_Path\n-            (Root_Environment.Project_Path,\n-             Target_Name => Sdefault.Target_Name.all);\n \n          Project_Node_Tree := new Project_Node_Tree_Data;\n          Prj.Tree.Initialize (Project_Node_Tree);"}, {"sha": "366885374a067b46e668ce796e08f52af4c03ba4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -46,7 +46,6 @@ with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Eval; use Sem_Eval;\n-with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;\n@@ -5472,18 +5471,11 @@ package body Exp_Util is\n    begin\n       pragma Assert\n         (Has_Invariants (Typ) and then Present (Invariant_Procedure (Typ)));\n-\n-      if Check_Kind (Name_Invariant) = Name_Check then\n-         return\n-           Make_Procedure_Call_Statement (Loc,\n-             Name                   =>\n-               New_Occurrence_Of (Invariant_Procedure (Typ), Loc),\n-             Parameter_Associations => New_List (Relocate_Node (Expr)));\n-\n-      else\n-         return\n-           Make_Null_Statement (Loc);\n-      end if;\n+      return\n+        Make_Procedure_Call_Statement (Loc,\n+          Name                   =>\n+            New_Occurrence_Of (Invariant_Procedure (Typ), Loc),\n+          Parameter_Associations => New_List (Relocate_Node (Expr)));\n    end Make_Invariant_Call;\n \n    ------------------------\n@@ -5605,6 +5597,14 @@ package body Exp_Util is\n       Nam : Name_Id;\n \n    begin\n+      --  If predicate checks are suppressed, then return a null statement.\n+      --  For this call, we check only the scope setting. If the caller wants\n+      --  to check a specific entity's setting, they must do it manually.\n+\n+      if Predicate_Checks_Suppressed (Empty) then\n+         return Make_Null_Statement (Loc);\n+      end if;\n+\n       --  Compute proper name to use, we need to get this right so that the\n       --  right set of check policies apply to the Check pragma we are making.\n "}, {"sha": "568b9f7d5c17cc2a0db42bb4b2e1d66cabc872b0", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -665,8 +665,9 @@ package Exp_Util is\n      (Typ  : Entity_Id;\n       Expr : Node_Id) return Node_Id;\n    --  Typ is a type with Predicate_Function set. This routine builds a Check\n-   --  pragma whose first argument is Predicate, and the second argument is a\n-   --  call to the this predicate function with Expr as the argument.\n+   --  pragma whose first argument is Predicate, and the second argument is\n+   --  a call to the predicate function of Typ with Expr as the argument. If\n+   --  Predicate_Check is suppressed then a null statement is returned instead.\n \n    function Make_Subtype_From_Expr\n      (E       : Node_Id;"}, {"sha": "ae0e865cf215253c4cb3017dfcdbe0de2453d422", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -5628,12 +5628,38 @@ pragma Suppress (Identifier [, [On =>] Name]);\n \n @noindent\n This is a standard pragma, and supports all the check names required in\n-the RM. It is included here because GNAT recognizes one additional check\n-name: @code{Alignment_Check} which can be used to suppress alignment checks\n+the RM. It is included here because GNAT recognizes some additional check\n+names that are implementation defined (as permitted by the RM):\n+\n+@itemize @bullet\n+\n+@item\n+@code{Alignment_Check} can be used to suppress alignment checks\n on addresses used in address clauses. Such checks can also be suppressed\n by suppressing range checks, but the specific use of @code{Alignment_Check}\n allows suppression of alignment checks without suppressing other range checks.\n \n+@item\n+@code{Predicate_Check} can be used to control whether predicate checks are\n+active. It is applicable only to predicates for which the policy is\n+@code{Check}. Unlike @code{Assertion_Policy}, which determines if a given\n+predicate is ignored or checked for the whole program, the use of\n+@code{Suppress} and @code{Unsuppress} with this check name allows a given\n+predicate to be turned on and off at specific points in the program.\n+\n+@item\n+@code{Validity_Check} can be used specifically to control validity checks.\n+If @code{Suppress} is used to suppress validity checks, then no validity\n+checks are performed, including those specified by the appropriate compiler\n+switch or the @code{Validity_Checks} pragma.\n+\n+@item\n+Additional check names previously introduced by use of the @code{Check_Name}\n+pragma are also allowed.\n+\n+@end itemize\n+\n+@noindent\n Note that pragma Suppress gives the compiler permission to omit\n checks, but does not require the compiler to omit checks. The compiler\n will generate checks if they are essentially free, even when they are\n@@ -6182,6 +6208,10 @@ checks.\n This pragma is standard in Ada 2005. It is available in all earlier versions\n of Ada as an implementation-defined pragma.\n \n+Note that in addition to the checks defined in the Ada RM, GNAT recogizes\n+a number of implementation-defined check names. See description of pragma\n+@code{Suppress} for full details.\n+\n @node Pragma Use_VADS_Size\n @unnumberedsec Pragma Use_VADS_Size\n @cindex @code{Size}, VADS compatibility\n@@ -10430,6 +10460,12 @@ The implementation defined check name Alignment_Check controls checking of\n address clause values for proper alignment (that is, the address supplied\n must be consistent with the alignment of the type).\n \n+The implementation defined check name Predicate_Check controls whether\n+predicate checks are generated.\n+\n+The implementation defined check name Validity_Check controls whether\n+validity checks are generated.\n+\n In addition, a user program can add implementation-defined check names\n by means of the pragma Check_Name.\n "}, {"sha": "52591c46b074ecb59c5c2cae6a7667075cd5a9ae", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -494,13 +494,14 @@ procedure Gnatbind is\n \n    procedure Generic_Scan_Bind_Args is\n       Next_Arg : Positive := 1;\n+\n    begin\n-      --  Use low level argument routines to avoid dragging in the secondary\n-      --  stack\n+      --  Use low level argument routines to avoid dragging in secondary stack\n \n       while Next_Arg < Arg_Count loop\n          declare\n             Next_Argv : String (1 .. Len_Arg (Next_Arg));\n+\n          begin\n             Fill_Arg (Next_Argv'Address, Next_Arg);\n \n@@ -531,6 +532,10 @@ procedure Gnatbind is\n       end loop;\n    end Generic_Scan_Bind_Args;\n \n+   ---------------\n+   -- Write_Arg --\n+   ---------------\n+\n    procedure Write_Arg (S : String) is\n    begin\n       Write_Str (\" \" & S);\n@@ -545,7 +550,6 @@ procedure Gnatbind is\n --  Start of processing for Gnatbind\n \n begin\n-\n    --  Set default for Shared_Libgnat option\n \n    declare"}, {"sha": "f53bc24de7761eacf3a93e3cd5ee3033b88fb2c7", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -1395,9 +1395,6 @@ begin\n    Snames.Initialize;\n \n    Prj.Tree.Initialize (Root_Environment, Gnatmake_Flags);\n-   Prj.Env.Initialize_Default_Project_Path\n-     (Root_Environment.Project_Path,\n-      Target_Name => Sdefault.Target_Name.all);\n \n    Project_Node_Tree := new Project_Node_Tree_Data;\n    Prj.Tree.Initialize (Project_Node_Tree);\n@@ -1911,6 +1908,13 @@ begin\n          end Inspect_Switches;\n       end if;\n \n+      --  Add the default project search directories now, after the directories\n+      --  that have been specified by switches -aP<dir>.\n+\n+      Prj.Env.Initialize_Default_Project_Path\n+        (Root_Environment.Project_Path,\n+         Target_Name => Sdefault.Target_Name.all);\n+\n       --  If there is a project file specified, parse it, get the switches\n       --  for the tool and setup PATH environment variables.\n "}, {"sha": "9b1f0e3f128a261fd69fe79dd44bf7aa96c1186d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -6392,8 +6392,6 @@ package body Make is\n       --  the command line switches\n \n       Prj.Tree.Initialize (Env, Gnatmake_Flags);\n-      Prj.Env.Initialize_Default_Project_Path\n-        (Env.Project_Path, Target_Name => Sdefault.Target_Name.all);\n \n       Project_Node_Tree := new Project_Node_Tree_Data;\n       Prj.Tree.Initialize (Project_Node_Tree);\n@@ -6492,6 +6490,12 @@ package body Make is\n          Usage;\n       end if;\n \n+      --  Add the default project search directories now, after the directories\n+      --  that have been specified by switches -aP<dir>.\n+\n+      Prj.Env.Initialize_Default_Project_Path\n+        (Env.Project_Path, Target_Name => Sdefault.Target_Name.all);\n+\n       --  Test for trailing -P switch\n \n       if Project_File_Name_Present and then Project_File_Name = null then"}, {"sha": "f54fb4b811ab7a746aacebba3f476c0b0c393ef1", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -62,7 +62,7 @@ package Restrict is\n    --  since we want the binder to be able to accurately diagnose inter-unit\n    --  restriction violations.\n \n-   Restriction_Warnings : Rident.Restriction_Flags;\n+   Restriction_Warnings : Rident.Restriction_Flags := (others => False);\n    --  If one of these flags is set, then it means that violation of the\n    --  corresponding restriction results only in a warning message, not\n    --  in an error message, and the restriction is not otherwise enforced."}, {"sha": "835e8197c67423a8dade5c755401344f32854077", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -4928,6 +4928,51 @@ package body Sem_Prag is\n                   & \"operation\", Arg1);\n             end if;\n \n+            --  Special checks for Convention_Stdcall\n+\n+            if C = Convention_Stdcall then\n+\n+               --  A dispatching call is not allowed. A dispatching subprogram\n+               --  cannot be used to interface to the Win32 API, so in fact\n+               --  this check does not impose any effective restriction.\n+\n+               if Is_Dispatching_Operation (E) then\n+                  Error_Msg_Sloc := Sloc (E);\n+\n+                  --  Note: make this unconditional so that if there is more\n+                  --  than one call to which the pragma applies, we get a\n+                  --  message for each call. Also don't use Error_Pragma,\n+                  --  so that we get multiple messages!\n+\n+                  Error_Msg_N\n+                    (\"dispatching subprogram# cannot use Stdcall convention!\",\n+                     Arg1);\n+\n+               --  Subprogram is allowed, but not a generic subprogram\n+\n+               elsif not Is_Subprogram (E)\n+                 and then not Is_Generic_Subprogram (E)\n+\n+                 --  A variable is OK\n+\n+                 and then Ekind (E) /= E_Variable\n+\n+                 --  An access to subprogram is also allowed\n+\n+                 and then not\n+                   (Is_Access_Type (E)\n+                     and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n+\n+                 --  Allow internal call to set convention of subprogram type\n+\n+                 and then not (Ekind (E) = E_Subprogram_Type)\n+               then\n+                  Error_Pragma_Arg\n+                    (\"second argument of pragma% must be subprogram (type)\",\n+                     Arg2);\n+               end if;\n+            end if;\n+\n             --  Set the convention\n \n             Set_Convention (E, C);\n@@ -5158,40 +5203,7 @@ package body Sem_Prag is\n               (\"second argument of pragma% must be a subprogram\", Arg2);\n          end if;\n \n-         --  Stdcall case\n-\n-         if C = Convention_Stdcall then\n-\n-            --  A dispatching call is not allowed. A dispatching subprogram\n-            --  cannot be used to interface to the Win32 API, so in fact this\n-            --  check does not impose any effective restriction.\n-\n-            if Is_Dispatching_Operation (E) then\n-\n-               Error_Pragma\n-                 (\"dispatching subprograms cannot use Stdcall convention\");\n-\n-            --  Subprogram is allowed, but not a generic subprogram, and not a\n-            --  dispatching operation.\n-\n-            elsif not Is_Subprogram (E)\n-              and then not Is_Generic_Subprogram (E)\n-\n-              --  A variable is OK\n-\n-              and then Ekind (E) /= E_Variable\n-\n-              --  An access to subprogram is also allowed\n-\n-              and then not\n-                (Is_Access_Type (E)\n-                  and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n-            then\n-               Error_Pragma_Arg\n-                 (\"second argument of pragma% must be subprogram (type)\",\n-                  Arg2);\n-            end if;\n-         end if;\n+         --  Deal with non-subprogram cases\n \n          if not Is_Subprogram (E)\n            and then not Is_Generic_Subprogram (E)\n@@ -5202,7 +5214,7 @@ package body Sem_Prag is\n                Check_First_Subtype (Arg2);\n                Set_Convention_From_Pragma (Base_Type (E));\n \n-               --  For subprograms, we must set the convention on the\n+               --  For access subprograms, we must set the convention on the\n                --  internally generated directly designated type as well.\n \n                if Ekind (E) = E_Access_Subprogram_Type then\n@@ -5251,6 +5263,12 @@ package body Sem_Prag is\n                E1 := Homonym (E1);\n                exit when No (E1) or else Scope (E1) /= Current_Scope;\n \n+               --  Ignore entry for which convention is already set\n+\n+               if Has_Convention_Pragma (E1) then\n+                  goto Continue;\n+               end if;\n+\n                --  Do not set the pragma on inherited operations or on formal\n                --  subprograms.\n \n@@ -5274,6 +5292,9 @@ package body Sem_Prag is\n                      Generate_Reference (E1, Id, 'b');\n                   end if;\n                end if;\n+\n+            <<Continue>>\n+               null;\n             end loop;\n          end if;\n       end Process_Convention;"}, {"sha": "f8e807c2475b522542ca7ec1a4c5dfb5e59f5c8b", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -1082,6 +1082,7 @@ package Snames is\n    Name_Index_Check                    : constant Name_Id := N + $;\n    Name_Length_Check                   : constant Name_Id := N + $;\n    Name_Overflow_Check                 : constant Name_Id := N + $;\n+   Name_Predicate_Check                : constant Name_Id := N + $; -- GNAT\n    Name_Range_Check                    : constant Name_Id := N + $;\n    Name_Storage_Check                  : constant Name_Id := N + $;\n    Name_Tag_Check                      : constant Name_Id := N + $;"}, {"sha": "9ec2d5e598400ccc5eb57fa261fe1960246679e2", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c80977503ef50a812c3545c9b902fd65c086eb/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=f1c80977503ef50a812c3545c9b902fd65c086eb", "patch": "@@ -666,15 +666,16 @@ package Types is\n    Index_Check            : constant :=  8;\n    Length_Check           : constant :=  9;\n    Overflow_Check         : constant := 10;\n-   Range_Check            : constant := 11;\n-   Storage_Check          : constant := 12;\n-   Tag_Check              : constant := 13;\n-   Validity_Check         : constant := 14;\n+   Predicate_Check        : constant := 11;\n+   Range_Check            : constant := 12;\n+   Storage_Check          : constant := 13;\n+   Tag_Check              : constant := 14;\n+   Validity_Check         : constant := 15;\n    --  Values used to represent individual predefined checks (including the\n    --  setting of Atomic_Synchronization, which is implemented internally using\n-   --  a \"check\" whose name is Atomic_Synchronization.\n+   --  a \"check\" whose name is Atomic_Synchronization).\n \n-   All_Checks : constant := 15;\n+   All_Checks : constant := 16;\n    --  Value used to represent All_Checks value\n \n    subtype Predefined_Check_Id is Check_Id range 1 .. All_Checks;"}]}