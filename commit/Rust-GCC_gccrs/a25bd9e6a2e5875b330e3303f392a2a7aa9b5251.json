{"sha": "a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1YmQ5ZTZhMmU1ODc1YjMzMGUzMzAzZjM5MmEyYTdhYTliNTI1MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-06-24T21:57:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-06-24T21:57:13Z"}, "message": "P0145R2: Refining Expression Order for C++ (complex LHS of =).\n\ngcc/c-common/\n\t* c-common.c (verify_tree) [COMPOUND_EXPR]: Fix handling on LHS of\n\tMODIFY_EXPR.\ngcc/cp/\n\t* typeck.c (cp_build_modify_expr): Leave COMPOUND_EXPR on LHS.\n\nFrom-SVN: r237775", "tree": {"sha": "674e7e2461f1f0572e54a14ff71ae09257303531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674e7e2461f1f0572e54a14ff71ae09257303531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53605f35cddd3c353ae9f7db1aaf9565a08826ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53605f35cddd3c353ae9f7db1aaf9565a08826ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53605f35cddd3c353ae9f7db1aaf9565a08826ea"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "86ce14a968eec909c49265413d03b17e434f0ac8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "patch": "@@ -1,3 +1,9 @@\n+2016-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tP0145R2: Refining Expression Order for C++.\n+\t* c-common.c (verify_tree) [COMPOUND_EXPR]: Fix handling on LHS of\n+\tMODIFY_EXPR.\n+\n 2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.c (check_builtin_function_arguments): Require last"}, {"sha": "3301c313998de42ba60e7ac97317b8687e25df1d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "patch": "@@ -2980,13 +2980,15 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n     case COMPOUND_EXPR:\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n-      tmp_before = tmp_nosp = tmp_list3 = 0;\n+      tmp_before = tmp_nosp = tmp_list2 = tmp_list3 = 0;\n       verify_tree (TREE_OPERAND (x, 0), &tmp_before, &tmp_nosp, NULL_TREE);\n       warn_for_collisions (tmp_nosp);\n       merge_tlist (pbefore_sp, tmp_before, 0);\n       merge_tlist (pbefore_sp, tmp_nosp, 0);\n-      verify_tree (TREE_OPERAND (x, 1), &tmp_list3, pno_sp, NULL_TREE);\n+      verify_tree (TREE_OPERAND (x, 1), &tmp_list3, &tmp_list2, NULL_TREE);\n+      warn_for_collisions (tmp_list2);\n       merge_tlist (pbefore_sp, tmp_list3, 0);\n+      merge_tlist (pno_sp, tmp_list2, 0);\n       return;\n \n     case COND_EXPR:"}, {"sha": "33e10baf9f1fa91dd367696f9a66b6041298b4b9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "patch": "@@ -1,5 +1,8 @@\n 2016-06-24  Jason Merrill  <jason@redhat.com>\n \n+\tP0145R2: Refining Expression Order for C++.\n+\t* typeck.c (cp_build_modify_expr): Leave COMPOUND_EXPR on LHS.\n+\n \t* tree.c (get_target_expr_sfinae): Handle bit-fields.\n \t(build_target_expr): Call mark_rvalue_use.\n "}, {"sha": "fb6a16e00c66ca5dba7aa18bbc3fd0e257f31fbb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25bd9e6a2e5875b330e3303f392a2a7aa9b5251/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a25bd9e6a2e5875b330e3303f392a2a7aa9b5251", "patch": "@@ -7515,7 +7515,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n   if (error_operand_p (lhs) || error_operand_p (rhs))\n     return error_mark_node;\n \n-  /* Handle control structure constructs used as \"lvalues\".  */\n+  /* Handle control structure constructs used as \"lvalues\".  Note that we\n+     leave COMPOUND_EXPR on the LHS because it is sequenced after the RHS.  */\n   switch (TREE_CODE (lhs))\n     {\n       /* Handle --foo = 5; as these are valid constructs in C++.  */\n@@ -7525,31 +7526,16 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n \t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n-      newrhs = cp_build_modify_expr (loc, TREE_OPERAND (lhs, 0),\n-\t\t\t\t     modifycode, rhs, complain);\n-      if (newrhs == error_mark_node)\n-\treturn error_mark_node;\n-      return build2 (COMPOUND_EXPR, lhstype, lhs, newrhs);\n-\n-      /* Handle (a, b) used as an \"lvalue\".  */\n-    case COMPOUND_EXPR:\n-      newrhs = cp_build_modify_expr (loc, TREE_OPERAND (lhs, 1),\n-\t\t\t\t     modifycode, rhs, complain);\n-      if (newrhs == error_mark_node)\n-\treturn error_mark_node;\n-      return build2 (COMPOUND_EXPR, lhstype,\n-\t\t     TREE_OPERAND (lhs, 0), newrhs);\n+      lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n+      break;\n \n     case MODIFY_EXPR:\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n \t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n-      newrhs = cp_build_modify_expr (loc, TREE_OPERAND (lhs, 0), modifycode,\n-\t\t\t\t     rhs, complain);\n-      if (newrhs == error_mark_node)\n-\treturn error_mark_node;\n-      return build2 (COMPOUND_EXPR, lhstype, lhs, newrhs);\n+      lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n+      break;\n \n     case MIN_EXPR:\n     case MAX_EXPR:"}]}