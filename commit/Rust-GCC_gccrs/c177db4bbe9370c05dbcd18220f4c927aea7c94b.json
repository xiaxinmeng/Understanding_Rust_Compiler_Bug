{"sha": "c177db4bbe9370c05dbcd18220f4c927aea7c94b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3N2RiNGJiZTkzNzBjMDVkYmNkMTgyMjBmNGM5MjdhZWE3Yzk0Yg==", "commit": {"author": {"name": "Timothy Wall", "email": "twall@redhat.com", "date": "2001-07-12T02:55:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-07-12T02:55:24Z"}, "message": "ia64-aix port from Tim Wall\n\nia64-aix port from Tim Wall\n        * config.gcc: Add configuration for AIX5/IA64.\n        * config/ia64/aix.h: New.  AIX5/IA64-specific configuration.\n        * config/ia64/crt[in].asm: New.  Generic static ctor/dtor\n\tsupport prefix/suffix code.\n        * config/ia64/t-aix: New.  Makefile fragment.\n        * config/ia64/unwind-aix.c: New.  Unwind table entry lookup.\n\nFrom-SVN: r43958", "tree": {"sha": "4c93e710776edad421c80d53dc87a0e04cffa165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c93e710776edad421c80d53dc87a0e04cffa165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c177db4bbe9370c05dbcd18220f4c927aea7c94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c177db4bbe9370c05dbcd18220f4c927aea7c94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c177db4bbe9370c05dbcd18220f4c927aea7c94b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c177db4bbe9370c05dbcd18220f4c927aea7c94b/comments", "author": null, "committer": null, "parents": [{"sha": "4d893612441a8018649a638403b21f48d1c8843d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d893612441a8018649a638403b21f48d1c8843d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d893612441a8018649a638403b21f48d1c8843d"}], "stats": {"total": 537, "additions": 537, "deletions": 0}, "files": [{"sha": "fd9857f1b1422ded7627a365c6220dc9b31fb0fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -1,3 +1,12 @@\n+2001-07-11  Timothy Wall  <twall@redhat.com>\n+\n+        * config.gcc: Add configuration for AIX5/IA64.\n+        * config/ia64/aix.h: New.  AIX5/IA64-specific configuration.\n+        * config/ia64/crt[in].asm: New.  Generic static ctor/dtor\n+\tsupport prefix/suffix code.\n+        * config/ia64/t-aix: New.  Makefile fragment.\n+        * config/ia64/unwind-aix.c: New.  Unwind table entry lookup.\n+\n 2001-07-11  Kazu Hirata  <kazu@hxi.com>\n \n \t* recog.c (validate_change): Fix a comment typo."}, {"sha": "353086c683210596262ab786d0483ff768ec82fa", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -1465,6 +1465,11 @@ i960-*-*)\t\t\t# Default i960 environment.\n \tc_target_objs=\"i960-c.o\"\n \tcxx_target_objs=\"i960-c.o\"\n \t;;\n+ia64*-*-aix*)\n+\ttm_file=\"${tm_file} svr4.h ia64/sysv4.h ia64/aix.h\"\n+\ttmake_file=\"ia64/t-ia64 ia64/t-aix\"\n+\ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n+\t;;\n ia64*-*-elf*)\n \ttm_file=ia64/elf.h\n \ttmake_file=\"ia64/t-ia64\""}, {"sha": "36baf103fc7b95435ab7ef659c15816c3e58dff0", "filename": "gcc/config/ia64/aix.h", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -0,0 +1,262 @@\n+/* Definitions of target machine GNU compiler.  IA-64/AIX version.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Contributed by Timothy Wall (twall@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* AIX5 (aka Monterey): a mix of AIX and UnixWare.  \n+   This file is loosely based on ia64/linux.h. */\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n+\n+/*#undef PREFERRED_DEBUGGING_TYPE*/\n+/*#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG*/\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+#define MD_STARTFILE_PREFIX \"/usr/lib/ia64l64/\"\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+\toutput_file_directive (FILE, main_input_filename);\t\t\\\n+\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n+  } while (0)\n+\n+/* Provide a STARTFILE_SPEC appropriate for AIX.  Here we add\n+   the crti C++ startup files file which provide part of the support\n+   for getting C++ file-scope static object constructed before entering\n+   `main'. */ \n+   \n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+\"%{!shared: \\\n+   %{pg:gcrt1_64.o%s} %{!pg:%{p:mcrt1_64.o%s} \\\n+                        %{!p:%{profile:gcrt1_64.o%s} \\\n+                          %{!profile:crt1_64.o%s}}}} \\\n+ crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for AIX.  Here we tack on\n+   the crtn file which provides termination of the support for getting C++\n+   file-scope static object constructed before entering `main'. */\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+#undef DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS 1\n+\n+/* Define this so we can compile MS code for use with WINE.  */\n+#define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+/* A C string constant that tells the GNU CC driver program options to pass to\n+   CPP.  It can also specify how to translate options you give to GNU CC into\n+   options for GNU CC to pass to the CPP.  */\n+\n+/* If -ansi, we need to define _ANSI_C_SOURCE to get the right headers. */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} \\\n+%{ansi:-D_ANSI_C_SOURCE} \\\n+%{posix:-D_POSIX_SOURCE} \\\n+%{cpp_cpu} \\\n+-D__LONG_MAX__=9223372036854775807L\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"\\\n+-D__ia64 -D__ia64__ -D_AIX -D_AIX64 -D_LONGLONG -Dunix \\\n+-D__LP64__ -D__ELF__ -Asystem=unix -Asystem=aix -Acpu=ia64 -Amachine=ia64 \\\n+-D__64BIT__ -D_LONG_LONG -D_IA64 -D__int128=__size128_t\"\n+\n+/* The GNU C++ standard library requires that these macros be defined. */\n+#undef CPLUSPLUS_CPP_SPEC\n+#define CPLUSPLUS_CPP_SPEC                      \\\n+  \"-D_XOPEN_SOURCE=500                          \\\n+   -D_XOPEN_SOURCE_EXTENDED=1                   \\\n+   -D_LARGE_FILE_API                            \\\n+   -D_ALL_SOURCE                                \\\n+   -D__LONG_MAX__=9223372036854775807L          \\\n+   %{cpp_cpu}\"\n+\n+/* ia64-specific options for gas */\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-x %{mconstant-gp} %{mauto-pic}\"\n+\n+/* Define this for shared library support. */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{shared:-shared} \\\n+%{!shared: \\\n+  %{!static: \\\n+    %{rdynamic:-export-dynamic} \\\n+    %{!dynamic-linker:-dynamic-linker /usr/lib/ia64l64/libc.so.1}} \\\n+    %{static:-static}}\"\n+\n+#define DONT_USE_BUILTIN_SETJMP\n+#define JMP_BUF_SIZE  85\n+\n+/* Output any profiling code before the prologue.  */\n+\n+#undef PROFILE_BEFORE_PROLOGUE\n+#define PROFILE_BEFORE_PROLOGUE 1\n+\n+/* A C statement or compound statement to output to FILE some assembler code to\n+   call the profiling subroutine `mcount'.  \n+\n+   FIXME this is not supported until xlC supports it and can thus tell us\n+   how to do it.\n+*/\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+/* Tell the linker where to find the crt*.o files. */\n+\n+#ifndef CROSS_COMPILE\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX \"/usr/lib/ia64l64/\"\n+#endif\n+\n+/* Override SELECT_SECTION and SELECT_RTX_SECTION from config/ia64/sysv4.h;  \n+   these definitions ignore flag_pic as if it were always set; \n+   it is illegal to have relocations in shared segments on AIX.  */\n+\n+/* A C statement or statements to switch to the appropriate\n+   section for output of DECL.  DECL is either a `VAR_DECL' node\n+   or a constant of some sort.  RELOC indicates whether forming\n+   the initial value of DECL requires link-time relocations.  */\n+\n+#undef SELECT_SECTION\n+#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! flag_writable_strings)\t\t\t\t\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (XSTR (XEXP (DECL_RTL (DECL), 0), 0)[0]\t\t\t\\\n+\t  == SDATA_NAME_FLAG_CHAR)\t\t\t\t\t\\\n+        sdata_section ();\t\t\t\t\t\t\\\n+      /* ??? We need the extra ! RELOC check, because the default is to \\\n+\t only check RELOC if flag_pic is set, and we don't set flag_pic \\\n+\t (yet?).  */\t\t\t\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC) && ! (RELOC))\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  /* This could be a CONSTRUCTOR containing ADDR_EXPR of a VAR_DECL,\t\\\n+     in which case we can't put it in a shared library rodata.  */\t\\\n+  else if (RELOC)                                                       \\\n+    data_section ();\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    const_section ();\t\t\t\t\t\t\t\\\n+}\n+\n+/* Similarly for constant pool data.  */\n+\n+extern unsigned int ia64_section_threshold;\n+#undef SELECT_RTX_SECTION\n+#define SELECT_RTX_SECTION(MODE, RTX)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\t\\\n+      && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\t\\\n+    sdata_section ();\t\t\t\t\t\t\t\\\n+  else if (symbolic_operand ((RTX), (MODE)))\t\t                \\\n+    data_section ();\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    const_section ();\t\t\t\t\t\t\t\\\n+}\n+\n+#undef UNIQUE_SECTION\n+#define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int len;\t\t\t\t\t\t\t\\\n+      int sec;\t\t\t\t\t\t\t\\\n+      const char *name;\t\t\t\t\t\t\\\n+      char *string;\t\t\t\t\t\t\\\n+      const char *prefix;\t\t\t\t\t\\\n+      static const char *prefixes[/*4*/3][2] =\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n+\t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\\n+\t{ \".data.\",   \".gnu.linkonce.d.\" }\t\t\t\\\n+\t/* Do not generate unique sections for uninitialised \t\\\n+\t   data since we do not have support for this in the    \\\n+\t   linker scripts yet...\t\t\t\t\\\n+        ,{ \".bss.\",    \".gnu.linkonce.b.\" }  */\t\t\t\\\n+      };\t\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+\tsec = 0;\t\t\t\t\t\t\\\n+  /*  else if (DECL_INITIAL (DECL) == 0\t\t\t\t\\\n+\t       || DECL_INITIAL (DECL) == error_mark_node)\t\\\n+        sec =  3; */\t\t\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC) && ! (RELOC))\\\n+\tsec = 1;\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tsec = 2;\t\t\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      name   = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+      /* Strip off any encoding in name.  */\t\t\t\\\n+      STRIP_NAME_ENCODING (name, name);\t\t\t\t\\\n+      prefix = prefixes[sec][DECL_ONE_ONLY(DECL)];\t\t\\\n+      len    = strlen (name) + strlen (prefix);\t\t\t\\\n+      string = alloca (len + 1);\t\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n+      \t\t\t\t\t\t\t\t\\\n+      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Override ia64/sysv4.h setting with that used by AIX5. */\n+#undef WCHAR_TYPE\n+#ifdef __64BIT__\n+#define WCHAR_TYPE \"unsigned int\"\n+#else\n+#define WCHAR_TYPE \"unsigned short\"\n+#endif\n+\n+/* Have to get rid of the system's definition so that we can use gcc's\n+   instead. */\n+#include <sys/machine.h>\n+#undef REG_SIZE\n+\n+/* Define the `__builtin_va_list' type for AIX.  Use char* b/c that's what the\n+   system headers expect.  */\n+#define BUILD_VA_LIST_TYPE(VALIST) \\\n+  (VALIST) = build_pointer_type(char_type_node)\n+\n+/* End of aix.h */"}, {"sha": "4b94b7f69533739b376767e58ae4cae1195bbaec", "filename": "gcc/config/ia64/crti.asm", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrti.asm?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -0,0 +1,66 @@\n+#   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+#   Written By Timothy Wall\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just make a stack frame for the contents of the .fini and\n+# .init sections.  Users may put any desired instructions in those\n+# sections.\n+\n+\t.file\t\t\"crti.asm\"\n+\n+\t.section\t\".init\"\n+\t.align 16\n+\t.global\t_init#\n+_init:\n+\t.prologue 14, 33\n+\t.save ar.pfs, r34\n+\talloc\tr34 = ar.pfs, 0, 4, 0, 0\n+\t.vframe r35\n+\tmov\tr35 = r12\n+\t.save rp, r33\n+\tmov\tr33 = b0\n+\t.body\n+\t\n+\t.section\t\".fini\"\n+\t.align\t16\n+\t.global\t_fini#\n+_fini:\n+\t.prologue 14, 33\n+\t.save ar.pfs, r34\n+\talloc\tr34 = ar.pfs, 0, 4, 0, 0\n+\t.vframe r35\n+\tmov\tr35 = r12\n+\t.save rp, r33\n+\tmov\tr33 = b0\n+\t.body\n+\t\n+# end of crti.asm"}, {"sha": "0b45d380aad9f2aaf6e2414e8095cb9404e573ff", "filename": "gcc/config/ia64/crtn.asm", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtn.asm?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -0,0 +1,56 @@\n+#   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+#   Written By Timothy Wall\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just makes sure that the .fini and .init sections do in\n+# fact return.  Users may put any desired instructions in those sections.\n+# This file is the last thing linked into any executable.\n+\n+\t.file\t\t\"crtn.asm\"\n+\n+\t.section\t\".init\"\n+\t;;\n+\tmov\tar.pfs = r34\n+\tmov\tb0 = r33\n+\t.restore sp\n+\tmov\tr12 = r35\n+\tbr.ret.sptk.many b0\n+\t\n+\t.section\t\".fini\"\n+\t;;\n+\tmov\tar.pfs = r34\n+\tmov\tb0 = r33\n+\t.restore sp\n+\tmov\tr12 = r35\n+\tbr.ret.sptk.many b0\n+\n+# end of crtn.asm"}, {"sha": "2e738f9b9e17ef3ec66472db0dec48e6ab476735", "filename": "gcc/config/ia64/t-aix", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-aix?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -0,0 +1,19 @@\n+# AIX support \n+\n+# Compile crtbeginS.o and crtendS.o with pic.\n+CRTSTUFF_T_CFLAGS_S = -fPIC\n+# Compile libgcc2.a with pic and defines required by AIX headers\n+TARGET_LIBGCC2_CFLAGS = -fPIC -D__64BIT__ -D_LONG_LONG -D_IA64 -D__int128=__size128_t\n+LIB2ADDEH += $(srcdir)/config/ia64/unwind-aix.c\n+\n+# Add crt[in].o to the list defined in t-ia64.  These files provide\n+# endpoints for crtbegin/end.\n+\n+EXTRA_PARTS=crti.o crtn.o crtbegin.o crtend.o crtbeginS.o crtendS.o\n+\n+crti.o: $(srcdir)/config/ia64/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -o crti.o -x assembler $(srcdir)/config/ia64/crti.asm\n+crtn.o: $(srcdir)/config/ia64/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -o crtn.o -x assembler $(srcdir)/config/ia64/crtn.asm\n+\n+# end t-aix"}, {"sha": "b1302a8159697d110c7fbe6d15fdaf5ab53a4b51", "filename": "gcc/config/ia64/unwind-aix.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177db4bbe9370c05dbcd18220f4c927aea7c94b/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-aix.c?ref=c177db4bbe9370c05dbcd18220f4c927aea7c94b", "patch": "@@ -0,0 +1,120 @@\n+/* Implements unwind table entry lookup for AIX (cf. fde-glibc.c). \n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Timothy Wall <twall@redhat.com>\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"unwind.h\"\n+#include \"unwind-ia64.h\"\n+\n+#include <dlfcn.h>\n+#include <link.h>\n+#include <sys/mman.h>\n+\n+static struct unw_table_entry *\n+find_fde_for_dso (Elf64_Addr pc, rt_link_map *map,\n+                  unsigned long* pseg_base, unsigned long* pgp)\n+{\n+  rt_segment *seg;\n+  Elf64_Addr seg_base;\n+  struct unw_table_entry *f_base;\n+  size_t lo, hi;\n+  \n+  /* See if PC falls into one of the loaded segments.  */\n+  for (seg = map->l_segments; seg; seg = (rt_segment *)seg->s_next) \n+    {\n+      if (pc >= seg->s_map_addr && pc < seg->s_map_addr + seg->s_mapsz)\n+        break;\n+    }\n+  if (!seg) \n+    return NULL;\n+  \n+  /* Search for the entry within the unwind table.  */\n+  f_base = (struct unw_table_entry *) (map->l_unwind_table);\n+  seg_base = (Elf64_Addr) seg->s_map_addr;\n+  lo = 0;\n+  hi = map->l_unwind_sz / sizeof (struct unw_table_entry);\n+\n+  while (lo < hi)\n+    {\n+      size_t mid = (lo + hi) / 2;\n+      struct unw_table_entry *f = f_base + mid;\n+\n+      if (pc < f->start_offset + seg_base)\n+        hi = mid;\n+      else if (pc >= f->end_offset + seg_base)\n+        lo = mid + 1;\n+      else {\n+        /* AIX executables are *always* dynamic.  Look up GP for this\n+           object. */ \n+        Elf64_Dyn *dyn = map->l_ld;\n+        *pgp = 0;\n+        for (; dyn->d_tag != DT_NULL ; dyn++) \n+          {\n+            if (dyn->d_tag == DT_PLTGOT)\n+              {\n+                *pgp = dyn->d_un.d_ptr;\n+                break;\n+              }\n+          }\n+        *pseg_base = seg_base;\n+        return f;\n+      }\n+    }\n+  return NULL;\n+}\n+\n+/* Return a pointer to the unwind table entry for the function containing\n+   PC. */  \n+struct unw_table_entry *\n+_Unwind_FindTableEntry (void *pc, unsigned long *pseg_base, unsigned long *pgp)\n+{\n+  extern rt_r_debug _r_debug;\n+  struct unw_table_entry *ret;\n+  rt_link_map *map = _r_debug.r_map; /* address of link map */\n+\n+  /* Check the main application first, hoping that most of the user's\n+     code is there instead of in some library.  */\n+  ret = find_fde_for_dso ((Elf64_Addr)pc, map, pseg_base, pgp);\n+  if (ret) \n+    {\n+      /* If we're in the main application, use the current GP value. */\n+      register unsigned long gp __asm__(\"gp\");\n+      *pgp = gp;\n+      return ret;\n+    }\n+\n+  /* FIXME need a DSO lock mechanism for AIX here, to ensure shared\n+     libraries aren't changed while we're examining them.  */\n+\n+  for (map = _r_debug.r_map; map; map = map->l_next)\n+    {\n+      /* Skip the main application's entry.  */\n+      if (!map->l_name)\n+      continue;\n+      ret = find_fde_for_dso ((Elf64_Addr)pc, map, pseg_base, pgp);\n+      if (ret)\n+      break;\n+    }\n+\n+  /* FIXME need a DSO unlock mechanism for AIX here.  */\n+\n+  return ret;\n+}"}]}