{"sha": "18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiYTNjZTdlM2YzZDIyMGJjYTgyYTFlZGVhZGY0YTFkYjAxOWU3Yw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-09-17T13:26:43Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-09-17T13:26:43Z"}, "message": "re PR tree-optimization/43432 (Missed vectorization: \"complicated access pattern\" for increasing and decreasing data indexing)\n\n\tPR tree-optimization/43432\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_access):\n\tAccept backwards consecutive accesses.\n\t(vect_create_data_ref_ptr): If step is negative generate\n\tdecreasing IVs.\n\t* tree-vect-stmts.c (vectorizable_store): Reject negative steps.\n\t(perm_mask_for_reverse, reverse_vec_elements): New functions.\n\t(vectorizable_load): Handle loads with negative steps when easily\n\tpossible.\n\ntestsuite/\n\tPR tree-optimization/43432\n\t* lib/target-supports.exp (check_effective_target_vect_perm_byte,\n\tcheck_effective_target_vect_perm_short): New predicates.\n\t(check_effective_target_vect_perm): Include x86_64.\n\t* gcc.dg/vect/pr43432.c: New test.\n\t* gcc.dg/vect/vect-114.c: Adjust.\n\t* gcc.dg/vect/vect-15.c: Ditto.\n\t* gcc.dg/vect/slp-perm-8.c: Use new predicate.\n\t* gcc.dg/vect/slp-perm-9.c: Ditto.\n\nFrom-SVN: r164367", "tree": {"sha": "724f8c663f3db02bdbd8dae5e34e5ecb48d6bced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/724f8c663f3db02bdbd8dae5e34e5ecb48d6bced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c588abff3db7852724edf638a795b7a37f70f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c588abff3db7852724edf638a795b7a37f70f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c588abff3db7852724edf638a795b7a37f70f2b"}], "stats": {"total": 209, "additions": 202, "deletions": 7}, "files": [{"sha": "dd29405e0acfa293721202487c7a209ada6d1e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -1,3 +1,15 @@\n+2010-09-17  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43432\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_access):\n+\tAccept backwards consecutive accesses.\n+\t(vect_create_data_ref_ptr): If step is negative generate\n+\tdecreasing IVs.\n+\t* tree-vect-stmts.c (vectorizable_store): Reject negative steps.\n+\t(perm_mask_for_reverse, reverse_vec_elements): New functions.\n+\t(vectorizable_load): Handle loads with negative steps when easily\n+\tpossible.\n+\n 2010-09-03  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (compute_ltrans_boundary): Use const_value_known."}, {"sha": "55f05f4c6f502cf6c1692b2f74765e42f58cdf06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -1,3 +1,15 @@\n+2010-09-17  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43432\n+\t* lib/target-supports.exp (check_effective_target_vect_perm_byte,\n+\tcheck_effective_target_vect_perm_short): New predicates.\n+\t(check_effective_target_vect_perm): Include x86_64.\n+\t* gcc.dg/vect/pr43432.c: New test.\n+\t* gcc.dg/vect/vect-114.c: Adjust.\n+\t* gcc.dg/vect/vect-15.c: Ditto.\n+\t* gcc.dg/vect/slp-perm-8.c: Use new predicate.\n+\t* gcc.dg/vect/slp-perm-9.c: Ditto.\n+\n 2010-09-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR testsuite/45692\t"}, {"sha": "3070318e14840afb1e436f4147b82d294e4e4c8a", "filename": "gcc/testsuite/gcc.dg/vect/pr43432.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-options \"-O3 -ffast-math -fdump-tree-vect-details\" } */\n+\n+\n+void vector_fmul_reverse_c(float *dst, const float *src0, const float *src1,\n+int len){\n+    int i;\n+    src1 += len-1;\n+    for(i=0; i<len; i++)\n+        dst[i] = src0[i] * src1[-i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "deec308449bd814912bde8ba6d3a2e02f94ef5f9", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -53,7 +53,7 @@ int main (int argc, const char* argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_perm_byte } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm_byte } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "f4387299622333d410c42b0fe68406c24a536d3e", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -54,7 +54,7 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target vect_perm_short } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "f9132acd06d1c6cb2eb6ca6ab88851030849df27", "filename": "gcc/testsuite/gcc.dg/vect/vect-114.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -34,6 +34,7 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_perm } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "87853c1248e5c8202d35c96445b8ca1b45fa9e0d", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -35,5 +35,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c03b9f68e8e0313592beb1cbd5946b66af224e25", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -2425,14 +2425,57 @@ proc check_effective_target_vect_perm { } {\n     } else {\n         set et_vect_perm_saved 0\n         if { [istarget powerpc*-*-*]\n-             || [istarget spu-*-*] } {\n+             || [istarget spu-*-*]\n+\t     || [istarget x86_64-*-*] } {\n             set et_vect_perm_saved 1\n         }\n     }\n     verbose \"check_effective_target_vect_perm: returning $et_vect_perm_saved\" 2\n     return $et_vect_perm_saved\n }\n \n+# Return 1 if the target plus current options supports vector permutation\n+# on byte-sized elements, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_perm_byte { } {\n+    global et_vect_perm_byte\n+\n+    if [info exists et_vect_perm_byte_saved] {\n+        verbose \"check_effective_target_vect_perm_byte: using cached result\" 2\n+    } else {\n+        set et_vect_perm_byte_saved 0\n+        if { [istarget powerpc*-*-*]\n+             || [istarget spu-*-*] } {\n+            set et_vect_perm_byte_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_vect_perm_byte: returning $et_vect_perm_byte_saved\" 2\n+    return $et_vect_perm_byte_saved\n+}\n+\n+# Return 1 if the target plus current options supports vector permutation\n+# on short-sized elements, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_perm_short { } {\n+    global et_vect_perm_short\n+\n+    if [info exists et_vect_perm_short_saved] {\n+        verbose \"check_effective_target_vect_perm_short: using cached result\" 2\n+    } else {\n+        set et_vect_perm_short_saved 0\n+        if { [istarget powerpc*-*-*]\n+             || [istarget spu-*-*] } {\n+            set et_vect_perm_short_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_vect_perm_short: returning $et_vect_perm_short_saved\" 2\n+    return $et_vect_perm_short_saved\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # widening summation of *short* args into *int* result, 0 otherwise.\n #"}, {"sha": "71825137cd7797e2010601e91362ffa97db3ffdc", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -2287,7 +2287,9 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n     }\n \n   /* Consecutive?  */\n-  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type)))\n+  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type))\n+      || (dr_step < 0\n+\t  && !compare_tree_int (TYPE_SIZE_UNIT (scalar_type), -dr_step)))\n     {\n       /* Mark that it is not interleaving.  */\n       DR_GROUP_FIRST_DR (vinfo_for_stmt (stmt)) = NULL;\n@@ -2970,6 +2972,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   tree vptr;\n   gimple_stmt_iterator incr_gsi;\n   bool insert_after;\n+  bool negative;\n   tree indx_before_incr, indx_after_incr;\n   gimple incr;\n   tree step;\n@@ -3002,6 +3005,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n     *inv_p = true;\n   else\n     *inv_p = false;\n+  negative = tree_int_cst_compare (step, size_zero_node) < 0;\n \n   /* Create an expression for the first address accessed by this load\n      in LOOP.  */\n@@ -3160,6 +3164,8 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t LOOP is zero. In this case the step here is also zero.  */\n       if (*inv_p)\n \tstep = size_zero_node;\n+      else if (negative)\n+\tstep = fold_build1 (NEGATE_EXPR, TREE_TYPE (step), step);\n \n       standard_iv_increment_position (loop, &incr_gsi, &insert_after);\n "}, {"sha": "f562ed2d528f7b845fa7df066af1f95281bd6601", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=18ba3ce7e3f3d220bca82a1edeadf4a1db019e7c", "patch": "@@ -3145,6 +3145,13 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n+  if (tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"negative step for store.\");\n+      return false;\n+    }\n+\n   if (STMT_VINFO_STRIDED_ACCESS (stmt_info))\n     {\n       strided_store = true;\n@@ -3425,6 +3432,68 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   return true;\n }\n \n+/* Given a vector type VECTYPE returns a builtin DECL to be used\n+   for vector permutation and stores a mask into *MASK that implements\n+   reversal of the vector elements.  If that is impossible to do\n+   returns NULL (and *MASK is unchanged).  */\n+\n+static tree\n+perm_mask_for_reverse (tree vectype, tree *mask)\n+{\n+  tree builtin_decl;\n+  tree mask_element_type, mask_type;\n+  tree mask_vec = NULL;\n+  int i;\n+  int nunits;\n+  if (!targetm.vectorize.builtin_vec_perm)\n+    return NULL;\n+\n+  builtin_decl = targetm.vectorize.builtin_vec_perm (vectype,\n+                                                     &mask_element_type);\n+  if (!builtin_decl || !mask_element_type)\n+    return NULL;\n+\n+  mask_type = get_vectype_for_scalar_type (mask_element_type);\n+  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  if (TYPE_VECTOR_SUBPARTS (vectype) != TYPE_VECTOR_SUBPARTS (mask_type))\n+    return NULL;\n+\n+  for (i = 0; i < nunits; i++)\n+    mask_vec = tree_cons (NULL, build_int_cst (mask_element_type, i), mask_vec);\n+  mask_vec = build_vector (mask_type, mask_vec);\n+\n+  if (!targetm.vectorize.builtin_vec_perm_ok (vectype, mask_vec))\n+    return NULL;\n+  if (mask)\n+    *mask = mask_vec;\n+  return builtin_decl;\n+}\n+\n+/* Given a vector variable X, that was generated for the scalar LHS of\n+   STMT, generate instructions to reverse the vector elements of X,\n+   insert them a *GSI and return the permuted vector variable.  */\n+\n+static tree\n+reverse_vec_elements (tree x, gimple stmt, gimple_stmt_iterator *gsi)\n+{\n+  tree vectype = TREE_TYPE (x);\n+  tree mask_vec, builtin_decl;\n+  tree perm_dest, data_ref;\n+  gimple perm_stmt;\n+\n+  builtin_decl = perm_mask_for_reverse (vectype, &mask_vec);\n+\n+  perm_dest = vect_create_destination_var (gimple_assign_lhs (stmt), vectype);\n+\n+  /* Generate the permute statement.  */\n+  perm_stmt = gimple_build_call (builtin_decl, 3, x, x, mask_vec);\n+  data_ref = make_ssa_name (perm_dest, perm_stmt);\n+  gimple_call_set_lhs (perm_stmt, data_ref);\n+  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\n+  return data_ref;\n+}\n+\n /* vectorizable_load.\n \n    Check if STMT reads a non scalar data-ref (array/pointer/structure) that\n@@ -3467,6 +3536,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   gimple first_stmt;\n   tree scalar_type;\n   bool inv_p;\n+  bool negative;\n   bool compute_in_loop = false;\n   struct loop *at_loop;\n   int vec_num;\n@@ -3529,6 +3599,14 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n+  negative = tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0;\n+  if (negative && ncopies > 1)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"multiple types with negative step.\");\n+      return false;\n+    }\n+\n   scalar_type = TREE_TYPE (DR_REF (dr));\n   mode = TYPE_MODE (vectype);\n \n@@ -3563,6 +3641,25 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \treturn false;\n     }\n \n+  if (negative)\n+    {\n+      gcc_assert (!strided_load);\n+      alignment_support_scheme = vect_supportable_dr_alignment (dr, false);\n+      if (alignment_support_scheme != dr_aligned\n+\t  && alignment_support_scheme != dr_unaligned_supported)\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"negative step but alignment required.\");\n+\t  return false;\n+\t}\n+      if (!perm_mask_for_reverse (vectype, NULL))\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"negative step and reversing not supported.\");\n+\t  return false;\n+\t}\n+    }\n+\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n@@ -3737,6 +3834,9 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   else\n     at_loop = loop;\n \n+  if (negative)\n+    offset = size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1);\n+\n   prev_stmt_info = NULL;\n   for (j = 0; j < ncopies; j++)\n     {\n@@ -3925,6 +4025,12 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\tgcc_unreachable (); /* FORNOW. */\n \t    }\n \n+\t  if (negative)\n+\t    {\n+\t      new_temp = reverse_vec_elements (new_temp, stmt, gsi);\n+\t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n+\t    }\n+\n \t  /* Collect vector loads and later create their permutation in\n \t     vect_transform_strided_load ().  */\n           if (strided_load || slp_perm)"}]}