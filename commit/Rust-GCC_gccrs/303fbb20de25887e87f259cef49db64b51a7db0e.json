{"sha": "303fbb20de25887e87f259cef49db64b51a7db0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZmJiMjBkZTI1ODg3ZTg3ZjI1OWNlZjQ5ZGI2NGI1MWE3ZGIwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T09:46:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T09:46:54Z"}, "message": "[multiple changes]\n\n2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n\n\t* debug.adb, sem_prag.adb, par-ch2.adb, sem_attr.adb, gnat1drv.adb,\n\texp_disp.adb, opt.ads, sem_ch13.adb (Relaxed_RM_Semantics): New flag.\n\tEnable this flag in CodePeer mode, and also via -gnatd.M.\n\tReplace some uses of CodePeer_Mode by Relaxed_RM_Semantics.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Check_Constrained_Object): If a subtype is created\n\tfrom the renamed object in an object renaming declaration with\n\tan unconstrained nominal subtype, freeze the created subtype at\n\tonce, to prevent order of elaboration issues in the backend.\n\n2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Size_OK): Refine setting of Max_Aggr_Size\n\tin particular in CodePeer mode.\n\n2013-04-11  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_ugn.texi: Add documentation for backup copies of project\n\tfiles for gnatname.\n\nFrom-SVN: r197751", "tree": {"sha": "39f53e685d07ad7a16d3eb13e84b0b610214212a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f53e685d07ad7a16d3eb13e84b0b610214212a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303fbb20de25887e87f259cef49db64b51a7db0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303fbb20de25887e87f259cef49db64b51a7db0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303fbb20de25887e87f259cef49db64b51a7db0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303fbb20de25887e87f259cef49db64b51a7db0e/comments", "author": null, "committer": null, "parents": [{"sha": "165bdb4b49c8c03ccc7b83c7bb216b6494754199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165bdb4b49c8c03ccc7b83c7bb216b6494754199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165bdb4b49c8c03ccc7b83c7bb216b6494754199"}], "stats": {"total": 188, "additions": 136, "deletions": 52}, "files": [{"sha": "07f04f0c930eabce9bc35b93f2ded0427ee12802", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -1,3 +1,27 @@\n+2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* debug.adb, sem_prag.adb, par-ch2.adb, sem_attr.adb, gnat1drv.adb,\n+\texp_disp.adb, opt.ads, sem_ch13.adb (Relaxed_RM_Semantics): New flag.\n+\tEnable this flag in CodePeer mode, and also via -gnatd.M.\n+\tReplace some uses of CodePeer_Mode by Relaxed_RM_Semantics.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Check_Constrained_Object): If a subtype is created\n+\tfrom the renamed object in an object renaming declaration with\n+\tan unconstrained nominal subtype, freeze the created subtype at\n+\tonce, to prevent order of elaboration issues in the backend.\n+\n+2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Size_OK): Refine setting of Max_Aggr_Size\n+\tin particular in CodePeer mode.\n+\n+2013-04-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_ugn.texi: Add documentation for backup copies of project\n+\tfiles for gnatname.\n+\n 2013-04-11  Tristan Gingold  <gingold@adacore.com>\n \n \t* gnat_rm.texi: Add Detect_BLocking in the ravenscar profile\n@@ -7,7 +31,8 @@\n \n \t* gnatname.adb (Scan_Args): Recognize new switch --no-backup\n \t(Usage): Add line for --no-backup.\n-\t* opt.ads (No_Nackup): New Boolean variable, initialized to False.\n+\t* opt.ads (No_Backup): New Boolean variable, initialized to False.\n+\t(Ada_Version_Default): Switch to Ada 2012 by default.\n \t* prj-makr.adb (Initialize): Create a backup for an existing\n \tproject file if gnatname is not invoked with --no-backup.\n "}, {"sha": "6d0a53f9bc5b2253fca2f41a9a9de99d680fc6f2", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -126,11 +126,11 @@ package body Debug is\n    --  d.F  Alfa mode\n    --  d.G\n    --  d.H  Standard package only mode for gnat2why\n-   --  d.I  SCIL generation mode\n+   --  d.I\n    --  d.J  Disable parallel SCIL generation mode\n    --  d.K  Alfa detection only mode for gnat2why\n    --  d.L  Depend on back end for limited types in if and case expressions\n-   --  d.M\n+   --  d.M  Relaxed RM semantics\n    --  d.N  Add node to all entities\n    --  d.O  Dump internal SCO tables\n    --  d.P  Previous (non-optimized) handling of length comparisons\n@@ -625,6 +625,9 @@ package body Debug is\n    --       case expansion, leaving it up to the back end to handle conditional\n    --       expressions correctly.\n \n+   --  d.M  Relaxed RM semantics. This flag sets Opt.Relaxed_RM_Semantics\n+   --       See Opt.Relaxed_RM_Semantics for more details.\n+\n    --  d.N  Enlarge entities by one node (but don't attempt to use this extra\n    --       node for storage of any flags or fields). This can be used to do\n    --       experiments on the impact of increasing entity sizes."}, {"sha": "c80ecd5a3a254579a08489bfe04abc641ebdc112", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -313,31 +313,11 @@ package body Exp_Aggr is\n       Lov  : Uint;\n       Hiv  : Uint;\n \n-      --  The following constant determines the maximum size of an array\n-      --  aggregate produced by converting named to positional notation (e.g.\n-      --  from others clauses). This avoids running away with attempts to\n-      --  convert huge aggregates, which hit memory limits in the backend.\n-\n-      --  The normal limit is 5000, but we increase this limit to 2**24 (about\n-      --  16 million) if Restrictions (No_Elaboration_Code) or Restrictions\n-      --  (No_Implicit_Loops) is specified, since in either case we are at\n-      --  risk of declaring the program illegal because of this limit. We also\n-      --  increase the limit when Static_Elaboration_Desired, given that this\n-      --  means that objects are intended to be placed in data memory.\n-\n-      --  We also increase the limit if the aggregate is for a packed two-\n-      --  dimensional array, because if components are static it is much more\n-      --  efficient to construct a one-dimensional equivalent array with static\n-      --  components.\n-\n-      Max_Aggr_Size : constant Nat :=\n-        5000 + (2 ** 24 - 5000) *\n-          Boolean'Pos\n-            (Restriction_Active (No_Elaboration_Code)\n-             or else Restriction_Active (No_Implicit_Loops)\n-             or else Is_Two_Dim_Packed_Array (Typ)\n-             or else ((Ekind (Current_Scope) = E_Package\n-                       and then Static_Elaboration_Desired (Current_Scope))));\n+      Max_Aggr_Size : Nat;\n+      --  Determines the maximum size of an array aggregate produced by\n+      --  converting named to positional notation (e.g. from others clauses).\n+      --  This avoids running away with attempts to convert huge aggregates,\n+      --  which hit memory limits in the backend.\n \n       function Component_Count (T : Entity_Id) return Int;\n       --  The limit is applied to the total number of components that the\n@@ -396,6 +376,36 @@ package body Exp_Aggr is\n    --  Start of processing for Aggr_Size_OK\n \n    begin\n+      --  The normal aggregate limit is 5000, but we increase this limit to\n+      --  2**24 (about 16 million) if Restrictions (No_Elaboration_Code) or\n+      --  Restrictions (No_Implicit_Loops) is specified, since in either case\n+      --  we are at risk of declaring the program illegal because of this\n+      --  limit. We also increase the limit when Static_Elaboration_Desired,\n+      --  given that this means that objects are intended to be placed in data\n+      --  memory.\n+\n+      --  We also increase the limit if the aggregate is for a packed two-\n+      --  dimensional array, because if components are static it is much more\n+      --  efficient to construct a one-dimensional equivalent array with static\n+      --  components.\n+\n+      --  Finally, we use a small limit in CodePeer mode where we favor loops\n+      --  instead of thousands of single assignments (from large aggregates).\n+\n+      Max_Aggr_Size := 5000;\n+\n+      if CodePeer_Mode then\n+         Max_Aggr_Size := 100;\n+\n+      elsif Restriction_Active (No_Elaboration_Code)\n+        or else Restriction_Active (No_Implicit_Loops)\n+        or else Is_Two_Dim_Packed_Array (Typ)\n+        or else ((Ekind (Current_Scope) = E_Package\n+                 and then Static_Elaboration_Desired (Current_Scope)))\n+      then\n+         Max_Aggr_Size := 2 ** 24;\n+      end if;\n+\n       Siz  := Component_Count (Component_Type (Typ));\n \n       Indx := First_Index (Typ);"}, {"sha": "b036229ae8cf3f09bac07d2189dab9319a96e87c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -8382,10 +8382,10 @@ package body Exp_Disp is\n          --  excluded from this check because interfaces must be visible in\n          --  the public and private part (RM 7.3 (7.3/2))\n \n-         --  We disable this check in CodePeer mode, to accommodate legacy\n-         --  Ada code.\n+         --  We disable this check in Relaxed_RM_Semantics mode, to\n+         --  accommodate legacy Ada code.\n \n-         if not CodePeer_Mode\n+         if not Relaxed_RM_Semantics\n            and then Is_Abstract_Type (Typ)\n            and then Is_Abstract_Subprogram (Prim)\n            and then Present (Alias (Prim))"}, {"sha": "2680b4f7b8d7f5e42f881fde55983243426daa4a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -110,11 +110,10 @@ procedure Gnat1drv is\n \n    procedure Adjust_Global_Switches is\n    begin\n-      --  Debug flag -gnatd.I is a synonym for Generate_SCIL and requires code\n-      --  generation.\n+      --  -gnatd.M enables Relaxed_RM_Semantics\n \n-      if Debug_Flag_Dot_II and then Operating_Mode = Generate_Code then\n-         Generate_SCIL := True;\n+      if Debug_Flag_Dot_MM then\n+         Relaxed_RM_Semantics := True;\n       end if;\n \n       --  Disable CodePeer_Mode in Check_Syntax, since we need front-end\n@@ -275,6 +274,13 @@ procedure Gnat1drv is\n \n          Force_ALI_Tree_File := True;\n          Try_Semantics := True;\n+\n+         --  Make the Ada front-end more liberal to support other Ada compilers\n+         Relaxed_RM_Semantics := True;\n+      end if;\n+\n+      if Relaxed_RM_Semantics then\n+         Overriding_Renamings := True;\n       end if;\n \n       --  Set switches for formal verification mode"}, {"sha": "506356b51a6a9d865737a1c9fceb998a73225026", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -12282,6 +12282,13 @@ Display Copyright and version, then exit disregarding all other options.\n If @option{--version} was not used, display usage, then exit disregarding\n all other options.\n \n+@item --subdirs=<dir>\n+Real object, library or exec directories are subdirectories <dir> of the\n+specified ones.\n+\n+@item --no-backup\n+Do not create a backup copy of an existing project file.\n+\n @item --and\n Start another section of directories/patterns.\n \n@@ -12328,6 +12335,9 @@ Specifying switch @option{^-D^/DIRS_FILE^} is equivalent to specifying as many\n switches @option{^-d^/SOURCE_DIRS^} as there are nonempty lines in\n @file{file}.\n \n+@item -eL\n+Follow symbolic links when processing project files.\n+\n @item ^-f^/FOREIGN_PATTERN=^@file{pattern}\n @cindex @option{^-f^/FOREIGN_PATTERN^} (@code{gnatname})\n Foreign patterns. Using this switch, it is possible to add sources of languages\n@@ -12354,6 +12364,10 @@ information. @file{proj} must be writable.\n There may be only one switch @option{^-P^/PROJECT_FILE^}.\n When a switch @option{^-P^/PROJECT_FILE^} is specified,\n no switch @option{^-c^/CONFIG_FILE^} may be specified.\n+On all platforms, except on VMS, when @code{gnatname} is invoked for an\n+existing project file <proj>.gpr, a backup copy of the project file is created\n+in the project directory with file name <proj>.gpr.saved_x. 'x' is the first\n+non negative number that makes this backup copy a new file.\n \n @item ^-v^/VERBOSE^\n @cindex @option{^-v^/VERBOSE^} (@code{gnatname})"}, {"sha": "e48eb00e47407d124935693b3bf01959586a9bb2", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -1188,6 +1188,11 @@ package Opt is\n    --  Set to True to enable compatibility mode with Rational compiler, and\n    --  to accept renamings of implicit operations in their own scope.\n \n+   Relaxed_RM_Semantics : Boolean := False;\n+   --  GNAT\n+   --  Set to True to ignore some Ada semantic error to help parse legacy\n+   --  Ada code for use in e.g. static analysis (such as CodePeer).\n+\n    Replace_In_Comments : Boolean := False;\n    --  GNATPREP\n    --  Set to True if -C switch used"}, {"sha": "62c6735d61030ff035560ffedb0fc7216a981675", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -493,9 +493,10 @@ package body Ch2 is\n       --  Ada RM terminology).\n \n       --  Since older GNAT versions did not generate this error, disable this\n-      --  message in codepeer mode to help legacy code using codepeer.\n+      --  message in Relaxed_RM_Semantics mode to help legacy code using e.g.\n+      --  codepeer.\n \n-      if Identifier_Seen and not Id_Present and not CodePeer_Mode then\n+      if Identifier_Seen and not Id_Present and not Relaxed_RM_Semantics then\n          Error_Msg_SC (\"|pragma argument identifier required here\");\n          Error_Msg_SC (\"\\since previous argument had identifier (RM 2.8(4))\");\n       end if;"}, {"sha": "ef9e4b952473b711f5f36f311f439b2e84bc4de1", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -2405,6 +2405,11 @@ package body Sem_Attr is\n          elsif not Comes_From_Source (N) then\n             null;\n \n+         elsif Relaxed_RM_Semantics\n+           and then Nkind (P) = N_Attribute_Reference\n+         then\n+            null;\n+\n          else\n             Error_Attr (\"invalid prefix for % attribute\", P);\n          end if;\n@@ -5011,6 +5016,11 @@ package body Sem_Attr is\n          then\n             null;\n \n+         elsif Relaxed_RM_Semantics\n+           and then Nkind (P) = N_Attribute_Reference\n+         then\n+            null;\n+\n          else\n             Error_Attr_P (\"invalid prefix for % attribute\");\n          end if;\n@@ -9180,15 +9190,12 @@ package body Sem_Attr is\n                   --  when within an instance, because any violations will have\n                   --  been caught by the compilation of the generic unit.\n \n-                  --  Note that we relax this check in CodePeer mode for\n-                  --  compatibility with legacy code, since CodePeer is an\n-                  --  Ada source code analyzer, not a strict compiler.\n-                  --  ??? Note that a better approach would be to have a\n-                  --  separate switch to relax this rule, and enable this\n-                  --  switch in CodePeer mode.\n+                  --  We relax this check in Relaxed_RM_Semantics mode for\n+                  --  compatibility with legacy code for use by Ada source\n+                  --  code analyzers (e.g. CodePeer).\n \n                   elsif Attr_Id = Attribute_Access\n-                    and then not CodePeer_Mode\n+                    and then not Relaxed_RM_Semantics\n                     and then not In_Instance\n                     and then Present (Enclosing_Generic_Unit (Entity (P)))\n                     and then Present (Enclosing_Generic_Body (N))"}, {"sha": "3b635744090202e6771d5a6a31c6cd9a4d8e57a2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -9002,7 +9002,9 @@ package body Sem_Ch13 is\n \n       procedure Too_Late is\n       begin\n-         Error_Msg_N (\"|representation item appears too late!\", N);\n+         if not Relaxed_RM_Semantics then\n+            Error_Msg_N (\"|representation item appears too late!\", N);\n+         end if;\n       end Too_Late;\n \n    --  Start of processing for Rep_Item_Too_Late\n@@ -9017,7 +9019,7 @@ package body Sem_Ch13 is\n \n         and then not From_With_Type (T)\n \n-        --  Exclude generated entitiesa (not coming from source). The common\n+        --  Exclude generated entities (not coming from source). The common\n         --  case is when we generate a renaming which prematurely freezes the\n         --  renamed internal entity, but we still want to be able to set copies\n         --  of attribute values such as Size/Alignment."}, {"sha": "06dddf54f5913ceb3d7176413977336f7a02f475", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -792,6 +792,12 @@ package body Sem_Ch8 is\n                      Make_Subtype_From_Expr (Nam, Typ)));\n                Rewrite (Subtype_Mark (N), New_Occurrence_Of (Subt, Loc));\n                Set_Etype (Nam, Subt);\n+\n+               --  Freeze subtype at once, to prevent order of elaboration\n+               --  issues in the backend. The renamed object exists, so its\n+               --  type is already frozen in any case.\n+\n+               Freeze_Before (N, Subt);\n             end if;\n          end if;\n       end Check_Constrained_Object;"}, {"sha": "4980bfd02c2c1739fe176a06514e7dba1d390bdf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303fbb20de25887e87f259cef49db64b51a7db0e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=303fbb20de25887e87f259cef49db64b51a7db0e", "patch": "@@ -1914,13 +1914,13 @@ package body Sem_Prag is\n          --  instance can be in a nested scope. The check that protected type\n          --  is itself a library-level declaration is done elsewhere.\n \n-         --  Note: we omit this check in Codepeer mode to properly handle code\n-         --  prior to AI-0033 (pragmas don't matter to codepeer in any case).\n+         --  Note: we omit this check in Relaxed_RM_Semantics mode to properly\n+         --  handle code prior to AI-0033.\n \n          if Inside_A_Generic then\n             if Ekind (Scope (Current_Scope)) = E_Generic_Package\n               and then In_Package_Body (Scope (Current_Scope))\n-              and then not CodePeer_Mode\n+              and then not Relaxed_RM_Semantics\n             then\n                Error_Pragma (\"pragma% cannot be used inside a generic\");\n             end if;\n@@ -3648,9 +3648,12 @@ package body Sem_Prag is\n          end if;\n \n          --  Check that we are not applying this to a specless body\n+         --  Relax this check if Relaxed_RM_Semantics to accomodate other Ada\n+         --  compilers.\n \n          if Is_Subprogram (E)\n            and then Nkind (Parent (Declaration_Node (E))) = N_Subprogram_Body\n+           and then not Relaxed_RM_Semantics\n          then\n             Error_Pragma\n               (\"pragma% requires separate spec and must come before body\");\n@@ -5996,7 +5999,9 @@ package body Sem_Prag is\n             Error_Pragma_Arg\n               (\"cannot export entity& that was previously imported\", Arg);\n \n-         elsif Present (Address_Clause (E)) and then not CodePeer_Mode then\n+         elsif Present (Address_Clause (E))\n+           and then not Relaxed_RM_Semantics\n+         then\n             Error_Pragma_Arg\n               (\"cannot export entity& that has an address clause\", Arg);\n          end if;"}]}