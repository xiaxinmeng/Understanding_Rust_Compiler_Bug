{"sha": "734f50238f863ae90d2e8caa2323aaa02380ff48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0ZjUwMjM4Zjg2M2FlOTBkMmU4Y2FhMjMyM2FhYTAyMzgwZmY0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-11-10T17:27:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-11-10T17:27:22Z"}, "message": "* many: Replace uses of __GXX_EXPERIMENTAL_CXX0X__ with __cplusplus.\n\nFrom-SVN: r193392", "tree": {"sha": "d9b336f73d8705f567b8e2871708f2dca7cadb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b336f73d8705f567b8e2871708f2dca7cadb44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/734f50238f863ae90d2e8caa2323aaa02380ff48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734f50238f863ae90d2e8caa2323aaa02380ff48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734f50238f863ae90d2e8caa2323aaa02380ff48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734f50238f863ae90d2e8caa2323aaa02380ff48/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3467ad5ce6f6e456699a44d563a7ab0bf576903b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3467ad5ce6f6e456699a44d563a7ab0bf576903b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3467ad5ce6f6e456699a44d563a7ab0bf576903b"}], "stats": {"total": 1689, "additions": 846, "deletions": 843}, "files": [{"sha": "9b483a3d20c29f7c71eb7425ddc8e64306cfc9a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -1,3 +1,7 @@\n+2012-11-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* many: Replace uses of __GXX_EXPERIMENTAL_CXX0X__ with __cplusplus.\n+\n 2012-11-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/54075"}, {"sha": "88fb2b8f7420ea8fb2792fd29fe69eeb95652c85", "filename": "libstdc++-v3/config/allocator/bitmap_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #include <ext/bitmap_allocator.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std\n {\n   /**"}, {"sha": "ef6abb777436e9ada32f3006482cfc2782666a4c", "filename": "libstdc++-v3/config/allocator/malloc_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #include <ext/malloc_allocator.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std\n {\n   /**"}, {"sha": "28397c2a077aa2bc923415fc74f6a06f693678e4", "filename": "libstdc++-v3/config/allocator/mt_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #include <ext/mt_allocator.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std\n {\n   /**"}, {"sha": "e65c9ad91a7a23b854ed2176fa727b2d5961d63e", "filename": "libstdc++-v3/config/allocator/new_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #include <ext/new_allocator.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std\n {\n   /**"}, {"sha": "83accffd4546ca99f366fdfcaf950c44723af228", "filename": "libstdc++-v3/config/allocator/pool_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #include <ext/pool_allocator.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std\n {\n   /**"}, {"sha": "9d2ab05c4c6d31e17df6cf38d4becd22bf92fb50", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -1701,7 +1701,6 @@ INCLUDE_FILE_PATTERNS  =\n PREDEFINED             = __cplusplus \\\n                          __GTHREADS \\\n                          _GLIBCXX_HAS_GTHREADS \\\n-                         __GXX_EXPERIMENTAL_CXX0X__ \\\n                          _GLIBCXX_INCLUDE_AS_CXX0X \\\n                          \"_GLIBCXX_PURE= \" \\\n                          \"_GLIBCXX_CONST= \" \\"}, {"sha": "20589f6722bc83b7c04ed60b12f8b0de5844a4a7", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -153,7 +153,7 @@\n and library\n features. See <a class=\"link\" href=\"using.html#manual.intro.using.flags\" title=\"Command Options\">dialect</a>\n options. The pre-defined symbol\n-<code class=\"constant\">__GXX_EXPERIMENTAL_CXX0X__</code> is used to check for the\n+<code class=\"constant\">__cplusplus</code> is used to check for the\n presence of the required flag.\n </p><p>\n This page describes the C++11 support in mainline GCC SVN, not in any"}, {"sha": "aae3aece62e8e9d59d151e89dc63d44bb439d9e1", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -26,7 +26,7 @@ In this implementation <literal>-std=gnu++11</literal> or\n and library\n features. See <link linkend=\"manual.intro.using.flags\">dialect</link>\n options. The pre-defined symbol\n-<constant>__GXX_EXPERIMENTAL_CXX0X__</constant> is used to check for the\n+<constant>__cplusplus</constant> is used to check for the\n presence of the required flag.\n </para>\n "}, {"sha": "2421791dc4d50b23c991be8623ed3a6ca619f12d", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -289,7 +289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef void element_type;\n     } _GLIBCXX_DEPRECATED;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<_Lock_policy _Lp>\n   template<typename _Tp>\n     inline"}, {"sha": "856a8d9486025017d61e0abb3c5e36f0da299eb4", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -35,7 +35,7 @@\n #include <bits/c++config.h>\n #include <bits/stl_pair.h>\n #include <bits/stl_iterator_base_types.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // adjacent_find\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n     bool\n     all_of(_IIter, _IIter, _Predicate);\n@@ -216,7 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _BIter2\n     copy_backward(_BIter1, _BIter1, _BIter2);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter, typename _Predicate>\n     _OIter\n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n@@ -258,7 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // find_first_of\n   // find_if\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n     _IIter\n     find_if_not(_IIter, _IIter, _Predicate);\n@@ -284,7 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void \n     inplace_merge(_BIter, _BIter, _BIter, _Compare);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _RAIter>\n     bool \n     is_heap(_RAIter, _RAIter);\n@@ -372,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // min_element\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     pair<const _Tp&, const _Tp&> \n     minmax(const _Tp&, const _Tp&);\n@@ -424,7 +424,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool \n     next_permutation(_BIter, _BIter, _Compare);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n     bool\n     none_of(_IIter, _IIter, _Predicate);\n@@ -443,7 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // partition\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter1,\n \t   typename _OIter2, typename _Predicate>\n     pair<_OIter1, _OIter2>\n@@ -531,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // set_symmetric_difference\n   // set_union\n \n-#if defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if (__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n   template<typename _RAIter, typename _UGenerator>\n     void\n     shuffle(_RAIter, _RAIter, _UGenerator&&);\n@@ -552,7 +552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp> \n     void \n     swap(_Tp&, _Tp&)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n \t            is_nothrow_move_assignable<_Tp>>::value)\n #endif\n@@ -561,7 +561,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, size_t _Nm>\n     void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     noexcept(noexcept(swap(*__a, *__b)))\n #endif\n     ;\n@@ -714,7 +714,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _RAIter, typename _Generator>\n     void \n     random_shuffle(_RAIter, _RAIter,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t   _Generator&&);\n #else\n \t\t   _Generator&);"}, {"sha": "9abadbb77cee5e8c57f2cfd5b8e2cbcb3921a3e9", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -30,7 +30,7 @@\n #ifndef _ALLOC_TRAITS_H\n #define _ALLOC_TRAITS_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <bits/ptr_traits.h>\n #include <ext/numeric_traits.h>"}, {"sha": "0989ad88cf0a0fa29939fedaed2a7c0d29277a8a", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __one != __two; }\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, bool\n     = __or_<is_copy_constructible<typename _Tp::value_type>,\n             is_nothrow_move_constructible<typename _Tp::value_type>>::value>"}, {"sha": "1e3426680fc1facfa136cc135915dee6e85d6a6f", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -40,7 +40,7 @@\n \n #include <ext/atomicity.h>\n #include <debug/debug.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -498,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Move construct string.\n        *  @param  __str  Source string.\n@@ -522,7 +522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Construct string as copy of a range.\n@@ -570,7 +570,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Move assign the value of @a str to this string.\n        *  @param  __str  Source string.\n@@ -596,7 +596,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->assign(__l.begin(), __l.size());\n \treturn *this;\n       }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       // Iterators:\n       /**\n@@ -673,7 +673,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n@@ -755,7 +755,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       resize(size_type __n)\n       { this->resize(__n, _CharT()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       ///  A non-binding request to reduce capacity() to size().\n       void\n       shrink_to_fit()\n@@ -890,7 +890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_data()[__n];\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read/write reference to the data at the first\n        *  element of the %string.\n@@ -955,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Append an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to be appended.\n@@ -964,7 +964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string&\n       operator+=(initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.size()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Append a string to this string.\n@@ -1022,7 +1022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string&\n       append(size_type __n, _CharT __c);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Append an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to append.\n@@ -1031,7 +1031,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string&\n       append(initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.size()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -1068,7 +1068,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string&\n       assign(const basic_string& __str);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Set value to contents of another string.\n        *  @param  __str  Source string to use.\n@@ -1083,7 +1083,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->swap(__str);\n \treturn *this;\n       }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Set value to a substring of a string.\n@@ -1159,7 +1159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         assign(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Set value to an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to assign.\n@@ -1168,7 +1168,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string&\n       assign(initializer_list<_CharT> __l)\n       { return this->assign(__l.begin(), __l.size()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Insert multiple characters.\n@@ -1204,7 +1204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Insert an initializer_list of characters.\n        *  @param __p  Iterator referencing location in string to insert at.\n@@ -1217,7 +1217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n \tthis->insert(__p - _M_ibegin(), __l.begin(), __l.size());\n       }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Insert value of a string.\n@@ -1399,7 +1399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       iterator\n       erase(iterator __first, iterator __last);\n  \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Remove the last character.\n        *\n@@ -1408,7 +1408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       pop_back()\n       { erase(size()-1, 1); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Replace characters with value from another string.\n@@ -1676,7 +1676,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n       \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Replace range of characters with initializer_list.\n        *  @param __i1  Iterator referencing start of range to replace.\n@@ -1694,7 +1694,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string& replace(iterator __i1, iterator __i2,\n \t\t\t    initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     private:\n       template<class _Integer>\n@@ -2426,7 +2426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __str;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n@@ -2813,7 +2813,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99) \\\n+#if ((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99) \\\n      && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))\n \n #include <ext/string_conversions.h>\n@@ -3030,9 +3030,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif /* __GXX_EXPERIMENTAL_CXX0X__ && _GLIBCXX_USE_C99 ... */\n+#endif /* C++11 && _GLIBCXX_USE_C99 ... */\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <bits/functional_hash.h>\n \n@@ -3094,6 +3094,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif /* __GXX_EXPERIMENTAL_CXX0X__ */\n+#endif // C++11\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "726ae6dfbf1ce0584c8ec869821f9d3b3ce6e3a6", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n     { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(initializer_list<_CharT> __l, const _Alloc& __a)"}, {"sha": "7dc00a1bc06904a80188801c7a39f5c62acbdbac", "filename": "libstdc++-v3/include/bits/c++0x_warning.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n #ifndef _CXX0X_WARNING_H\n #define _CXX0X_WARNING_H 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n #error This file requires compiler and library support for the \\\n ISO C++ 2011 standard. This support is currently experimental, and must be \\\n enabled with the -std=c++11 or -std=gnu++11 compiler options."}, {"sha": "279df04d82f7c92952977553f598bdc098cfd6f8", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -78,7 +78,7 @@\n # define _GLIBCXX_USE_DEPRECATED 1\n #endif\n \n-#if defined(__DEPRECATED) && defined(__GXX_EXPERIMENTAL_CXX0X__)\n+#if defined(__DEPRECATED) && (__cplusplus >= 201103L)\n # define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))\n #else\n # define _GLIBCXX_DEPRECATED\n@@ -88,7 +88,7 @@\n \n // Macro for constexpr, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_CONSTEXPR\n-# ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# if __cplusplus >= 201103L\n #  define _GLIBCXX_CONSTEXPR constexpr\n #  define _GLIBCXX_USE_CONSTEXPR constexpr\n # else\n@@ -99,7 +99,7 @@\n \n // Macro for noexcept, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_NOEXCEPT\n-# ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# if __cplusplus >= 201103L\n #  define _GLIBCXX_NOEXCEPT noexcept\n #  define _GLIBCXX_USE_NOEXCEPT noexcept\n #  define _GLIBCXX_THROW(_EXC)\n@@ -180,7 +180,7 @@ namespace std\n   typedef __SIZE_TYPE__ \tsize_t;\n   typedef __PTRDIFF_TYPE__\tptrdiff_t;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   typedef decltype(nullptr)\tnullptr_t;\n #endif\n }"}, {"sha": "db6862a01461b2bb71b890421d2a9c093c556dac", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -372,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n+#if ((__cplusplus >= 201103L) \\\n      && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n \n #include <cstdint>"}, {"sha": "ed856e9c35493f6d65847cacad5f2fa938a34ad4", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -180,7 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n # endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<>\n     struct __is_integer<char16_t>\n     {\n@@ -407,7 +407,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __false_type __type;\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Iterator>\n     class move_iterator;\n "}, {"sha": "6f987199a67752cad2407e89a8cb47c249dda13a", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -62,7 +62,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template <typename _Tp, typename _Alloc>\n     void\n     deque<_Tp, _Alloc>::\n@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       void\n@@ -166,7 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         return _M_insert_aux(__position, __x);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       typename deque<_Tp, _Alloc>::iterator\n@@ -303,7 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         _M_insert_aux(__pos, __n, __x);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template <typename _Tp, typename _Alloc>\n     void\n     deque<_Tp, _Alloc>::\n@@ -430,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.\n   template<typename _Tp, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename... _Args>\n       void\n       deque<_Tp, _Alloc>::\n@@ -445,7 +445,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();\n \t__try\n \t  {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n \t\t\t\t    std::forward<_Args>(__args)...);\n #else\n@@ -464,7 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.\n   template<typename _Tp, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename... _Args>\n       void\n       deque<_Tp, _Alloc>::\n@@ -482,7 +482,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node\n \t\t\t\t\t       - 1);\n \t    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t    this->_M_impl.construct(this->_M_impl._M_start._M_cur,\n \t\t\t\t    std::forward<_Args>(__args)...);\n #else\n@@ -579,7 +579,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n   template<typename _Tp, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename... _Args>\n       typename deque<_Tp, _Alloc>::iterator\n       deque<_Tp, _Alloc>::\n@@ -996,7 +996,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __result;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     _Deque_iterator<_Tp, _Tp&, _Tp*>\n     move(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,"}, {"sha": "dcd3fccd3b878fd67b724faa4e6b724e7e377e60", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -33,7 +33,7 @@\n #pragma GCC system_header\n \n #include <memory>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n "}, {"sha": "066d16011a96f9f52802bb3ac1ef70e78e1287f9", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{\n \t  _Node* __tmp = __cur;\n \t  __cur = static_cast<_Node*>(__cur->_M_next);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  _M_get_Node_allocator().destroy(__tmp);\n #else\n \t  _M_get_Tp_allocator().destroy(std::__addressof(__tmp->_M_data));\n@@ -81,7 +81,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       typename list<_Tp, _Alloc>::iterator\n@@ -114,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __ret;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n@@ -285,7 +285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     merge(list&& __x)\n #else\n     merge(list& __x)\n@@ -319,7 +319,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     template <typename _StrictWeakOrdering>\n       void\n       list<_Tp, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       merge(list&& __x, _StrictWeakOrdering __comp)\n #else\n       merge(list& __x, _StrictWeakOrdering __comp)"}, {"sha": "c19e0b0fe2c1b0fea68b5a94a2831fa3ce37bd79", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <type_traits> // Brings in std::declval too.\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -164,7 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline void\n     swap(_Tp& __a, _Tp& __b)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n \t            is_nothrow_move_assignable<_Tp>>::value)\n #endif\n@@ -183,7 +183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, size_t _Nm>\n     inline void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     noexcept(noexcept(swap(*__a, *__b)))\n #endif\n     {"}, {"sha": "71492a543a21cb533015c93a56e1ce13e8f9eece", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// File position for wchar_t streams.\n   typedef fpos<mbstate_t> wstreampos;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /// File position for char16_t streams.\n   typedef fpos<mbstate_t> u16streampos;\n   /// File position for char32_t streams."}, {"sha": "33db837c62006721bad1bf9b1f11b7861c3a4d50", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -30,7 +30,7 @@\n #ifndef _PTR_TRAITS_H\n #define _PTR_TRAITS_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <type_traits> // For _GLIBCXX_HAS_NESTED_TYPE\n "}, {"sha": "adfe4509128310674e9e7af4bc50b0fe3c1fe527", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -100,6 +100,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_RANGE_ACCESS_H"}, {"sha": "bd513b3b54045972ad72bbe226d05f86905ba0fd", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -63,7 +63,7 @@\n #include <bits/stl_heap.h>\n #include <bits/stl_tempbuf.h>  // for _Temporary_buffer\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <random>     // for std::uniform_int_distribution\n #include <functional> // for std::bind\n #endif\n@@ -737,7 +737,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     __comp);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief  Checks that a predicate is true for all the elements\n    *          of a sequence.\n@@ -954,7 +954,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __result;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief Copy the elements of a sequence for which a predicate is true.\n    *  @ingroup mutating_algorithms\n@@ -3964,7 +3964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __result;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief  Determines whether the elements of a sequence are sorted.\n    *  @ingroup sorting_algorithms\n@@ -4413,7 +4413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n \n@@ -5238,7 +5238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   template<typename _RandomAccessIterator, typename _RandomNumberGenerator>\n     void\n     random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t   _RandomNumberGenerator&& __rand)\n #else\n \t\t   _RandomNumberGenerator& __rand)"}, {"sha": "54636e5356534f15a53ccc4e33f17e095e1da642", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -74,7 +74,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n   // when it's safe, i.e., the value_types are equal.\n@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n \t\t\t\t  _ForwardIterator2>)\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       typedef typename iterator_traits<_ForwardIterator1>::value_type\n \t_ValueType1;\n       typedef typename iterator_traits<_ForwardIterator2>::value_type\n@@ -308,7 +308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Category>\n     struct __copy_move<true, false, _Category>\n     {\n@@ -341,7 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<>\n     struct __copy_move<true, false, random_access_iterator_tag>\n     {\n@@ -461,7 +461,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       __result));\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief Moves the range [first,last) into result.\n    *  @ingroup mutating_algorithms\n@@ -511,7 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Category>\n     struct __copy_move_backward<true, false, _Category>\n     {\n@@ -540,7 +540,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<>\n     struct __copy_move_backward<true, false, random_access_iterator_tag>\n     {\n@@ -632,7 +632,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       __result));\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief Moves the range [first,last) into result.\n    *  @ingroup mutating_algorithms"}, {"sha": "92265cf23d9fffebdfc13d6dd71aaa2287240d1c", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -57,7 +57,7 @@\n #ifndef _STL_BVECTOR_H\n #define _STL_BVECTOR_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { *_M_p ^= _M_mask; }\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   inline void\n   swap(_Bit_reference __x, _Bit_reference __y) noexcept\n   {\n@@ -421,7 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)\n \t{ }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t_Bvector_impl(_Bit_alloc_type&& __a)\n \t: _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),\n \t  _M_end_of_storage(0)\n@@ -450,7 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Bvector_base(const allocator_type& __a)\n       : _M_impl(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _Bvector_base(_Bvector_base&& __x) noexcept\n       : _M_impl(std::move(__x._M_get_Bit_allocator()))\n       {\n@@ -520,7 +520,7 @@ template<typename _Alloc>\n   {\n     typedef _Bvector_base<_Alloc>\t\t\t _Base;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename> friend class hash;\n #endif\n \n@@ -555,7 +555,7 @@ template<typename _Alloc>\n     vector(const allocator_type& __a)\n     : _Base(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     explicit\n     vector(size_type __n, const allocator_type& __a = allocator_type())\n     : vector(__n, false, __a)\n@@ -588,7 +588,7 @@ template<typename _Alloc>\n       _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     vector(vector&& __x) noexcept\n     : _Base(std::move(__x)) { }\n \n@@ -601,7 +601,7 @@ template<typename _Alloc>\n     }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _InputIterator,\n \t     typename = std::_RequireInputIter<_InputIterator>>\n       vector(_InputIterator __first, _InputIterator __last,\n@@ -636,7 +636,7 @@ template<typename _Alloc>\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     vector&\n     operator=(vector&& __x)\n     {\n@@ -663,7 +663,7 @@ template<typename _Alloc>\n     assign(size_type __n, const bool& __x)\n     { _M_fill_assign(__n, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _InputIterator,\n \t     typename = std::_RequireInputIter<_InputIterator>>\n       void\n@@ -679,7 +679,7 @@ template<typename _Alloc>\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void\n     assign(initializer_list<bool> __l)\n     { this->assign(__l.begin(), __l.end()); }\n@@ -717,7 +717,7 @@ template<typename _Alloc>\n     rend() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     const_iterator\n     cbegin() const noexcept\n     { return this->_M_impl._M_start; }\n@@ -867,7 +867,7 @@ template<typename _Alloc>\n       return begin() + __n;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _InputIterator,\n \t     typename = std::_RequireInputIter<_InputIterator>>\n       void\n@@ -889,7 +889,7 @@ template<typename _Alloc>\n     insert(iterator __position, size_type __n, const bool& __x)\n     { _M_fill_insert(__position, __n, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void insert(iterator __p, initializer_list<bool> __l)\n     { this->insert(__p, __l.begin(), __l.end()); }\n #endif\n@@ -924,7 +924,7 @@ template<typename _Alloc>\n         insert(end(), __new_size - size(), __x);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void\n     shrink_to_fit()\n     { _M_shrink_to_fit(); }\n@@ -966,7 +966,7 @@ template<typename _Alloc>\n     void\n     _M_reallocate(size_type __n);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     bool\n     _M_shrink_to_fit();\n #endif\n@@ -1130,7 +1130,7 @@ template<typename _Alloc>\n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <bits/functional_hash.h>\n \n@@ -1151,6 +1151,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n }// namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "bb74a9cf4642573cfd48d6edb7c7ea06473677e9", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Constructs an object in existing memory by invoking an allocated\n    * object's constructor with an initializer.\n    */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _T1, typename... _Args>\n     inline void\n     _Construct(_T1* __p, _Args&&... __args)"}, {"sha": "2a1354639743717ba078ecba7a2cf1c62e5f8aa8", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -60,7 +60,7 @@\n #include <bits/concept_check.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -392,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\tconst _Tp&, const _Tp*>(__last),\n \t\t\t\t__result); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     _Deque_iterator<_Tp, _Tp&, _Tp*>\n     move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,\n@@ -465,7 +465,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl(__a)\n       { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _Deque_base(_Deque_base&& __x)\n       : _M_impl(std::move(__x._M_get_Tp_allocator()))\n       {\n@@ -508,7 +508,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_start(), _M_finish()\n \t{ }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t_Deque_impl(_Tp_alloc_type&& __a)\n \t: _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),\n \t  _M_start(), _M_finish()\n@@ -791,7 +791,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       deque(const allocator_type& __a)\n       : _Base(__a, 0) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Creates a %deque with default constructed elements.\n        *  @param  __n  The number of elements to initially create.\n@@ -845,7 +845,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t    this->_M_impl._M_start,\n \t\t\t\t    _M_get_Tp_allocator()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Deque move constructor.\n        *  @param  __x  A %deque of identical element and allocator types.\n@@ -891,7 +891,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  input iterators are used, then this will do at most 2N calls to the\n        *  copy constructor, and logN memory reallocations.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         deque(_InputIterator __first, _InputIterator __last,\n@@ -928,7 +928,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       deque&\n       operator=(const deque& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Deque move assignment operator.\n        *  @param  __x  A %deque of identical element and allocator types.\n@@ -991,7 +991,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  resulting %deque's size is the same as the number of elements\n        *  assigned.  Old data may be lost.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         void\n@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Assigns an initializer list to a %deque.\n        *  @param  __l  An initializer_list.\n@@ -1100,7 +1100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %deque.  Iteration is done in ordinary element order.\n@@ -1148,7 +1148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Tp_allocator().max_size(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Resizes the %deque to the specified number of elements.\n        *  @param  __new_size  Number of elements the %deque should contain.\n@@ -1214,7 +1214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**  A non-binding request to reduce memory use.  */\n       void\n       shrink_to_fit()\n@@ -1368,7 +1368,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_push_front_aux(__x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_front(value_type&& __x)\n       { emplace_front(std::move(__x)); }\n@@ -1400,7 +1400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_push_back_aux(__x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_back(value_type&& __x)\n       { emplace_back(std::move(__x)); }\n@@ -1452,7 +1452,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_pop_back_aux();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts an object in %deque before specified iterator.\n        *  @param  __position  An iterator into the %deque.\n@@ -1479,7 +1479,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %deque before specified iterator.\n        *  @param  __position  An iterator into the %deque.\n@@ -1530,7 +1530,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  [__first,__last) into the %deque before the location specified\n        *  by @a __position.  This is known as <em>range insert</em>.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         void\n@@ -1680,7 +1680,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_fill_initialize(const value_type& __value);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // called by deque(n).\n       void\n       _M_default_initialize();\n@@ -1752,7 +1752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       //@{\n       /// Helper functions for push_* and pop_*.\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       void _M_push_back_aux(const value_type&);\n \n       void _M_push_front_aux(const value_type&);\n@@ -1813,7 +1813,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);\n \n       // called by insert(p,x)\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       iterator\n       _M_insert_aux(iterator __pos, const value_type& __x);\n #else\n@@ -1874,7 +1874,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_impl._M_finish = __pos;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Called by resize(sz).\n       void\n       _M_default_append(size_type __n);"}, {"sha": "f94216bcd4d9048402bb81339298fa8f96006ef3", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -496,7 +496,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Pair& __x) const\n       { return __x.first; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair2>\n         typename _Pair2::first_type&\n         operator()(_Pair2& __x) const\n@@ -729,7 +729,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED\n # include <backward/binders.h>\n #endif\n "}, {"sha": "191da90c92fb71cc46e78bd8b5b3313702661c46", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -502,7 +502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief  Search the end of a heap.\n    *  @param  __first  Start of range."}, {"sha": "14371bc82037c25e87ed1bbe0e7922a672864156", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -375,7 +375,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(__x < __y); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     // DR 685.\n     inline auto\n     operator-(const reverse_iterator<_IteratorL>& __x,\n@@ -426,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the end, if you like).  Assigning a value to the %iterator will\n        *  always append the value to the end of the container.\n       */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       back_insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n@@ -516,7 +516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the front, if you like).  Assigning a value to the %iterator will\n        *  always prepend the value to the front of the container.\n       */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       front_insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n@@ -627,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *     // vector v contains A, 1, 2, 3, and Z\n        *  @endcode\n       */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n@@ -880,7 +880,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters.\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     // DR 685.\n     inline auto\n     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n@@ -908,7 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1145,6 +1145,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #else\n #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)\n #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "43313aed439a4dc2b9b0fb1a117bf0bc57c50de9", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -177,7 +177,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::__advance(__i, __d, std::__iterator_category(__i));\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n   template<typename _ForwardIterator>\n     inline _ForwardIterator\n@@ -197,7 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __x;\n     }\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "70e892c4f445c1b3148b1c711bf83ca5b968ecb8", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -65,7 +65,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible\n #endif\n \n@@ -139,7 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  argument.  Specialized versions for pointers and pointers-to-const\n    *  provide tighter, more correct semantics.\n   */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n _GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n \n@@ -223,7 +223,7 @@ _GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n       { return __it.base(); }\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _InIter>\n     using _RequireInputIter = typename\n       enable_if<is_convertible<typename"}, {"sha": "f67a091f192df329b6cf404257309603e4a36d91", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -58,7 +58,7 @@\n #define _STL_LIST_H 1\n \n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -109,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       ///< User's data.\n       _Tp _M_data;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n         _List_node(_Args&&... __args)\n \t: __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...) \n@@ -321,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Node_alloc_type(__a), _M_node()\n \t{ }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t_List_impl(_Node_alloc_type&& __a)\n \t: _Node_alloc_type(std::move(__a)), _M_node()\n \t{ }\n@@ -365,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl(__a)\n       { _M_init(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _List_base(_List_base&& __x)\n       : _M_impl(std::move(__x._M_get_Node_allocator()))\n       {\n@@ -478,7 +478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Allocates space for a new node and constructs a copy of\n        *  @a __args in it.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       _Node*\n       _M_create_node(const value_type& __x)\n       {\n@@ -532,7 +532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       list(const allocator_type& __a)\n       : _Base(_Node_alloc_type(__a)) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Creates a %list with default constructed elements.\n        *  @param  __n  The number of elements to initially create.\n@@ -584,7 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _Base(__x._M_get_Node_allocator())\n       { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %List move constructor.\n        *  @param  __x  A %list of identical element and allocator types.\n@@ -619,7 +619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  [@a __first,@a __last).  This is linear in N (where N is\n        *  distance(@a __first,@a __last)).\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         list(_InputIterator __first, _InputIterator __last,\n@@ -656,7 +656,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       list&\n       operator=(const list& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %List move assignment operator.\n        *  @param  __x  A %list of identical element and allocator types.\n@@ -715,7 +715,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  that the resulting %list's size is the same as the number of\n        *  elements assigned.  Old data may be lost.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         void\n@@ -732,7 +732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Assigns an initializer_list to a %list.\n        *  @param  __l  An initializer_list of value_type.\n@@ -822,7 +822,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the\n        *  first element in the %list.  Iteration is done in ordinary\n@@ -879,7 +879,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Node_allocator().max_size(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Resizes the %list to the specified number of elements.\n        *  @param __new_size Number of elements the %list should contain.\n@@ -975,7 +975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       push_front(const value_type& __x)\n       { this->_M_insert(begin(), __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_front(value_type&& __x)\n       { this->_M_insert(begin(), std::move(__x)); }\n@@ -1016,7 +1016,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       push_back(const value_type& __x)\n       { this->_M_insert(end(), __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_back(value_type&& __x)\n       { this->_M_insert(end(), std::move(__x)); }\n@@ -1042,7 +1042,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       pop_back()\n       { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Constructs object in %list before specified iterator.\n        *  @param  __position  A const_iterator into the %list.\n@@ -1074,7 +1074,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %list before specified iterator.\n        *  @param  __position  An iterator into the %list.\n@@ -1140,7 +1140,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -1245,7 +1245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Requires this != @a __x.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n@@ -1259,7 +1259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x)\n       { splice(__position, std::move(__x)); }\n@@ -1275,7 +1275,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  inserts it into the current list before @a __position.\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __i)\n #else\n       splice(iterator __position, list& __x, iterator __i)\n@@ -1292,7 +1292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_transfer(__position, __i, __j);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __i)\n       { splice(__position, std::move(__x), __i); }\n@@ -1311,7 +1311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Undefined if @a __position is in [__first,__last).\n        */\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __first,\n \t     iterator __last)\n #else\n@@ -1328,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __first, iterator __last)\n       { splice(__position, std::move(__x), __first, __last); }\n@@ -1401,7 +1401,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  sorted order, leaving @a __x empty when complete.  Elements in\n        *  this list precede elements in @a __x that are equal.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       merge(list&& __x);\n \n@@ -1426,7 +1426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in this list precede elements in @a __x that are equivalent\n        *  according to StrictWeakOrdering().\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _StrictWeakOrdering>\n         void\n         merge(list&& __x, _StrictWeakOrdering __comp);\n@@ -1500,7 +1500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  push_back(__x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Called by list(n).\n       void\n       _M_default_initialize(size_type __n)\n@@ -1543,7 +1543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }\n \n       // Inserts new element at position given and with value given.\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       void\n       _M_insert(iterator __position, const value_type& __x)\n       {\n@@ -1566,7 +1566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n         __position._M_node->_M_unhook();\n         _Node* __n = static_cast<_Node*>(__position._M_node);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n         _M_get_Node_allocator().destroy(__n);\n #else\n \t_M_get_Tp_allocator().destroy(std::__addressof(__n->_M_data));"}, {"sha": "365728b5aba5416e08fded3720e8d341ae8f5e82", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -59,7 +59,7 @@\n \n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #include <tuple>\n #endif\n@@ -181,7 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       map(const map& __x)\n       : _M_t(__x._M_t) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Map move constructor.\n        *  @param  __x  A %map of identical element and allocator types.\n@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Map move assignment operator.\n        *  @param  __x  A %map of identical element and allocator types.\n@@ -384,7 +384,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first pair\n        *  in the %map.  Iteration is done in ascending order according to the\n@@ -462,7 +462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \titerator __i = lower_bound(__k);\n \t// __i->first is greater than or equivalent to __k.\n \tif (__i == end() || key_comp()(__k, (*__i).first))\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,\n \t\t\t\t\t    std::tuple<const key_type&>(__k),\n \t\t\t\t\t    std::tuple<>());\n@@ -472,7 +472,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn (*__i).second;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       mapped_type&\n       operator[](key_type&& __k)\n       {\n@@ -517,7 +517,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       // modifiers\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to build and insert a std::pair into the %map.\n        *\n@@ -595,7 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_t._M_insert_unique(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to insert a list of std::pairs into the %map.\n        *  @param  __list  A std::initializer_list<value_type> of pairs to be\n@@ -641,14 +641,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n #endif\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -671,7 +671,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_unique(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**\n@@ -726,7 +726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       erase(const key_type& __x)\n       { return _M_t.erase(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**"}, {"sha": "1c6a7b25388b3366f168e334dc87f77b817ce0ac", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -58,7 +58,7 @@\n #define _STL_MULTIMAP_H 1\n \n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       multimap(const multimap& __x)\n       : _M_t(__x._M_t) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Multimap move constructor.\n        *  @param   __x  A %multimap of identical element and allocator types.\n@@ -262,7 +262,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Multimap move assignment operator.\n        *  @param  __x  A %multimap of identical element and allocator types.\n@@ -378,7 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first pair\n        *  in the %multimap.  Iteration is done in ascending order according to\n@@ -433,7 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t.max_size(); }\n \n       // modifiers\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Build and insert a std::pair into the %multimap.\n        *\n@@ -502,7 +502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_t._M_insert_equal(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -532,14 +532,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n #endif\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -563,7 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_equal(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to insert a list of std::pairs into the %multimap.\n        *  @param  __l  A std::initializer_list<value_type> of pairs to be\n@@ -576,7 +576,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { this->insert(__l.begin(), __l.end()); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**\n@@ -631,7 +631,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       erase(const key_type& __x)\n       { return _M_t.erase(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**"}, {"sha": "4ac650a7ca2cfd45b12eb2bd815e56e9752ad48b", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -58,7 +58,7 @@\n #define _STL_MULTISET_H 1\n \n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       multiset(const multiset& __x)\n       : _M_t(__x._M_t) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n      /**\n        *  @brief  %Multiset move constructor.\n        *  @param  __x  A %multiset of identical element and allocator types.\n@@ -233,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Multiset move assignment operator.\n        *  @param  __x  A %multiset of identical element and allocator types.\n@@ -323,7 +323,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %multiset.  Iteration is done in ascending order\n@@ -392,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Builds and inserts an element into the %multiset.\n        *  @param  __args  Arguments used to generate the element instance to be\n@@ -455,7 +455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_t._M_insert_equal(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(value_type&& __x)\n       { return _M_t._M_insert_equal(std::move(__x)); }\n@@ -485,7 +485,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __position, const value_type& __x)\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       { return _M_t._M_insert_equal_(__position, std::move(__x)); }\n@@ -504,7 +504,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         insert(_InputIterator __first, _InputIterator __last)\n         { _M_t._M_insert_equal(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to insert a list of elements into the %multiset.\n        *  @param  __l  A std::initializer_list<value_type> of elements\n@@ -517,7 +517,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { this->insert(__l.begin(), __l.end()); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**\n@@ -567,7 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       erase(const key_type& __x)\n       { return _M_t.erase(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**"}, {"sha": "4fb726cc3aa663f3fb0d36a19c8c92793d400ef9", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -61,7 +61,7 @@\n #include <debug/debug.h>\n #include <bits/move.h> // For _GLIBCXX_MOVE\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "70da3da7392412e5533dcf106de0776468e102a4", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -60,15 +60,15 @@\n \n #include <bits/move.h> // for std::move / std::forward, and std::swap\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <type_traits> // for std::__decay_and_strip too\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /// piecewise_construct_t\n   struct piecewise_construct_t { };\n \n@@ -110,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : first(__a), second(__b) { }\n \n       /** There is also a templated copy ctor for the @c pair class itself.  */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       template<class _U1, class _U2>\n \tpair(const pair<_U1, _U2>& __p)\n \t: first(__p.first), second(__p.second) { }\n@@ -242,7 +242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x < __y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /// See std::pair::swap().\n   // Note:  no std::swap overloads in C++03 mode, this has performance\n   //        implications, see, eg, libstdc++/38466.\n@@ -265,7 +265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 181.  make_pair() unintended behavior\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // NB: DR 706.\n   template<class _T1, class _T2>\n     constexpr pair<typename __decay_and_strip<_T1>::__type,"}, {"sha": "add519c8883cb33ffce86f04c5b05438a112e45f", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -131,7 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       explicit\n       queue(const _Sequence& __c = _Sequence())\n       : c(__c) { }\n@@ -214,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       push(const value_type& __x)\n       { c.push_back(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push(value_type&& __x)\n       { c.push_back(std::move(__x)); }\n@@ -243,7 +243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tc.pop_front();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       swap(queue& __q)\n       noexcept(noexcept(swap(c, __q.c)))\n@@ -312,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Seq>\n     inline void\n     swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n@@ -393,7 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       explicit\n       priority_queue(const _Compare& __x = _Compare(),\n \t\t     const _Sequence& __s = _Sequence())\n@@ -428,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  documentation on @link functors functor base\n        *  classes@endlink.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       template<typename _InputIterator>\n         priority_queue(_InputIterator __first, _InputIterator __last,\n \t\t       const _Compare& __x = _Compare(),\n@@ -501,7 +501,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::push_heap(c.begin(), c.end(), comp);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push(value_type&& __x)\n       {\n@@ -537,7 +537,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tc.pop_back();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       swap(priority_queue& __pq)\n       noexcept(noexcept(swap(c, __pq.c)) && noexcept(swap(comp, __pq.comp)))\n@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // No equality/comparison operators are provided for priority_queue.\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Sequence, typename _Compare>\n     inline void\n     swap(priority_queue<_Tp, _Sequence, _Compare>& __x,"}, {"sha": "1850aac7f874e6239864b5a53f4a84c5452c5cfe", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -58,7 +58,7 @@\n #define _STL_SET_H 1\n \n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -194,7 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       set(const set& __x)\n       : _M_t(__x._M_t) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n      /**\n        *  @brief %Set move constructor\n        *  @param __x  A %set of identical element and allocator types.\n@@ -237,7 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief %Set move assignment operator.\n        *  @param __x  A %set of identical element and allocator types.\n@@ -326,7 +326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %set.  Iteration is done in ascending order according\n@@ -395,7 +395,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to build and insert an element into the %set.\n        *  @param __args  Arguments used to generate an element.\n@@ -465,7 +465,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn std::pair<iterator, bool>(__p.first, __p.second);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n@@ -498,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __position, const value_type& __x)\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       { return _M_t._M_insert_unique_(__position, std::move(__x)); }\n@@ -518,7 +518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tinsert(_InputIterator __first, _InputIterator __last)\n \t{ _M_t._M_insert_unique(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief Attempts to insert a list of elements into the %set.\n        *  @param  __l  A std::initializer_list<value_type> of elements\n@@ -531,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { this->insert(__l.begin(), __l.end()); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**\n@@ -581,7 +581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       erase(const key_type& __x)\n       { return _M_t.erase(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       /**"}, {"sha": "88ca8ca58452e58f85546f66a29fee009c1d1703", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       explicit\n       stack(const _Sequence& __c = _Sequence())\n       : c(__c) { }\n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       push(const value_type& __x)\n       { c.push_back(__x); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push(value_type&& __x)\n       { c.push_back(std::move(__x)); }\n@@ -217,7 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tc.pop_back();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       swap(stack& __s)\n       noexcept(noexcept(swap(c, __s.c)))\n@@ -287,7 +287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Seq>\n     inline void\n     swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)"}, {"sha": "03a5e307c587b4361cba8e4a2d4427a001f71789", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -132,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Rb_tree_node<_Val>* _Link_type;\n       _Val _M_value_field;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n         _Rb_tree_node(_Args&&... __args)\n \t: _Rb_tree_node_base(),\n@@ -372,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_put_node(_Link_type __p)\n       { _M_impl._Node_allocator::deallocate(__p, 1); }\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       _Link_type\n       _M_create_node(const value_type& __x)\n       {\n@@ -450,7 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_node_count(0)\n \t  { _M_initialize(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)\n \t  : _Node_allocator(std::move(__a)), _M_key_compare(__comp),\n \t    _M_header(), _M_node_count(0)\n@@ -584,7 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_get_insert_hint_equal_pos(const_iterator __pos,\n \t\t\t\t   const key_type& __k);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Arg>\n         iterator\n         _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);\n@@ -661,7 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _Rb_tree(_Rb_tree&& __x);\n #endif\n \n@@ -733,7 +733,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       swap(_Rb_tree& __t);      \n \n       // Insert/erase.\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Arg>\n         pair<iterator, bool>\n         _M_insert_unique(_Arg&& __x);\n@@ -795,7 +795,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_erase_aux(const_iterator __first, const_iterator __last);\n \n     public:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       iterator\n@@ -828,7 +828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_type\n       erase(const key_type& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       iterator\n@@ -951,7 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1000,12 +1000,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)\n #else\n     _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)\n@@ -1025,12 +1025,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_lower(_Base_ptr __p, _Arg&& __v)\n #else\n     _M_insert_lower(_Base_ptr __p, const _Val& __v)\n@@ -1050,12 +1050,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_equal_lower(_Arg&& __v)\n #else\n     _M_insert_equal_lower(const _Val& __v)\n@@ -1355,13 +1355,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::iterator, bool>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_unique(_Arg&& __v)\n #else\n     _M_insert_unique(const _Val& __v)\n@@ -1381,12 +1381,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_equal(_Arg&& __v)\n #else\n     _M_insert_equal(const _Val& __v)\n@@ -1458,12 +1458,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_unique_(const_iterator __position, _Arg&& __v)\n #else\n     _M_insert_unique_(const_iterator __position, const _Val& __v)\n@@ -1535,12 +1535,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     _M_insert_equal_(const_iterator __position, _Arg&& __v)\n #else\n     _M_insert_equal_(const_iterator __position, const _Val& __v)\n@@ -1556,7 +1556,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"}, {"sha": "b133489d8c51605b4eee81db6b9ea961f395b9f1", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -444,7 +444,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // Extensions: __uninitialized_default, __uninitialized_default_n,\n   // __uninitialized_default_a, __uninitialized_default_n_a.\n "}, {"sha": "b309fd3f605724e3666da156e509f0337904e3c3", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -60,7 +60,7 @@\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -92,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t_Vector_impl(_Tp_alloc_type&& __a)\n \t: _Tp_alloc_type(std::move(__a)),\n \t  _M_start(0), _M_finish(0), _M_end_of_storage(0)\n@@ -136,7 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl(__a)\n       { _M_create_storage(__n); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _Vector_base(_Tp_alloc_type&& __a)\n       : _M_impl(std::move(__a)) { }\n \n@@ -257,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       vector(const allocator_type& __a)\n       : _Base(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Creates a %vector with default constructed elements.\n        *  @param  __n  The number of elements to initially create.\n@@ -317,7 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t      _M_get_Tp_allocator());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Vector move constructor.\n        *  @param  __x  A %vector of identical element and allocator types.\n@@ -387,7 +387,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  used, then this will do at most 2N calls to the copy\n        *  constructor, and logN memory reallocations.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         vector(_InputIterator __first, _InputIterator __last,\n@@ -427,7 +427,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       vector&\n       operator=(const vector& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  %Vector move assignment operator.\n        *  @param  __x  A %vector of identical element and allocator types.\n@@ -492,7 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  that the resulting %vector's size is the same as the number\n        *  of elements assigned.  Old data may be lost.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         void\n@@ -509,7 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Assigns an initializer list to a %vector.\n        *  @param  __l  An initializer_list.\n@@ -602,7 +602,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the\n        *  first element in the %vector.  Iteration is done in ordinary\n@@ -651,7 +651,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Resizes the %vector to the specified number of elements.\n        *  @param  __new_size  Number of elements the %vector should contain.\n@@ -711,7 +711,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**  A non-binding request to reduce capacity() to size().  */\n       void\n       shrink_to_fit()\n@@ -871,15 +871,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *   Returns a pointer such that [data(), data() + size()) is a valid\n        *   range.  For a non-empty %vector, data() == &front().\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       _Tp*\n #else\n       pointer\n #endif\n       data() _GLIBCXX_NOEXCEPT\n       { return std::__addressof(front()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const _Tp*\n #else\n       const_pointer\n@@ -908,14 +908,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    ++this->_M_impl._M_finish;\n \t  }\n \telse\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  _M_emplace_back_aux(__x);\n #else\n \t  _M_insert_aux(end(), __x);\n #endif\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_back(value_type&& __x)\n       { emplace_back(std::move(__x)); }\n@@ -941,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts an object in %vector before specified iterator.\n        *  @param  __position  An iterator into the %vector.\n@@ -973,7 +973,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %vector before specified iterator.\n        *  @param  __position  An iterator into the %vector.\n@@ -1038,7 +1038,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %vector and if it is frequently used the user should\n        *  consider using std::list.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         void\n@@ -1107,7 +1107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(vector& __x)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n@@ -1213,7 +1213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Called by the vector(n) constructor.\n       void\n       _M_default_initialize(size_type __n)\n@@ -1305,7 +1305,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Called by resize(n).\n       void\n       _M_default_append(size_type __n);\n@@ -1315,7 +1315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       // Called by insert(p,x)\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       void\n       _M_insert_aux(iterator __position, const value_type& __x);\n #else\n@@ -1350,7 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_impl._M_finish = __pos;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     private:\n       // Constant-time move assignment when source object's memory can be\n       // moved, either because the source's allocator will move too"}, {"sha": "524bae5523448550a186a2b593d3750254362901", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -52,7 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class istreambuf_iterator\n     : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,\n                       _CharT*,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     // LWG 445.\n \t\t      _CharT>\n #else\n@@ -104,7 +104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(0), _M_c(traits_type::eof()) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       istreambuf_iterator(const istreambuf_iterator&) noexcept = default;\n \n       ~istreambuf_iterator() = default;"}, {"sha": "623aa88b59218cf8cc4936a185349dfb57991f41", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   typedef basic_string<wchar_t> wstring;   /// A string of @c wchar_t\n #endif\n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n+#if ((__cplusplus >= 201103L) \\\n      && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n \n   template<> struct char_traits<char16_t>;"}, {"sha": "a1e091c604cd93db23e5d4f013dd88577c9cc97b", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -25,7 +25,7 @@\n #ifndef _USES_ALLOCATOR_H\n #define _USES_ALLOCATOR_H 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n "}, {"sha": "cc464cea84124000fd4c68e28fad60512ac1adff", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       void\n@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n       else\n \t{\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t    {\n \t      _Tp __x_copy = __x;\n@@ -163,7 +163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (&__x != this)\n \t{\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t  if (_Alloc_traits::_S_propagate_on_copy_assign())\n \t    {\n \t      if (!_Alloc_traits::_S_always_equal()\n@@ -285,7 +285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       typename vector<_Tp, _Alloc>::iterator\n@@ -323,13 +323,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t           _GLIBCXX_MOVE(*(this->_M_impl._M_finish\n \t\t\t\t                   - 1)));\n \t  ++this->_M_impl._M_finish;\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n \t  _Tp __x_copy = __x;\n #endif\n \t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n \t\t\t\t  this->_M_impl._M_finish - 2,\n \t\t\t\t  this->_M_impl._M_finish - 1);\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n \t  *__position = __x_copy;\n #else\n \t  *__position = _Tp(std::forward<_Args>(__args)...);\n@@ -350,7 +350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      // taking the element by const lvalue ref (see 23.1/13).\n \t      _Alloc_traits::construct(this->_M_impl,\n \t\t                       __new_start + __elems_before,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t\t\t       std::forward<_Args>(__args)...);\n #else\n \t                               __x);\n@@ -390,7 +390,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       void\n@@ -524,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp, _Alloc>::\n@@ -788,7 +788,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Alloc>\n     bool\n     vector<bool, _Alloc>::\n@@ -809,7 +809,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -851,6 +851,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif /* _VECTOR_TCC */"}, {"sha": "a445236803019cee20c5a613da4780bb3cec0e57", "filename": "libstdc++-v3/include/c_compatibility/complex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <ccomplex>\n #endif\n "}, {"sha": "fdc82a9998c2dd287b57b0eb5d6876fc2711515a", "filename": "libstdc++-v3/include/c_compatibility/fenv.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -36,7 +36,7 @@\n # include_next <fenv.h>\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #if _GLIBCXX_USE_C99_FENV_TR1\n \n@@ -76,6 +76,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_C99_FENV_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_FENV_H"}, {"sha": "d0f840794890dfaecf207e032b7878a749721de3", "filename": "libstdc++-v3/include/c_compatibility/inttypes.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -33,7 +33,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n // For 8.11.1/1 (see C99, Note 184)\n # if _GLIBCXX_HAVE_INTTYPES_H\n@@ -86,6 +86,6 @@ namespace std\n #  include_next <inttypes.h>\n # endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_INTTYPES_H"}, {"sha": "f7a5b4cf70d9ce360ab3828d651dd9c358ee1203", "filename": "libstdc++-v3/include/c_compatibility/stdbool.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <cstdbool>\n #else\n # if _GLIBCXX_HAVE_STDBOOL_H"}, {"sha": "b9f47fe22287fadbf407807bae8702386647a3fa", "filename": "libstdc++-v3/include/c_compatibility/stdint.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -33,7 +33,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n // For 8.22.1/1 (see C99, Notes 219, 220, 222)\n # if _GLIBCXX_HAVE_STDINT_H\n@@ -105,6 +105,6 @@ namespace std\n #  include_next <stdint.h>\n # endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_STDINT_H"}, {"sha": "10330f58205fe7e279664fcc0e1fce6b61f83c47", "filename": "libstdc++-v3/include/c_compatibility/tgmath.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n \n #include <bits/c++config.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <ctgmath>\n #else\n # if _GLIBCXX_HAVE_TGMATH_H"}, {"sha": "f9aeaed47efa19b29c19b884ecc28cf4e218043b", "filename": "libstdc++-v3/include/c_global/ccomplex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n #ifndef _GLIBCXX_CCOMPLEX\n #define _GLIBCXX_CCOMPLEX 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #endif\n "}, {"sha": "e0b736269630e76703fa54e72e55c0ed03c38eee", "filename": "libstdc++-v3/include/c_global/cctype", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -78,7 +78,7 @@ namespace std\n   using ::toupper;\n } // namespace std\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #ifdef _GLIBCXX_USE_C99_CTYPE_TR1\n \n@@ -91,6 +91,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_C99_CTYPE_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "37b8eca8b09837fa2b7278e2478c2f91521c6ef4", "filename": "libstdc++-v3/include/c_global/cfenv", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -79,6 +79,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_C99_FENV_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_CFENV"}, {"sha": "065ae19d6e67a71e1423d9b4d4ced4f10f870081", "filename": "libstdc++-v3/include/c_global/cfloat", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -43,7 +43,7 @@\n #ifndef _GLIBCXX_CFLOAT\n #define _GLIBCXX_CFLOAT 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #  ifndef DECIMAL_DIG\n #    define DECIMAL_DIG __DECIMAL_DIG__\n #  endif"}, {"sha": "ce2fe720d7c01f183b9b9aed4173b6c2c1df68fc", "filename": "libstdc++-v3/include/c_global/cinttypes", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -76,6 +76,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_C99_INTTYPES_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_CINTTYPES"}, {"sha": "90f7665052065da293f21d27707a2790925d47cd", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -413,7 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   pow(long double __x, long double __y)\n   { return __builtin_powl(__x, __y); }\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 550. What should the return type of pow(float,int) be?\n   inline double\n@@ -558,7 +558,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   constexpr int\n   fpclassify(float __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n@@ -921,7 +921,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #ifdef _GLIBCXX_USE_C99_MATH_TR1\n \n@@ -1682,6 +1682,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_USE_C99_MATH_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "353382757f21028795fbab45360902d85a94dcb5", "filename": "libstdc++-v3/include/c_global/cstdalign", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdalign", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdalign", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdalign?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n #ifndef _GLIBCXX_CSTDALIGN\n #define _GLIBCXX_CSTDALIGN 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n #  include <bits/c++0x_warning.h>\n #else\n #  include <bits/c++config.h>"}, {"sha": "fbc03f812769bf57fd4d146666c55f02f08f3ece", "filename": "libstdc++-v3/include/c_global/cstdbool", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n #ifndef _GLIBCXX_CSTDBOOL\n #define _GLIBCXX_CSTDBOOL 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n #  include <bits/c++0x_warning.h>\n #else\n #  include <bits/c++config.h>"}, {"sha": "d61d383a6bba12182739248ab3297b7d5a5f55d5", "filename": "libstdc++-v3/include/c_global/cstdint", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -84,6 +84,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_CSTDINT"}, {"sha": "13eee2a42004f9161015d7985c8a126e78092467", "filename": "libstdc++-v3/include/c_global/ctgmath", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n #ifndef _GLIBCXX_CTGMATH\n #define _GLIBCXX_CTGMATH 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n #  include <bits/c++0x_warning.h>\n #else\n #  include <cmath>"}, {"sha": "8ed424e3cfc6e8e52d87da70bbdae72f9f5e21de", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -272,7 +272,7 @@ namespace std\n \n #endif //_GLIBCXX_USE_WCHAR_T\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n \n@@ -300,6 +300,6 @@ namespace std\n \n #endif // _GLIBCXX_USE_WCHAR_T\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "0ad8283d8fec0902d2912b8e3d39cfc205a9612b", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -42,7 +42,7 @@ namespace __debug\n   template<size_t _Nb>\n     class bitset\n     : public _GLIBCXX_STD_C::bitset<_Nb>\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n     , public __gnu_debug::_Safe_sequence_base\n #endif\n     {\n@@ -52,7 +52,7 @@ namespace __debug\n       // In C++0x we rely on normal reference type to preserve the property\n       // of bitset to be use as a literal.\n       // TODO: Find another solution.\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       typedef typename _Base::reference reference;\n #else\n       // bit reference:\n@@ -133,7 +133,7 @@ namespace __debug\n       _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT\n       : _Base() { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr bitset(unsigned long long __val) noexcept\n #else\n       bitset(unsigned long __val)\n@@ -162,7 +162,7 @@ namespace __debug\n \n       bitset(const _Base& __x) : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _CharT>\n         explicit\n         bitset(const _CharT* __str,\n@@ -263,7 +263,7 @@ namespace __debug\n       operator[](size_t __pos)\n       {\n \t__glibcxx_check_subscript(__pos);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \treturn _M_base()[__pos];\n #else\n \treturn reference(_M_base()[__pos], this);\n@@ -275,15 +275,15 @@ namespace __debug\n       _GLIBCXX_CONSTEXPR bool\n       operator[](size_t __pos) const\n       {\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n \t// TODO: Check in debug-mode too.\n \t__glibcxx_check_subscript(__pos);\n #endif\n \treturn _Base::operator[](__pos);\n       }\n \n       using _Base::to_ulong;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::to_ullong;\n #endif\n \n@@ -409,7 +409,7 @@ namespace __debug\n \n } // namespace __debug\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // DR 1182.\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>"}, {"sha": "1445b7c047dd0e751379024a3f5210d12db813ef", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -74,7 +74,7 @@ namespace __debug\n       deque(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       deque(size_type __n)\n       : _Base(__n) { }\n@@ -89,7 +89,7 @@ namespace __debug\n       : _Base(__n, __value, __a) { }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -108,7 +108,7 @@ namespace __debug\n       deque(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       deque(deque&& __x)\n       : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n@@ -128,7 +128,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       deque&\n       operator=(deque&& __x)\n       {\n@@ -149,7 +149,7 @@ namespace __debug\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -171,7 +171,7 @@ namespace __debug\n \tthis->_M_invalidate_all();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       assign(initializer_list<value_type> __l)\n       {\n@@ -215,7 +215,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -246,7 +246,7 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       {\n@@ -287,7 +287,7 @@ namespace __debug\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       shrink_to_fit()\n       {\n@@ -358,7 +358,7 @@ namespace __debug\n \tthis->_M_invalidate_all();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_front(_Tp&& __x)\n       { emplace_front(std::move(__x)); }\n@@ -404,7 +404,7 @@ namespace __debug\n \treturn iterator(__res, this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n@@ -425,7 +425,7 @@ namespace __debug\n \tthis->_M_invalidate_all();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else"}, {"sha": "d9cfca404d8764a910a5666076a5503e365d4545", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -75,7 +75,7 @@ namespace __debug\n       list(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       list(size_type __n)\n       : _Base(__n) { }\n@@ -90,7 +90,7 @@ namespace __debug\n       : _Base(__n, __value, __a) { }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -109,7 +109,7 @@ namespace __debug\n       list(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       list(list&& __x) noexcept\n       : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n@@ -129,7 +129,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       list&\n       operator=(list&& __x)\n       {\n@@ -157,7 +157,7 @@ namespace __debug\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -214,7 +214,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -237,7 +237,7 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       {\n@@ -352,7 +352,7 @@ namespace __debug\n       // 23.2.2.3 modifiers:\n       using _Base::push_front;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::emplace_front;\n #endif\n \n@@ -366,7 +366,7 @@ namespace __debug\n \n       using _Base::push_back;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::emplace_back;\n #endif\n \n@@ -378,7 +378,7 @@ namespace __debug\n \t_Base::pop_back();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n         emplace(iterator __position, _Args&&... __args)\n@@ -396,7 +396,7 @@ namespace __debug\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n@@ -416,7 +416,7 @@ namespace __debug\n \t_Base::insert(__position.base(), __n, __x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -480,7 +480,7 @@ namespace __debug\n \n       // 23.2.2.4 list operations:\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n@@ -493,14 +493,14 @@ namespace __debug\n \t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()));\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x)\n       { splice(__position, std::move(__x)); }\n #endif\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __i)\n #else\n       splice(iterator __position, list& __x, iterator __i)\n@@ -525,14 +525,14 @@ namespace __debug\n \t\t      __i.base());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __i)\n       { splice(__position, std::move(__x), __i); }\n #endif\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __first,\n \t     iterator __last)\n #else\n@@ -571,7 +571,7 @@ namespace __debug\n \t\t      __first.base(), __last.base());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __first, iterator __last)\n       { splice(__position, std::move(__x), __first, __last); }\n@@ -638,7 +638,7 @@ namespace __debug\n \t}\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       merge(list&& __x)\n #else\n       merge(list& __x)\n@@ -655,15 +655,15 @@ namespace __debug\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       merge(list& __x)\n       { merge(std::move(__x)); }\n #endif\n \n       template<class _Compare>\n         void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n         merge(list&& __x, _Compare __comp)\n #else\n         merge(list& __x, _Compare __comp)\n@@ -682,7 +682,7 @@ namespace __debug\n \t    }\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Compare>\n         void\n         merge(list& __x, _Compare __comp)"}, {"sha": "900b702e57f0c85b9ae70ca4a0dba5ca4ae7990d", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -92,7 +92,7 @@ namespace __debug\n       map(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       map(map&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -114,7 +114,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       map&\n       operator=(map&& __x)\n       {\n@@ -172,7 +172,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -203,7 +203,7 @@ namespace __debug\n       using _Base::at;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n@@ -232,7 +232,7 @@ namespace __debug\n \t\t\t\t\t __res.second);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -246,14 +246,14 @@ namespace __debug\n \t}\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(std::initializer_list<value_type> __list)\n       { _Base::insert(__list); }\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n@@ -263,7 +263,7 @@ namespace __debug\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -285,7 +285,7 @@ namespace __debug\n \t\t\t__gnu_debug::__base(__last));\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -321,7 +321,7 @@ namespace __debug\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "1bac15397981a3c0800d6bddadc74b621caa0e8f", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -93,7 +93,7 @@ namespace __debug\n       multimap(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multimap(multimap&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -115,7 +115,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multimap&\n       operator=(multimap&& __x)\n       {\n@@ -171,7 +171,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -195,7 +195,7 @@ namespace __debug\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n@@ -218,7 +218,7 @@ namespace __debug\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x), this); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -227,14 +227,14 @@ namespace __debug\n         { return iterator(_Base::insert(std::forward<_Pair>(__x)), this); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(std::initializer_list<value_type> __list)\n       { _Base::insert(__list); }\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n@@ -244,7 +244,7 @@ namespace __debug\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -266,7 +266,7 @@ namespace __debug\n \t\t\t__gnu_debug::__base(__last));\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -304,7 +304,7 @@ namespace __debug\n \treturn __count;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "9850c444f7dfa9b2eb0f0c6c9716074cd3d6c017", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -92,7 +92,7 @@ namespace __debug\n       multiset(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multiset(multiset&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -114,7 +114,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multiset&\n       operator=(multiset&& __x)\n       {\n@@ -170,7 +170,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -194,7 +194,7 @@ namespace __debug\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n@@ -217,7 +217,7 @@ namespace __debug\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x), this); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(value_type&& __x)\n       { return iterator(_Base::insert(std::move(__x)), this); }\n@@ -230,7 +230,7 @@ namespace __debug\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       {\n@@ -249,13 +249,13 @@ namespace __debug\n \t\t\t__gnu_debug::__base(__last));\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(initializer_list<value_type> __l)\n       { _Base::insert(__l); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -289,7 +289,7 @@ namespace __debug\n \treturn __count;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "637fe2d195ac32f2ba81bb76beda672d1acd62bb", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -172,7 +172,7 @@ namespace __gnu_debug\n \t\t\t      ._M_iterator(__x, \"other\"));\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        * @brief Move construction.\n        * @post __x is singular and unattached\n@@ -229,7 +229,7 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        * @brief Move assignment.\n        * @post __x is singular and unattached"}, {"sha": "d7d590caa23586f8b09050541a40ae1f10796ebd", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -92,7 +92,7 @@ namespace __debug\n       set(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       set(set&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -114,7 +114,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       set&\n       operator=(set&& __x)\n       {\n@@ -170,7 +170,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -194,7 +194,7 @@ namespace __debug\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n@@ -223,7 +223,7 @@ namespace __debug\n \t\t\t\t\t __res.second);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n@@ -241,7 +241,7 @@ namespace __debug\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       {\n@@ -260,13 +260,13 @@ namespace __debug\n \t\t\t__gnu_debug::__base(__last));\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(initializer_list<value_type> __l)\n       { _Base::insert(__l); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -298,7 +298,7 @@ namespace __debug\n \t  }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "4c51aa1ca947ba2b8f3a394a0ff055333c0c203a", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -113,7 +113,7 @@ namespace __gnu_debug\n \t      __gnu_debug::__base(__end), __a)\n       { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     basic_string(basic_string&& __str) noexcept\n     : _Base(std::move(__str))\n     { }\n@@ -122,7 +122,7 @@ namespace __gnu_debug\n \t\t const _Allocator& __a = _Allocator())\n     : _Base(__l, __a)\n     { }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     ~basic_string() _GLIBCXX_NOEXCEPT { }\n \n@@ -151,7 +151,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     basic_string&\n     operator=(basic_string&& __str)\n     {\n@@ -168,7 +168,7 @@ namespace __gnu_debug\n       this->_M_invalidate_all();\n       return *this;\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     // 21.3.2 iterators:\n     iterator\n@@ -203,7 +203,7 @@ namespace __gnu_debug\n     rend() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     const_iterator\n     cbegin() const noexcept\n     { return const_iterator(_Base::begin(), this); }\n@@ -237,7 +237,7 @@ namespace __gnu_debug\n     resize(size_type __n)\n     { this->resize(__n, _CharT()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void\n     shrink_to_fit()\n     {\n@@ -296,7 +296,7 @@ namespace __gnu_debug\n \n     using _Base::at;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     using _Base::front;\n     using _Base::back;\n #endif\n@@ -327,15 +327,15 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     basic_string&\n     operator+=(std::initializer_list<_CharT> __l)\n     {\n       _M_base() += __l;\n       this->_M_invalidate_all();\n       return *this;\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     basic_string&\n     append(const basic_string& __str)\n@@ -407,15 +407,15 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     basic_string&\n     assign(basic_string&& __x)\n     {\n       _Base::assign(std::move(__x));\n       this->_M_invalidate_all();\n       return *this;\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     basic_string&\n     assign(const basic_string& __str, size_type __pos, size_type __n)\n@@ -462,15 +462,15 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     basic_string&\n     assign(std::initializer_list<_CharT> __l)\n     {\n       _Base::assign(__l);\n       this->_M_invalidate_all();\n       return *this;\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     basic_string&\n     insert(size_type __pos1, const basic_string& __str)\n@@ -542,15 +542,15 @@ namespace __gnu_debug\n \tthis->_M_invalidate_all();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void\n     insert(iterator __p, std::initializer_list<_CharT> __l)\n     {\n       __glibcxx_check_insert(__p);\n       _Base::insert(__p.base(), __l);\n       this->_M_invalidate_all();\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     basic_string&\n     erase(size_type __pos = 0, size_type __n = _Base::npos)\n@@ -581,15 +581,15 @@ namespace __gnu_debug\n       return iterator(__res, this);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     void\n     pop_back()\n     {\n       __glibcxx_check_nonempty();\n       _Base::pop_back();\n       this->_M_invalidate_all();\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     basic_string&\n     replace(size_type __pos1, size_type __n1, const basic_string& __str)\n@@ -685,7 +685,7 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       basic_string& replace(iterator __i1, iterator __i2,\n \t\t\t    std::initializer_list<_CharT> __l)\n       {\n@@ -694,7 +694,7 @@ namespace __gnu_debug\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     size_type\n     copy(_CharT* __s, size_type __n, size_type __pos = 0) const"}, {"sha": "1c99ac842b6e80e431acbec3f8fec138e114f7af", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -30,7 +30,7 @@\n #ifndef _GLIBCXX_DEBUG_UNORDERED_MAP\n #define _GLIBCXX_DEBUG_UNORDERED_MAP 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n # include <unordered_map>\n@@ -941,6 +941,6 @@ namespace __debug\n } // namespace __debug\n } // namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "d270ecc96d3ac9e13eeed36ead7f0b12e001791f", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -30,7 +30,7 @@\n #ifndef _GLIBCXX_DEBUG_UNORDERED_SET\n #define _GLIBCXX_DEBUG_UNORDERED_SET 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n # include <unordered_set>\n@@ -923,6 +923,6 @@ namespace __debug\n } // namespace __debug\n } // namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "9166a0736913110eb0be063ad8b26546785c5001", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -53,7 +53,7 @@ namespace __debug\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n #endif\n \n@@ -81,7 +81,7 @@ namespace __debug\n       vector(const _Allocator& __a = _Allocator())\n       : _Base(__a), _M_guaranteed_capacity(0) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       vector(size_type __n, const _Allocator& __a = _Allocator())\n       : _Base(__n, __a), _M_guaranteed_capacity(__n) { }\n@@ -96,7 +96,7 @@ namespace __debug\n       : _Base(__n, __value, __a), _M_guaranteed_capacity(__n) { }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -117,7 +117,7 @@ namespace __debug\n       vector(const _Base& __x)\n       : _Base(__x), _M_guaranteed_capacity(__x.size()) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       vector(vector&& __x) noexcept\n       : _Base(std::move(__x)),\n \t_M_guaranteed_capacity(this->size())\n@@ -154,7 +154,7 @@ namespace __debug\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       vector&\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n@@ -177,7 +177,7 @@ namespace __debug\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -201,7 +201,7 @@ namespace __debug\n \t_M_update_guaranteed_capacity();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       assign(initializer_list<value_type> __l)\n       {\n@@ -246,7 +246,7 @@ namespace __debug\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -268,7 +268,7 @@ namespace __debug\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       {\n@@ -306,7 +306,7 @@ namespace __debug\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       shrink_to_fit()\n       {\n@@ -401,7 +401,7 @@ namespace __debug\n \t_M_update_guaranteed_capacity();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up = _Tp>\n         typename __gnu_cxx::__enable_if<!std::__are_same<_Up, bool>::__value,\n \t\t\t\t\tvoid>::__type\n@@ -428,7 +428,7 @@ namespace __debug\n \t_Base::pop_back();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n         emplace(iterator __position, _Args&&... __args)\n@@ -462,7 +462,7 @@ namespace __debug\n \treturn iterator(__res, this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up = _Tp>\n         typename __gnu_cxx::__enable_if<!std::__are_same<_Up, bool>::__value,\n \t\t\t\t\titerator>::__type\n@@ -488,7 +488,7 @@ namespace __debug\n \t_M_update_guaranteed_capacity();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -546,11 +546,11 @@ namespace __debug\n \n       void\n       swap(vector& __x)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \tif (!_Alloc_traits::_S_propagate_on_swap())\n \t  __glibcxx_check_equal_allocs(__x);\n #endif\n@@ -638,7 +638,7 @@ namespace __debug\n \n } // namespace __debug\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // DR 1182.\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>"}, {"sha": "0713416d1cecd67c5f4f47172e4ee9b4f738863f", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -427,7 +427,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     __out_last - __out_first);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   using std::is_heap;\n #else\n   /**\n@@ -471,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   using std::is_sorted;\n #else\n   // is_sorted, a predicated testing whether a range is sorted in\n@@ -529,7 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return false;\n       return true;\n     }\n-#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+#endif  // C++11\n \n   /**\n    *  @brief Find the median of three values."}, {"sha": "3ae04acfbc24a1678bcc56538b6077ebfc093872", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <bits/alloc_traits.h>\n #else\n # include <bits/allocator.h>  // for __alloc_swap\n@@ -48,7 +48,7 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Alloc>\n     struct __allocator_always_compares_equal\n     { static const bool value = false; };\n@@ -107,12 +107,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n */\n template<typename _Alloc>\n   struct __alloc_traits\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   : std::allocator_traits<_Alloc>\n #endif\n   {\n     typedef _Alloc allocator_type;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     typedef std::allocator_traits<_Alloc>           _Base_type;\n     typedef typename _Base_type::value_type         value_type;\n     typedef typename _Base_type::pointer            pointer;"}, {"sha": "47f52b504246ee881e38f26864a505b06eb7a2da", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -74,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "9e815610e7fbf4cd7efb6115210ec77e9f0ca0f1", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -1050,7 +1050,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return size_type(-1) / sizeof(value_type); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "1166831a6519b2806ad1a04752b14265e993eb99", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_type max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return __numeric_traits<size_type>::__max / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "c1901849288caf9b7b1e8c7b1d3b6afa13c14b1f", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "1ce695a3f82f178710a66d360ebfd0f7a31cff7e", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -588,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "0e8add16f15cc87db75cce7a8595f8523ae3bc82", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -105,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return size_t(-1) / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "d869302e6a1d71ccafaece56a448661bf783bef7", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -123,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     power(_Tp __x, _Integer __n)\n     { return __power(__x, __n); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   using std::iota;\n #else\n   /**\n@@ -144,7 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       while (__first != __last)\n \t*__first++ = __value++;\n     }\n-#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+#endif  // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1e9106caeedbd56e3407174dfec8c1d960ed0a05", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -132,7 +132,7 @@ namespace __gnu_pbds\n     };\n \n     // Use C++0x's static_assert if possible.\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #define PB_DS_STATIC_ASSERT(UNIQUE, E)  static_assert(E, #UNIQUE)\n #else\n     template<bool>"}, {"sha": "5592a77b3e13774850c714a433a47442ec105507", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -42,7 +42,7 @@\n #include <bits/stl_iterator_base_types.h>\n #include <ext/cast.h>\n #include <ext/type_traits.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <bits/ptr_traits.h>\n #endif\n \n@@ -562,7 +562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "bb340ab9f5c62243c884d0c80d03d552f975409b", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -161,7 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)"}, {"sha": "1ab58f69ab3a77491c0c846b19ba9efc00defb2d", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -2330,6 +2330,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _EXT_RANDOM"}, {"sha": "0145ccc5116196bf8ae2991c0b3da7ec408aba4c", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -314,7 +314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __rc_string_base(const __rc_string_base& __rcs);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       __rc_string_base(__rc_string_base&& __rcs)\n       : _M_dataplus(__rcs._M_dataplus)\n       { __rcs._M_data(_S_empty_rep._M_refcopy()); }"}, {"sha": "bfc6902a2eb7c6cb8d1738e6bcfd2b272d7af0cd", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -183,7 +183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __sso_string_base(const __sso_string_base& __rcs);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       __sso_string_base(__sso_string_base&& __rcs);\n #endif\n \n@@ -344,7 +344,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_dataplus(__rcs._M_get_allocator(), _M_local_data)\n     { _M_construct(__rcs._M_data(), __rcs._M_data() + __rcs._M_length()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     __sso_string_base(__sso_string_base&& __rcs)"}, {"sha": "c525b48b77dbff32c398dbe23ac51a1c01457b1a", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -55,7 +55,7 @@\n #include <utility>\n #include <bits/functexcept.h>\n #include <bits/move.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n # include <functional>\n # include <random>\n #else\n@@ -385,7 +385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { engine().seed(__s); }\n \n   private:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     typedef std::uniform_real_distribution<double> \tdistribution_type;\n     typedef std::mt19937 \t\t\t\tengine_type;\n #else\n@@ -396,7 +396,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static double\n     generate()\n     {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const distribution_type distribution(0, 1);\n       static auto generator = std::bind(distribution, engine());\n #else\n@@ -459,7 +459,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       throw_value_base(const throw_value_base& __v) : _M_i(__v._M_i)\n       { throw_conditionally(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Shall not throw.\n       throw_value_base(throw_value_base&&) = default;\n #endif\n@@ -476,7 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // Shall not throw.\n       throw_value_base&\n       operator=(throw_value_base&&) = default;\n@@ -571,7 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     throw_value_limit(const throw_value_limit& __other)\n     : base_type(__other._M_i) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     throw_value_limit(throw_value_limit&&) = default;\n #endif\n \n@@ -585,7 +585,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     throw_value_limit&\n     operator=(throw_value_limit&&) = default;\n #endif\n@@ -602,7 +602,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     throw_value_random(const throw_value_random& __other)\n     : base_type(__other._M_i) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     throw_value_random(throw_value_random&&) = default;\n #endif\n \n@@ -616,7 +616,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     throw_value_random&\n     operator=(throw_value_random&&) = default;\n #endif\n@@ -675,7 +675,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn a;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n         void\n         construct(_Up* __p, _Args&&... __args)\n@@ -771,7 +771,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n # include <bits/functional_hash.h>\n "}, {"sha": "7e2612e46adcf7ce704f401146a61678de3ee783", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -150,7 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __versa_string(const __versa_string& __str)\n       : __vstring_base(__str) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  String move constructor.\n        *  @param  __str  Source string.\n@@ -238,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __end  End of range.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -261,7 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(const __versa_string& __str) \n       { return this->assign(__str); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  String move assignment operator.\n        *  @param  __str  Source string.\n@@ -386,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n@@ -468,7 +468,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       resize(size_type __n)\n       { this->resize(__n, _CharT()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /// A non-binding request to reduce capacity() to size().\n       void\n       shrink_to_fit()\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn this->_M_data()[__n];\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Returns a read/write reference to the data at the first\n        *  element of the %string.\n@@ -669,7 +669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Append an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to be appended.\n@@ -678,7 +678,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __versa_string&\n       operator+=(std::initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Append a string to this string.\n@@ -748,7 +748,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       append(size_type __n, _CharT __c)\n       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Append an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to append.\n@@ -757,7 +757,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __versa_string&\n       append(std::initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -767,7 +767,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Appends characters in the range [first,last) to this string.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -803,7 +803,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Set value to contents of another string.\n        *  @param  __str  Source string to use.\n@@ -818,7 +818,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->swap(__str);\n \treturn *this;\n       }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Set value to a substring of a string.\n@@ -896,7 +896,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Sets value of string to characters in the range\n        *  [first,last).\n       */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -906,7 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         assign(_InputIterator __first, _InputIterator __last)\n         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Set value to an initializer_list of characters.\n        *  @param __l  The initializer_list of characters to assign.\n@@ -915,7 +915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __versa_string&\n       assign(std::initializer_list<_CharT> __l)\n       { return this->assign(__l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Insert multiple characters.\n@@ -946,7 +946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  thrown.  The value of the string doesn't change if an error\n        *  is thrown.\n       */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -956,7 +956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Insert an initializer_list of characters.\n        *  @param __p  Iterator referencing location in string to insert at.\n@@ -966,7 +966,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       insert(iterator __p, std::initializer_list<_CharT> __l)\n       { this->insert(__p, __l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Insert value of a string.\n@@ -1160,7 +1160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn iterator(this->_M_data() + __pos);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Remove the last character.\n        *\n@@ -1169,7 +1169,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       pop_back()\n       { this->_M_erase(size()-1, 1); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n       /**\n        *  @brief  Replace characters with value from another string.\n@@ -1387,7 +1387,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  of result exceeds max_size(), length_error is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         __versa_string&\n@@ -1458,7 +1458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n       \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Replace range of characters with initializer_list.\n        *  @param __i1  Iterator referencing start of range to replace.\n@@ -1475,7 +1475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __versa_string& replace(iterator __i1, iterator __i2,\n \t\t\t      std::initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     private:\n       template<class _Integer>\n@@ -2159,7 +2159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n \t      _CharT __rhs);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n@@ -2572,7 +2572,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99))\n+#if ((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99))\n \n #include <ext/string_conversions.h>\n \n@@ -2790,7 +2790,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <bits/functional_hash.h>\n \n@@ -2848,7 +2848,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif /* __GXX_EXPERIMENTAL_CXX0X__ */\n+#endif // C++11\n \n #include \"vstring.tcc\" \n "}, {"sha": "56e38559e959a86a8ffb4a831e39c634e930d874", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t std::allocator<wchar_t>, __rc_string_base> __wrc_string;\n #endif  \n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n+#if ((__cplusplus >= 201103L) \\\n      && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n \n   typedef __versa_string<char16_t>                          __u16vstring;"}, {"sha": "fb844f9664bfd8f237d6d30ea4f3e9bc9f154d9b", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -1674,7 +1674,7 @@ namespace __parallel\n   template<typename _RAIter, typename _RandomNumberGenerator>\n     void\n     random_shuffle(_RAIter __begin, _RAIter __end,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n                    _RandomNumberGenerator&& __rand)\n #else\n                    _RandomNumberGenerator& __rand)"}, {"sha": "8de1b799e59bcc34ee251face7e7c51e02cff2f9", "filename": "libstdc++-v3/include/parallel/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -691,7 +691,7 @@ namespace __parallel\n   template<typename _RAIter, typename _RandomNumberGenerator>\n     void\n     random_shuffle(_RAIter, _RAIter,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t   _RandomNumberGenerator&&);\n #else\n \t\t   _RandomNumberGenerator&);"}, {"sha": "e93bbf829a703ece85470b85445cab427c54972a", "filename": "libstdc++-v3/include/precompiled/extc++.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -26,7 +26,7 @@\n  *  This is an implementation file for a precompiled header.\n  */\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n #include <bits/stdtr1c++.h>\n #endif\n "}, {"sha": "278e6284c51df066a328b788369f11a5fe1dc116", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -49,7 +49,7 @@\n #include <cstring>\n #include <ctime>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <ccomplex>\n #include <cfenv>\n #include <cinttypes>\n@@ -95,7 +95,7 @@\n #include <valarray>\n #include <vector>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <array>\n #include <atomic>\n #include <chrono>"}, {"sha": "62027e852d51f3be20138c17a2867e7c3cdf2840", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -98,7 +98,7 @@ namespace __profile\n       _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT\n       : _Base() { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr bitset(unsigned long long __val) noexcept\n #else\n       bitset(unsigned long __val)\n@@ -127,7 +127,7 @@ namespace __profile\n \n       bitset(const _Base& __x) : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _CharT>\n         explicit\n         bitset(const _CharT* __str,\n@@ -239,7 +239,7 @@ namespace __profile\n       }\n \n       using _Base::to_ulong;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::to_ullong;\n #endif\n \n@@ -364,7 +364,7 @@ namespace __profile\n     { return __os << __x._M_base(); }\n } // namespace __profile\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // DR 1182.\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>"}, {"sha": "f5e5fa3bb2ad2a47db01ca35ef1e6894757899de", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -64,7 +64,7 @@ namespace __profile\n       deque(const _Allocator& __a = _Allocator())\n       : _Base(__a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       deque(size_type __n)\n       : _Base(__n) { }\n@@ -79,7 +79,7 @@ namespace __profile\n       : _Base(__n, __value, __a) { }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -96,7 +96,7 @@ namespace __profile\n       deque(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       deque(deque&& __x)\n       : _Base(std::move(__x))\n       { }\n@@ -115,7 +115,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       deque&\n       operator=(deque&& __x)\n       {\n@@ -134,7 +134,7 @@ namespace __profile\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -152,7 +152,7 @@ namespace __profile\n \t_Base::assign(__n, __t);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       assign(initializer_list<value_type> __l)\n       {\n@@ -195,7 +195,7 @@ namespace __profile\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n@@ -217,7 +217,7 @@ namespace __profile\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       {\n@@ -237,7 +237,7 @@ namespace __profile\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::shrink_to_fit;\n #endif\n \n@@ -295,7 +295,7 @@ namespace __profile\n \t_Base::push_back(__x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_front(_Tp&& __x)\n       { emplace_front(std::move(__x)); }\n@@ -335,7 +335,7 @@ namespace __profile\n \treturn iterator(__res);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n@@ -353,7 +353,7 @@ namespace __profile\n \t_Base::insert(__position, __n, __x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else"}, {"sha": "6a5a343e8697c78c0204b72b118e9ec9860cc9a5", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -29,7 +29,7 @@\n #ifndef _GLIBCXX_PROFILE_FORWARD_LIST\n #define _GLIBCXX_PROFILE_FORWARD_LIST 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -177,6 +177,6 @@ namespace __profile\n } // namespace __profile\n } // namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "a3cc5dd5e1c660c86fde8b59f7b64bb6a861d0d4", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@\n #include <cerrno>\n #include <cstdlib> // atof, atoi, strtol, getenv, atexit, abort\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_C::unordered_map\n #include <unordered_map>\n #else"}, {"sha": "3fc58c70f6ac337c19cae7972db9191cb34fdf90", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -72,7 +72,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         __profcxx_list_construct2(this); \t// list2vector\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       list(size_type __n)\n       : _Base(__n) \n@@ -99,7 +99,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -127,7 +127,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         __profcxx_list_construct2(this); \n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       list(list&& __x) noexcept\n       : _Base(std::move(__x))\n       {\n@@ -153,7 +153,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       list&\n       operator=(list&& __x)\n       {\n@@ -176,7 +176,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       {\t_Base::assign(__l); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -237,7 +237,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -260,7 +260,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       { _Base::resize(__sz); }\n@@ -306,7 +306,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         _Base::push_front(__x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::emplace_front;\n #endif\n \n@@ -319,7 +319,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       using _Base::push_back;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::emplace_back;\n #endif\n \n@@ -332,7 +332,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         __profcxx_list_rewind(this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n         emplace(iterator __position, _Args&&... __args)\n@@ -350,7 +350,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         return iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       { \n@@ -374,7 +374,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t_Base::insert(__position.base(), __n, __x);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -410,27 +410,27 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       // 23.2.2.4 list operations:\n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n #endif\n       { this->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x)\n       { this->splice(__position, std::move(__x)); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __i)\n       { this->splice(__position, std::move(__x), __i); }\n #endif\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __i)\n #else\n       splice(iterator __position, list& __x, iterator __i)\n@@ -445,7 +445,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       }\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       splice(iterator __position, list&& __x, iterator __first,\n \t     iterator __last)\n #else\n@@ -460,7 +460,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t\t      __first.base(), __last.base());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       splice(iterator __position, list& __x, iterator __first, iterator __last)\n       { this->splice(__position, std::move(__x), __first, __last); }\n@@ -532,7 +532,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t}\n \n       void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       merge(list&& __x)\n #else\n       merge(list& __x)\n@@ -544,15 +544,15 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t  { _Base::merge(_GLIBCXX_MOVE(__x._M_base())); }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       merge(list& __x)\n       { this->merge(std::move(__x)); }\n #endif\n \n       template<class _Compare>\n         void\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n         merge(list&& __x, _Compare __comp)\n #else\n         merge(list& __x, _Compare __comp)\n@@ -564,7 +564,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t    { _Base::merge(_GLIBCXX_MOVE(__x._M_base()), __comp); }\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Compare>\n         void\n         merge(list& __x, _Compare __comp)"}, {"sha": "0603c02b8e2a452d062249cd681c93943fe36203", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -69,7 +69,7 @@ namespace __profile\n       : _Base(__comp, __a)\n       { __profcxx_map_to_unordered_map_construct(this); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -89,7 +89,7 @@ namespace __profile\n       : _Base(__x)\n       { __profcxx_map_to_unordered_map_construct(this); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       map(map&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -111,7 +111,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       map&\n       operator=(map&& __x)\n       {\n@@ -180,7 +180,7 @@ namespace __profile\n         return const_reverse_iterator(begin());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n@@ -217,7 +217,7 @@ namespace __profile\n         return _Base::operator[](__k);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       mapped_type&\n       operator[](key_type&& __k)\n       {\n@@ -241,7 +241,7 @@ namespace __profile\n       }\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n@@ -275,7 +275,7 @@ namespace __profile\n \t\t\t\t\t __res.second);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -291,7 +291,7 @@ namespace __profile\n \t}\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(std::initializer_list<value_type> __list)\n       { \n@@ -303,7 +303,7 @@ namespace __profile\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n@@ -316,7 +316,7 @@ namespace __profile\n \treturn __i;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -332,7 +332,7 @@ namespace __profile\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -347,7 +347,7 @@ namespace __profile\n                                                 size() - size_before);\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -381,7 +381,7 @@ namespace __profile\n \t}\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return iterator(_Base::erase(__first, __last)); }"}, {"sha": "b1edd155e2609adffcdc375273277b3a1b13fca6", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -68,7 +68,7 @@ namespace __profile\n \t\t\tconst _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -85,7 +85,7 @@ namespace __profile\n       multimap(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multimap(multimap&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -106,7 +106,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multimap&\n       operator=(multimap&& __x)\n       {\n@@ -161,7 +161,7 @@ namespace __profile\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n@@ -185,7 +185,7 @@ namespace __profile\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n@@ -206,7 +206,7 @@ namespace __profile\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -215,21 +215,21 @@ namespace __profile\n         { return iterator(_Base::insert(std::forward<_Pair>(__x))); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(std::initializer_list<value_type> __list)\n       { _Base::insert(__list); }\n #endif\n \n       iterator\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       insert(const_iterator __position, const value_type& __x)\n #else\n       insert(iterator __position, const value_type& __x)\n #endif\n       { return iterator(_Base::insert(__position, __x)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -239,7 +239,7 @@ namespace __profile\n \t\t\t\t\tstd::forward<_Pair>(__x))); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -249,7 +249,7 @@ namespace __profile\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       { return iterator(_Base::erase(__position)); }\n@@ -277,7 +277,7 @@ namespace __profile\n \treturn __count;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return iterator(_Base::erase(__first, __last)); }"}, {"sha": "820103c34892e488b86e48048149846d5ab93864", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -68,7 +68,7 @@ namespace __profile\n \t\t\tconst _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -85,7 +85,7 @@ namespace __profile\n       multiset(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multiset(multiset&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -106,7 +106,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       multiset&\n       operator=(multiset&& __x)\n       {\n@@ -161,7 +161,7 @@ namespace __profile\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n@@ -185,7 +185,7 @@ namespace __profile\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n@@ -204,7 +204,7 @@ namespace __profile\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(value_type&& __x)\n       { return iterator(_Base::insert(std::move(__x))); }\n@@ -214,13 +214,13 @@ namespace __profile\n       insert(const_iterator __position, const value_type& __x)\n       { return iterator(_Base::insert(__position, __x)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       { return iterator(_Base::insert(__position, std::move(__x))); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -230,13 +230,13 @@ namespace __profile\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(initializer_list<value_type> __l)\n       { _Base::insert(__l); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       { return iterator(_Base::erase(__position)); }\n@@ -260,7 +260,7 @@ namespace __profile\n \treturn __count;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return iterator(_Base::erase(__first, __last)); }"}, {"sha": "be827fe11ecb84f31f787ac0e196e73f5dbc3ded", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -68,7 +68,7 @@ namespace __profile\n \t\t   const _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -85,7 +85,7 @@ namespace __profile\n       set(const _Base& __x)\n       : _Base(__x) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       set(set&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n@@ -106,7 +106,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       set&\n       operator=(set&& __x)\n       {\n@@ -161,7 +161,7 @@ namespace __profile\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n@@ -185,7 +185,7 @@ namespace __profile\n       using _Base::max_size;\n \n       // modifiers:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n@@ -213,7 +213,7 @@ namespace __profile\n \t\t\t\t\t __res.second);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n@@ -229,13 +229,13 @@ namespace __profile\n       insert(const_iterator __position, const value_type& __x)\n       { return iterator(_Base::insert(__position, __x)); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __position, value_type&& __x)\n       { return iterator(_Base::insert(__position, std::move(__x))); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -245,13 +245,13 @@ namespace __profile\n         insert(_InputIterator __first, _InputIterator __last)\n         { _Base::insert(__first, __last); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       insert(initializer_list<value_type> __l)\n       { _Base::insert(__l); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __position)\n       { return iterator(_Base::erase(__position)); }\n@@ -274,7 +274,7 @@ namespace __profile\n         }\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return iterator(_Base::erase(__first, __last)); }"}, {"sha": "e7b4c379ac404013b35ea4f16cafca22a61621b5", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n #ifndef _GLIBCXX_PROFILE_UNORDERED_MAP\n #define _GLIBCXX_PROFILE_UNORDERED_MAP 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n # include <unordered_map>\n@@ -614,6 +614,6 @@ namespace __profile\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "357c073feaa2483a3c382365ab3175b668061f5e", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -28,7 +28,7 @@\n #ifndef _GLIBCXX_PROFILE_UNORDERED_SET\n #define _GLIBCXX_PROFILE_UNORDERED_SET 1\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n # include <unordered_set>\n@@ -573,6 +573,6 @@ namespace __profile\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif"}, {"sha": "0646f15ad40e3b7d1ed494068220e9c739484ab6", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -44,7 +44,7 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n #endif\n \n@@ -82,7 +82,7 @@ namespace __profile\n         __profcxx_vector_construct2(this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n       vector(size_type __n, const _Allocator& __a = _Allocator())\n       : _Base(__n, __a)\n@@ -109,7 +109,7 @@ namespace __profile\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -138,7 +138,7 @@ namespace __profile\n         __profcxx_vector_construct2(this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       vector(vector&& __x) noexcept\n       : _Base(std::move(__x))\n       {\n@@ -178,7 +178,7 @@ namespace __profile\n         return *this;\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       vector&\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n@@ -233,7 +233,7 @@ namespace __profile\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n@@ -255,7 +255,7 @@ namespace __profile\n       using _Base::size;\n       using _Base::max_size;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       resize(size_type __sz)\n       {\n@@ -281,7 +281,7 @@ namespace __profile\n       }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       using _Base::shrink_to_fit;\n #endif\n \n@@ -340,7 +340,7 @@ namespace __profile\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       push_back(_Tp&& __x)\n       {\n@@ -362,7 +362,7 @@ namespace __profile\n \treturn iterator(__res, this);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       iterator\n       insert(iterator __position, _Tp&& __x)\n       {\n@@ -379,7 +379,7 @@ namespace __profile\n       { this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       void\n       swap(vector&& __x)\n       {\n@@ -389,7 +389,7 @@ namespace __profile\n \n       void\n       swap(vector& __x)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n@@ -406,7 +406,7 @@ namespace __profile\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n #else\n@@ -511,7 +511,7 @@ namespace __profile\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(vector<_Tp, _Alloc>&& __lhs, vector<_Tp, _Alloc>& __rhs)\n@@ -525,7 +525,7 @@ namespace __profile\n \n } // namespace __profile\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // DR 1182.\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>"}, {"sha": "00d3123225c7818247b47f3d0ea85699a013b8c7", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -321,6 +321,6 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n # include <profile/array>\n #endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_ARRAY"}, {"sha": "4012f7d1b6bc184e2111315b97d0306cc8ec4913", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #endif\n "}, {"sha": "3ed7b2f32cfc028839898f2fea1f566d55caef85", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -80,7 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT\n       : _M_w() { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr _Base_bitset(unsigned long long __val) noexcept\n       : _M_w{ _WordT(__val)\n #if __SIZEOF_LONG_LONG__ > __SIZEOF_LONG__\n@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_getword(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return _M_w[_S_whichword(__pos)]; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const _WordT*\n       _M_getdata() const noexcept\n       { return _M_w; }\n@@ -218,7 +218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       unsigned long\n       _M_do_to_ulong() const;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       unsigned long long\n       _M_do_to_ullong() const;\n #endif\n@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return _M_w[0];\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<size_t _Nw>\n     unsigned long long\n     _Base_bitset<_Nw>::_M_do_to_ullong() const\n@@ -380,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_w(0)\n       { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr _Base_bitset(unsigned long long __val) noexcept\n #else\n       _Base_bitset(unsigned long __val)\n@@ -412,7 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_getword(size_t) const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       const _WordT*\n       _M_getdata() const noexcept\n       { return &_M_w; }\n@@ -480,7 +480,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       unsigned long long\n       _M_do_to_ullong() const noexcept\n       { return _M_w; }\n@@ -525,7 +525,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT\n       { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr _Base_bitset(unsigned long long) noexcept\n #else\n       _Base_bitset(unsigned long)\n@@ -626,7 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       unsigned long long\n       _M_do_to_ullong() const noexcept\n       { return 0; }\n@@ -664,7 +664,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _S_do_sanitize(_WordT) _GLIBCXX_NOEXCEPT { } \n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<size_t _Nb, bool = _Nb < _GLIBCXX_BITSET_BITS_PER_ULL>\n     struct _Sanitize_val\n     {\n@@ -761,7 +761,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__sanitize_type::_S_do_sanitize(this->_M_hiword());\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename> friend class hash;\n #endif\n \n@@ -845,7 +845,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { }\n \n       /// Initial bits bitwise-copied from a single word (others set to zero).\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       constexpr bitset(unsigned long long __val) noexcept\n       : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }\n #else\n@@ -912,7 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_copy_from_string(__s, __position, __n, __zero, __one);\n \t}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  Construct from a character %array.\n        *  @param  __str  An %array of characters @a zero and @a one.\n@@ -1162,7 +1162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       to_ulong() const\n       { return this->_M_do_to_ulong(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       unsigned long long\n       to_ullong() const\n       { return this->_M_do_to_ullong(); }\n@@ -1540,7 +1540,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n #undef _GLIBCXX_BITSET_BITS_PER_WORD\n #undef _GLIBCXX_BITSET_BITS_PER_ULL\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <bits/functional_hash.h>\n \n@@ -1574,7 +1574,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/bitset>"}, {"sha": "7a9a8ce012e54c344f7effc1bf3df1aaa513b297", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -755,6 +755,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif //__GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif //_GLIBCXX_CHRONO"}, {"sha": "f9221a86e0bb936e6bb4d7d34d8c585e722bcbef", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);\n   /// Return complex base 10 logarithm of @a z.\n   template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   // DR 844.\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);\n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _GLIBCXX_CONSTEXPR complex(const complex<_Up>& __z)\n \t: _M_real(__z.real()), _M_imag(__z.imag()) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       constexpr _Tp \n@@ -529,7 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // Values\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     constexpr _Tp\n     real(const complex<_Tp>& __z)\n@@ -952,7 +952,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 26.2.8/9  pow(__x, __y): Returns the complex power base of __x\n   //                          raised to the __y-th power.  The branch\n   //                          cut is on the negative axis.\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   template<typename _Tp>\n     complex<_Tp>\n     __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)\n@@ -1046,7 +1046,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }\n \n       _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       : _M_value{ __r, __i } { }\n #else\n       {\n@@ -1058,7 +1058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit _GLIBCXX_CONSTEXPR complex(const complex<double>&);\n       explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\t\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       constexpr float \n@@ -1193,7 +1193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }\n \n       _GLIBCXX_CONSTEXPR complex(double __r = 0.0, double __i = 0.0)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       : _M_value{ __r, __i } { }\n #else\n       {\n@@ -1207,7 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit _GLIBCXX_CONSTEXPR complex(const complex<long double>&);\t\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       constexpr double \n@@ -1342,7 +1342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX_CONSTEXPR complex(long double __r = 0.0L, \n \t\t\t\t long double __i = 0.0L)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       : _M_value{ __r, __i } { }\n #else\n       {\n@@ -1357,7 +1357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(const complex<double>& __z)\n       : _M_value(__z.__rep()) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n       constexpr long double \n@@ -1549,7 +1549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1919,6 +1919,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+#endif  // C++11\n \n #endif  /* _GLIBCXX_COMPLEX */"}, {"sha": "a58d7f5ad851f13fe250122a0eb252d4b76e3265", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -284,6 +284,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_CONDITION_VARIABLE"}, {"sha": "4be31114b4625d6f731b817e296bdc314b13603c", "filename": "libstdc++-v3/include/std/forward_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fforward_list?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -47,6 +47,6 @@\n # include <profile/forward_list>\n #endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_FORWARD_LIST"}, {"sha": "43c59034791e039b417aa644d36452eb320c1c41", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -42,7 +42,7 @@\n #include <bits/codecvt.h>\n #include <cstdio>             // For BUFSIZ\n #include <bits/basic_file.h>  // For __basic_file, __c_lock\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <string>             // For std::string overloads.\n #endif\n \n@@ -271,7 +271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __filebuf_type*\n       open(const char* __s, ios_base::openmode __mode);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n        *  @param  __s  The name of the file.\n@@ -473,7 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an input file stream.\n        *  @param  __s  std::string specifying the filename.\n@@ -547,7 +547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n        *  @param  __s  The name of the file.\n@@ -647,7 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an output file stream.\n        *  @param  __s  std::string specifying the filename.\n@@ -723,7 +723,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n        *  @param  __s  The name of the file.\n@@ -823,7 +823,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an input/output file stream.\n        *  @param  __s  Null terminated string specifying the filename.\n@@ -896,7 +896,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n        *  @param  __s  The name of the file."}, {"sha": "4dbf4d55a10eb31905a217aa6b273b3812e1b057", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -49,7 +49,7 @@\n #include <bits/c++config.h>\n #include <bits/stl_function.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n #include <typeinfo>\n #include <new>\n@@ -2438,6 +2438,6 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_FUNCTIONAL"}, {"sha": "7f71dde5d55687e608b3c4692d5418a8a7c3d1b2", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -1521,6 +1521,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_FUTURE"}, {"sha": "15fcbd570a6ae9d58a9b394ed70fb2621cb811c0", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -41,7 +41,7 @@\n #include <iosfwd>\n #include <bits/ios_base.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <locale>\n #endif\n \n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __os; \n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   \n   template<typename _MoneyT>\n     struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };"}, {"sha": "8c2751cfbc19d8f86eb1db273465e3c831ed6ad7", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -701,7 +701,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  For ease of use, sentries may be converted to booleans.  The\n        *  return value is that of the sentry state (true == okay).\n       */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n #endif\n       operator bool() const\n@@ -857,7 +857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_istream<_CharT, _Traits>&\n     ws(basic_istream<_CharT, _Traits>& __is);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // [27.7.1.6] Rvalue stream extraction\n   /**\n    *  @brief  Generic extractor for rvalue stream\n@@ -873,7 +873,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)\n     { return (__is >> __x); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "ea6de35e832eaaf4bd2eea3552f987d91a1e3a15", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /** The number of base 10 digits that can be represented without change. */\n     static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     /** The number of base 10 digits required to ensure that values which\n \tdiffer are always differentiated.  */\n     static constexpr int max_digits10 = 0;\n@@ -315,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR _Tp\n       max() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /** A finite value x such that there is no other finite value y\n        *  where y < x.  */\n       static constexpr _Tp\n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     struct numeric_limits<const _Tp>\n     : public numeric_limits<_Tp> { };\n@@ -381,13 +381,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR bool \n       max() _GLIBCXX_USE_NOEXCEPT { return true; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr bool\n       lowest() noexcept { return min(); }\n #endif\n       static _GLIBCXX_USE_CONSTEXPR int digits = 1;\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -450,14 +450,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR char \n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max(char); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr char \n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (char);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (char);\n@@ -517,15 +517,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR signed char \n       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr signed char \n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (signed char);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (signed char);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -587,7 +587,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned char \n       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned char \n       lowest() noexcept { return min(); }\n #endif\n@@ -596,7 +596,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned char);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (unsigned char);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -660,15 +660,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR wchar_t \n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (wchar_t); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr wchar_t\n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (wchar_t);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (wchar_t);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (wchar_t);\n@@ -716,7 +716,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = round_toward_zero;\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /// numeric_limits<char16_t> specialization.\n   template<>\n     struct numeric_limits<char16_t>\n@@ -852,14 +852,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR short \n       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr short \n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (short);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (short);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -919,7 +919,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned short \n       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__ * 2U + 1; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned short \n       lowest() noexcept { return min(); }\n #endif\n@@ -928,7 +928,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned short);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (unsigned short);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -992,14 +992,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR int \n       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int \n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (int);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (int);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -1059,7 +1059,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned int \n       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned int \n       lowest() noexcept { return min(); }\n #endif\n@@ -1068,7 +1068,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned int);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (unsigned int);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -1131,14 +1131,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR long \n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr long \n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (long);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (long);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -1198,7 +1198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned long \n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned long \n       lowest() noexcept { return min(); }\n #endif\n@@ -1207,7 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned long);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (unsigned long);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -1271,7 +1271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR long long \n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr long long \n       lowest() noexcept { return min(); }\n #endif\n@@ -1280,7 +1280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (long long);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (long long);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -1341,7 +1341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned long long \n       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned long long \n       lowest() noexcept { return min(); }\n #endif\n@@ -1350,7 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned long long);\n       static _GLIBCXX_USE_CONSTEXPR int digits10 \n        = __glibcxx_digits10 (unsigned long long);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -1415,7 +1415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR __int128\n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__int128); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr __int128\n       lowest() noexcept { return min(); }\n #endif\n@@ -1424,7 +1424,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (__int128);\n       static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (__int128);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;\n@@ -1489,7 +1489,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR unsigned __int128\n       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (unsigned __int128); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr unsigned __int128\n       lowest() noexcept { return min(); }\n #endif\n@@ -1498,7 +1498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_digits (unsigned __int128);\n       static _GLIBCXX_USE_CONSTEXPR int digits10\n        = __glibcxx_digits10 (unsigned __int128);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10 = 0;\n #endif\n       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n@@ -1563,14 +1563,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR float \n       max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr float \n       lowest() noexcept { return -__FLT_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __FLT_MANT_DIG__;\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __FLT_DIG__;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10\n \t = __glibcxx_max_digits10 (__FLT_MANT_DIG__);\n #endif\n@@ -1638,14 +1638,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR double \n       max() _GLIBCXX_USE_NOEXCEPT { return __DBL_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr double \n       lowest() noexcept { return -__DBL_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __DBL_MANT_DIG__;\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __DBL_DIG__;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr int max_digits10\n \t = __glibcxx_max_digits10 (__DBL_MANT_DIG__);\n #endif\n@@ -1713,14 +1713,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR long double \n       max() _GLIBCXX_USE_NOEXCEPT { return __LDBL_MAX__; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static constexpr long double \n       lowest() noexcept { return -__LDBL_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __LDBL_MANT_DIG__;\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = __LDBL_DIG__;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       static _GLIBCXX_USE_CONSTEXPR int max_digits10\n \t = __glibcxx_max_digits10 (__LDBL_MANT_DIG__);\n #endif"}, {"sha": "d19b8ff4472145d858b7b5f7721718ff8bbe2402", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -66,7 +66,7 @@\n #include <bits/stl_tempbuf.h>\n #include <bits/stl_raw_storage_iter.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #  include <exception>        \t  // std::exception\n #  include <typeinfo>         \t  // std::type_info in get_deleter\n #  include <iosfwd>           \t  // std::basic_ostream"}, {"sha": "a2b533b1e0815571f8ac6f14ba7a55ecab3b8b31", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -797,6 +797,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_MUTEX"}, {"sha": "8b1d14c7c14503ad576182ad3677b412f05a6f03", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -445,7 +445,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  For ease of use, sentries may be converted to booleans.  The\n        *  return value is that of the sentry state (true == okay).\n       */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit\n #endif\n       operator bool() const\n@@ -588,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     flush(basic_ostream<_CharT, _Traits>& __os)\n     { return __os.flush(); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief  Generic inserter for rvalue stream\n    *  @param  __os  An input stream.\n@@ -603,7 +603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)\n     { return (__os << __x); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "830d7f28b3f8b3ee110d4faa043d5095b75cc76c", "filename": "libstdc++-v3/include/std/random", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -53,6 +53,6 @@\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_RANDOM"}, {"sha": "b3463553d4a4848ec19a1450c48de94e4ceb7507", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -533,6 +533,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif //__GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif //_GLIBCXX_RATIO"}, {"sha": "fa129affd7929292b63db63e96365b1bcbde0a5d", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -61,6 +61,6 @@\n #include <bits/regex_grep_matcher.h>\n #include <bits/regex.h>\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_REGEX"}, {"sha": "f5041ec724ee1d43a7501b2b42aa12a6c8538325", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -456,6 +456,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _SCOPED_ALLOCATOR"}, {"sha": "4c6f6bdc9f381e999f5cfdca47236702ac771843", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -373,6 +373,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_COMPATIBILITY_CXX0X\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_SYSTEM_ERROR"}, {"sha": "6a4e85fdcf4401b5c48a5d0b72b3f40248b0fa7c", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -293,6 +293,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_THREAD"}, {"sha": "717e715d2dee05abf750f21ccc60ed4887c91e9d", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -1083,6 +1083,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_TUPLE"}, {"sha": "cd7d72811bddc3114ec2bc234e81c25c8e6cfb45", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -2066,6 +2066,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+#endif  // C++11\n \n #endif  // _GLIBCXX_TYPE_TRAITS"}, {"sha": "b8a78d3f8d5aabdb1dc6c62d4c33ccae5b1fdec0", "filename": "libstdc++-v3/include/std/typeindex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -104,6 +104,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+#endif  // C++11\n \n #endif  // _GLIBCXX_TYPEINDEX"}, {"sha": "fff292767a3baf3c575e912ccde62e45a965bb04", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -55,6 +55,6 @@\n # include <profile/unordered_map>\n #endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_MAP"}, {"sha": "bb9d3c8996ad9e55f733d41434034bc5472c50db", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -54,6 +54,6 @@\n #ifdef _GLIBCXX_PROFILE\n # include <profile/unordered_set>\n #endif\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _GLIBCXX_UNORDERED_SET"}, {"sha": "c23d7c50e6c9cc8f76a5ddbd7c3bdab2d4ddac52", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -71,7 +71,7 @@\n #include <bits/stl_relops.h>\n #include <bits/stl_pair.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <bits/move.h>\n #include <initializer_list>\n "}, {"sha": "16d3abe883bfbc4708dba4fb69d55ca363630b71", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -39,7 +39,7 @@\n #include <cmath>\n #include <algorithm>\n #include <debug/debug.h>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <initializer_list>\n #endif\n \n@@ -142,7 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Copy constructor.\n       valarray(const valarray&);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       ///  Move constructor.\n       valarray(valarray&&) noexcept;\n #endif\n@@ -159,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Construct an array with the same size and values in @a ia.\n       valarray(const indirect_array<_Tp>&);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       ///  Construct an array with an initializer_list of values.\n       valarray(initializer_list<_Tp>);\n #endif\n@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       valarray<_Tp>& operator=(const valarray<_Tp>& __v);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Move assign elements to an array.\n        *\n@@ -239,7 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       valarray<_Tp>& operator=(const indirect_array<_Tp>& __ia);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Assign elements to an initializer_list.\n        *\n@@ -467,7 +467,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvalarray<_Tp>& operator>>=(const _Expr<_Dom, _Tp>&);\n \n       // _lib.valarray.members_ member functions:\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       ///  Swap.\n       void swap(valarray<_Tp>& __v) noexcept;\n #endif\n@@ -634,7 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { std::__valarray_copy_construct(__v._M_data, __v._M_data + _M_size,\n \t\t\t\t     _M_data); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray(valarray<_Tp>&& __v) noexcept\n@@ -683,7 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t(__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray(initializer_list<_Tp> __l)\n@@ -728,7 +728,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(valarray<_Tp>&& __v) noexcept\n@@ -895,7 +895,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t _Array<size_t>(__i));\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<class _Tp>\n     inline void\n     valarray<_Tp>::swap(valarray<_Tp>& __v) noexcept\n@@ -1174,7 +1174,7 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n \n #undef _DEFINE_BINARY_OPERATOR\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   /**\n    *  @brief  Return an iterator pointing to the first element of\n    *          the valarray.\n@@ -1214,7 +1214,7 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n     inline const _Tp*\n     end(const valarray<_Tp>& __va)\n     { return std::__addressof(__va[0]) + __va.size(); }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n   // @} group numeric_arrays\n "}, {"sha": "948fe72fd62c565e6a29eb26ab81df8241a1c769", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -45,7 +45,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   using std::acos;\n   using std::asin;\n   using std::atan;\n@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // The std::fabs return type in C++0x mode is different (just _Tp).\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     __complex_acos(const std::complex<_Tp>& __z)\n@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __complex_atan(__z); }\n #endif\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n   template<typename _Tp>\n     std::complex<_Tp>\n@@ -309,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return std::abs(__z); }\n \n   /// Additional overloads [8.1.9].\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__promote<_Tp>::__type"}, {"sha": "88a81495d877b8155c2a7b5c559f62fe23db6bac", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -42,13 +42,13 @@\n #include <tr1/functional_hash.h>\n #include <ext/type_traits.h>\n #include <bits/move.h> // for std::__addressof\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #  include <type_traits> // for integral_constant, true_type, false_type\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<int> struct _Placeholder;\n   template<typename> class _Bind;\n@@ -914,7 +914,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<int _Num>\n     const int is_placeholder<_Placeholder<_Num> >::value;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<int _Num>\n     struct is_placeholder<std::_Placeholder<_Num>>\n     : std::integral_constant<int, _Num>\n@@ -1430,7 +1430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     is_bind_expression<const volatile _Bind_result<_Result,\n                                                    _Signature> >::value;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Signature>\n     struct is_bind_expression<std::_Bind<_Signature>>\n     : true_type { };\n@@ -1889,7 +1889,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,\n       private _Function_base\n     {\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n       /// This class is used to implement the safe_bool idiom.\n       struct _Hidden_type\n       {\n@@ -2042,7 +2042,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This function will not throw an %exception.\n        */\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit operator bool() const\n       { return !_M_empty(); }\n #else\n@@ -2252,7 +2252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename> struct is_placeholder;"}, {"sha": "9220e304c6126c25cc74632509f10a6c3080adc8", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -584,7 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_ptr = __r._M_ptr;\n \t}\n \n-#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED\n       // Postcondition: use_count() == 1 and __r.get() == 0\n       template<typename _Tp1>\n         explicit\n@@ -630,7 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n-#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         __shared_ptr&\n         operator=(std::auto_ptr<_Tp1>& __r)\n@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         shared_ptr(const weak_ptr<_Tp1>& __r)\n \t: __shared_ptr<_Tp>(__r) { }\n \n-#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         explicit\n         shared_ptr(std::auto_ptr<_Tp1>& __r)\n@@ -1034,7 +1034,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n-#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         shared_ptr&\n         operator=(std::auto_ptr<_Tp1>& __r)"}, {"sha": "085d80e498f7e89ff81c66ed483429fecedc45f0", "filename": "libstdc++-v3/libsupc++/atomic_lockfree_defines.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -45,7 +45,7 @@\n  * 2 indicates that the types are always lock-free.\n  */\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n #define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n #define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE"}, {"sha": "9763ede76ac3304d9b4e8111bf483b05dd5ec4ec", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -150,7 +150,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #pragma GCC visibility pop\n \n-#if defined(__GXX_EXPERIMENTAL_CXX0X__) && (ATOMIC_INT_LOCK_FREE > 1)\n+#if (__cplusplus >= 201103L) && (ATOMIC_INT_LOCK_FREE > 1)\n #include <bits/exception_ptr.h>\n #include <bits/nested_exception.h>\n #endif"}, {"sha": "4310b99b072b6d8d965b66f223cedb4a291dfb9a", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -89,7 +89,7 @@ namespace std\n \n       exception_ptr(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       exception_ptr(nullptr_t) noexcept\n       : _M_exception_object(0)\n       { }\n@@ -99,7 +99,7 @@ namespace std\n       { __o._M_exception_object = 0; }\n #endif\n \n-#if !defined (__GXX_EXPERIMENTAL_CXX0X__) || defined (_GLIBCXX_EH_PTR_COMPAT)\n+#if (__cplusplus < 201103L) || defined (_GLIBCXX_EH_PTR_COMPAT)\n       typedef void (exception_ptr::*__safe_bool)();\n \n       // For construction from nullptr or 0.\n@@ -109,7 +109,7 @@ namespace std\n       exception_ptr& \n       operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       exception_ptr& \n       operator=(exception_ptr&& __o) noexcept\n       {\n@@ -132,7 +132,7 @@ namespace std\n       operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;\n #endif\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       explicit operator bool() const\n       { return _M_exception_object; }\n #endif"}, {"sha": "5e2a78bb97de3764f726382276c4583127d810bc", "filename": "libstdc++-v3/libsupc++/initializer_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else // C++0x\n \n@@ -102,6 +102,6 @@ namespace std\n \n #pragma GCC visibility pop\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #endif // _INITIALIZER_LIST"}, {"sha": "a3dfc95b52aa758506da123701a76b5785eb5000", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC visibility push(default)\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # include <bits/c++0x_warning.h>\n #else\n \n@@ -159,7 +159,7 @@ namespace std\n \n } // extern \"C++\"\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n #pragma GCC visibility pop\n "}, {"sha": "4780532b20e72e7d6f1cb60c55845a08a45dc940", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@\n #pragma GCC system_header\n \n #include <exception>\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <bits/hash_bytes.h>\n #endif\n \n@@ -138,7 +138,7 @@ namespace std\n     bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT\n     { return !operator==(__arg); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     size_t hash_code() const noexcept\n     {\n #  if !__GXX_MERGED_TYPEINFO_NAMES\n@@ -148,7 +148,7 @@ namespace std\n       return reinterpret_cast<size_t>(__name);\n #  endif\n     }\n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n+#endif // C++11\n \n     // Return true if this is a pointer type of some kind\n     virtual bool __is_pointer_p() const;"}, {"sha": "157bf021a601aae88a398ef319bc6ea80c113bf3", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -26,7 +26,7 @@\n #include <string>\n #include <system_error>\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # error \"compatibility-c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n "}, {"sha": "d1d25345238f3c9d3ad93897573ef84339c06606", "filename": "libstdc++-v3/src/c++11/compatibility-thread-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -30,7 +30,7 @@\n #include <future>\n #include <mutex>\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # error \"compatibility-thread-c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n "}, {"sha": "b8569df511610534349a244767b535844e4237ee", "filename": "libstdc++-v3/src/c++11/hash_c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # error \"hash_c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n "}, {"sha": "33911315f5264691f97c3ca305a92b0f88d385b8", "filename": "libstdc++-v3/src/c++11/hashtable_c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -24,7 +24,7 @@\n \n #include <bits/c++config.h>\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # error \"hashtable_c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n "}, {"sha": "8227c3486e2bc697a06205a8c723ffb9c392e8b8", "filename": "libstdc++-v3/src/c++11/placeholders.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fplaceholders.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n # error \"placeholders.cc must be compiled with -std=gnu++0x\"\n #endif\n "}, {"sha": "04810bdf079adf03898fa34c43bdba2db989077d", "filename": "libstdc++-v3/testsuite/18_support/50594.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -26,7 +26,7 @@ bool user_new_called;\n bool user_delete_called;\n \n void* operator new(std::size_t n)\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   throw(std::bad_alloc)\n #endif\n {\n@@ -41,7 +41,7 @@ void* operator new(std::size_t n)\n }\n \n void operator delete(void* p)\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   noexcept\n #else\n   throw()"}, {"sha": "81d0dcd3231f70e6259aa237efc1bdcd853a33be", "filename": "libstdc++-v3/testsuite/23_containers/bitset/debug/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fdebug%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fdebug%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fdebug%2Finvalidation%2F1.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@ void test01()\n     i = new bitset<32>::reference(bs[7]);\n     VERIFY(*i);\n   }\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n   VERIFY(i->_M_singular());\n #endif\n   delete i;"}, {"sha": "3dd2b6c05c05c879ccd521dcd7dbca14b5ec161b", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -25,6 +25,6 @@\n \n // N.B. In C++0x mode we cannot instantiate with T == NonDefaultConstructible\n // because of 23.3.2.1.4\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n template class std::deque<__gnu_test::NonDefaultConstructible>;\n #endif"}, {"sha": "e5a095f82bd20b5cc6e7eece3fcaa70bc574cbc4", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -25,6 +25,6 @@\n \n // N.B. In C++0x mode we cannot instantiate with T == NonDefaultConstructible\n // because of 23.3.4.1.4\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n template class std::list<__gnu_test::NonDefaultConstructible>;\n #endif"}, {"sha": "2df601229a264ccd53e27489868bcd10ee88a65b", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/47628.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -33,7 +33,7 @@ struct Key\n   bool operator<(const Key&) const;\n };\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n // libstdc++/47628\n void f()\n {"}, {"sha": "f8e7512cb8c374b26a8d71526ddccad7f7d3977c", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/47628.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -33,7 +33,7 @@ struct Key\n   bool operator<(const Key&) const;\n };\n \n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n // libstdc++/47628\n void f()\n {"}, {"sha": "3cb689d30c2d8e520d7d1c17fd527d40be74ab9c", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -25,6 +25,6 @@\n \n // N.B. In C++0x mode we cannot instantiate with T == NonDefaultConstructible\n // because of 23.4.1.1.4\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus < 201103L\n template class std::vector<__gnu_test::NonDefaultConstructible>;\n #endif"}, {"sha": "a9d6c542e5d2296bde2a79ff27623df106fcab77", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@ void test01()\n   typedef char_traits<char>::off_type off_type;\n \n   typedef iterator<input_iterator_tag, char, off_type, char*,\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     char>\n #else\n     char&>"}, {"sha": "9bd9fb8a71fd93b6c964338145a498a68ece589d", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -34,7 +34,7 @@ namespace std\n     _IIter\n     find_if(_IIter, _IIter, _Predicate);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _Predicate>\n     bool\n     all_of(_IIter, _IIter, _Predicate);\n@@ -140,7 +140,7 @@ namespace std\n     void \n     swap(_Tp&, _Tp& b);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp, size_t _Nm>\n     void\n     swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);\n@@ -211,7 +211,7 @@ namespace std\n     _OIter \n     remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _IIter, typename _OIter, typename _Predicate>\n     _OIter \n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n@@ -447,7 +447,7 @@ namespace std\n     void \n     sort_heap(_RAIter, _RAIter, _Compare);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _RAIter>\n     bool \n     is_heap(_RAIter, _RAIter);\n@@ -514,7 +514,7 @@ namespace std\n     _FIter \n     max_element(_FIter, _FIter, _Compare);\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     pair<const _Tp&, const _Tp&>\n     minmax(const _Tp&, const _Tp&);"}, {"sha": "04ad943a054e1ce515950dbb73b6d3294ab0c1fc", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -136,7 +136,7 @@ namespace __gnu_test\n     allocate(size_type n, const void* = 0)\n     { return static_cast<pointer>(counter_type::allocate(n * sizeof(T))); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     template<typename U, typename... Args>\n       void\n       construct(U* p, Args&&... args) \n@@ -257,7 +257,7 @@ namespace __gnu_test\n       typedef const Tp&                           const_reference;\n       typedef Tp                                  value_type;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       typedef std::true_type                      propagate_on_container_swap;\n #endif\n \n@@ -330,7 +330,7 @@ namespace __gnu_test\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_type(-1) / sizeof(Tp); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<typename U, typename... Args>\n         void\n         construct(U* p, Args&&... args) \n@@ -377,7 +377,7 @@ namespace __gnu_test\n       int personality;\n     };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // An uneq_allocator which can be used to test allocator propagation.\n   template<typename Tp, bool Propagate>\n     class propagating_allocator : public uneq_allocator<Tp>"}, {"sha": "3fded1361c6e8f5da5685fe1b250e6c5f6413c32", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -86,7 +86,7 @@ namespace __gnu_test\n     NonDefaultConstructible(int) { }\n     NonDefaultConstructible(const NonDefaultConstructible&) { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     // For std::iota.\n     NonDefaultConstructible&\n     operator++()\n@@ -174,7 +174,7 @@ namespace __gnu_test\n     { return 1; }\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   struct NonCopyConstructible\n   {\n     NonCopyConstructible() : num(-1) { }"}, {"sha": "d73280a2e2c07a2a0ac103cd0f326ec796914090", "filename": "libstdc++-v3/testsuite/util/testsuite_character.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -37,7 +37,7 @@ namespace __gnu_test\n   {\n     int value;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     // For std::iota.\n     pod_int&\n     operator++()"}, {"sha": "8815bd4df3533ea038d900a9c7c0317e1d149354", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -45,7 +45,7 @@\n #include <tr1/unordered_map>\n #include <tr1/unordered_set>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <atomic>\n #include <type_traits>\n #endif\n@@ -273,7 +273,7 @@ namespace __gnu_test\n     typedef long long \t\ta11;\n     typedef unsigned long long \ta12;\n     typedef wchar_t \t\ta13;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n \n@@ -301,7 +301,7 @@ namespace __gnu_test\n     typedef long long \t\ta11;\n     typedef unsigned long long \ta12;\n     typedef wchar_t \t\ta13;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n@@ -329,7 +329,7 @@ namespace __gnu_test\n #endif\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   struct atomic_integrals_no_bool\n   {\n     typedef std::atomic_char        \ta2;\n@@ -437,7 +437,7 @@ namespace __gnu_test\n       }\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<typename _Tp>\n     void\n     constexpr_bitwise_operators()\n@@ -507,7 +507,7 @@ namespace __gnu_test\n       }\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n \n   struct constexpr_comparison_eq_ne\n   {\n@@ -682,7 +682,7 @@ namespace __gnu_test\n       }\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   // Generator to test default constructor.\n   struct constexpr_default_constructible\n   {\n@@ -777,7 +777,7 @@ namespace __gnu_test\n #endif\n \n   // Generator to test direct list initialization\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   struct direct_list_initializable\n   {\n     template<typename _Ttype, typename _Tvalue>"}, {"sha": "298fd9ffe6e9e1861344811dfdd17773b7dd08af", "filename": "libstdc++-v3/testsuite/util/testsuite_counter_type.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -32,7 +32,7 @@ namespace __gnu_test\n     static int copy_count;\n     static int copy_assign_count;\n     static int less_compare_count;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     static int move_count;\n     static int move_assign_count;\n #endif\n@@ -62,7 +62,7 @@ namespace __gnu_test\n       return *this;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n     counter_type(counter_type&& in) noexcept\n     {\n       val = in.val;\n@@ -86,7 +86,7 @@ namespace __gnu_test\n       copy_count = 0;\n       copy_assign_count = 0;\n       less_compare_count = 0;\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       move_count = 0;\n       move_assign_count = 0;\n #endif\n@@ -105,7 +105,7 @@ namespace __gnu_test\n   int counter_type::copy_assign_count = 0;\n   int counter_type::less_compare_count = 0;\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   int counter_type::move_count = 0;\n   int counter_type::move_assign_count = 0;\n #endif"}, {"sha": "581ce35eab0bbad2642beabe51a0f8cf8e452e3c", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -31,7 +31,7 @@\n #include <testsuite_hooks.h>\n #include <bits/stl_iterator_base_types.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n #include <bits/move.h>\n #endif\n \n@@ -91,7 +91,7 @@ namespace __gnu_test\n \tptr(ptr_in), SharedInfo(SharedInfo_in)\n       { }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n       template<class U>\n       void\n       operator=(U&& new_val)"}, {"sha": "7797cc46b78c958c02d0d7f08a5e49e3b3342f53", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734f50238f863ae90d2e8caa2323aaa02380ff48/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=734f50238f863ae90d2e8caa2323aaa02380ff48", "patch": "@@ -67,7 +67,7 @@ namespace __gnu_test\n       return ret;\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   template<template<typename...> class Property,\n \t   typename Type1, typename... Types>\n     bool\n@@ -156,7 +156,7 @@ namespace __gnu_test\n     ThrowCopyConsClass(const ThrowCopyConsClass&) throw(int);\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   struct ThrowMoveConsClass\n   {\n     ThrowMoveConsClass(ThrowMoveConsClass&&) throw(int);\n@@ -308,7 +308,7 @@ namespace __gnu_test\n     int j;\n   };\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   struct LType // literal type\n   {\n     int _M_i;\n@@ -403,7 +403,7 @@ namespace __gnu_test\n     check_ret_type(T)\n     { return true; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#if __cplusplus >= 201103L\n   namespace construct\n   {\n     struct Empty {};"}]}