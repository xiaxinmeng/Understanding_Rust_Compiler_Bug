{"sha": "5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0ZDdjZmI0N2NjZjcwN2I0Mzk4YzdjYjVkZDUxZDRhNGIyNjBkNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T05:09:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T05:09:47Z"}, "message": "(store_field): If signed bitfield and want value, sign extend.\n\nFrom-SVN: r2504", "tree": {"sha": "4df0c71d95980ba972b1302abdb3f8c788809750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df0c71d95980ba972b1302abdb3f8c788809750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5/comments", "author": null, "committer": null, "parents": [{"sha": "ca3e4a2f2dba408a1706736ff1ec9cb8942edb38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e4a2f2dba408a1706736ff1ec9cb8942edb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3e4a2f2dba408a1706736ff1ec9cb8942edb38"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "db911c87acb6c27cb4193b8208141a31c8a4b191", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "patch": "@@ -2702,7 +2702,16 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n \t  /* If possible, avoid refetching from the bitfield itself.  */\n \t  if (width_mask != 0\n \t      && ! (GET_CODE (target) == MEM && MEM_VOLATILE_P (target)))\n-\t    return expand_and (temp, GEN_INT (width_mask), NULL_RTX);\n+\t    {\n+\t      rtx count;\n+\t      enum machine_mode tmode;\n+\t      if (unsignedp)\n+\t\treturn expand_and (temp, GEN_INT (width_mask), NULL_RTX);\n+\t      tmode = GET_MODE (temp);\n+\t      count = build_int_2 (GET_MODE_BITSIZE (tmode) - bitsize, 0);\n+\t      temp = expand_shift (LSHIFT_EXPR, tmode, temp, count, 0, 0);\n+\t      return expand_shift (RSHIFT_EXPR, tmode, temp, count, 0, 0);\n+\t    }\n \t  return extract_bit_field (target, bitsize, bitpos, unsignedp,\n \t\t\t\t    NULL_RTX, value_mode, 0, align,\n \t\t\t\t    total_size);"}]}