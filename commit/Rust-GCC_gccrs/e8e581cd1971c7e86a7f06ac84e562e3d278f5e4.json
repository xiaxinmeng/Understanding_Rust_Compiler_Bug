{"sha": "e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlNTgxY2QxOTcxYzdlODZhN2YwNmFjODRlNTYyZTNkMjc4ZjVlNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:35:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:35:24Z"}, "message": "[multiple changes]\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Preanalyze_Range): If the expression, which\n\tdenotes some domain of iteration, has a type with implicit\n\tdereference, and does not have any iterable aspects, insert\n\tdereference to obtain proper container type.\n\n2012-12-05  Bob Duff  <duff@adacore.com>\n\n\t* par-ch8.adb (P_Use_Type_Clause): Fix the Sloc for \"use all type ...\"\n\tto point to \"use\".\n\n2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* make.adb (Compile): Always pass -x adascil in CodePeer mode.\n\nFrom-SVN: r194198", "tree": {"sha": "caa42aac6d7c84e97df5ac473685b58f3f10a81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caa42aac6d7c84e97df5ac473685b58f3f10a81e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/comments", "author": null, "committer": null, "parents": [{"sha": "42fc9a7f08f7762b2055e563eeecac81c794b457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fc9a7f08f7762b2055e563eeecac81c794b457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fc9a7f08f7762b2055e563eeecac81c794b457"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "55c71189a5044a5bf5aab5204e1e360e69184be5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "patch": "@@ -1,3 +1,19 @@\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Preanalyze_Range): If the expression, which\n+\tdenotes some domain of iteration, has a type with implicit\n+\tdereference, and does not have any iterable aspects, insert\n+\tdereference to obtain proper container type.\n+\n+2012-12-05  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch8.adb (P_Use_Type_Clause): Fix the Sloc for \"use all type ...\"\n+\tto point to \"use\".\n+\n+2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* make.adb (Compile): Always pass -x adascil in CodePeer mode.\n+\n 2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* s-rident.ads, restrict.ads: Remove discrepancies between the"}, {"sha": "c54debf3097c96b0b2e74659b61131346db50e12", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "patch": "@@ -704,6 +704,7 @@ package body Make is\n    Output_Flag       : constant String_Access := new String'(\"-o\");\n    Ada_Flag_1        : constant String_Access := new String'(\"-x\");\n    Ada_Flag_2        : constant String_Access := new String'(\"ada\");\n+   AdaSCIL_Flag      : constant String_Access := new String'(\"adascil\");\n    No_gnat_adc       : constant String_Access := new String'(\"-gnatA\");\n    GNAT_Flag         : constant String_Access := new String'(\"-gnatpg\");\n    Do_Not_Check_Flag : constant String_Access := new String'(\"-x\");\n@@ -2989,8 +2990,16 @@ package body Make is\n          --  Now check if the file name has one of the suffixes familiar to\n          --  the gcc driver. If this is not the case then add the ada flag\n          --  \"-x ada\".\n+         --  Append systematically \"-x adascil\" in CodePeer mode instead, to\n+         --  force the use of gnat1scil instead of gnat1.\n \n-         if not Ada_File_Name (S) and then not Targparm.AAMP_On_Target then\n+         if CodePeer_Mode then\n+            Comp_Last := Comp_Last + 1;\n+            Comp_Args (Comp_Last) := Ada_Flag_1;\n+            Comp_Last := Comp_Last + 1;\n+            Comp_Args (Comp_Last) := AdaSCIL_Flag;\n+\n+         elsif not Ada_File_Name (S) and then not Targparm.AAMP_On_Target then\n             Comp_Last := Comp_Last + 1;\n             Comp_Args (Comp_Last) := Ada_Flag_1;\n             Comp_Last := Comp_Last + 1;"}, {"sha": "fb2bf17c44daf1d5672226fef2cf3fa44792e97e", "filename": "gcc/ada/par-ch8.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fpar-ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fpar-ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch8.adb?ref=e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -106,6 +106,7 @@ package body Ch8 is\n    function P_Use_Type_Clause return Node_Id is\n       Use_Node    : Node_Id;\n       All_Present : Boolean;\n+      Use_Sloc    : constant Source_Ptr := Prev_Token_Ptr;\n \n    begin\n       if Token = Tok_All then\n@@ -121,7 +122,7 @@ package body Ch8 is\n          All_Present := False;\n       end if;\n \n-      Use_Node := New_Node (N_Use_Type_Clause, Prev_Token_Ptr);\n+      Use_Node := New_Node (N_Use_Type_Clause, Use_Sloc);\n       Set_All_Present (Use_Node, All_Present);\n       Set_Subtype_Marks (Use_Node, New_List);\n       Set_Used_Operations (Use_Node, No_Elist);"}, {"sha": "d17e68915461477f95b4db39d028da5b0134bbc9", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e581cd1971c7e86a7f06ac84e562e3d278f5e4/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e8e581cd1971c7e86a7f06ac84e562e3d278f5e4", "patch": "@@ -2983,6 +2983,7 @@ package body Sem_Ch5 is\n \n    procedure Preanalyze_Range (R_Copy : Node_Id) is\n       Save_Analysis : constant Boolean := Full_Analysis;\n+      Typ           : Entity_Id;\n \n    begin\n       Full_Analysis := False;\n@@ -3043,6 +3044,40 @@ package body Sem_Ch5 is\n \n       elsif Nkind (R_Copy) in N_Subexpr then\n          Resolve (R_Copy);\n+         Typ := Etype (R_Copy);\n+\n+         if Is_Discrete_Type (Typ) then\n+            null;\n+\n+         --  Check that the resulting object is an iterable container.\n+\n+         elsif Present (Find_Aspect (Typ, Aspect_Iterator_Element))\n+           or else Present (Find_Aspect (Typ, Aspect_Constant_Indexing))\n+           or else Present (Find_Aspect (Typ, Aspect_Variable_Indexing))\n+         then\n+            null;\n+\n+         --  The expression may yield an implcit reference to an iterable\n+         --  container. Insert explicit dereference so that proper type is\n+         --  visible in the loop.\n+\n+         elsif Has_Implicit_Dereference (Etype (R_Copy)) then\n+            declare\n+               Disc : Entity_Id;\n+\n+            begin\n+               Disc := First_Discriminant (Typ);\n+               while Present (Disc) loop\n+                  if Has_Implicit_Dereference (Disc) then\n+                     Build_Explicit_Dereference (R_Copy, Disc);\n+                     exit;\n+                  end if;\n+\n+                  Next_Discriminant (Disc);\n+               end loop;\n+            end;\n+\n+         end if;\n       end if;\n \n       Expander_Mode_Restore;"}]}