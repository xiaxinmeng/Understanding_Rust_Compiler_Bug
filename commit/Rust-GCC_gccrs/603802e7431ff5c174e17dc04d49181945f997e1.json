{"sha": "603802e7431ff5c174e17dc04d49181945f997e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzODAyZTc0MzFmZjVjMTc0ZTE3ZGMwNGQ0OTE4MTk0NWY5OTdlMQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2007-07-29T20:53:29Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-07-29T20:53:29Z"}, "message": "Makefile.in (tree-ssa-alias.o): Add alloc-pool.h\n\n2007-07-28  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* Makefile.in (tree-ssa-alias.o): Add alloc-pool.h\n\n\t* tree-ssa-alias.c: Add alloc-pool.h.\n\t(init_alias_info): Free alias_bitmap_obstack.\n\t(delete_alias_info): Call delete_mem_ref_stats.\n\t(get_mem_sym_stats_for): Use alloc_pool.\n\t(init_mem_ref_stats): Do not delete mem_ref_stats here.\n\t(delete_mem_sym_stats): Removed.\n\nFrom-SVN: r127050", "tree": {"sha": "b9ba3ee252fc7f2141658b03a827197cb0314795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9ba3ee252fc7f2141658b03a827197cb0314795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603802e7431ff5c174e17dc04d49181945f997e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603802e7431ff5c174e17dc04d49181945f997e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603802e7431ff5c174e17dc04d49181945f997e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603802e7431ff5c174e17dc04d49181945f997e1/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8163f5cc068347dfd74cb03c9e7b6cfcd3a8460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8163f5cc068347dfd74cb03c9e7b6cfcd3a8460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8163f5cc068347dfd74cb03c9e7b6cfcd3a8460"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "715e42314c8056337900da43c0526ebc44ae7062", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=603802e7431ff5c174e17dc04d49181945f997e1", "patch": "@@ -1,3 +1,14 @@\n+2007-07-28  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* Makefile.in (tree-ssa-alias.o): Add alloc-pool.h\n+\n+\t* tree-ssa-alias.c: Add alloc-pool.h.\n+\t(init_alias_info): Free alias_bitmap_obstack.\n+\t(delete_alias_info): Call delete_mem_ref_stats.\n+\t(get_mem_sym_stats_for): Use alloc_pool.\n+\t(init_mem_ref_stats): Do not delete mem_ref_stats here.\n+\t(delete_mem_sym_stats): Removed.\n+\t\n 2007-07-29  Sebastian Pop  <sebpop@gmail.com>\n \n \t* tree-data-ref.c (add_multivariate_self_dist): Parametric access"}, {"sha": "baf50d73ab8dccc4e6923d6fdebafade83ec4e91", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=603802e7431ff5c174e17dc04d49181945f997e1", "patch": "@@ -2172,7 +2172,7 @@ tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_DUMP_H) tree-pass.h $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    hard-reg-set.h $(TREE_GIMPLE_H) vec.h tree-ssa-structalias.h \\\n-   $(IPA_TYPE_ESCAPE_H) vecprim.h pointer-set.h\n+   $(IPA_TYPE_ESCAPE_H) vecprim.h pointer-set.h alloc-pool.h\n tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) errors.h $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) tree-iterator.h\\"}, {"sha": "0f3351e563c8ef0ac44be4b28a2f659b09f3a3ef", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603802e7431ff5c174e17dc04d49181945f997e1/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=603802e7431ff5c174e17dc04d49181945f997e1", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"vecprim.h\"\n #include \"pointer-set.h\"\n+#include \"alloc-pool.h\"\n \n /* Broad overview of how aliasing works:\n    \n@@ -212,7 +213,7 @@ static void set_pt_anything (tree);\n \n void debug_mp_info (VEC(mem_sym_stats_t,heap) *);\n \n-\n+static alloc_pool mem_sym_stats_pool;\n \n /* Return memory reference stats for symbol VAR.  Create a new slot in\n    cfun->gimple_df->mem_sym_stats if needed.  */\n@@ -229,7 +230,8 @@ get_mem_sym_stats_for (tree var)\n   slot = pointer_map_insert (map, var);\n   if (*slot == NULL)\n     {\n-      stats = XCNEW (struct mem_sym_stats_d);\n+      stats = pool_alloc (mem_sym_stats_pool);\n+      memset (stats, 0, sizeof (*stats));\n       stats->var = var;\n       *slot = (void *) stats;\n     }\n@@ -1876,32 +1878,16 @@ count_uses_and_derefs (tree ptr, tree stmt, unsigned *num_uses_p,\n   gcc_assert (*num_uses_p >= *num_loads_p + *num_stores_p);\n }\n \n-\n-/* Helper for delete_mem_ref_stats.  Free all the slots in the\n-   mem_sym_stats map.  */\n-\n-static bool\n-delete_mem_sym_stats (void *key ATTRIBUTE_UNUSED, void **value,\n-\t\t       void *data ATTRIBUTE_UNUSED)\n-{\n-  XDELETE (*value);\n-  *value = NULL;\n-  return false;\n-}\n-\n-\n /* Remove memory references stats for function FN.  */\n \n void\n delete_mem_ref_stats (struct function *fn)\n {\n   if (gimple_mem_ref_stats (fn)->mem_sym_stats)\n     {\n-      pointer_map_traverse (gimple_mem_ref_stats (fn)->mem_sym_stats,\n-\t\t\t    delete_mem_sym_stats, NULL);\n+      free_alloc_pool (mem_sym_stats_pool);\n       pointer_map_destroy (gimple_mem_ref_stats (fn)->mem_sym_stats);\n     }\n-\n   gimple_mem_ref_stats (fn)->mem_sym_stats = NULL;\n }\n \n@@ -1913,9 +1899,9 @@ init_mem_ref_stats (void)\n {\n   struct mem_ref_stats_d *mem_ref_stats = gimple_mem_ref_stats (cfun);\n \n-  if (mem_ref_stats->mem_sym_stats)\n-    delete_mem_ref_stats (cfun);\n-\n+  mem_sym_stats_pool = create_alloc_pool (\"Mem sym stats\",\n+\t\t\t\t\t  sizeof (struct mem_sym_stats_d),\n+\t\t\t\t\t  100);\n   memset (mem_ref_stats, 0, sizeof (struct mem_ref_stats_d));\n   mem_ref_stats->mem_sym_stats = pointer_map_create ();\n }\n@@ -1946,8 +1932,6 @@ init_alias_info (void)\n     {\n       unsigned i;\n       \n-      bitmap_obstack_release (&alias_bitmap_obstack);\n-      \n       /* Similarly, clear the set of addressable variables.  In this\n \t case, we can just clear the set because addressability is\n \t only computed here.  */\n@@ -2021,6 +2005,8 @@ init_alias_info (void)\n \n   /* Next time, we will need to reset alias information.  */\n   cfun->gimple_df->aliases_computed_p = true;\n+  if (alias_bitmap_obstack.elements != NULL)\n+    bitmap_obstack_release (&alias_bitmap_obstack);    \n   bitmap_obstack_initialize (&alias_bitmap_obstack);\n \n   return ai;\n@@ -2051,6 +2037,7 @@ delete_alias_info (struct alias_info *ai)\n   pointer_set_destroy (ai->dereferenced_ptrs_load);\n   free (ai);\n \n+  delete_mem_ref_stats (cfun);\n   delete_points_to_sets ();\n }\n "}]}