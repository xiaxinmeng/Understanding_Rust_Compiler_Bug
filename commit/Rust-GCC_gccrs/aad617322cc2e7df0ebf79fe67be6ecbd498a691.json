{"sha": "aad617322cc2e7df0ebf79fe67be6ecbd498a691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkNjE3MzIyY2MyZTdkZjBlYmY3OWZlNjdiZTZlY2JkNDk4YTY5MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-02T17:43:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-02T17:43:22Z"}, "message": "i386.c (standard_sse_constant_p): Simplify switch statement.\n\n\t* config/i386/i386.c (standard_sse_constant_p) <case 1>:\n\tSimplify switch statement.\n\t* config/i386/i386.md (*movdf_internal_rex64) <case 8,9,10>: Ditto.\n\t(*movdf_internal) <case 6,7,8>: Ditto.\n\n\t* config/i386/constraints.md (Y4): New constraint.\n\t* config/i386/sse.md (vec_set<mode>_0): Merge with\n\t*vec_set<mode>_0_sse4_1 and *vec_set<mode>_0_sse2.\n\t(*vec_extractv2di_1): Merge from *vec_extractv2di_1_sse2 and\n\t*vec_extractv2di_1_sse.\n\t(*vec_concatv2di_rex64): Merge from *vec_concatv2di_rex64_sse4_1\n\tand *vec_concatv2di_rex64_sse.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse2-init-v2di-2: Update scan-assembler-times string.\n\nFrom-SVN: r174570", "tree": {"sha": "056b2fa10ece84052092544093bf1427455136eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/056b2fa10ece84052092544093bf1427455136eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad617322cc2e7df0ebf79fe67be6ecbd498a691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad617322cc2e7df0ebf79fe67be6ecbd498a691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad617322cc2e7df0ebf79fe67be6ecbd498a691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad617322cc2e7df0ebf79fe67be6ecbd498a691/comments", "author": null, "committer": null, "parents": [{"sha": "162b5a21add6f291f4c57cc14e2c2e915cb2029c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162b5a21add6f291f4c57cc14e2c2e915cb2029c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162b5a21add6f291f4c57cc14e2c2e915cb2029c"}], "stats": {"total": 254, "additions": 95, "deletions": 159}, "files": [{"sha": "04dfb06971ed5d4f5c43f3b8226e2a26a7687d0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -1,3 +1,18 @@\n+2011-06-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (standard_sse_constant_p) <case 1>:\n+\tSimplify switch statement.\n+\t* config/i386/i386.md (*movdf_internal_rex64) <case 8,9,10>: Ditto.\n+\t(*movdf_internal) <case 6,7,8>: Ditto.\n+\n+\t* config/i386/constraints.md (Y4): New constraint.\n+\t* config/i386/sse.md (vec_set<mode>_0): Merge with\n+\t*vec_set<mode>_0_sse4_1 and *vec_set<mode>_0_sse2.\n+\t(*vec_extractv2di_1): Merge from *vec_extractv2di_1_sse2 and\n+\t*vec_extractv2di_1_sse.\n+\t(*vec_concatv2di_rex64): Merge from *vec_concatv2di_rex64_sse4_1\n+\tand *vec_concatv2di_rex64_sse.\n+\n 2011-06-02  Stuart Henderson  <shenders@gcc.gnu.org>\n \n \tPR target/48807\n@@ -134,20 +149,17 @@\n \t(sigill_hdlr): New function.\n \t(set_fast_math) [!__x86_64__ && __sun__ && __svr4__]: Check if SSE\n \tinsns can be executed.\n-\t* config/sol2.h (ENDFILE_SPEC): Use crtfastmath.o if -ffast-math\n-\tetc.\n+\t* config/sol2.h (ENDFILE_SPEC): Use crtfastmath.o if -ffast-math etc.\n \t* config/sparc/sol2.h (ENDFILE_SPEC): Remove.\n \n 2011-06-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/t-slibgcc-darwin: Move to ...\n-\t* config/t-slibgcc-dummy: .. this.\n-\tClarify comments.\n+\t* config/t-slibgcc-dummy: ... this.  Clarify comments.\n \t* config.gcc (i[34567]86-*-darwin*, x86_64-*-darwin*,\n \tpowerpc-*-darwin*, powerpc64-*-darwin*): Reflect this.\n \t(i[3456x]86-*-netware*): Add t-slibgcc-dummy to tmake_file.\n-\t(i[34567]86-*-rtems*): Remove extra_parts.\n-\tUse i386/t-rtems.\n+\t(i[34567]86-*-rtems*): Remove extra_parts.  Use i386/t-rtems.\n \tRemove i386/t-crtstuff from tmake_file.\n \t(i[34567]86-*-solaris2*): Remove t-svr4,\n \tt-slibgcc-elf-ver, t-slibgcc-sld from tmake_file, add\n@@ -417,8 +429,7 @@\n 2011-05-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/49168\n-\t* config/i386/i386.md (*movtf_internal): Handle misaligned\n-\tload/store.\n+\t* config/i386/i386.md (*movtf_internal): Handle misaligned load/store.\n \n 2011-05-30  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "5474008d55f0900c1767a7b76006d6a67e5ccd5d", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -99,6 +99,9 @@\n (define_register_constraint \"Y2\" \"TARGET_SSE2 ? SSE_REGS : NO_REGS\"\n  \"@internal Any SSE register, when SSE2 is enabled.\")\n \n+(define_register_constraint \"Y4\" \"TARGET_SSE4_1 ? SSE_REGS : NO_REGS\"\n+ \"@internal Any SSE register, when SSE4_1 is enabled.\")\n+\n (define_register_constraint \"Yi\"\n  \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES ? SSE_REGS : NO_REGS\"\n  \"@internal Any SSE register, when SSE2 and inter-unit moves are enabled.\")"}, {"sha": "db6a0d6e141db8bdfe39790b347e96af5039d9d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -8601,33 +8601,28 @@ standard_sse_constant_opcode (rtx insn, rtx x)\n     case 1:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_V4SF:\n-\t  return \"%vxorps\\t%0, %d0\";\n-\tcase MODE_V2DF:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vxorps\\t%0, %d0\";\n-\t  else\n-\t    return \"%vxorpd\\t%0, %d0\";\n \tcase MODE_TI:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vxorps\\t%0, %d0\";\n-\t  else\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"%vpxor\\t%0, %d0\";\n-\tcase MODE_V8SF:\n-\t  return \"vxorps\\t%x0, %x0, %x0\";\n-\tcase MODE_V4DF:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"vxorps\\t%x0, %x0, %x0\";\n-\t  else\n-\t    return \"vxorpd\\t%x0, %x0, %x0\";\n+\tcase MODE_V2DF:\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n+\t    return \"%vxorpd\\t%0, %d0\";\n+\tcase MODE_V4SF:\n+\t  return \"%vxorps\\t%0, %d0\";\n+\n \tcase MODE_OI:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"vxorps\\t%x0, %x0, %x0\";\n-\t  else\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"vpxor\\t%x0, %x0, %x0\";\n+\tcase MODE_V4DF:\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n+\t    return \"vxorpd\\t%x0, %x0, %x0\";\n+\tcase MODE_V8SF:\n+\t  return \"vxorps\\t%x0, %x0, %x0\";\n+\n \tdefault:\n \t  break;\n \t}\n+\n     case 2:\n       return \"%vpcmpeqd\\t%0, %d0\";\n     default:"}, {"sha": "739580cda35836cd575756d6d1be4d1fe5d4e050", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -2956,18 +2956,15 @@\n     case 10:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_V4SF:\n-\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\tcase MODE_V2DF:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else\n-\t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n \tcase MODE_TI:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2DF:\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n+\t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\n \tcase MODE_DI:\n \t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_DF:\n@@ -3102,18 +3099,15 @@\n     case 8:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_V4SF:\n-\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\tcase MODE_V2DF:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else\n-\t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n \tcase MODE_TI:\n-\t  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2DF:\n+\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n+\t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\n \tcase MODE_DI:\n \t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_DF:"}, {"sha": "ffe3a423eed6af24c3a9884f4bb28c62d5e694a7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 110, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -3376,79 +3376,35 @@\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n-(define_insn \"*vec_set<mode>_0_sse4_1\"\n+(define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=x,x,x ,x,x,x  ,x  ,m,m,m\")\n+\t  \"=Y4,Y2,Y2,x,x,x,Y4 ,x  ,m,m,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" x,m,*r,x,x,*rm,*rm,x,*r,fF\"))\n+\t  \" Y4,m ,*r,m,x,x,*rm,*rm,x,*r,fF\"))\n \t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C,C,C ,0,x,0  ,x  ,0,0 ,0\")\n+\t  \" C ,C ,C ,C,0,x,0  ,x  ,0,0 ,0\")\n \t  (const_int 1)))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_SSE\"\n   \"@\n    %vinsertps\\t{$0xe, %d2, %0|%0, %d2, 0xe}\n    %vmov<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    %vmovd\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n+   movss\\t{%2, %0|%0, %2}\n    vmovss\\t{%2, %1, %0|%0, %1, %2}\n    pinsrd\\t{$0, %2, %0|%0, %2, 0}\n    vpinsrd\\t{$0, %2, %1, %0|%0, %1, %2, 0}\n    #\n    #\n    #\"\n-  [(set_attr \"isa\" \"base,base,base,noavx,avx,noavx,avx,base,base,base\")\n-   (set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,ssemov,sselog,sselog,*,*,*\")\n-   (set_attr \"prefix_extra\" \"*,*,*,*,*,1,1,*,*,*\")\n-   (set_attr \"length_immediate\" \"*,*,*,*,*,1,1,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,orig,vex,orig,vex,*,*,*\")\n-   (set_attr \"mode\" \"SF,<ssescalarmode>,SI,SF,SF,TI,TI,*,*,*\")])\n-\n-;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n-(define_insn \"*vec_set<mode>_0_sse2\"\n-  [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=x,x ,x,m,m ,m\")\n-\t(vec_merge:VI4F_128\n-\t  (vec_duplicate:VI4F_128\n-\t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" m,*r,x,x,*r,fF\"))\n-\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C, C,0,0,0 ,0\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   mov<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   movd\\t{%2, %0|%0, %2}\n-   movss\\t{%2, %0|%0, %2}\n-   #\n-   #\n-   #\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"<ssescalarmode>,SI,SF,*,*,*\")])\n-\n-;; Avoid combining registers from different units in a single alternative,\n-;; see comment above inline_secondary_memory_needed function in i386.c\n-(define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=x,x,m,m ,m\")\n-\t(vec_merge:VI4F_128\n-\t  (vec_duplicate:VI4F_128\n-\t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" m,x,x,*r,fF\"))\n-\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C,0,0,0 ,0\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE\"\n-  \"@\n-   movss\\t{%2, %0|%0, %2}\n-   movss\\t{%2, %0|%0, %2}\n-   #\n-   #\n-   #\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"SF,SF,*,*,*\")])\n+  [(set_attr \"isa\" \"base,base,base,noavx,noavx,avx,noavx,avx,base,base,base\")\n+   (set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,ssemov,ssemov,sselog,sselog,*,*,*\")\n+   (set_attr \"prefix_extra\" \"*,*,*,*,*,*,1,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,*,*,*,1,1,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,orig,orig,vex,orig,vex,*,*,*\")\n+   (set_attr \"mode\" \"SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,*,*,*\")])\n \n ;; A subset is vec_setv4sf.\n (define_insn \"*vec_setv4sf_sse4_1\"\n@@ -6214,7 +6170,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; It must come before *vec_extractv2di_1_sse since it is preferred.\n+;; It must come before *vec_extractv2di_1_rex64 since it is preferred.\n (define_insn \"*sse4_1_pextrq\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(vec_select:DI\n@@ -6478,39 +6434,26 @@\n    (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex,orig\")\n    (set_attr \"mode\" \"V2SF,TI,TI,TI,DI\")])\n \n-(define_insn \"*vec_extractv2di_1_sse2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x\")\n+(define_insn \"*vec_extractv2di_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,Y2,Y2,Y2,x,x\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0 ,Y2,o ,x,o\")\n \t  (parallel [(const_int 1)])))]\n-  \"!TARGET_64BIT\n-   && TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"!TARGET_64BIT && TARGET_SSE\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n-   %vmovq\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"isa\" \"base,noavx,avx,base\")\n-   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov\")\n-   (set_attr \"length_immediate\" \"*,1,1,*\")\n-   (set_attr \"memory\" \"*,none,none,*\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex\")\n-   (set_attr \"mode\" \"V2SF,TI,TI,TI\")])\n-\n-;; Not sure this is ever used, but it doesn't hurt to have it. -aoliva\n-(define_insn \"*vec_extractv2di_1_sse\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,x,o\")\n-\t  (parallel [(const_int 1)])))]\n-  \"!TARGET_SSE2 && TARGET_SSE\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-   movhps\\t{%1, %0|%0, %1}\n+   %vmovq\\t{%H1, %0|%0, %H1}\n    movhlps\\t{%1, %0|%0, %1}\n    movlps\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n+  [(set_attr \"isa\" \"base,noavx,avx,base,noavx,noavx\")\n+   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,ssemov,ssemov\")\n+   (set_attr \"length_immediate\" \"*,1,1,*,*,*\")\n+   (set_attr \"memory\" \"*,none,none,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex,orig,orig\")\n+   (set_attr \"mode\" \"V2SF,TI,TI,TI,V4SF,V2SF\")])\n \n (define_insn \"*vec_dupv4si_avx\"\n   [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x\")\n@@ -6570,8 +6513,8 @@\n \t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,rm,x,x, C,*ym, C\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n-   pinsrd\\t{$0x1, %2, %0|%0, %2, 0x1}\n-   vpinsrd\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n+   pinsrd\\t{$1, %2, %0|%0, %2, 1}\n+   vpinsrd\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n    punpckldq\\t{%2, %0|%0, %2}\n    vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\n    %vmovd\\t{%1, %0|%0, %1}\n@@ -6633,18 +6576,18 @@\n    (set_attr \"mode\" \"TI,TI,V4SF,V2SF,V2SF\")])\n \n ;; movd instead of movq is required to handle broken assemblers.\n-(define_insn \"*vec_concatv2di_rex64_sse4_1\"\n+(define_insn \"*vec_concatv2di_rex64\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=x, x, x,Yi,!x,x,x,x,x\")\n+\t  \"=Y4,x ,x ,Yi,!x,x,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \" 0, x,xm,r ,*y,0,x,0,x\")\n+\t  \" 0 ,x ,xm,r ,*y,0,x,0,x\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n-\t  \"rm,rm, C,C ,C ,x,x,m,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE4_1\"\n+\t  \" rm,rm,C ,C ,C ,x,x,m,m\")))]\n+  \"TARGET_64BIT\"\n   \"@\n-   pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n-   vpinsrq\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n+   pinsrq\\t{$1, %2, %0|%0, %2, 1}\n+   vpinsrq\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n    %vmovq\\t{%1, %0|%0, %1}\n    %vmovd\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n@@ -6653,7 +6596,11 @@\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,base,base,base,noavx,avx,noavx,avx\")\n-   (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov,sselog,sselog,ssemov,ssemov\")\n+   (set (attr \"type\")\n+     (if_then_else\n+       (eq_attr \"alternative\" \"0,1,5,6\")\n+       (const_string \"sselog\")\n+       (const_string \"ssemov\")))\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0,3\")\n@@ -6665,24 +6612,6 @@\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V2SF,V2SF\")])\n \n-;; movd instead of movq is required to handle broken assemblers.\n-(define_insn \"*vec_concatv2di_rex64_sse\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"Y2m,r ,*y ,0 ,0,0\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C ,C ,C  ,Y2,x,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE\"\n-  \"@\n-   movq\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   punpcklqdq\\t{%2, %0|%0, %2}\n-   movlhps\\t{%2, %0|%0, %2}\n-   movhps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov\")\n-   (set_attr \"prefix_rex\" \"*,1,*,*,*,*\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF\")])\n-\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x,x\")\n \t(vec_concat:V2DI"}, {"sha": "312ce7a8954b263894273814cc93993dbac3c26a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -1,3 +1,7 @@\n+2011-06-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse2-init-v2di-2: Update scan-assembler-times string.\n+\n 2011-06-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/49265"}, {"sha": "2502fe77414c94665f3ef3b21ca19da7dedd9485", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad617322cc2e7df0ebf79fe67be6ecbd498a691/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c?ref=aad617322cc2e7df0ebf79fe67be6ecbd498a691", "patch": "@@ -10,4 +10,4 @@ test (long long b)\n   return _mm_cvtsi64_si128 (b); \n }\n \n-/* { dg-final { scan-assembler-times \"\\\\*vec_concatv2di_rex64_sse4_1/4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*vec_concatv2di_rex64/4\" 1 } } */"}]}