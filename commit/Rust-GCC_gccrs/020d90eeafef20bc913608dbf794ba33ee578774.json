{"sha": "020d90eeafef20bc913608dbf794ba33ee578774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwZDkwZWVhZmVmMjBiYzkxMzYwOGRiZjc5NGJhMzNlZTU3ODc3NA==", "commit": {"author": {"name": "Richard Guenther", "email": "richard.guenther@uni-tuebingen.de", "date": "2005-01-29T19:25:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-29T19:25:17Z"}, "message": "re PR tree-optimization/15791 (fold misses that two ADDR_EXPR of an arrary obvious not equal)\n\n2005-01-29  Richard Guenther <richard.guenther@uni-tuebingen.de>\n\n\tPR tree-optimization/15791\n\t* fold-const.c (extract_array_ref): New function.\n\t(fold): Fold comparisons between &a[i] and &a[j] or\n\tsemantically equivalent trees.\n\n\t* gcc.dg/tree-ssa/pr15791-1.c: New testcase.\n\t* gcc.dg/tree-ssa/pr15791-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pr15791-3.c: Likewise.\n\t* gcc.dg/tree-ssa/pr15791-4.c: Likewise.\n\t* gcc.dg/tree-ssa/pr15791-5.c: Likewise.\n\t* g++.dg/tree-ssa/pr15791-1.C: Likewise.\n\t* g++.dg/tree-ssa/pr15791-2.C: Likewise.\n\t* g++.dg/tree-ssa/pr15791-3.C: Likewise.\n\t* g++.dg/tree-ssa/pr15791-4.C: Likewise.\n\t* g++.dg/tree-ssa/pr15791-5.C: Likewise.\n\nFrom-SVN: r94414", "tree": {"sha": "b58ad08ab2f3110ce7e3fbfe49f072eeb418cc7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58ad08ab2f3110ce7e3fbfe49f072eeb418cc7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/020d90eeafef20bc913608dbf794ba33ee578774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020d90eeafef20bc913608dbf794ba33ee578774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020d90eeafef20bc913608dbf794ba33ee578774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020d90eeafef20bc913608dbf794ba33ee578774/comments", "author": null, "committer": null, "parents": [{"sha": "b6e47ceb096b1dc503b035ad407634e62bd177a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e47ceb096b1dc503b035ad407634e62bd177a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e47ceb096b1dc503b035ad407634e62bd177a0"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "bfb9128738ec15553dde415fe877e7c6c5f9bcf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -1,3 +1,10 @@\n+2005-01-29  Richard Guenther <richard.guenther@uni-tuebingen.de>\n+\n+\tPR tree-optimization/15791\n+\t* fold-const.c (extract_array_ref): New function.\n+\t(fold): Fold comparisons between &a[i] and &a[j] or\n+\tsemantically equivalent trees.\n+\n 2005-01-29  Jeff Law  <law@redhat.com>\n \n \t* gcse.c (insert_expr_in_table): Revamp handling of available"}, {"sha": "5d6e713ff53119468885d99926f21cc165b8f546", "filename": "gcc/fold-const.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -5374,6 +5374,57 @@ constant_boolean_node (int value, tree type)\n     return build_int_cst (type, value);\n }\n \n+\n+/* Return true if expr looks like an ARRAY_REF and set base and\n+   offset to the appropriate trees.  If there is no offset,\n+   offset is set to NULL_TREE.  */\n+\n+static bool\n+extract_array_ref (tree expr, tree *base, tree *offset)\n+{\n+  /* We have to be careful with stripping nops as with the\n+     base type the meaning of the offset can change.  */\n+  tree inner_expr = expr;\n+  STRIP_NOPS (inner_expr);\n+  /* One canonical form is a PLUS_EXPR with the first\n+     argument being an ADDR_EXPR with a possible NOP_EXPR\n+     attached.  */\n+  if (TREE_CODE (expr) == PLUS_EXPR)\n+    {\n+      tree op0 = TREE_OPERAND (expr, 0);\n+      STRIP_NOPS (op0);\n+      if (TREE_CODE (op0) == ADDR_EXPR)\n+\t{\n+\t  *base = TREE_OPERAND (expr, 0);\n+\t  *offset = TREE_OPERAND (expr, 1);\n+\t  return true;\n+\t}\n+    }\n+  /* Other canonical form is an ADDR_EXPR of an ARRAY_REF,\n+     which we transform into an ADDR_EXPR with appropriate\n+     offset.  For other arguments to the ADDR_EXPR we assume\n+     zero offset and as such do not care about the ADDR_EXPR\n+     type and strip possible nops from it.  */\n+  else if (TREE_CODE (inner_expr) == ADDR_EXPR)\n+    {\n+      tree op0 = TREE_OPERAND (inner_expr, 0);\n+      if (TREE_CODE (op0) == ARRAY_REF)\n+\t{\n+\t  *base = build_fold_addr_expr (TREE_OPERAND (op0, 0));\n+\t  *offset = TREE_OPERAND (op0, 1);\n+\t}\n+      else\n+\t{\n+\t  *base = inner_expr;\n+\t  *offset = NULL_TREE;\n+\t}\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+\n /* Transform `a + (b ? x : y)' into `b ? (a + x) : (a + y)'.\n    Transform, `a + (x < y)' into `(x < y) ? (a + 1) : (a + 0)'.  Here\n    CODE corresponds to the `+', COND to the `(b ? x : y)' or `(x < y)'\n@@ -8246,6 +8297,33 @@ fold (tree expr)\n \t\t\t\t      ? code == EQ_EXPR : code != EQ_EXPR,\n \t\t\t\t      type);\n \n+      /* If this is a comparison of two exprs that look like an\n+\t ARRAY_REF of the same object, then we can fold this to a\n+\t comparison of the two offsets.  */\n+      if (COMPARISON_CLASS_P (t))\n+\t{\n+\t  tree base0, offset0, base1, offset1;\n+\n+\t  if (extract_array_ref (arg0, &base0, &offset0)\n+\t      && extract_array_ref (arg1, &base1, &offset1)\n+\t      && operand_equal_p (base0, base1, 0))\n+\t    {\n+\t      if (offset0 == NULL_TREE\n+\t\t  && offset1 == NULL_TREE)\n+\t\t{\n+\t\t  offset0 = integer_zero_node;\n+\t\t  offset1 = integer_zero_node;\n+\t\t}\n+\t      else if (offset0 == NULL_TREE)\n+\t\toffset0 = build_int_cst (TREE_TYPE (offset1), 0);\n+\t      else if (offset1 == NULL_TREE)\n+\t\toffset1 = build_int_cst (TREE_TYPE (offset0), 0);\n+\n+\t      if (TREE_TYPE (offset0) == TREE_TYPE (offset1))\n+\t\treturn fold (build2 (code, type, offset0, offset1));\n+\t    }\n+\t}\n+\n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t{\n \t  tree targ0 = strip_float_extensions (arg0);"}, {"sha": "88725cba35044ec04b89131a0239b73002563dc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -1,3 +1,17 @@\n+2005-01-29  Richard Guenther <richard.guenther@uni-tuebingen.de>\n+\n+\tPR tree-optimization/15791\n+\t* gcc.dg/tree-ssa/pr15791-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr15791-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr15791-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr15791-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr15791-5.c: Likewise.\n+\t* g++.dg/tree-ssa/pr15791-1.C: Likewise.\n+\t* g++.dg/tree-ssa/pr15791-2.C: Likewise.\n+\t* g++.dg/tree-ssa/pr15791-3.C: Likewise.\n+\t* g++.dg/tree-ssa/pr15791-4.C: Likewise.\n+\t* g++.dg/tree-ssa/pr15791-5.C: Likewise.\n+\n 2005-01-29  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/18565"}, {"sha": "68f14adad00a0f81acdae6c57f83633beaba343c", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr15791-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-1.C?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do link } */\n+\n+void link_error ();\n+\n+int main ()\n+{\n+  struct { int b[2]; } x;\n+  int b[2];\n+  if (&b[1] != &b[1])\n+    link_error ();\n+  if (&b[0] != b)\n+    link_error ();\n+  if (b == &b[2])\n+    link_error ();\n+  if (b != b)\n+    link_error ();\n+  if (&x.b[1] == &x.b[0])\n+    link_error ();\n+  if (x.b != &x.b[0])\n+    link_error ();\n+  if (&x.b[1] == x.b)\n+    link_error ();\n+  return 0;\n+}\n+"}, {"sha": "fb8cbbe4c82b57e44bc5cf0e5e2f45869630181e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr15791-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-2.C?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do link } */\n+/* { dg-options \"\" } */\n+\n+void link_error ();\n+struct a {};\n+int main ()\n+{\n+  struct a b[2];\n+  if (&b[0] == &b[1])\n+    link_error ();\n+  return 0;\n+}\n+"}, {"sha": "be7ac1e0e1b03aefe34012c1696fc6e7b3e625b7", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr15791-3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-3.C?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f(int i, unsigned j)\n+{\n+      int b[2];\n+      if (&b[i] == &b[j])\n+\t      return 1;\n+      return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 0 \"gimple\" } } */\n+"}, {"sha": "54cf0dd91d945a511e8d179d894eb79fe0cdfbe4", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr15791-4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-4.C?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f(int i, int j)\n+{\n+    int b[2][2];\n+    if (&b[1][i] == &b[0][j])\n+      return 1;\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 0 \"gimple\" } } */\n+"}, {"sha": "0db13b09a4972611a0e7939ceee987ab76d6aa24", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr15791-5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr15791-5.C?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int foo(int i, int j)\n+{\n+\tchar g[16];\n+\tif (&g[i] == &g[j])\n+\t\treturn 1;\n+\treturn 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 1 \"gimple\" } } */\n+"}, {"sha": "68f14adad00a0f81acdae6c57f83633beaba343c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15791-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-1.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do link } */\n+\n+void link_error ();\n+\n+int main ()\n+{\n+  struct { int b[2]; } x;\n+  int b[2];\n+  if (&b[1] != &b[1])\n+    link_error ();\n+  if (&b[0] != b)\n+    link_error ();\n+  if (b == &b[2])\n+    link_error ();\n+  if (b != b)\n+    link_error ();\n+  if (&x.b[1] == &x.b[0])\n+    link_error ();\n+  if (x.b != &x.b[0])\n+    link_error ();\n+  if (&x.b[1] == x.b)\n+    link_error ();\n+  return 0;\n+}\n+"}, {"sha": "df68bfeba7f0de75b334f91f134a92f699f5490c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15791-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-2.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do link } */\n+/* { dg-options \"\" } */\n+\n+void link_error ();\n+struct a {};\n+int main ()\n+{\n+  struct a b[2];\n+  if (&b[0] != &b[1])\n+    link_error ();\n+  return 0;\n+}\n+"}, {"sha": "be7ac1e0e1b03aefe34012c1696fc6e7b3e625b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15791-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-3.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f(int i, unsigned j)\n+{\n+      int b[2];\n+      if (&b[i] == &b[j])\n+\t      return 1;\n+      return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 0 \"gimple\" } } */\n+"}, {"sha": "54cf0dd91d945a511e8d179d894eb79fe0cdfbe4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15791-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-4.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f(int i, int j)\n+{\n+    int b[2][2];\n+    if (&b[1][i] == &b[0][j])\n+      return 1;\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 0 \"gimple\" } } */\n+"}, {"sha": "0db13b09a4972611a0e7939ceee987ab76d6aa24", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15791-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020d90eeafef20bc913608dbf794ba33ee578774/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15791-5.c?ref=020d90eeafef20bc913608dbf794ba33ee578774", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int foo(int i, int j)\n+{\n+\tchar g[16];\n+\tif (&g[i] == &g[j])\n+\t\treturn 1;\n+\treturn 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i == j\" 1 \"gimple\" } } */\n+"}]}