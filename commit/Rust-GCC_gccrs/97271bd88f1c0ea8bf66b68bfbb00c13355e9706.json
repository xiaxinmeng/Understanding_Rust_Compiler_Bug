{"sha": "97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcyNzFiZDg4ZjFjMGVhOGJmNjZiNjhiZmJiMDBjMTMzNTVlOTcwNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-06T12:39:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-06T12:39:02Z"}, "message": "P0935R0 Eradicating unnecessarily explicit default constructors\n\nThis is the last remaining piece of P0935R0. This adds a default\nconstructor to each of the streambuf and stream types in <sstream> so\nthat default construction does not use the 'explicit' constructor that\nhas a single, defaulted argument.\n\n\tP0935R0 Eradicating unnecessarily explicit default constructors\n\t* config/abi/pre/gnu.ver: Tighten existing patterns and export new\n\tdefault constructor symbols.\n\t* include/std/sstream (basic_stringbuf, basic_istringstream)\n\t(basic_ostringstream, basic_stringstream): Remove default arguments\n\tfrom explicit constructors taking ios_base::openmode and add separate\n\tnon-explicit default constructors.\n\t* testsuite/27_io/basic_istringstream/cons/default.cc: New.\n\t* testsuite/27_io/basic_ostringstream/cons/default.cc: New.\n\t* testsuite/27_io/basic_stringstream/cons/default.cc: New.\n\t* testsuite/27_io/basic_stringbuf/cons/char/default.cc: New.\n\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/default.cc: New.\n\nFrom-SVN: r262474", "tree": {"sha": "85d3d00300de01164f05582eb17515a63ae37d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85d3d00300de01164f05582eb17515a63ae37d0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8660e7908fb884b5a0dda37f937ecced3da16070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8660e7908fb884b5a0dda37f937ecced3da16070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8660e7908fb884b5a0dda37f937ecced3da16070"}], "stats": {"total": 280, "additions": 269, "deletions": 11}, "files": [{"sha": "733c831aa6a67c8088a91715c60dbae02c9e7e97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -1,5 +1,18 @@\n 2018-07-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP0935R0 Eradicating unnecessarily explicit default constructors\n+\t* config/abi/pre/gnu.ver: Tighten existing patterns and export new\n+\tdefault constructor symbols.\n+\t* include/std/sstream (basic_stringbuf, basic_istringstream)\n+\t(basic_ostringstream, basic_stringstream): Remove default arguments\n+\tfrom explicit constructors taking ios_base::openmode and add separate\n+\tnon-explicit default constructors.\n+\t* testsuite/27_io/basic_istringstream/cons/default.cc: New.\n+\t* testsuite/27_io/basic_ostringstream/cons/default.cc: New.\n+\t* testsuite/27_io/basic_stringstream/cons/default.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/cons/char/default.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/default.cc: New.\n+\n \t* include/std/variant (__accepted_index): Use void_t.\n \n 2018-07-05  Jonathan Wakely  <jwakely@redhat.com>"}, {"sha": "e634d3ab707f50b6a61b790e4db578ed228469e3", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -1748,10 +1748,20 @@ GLIBCXX_3.4.21 {\n     _ZStplI[cw]St11char_traitsI[cw]ESaI[cw]EENSt7__cxx1112basic_stringIT_T0_T1_EE*;\n \n     # ABI-tagged stringstreams\n-    _ZNSt7__cxx1115basic_stringbuf*;\n-    _ZNSt7__cxx1118basic_stringstream*;\n-    _ZNSt7__cxx1119basic_istringstream*;\n-    _ZNSt7__cxx1119basic_ostringstream*;\n+#   _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]*__xfer_bufptrs*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[a1346789]*;\n+#   _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n+#   _ZNSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]*;\n+#   _ZNSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n     _ZNKSt7__cxx1115basic_stringbuf*;\n     _ZNKSt7__cxx1118basic_stringstream*;\n     _ZNKSt7__cxx1119basic_istringstream*;\n@@ -2021,6 +2031,14 @@ GLIBCXX_3.4.26 {\n     _ZNSt13runtime_errorC[12]EOS_;\n     _ZNSt13runtime_erroraSEOS_;\n \n+    # Default constructors for stringstreams\n+    _ZNSt15basic_stringbuf[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt19basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt7__cxx1115basic_stringbuf[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "71d69e94b65ccc142b23dbe1ede3c6005bd3296f", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -89,6 +89,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     public:\n       // Constructors:\n+\n+      /**\n+       *  @brief  Starts with an empty string buffer.\n+       *\n+       *  The default constructor initializes the parent class using its\n+       *  own default ctor.\n+      */\n+      basic_stringbuf()\n+      : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()\n+      { }\n+\n       /**\n        *  @brief  Starts with an empty string buffer.\n        *  @param  __mode  Whether the buffer can read, or write, or both.\n@@ -97,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  own default ctor.\n       */\n       explicit\n-      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      basic_stringbuf(ios_base::openmode __mode)\n       : __streambuf_type(), _M_mode(__mode), _M_string()\n       { }\n \n@@ -401,8 +412,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     public:\n       // Constructors:\n+\n       /**\n        *  @brief  Default constructor starts with an empty string buffer.\n+       *\n+       *  Initializes @c sb using @c in, and passes @c &sb to the base\n+       *  class initializer.  Does not allocate any buffer.\n+       *\n+       *  That's a lie.  We initialize the base class with NULL, because the\n+       *  string class does its own memory management.\n+      */\n+      basic_istringstream()\n+      : __istream_type(), _M_stringbuf(ios_base::in)\n+      { this->init(&_M_stringbuf); }\n+\n+      /**\n+       *  @brief  Starts with an empty string buffer.\n        *  @param  __mode  Whether the buffer can read, or write, or both.\n        *\n        *  @c ios_base::in is automatically included in @a __mode.\n@@ -414,7 +439,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  string class does its own memory management.\n       */\n       explicit\n-      basic_istringstream(ios_base::openmode __mode = ios_base::in)\n+      basic_istringstream(ios_base::openmode __mode)\n       : __istream_type(), _M_stringbuf(__mode | ios_base::in)\n       { this->init(&_M_stringbuf); }\n \n@@ -545,8 +570,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     public:\n       // Constructors/destructor:\n+\n       /**\n        *  @brief  Default constructor starts with an empty string buffer.\n+       *\n+       *  Initializes @c sb using @c mode|out, and passes @c &sb to the base\n+       *  class initializer.  Does not allocate any buffer.\n+       *\n+       *  That's a lie.  We initialize the base class with NULL, because the\n+       *  string class does its own memory management.\n+      */\n+      basic_ostringstream()\n+      : __ostream_type(), _M_stringbuf(ios_base::out)\n+      { this->init(&_M_stringbuf); }\n+\n+      /**\n+       *  @brief  Starts with an empty string buffer.\n        *  @param  __mode  Whether the buffer can read, or write, or both.\n        *\n        *  @c ios_base::out is automatically included in @a mode.\n@@ -558,7 +597,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  string class does its own memory management.\n       */\n       explicit\n-      basic_ostringstream(ios_base::openmode __mode = ios_base::out)\n+      basic_ostringstream(ios_base::openmode __mode)\n       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)\n       { this->init(&_M_stringbuf); }\n \n@@ -689,19 +728,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     public:\n       // Constructors/destructors\n+\n       /**\n        *  @brief  Default constructor starts with an empty string buffer.\n+       *\n+       *  Initializes @c sb using the mode @c in|out, and passes @c &sb\n+       *  to the base class initializer.  Does not allocate any buffer.\n+       *\n+       *  That's a lie.  We initialize the base class with NULL, because the\n+       *  string class does its own memory management.\n+      */\n+      basic_stringstream()\n+      : __iostream_type(), _M_stringbuf(ios_base::out | ios_base::in)\n+      { this->init(&_M_stringbuf); }\n+\n+      /**\n+       *  @brief  Starts with an empty string buffer.\n        *  @param  __m  Whether the buffer can read, or write, or both.\n        *\n-       *  Initializes @c sb using the mode from @c __m, and passes @c\n-       *  &sb to the base class initializer.  Does not allocate any\n-       *  buffer.\n+       *  Initializes @c sb using the mode from @c __m, and passes @c &sb\n+       *  to the base class initializer.  Does not allocate any buffer.\n        *\n        *  That's a lie.  We initialize the base class with NULL, because the\n        *  string class does its own memory management.\n       */\n       explicit\n-      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)\n+      basic_stringstream(ios_base::openmode __m)\n       : __iostream_type(), _M_stringbuf(__m)\n       { this->init(&_M_stringbuf); }\n "}, {"sha": "020206fcc84ddee72ddeccab6c1c0caef6b0c8df", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/cons/default.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fdefault.cc?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 27.8.3.1  basic_istringstream constructors  [istringstream.cons]\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  // P0935R0\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::istringstream>();\n+}\n+\n+int main() \n+{\n+  test01();\n+}"}, {"sha": "f2768b02992e50dc672d47bf409cd1e938db62d0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/default.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fdefault.cc?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 27.8.4.1  basic_ostringstream constructors  [ostringstream.cons]\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  // P0935R0\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::ostringstream>();\n+}\n+\n+int main() \n+{\n+  test01();\n+}"}, {"sha": "06b242f8295c5be47353a3fad131bc370954cfc9", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/char/default.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2Fdefault.cc?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 27.8.2.1  basic_stringbuf constructors  [stringbuf.cons]\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  // P0935R0\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::stringbuf>();\n+}\n+\n+int main() \n+{\n+  test01();\n+}"}, {"sha": "6ac75ab65c372bf45489c53f20efd26d41ce10e9", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/wchar_t/default.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2Fdefault.cc?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 27.8.2.1  basic_stringbuf constructors  [stringbuf.cons]\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  // P0935R0\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::wstringbuf>();\n+}\n+\n+int main() \n+{\n+  test01();\n+}"}, {"sha": "0195be15dfb2a1a665fed76317e5fef2e08b1a80", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/cons/default.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97271bd88f1c0ea8bf66b68bfbb00c13355e9706/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fdefault.cc?ref=97271bd88f1c0ea8bf66b68bfbb00c13355e9706", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 27.8.5.1  basic_stringstream constructors  [stringstream.cons]\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  // P0935R0\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::stringstream>();\n+}\n+\n+int main() \n+{\n+  test01();\n+}"}]}