{"sha": "f84fdb134dec02f68fd9a39a58e726023470e537", "node_id": "C_kwDOANBUbNoAKGY4NGZkYjEzNGRlYzAyZjY4ZmQ5YTM5YTU4ZTcyNjAyMzQ3MGU1Mzc", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-03T07:33:17Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-03T07:33:17Z"}, "message": "libgomp: enable reverse offload for AMDGCN\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (5.0 Impl. Status, gcn specifics): Update for\n\treverse offload.\n\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_get_num_devices): Accept\n\treverse-offload requirement.", "tree": {"sha": "cc6126fdbca2cf1101e3b99647e0e39639d71b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6126fdbca2cf1101e3b99647e0e39639d71b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84fdb134dec02f68fd9a39a58e726023470e537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84fdb134dec02f68fd9a39a58e726023470e537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84fdb134dec02f68fd9a39a58e726023470e537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84fdb134dec02f68fd9a39a58e726023470e537/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167b04b9b8a2becfd23b8ccf7f09016bbd013e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167b04b9b8a2becfd23b8ccf7f09016bbd013e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167b04b9b8a2becfd23b8ccf7f09016bbd013e12"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "698ae330942ddb2f85313bdafa24e23431c2f69a", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fdb134dec02f68fd9a39a58e726023470e537/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fdb134dec02f68fd9a39a58e726023470e537/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=f84fdb134dec02f68fd9a39a58e726023470e537", "patch": "@@ -227,8 +227,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{allocate} directive @tab N @tab\n @item @code{allocate} clause @tab P @tab Initial support\n @item @code{use_device_addr} clause on @code{target data} @tab Y @tab\n-@item @code{ancestor} modifier on @code{device} clause\n-      @tab Y @tab Host fallback with GCN devices\n+@item @code{ancestor} modifier on @code{device} clause @tab Y @tab\n @item Implicit declare target directive @tab Y @tab\n @item Discontiguous array section with @code{target update} construct\n       @tab N @tab\n@@ -4455,9 +4454,13 @@ The implementation remark:\n @item I/O within OpenMP target regions and OpenACC parallel/kernels is supported\n       using the C library @code{printf} functions and the Fortran\n       @code{print}/@code{write} statements.\n-@item OpenMP code that has a requires directive with @code{unified_address},\n-      @code{unified_shared_memory} or @code{reverse_offload} will remove\n-      any GCN device from the list of available devices (``host fallback'').\n+@item Reverse offload (i.e. @code{target} regions with\n+      @code{device(ancestor:1)}) are processed serially per @code{target} region\n+      such that the next reverse offload region is only executed after the previous\n+      one returned.\n+@item OpenMP code that has a requires directive with @code{unified_address} or\n+      @code{unified_shared_memory} will remove any GCN device from the list of\n+      available devices (``host fallback'').\n @end itemize\n \n "}, {"sha": "11ce6b0fa8db43ab15321d117f65598ba20420f5", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84fdb134dec02f68fd9a39a58e726023470e537/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84fdb134dec02f68fd9a39a58e726023470e537/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=f84fdb134dec02f68fd9a39a58e726023470e537", "patch": "@@ -3262,7 +3262,8 @@ GOMP_OFFLOAD_get_num_devices (unsigned int omp_requires_mask)\n     return 0;\n   /* Return -1 if no omp_requires_mask cannot be fulfilled but\n      devices were present.  */\n-  if (hsa_context.agent_count > 0 && omp_requires_mask != 0)\n+  if (hsa_context.agent_count > 0\n+      && (omp_requires_mask & ~GOMP_REQUIRES_REVERSE_OFFLOAD) != 0)\n     return -1;\n   return hsa_context.agent_count;\n }"}]}