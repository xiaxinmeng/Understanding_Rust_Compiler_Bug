{"sha": "488461d8622d5d7b5f85612562fd5abb979f5d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4NDYxZDg2MjJkNWQ3YjVmODU2MTI1NjJmZDVhYmI5NzlmNWQ1Nw==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2018-08-23T12:43:17Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-08-23T12:43:17Z"}, "message": "[AARCH64] use \"arch_enabled\" attribute for aarch64.\n\narm.md has some attributes \"arch\" and \"arch_enabled\" to aid enabling\nand disabling insn alternatives based on the architecture being\ntargeted.  This patch introduces a similar attribute in the aarch64\nbackend.  The new attribute will be used to enable a new alternative\nfor the atomic_store insn in a future patch, but is an atomic change\nin itself.\n\nThe new attribute has values \"any\", \"fp\", \"fp16\", \"simd\", and \"sve\".\nThese attribute values have been taken from the pre-existing\nattributes \"fp\", \"fp16\", \"simd\", and \"sve\".\n\nThe standalone \"fp\" attribute has been reintroduced in terms of the\n\"arch\" attribute as it's needed for the xgene1.md scheduling file --\nthe use in this file can't be changed to check for `(eq_attr \"arch\"\n\"fp\")` as the file is reused by the arm.md machine description whose\n'arch' attribute doesn't have an 'fp' value.\n\n2018-08-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64.md (arches): New enum.\n\t(arch): New enum attr.\n\t(arch_enabled): New attr.\n\t(enabled): Now uses arch_enabled only.\n\t(simd, sve, fp16): Removed attribute.\n\t(fp): Attr now defined in terms of 'arch'.\n\t(*mov<mode>_aarch64, *movsi_aarch64, *movdi_aarch64, *movti_aarch64,\n\t*movhf_aarch64, <optab><fcvt_target><GPF:mode>2,\n\t<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3,\n\t<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>3): Merge 'fp' and 'simd'\n\tattributes into 'arch'.\n\t(*movsf_aarch64, *movdf_aarch64, *movtf_aarch64, *add<mode>3_aarch64,\n\tsubdi3, neg<mode>2, <optab><mode>3, one_cmpl<mode>2,\n\t*<NLOGICAL:optab>_one_cmpl<mode>3, *xor_one_cmpl<mode>3,\n\t*aarch64_ashl_sisd_or_int_<mode>3, *aarch64_lshr_sisd_or_int_<mode>3,\n\t*aarch64_ashr_sisd_or_int_<mode>3, *aarch64_sisd_ushl): Convert use of\n\t'simd' attribute into 'arch'.\n\t(load_pair_sw_<SX:mode><SX2:mode>, load_pair_dw_<DX:mode><DX2:mode>,\n\tstore_pair_sw_<SX:mode><SX2:mode>, store_pair_dw_<DX:mode><DX2:mode>):\n\tConvert use of 'fp' attribute to 'arch'.\n\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>,\n\tmove_lo_quad_internal_<mode>): (different modes) Merge 'fp' and 'simd'\n\tinto 'arch'.\n\t(move_lo_quad_internal_be_<mode>, move_lo_quad_internal_be_<mode>):\n\t(different modes) Merge 'fp' and 'simd' into 'arch'.\n\t(*aarch64_combinez<mode>, *aarch64_combinez_be<mode>): Merge 'fp' and\n\t'simd' into 'arch'.\n\nFrom-SVN: r263811", "tree": {"sha": "70dc4fc2f77dfd7189dcd54ab43d7d87500832fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70dc4fc2f77dfd7189dcd54ab43d7d87500832fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/488461d8622d5d7b5f85612562fd5abb979f5d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488461d8622d5d7b5f85612562fd5abb979f5d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488461d8622d5d7b5f85612562fd5abb979f5d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488461d8622d5d7b5f85612562fd5abb979f5d57/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84ea73e1bbcec5b85550ef8f3244fa7059914b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ea73e1bbcec5b85550ef8f3244fa7059914b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ea73e1bbcec5b85550ef8f3244fa7059914b47"}], "stats": {"total": 207, "additions": 113, "deletions": 94}, "files": [{"sha": "28516aabcef7acf4a64cb1e9ae86a9767c7b2c42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=488461d8622d5d7b5f85612562fd5abb979f5d57", "patch": "@@ -1,3 +1,33 @@\n+2018-08-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64.md (arches): New enum.\n+\t(arch): New enum attr.\n+\t(arch_enabled): New attr.\n+\t(enabled): Now uses arch_enabled only.\n+\t(simd, sve, fp16): Removed attribute.\n+\t(fp): Attr now defined in terms of 'arch'.\n+\t(*mov<mode>_aarch64, *movsi_aarch64, *movdi_aarch64, *movti_aarch64,\n+\t*movhf_aarch64, <optab><fcvt_target><GPF:mode>2,\n+\t<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3,\n+\t<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>3): Merge 'fp' and 'simd'\n+\tattributes into 'arch'.\n+\t(*movsf_aarch64, *movdf_aarch64, *movtf_aarch64, *add<mode>3_aarch64,\n+\tsubdi3, neg<mode>2, <optab><mode>3, one_cmpl<mode>2,\n+\t*<NLOGICAL:optab>_one_cmpl<mode>3, *xor_one_cmpl<mode>3,\n+\t*aarch64_ashl_sisd_or_int_<mode>3, *aarch64_lshr_sisd_or_int_<mode>3,\n+\t*aarch64_ashr_sisd_or_int_<mode>3, *aarch64_sisd_ushl): Convert use of\n+\t'simd' attribute into 'arch'.\n+\t(load_pair_sw_<SX:mode><SX2:mode>, load_pair_dw_<DX:mode><DX2:mode>,\n+\tstore_pair_sw_<SX:mode><SX2:mode>, store_pair_dw_<DX:mode><DX2:mode>):\n+\tConvert use of 'fp' attribute to 'arch'.\n+\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>,\n+\tmove_lo_quad_internal_<mode>): (different modes) Merge 'fp' and 'simd'\n+\tinto 'arch'.\n+\t(move_lo_quad_internal_be_<mode>, move_lo_quad_internal_be_<mode>):\n+\t(different modes) Merge 'fp' and 'simd' into 'arch'.\n+\t(*aarch64_combinez<mode>, *aarch64_combinez_be<mode>): Merge 'fp' and\n+\t'simd' into 'arch'.\n+\n 2018-08-23  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/87026"}, {"sha": "c4be3101fdec930707918106cd7c53cf7584553e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=488461d8622d5d7b5f85612562fd5abb979f5d57", "patch": "@@ -1352,9 +1352,8 @@\n    fmov\\\\t%d0, %1\n    dup\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_insn \"move_lo_quad_internal_<mode>\"\n@@ -1368,9 +1367,8 @@\n    fmov\\\\t%d0, %1\n    dup\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_insn \"move_lo_quad_internal_be_<mode>\"\n@@ -1384,9 +1382,8 @@\n    fmov\\\\t%d0, %1\n    dup\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_insn \"move_lo_quad_internal_be_<mode>\"\n@@ -1400,9 +1397,8 @@\n    fmov\\\\t%d0, %1\n    dup\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_expand \"move_lo_quad_<mode>\"\n@@ -3114,8 +3110,7 @@\n    fmov\\t%d0, %1\n    ldr\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_move<q>, neon_from_gp, neon_load1_1reg\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")]\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_insn \"*aarch64_combinez_be<mode>\"\n@@ -3129,8 +3124,7 @@\n    fmov\\t%d0, %1\n    ldr\\\\t%d0, %1\"\n   [(set_attr \"type\" \"neon_move<q>, neon_from_gp, neon_load1_1reg\")\n-   (set_attr \"simd\" \"yes,*,yes\")\n-   (set_attr \"fp\" \"*,yes,*\")]\n+   (set_attr \"arch\" \"simd,fp,simd\")]\n )\n \n (define_expand \"aarch64_combine<mode>\""}, {"sha": "955769a64d2030839cdb337321a808626188190e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 73, "deletions": 78, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488461d8622d5d7b5f85612562fd5abb979f5d57/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=488461d8622d5d7b5f85612562fd5abb979f5d57", "patch": "@@ -259,41 +259,51 @@\n ;; FP or SIMD registers then the pattern predicate should include TARGET_FLOAT\n ;; or TARGET_SIMD.\n \n-;; Attribute that specifies whether or not the instruction touches fp\n-;; registers.  When this is set to yes for an alternative, that alternative\n-;; will be disabled when !TARGET_FLOAT.\n-(define_attr \"fp\" \"no,yes\" (const_string \"no\"))\n+;; Attributes of the architecture required to support the instruction (or\n+;; alternative). This attribute is used to compute attribute \"enabled\", use type\n+;; \"any\" to enable an alternative in all cases.\n \n-;; Attribute that specifies whether or not the instruction touches half\n-;; precision fp registers.  When this is set to yes for an alternative,\n-;; that alternative will be disabled when !TARGET_FP_F16INST.\n-(define_attr \"fp16\" \"no,yes\" (const_string \"no\"))\n+(define_enum \"arches\" [ any fp simd sve fp16])\n \n-;; Attribute that specifies whether or not the instruction touches simd\n-;; registers.  When this is set to yes for an alternative, that alternative\n-;; will be disabled when !TARGET_SIMD.\n-(define_attr \"simd\" \"no,yes\" (const_string \"no\"))\n+(define_enum_attr \"arch\" \"arches\" (const_string \"any\"))\n \n-;; Attribute that specifies whether or not the instruction uses SVE.\n-;; When this is set to yes for an alternative, that alternative\n-;; will be disabled when !TARGET_SVE.\n-(define_attr \"sve\" \"no,yes\" (const_string \"no\"))\n+;; [For compatibility with Arm in pipeline models]\n+;; Attribute that specifies whether or not the instruction touches fp\n+;; registers.\n+;; Note that this attribute is not used anywhere in either the arm or aarch64\n+;; backends except in the scheduling description for xgene1.  In that\n+;; scheduling description this attribute is used to subclass the load_4 and\n+;; load_8 types.\n+(define_attr \"fp\" \"no,yes\"\n+  (if_then_else\n+    (eq_attr \"arch\" \"fp\")\n+    (const_string \"yes\")\n+    (const_string \"no\")))\n+\n+(define_attr \"arch_enabled\" \"no,yes\"\n+  (if_then_else\n+    (ior\n+\t(eq_attr \"arch\" \"any\")\n+\n+\t(and (eq_attr \"arch\" \"fp\")\n+\t     (match_test \"TARGET_FLOAT\"))\n+\n+\t(and (eq_attr \"arch\" \"simd\")\n+\t     (match_test \"TARGET_SIMD\"))\n+\n+\t(and (eq_attr \"arch\" \"fp16\")\n+\t     (match_test \"TARGET_FP_F16INST\"))\n+\n+\t(and (eq_attr \"arch\" \"sve\")\n+\t     (match_test \"TARGET_SVE\")))\n+    (const_string \"yes\")\n+    (const_string \"no\")))\n \n ;; Attribute that controls whether an alternative is enabled or not.\n ;; Currently it is only used to disable alternatives which touch fp or simd\n-;; registers when -mgeneral-regs-only is specified.\n-(define_attr \"enabled\" \"no,yes\"\n-  (cond [(ior\n-\t    (and (eq_attr \"fp\" \"yes\")\n-\t\t (eq (symbol_ref \"TARGET_FLOAT\") (const_int 0)))\n-\t    (and (eq_attr \"simd\" \"yes\")\n-\t\t (eq (symbol_ref \"TARGET_SIMD\") (const_int 0)))\n-\t    (and (eq_attr \"fp16\" \"yes\")\n-\t\t (eq (symbol_ref \"TARGET_FP_F16INST\") (const_int 0)))\n-\t    (and (eq_attr \"sve\" \"yes\")\n-\t\t (eq (symbol_ref \"TARGET_SVE\") (const_int 0))))\n-\t    (const_string \"no\")\n-\t] (const_string \"yes\")))\n+;; registers when -mgeneral-regs-only is specified or to require a special\n+;; architecture support.\n+(define_attr \"enabled\" \"no,yes\" (attr \"arch_enabled\"))\n \n ;; Attribute that specifies whether we are dealing with a branch to a\n ;; label that is far away, i.e. further away than the maximum/minimum\n@@ -1009,8 +1019,7 @@\n   ;; The \"mov_imm\" type for CNT is just a placeholder.\n   [(set_attr \"type\" \"mov_reg,mov_imm,neon_move,mov_imm,load_4,load_4,store_4,\n \t\t     store_4,neon_to_gp<q>,neon_from_gp<q>,neon_dup\")\n-   (set_attr \"simd\" \"*,*,yes,*,*,*,*,*,yes,yes,yes\")\n-   (set_attr \"sve\" \"*,*,*,yes,*,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"*,*,simd,sve,*,*,*,*,simd,simd,simd\")]\n )\n \n (define_expand \"mov<mode>\"\n@@ -1069,9 +1078,7 @@\n   ;; The \"mov_imm\" type for CNT is just a placeholder.\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,load_4,\n \t\t    load_4,store_4,store_4,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n-   (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n-   (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")\n-   (set_attr \"sve\" \"*,*,*,*,*,yes,*,*,*,*,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"*,*,*,*,*,sve,*,fp,*,fp,*,*,fp,fp,fp,simd\")]\n )\n \n (define_insn_and_split \"*movdi_aarch64\"\n@@ -1108,9 +1115,7 @@\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,mov_imm,\n \t\t     load_8,load_8,store_8,store_8,adr,adr,f_mcr,f_mrc,fmov,\n \t\t     neon_move\")\n-   (set_attr \"fp\" \"*,*,*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n-   (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")\n-   (set_attr \"sve\" \"*,*,*,*,*,*,yes,*,*,*,*,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"*,*,*,*,*,*,sve,*,fp,*,fp,*,*,fp,fp,fp,simd\")]\n )\n \n (define_insn \"insv_imm<mode>\"\n@@ -1163,8 +1168,7 @@\n \t\t             load_16,store_16,store_16,\\\n                              load_16,store_16\")\n    (set_attr \"length\" \"8,8,8,4,4,4,4,4,4\")\n-   (set_attr \"simd\" \"*,*,*,yes,*,*,*,*,*\")\n-   (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,yes\")]\n+   (set_attr \"arch\" \"*,*,*,simd,*,*,*,fp,fp\")]\n )\n \n ;; Split a TImode register-register or register-immediate move into\n@@ -1218,8 +1222,7 @@\n    mov\\\\t%w0, %w1\"\n   [(set_attr \"type\" \"neon_move,f_mcr,neon_move,neon_to_gp, neon_move,fconsts, \\\n \t\t     neon_move,f_loads,f_stores,load_4,store_4,mov_reg\")\n-   (set_attr \"simd\" \"yes,*,yes,yes,yes,*,yes,*,*,*,*,*\")\n-   (set_attr \"fp16\"   \"*,yes,*,*,*,yes,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"simd,fp16,simd,simd,simd,fp16,simd,*,*,*,*,*\")]\n )\n \n (define_insn \"*movsf_aarch64\"\n@@ -1243,7 +1246,7 @@\n   [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconsts,neon_move,\\\n \t\t     f_loads,f_stores,load_4,store_4,mov_reg,\\\n \t\t     fconsts\")\n-   (set_attr \"simd\" \"yes,*,*,*,*,yes,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"simd,*,*,*,*,simd,*,*,*,*,*,*\")]\n )\n \n (define_insn \"*movdf_aarch64\"\n@@ -1267,7 +1270,7 @@\n   [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconstd,neon_move,\\\n \t\t     f_loadd,f_stored,load_8,store_8,mov_reg,\\\n \t\t     fconstd\")\n-   (set_attr \"simd\" \"yes,*,*,*,*,yes,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"simd,*,*,*,*,simd,*,*,*,*,*,*\")]\n )\n \n (define_split\n@@ -1312,7 +1315,7 @@\n   [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,neon_move_q,f_mcr,\\\n                      f_loadd,f_stored,load_16,store_16,store_16\")\n    (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4,4\")\n-   (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*,*\")]\n+   (set_attr \"arch\" \"simd,*,*,*,simd,*,*,*,*,*,*\")]\n )\n \n (define_split\n@@ -1359,7 +1362,7 @@\n    ldp\\\\t%w0, %w2, %1\n    ldp\\\\t%s0, %s2, %1\"\n   [(set_attr \"type\" \"load_8,neon_load1_2reg\")\n-   (set_attr \"fp\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,fp\")]\n )\n \n ;; Storing different modes that can still be merged\n@@ -1376,7 +1379,7 @@\n    ldp\\\\t%x0, %x2, %1\n    ldp\\\\t%d0, %d2, %1\"\n   [(set_attr \"type\" \"load_16,neon_load1_2reg\")\n-   (set_attr \"fp\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,fp\")]\n )\n \n ;; Operands 0 and 2 are tied together by the final condition; so we allow\n@@ -1394,7 +1397,7 @@\n    stp\\\\t%w1, %w3, %0\n    stp\\\\t%s1, %s3, %0\"\n   [(set_attr \"type\" \"store_8,neon_store1_2reg\")\n-   (set_attr \"fp\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,fp\")]\n )\n \n ;; Storing different modes that can still be merged\n@@ -1411,7 +1414,7 @@\n    stp\\\\t%x1, %x3, %0\n    stp\\\\t%d1, %d3, %0\"\n   [(set_attr \"type\" \"store_16,neon_store1_2reg\")\n-   (set_attr \"fp\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,fp\")]\n )\n \n ;; Load pair with post-index writeback.  This is primarily used in function\n@@ -1637,7 +1640,7 @@\n   * return aarch64_output_sve_addvl_addpl (operands[0], operands[1], operands[2]);\"\n   ;; The \"alu_imm\" type for ADDVL/ADDPL is just a placeholder.\n   [(set_attr \"type\" \"alu_imm,alu_sreg,neon_add,alu_imm,multiple,alu_imm\")\n-   (set_attr \"simd\" \"*,*,yes,*,*,*\")]\n+   (set_attr \"arch\" \"*,*,simd,*,*,*\")]\n )\n \n ;; zero_extend version of above\n@@ -2640,7 +2643,7 @@\n    sub\\\\t%x0, %x1, %x2\n    sub\\\\t%d0, %d1, %d2\"\n   [(set_attr \"type\" \"alu_sreg, neon_sub\")\n-   (set_attr \"simd\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,simd\")]\n )\n \n (define_expand \"subv<mode>4\"\n@@ -3247,7 +3250,7 @@\n    neg\\\\t%<w>0, %<w>1\n    neg\\\\t%<rtn>0<vas>, %<rtn>1<vas>\"\n   [(set_attr \"type\" \"alu_sreg, neon_neg<q>\")\n-   (set_attr \"simd\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,simd\")]\n )\n \n ;; zero_extend version of above\n@@ -4092,7 +4095,7 @@\n   <logical>\\\\t%<w>0, %<w>1, %2\n   <logical>\\\\t%0.<Vbtype>, %1.<Vbtype>, %2.<Vbtype>\"\n   [(set_attr \"type\" \"logic_reg,logic_imm,neon_logic\")\n-   (set_attr \"simd\" \"*,*,yes\")]\n+   (set_attr \"arch\" \"*,*,simd\")]\n )\n \n ;; zero_extend version of above\n@@ -4226,7 +4229,7 @@\n   mvn\\\\t%<w>0, %<w>1\n   mvn\\\\t%0.8b, %1.8b\"\n   [(set_attr \"type\" \"logic_reg,neon_logic\")\n-   (set_attr \"simd\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,simd\")]\n )\n \n (define_insn \"*one_cmpl_<optab><mode>2\"\n@@ -4249,7 +4252,7 @@\n   <NLOGICAL:nlogical>\\\\t%<w>0, %<w>2, %<w>1\n   <NLOGICAL:nlogical>\\\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\"\n   [(set_attr \"type\" \"logic_reg,neon_logic\")\n-   (set_attr \"simd\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,simd\")]\n )\n \n (define_insn \"*<NLOGICAL:optab>_one_cmplsidi3_ze\"\n@@ -4289,7 +4292,7 @@\n    (set (match_dup 0) (not:GPI (match_dup 0)))]\n   \"\"\n   [(set_attr \"type\" \"logic_reg,multiple\")\n-   (set_attr \"simd\" \"*,yes\")]\n+   (set_attr \"arch\" \"*,simd\")]\n )\n \n (define_insn \"*and_one_cmpl<mode>3_compare0\"\n@@ -4833,8 +4836,8 @@\n    lsl\\t%<w>0, %<w>1, %<w>2\n    shl\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    ushl\\t%<rtn>0<vas>, %<rtn>1<vas>, %<rtn>2<vas>\"\n-  [(set_attr \"simd\" \"no,no,yes,yes\")\n-   (set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>, neon_shift_reg<q>\")]\n+  [(set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>, neon_shift_reg<q>\")\n+   (set_attr \"arch\" \"*,*,simd,simd\")]\n )\n \n ;; Logical right shift using SISD or Integer instruction\n@@ -4851,8 +4854,8 @@\n    ushr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n    #\"\n-  [(set_attr \"simd\" \"no,no,yes,yes,yes\")\n-   (set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n+  [(set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")\n+   (set_attr \"arch\" \"*,*,simd,simd,simd\")]\n )\n \n (define_split\n@@ -4899,8 +4902,8 @@\n    sshr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n    #\"\n-  [(set_attr \"simd\" \"no,no,yes,yes,yes\")\n-   (set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n+  [(set_attr \"type\" \"bfx,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")\n+   (set_attr \"arch\" \"*,*,simd,simd,simd\")]\n )\n \n (define_split\n@@ -4940,8 +4943,7 @@\n                    UNSPEC_SISD_USHL))]\n   \"TARGET_SIMD\"\n   \"ushl\\t%d0, %d1, %d2\"\n-  [(set_attr \"simd\" \"yes\")\n-   (set_attr \"type\" \"neon_shift_reg\")]\n+  [(set_attr \"type\" \"neon_shift_reg\")]\n )\n \n (define_insn \"*aarch64_ushl_2s\"\n@@ -4951,8 +4953,7 @@\n                    UNSPEC_USHL_2S))]\n   \"TARGET_SIMD\"\n   \"ushl\\t%0.2s, %1.2s, %2.2s\"\n-  [(set_attr \"simd\" \"yes\")\n-   (set_attr \"type\" \"neon_shift_reg\")]\n+  [(set_attr \"type\" \"neon_shift_reg\")]\n )\n \n (define_insn \"*aarch64_sisd_sshl\"\n@@ -4962,8 +4963,7 @@\n                    UNSPEC_SISD_SSHL))]\n   \"TARGET_SIMD\"\n   \"sshl\\t%d0, %d1, %d2\"\n-  [(set_attr \"simd\" \"yes\")\n-   (set_attr \"type\" \"neon_shift_reg\")]\n+  [(set_attr \"type\" \"neon_shift_reg\")]\n )\n \n (define_insn \"*aarch64_sshl_2s\"\n@@ -4973,8 +4973,7 @@\n                    UNSPEC_SSHL_2S))]\n   \"TARGET_SIMD\"\n   \"sshl\\t%0.2s, %1.2s, %2.2s\"\n-  [(set_attr \"simd\" \"yes\")\n-   (set_attr \"type\" \"neon_shift_reg\")]\n+  [(set_attr \"type\" \"neon_shift_reg\")]\n )\n \n (define_insn \"*aarch64_sisd_neg_qi\"\n@@ -4983,8 +4982,7 @@\n                    UNSPEC_SISD_NEG))]\n   \"TARGET_SIMD\"\n   \"neg\\t%d0, %d1\"\n-  [(set_attr \"simd\" \"yes\")\n-   (set_attr \"type\" \"neon_neg\")]\n+  [(set_attr \"type\" \"neon_neg\")]\n )\n \n ;; Rotate right\n@@ -5620,9 +5618,8 @@\n   \"@\n    <su_optab>cvtf\\t%<GPF:s>0, %<s>1\n    <su_optab>cvtf\\t%<GPF:s>0, %<w1>1\"\n-  [(set_attr \"simd\" \"yes,no\")\n-   (set_attr \"fp\" \"no,yes\")\n-   (set_attr \"type\" \"neon_int_to_fp_<Vetype>,f_cvti2f\")]\n+  [(set_attr \"type\" \"neon_int_to_fp_<Vetype>,f_cvti2f\")\n+   (set_attr \"arch\" \"simd,fp\")]\n )\n \n (define_insn \"<optab><fcvt_iesize><GPF:mode>2\"\n@@ -5707,8 +5704,7 @@\n    <FCVT_F2FIXED:fcvt_fixed_insn>\\t%<GPF:w1>0, %<GPF:s>1, #%2\n    <FCVT_F2FIXED:fcvt_fixed_insn>\\t%<GPF:s>0, %<GPF:s>1, #%2\"\n   [(set_attr \"type\" \"f_cvtf2i, neon_fp_to_int_<GPF:Vetype>\")\n-   (set_attr \"fp\" \"yes, *\")\n-   (set_attr \"simd\" \"*, yes\")]\n+   (set_attr \"arch\" \"fp,simd\")]\n )\n \n (define_insn \"<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>3\"\n@@ -5721,8 +5717,7 @@\n    <FCVT_FIXED2F:fcvt_fixed_insn>\\t%<GPI:v>0, %<GPI:w>1, #%2\n    <FCVT_FIXED2F:fcvt_fixed_insn>\\t%<GPI:v>0, %<GPI:v>1, #%2\"\n   [(set_attr \"type\" \"f_cvti2f, neon_int_to_fp_<GPI:Vetype>\")\n-   (set_attr \"fp\" \"yes, *\")\n-   (set_attr \"simd\" \"*, yes\")]\n+   (set_attr \"arch\" \"fp,simd\")]\n )\n \n (define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn>hf<mode>3\""}]}