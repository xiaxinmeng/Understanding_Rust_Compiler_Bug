{"sha": "30f07d92394efb25cee950733e58b9a823ed167b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmMDdkOTIzOTRlZmIyNWNlZTk1MDczM2U1OGI5YTgyM2VkMTY3Yg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2005-06-16T08:21:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:21:46Z"}, "message": "s-mastop-irix.adb (Pop_Frame): Revert shorcuts avoiding calls to exc_unwind...\n\n2005-06-14  Olivier Hainque  <hainque@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-mastop-irix.adb (Pop_Frame): Revert shorcuts avoiding calls to\n\texc_unwind, now that we are generating proper .debug_frame output for\n\tthat target.\n\n\t* tracebak.c: Remove the mips-irix section, as we are now using the\n\ts-mastop based unwinder again.\n\tUnder SPARC/Solaris, take into account the stack bias to compute the\n\tframe offset.  The stack bias is 0 for the V8 ABI and 2047 for the V9\n\tABI.\n\nFrom-SVN: r101012", "tree": {"sha": "ed2e629f0eec3c715bd1067b2330160070c0cfd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed2e629f0eec3c715bd1067b2330160070c0cfd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f07d92394efb25cee950733e58b9a823ed167b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f07d92394efb25cee950733e58b9a823ed167b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f07d92394efb25cee950733e58b9a823ed167b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f07d92394efb25cee950733e58b9a823ed167b/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe93f42f5e6cf7503f722f66e825fd5367153cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe93f42f5e6cf7503f722f66e825fd5367153cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe93f42f5e6cf7503f722f66e825fd5367153cdf"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "020cd1d375309fe0a6eabcf028a4a9ea8d87d832", "filename": "gcc/ada/s-mastop-irix.adb", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f07d92394efb25cee950733e58b9a823ed167b/gcc%2Fada%2Fs-mastop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f07d92394efb25cee950733e58b9a823ed167b/gcc%2Fada%2Fs-mastop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-irix.adb?ref=30f07d92394efb25cee950733e58b9a823ed167b", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                         (Version for IRIX/MIPS)                          --\n --                                                                          --\n---          Copyright (C) 1999-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -295,21 +295,7 @@ package body System.Machine_State_Operations is\n       procedure Exc_Unwind (Scp : Sigcontext_Ptr; Fde : Long_Integer := 0);\n       pragma Import (C, Exc_Unwind, \"exc_unwind\");\n \n-      --  ??? Calling exc_unwind in the current setup does not work and\n-      --  triggers the emission of system warning messages. Why it does\n-      --  not work remains to be investigated. Part of the problem is\n-      --  probably a section naming issue (e.g. .eh_frame/.debug_frame).\n-\n-      --  Instead of letting the call take place for nothing and emit\n-      --  messages we don't expect, we just arrange things to pretend it\n-      --  occurred and failed.\n-\n-      --  ??? Until this is fixed, we shall document that the backtrace\n-      --  computation facility does not work, and we inhibit the pragma below\n-      --  because we arrange for the call not to be emitted and the linker\n-      --  complains when a library is linked in but resolves nothing.\n-\n-      --  pragma Linker_Options (\"-lexc\");\n+      pragma Linker_Options (\"-lexc\");\n \n    begin\n       --  exc_unwind is apparently not thread-safe under IRIX, so protect it\n@@ -319,11 +305,7 @@ package body System.Machine_State_Operations is\n \n       Lock_Task.all;\n \n-      if False then\n-         Exc_Unwind (Scp);\n-      else\n-         Scp.SC_PC := 0;\n-      end if;\n+      Exc_Unwind (Scp);\n \n       Unlock_Task.all;\n "}, {"sha": "ddeec9aee681580877939f844cd1d5ebb4d39083", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f07d92394efb25cee950733e58b9a823ed167b/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f07d92394efb25cee950733e58b9a823ed167b/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=30f07d92394efb25cee950733e58b9a823ed167b", "patch": "@@ -242,7 +242,7 @@ struct layout\n \n #define BASE_SKIP 1\n \n-/*-------------------------- Sparc Solaris -----------------------------*/\n+/*-------------------------- SPARC Solaris -----------------------------*/\n \n #elif defined (sun) && defined (sparc)\n \n@@ -257,8 +257,14 @@ struct layout\n   void *return_address;\n };\n \n+#ifdef __arch64__\n+#define STACK_BIAS 2047 /* V9 ABI */\n+#else\n+#define STACK_BIAS 0    /* V8 ABI */\n+#endif\n+\n #define FRAME_LEVEL 0\n-#define FRAME_OFFSET (14 * (sizeof (void*)))\n+#define FRAME_OFFSET (14 * sizeof (void*) + STACK_BIAS)\n #define PC_ADJUST 0\n #define STOP_FRAME(CURRENT, TOP_STACK) \\\n   ((CURRENT)->return_address == 0|| (CURRENT)->next == 0 \\\n@@ -324,12 +330,22 @@ struct layout\n         || ((*((ptr) - 1) & 0xff) == 0xff) \\\n         || (((*(ptr) & 0xd0ff) == 0xd0ff))))\n \n-/*------------------------------- mips-irix -------------------------------*/\n+/*----------------------------- x86_64 ---------------------------------*/\n \n-#elif defined (__mips) && defined (__sgi)\n+#elif defined (__x86_64__)\n \n #define USE_GCC_UNWINDER\n-#define PC_ADJUST -8\n+/* The generic unwinder is not used for this target because it is based\n+   on frame layout assumptions that are not reliable on this target (the\n+   rbp register is very likely used for something else than storing the\n+   frame pointer in optimized code). Hence, we use the GCC unwinder\n+   based on DWARF 2 call frame information, although it has the drawback\n+   of not being able to unwind through frames compiled without DWARF 2\n+   information.\n+*/\n+\n+#define PC_ADJUST -2\n+/* The minimum size of call instructions on this architecture is 2 bytes */\n \n #endif\n "}]}