{"sha": "a8532e9927ad6e4bbedbb957b02ca413aedf9098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1MzJlOTkyN2FkNmU0YmJlZGJiOTU3YjAyY2E0MTNhZWRmOTA5OA==", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2020-02-17T02:48:39Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2020-02-17T02:48:39Z"}, "message": "rs6000: mark clobber for registers changed by untpyed_call\n\nAs PR93047 said, __builtin_apply/__builtin_return does not work well with\n-frename-registers.  This is caused by return register(e.g. r3) is used to\nrename another register, before return register is stored to stack.\nThis patch fix this issue by emitting clobber for those egisters which\nmaybe changed by untyped call.\n\ngcc/\n2020-02-17  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR target/93047\n\t* config/rs6000/rs6000.md (untyped_call): Add emit_clobber.\n\ngcc/testsuite\n2020-02-17  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR target/93047\n\t* gcc.dg/torture/stackalign/builtin-return-2.c: New test case.", "tree": {"sha": "69c9dbdafe0cc4d702a0f8104b1a592da0011e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69c9dbdafe0cc4d702a0f8104b1a592da0011e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8532e9927ad6e4bbedbb957b02ca413aedf9098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8532e9927ad6e4bbedbb957b02ca413aedf9098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8532e9927ad6e4bbedbb957b02ca413aedf9098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8532e9927ad6e4bbedbb957b02ca413aedf9098/comments", "author": null, "committer": null, "parents": [{"sha": "f0a33db5fb64f35a56e02e976920ee8400181719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a33db5fb64f35a56e02e976920ee8400181719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a33db5fb64f35a56e02e976920ee8400181719"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "5357acf060b8c9e4d451be9c1c7845fe5b502674", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8532e9927ad6e4bbedbb957b02ca413aedf9098", "patch": "@@ -1,3 +1,8 @@\n+2020-02-17  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/93047\n+\t* config/rs6000/rs6000.md (untyped_call): Add emit_clobber.\n+\n 2020-02-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/93743"}, {"sha": "ad88b6783af9612ab61190ad73449ea5f206bb3d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a8532e9927ad6e4bbedbb957b02ca413aedf9098", "patch": "@@ -10870,6 +10870,10 @@\n \n   emit_call_insn (gen_call (operands[0], const0_rtx, const0_rtx));\n \n+  for (int i = 0; i < XVECLEN (operands[2], 0); i++)\n+    emit_clobber (SET_SRC (XVECEXP (operands[2], 0, i)));\n+  emit_insn (gen_blockage ());\n+\n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {\n       rtx set = XVECEXP (operands[2], 0, i);"}, {"sha": "83c581c4e0c7592757adeaec1a62a4f70bac58b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8532e9927ad6e4bbedbb957b02ca413aedf9098", "patch": "@@ -1,3 +1,8 @@\n+2020-02-17  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/93047\n+\t* gcc.dg/torture/stackalign/builtin-return-2.c: New test case.\n+\n 2020-02-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/93743"}, {"sha": "771910971d60fb85f57b6c1cff8701c3c53d3125", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-return-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8532e9927ad6e4bbedbb957b02ca413aedf9098/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-2.c?ref=a8532e9927ad6e4bbedbb957b02ca413aedf9098", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/93047 */\n+/* Originator: Andrew Church <gcczilla@achurch.org> */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O3 -frename-registers\" } */\n+/* { dg-require-effective-target untyped_assembly } */\n+\n+#ifdef __MMIX__\n+/* No parameters on stack for bar.  */\n+#define STACK_ARGUMENTS_SIZE 0\n+#else\n+#define STACK_ARGUMENTS_SIZE 64\n+#endif\n+\n+extern void abort(void);\n+\n+int foo(int n)\n+{\n+  return n+1;\n+}\n+\n+int bar(int n)\n+{\n+  __builtin_return(__builtin_apply((void (*)(void))foo, __builtin_apply_args(),\n+\t\t\t\t   STACK_ARGUMENTS_SIZE));\n+}\n+\n+int main(void)\n+{\n+  /* Allocate 64 bytes on the stack to make sure that __builtin_apply\n+     can read at least 64 bytes above the return address.  */\n+  char dummy[64];\n+\n+  __asm__ (\"\" : : \"\" (dummy));\n+\n+  if (bar(1) != 2)\n+    abort();\n+\n+  return 0;\n+}\n+"}]}