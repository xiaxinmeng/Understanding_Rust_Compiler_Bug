{"sha": "bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzZmI3ZTQzYzhkMWYyMmVkZGEwYzQyN2EyYWMxOTRlOGRiMTA0Yg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-26T11:58:48Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-26T11:58:48Z"}, "message": "intrinsic.c (add_functions): Add INT2, SHORT, INT8, LONG, LSTAT, MCLOCK and MCLOCK8 intrinsic functions.\n\n\t* intrinsic.c (add_functions): Add INT2, SHORT, INT8, LONG,\n\tLSTAT, MCLOCK and MCLOCK8 intrinsic functions.\n\t(add_subroutines): Add LSTAT intrinsic subroutine.\n\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_INT2,\n\tGFC_ISYM_INT8, GFC_ISYM_LONG, GFC_ISYM_LSTAT, GFC_ISYM_MCLOCK\n\tand GFC_ISYM_MCLOCK8.\n\t* iresolve.c (gfc_resolve_int2, gfc_resolve_int8,\n\tgfc_resolve_long, gfc_resolve_lstat, gfc_resolve_mclock,\n\tgfc_resolve_mclock8, gfc_resolve_lstat_sub): New functions.\n\t* check.c (gfc_check_intconv): New function.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add cases for\n\tthe added GFC_ISYM_*.\n\t* simplify.c (gfc_simplify_intconv, gfc_simplify_int2,\n\tgfc_simplify_int8, gfc_simplify_long): New functions.\n\t* intrinsic.h (gfc_check_intconv, gfc_simplify_int2,\n\tgfc_simplify_int8, gfc_simplify_long, gfc_resolve_int2,\n\tgfc_resolve_int8, gfc_resolve_long, gfc_resolve_lstat,\n\tgfc_resolve_mclock, gfc_resolve_mclock8, gfc_resolve_lstat_sub):\n\tAdd prototypes.\n\n\t* gfortran.dg/mclock.f90: New test.\n\t* gfortran.dg/int_conv_1.f90: New test.\n\t* gfortran.dg/stat_1.f90: New test.\n\t* gfortran.dg/stat_2.f90: New test.\n\n\t* configure.ac: Check for function clock.\n\t* Makefile.am: Compile new file intrinsics/clock.c.\n\t* intrinsics/clock.c: New file.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* intrinsics/stat.c: Rename the old stat_i?_sub functions to\n\thelper functions stat_i?_sub_0, and use them for both STAT and\n\tLSTAT.\n\nFrom-SVN: r115754", "tree": {"sha": "c7642810eb626a8e434832e2f5f5bee64e4bbc84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7642810eb626a8e434832e2f5f5bee64e4bbc84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb2088c6a08cf849bda7138603045b2f6d8869b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb2088c6a08cf849bda7138603045b2f6d8869b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb2088c6a08cf849bda7138603045b2f6d8869b"}], "stats": {"total": 560, "additions": 540, "deletions": 20}, "files": [{"sha": "e863f2d654b262be0fb63bc49c4a6495c3016893", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1,3 +1,25 @@\n+2006-07-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.c (add_functions): Add INT2, SHORT, INT8, LONG,\n+\tLSTAT, MCLOCK and MCLOCK8 intrinsic functions.\n+\t(add_subroutines): Add LSTAT intrinsic subroutine.\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_INT2,\n+\tGFC_ISYM_INT8, GFC_ISYM_LONG, GFC_ISYM_LSTAT, GFC_ISYM_MCLOCK\n+\tand GFC_ISYM_MCLOCK8.\n+\t* iresolve.c (gfc_resolve_int2, gfc_resolve_int8,\n+\tgfc_resolve_long, gfc_resolve_lstat, gfc_resolve_mclock,\n+\tgfc_resolve_mclock8, gfc_resolve_lstat_sub): New functions.\n+\t* check.c (gfc_check_intconv): New function.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add cases for\n+\tthe added GFC_ISYM_*.\n+\t* simplify.c (gfc_simplify_intconv, gfc_simplify_int2,\n+\tgfc_simplify_int8, gfc_simplify_long): New functions.\n+\t* intrinsic.h (gfc_check_intconv, gfc_simplify_int2,\n+\tgfc_simplify_int8, gfc_simplify_long, gfc_resolve_int2,\n+\tgfc_resolve_int8, gfc_resolve_long, gfc_resolve_lstat,\n+\tgfc_resolve_mclock, gfc_resolve_mclock8, gfc_resolve_lstat_sub):\n+\tAdd prototypes.\n+\n 2006-07-24  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \tPR fortran/28416\n@@ -17,7 +39,7 @@\n \n 2006-07-22  Steven Bosscher  <steven@gcc.gnu.org> \n \n-    PR fortran/28439\n+\tPR fortran/28439\n \t* trans-stmt.c (gfc_trans_arithmetic_if): Evaluate the condition once.\n \n 2006-07-16  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "4384fdb01cd2ffb09a376215f1f770eef618b7b3", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1199,6 +1199,16 @@ gfc_check_int (gfc_expr * x, gfc_expr * kind)\n }\n \n \n+try\n+gfc_check_intconv (gfc_expr * x)\n+{\n+  if (numeric_check (x, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_ior (gfc_expr * i, gfc_expr * j)\n {"}, {"sha": "ba73d1d05d03f81ef58930ffb59f2dd5b3a2f91c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -377,6 +377,8 @@ enum gfc_generic_isym_id\n   GFC_ISYM_IERRNO,\n   GFC_ISYM_INDEX,\n   GFC_ISYM_INT,\n+  GFC_ISYM_INT2,\n+  GFC_ISYM_INT8,\n   GFC_ISYM_IOR,\n   GFC_ISYM_IRAND,\n   GFC_ISYM_ISATTY,\n@@ -391,15 +393,19 @@ enum gfc_generic_isym_id\n   GFC_ISYM_LGT,\n   GFC_ISYM_LLE,\n   GFC_ISYM_LLT,\n-  GFC_ISYM_LOG,\n   GFC_ISYM_LOC,\n+  GFC_ISYM_LOG,\n   GFC_ISYM_LOG10,\n   GFC_ISYM_LOGICAL,\n+  GFC_ISYM_LONG,\n+  GFC_ISYM_LSTAT,\n   GFC_ISYM_MALLOC,\n   GFC_ISYM_MATMUL,\n   GFC_ISYM_MAX,\n   GFC_ISYM_MAXLOC,\n   GFC_ISYM_MAXVAL,\n+  GFC_ISYM_MCLOCK,\n+  GFC_ISYM_MCLOCK8,\n   GFC_ISYM_MERGE,\n   GFC_ISYM_MIN,\n   GFC_ISYM_MINLOC,"}, {"sha": "1b8e7cdcd282e6072d4bbbebd46609d4c8100480", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1535,6 +1535,26 @@ add_functions (void)\n \n   make_generic (\"int\", GFC_ISYM_INT, GFC_STD_F77);\n \n+  add_sym_1 (\"int2\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_intconv, gfc_simplify_int2, gfc_resolve_int2,\n+\t     a, BT_REAL, dr, REQUIRED);\n+\n+  make_alias (\"short\", GFC_STD_GNU);\n+\n+  make_generic (\"int2\", GFC_ISYM_INT2, GFC_STD_GNU);\n+\n+  add_sym_1 (\"int8\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_intconv, gfc_simplify_int8, gfc_resolve_int8,\n+\t     a, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"int8\", GFC_ISYM_INT8, GFC_STD_GNU);\n+\n+  add_sym_1 (\"long\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_intconv, gfc_simplify_long, gfc_resolve_long,\n+\t     a, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"long\", GFC_ISYM_LONG, GFC_STD_GNU);\n+\n   add_sym_2 (\"ior\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n@@ -1679,6 +1699,12 @@ add_functions (void)\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n+  add_sym_2 (\"lstat\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_stat, NULL, gfc_resolve_lstat,\n+\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n+\n   add_sym_1 (\"malloc\", 0, 1, BT_INTEGER, ii, GFC_STD_GNU, gfc_check_malloc,\n \t     NULL, gfc_resolve_malloc, a, BT_INTEGER, di, REQUIRED);\n \n@@ -1739,6 +1765,16 @@ add_functions (void)\n \n   make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n+  add_sym_0 (\"mclock\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     NULL, NULL, gfc_resolve_mclock);\n+\n+  make_generic (\"mclock\", GFC_ISYM_MCLOCK, GFC_STD_GNU);\n+\n+  add_sym_0 (\"mclock8\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     NULL, NULL, gfc_resolve_mclock8);\n+\n+  make_generic (\"mclock8\", GFC_ISYM_MCLOCK8, GFC_STD_GNU);\n+\n   add_sym_3 (\"merge\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_merge, NULL, gfc_resolve_merge,\n \t     ts, BT_REAL, dr, REQUIRED, fs, BT_REAL, dr, REQUIRED,\n@@ -2410,6 +2446,11 @@ add_subroutines (void)\n \t      ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n+  add_sym_3s (\"lstat\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_stat_sub, NULL, gfc_resolve_lstat_sub,\n+\t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n+\t      st, BT_INTEGER, di, OPTIONAL);\n+\n   add_sym_3s (\"stat\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_stat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,"}, {"sha": "e2a81c82a9ad65be65abaa4a86144b87ae91b2dd", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -74,6 +74,7 @@ try gfc_check_idnint (gfc_expr *);\n try gfc_check_ieor (gfc_expr *, gfc_expr *);\n try gfc_check_index (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_int (gfc_expr *, gfc_expr *);\n+try gfc_check_intconv (gfc_expr *);\n try gfc_check_ior (gfc_expr *, gfc_expr *);\n try gfc_check_irand (gfc_expr *);\n try gfc_check_isatty (gfc_expr *);\n@@ -222,6 +223,9 @@ gfc_expr *gfc_simplify_ichar (gfc_expr *);\n gfc_expr *gfc_simplify_ieor (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_index (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_int (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_int2 (gfc_expr *);\n+gfc_expr *gfc_simplify_int8 (gfc_expr *);\n+gfc_expr *gfc_simplify_long (gfc_expr *);\n gfc_expr *gfc_simplify_ifix (gfc_expr *);\n gfc_expr *gfc_simplify_idint (gfc_expr *);\n gfc_expr *gfc_simplify_ior (gfc_expr *, gfc_expr *);\n@@ -352,6 +356,9 @@ void gfc_resolve_ieor (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ichar (gfc_expr *, gfc_expr *);\n void gfc_resolve_idnint (gfc_expr *, gfc_expr *);\n void gfc_resolve_int (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_int2 (gfc_expr *, gfc_expr *);\n+void gfc_resolve_int8 (gfc_expr *, gfc_expr *);\n+void gfc_resolve_long (gfc_expr *, gfc_expr *);\n void gfc_resolve_ior (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_isatty (gfc_expr *, gfc_expr *);\n void gfc_resolve_ishft (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -365,11 +372,14 @@ void gfc_resolve_loc (gfc_expr *, gfc_expr *);\n void gfc_resolve_log (gfc_expr *, gfc_expr *);\n void gfc_resolve_log10 (gfc_expr *, gfc_expr *);\n void gfc_resolve_logical (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_lstat (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_malloc (gfc_expr *, gfc_expr *);\n void gfc_resolve_matmul (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_max (gfc_expr *, gfc_actual_arglist *);\n void gfc_resolve_maxloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_maxval (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_mclock (gfc_expr *);\n+void gfc_resolve_mclock8 (gfc_expr *);\n void gfc_resolve_merge (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_min (gfc_expr *, gfc_actual_arglist *);\n void gfc_resolve_minloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -448,6 +458,7 @@ void gfc_resolve_get_environment_variable (gfc_code *);\n void gfc_resolve_hostnm_sub (gfc_code *);\n void gfc_resolve_idate (gfc_code *);\n void gfc_resolve_itime (gfc_code *);\n+void gfc_resolve_lstat_sub (gfc_code *);\n void gfc_resolve_kill_sub (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n void gfc_resolve_perror (gfc_code *);"}, {"sha": "a65992eca2eeb4fd5cb5a3af3721cabbee4f01a9", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -853,6 +853,42 @@ gfc_resolve_int (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n }\n \n \n+void\n+gfc_resolve_int2 (gfc_expr * f, gfc_expr * a)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 2;\n+\n+  f->value.function.name =\n+    gfc_get_string (\"__int_%d_%c%d\", f->ts.kind, gfc_type_letter (a->ts.type),\n+\t\t    a->ts.kind);\n+}\n+\n+\n+void\n+gfc_resolve_int8 (gfc_expr * f, gfc_expr * a)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 8;\n+\n+  f->value.function.name =\n+    gfc_get_string (\"__int_%d_%c%d\", f->ts.kind, gfc_type_letter (a->ts.type),\n+\t\t    a->ts.kind);\n+}\n+\n+\n+void\n+gfc_resolve_long (gfc_expr * f, gfc_expr * a)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 4;\n+\n+  f->value.function.name =\n+    gfc_get_string (\"__int_%d_%c%d\", f->ts.kind, gfc_type_letter (a->ts.type),\n+\t\t    a->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_isatty (gfc_expr * f, gfc_expr * u)\n {\n@@ -1190,6 +1226,24 @@ gfc_resolve_maxval (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n }\n \n \n+void\n+gfc_resolve_mclock (gfc_expr * f)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 4;\n+  f->value.function.name = PREFIX(\"mclock\");\n+}\n+\n+\n+void\n+gfc_resolve_mclock8 (gfc_expr * f)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 8;\n+  f->value.function.name = PREFIX(\"mclock8\");\n+}\n+\n+\n void\n gfc_resolve_merge (gfc_expr * f, gfc_expr * tsource,\n \t\t   gfc_expr * fsource ATTRIBUTE_UNUSED,\n@@ -1803,6 +1857,16 @@ gfc_resolve_stat (gfc_expr * f, gfc_expr * n ATTRIBUTE_UNUSED,\n }\n \n \n+void\n+gfc_resolve_lstat (gfc_expr * f, gfc_expr * n ATTRIBUTE_UNUSED,\n+\t\t   gfc_expr * a ATTRIBUTE_UNUSED)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_default_integer_kind;\n+  f->value.function.name = gfc_get_string (PREFIX(\"lstat_i%d\"), f->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_fstat (gfc_expr * f, gfc_expr * n, gfc_expr * a ATTRIBUTE_UNUSED)\n {\n@@ -2655,6 +2719,16 @@ gfc_resolve_stat_sub (gfc_code * c)\n }\n \n \n+void\n+gfc_resolve_lstat_sub (gfc_code * c)\n+{\n+  const char *name;\n+\n+  name = gfc_get_string (PREFIX(\"lstat_i%d_sub\"), gfc_default_integer_kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n void\n gfc_resolve_fstat_sub (gfc_code * c)\n {"}, {"sha": "8a7d79b4df6e4cadc05d64064517f95db033d537", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1610,6 +1610,66 @@ gfc_simplify_int (gfc_expr * e, gfc_expr * k)\n }\n \n \n+static gfc_expr *\n+gfc_simplify_intconv (gfc_expr * e, int kind, const char *name)\n+{\n+  gfc_expr *rpart, *rtrunc, *result;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (BT_INTEGER, kind, &e->where);\n+\n+  switch (e->ts.type)\n+    {\n+    case BT_INTEGER:\n+      mpz_set (result->value.integer, e->value.integer);\n+      break;\n+\n+    case BT_REAL:\n+      rtrunc = gfc_copy_expr (e);\n+      mpfr_trunc (rtrunc->value.real, e->value.real);\n+      gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real);\n+      gfc_free_expr (rtrunc);\n+      break;\n+\n+    case BT_COMPLEX:\n+      rpart = gfc_complex2real (e, kind);\n+      rtrunc = gfc_copy_expr (rpart);\n+      mpfr_trunc (rtrunc->value.real, rpart->value.real);\n+      gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real);\n+      gfc_free_expr (rpart);\n+      gfc_free_expr (rtrunc);\n+      break;\n+\n+    default:\n+      gfc_error (\"Argument of %s at %L is not a valid type\", name, &e->where);\n+      gfc_free_expr (result);\n+      return &gfc_bad_expr;\n+    }\n+\n+  return range_check (result, name);\n+}\n+\n+gfc_expr *\n+gfc_simplify_int2 (gfc_expr * e)\n+{\n+  return gfc_simplify_intconv (e, 2, \"INT2\");\n+}\n+\n+gfc_expr *\n+gfc_simplify_int8 (gfc_expr * e)\n+{\n+  return gfc_simplify_intconv (e, 8, \"INT8\");\n+}\n+\n+gfc_expr *\n+gfc_simplify_long (gfc_expr * e)\n+{\n+  return gfc_simplify_intconv (e, 4, \"LONG\");\n+}\n+\n+\n gfc_expr *\n gfc_simplify_ifix (gfc_expr * e)\n {"}, {"sha": "472d982d902aa171d3f4433ce9f57d152766dd40", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -3477,6 +3477,9 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       /* Integer conversions are handled separately to make sure we get the\n          correct rounding mode.  */\n     case GFC_ISYM_INT:\n+    case GFC_ISYM_INT2:\n+    case GFC_ISYM_INT8:\n+    case GFC_ISYM_LONG:\n       gfc_conv_intrinsic_int (se, expr, FIX_TRUNC_EXPR);\n       break;\n \n@@ -3732,8 +3735,11 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_IRAND:\n     case GFC_ISYM_ISATTY:\n     case GFC_ISYM_LINK:\n+    case GFC_ISYM_LSTAT:\n     case GFC_ISYM_MALLOC:\n     case GFC_ISYM_MATMUL:\n+    case GFC_ISYM_MCLOCK:\n+    case GFC_ISYM_MCLOCK8:\n     case GFC_ISYM_RAND:\n     case GFC_ISYM_RENAME:\n     case GFC_ISYM_SECOND:"}, {"sha": "5f5bdccda792678ba45b6ac1a03afc5562c484b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1,3 +1,10 @@\n+2006-07-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.dg/mclock.f90: New test.\n+\t* gfortran.dg/int_conv_1.f90: New test.\n+\t* gfortran.dg/stat_1.f90: New test.\n+\t* gfortran.dg/stat_2.f90: New test.\n+\n 2006-07-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/28335"}, {"sha": "15f71f9336c22eccefe831e6f15d5826bbb015fd", "filename": "gcc/testsuite/gfortran.dg/int_conv_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_conv_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_conv_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_conv_1.f90?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  integer(kind=2) :: i2, j2, k2, l2, m2, n2, o2\n+  integer(kind=4) :: i4, j4\n+  integer(kind=8) :: i8, j8\n+  real :: x\n+  complex :: z\n+\n+  i2 = huge(i2) / 3\n+  i8 = int8(i2)\n+  i4 = long(i2)\n+  j2 = short(i2)\n+  k2 = int2(i2)\n+  l2 = int2(i8)\n+  m2 = short(i8)\n+  n2 = int2(i4)\n+  o2 = short(i4)\n+\n+  if (i8 /= i2 .or. i4 /= i2 .or. j2 /= i2 .or. k2 /= i2 &\n+      .or. l2 /= i2 .or. m2 /= i2 .or. n2 /= i2 .or. o2 /= i2) call abort\n+\n+  x = i2\n+  i8 = int8(x)\n+  i4 = long(x)\n+  j2 = short(x)\n+  k2 = int2(x)\n+  if (i8 /= i2 .or. i4 /= i2 .or. j2 /= i2 .or. k2 /= i2) call abort\n+\n+  z = i2 + (0.,-42.)\n+  i8 = int8(z)\n+  i4 = long(z)\n+  j2 = short(z)\n+  k2 = int2(z)\n+  if (i8 /= i2 .or. i4 /= i2 .or. j2 /= i2 .or. k2 /= i2) call abort\n+\n+  end"}, {"sha": "5af96d0fc9f477b04d005bf22fd6bcb60e26b40f", "filename": "gcc/testsuite/gfortran.dg/mclock.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmclock.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmclock.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmclock.f90?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  integer(kind=4) :: i4, j4\n+  integer(kind=8) :: i8, j8\n+\n+  i4 = mclock()\n+  i8 = mclock8()\n+  j4 = mclock()\n+  j8 = mclock8()\n+\n+  if (i4 > j4 .or. i8 > j8 .or. i4 > i8 .or. j4 > j8) call abort\n+\n+  end"}, {"sha": "c8e388154006026e059fa004f88f81ea0cdd3cee", "filename": "gcc/testsuite/gfortran.dg/stat_1.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_1.f90?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  character(len=*), parameter :: f = \"testfile\"\n+  integer :: s1(13), r1, s2(13), r2, s3(13), r3\n+  \n+  open (10,file=f)\n+  write (10,\"(A)\") \"foo\"\n+  close (10,status=\"keep\")\n+\n+  open (10,file=f)\n+  call lstat (f, s1, r1)\n+  call stat (f, s2, r2)\n+  call fstat (10, s3, r3)\n+\n+  if (r1 /= 0 .or. r2 /= 0 .or. r3 /= 0) call abort\n+  if (any (s1 /= s2) .or. any (s1 /= s3)) call abort\n+  if (s1(5) /= getuid()) call abort\n+  if (s1(6) /= getgid()) call abort\n+  if (s1(8) < 3 .or. s1(8) > 5) call abort\n+\n+  close (10,status=\"delete\")\n+  end"}, {"sha": "7ebd057239f2d5c411b26b7c310c96db715600bd", "filename": "gcc/testsuite/gfortran.dg/stat_2.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstat_2.f90?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  character(len=*), parameter :: f = \"testfile\"\n+  integer :: s1(13), r1, s2(13), r2, s3(13), r3\n+  \n+  open (10,file=f)\n+  write (10,\"(A)\") \"foo\"\n+  close (10,status=\"keep\")\n+\n+  open (10,file=f)\n+  r1 = lstat (f, s1)\n+  r2 = stat (f, s2)\n+  r3 = fstat (10, s3)\n+\n+  if (r1 /= 0 .or. r2 /= 0 .or. r3 /= 0) call abort\n+  if (any (s1 /= s2) .or. any (s1 /= s3)) call abort\n+  if (s1(5) /= getuid()) call abort\n+  if (s1(6) /= getgid()) call abort\n+  if (s1(8) < 3 .or. s1(8) > 5) call abort\n+\n+  close (10,status=\"delete\")\n+  end"}, {"sha": "bc86448feb1108efb69df2432d6e8b592f200c83", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -1,3 +1,15 @@\n+2006-07-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* configure.ac: Check for function clock.\n+\t* Makefile.am: Compile new file intrinsics/clock.c.\n+\t* intrinsics/clock.c: New file.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* intrinsics/stat.c: Rename the old stat_i?_sub functions to\n+\thelper functions stat_i?_sub_0, and use them for both STAT and\n+\tLSTAT.\n+\n 2006-07-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/28335"}, {"sha": "ff1211a7d85de66a7234ae8c2737e11c027108f5", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -45,6 +45,7 @@ intrinsics/args.c \\\n intrinsics/bessel.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n+intrinsics/clock.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/ctime.c \\"}, {"sha": "ba3c3b0e2a6081e8e3c3bed9b2800645d918aa48", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -162,11 +162,11 @@ am__objects_29 = close.lo file_pos.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo size_from_kind.lo \\\n \ttransfer.lo unit.lo unix.lo write.lo\n am__objects_30 = associated.lo abort.lo args.lo bessel.lo \\\n-\tc99_functions.lo chdir.lo cpu_time.lo cshift0.lo ctime.lo \\\n-\tdate_and_time.lo env.lo erf.lo eoshift0.lo eoshift2.lo \\\n-\tetime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo gerror.lo \\\n-\tgetcwd.lo getlog.lo getXid.lo hyper.lo hostnm.lo kill.lo \\\n-\tierrno.lo ishftc.lo link.lo malloc.lo mvbits.lo \\\n+\tc99_functions.lo chdir.lo clock.lo cpu_time.lo cshift0.lo \\\n+\tctime.lo date_and_time.lo env.lo erf.lo eoshift0.lo \\\n+\teoshift2.lo etime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo \\\n+\tgerror.lo getcwd.lo getlog.lo getXid.lo hyper.lo hostnm.lo \\\n+\tkill.lo ierrno.lo ishftc.lo link.lo malloc.lo mvbits.lo \\\n \tpack_generic.lo perror.lo signal.lo size.lo sleep.lo \\\n \tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n \trandom.lo rename.lo reshape_generic.lo reshape_packed.lo \\\n@@ -389,6 +389,7 @@ intrinsics/args.c \\\n intrinsics/bessel.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n+intrinsics/clock.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/ctime.c \\\n@@ -2215,6 +2216,9 @@ c99_functions.lo: intrinsics/c99_functions.c\n chdir.lo: intrinsics/chdir.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chdir.lo `test -f 'intrinsics/chdir.c' || echo '$(srcdir)/'`intrinsics/chdir.c\n \n+clock.lo: intrinsics/clock.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clock.lo `test -f 'intrinsics/clock.c' || echo '$(srcdir)/'`intrinsics/clock.c\n+\n cpu_time.lo: intrinsics/cpu_time.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cpu_time.lo `test -f 'intrinsics/cpu_time.c' || echo '$(srcdir)/'`intrinsics/cpu_time.c\n "}, {"sha": "573c0938f079a470aa19435e7a0cf761d1089c50", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -150,6 +150,9 @@\n /* Define to 1 if you have the `chsize' function. */\n #undef HAVE_CHSIZE\n \n+/* Define to 1 if you have the `clock' function. */\n+#undef HAVE_CLOCK\n+\n /* libm includes clog */\n #undef HAVE_CLOG\n "}, {"sha": "6cb118b88e270de985e32f01f64b64ff45ab9aec", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -9975,7 +9975,8 @@ done\n \n \n \n-for ac_func in sleep time ttyname signal alarm ctime\n+\n+for ac_func in sleep time ttyname signal alarm ctime clock\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "51756597d03f812124aa9277be78386698249007", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -171,7 +171,7 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n # Check for library functions.\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n-AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime)\n+AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock)\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])"}, {"sha": "73e50634e360ae90bd699613d66de1f1e5bea875", "filename": "libgfortran/intrinsics/clock.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fintrinsics%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fintrinsics%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fclock.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -0,0 +1,78 @@\n+/* Implementation of the MCLOCK and MCLOCK8 g77 intrinsics.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef TIME_WITH_SYS_TIME\n+#  include <sys/time.h>\n+#  include <time.h>\n+#else\n+#  if HAVE_SYS_TIME_H\n+#    include <sys/time.h>\n+#  else\n+#    ifdef HAVE_TIME_H\n+#      include <time.h>\n+#    endif\n+#  endif\n+#endif\n+\n+\n+/* INTEGER(KIND=4) FUNCTION MCLOCK()  */\n+\n+extern GFC_INTEGER_4 mclock (void);\n+export_proto(mclock);\n+\n+GFC_INTEGER_4\n+mclock (void)\n+{\n+#ifdef HAVE_CLOCK\n+  return (GFC_INTEGER_4) clock ();\n+#else\n+  return (GFC_INTEGER_4) -1;\n+#endif\n+}\n+\n+\n+/* INTEGER(KIND=8) FUNCTION MCLOCK8()  */\n+\n+extern GFC_INTEGER_8 mclock8 (void);\n+export_proto(mclock8);\n+\n+GFC_INTEGER_8\n+mclock8 (void)\n+{\n+#ifdef HAVE_CLOCK\n+  return (GFC_INTEGER_8) clock ();\n+#else\n+  return (GFC_INTEGER_8) -1;\n+#endif\n+}\n+"}, {"sha": "150387dad5b4be0e634ec6110ee5a39ac45e6ace", "filename": "libgfortran/intrinsics/stat.c", "status": "modified", "additions": 102, "deletions": 11, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fintrinsics%2Fstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3fb7e43c8d1f22edda0c427a2ac194e8db104b/libgfortran%2Fintrinsics%2Fstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstat.c?ref=bf3fb7e43c8d1f22edda0c427a2ac194e8db104b", "patch": "@@ -59,13 +59,13 @@ Boston, MA 02110-1301, USA.  */\n    CHARACTER(len=*), INTENT(IN) :: FILE\n    INTEGER, INTENT(OUT), :: SARRAY(13)  */\n \n-extern void stat_i4_sub (char *, gfc_array_i4 *, GFC_INTEGER_4 *,\n-\t\t\t gfc_charlen_type);\n-iexport_proto(stat_i4_sub);\n+/*extern void stat_i4_sub_0 (char *, gfc_array_i4 *, GFC_INTEGER_4 *,\n+\t\t\t   gfc_charlen_type, int);\n+internal_proto(stat_i4_sub_0);*/\n \n-void\n-stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n-\t     gfc_charlen_type name_len)\n+static void\n+stat_i4_sub_0 (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n+\t       gfc_charlen_type name_len, int is_lstat)\n {\n   int val;\n   char *str;\n@@ -88,7 +88,10 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n   memcpy (str, name, name_len);\n   str[name_len] = '\\0';\n \n-  val = stat(str, &sb);\n+  if (is_lstat)\n+    val = lstat(str, &sb);\n+  else\n+    val = stat(str, &sb);\n \n   if (val == 0)\n     {\n@@ -147,15 +150,38 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n   if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n+\n+\n+extern void stat_i4_sub (char *, gfc_array_i4 *, GFC_INTEGER_4 *,\n+\t\t\t gfc_charlen_type);\n+iexport_proto(stat_i4_sub);\n+\n+void\n+stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n+\t     gfc_charlen_type name_len)\n+{\n+  stat_i4_sub_0 (name, sarray, status, name_len, 0);\n+}\n iexport(stat_i4_sub);\n \n-extern void stat_i8_sub (char *, gfc_array_i8 *, GFC_INTEGER_8 *,\n+\n+extern void lstat_i4_sub (char *, gfc_array_i4 *, GFC_INTEGER_4 *,\n \t\t\t gfc_charlen_type);\n-iexport_proto(stat_i8_sub);\n+iexport_proto(lstat_i4_sub);\n \n void\n-stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n+lstat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n \t     gfc_charlen_type name_len)\n+{\n+  stat_i4_sub_0 (name, sarray, status, name_len, 1);\n+}\n+iexport(lstat_i4_sub);\n+\n+\n+\n+static void\n+stat_i8_sub_0 (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n+\t       gfc_charlen_type name_len, int is_lstat)\n {\n   int val;\n   char *str;\n@@ -178,7 +204,10 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n   memcpy (str, name, name_len);\n   str[name_len] = '\\0';\n \n-  val = stat(str, &sb);\n+  if (is_lstat)\n+    val = lstat(str, &sb);\n+  else\n+    val = stat(str, &sb);\n \n   if (val == 0)\n     {\n@@ -237,8 +266,36 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n   if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n+\n+\n+extern void stat_i8_sub (char *, gfc_array_i8 *, GFC_INTEGER_8 *,\n+\t\t\t gfc_charlen_type);\n+iexport_proto(stat_i8_sub);\n+\n+void\n+stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n+\t     gfc_charlen_type name_len)\n+{\n+  stat_i8_sub_0 (name, sarray, status, name_len, 0);\n+}\n+\n iexport(stat_i8_sub);\n \n+\n+extern void lstat_i8_sub (char *, gfc_array_i8 *, GFC_INTEGER_8 *,\n+\t\t\t gfc_charlen_type);\n+iexport_proto(lstat_i8_sub);\n+\n+void\n+lstat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n+\t     gfc_charlen_type name_len)\n+{\n+  stat_i8_sub_0 (name, sarray, status, name_len, 1);\n+}\n+\n+iexport(lstat_i8_sub);\n+\n+\n extern GFC_INTEGER_4 stat_i4 (char *, gfc_array_i4 *, gfc_charlen_type);\n export_proto(stat_i4);\n \n@@ -262,6 +319,40 @@ stat_i8 (char *name, gfc_array_i8 *sarray, gfc_charlen_type name_len)\n }\n \n \n+/* SUBROUTINE STAT(FILE, SARRAY, STATUS)\n+   CHARACTER(len=*), INTENT(IN) :: FILE\n+   INTEGER, INTENT(OUT), :: SARRAY(13)\n+   INTEGER, INTENT(OUT), OPTIONAL :: STATUS\n+\n+   FUNCTION STAT(FILE, SARRAY)\n+   INTEGER STAT\n+   CHARACTER(len=*), INTENT(IN) :: FILE\n+   INTEGER, INTENT(OUT), :: SARRAY(13)  */\n+\n+extern GFC_INTEGER_4 lstat_i4 (char *, gfc_array_i4 *, gfc_charlen_type);\n+export_proto(lstat_i4);\n+\n+GFC_INTEGER_4\n+lstat_i4 (char *name, gfc_array_i4 *sarray, gfc_charlen_type name_len)\n+{\n+  GFC_INTEGER_4 val;\n+  lstat_i4_sub (name, sarray, &val, name_len);\n+  return val;\n+}\n+\n+extern GFC_INTEGER_8 lstat_i8 (char *, gfc_array_i8 *, gfc_charlen_type);\n+export_proto(lstat_i8);\n+\n+GFC_INTEGER_8\n+lstat_i8 (char *name, gfc_array_i8 *sarray, gfc_charlen_type name_len)\n+{\n+  GFC_INTEGER_8 val;\n+  lstat_i8_sub (name, sarray, &val, name_len);\n+  return val;\n+}\n+\n+\n+\n /* SUBROUTINE FSTAT(UNIT, SARRAY, STATUS)\n    INTEGER, INTENT(IN) :: UNIT\n    INTEGER, INTENT(OUT) :: SARRAY(13)"}]}