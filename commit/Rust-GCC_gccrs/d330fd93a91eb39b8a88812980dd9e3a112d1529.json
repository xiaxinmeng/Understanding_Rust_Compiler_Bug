{"sha": "d330fd93a91eb39b8a88812980dd9e3a112d1529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzMGZkOTNhOTFlYjM5YjhhODg4MTI5ODBkZDllM2ExMTJkMTUyOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@snafu.rutgers.edu", "date": "1999-04-09T07:45:00Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-04-09T07:45:00Z"}, "message": "rs6000.c (rs6000_override_options, [...]): Const-ify a char*.\n\n        * rs6000.c (rs6000_override_options, ptt, rs6000_file_start,\n        rs6000_float_const, rs6000_replace_regno, debug_stack_info,\n        rs6000_output_load_toc_table, output_prolog, output_epilog):\n        Const-ify a char*.\n        (output_mi_thunk): Likewise.  Mark parameter `thunk_fndecl' with\n        ATTRIBUTE_UNUSED.  Hide unused variables `r0', `sp', `toc',\n        `schain', `r12', `buf' and `labelno'.\n        (output_ascii): Const-ify a char*.\n        (rs6000_gen_section_name): Initialize variable `last_period'.\n        (rs6000_adjust_priority): Mark parameter `insn' with\n        ATTRIBUTE_UNUSED.\n        (rs6000_trampoline_template, rs6000_dll_import_ref,\n        rs6000_longcall_ref, rs6000_encode_section_info): Const-ify a char*.\n        * rs6000.h (offsettable_mem_operand, optimization_options): Add\n        prototypes.\n        * rs6000.md (movdi, define_split): Cast a value to HOST_WIDE_INT\n        when comparing against one.\n\nFrom-SVN: r26308", "tree": {"sha": "81e57880eda6244443b1eddd6dc9427159803cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e57880eda6244443b1eddd6dc9427159803cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d330fd93a91eb39b8a88812980dd9e3a112d1529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d330fd93a91eb39b8a88812980dd9e3a112d1529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d330fd93a91eb39b8a88812980dd9e3a112d1529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d330fd93a91eb39b8a88812980dd9e3a112d1529/comments", "author": null, "committer": null, "parents": [{"sha": "efd07ca794e44bc05035e4320ce23f772639990e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd07ca794e44bc05035e4320ce23f772639990e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd07ca794e44bc05035e4320ce23f772639990e"}], "stats": {"total": 96, "additions": 61, "deletions": 35}, "files": [{"sha": "6060ff964b131813a8048e1d5a0b61e3c7495474", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d330fd93a91eb39b8a88812980dd9e3a112d1529", "patch": "@@ -1,3 +1,25 @@\n+Fri Apr  9 10:40:10 1999  Kaveh R. Ghazi  <ghazi@snafu.rutgers.edu>\n+\n+\t* rs6000.c (rs6000_override_options, ptt, rs6000_file_start,\n+\trs6000_float_const, rs6000_replace_regno, debug_stack_info,\n+\trs6000_output_load_toc_table, output_prolog, output_epilog):\n+\tConst-ify a char*.\n+\t(output_mi_thunk): Likewise.  Mark parameter `thunk_fndecl' with\n+\tATTRIBUTE_UNUSED.  Hide unused variables `r0', `sp', `toc',\n+\t`schain', `r12', `buf' and `labelno'.\n+\t(output_ascii): Const-ify a char*.\n+\t(rs6000_gen_section_name): Initialize variable `last_period'.\n+\t(rs6000_adjust_priority): Mark parameter `insn' with\n+\tATTRIBUTE_UNUSED.\n+\t(rs6000_trampoline_template, rs6000_dll_import_ref,\n+\trs6000_longcall_ref, rs6000_encode_section_info): Const-ify a char*.\n+\n+\t* rs6000.h (offsettable_mem_operand, optimization_options): Add\n+\tprototypes.\n+\n+\t* rs6000.md (movdi, define_split): Cast a value to HOST_WIDE_INT\n+\twhen comparing against one.\n+\n Thu Apr  8 19:20:18 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* expr.c (expand_expr, case ARRAY_REF, COMPONENT_REF, BIT_FIELD_REF):"}, {"sha": "8af45ed28ddb289b67a6671355de80c04fa1cd1a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d330fd93a91eb39b8a88812980dd9e3a112d1529", "patch": "@@ -155,7 +155,7 @@ static char alt_reg_names[][8] =\n \n void\n rs6000_override_options (default_cpu)\n-     char *default_cpu;\n+     const char *default_cpu;\n {\n   size_t i, j;\n   struct rs6000_cpu_select *ptr;\n@@ -170,7 +170,7 @@ rs6000_override_options (default_cpu)\n \n   static struct ptt\n     {\n-      char *name;\t\t/* Canonical processor name.  */\n+      const char *name;\t\t/* Canonical processor name.  */\n       enum processor_type processor; /* Processor type enum value.  */\n       int target_enable;\t/* Target flags to enable.  */\n       int target_disable;\t/* Target flags to disable.  */\n@@ -374,11 +374,11 @@ optimization_options (level, size)\n void\n rs6000_file_start (file, default_cpu)\n      FILE *file;\n-     char *default_cpu;\n+     const char *default_cpu;\n {\n   size_t i;\n   char buffer[80];\n-  char *start = buffer;\n+  const char *start = buffer;\n   struct rs6000_cpu_select *ptr;\n \n   if (flag_verbose_asm)\n@@ -422,7 +422,7 @@ rs6000_file_start (file, default_cpu)\n \n struct rtx_def *\n rs6000_float_const (string, mode)\n-     char *string;\n+     const char *string;\n      enum machine_mode mode;\n {\n   REAL_VALUE_TYPE value = REAL_VALUE_ATOF (string, mode);\n@@ -2361,7 +2361,7 @@ rs6000_replace_regno (x, from, reg)\n      rtx *reg;\n {\n   register int i, j;\n-  register char *fmt;\n+  register const char *fmt;\n \n   /* Allow this function to make replacements in EXPR_LISTs.  */\n   if (!x)\n@@ -3663,7 +3663,7 @@ void\n debug_stack_info (info)\n      rs6000_stack_t *info;\n {\n-  char *abi_string;\n+  const char *abi_string;\n \n   if (!info)\n     info = rs6000_stack_info ();\n@@ -3818,7 +3818,7 @@ rs6000_output_load_toc_table (file, reg)\n \t address before loading.  */\n       if (rs6000_pic_func_labelno != rs6000_pic_labelno)\n \t{\n-\t  char *init_ptr = TARGET_32BIT ? \".long\" : \".quad\";\n+\t  const char *init_ptr = TARGET_32BIT ? \".long\" : \".quad\";\n \t  char *buf_ptr;\n \n \t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LCL\", rs6000_pic_labelno);\n@@ -3932,8 +3932,8 @@ output_prolog (file, size)\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n   int reg_size = info->reg_size;\n-  char *store_reg;\n-  char *load_reg;\n+  const char *store_reg;\n+  const char *load_reg;\n   int sp_reg = 1;\n   int sp_offset = 0;\n \n@@ -4112,7 +4112,7 @@ output_prolog (file, size)\n      before dealing with the TOC.  */\n   if (info->main_p)\n     {\n-      char *prefix = \"\";\n+      const char *prefix = \"\";\n \n       switch (DEFAULT_ABI)\n \t{\n@@ -4187,7 +4187,7 @@ output_epilog (file, size)\n      int size ATTRIBUTE_UNUSED;\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n-  char *load_reg = (TARGET_32BIT) ? \"\\t{l|lwz} %s,%d(%s)\\n\" : \"\\tld %s,%d(%s)\\n\";\n+  const char *load_reg = (TARGET_32BIT) ? \"\\t{l|lwz} %s,%d(%s)\\n\" : \"\\tld %s,%d(%s)\\n\";\n   rtx insn = get_last_insn ();\n   int sp_reg = 1;\n   int sp_offset = 0;\n@@ -4527,20 +4527,22 @@ output_epilog (file, size)\n void\n output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n-     tree thunk_fndecl;\n+     tree thunk_fndecl ATTRIBUTE_UNUSED;\n      int delta;\n      tree function;\n {\n-  char *this_reg = reg_names[ aggregate_value_p (TREE_TYPE (TREE_TYPE (function))) ? 4 : 3 ];\n-  char *r0\t = reg_names[0];\n-  char *sp\t = reg_names[1];\n-  char *toc\t = reg_names[2];\n-  char *schain\t = reg_names[11];\n-  char *r12\t = reg_names[12];\n-  char *prefix;\n+  const char *this_reg = reg_names[ aggregate_value_p (TREE_TYPE (TREE_TYPE (function))) ? 4 : 3 ];\n+  const char *prefix;\n   char *fname;\n+#if 0\n+  const char *r0\t = reg_names[0];\n+  const char *sp\t = reg_names[1];\n+  const char *toc\t = reg_names[2];\n+  const char *schain\t = reg_names[11];\n+  const char *r12\t = reg_names[12];\n   char buf[512];\n   static int labelno = 0;\n+#endif\n \n   /* Small constants that can be done by one add instruction */\n   if (delta >= -32768 && delta <= 32767)\n@@ -4915,14 +4917,14 @@ output_toc (file, x, labelno)\n void\n output_ascii (file, p, n)\n      FILE *file;\n-     char *p;\n+     const char *p;\n      int n;\n {\n   char c;\n   int i, count_string;\n-  char *for_string = \"\\t.byte \\\"\";\n-  char *for_decimal = \"\\t.byte \";\n-  char *to_close = NULL;\n+  const char *for_string = \"\\t.byte \\\"\";\n+  const char *for_decimal = \"\\t.byte \";\n+  const char *to_close = NULL;\n \n   count_string = 0;\n   for (i = 0; i < n; i++)\n@@ -4992,7 +4994,7 @@ rs6000_gen_section_name (buf, filename, section_desc)\n      char *filename;\n      char *section_desc;\n {\n-  char *q, *after_last_slash, *last_period;\n+  char *q, *after_last_slash, *last_period = 0;\n   char *p;\n   int len;\n \n@@ -5198,7 +5200,7 @@ rs6000_adjust_cost (insn, link, dep_insn, cost)\n \n int\n rs6000_adjust_priority (insn, priority)\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n      int priority;\n {\n   /* On machines (like the 750) which have asymetric integer units, where one\n@@ -5269,9 +5271,9 @@ void\n rs6000_trampoline_template (file)\n      FILE *file;\n {\n-  char *sc = reg_names[STATIC_CHAIN_REGNUM];\n-  char *r0 = reg_names[0];\n-  char *r2 = reg_names[2];\n+  const char *sc = reg_names[STATIC_CHAIN_REGNUM];\n+  const char *r0 = reg_names[0];\n+  const char *r2 = reg_names[2];\n \n   switch (DEFAULT_ABI)\n     {\n@@ -5535,7 +5537,7 @@ struct rtx_def *\n rs6000_dll_import_ref (call_ref)\n      rtx call_ref;\n {\n-  char *call_name;\n+  const char *call_name;\n   int len;\n   char *p;\n   rtx reg1, reg2;\n@@ -5564,7 +5566,7 @@ struct rtx_def *\n rs6000_longcall_ref (call_ref)\n      rtx call_ref;\n {\n-  char *call_name;\n+  const char *call_name;\n   tree node;\n \n   if (GET_CODE (call_ref) != SYMBOL_REF)\n@@ -5679,7 +5681,7 @@ rs6000_encode_section_info (decl)\n \n       if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT)\n \t{\n-\t  char *prefix = (DEFAULT_ABI == ABI_AIX) ? \".\" : \"..\";\n+\t  const char *prefix = (DEFAULT_ABI == ABI_AIX) ? \".\" : \"..\";\n \t  char *str = permalloc (strlen (prefix) + 1\n \t\t\t\t + strlen (XSTR (sym_ref, 0)));\n \t  strcpy (str, prefix);\n@@ -5693,7 +5695,7 @@ rs6000_encode_section_info (decl)\n     {\n       int size = int_size_in_bytes (TREE_TYPE (decl));\n       tree section_name = DECL_SECTION_NAME (decl);\n-      char *name = (char *)0;\n+      const char *name = (char *)0;\n       int len = 0;\n \n       if (section_name)"}, {"sha": "437b1f5601d303c72b0481409a17f4dfbd05cc13", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d330fd93a91eb39b8a88812980dd9e3a112d1529", "patch": "@@ -3218,6 +3218,8 @@ extern int flag_expensive_optimizations;\n extern int frame_pointer_needed;\n \n /* Declare functions in rs6000.c */\n+extern int offsettable_mem_operand ();\n+extern void optimization_options ();\n extern void output_options ();\n extern void rs6000_override_options ();\n extern void rs6000_file_start ();"}, {"sha": "83c0b52a5275016cc09bd5a56aac0d62fcf400fb", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d330fd93a91eb39b8a88812980dd9e3a112d1529/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d330fd93a91eb39b8a88812980dd9e3a112d1529", "patch": "@@ -6461,7 +6461,7 @@\n #if HOST_BITS_PER_WIDE_INT == 32\n       && ((CONST_DOUBLE_HIGH (operands[1]) == 0\n \t   && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) == 0)\n-\t  || (CONST_DOUBLE_HIGH (operands[1]) == 0xffffffff\n+\t  || (CONST_DOUBLE_HIGH (operands[1]) == (HOST_WIDE_INT) 0xffffffff\n \t      && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) != 0))\n #endif\n \t )\n@@ -6657,7 +6657,7 @@\n    && GET_CODE (operands[1]) == CONST_DOUBLE\n    && ((CONST_DOUBLE_HIGH (operands[1]) == 0\n         && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) == 0)\n-       || (CONST_DOUBLE_HIGH (operands[1]) == 0xffffffff\n+       || (CONST_DOUBLE_HIGH (operands[1]) == (HOST_WIDE_INT) 0xffffffff\n            && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) != 0))\"\n   [(set (match_dup 0)\n \t(match_dup 2))"}]}