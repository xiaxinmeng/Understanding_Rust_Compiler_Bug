{"sha": "5ded58d0e10310c317f6db232d14a6beadb577f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlZDU4ZDBlMTAzMTBjMzE3ZjZkYjIzMmQxNGE2YmVhZGI1NzdmMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-22T17:03:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-22T17:03:57Z"}, "message": "re PR other/2873 ([3.3 only][fixinclude] Bogus fixinclude of stdio.h from glibc 2.2.3)\n\n\tPR other/2873\n\t* fixinc/inclhack.def (avoid_wchar_t_type): Add bypass\n\texpressions to prevent triggering on recent curses.h,\n\tlinux/nls.h, or X11/Xlib.h.\n\t(stdio_va_list): Add _G_va_list to bypass pattern.\n\t(strict_ansi_not): Add bypass pattern for __SCO_VERSION__.\n\t* fixinc/fixincl.x: Regenerate.\n\nFrom-SVN: r67090", "tree": {"sha": "281c2b1a41f4ef6d8c613b6d7e1cd7fca787d56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/281c2b1a41f4ef6d8c613b6d7e1cd7fca787d56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ded58d0e10310c317f6db232d14a6beadb577f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ded58d0e10310c317f6db232d14a6beadb577f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ded58d0e10310c317f6db232d14a6beadb577f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ded58d0e10310c317f6db232d14a6beadb577f1/comments", "author": null, "committer": null, "parents": [{"sha": "36f9020c1418f941e5c00339730972335e5dcd7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f9020c1418f941e5c00339730972335e5dcd7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f9020c1418f941e5c00339730972335e5dcd7b"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "672b54bc5b5026e267bb7faab90ad0135d142a85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ded58d0e10310c317f6db232d14a6beadb577f1", "patch": "@@ -1,7 +1,17 @@\n+2003-05-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR other/2873\n+\t* fixinc/inclhack.def (avoid_wchar_t_type): Add bypass\n+\texpressions to prevent triggering on recent curses.h,\n+\tlinux/nls.h, or X11/Xlib.h.\n+\t(stdio_va_list): Add _G_va_list to bypass pattern.\n+\t(strict_ansi_not): Add bypass pattern for __SCO_VERSION__.\n+\t* fixinc/fixincl.x: Regenerate.\n+\n 2003-05-22 Rekha Bhintade <rekhad@kpitcummins.com>\n \n \t* gcc/config/sh/sh.h (TARGET_SWITCHES): Display all the target\n-\tswitches when --target-help option is specified. \n+\tswitches when --target-help option is specified.\n \n 2003-05-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n@@ -177,12 +187,12 @@\n 2003-05-19  Seth Arnold  <sarnold@wirex.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_stack_info): Do not add\n-        vrsave_size twice.\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): Do not add\n+\tvrsave_size twice.\n \n 2003-05-19  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/tm.texi (function_arg): Fix typo.\n+\t* doc/tm.texi (function_arg): Fix typo.\n \n 2003-05-19  Matt Austern  <austern@apple.com>\n \n@@ -192,9 +202,9 @@\n \t* doc/invoke.texi: Document -Winvalid-offsetof.\n \t* testsuite/g++.dg/other/offsetof3.C: New.\n \t* testsuite/g++.dg/other/offsetof4.C: New.\n-\t\n+\n 2003-05-19  Kevin B. Hendricks  <kevin.hendricks@sympatico.ca>\n-            David Edelsohn  <edelsohn@gnu.org>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_alignment_string,\n \trs6000_alignment_flags): New variables."}, {"sha": "84239e70a1e16bf47610cfe179b67159ece182ac", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=5ded58d0e10310c317f6db232d14a6beadb577f1", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday May  3, 2003 at 03:55:13 PM PDT\n+ * It has been AutoGen-ed  Thursday May 22, 2003 at 10:03:21 AM PDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sat May  3 15:55:13 PDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Thu May 22 10:03:21 PDT 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -276,14 +276,12 @@ fix = {\\n\\\n     files    = sys/varargs.h;\\n\\\n     replace  = \\\"/* This file was generated by fixincludes.  */\\\\n\\\"\\n\\\n                \\\"#ifndef _SYS_VARARGS_H\\\\n\\\"\\n\\\n-               \\\"#define _SYS_VARARGS_H\\\\n\\\\n\\\"\\n\\\n-                                                                                \\n\\\n+               \\\"#define _SYS_VARARGS_H\\\\n\\\\n\\\"\\n\\n\\\n                \\\"#ifdef __STDC__\\\\n\\\"\\n\\\n                \\\"#include <stdarg.h>\\\\n\\\"\\n\\\n                \\\"#else\\\\n\\\"\\n\\\n                \\\"#include <varargs.h>\\\\n\\\"\\n\\\n-               \\\"#endif\\\\n\\\\n\\\"\\n\\\n-                                                                                \\n\\\n+               \\\"#endif\\\\n\\\\n\\\"\\n\\n\\\n                \\\"#endif  /* _SYS_VARARGS_H */\\\\n\\\";\\n\\\n };\\n\\\n #endif\\n\\n\\n\\\n@@ -1005,8 +1003,21 @@ tSCC zAvoid_Wchar_T_TypeName[] =\n tSCC zAvoid_Wchar_T_TypeSelect0[] =\n        \"^[ \\t]*typedef[ \\t].*[ \\t]wchar_t[ \\t]*;\";\n \n-#define    AVOID_WCHAR_T_TYPE_TEST_CT  1\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zAvoid_Wchar_T_TypeBypass0[] =\n+       \"we must use the C\\\\+\\\\+ compiler's type\";\n+tSCC zAvoid_Wchar_T_TypeBypass1[] =\n+       \"_LINUX_NLS_H\";\n+tSCC zAvoid_Wchar_T_TypeBypass2[] =\n+       \"XFree86: xc/lib/X11/Xlib\\\\.h\";\n+\n+#define    AVOID_WCHAR_T_TYPE_TEST_CT  4\n static tTestDesc aAvoid_Wchar_T_TypeTests[] = {\n+  { TT_NEGREP,   zAvoid_Wchar_T_TypeBypass0, (regex_t*)NULL },\n+  { TT_NEGREP,   zAvoid_Wchar_T_TypeBypass1, (regex_t*)NULL },\n+  { TT_NEGREP,   zAvoid_Wchar_T_TypeBypass2, (regex_t*)NULL },\n   { TT_EGREP,    zAvoid_Wchar_T_TypeSelect0, (regex_t*)NULL }, };\n \n /*\n@@ -4125,7 +4136,7 @@ tSCC zStdio_Va_ListList[] =\n  *  content bypass pattern - skip fix if pattern found\n  */\n tSCC zStdio_Va_ListBypass0[] =\n-       \"__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list\";\n+       \"__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list\";\n \n #define    STDIO_VA_LIST_TEST_CT  1\n static tTestDesc aStdio_Va_ListTests[] = {\n@@ -4177,16 +4188,19 @@ tSCC zStrict_Ansi_NotSelect0[] =\n  */\n tSCC zStrict_Ansi_NotBypass0[] =\n        \"GNU and MIPS C compilers define __STDC__ differently\";\n+tSCC zStrict_Ansi_NotBypass1[] =\n+       \"__SCO_VERSION__.*__STDC__ != 1\";\n \n /*\n  *  perform the C function call test\n  */\n tSCC zStrict_Ansi_NotFTst0[] = \"stdc_0_in_system_headers\";\n \n-#define    STRICT_ANSI_NOT_TEST_CT  3\n+#define    STRICT_ANSI_NOT_TEST_CT  4\n static tTestDesc aStrict_Ansi_NotTests[] = {\n   { TT_FUNCTION, zStrict_Ansi_NotFTst0,   0 /* unused */ },\n   { TT_NEGREP,   zStrict_Ansi_NotBypass0, (regex_t*)NULL },\n+  { TT_NEGREP,   zStrict_Ansi_NotBypass1, (regex_t*)NULL },\n   { TT_EGREP,    zStrict_Ansi_NotSelect0, (regex_t*)NULL }, };\n \n /*\n@@ -6004,7 +6018,7 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          164\n+#define REGEX_COUNT          168\n #define MACH_LIST_SIZE_LIMIT 261\n #define FIX_COUNT            152\n "}, {"sha": "f3ce2c3d4d2ab7b0f07228fdbdc3028eb49e569d", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded58d0e10310c317f6db232d14a6beadb577f1/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=5ded58d0e10310c317f6db232d14a6beadb577f1", "patch": "@@ -633,12 +633,19 @@ fix = {\n /*\n  *  For C++, avoid any typedef definition of wchar_t,\n  *  and use the built in type instead.\n+ *  Don't do this for headers that are smart enough to do the right\n+ *  thing (recent [n]curses.h and Xlib.h).\n+ *  Don't do it for <linux/nls.h> which is never used from C++ anyway,\n+ *  and will be broken by the edit.\n  */\n \n fix = {\n     hackname = avoid_wchar_t_type;\n \n     select    = \"^[ \\t]*typedef[ \\t].*[ \\t]wchar_t[ \\t]*;\";\n+    bypass    = \"we must use the C\\\\+\\\\+ compiler's type\";\n+    bypass    = \"_LINUX_NLS_H\";\n+    bypass    = \"XFree86: xc/lib/X11/Xlib\\\\.h\";\n \n     c_fix     = format;\n     c_fix_arg = \"#ifndef __cplusplus\\n%0\\n#endif\";\n@@ -2277,13 +2284,16 @@ fix = {\n \n /*\n  *  Don't use or define the name va_list in stdio.h.\n- *  This is for ANSI and also to interoperate properly with gcc's varargs.h.\n- *  Note _BSD_VA_LIST_ is dealt with elsewhere.\n+ *  This is for ANSI and also to interoperate properly with gcc's\n+ *  varargs.h.  Note _BSD_VA_LIST_ is dealt with elsewhere.  The\n+ *  presence of __gnuc_va_list, __DJ_va_list, or _G_va_list is taken\n+ *  to indicate that the header knows what it's doing -- under SUSv2,\n+ *  stdio.h is required to define va_list, and we shouldn't break that.\n  */\n fix = {\n     hackname = stdio_va_list;\n     files    = stdio.h;\n-    bypass   = '__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list';\n+    bypass   = '__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list';\n \n     /*\n      * Use __gnuc_va_list in arg types in place of va_list.\n@@ -2325,6 +2335,9 @@ fix = {\n                \"|__STDC__[ \\t]*-[ \\t]*0[ \\t]*==[ \\t]*0)\";\n     /* Tru64 UNIX V4.0F/V5.1 <standards.h> supports GCC usage of __STDC__. */\n     bypass = 'GNU and MIPS C compilers define __STDC__ differently';\n+    /* GNU gmp.h uses \"__STDC__ != 1\" only if __SCO_VERSION__, which\n+       is not defined by GCC, so it is safe.  */\n+    bypass = '__SCO_VERSION__.*__STDC__ != 1';\n     c_test   = stdc_0_in_system_headers;\n \n     c_fix     = format;"}]}