{"sha": "ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyN2Y5N2JkOGI5YWM5ZGM2YjdiNWY0ZTRkNDdlMDlhOGQ5MTVjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-30T06:22:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-30T06:22:06Z"}, "message": "re PR c++/49867 ([C++0x] ICE on lambda inside switch with case labels in the lambda)\n\n\tPR c++/49867\n\t* parser.c (cp_parser_lambda_expression): Also clear in_statement\n\tand in_switch_statement_p.\n\t(cp_parser_class_specifier): Likewise.\n\nFrom-SVN: r176958", "tree": {"sha": "1e636295e742f75887235c00d396585271a6affd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e636295e742f75887235c00d396585271a6affd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c882891938e25799ab256e9f229efa3c8e3dea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c882891938e25799ab256e9f229efa3c8e3dea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c882891938e25799ab256e9f229efa3c8e3dea6"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "7f0b24ed53666e987e21372ac031d516ebddebe6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "patch": "@@ -1,3 +1,10 @@\n+2011-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49867\n+\t* parser.c (cp_parser_lambda_expression): Also clear in_statement\n+\tand in_switch_statement_p.\n+\t(cp_parser_class_specifier): Likewise.\n+\n 2011-07-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49808"}, {"sha": "3828ca98796a9cc58deb802220057a35150aea43", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "patch": "@@ -7437,8 +7437,12 @@ cp_parser_lambda_expression (cp_parser* parser)\n     /* Inside the class, surrounding template-parameter-lists do not apply.  */\n     unsigned int saved_num_template_parameter_lists\n         = parser->num_template_parameter_lists;\n+    unsigned char in_statement = parser->in_statement;\n+    bool in_switch_statement_p = parser->in_switch_statement_p;\n \n     parser->num_template_parameter_lists = 0;\n+    parser->in_statement = 0;\n+    parser->in_switch_statement_p = false;\n \n     /* By virtue of defining a local class, a lambda expression has access to\n        the private variables of enclosing classes.  */\n@@ -7471,6 +7475,8 @@ cp_parser_lambda_expression (cp_parser* parser)\n     type = finish_struct (type, /*attributes=*/NULL_TREE);\n \n     parser->num_template_parameter_lists = saved_num_template_parameter_lists;\n+    parser->in_statement = in_statement;\n+    parser->in_switch_statement_p = in_switch_statement_p;\n   }\n \n   pop_deferring_access_checks ();\n@@ -17007,6 +17013,8 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n   bool nested_name_specifier_p;\n   unsigned saved_num_template_parameter_lists;\n   bool saved_in_function_body;\n+  unsigned char in_statement;\n+  bool in_switch_statement_p;\n   bool saved_in_unbraced_linkage_specification_p;\n   tree old_scope = NULL_TREE;\n   tree scope = NULL_TREE;\n@@ -17060,6 +17068,12 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n   /* We are not in a function body.  */\n   saved_in_function_body = parser->in_function_body;\n   parser->in_function_body = false;\n+  /* Or in a loop.  */\n+  in_statement = parser->in_statement;\n+  parser->in_statement = 0;\n+  /* Or in a switch.  */\n+  in_switch_statement_p = parser->in_switch_statement_p;\n+  parser->in_switch_statement_p = false;\n   /* We are not immediately inside an extern \"lang\" block.  */\n   saved_in_unbraced_linkage_specification_p\n     = parser->in_unbraced_linkage_specification_p;\n@@ -17254,6 +17268,8 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n   pop_deferring_access_checks ();\n \n   /* Restore saved state.  */\n+  parser->in_switch_statement_p = in_switch_statement_p;\n+  parser->in_statement = in_statement;\n   parser->in_function_body = saved_in_function_body;\n   parser->num_template_parameter_lists\n     = saved_num_template_parameter_lists;"}, {"sha": "187a808fe514e588a2e70b2153fd72d3f7a44036", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "patch": "@@ -1,3 +1,8 @@\n+2011-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49867\n+\t* g++.dg/cpp0x/lambda/lambda-switch.C: New.\n+\n 2011-07-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR tree-optimization/47407"}, {"sha": "c3067713caf52488ea6b7d9400d5e29d3b282aeb", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-switch.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C?ref=ee27f97bd8b9ac9dc6b7b5f4e4d47e09a8d915ce", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/49867\n+// { dg-options -std=c++0x }\n+\n+int\n+main ()\n+{\n+  void (*l)();\n+  while (true)\n+    {\n+      switch (3)\n+\t{\n+\t  struct A {\n+\t    void f()\n+\t    {\n+\t    case 4:\t\t// { dg-error \"case\" }\n+\t      break;\t\t// { dg-error \"break\" }\n+\t    }\n+\t  };\n+\t  l = []()\n+\t    {\n+\t    case 3:\t\t// { dg-error \"case\" }\n+\t      break;\t\t// { dg-error \"break\" }\n+\t    };\n+\t}\n+    }\n+}"}]}