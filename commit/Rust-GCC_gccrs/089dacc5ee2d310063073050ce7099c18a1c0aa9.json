{"sha": "089dacc5ee2d310063073050ce7099c18a1c0aa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5ZGFjYzVlZTJkMzEwMDYzMDczMDUwY2U3MDk5YzE4YTFjMGFhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-01-26T15:52:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-26T15:52:55Z"}, "message": "re PR rtl-optimization/51978 (ext-elim-1.c ICE on powerpc64)\n\n\tPR rtl-optimization/51978\n\t* ree.c (make_defs_and_copies_lists): Change set_pat type\n\tto const_rtx.\n\t(combine_reaching_defs): Likewise.\n\t(struct re_info): Remove.\n\t(add_removable_extension): Remove x and data arguments,\n\tadd insn, insn_list and def_map.  Use the arguments directly\n\tinstead of using struct re_info.\n\t(find_removable_extensions): Don't call add_removable_extension\n\tthrough note_stores, instead just call it with single_set\n\tresult if non-NULL.\n\t(find_and_remove_re): Pass curr_cand->expr instead of\n\tPATTERN (curr_cand->insn) as set_pat argument to\n\tcombine_reaching_defs.\n\nFrom-SVN: r183567", "tree": {"sha": "85f3a6e8499e73b6181e100a0058dbddd4b710ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f3a6e8499e73b6181e100a0058dbddd4b710ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/089dacc5ee2d310063073050ce7099c18a1c0aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089dacc5ee2d310063073050ce7099c18a1c0aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089dacc5ee2d310063073050ce7099c18a1c0aa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089dacc5ee2d310063073050ce7099c18a1c0aa9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81bfd1977ac6a45d790a48603e38d335eb0a8a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bfd1977ac6a45d790a48603e38d335eb0a8a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bfd1977ac6a45d790a48603e38d335eb0a8a36"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "27d51ebf708fe96c4ca3c458bbeea31f4b9af5e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089dacc5ee2d310063073050ce7099c18a1c0aa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089dacc5ee2d310063073050ce7099c18a1c0aa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=089dacc5ee2d310063073050ce7099c18a1c0aa9", "patch": "@@ -1,3 +1,20 @@\n+2012-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/51978\n+\t* ree.c (make_defs_and_copies_lists): Change set_pat type\n+\tto const_rtx.\n+\t(combine_reaching_defs): Likewise.\n+\t(struct re_info): Remove.\n+\t(add_removable_extension): Remove x and data arguments,\n+\tadd insn, insn_list and def_map.  Use the arguments directly\n+\tinstead of using struct re_info.\n+\t(find_removable_extensions): Don't call add_removable_extension\n+\tthrough note_stores, instead just call it with single_set\n+\tresult if non-NULL.\n+\t(find_and_remove_re): Pass curr_cand->expr instead of\n+\tPATTERN (curr_cand->insn) as set_pat argument to\n+\tcombine_reaching_defs.\n+\n 2012-01-26  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/46590"}, {"sha": "ddb84fac1336f469c11dae899c142566e424dbd4", "filename": "gcc/ree.c", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089dacc5ee2d310063073050ce7099c18a1c0aa9/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089dacc5ee2d310063073050ce7099c18a1c0aa9/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=089dacc5ee2d310063073050ce7099c18a1c0aa9", "patch": "@@ -523,7 +523,7 @@ typedef struct ext_state\n    success.  */\n \n static bool\n-make_defs_and_copies_lists (rtx extend_insn, rtx set_pat,\n+make_defs_and_copies_lists (rtx extend_insn, const_rtx set_pat,\n \t\t\t    ext_state *state)\n {\n   rtx src_reg = XEXP (SET_SRC (set_pat), 0);\n@@ -651,7 +651,7 @@ merge_def_and_ext (ext_cand *cand, rtx def_insn, ext_state *state)\n    and false upon failure.  */\n \n static bool\n-combine_reaching_defs (ext_cand *cand, rtx set_pat, ext_state *state)\n+combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n {\n   rtx def_insn;\n   bool merge_successful = true;\n@@ -742,27 +742,13 @@ combine_reaching_defs (ext_cand *cand, rtx set_pat, ext_state *state)\n   return false;\n }\n \n-/* This structure holds information while walking the RTL stream.  */\n-\n-struct re_info\n-{\n-  /* The current insn.  */\n-  rtx insn;\n-\n-  /* The list of candidates.  */\n-  VEC (ext_cand, heap) *insn_list;\n-\n-  /* The map of definition instructions to candidates.  */\n-  ext_cand **def_map;\n-};\n-\n-/* Add an extension pattern that could be eliminated.  This is called via\n-   note_stores from find_removable_extensions.  */\n+/* Add an extension pattern that could be eliminated.  */\n \n static void\n-add_removable_extension (rtx x ATTRIBUTE_UNUSED, const_rtx expr, void *data)\n+add_removable_extension (const_rtx expr, rtx insn,\n+\t\t\t VEC (ext_cand, heap) **insn_list,\n+\t\t\t ext_cand **def_map)\n {\n-  struct re_info *rei = (struct re_info *)data;\n   enum rtx_code code;\n   enum machine_mode mode;\n   rtx src, dest;\n@@ -785,13 +771,13 @@ add_removable_extension (rtx x ATTRIBUTE_UNUSED, const_rtx expr, void *data)\n       ext_cand *cand;\n \n       /* First, make sure we can get all the reaching definitions.  */\n-      defs = get_defs (rei->insn, XEXP (src, 0), NULL);\n+      defs = get_defs (insn, XEXP (src, 0), NULL);\n       if (!defs)\n \t{\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"Cannot eliminate extension:\\n\");\n-\t      print_rtl_single (dump_file, rei->insn);\n+\t      print_rtl_single (dump_file, insn);\n \t      fprintf (dump_file, \" because of missing definition(s)\\n\");\n \t    }\n \t  return;\n@@ -800,28 +786,28 @@ add_removable_extension (rtx x ATTRIBUTE_UNUSED, const_rtx expr, void *data)\n       /* Second, make sure the reaching definitions don't feed another and\n \t different extension.  FIXME: this obviously can be improved.  */\n       for (def = defs; def; def = def->next)\n-\tif ((cand = rei->def_map[INSN_UID(DF_REF_INSN (def->ref))])\n+\tif ((cand = def_map[INSN_UID(DF_REF_INSN (def->ref))])\n \t    && (cand->code != code || cand->mode != mode))\n \t  {\n \t    if (dump_file)\n \t      {\n \t        fprintf (dump_file, \"Cannot eliminate extension:\\n\");\n-\t        print_rtl_single (dump_file, rei->insn);\n+\t\tprint_rtl_single (dump_file, insn);\n \t        fprintf (dump_file, \" because of other extension\\n\");\n \t      }\n \t    return;\n \t  }\n \n       /* Then add the candidate to the list and insert the reaching definitions\n          into the definition map.  */\n-      cand = VEC_safe_push (ext_cand, heap, rei->insn_list, NULL);\n+      cand = VEC_safe_push (ext_cand, heap, *insn_list, NULL);\n       cand->expr = expr;\n       cand->code = code;\n       cand->mode = mode;\n-      cand->insn = rei->insn;\n+      cand->insn = insn;\n \n       for (def = defs; def; def = def->next)\n-\trei->def_map[INSN_UID(DF_REF_INSN (def->ref))] = cand;\n+\tdef_map[INSN_UID(DF_REF_INSN (def->ref))] = cand;\n     }\n }\n \n@@ -831,26 +817,26 @@ add_removable_extension (rtx x ATTRIBUTE_UNUSED, const_rtx expr, void *data)\n static VEC (ext_cand, heap)*\n find_removable_extensions (void)\n {\n-  struct re_info rei;\n+  VEC (ext_cand, heap) *insn_list = NULL;\n   basic_block bb;\n-  rtx insn;\n-\n-  rei.insn_list = VEC_alloc (ext_cand, heap, 8);\n-  rei.def_map = XCNEWVEC (ext_cand *, max_insn_uid);\n+  rtx insn, set;\n+  ext_cand **def_map = XCNEWVEC (ext_cand *, max_insn_uid);\n \n   FOR_EACH_BB (bb)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tif (!NONDEBUG_INSN_P (insn))\n \t  continue;\n \n-\trei.insn = insn;\n-\tnote_stores (PATTERN (insn), add_removable_extension, &rei);\n+\tset = single_set (insn);\n+\tif (set == NULL_RTX)\n+\t  continue;\n+\tadd_removable_extension (set, insn, &insn_list, def_map);\n       }\n \n-  XDELETEVEC (rei.def_map);\n+  XDELETEVEC (def_map);\n \n-  return rei.insn_list;\n+  return insn_list;\n }\n \n /* This is the main function that checks the insn stream for redundant\n@@ -895,7 +881,7 @@ find_and_remove_re (void)\n           print_rtl_single (dump_file, curr_cand->insn);\n         }\n \n-      if (combine_reaching_defs (curr_cand, PATTERN (curr_cand->insn), &state))\n+      if (combine_reaching_defs (curr_cand, curr_cand->expr, &state))\n         {\n           if (dump_file)\n             fprintf (dump_file, \"Eliminated the extension.\\n\");"}]}