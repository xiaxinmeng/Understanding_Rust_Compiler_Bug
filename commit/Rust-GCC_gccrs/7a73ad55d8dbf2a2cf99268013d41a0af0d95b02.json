{"sha": "7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3M2FkNTVkOGRiZjJhMmNmOTkyNjgwMTNkNDFhMGFmMGQ5NWIwMg==", "commit": {"author": {"name": "Florian Weimer", "email": "fw@deneb.enyo.de", "date": "2001-12-22T11:58:51Z"}, "committer": {"name": "Florian Weimer", "email": "fw@gcc.gnu.org", "date": "2001-12-22T11:58:51Z"}, "message": "make.adb (Add_Switch): Make Generic_Position a procedure.\n\n\t* make.adb (Add_Switch): Make Generic_Position a procedure.  The\n\tfunction approach did not work well because of a side effect (the\n\tfunction call could reallocate the table which was being indexed\n\tusing its result). Fixes ada/4851.\n\nFrom-SVN: r48265", "tree": {"sha": "c00928552111ff9496bdffd2b750652872457a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00928552111ff9496bdffd2b750652872457a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02/comments", "author": {"login": "fweimer", "id": 2729073, "node_id": "MDQ6VXNlcjI3MjkwNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2729073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer", "html_url": "https://github.com/fweimer", "followers_url": "https://api.github.com/users/fweimer/followers", "following_url": "https://api.github.com/users/fweimer/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer/subscriptions", "organizations_url": "https://api.github.com/users/fweimer/orgs", "repos_url": "https://api.github.com/users/fweimer/repos", "events_url": "https://api.github.com/users/fweimer/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5637a0ebb90a4b68bc8faaf29362157be0a6b366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5637a0ebb90a4b68bc8faaf29362157be0a6b366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5637a0ebb90a4b68bc8faaf29362157be0a6b366"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "52841cf49ffc0dd62fb0b5abf70b7ea81e5af0c4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "patch": "@@ -1,3 +1,10 @@\n+2001-12-22  Florian Weimer  <fw@deneb.enyo.de>\n+\n+\t* make.adb (Add_Switch): Make Generic_Position a procedure.  The\n+\tfunction approach did not work well because of a side effect (the\n+\tfunction call could reallocate the table which was being indexed\n+\tusing its result). Fixes ada/4851.\n+\n 2001-12-19  Robert Dewar <dewar@gnat.com>\n \n \t* bindgen.adb: Minor reformatting"}, {"sha": "500caf8a6e12ba1821e7def568c2d34dcd8e852d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a73ad55d8dbf2a2cf99268013d41a0af0d95b02/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=7a73ad55d8dbf2a2cf99268013d41a0af0d95b02", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision$\n+--                            $Revision: 1.9 $\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -554,55 +554,60 @@ package body Make is\n    is\n       generic\n          with package T is new Table.Table (<>);\n-      function Generic_Position return Integer;\n-      --  Generic procedure that adds S at the end or beginning of T depending\n-      --  of the value of the boolean Append_Switch.\n+      procedure Generic_Position (New_Position : out Integer);\n+      --  Generic procedure that allocates a position for S in T at the\n+      --  beginning or the end, depending on the boolean Append_Switch.\n \n       ----------------------\n       -- Generic_Position --\n       ----------------------\n \n-      function Generic_Position return Integer is\n+      procedure  Generic_Position (New_Position : out Integer) is\n       begin\n          T.Increment_Last;\n \n          if Append_Switch then\n-            return Integer (T.Last);\n+            New_Position := Integer (T.Last);\n          else\n             for J in reverse T.Table_Index_Type'Succ (T.First) .. T.Last loop\n                T.Table (J) := T.Table (T.Table_Index_Type'Pred (J));\n             end loop;\n \n-            return Integer (T.First);\n+            New_Position := Integer (T.First);\n          end if;\n       end Generic_Position;\n \n-      function Gcc_Switches_Pos    is new Generic_Position (Gcc_Switches);\n-      function Binder_Switches_Pos is new Generic_Position (Binder_Switches);\n-      function Linker_Switches_Pos is new Generic_Position (Linker_Switches);\n+      procedure Gcc_Switches_Pos    is new Generic_Position (Gcc_Switches);\n+      procedure Binder_Switches_Pos is new Generic_Position (Binder_Switches);\n+      procedure Linker_Switches_Pos is new Generic_Position (Linker_Switches);\n \n-      function Saved_Gcc_Switches_Pos is new\n+      procedure Saved_Gcc_Switches_Pos is new\n         Generic_Position (Saved_Gcc_Switches);\n \n-      function Saved_Binder_Switches_Pos is new\n+      procedure Saved_Binder_Switches_Pos is new\n         Generic_Position (Saved_Binder_Switches);\n \n-      function Saved_Linker_Switches_Pos is new\n+      procedure Saved_Linker_Switches_Pos is new\n         Generic_Position (Saved_Linker_Switches);\n \n+      New_Position : Integer;\n+\n    --  Start of processing for Add_Switch\n \n    begin\n       if And_Save then\n          case Program is\n             when Compiler =>\n-               Saved_Gcc_Switches.Table (Saved_Gcc_Switches_Pos) := S;\n+               Saved_Gcc_Switches_Pos (New_Position);\n+               Saved_Gcc_Switches.Table (New_Position) := S;\n \n             when Binder   =>\n-               Saved_Binder_Switches.Table (Saved_Binder_Switches_Pos) := S;\n+               Saved_Binder_Switches_Pos (New_Position);\n+               Saved_Binder_Switches.Table (New_Position) := S;\n \n             when Linker   =>\n-               Saved_Linker_Switches.Table (Saved_Linker_Switches_Pos) := S;\n+               Saved_Linker_Switches_Pos (New_Position);\n+               Saved_Linker_Switches.Table (New_Position) := S;\n \n             when None =>\n                raise Program_Error;\n@@ -611,13 +616,16 @@ package body Make is\n       else\n          case Program is\n             when Compiler =>\n-               Gcc_Switches.Table (Gcc_Switches_Pos) := S;\n+               Gcc_Switches_Pos (New_Position);\n+               Gcc_Switches.Table (New_Position) := S;\n \n             when Binder   =>\n-               Binder_Switches.Table (Binder_Switches_Pos) := S;\n+               Binder_Switches_Pos (New_Position);\n+               Binder_Switches.Table (New_Position) := S;\n \n             when Linker   =>\n-               Linker_Switches.Table (Linker_Switches_Pos) := S;\n+               Linker_Switches_Pos (New_Position);\n+               Linker_Switches.Table (New_Position) := S;\n \n             when None =>\n                raise Program_Error;"}]}