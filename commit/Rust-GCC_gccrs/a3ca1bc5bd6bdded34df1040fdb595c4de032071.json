{"sha": "a3ca1bc5bd6bdded34df1040fdb595c4de032071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjYTFiYzViZDZiZGRlZDM0ZGYxMDQwZmRiNTk1YzRkZTAzMjA3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-22T14:38:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-22T14:38:42Z"}, "message": "re PR tree-optimization/70251 (Wrong code with -O3 -march=skylake-avx512.)\n\n2016-03-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/70251\n\t* genmatch.c (gen_transform): Adjust last parameter to a three-state\n\tint...\n\t(capture::gen_transform): ... to change behavior when substituting\n\ta condition into cond or not-cond expr context.\n\t(dt_simplify::gen_1): Adjust.\n\t* gimple-match-head.c: Include gimplify.h for unshare_expr.\n\t* match.pd (A + (B vcmp C ? 1 : 0) -> A - (B vcmp C)): Revert\n\tlast change and instead change to\n\tA + (B vcmp C ? 1 : 0) -> A - (B vcmp C ? -1 : 0).\n\t(A - (B vcmp C ? 1 : 0) -> A + (B vcmp C)): Likewise.\n\n\t* g++.dg/torture/pr70251.C: New testcase.\n\nFrom-SVN: r234405", "tree": {"sha": "07e38dec0fc55cf290a215c1b217490973866e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e38dec0fc55cf290a215c1b217490973866e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ca1bc5bd6bdded34df1040fdb595c4de032071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca1bc5bd6bdded34df1040fdb595c4de032071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ca1bc5bd6bdded34df1040fdb595c4de032071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca1bc5bd6bdded34df1040fdb595c4de032071/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec613b6634d57abc9402ba8c51bdbc9f59807690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec613b6634d57abc9402ba8c51bdbc9f59807690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec613b6634d57abc9402ba8c51bdbc9f59807690"}], "stats": {"total": 119, "additions": 76, "deletions": 43}, "files": [{"sha": "92391efd907b990459d7980816f11286bb797488", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -1,3 +1,17 @@\n+2016-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70251\n+\t* genmatch.c (gen_transform): Adjust last parameter to a three-state\n+\tint...\n+\t(capture::gen_transform): ... to change behavior when substituting\n+\ta condition into cond or not-cond expr context.\n+\t(dt_simplify::gen_1): Adjust.\n+\t* gimple-match-head.c: Include gimplify.h for unshare_expr.\n+\t* match.pd (A + (B vcmp C ? 1 : 0) -> A - (B vcmp C)): Revert\n+\tlast change and instead change to\n+\tA + (B vcmp C ? 1 : 0) -> A - (B vcmp C ? -1 : 0).\n+\t(A - (B vcmp C ? 1 : 0) -> A + (B vcmp C)): Likewise.\n+\n 2016-03-22  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxiebox.h (CC1_SPEC): Define.  Fix endianness"}, {"sha": "1f5f45c206a00d6b51db4f0831df98f2dba668ee", "filename": "gcc/genmatch.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -548,7 +548,7 @@ struct operand {\n   virtual void gen_transform (FILE *, int, const char *, bool, int,\n \t\t\t      const char *, capture_info *,\n \t\t\t      dt_operand ** = 0,\n-\t\t\t      bool = true)\n+\t\t\t      int = 0)\n     { gcc_unreachable  (); }\n };\n \n@@ -590,7 +590,7 @@ struct expr : public operand\n   bool force_single_use;\n   virtual void gen_transform (FILE *f, int, const char *, bool, int,\n \t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, bool = true);\n+\t\t\t      dt_operand ** = 0, int = 0);\n };\n \n /* An operator that is represented by native C code.  This is always\n@@ -622,7 +622,7 @@ struct c_expr : public operand\n   vec<id_tab> ids;\n   virtual void gen_transform (FILE *f, int, const char *, bool, int,\n \t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, bool = true);\n+\t\t\t      dt_operand ** = 0, int = 0);\n };\n \n /* A wrapper around another operand that captures its value.  */\n@@ -637,7 +637,7 @@ struct capture : public operand\n   operand *what;\n   virtual void gen_transform (FILE *f, int, const char *, bool, int,\n \t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, bool = true);\n+\t\t\t      dt_operand ** = 0, int = 0);\n };\n \n /* if expression.  */\n@@ -2149,7 +2149,7 @@ get_operand_type (id_base *op, const char *in_type,\n void\n expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n \t\t     int depth, const char *in_type, capture_info *cinfo,\n-\t\t     dt_operand **indexes, bool)\n+\t\t     dt_operand **indexes, int)\n {\n   id_base *opr = operation;\n   /* When we delay operator substituting during lowering of fors we\n@@ -2213,9 +2213,8 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n \t\t\t    i == 0 ? NULL : op0type);\n       ops[i]->gen_transform (f, indent, dest, gimple, depth + 1, optype,\n \t\t\t     cinfo, indexes,\n-\t\t\t     ((!(*opr == COND_EXPR)\n-\t\t\t       && !(*opr == VEC_COND_EXPR))\n-\t\t\t      || i != 0));\n+\t\t\t     (*opr == COND_EXPR\n+\t\t\t      || *opr == VEC_COND_EXPR) && i == 0 ? 1 : 2);\n     }\n \n   const char *opr_name;\n@@ -2306,7 +2305,7 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n void\n c_expr::gen_transform (FILE *f, int indent, const char *dest,\n \t\t       bool, int, const char *, capture_info *,\n-\t\t       dt_operand **, bool)\n+\t\t       dt_operand **, int)\n {\n   if (dest && nr_stmts == 1)\n     fprintf_indent (f, indent, \"%s = \", dest);\n@@ -2378,7 +2377,7 @@ c_expr::gen_transform (FILE *f, int indent, const char *dest,\n void\n capture::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n \t\t\tint depth, const char *in_type, capture_info *cinfo,\n-\t\t\tdt_operand **indexes, bool expand_compares)\n+\t\t\tdt_operand **indexes, int cond_handling)\n {\n   if (what && is_a<expr *> (what))\n     {\n@@ -2394,20 +2393,29 @@ capture::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n   fprintf_indent (f, indent, \"%s = captures[%u];\\n\", dest, where);\n \n   /* ???  Stupid tcc_comparison GENERIC trees in COND_EXPRs.  Deal\n-     with substituting a capture of that.\n-     ???  Returning false here will also not allow any other patterns\n-     to match.  */\n-  if (gimple && expand_compares\n+     with substituting a capture of that.  */\n+  if (gimple\n+      && cond_handling != 0\n       && cinfo->info[where].cond_expr_cond_p)\n     {\n-      fprintf_indent (f, indent, \"if (COMPARISON_CLASS_P (%s))\\n\", dest);\n-      fprintf_indent (f, indent, \"  {\\n\");\n-      fprintf_indent (f, indent, \"    if (!seq) return false;\\n\");\n-      fprintf_indent (f, indent, \"    %s = gimple_build (seq, TREE_CODE (%s),\"\n-\t\t                 \" TREE_TYPE (%s), TREE_OPERAND (%s, 0),\"\n-\t\t\t\t \" TREE_OPERAND (%s, 1));\\n\",\n-\t\t\t\t dest, dest, dest, dest, dest);\n-      fprintf_indent (f, indent, \"  }\\n\");\n+      /* If substituting into a cond_expr condition, unshare.  */\n+      if (cond_handling == 1)\n+\tfprintf_indent (f, indent, \"%s = unshare_expr (%s);\\n\", dest, dest);\n+      /* If substituting elsewhere we might need to decompose it.  */\n+      else if (cond_handling == 2)\n+\t{\n+\t  /* ???  Returning false here will also not allow any other patterns\n+\t     to match unless this generator was split out.  */\n+\t  fprintf_indent (f, indent, \"if (COMPARISON_CLASS_P (%s))\\n\", dest);\n+\t  fprintf_indent (f, indent, \"  {\\n\");\n+\t  fprintf_indent (f, indent, \"    if (!seq) return false;\\n\");\n+\t  fprintf_indent (f, indent, \"    %s = gimple_build (seq,\"\n+\t\t\t  \" TREE_CODE (%s),\"\n+\t\t\t  \" TREE_TYPE (%s), TREE_OPERAND (%s, 0),\"\n+\t\t\t  \" TREE_OPERAND (%s, 1));\\n\",\n+\t\t\t  dest, dest, dest, dest, dest);\n+\t  fprintf_indent (f, indent, \"  }\\n\");\n+\t}\n     }\n }\n \n@@ -3043,18 +3051,14 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t\t\t\t    \"type\", e->expr_type,\n \t\t\t\t    j == 0 ? NULL : \"TREE_TYPE (res_ops[0])\");\n \t      /* We need to expand GENERIC conditions we captured from\n-\t         COND_EXPRs.  */\n-\t      bool expand_generic_cond_exprs_p\n-\t        = (!is_predicate\n-\t\t   /* But avoid doing that if the GENERIC condition is\n-\t\t      valid - which it is in the first operand of COND_EXPRs\n-\t\t      and VEC_COND_EXRPs.  */\n-\t\t   && ((!(*opr == COND_EXPR)\n-\t\t\t&& !(*opr == VEC_COND_EXPR))\n-\t\t       || j != 0));\n+\t         COND_EXPRs and we need to unshare them when substituting\n+\t\t into COND_EXPRs.  */\n+\t      int cond_handling = 0;\n+\t      if (!is_predicate)\n+\t\tcond_handling = ((*opr == COND_EXPR\n+\t\t\t\t  || *opr == VEC_COND_EXPR) && j == 0) ? 1 : 2;\n \t      e->ops[j]->gen_transform (f, indent, dest, true, 1, optype,\n-\t\t\t\t\t&cinfo,\n-\t\t\t\t\tindexes, expand_generic_cond_exprs_p);\n+\t\t\t\t\t&cinfo, indexes, cond_handling);\n \t    }\n \n \t  /* Re-fold the toplevel result.  It's basically an embedded\n@@ -3068,7 +3072,7 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t       || result->type == operand::OP_C_EXPR)\n \t{\n \t  result->gen_transform (f, indent, \"res_ops[0]\", true, 1, \"type\",\n-\t\t\t\t &cinfo, indexes, false);\n+\t\t\t\t &cinfo, indexes);\n \t  fprintf_indent (f, indent, \"*res_code = TREE_CODE (res_ops[0]);\\n\");\n \t  if (is_a <capture *> (result)\n \t      && cinfo.info[as_a <capture *> (result)->where].cond_expr_cond_p)"}, {"sha": "c86a4ffb0e346ac68700e8701be81c010e9e4117", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"internal-fn.h\"\n #include \"case-cfn-macros.h\"\n+#include \"gimplify.h\"\n \n \n /* Forward declarations of the private auto-generated matchers."}, {"sha": "388a489dcb86cd19dc68496051846bed670a79aa", "filename": "gcc/match.pd", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -1752,28 +1752,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cnd (logical_inverted_value truth_valued_p@0) @1 @2)\n   (cnd @0 @2 @1)))\n \n-/* A + (B vcmp C ? 1 : 0) -> A - (B vcmp C), since vector comparisons\n-   return all-1 or all-0 results.  */\n+/* A + (B vcmp C ? 1 : 0) -> A - (B vcmp C ? -1 : 0), since vector comparisons\n+   return all -1 or all 0 results.  */\n /* ??? We could instead convert all instances of the vec_cond to negate,\n    but that isn't necessarily a win on its own.  */\n (simplify\n- (plus:c @3 (view_convert? (vec_cond @0 integer_each_onep@1 integer_zerop@2)))\n+ (plus:c @3 (view_convert? (vec_cond:s @0 integer_each_onep@1 integer_zerop@2)))\n  (if (VECTOR_TYPE_P (type)\n-      && VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (@0)))\n       && TYPE_VECTOR_SUBPARTS (type) == TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0))\n       && (TYPE_MODE (TREE_TYPE (type))\n           == TYPE_MODE (TREE_TYPE (TREE_TYPE (@0)))))\n-  (minus @3 (view_convert @0))))\n+  (minus @3 (view_convert (vec_cond @0 (negate @1) @2)))))\n \n-/* ... likewise A - (B vcmp C ? 1 : 0) -> A + (B vcmp C).  */\n+/* ... likewise A - (B vcmp C ? 1 : 0) -> A + (B vcmp C ? -1 : 0).  */\n (simplify\n- (minus @3 (view_convert? (vec_cond @0 integer_each_onep@1 integer_zerop@2)))\n+ (minus @3 (view_convert? (vec_cond:s @0 integer_each_onep@1 integer_zerop@2)))\n  (if (VECTOR_TYPE_P (type)\n-      && VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (@0)))\n       && TYPE_VECTOR_SUBPARTS (type) == TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0))\n       && (TYPE_MODE (TREE_TYPE (type))\n           == TYPE_MODE (TREE_TYPE (TREE_TYPE (@0)))))\n-  (plus @3 (view_convert @0))))\n+  (plus @3 (view_convert (vec_cond @0 (negate @1) @2)))))\n \n \n /* Simplifications of comparisons.  */"}, {"sha": "00c82625bef8b99f4237ca99adddf4e76c2f66c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -1,3 +1,8 @@\n+2016-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70251\n+\t* g++.dg/torture/pr70251.C: New testcase.\n+\n 2016-03-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/69993"}, {"sha": "5af35b2d8cf6fd86691f4d66aa1bfe3a6c7ca5eb", "filename": "gcc/testsuite/g++.dg/torture/pr70251.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70251.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca1bc5bd6bdded34df1040fdb595c4de032071/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70251.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70251.C?ref=a3ca1bc5bd6bdded34df1040fdb595c4de032071", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-w -Wno-psabi\" }\n+\n+typedef int vec __attribute__((vector_size(64)));\n+vec f(vec x,vec y,vec z)\n+{\n+  vec zero={};\n+  vec one=zero+1;\n+  vec c=x<y;\n+  return z+(c?one:zero);\n+}"}]}