{"sha": "4e2b26aaa258ada5c20d19861655452354be3abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyYjI2YWFhMjU4YWRhNWMyMGQxOTg2MTY1NTQ1MjM1NGJlM2FiYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-06-17T13:08:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-06-17T13:08:43Z"}, "message": "predicates.md (const_call_operand): Adjust comment.\n\n\t* config/m68k/predicates.md (const_call_operand): Adjust comment.\n\t(const_sibcall_operand): New.\n\t(sibcall_operand): Use it.\n\t* config/m68k/m68k.c (FL_FOR_isa_c): Not ISA_B compatible.\n\t(m68k_isas): ISAC does not imply FPU or EMAC.\n\t(override_options): Add ISA_C logic for symbolic jump & call.\n\nFrom-SVN: r125774", "tree": {"sha": "fc8359c926e50822a96fd432e7fe43814835b6ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8359c926e50822a96fd432e7fe43814835b6ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e2b26aaa258ada5c20d19861655452354be3abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2b26aaa258ada5c20d19861655452354be3abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2b26aaa258ada5c20d19861655452354be3abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2b26aaa258ada5c20d19861655452354be3abc/comments", "author": null, "committer": null, "parents": [{"sha": "fe116068c2232a0ebd543418f175a8ff64f86bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe116068c2232a0ebd543418f175a8ff64f86bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe116068c2232a0ebd543418f175a8ff64f86bf0"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "321e61627a762347bc1806cfa5e527327e820e0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e2b26aaa258ada5c20d19861655452354be3abc", "patch": "@@ -7,6 +7,13 @@\n \t* config/m68k/m68k.c (all_isas): Remove FL_CF_FPU and\n \tFL_CF_EMAC from the entry for isac.\n \n+\t* config/m68k/predicates.md (const_call_operand): Adjust comment.\n+\t(const_sibcall_operand): New.\n+\t(sibcall_operand): Use it.\n+\t* config/m68k/m68k.c (FL_FOR_isa_c): Not ISA_B compatible.\n+\t(m68k_isas): ISAC does not imply FPU or EMAC.\n+\t(override_options): Add ISA_C logic for symbolic jump & call.\n+\n 2007-06-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (sparc_vis_init_builtins): Retrieve the"}, {"sha": "d1ce578d099e1d1ec57f2950a4597d1a95941e0b", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=4e2b26aaa258ada5c20d19861655452354be3abc", "patch": "@@ -233,7 +233,8 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n #define FL_FOR_isa_aplus (FL_FOR_isa_a | FL_ISA_APLUS | FL_CF_USP)\n /* Note ISA_B doesn't necessarily include USP (user stack pointer) support.  */\n #define FL_FOR_isa_b     (FL_FOR_isa_a | FL_ISA_B | FL_CF_HWDIV)\n-#define FL_FOR_isa_c     (FL_FOR_isa_b | FL_ISA_C | FL_CF_USP)\n+/* ISA_C is not upwardly compatible with ISA_B.  */\n+#define FL_FOR_isa_c     (FL_FOR_isa_a | FL_ISA_C | FL_CF_HWDIV | FL_CF_USP)\n \n enum m68k_isa\n {\n@@ -563,20 +564,27 @@ override_options (void)\n   else if (TARGET_ID_SHARED_LIBRARY)\n     /* All addresses must be loaded from the GOT.  */\n     ;\n-  else if (TARGET_68020 || TARGET_ISAB)\n+  else if (TARGET_68020 || TARGET_ISAB || TARGET_ISAC)\n     {\n       if (TARGET_PCREL)\n+\tm68k_symbolic_call = \"bsr.l %c0\";\n+      else\n \t{\n-\t  m68k_symbolic_call = \"bsr.l %c0\";\n-\t  m68k_symbolic_jump = \"bra.l %c0\";\n+#if defined(USE_GAS)\n+\t  m68k_symbolic_call = \"bsr.l %p0\";\n+#else\n+\t  m68k_symbolic_call = \"bsr %p0\";\n+#endif\n \t}\n+      if (TARGET_ISAC)\n+\t/* No unconditional long branch */;\n+      else if (TARGET_PCREL)\n+\tm68k_symbolic_jump = \"bra.l %c0\";\n       else\n \t{\n #if defined(USE_GAS)\n-\t  m68k_symbolic_call = \"bsr.l %p0\";\n \t  m68k_symbolic_jump = \"bra.l %p0\";\n #else\n-\t  m68k_symbolic_call = \"bsr %p0\";\n \t  m68k_symbolic_jump = \"bra %p0\";\n #endif\n \t}"}, {"sha": "e62d426857b6483cbd6d9e99457edbb2317b9328", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2b26aaa258ada5c20d19861655452354be3abc/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=4e2b26aaa258ada5c20d19861655452354be3abc", "patch": "@@ -159,7 +159,7 @@\n     }\n })\n \n-;; A constant that can be used the address in a call or sibcall insn.\n+;; A constant that can be used the address in a call insn\n (define_predicate \"const_call_operand\"\n   (ior (match_operand 0 \"const_int_operand\")\n        (and (match_test \"m68k_symbolic_call != NULL\")\n@@ -170,9 +170,15 @@\n   (ior (match_operand 0 \"const_call_operand\")\n        (match_operand 0 \"register_operand\")))\n \n+;; A constant that can be used the address in a sibcall insn\n+(define_predicate \"const_sibcall_operand\"\n+  (ior (match_operand 0 \"const_int_operand\")\n+       (and (match_test \"m68k_symbolic_jump != NULL\")\n+\t    (match_operand 0 \"symbolic_operand\"))))\n+\n ;; An operand that can be used as the address in a sibcall insn.\n (define_predicate \"sibcall_operand\"\n-  (ior (match_operand 0 \"const_call_operand\")\n+  (ior (match_operand 0 \"const_sibcall_operand\")\n        (and (match_code \"reg\")\n \t    (match_test \"REGNO (op) == STATIC_CHAIN_REGNUM\"))))\n "}]}