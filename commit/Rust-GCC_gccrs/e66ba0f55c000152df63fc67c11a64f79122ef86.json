{"sha": "e66ba0f55c000152df63fc67c11a64f79122ef86", "node_id": "C_kwDOANBUbNoAKGU2NmJhMGY1NWMwMDAxNTJkZjYzZmM2N2MxMWE2NGY3OTEyMmVmODY", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-02-07T03:30:02Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-02-07T03:30:02Z"}, "message": "rs6000: Move the hunk affecting VSX/ALTIVEC ahead [PR103627]\n\nThe modified hunk can update VSX and ALTIVEC flag, we have some codes\nto check/warn for some flags related to VSX and ALTIVEC sitting where\nthe hunk is proprosed to be moved to.  Without this adjustment, the\nVSX and ALTIVEC update is too late, it can cause the incompatibility\nand result in unexpected behaviors, the associated test case is one\ntypical case.\n\nSince we already have the code which sets TARGET_FLOAT128_TYPE and lays\nafter the moved place, and OPTION_MASK_FLOAT128_KEYWORD will rely on\nTARGET_FLOAT128_TYPE, so it just simply remove them.\n\ngcc/ChangeLog:\n\n\tPR target/103627\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Move the\n\thunk affecting VSX and ALTIVEC to appropriate place.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103627\n\t* gcc.target/powerpc/pr103627-3.c: New test.", "tree": {"sha": "64156e3e997a5f49c9964ce4b6e986fd6165c86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64156e3e997a5f49c9964ce4b6e986fd6165c86d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66ba0f55c000152df63fc67c11a64f79122ef86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66ba0f55c000152df63fc67c11a64f79122ef86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66ba0f55c000152df63fc67c11a64f79122ef86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66ba0f55c000152df63fc67c11a64f79122ef86/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8103623923ac4ea19b97a369979d4bd5731aab57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8103623923ac4ea19b97a369979d4bd5731aab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8103623923ac4ea19b97a369979d4bd5731aab57"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "e571a0b1c96720938dcc96663c098daf83d0846b", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66ba0f55c000152df63fc67c11a64f79122ef86/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66ba0f55c000152df63fc67c11a64f79122ef86/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=e66ba0f55c000152df63fc67c11a64f79122ef86", "patch": "@@ -3934,6 +3934,15 @@ rs6000_option_override_internal (bool global_init_p)\n   else if (TARGET_ALTIVEC)\n     rs6000_isa_flags |= (OPTION_MASK_PPC_GFXOPT & ~ignore_masks);\n \n+  /* Disable VSX and Altivec silently if the user switched cpus to power7 in a\n+     target attribute or pragma which automatically enables both options,\n+     unless the altivec ABI was set.  This is set by default for 64-bit, but\n+     not for 32-bit.  Don't move this before the above code using ignore_masks,\n+     since it can reset the cleared VSX/ALTIVEC flag again.  */\n+  if (main_target_opt && !main_target_opt->x_rs6000_altivec_abi)\n+    rs6000_isa_flags &= ~((OPTION_MASK_VSX | OPTION_MASK_ALTIVEC)\n+\t\t\t  & ~rs6000_isa_flags_explicit);\n+\n   if (TARGET_CRYPTO && !TARGET_ALTIVEC)\n     {\n       if (rs6000_isa_flags_explicit & OPTION_MASK_CRYPTO)\n@@ -4350,18 +4359,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* Disable VSX and Altivec silently if the user switched cpus to power7 in a\n-     target attribute or pragma which automatically enables both options,\n-     unless the altivec ABI was set.  This is set by default for 64-bit, but\n-     not for 32-bit.  */\n-  if (main_target_opt != NULL && !main_target_opt->x_rs6000_altivec_abi)\n-    {\n-      TARGET_FLOAT128_TYPE = 0;\n-      rs6000_isa_flags &= ~((OPTION_MASK_VSX | OPTION_MASK_ALTIVEC\n-\t\t\t     | OPTION_MASK_FLOAT128_KEYWORD)\n-\t\t\t    & ~rs6000_isa_flags_explicit);\n-    }\n-\n   /* Enable Altivec ABI for AIX -maltivec.  */\n   if (TARGET_XCOFF\n       && (TARGET_ALTIVEC || TARGET_VSX)"}, {"sha": "5a4d5ba5701bdf2bbe8b1c067137a060302f611b", "filename": "gcc/testsuite/gcc.target/powerpc/pr103627-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66ba0f55c000152df63fc67c11a64f79122ef86/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66ba0f55c000152df63fc67c11a64f79122ef86/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-3.c?ref=e66ba0f55c000152df63fc67c11a64f79122ef86", "patch": "@@ -0,0 +1,20 @@\n+/* There are no error messages for either LE or BE 64bit.  */\n+/* { dg-require-effective-target be } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mdejagnu-cpu=power6\" } */\n+\n+/* Verify compiler emits error message instead of ICE.  */\n+\n+/* Option -mno-avoid-indexed-addresses is to disable the unexpected\n+   warning on indexed addressing which can affect dg checks.  */\n+#pragma GCC target \"cpu=power10,no-avoid-indexed-addresses\"\n+int\n+main ()\n+{\n+  float *b;\n+  __vector_quad c;\n+  __builtin_mma_disassemble_acc (b, &c);\n+  /* { dg-error \"'__builtin_mma_disassemble_acc' requires the '-mmma' option\" \"\" { target *-*-* } .-1 } */\n+  return 0;\n+}\n+"}]}