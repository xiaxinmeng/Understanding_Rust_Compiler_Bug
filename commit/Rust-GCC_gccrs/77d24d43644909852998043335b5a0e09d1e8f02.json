{"sha": "77d24d43644909852998043335b5a0e09d1e8f02", "node_id": "C_kwDOANBUbNoAKDc3ZDI0ZDQzNjQ0OTA5ODUyOTk4MDQzMzM1YjVhMGUwOWQxZThmMDI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-26T11:29:26Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-30T11:59:10Z"}, "message": "Consolidate OpenACC \"gang reduction on an orphan loop\" checking\n\nNo need to implement separately in all front ends what we may implement in the\nmiddle end, once for all.\n\nFollow-up to preceding commit 2b7dac2c0dcb087da9e4018943c023c0678234a3\n\"Make OpenACC orphan gang reductions errors\".\n\n\tgcc/\n\t* omp-offload.c (oacc_loop_process): Implement \"gang reduction on\n\tan orphan loop\" checking.\n\tgcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): Remove \"gang reduction on an\n\torphan loop\" checking.\n\tgcc/cp/\n\t* semantics.c (finish_omp_clauses): Remove \"gang reduction on an\n\torphan loop\" checking.\n\tgcc/fortran/\n\t* openmp.c (resolve_oacc_loop_blocks): Remove \"gang reduction on\n\tan orphan loop\" checking.\n\t(oacc_is_parallel, oacc_is_kernels, oacc_is_serial)\n\t(oacc_is_compute_construct): Remove.\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/orphan-reductions-1.f90: Adjust.", "tree": {"sha": "22fe40ca5f07ac6450a8acbf250998fe02af2a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22fe40ca5f07ac6450a8acbf250998fe02af2a5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77d24d43644909852998043335b5a0e09d1e8f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d24d43644909852998043335b5a0e09d1e8f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d24d43644909852998043335b5a0e09d1e8f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d24d43644909852998043335b5a0e09d1e8f02/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f4c60457d1657cbd72015de3d818eb6462a0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f4c60457d1657cbd72015de3d818eb6462a0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f4c60457d1657cbd72015de3d818eb6462a0e9"}], "stats": {"total": 81, "additions": 20, "deletions": 61}, "files": [{"sha": "7524304f2bd3be9de506f6d55d9073338f9f5f9c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=77d24d43644909852998043335b5a0e09d1e8f02", "patch": "@@ -14135,14 +14135,6 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  goto check_dup_generic;\n \n \tcase OMP_CLAUSE_REDUCTION:\n-\t  if (ort == C_ORT_ACC && oacc_get_fn_attrib (current_function_decl)\n-\t      && omp_find_clause (clauses, OMP_CLAUSE_GANG))\n-\t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"gang reduction on an orphan loop\");\n-\t      remove = true;\n-\t      break;\n-\t    }\n \t  if (reduction_seen == 0)\n \t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n \t  else if (reduction_seen != -2"}, {"sha": "cd1956497f8cfe0e60034d7b802ee6a7fb1e81c8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=77d24d43644909852998043335b5a0e09d1e8f02", "patch": "@@ -6667,14 +6667,6 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_REDUCTION:\n-\t  if (ort == C_ORT_ACC && oacc_get_fn_attrib (current_function_decl)\n-\t      && omp_find_clause (clauses, OMP_CLAUSE_GANG))\n-\t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"gang reduction on an orphan loop\");\n-\t      remove = true;\n-\t      break;\n-\t    }\n \t  if (reduction_seen == 0)\n \t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n \t  else if (reduction_seen != -2"}, {"sha": "d120be814677e4d70be6828b75e39affeaf28502", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=77d24d43644909852998043335b5a0e09d1e8f02", "patch": "@@ -8322,31 +8322,6 @@ resolve_omp_do (gfc_code *code)\n     }\n }\n \n-static bool\n-oacc_is_parallel (gfc_code *code)\n-{\n-  return code->op == EXEC_OACC_PARALLEL || code->op == EXEC_OACC_PARALLEL_LOOP;\n-}\n-\n-static bool\n-oacc_is_kernels (gfc_code *code)\n-{\n-  return code->op == EXEC_OACC_KERNELS || code->op == EXEC_OACC_KERNELS_LOOP;\n-}\n-\n-static bool\n-oacc_is_serial (gfc_code *code)\n-{\n-  return code->op == EXEC_OACC_SERIAL || code->op == EXEC_OACC_SERIAL_LOOP;\n-}\n-\n-static bool\n-oacc_is_compute_construct (gfc_code *code)\n-{\n-  return (oacc_is_parallel (code)\n-\t  || oacc_is_kernels (code)\n-\t  || oacc_is_serial (code));\n-}\n \n static gfc_statement\n omp_code_to_statement (gfc_code *code)\n@@ -8650,18 +8625,6 @@ resolve_oacc_loop_blocks (gfc_code *code)\n   if (!oacc_is_loop (code))\n     return;\n \n-  if (code->op == EXEC_OACC_LOOP\n-      && code->ext.omp_clauses->lists[OMP_LIST_REDUCTION]\n-      && code->ext.omp_clauses->gang)\n-    {\n-      fortran_omp_context *c;\n-      for (c = omp_current_ctx; c; c = c->previous)\n-\tif (!oacc_is_loop (c->code))\n-\t  break;\n-      if (c == NULL || !(oacc_is_compute_construct (c->code)))\n-\tgfc_error (\"gang reduction on an orphan loop at %L\", &code->loc);\n-    }\n-\n   if (code->ext.omp_clauses->tile_list && code->ext.omp_clauses->gang\n       && code->ext.omp_clauses->worker && code->ext.omp_clauses->vector)\n     gfc_error (\"Tiled loop cannot be parallelized across gangs, workers and \""}, {"sha": "5110a42458413fb15b23424a8b6e6a6011dbee6b", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=77d24d43644909852998043335b5a0e09d1e8f02", "patch": "@@ -1380,10 +1380,10 @@ oacc_loop_xform_head_tail (gcall *from, int level)\n    partitioning level etc.  */\n \n static void\n-oacc_loop_process (oacc_loop *loop)\n+oacc_loop_process (oacc_loop *loop, int fn_level)\n {\n   if (loop->child)\n-    oacc_loop_process (loop->child);\n+    oacc_loop_process (loop->child, fn_level);\n \n   if (loop->mask && !loop->routine)\n     {\n@@ -1432,7 +1432,19 @@ oacc_loop_process (oacc_loop *loop)\n     }\n \n   if (loop->sibling)\n-    oacc_loop_process (loop->sibling);\n+    oacc_loop_process (loop->sibling, fn_level);\n+\n+\n+  /* OpenACC 2.6, 2.9.11. \"reduction clause\" places a restriction such that\n+     \"The 'reduction' clause may not be specified on an orphaned 'loop'\n+     construct with the 'gang' clause, or on an orphaned 'loop' construct that\n+     will generate gang parallelism in a procedure that is compiled with the\n+     'routine gang' clause.\"  */\n+  if (fn_level == GOMP_DIM_GANG\n+      && (loop->mask & GOMP_DIM_MASK (GOMP_DIM_GANG))\n+      && (loop->flags & OLF_REDUCTION))\n+    error_at (loop->loc,\n+\t      \"gang reduction on an orphan loop\");\n }\n \n /* Walk the OpenACC loop heirarchy checking and assigning the\n@@ -2072,7 +2084,7 @@ execute_oacc_loop_designation ()\n   if (is_oacc_parallel_kernels_gang_single)\n     gcc_checking_assert (dims[GOMP_DIM_GANG] == 1);\n \n-  oacc_loop_process (loops);\n+  oacc_loop_process (loops, fn_level);\n   if (dump_file)\n     {\n       fprintf (dump_file, \"OpenACC loops\\n\");"}, {"sha": "464dee1260aab1c7c513d2054f716383068aaaca", "filename": "gcc/testsuite/gfortran.dg/goacc/orphan-reductions-1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d24d43644909852998043335b5a0e09d1e8f02/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Forphan-reductions-1.f90?ref=77d24d43644909852998043335b5a0e09d1e8f02", "patch": "@@ -30,7 +30,7 @@ end subroutine s1\n \n subroutine s2\n   implicit none\n-  !$acc routine worker\n+  !$acc routine gang\n \n   integer, parameter :: n = 100\n   integer :: i, j, sum\n@@ -80,7 +80,7 @@ end function f1\n \n integer function f2 ()\n   implicit none\n-  !$acc routine worker\n+  !$acc routine gang\n \n   integer, parameter :: n = 100\n   integer :: i, j, sum\n@@ -132,7 +132,7 @@ end subroutine s3\n \n   subroutine s4\n     implicit none\n-    !$acc routine worker\n+    !$acc routine gang\n \n     integer, parameter :: n = 100\n     integer :: i, j, sum\n@@ -182,7 +182,7 @@ end function f3\n \n   integer function f4 ()\n     implicit none\n-    !$acc routine worker\n+    !$acc routine gang\n \n     integer, parameter :: n = 100\n     integer :: i, j, sum"}]}