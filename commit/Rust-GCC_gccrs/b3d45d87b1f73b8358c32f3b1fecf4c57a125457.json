{"sha": "b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNDVkODdiMWY3M2I4MzU4YzMyZjNiMWZlY2Y0YzU3YTEyNTQ1Nw==", "commit": {"author": {"name": "Florian Weimer", "email": "fw@deneb.enyo.de", "date": "2001-12-23T11:09:54Z"}, "committer": {"name": "Florian Weimer", "email": "fw@gcc.gnu.org", "date": "2001-12-23T11:09:54Z"}, "message": "gnat-style.texi (header): Add @dircategory, @direntry.\n\n\t* gnat-style.texi (header): Add @dircategory, @direntry.\n\t(title page): Remove date.\n\t(general) Add @./@: where approriate, and two spaces after the\n\tfull stop at the end of a sentence.  Use @samp markup when\n\treferring concrete lexical entities (keywords, attribute names\n\tetc.), and @syntax for ARM grammar elements. Use @r for English\n\ttext in comments.  Use @emph for emphasis.  Change \"if-statements\"\n\tetc. to \"if statements\" (without @samp). Break long lines.  Make\n\tcasing of section names consistent.\n\t(Identifiers): Use @samp markup for variable names.\n\t(Comments): Use @samp markup for comment characters. Line-end\n\tcomments may follow any Ada code, not just statements.  Fix\n\tmisspelling of \"Integer\" as \"integer\".\n\t(Loop statements): Do not use variable name \"I\", use \"J\".\n\t(Subprogram Declarations): Document alignment.\n\t(Subprogram Bodies, Block statements): Document empty line before\n\t\"begin\".\n\nFrom-SVN: r48285", "tree": {"sha": "903853645a7ebecea0af3fa29006cf81f30a21f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903853645a7ebecea0af3fa29006cf81f30a21f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d45d87b1f73b8358c32f3b1fecf4c57a125457/comments", "author": {"login": "fweimer", "id": 2729073, "node_id": "MDQ6VXNlcjI3MjkwNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2729073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer", "html_url": "https://github.com/fweimer", "followers_url": "https://api.github.com/users/fweimer/followers", "following_url": "https://api.github.com/users/fweimer/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer/subscriptions", "organizations_url": "https://api.github.com/users/fweimer/orgs", "repos_url": "https://api.github.com/users/fweimer/repos", "events_url": "https://api.github.com/users/fweimer/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e87ff3fab5e02c24e9e789055c060404dfad1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e87ff3fab5e02c24e9e789055c060404dfad1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e87ff3fab5e02c24e9e789055c060404dfad1b7"}], "stats": {"total": 250, "additions": 147, "deletions": 103}, "files": [{"sha": "97e9e5704bc903ffdc5cda853efcbdd373a3c770", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d45d87b1f73b8358c32f3b1fecf4c57a125457/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d45d87b1f73b8358c32f3b1fecf4c57a125457/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "patch": "@@ -1,3 +1,23 @@\n+2001-12-23  Florian Weimer  <fw@deneb.enyo.de>\n+\n+\t* gnat-style.texi (header): Add @dircategory, @direntry.\n+\t(title page): Remove date.\n+\t(general) Add @./@: where approriate, and two spaces after the\n+\tfull stop at the end of a sentence.  Use @samp markup when\n+\treferring concrete lexical entities (keywords, attribute names\n+\tetc.), and @syntax for ARM grammar elements. Use @r for English\n+\ttext in comments.  Use @emph for emphasis.  Change \"if-statements\"\n+\tetc. to \"if statements\" (without @samp). Break long lines.  Make\n+\tcasing of section names consistent.\n+\t(Identifiers): Use @samp markup for variable names.\n+\t(Comments): Use @samp markup for comment characters. Line-end\n+\tcomments may follow any Ada code, not just statements.  Fix\n+\tmisspelling of \"Integer\" as \"integer\".\n+\t(Loop statements): Do not use variable name \"I\", use \"J\".\n+\t(Subprogram Declarations): Document alignment.\n+\t(Subprogram Bodies, Block statements): Document empty line before\n+\t\"begin\".\n+\n 2001-12-22  Florian Weimer  <fw@deneb.enyo.de>\n \n \t* make.adb (Add_Switch): Make Generic_Position a procedure.  The"}, {"sha": "398d35d07b56df414cdff25455a379e80e07e66e", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 127, "deletions": 103, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d45d87b1f73b8358c32f3b1fecf4c57a125457/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d45d87b1f73b8358c32f3b1fecf4c57a125457/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=b3d45d87b1f73b8358c32f3b1fecf4c57a125457", "patch": "@@ -6,7 +6,7 @@\n @c                                                                            o\n @c                      G N A T   C O D I N G   S T Y L E                     o\n @c                                                                            o\n-@c                               $Revision$\n+@c                               $Revision: 1.3 $\n @c                                                                            o\n @c          Copyright (C) 1992-2001 Ada Core Technologies, Inc.               o\n @c                                                                            o\n@@ -25,6 +25,14 @@\n \n @setfilename gnat-style.info\n @settitle GNAT Coding Style\n+@dircategory Programming\n+@direntry \n+* gnat-style: (gnat-style).      GNAT Coding Style\n+@end direntry\n+\n+@macro syntax{element}\n+@t{\\element\\}\n+@end macro\n @c %**end of header\n \n @ifinfo\n@@ -38,8 +46,7 @@\n @sp 10\n @title GNAT Coding Style\n @subtitle A guide for GNAT developers\n-@subtitle Document revision level $Revision$\n-@subtitle Date: @today{}\n+@subtitle Document revision level $Revision: 1.3 $\n @author Ada Core Technologies, Inc.\n @end titlepage\n @raisesections\n@@ -65,7 +72,7 @@\n \n @noindent\n Most of GNAT is written in Ada using a consistent style to ensure\n-readability of the code. This document has been written to help\n+readability of the code.  This document has been written to help\n maintain this consistent style, while having a large group of developers \n work on the compiler.\n \n@@ -88,12 +95,12 @@ lookup style rules for particular constructs.\n \n @itemize @bullet\n @item\n-The character set used should be plain 7-bit ASCII.\n+The character set used should be plain 7-bit ASCII@.\n The only separators allowed are space and the end-of-line sequence. \n No other control character or format effector (such as HT, VT, FF) \n should be used.\n The normal end-of-line sequence is used, which may be LF, CR/LF or CR,\n-depending on the host system. An optional SUB (16#1A#) may be present as the \n+depending on the host system.  An optional SUB (16#1A#) may be present as the \n last character in the file on hosts using that character as file terminator.\n \n @item\n@@ -107,8 +114,8 @@ separator.\n Lines must not have trailing blanks.\n \n @item\n-Indentation is 3 characters per level for if-statements, loops, case\n-statements. For exact information on required spacing between lexical\n+Indentation is 3 characters per level for if statements, loops, case\n+statements.  For exact information on required spacing between lexical\n elements, see file @file{style.adb}.\n \n @end itemize\n@@ -120,25 +127,27 @@ elements, see file @file{style.adb}.\n Identifiers will start with an upper case letter, and each letter following\n an underscore will be upper case.  Short acronyms may be all upper case. \n All other letters are lower case.  \n-An exception is for identifiers matching a foreign language. In particular,\n-we use all lower case where appropriate for C.\n+An exception is for identifiers matching a foreign language.  In particular,\n+we use all lower case where appropriate for C@.\n \n @item\n Use underscores to separate words in an identifier.  \n \n @item Try to limit your use of abbreviations in identifiers. \n-It is ok to make a few abbreviations, explain what they mean, and then use them frequently, but don't use lots of obscure abbreviations. \n-An example is the @code{ALI} word which stands for Ada Library Information \n-and is by convention always written in upper-case when used in entity names.\n+It is ok to make a few abbreviations, explain what they mean, and then\n+use them frequently, but don't use lots of obscure abbreviations.  An\n+example is the @code{ALI} word which stands for Ada Library\n+Information and is by convention always written in upper-case when\n+used in entity names.\n \n @smallexample\n        procedure Find_ALI_Files;\n @end smallexample\n \n @item\n-Don't use the variable I, use J instead, I is too easily mixed up with\n-1 in some fonts. Similarly don't use the variable O, which is too easily\n-mixed up with zero.\n+Don't use the variable @samp{I}, use @samp{J} instead, @samp{I} is too\n+easily mixed up with @samp{1} in some fonts.  Similarly don't use the\n+variable @samp{O}, which is too easily mixed up with @samp{0}.\n @end itemize\n \n @subsection Numeric Literals\n@@ -166,56 +175,57 @@ Reserved words use all lower case.\n @end smallexample\n \n @item\n-The words \"Access\", \"Delta\" and \"Digits\" are capitalized when used\n-as attribute_designator.\n+The words @samp{Access}, @samp{Delta} and @samp{Digits} are\n+capitalized when used as @syntax{attribute_designator}.\n @end itemize\n \n @subsection Comments\n @c  -------------------------------------------------------------------------\n \n @itemize @bullet\n @item\n-Comment start with @code{--  } (ie @code{--} followed by two spaces).\n-The only exception to this rule (i.e. one space is tolerated) is when the\n-comment ends with @code{--}.\n-It also accepted to have only one space between @code{--} and the start \n+Comment start with @samp{--  } (i.e.@: @samp{--} followed by two spaces).\n+The only exception to this rule (i.e.@: one space is tolerated) is when the\n+comment ends with @samp{ --}.\n+It also accepted to have only one space between @samp{--} and the start \n of the comment when the comment is at the end of a line, \n-after an Ada statement.\n+after some Ada code.\n \n @item\n Every sentence in a comment should start with an upper-case letter (including\n the first letter of the comment).\n \n @item\n-When declarations are commented with \"hanging\" comments, i.e. comments\n-after the declaration, there is no blank line before the comment, and\n-if it is absolutely necessary to have blank lines within the comments\n-these blank lines *do* have a -- (unlike the normal rule, which is to\n-use entirely blank lines for separating comment paragraphs).\n-The comment start at same level of indentation as code they are commenting.\n+When declarations are commented with ``hanging'' comments, i.e.@:\n+comments after the declaration, there is no blank line before the\n+comment, and if it is absolutely necessary to have blank lines within\n+the comments these blank lines @emph{do} have a @samp{--} (unlike the\n+normal rule, which is to use entirely blank lines for separating\n+comment paragraphs).  The comment start at same level of indentation\n+as code they are commenting.\n \n @smallexample\n-       z : integer;\n-       --  Integer value for storing value of z\n+       z : Integer;\n+       --  @r{Integer value for storing value of} z\n        --\n-       --  The previous line was a blank line\n+       --  @r{The previous line was a blank line.}\n @end smallexample\n \n @item\n Comments that are dubious or incomplete or comment on possibly\n-wrong or incomplete code should be preceded or followed by ???\n+wrong or incomplete code should be preceded or followed by @samp{???}@.\n \n @item\n Comments in a subprogram body must generally be surrounded by blank lines,\n-except after a \"begin\":\n+except after a @samp{begin}:\n \n @smallexample\n        begin\n-          --  Comment for the next statement\n+          --  @r{Comment for the next statement}\n \n           A := 5;\n \n-          --  Comment for the B statement\n+          --  @r{Comment for the B statement}\n \n           B := 6;\n @end smallexample\n@@ -225,22 +235,23 @@ In sequences of statements, comments at the end of the lines should be\n aligned.\n \n @smallexample\n-        My_Identifier := 5;      --  First comment\n-        Other_Id := 6;           --  Second comment\n+        My_Identifier := 5;      --  @r{First comment}\n+        Other_Id := 6;           --  @r{Second comment}\n @end smallexample\n \n @item\n-Short comments that fit on a single line are NOT ended with a period.\n-Comments taking more than a line are punctuated in the normal manner.\n+Short comments that fit on a single line are @emph{not} ended with a\n+period.  Comments taking more than a line are punctuated in the normal\n+manner.\n \n @item\n Comments should focus on why instead of what.\n Descriptions of what subprograms do go with the specification.\n \n @item\n Comments describing a subprogram spec should specifically mention the\n-formal argument names. General rule: write a comment that does not\n-depend on the names of things. The names are supplementary, not\n+formal argument names.  General rule: write a comment that does not\n+depend on the names of things.  The names are supplementary, not\n sufficient, as comments.\n \n @item\n@@ -254,7 +265,7 @@ Do NOT put two spaces after periods in comments.\n \n @itemize @bullet\n @item\n-In entity declarations, colons must be surrounded by spaces. Colons\n+In entity declarations, colons must be surrounded by spaces.  Colons\n should be aligned.\n \n @smallexample\n@@ -272,20 +283,20 @@ before the first local subprogram body.\n \n @item\n Do not declare discriminated record types where the discriminant is used\n-for constraining an unconstrained array type. (Discriminated\n+for constraining an unconstrained array type.  (Discriminated\n records for a variant part are allowed.)\n \n @item\n Don't declare local entities that hide global entities.\n \n @item\n Don't declare multiple variables in one declaration that spans lines. \n-Start a new declaration on each line, instead\n+Start a new declaration on each line, instead.\n \n @item\n-The defining_identifiers of global declarations serve as comments of a sort. \n-So don't choose terse names, but look for names that give useful information \n-instead.\n+The @syntax{defining_identifier}s of global declarations serve as\n+comments of a sort.  So don't choose terse names, but look for names\n+that give useful information instead.\n \n @item\n Local names can be shorter, because they are used only within \n@@ -330,47 +341,48 @@ Use parentheses where they make the intended order of evaluation clearer:\n @item\n Use only one statement or label per line.\n @item\n-A longer sequence_of_statements may be divided in logical groups\n-or separated from surrounding code using a blank line.\n+A longer @syntax{sequence_of_statements} may be divided in logical\n+groups or separated from surrounding code using a blank line.\n @end itemize\n \n @subsection If Statements\n @c  -------------------------------------------------------------------------\n @itemize @bullet\n @item\n-When the \"if\", \"elsif\" or \"else\" keywords fit on the same line with the\n-condition and the \"then\" keyword, then the statement is formatted as follows:\n+When the @samp{if}, @samp{elsif} or @samp{else} keywords fit on the\n+same line with the condition and the @samp{then} keyword, then the\n+statement is formatted as follows:\n \n @smallexample\n-        if <condition> then\n+        if @var{condition} then\n            ...\n-        elsif <condition> then\n+        elsif @var{condition} then\n            ...\n         else\n            ...\n         end if;\n @end smallexample\n \n @noindent\n-When the above layout is not possible, \"then\" should be aligned with \"if\",\n-and conditions should preferably be split before an \"and\" or \"or\" keyword\n-a follows:\n+When the above layout is not possible, @samp{then} should be aligned\n+with @samp{if}, and conditions should preferably be split before an\n+@samp{and} or @samp{or} keyword a follows:\n \n @smallexample\n-        if <long_condition_that_has_to_be_split>\n-          and then <continued_on_the_next_line>\n+        if @var{long_condition_that_has_to_be_split}\n+          and then @var{continued_on_the_next_line}\n         then\n            ...\n         end if;\n @end smallexample\n \n @noindent\n-The \"elsif\", \"else\" and \"end if\" always line up with the \"if\" keyword. The\n-preferred location for splitting the line is before \"and\" or \"or\". The\n-continuation of a condition is indented with two spaces or as many as needed\n-to make nesting clear.\n-As exception, if conditions are closely related either of the following is\n-allowed:\n+The @samp{elsif}, @samp{else} and @samp{end if} always line up with\n+the @samp{if} keyword.  The preferred location for splitting the line\n+is before @samp{and} or @samp{or}.  The continuation of a condition is\n+indented with two spaces or as many as needed to make nesting clear.\n+As exception, if conditions are closely related either of the\n+following is allowed:\n \n @smallexample\n      if x = lakdsjfhlkashfdlkflkdsalkhfsalkdhflkjdsahf\n@@ -387,22 +399,23 @@ allowed:\n @end smallexample\n \n @item\n-Conditions should use short-circuit forms (\"and then\", \"or else\").\n+Conditions should use short-circuit forms (@samp{and then}, \n+@samp{or else}).\n \n @item\n-Complex conditions in if-statements are indented two characters:\n+Complex conditions in if statements are indented two characters:\n \n @smallexample\n-      if this_complex_condition\n-        and then that_other_one\n-        and then one_last_one\n+      if @var{this_complex_condition}\n+        and then @var{that_other_one}\n+        and then @var{one_last_one}\n       then\n          ...\n @end smallexample\n \n @item\n-Every \"if\" block is preceded and followed by a blank line, except\n-where it begins or ends a sequence_of_statements.\n+Every @samp{if} block is preceded and followed by a blank line, except\n+where it begins or ends a @syntax{sequence_of_statements}.\n \n @smallexample\n         A := 5;\n@@ -415,53 +428,54 @@ where it begins or ends a sequence_of_statements.\n @end smallexample\n @end itemize\n \n-@subsection Case statements\n+@subsection Case Statements\n @itemize @bullet\n \n @item\n-Layout is as below. For long case statements, the extra indentation\n+Layout is as below.  For long case statements, the extra indentation\n can be saved by aligning the when clauses with the opening case.\n \n @smallexample\n-       case <expression> is\n-          when <condition> =>\n+       case @var{expression} is\n+          when @var{condition} =>\n              ...\n-          when <condition> =>\n+          when @var{condition} =>\n              ...\n        end case;\n @end smallexample\n @end itemize\n \n-@subsection Loop statements\n+@subsection Loop Statements\n @itemize @bullet\n \n @noindent\n-When possible, have \"for\" or \"while\" on one line with the condition\n-and the \"loop\" keyword.\n+When possible, have @samp{for} or @samp{while} on one line with the\n+condition and the @samp{loop} keyword.\n \n @smallexample\n-       for I in S'Range loop\n+       for J in S'Range loop\n           ...\n        end loop;\n @end smallexample\n \n @noindent\n-If the condition is too long, split the condition (see if_statement)\n-and align \"loop\" with the \"for\" or \"while\" keyword.\n+If the condition is too long, split the condition (see ``If\n+statements'' above) and align @samp{loop} with the @samp{for} or\n+@samp{while} keyword.\n \n @smallexample\n-      while <long_condition_that_has_to_be_split>\n-        and then <continued_on_the_next_line>\n+      while @var{long_condition_that_has_to_be_split}\n+        and then @var{continued_on_the_next_line}\n       loop\n          ...\n       end loop;\n @end smallexample\n \n @noindent\n-If the loop_statement has an identifier, it is layout as follows:\n+If the @syntax{loop_statement} has an identifier, it is laid out as follows:\n \n @smallexample\n-      Outer : while not <condition> loop\n+      Outer : while not @var{condition} loop\n          ...\n       end Outer;\n @end smallexample\n@@ -471,12 +485,14 @@ If the loop_statement has an identifier, it is layout as follows:\n @itemize @bullet\n \n @item\n-The (optional) \"declare\", \"begin\" and \"end\" statements are aligned,\n-except when the block_statement is named:\n+The @samp{declare} (optional), @samp{begin} and @samp{end} statements\n+are aligned, except when the @syntax{block_statement} is named.  There\n+is a blank line before the @samp{begin} keyword:\n \n @smallexample\n       Some_Block : declare\n          ...\n+\n       begin\n          ...\n       end Some_Block;\n@@ -495,14 +511,15 @@ except when the block_statement is named:\n @itemize @bullet\n \n @item\n-Do not write the \"in\" for parameters, especially in functions:\n+Do not write the @samp{in} for parameters, especially in functions:\n \n @smallexample\n       function Length (S : String) return Integer;\n @end smallexample\n \n @item\n When the declaration line for a procedure or a function is too long, fold it.\n+In this case, align the colons, and, for functions, the result type.\n \n @smallexample\n       function Head\n@@ -541,18 +558,24 @@ format:\n       procedure My_Function is\n       begin\n @end smallexample\n+\n Note that the name in the header is preceded by a single space, \n not two spaces as for other comments.\n \n @item\n-Every subprogram body must have a preceding subprogram_declaration.\n+Every subprogram body must have a preceding @syntax{subprogram_declaration}.\n+\n+@item\n+If there any declarations in a subprogram, the @samp{begin} keyword is\n+preceded by a blank line.\n \n @item\n-If declarations of a subprogram contain at least one nested subprogram\n-body, then just before the begin is a line:\n+If the declarations in a subprogram contain at least one nested\n+subprogram body, then just before the of the enclosing subprogram\n+@samp{begin}, there is a line:\n \n @smallexample\n-        --  Start of processing for bla bla\n+        --  @r{Start of processing for @var{Enclosing_Subprogram}}\n \n \tbegin\n @end smallexample\n@@ -576,8 +599,8 @@ All program units and subprograms have their name at the end:\n @end smallexample\n \n @item\n-We will use the style of use-ing with-ed packages, with the context\n-clauses looking like:\n+We will use the style of @samp{use}-ing @samp{with}-ed packages, with\n+the context clauses looking like:\n \n @smallexample\n       with A; use A;\n@@ -586,7 +609,7 @@ clauses looking like:\n \n @item\n Names declared in the visible part of packages should be\n-unique, to prevent name clashes when the packages are \"use\"d.\n+unique, to prevent name clashes when the packages are @samp{use}d.\n \n @smallexample\n       package Entity is\n@@ -597,7 +620,7 @@ unique, to prevent name clashes when the packages are \"use\"d.\n \n @item\n After the file header comment, the context clause and unit specification\n-should be the first thing in a program_unit.\n+should be the first thing in a @syntax{program_unit}.\n @end itemize\n \n @c  -------------------------------------------------------------------------\n@@ -607,16 +630,17 @@ should be the first thing in a program_unit.\n \n @itemize @bullet\n @item\n-Every GNAT source file must be compiled with the \"-gnatg\" switch to check\n-the coding style (Note that you should look at @file{style.adb} to \n-see the lexical rules enforced by -gnatg).\n+Every GNAT source file must be compiled with the @option{-gnatg}\n+switch to check the coding style (Note that you should look at\n+@file{style.adb} to see the lexical rules enforced by\n+@option{-gnatg}).\n \n @item\n Each source file should contain only one compilation unit.\n \n @item\n-Filenames should be 8 characters or less followed by the \".adb\" extension\n-for a body or \".ads\" for a spec.\n+Filenames should be 8 characters or less followed by the @samp{.adb}\n+extension for a body or @samp{.ads} for a spec.\n \n @item\n Unit names should be distinct when krunched to 8 characters "}]}