{"sha": "9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlMmM3MWE0N2NkZDI1MzFjMzU5ZDIwYzgzOWMxYTBiNmNjY2ZlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-07-05T23:33:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-05T23:33:36Z"}, "message": "cse.c (cse_insn): When SETting (MEM (ADDRESSOF (X))) to Y...\n\n        * cse.c (cse_insn): When SETting (MEM (ADDRESSOF (X))) to Y,\n        don't claim that the former is equivalent to the latter.\n\nFrom-SVN: r20935", "tree": {"sha": "817f057be0d30d722b3e39eb6880d25dffc2c751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817f057be0d30d722b3e39eb6880d25dffc2c751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6/comments", "author": null, "committer": null, "parents": [{"sha": "adc05e6ce6c535b2dcc218e0486dd6298f5c7ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc05e6ce6c535b2dcc218e0486dd6298f5c7ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc05e6ce6c535b2dcc218e0486dd6298f5c7ba8"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "30275b20a2639eeff06084abc81e71d56c2dd9f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "patch": "@@ -1,3 +1,8 @@\n+Mon Jul  6 00:28:43 1998  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cse.c (cse_insn): When SETting (MEM (ADDRESSOF (X))) to Y,\n+\tdon't claim that the former is equivalent to the latter.\n+\n Sun Jul  5 23:58:19 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* combine.c (simplify_comparison): Do not commute a AND into"}, {"sha": "055bbd90e2c20fbc67f1355cd11eec6c5904072d", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de2c71a47cdd2531c359d20c839c1a0b6cccfe6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=9de2c71a47cdd2531c359d20c839c1a0b6cccfe6", "patch": "@@ -7405,6 +7405,7 @@ cse_insn (insn, in_libcall_block)\n     if (sets[i].rtl)\n       {\n \tregister rtx dest = SET_DEST (sets[i].rtl);\n+\trtx inner_dest = sets[i].inner_dest;\n \tregister struct table_elt *elt;\n \n \t/* Don't record value if we are not supposed to risk allocating\n@@ -7453,8 +7454,18 @@ cse_insn (insn, in_libcall_block)\n \t      sets[i].dest_hash = HASH (dest, GET_MODE (dest));\n \t    }\n \n-\telt = insert (dest, sets[i].src_elt,\n-\t\t      sets[i].dest_hash, GET_MODE (dest));\n+\tif (GET_CODE (inner_dest) == MEM\n+\t    && GET_CODE (XEXP (inner_dest, 0)) == ADDRESSOF)\n+\t  /* Given (SET (MEM (ADDRESSOF (X))) Y) we don't want to say\n+\t     that (MEM (ADDRESSOF (X))) is equivalent to Y. \n+\t     Consider the case in which the address of the MEM is\n+\t     passed to a function, which alters the MEM.  Then, if we\n+\t     later use Y instead of the MEM we'll miss the update.  */\n+\t  elt = insert (dest, 0, sets[i].dest_hash, GET_MODE (dest));\n+\telse\n+\t  elt = insert (dest, sets[i].src_elt,\n+\t\t\tsets[i].dest_hash, GET_MODE (dest));\n+\n \telt->in_memory = (GET_CODE (sets[i].inner_dest) == MEM\n \t\t\t  && (! RTX_UNCHANGING_P (sets[i].inner_dest)\n \t\t\t      || FIXED_BASE_PLUS_P (XEXP (sets[i].inner_dest,"}]}