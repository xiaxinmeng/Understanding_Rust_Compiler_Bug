{"sha": "283126182e96c60b57f8a554b4850d573341797b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzMTI2MTgyZTk2YzYwYjU3ZjhhNTU0YjQ4NTBkNTczMzQxNzk3Yg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2012-09-16T17:36:56Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-09-16T17:36:56Z"}, "message": "Add the rice distribution as an extension.\n\nFrom-SVN: r191362", "tree": {"sha": "60ba16a7028598bfffd663a2c5ffbc8dfc510b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ba16a7028598bfffd663a2c5ffbc8dfc510b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283126182e96c60b57f8a554b4850d573341797b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283126182e96c60b57f8a554b4850d573341797b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283126182e96c60b57f8a554b4850d573341797b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283126182e96c60b57f8a554b4850d573341797b/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfcb02b2080a6b35e849e9a4ad30075fa9fc6079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcb02b2080a6b35e849e9a4ad30075fa9fc6079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcb02b2080a6b35e849e9a4ad30075fa9fc6079"}], "stats": {"total": 633, "additions": 618, "deletions": 15}, "files": [{"sha": "33489e2cc9a0bf0bd1d3fb539456076e841cc644", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -1,3 +1,21 @@\n+2012-09-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/ext/random: Add __gnu_cxx::rice_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::rice_distribution<>.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\toperators/equal.cc: New file.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\toperators/serialize.cc: New file.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\toperators/inequal.cc: New file.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\tcons/parms.cc: New file.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\tcons/default.cc: New file.\n+\t* testsuite/26_numerics/random/rice_distribution/\n+\trequirements/typedefs.cc: New file.\n+\n 2012-09-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* configure: Regenerated."}, {"sha": "3011f39109ade82d16d924f634d3f50de067bb8e", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 259, "deletions": 15, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -531,16 +531,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n-      /**\n-       * @brief Return true if two beta distributions have the same\n-       *        parameters and the sequences that would be generated\n-       *        are equal.\n-       */\n-      friend bool\n-      operator==(const beta_distribution& __d1,\n-\t\t const beta_distribution& __d2)\n-      { return __d1.param() == __d2.param(); }\n-\n       /**\n        * @brief Inserts a %beta_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -581,14 +571,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two beta distributions have the same\n+   *        parameters and the sequences that would be generated\n+   *        are equal.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n+\t       const __gnu_cxx::beta_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n   /**\n    * @brief Return true if two beta distributions are different.\n    */\n-   template<typename _RealType>\n-     inline bool\n-     operator!=(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n-\t\tconst __gnu_cxx::beta_distribution<_RealType>& __d2)\n-    { return !(__d1 == __d2); }\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n+\t       const __gnu_cxx::beta_distribution<_RealType>& __d2)\n+   { return !(__d1 == __d2); }\n \n \n   /**\n@@ -896,6 +897,249 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(__d1 == __d2); }\n \n \n+  /**\n+   * @brief A Rice continuous distribution for random numbers.\n+   *\n+   * The formula for the Rice probability density function is\n+   * @f[\n+   *     p(x|\\nu,\\sigma) = \\frac{x}{\\sigma^2}\n+   *                       \\exp\\left(-\\frac{x^2+\\nu^2}{2\\sigma^2}\\right)\n+   *                       I_0\\left(\\frac{x \\nu}{\\sigma^2}\\right)\n+   * @f]\n+   * where @f$I_0(z)@f$ is the modified Bessel function of the first kind\n+   * of order 0 and @f$\\nu >= 0@f$ and @f$\\sigma > 0@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$\\sqrt{\\pi/2}L_{1/2}(-\\nu^2/2\\sigma^2)@f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$2\\sigma^2 + \\nu^2\n+   *                   + (\\pi\\sigma^2/2)L^2_{1/2}(-\\nu^2/2\\sigma^2)@f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty)@f$</td></tr>\n+   * </table>\n+   * where @f$L_{1/2}(x)@f$ is the Laguerre polynomial of order 1/2.\n+   */\n+  template<typename _RealType = double>\n+    class\n+    rice_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef rice_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __nu = result_type(0),\n+\t\t   result_type __sigma = result_type(1))\n+\t: _M_nu(__nu), _M_sigma(__sigma)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_nu >= result_type(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_sigma > result_type(0));\n+\t}\n+\n+\tresult_type\n+\tnu() const\n+\t{ return _M_nu; }\n+\n+\tresult_type\n+\tsigma() const\n+\t{ return _M_sigma; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_nu == __p2._M_nu\n+              && __p1._M_sigma == __p2._M_sigma; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_nu;\n+\tresult_type _M_sigma;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      rice_distribution(result_type __nu = result_type(0),\n+\t\t\tresult_type __sigma = result_type(1))\n+      : _M_param(__nu, __sigma),\n+\t_M_ndx(__nu, __sigma),\n+\t_M_ndy(result_type(0), __sigma)\n+      { }\n+\n+      explicit\n+      rice_distribution(const param_type& __p)\n+      : _M_param(__p),\n+\t_M_ndx(__p.nu(), __p.sigma()),\n+\t_M_ndy(result_type(0), __p.sigma())\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      {\n+\t_M_ndx.reset();\n+\t_M_ndy.reset();\n+      }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      nu() const\n+      { return _M_param.nu(); }\n+\n+      result_type\n+      sigma() const\n+      { return _M_param.sigma(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return result_type(0); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{\n+\t  result_type __x = this->_M_ndx(__urng);\n+\t  result_type __y = this->_M_ndy(__urng);\n+\t  return std::hypot(__x, __y);\n+\t}\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+        {\n+\t  typename std::normal_distribution<result_type>::param_type\n+\t    __px(__p.nu(), __p.sigma()), __py(result_type(0), __p.sigma());\n+\t  result_type __x = this->_M_ndx(__px, __urng);\n+\t  result_type __y = this->_M_ndy(__py, __urng);\n+\t  return std::hypot(__x, __y);\n+\t}\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two Rice distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const rice_distribution<_RealType1>& __d1,\n+\t\t   const rice_distribution<_RealType1>& __d2)\n+        { return (__d1.param() == __d2.param()\n+\t\t  && __d1._M_ndx == __d2._M_ndx\n+\t\t  && __d1._M_ndy == __d2._M_ndy); }\n+\n+      /**\n+       * @brief Inserts a %rice_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %rice_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const rice_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %rice_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %rice_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   rice_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+\n+      std::normal_distribution<result_type> _M_ndx;\n+      std::normal_distribution<result_type> _M_ndy;\n+    };\n+\n+  /**\n+   * @brief Return true if two Rice distributions are not equal.\n+   */\n+  template<typename _RealType1>\n+    inline bool\n+    operator!=(const rice_distribution<_RealType1>& __d1,\n+\t       const rice_distribution<_RealType1>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "6aa049a4f87c1961ae57d5806f12486ed432605b", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -751,6 +751,78 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      rice_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    typename std::normal_distribution<result_type>::param_type\n+\t      __px(__p.nu(), __p.sigma()), __py(result_type(0), __p.sigma());\n+\t    result_type __x = this->_M_ndx(__px, __urng);\n+\t    result_type __y = this->_M_ndy(__py, __urng);\n+\t    *__f++ = std::hypot(__x, __y);\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const rice_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.nu() << __space << __x.sigma();\n+      __os << __space << __x._M_ndx;\n+      __os << __space << __x._M_ndy;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       rice_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __nu, __sigma;\n+      __is >> __nu >> __sigma;\n+      __is >> __x._M_ndx;\n+      __is >> __x._M_ndy;\n+      __x.param(typename rice_distribution<_RealType>::\n+\t\tparam_type(__nu, __sigma));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "3a49140fcb9c67b0f51abf544f2d7abe07dcc7da", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/cons/default.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template rice_distribution [rand.dist.ext.rice]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::rice_distribution<> u;\n+  VERIFY( u.nu() == 0.0 );\n+  VERIFY( u.sigma() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::rice_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fa79ef521ae4154faa26ec3c4195fc94e0cd54aa", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/cons/parms.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template rice_distribution [rand.dist.ext.rice]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::rice_distribution<> u(1.5, 3.0);\n+  VERIFY( u.nu() == 1.5 );\n+  VERIFY( u.sigma() == 3.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::rice_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2539d6ed42b3deda2fa6c5ab04afd13d01c8aa12", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fequal.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template rice_distribution [rand.dist.ext.rice]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::rice_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a3f15124af9bcc390dff8a036eded93ca1c3e3fd", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Finequal.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template rice_distribution [rand.dist.ext.rice]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::rice_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d39c3098e5dbd707ddd316c77cf52c3f21ae3dd", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Foperators%2Fserialize.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template rice_distribution [rand.dist.ext.rice]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::rice_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b524a7b5aa3ab9fbc12d1974d085c7b8d04c007b", "filename": "libstdc++-v3/testsuite/26_numerics/random/rice_distribution/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283126182e96c60b57f8a554b4850d573341797b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frice_distribution%2Frequirements%2Ftypedefs.cc?ref=283126182e96c60b57f8a554b4850d573341797b", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-01-28  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template rice_distribution [rand.dist.ext.rice]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::rice_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}