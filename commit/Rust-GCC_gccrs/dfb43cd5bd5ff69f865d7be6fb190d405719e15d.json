{"sha": "dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiNDNjZDViZDVmZjY5Zjg2NWQ3YmU2ZmIxOTBkNDA1NzE5ZTE1ZA==", "commit": {"author": {"name": "Pierre Vittet", "email": "piervit@pvittet.com", "date": "2011-06-20T08:05:02Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2011-06-20T08:05:02Z"}, "message": "c-pragma.h (pragma_handler_1arg, [...]): New handler.\n\n\n2011-06-20  Pierre Vittet  <piervit@pvittet.com>\n\n\t* c-pragma.h (pragma_handler_1arg, pragma_handler_2arg): New\n\thandler.\n\t(gen_pragma_handler): New union.\n\t(internal_pragma_handler): New type.\n\t(c_register_pragma_with_data)\n\t(c_register_pragma_with_expansion_and_data): New functions.\n\n\t* c-pragma.c (registered_pragmas, c_register_pragma_1)\n\t(c_register_pragma, c_register_pragma_with_expansion)\n\t(c_invoke_pragma_handler): Changed to work with\n\tinternal_pragma_handler.\n\t(c_register_pragma_with_data)\n\t(c_register_pragma_with_expansion_and_data): New functions.\n\nFrom-SVN: r175202", "tree": {"sha": "f39694d61707ef7b710af0ef103468e59865e2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f39694d61707ef7b710af0ef103468e59865e2f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/comments", "author": {"login": "Piervit", "id": 598737, "node_id": "MDQ6VXNlcjU5ODczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/598737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Piervit", "html_url": "https://github.com/Piervit", "followers_url": "https://api.github.com/users/Piervit/followers", "following_url": "https://api.github.com/users/Piervit/following{/other_user}", "gists_url": "https://api.github.com/users/Piervit/gists{/gist_id}", "starred_url": "https://api.github.com/users/Piervit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Piervit/subscriptions", "organizations_url": "https://api.github.com/users/Piervit/orgs", "repos_url": "https://api.github.com/users/Piervit/repos", "events_url": "https://api.github.com/users/Piervit/events{/privacy}", "received_events_url": "https://api.github.com/users/Piervit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bae1d98650efce91703cc4cb37231bf8c12ef94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bae1d98650efce91703cc4cb37231bf8c12ef94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bae1d98650efce91703cc4cb37231bf8c12ef94"}], "stats": {"total": 157, "additions": 136, "deletions": 21}, "files": [{"sha": "afa31de9a587cb322495ab12bf04e85639199325", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "patch": "@@ -1,3 +1,20 @@\n+\n+2011-06-20  Pierre Vittet  <piervit@pvittet.com>\n+\n+\t* c-pragma.h (pragma_handler_1arg, pragma_handler_2arg): New\n+\thandler.\n+\t(gen_pragma_handler): New union.\n+\t(internal_pragma_handler): New type.\n+\t(c_register_pragma_with_data)\n+\t(c_register_pragma_with_expansion_and_data): New functions.\n+\n+\t* c-pragma.c (registered_pragmas, c_register_pragma_1)\n+\t(c_register_pragma, c_register_pragma_with_expansion)\n+\t(c_invoke_pragma_handler): Changed to work with\n+\tinternal_pragma_handler.\n+\t(c_register_pragma_with_data)\n+\t(c_register_pragma_with_expansion_and_data): New functions.\n+\n 2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c: Include common/common-target.h."}, {"sha": "93735aa252388d99ab735b601c1942af0e1fce4b", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 85, "deletions": 17, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "patch": "@@ -1147,12 +1147,11 @@ handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n     }\n }\n \n-/* A vector of registered pragma callbacks.  */\n+/* A vector of registered pragma callbacks, which is never freed.   */\n+DEF_VEC_O (internal_pragma_handler);\n+DEF_VEC_ALLOC_O (internal_pragma_handler, heap);\n \n-DEF_VEC_O (pragma_handler);\n-DEF_VEC_ALLOC_O (pragma_handler, heap);\n-\n-static VEC(pragma_handler, heap) *registered_pragmas;\n+static VEC(internal_pragma_handler, heap) *registered_pragmas;\n \n typedef struct\n {\n@@ -1216,7 +1215,7 @@ c_pp_lookup_pragma (unsigned int id, const char **space, const char **name)\n \n static void\n c_register_pragma_1 (const char *space, const char *name,\n-\t\t     pragma_handler handler, bool allow_expansion)\n+                     internal_pragma_handler ihandler, bool allow_expansion)\n {\n   unsigned id;\n \n@@ -1235,8 +1234,9 @@ c_register_pragma_1 (const char *space, const char *name,\n     }\n   else\n     {\n-      VEC_safe_push (pragma_handler, heap, registered_pragmas, &handler);\n-      id = VEC_length (pragma_handler, registered_pragmas);\n+      VEC_safe_push (internal_pragma_handler, heap, registered_pragmas,\n+                     &ihandler);\n+      id = VEC_length (internal_pragma_handler, registered_pragmas);\n       id += PRAGMA_FIRST_EXTERNAL - 1;\n \n       /* The C++ front end allocates 6 bits in cp_token; the C front end\n@@ -1248,28 +1248,95 @@ c_register_pragma_1 (const char *space, const char *name,\n \t\t\t\tallow_expansion, false);\n }\n \n+/* Register a C pragma handler, using a space and a name.  It disallows pragma\n+   expansion (if you want it, use c_register_pragma_with_expansion instead).  */\n+void\n+c_register_pragma (const char *space, const char *name,\n+                   pragma_handler_1arg handler)\n+{\n+  internal_pragma_handler ihandler;\n+\n+  ihandler.handler.handler_1arg = handler;\n+  ihandler.extra_data = false;\n+  ihandler.data = NULL;\n+  c_register_pragma_1 (space, name, ihandler, false);\n+}\n+\n+/* Register a C pragma handler, using a space and a name, it also carries an\n+   extra data field which can be used by the handler.  It disallows pragma\n+   expansion (if you want it, use c_register_pragma_with_expansion_and_data\n+   instead).  */\n void\n-c_register_pragma (const char *space, const char *name, pragma_handler handler)\n+c_register_pragma_with_data (const char *space, const char *name,\n+                             pragma_handler_2arg handler, void * data)\n {\n-  c_register_pragma_1 (space, name, handler, false);\n+  internal_pragma_handler ihandler;\n+\n+  ihandler.handler.handler_2arg = handler;\n+  ihandler.extra_data = true;\n+  ihandler.data = data;\n+  c_register_pragma_1 (space, name, ihandler, false);\n }\n \n+/* Register a C pragma handler, using a space and a name.  It allows pragma\n+   expansion as in the following example:\n+\n+   #define NUMBER 10\n+   #pragma count (NUMBER)\n+\n+   Name expansion is still disallowed.  */\n void\n c_register_pragma_with_expansion (const char *space, const char *name,\n-\t\t\t\t  pragma_handler handler)\n+\t\t\t\t  pragma_handler_1arg handler)\n {\n-  c_register_pragma_1 (space, name, handler, true);\n+  internal_pragma_handler ihandler;\n+\n+  ihandler.handler.handler_1arg = handler;\n+  ihandler.extra_data = false;\n+  ihandler.data = NULL;\n+  c_register_pragma_1 (space, name, ihandler, true);\n+}\n+\n+/* Register a C pragma handler, using a space and a name, it also carries an\n+   extra data field which can be used by the handler.  It allows pragma\n+   expansion as in the following example:\n+\n+   #define NUMBER 10\n+   #pragma count (NUMBER)\n+\n+   Name expansion is still disallowed.  */\n+void\n+c_register_pragma_with_expansion_and_data (const char *space, const char *name,\n+                                           pragma_handler_2arg handler,\n+                                           void *data)\n+{\n+  internal_pragma_handler ihandler;\n+\n+  ihandler.handler.handler_2arg = handler;\n+  ihandler.extra_data = true;\n+  ihandler.data = data;\n+  c_register_pragma_1 (space, name, ihandler, true);\n }\n \n void\n c_invoke_pragma_handler (unsigned int id)\n {\n-  pragma_handler handler;\n+  internal_pragma_handler *ihandler;\n+  pragma_handler_1arg handler_1arg;\n+  pragma_handler_2arg handler_2arg;\n \n   id -= PRAGMA_FIRST_EXTERNAL;\n-  handler = *VEC_index (pragma_handler, registered_pragmas, id);\n-\n-  handler (parse_in);\n+  ihandler = VEC_index (internal_pragma_handler, registered_pragmas, id);\n+  if (ihandler->extra_data)\n+    {\n+      handler_2arg = ihandler->handler.handler_2arg;\n+      handler_2arg (parse_in, ihandler->data);\n+    }\n+  else\n+    {\n+      handler_1arg = ihandler->handler.handler_1arg;\n+      handler_1arg (parse_in);\n+    }\n }\n \n /* Set up front-end pragmas.  */\n@@ -1308,7 +1375,8 @@ init_pragma (void)\n   c_register_pragma (\"STDC\", \"FLOAT_CONST_DECIMAL64\",\n \t\t     handle_pragma_float_const_decimal64);\n \n-  c_register_pragma_with_expansion (0, \"redefine_extname\", handle_pragma_redefine_extname);\n+  c_register_pragma_with_expansion (0, \"redefine_extname\",\n+\t\t\t\t    handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);\n \n   c_register_pragma_with_expansion (0, \"message\", handle_pragma_message);"}, {"sha": "d231c256e46b460c6e8c29969f688c7257424dca", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb43cd5bd5ff69f865d7be6fb190d405719e15d/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=dfb43cd5bd5ff69f865d7be6fb190d405719e15d", "patch": "@@ -84,10 +84,40 @@ extern bool pop_visibility (int);\n extern void init_pragma (void);\n \n /* Front-end wrappers for pragma registration.  */\n-typedef void (*pragma_handler)(struct cpp_reader *);\n-extern void c_register_pragma (const char *, const char *, pragma_handler);\n-extern void c_register_pragma_with_expansion (const char *, const char *,\n-\t\t\t\t\t      pragma_handler);\n+typedef void (*pragma_handler_1arg)(struct cpp_reader *);\n+/* A second pragma handler, which adds a void * argument allowing to pass extra\n+   data to the handler.  */\n+typedef void (*pragma_handler_2arg)(struct cpp_reader *, void *);\n+\n+/* This union allows to abstract the different handlers.  */\n+union gen_pragma_handler {\n+  pragma_handler_1arg handler_1arg;\n+  pragma_handler_2arg handler_2arg;\n+};\n+/* Internally used to keep the data of the handler.  */\n+struct internal_pragma_handler_d {\n+  union gen_pragma_handler handler;\n+  /* Permits to know if handler is a pragma_handler_1arg (extra_data is false)\n+     or a pragma_handler_2arg (extra_data is true).  */\n+  bool extra_data;\n+  /* A data field which can be used when extra_data is true.  */\n+  void * data;\n+};\n+typedef struct internal_pragma_handler_d internal_pragma_handler;\n+\n+extern void c_register_pragma (const char *space, const char *name,\n+                               pragma_handler_1arg handler);\n+extern void c_register_pragma_with_data (const char *space, const char *name,\n+                                         pragma_handler_2arg handler,\n+                                         void *data);\n+\n+extern void c_register_pragma_with_expansion (const char *space,\n+                                              const char *name,\n+                                              pragma_handler_1arg handler);\n+extern void c_register_pragma_with_expansion_and_data (const char *space,\n+                                                       const char *name,\n+                                                   pragma_handler_2arg handler,\n+                                                       void *data);\n extern void c_invoke_pragma_handler (unsigned int);\n \n extern void maybe_apply_pragma_weak (tree);"}]}