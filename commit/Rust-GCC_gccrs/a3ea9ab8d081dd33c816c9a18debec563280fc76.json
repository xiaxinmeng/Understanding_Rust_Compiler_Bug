{"sha": "a3ea9ab8d081dd33c816c9a18debec563280fc76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlYTlhYjhkMDgxZGQzM2M4MTZjOWExOGRlYmVjNTYzMjgwZmM3Ng==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-09T14:03:17Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-09T14:03:17Z"}, "message": "[AArch64 Testsuite] Extend test of vld1+vst1 intrinsics to cover more variants\n\n\t* gcc.target/aarch64/vld1-vst1_1.c: Rewrite to test all variants.\n\nFrom-SVN: r215077", "tree": {"sha": "612536bee64e7f0f46ff7c1d1aa33966258dab6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612536bee64e7f0f46ff7c1d1aa33966258dab6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ea9ab8d081dd33c816c9a18debec563280fc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ea9ab8d081dd33c816c9a18debec563280fc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ea9ab8d081dd33c816c9a18debec563280fc76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ea9ab8d081dd33c816c9a18debec563280fc76/comments", "author": null, "committer": null, "parents": [{"sha": "ba6fdd828d8525f97835169e5b91fe9c7c5d6bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6fdd828d8525f97835169e5b91fe9c7c5d6bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6fdd828d8525f97835169e5b91fe9c7c5d6bc2"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "4e2db2e69db459eb5694b263ec7203194daa6ae5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ea9ab8d081dd33c816c9a18debec563280fc76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ea9ab8d081dd33c816c9a18debec563280fc76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3ea9ab8d081dd33c816c9a18debec563280fc76", "patch": "@@ -1,3 +1,7 @@\n+2014-09-09  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vld1-vst1_1.c: Rewrite to test all variants.\n+\n 2014-09-09  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vldN_1.c: New test."}, {"sha": "290444e357f933ad2fe8160936c0d3aea3452fac", "filename": "gcc/testsuite/gcc.target/aarch64/vld1-vst1_1.c", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ea9ab8d081dd33c816c9a18debec563280fc76/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ea9ab8d081dd33c816c9a18debec563280fc76/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c?ref=a3ea9ab8d081dd33c816c9a18debec563280fc76", "patch": "@@ -5,48 +5,54 @@\n \n extern void abort (void);\n \n-int __attribute__ ((noinline))\n-test_vld1_vst1 ()\n-{\n-  int8x8_t a;\n-  int8x8_t b;\n-  int i = 0;\n-  int8_t c[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n-  int8_t d[8];\n-  a = vld1_s8 (c);\n-  asm volatile (\"\":::\"memory\");\n-  vst1_s8 (d, a);\n-  asm volatile (\"\":::\"memory\");\n-  for (; i < 8; i++)\n-    if (c[i] != d[i])\n-      return 1;\n-  return 0;\n+#define TESTMETH(TYPE, NUM, BASETYPE, SUFFIX)\t\\\n+int __attribute__ ((noinline))\t\t\t\\\n+test_vld1_vst1##SUFFIX ()\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  TYPE vec;\t\t\t\t\t\\\n+  int i = 0;\t\t\t\t\t\\\n+  BASETYPE src[NUM];\t\t\t\t\\\n+  BASETYPE dest[NUM];\t\t\t\t\\\n+  for (i = 0; i < NUM; i++)\t\t\t\\\n+    src[i] = 2*i + 1;\t\t\t\t\\\n+  asm volatile (\"\":::\"memory\");\t\t\t\\\n+  vec = vld1 ## SUFFIX (src);\t\t\t\\\n+  asm volatile (\"\":::\"memory\");\t\t\t\\\n+  vst1 ## SUFFIX (dest, vec);\t\t\t\\\n+  asm volatile (\"\":::\"memory\");\t\t\t\\\n+  for (i = 0; i < NUM; i++)\t\t\t\\\n+    if (src[i] != dest[i])\t\t\t\\\n+      return 1;\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\\\n }\n \n-int __attribute__ ((noinline))\n-test_vld1q_vst1q ()\n-{\n-  int16x8_t a;\n-  int16x8_t b;\n-  int i = 0;\n-  int16_t c[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n-  int16_t d[8];\n-  a = vld1q_s16 (c);\n-  asm volatile (\"\":::\"memory\");\n-  vst1q_s16 (d, a);\n-  asm volatile (\"\":::\"memory\");\n-  for (; i < 8; i++)\n-    if (c[i] != d[i])\n-      return 1;\n-  return 0;\n-}\n+#define VARIANTS(THING)\t\t\t\\\n+THING (int8x8_t, 8, int8_t, _s8)\t\\\n+THING (uint8x8_t, 8, uint8_t, _u8)\t\\\n+THING (int16x4_t, 4, int16_t, _s16)\t\\\n+THING (uint16x4_t, 4, uint16_t, _u16)\t\\\n+THING (int32x2_t, 2, int32_t, _s32)\t\\\n+THING (uint32x2_t, 2, uint32_t, _u32)\t\\\n+THING (float32x2_t, 2, float32_t, _f32) \\\n+THING (int8x16_t, 16, int8_t, q_s8)\t\\\n+THING (uint8x16_t, 16, uint8_t, q_u8)\t\\\n+THING (int16x8_t, 8, int16_t, q_s16)\t\\\n+THING (uint16x8_t, 8, uint16_t, q_u16)\t\\\n+THING (int32x4_t, 4, int32_t, q_s32)\t\\\n+THING (uint32x4_t, 4, uint32_t, q_u32)\t\\\n+THING (int64x2_t, 2, int64_t, q_s64)\t\\\n+THING (uint64x2_t, 2, uint64_t, q_u64)\t\\\n+THING (float64x2_t, 2, float64_t, q_f64)\n+\n+VARIANTS (TESTMETH)\n+\n+#define DOTEST(TYPE, NUM, BASETYPE, SUFFIX)\t\\\n+  if (test_vld1_vst1##SUFFIX ())\t\t\\\n+    abort ();\n \n int\n main ()\n {\n-  if (test_vld1_vst1 ())\n-    abort ();\n-  if (test_vld1q_vst1q ())\n-    abort ();\n+  VARIANTS (DOTEST);\n   return 0;\n }"}]}