{"sha": "f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFkYjM1NzY2NGUxZDYxZDdiZGVlZDNjY2MzNzg1YTM3MTdhZDMzZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-25T10:31:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-25T10:31:24Z"}, "message": "toplev.c (no_new_pseudos): Define.\n\n        * toplev.c (no_new_pseudos): Define.\n        (rest_of_compilation):  Set no_new_pseudos as needed.\n        * emit-rtl.c (gen_reg_rtx): Abort if we try to create a new pseudo\n        if no_new_pseudos is set.\n        * rtl.h (no_new_pseudos): Declare it.\n        * reload1.c (reload): Update comments.\n        * md.texi: Corresponding changes.\n        * reload1.c (reg_used_in_insn): Renamed from reg_used_by_pseudo.\n        (choose_reload_regs): Rename it here as well.  When computing it,\n        also merge in used hardregs.\n\nFrom-SVN: r23855", "tree": {"sha": "d0cecb570037e9dbf06589bd204c4fdd20ab6057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0cecb570037e9dbf06589bd204c4fdd20ab6057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/comments", "author": null, "committer": null, "parents": [{"sha": "6edfbe4c583ba93e988738ff72e9240796a8a357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edfbe4c583ba93e988738ff72e9240796a8a357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edfbe4c583ba93e988738ff72e9240796a8a357"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "fdf4b63c26eaa6e79d2b2714536a113e8348ce14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -1,3 +1,19 @@\n+Wed Nov 25 11:26:19 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* toplev.c (no_new_pseudos): Define.\n+\t(rest_of_compilation):  Set no_new_pseudos as needed.\n+\t* emit-rtl.c (gen_reg_rtx): Abort if we try to create a new pseudo\n+\tif no_new_pseudos is set.\n+\t* rtl.h (no_new_pseudos): Declare it.\n+\t* reload1.c (reload): Update comments.\n+\t* md.texi: Corresponding changes.\n+\n+Wed Nov 25 11:26:17 1998  Bernd Schmidt  <crux@pool.informatik.rwth-aachen.de>\n+\n+\t* reload1.c (reg_used_in_insn): Renamed from reg_used_by_pseudo.\n+\t(choose_reload_regs): Rename it here as well.  When computing it,\n+\talso merge in used hardregs.\n+\n 1998-11-25 07:51 -0500  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n \n \t* gcc.c: Split out Objective-C specs to..."}, {"sha": "9a19de121da26a43498f7d4d66c3d3c9e98fe3c3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -505,11 +505,9 @@ gen_reg_rtx (mode)\n {\n   register rtx val;\n \n-  /* Don't let anything called by or after reload create new registers\n-     (actually, registers can't be created after flow, but this is a good\n-     approximation).  */\n-\n-  if (reload_in_progress || reload_completed)\n+  /* Don't let anything called after initial flow analysis create new\n+     registers.  */\n+  if (no_new_pseudos)\n     abort ();\n \n   if (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT"}, {"sha": "6177ac2b55c7183e3eacb8297eaa56c3e4842646", "filename": "gcc/md.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -1746,14 +1746,20 @@ pseudo registers that did not get hard registers, while on other\n machines explicit memory references will get optional reloads.\n \n If a scratch register is required to move an object to or from memory,\n-it can be allocated using @code{gen_reg_rtx} prior to reload.  But this\n-is impossible during and after reload.  If there are cases needing\n+it can be allocated using @code{gen_reg_rtx} prior to life analysis.\n+\n+If there are cases needing\n scratch registers after reload, you must define\n @code{SECONDARY_INPUT_RELOAD_CLASS} and perhaps also\n @code{SECONDARY_OUTPUT_RELOAD_CLASS} to detect them, and provide\n patterns @samp{reload_in@var{m}} or @samp{reload_out@var{m}} to handle\n them.  @xref{Register Classes}.\n \n+@findex no_new_pseudos\n+The global variable @code{no_new_pseudos} can be used to determine if it\n+is unsafe to create new pseudo registers.  If this variable is nonzero, then\n+it is unsafe to call @code{gen_reg_rtx} to allocate a new pseudo.\n+\n The constraints on a @samp{mov@var{m}} must permit moving any hard\n register to any other hard register provided that\n @code{HARD_REGNO_MODE_OK} permits mode @var{m} in both registers and"}, {"sha": "e4dee18247f7d3265dcb5a72ce1ce85a159f410a", "filename": "gcc/reload1.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -815,7 +815,9 @@ reload (first, global, dumpfile)\n #endif\n   finish_spills (global, dumpfile);\n \n-  /* From now on, we need to emit any moves without making new pseudos.  */\n+  /* From now on, we may need to generate moves differently.  We may also\n+     allow modifications of insns which cause them to not be recognized.\n+     Any such modifications will be cleaned up during reload itself.  */\n   reload_in_progress = 1;\n \n   /* This loop scans the entire function each go-round\n@@ -4487,9 +4489,9 @@ static HARD_REG_SET reload_reg_used_at_all;\n    in the group.  */\n static HARD_REG_SET reload_reg_used_for_inherit;\n \n-/* Records which hard regs are allocated to a pseudo during any point of the\n-   current insn.  */\n-static HARD_REG_SET reg_used_by_pseudo;\n+/* Records which hard regs are used in any way, either as explicit use or\n+   by being allocated to a pseudo during any point of the current insn.  */\n+static HARD_REG_SET reg_used_in_insn;\n \n /* Mark reg REGNO as in use for a reload of the sort spec'd by OPNUM and\n    TYPE. MODE is used to indicate how many consecutive regs are\n@@ -5522,10 +5524,16 @@ choose_reload_regs (chain)\n   CLEAR_HARD_REG_SET (reload_reg_used_in_insn);\n   CLEAR_HARD_REG_SET (reload_reg_used_in_other_addr);\n \n-  CLEAR_HARD_REG_SET (reg_used_by_pseudo);\n-  compute_use_by_pseudos (&reg_used_by_pseudo, chain->live_before);\n-  compute_use_by_pseudos (&reg_used_by_pseudo, chain->live_after);\n-  \n+  CLEAR_HARD_REG_SET (reg_used_in_insn);\n+  {\n+    HARD_REG_SET tmp;\n+    REG_SET_TO_HARD_REG_SET (tmp, chain->live_before);\n+    IOR_HARD_REG_SET (reg_used_in_insn, tmp);\n+    REG_SET_TO_HARD_REG_SET (tmp, chain->live_after);\n+    IOR_HARD_REG_SET (reg_used_in_insn, tmp);\n+    compute_use_by_pseudos (&reg_used_in_insn, chain->live_before);\n+    compute_use_by_pseudos (&reg_used_in_insn, chain->live_after);\n+  }\n   for (i = 0; i < reload_n_operands; i++)\n     {\n       CLEAR_HARD_REG_SET (reload_reg_used_in_output[i]);\n@@ -5838,7 +5846,7 @@ choose_reload_regs (chain)\n \t\t\t\t    (i, reload_opnum[r], reload_when_needed[r],\n \t\t\t\t     reload_in[r], reload_out[r], r, 1))\n \t\t\t      /* Don't use it if we'd clobber a pseudo reg.  */\n-\t\t\t      || (TEST_HARD_REG_BIT (reg_used_by_pseudo, i)\n+\t\t\t      || (TEST_HARD_REG_BIT (reg_used_in_insn, i)\n \t\t\t\t  && reload_out[r]\n \t\t\t\t  && ! TEST_HARD_REG_BIT (reg_reloaded_dead, i))\n \t\t\t      /* Don't really use the inherited spill reg"}, {"sha": "c5b816d79dd517f9963ab9ae23f9b1b1aa5ed944", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -1222,6 +1222,10 @@ extern int reload_in_progress;\n    the same indirect address eventually.  */\n extern int cse_not_expected;\n \n+/* Set to nonzero before life analysis to indicate that it is unsafe to\n+   generate any new pseudo registers.  */\n+extern int no_new_pseudos;\n+\n /* Indexed by pseudo register number, gives the rtx for that pseudo.\n    Allocated in parallel with regno_pointer_flag.  */\n extern rtx *regno_reg_rtx;"}, {"sha": "5fa7f22df6eec61561caeb052976e047d85d095a", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1db357664e1d61d7bdeed3ccc3785a3717ad33d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f1db357664e1d61d7bdeed3ccc3785a3717ad33d", "patch": "@@ -242,6 +242,9 @@ char *main_input_filename;\n \n int lineno;\n \n+/* Nonzero if it is unsafe to create any new pseudo registers.  */\n+int no_new_pseudos;\n+\n /* Stack of currently pending input files.  */\n \n struct file_stack *input_file_stack;\n@@ -3862,6 +3865,10 @@ rest_of_compilation (decl)\n \tprint_rtl_graph_with_bb (dump_base_name, \".flow\", insns);\n     }\n \n+  /* The first life analysis pass has finished.  From now on we can not\n+     generate any new pseudos.  */\n+  no_new_pseudos = 1;\n+\n   /* If -opt, try combining insns through substitution.  */\n \n   if (optimize > 0)\n@@ -4170,6 +4177,7 @@ rest_of_compilation (decl)\n \n   reload_completed = 0;\n   flow2_completed = 0;\n+  no_new_pseudos = 0;\n \n   TIMEVAR (final_time,\n \t   {"}]}