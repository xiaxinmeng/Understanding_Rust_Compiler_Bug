{"sha": "09a1e889cc466848ee188aa9987162ab4d7401aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhMWU4ODljYzQ2Njg0OGVlMTg4YWE5OTg3MTYyYWI0ZDc0MDFhYQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-06-25T07:31:49Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-06-25T07:31:49Z"}, "message": "re PR c/44517 (improve diagnostic for mispelled typename in function declaration)\n\ngcc/\n2010-06-25  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/44517\n        * c-parser.c (c_parser_parms_list_declarator): Return NULL if one of\n        parameters are not good.\n        (c_parser_parameter_declaration): Error unknown type name if the type\n        name can't start declaration specifiers.\n\ngcc/testsuite/\n2010-06-25  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/44517\n        * gcc.dg/noncompile/pr44517.c: New.\n        * gcc.dg/noncompile/990416-1.c: Adjust expected error.\n\nFrom-SVN: r161363", "tree": {"sha": "6d4b0f5cbcd58e0c2839440b121c12a0e79e6107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d4b0f5cbcd58e0c2839440b121c12a0e79e6107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a1e889cc466848ee188aa9987162ab4d7401aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a1e889cc466848ee188aa9987162ab4d7401aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a1e889cc466848ee188aa9987162ab4d7401aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a1e889cc466848ee188aa9987162ab4d7401aa/comments", "author": null, "committer": null, "parents": [{"sha": "418f840c1b52c1ff7884e54b70164490b3025d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418f840c1b52c1ff7884e54b70164490b3025d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418f840c1b52c1ff7884e54b70164490b3025d5c"}], "stats": {"total": 101, "additions": 65, "deletions": 36}, "files": [{"sha": "3304184c115a9ffd5611dcc71e5c28b9e04af692", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a1e889cc466848ee188aa9987162ab4d7401aa", "patch": "@@ -1,3 +1,11 @@\n+2010-06-25  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/44517\n+\t* c-parser.c (c_parser_parms_list_declarator): Return NULL if one of\n+\tparameters are not good.\n+\t(c_parser_parameter_declaration): Error unknown type name if the type\n+\tname can't start declaration specifiers.\n+\n 2010-06-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c (translate_options): Don't mention +e in comment."}, {"sha": "ac81d7699c44a47cb9da93caa82a7f5c3f9c29d9", "filename": "gcc/c-parser.c", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=09a1e889cc466848ee188aa9987162ab4d7401aa", "patch": "@@ -2706,7 +2706,7 @@ c_parser_parms_declarator (c_parser *parser, bool id_list_ok, tree attrs)\n static struct c_arg_info *\n c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n {\n-  bool good_parm = false;\n+  bool bad_parm = false;\n   /* ??? Following the old parser, forward parameter declarations may\n      use abstract declarators, and if no real parameter declarations\n      follow the forward declarations then this is not diagnosed.  Also\n@@ -2758,11 +2758,10 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n       /* Parse a parameter.  */\n       struct c_parm *parm = c_parser_parameter_declaration (parser, attrs);\n       attrs = NULL_TREE;\n-      if (parm != NULL)\n-\t{\n-\t  good_parm = true;\n-\t  push_parm_decl (parm);\n-\t}\n+      if (parm == NULL)\n+\tbad_parm = true;\n+      else\n+\tpush_parm_decl (parm);\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n \t  tree new_attrs;\n@@ -2774,20 +2773,13 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t{\n \t  c_parser_consume_token (parser);\n-\t  if (good_parm)\n-\t    return get_parm_info (false);\n-\t  else\n+\t  if (bad_parm)\n \t    {\n-\t      struct c_arg_info *ret\n-\t\t= XOBNEW (&parser_obstack, struct c_arg_info);\n-\t      ret->parms = 0;\n-\t      ret->tags = 0;\n-\t      ret->types = 0;\n-\t      ret->others = 0;\n-\t      ret->pending_sizes = 0;\n-\t      ret->had_vla_unspec = 0;\n-\t      return ret;\n+\t      get_pending_sizes ();\n+\t      return NULL;\n \t    }\n+\t  else\n+\t    return get_parm_info (false);\n \t}\n       if (!c_parser_require (parser, CPP_COMMA,\n \t\t\t     \"expected %<;%>, %<,%> or %<)%>\"))\n@@ -2802,20 +2794,13 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n \t  if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t    {\n \t      c_parser_consume_token (parser);\n-\t      if (good_parm)\n-\t\treturn get_parm_info (true);\n-\t      else\n+\t      if (bad_parm)\n \t\t{\n-\t\t  struct c_arg_info *ret\n-\t\t    = XOBNEW (&parser_obstack, struct c_arg_info);\n-\t\t  ret->parms = 0;\n-\t\t  ret->tags = 0;\n-\t\t  ret->types = 0;\n-\t\t  ret->others = 0;\n-\t\t  ret->pending_sizes = 0;\n-\t\t  ret->had_vla_unspec = 0;\n-\t\t  return ret;\n+\t\t  get_pending_sizes ();\n+\t\t  return NULL;\n \t\t}\n+\t      else\n+\t\treturn get_parm_info (true);\n \t    }\n \t  else\n \t    {\n@@ -2841,10 +2826,22 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n   bool dummy = false;\n   if (!c_parser_next_token_starts_declspecs (parser))\n     {\n+      c_token *token = c_parser_peek_token (parser);\n+      if (parser->error)\n+\treturn NULL;\n+      c_parser_set_source_position_from_token (token);\n+      if (token->type == CPP_NAME\n+\t  && c_parser_peek_2nd_token (parser)->type != CPP_COMMA\n+\t  && c_parser_peek_2nd_token (parser)->type != CPP_CLOSE_PAREN)\n+\t{\n+\t  error (\"unknown type name %qE\", token->value);\n+\t  parser->error = true;\n+\t}\n       /* ??? In some Objective-C cases '...' isn't applicable so there\n \t should be a different message.  */\n-      c_parser_error (parser,\n-\t\t      \"expected declaration specifiers or %<...%>\");\n+      else\n+\tc_parser_error (parser,\n+\t\t\t\"expected declaration specifiers or %<...%>\");\n       c_parser_skip_to_end_of_parameter (parser);\n       return NULL;\n     }"}, {"sha": "19d47110a4445c3271936ef9c57b85e281466f42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09a1e889cc466848ee188aa9987162ab4d7401aa", "patch": "@@ -1,3 +1,9 @@\n+2010-06-25  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/44517\n+\t* gcc.dg/noncompile/pr44517.c: New.\n+\t* gcc.dg/noncompile/990416-1.c: Adjust expected error.\n+\n 2010-06-24  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR testsuite/43283"}, {"sha": "91801910bc307838c09218810e811c16db23e401", "filename": "gcc/testsuite/gcc.dg/noncompile/990416-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c?ref=09a1e889cc466848ee188aa9987162ab4d7401aa", "patch": "@@ -2,11 +2,11 @@ extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n typedef int word_type;\n    \n static void\n-copy_reg (unsigned int reg, frame_state *udata,\t/* { dg-error \"parse|syntax|expected\" } */\n-\t  frame_state *target_udata)\t/* { dg-error \"expected\" } */\n+copy_reg (unsigned int reg, frame_state *udata,\t/* { dg-error \"unknown type name\" } */\n+\t  frame_state *target_udata)\t/* { dg-error \"unknown type name\" } */\n {  \n-  word_type *preg = get_reg_addr (reg, udata, 0);\t/* { dg-error \"undeclared|function|without a cast\" } */\n-  word_type *ptreg = get_reg_addr (reg, target_udata, 0); /* { dg-error \"undeclared|without a cast\" } */\n+  word_type *preg = ge_reg_addr (reg, udata, 0);\n+  word_type *ptreg = ge_reg_addr (reg, target_udata, 0);\n    \n   memcpy (ptreg, preg, __builtin_dwarf_reg_size (reg));\n }"}, {"sha": "5977d68fef82c1d938f60b5fb632d3151601ce9f", "filename": "gcc/testsuite/gcc.dg/noncompile/pr44517.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr44517.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a1e889cc466848ee188aa9987162ab4d7401aa/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr44517.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr44517.c?ref=09a1e889cc466848ee188aa9987162ab4d7401aa", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/44517: Improve diagnostic for misspelled typename in function declaration. */\n+int f1(int x, pid_t y, long z, in t) {\n+/* { dg-error \"unknown type name 'pid_t'\" \"\" { target *-*-* } 2 } */\n+/* { dg-error \"unknown type name 'in'\" \"\" { target *-*-* } 2 } */\n+  return x + y + z + t;\n+}\n+\n+int f2(int x, lon y, long z, ...){ /* { dg-error \"unknown type name 'lon'\" } */\n+  return;\n+}\n+\n+void f3(int n, int a[n], pid_t x); /* { dg-error \"unknown type name 'pid_t'\" } */\n+void f4() {}\n+void f5(int a, *b); /* { dg-error \"expected declaration specifiers or\" } */\n+void f6(int a, b);  /* { dg-error \"expected declaration specifiers or\" } */\n+void f7(int a, goto b); /* { dg-error \"expected declaration specifiers or\" } */\n+void f8(int a, in goto); /* { dg-error \"unknown type name 'in'\" } */\n+void f9(int a, in 1); /* { dg-error \"unknown type name 'in'\" } */"}]}