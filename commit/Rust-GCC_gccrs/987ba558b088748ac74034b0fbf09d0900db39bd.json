{"sha": "987ba558b088748ac74034b0fbf09d0900db39bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3YmE1NThiMDg4NzQ4YWM3NDAzNGIwZmJmMDlkMDkwMGRiMzliZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-31T04:08:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-31T04:08:19Z"}, "message": "elf.h: Fix comment formatting.\n\n\t* config/elf.h: Fix comment formatting.\n\t* config/elf64.h: Likewise.\n\t* config/iris5.h: Likewise.\n\t* config/iris5gas.h: Likewise.\n\t* config/iris6.h: Likewise.\n\t* config/isa3264.h: Likewise.\n\t* config/linux.h: Likewise.\n\t* config/mips.c: Likewise.\n\t* config/mips.h: Likewise.\n\t* config/mips.md: Likewise.\n\t* config/mips16.S: Likewise.\n\t* config/netbsd.h: Likewise.\n\t* config/osfrose.h: Likewise.\n\t* config/r3900.h: Likewise.\n\t* config/sni-svr4.h: Likewise.\n\t* config/svr4-t.h: Likewise.\n\t* config/ultrix.h: Likewise.\n\nFrom-SVN: r46670", "tree": {"sha": "e500aae6866bf5b0273c03c70754168ba83ec720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e500aae6866bf5b0273c03c70754168ba83ec720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987ba558b088748ac74034b0fbf09d0900db39bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987ba558b088748ac74034b0fbf09d0900db39bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987ba558b088748ac74034b0fbf09d0900db39bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987ba558b088748ac74034b0fbf09d0900db39bd/comments", "author": null, "committer": null, "parents": [{"sha": "87a2e7a8a5adda2f12d3b4fa47122dd0a7831138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a2e7a8a5adda2f12d3b4fa47122dd0a7831138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a2e7a8a5adda2f12d3b4fa47122dd0a7831138"}], "stats": {"total": 192, "additions": 106, "deletions": 86}, "files": [{"sha": "0dc6a4ba024991377c3e4dcc8a1620983d9dc023", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -1,3 +1,23 @@\n+2001-10-30  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/elf.h: Fix comment formatting.\n+\t* config/elf64.h: Likewise.\n+\t* config/iris5.h: Likewise.\n+\t* config/iris5gas.h: Likewise.\n+\t* config/iris6.h: Likewise.\n+\t* config/isa3264.h: Likewise.\n+\t* config/linux.h: Likewise.\n+\t* config/mips.c: Likewise.\n+\t* config/mips.h: Likewise.\n+\t* config/mips.md: Likewise.\n+\t* config/mips16.S: Likewise.\n+\t* config/netbsd.h: Likewise.\n+\t* config/osfrose.h: Likewise.\n+\t* config/r3900.h: Likewise.\n+\t* config/sni-svr4.h: Likewise.\n+\t* config/svr4-t.h: Likewise.\n+\t* config/ultrix.h: Likewise.\n+\n 2001-10-30  Daniel Berlin  <dan@cgsoftware.com>\n \n \t* bitmap.c (bitmap_element_free): Don't forget to update head->indx"}, {"sha": "f07b5a72d2053f85889c632cb1e09ad9cb25fa5e", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -114,7 +114,7 @@ do {\t\t\t\t\t\t\\\n    specified as the number of bits.\n \n    Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro. */\n+   `varasm.c' when defining this macro.  */\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -194,7 +194,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    mips-elf gas supports .weak, but not .weakext.\n    mips-elf gas has been changed to support both .weak and .weakext,\n    but until that support is generally available, the 'if' below\n-   should serve. */\n+   should serve.  */\n \n #undef ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE,NAME) ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,0)"}, {"sha": "0317fde5380d4363c32af9875c32cfe774043cab", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -173,7 +173,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    mips-elf gas supports .weak, but not .weakext.\n    mips-elf gas has been changed to support both .weak and .weakext,\n    but until that support is generally available, the 'if' below\n-   should serve. */\n+   should serve.  */\n \n #undef ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE,NAME) ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,0)"}, {"sha": "7e3efa0a1f37ad34f696c19a8b03d8fdcccfb8bb", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -114,7 +114,7 @@ Boston, MA 02111-1307, USA.  */\n /* We do not want to run mips-tfile!  */\n #undef ASM_FINAL_SPEC\n \n-/* The system header files are C++ aware. */\n+/* The system header files are C++ aware.  */\n /* ??? Unfortunately, most but not all of the headers are C++ aware.\n    Specifically, curses.h is not, and as a consequence, defining this\n    used to prevent libg++ building.  This is no longer the case so\n@@ -123,7 +123,7 @@ Boston, MA 02111-1307, USA.  */\n    fixing.  */\n #define NO_IMPLICIT_EXTERN_C 1\n \n-/* We don't support debugging info for now. */\n+/* We don't support debugging info for now.  */\n #undef DBX_DEBUGGING_INFO\n #undef SDB_DEBUGGING_INFO\n #undef MIPS_DEBUGGING_INFO"}, {"sha": "84922c1c163c1358989dac577da4113853f057cc", "filename": "gcc/config/mips/iris5gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis5gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis5gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5gas.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions of target machine for GNU compiler.  Irix version 5 with gas. */\n+/* Definitions of target machine for GNU compiler.  Irix version 5 with gas.  */\n \n /* Enable debugging.  */\n #define DBX_DEBUGGING_INFO"}, {"sha": "d7a989ad007f73d395d9781de37665b1244a2da5", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -131,7 +131,7 @@ Boston, MA 02111-1307, USA.  */\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n /* Force the generation of dwarf .debug_frame sections even if not\n-   compiling -g.  This guarantees that we can unwind the stack. */\n+   compiling -g.  This guarantees that we can unwind the stack.  */\n #define DWARF2_FRAME_INFO 1\n \n /* The size in bytes of a DWARF field indicating an offset or length\n@@ -228,7 +228,7 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_ASM_SPEC \"%{!mabi*:-n32} %{!mips*: %{!mabi*:-mips3} %{mabi=n32:-mips3} %{mabi=64:-mips4}}\"\n \n /* Must pass -g0 to the assembler, otherwise it may overwrite our\n-   debug info with its own debug info. */\n+   debug info with its own debug info.  */\n /* Must pass -show instead of -v.  */\n /* Must pass -G 0 to the assembler, otherwise we may get warnings about\n    GOT overflow.  */"}, {"sha": "cde72272ebaf222979ca26371dd29d82af66ea94", "filename": "gcc/config/mips/isa3264.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fisa3264.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fisa3264.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fisa3264.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"mips/elf.h\"\n \n /* This must be done after including mips.h so that the\n-   ABI_{EABI,O64,O32,...} are #defined. */\n+   ABI_{EABI,O64,O32,...} are #defined.  */\n \n #if MIPS_ABI_DEFAULT == ABI_EABI\n #undef  SUBTARGET_CPP_SIZE_SPEC\n@@ -110,7 +110,7 @@ Boston, MA 02111-1307, USA.  */\n \n    For MEABI the size of longs is always 32bits.  If long64 is specified then\n    we honor that.  The errors for long64 & long32 is because while CC1 can\n-   handle overriding mlong32 with mlong64 and vise-versa, the specs cannot. */\n+   handle overriding mlong32 with mlong64 and vise-versa, the specs cannot.  */\n \n #if MIPS_ISA_DEFAULT == 3 || MIPS_ISA_DEFAULT == 4 || MIPS_ISA_DEFAULT == 5 || MIPS_ISA_DEFAULT == 64\n #undef  SUBTARGET_CPP_SIZE_SPEC"}, {"sha": "5b3c59649f273f6132fbf426ad7651b7a7144267", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n    specified as the number of bits.\n \n    Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro. */\n+   `varasm.c' when defining this macro.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n do {\t\t\t\t\t\t\t\t\\\n   ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\\\n@@ -149,7 +149,7 @@ void FN ()\t\t\t\t\t\t\t\\\n /* Required to keep collect2.c happy */\n #undef OBJECT_FORMAT_COFF\n \n-/* If we don't set MASK_ABICALLS, we can't default to PIC. */\n+/* If we don't set MASK_ABICALLS, we can't default to PIC.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_ABICALLS|MASK_GAS)\n "}, {"sha": "db1652984debe442113fdea026fd0297dfbb06ae", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -64,7 +64,7 @@ extern tree   lookup_name PARAMS ((tree));\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n-   of EQ, NE, etc. */\n+   of EQ, NE, etc.  */\n \n enum internal_test {\n     ITEST_EQ,\n@@ -145,7 +145,7 @@ int num_source_filenames = 0;\n    start and end boundaries).  */\n int sdb_label_count = 0;\n \n-/* Next label # for each statement for Silicon Graphics IRIS systems. */\n+/* Next label # for each statement for Silicon Graphics IRIS systems.  */\n int sym_lineno = 0;\n \n /* Non-zero if inside of a function, because the stupid MIPS asm can't\n@@ -248,7 +248,7 @@ const char *mips_no_mips16_string;\n \n /* This is only used to determine if an type size setting option was\n    explicitly specified (-mlong64, -mint64, -mlong32).  The specs\n-   set this option if such an option is used. */\n+   set this option if such an option is used.  */\n const char *mips_explicit_type_size_string;\n \n /* Whether we are generating mips16 hard float code.  In mips16 mode\n@@ -582,7 +582,7 @@ reg_or_0_operand (op, mode)\n }\n \n /* Return truth value of whether OP is a register or the constant 0,\n-   even in mips16 mode. */\n+   even in mips16 mode.  */\n \n int\n true_reg_or_0_operand (op, mode)\n@@ -797,7 +797,7 @@ simple_memory_operand (op, mode)\n \tif (GET_CODE (op) != SYMBOL_REF)\n \t  return 0;\n \n-\t/* let's be paranoid.... */\n+\t/* let's be paranoid....  */\n \tif (! SMALL_INT (offset))\n \t  return 0;\n       }\n@@ -902,7 +902,7 @@ double_memory_operand (op, mode)\n \t    return 1;\n \n \t  /* Similarly, we accept a case where the memory address is\n-             itself on the stack, and will be reloaded. */\n+             itself on the stack, and will be reloaded.  */\n \t  if (GET_CODE (addr) == MEM)\n \t    {\n \t      rtx maddr;\n@@ -1294,7 +1294,7 @@ mips_legitimate_address_p (mode, xinsn, strict)\n     }\n \n   /* Check for constant before stripping off SUBREG, so that we don't\n-     accept (subreg (const_int)) which will fail to reload. */\n+     accept (subreg (const_int)) which will fail to reload.  */\n   if (CONSTANT_ADDRESS_P (xinsn)\n       && ! (mips_split_addresses && mips_check_split (xinsn, mode))\n       && (! TARGET_MIPS16 || mips16_constant (xinsn, mode, 1, 0)))\n@@ -2729,7 +2729,7 @@ mips_address_cost (addr)\n \t  return 2;\n       }\n \n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     case SYMBOL_REF:\n       return SYMBOL_REF_FLAG (addr) ? 1 : 2;\n@@ -3482,7 +3482,7 @@ expand_block_move (operands)\n    The block move type can be one of the following:\n \tBLOCK_MOVE_NORMAL\tDo all of the block move.\n \tBLOCK_MOVE_NOT_LAST\tDo all but the last store.\n-\tBLOCK_MOVE_LAST\t\tDo just the last store. */\n+\tBLOCK_MOVE_LAST\t\tDo just the last store.  */\n \n const char *\n output_block_move (insn, operands, num_regs, move_type)\n@@ -3859,7 +3859,7 @@ init_cumulative_args (cum, fntype, libname)\n   /* Determine if this function has variable arguments.  This is\n      indicated by the last argument being 'void_type_mode' if there\n      are no variable arguments.  The standard MIPS calling sequence\n-     passes all arguments in the general purpose registers in this case. */\n+     passes all arguments in the general purpose registers in this case.  */\n \n   for (param = fntype ? TYPE_ARG_TYPES (fntype) : 0;\n        param != 0; param = next_param)\n@@ -4288,7 +4288,7 @@ function_arg_partial_nregs (cum, mode, type, named)\n    Note that the GPR save area is not constant size, due to optimization\n      in the prologue.  Hence, we can't use a design with two pointers\n      and two offsets, although we could have designed this with two pointers\n-     and three offsets. */\n+     and three offsets.  */\n \n \n tree\n@@ -4351,7 +4351,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n   if (mips_abi == ABI_EABI)\n     {\n       int gpr_save_area_size;\n-      /* Note UNITS_PER_WORD is 4 bytes or 8, depending on TARGET_64BIT. */\n+      /* Note UNITS_PER_WORD is 4 bytes or 8, depending on TARGET_64BIT.  */\n       if (int_arg_words < 8 )\n \t/* Adjust for the prologue's economy measure */\n \tgpr_save_area_size = (8 - int_arg_words) * UNITS_PER_WORD;\n@@ -4387,7 +4387,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  /* Emit code setting a pointer into the overflow (shared-stack) area.\n \t     If there were more than 8 non-float formals, or more than 8\n \t     float formals, then this pointer isn't to the base of the area.\n-\t     In that case, it must point to where the first vararg is. */\n+\t     In that case, it must point to where the first vararg is.  */\n \t  size_excess = 0;\n \t  if (float_formals > floats_passed_in_regs)\n \t    size_excess += (float_formals-floats_passed_in_regs) * 8;\n@@ -4401,7 +4401,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t     take into account the exact sequence of floats and non-floats\n \t     which make up the excess.  That calculation should be rolled\n \t     into the code which sets the current_function_args_info struct.\n-\t     The above then reduces to a fetch from that struct. */\n+\t     The above then reduces to a fetch from that struct.  */\n \n \n \t  t = make_tree (TREE_TYPE (ovfl), virtual_incoming_args_rtx);\n@@ -4411,7 +4411,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  t = build (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n  \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-\t  /* Emit code setting a ptr to the base of the overflow area. */\n+\t  /* Emit code setting a ptr to the base of the overflow area.  */\n \t  t = make_tree (TREE_TYPE (gtop), virtual_incoming_args_rtx);\n \t  t = build (MODIFY_EXPR, TREE_TYPE (gtop), gtop, t);\n  \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -4421,7 +4421,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t     If mips4, this is gpr_save_area_size below the overflow area.\n \t     If mips2, also round down to an 8-byte boundary, since the FPR\n \t     save area is 8-byte aligned, and GPR is 4-byte-aligned.\n-\t     Therefore there can be a 4-byte gap between the save areas. */\n+\t     Therefore there can be a 4-byte gap between the save areas.  */\n \t  gprv = make_tree (TREE_TYPE (ftop), virtual_incoming_args_rtx);\n \t  fpr_save_offset = gpr_save_area_size;\n \t  if (!TARGET_64BIT)\n@@ -4463,7 +4463,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  /* TARGET_SOFT_FLOAT or TARGET_SINGLE_FLOAT */\n \n \t  /* Everything is in the GPR save area, or in the overflow\n-\t     area which is contiguous with it. */\n+\t     area which is contiguous with it.  */\n \n \t  int offset = -gpr_save_area_size;\n \t  if (gpr_save_area_size == 0)\n@@ -4530,7 +4530,7 @@ mips_va_arg (valist, type)\n       if (TARGET_SOFT_FLOAT || TARGET_SINGLE_FLOAT)\n \t{\n \t  /* Case of all args in a merged stack. No need to check bounds,\n-\t     just advance valist along the stack. */\n+\t     just advance valist along the stack.  */\n \n \t  tree gpr = valist;\n       \t  if (! indirect\n@@ -4568,7 +4568,7 @@ mips_va_arg (valist, type)\n       \t  return addr_rtx;\n \t}\n \n-      /* Not a simple merged stack.  Need ptrs and indexes left by va_start. */\n+      /* Not a simple merged stack.  Need ptrs and indexes left by va_start.  */\n \n       f_ovfl  = TYPE_FIELDS (va_list_type_node);\n       f_gtop = TREE_CHAIN (f_ovfl);\n@@ -4588,7 +4588,7 @@ mips_va_arg (valist, type)\n       if (TREE_CODE (type) == REAL_TYPE)\n         {\n \n-\t  /* Emit code to branch if foff == 0. */\n+\t  /* Emit code to branch if foff == 0.  */\n           r = expand_expr (foff, NULL_RTX, TYPE_MODE (TREE_TYPE (foff)),\n \t     \tEXPAND_NORMAL);\n           emit_cmp_and_jump_insns (r, const0_rtx, EQ,\n@@ -4616,7 +4616,7 @@ mips_va_arg (valist, type)\n \t      /* For mips2, the overflow area contains mixed size items.\n \t\t If a 4-byte int is followed by an 8-byte float, then\n \t\t natural alignment causes a 4 byte gap.\n-\t\t So, dynamically adjust ovfl up to a multiple of 8. */\n+\t\t So, dynamically adjust ovfl up to a multiple of 8.  */\n \t      t = build (BIT_AND_EXPR, TREE_TYPE (ovfl), ovfl,\n \t\t\tbuild_int_2 (7, 0));\n \t      t = build (PLUS_EXPR, TREE_TYPE (ovfl), ovfl, t);\n@@ -4625,7 +4625,7 @@ mips_va_arg (valist, type)\n \t    }\n \n           /* Emit code for addr_rtx = the ovfl pointer into overflow area.\n-\t     Regardless of mips2, postincrement the ovfl pointer by 8. */\n+\t     Regardless of mips2, postincrement the ovfl pointer by 8.  */\n           t = build (POSTINCREMENT_EXPR, TREE_TYPE(ovfl), ovfl,\n \t\tsize_int (8));\n           r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n@@ -4648,33 +4648,33 @@ mips_va_arg (valist, type)\n \t      /* In mips2, int takes 32 bits of the GPR save area, but\n \t\t longlong takes an aligned 64 bits.  So, emit code\n \t\t to zero the low order bits of goff, thus aligning\n-\t\t the later calculation of (gtop-goff) upwards. */\n+\t\t the later calculation of (gtop-goff) upwards.  */\n \t       t = build (BIT_AND_EXPR, TREE_TYPE (goff), goff,\n \t\t\tbuild_int_2 (-8, -1));\n \t       t = build (MODIFY_EXPR, TREE_TYPE (goff), goff, t);\n \t       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t    }\n \n-\t  /* Emit code to branch if goff == 0. */\n+\t  /* Emit code to branch if goff == 0.  */\n           r = expand_expr (goff, NULL_RTX, TYPE_MODE (TREE_TYPE (goff)),\n \t     \tEXPAND_NORMAL);\n           emit_cmp_and_jump_insns (r, const0_rtx, EQ,\n \t\tconst1_rtx, GET_MODE (r), 1, 1, lab_false);\n \n-          /* Emit code for addr_rtx = gtop - goff. */\n+          /* Emit code for addr_rtx = gtop - goff.  */\n           t = build (MINUS_EXPR, TREE_TYPE (gtop), gtop, goff);\n           r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n           if (r != addr_rtx)\n       \t    emit_move_insn (addr_rtx, r);\n \n-\t  /* Note that mips2 int is 32 bit, but mips2 longlong is 64. */\n+\t  /* Note that mips2 int is 32 bit, but mips2 longlong is 64.  */\n \t  if (! TARGET_64BIT && TYPE_PRECISION (type) == 64)\n \t    step_size = 8;\n \t  else\n \t    step_size = UNITS_PER_WORD;\n \n           /* Emit code for goff = goff - step_size.\n-      \t     Advances the offset up GPR save area over the item. */\n+      \t     Advances the offset up GPR save area over the item.  */\n           t = build (MINUS_EXPR, TREE_TYPE (goff), goff,\n \t\tbuild_int_2 (step_size, 0));\n           t = build (MODIFY_EXPR, TREE_TYPE (goff), goff, t);\n@@ -4711,7 +4711,7 @@ mips_va_arg (valist, type)\n     }\n   else\n     {\n-      /* Not EABI. */\n+      /* Not EABI.  */\n       int align;\n \n       /* ??? The original va-mips.h did always align, despite the fact\n@@ -4769,7 +4769,7 @@ override_options ()\n   /* If both single-float and soft-float are set, then clear the one that\n      was set by TARGET_DEFAULT, leaving the one that was set by the\n      user.  We assume here that the specs prevent both being set by the\n-     user. */\n+     user.  */\n #ifdef TARGET_DEFAULT\n   if (TARGET_SINGLE_FLOAT && TARGET_SOFT_FLOAT)\n     target_flags &= ~((TARGET_DEFAULT) & (MASK_SOFT_FLOAT | MASK_SINGLE_FLOAT));\n@@ -4815,7 +4815,7 @@ override_options ()\n     }\n \n #ifdef MIPS_ABI_DEFAULT\n-  /* Get the ABI to use. */\n+  /* Get the ABI to use.  */\n   if (mips_abi_string == (char *) 0)\n     mips_abi = MIPS_ABI_DEFAULT;\n   else if (! strcmp (mips_abi_string, \"32\"))\n@@ -7017,7 +7017,7 @@ mips_output_function_prologue (file, size)\n \n       /* Require:\n \t OLD_SP == *FRAMEREG + FRAMESIZE => can find old_sp from nominated FP reg.\n-\t HIGHEST_GP_SAVED == *FRAMEREG + FRAMESIZE + GPOFFSET => can find saved regs. */\n+\t HIGHEST_GP_SAVED == *FRAMEREG + FRAMESIZE + GPOFFSET => can find saved regs.  */\n     }\n \n   if (mips_entry && ! mips_can_use_return_insn ())\n@@ -7194,7 +7194,7 @@ mips_expand_prologue ()\n      the varargs special argument, and treat it as part of the\n      variable arguments.\n \n-     This is only needed if store_args_on_stack is true. */\n+     This is only needed if store_args_on_stack is true.  */\n \n   INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n   regno = GP_ARG_FIRST;\n@@ -7297,7 +7297,7 @@ mips_expand_prologue ()\n       int offset = (regno - GP_ARG_FIRST) * UNITS_PER_WORD;\n       rtx ptr = stack_pointer_rtx;\n \n-      /* If we are doing svr4-abi, sp has already been decremented by tsize. */\n+      /* If we are doing svr4-abi, sp has already been decremented by tsize.  */\n       if (TARGET_ABICALLS)\n \toffset += tsize;\n \n@@ -7515,7 +7515,7 @@ mips_expand_prologue ()\n }\n \f\n /* Do any necessary cleanup after a function to restore stack, frame,\n-   and regs. */\n+   and regs.  */\n \n #define RA_MASK BITMASK_HIGH\t/* 1 << 31 */\n #define PIC_OFFSET_TABLE_MASK (1 << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST))\n@@ -8055,7 +8055,7 @@ function_arg_pass_by_reference (cum, mode, type, named)\n      {\n        /* Don't pass the actual CUM to FUNCTION_ARG, because we would\n \t  get double copies of any offsets generated for small structs\n-\t  passed in registers. */\n+\t  passed in registers.  */\n        CUMULATIVE_ARGS temp;\n        temp = *cum;\n        if (FUNCTION_ARG (temp, mode, type, named) != 0)\n@@ -8808,7 +8808,7 @@ build_mips16_call_stub (retval, fnmem, arg_size, fp_code)\n \n       /* We build the stub code by hand.  That's the only way we can\n \t do it, since we can't generate 32 bit code during a 16 bit\n-\t compilation. */\n+\t compilation.  */\n \n       /* We don't want the assembler to insert any nops here.  */\n       fprintf (asm_out_file, \"\\t.set\\tnoreorder\\n\");\n@@ -9476,7 +9476,7 @@ machine_dependent_reorg (first)\n \t{\n \t  /* If we haven't had a barrier within 0x8000 bytes of a\n              constant reference or we are at the end of the function,\n-             emit a barrier now. */\n+             emit a barrier now.  */\n \n \t  rtx label, jump, barrier;\n \n@@ -9621,7 +9621,7 @@ mips_output_conditional_branch (insn,\n \t  break;\n \n \tcase LTU:\n-\t  /* A condition which will always be false. */\n+\t  /* A condition which will always be false.  */\n \t  code = NE;\n \t  op1 = \"%.\";\n \t  break;"}, {"sha": "f65789d2b491896393079dec246e9003fc3a69f4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -80,7 +80,7 @@ enum processor_type {\n    value at preprocessing time.\n \n    ABI_32 (original 32, or o32), ABI_N32 (n32), ABI_64 (n64) are all\n-   defined by SGI.  ABI_O64 is o32 extended to work on a 64 bit machine. */\n+   defined by SGI.  ABI_O64 is o32 extended to work on a 64 bit machine.  */\n \n #define ABI_32  0\n #define ABI_N32 1\n@@ -96,7 +96,7 @@ enum processor_type {\n    Currently MIPS is calling their EABI \"the\" MIPS EABI, and Cygnus'\n    EABI the legacy EABI.  In the end we may end up calling both ABI's\n    EABI but give them different version numbers, but for now I'm going\n-   with different names. */\n+   with different names.  */\n #define ABI_MEABI 5\n \n \n@@ -127,7 +127,7 @@ enum block_move_type {\n   BLOCK_MOVE_LAST\t\t\t/* generate just the last store */\n };\n \n-extern char mips_reg_names[][8];\t/* register names (a0 vs. $4). */\n+extern char mips_reg_names[][8];\t/* register names (a0 vs. $4).  */\n extern char mips_print_operand_punct[];\t/* print_operand punctuation chars */\n extern const char *current_function_file; /* filename current function is in */\n extern int num_source_filenames;\t/* current .file # */\n@@ -245,7 +245,7 @@ extern void\t\tsbss_section PARAMS ((void));\n #define MASK_DEBUG\t0\t\t/* unused */\n #define MASK_DEBUG_A\t0\t\t/* don't allow <label>($reg) addrs */\n #define MASK_DEBUG_B\t0\t\t/* GO_IF_LEGITIMATE_ADDRESS debug */\n-#define MASK_DEBUG_C\t0\t\t/* don't expand seq, etc. */\n+#define MASK_DEBUG_C\t0\t\t/* don't expand seq, etc.  */\n #define MASK_DEBUG_D\t0\t\t/* don't do define_split's */\n #define MASK_DEBUG_E\t0\t\t/* function_arg debug */\n #define MASK_DEBUG_F\t0\t\t/* ??? */\n@@ -317,7 +317,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n \t\t\t\t\t/* always store uninitialized const\n \t\t\t\t\t   variables in rodata, requires\n-\t\t\t\t\t   TARGET_EMBEDDED_DATA. */\n+\t\t\t\t\t   TARGET_EMBEDDED_DATA.  */\n #define TARGET_UNINIT_CONST_IN_RODATA\t(target_flags & MASK_UNINIT_CONST_IN_RODATA)\n \n \t\t\t\t\t/* generate big endian code.  */\n@@ -648,18 +648,18 @@ extern void\t\tsbss_section PARAMS ((void));\n #define BRANCH_LIKELY_P()\tGENERATE_BRANCHLIKELY\n #define HAVE_SQRT_P()\t\t(mips_isa != 1)\n \n-/* ISA has instructions for managing 64 bit fp and gp regs (eg. mips3). */\n+/* ISA has instructions for managing 64 bit fp and gp regs (eg. mips3).  */\n #define ISA_HAS_64BIT_REGS\t(mips_isa == 3          \\\n \t\t\t\t || mips_isa == 4 \t\\\n                                  || mips_isa == 64)\n \n-/* ISA has branch likely instructions (eg. mips2). */\n+/* ISA has branch likely instructions (eg. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n #define ISA_HAS_BRANCHLIKELY\t(mips_isa != 1                          \\\n \t\t\t\t /* || TARGET_MIPS3900 */)\n \n-/* ISA has the conditional move instructions introduced in mips4. */\n+/* ISA has the conditional move instructions introduced in mips4.  */\n #define ISA_HAS_CONDMOVE        (mips_isa == 4\t\t\t\t\\\n \t\t\t\t || mips_isa == 32                      \\\n \t\t\t\t || mips_isa == 64)\n@@ -670,7 +670,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n \n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n-   branch on CC, and move (both FP and non-FP) on CC. */\n+   branch on CC, and move (both FP and non-FP) on CC.  */\n #define ISA_HAS_8CC\t\t(mips_isa == 4\t\t\t\t\\\n                          \t || mips_isa == 32                      \\\n \t\t\t\t || mips_isa == 64)\n@@ -1005,7 +1005,7 @@ while (0)\n \n /* Redefinition of libraries used.  Mips doesn't support normal\n    UNIX style profiling via calling _mcount.  It does offer\n-   profiling that samples the PC, so do what we can... */\n+   profiling that samples the PC, so do what we can...  */\n \n #ifndef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lprof1} %{p:-lprof1} -lc\"\n@@ -1220,14 +1220,14 @@ while (0)\n \n /* Local compiler-generated symbols must have a prefix that the assembler\n    understands.   By default, this is $, although some targets (e.g.,\n-   NetBSD-ELF) need to override this. */\n+   NetBSD-ELF) need to override this.  */\n \n #ifndef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\"$\"\n #endif\n \n /* By default on the mips, external symbols do not have an underscore\n-   prepended, but some targets (e.g., NetBSD) require this. */\n+   prepended, but some targets (e.g., NetBSD) require this.  */\n \n #ifndef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX\t\"\"\n@@ -1244,7 +1244,7 @@ while (0)\n #undef DBX_CONTIN_LENGTH\n #define DBX_CONTIN_LENGTH 1500\n \n-/* How to renumber registers for dbx and gdb. */\n+/* How to renumber registers for dbx and gdb.  */\n #define DBX_REGISTER_NUMBER(REGNO) mips_dbx_regno[ (REGNO) ]\n \n /* The mapping from gcc register number to DWARF 2 CFA column number.\n@@ -1443,10 +1443,10 @@ do {\t\t\t\t\t\t\t\\\n */\n #define BITS_BIG_ENDIAN 0\n \n-/* Define this if most significant byte of a word is the lowest numbered. */\n+/* Define this if most significant byte of a word is the lowest numbered.  */\n #define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n \n-/* Define this if most significant word of a multiword number is the lowest. */\n+/* Define this if most significant word of a multiword number is the lowest.  */\n #define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n \n /* Define this to set the endianness to use in libgcc2.c, which can\n@@ -1621,7 +1621,7 @@ do {\t\t\t\t\t\t\t\\\n /* Define this macro if an argument declared as `char' or `short' in a\n    prototype should actually be passed as an `int'.  In addition to\n    avoiding errors in certain cases of mismatch, it also makes for\n-   better code on certain machines. */\n+   better code on certain machines.  */\n \n #define PROMOTE_PROTOTYPES 1\n \n@@ -2015,7 +2015,7 @@ extern const enum reg_class mips_regno_to_class[];\n /* When SMALL_REGISTER_CLASSES is nonzero, the compiler allows\n    registers explicitly used in the rtl to be used as spill registers\n    but prevents the compiler from extending the lifetime of these\n-   registers. */\n+   registers.  */\n \n #define SMALL_REGISTER_CLASSES (TARGET_MIPS16)\n \n@@ -2678,7 +2678,7 @@ typedef struct mips_args {\n \n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used.\n-   For args passed entirely in registers or entirely in memory, zero. */\n+   For args passed entirely in registers or entirely in memory, zero.  */\n \n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \\\n   function_arg_partial_nregs (&CUM, MODE, TYPE, NAMED)\n@@ -3319,7 +3319,7 @@ while (0)\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE (TARGET_MIPS16)\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -3357,7 +3357,7 @@ while (0)\n #define SLOW_ZERO_EXTEND\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n@@ -3375,7 +3375,7 @@ while (0)\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.\n \n-   For MIPS we make pointers are the smaller of longs and gp-registers. */\n+   For MIPS we make pointers are the smaller of longs and gp-registers.  */\n \n #ifndef Pmode\n #define Pmode ((TARGET_LONG64 && TARGET_64BIT) ? DImode : SImode)\n@@ -3494,7 +3494,7 @@ while (0)\n       if (GET_CODE (symref) != SYMBOL_REF)\t\t\t\t\\\n \treturn COSTS_N_INSNS (4);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* let's be paranoid.... */\t\t\t\t\t\\\n+      /* let's be paranoid....  */\t\t\t\t\t\\\n       if (INTVAL (offset) < -32768 || INTVAL (offset) > 32767)\t\t\\\n \treturn COSTS_N_INSNS (2);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -3733,7 +3733,7 @@ while (0)\n    different numbers of registers on machines with lots of registers.\n \n    This macro will normally either not be defined or be defined as\n-   a constant. */\n+   a constant.  */\n \n #define ADDRESS_COST(ADDR) (REG_P (ADDR) ? 1 : mips_address_cost (ADDR))\n \n@@ -3766,7 +3766,7 @@ while (0)\n    all values except -1.  We could handle that case by using a signed\n    divide, e.g.  -1 / 2 (or maybe 1 / -2?).  We'd have to emit a\n    compare/branch to test the input value to see which instruction we\n-   need to use.  This gets pretty messy, but it is feasible. */\n+   need to use.  This gets pretty messy, but it is feasible.  */\n \n #define REGISTER_MOVE_COST(MODE, FROM, TO)\t\\\n   ((FROM) == M16_REGS && GR_REG_CLASS_P (TO) ? 2\t\t\t\\\n@@ -4233,7 +4233,7 @@ while (0)\n \t$Lb[0-9]+\tBegin blocks for MIPS debug support\n \t$Lc[0-9]+\tLabel for use in s<xx> operation.\n \t$Le[0-9]+\tEnd blocks for MIPS debug support\n-\t$Lp\\..+\t\tHalf-pic labels. */\n+\t$Lp\\..+\t\tHalf-pic labels.  */\n \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.\n@@ -4543,7 +4543,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    address with faster (gp) register relative addressing, which can\n    only get at sdata and sbss items (there is no stext !!)  However,\n    if the constant is too large for sdata, and it's readonly, it\n-   will go into the .rdata section. */\n+   will go into the .rdata section.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n@@ -4632,7 +4632,7 @@ while (0)\n    and mips-tdump.c to print them out.\n \n    These must match the corresponding definitions in gdb/mipsread.c.\n-   Unfortunately, gcc and gdb do not currently share any directories. */\n+   Unfortunately, gcc and gdb do not currently share any directories.  */\n \n #define CODE_MASK 0x8F300\n #define MIPS_IS_STAB(sym) (((sym)->index & 0xFFF00) == CODE_MASK)"}, {"sha": "2447262f05ebf8882195278329d8b5d9cae4a719", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -2617,7 +2617,7 @@\n       have_dep_anti = 1;\n   if (! have_dep_anti)\n     {\n-      /* No branch delay slots on mips16. */\n+      /* No branch delay slots on mips16.  */\n       if (which_alternative == 1)\n         return \\\"%(bnez\\\\t%0,1f\\\\n\\\\tbreak\\\\t%2\\\\n%~1:%)\\\";\n       else"}, {"sha": "2be57ba6d4bfaf1a110d916d3791748f300e7507", "filename": "gcc/config/mips/mips16.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fmips16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips16.S?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -41,7 +41,7 @@ Boston, MA 02111-1307, USA.  */\n /* This file contains 32 bit assembly code.  */\n \t.set nomips16\n \n-/* Start a function. */\n+/* Start a function.  */\n \n #define STARTFN(NAME) .globl NAME; .ent NAME; NAME:\n "}, {"sha": "5d34ba2eb1df4a48837fca130abe72d6da43cd75", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* Define mips-specific netbsd predefines... */\n+/* Define mips-specific netbsd predefines...  */\n #ifndef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D__ANSI_COMPAT \\\n -DMIPSEL -DR3000 -DSYSTYPE_BSD -D_SYSTYPE_BSD -D__NetBSD__ -Dmips \\"}, {"sha": "c15754d8971b2b4b605d0f13736651112d0a6637", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Define this macro meaning that `gcc' should find the library\n    `libgcc.a' by hand, rather than passing the argument `-lgcc' to\n-   tell the linker to do the search. */\n+   tell the linker to do the search.  */\n \n #define LINK_LIBGCC_SPECIAL 1\n "}, {"sha": "d2f5495f0575ec0b1329ea06ca6fce1e9e44cd23", "filename": "gcc/config/mips/r3900.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fr3900.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fr3900.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fr3900.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n   %e-msingle-float and -msoft-float can not both be specified.}}\"\n \n /* The following is needed because -mips3 and -mips4 set gp64 which in\n-   combination with abi=eabi, causes long64 to be set. */\n+   combination with abi=eabi, causes long64 to be set.  */\n #define SUBTARGET_CPP_SIZE_SPEC \"\\\n %{mips3:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n %{mips4:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n /* For the 'preferred' cases (\"gN\" and \"ggdbN\") we need to tell the \n-   gnu assembler not to generate debugging information. */\n+   gnu assembler not to generate debugging information.  */\n    \n #define SUBTARGET_ASM_DEBUGGING_SPEC \"\\\n %{!mmips-as: \\"}, {"sha": "1df69745f21191a465b9e95c8693f747c7c5c80b", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -78,7 +78,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef OBJECT_FORMAT_COFF\n \n-/* We don't support debugging info for now. */\n+/* We don't support debugging info for now.  */\n #undef DBX_DEBUGGING_INFO\n #undef SDB_DEBUGGING_INFO\n #undef MIPS_DEBUGGING_INFO"}, {"sha": "25a5d5383ca6d08c03c72c62e3485420f9c57537", "filename": "gcc/config/mips/svr4-t.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fsvr4-t.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fsvr4-t.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsvr4-t.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions of target machine for GNU compiler.  Tandem S2 w/ NonStop UX. */\n+/* Definitions of target machine for GNU compiler.  Tandem S2 w/ NonStop UX.  */\n \n /* Use the default value for this.  */\n #undef STANDARD_INCLUDE_DIR"}, {"sha": "7b55987613af7b74e6c8d46cc5046cbc40f13f5e", "filename": "gcc/config/mips/ultrix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fultrix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987ba558b088748ac74034b0fbf09d0900db39bd/gcc%2Fconfig%2Fmips%2Fultrix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fultrix.h?ref=987ba558b088748ac74034b0fbf09d0900db39bd", "patch": "@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_MEM_FUNCTIONS\n \n /* Work around assembler forward label references generated in exception\n-   handling code. */\n+   handling code.  */\n #define DWARF2_UNWIND_INFO 0\n \n /* INITIALIZE_TRAMPOLINE calls this library function to flush"}]}