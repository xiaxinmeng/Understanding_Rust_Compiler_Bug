{"sha": "51ab2a39e9baae7fe1552daca02337050b11cfb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhYjJhMzllOWJhYWU3ZmUxNTUyZGFjYTAyMzM3MDUwYjExY2ZiNg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-05-23T10:22:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:22:47Z"}, "message": "[Ada] Restrict initialization of External_Tag and Expanded_Name\n\n2018-05-23  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Make_DT): Restrict the initialization of\n\tExternal_Tag and Expanded_Name to an empty string to the case where\n\tboth pragmas apply (i.e. No_Tagged_Streams and Discard_Names), since\n\trestricted runtimes are compiled with pragma Discard_Names.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/implementation_defined_characteristics.rst: Add\n\tdocumentation.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r260584", "tree": {"sha": "c0156481dff84dfa33dbdcd1b561a7c3de7a4f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0156481dff84dfa33dbdcd1b561a7c3de7a4f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ab2a39e9baae7fe1552daca02337050b11cfb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ab2a39e9baae7fe1552daca02337050b11cfb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ab2a39e9baae7fe1552daca02337050b11cfb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ab2a39e9baae7fe1552daca02337050b11cfb6/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6734617cedcadfddfc33378ce824b4620381d91c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6734617cedcadfddfc33378ce824b4620381d91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6734617cedcadfddfc33378ce824b4620381d91c"}], "stats": {"total": 174, "additions": 69, "deletions": 105}, "files": [{"sha": "abc289c419b3d5f603963425e74933bb80d280c3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51ab2a39e9baae7fe1552daca02337050b11cfb6", "patch": "@@ -1,3 +1,14 @@\n+2018-05-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Restrict the initialization of\n+\tExternal_Tag and Expanded_Name to an empty string to the case where\n+\tboth pragmas apply (i.e. No_Tagged_Streams and Discard_Names), since\n+\trestricted runtimes are compiled with pragma Discard_Names.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/implementation_defined_characteristics.rst: Add\n+\tdocumentation.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2018-05-23  Maroua Maalej  <maalej@adacore.com>\n \n \t* sem_spark.adb: Fix of some permission rules of pointers in SPARK."}, {"sha": "67ad7e7aa0d06f602e176bd6f72ee336f899dcab", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=51ab2a39e9baae7fe1552daca02337050b11cfb6", "patch": "@@ -875,6 +875,11 @@ be suppressed.  In the presence of this pragma, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n+For tagged types, when pragmas ``Discard_Names`` and ``No_Tagged_Streams``\n+simultaneously apply, their Expanded_Name and External_Tag are initialized\n+with empty strings. This is useful to avoid exposing entity names at binary\n+level.\n+\n *\n   \"The result of the ``Task_Identification.Image``\n   attribute.  See C.7.1(7).\""}, {"sha": "c3a1ec4ba5f765af7d5a8c31749449b3098dda9c", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=51ab2a39e9baae7fe1552daca02337050b11cfb6", "patch": "@@ -3892,6 +3892,11 @@ and derived types of this type inherit the pragma automatically, so the effect\n applies to a complete hierarchy (this is necessary to deal with the class-wide\n dispatching versions of the stream routines).\n \n+When pragmas ``Discard_Names`` and ``No_Tagged_Streams`` are simultaneously\n+applied to a tagged type its Expanded_Name and External_Tag are initialized\n+with empty strings. This is useful to avoid exposing entity names at binary\n+level but has a negative impact on the debuggability of tagged types.\n+\n Pragma Normalize_Scalars\n ========================\n "}, {"sha": "bded4c1dc52ffa0ff04cd1e75a974e3218062149", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 37, "deletions": 104, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=51ab2a39e9baae7fe1552daca02337050b11cfb6", "patch": "@@ -4480,6 +4480,21 @@ package body Exp_Disp is\n       Result    : constant List_Id := New_List;\n       Tname     : constant Name_Id := Chars (Typ);\n \n+      --  When pragmas Discard_Names and No_Tagged_Streams simultaneously apply\n+      --  we initialize the Expanded_Name and the External_Tag of this tagged\n+      --  type with an empty string. This is useful to avoid exposing entity\n+      --  names at binary level. It can be done when both pragmas apply because\n+      --    (1) Discard_Names allows initializing Expanded_Name with an\n+      --        implementation defined value (Ada RM Section C.5 (7/2)).\n+      --    (2) External_Tag (combined with Internal_Tag) is used for object\n+      --        streaming and No_Tagged_Streams inhibits the generation of\n+      --        streams.\n+\n+      Discard_Names : constant Boolean :=\n+                        Present (No_Tagged_Streams_Pragma (Typ))\n+                          and then (Global_Discard_Names\n+                                      or else Einfo.Discard_Names (Typ));\n+\n       --  The following name entries are used by Make_DT to generate a number\n       --  of entities related to a tagged type. These entities may be generated\n       --  in a scope other than that of the tagged type declaration, and if\n@@ -4511,8 +4526,7 @@ package body Exp_Disp is\n       DT_Aggr_List       : List_Id;\n       DT_Constr_List     : List_Id;\n       DT_Ptr             : Entity_Id;\n-      Expanded_Name      : Entity_Id;\n-      External_Tag_Name  : Entity_Id;\n+      Exname             : Entity_Id;\n       HT_Link            : Entity_Id;\n       ITable             : Node_Id;\n       I_Depth            : Nat := 0;\n@@ -4591,44 +4605,12 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n-      DT            := Make_Defining_Identifier (Loc, Name_DT);\n-      Expanded_Name := Make_Defining_Identifier (Loc, Name_Exname);\n-      HT_Link       := Make_Defining_Identifier (Loc, Name_HT_Link);\n-      Predef_Prims  := Make_Defining_Identifier (Loc, Name_Predef_Prims);\n-      SSD           := Make_Defining_Identifier (Loc, Name_SSD);\n-      TSD           := Make_Defining_Identifier (Loc, Name_TSD);\n-\n-      --  Expanded_Name\n-      --  -------------\n-\n-      --  We generally initialize the Expanded_Name and the External_Tag of\n-      --  tagged types with the same name, unless pragmas Discard_Names or\n-      --  No_Tagged_Streams apply: Discard_Names allows us to initialize its\n-      --  Expanded_Name with an empty string because in such a case it's\n-      --  value is implementation defined (Ada RM Section C.5(7/2)); pragma\n-      --  No_Tagged_Streams inhibits the generation of stream routines and\n-      --  we initialize its External_Tag with an empty string since Ada.Tags\n-      --  services Internal_Tag and External_Tag are mainly used with streams.\n-\n-      --  Small optimization: when both pragmas apply then there is no need to\n-      --  declare two objects initialized with empty strings (since the two\n-      --  aggregate components can be initialized with the same object).\n-\n-      if (Global_Discard_Names or else Discard_Names (Typ))\n-        and then Present (No_Tagged_Streams_Pragma (Typ))\n-      then\n-         External_Tag_Name := Expanded_Name;\n-\n-      elsif Global_Discard_Names\n-        or else Discard_Names (Typ)\n-        or else Present (No_Tagged_Streams_Pragma (Typ))\n-      then\n-         External_Tag_Name :=\n-           Make_Defining_Identifier (Loc,\n-             New_External_Name (Tname, 'N', Suffix_Index => -1));\n-      else\n-         External_Tag_Name := Expanded_Name;\n-      end if;\n+      DT           := Make_Defining_Identifier (Loc, Name_DT);\n+      Exname       := Make_Defining_Identifier (Loc, Name_Exname);\n+      HT_Link      := Make_Defining_Identifier (Loc, Name_HT_Link);\n+      Predef_Prims := Make_Defining_Identifier (Loc, Name_Predef_Prims);\n+      SSD          := Make_Defining_Identifier (Loc, Name_SSD);\n+      TSD          := Make_Defining_Identifier (Loc, Name_TSD);\n \n       --  Initialize Parent_Typ handling private types\n \n@@ -5033,74 +5015,34 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n-      --  Generate:\n-      --    Expanded_Name : constant String := \"\";\n+      --  Generate: Expanded_Name : constant String := \"\";\n \n-      if Global_Discard_Names or else Discard_Names (Typ) then\n+      if Discard_Names then\n          Append_To (Result,\n            Make_Object_Declaration (Loc,\n-             Defining_Identifier => Expanded_Name,\n+             Defining_Identifier => Exname,\n              Constant_Present    => True,\n              Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n              Expression =>\n                Make_String_Literal (Loc, \"\")));\n \n-      --  Generate:\n-      --    Expanded_Name : constant String := full_qualified_name (typ);\n+      --  Generate: Exname : constant String := full_qualified_name (typ);\n       --  The type itself may be an anonymous parent type, so use the first\n       --  subtype to have a user-recognizable name.\n \n       else\n          Append_To (Result,\n            Make_Object_Declaration (Loc,\n-             Defining_Identifier => Expanded_Name,\n+             Defining_Identifier => Exname,\n              Constant_Present    => True,\n              Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n              Expression =>\n                Make_String_Literal (Loc,\n                  Fully_Qualified_Name_String (First_Subtype (Typ)))));\n       end if;\n \n-      Set_Is_Statically_Allocated (Expanded_Name);\n-      Set_Is_True_Constant (Expanded_Name);\n-\n-      --  Generate the External_Tag name only when it is required (since in\n-      --  most cases we can initialize Expanded_Name and External_Tag using\n-      --  the same object).\n-\n-      if Expanded_Name /= External_Tag_Name then\n-\n-         --  Generate:\n-         --    External_Tag_Name : constant String := \"\";\n-\n-         if Present (No_Tagged_Streams_Pragma (Typ)) then\n-            Append_To (Result,\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => External_Tag_Name,\n-                Constant_Present    => True,\n-                Object_Definition   =>\n-                  New_Occurrence_Of (Standard_String, Loc),\n-                Expression          => Make_String_Literal (Loc, \"\")));\n-\n-         --  Generate:\n-         --    External_Tag_Name : constant String :=\n-         --                          full_qualified_name (typ);\n-\n-         else\n-            Append_To (Result,\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => External_Tag_Name,\n-                Constant_Present    => True,\n-                Object_Definition   =>\n-                  New_Occurrence_Of (Standard_String, Loc),\n-                Expression          =>\n-                  Make_String_Literal (Loc,\n-                    Fully_Qualified_Name_String (First_Subtype (Typ)))));\n-         end if;\n-\n-         Set_Is_Statically_Allocated (External_Tag_Name);\n-         Set_Is_True_Constant (External_Tag_Name);\n-      end if;\n+      Set_Is_Statically_Allocated (Exname);\n+      Set_Is_True_Constant (Exname);\n \n       --  Declare the object used by Ada.Tags.Register_Tag\n \n@@ -5120,8 +5062,8 @@ package body Exp_Disp is\n       --           (Idepth             => I_Depth,\n       --            Access_Level       => Type_Access_Level (Typ),\n       --            Alignment          => Typ'Alignment,\n-      --            Expanded_Name      => Cstring_Ptr!(ExpandedName'Address))\n-      --            External_Tag       => Cstring_Ptr!(ExternalName'Address))\n+      --            Expanded_Name      => Cstring_Ptr!(Exname'Address))\n+      --            External_Tag       => Cstring_Ptr!(Exname'Address))\n       --            HT_Link            => HT_Link'Address,\n       --            Transportable      => <<boolean-value>>,\n       --            Is_Abstract        => <<boolean-value>>,\n@@ -5191,18 +5133,9 @@ package body Exp_Disp is\n       Append_To (TSD_Aggr_List,\n         Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n           Make_Attribute_Reference (Loc,\n-            Prefix         => New_Occurrence_Of (Expanded_Name, Loc),\n+            Prefix         => New_Occurrence_Of (Exname, Loc),\n             Attribute_Name => Name_Address)));\n \n-      --  External_Tag when pragma No_Tagged_Streams applies\n-\n-      if Present (No_Tagged_Streams_Pragma (Typ)) then\n-         New_Node :=\n-           Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n-             Make_Attribute_Reference (Loc,\n-               Prefix         => New_Occurrence_Of (External_Tag_Name, Loc),\n-               Attribute_Name => Name_Address));\n-\n       --  External_Tag of a local tagged type\n \n       --     <typ>A : constant String :=\n@@ -5230,7 +5163,8 @@ package body Exp_Disp is\n       --  specified. That's an odd case for which we have already issued a\n       --  warning, where we will not be able to compute the internal tag.\n \n-      elsif not Is_Library_Level_Entity (Typ)\n+      if not Discard_Names\n+        and then not Is_Library_Level_Entity (Typ)\n         and then not Has_External_Tag_Rep_Clause (Typ)\n       then\n          declare\n@@ -5333,8 +5267,7 @@ package body Exp_Disp is\n                New_Node :=\n                  Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n                    Make_Attribute_Reference (Loc,\n-                     Prefix         =>\n-                       New_Occurrence_Of (External_Tag_Name, Loc),\n+                     Prefix         => New_Occurrence_Of (Exname, Loc),\n                      Attribute_Name => Name_Address));\n             else\n                Old_Val := Strval (Expr_Value_S (Expression (Def)));\n@@ -6501,7 +6434,7 @@ package body Exp_Disp is\n       --  applies to Ada 2005 (and Ada 2012). It might be argued that it is\n       --  a desirable check to add in Ada 95 mode, but we hesitate to make\n       --  this change, as it would be incompatible, and could conceivably\n-      --  cause a problem in existing Aa 95 code.\n+      --  cause a problem in existing Ada 95 code.\n \n       --  We check for No_Run_Time_Mode here, because we do not want to pick\n       --  up the RE_Check_TSD entity and call it in No_Run_Time mode.\n@@ -6510,10 +6443,10 @@ package body Exp_Disp is\n       --  was discarded.\n \n       if not No_Run_Time_Mode\n+        and then not Discard_Names\n         and then Ada_Version >= Ada_2005\n         and then RTE_Available (RE_Check_TSD)\n         and then not Duplicated_Tag_Checks_Suppressed (Typ)\n-        and then not (Global_Discard_Names or else Discard_Names (Typ))\n       then\n          Append_To (Elab_Code,\n            Make_Procedure_Call_Statement (Loc,"}, {"sha": "f4b7f94c0c8f01dc85d0a428a1e2a69f5c5feefa", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ab2a39e9baae7fe1552daca02337050b11cfb6/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=51ab2a39e9baae7fe1552daca02337050b11cfb6", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Apr 20, 2018\n+GNAT Reference Manual , Apr 23, 2018\n \n AdaCore\n \n@@ -5328,6 +5328,11 @@ and derived types of this type inherit the pragma automatically, so the effect\n applies to a complete hierarchy (this is necessary to deal with the class-wide\n dispatching versions of the stream routines).\n \n+When pragmas @code{Discard_Names} and @code{No_Tagged_Streams} are simultaneously\n+applied to a tagged type its Expanded_Name and External_Tag are initialized\n+with empty strings. This is useful to avoid exposing entity names at binary\n+level but has a negative impact on the debuggability of tagged types.\n+\n @node Pragma Normalize_Scalars,Pragma Obsolescent,Pragma No_Tagged_Streams,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-normalize-scalars}@anchor{a8}\n @section Pragma Normalize_Scalars\n@@ -17143,6 +17148,11 @@ be suppressed.  In the presence of this pragma, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n+For tagged types, when pragmas @code{Discard_Names} and @code{No_Tagged_Streams}\n+simultaneously apply, their Expanded_Name and External_Tag are initialized\n+with empty strings. This is useful to avoid exposing entity names at binary\n+level.\n+\n \n @itemize *\n "}]}