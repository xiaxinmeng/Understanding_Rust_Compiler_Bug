{"sha": "e3889521e1bfb21b289d77612afac7e888b3eff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4ODk1MjFlMWJmYjIxYjI4OWQ3NzYxMmFmYWM3ZTg4OGIzZWZmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-15T16:47:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-15T16:47:47Z"}, "message": "extend.texi: Clean up @xref{...} uses.\n\n\t* doc/extend.texi: Clean up @xref{...} uses.\n\t* doc/invoke.texi: Likewise.\n\nFrom-SVN: r243717", "tree": {"sha": "68c0c5f075b74633178468627ab4f8f9990fdafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c0c5f075b74633178468627ab4f8f9990fdafe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3889521e1bfb21b289d77612afac7e888b3eff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3889521e1bfb21b289d77612afac7e888b3eff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3889521e1bfb21b289d77612afac7e888b3eff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3889521e1bfb21b289d77612afac7e888b3eff0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "844af7671ff4805bcbaf42f8b123b6cde2a12cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844af7671ff4805bcbaf42f8b123b6cde2a12cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844af7671ff4805bcbaf42f8b123b6cde2a12cf8"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "8520be03585d15c96ac7ef90a915ec87d4051021", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3889521e1bfb21b289d77612afac7e888b3eff0", "patch": "@@ -1,3 +1,8 @@\n+2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/extend.texi: Clean up @xref{...} uses.\n+\t* doc/invoke.texi: Likewise.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-fpus.def: Add CNAME field to all FPU definitions."}, {"sha": "4a05e50751e0c10920c225919109e1a29edb6cb6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e3889521e1bfb21b289d77612afac7e888b3eff0", "patch": "@@ -1057,7 +1057,7 @@ implements conversions between @code{__fp16} and other types as library\n calls.\n \n It is recommended that portable code use the @code{_Float16} type defined\n-by ISO/IEC TS 18661-3:2015 (@xref{Floating Types}).\n+by ISO/IEC TS 18661-3:2015.  @xref{Floating Types}.\n \n @node Decimal Float\n @section Decimal Floating Types\n@@ -2089,7 +2089,7 @@ union foo f = @{ .d = 4 @};\n converts 4 to a @code{double} to store it in the union using\n the second element.  By contrast, casting 4 to type @code{union foo}\n stores it into the union as the integer @code{i}, since it is\n-an integer.  (@xref{Cast to Union}.)\n+an integer.  @xref{Cast to Union}.\n \n You can combine this technique of naming elements with ordinary C\n initialization of successive elements.  Each initializer element that\n@@ -2181,7 +2181,7 @@ specified is a union type.  You can specify the type either with the\n @code{union} keyword or with a @code{typedef} name that refers to\n a union.  A cast to a union actually creates a compound literal and\n yields an lvalue, not an rvalue like true casts do.\n-(@xref{Compound Literals}.)\n+@xref{Compound Literals}.\n \n The types that may be cast to the union type are those of the members\n of the union.  Thus, given the following union and variables:"}, {"sha": "9eda687ad02c562827f9411c0f076d664b10c5e5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3889521e1bfb21b289d77612afac7e888b3eff0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e3889521e1bfb21b289d77612afac7e888b3eff0", "patch": "@@ -7262,8 +7262,8 @@ release to an another.\n @opindex fno-keep-inline-dllexport\n This is a more fine-grained version of @option{-fkeep-inline-functions},\n which applies only to functions that are declared using the @code{dllexport}\n-attribute or declspec (@xref{Function Attributes,,Declaring Attributes of\n-Functions}.)\n+attribute or declspec.  @xref{Function Attributes,,Declaring Attributes of\n+Functions}.\n \n @item -fkeep-inline-functions\n @opindex fkeep-inline-functions"}]}