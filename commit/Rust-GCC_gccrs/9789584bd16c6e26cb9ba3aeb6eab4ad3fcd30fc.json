{"sha": "9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc4OTU4NGJkMTZjNmUyNmNiOWJhM2FlYjZlYWI0YWQzZmNkMzBmYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-01-09T20:02:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-01-09T20:02:35Z"}, "message": "h8300.c (get_shift_alg): Remove an argument cpu.\n\n2001-01-09  Kazu Hirata  <kazu@hxi.com>\n\n\t* config/h8300/h8300.c (get_shift_alg): Remove an argument cpu.\n\tChange an argument mode of machine_mode to shift_mode of\n\tshift_mode.  Remove an extra error check.\n\t(emit_a_shift): Adopt to the new calling prototype of\n\tget_shift_alg.\n\nFrom-SVN: r38839", "tree": {"sha": "d31d6b7cfe65ed651d8634b67c8f354a2d461c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d31d6b7cfe65ed651d8634b67c8f354a2d461c91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc/comments", "author": null, "committer": null, "parents": [{"sha": "00dba523ac47a86a2778a59dc610f1b60d8995f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dba523ac47a86a2778a59dc610f1b60d8995f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dba523ac47a86a2778a59dc610f1b60d8995f8"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "94d8ca4e8624405c97de019bd8f4577737df5f1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "patch": "@@ -1,3 +1,11 @@\n+2001-01-09  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (get_shift_alg): Remove an argument cpu.\n+\tChange an argument mode of machine_mode to shift_mode of\n+\tshift_mode.  Remove an extra error check.\n+\t(emit_a_shift): Adopt to the new calling prototype of\n+\tget_shift_alg.\n+\n 2001-01-09  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_sysv_varargs_p): Delete."}, {"sha": "0f88433aff26c331f08ad4de577744534c9b4e2a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9789584bd16c6e26cb9ba3aeb6eab4ad3fcd30fc", "patch": "@@ -1961,8 +1961,8 @@ static const char *const rotate_two[3][3] =\n     }\n };\n \n-static enum shift_alg get_shift_alg PARAMS ((enum attr_cpu, enum shift_type,\n-\t\t\t\t\t     enum machine_mode, int,\n+static enum shift_alg get_shift_alg PARAMS ((enum shift_type,\n+\t\t\t\t\t     enum shift_mode, int,\n \t\t\t\t\t     const char **, const char **,\n \t\t\t\t\t     int *));\n \n@@ -1980,47 +1980,23 @@ static enum shift_alg get_shift_alg PARAMS ((enum attr_cpu, enum shift_type,\n    1,2,3,4 will be inlined (1,2 for SI).  */\n \n static enum shift_alg\n-get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n+get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t       assembler2_p, cc_valid_p)\n-     enum attr_cpu cpu;\n      enum shift_type shift_type;\n-     enum machine_mode mode;\n+     enum shift_mode shift_mode;\n      int count;\n      const char **assembler_p;\n      const char **assembler2_p;\n      int *cc_valid_p;\n {\n-  enum shift_mode shift_mode;\n-\n-  /* We don't handle negative shifts or shifts greater than the word size,\n-     they should have been handled already.  */\n-\n-  if (count < 0 || (unsigned int) count > GET_MODE_BITSIZE (mode))\n-    abort ();\n-\n-  switch (mode)\n-    {\n-    case QImode:\n-      shift_mode = QIshift;\n-      break;\n-    case HImode:\n-      shift_mode = HIshift;\n-      break;\n-    case SImode:\n-      shift_mode = SIshift;\n-      break;\n-    default:\n-      abort ();\n-    }\n-\n   /* Assume either SHIFT_LOOP or SHIFT_INLINE.\n      It is up to the caller to know that looping clobbers cc.  */\n-  *assembler_p = shift_one[cpu][shift_type][shift_mode].assembler;\n+  *assembler_p = shift_one[cpu_type][shift_type][shift_mode].assembler;\n   if (TARGET_H8300S)\n     *assembler2_p = shift_two[shift_type][shift_mode].assembler;\n   else\n     *assembler2_p = NULL;\n-  *cc_valid_p = shift_one[cpu][shift_type][shift_mode].cc_valid;\n+  *cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n \n   /* Now look for cases we want to optimize.  */\n \n@@ -2050,7 +2026,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t    return SHIFT_LOOP;\n \n \t  /* Other shifts by 5, 6, or 7 bits use SHIFT_ROT_AND.  */\n-\t  *assembler_p = rotate_one[cpu][shift_type][shift_mode];\n+\t  *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n \t  if (TARGET_H8300S)\n \t    *assembler2_p = rotate_two[shift_type][shift_mode];\n \t  *cc_valid_p = 0;\n@@ -2239,7 +2215,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t    }\n \t  else if (shift_type != SHIFT_ASHIFTRT)\n \t    {\n-\t      *assembler_p = rotate_one[cpu][shift_type][shift_mode];\n+\t      *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n \t      if (TARGET_H8300S)\n \t        *assembler2_p = rotate_two[shift_type][shift_mode];\n \t      else\n@@ -2428,7 +2404,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t    }\n \t  else\n \t    {\n-\t      *assembler_p = rotate_one[cpu][shift_type][shift_mode];\n+\t      *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n \t      if (TARGET_H8300S)\n \t\t*assembler2_p = rotate_two[shift_type][shift_mode];\n \t      else\n@@ -2461,7 +2437,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t\t}\n \t      else\n \t\t{\n-\t\t  *assembler_p = rotate_one[cpu][shift_type][shift_mode];\n+\t\t  *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n \t\t  if (TARGET_H8300S)\n \t\t    *assembler2_p = rotate_two[shift_type][shift_mode];\n \t\t  else\n@@ -2537,7 +2513,7 @@ emit_a_shift (insn, operands)\n       fprintf (asm_out_file, \"\\tble\t.Lle%d\\n\", loopend_lab);\n \n       /* Get the assembler code to do one shift.  */\n-      get_shift_alg (cpu_type, shift_type, mode, 1, &assembler,\n+      get_shift_alg (shift_type, shift_mode, 1, &assembler,\n \t\t     &assembler2, &cc_valid);\n \n       fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n@@ -2562,7 +2538,7 @@ emit_a_shift (insn, operands)\n       else if ((unsigned int) n > GET_MODE_BITSIZE (mode))\n \tn = GET_MODE_BITSIZE (mode);\n \n-      alg = get_shift_alg (cpu_type, shift_type, mode, n, &assembler,\n+      alg = get_shift_alg (shift_type, shift_mode, n, &assembler,\n \t\t\t   &assembler2, &cc_valid);\n \n       switch (alg)"}]}