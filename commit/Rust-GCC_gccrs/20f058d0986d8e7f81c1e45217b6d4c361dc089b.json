{"sha": "20f058d0986d8e7f81c1e45217b6d4c361dc089b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmMDU4ZDA5ODZkOGU3ZjgxYzFlNDUyMTdiNmQ0YzM2MWRjMDg5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-27T16:48:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-27T16:48:34Z"}, "message": "PR c++/78771 - ICE with inherited constructor.\n\n\t* call.c (build_over_call): Call deduce_inheriting_ctor here.\n\t* pt.c (tsubst_decl): Not here.\n\t* class.c (add_method): Or here.\n\t* method.c (deduce_inheriting_ctor): Handle clones.\n\t(implicitly_declare_fn): Don't deduce inheriting ctors yet.\n\nFrom-SVN: r244988", "tree": {"sha": "95c5d020797f1cfdd1538426d670c45790934a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c5d020797f1cfdd1538426d670c45790934a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20f058d0986d8e7f81c1e45217b6d4c361dc089b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f058d0986d8e7f81c1e45217b6d4c361dc089b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f058d0986d8e7f81c1e45217b6d4c361dc089b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f058d0986d8e7f81c1e45217b6d4c361dc089b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7d47f352663d16c12cb3a40459b546d166023d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d47f352663d16c12cb3a40459b546d166023d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d47f352663d16c12cb3a40459b546d166023d7"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "1f31731bc6919f7bdf3cb59b4ace17ed32311c68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -1,3 +1,12 @@\n+2017-01-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/78771 - ICE with inherited constructor.\n+\t* call.c (build_over_call): Call deduce_inheriting_ctor here.\n+\t* pt.c (tsubst_decl): Not here.\n+\t* class.c (add_method): Or here.\n+\t* method.c (deduce_inheriting_ctor): Handle clones.\n+\t(implicitly_declare_fn): Don't deduce inheriting ctors yet.\n+\n 2017-01-27  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/64382"}, {"sha": "8030d7ebb0be45d71905f1a73004cd08ef809448", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -7581,6 +7581,12 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \tjoust (cand, w->loser, 1, complain);\n     }\n \n+  /* OK, we're actually calling this inherited constructor; set its deletedness\n+     appropriately.  We can get away with doing this here because calling is\n+     the only way to refer to a constructor.  */\n+  if (DECL_INHERITED_CTOR (fn))\n+    deduce_inheriting_ctor (fn);\n+\n   /* Make =delete work with SFINAE.  */\n   if (DECL_DELETED_FN (fn) && !(complain & tf_error))\n     return error_mark_node;"}, {"sha": "03a973084e5cff53e213a4c3ee9c220f8ae35226", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -1197,8 +1197,6 @@ add_method (tree type, tree method, tree using_decl)\n \t\t\t  SET_DECL_INHERITED_CTOR\n \t\t\t    (fn, ovl_cons (DECL_INHERITED_CTOR (method),\n \t\t\t\t\t   DECL_INHERITED_CTOR (fn)));\n-\t\t\t  /* Adjust deletedness and such.  */\n-\t\t\t  deduce_inheriting_ctor (fn);\n \t\t\t  /* And discard the new one.  */\n \t\t\t  return false;\n \t\t\t}"}, {"sha": "e80b80606b56e6ad1c449b8c2bd2536715d3016f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -1855,6 +1855,7 @@ explain_implicit_non_constexpr (tree decl)\n void\n deduce_inheriting_ctor (tree decl)\n {\n+  decl = DECL_ORIGIN (decl);\n   gcc_assert (DECL_INHERITED_CTOR (decl));\n   tree spec;\n   bool trivial, constexpr_, deleted;\n@@ -1868,6 +1869,13 @@ deduce_inheriting_ctor (tree decl)\n     deleted = true;\n   DECL_DELETED_FN (decl) = deleted;\n   TREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl), spec);\n+\n+  tree clone;\n+  FOR_EACH_CLONE (clone, decl)\n+    {\n+      DECL_DELETED_FN (clone) = deleted;\n+      TREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone), spec);\n+    }\n }\n \n /* Implicitly declare the special function indicated by KIND, as a\n@@ -1968,10 +1976,10 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n \n   bool trivial_p = false;\n \n-  if (inherited_ctor && TREE_CODE (inherited_ctor) == TEMPLATE_DECL)\n+  if (inherited_ctor)\n     {\n-      /* For an inheriting constructor template, just copy these flags from\n-\t the inherited constructor template for now.  */\n+      /* For an inheriting constructor, just copy these flags from the\n+\t inherited constructor until deduce_inheriting_ctor.  */\n       raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (inherited_ctor));\n       deleted_p = DECL_DELETED_FN (inherited_ctor);\n       constexpr_p = DECL_DECLARED_CONSTEXPR_P (inherited_ctor);"}, {"sha": "0ba95d636cd68121f9fc6e6ac03807217728a4e1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -12358,8 +12358,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    maybe_retrofit_in_chrg (r);\n \t    if (DECL_CONSTRUCTOR_P (r))\n \t      grok_ctor_properties (ctx, r);\n-\t    if (DECL_INHERITED_CTOR (r))\n-\t      deduce_inheriting_ctor (r);\n \t    /* If this is an instantiation of a member template, clone it.\n \t       If it isn't, that'll be handled by\n \t       clone_constructors_and_destructors.  */"}, {"sha": "f489f8631f4f92bbe49a3d44f5d334374ef38124", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78771-new.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-new.C?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/78771\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fnew-inheriting-ctors\" }\n+\n+// ICE instantiating a deleted inherited ctor\n+\n+struct Base\n+{\n+  template <typename U> Base (U);\n+\n+  Base (int);\n+};\n+\n+struct Derived;\n+\n+struct Middle : Base\n+{\n+  using Base::Base;\n+\n+  Middle (Derived);\n+};\n+\n+struct Derived : Middle\n+{\n+  using Middle::Middle;\n+};\n+\n+Middle::Middle (Derived) : Middle (0) {}"}, {"sha": "b723b1188dbb1509761d76d986ea2e71d6cfe1f5", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78771-old.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-old.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-old.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78771-old.C?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/78771\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fno-new-inheriting-ctors\" }\n+\n+// ICE instantiating a deleted inherited ctor\n+\n+struct Base\n+{\n+  template <typename U> Base (U);\n+\n+  Base (int);\n+};\n+\n+struct Derived;\n+\n+struct Middle : Base\n+{\n+  using Base::Base;\n+\n+  Middle (Derived);\n+};\n+\n+struct Derived : Middle\n+{\n+  using Middle::Middle;\n+};\n+\n+Middle::Middle (Derived) : Middle (0) {}"}, {"sha": "91784948d161fc8ecc4908927e0123e49d182e3d", "filename": "gcc/testsuite/g++.dg/cpp1z/pr78771.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr78771.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f058d0986d8e7f81c1e45217b6d4c361dc089b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr78771.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr78771.C?ref=20f058d0986d8e7f81c1e45217b6d4c361dc089b", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/78771\n+// { dg-options -std=c++1z }\n+\n+// ICE instantiating a deleted inherited ctor\n+\n+struct Base\n+{\n+  template <typename U> Base (U);\n+\n+  Base (int);\n+};\n+\n+struct Derived;\n+\n+struct Middle : Base\n+{\n+  using Base::Base;\n+\n+  Middle (Derived);\n+};\n+\n+struct Derived : Middle\n+{\n+  using Middle::Middle;\n+};\n+\n+Middle::Middle (Derived) : Middle (0) {}"}]}