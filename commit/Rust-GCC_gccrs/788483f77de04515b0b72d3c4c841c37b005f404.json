{"sha": "788483f77de04515b0b72d3c4c841c37b005f404", "node_id": "C_kwDOANBUbNoAKDc4ODQ4M2Y3N2RlMDQ1MTViMGI3MmQzYzRjODQxYzM3YjAwNWY0MDQ", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-10-20T20:02:52Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-10-20T20:02:52Z"}, "message": "calls.c: Remove some dead code and target hooks\n\nLooking at calls.c:initialize_argument_information, I spotted some dead\ncode that seems to have been left behind from when MPX support was\nremoved.\n\nThis change removes that code as well as the associated target hooks\n(which appear to be unused).\n\ngcc/ChangeLog:\n\n\t* calls.c (initialize_argument_information): Remove some dead\n\tcode, remove handling for function_arg returning const_int.\n\t* doc/tm.texi: Delete documentation for unused target hooks.\n\t* doc/tm.texi.in: Likewise.\n\t* target.def (load_bounds_for_arg): Delete.\n\t(store_bounds_for_arg): Delete.\n\t(load_returned_bounds): Delete.\n\t(store_returned_bounds): Delete.\n\t* targhooks.c (default_load_bounds_for_arg): Delete.\n\t(default_store_bounds_for_arg): Delete.\n\t(default_load_returned_bounds): Delete.\n\t(default_store_returned_bounds): Delete.\n\t* targhooks.h (default_load_bounds_for_arg): Delete.\n\t(default_store_bounds_for_arg): Delete.\n\t(default_load_returned_bounds): Delete.\n\t(default_store_returned_bounds): Delete.", "tree": {"sha": "a68ff430191608ddc20a1a7a7f831893b5bc629f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68ff430191608ddc20a1a7a7f831893b5bc629f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788483f77de04515b0b72d3c4c841c37b005f404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788483f77de04515b0b72d3c4c841c37b005f404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788483f77de04515b0b72d3c4c841c37b005f404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788483f77de04515b0b72d3c4c841c37b005f404/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba4b053151a20262d4b61eb4501aa1c48337abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba4b053151a20262d4b61eb4501aa1c48337abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba4b053151a20262d4b61eb4501aa1c48337abb"}], "stats": {"total": 135, "additions": 0, "deletions": 135}, "files": [{"sha": "27b59f26ad3de061e3fbd819a520f8546972170a", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -1287,8 +1287,6 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n   args_size->constant = 0;\n   args_size->var = 0;\n \n-  bitmap_obstack_initialize (NULL);\n-\n   /* In this loop, we consider args in the order they are written.\n      We fill up ARGS from the back.  */\n \n@@ -1297,7 +1295,6 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n     int j = i;\n     call_expr_arg_iterator iter;\n     tree arg;\n-    bitmap slots = NULL;\n \n     if (struct_value_addr_value)\n       {\n@@ -1324,13 +1321,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \tj--;\n \targpos++;\n       }\n-\n-    if (slots)\n-      BITMAP_FREE (slots);\n   }\n \n-  bitmap_obstack_release (NULL);\n-\n   /* I counts args in order (to be) pushed; ARGPOS counts in order written.  */\n   for (argpos = 0; argpos < num_actuals; i--, argpos++)\n     {\n@@ -1493,9 +1485,6 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \n       args[i].reg = targetm.calls.function_arg (args_so_far, arg);\n \n-      if (args[i].reg && CONST_INT_P (args[i].reg))\n-\targs[i].reg = NULL;\n-\n       /* If this is a sibling call and the machine has register windows, the\n \t register window has to be unwinded before calling the routine, so\n \t arguments have to go into the incoming registers.  */"}, {"sha": "990152f5b1510aa035511f8556d04712968eafa1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -4079,12 +4079,6 @@ The return value is usually either a @code{reg} RTX for the hard\n register in which to pass the argument, or zero to pass the argument\n on the stack.\n \n-The return value can be a @code{const_int} which means argument is\n-passed in a target specific slot with specified number.  Target hooks\n-should be used to store or load argument in such case.  See\n-@code{TARGET_STORE_BOUNDS_FOR_ARG} and @code{TARGET_LOAD_BOUNDS_FOR_ARG}\n-for more information.\n-\n The value of the expression can also be a @code{parallel} RTX@.  This is\n used when an argument is passed in multiple locations.  The mode of the\n @code{parallel} should be the mode of the entire argument.  The\n@@ -5430,37 +5424,6 @@ defined, then define this hook to return @code{true} if\n Otherwise, you should not define this hook.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_LOAD_BOUNDS_FOR_ARG (rtx @var{slot}, rtx @var{arg}, rtx @var{slot_no})\n-This hook is used by expand pass to emit insn to load bounds of\n-@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\n-bounds of @var{arg} are not passed in register.  If @var{slot} is a\n-memory, then bounds are loaded as for regular pointer loaded from\n-memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\n-constant holding number of the target dependent special slot which\n-should be used to obtain bounds.  Hook returns RTX holding loaded bounds.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_STORE_BOUNDS_FOR_ARG (rtx @var{arg}, rtx @var{slot}, rtx @var{bounds}, rtx @var{slot_no})\n-This hook is used by expand pass to emit insns to store @var{bounds} of\n-@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\n-@var{bounds} of @var{arg} are not passed in register.  If @var{slot} is a\n-memory, then @var{bounds} are stored as for regular pointer stored in\n-memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\n-constant holding number of the target dependent special slot which\n-should be used to store @var{bounds}.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} rtx TARGET_LOAD_RETURNED_BOUNDS (rtx @var{slot})\n-This hook is used by expand pass to emit insn to load bounds\n-returned by function call in @var{slot}.  Hook returns RTX holding\n-loaded bounds.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_STORE_RETURNED_BOUNDS (rtx @var{slot}, rtx @var{bounds})\n-This hook is used by expand pass to emit insn to store @var{bounds}\n-returned by function call into @var{slot}.\n-@end deftypefn\n-\n @node Trampolines\n @section Support for Nested Functions\n @cindex support for nested functions"}, {"sha": "193c9bdd8537daa5e471ffbe45b89446dc2f4a99", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -3780,14 +3780,6 @@ These machine description macros help implement varargs:\n \n @hook TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n \n-@hook TARGET_LOAD_BOUNDS_FOR_ARG\n-\n-@hook TARGET_STORE_BOUNDS_FOR_ARG\n-\n-@hook TARGET_LOAD_RETURNED_BOUNDS\n-\n-@hook TARGET_STORE_RETURNED_BOUNDS\n-\n @node Trampolines\n @section Support for Nested Functions\n @cindex support for nested functions"}, {"sha": "87feeec2ea1259d446bc64459ca4a498a8e07ab8", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -4730,45 +4730,6 @@ not generate any instructions in this case.\",\n \tint *pretend_args_size, int second_time),\n  default_setup_incoming_varargs)\n \n-DEFHOOK\n-(load_bounds_for_arg,\n- \"This hook is used by expand pass to emit insn to load bounds of\\n\\\n-@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\\n\\\n-bounds of @var{arg} are not passed in register.  If @var{slot} is a\\n\\\n-memory, then bounds are loaded as for regular pointer loaded from\\n\\\n-memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\\n\\\n-constant holding number of the target dependent special slot which\\n\\\n-should be used to obtain bounds.  Hook returns RTX holding loaded bounds.\",\n- rtx, (rtx slot, rtx arg, rtx slot_no),\n- default_load_bounds_for_arg)\n-\n-DEFHOOK\n-(store_bounds_for_arg,\n- \"This hook is used by expand pass to emit insns to store @var{bounds} of\\n\\\n-@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\\n\\\n-@var{bounds} of @var{arg} are not passed in register.  If @var{slot} is a\\n\\\n-memory, then @var{bounds} are stored as for regular pointer stored in\\n\\\n-memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\\n\\\n-constant holding number of the target dependent special slot which\\n\\\n-should be used to store @var{bounds}.\",\n- void, (rtx arg, rtx slot, rtx bounds, rtx slot_no),\n- default_store_bounds_for_arg)\n-\n-DEFHOOK\n-(load_returned_bounds,\n- \"This hook is used by expand pass to emit insn to load bounds\\n\\\n-returned by function call in @var{slot}.  Hook returns RTX holding\\n\\\n-loaded bounds.\",\n- rtx, (rtx slot),\n- default_load_returned_bounds)\n-\n-DEFHOOK\n-(store_returned_bounds,\n- \"This hook is used by expand pass to emit insn to store @var{bounds}\\n\\\n-returned by function call into @var{slot}.\",\n- void, (rtx slot, rtx bounds),\n- default_store_returned_bounds)\n-\n DEFHOOK\n (call_args,\n  \"While generating RTL for a function call, this target hook is invoked once\\n\\\n@@ -4972,12 +4933,6 @@ The return value is usually either a @code{reg} RTX for the hard\\n\\\n register in which to pass the argument, or zero to pass the argument\\n\\\n on the stack.\\n\\\n \\n\\\n-The return value can be a @code{const_int} which means argument is\\n\\\n-passed in a target specific slot with specified number.  Target hooks\\n\\\n-should be used to store or load argument in such case.  See\\n\\\n-@code{TARGET_STORE_BOUNDS_FOR_ARG} and @code{TARGET_LOAD_BOUNDS_FOR_ARG}\\n\\\n-for more information.\\n\\\n-\\n\\\n The value of the expression can also be a @code{parallel} RTX@.  This is\\n\\\n used when an argument is passed in multiple locations.  The mode of the\\n\\\n @code{parallel} should be the mode of the entire argument.  The\\n\\"}, {"sha": "0b525bb460663569f8793ff7c9ad3e253f2caed9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -2253,36 +2253,6 @@ default_member_type_forces_blk (const_tree, machine_mode)\n   return false;\n }\n \n-rtx\n-default_load_bounds_for_arg (rtx addr ATTRIBUTE_UNUSED,\n-\t\t\t     rtx ptr ATTRIBUTE_UNUSED,\n-\t\t\t     rtx bnd ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-}\n-\n-void\n-default_store_bounds_for_arg (rtx val ATTRIBUTE_UNUSED,\n-\t\t\t      rtx addr ATTRIBUTE_UNUSED,\n-\t\t\t      rtx bounds ATTRIBUTE_UNUSED,\n-\t\t\t      rtx to ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-}\n-\n-rtx\n-default_load_returned_bounds (rtx slot ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-}\n-\n-void\n-default_store_returned_bounds (rtx slot ATTRIBUTE_UNUSED,\n-\t\t\t       rtx bounds ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-}\n-\n /* Default version of canonicalize_comparison.  */\n \n void"}, {"sha": "7f7f25a07e685f707d9c306f760437f178fcb6f6", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788483f77de04515b0b72d3c4c841c37b005f404/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=788483f77de04515b0b72d3c4c841c37b005f404", "patch": "@@ -272,10 +272,6 @@ extern bool can_use_doloop_if_innermost (const widest_int &,\n \t\t\t\t\t const widest_int &,\n \t\t\t\t\t unsigned int, bool);\n \n-extern rtx default_load_bounds_for_arg (rtx, rtx, rtx);\n-extern void default_store_bounds_for_arg (rtx, rtx, rtx, rtx);\n-extern rtx default_load_returned_bounds (rtx);\n-extern void default_store_returned_bounds (rtx,rtx);\n extern bool default_optab_supported_p (int, machine_mode, machine_mode,\n \t\t\t\t       optimization_type);\n extern unsigned int default_max_noce_ifcvt_seq_cost (edge);"}]}