{"sha": "c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1ZGNjN2RkZDk4NGRkNzJlOGRjODlmZTE4ZjQyMmY0ZDYzNDRmYQ==", "commit": {"author": {"name": "Fred Fish", "email": "fnf@ninemoons.com", "date": "1997-12-12T06:36:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-12T06:36:11Z"}, "message": "cvs commit ChangeLog config.sub configure configure.in toplev.c\n\nFrom-SVN: r17060", "tree": {"sha": "0530e9c643eaef61bbc3e8f377a86fd51992d8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0530e9c643eaef61bbc3e8f377a86fd51992d8b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/comments", "author": null, "committer": null, "parents": [{"sha": "baf558778c5a5c5c1540128b8c26c35576f95007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf558778c5a5c5c1540128b8c26c35576f95007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf558778c5a5c5c1540128b8c26c35576f95007"}], "stats": {"total": 343, "additions": 337, "deletions": 6}, "files": [{"sha": "34b123e85a90f3cb7f430f80da9c6e75aafba96d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -1,3 +1,16 @@\n+Thu Dec 11 23:34:54 1997  Fred Fish  <fnf@ninemoons.com>\n+\n+\t* config.sub: Add support for BeOS target.\n+\t* configure.in: Likewise.\n+\t* ginclude/stdarg.h: Likewise.\n+\t* ginclude/stddef.h: Likewise.\n+\t* ginclude/varargs.h: Likewise.\n+\t* rs6000/beos.h: New file for BeOS.\n+\t* rs6000/t-beos: Likewise.\n+\t* rs6000/x-beos: Likewise.\n+\t* rs6000/xm-beos.h: Likewise.\n+\t* toplev.c (get_run_time): Just return 0 on BeOS.\n+\n Thu Dec 11 23:25:23 1997  Jeffrey A Law  (law@cygnus.com)\n \t\t\t  Toon Moene  (toon@moene.indiv.nluug.nl)\n "}, {"sha": "376152313a47f9b0adde65c6a118fb09c00730b4", "filename": "gcc/config.sub", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.sub?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -716,7 +716,7 @@ case $os in\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n \t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n \t      | -cygwin32* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n-\t      | -mingw32* | -linux-gnu* | -uxpv*)\n+\t      | -mingw32* | -linux-gnu* | -uxpv* | -beos* )\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-linux*)\n@@ -895,6 +895,9 @@ case $basic_machine in\n \tf301-fujitsu)\n \t\tos=-uxpv\n \t\t;;\n+\t*-be)\n+\t\tos=-beos\n+\t\t;;\n \t*)\n \t\tos=-none\n \t\t;;\n@@ -946,6 +949,9 @@ case $basic_machine in\n \t\t\t-aux*)\n \t\t\t\tvendor=apple\n \t\t\t\t;;\n+\t\t\t-beos*)\n+\t\t\t\tvendor=be\n+\t\t\t\t;;\n \t\tesac\n \t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n \t\t;;"}, {"sha": "851601ff2b887903f1c3d6a33ba6e12f0dfeab06", "filename": "gcc/config/rs6000/beos.h", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fbeos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fbeos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbeos.h?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -0,0 +1,124 @@\n+/* Definitions of target machine for GNU compiler, for BeOS.\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Contributed by Fred Fish (fnf@cygnus.com), based on aix41.h\n+   from David Edelsohn (edelsohn@npac.syr.edu).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* Enable AIX XL compiler calling convention breakage compatibility.  */\n+#define MASK_XL_CALL\t\t0x40000000\n+#define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\\\n+  {\"xl-call\", \t\tMASK_XL_CALL},\t\\\n+  {\"no-xl-call\",\t- MASK_XL_CALL}, \\\n+  {\"threads\",\t\t0},\t\t\\\n+  {\"pe\",\t\t0},\n+\n+#include \"rs6000/rs6000.h\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %(asm_cpu)\"\n+\n+#undef CPP_PREDEFINES\n+/* __POWERPC__ must be defined for some header files */\n+#define CPP_PREDEFINES \"-D__BEOS__ -D__POWERPC__ -Asystem(beos) -Acpu(powerpc) -Amachine(powerpc)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_cpu)\"\n+\n+#undef\tCPP_DEFAULT_SPEC\n+#define CPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n+\n+/* This is the easiest way to disable use of gcc's builtin alloca,\n+   which in the current BeOS release (DR9) is a problem because of the\n+   relatively low default stack size of 256K with no way to expand it.\n+   So anything we compile for the BeOS target should not use the\n+   builtin alloca.  This also has the unwanted side effect of\n+   disabling all builtin functions though. */\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%{!fbuiltin: -fno-builtin}\"\n+#undef CC1PLUS_SPEC\n+#define CC1PLUS_SPEC \"%{!fbuiltin: -fno-builtin}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+\n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC603\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+#define\tMULTILIB_DEFAULTS { \"mcpu=powerpc\" }\n+\n+/* These are not necessary when we pass -u to the assembler, and undefining\n+   them saves a great deal of space in object files.  */\n+\n+#undef ASM_OUTPUT_EXTERNAL\n+#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n+{ rtx _symref = XEXP (DECL_RTL (DECL), 0);\t\\\n+  if ((TREE_CODE (DECL) == VAR_DECL\t\t\\\n+       || TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n+      && (NAME)[strlen (NAME) - 1] != ']')\t\\\n+    {\t\t\t\t\t\t\\\n+      char *_name = (char *) permalloc (strlen (XSTR (_symref, 0)) + 5); \\\n+      strcpy (_name, XSTR (_symref, 0));\t\\\n+      strcat (_name, TREE_CODE (DECL) == FUNCTION_DECL ? \"[DS]\" : \"[RW]\"); \\\n+      XSTR (_symref, 0) = _name;\t\t\\\n+    }\t\t\t\t\t\t\\\n+}\n+\n+/* These empty definitions get rid of the attempt to link in crt0.o\n+   and any libraries like libc.a.\n+   On BeOS the ld executable is actually a linker front end that first runs\n+   the GNU linker with the -r option to generate a relocatable XCOFF output\n+   file, and then runs Metrowork's linker (mwld) to generate a fully linked\n+   executable. */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+/* Text to write out after a CALL that may be replaced by glue code by\n+   the loader. */\n+\n+#undef RS6000_CALL_GLUE\n+#define RS6000_CALL_GLUE \"cror 15,15,15\"\n+\n+/* Struct alignments are done on 4 byte boundaries for all types. */\n+#undef BIGGEST_FIELD_ALIGNMENT\n+#define BIGGEST_FIELD_ALIGNMENT 32"}, {"sha": "1436108ab14e37b63f8cc14aad503acd0bf4531f", "filename": "gcc/config/rs6000/t-beos", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-beos?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -0,0 +1,51 @@\n+# Do not build libgcc1.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build the libraries for both hard and soft floating point\n+\n+MULTILIB_OPTIONS = msoft-float mcpu=common\n+MULTILIB_DIRNAMES = soft-float common\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+# This is probably the correct define, to override the Makefile\n+# default, but using it causes more problems than it solves.\n+#\n+# Using it will cause fixincludes to try and fix some of the\n+# mwcc header files, which it seems to do a poor job of.  On\n+# the other hand, not using it will only cause the gcc version\n+# of limits.h to lack the header and trailer parts that are\n+# tacked on to it when there is a limits.h in the system header\n+# dir.\n+#\n+# For now it is probably better to change the rule for\n+# LIMITS_H_TEST to explicitly look for the BeOS limits.h.\n+# If the gcc limits.h is not set up to #include_next the\n+# BeOS limits.h, then some things will go undefined, like\n+# PATH_MAX.\n+\n+#SYSTEM_HEADER_DIR=/boot/develop/headers/posix\n+# Test to see whether <limits.h> exists in the system header files.\n+LIMITS_H_TEST = [ -f /boot/develop/headers/posix/limits.h ]\n+\n+# Aix 3.2.x needs milli.exp for -mcpu=common\n+EXTRA_PARTS = milli.exp\n+milli.exp: $(srcdir)/config/rs6000/milli.exp\n+\trm -f milli.exp\n+\tcp $(srcdir)/config/rs6000/milli.exp ./milli.exp\n+\n+# Don't use collect.\n+USE_COLLECT2 ="}, {"sha": "37b8ccac9cfee8d7c460dc955afaba4e9cd6d281", "filename": "gcc/config/rs6000/x-beos", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fx-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fx-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-beos?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -0,0 +1,9 @@\n+# configuration for BeOS\n+INSTALL=install -c\n+\n+# Show we need to use the C version of ALLOCA\n+ALLOCA=alloca.o\n+# Use it regardless of whether we are compiling with gcc or not.\n+USE_ALLOCA= `echo \"${ALLOCA}\"`\n+USE_HOST_ALLOCA= `echo ${HOST_PREFIX}${HOST_ALLOCA}`\n+SUBDIR_USE_ALLOCA = `if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi`"}, {"sha": "681aa73bcc6d00d25b2c95b569c41030aeb5363e", "filename": "gcc/config/rs6000/xm-beos.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-beos.h?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -0,0 +1,89 @@\n+/* Configuration for GNU C-compiler for BeOS host.\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Contributed by Fred Fish (fnf@cygnus.com), based on xm-rs6000.h\n+   by Richard Kenner (kenner@vlsi1.ultra.nyu.edu).\n+\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* #defines that need visibility everywhere.  */\n+\n+#define\tFALSE\t0\n+#define\tTRUE\t1\n+\n+/* This describes the machine the compiler is hosted on.  */\n+\n+#define\tHOST_BITS_PER_CHAR\t8\n+#define\tHOST_BITS_PER_SHORT\t16\n+#define\tHOST_BITS_PER_INT\t32\n+#define\tHOST_BITS_PER_LONG\t32\n+#define HOST_BITS_PER_LONGLONG\t64\n+\n+#define\tHOST_WORDS_BIG_ENDIAN\n+\n+/* target machine dependencies.\n+   tm.h is a symbolic link to the actual target specific file.   */\n+\n+#include \"tm.h\"\n+\n+/* Arguments to use with `exit'.  */\n+\n+#define\tSUCCESS_EXIT_CODE\t0\n+#define\tFATAL_EXIT_CODE\t\t33\n+\n+/* Use the C alloca and use only int bitfields.  */\n+\n+#define USE_C_ALLOCA\n+extern void *alloca ();\n+#define\tONLY_INT_FIELDS\n+\n+/* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n+\n+#undef bcopy\n+#define bcopy(s,d,n)\tmemmove((d),(s),(n))\n+#undef bzero\n+#define bzero(d,n)\tmemset((d),0,(n))\n+#undef bcmp\n+#define bcmp(l,r,n)\tmemcmp((l),(r),(n))\n+#undef index\n+#define index\t\tstrchr\n+#undef rindex\n+#define rindex\t\tstrrchr\n+\n+/* BeOS is closer to USG than BSD */\n+\n+#define USG\n+\n+/* Define various things that the BeOS host has. */\n+\n+#define HAVE_VPRINTF\n+#define HAVE_PUTENV\n+#define HAVE_ATEXIT\n+#define HAVE_RENAME\n+\n+#define STDC_HEADERS 1\n+\n+/* STANDARD_INCLUDE_DIR is the equivalent of \"/usr/include\" on UNIX. */\n+\n+#define STANDARD_INCLUDE_DIR\t\"/boot/develop/headers/posix\"\n+\n+/* SYSTEM_INCLUDE_DIR is the location for system specific, non-POSIX headers. */\n+\n+#define SYSTEM_INCLUDE_DIR\t\"/boot/develop/headers/be\"\n+"}, {"sha": "ffbb35c29643c3b6eec0a4382b1aa27f291e9036", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -4883,6 +4883,13 @@ for machine in $build $host $target; do\n \t\txmake_file=romp/x-mach\n \t\tuse_collect2=yes\n \t\t;;\n+\tpowerpc-*-beos*)\n+\t\tcpu_type=rs6000\n+\t\ttm_file=rs6000/beos.h\n+\t\txm_file=rs6000/xm-beos.h\n+\t\ttmake_file=rs6000/t-beos\n+\t\txmake_file=rs6000/x-beos\n+\t\t;;\n \tpowerpc-*-sysv* | powerpc-*-elf*)\n \t\tif [ x$enable_haifa != xno ]; then\n \t\t\tenable_haifa=yes"}, {"sha": "98377e9973dbe6c0297c5b0c317f848d386e07af", "filename": "gcc/configure.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -2124,6 +2124,13 @@ for machine in $build $host $target; do\n \t\txmake_file=romp/x-mach\n \t\tuse_collect2=yes\n \t\t;;\n+\tpowerpc-*-beos*)\n+\t\tcpu_type=rs6000\n+\t\ttm_file=rs6000/beos.h\n+\t\txm_file=rs6000/xm-beos.h\n+\t\ttmake_file=rs6000/t-beos\n+\t\txmake_file=rs6000/x-beos\n+\t\t;;\n \tpowerpc-*-sysv* | powerpc-*-elf*)\n \t\tif [[ x$enable_haifa != xno ]]; then\n \t\t\tenable_haifa=yes"}, {"sha": "71673fb02a0b5958350239755a3aad7ec01236df", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -64,7 +64,7 @@\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__)\n+#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__) || defined (__BEOS__)\n typedef char *__gnuc_va_list;\n #else\n typedef void *__gnuc_va_list;\n@@ -178,7 +178,9 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST\n /* The macro _VA_LIST_T_H is used in the Bull dpx2  */\n #ifndef _VA_LIST_T_H\n+#ifndef __va_list__\n typedef __gnuc_va_list va_list;\n+#endif /* not __va_list__ */\n #endif /* not _VA_LIST_T_H */\n #endif /* not _VA_LIST */\n #endif /* not _VA_LIST_DEFINED */\n@@ -194,6 +196,9 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST_T_H\n #define _VA_LIST_T_H\n #endif\n+#ifndef __va_list__\n+#define __va_list__\t/* BeOS */\n+#endif\n \n #endif /* not _VA_LIST_, except on certain systems */\n "}, {"sha": "0fb57430bce76079f5c48828d16c83e2085b6ed4", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -135,6 +135,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n /* Define this type if we are doing the whole job,\n    or if we want this type in particular.  */\n #if defined (_STDDEF_H) || defined (__need_size_t)\n+#ifndef __size_t__\t/* BeOS */\n #ifndef _SIZE_T\t/* in case <sys/types.h> has defined it. */\n #ifndef _SYS_SIZE_T_H\n #ifndef _T_SIZE_\n@@ -148,6 +149,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n #ifndef _GCC_SIZE_T\n #ifndef _SIZET_\n #ifndef __size_t\n+#define __size_t__\t/* BeOS */\n #define _SIZE_T\n #define _SYS_SIZE_T_H\n #define _T_SIZE_\n@@ -166,6 +168,9 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n #endif\n #if !(defined (__GNUG__) && defined (size_t))\n typedef __SIZE_TYPE__ size_t;\n+#ifdef __BEOS__\n+typedef long ssize_t;\n+#endif /* __BEOS__ */\n #endif /* !(defined (__GNUG__) && defined (size_t)) */\n #endif /* __size_t */\n #endif /* _SIZET_ */\n@@ -180,6 +185,7 @@ typedef __SIZE_TYPE__ size_t;\n #endif /* _T_SIZE_ */\n #endif /* _SYS_SIZE_T_H */\n #endif /* _SIZE_T */\n+#endif /* __size_t__ */\n #undef\t__need_size_t\n #endif /* _STDDEF_H or __need_size_t.  */\n \n@@ -192,6 +198,7 @@ typedef __SIZE_TYPE__ size_t;\n /* Define this type if we are doing the whole job,\n    or if we want this type in particular.  */\n #if defined (_STDDEF_H) || defined (__need_wchar_t)\n+#ifndef __wchar_t__\t/* BeOS */\n #ifndef _WCHAR_T\n #ifndef _T_WCHAR_\n #ifndef _T_WCHAR\n@@ -204,6 +211,7 @@ typedef __SIZE_TYPE__ size_t;\n #ifndef ___int_wchar_t_h\n #ifndef __INT_WCHAR_T_H\n #ifndef _GCC_WCHAR_T\n+#define __wchar_t__\t/* BeOS */\n #define _WCHAR_T\n #define _T_WCHAR_\n #define _T_WCHAR\n@@ -237,8 +245,12 @@ typedef _BSD_RUNE_T_ rune_t;\n #endif\n \n #ifndef __WCHAR_TYPE__\n+#ifdef __BEOS__\n+#define __WCHAR_TYPE__ unsigned char\n+#else\n #define __WCHAR_TYPE__ int\n #endif\n+#endif\n #ifndef __cplusplus\n typedef __WCHAR_TYPE__ wchar_t;\n #endif\n@@ -254,6 +266,7 @@ typedef __WCHAR_TYPE__ wchar_t;\n #endif\n #endif\n #endif\n+#endif /* __wchar_t__ */\n #undef\t__need_wchar_t\n #endif /* _STDDEF_H or __need_wchar_t.  */\n "}, {"sha": "4259b9f55d8d40525607001c530e8cad40879817", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -96,7 +96,7 @@\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX)\n+#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__BEOS__)\n typedef char *__gnuc_va_list;\n #else\n typedef void *__gnuc_va_list;\n@@ -192,7 +192,10 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST\n /* The macro _VA_LIST_T_H is used in the Bull dpx2  */\n #ifndef _VA_LIST_T_H\n+/* The macro __va_list__ is used in BeOS */\n+#ifndef __va_list__\n typedef __gnuc_va_list va_list;\n+#endif /* not __va_list__ */\n #endif /* not _VA_LIST_T_H */\n #endif /* not _VA_LIST */\n #endif /* not _VA_LIST_DEFINED */\n@@ -208,6 +211,9 @@ typedef __gnuc_va_list va_list;\n #ifndef _VA_LIST_T_H\n #define _VA_LIST_T_H\n #endif\n+#ifndef __va_list__\t/* BeOS */\n+#define __va_list__\n+#endif\n \n #endif /* not _VA_LIST_, except on certain systems */\n "}, {"sha": "984b7682b907d5f40cf9a9e9a1713864e5f1c6c9", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c55dcc7ddd984dd72e8dc89fe18f422f4d6344fa", "patch": "@@ -1036,9 +1036,10 @@ get_run_time ()\n #else /* VMS */\n   times ((void *) &vms_times);\n   return (vms_times.proc_user_time + vms_times.proc_system_time) * 10000;\n-#endif\n-#endif\n-#endif\n+#endif\t/* VMS */\n+#endif\t/* USG */\n+#endif\t/* _WIN32 */\n+#endif\t/* __BEOS__ */\n }\n \n #define TIMEVAR(VAR, BODY)    \\"}]}