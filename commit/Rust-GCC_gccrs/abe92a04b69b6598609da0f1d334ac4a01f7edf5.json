{"sha": "abe92a04b69b6598609da0f1d334ac4a01f7edf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlOTJhMDRiNjliNjU5ODYwOWRhMGYxZDMzNGFjNGEwMWY3ZWRmNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-01-18T19:09:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-18T19:09:59Z"}, "message": "config.gcc (m68k-*-uclinux*): Add flat.h to $tm_file.\n\ngcc/\n\t* config.gcc (m68k-*-uclinux*): Add flat.h to $tm_file.\n\t* config/flat.h: New file.\n\t* crtstuff.c (USE_PT_GNU_EH_FRAME): Don't define if\n\tOBJECT_FORMAT_FLAT.\n\t* config/m68k/m68k.h (ASM_PREFERRED_EH_DATA_FORMAT): Do not use\n\tindirect references for -msep-data or -mid-shared-library.\n\tDo not use PC-relative code addresses either.\n\t* config/m68k/m68k.c (override_options): Restrict -fPIC error\n\tto -mpcrel.\n\t* config/m68k/uclinux.h (STARTFILE_SPEC): Define.  Use Scrt1.o\n\tfor shared libraries and crt1.o for executables.  Use crti.o and\n\tcrtbegin.o.\n\t(ENDFILE_SPEC): Use crtend.o and crtn.o.\n\t(LIB_SPEC): Suppress -Rlibc.gdb if -static-libc is given.\n\tDo not add -elf2flt or -shared-lib-id options here.\n\t(LINK_SPEC): Define.  Pass -elf2flt if no -elf2flt option is given.\n\tPass -shared-lib-id if -mid-shared-library, taking the library\n\tidentifier from -mshared-library-id if given, otherwise\n\tdefaulting to 0.\n\t(EH_FRAME_IN_DATA_SECTION): Do not undefine.\n\t(INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP): Likewise.\n\t(TARGET_OS_CPP_BUILTINS): Define __GXX_MERGED_TYPEINFO_NAMES=0\n\tand __GXX_TYPEINFO_EQUALITY_INLINE=0 if -mid-shared-library.\n\t(DRIVER_SELF_SPECS): Map unadorned PIC options to -msep-data.\n\t* config/m68k/t-uclinux (EXTRA_MULTILIB_PARTS): Add crtbegin.o\n\tand crtend.o.\n\t* config/m68k/lb1sf68.asm (PICCALL): Use an lea and pc-relative\n\tjump sequence for ISA A and ISA A+.\n\t(PICJUMP): Likewise.\n\nFrom-SVN: r120912", "tree": {"sha": "4e7e6f3d2976224ac87a3cad06ca119d66f3f076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e7e6f3d2976224ac87a3cad06ca119d66f3f076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abe92a04b69b6598609da0f1d334ac4a01f7edf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe92a04b69b6598609da0f1d334ac4a01f7edf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe92a04b69b6598609da0f1d334ac4a01f7edf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe92a04b69b6598609da0f1d334ac4a01f7edf5/comments", "author": null, "committer": null, "parents": [{"sha": "78218d899779528fc2fe6ec5c01ce8b22f2fb404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78218d899779528fc2fe6ec5c01ce8b22f2fb404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78218d899779528fc2fe6ec5c01ce8b22f2fb404"}], "stats": {"total": 159, "additions": 129, "deletions": 30}, "files": [{"sha": "3643673af4a46603907576a219918fcd9a6d9c98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -1,3 +1,35 @@\n+2007-01-18  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (m68k-*-uclinux*): Add flat.h to $tm_file.\n+\t* config/flat.h: New file.\n+\t* crtstuff.c (USE_PT_GNU_EH_FRAME): Don't define if\n+\tOBJECT_FORMAT_FLAT.\n+\t* config/m68k/m68k.h (ASM_PREFERRED_EH_DATA_FORMAT): Do not use\n+\tindirect references for -msep-data or -mid-shared-library.\n+\tDo not use PC-relative code addresses either.\n+\t* config/m68k/m68k.c (override_options): Restrict -fPIC error\n+\tto -mpcrel.\n+\t* config/m68k/uclinux.h (STARTFILE_SPEC): Define.  Use Scrt1.o\n+\tfor shared libraries and crt1.o for executables.  Use crti.o and\n+\tcrtbegin.o.\n+\t(ENDFILE_SPEC): Use crtend.o and crtn.o.\n+\t(LIB_SPEC): Suppress -Rlibc.gdb if -static-libc is given.\n+\tDo not add -elf2flt or -shared-lib-id options here.\n+\t(LINK_SPEC): Define.  Pass -elf2flt if no -elf2flt option is given.\n+\tPass -shared-lib-id if -mid-shared-library, taking the library\n+\tidentifier from -mshared-library-id if given, otherwise\n+\tdefaulting to 0.\n+\t(EH_FRAME_IN_DATA_SECTION): Do not undefine.\n+\t(INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP): Likewise.\n+\t(TARGET_OS_CPP_BUILTINS): Define __GXX_MERGED_TYPEINFO_NAMES=0\n+\tand __GXX_TYPEINFO_EQUALITY_INLINE=0 if -mid-shared-library.\n+\t(DRIVER_SELF_SPECS): Map unadorned PIC options to -msep-data.\n+\t* config/m68k/t-uclinux (EXTRA_MULTILIB_PARTS): Add crtbegin.o\n+\tand crtend.o.\n+\t* config/m68k/lb1sf68.asm (PICCALL): Use an lea and pc-relative\n+\tjump sequence for ISA A and ISA A+.\n+\t(PICJUMP): Likewise.\n+\n 2007-01-18  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config.gcc (m68k-*-uclinux*): Base the port on the common"}, {"sha": "ecb7fe60b218b161d5ce54b9552b2ada7c0b94cd", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -1523,7 +1523,7 @@ m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux\n \t\t\t\t# with uClibc, using the new GNU/Linux-style\n \t\t\t\t# ABI.\n \tdefault_m68k_cpu=68020\n-\ttm_file=\"m68k/m68k.h dbxelf.h elfos.h svr4.h linux.h m68k/linux.h m68k/uclinux.h\"\n+\ttm_file=\"m68k/m68k.h dbxelf.h elfos.h svr4.h linux.h flat.h m68k/linux.h m68k/uclinux.h\"\n  \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS UCLIBC_DEFAULT=1\"\n \textra_options=\"${extra_options} linux.opt\"\n \ttmake_file=m68k/t-uclinux"}, {"sha": "48cffbc872c34e3fd8a69355754de80eed86c06e", "filename": "gcc/config/flat.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fflat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fflat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fflat.h?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -0,0 +1,23 @@\n+/* Defines to be used for targets that support flat executables.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* This macro applies on top of OBJECT_FORMAT_ELF and indicates that\n+   we want to support both flat and ELF output.  */\n+#define OBJECT_FORMAT_FLAT"}, {"sha": "edb907c9356416fe20f5b285d1105ee3a8b645a1", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -120,11 +120,21 @@ Boston, MA 02110-1301, USA.  */\n \t/* Common for -mid-shared-libary and -msep-data */\n \n \t.macro PICCALL addr\n+#if defined (__mcoldfire__) && !defined (__mcfisab__)\n+\tlea\t\\addr-.-8,a0\n+\tjsr\tpc@(a0)\n+#else\n \tbsr\t\\addr\n+#endif\n \t.endm\n \n \t.macro PICJUMP addr\n+#if defined (__mcoldfire__) && !defined (__mcfisab__)\n+\tlea\t\\addr-.-8,a0\n+\tjmp\tpc@(a0)\n+#else\n \tbra\t\\addr\n+#endif\n \t.endm\n \n # if defined(__ID_SHARED_LIBRARY__)"}, {"sha": "057b3256a8da80089990d87f8ef462dd20dae724", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -519,10 +519,10 @@ override_options (void)\n   if (TARGET_SEP_DATA || TARGET_ID_SHARED_LIBRARY)\n     flag_pic = 2;\n \n-  /* -fPIC uses 32-bit pc-relative displacements, which don't exist\n-     until the 68020.  */\n-  if (!TARGET_68020 && !TARGET_COLDFIRE && (flag_pic == 2))\n-    error (\"-fPIC is not currently supported on the 68000 or 68010\");\n+  /* -mpcrel -fPIC uses 32-bit pc-relative displacements.  Raise an\n+     error if the target does not support them.  */\n+  if (TARGET_PCREL && !TARGET_68020 && flag_pic == 2)\n+    error (\"-mpcrel -fPIC is not currently supported on selected cpu\");\n \n   /* ??? A historic way of turning on pic, or is this intended to\n      be an embedded thing that doesn't have the same name binding"}, {"sha": "7b3a74c4ba3380d3e9c306c8e5dac531bd4523e6", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -1090,9 +1090,34 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n \n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n-   true if the symbol may be affected by dynamic relocations.  */\n+   true if the symbol may be affected by dynamic relocations.\n+\n+   TARGET_ID_SHARED_LIBRARY and TARGET_SEP_DATA are designed to support\n+   a read-only text segment without imposing a fixed gap between the\n+   text and data segments.  As a result, the text segment cannot refer\n+   to anything in the data segment, even in PC-relative form.  Because\n+   .eh_frame refers to both code and data, it follows that .eh_frame\n+   must be in the data segment itself, and that the offset between\n+   .eh_frame and code will not be a link-time constant.\n+\n+   In theory, we could create a read-only .eh_frame by using DW_EH_PE_pcrel\n+   | DW_EH_PE_indirect for all code references.  However, gcc currently\n+   handles indirect references using a per-TU constant pool.  This means\n+   that if a function and its eh_frame are removed by the linker, the\n+   eh_frame's indirect references to the removed function will not be\n+   removed, leading to an unresolved symbol error.\n+\n+   It isn't clear that any -msep-data or -mid-shared-library target\n+   would benefit from a read-only .eh_frame anyway.  In particular,\n+   no known target that supports these options has a feature like\n+   PT_GNU_RELRO.  Without any such feature to motivate them, indirect\n+   references would be unnecessary bloat, so we simply use an absolute\n+   pointer for code and global references.  We still use pc-relative\n+   references to data, as this avoids a relocation.  */\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\t   \\\n   (flag_pic\t\t\t\t\t\t\t\t   \\\n+   && !((TARGET_ID_SHARED_LIBRARY || TARGET_SEP_DATA)\t\t\t   \\\n+\t&& ((GLOBAL) || (CODE)))\t\t\t\t\t   \\\n    ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4 \\\n    : DW_EH_PE_absptr)\n "}, {"sha": "49080429f9802c6d11c83f0ecd85c15612d7c962", "filename": "gcc/config/m68k/t-uclinux", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Ft-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Ft-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-uclinux?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -1,3 +1,6 @@\n+# crti and crtn are provided by uClibc.\n+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o\n+\n LIB1ASMSRC = m68k/lb1sf68.asm\n LIB1ASMFUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n    _double _float _floatex \\\n@@ -19,6 +22,3 @@ MULTILIB_EXCEPTIONS = m68000/msep-data* m68000/mid-shared-library* msep-data* mi\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-\n-# We don't use crtbegin.o and crtend.o\n-EXTRA_MULTILIB_PARTS="}, {"sha": "992c465ce10a69f2dba5b30fbce5534da8da368a", "filename": "gcc/config/m68k/uclinux.h", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fuclinux.h?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -24,37 +24,44 @@ Boston, MA 02110-1301, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k uClinux)\");\n \n-/* Undo the definition of STARTFILE_SPEC from m68kelf.h so we'll\n-   pick the default from gcc.c (just link crt0.o from multilib dir).  */\n-#undef\tSTARTFILE_SPEC\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+\"%{mshared-library-id=0|!mshared-library-id=*: crt1.o%s ;: Scrt1.o%s} \\\n+ crti.o%s crtbegin.o%s\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n \n /* Override the default LIB_SPEC from gcc.c.  We don't currently support\n    profiling, or libg.a.  */\n #undef LIB_SPEC\n-#define LIB_SPEC \"\\\n-%{mid-shared-library:-R libc.gdb%s -elf2flt -shared-lib-id 0} -lc \\\n-\"\n-\n-/* we don't want a .eh_frame section.  */\n-#define EH_FRAME_IN_DATA_SECTION\n-\n-/* ??? Quick hack to get constructors working.  Make this look more like a\n-   COFF target, so the existing dejagnu/libgloss support works.  A better\n-   solution would be to make the necessary dejagnu and libgloss changes so\n-   that we can use normal the ELF constructor mechanism.  */\n-#undef INIT_SECTION_ASM_OP\n-#undef FINI_SECTION_ASM_OP\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"\"\n- \n+#define LIB_SPEC \\\n+\"%{mid-shared-library:%{!static-libc:-R libc.gdb%s}} -lc\"\n+\n+/* Default to using -elf2flt with no options.  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+\"%{!elf2flt*:-elf2flt} \\\n+ %{mid-shared-library: \\\n+   %{mshared-library-id=*:-shared-lib-id %*;:-shared-lib-id 0}}\"\n+\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       LINUX_TARGET_OS_CPP_BUILTINS ();\t\t\t\t\\\n       builtin_define (\"__uClinux__\");\t\t\t\t\\\n       if (TARGET_ID_SHARED_LIBRARY)\t\t\t\t\\\n-\tbuiltin_define (\"__ID_SHARED_LIBRARY__\");\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__ID_SHARED_LIBRARY__\");\t\t\\\n+\t  /* Shared libraries and executables do not share\t\\\n+\t     typeinfo names.  */\t\t\t\t\\\n+\t  builtin_define (\"__GXX_MERGED_TYPEINFO_NAMES=0\");\t\\\n+\t  builtin_define (\"__GXX_TYPEINFO_EQUALITY_INLINE=0\");\t\\\n+\t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* -msep-data is the default PIC mode on this target.  */\n+#define DRIVER_SELF_SPECS \\\n+  \"%{fpie|fPIE|fpic|fPIC:%{!msep-data:%{!mid-shared-library: -msep-data}}}\""}, {"sha": "e847ad047604d4b9ed3a05d286441bfc12725907", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe92a04b69b6598609da0f1d334ac4a01f7edf5/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=abe92a04b69b6598609da0f1d334ac4a01f7edf5", "patch": "@@ -86,7 +86,9 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n }\n #endif\n \n-#if defined(OBJECT_FORMAT_ELF) && defined(HAVE_LD_EH_FRAME_HDR) \\\n+#if defined(OBJECT_FORMAT_ELF) \\\n+    && !defined(OBJECT_FORMAT_FLAT) \\\n+    && defined(HAVE_LD_EH_FRAME_HDR) \\\n     && !defined(inhibit_libc) && !defined(CRTSTUFFT_O) \\\n     && defined(__GLIBC__) && __GLIBC__ >= 2\n #include <link.h>"}]}