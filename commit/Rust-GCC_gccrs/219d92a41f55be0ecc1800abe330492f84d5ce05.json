{"sha": "219d92a41f55be0ecc1800abe330492f84d5ce05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE5ZDkyYTQxZjU1YmUwZWNjMTgwMGFiZTMzMDQ5MmY4NGQ1Y2UwNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-10-31T22:35:53Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-10-31T22:35:53Z"}, "message": "frv.c (frv_function_value, [...]): New functions.\n\n\t* config/frv/frv.c (frv_function_value, frv_libcall_value,\n\tfrv_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n\t* config/frv/frv.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n\t(FUNCTION_VALUE_REGNO_P): Redefine, use frv_function_value_regno_p.\n\t* config/frv/frv-protos.h (frv_function_value_regno_p): Declare.\n\nFrom-SVN: r153783", "tree": {"sha": "5be41b196e8b4c5bb90cfe14773930fa06201dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be41b196e8b4c5bb90cfe14773930fa06201dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/219d92a41f55be0ecc1800abe330492f84d5ce05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219d92a41f55be0ecc1800abe330492f84d5ce05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/219d92a41f55be0ecc1800abe330492f84d5ce05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219d92a41f55be0ecc1800abe330492f84d5ce05/comments", "author": null, "committer": null, "parents": [{"sha": "34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34732b0adebe0eff2db3c23e0e3c667ec7e4c22c"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "94a1ccb169ed0be13f100629e3c99bb3c8691b51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=219d92a41f55be0ecc1800abe330492f84d5ce05", "patch": "@@ -1,3 +1,12 @@\n+2009-10-31  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/frv/frv.c (frv_function_value, frv_libcall_value,\n+\tfrv_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n+\t* config/frv/frv.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t(FUNCTION_VALUE_REGNO_P): Redefine, use frv_function_value_regno_p.\n+\t* config/frv/frv-protos.h (frv_function_value_regno_p): Declare.\n+\n 2009-10-31  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mn10300/mn10300.c (mn10300_function_value): Make static, add"}, {"sha": "3c9950d740b7698af880d9e29a7baad1b4a7e504", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=219d92a41f55be0ecc1800abe330492f84d5ce05", "patch": "@@ -62,6 +62,7 @@ extern rtx frv_function_arg\t\t\t(CUMULATIVE_ARGS *,\n extern void frv_function_arg_advance\t\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int);\n+extern bool frv_function_value_regno_p\t\t(const unsigned int);\n #endif /* TREE_CODE */\n \n extern int frv_expand_block_move\t\t(rtx *);"}, {"sha": "a757472f37bf76979ce37f60f48e32e6fe455945", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=219d92a41f55be0ecc1800abe330492f84d5ce05", "patch": "@@ -273,6 +273,10 @@ static void frv_print_operand_memory_reference_reg\n static void frv_print_operand_memory_reference\t(FILE *, rtx, int);\n static int frv_print_operand_jump_hint\t\t(rtx);\n static const char *comparison_string\t\t(enum rtx_code, rtx);\n+static rtx frv_function_value\t\t\t(const_tree, const_tree,\n+\t\t\t\t\t\t bool);\n+static rtx frv_libcall_value\t\t\t(enum machine_mode,\n+\t\t\t\t\t\t const_rtx);\n static FRV_INLINE int frv_regno_ok_for_base_p\t(int, int);\n static rtx single_set_pattern\t\t\t(rtx);\n static int frv_function_contains_far_jump\t(void);\n@@ -483,6 +487,11 @@ static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT frv_trampoline_init\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE frv_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE frv_libcall_value\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define FRV_SYMBOL_REF_TLS_P(RTX) \\\n@@ -3290,6 +3299,35 @@ frv_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return ret;\n }\n \n+\f\n+/* Implements TARGET_FUNCTION_VALUE.  */\n+\n+static rtx\n+frv_function_value (const_tree valtype,\n+\t\t    const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\t    bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (TYPE_MODE (valtype), RETURN_VALUE_REGNUM);\n+}\n+\n+\f\n+/* Implements TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+frv_libcall_value (enum machine_mode mode,\n+\t\t   const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, RETURN_VALUE_REGNUM);\n+}\n+\n+\f\n+/* Implements FUNCTION_VALUE_REGNO_P.  */\n+\n+bool\n+frv_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == RETURN_VALUE_REGNUM);\n+}\n \f\n /* Return true if a register is ok to use as a base or index register.  */\n "}, {"sha": "d48aa1ef17d4199830404d7525ee934987b37052", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219d92a41f55be0ecc1800abe330492f84d5ce05/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=219d92a41f55be0ecc1800abe330492f84d5ce05", "patch": "@@ -1746,48 +1746,7 @@ typedef struct frv_stack {\n    function call.  */\n #define RETURN_VALUE_REGNUM\t(GPR_FIRST + 8)\n \n-/* A C expression to create an RTX representing the place where a function\n-   returns a value of data type VALTYPE.  VALTYPE is a tree node representing a\n-   data type.  Write `TYPE_MODE (VALTYPE)' to get the machine mode used to\n-   represent that type.  On many machines, only the mode is relevant.\n-   (Actually, on most machines, scalar values are returned in the same place\n-   regardless of mode).\n-\n-   If the precise function being called is known, FUNC is a tree node\n-   (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This makes it\n-   possible to use a different value-returning convention for specific\n-   functions when all their calls are known.\n-\n-   `FUNCTION_VALUE' is not used for return vales with aggregate data types,\n-   because these are returned in another way.  See\n-   `TARGET_STRUCT_VALUE_RTX' and related macros, below.  */\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), RETURN_VALUE_REGNUM)\n-\n-/* A C expression to create an RTX representing the place where a library\n-   function returns a value of mode MODE.\n-\n-   Note that \"library function\" in this context means a compiler support\n-   routine, used to perform arithmetic, whose name is known specially by the\n-   compiler and was not mentioned in the C code being compiled.\n-\n-   The definition of `LIBRARY_VALUE' need not be concerned aggregate data\n-   types, because none of the library functions returns such types.  */\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, RETURN_VALUE_REGNUM)\n-\n-/* A C expression that is nonzero if REGNO is the number of a hard register in\n-   which the values of called function may come back.\n-\n-   A register whose use for returning values is limited to serving as the\n-   second of a pair (for a value of type `double', say) need not be recognized\n-   by this macro.  So for most machines, this definition suffices:\n-\n-        #define FUNCTION_VALUE_REGNO_P(N) ((N) == RETURN)\n-\n-   If the machine has register windows, so that the caller and the called\n-   function use different registers for the return value, this macro should\n-   recognize only the caller's register numbers.  */\n-#define FUNCTION_VALUE_REGNO_P(REGNO) ((REGNO) == RETURN_VALUE_REGNUM)\n+#define FUNCTION_VALUE_REGNO_P(REGNO) frv_function_value_regno_p (REGNO)\n \n \f\n /* How Large Values are Returned.  */"}]}