{"sha": "2fe83a0c9f923c21c75498982c2606beacc3f5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlODNhMGM5ZjkyM2MyMWM3NTQ5ODk4MmMyNjA2YmVhY2MzZjVkNg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-07-27T15:33:50Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-07-27T15:33:50Z"}, "message": "i386.c (ix86_option_override_internal): Allow -mabi for 32-bit, too.\n\n        * config/i386/i386.c (ix86_option_override_internal): Allow -mabi\n        for 32-bit, too.\n        (ix86_handle_abi_attribute): Allow function attributes\n        ms_abi/sysv_abi in 32-bit mode, too.\n        * doc/extend.texi: Adjust attribute documentation.\n\n        * gcc.target/i386/aggregate-ret3.c: New test.\n        * gcc.target/i386/aggregate-ret4.c: New test.\n\nFrom-SVN: r176828", "tree": {"sha": "cb7a4315cce97827ae4c9da452fbc01692572313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7a4315cce97827ae4c9da452fbc01692572313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe83a0c9f923c21c75498982c2606beacc3f5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe83a0c9f923c21c75498982c2606beacc3f5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe83a0c9f923c21c75498982c2606beacc3f5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe83a0c9f923c21c75498982c2606beacc3f5d6/comments", "author": null, "committer": null, "parents": [{"sha": "eb9820c0a3df0746ca13cbe767a2d39ef0a8c751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9820c0a3df0746ca13cbe767a2d39ef0a8c751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9820c0a3df0746ca13cbe767a2d39ef0a8c751"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "229473a0a4ad15fdffc586e4fb537b77a5fd809a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -1,5 +1,11 @@\n 2011-07-27  Kai Tietz  <ktietz@redhat.com>\n \n+\t* config/i386/i386.c (ix86_option_override_internal): Allow -mabi\n+\tfor 32-bit, too.\n+\t(ix86_handle_abi_attribute): Allow function attributes\n+\tms_abi/sysv_abi in 32-bit mode, too.\n+\t* doc/extend.texi: Adjust attribute documentation.\n+\n \t* gimple-fold.c (or_comparisons_1): Remove TRUTH_AND/OR\n \texpression handling.\n \t(and_var_with_comparison_1): Likewise."}, {"sha": "81c53cb37cc8de4e95d3f916d96f4135d7b2e8d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -3133,9 +3133,6 @@ ix86_option_override_internal (bool main_args_p)\n   if (!global_options_set.x_ix86_abi)\n     ix86_abi = DEFAULT_ABI;\n \n-  if (ix86_abi == MS_ABI && TARGET_X32)\n-    error (\"MS ABI not supported in x32 mode\");\n-\n   if (global_options_set.x_ix86_cmodel)\n     {\n       switch (ix86_cmodel)\n@@ -29325,13 +29322,6 @@ ix86_handle_abi_attribute (tree *node, tree name,\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n-  if (!TARGET_LP64)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute only available for 64-bit\",\n-\t       name);\n-      *no_add_attrs = true;\n-      return NULL_TREE;\n-    }\n \n   /* Can combine regparm with all attributes but fastcall.  */\n   if (is_attribute_p (\"ms_abi\", name))"}, {"sha": "0c95a79586123619f7db511dafbfcce2bb7cdea7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -2819,15 +2819,15 @@ defined by shared libraries.\n @cindex @code{ms_abi} attribute\n @cindex @code{sysv_abi} attribute\n \n-On 64-bit x86_64-*-* targets, you can use an ABI attribute to indicate\n-which calling convention should be used for a function.  The @code{ms_abi}\n-attribute tells the compiler to use the Microsoft ABI, while the\n-@code{sysv_abi} attribute tells the compiler to use the ABI used on\n-GNU/Linux and other systems.  The default is to use the Microsoft ABI\n-when targeting Windows.  On all other systems, the default is the AMD ABI.\n+On 32-bit and 64-bit (i?86|x86_64)-*-* targets, you can use an ABI attribute\n+to indicate which calling convention should be used for a function.  The\n+@code{ms_abi} attribute tells the compiler to use the Microsoft ABI,\n+while the @code{sysv_abi} attribute tells the compiler to use the ABI\n+used on GNU/Linux and other systems.  The default is to use the Microsoft ABI\n+when targeting Windows.  On all other systems, the default is the x86/AMD ABI.\n \n-Note, the @code{ms_abi} attribute for Windows targets currently requires\n-the @option{-maccumulate-outgoing-args} option.\n+Note, the @code{ms_abi} attribute for Windows 64-bit targets currently\n+requires the @option{-maccumulate-outgoing-args} option.\n \n @item callee_pop_aggregate_return (@var{number})\n @cindex @code{callee_pop_aggregate_return} attribute\n@@ -2839,6 +2839,9 @@ zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n equal to one.  The default i386 ABI assumes that the callee pops the\n stack for hidden pointer.\n \n+Note, that on 32-bit i386 Windows targets the compiler assumes that the\n+caller pops the stack for hidden pointer.\n+\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n "}, {"sha": "a90a639d9334ec339841811baad9923783bf2b8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -1,3 +1,8 @@\n+2011-07-27  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.target/i386/aggregate-ret3.c: New test.\n+\t* gcc.target/i386/aggregate-ret4.c: New test.\n+\n 2011-07-27  Daniel Carrera  <dcarrera@gmail.com>\n \n \tPR fortran/49755"}, {"sha": "e3c5b0943938e255ee97010507ffd31066419bd0", "filename": "gcc/testsuite/gcc.target/i386/aggregate-ret3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret3.c?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -0,0 +1,28 @@\n+/* Check that, with keep_aggregate_return_pointer attribute,  callee does\n+   not pop the stack for the implicit pointer arg when returning a large\n+   structure in memory.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+\n+struct foo {\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+};\n+\n+__attribute__ ((ms_abi))\n+struct foo\n+bar (void)\n+{\n+  struct foo retval;\n+  retval.a = 1;\n+  retval.b = 2;\n+  retval.c = 3;\n+  retval.d = 4;\n+  return retval;\n+}\n+\n+/* { dg-final { scan-assembler-not \"ret\\[ \\t\\]\\\\\\$4\" } } */\n+\n+"}, {"sha": "6e70f49f7790b6c0a110b3b11bf690fa933f8db9", "filename": "gcc/testsuite/gcc.target/i386/aggregate-ret4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe83a0c9f923c21c75498982c2606beacc3f5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret4.c?ref=2fe83a0c9f923c21c75498982c2606beacc3f5d6", "patch": "@@ -0,0 +1,28 @@\n+/* Check that, with dont_keep_aggregate_return_pointer attribute,  callee\n+   pops the stack for the implicit pointer arg when returning a large\n+   structure in memory.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+\n+struct foo {\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+};\n+\n+__attribute__ ((sysv_abi))\n+struct foo\n+bar (void)\n+{\n+  struct foo retval;\n+  retval.a = 1;\n+  retval.b = 2;\n+  retval.c = 3;\n+  retval.d = 4;\n+  return retval;\n+}\n+\n+/* { dg-final { scan-assembler \"ret\\[ \\t\\]\\\\\\$4\" } } */\n+\n+"}]}