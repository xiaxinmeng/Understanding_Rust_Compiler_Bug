{"sha": "13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlNmZhZGQ5NmRjMDBjNjExYTNkMmYyNmExYTZkN2EwYTI5ZWEyNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-02-19T02:54:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-02-19T20:33:25Z"}, "message": "libgo: update to Go1.16 release\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/293793", "tree": {"sha": "658d732faec422de82b372ad60e76bc6f1277689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/658d732faec422de82b372ad60e76bc6f1277689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af027826292351218785f893d1c42fe28ae3ed9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af027826292351218785f893d1c42fe28ae3ed9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af027826292351218785f893d1c42fe28ae3ed9f"}], "stats": {"total": 517, "additions": 435, "deletions": 82}, "files": [{"sha": "217bdd55f1d50a6e35c90eab3550296c07a1b1e9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -1,4 +1,4 @@\n-c406de0594782b1d6782a732a50f5b76387852dc\n+78a840e4940159a66072237f6b002ab79f441b79\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "183b0245ee233b02959b97e8ca3f628a5e2186f6", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -1,4 +1,4 @@\n-3e06467282c6d5678a6273747658c04314e013ef\n+f21be2fdc6f1becdbed1592ea0b245cdeedc5ac8\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "4befab24bc93533736e826ed74e0d9693aa7762a", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -1 +1 @@\n-go1.16rc1\n+go1.16"}, {"sha": "f0b61e6dba69a4fb393c8c92c694713c9defd4d6", "filename": "libgo/go/archive/tar/strconv.go", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -265,8 +265,27 @@ func parsePAXRecord(s string) (k, v, r string, err error) {\n \t\treturn \"\", \"\", s, ErrHeader\n \t}\n \n+\tafterSpace := int64(sp + 1)\n+\tbeforeLastNewLine := n - 1\n+\t// In some cases, \"length\" was perhaps padded/malformed, and\n+\t// trying to index past where the space supposedly is goes past\n+\t// the end of the actual record.\n+\t// For example:\n+\t//    \"0000000000000000000000000000000030 mtime=1432668921.098285006\\n30 ctime=2147483649.15163319\"\n+\t//                                  ^     ^\n+\t//                                  |     |\n+\t//                                  |  afterSpace=35\n+\t//                                  |\n+\t//                          beforeLastNewLine=29\n+\t// yet indexOf(firstSpace) MUST BE before endOfRecord.\n+\t//\n+\t// See https://golang.org/issues/40196.\n+\tif afterSpace >= beforeLastNewLine {\n+\t\treturn \"\", \"\", s, ErrHeader\n+\t}\n+\n \t// Extract everything between the space and the final newline.\n-\trec, nl, rem := s[sp+1:n-1], s[n-1:n], s[n:]\n+\trec, nl, rem := s[afterSpace:beforeLastNewLine], s[beforeLastNewLine:n], s[n:]\n \tif nl != \"\\n\" {\n \t\treturn \"\", \"\", s, ErrHeader\n \t}"}, {"sha": "add65e272ae6d776eecc97dd163f3988cddf23ce", "filename": "libgo/go/archive/tar/strconv_test.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fstrconv_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -368,6 +368,13 @@ func TestParsePAXRecord(t *testing.T) {\n \t\t{\"16 longkeyname=hahaha\\n\", \"16 longkeyname=hahaha\\n\", \"\", \"\", false},\n \t\t{\"3 somelongkey=\\n\", \"3 somelongkey=\\n\", \"\", \"\", false},\n \t\t{\"50 tooshort=\\n\", \"50 tooshort=\\n\", \"\", \"\", false},\n+\t\t{\"0000000000000000000000000000000030 mtime=1432668921.098285006\\n30 ctime=2147483649.15163319\", \"0000000000000000000000000000000030 mtime=1432668921.098285006\\n30 ctime=2147483649.15163319\", \"mtime\", \"1432668921.098285006\", false},\n+\t\t{\"06 k=v\\n\", \"06 k=v\\n\", \"\", \"\", false},\n+\t\t{\"00006 k=v\\n\", \"00006 k=v\\n\", \"\", \"\", false},\n+\t\t{\"000006 k=v\\n\", \"000006 k=v\\n\", \"\", \"\", false},\n+\t\t{\"000000 k=v\\n\", \"000000 k=v\\n\", \"\", \"\", false},\n+\t\t{\"0 k=v\\n\", \"0 k=v\\n\", \"\", \"\", false},\n+\t\t{\"+0000005 x=\\n\", \"+0000005 x=\\n\", \"\", \"\", false},\n \t}\n \n \tfor _, v := range vectors {"}, {"sha": "e7c63f0749d695c91d863b18f76184f420995df2", "filename": "libgo/go/cmd/go/alldocs.go", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -1808,7 +1808,7 @@\n // \t\tThe directory where the go command will write\n // \t\ttemporary source files, packages, and binaries.\n // \tGOVCS\n-// \t  Lists version control commands that may be used with matching servers.\n+// \t\tLists version control commands that may be used with matching servers.\n // \t\tSee 'go help vcs'.\n //\n // Environment variables for use with cgo:\n@@ -2410,6 +2410,17 @@\n //\n // For a detailed reference on modules, see https://golang.org/ref/mod.\n //\n+// By default, the go command may download modules from https://proxy.golang.org.\n+// It may authenticate modules using the checksum database at\n+// https://sum.golang.org. Both services are operated by the Go team at Google.\n+// The privacy policies for these services are available at\n+// https://proxy.golang.org/privacy and https://sum.golang.org/privacy,\n+// respectively.\n+//\n+// The go command's download behavior may be configured using GOPROXY, GOSUMDB,\n+// GOPRIVATE, and other environment variables. See 'go help environment'\n+// and https://golang.org/ref/mod#private-module-privacy for more information.\n+//\n //\n // Module authentication using go.sum\n //\n@@ -2868,28 +2879,31 @@\n // legal reasons). Therefore, clients can still access public code served from\n // Bazaar, Fossil, or Subversion repositories by default, because those downloads\n // use the Go module mirror, which takes on the security risk of running the\n-// version control commands, using a custom sandbox.\n+// version control commands using a custom sandbox.\n //\n // The GOVCS variable can be used to change the allowed version control systems\n // for specific packages (identified by a module or import path).\n-// The GOVCS variable applies both when using modules and when using GOPATH.\n-// When using modules, the patterns match against the module path.\n-// When using GOPATH, the patterns match against the import path\n-// corresponding to the root of the version control repository.\n+// The GOVCS variable applies when building package in both module-aware mode\n+// and GOPATH mode. When using modules, the patterns match against the module path.\n+// When using GOPATH, the patterns match against the import path corresponding to\n+// the root of the version control repository.\n //\n // The general form of the GOVCS setting is a comma-separated list of\n // pattern:vcslist rules. The pattern is a glob pattern that must match\n // one or more leading elements of the module or import path. The vcslist\n // is a pipe-separated list of allowed version control commands, or \"all\"\n-// to allow use of any known command, or \"off\" to allow nothing.\n+// to allow use of any known command, or \"off\" to disallow all commands.\n+// Note that if a module matches a pattern with vcslist \"off\", it may still be\n+// downloaded if the origin server uses the \"mod\" scheme, which instructs the\n+// go command to download the module using the GOPROXY protocol.\n // The earliest matching pattern in the list applies, even if later patterns\n // might also match.\n //\n // For example, consider:\n //\n // \tGOVCS=github.com:git,evil.com:off,*:git|hg\n //\n-// With this setting, code with an module or import path beginning with\n+// With this setting, code with a module or import path beginning with\n // github.com/ can only use git; paths on evil.com cannot use any version\n // control command, and all other paths (* matches everything) can use\n // only git or hg."}, {"sha": "57cee4ff96c1acc42c01d69483bc630d86e8b750", "filename": "libgo/go/cmd/go/internal/help/helpdoc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -542,7 +542,7 @@ General-purpose environment variables:\n \t\tThe directory where the go command will write\n \t\ttemporary source files, packages, and binaries.\n \tGOVCS\n-\t  Lists version control commands that may be used with matching servers.\n+\t\tLists version control commands that may be used with matching servers.\n \t\tSee 'go help vcs'.\n \n Environment variables for use with cgo:"}, {"sha": "e83f1d2cea9e8a4630a612d828c4c32874bcb4ce", "filename": "libgo/go/cmd/go/internal/load/pkg.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -36,6 +36,8 @@ import (\n \t\"cmd/go/internal/str\"\n \t\"cmd/go/internal/trace\"\n \t\"cmd/internal/sys\"\n+\n+\t\"golang.org/x/mod/module\"\n )\n \n var IgnoreImports bool // control whether we ignore imports in packages\n@@ -2096,6 +2098,9 @@ func validEmbedPattern(pattern string) bool {\n // can't or won't be included in modules and therefore shouldn't be treated\n // as existing for embedding.\n func isBadEmbedName(name string) bool {\n+\tif err := module.CheckFilePath(name); err != nil {\n+\t\treturn true\n+\t}\n \tswitch name {\n \t// Empty string should be impossible but make it bad.\n \tcase \"\":"}, {"sha": "dccacd3d1ee933c2f2796660e0d9a5748fbc3d73", "filename": "libgo/go/cmd/go/internal/modget/get.go", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -176,28 +176,31 @@ packages or when the mirror refuses to serve a public package (typically for\n legal reasons). Therefore, clients can still access public code served from\n Bazaar, Fossil, or Subversion repositories by default, because those downloads\n use the Go module mirror, which takes on the security risk of running the\n-version control commands, using a custom sandbox.\n+version control commands using a custom sandbox.\n \n The GOVCS variable can be used to change the allowed version control systems\n for specific packages (identified by a module or import path).\n-The GOVCS variable applies both when using modules and when using GOPATH.\n-When using modules, the patterns match against the module path.\n-When using GOPATH, the patterns match against the import path\n-corresponding to the root of the version control repository.\n+The GOVCS variable applies when building package in both module-aware mode\n+and GOPATH mode. When using modules, the patterns match against the module path.\n+When using GOPATH, the patterns match against the import path corresponding to\n+the root of the version control repository.\n \n The general form of the GOVCS setting is a comma-separated list of\n pattern:vcslist rules. The pattern is a glob pattern that must match\n one or more leading elements of the module or import path. The vcslist\n is a pipe-separated list of allowed version control commands, or \"all\"\n-to allow use of any known command, or \"off\" to allow nothing.\n+to allow use of any known command, or \"off\" to disallow all commands.\n+Note that if a module matches a pattern with vcslist \"off\", it may still be\n+downloaded if the origin server uses the \"mod\" scheme, which instructs the\n+go command to download the module using the GOPROXY protocol.\n The earliest matching pattern in the list applies, even if later patterns\n might also match.\n \n For example, consider:\n \n \tGOVCS=github.com:git,evil.com:off,*:git|hg\n \n-With this setting, code with an module or import path beginning with\n+With this setting, code with a module or import path beginning with\n github.com/ can only use git; paths on evil.com cannot use any version\n control command, and all other paths (* matches everything) can use\n only git or hg.\n@@ -380,10 +383,9 @@ func runGet(ctx context.Context, cmd *base.Command, args []string) {\n \t\tpkgs := load.PackagesAndErrors(ctx, pkgPatterns)\n \t\tload.CheckPackageErrors(pkgs)\n \t\twork.InstallPackages(ctx, pkgPatterns, pkgs)\n-\t\t// TODO(#40276): After Go 1.16, print a deprecation notice when building\n-\t\t// and installing main packages. 'go install pkg' or\n-\t\t// 'go install pkg@version' should be used instead.\n-\t\t// Give the specific argument to use if possible.\n+\t\t// TODO(#40276): After Go 1.16, print a deprecation notice when building and\n+\t\t// installing main packages. 'go install pkg' or 'go install pkg@version'\n+\t\t// should be used instead. Give the specific argument to use if possible.\n \t}\n \n \tif !modload.HasModRoot() {\n@@ -1453,7 +1455,18 @@ func (r *resolver) checkPackagesAndRetractions(ctx context.Context, pkgPatterns\n \t\t\t}\n \t\t}\n \t\tfor _, pkg := range pkgs {\n-\t\t\tif _, _, err := modload.Lookup(\"\", false, pkg); err != nil {\n+\t\t\tif dir, _, err := modload.Lookup(\"\", false, pkg); err != nil {\n+\t\t\t\tif dir != \"\" && errors.Is(err, imports.ErrNoGo) {\n+\t\t\t\t\t// Since dir is non-empty, we must have located source files\n+\t\t\t\t\t// associated with either the package or its test \u2014 ErrNoGo must\n+\t\t\t\t\t// indicate that none of those source files happen to apply in this\n+\t\t\t\t\t// configuration. If we are actually building the package (no -d\n+\t\t\t\t\t// flag), the compiler will report the problem; otherwise, assume that\n+\t\t\t\t\t// the user is going to build or test it in some other configuration\n+\t\t\t\t\t// and suppress the error.\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\n \t\t\t\tbase.SetExitStatus(1)\n \t\t\t\tif ambiguousErr := (*modload.AmbiguousImportError)(nil); errors.As(err, &ambiguousErr) {\n \t\t\t\t\tfor _, m := range ambiguousErr.Modules {"}, {"sha": "fd39ddd94ec62d6f21533a7ea7dff02c8eeb2ecb", "filename": "libgo/go/cmd/go/internal/modload/help.go", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fhelp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fhelp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fhelp.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -6,8 +6,6 @@ package modload\n \n import \"cmd/go/internal/base\"\n \n-// TODO(rsc): The \"module code layout\" section needs to be written.\n-\n var HelpModules = &base.Command{\n \tUsageLine: \"modules\",\n \tShort:     \"modules, module versions, and more\",\n@@ -22,6 +20,17 @@ For a series of tutorials on modules, see\n https://golang.org/doc/tutorial/create-module.\n \n For a detailed reference on modules, see https://golang.org/ref/mod.\n+\n+By default, the go command may download modules from https://proxy.golang.org.\n+It may authenticate modules using the checksum database at\n+https://sum.golang.org. Both services are operated by the Go team at Google.\n+The privacy policies for these services are available at\n+https://proxy.golang.org/privacy and https://sum.golang.org/privacy,\n+respectively.\n+\n+The go command's download behavior may be configured using GOPROXY, GOSUMDB,\n+GOPRIVATE, and other environment variables. See 'go help environment'\n+and https://golang.org/ref/mod#private-module-privacy for more information.\n \t`,\n }\n "}, {"sha": "b5b3c462ff2acced306e495a173b43be76fd579b", "filename": "libgo/go/cmd/go/internal/vet/vetflag.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -184,7 +184,8 @@ func exitWithUsage() {\n \tif vetTool != \"\" {\n \t\tcmd = vetTool\n \t}\n-\tfmt.Fprintf(os.Stderr, \"Run '%s -help' for the vet tool's flags.\\n\", cmd)\n+\tfmt.Fprintf(os.Stderr, \"Run '%s help' for a full list of flags and analyzers.\\n\", cmd)\n+\tfmt.Fprintf(os.Stderr, \"Run '%s -help' for an overview.\\n\", cmd)\n \n \tbase.SetExitStatus(2)\n \tbase.Exit()"}, {"sha": "2c3bee8fdc7a925bb9bd9bdcee078a36b0ed9581", "filename": "libgo/go/cmd/go/testdata/script/build_trimpath.txt", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fbuild_trimpath.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fbuild_trimpath.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fbuild_trimpath.txt?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -121,6 +121,7 @@ package main\n import (\n \t\"bytes\"\n \t\"fmt\"\n+\t\"io/ioutil\"\n \t\"log\"\n \t\"os\"\n \t\"os/exec\"\n@@ -130,7 +131,7 @@ import (\n \n func main() {\n \texe := os.Args[1]\n-\tdata, err := os.ReadFile(exe)\n+\tdata, err := ioutil.ReadFile(exe)\n \tif err != nil {\n \t\tlog.Fatal(err)\n \t}"}, {"sha": "26a0194be5603e9195356981ce83923de430fc94", "filename": "libgo/go/cmd/go/testdata/script/help.txt", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fhelp.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fhelp.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fhelp.txt?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -34,9 +34,10 @@ stderr 'Run ''go help mod'' for usage.'\n # Earlier versions of Go printed the same as 'go -h' here.\n # Also make sure we print the short help line.\n ! go vet -h\n-stderr 'usage: go vet'\n-stderr 'Run ''go help vet'' for details'\n-stderr 'Run ''go tool vet -help'' for the vet tool''s flags'\n+stderr 'usage: go vet .*'\n+stderr 'Run ''go help vet'' for details.'\n+stderr 'Run ''go tool vet help'' for a full list of flags and analyzers.'\n+stderr 'Run ''go tool vet -help'' for an overview.'\n \n # Earlier versions of Go printed a large document here, instead of these two\n # lines."}, {"sha": "98da870ac6b00a8a224584fb4c734eb181184c46", "filename": "libgo/go/embed/embed.go", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fembed%2Fembed.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fembed%2Fembed.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fembed%2Fembed.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -9,18 +9,28 @@\n // files read from the package directory or subdirectories at compile time.\n //\n // For example, here are three ways to embed a file named hello.txt\n-// and then print its contents at run time:\n+// and then print its contents at run time.\n //\n-//\timport \"embed\"\n+// Embedding one file into a string:\n+//\n+//\timport _ \"embed\"\n //\n //\t//go:embed hello.txt\n //\tvar s string\n //\tprint(s)\n //\n+// Embedding one file into a slice of bytes:\n+//\n+//\timport _ \"embed\"\n+//\n //\t//go:embed hello.txt\n //\tvar b []byte\n //\tprint(string(b))\n //\n+// Embedded one or more files into a file system:\n+//\n+//\timport \"embed\"\n+//\n //\t//go:embed hello.txt\n //\tvar f embed.FS\n //\tdata, _ := f.ReadFile(\"hello.txt\")\n@@ -34,8 +44,8 @@\n // The directive must immediately precede a line containing the declaration of a single variable.\n // Only blank lines and \u2018//\u2019 line comments are permitted between the directive and the declaration.\n //\n-// The variable must be of type string, []byte, or FS exactly. Named types or type aliases\n-// derived from those types are not allowed.\n+// The type of the variable must be a string type, or a slice of a byte type,\n+// or FS (or an alias of FS).\n //\n // For example:\n //\n@@ -51,12 +61,15 @@\n // The Go build system will recognize the directives and arrange for the declared variable\n // (in the example above, content) to be populated with the matching files from the file system.\n //\n-// The //go:embed directive accepts multiple space-separated patterns for brevity,\n-// but it can also be repeated, to avoid very long lines when there are many patterns.\n-// The patterns are interpreted relative to the package directory containing the source file.\n-// The path separator is a forward slash, even on Windows systems.\n-// To allow for naming files with spaces in their names, patterns can be written\n-// as Go double-quoted or back-quoted string literals.\n+// The //go:embed directive accepts multiple space-separated patterns for\n+// brevity, but it can also be repeated, to avoid very long lines when there are\n+// many patterns. The patterns are interpreted relative to the package directory\n+// containing the source file. The path separator is a forward slash, even on\n+// Windows systems. Patterns may not contain \u2018.\u2019 or \u2018..\u2019 or empty path elements,\n+// nor may they begin or end with a slash. To match everything in the current\n+// directory, use \u2018*\u2019 instead of \u2018.\u2019. To allow for naming files with spaces in\n+// their names, patterns can be written as Go double-quoted or back-quoted\n+// string literals.\n //\n // If a pattern names a directory, all files in the subtree rooted at that directory are\n // embedded (recursively), except that files with names beginning with \u2018.\u2019 or \u2018_\u2019\n@@ -70,16 +83,13 @@\n //\n // The //go:embed directive can be used with both exported and unexported variables,\n // depending on whether the package wants to make the data available to other packages.\n-// Similarly, it can be used with both global and function-local variables,\n-// depending on what is more convenient in context.\n+// It can only be used with global variables at package scope,\n+// not with local variables.\n //\n // Patterns must not match files outside the package's module, such as \u2018.git/*\u2019 or symbolic links.\n // Matches for empty directories are ignored. After that, each pattern in a //go:embed line\n // must match at least one file or non-empty directory.\n //\n-// Patterns must not contain \u2018.\u2019 or \u2018..\u2019 path elements nor begin with a leading slash.\n-// To match everything in the current directory, use \u2018*\u2019 instead of \u2018.\u2019.\n-//\n // If any patterns are invalid or have invalid matches, the build will fail.\n //\n // Strings and Bytes"}, {"sha": "01b242a4ea4e8d8fe147fbd9b3fc785d81796e13", "filename": "libgo/go/internal/poll/copy_file_range_linux.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -112,7 +112,15 @@ func CopyFileRange(dst, src *FD, remain int64) (written int64, handled bool, err\n \t\t\treturn 0, false, nil\n \t\tcase nil:\n \t\t\tif n == 0 {\n-\t\t\t\t// src is at EOF, which means we are done.\n+\t\t\t\t// If we did not read any bytes at all,\n+\t\t\t\t// then this file may be in a file system\n+\t\t\t\t// where copy_file_range silently fails.\n+\t\t\t\t// https://lore.kernel.org/linux-fsdevel/20210126233840.GG4626@dread.disaster.area/T/#m05753578c7f7882f6e9ffe01f981bc223edef2b0\n+\t\t\t\tif written == 0 {\n+\t\t\t\t\treturn 0, false, nil\n+\t\t\t\t}\n+\t\t\t\t// Otherwise src is at EOF, which means\n+\t\t\t\t// we are done.\n \t\t\t\treturn written, true, nil\n \t\t\t}\n \t\t\tremain -= n"}, {"sha": "66005a9f5c952a68574a50d64cecab36b13728f1", "filename": "libgo/go/internal/poll/sendfile_bsd.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_bsd.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -18,6 +18,10 @@ func SendFile(dstFD *FD, src int, pos, remain int64) (int64, error) {\n \t\treturn 0, err\n \t}\n \tdefer dstFD.writeUnlock()\n+\tif err := dstFD.pd.prepareWrite(dstFD.isFile); err != nil {\n+\t\treturn 0, err\n+\t}\n+\n \tdst := int(dstFD.Sysfd)\n \tvar written int64\n \tvar err error"}, {"sha": "d95e496a265cb117b330fe956149382a49b6e0f9", "filename": "libgo/go/internal/poll/sendfile_glibc.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_glibc.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -18,6 +18,9 @@ func SendFile(dstFD *FD, src int, remain int64) (int64, error) {\n \t\treturn 0, err\n \t}\n \tdefer dstFD.writeUnlock()\n+\tif err := dstFD.pd.prepareWrite(dstFD.isFile); err != nil {\n+\t\treturn 0, err\n+\t}\n \n \tdst := int(dstFD.Sysfd)\n \tvar written int64\n@@ -34,6 +37,9 @@ func SendFile(dstFD *FD, src int, remain int64) (int64, error) {\n \t\t} else if n == 0 && err1 == nil {\n \t\t\tbreak\n \t\t}\n+\t\tif err1 == syscall.EINTR {\n+\t\t\tcontinue\n+\t\t}\n \t\tif err1 == syscall.EAGAIN {\n \t\t\tif err1 = dstFD.pd.waitWrite(dstFD.isFile); err1 == nil {\n \t\t\t\tcontinue"}, {"sha": "748c85131e688da0c42eb4d8f8fd65195a587a77", "filename": "libgo/go/internal/poll/sendfile_solaris.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsendfile_solaris.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -20,6 +20,9 @@ func SendFile(dstFD *FD, src int, pos, remain int64) (int64, error) {\n \t\treturn 0, err\n \t}\n \tdefer dstFD.writeUnlock()\n+\tif err := dstFD.pd.prepareWrite(dstFD.isFile); err != nil {\n+\t\treturn 0, err\n+\t}\n \n \tdst := int(dstFD.Sysfd)\n \tvar written int64"}, {"sha": "3d2e2ee2ac953020780614885c0279705f56dbbe", "filename": "libgo/go/io/fs/fs.go", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Ffs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Ffs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Ffs%2Ffs.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -10,6 +10,7 @@ package fs\n import (\n \t\"internal/oserror\"\n \t\"time\"\n+\t\"unicode/utf8\"\n )\n \n // An FS provides access to a hierarchical file system.\n@@ -32,14 +33,22 @@ type FS interface {\n \n // ValidPath reports whether the given path name\n // is valid for use in a call to Open.\n-// Path names passed to open are unrooted, slash-separated\n-// sequences of path elements, like \u201cx/y/z\u201d.\n-// Path names must not contain a \u201c.\u201d or \u201c..\u201d or empty element,\n+//\n+// Path names passed to open are UTF-8-encoded,\n+// unrooted, slash-separated sequences of path elements, like \u201cx/y/z\u201d.\n+// Path names must not contain an element that is \u201c.\u201d or \u201c..\u201d or the empty string,\n // except for the special case that the root directory is named \u201c.\u201d.\n+// Paths must not start or end with a slash: \u201c/x\u201d and \u201cx/\u201d are invalid.\n //\n-// Paths are slash-separated on all systems, even Windows.\n-// Backslashes must not appear in path names.\n+// Note that paths are slash-separated on all systems, even Windows.\n+// Paths containing other characters such as backslash and colon\n+// are accepted as valid, but those characters must never be\n+// interpreted by an FS implementation as path element separators.\n func ValidPath(name string) bool {\n+\tif !utf8.ValidString(name) {\n+\t\treturn false\n+\t}\n+\n \tif name == \".\" {\n \t\t// special case\n \t\treturn true\n@@ -49,9 +58,6 @@ func ValidPath(name string) bool {\n \tfor {\n \t\ti := 0\n \t\tfor i < len(name) && name[i] != '/' {\n-\t\t\tif name[i] == '\\\\' {\n-\t\t\t\treturn false\n-\t\t\t}\n \t\t\ti++\n \t\t}\n \t\telem := name[:i]"}, {"sha": "aae1a7606f45a6f16c36f2e7c58a5925c153c443", "filename": "libgo/go/io/fs/fs_test.go", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Ffs_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Ffs_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Ffs%2Ffs_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -33,9 +33,10 @@ var isValidPathTests = []struct {\n \t{\"x/..\", false},\n \t{\"x/../y\", false},\n \t{\"x//y\", false},\n-\t{`x\\`, false},\n-\t{`x\\y`, false},\n-\t{`\\x`, false},\n+\t{`x\\`, true},\n+\t{`x\\y`, true},\n+\t{`x:y`, true},\n+\t{`\\x`, true},\n }\n \n func TestValidPath(t *testing.T) {"}, {"sha": "45d9cb61b9632af83bf9834ef99d47e6133b193b", "filename": "libgo/go/io/fs/glob.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Fglob.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Fglob.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Ffs%2Fglob.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -6,7 +6,6 @@ package fs\n \n import (\n \t\"path\"\n-\t\"runtime\"\n )\n \n // A GlobFS is a file system with a Glob method.\n@@ -111,8 +110,8 @@ func glob(fs FS, dir, pattern string, matches []string) (m []string, e error) {\n // recognized by path.Match.\n func hasMeta(path string) bool {\n \tfor i := 0; i < len(path); i++ {\n-\t\tc := path[i]\n-\t\tif c == '*' || c == '?' || c == '[' || runtime.GOOS == \"windows\" && c == '\\\\' {\n+\t\tswitch path[i] {\n+\t\tcase '*', '?', '[', '\\\\':\n \t\t\treturn true\n \t\t}\n \t}"}, {"sha": "bcd2e1bfae958c9b05d821f834ffad12a56df5b2", "filename": "libgo/go/io/fs/glob_test.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Fglob_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fio%2Ffs%2Fglob_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Ffs%2Fglob_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -17,6 +17,7 @@ var globTests = []struct {\n }{\n \t{os.DirFS(\".\"), \"glob.go\", \"glob.go\"},\n \t{os.DirFS(\".\"), \"gl?b.go\", \"glob.go\"},\n+\t{os.DirFS(\".\"), `gl\\ob.go`, \"glob.go\"},\n \t{os.DirFS(\".\"), \"*\", \"glob.go\"},\n \t// This test fails on gofrontend because the directory structure\n \t// is different.\n@@ -34,7 +35,7 @@ func TestGlob(t *testing.T) {\n \t\t\tt.Errorf(\"Glob(%#q) = %#v want %v\", tt.pattern, matches, tt.result)\n \t\t}\n \t}\n-\tfor _, pattern := range []string{\"no_match\", \"../*/no_match\"} {\n+\tfor _, pattern := range []string{\"no_match\", \"../*/no_match\", `\\*`} {\n \t\tmatches, err := Glob(os.DirFS(\".\"), pattern)\n \t\tif err != nil {\n \t\t\tt.Errorf(\"Glob error for %q: %s\", pattern, err)"}, {"sha": "bbd6c8850b604b365011144e9ab8e6744ee27354", "filename": "libgo/go/math/big/nat.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -881,7 +881,7 @@ func (z nat) divRecursiveStep(u, v nat, depth int, tmp *nat, temps []*nat) {\n \t\t// then floor(u1/v1) >= floor(u/v)\n \t\t//\n \t\t// Moreover, the difference is at most 2 if len(v1) >= len(u/v)\n-\t\t// We choose s = B-1 since len(v)-B >= B+1 >= len(u/v)\n+\t\t// We choose s = B-1 since len(v)-s >= B+1 >= len(u/v)\n \t\ts := (B - 1)\n \t\t// Except for the first step, the top bits are always\n \t\t// a division remainder, so the quotient length is <= n."}, {"sha": "d6057fd83912872791a2284f8f5d026b1a17fb81", "filename": "libgo/go/net/sendfile_test.go", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fnet%2Fsendfile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fnet%2Fsendfile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsendfile_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -10,8 +10,10 @@ import (\n \t\"bytes\"\n \t\"crypto/sha256\"\n \t\"encoding/hex\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"io/ioutil\"\n \t\"os\"\n \t\"runtime\"\n \t\"sync\"\n@@ -313,3 +315,66 @@ func TestSendfilePipe(t *testing.T) {\n \n \twg.Wait()\n }\n+\n+// Issue 43822: tests that returns EOF when conn write timeout.\n+func TestSendfileOnWriteTimeoutExceeded(t *testing.T) {\n+\tln, err := newLocalListener(\"tcp\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer ln.Close()\n+\n+\terrc := make(chan error, 1)\n+\tgo func(ln Listener) (retErr error) {\n+\t\tdefer func() {\n+\t\t\terrc <- retErr\n+\t\t\tclose(errc)\n+\t\t}()\n+\n+\t\tconn, err := ln.Accept()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tdefer conn.Close()\n+\n+\t\t// Set the write deadline in the past(1h ago). It makes\n+\t\t// sure that it is always write timeout.\n+\t\tif err := conn.SetWriteDeadline(time.Now().Add(-1 * time.Hour)); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tf, err := os.Open(newton)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tdefer f.Close()\n+\n+\t\t_, err = io.Copy(conn, f)\n+\t\tif errors.Is(err, os.ErrDeadlineExceeded) {\n+\t\t\treturn nil\n+\t\t}\n+\n+\t\tif err == nil {\n+\t\t\terr = fmt.Errorf(\"expected ErrDeadlineExceeded, but got nil\")\n+\t\t}\n+\t\treturn err\n+\t}(ln)\n+\n+\tconn, err := Dial(\"tcp\", ln.Addr().String())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer conn.Close()\n+\n+\tn, err := io.Copy(ioutil.Discard, conn)\n+\tif err != nil {\n+\t\tt.Fatalf(\"expected nil error, but got %v\", err)\n+\t}\n+\tif n != 0 {\n+\t\tt.Fatalf(\"expected receive zero, but got %d byte(s)\", n)\n+\t}\n+\n+\tif err := <-errc; err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}"}, {"sha": "52dd94339b8ffbed5ceaffaec3edd002c19ca36d", "filename": "libgo/go/os/file.go", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Ffile.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -620,10 +620,21 @@ func DirFS(dir string) fs.FS {\n \treturn dirFS(dir)\n }\n \n+func containsAny(s, chars string) bool {\n+\tfor i := 0; i < len(s); i++ {\n+\t\tfor j := 0; j < len(chars); j++ {\n+\t\t\tif s[i] == chars[j] {\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n type dirFS string\n \n func (dir dirFS) Open(name string) (fs.File, error) {\n-\tif !fs.ValidPath(name) {\n+\tif !fs.ValidPath(name) || runtime.GOOS == \"windows\" && containsAny(name, `\\:`) {\n \t\treturn nil, &PathError{Op: \"open\", Path: name, Err: ErrInvalid}\n \t}\n \tf, err := Open(string(dir) + \"/\" + name)"}, {"sha": "734c655e6f7df13fdd34902431229d8215194c85", "filename": "libgo/go/os/os_test.go", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Fos_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Fos_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fos_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -2721,6 +2721,40 @@ func TestDirFS(t *testing.T) {\n \tif err := fstest.TestFS(DirFS(\"./testdata/dirfs\"), \"a\", \"b\", \"dir/x\"); err != nil {\n \t\tt.Fatal(err)\n \t}\n+\n+\t// Test that Open does not accept backslash as separator.\n+\td := DirFS(\".\")\n+\t_, err := d.Open(`testdata\\dirfs`)\n+\tif err == nil {\n+\t\tt.Fatalf(`Open testdata\\dirfs succeeded`)\n+\t}\n+}\n+\n+func TestDirFSPathsValid(t *testing.T) {\n+\tif runtime.GOOS == \"windows\" {\n+\t\tt.Skipf(\"skipping on Windows\")\n+\t}\n+\n+\td := t.TempDir()\n+\tif err := os.WriteFile(filepath.Join(d, \"control.txt\"), []byte(string(\"Hello, world!\")), 0644); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif err := os.WriteFile(filepath.Join(d, `e:xperi\\ment.txt`), []byte(string(\"Hello, colon and backslash!\")), 0644); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tfsys := os.DirFS(d)\n+\terr := fs.WalkDir(fsys, \".\", func(path string, e fs.DirEntry, err error) error {\n+\t\tif fs.ValidPath(e.Name()) {\n+\t\t\tt.Logf(\"%q ok\", e.Name())\n+\t\t} else {\n+\t\t\tt.Errorf(\"%q INVALID\", e.Name())\n+\t\t}\n+\t\treturn nil\n+\t})\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n }\n \n func TestReadFileProc(t *testing.T) {"}, {"sha": "1d145dadb0870dea710871a360d68125d37cd5c7", "filename": "libgo/go/os/readfrom_linux_test.go", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Freadfrom_linux_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fos%2Freadfrom_linux_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Freadfrom_linux_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -361,3 +361,35 @@ func (h *copyFileRangeHook) install() {\n func (h *copyFileRangeHook) uninstall() {\n \t*PollCopyFileRangeP = h.original\n }\n+\n+// On some kernels copy_file_range fails on files in /proc.\n+func TestProcCopy(t *testing.T) {\n+\tconst cmdlineFile = \"/proc/self/cmdline\"\n+\tcmdline, err := os.ReadFile(cmdlineFile)\n+\tif err != nil {\n+\t\tt.Skipf(\"can't read /proc file: %v\", err)\n+\t}\n+\tin, err := os.Open(cmdlineFile)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer in.Close()\n+\toutFile := filepath.Join(t.TempDir(), \"cmdline\")\n+\tout, err := os.Create(outFile)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif _, err := io.Copy(out, in); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif err := out.Close(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tcopy, err := os.ReadFile(outFile)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif !bytes.Equal(cmdline, copy) {\n+\t\tt.Errorf(\"copy of %q got %q want %q\\n\", cmdlineFile, copy, cmdline)\n+\t}\n+}"}, {"sha": "da4910d341cbcf861059f292eb4576a8e762e75a", "filename": "libgo/go/runtime/histogram.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fhistogram.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fhistogram.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhistogram.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -26,7 +26,7 @@ const (\n \t// The number of super-buckets (timeHistNumSuperBuckets), on the\n \t// other hand, defines the range. To reserve room for sub-buckets,\n \t// bit timeHistSubBucketBits is the first bit considered for\n-\t// super-buckets, so super-bucket indicies are adjusted accordingly.\n+\t// super-buckets, so super-bucket indices are adjusted accordingly.\n \t//\n \t// As an example, consider 45 super-buckets with 16 sub-buckets.\n \t//"}, {"sha": "7f790afc12eeabcdda78f0d01a0d83003155d18a", "filename": "libgo/go/runtime/metrics/doc.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmetrics%2Fdoc.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -16,13 +16,12 @@ Interface\n Metrics are designated by a string key, rather than, for example, a field name in\n a struct. The full list of supported metrics is always available in the slice of\n Descriptions returned by All. Each Description also includes useful information\n-about the metric, such as how to display it (e.g. gauge vs. counter) and how difficult\n-or disruptive it is to obtain it (e.g. do you need to stop the world?).\n+about the metric.\n \n Thus, users of this API are encouraged to sample supported metrics defined by the\n slice returned by All to remain compatible across Go versions. Of course, situations\n arise where reading specific metrics is critical. For these cases, users are\n-encouranged to use build tags, and although metrics may be deprecated and removed,\n+encouraged to use build tags, and although metrics may be deprecated and removed,\n users should consider this to be an exceptional and rare event, coinciding with a\n very large change in a particular Go implementation.\n "}, {"sha": "624d9d8a6bd1ec9d09c00172866b741efbd7470f", "filename": "libgo/go/runtime/metrics/example_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmetrics%2Fexample_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -88,7 +88,7 @@ func medianBucket(h *metrics.Float64Histogram) float64 {\n \ttotal = 0\n \tfor i, count := range h.Counts {\n \t\ttotal += count\n-\t\tif total > thresh {\n+\t\tif total >= thresh {\n \t\t\treturn h.Buckets[i]\n \t\t}\n \t}"}, {"sha": "4cf8cdf79942820e6f0acf6b20adc71144fcd95a", "filename": "libgo/go/runtime/metrics/sample.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fsample.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fsample.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmetrics%2Fsample.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -14,7 +14,7 @@ type Sample struct {\n \t// Name is the name of the metric sampled.\n \t//\n \t// It must correspond to a name in one of the metric descriptions\n-\t// returned by Descriptions.\n+\t// returned by All.\n \tName string\n \n \t// Value is the value of the metric sample.\n@@ -32,9 +32,9 @@ func runtime_readMetrics(unsafe.Pointer, int, int)\n //\n // Note that re-use has some caveats. Notably, Values should not be read or\n // manipulated while a Read with that value is outstanding; that is a data race.\n-// This property includes pointer-typed Values (e.g. Float64Histogram) whose\n-// underlying storage will be reused by Read when possible. To safely use such\n-// values in a concurrent setting, all data must be deep-copied.\n+// This property includes pointer-typed Values (for example, Float64Histogram)\n+// whose underlying storage will be reused by Read when possible. To safely use\n+// such values in a concurrent setting, all data must be deep-copied.\n //\n // It is safe to execute multiple Read calls concurrently, but their arguments\n // must share no underlying memory. When in doubt, create a new []Sample from"}, {"sha": "ed9a33d87cc64e126f68f165e20411aa7cd7a813", "filename": "libgo/go/runtime/metrics/value.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fmetrics%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmetrics%2Fvalue.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -33,7 +33,7 @@ type Value struct {\n \tpointer unsafe.Pointer // contains non-scalar values.\n }\n \n-// Kind returns the a tag representing the kind of value this is.\n+// Kind returns the tag representing the kind of value this is.\n func (v Value) Kind() ValueKind {\n \treturn v.kind\n }"}, {"sha": "6d20c38433085ae7a3966ed9ef336f446cfc3424", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -89,7 +89,15 @@ func badsystemstack() {\n // *ptr is uninitialized memory (e.g., memory that's being reused\n // for a new allocation) and hence contains only \"junk\".\n //\n+// memclrNoHeapPointers ensures that if ptr is pointer-aligned, and n\n+// is a multiple of the pointer size, then any pointer-aligned,\n+// pointer-sized portion is cleared atomically. Despite the function\n+// name, this is necessary because this function is the underlying\n+// implementation of typedmemclr and memclrHasPointers. See the doc of\n+// memmove for more details.\n+//\n // The (CPU-specific) implementations of this function are in memclr_*.s.\n+//\n //go:noescape\n func memclrNoHeapPointers(ptr unsafe.Pointer, n uintptr)\n "}, {"sha": "8fc8acaaf3bf1bb88fda7138002f5678a8266178", "filename": "libgo/go/testing/fstest/testfs.go", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -403,22 +403,33 @@ func (t *fsTester) checkStat(path string, entry fs.DirEntry) {\n \t\treturn\n \t}\n \tfentry := formatEntry(entry)\n-\tfinfo := formatInfoEntry(info)\n-\tif fentry != finfo {\n-\t\tt.errorf(\"%s: mismatch:\\n\\tentry = %s\\n\\tfile.Stat() = %s\", path, fentry, finfo)\n+\tfientry := formatInfoEntry(info)\n+\t// Note: mismatch here is OK for symlink, because Open dereferences symlink.\n+\tif fentry != fientry && entry.Type()&fs.ModeSymlink == 0 {\n+\t\tt.errorf(\"%s: mismatch:\\n\\tentry = %s\\n\\tfile.Stat() = %s\", path, fentry, fientry)\n \t}\n \n \teinfo, err := entry.Info()\n \tif err != nil {\n \t\tt.errorf(\"%s: entry.Info: %v\", path, err)\n \t\treturn\n \t}\n-\tfentry = formatInfo(einfo)\n-\tfinfo = formatInfo(info)\n-\tif fentry != finfo {\n-\t\tt.errorf(\"%s: mismatch:\\n\\tentry.Info() = %s\\n\\tfile.Stat() = %s\\n\", path, fentry, finfo)\n+\tfinfo := formatInfo(info)\n+\tif entry.Type()&fs.ModeSymlink != 0 {\n+\t\t// For symlink, just check that entry.Info matches entry on common fields.\n+\t\t// Open deferences symlink, so info itself may differ.\n+\t\tfeentry := formatInfoEntry(einfo)\n+\t\tif fentry != feentry {\n+\t\t\tt.errorf(\"%s: mismatch\\n\\tentry = %s\\n\\tentry.Info() = %s\\n\", path, fentry, feentry)\n+\t\t}\n+\t} else {\n+\t\tfeinfo := formatInfo(einfo)\n+\t\tif feinfo != finfo {\n+\t\t\tt.errorf(\"%s: mismatch:\\n\\tentry.Info() = %s\\n\\tfile.Stat() = %s\\n\", path, feinfo, finfo)\n+\t\t}\n \t}\n \n+\t// Stat should be the same as Open+Stat, even for symlinks.\n \tinfo2, err := fs.Stat(t.fsys, path)\n \tif err != nil {\n \t\tt.errorf(\"%s: fs.Stat: %v\", path, err)"}, {"sha": "5b8813c3431339fb98ea9e2ecacf188103550770", "filename": "libgo/go/testing/fstest/testfs_test.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ffstest%2Ftestfs_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package fstest\n+\n+import (\n+\t\"internal/testenv\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+)\n+\n+func TestSymlink(t *testing.T) {\n+\ttestenv.MustHaveSymlink(t)\n+\n+\ttmp := t.TempDir()\n+\ttmpfs := os.DirFS(tmp)\n+\n+\tif err := os.WriteFile(filepath.Join(tmp, \"hello\"), []byte(\"hello, world\\n\"), 0644); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := os.Symlink(filepath.Join(tmp, \"hello\"), filepath.Join(tmp, \"hello.link\")); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := TestFS(tmpfs, \"hello\", \"hello.link\"); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}"}, {"sha": "f52391c6f6c6ab1750fce523ad87606f25a5c708", "filename": "libgo/misc/cgo/testshared/shared_test.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Fshared_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Fshared_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestshared%2Fshared_test.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -1063,3 +1063,11 @@ func TestGCData(t *testing.T) {\n \tgoCmd(t, \"build\", \"-linkshared\", \"./gcdata/main\")\n \trunWithEnv(t, \"running gcdata/main\", []string{\"GODEBUG=clobberfree=1\"}, \"./main\")\n }\n+\n+// Test that we don't decode type symbols from shared libraries (which has no data,\n+// causing panic). See issue 44031.\n+func TestIssue44031(t *testing.T) {\n+\tgoCmd(t, \"install\", \"-buildmode=shared\", \"-linkshared\", \"./issue44031/a\")\n+\tgoCmd(t, \"install\", \"-buildmode=shared\", \"-linkshared\", \"./issue44031/b\")\n+\tgoCmd(t, \"run\", \"-linkshared\", \"./issue44031/main\")\n+}"}, {"sha": "48827e682fb60e29eb13a333daf9da9360eb6090", "filename": "libgo/misc/cgo/testshared/testdata/issue44031/a/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fa%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fa%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fa%2Fa.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type ATypeWithALoooooongName interface { // a long name, so the type descriptor symbol name is mangled\n+\tM()\n+}"}, {"sha": "ad3ebec2b988a2c8287cd35412be0e89d4cd7051", "filename": "libgo/misc/cgo/testshared/testdata/issue44031/b/b.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fb%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fb%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fb%2Fb.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"testshared/issue44031/a\"\n+\n+type T int\n+\n+func (T) M() {}\n+\n+var i = a.ATypeWithALoooooongName(T(0))\n+\n+func F() {\n+\ti.M()\n+}"}, {"sha": "47f2e3a98e8f61ba1a09682b00f37def4e55302c", "filename": "libgo/misc/cgo/testshared/testdata/issue44031/main/main.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fmain%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fmain%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestshared%2Ftestdata%2Fissue44031%2Fmain%2Fmain.go?ref=13e6fadd96dc00c611a3d2f26a1a6d7a0a29ea27", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"testshared/issue44031/b\"\n+\n+type t int\n+\n+func (t) m() {}\n+\n+type i interface{ m() } // test that unexported method is correctly marked\n+\n+var v interface{} = t(0)\n+\n+func main() {\n+\tb.F()\n+\tv.(i).m()\n+}"}]}