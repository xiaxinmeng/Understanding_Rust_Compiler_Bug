{"sha": "338e513351c03cf66197e8316a69d5459e52f9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4ZTUxMzM1MWMwM2NmNjYxOTdlODMxNmE2OWQ1NDU5ZTUyZjllZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-23T14:42:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-15T11:41:55Z"}, "message": "[Ada] Implement tiered support for floating-point input operations\n\ngcc/ada/\n\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Remove s-fatsfl$(objext)\n\tand add s-valflt$(objext), s-vallfl$(objext), s-valllf$(objext).\n\t* exp_attr.adb (Find_Fat_Info): Merge Short_Float and Float cases.\n\t* exp_imgv.adb (Expand_Value_Attribute): Replace RE_Value_Real with\n\tRE_Value_Long_Long_Float for fixed-point types and use appropriate\n\tbase type for floating-point types.\n\t* rtsfind.ads (RTU_Id): Remove System_Fat_IEEE_Long_Float,\n\tSystem_Fat_IEEE_Short_Float and System_Val_Real, add System_Val_Flt,\n\tSystem_Val_LFlt and System_Val_LLF.\n\t(RE_Id): Remove RE_Attr_IEEE_Long, RE_Fat_IEEE_Long,\n\tRE_Attr_IEEE_Short, RE_Fat_IEEE_Short, RE_Attr_Short_Float, add\n\tRE_Value_Float, RE_Value_Long_Float, RE_Value_Long_Long_Float,\n\t(RE_Unit_Table): Likewise.\n\t* libgnat/a-ticoau.ads: Add with clause for Float_Aux and make the\n\tpackage generic.\n\t(Get): Change parameter types to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-ticoau.adb: Remove clause and renaming for Float_Aux.\n\t(Get): Change parameter types to Num.\n\t(Gets): Likewise.\n\t(Put): Likewise.\n\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n\t* libgnat/a-ticoio.adb: Remove with clause for Ada.Text_IO, add with\n\tclause for Float_Aux, add with and use clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux and\n\tComplex_Aux on Float, Long_Float, and Long_Long_Float.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.\n\t(Get): Call appropriate Gets routine from auxiliary package.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-tideau.adb: Remove with and use clause for Float_Aux.\n\t* libgnat/a-tifiau.adb: Likewise.\n\t* libgnat/a-tifiio.adb: Add with and use clause for System.Val_LLF.\n\tInstantiate Float_Aux on Long_Long_Float.\n\t(Get): Adjust call to Get routine from auxiliary package.\n\t(Get): Adjust call to Gets routine from auxiliary package.\n\t(Put): Adjust call to Put routine from auxiliary package.\n\t(Put): Adjust call to Puts routine from auxiliary package.\n\t* libgnat/a-tifiio__128.adb: Likewise.\n\t(Get): Likewise.\n\t(Get): Likewise.\n\t(Put): Likewise.\n\t(Put): Likewise.\n\t* libgnat/a-tiflau.ads: Make the package generic.\n\t(Get): Change parameter type to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-tiflau.adb: Remove clauses for System.Val_Real.\n\t(Get): Change parameter type to Num and call Scan routine.\n\t(Gets): Likewise.\n\t(Load_Real): Move to...\n\t(Put): Change parameter type and add conversion to Long_Long_Float.\n\t(Puts): Likewise.\n\t* libgnat/a-tiflio.adb: Add with and use clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n\tLong_Float and Long_Long_Float.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.\n\t(Get): Call previous variant.\n\t(Get): Call appropriate Gets routine from auxiliary package.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call previous variant.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-tigeau.ads (Load_Real): New procedure.\n\t* libgnat/a-tigeau.adb (Load_Real): ...here.\n\t* libgnat/a-wtcoau.ads: Add with clause for Float_Aux and make the\n\tpackage generic.\n\t(Get): Change parameter types to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-wtcoau.adb: Remove clause and renaming for Float_Aux.\n\t(Get): Change parameter types to Num.\n\t(Gets): Likewise.\n\t(Put): Likewise.\n\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n\t* libgnat/a-wtcoio.ads: Remove use clause for Complex_Types and use\n\tqualified names throughout accordingly.\n\t* libgnat/a-wtcoio.adb: Remove clause for Ada.Unchecked_Conversion,\n\tadd with clause for Float_Aux, add clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Add clause for Complex_Types.\n\tInstantiate Float_Aux and Complex_Aux on Float, Long_Float, and\n\tLong_Long_Float.  Remove LLF subtype and TFT instantiation.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.\n\t(Get): Call appropriate Gets routine from auxiliary package.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-wtdeau.adb: Remove with and use clause for Float_Aux.\n\t* libgnat/a-wtfiau.adb: Likewise.\n\t* libgnat/a-wtfiio.adb: Add with and use clause for System.Val_LLF.\n\tInstantiate Float_Aux on Long_Long_Float.\n\t(Get): Adjust call to Get routine from auxiliary package.\n\t(Get): Adjust call to Gets routine from auxiliary package.\n\t(Put): Adjust call to Put routine from auxiliary package.\n\t(Put): Adjust call to Puts routine from auxiliary package.\n\t* libgnat/a-wtfiio__128.adb: Likewise.\n\t(Get): Likewise.\n\t(Get): Likewise.\n\t(Put): Likewise.\n\t(Put): Likewise.\n\t* libgnat/a-wtflau.ads: Make the package generic.\n\t(Get): Change parameter type to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-wtflau.adb: Remove clauses for System.Val_Real.\n\t(Get): Change parameter type to Num and call Scan routine. Set\n\tPtr parameter lazily.\n\t(Gets): Likewise.\n\t(Load_Real): Move to...\n\t(Put): Change parameter type and add conversion to Long_Long_Float.\n\tBump buffer length to Max_Real_Image_Length.\n\t(Puts): Likewise.\n\t* libgnat/a-wtflio.adb: Add with and use clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n\tLong_Float and Long_Long_Float.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.  Add\n\tpragma Unsuppress (Range_Check) and manual validity check.\n\t(Get): Call appropriate Gets routine from auxiliary package. Add\n\tpragma Unsuppress (Range_Check) and manual validity check.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-wtgeau.ads (Load_Real): New procedure.\n\t* libgnat/a-wtgeau.adb (Load_Real): ...here.\n\t* libgnat/a-ztcoau.ads: Add with clause for Float_Aux and make the\n\tpackage generic.\n\t(Get): Change parameter types to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-ztcoau.adb: Remove clause and renaming for Float_Aux.\n\t(Get): Change parameter types to Num.\n\t(Gets): Likewise.\n\t(Put): Likewise.\n\t(Puts): Likewise.  Add conversion to Long_Long_Float.\n\t* libgnat/a-ztcoio.ads: Remove use clause for Complex_Types and use\n\tqualified names throughout accordingly.\n\t* libgnat/a-ztcoio.adb: Remove clause for Ada.Unchecked_Conversion,\n\tadd with clause for Float_Aux, add clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Add clause for Complex_Types.\n\tInstantiate Float_Aux and Complex_Aux on Float, Long_Float, and\n\tLong_Long_Float. Remove LLF subtype and TFT instantiation.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.\n\t(Get): Call appropriate Gets routine from auxiliary package.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-ztdeau.adb: Remove with and use clause for Float_Aux.\n\t* libgnat/a-ztfiau.adb: Likewise.\n\t* libgnat/a-ztfiio.adb: Add with and use clause for System.Val_LLF.\n\tInstantiate Float_Aux on Long_Long_Float.\n\t(Get): Adjust call to Get routine from auxiliary package.\n\t(Get): Adjust call to Gets routine from auxiliary package.\n\t(Put): Adjust call to Put routine from auxiliary package.\n\t(Put): Adjust call to Puts routine from auxiliary package.\n\t* libgnat/a-ztfiio__128.adb: Likewise.\n\t(Get): Likewise.\n\t(Get): Likewise.\n\t(Put): Likewise.\n\t(Put): Likewise.\n\t* libgnat/a-ztflau.ads: Make the package generic.\n\t(Get): Change parameter type to Num.\n\t(Put): Likewise.\n\t(Gets): Likewise.\n\t(Puts): Likewise.\n\t* libgnat/a-ztflau.adb: Remove clauses for System.Val_Real.\n\t(Get): Change parameter type to Num and call Scan routine. Set\n\tPtr parameter lazily.\n\t(Gets): Likewise.\n\t(Load_Real): Move to...\n\t(Put): Change parameter type and add conversion to Long_Long_Float.\n\tBump buffer length to Max_Real_Image_Length.\n\t(Puts): Likewise.\n\t* libgnat/a-ztflio.adb: Add with and use clauses for System.Val_Flt,\n\tSystem.Val_LFlt and System.Val_LLF. Instantiate Float_Aux on Float,\n\tLong_Float and Long_Long_Float.\n\t(OK_Float): New boolean constant.\n\t(OK_Long_Float): Likewise.\n\t(Get): Call appropriate Get routine from auxiliary package.  Add\n\tpragma Unsuppress (Range_Check) and manual validity check.\n\t(Get): Call appropriate Gets routine from auxiliary package. Add\n\tpragma Unsuppress (Range_Check) and manual validity check.\n\t(Put): Call appropriate Put routine from auxiliary package.\n\t(Put): Call appropriate Puts routine from auxiliary package.\n\t* libgnat/a-ztgeau.ads (Load_Real): New procedure.\n\t* libgnat/a-ztgeau.adb (Load_Real): ...here.\n\t* libgnat/s-fatsfl.ads: Delete.\n\t* libgnat/s-valflt.ads: New package.\n\t* libgnat/s-vallfl.ads: Likewise.\n\t* libgnat/s-valllf.ads: Likewise.\n\t* libgnat/s-valrea.ads: Make generic. Add assertions, defensive\n\tcode and clarify intent.\n\t(Scan_Real): Change parameter type to Num.\n\t(Value_Real): Likewise.\n\t* libgnat/s-valrea.adb: Instantiate Value_R on Uns.\n\t(Integer_to_Real): Change parameter and result to Num.\n\tCall Float_Control.Reset only if the mantissa is 64 bits.  Use\n\ta divide to compute the final value if the scale is negative.\n\t(Scan_Real): Change result to Num.\n\t(Value_Real): Likewise.\n\t* libgnat/s-valuer.adb: Add assertions, defensive code and\n\tclarify intent.\n\t(F_Limit): Delete.\n\t(I_Limit): Likewise.\n\t(Precision_Limit): Always use the integer limit.\n\t* libgnat/s-fatgen.adb: Add pragma Annotate.", "tree": {"sha": "d56e4d2c3b0c545ac06e13a3fa443ac2d4e4418a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56e4d2c3b0c545ac06e13a3fa443ac2d4e4418a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338e513351c03cf66197e8316a69d5459e52f9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338e513351c03cf66197e8316a69d5459e52f9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338e513351c03cf66197e8316a69d5459e52f9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338e513351c03cf66197e8316a69d5459e52f9ed/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1851d3cef24d4cbc3b55305c75c04a2ce9667315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1851d3cef24d4cbc3b55305c75c04a2ce9667315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1851d3cef24d4cbc3b55305c75c04a2ce9667315"}], "stats": {"total": 1971, "additions": 1265, "deletions": 706}, "files": [{"sha": "8c99258f7b828fff2c398f8d5902a31356da695f", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -596,7 +596,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-fatgen$(objext) \\\n   s-fatlfl$(objext) \\\n   s-fatllf$(objext) \\\n-  s-fatsfl$(objext) \\\n   s-ficobl$(objext) \\\n   s-filatt$(objext) \\\n   s-fileio$(objext) \\\n@@ -756,7 +755,10 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-vafi32$(objext) \\\n   s-vafi64$(objext) \\\n   s-valenu$(objext) \\\n+  s-valflt$(objext) \\\n   s-valint$(objext) \\\n+  s-vallfl$(objext) \\\n+  s-valllf$(objext) \\\n   s-vallli$(objext) \\\n   s-valllu$(objext) \\\n   s-valrea$(objext) \\"}, {"sha": "7f63a2d88d13924a7a5954027192986fd2fb60a9", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -8311,27 +8311,25 @@ package body Exp_Attr is\n       --  All we do is use the root type (historically this dealt with\n       --  VAX-float .. to be cleaned up further later ???)\n \n-      Fat_Type := Rtyp;\n+      if Rtyp = Standard_Short_Float or else Rtyp = Standard_Float then\n+         Fat_Type := Standard_Float;\n+         Fat_Pkg  := RE_Attr_Float;\n \n-      if Fat_Type = Standard_Short_Float then\n-         Fat_Pkg := RE_Attr_Short_Float;\n+      elsif Rtyp = Standard_Long_Float then\n+         Fat_Type := Standard_Long_Float;\n+         Fat_Pkg  := RE_Attr_Long_Float;\n \n-      elsif Fat_Type = Standard_Float then\n-         Fat_Pkg := RE_Attr_Float;\n-\n-      elsif Fat_Type = Standard_Long_Float then\n-         Fat_Pkg := RE_Attr_Long_Float;\n-\n-      elsif Fat_Type = Standard_Long_Long_Float then\n-         Fat_Pkg := RE_Attr_Long_Long_Float;\n+      elsif Rtyp = Standard_Long_Long_Float then\n+         Fat_Type := Standard_Long_Long_Float;\n+         Fat_Pkg  := RE_Attr_Long_Long_Float;\n \n          --  Universal real (which is its own root type) is treated as being\n          --  equivalent to Standard.Long_Long_Float, since it is defined to\n          --  have the same precision as the longest Float type.\n \n-      elsif Fat_Type = Universal_Real then\n+      elsif Rtyp = Universal_Real then\n          Fat_Type := Standard_Long_Long_Float;\n-         Fat_Pkg := RE_Attr_Long_Long_Float;\n+         Fat_Pkg  := RE_Attr_Long_Long_Float;\n \n       else\n          raise Program_Error;"}, {"sha": "3faa90f1216af9efc09fb676c08e4ddefdbde709", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -1008,10 +1008,10 @@ package body Exp_Imgv is\n             then\n                Vid := RE_Value_Fixed128;\n             else\n-               Vid := RE_Value_Real;\n+               Vid := RE_Value_Long_Long_Float;\n             end if;\n \n-            if Vid /= RE_Value_Real then\n+            if Vid /= RE_Value_Long_Long_Float then\n                Append_To (Args,\n                  Make_Integer_Literal (Loc, -Norm_Num (Small_Value (Rtyp))));\n \n@@ -1031,7 +1031,18 @@ package body Exp_Imgv is\n          end;\n \n       elsif Is_Floating_Point_Type (Rtyp) then\n-         Vid := RE_Value_Real;\n+         if Rtyp = Standard_Short_Float or else Rtyp = Standard_Float then\n+            Vid := RE_Value_Float;\n+\n+         elsif Rtyp = Standard_Long_Float then\n+            Vid := RE_Value_Long_Float;\n+\n+         elsif Rtyp = Standard_Long_Long_Float then\n+            Vid := RE_Value_Long_Long_Float;\n+\n+         else\n+            raise Program_Error;\n+         end if;\n \n       --  Only other possibility is user-defined enumeration type\n "}, {"sha": "cf9430582d5f18245694ee479cfc9b04bb9469a8", "filename": "gcc/ada/libgnat/a-ticoau.adb", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ticoau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,22 +30,19 @@\n ------------------------------------------------------------------------------\n \n with Ada.Text_IO.Generic_Aux; use Ada.Text_IO.Generic_Aux;\n-with Ada.Text_IO.Float_Aux;\n \n with System.Img_Real; use System.Img_Real;\n \n package body Ada.Text_IO.Complex_Aux is\n \n-   package Aux renames Ada.Text_IO.Float_Aux;\n-\n    ---------\n    -- Get --\n    ---------\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field)\n    is\n       Buf   : String (1 .. Field'Last);\n@@ -95,8 +92,8 @@ package body Ada.Text_IO.Complex_Aux is\n \n    procedure Gets\n      (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Last  : out Positive)\n    is\n       Paren : Boolean;\n@@ -139,8 +136,8 @@ package body Ada.Text_IO.Complex_Aux is\n \n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field)\n@@ -159,8 +156,8 @@ package body Ada.Text_IO.Complex_Aux is\n \n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   : Field;\n       Exp   : Field)\n    is\n@@ -174,9 +171,9 @@ package body Ada.Text_IO.Complex_Aux is\n       --  Both parts are initially converted with a Fore of 0\n \n       Rptr := 0;\n-      Set_Image_Real (ItemR, R_String, Rptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemR), R_String, Rptr, 0, Aft, Exp);\n       Iptr := 0;\n-      Set_Image_Real (ItemI, I_String, Iptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemI), I_String, Iptr, 0, Aft, Exp);\n \n       --  Check room for both parts plus parens plus comma (RM G.1.3(34))\n "}, {"sha": "22555cf3faaa14e5f4515526685181300e827bd3", "filename": "gcc/ada/libgnat/a-ticoau.ads", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ticoau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,39 +30,46 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines for Ada.Text_IO.Complex_IO that are\n---  shared among separate instantiations of this package. The routines in\n---  this package are identical semantically to those in Complex_IO itself,\n---  except that the generic parameter Complex has been replaced by separate\n---  real and imaginary values of type Long_Long_Float, and default parameters\n---  have been removed because they are supplied explicitly by the calls from\n---  within the generic template.\n+--  shared among separate instantiations of this package. The routines in this\n+--  package are identical semantically to those in Complex_IO, except that the\n+--  generic parameter Complex has been replaced by separate real and imaginary\n+--  parameters, and default parameters have been removed because they are\n+--  supplied explicitly by the calls from within the generic template.\n+\n+with Ada.Text_IO.Float_Aux;\n+\n+private generic\n+\n+   type Num is digits <>;\n+\n+   with package Aux is new Ada.Text_IO.Float_Aux (Num, <>);\n \n package Ada.Text_IO.Complex_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field);\n \n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field);\n \n    procedure Gets\n      (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Last  : out Positive);\n \n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   : Field;\n       Exp   : Field);\n "}, {"sha": "e35a745e3fd4f4d8e0f318e6b6c54a8faa9518c4", "filename": "gcc/ada/libgnat/a-ticoio.adb", "status": "modified", "additions": 79, "deletions": 15, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ticoio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ticoio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -29,33 +29,67 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Text_IO;\n-\n with Ada.Text_IO.Complex_Aux;\n+with Ada.Text_IO.Float_Aux;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n \n package body Ada.Text_IO.Complex_IO is\n \n    use Complex_Types;\n \n-   package Aux renames Ada.Text_IO.Complex_Aux;\n+   package Scalar_Float is new\n+      Ada.Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Scalar_Long_Float is new\n+      Ada.Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Scalar_Long_Long_Float is new\n+      Ada.Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   package Aux_Float is new\n+      Ada.Text_IO.Complex_Aux (Float, Scalar_Float);\n+\n+   package Aux_Long_Float is new\n+      Ada.Text_IO.Complex_Aux (Long_Float, Scalar_Long_Float);\n \n-   subtype LLF is Long_Long_Float;\n-   --  Type used for calls to routines in Aux\n+   package Aux_Long_Long_Float is new\n+      Ada.Text_IO.Complex_Aux (Long_Long_Float, Scalar_Long_Long_Float);\n+\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Real'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Real'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n    ---------\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Complex_Types.Complex;\n+      Item  : out Complex;\n       Width : Field := 0)\n    is\n       Real_Item : Real'Base;\n       Imag_Item : Real'Base;\n \n    begin\n-      Aux.Get (File, LLF (Real_Item), LLF (Imag_Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Real_Item), Float (Imag_Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get\n+           (File, Long_Float (Real_Item), Long_Float (Imag_Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get\n+           (File, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Width);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -67,7 +101,7 @@ package body Ada.Text_IO.Complex_IO is\n    ---------\n \n    procedure Get\n-     (Item  : out Complex_Types.Complex;\n+     (Item  : out Complex;\n       Width : Field := 0)\n    is\n    begin\n@@ -80,14 +114,24 @@ package body Ada.Text_IO.Complex_IO is\n \n    procedure Get\n      (From : String;\n-      Item : out Complex_Types.Complex;\n+      Item : out Complex;\n       Last : out Positive)\n    is\n       Real_Item : Real'Base;\n       Imag_Item : Real'Base;\n \n    begin\n-      Aux.Gets (From, LLF (Real_Item), LLF (Imag_Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (From, Float (Real_Item), Float (Imag_Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets\n+           (From, Long_Float (Real_Item), Long_Float (Imag_Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets\n+           (From, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Last);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -100,21 +144,32 @@ package body Ada.Text_IO.Complex_IO is\n \n    procedure Put\n      (File : File_Type;\n-      Item : Complex_Types.Complex;\n+      Item : Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (File, LLF (Re (Item)), LLF (Im (Item)), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put\n+           (File, Float (Re (Item)), Float (Im (Item)), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put\n+           (File, Long_Float (Re (Item)), Long_Float (Im (Item)), Fore, Aft,\n+            Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    ---------\n    -- Put --\n    ---------\n \n    procedure Put\n-     (Item : Complex_Types.Complex;\n+     (Item : Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n@@ -129,12 +184,21 @@ package body Ada.Text_IO.Complex_IO is\n \n    procedure Put\n      (To   : out String;\n-      Item : Complex_Types.Complex;\n+      Item : Complex;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Puts (To, LLF (Re (Item)), LLF (Im (Item)), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (To, Float (Re (Item)), Float (Im (Item)), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts\n+           (To, Long_Float (Re (Item)), Long_Float (Im (Item)), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts\n+           (To, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Aft, Exp);\n+      end if;\n    end Put;\n \n end Ada.Text_IO.Complex_IO;"}, {"sha": "ac751c13e1abe4e94e843d7e4abbd1c444b871a6", "filename": "gcc/ada/libgnat/a-tideau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tideau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tideau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tideau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Text_IO.Generic_Aux; use Ada.Text_IO.Generic_Aux;\n-with Ada.Text_IO.Float_Aux;   use Ada.Text_IO.Float_Aux;\n \n package body Ada.Text_IO.Decimal_Aux is\n "}, {"sha": "c6f4430e7cbef9862dee6f483169eda692fa4b6a", "filename": "gcc/ada/libgnat/a-tifiau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Text_IO.Generic_Aux; use Ada.Text_IO.Generic_Aux;\n-with Ada.Text_IO.Float_Aux;   use Ada.Text_IO.Float_Aux;\n \n package body Ada.Text_IO.Fixed_Aux is\n "}, {"sha": "0d9f6a55090f9dc4d4714d5d42e5bd3b7162c8a6", "filename": "gcc/ada/libgnat/a-tifiio.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -160,6 +160,7 @@ with System.Img_Fixed_32; use System.Img_Fixed_32;\n with System.Img_Fixed_64; use System.Img_Fixed_64;\n with System.Val_Fixed_32; use System.Val_Fixed_32;\n with System.Val_Fixed_64; use System.Val_Fixed_64;\n+with System.Val_LLF;      use System.Val_LLF;\n \n package body Ada.Text_IO.Fixed_IO is\n \n@@ -177,6 +178,9 @@ package body Ada.Text_IO.Fixed_IO is\n    package Aux64 is new\n      Ada.Text_IO.Fixed_Aux (Int64, Scan_Fixed64, Set_Image_Fixed64);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK and where type Int64 is OK. These boolean constants are used\n    --  to test for this, such that only code for the relevant case is included\n@@ -279,7 +283,7 @@ package body Ada.Text_IO.Fixed_IO is\n                                -Num'Small_Numerator,\n                                -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -313,7 +317,7 @@ package body Ada.Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (From, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (From, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -341,7 +345,8 @@ package body Ada.Text_IO.Fixed_IO is\n                     -Num'Small_Numerator, -Num'Small_Denominator,\n                     For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -371,7 +376,7 @@ package body Ada.Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Puts (To, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (To, Long_Long_Float (Item), Aft, Exp);\n       end if;\n    end Put;\n "}, {"sha": "ba96bd83f25ceaf4d2983bbc24273dc2d41a6942", "filename": "gcc/ada/libgnat/a-tifiio__128.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiio__128.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tifiio__128.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio__128.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -162,6 +162,7 @@ with System.Img_Fixed_128; use System.Img_Fixed_128;\n with System.Val_Fixed_32;  use System.Val_Fixed_32;\n with System.Val_Fixed_64;  use System.Val_Fixed_64;\n with System.Val_Fixed_128; use System.Val_Fixed_128;\n+with System.Val_LLF;       use System.Val_LLF;\n \n package body Ada.Text_IO.Fixed_IO is\n \n@@ -183,6 +184,9 @@ package body Ada.Text_IO.Fixed_IO is\n    package Aux128 is new\n      Ada.Text_IO.Fixed_Aux (Int128, Scan_Fixed128, Set_Image_Fixed128);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK, where type Int64 is OK and where type Int128 is OK. These\n    --  boolean constants are used to test for this, such that only code for the\n@@ -319,7 +323,7 @@ package body Ada.Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -358,7 +362,7 @@ package body Ada.Text_IO.Fixed_IO is\n                                  -Num'Small_Numerator,\n                                  -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (From, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (From, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -390,7 +394,8 @@ package body Ada.Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -424,7 +429,7 @@ package body Ada.Text_IO.Fixed_IO is\n                       -Num'Small_Numerator, -Num'Small_Denominator,\n                       For0, Num'Aft);\n       else\n-         Float_Aux.Puts (To, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (To, Long_Long_Float (Item), Aft, Exp);\n       end if;\n    end Put;\n "}, {"sha": "4955a992f73fd53c0c7c26dc2d1bae42fad69887", "filename": "gcc/ada/libgnat/a-tiflau.adb", "status": "modified", "additions": 9, "deletions": 109, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiflau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -32,7 +32,6 @@\n with Ada.Text_IO.Generic_Aux; use Ada.Text_IO.Generic_Aux;\n \n with System.Img_Real; use System.Img_Real;\n-with System.Val_Real; use System.Val_Real;\n \n package body Ada.Text_IO.Float_Aux is\n \n@@ -42,7 +41,7 @@ package body Ada.Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field)\n    is\n       Buf  : String (1 .. Field'Last);\n@@ -58,7 +57,7 @@ package body Ada.Text_IO.Float_Aux is\n          Ptr := 1;\n       end if;\n \n-      Item := Scan_Real (Buf, Ptr'Access, Stop);\n+      Item := Scan (Buf, Ptr'Access, Stop);\n       Check_End_Of_Field (Buf, Stop, Ptr, Width);\n    end Get;\n \n@@ -68,127 +67,27 @@ package body Ada.Text_IO.Float_Aux is\n \n    procedure Gets\n      (From : String;\n-      Item : out Long_Long_Float;\n+      Item : out Num;\n       Last : out Positive)\n    is\n       Pos : aliased Integer;\n \n    begin\n       String_Skip (From, Pos);\n-      Item := Scan_Real (From, Pos'Access, From'Last);\n+      Item := Scan (From, Pos'Access, From'Last);\n       Last := Pos - 1;\n \n    exception\n       when Constraint_Error => raise Data_Error;\n    end Gets;\n \n-   ---------------\n-   -- Load_Real --\n-   ---------------\n-\n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural)\n-   is\n-      Loaded   : Boolean;\n-\n-   begin\n-      --  Skip initial blanks, and load possible sign\n-\n-      Load_Skip (File);\n-      Load (File, Buf, Ptr, '+', '-');\n-\n-      --  Case of .nnnn\n-\n-      Load (File, Buf, Ptr, '.', Loaded);\n-\n-      if Loaded then\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-      --  Otherwise must have digits to start\n-\n-      else\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-         --  Based cases. We recognize either the standard '#' or the\n-         --  allowed alternative replacement ':' (see RM J.2(3)).\n-\n-         Load (File, Buf, Ptr, '#', ':', Loaded);\n-\n-         if Loaded then\n-\n-            --  Case of nnn#.xxx#\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '#', ':');\n-\n-            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n-\n-            else\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '.', Loaded);\n-\n-               if Loaded then\n-                  Load_Extended_Digits (File, Buf, Ptr);\n-               end if;\n-\n-               --  As usual, it seems strange to allow mixed base characters,\n-               --  but that is what ACVC tests expect, see CE3804M, case (3).\n-\n-               Load (File, Buf, Ptr, '#', ':');\n-            end if;\n-\n-         --  Case of nnn.[nnn] or nnn\n-\n-         else\n-            --  Prevent the potential processing of '.' in cases where the\n-            --  initial digits have a trailing underscore.\n-\n-            if Buf (Ptr) = '_' then\n-               return;\n-            end if;\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Digits (File, Buf, Ptr);\n-            end if;\n-         end if;\n-      end if;\n-\n-      --  Deal with exponent\n-\n-      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n-\n-      if Loaded then\n-         Load (File, Buf, Ptr, '+', '-');\n-         Load_Digits (File, Buf, Ptr);\n-      end if;\n-   end Load_Real;\n-\n    ---------\n    -- Put --\n    ---------\n \n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field)\n@@ -197,7 +96,7 @@ package body Ada.Text_IO.Float_Aux is\n       Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (Item), Buf, Ptr, Fore, Aft, Exp);\n       Put_Item (File, Buf (1 .. Ptr));\n    end Put;\n \n@@ -207,15 +106,16 @@ package body Ada.Text_IO.Float_Aux is\n \n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field)\n    is\n       Buf : String (1 .. Max_Real_Image_Length);\n       Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n+      Set_Image_Real\n+        (Long_Long_Float (Item), Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n \n       if Ptr > To'Length then\n          raise Layout_Error;"}, {"sha": "2dfe76da97437d69a7b10736eb3f5133c50b9fce", "filename": "gcc/ada/libgnat/a-tiflau.ads", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiflau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -31,41 +31,42 @@\n \n --  This package contains the routines for Ada.Text_IO.Float_IO that are\n --  shared among separate instantiations of this package. The routines in\n---  this package are identical semantically to those in Float_IO itself,\n---  except that generic parameter Num has been replaced by Long_Long_Float,\n---  and the default parameters have been removed because they are supplied\n+--  this package are identical semantically to those in Float_IO, except\n+--  that the default parameters have been removed because they are supplied\n --  explicitly by the calls from within the generic template. This package\n---  is also used by Ada.Text_IO.Fixed_IO, and Ada.Text_IO.Decimal_IO.\n+--  is also used by Ada.Text_IO.Fixed_IO and Ada.Text_IO.Decimal_IO.\n \n-private package Ada.Text_IO.Float_Aux is\n+private generic\n \n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural);\n-   --  This is an auxiliary routine that is used to load a possibly signed\n-   --  real literal value from the input file into Buf, starting at Ptr + 1.\n+   type Num is digits <>;\n+\n+   with function Scan\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Num;\n+\n+package Ada.Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field);\n \n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field);\n \n    procedure Gets\n      (From : String;\n-      Item : out Long_Long_Float;\n+      Item : out Num;\n       Last : out Positive);\n \n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field);\n "}, {"sha": "db1cea2dcd04ea5ffaf05502507f65f48e7c5840", "filename": "gcc/ada/libgnat/a-tiflio.adb", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tiflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiflio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,10 +30,29 @@\n ------------------------------------------------------------------------------\n \n with Ada.Text_IO.Float_Aux;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n \n package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n \n-   package Aux renames Ada.Text_IO.Float_Aux;\n+   package Aux_Float is new\n+      Ada.Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Aux_Long_Float is new\n+      Ada.Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Aux_Long_Long_Float is new\n+      Ada.Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Num'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Num'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n@@ -47,7 +66,13 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n       pragma Unsuppress (Range_Check);\n \n    begin\n-      Aux.Get (File, Long_Long_Float (Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get (File, Long_Float (Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n+      end if;\n \n       --  In the case where the type is unconstrained (e.g. Standard'Float),\n       --  the above conversion may result in an infinite value, which is\n@@ -66,22 +91,8 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n      (Item  : out Num;\n       Width : Field := 0)\n    is\n-      pragma Unsuppress (Range_Check);\n-\n    begin\n-      Aux.Get (Current_In, Long_Long_Float (Item), Width);\n-\n-      --  In the case where the type is unconstrained (e.g. Standard'Float),\n-      --  the above conversion may result in an infinite value, which is\n-      --  normally fine for a conversion, but in this case, we want to treat\n-      --  that as a data error.\n-\n-      if not Item'Valid then\n-         raise Data_Error;\n-      end if;\n-\n-   exception\n-      when Constraint_Error => raise Data_Error;\n+      Get (Current_In, Item, Width);\n    end Get;\n \n    procedure Get\n@@ -92,7 +103,13 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n       pragma Unsuppress (Range_Check);\n \n    begin\n-      Aux.Gets (From, Long_Long_Float (Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (From, Float (Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets (From, Long_Float (Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets (From, Long_Long_Float (Item), Last);\n+      end if;\n \n       --  In the case where the type is unconstrained (e.g. Standard'Float),\n       --  the above conversion may result in an infinite value, which is\n@@ -119,7 +136,14 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put (File, Float (Item), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put (File, Long_Float (Item), Fore, Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    procedure Put\n@@ -129,7 +153,7 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (Current_Out, Long_Long_Float (Item), Fore, Aft, Exp);\n+      Put (Current_Out, Item, Fore, Aft, Exp);\n    end Put;\n \n    procedure Put\n@@ -139,7 +163,13 @@ package body Ada.Text_IO.Float_IO with SPARK_Mode => Off is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Puts (To, Long_Long_Float (Item), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (To, Float (Item), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts (To, Long_Float (Item), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts (To, Long_Long_Float (Item), Aft, Exp);\n+      end if;\n    end Put;\n \n end Ada.Text_IO.Float_IO;"}, {"sha": "5e13dae20ba6f256a42e70d48169b771e4c416cc", "filename": "gcc/ada/libgnat/a-tigeau.adb", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tigeau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tigeau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tigeau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -376,6 +376,106 @@ package body Ada.Text_IO.Generic_Aux is\n       end if;\n    end Load_Integer;\n \n+   ---------------\n+   -- Load_Real --\n+   ---------------\n+\n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural)\n+   is\n+      Loaded   : Boolean;\n+\n+   begin\n+      --  Skip initial blanks, and load possible sign\n+\n+      Load_Skip (File);\n+      Load (File, Buf, Ptr, '+', '-');\n+\n+      --  Case of .nnnn\n+\n+      Load (File, Buf, Ptr, '.', Loaded);\n+\n+      if Loaded then\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+      --  Otherwise must have digits to start\n+\n+      else\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+         --  Based cases. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n+         Load (File, Buf, Ptr, '#', ':', Loaded);\n+\n+         if Loaded then\n+\n+            --  Case of nnn#.xxx#\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '#', ':');\n+\n+            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n+\n+            else\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '.', Loaded);\n+\n+               if Loaded then\n+                  Load_Extended_Digits (File, Buf, Ptr);\n+               end if;\n+\n+               --  As usual, it seems strange to allow mixed base characters,\n+               --  but that is what ACVC tests expect, see CE3804M, case (3).\n+\n+               Load (File, Buf, Ptr, '#', ':');\n+            end if;\n+\n+         --  Case of nnn.[nnn] or nnn\n+\n+         else\n+            --  Prevent the potential processing of '.' in cases where the\n+            --  initial digits have a trailing underscore.\n+\n+            if Buf (Ptr) = '_' then\n+               return;\n+            end if;\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Digits (File, Buf, Ptr);\n+            end if;\n+         end if;\n+      end if;\n+\n+      --  Deal with exponent\n+\n+      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n+\n+      if Loaded then\n+         Load (File, Buf, Ptr, '+', '-');\n+         Load_Digits (File, Buf, Ptr);\n+      end if;\n+   end Load_Real;\n+\n    ---------------\n    -- Load_Skip --\n    ---------------"}, {"sha": "d6acd8db32adfb6f14c22e16cd50ce2202c4f567", "filename": "gcc/ada/libgnat/a-tigeau.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tigeau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-tigeau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tigeau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -156,6 +156,12 @@ private package Ada.Text_IO.Generic_Aux is\n       Ptr  : in out Natural);\n    --  Loads a possibly signed integer literal value\n \n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural);\n+   --  Loads a possibly signed real literal value\n+\n    function Nextc (File : File_Type) return Integer;\n    --  Like Getc, but includes a call to Ungetc, so that the file\n    --  pointer is not moved by the call."}, {"sha": "05a6d9d1ebc04a10bc12819f977fedc3eb475abe", "filename": "gcc/ada/libgnat/a-wtcoau.adb", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtcoau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,22 +30,19 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Generic_Aux; use Ada.Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Text_IO.Float_Aux;\n \n with System.Img_Real; use System.Img_Real;\n \n package body Ada.Wide_Text_IO.Complex_Aux is\n \n-   package Aux renames Ada.Wide_Text_IO.Float_Aux;\n-\n    ---------\n    -- Get --\n    ---------\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field)\n    is\n       Buf   : String (1 .. Field'Last);\n@@ -95,8 +92,8 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n \n    procedure Gets\n      (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Last  : out Positive)\n    is\n       Paren : Boolean;\n@@ -139,8 +136,8 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n \n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field)\n@@ -159,8 +156,8 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n \n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   :  Field;\n       Exp   :  Field)\n    is\n@@ -174,9 +171,9 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n       --  Both parts are initially converted with a Fore of 0\n \n       Rptr := 0;\n-      Set_Image_Real (ItemR, R_String, Rptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemR), R_String, Rptr, 0, Aft, Exp);\n       Iptr := 0;\n-      Set_Image_Real (ItemI, I_String, Iptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemI), I_String, Iptr, 0, Aft, Exp);\n \n       --  Check room for both parts plus parens plus comma (RM G.1.3(34))\n "}, {"sha": "affb969548a58a8316f349c99b6a24684e87bf73", "filename": "gcc/ada/libgnat/a-wtcoau.ads", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtcoau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -29,40 +29,47 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the routines for Ada.Wide_Text_IO.Complex_IO that\n---  are shared among separate instantiations of this package. The routines\n---  in this package are identical semantically to those in Complex_IO itself,\n---  except that the generic parameter Complex has been replaced by separate\n---  real and imaginary values of type Long_Long_Float, and default parameters\n---  have been removed because they are supplied explicitly by the calls from\n---  within the generic template.\n+--  This package contains the routines for Ada.Wide_Text_IO.Complex_IO that are\n+--  shared among separate instantiations of this package. The routines in this\n+--  package are identical semantically to those in Complex_IO, except that the\n+--  generic parameter Complex has been replaced by separate real and imaginary\n+--  parameters, and default parameters have been removed because they are\n+--  supplied explicitly by the calls from within the generic template.\n+\n+with Ada.Wide_Text_IO.Float_Aux;\n+\n+private generic\n+\n+   type Num is digits <>;\n+\n+   with package Aux is new Ada.Wide_Text_IO.Float_Aux (Num, <>);\n \n package Ada.Wide_Text_IO.Complex_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field);\n \n-   procedure Gets\n-     (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n-      Last  : out Positive);\n-\n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field);\n \n+   procedure Gets\n+     (From  : String;\n+      ItemR : out Num;\n+      ItemI : out Num;\n+      Last  : out Positive);\n+\n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   : Field;\n       Exp   : Field);\n "}, {"sha": "8e9ff7af385624f5605678ac080b86c456889d93", "filename": "gcc/ada/libgnat/a-wtcoio.adb", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtcoio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,24 +30,43 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Complex_Aux;\n+with Ada.Wide_Text_IO.Float_Aux;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n+with System.WCh_Con;  use System.WCh_Con;\n+with System.WCh_WtS;  use System.WCh_WtS;\n \n-with System.WCh_Con; use System.WCh_Con;\n-with System.WCh_WtS; use System.WCh_WtS;\n+package body Ada.Wide_Text_IO.Complex_IO is\n \n-with Ada.Unchecked_Conversion;\n+   use Complex_Types;\n \n-package body Ada.Wide_Text_IO.Complex_IO is\n+   package Scalar_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Scalar_Long_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Scalar_Long_Long_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   package Aux_Float is new\n+      Ada.Wide_Text_IO.Complex_Aux (Float, Scalar_Float);\n \n-   package Aux renames Ada.Wide_Text_IO.Complex_Aux;\n+   package Aux_Long_Float is new\n+      Ada.Wide_Text_IO.Complex_Aux (Long_Float, Scalar_Long_Float);\n \n-   subtype LLF is Long_Long_Float;\n-   --  Type used for calls to routines in Aux\n+   package Aux_Long_Long_Float is new\n+      Ada.Wide_Text_IO.Complex_Aux (Long_Long_Float, Scalar_Long_Long_Float);\n \n-   function TFT is new\n-     Ada.Unchecked_Conversion (File_Type, Ada.Wide_Text_IO.File_Type);\n-   --  This unchecked conversion is to get around a visibility bug in\n-   --  GNAT version 2.04w. It should be possible to simply use the\n-   --  subtype declared above and do normal checked conversions.\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Real'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Real'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n@@ -62,7 +81,17 @@ package body Ada.Wide_Text_IO.Complex_IO is\n       Imag_Item : Real'Base;\n \n    begin\n-      Aux.Get (TFT (File), LLF (Real_Item), LLF (Imag_Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Real_Item), Float (Imag_Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get\n+           (File, Long_Float (Real_Item), Long_Float (Imag_Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get\n+           (File, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Width);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -100,7 +129,17 @@ package body Ada.Wide_Text_IO.Complex_IO is\n       --  Aux.Gets will raise Data_Error in any case.\n \n    begin\n-      Aux.Gets (S, LLF (Real_Item), LLF (Imag_Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (S, Float (Real_Item), Float (Imag_Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets\n+           (S, Long_Float (Real_Item), Long_Float (Imag_Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets\n+           (S, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Last);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -119,7 +158,18 @@ package body Ada.Wide_Text_IO.Complex_IO is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (TFT (File), LLF (Re (Item)), LLF (Im (Item)), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put\n+           (File, Float (Re (Item)), Float (Im (Item)), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put\n+           (File, Long_Float (Re (Item)), Long_Float (Im (Item)), Fore, Aft,\n+            Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    ---------\n@@ -149,7 +199,16 @@ package body Ada.Wide_Text_IO.Complex_IO is\n       S : String (To'First .. To'Last);\n \n    begin\n-      Aux.Puts (S, LLF (Re (Item)), LLF (Im (Item)), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (S, Float (Re (Item)), Float (Im (Item)), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts\n+           (S, Long_Float (Re (Item)), Long_Float (Im (Item)), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts\n+           (S, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Aft, Exp);\n+      end if;\n \n       for J in S'Range loop\n          To (J) := Wide_Character'Val (Character'Pos (S (J)));"}, {"sha": "f80a5b9719a0640d870471a83dc29e08e5dc3c58", "filename": "gcc/ada/libgnat/a-wtcoio.ads", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtcoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtcoio.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -20,42 +20,40 @@ generic\n \n package Ada.Wide_Text_IO.Complex_IO is\n \n-   use Complex_Types;\n-\n    Default_Fore : Field := 2;\n-   Default_Aft  : Field := Real'Digits - 1;\n+   Default_Aft  : Field := Complex_Types.Real'Digits - 1;\n    Default_Exp  : Field := 3;\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Complex;\n+      Item  : out Complex_Types.Complex;\n       Width : Field := 0);\n \n    procedure Get\n-     (Item  : out Complex;\n+     (Item  : out Complex_Types.Complex;\n       Width : Field := 0);\n \n    procedure Put\n      (File : File_Type;\n-      Item : Complex;\n+      Item : Complex_Types.Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n \n    procedure Put\n-     (Item : Complex;\n+     (Item : Complex_Types.Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n \n    procedure Get\n      (From : Wide_String;\n-      Item : out Complex;\n+      Item : out Complex_Types.Complex;\n       Last : out Positive);\n \n    procedure Put\n      (To   : out Wide_String;\n-      Item : Complex;\n+      Item : Complex_Types.Complex;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n "}, {"sha": "57fcc92a20ff6f26b3b342c4689e7f5ec78c429c", "filename": "gcc/ada/libgnat/a-wtdeau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtdeau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtdeau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtdeau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Generic_Aux; use Ada.Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Text_IO.Float_Aux;   use Ada.Wide_Text_IO.Float_Aux;\n \n package body Ada.Wide_Text_IO.Decimal_Aux is\n "}, {"sha": "611b76ddf5b8a14c0eca32d4896b889664411887", "filename": "gcc/ada/libgnat/a-wtfiau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtfiau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Generic_Aux; use Ada.Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Text_IO.Float_Aux;   use Ada.Wide_Text_IO.Float_Aux;\n \n package body Ada.Wide_Text_IO.Fixed_Aux is\n "}, {"sha": "e2537ae0ce30843718e90be38e6f2335979b34df", "filename": "gcc/ada/libgnat/a-wtfiio.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtfiio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -36,6 +36,7 @@ with System.Img_Fixed_32; use System.Img_Fixed_32;\n with System.Img_Fixed_64; use System.Img_Fixed_64;\n with System.Val_Fixed_32; use System.Val_Fixed_32;\n with System.Val_Fixed_64; use System.Val_Fixed_64;\n+with System.Val_LLF;       use System.Val_LLF;\n with System.WCh_Con;      use System.WCh_Con;\n with System.WCh_WtS;      use System.WCh_WtS;\n \n@@ -55,6 +56,9 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n    package Aux64 is new\n      Ada.Wide_Text_IO.Fixed_Aux (Int64, Scan_Fixed64, Set_Image_Fixed64);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK and where type Int64 is OK. These boolean constants are used\n    --  to test for this, such that only code for the relevant case is included\n@@ -157,7 +161,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                                -Num'Small_Numerator,\n                                -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -197,7 +201,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (S, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -225,7 +229,8 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                     -Num'Small_Numerator, -Num'Small_Denominator,\n                     For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -257,7 +262,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n       end if;\n \n       for J in S'Range loop"}, {"sha": "a5801be16ee363f50074012625181f46960edcc2", "filename": "gcc/ada/libgnat/a-wtfiio__128.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiio__128.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtfiio__128.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtfiio__128.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -38,6 +38,7 @@ with System.Img_Fixed_128; use System.Img_Fixed_128;\n with System.Val_Fixed_32;  use System.Val_Fixed_32;\n with System.Val_Fixed_64;  use System.Val_Fixed_64;\n with System.Val_Fixed_128; use System.Val_Fixed_128;\n+with System.Val_LLF;       use System.Val_LLF;\n with System.WCh_Con;       use System.WCh_Con;\n with System.WCh_WtS;       use System.WCh_WtS;\n \n@@ -61,6 +62,9 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n    package Aux128 is new\n      Ada.Wide_Text_IO.Fixed_Aux (Int128, Scan_Fixed128, Set_Image_Fixed128);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK, where type Int64 is OK and where type Int128 is OK. These\n    --  boolean constants are used to test for this, such that only code for the\n@@ -197,7 +201,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -242,7 +246,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                                  -Num'Small_Numerator,\n                                  -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (S, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -274,7 +278,8 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -310,7 +315,7 @@ package body Ada.Wide_Text_IO.Fixed_IO is\n                       -Num'Small_Numerator, -Num'Small_Denominator,\n                       For0, Num'Aft);\n       else\n-         Float_Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n       end if;\n \n       for J in S'Range loop"}, {"sha": "7db1b7867b6f759d2c1bc0c526c418f8988216cb", "filename": "gcc/ada/libgnat/a-wtflau.adb", "status": "modified", "additions": 15, "deletions": 116, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtflau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -31,8 +31,7 @@\n \n with Ada.Wide_Text_IO.Generic_Aux; use Ada.Wide_Text_IO.Generic_Aux;\n \n-with System.Img_Real;  use System.Img_Real;\n-with System.Val_Real;  use System.Val_Real;\n+with System.Img_Real; use System.Img_Real;\n \n package body Ada.Wide_Text_IO.Float_Aux is\n \n@@ -42,23 +41,23 @@ package body Ada.Wide_Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field)\n    is\n       Buf  : String (1 .. Field'Last);\n       Stop : Integer := 0;\n-      Ptr  : aliased Integer := 1;\n+      Ptr  : aliased Integer;\n \n    begin\n       if Width /= 0 then\n          Load_Width (File, Width, Buf, Stop);\n          String_Skip (Buf, Ptr);\n       else\n          Load_Real (File, Buf, Stop);\n+         Ptr := 1;\n       end if;\n \n-      Item := Scan_Real (Buf, Ptr'Access, Stop);\n-\n+      Item := Scan (Buf, Ptr'Access, Stop);\n       Check_End_Of_Field (Buf, Stop, Ptr, Width);\n    end Get;\n \n@@ -68,137 +67,36 @@ package body Ada.Wide_Text_IO.Float_Aux is\n \n    procedure Gets\n      (From : String;\n-      Item : out Long_Long_Float;\n+      Item : out Num;\n       Last : out Positive)\n    is\n       Pos : aliased Integer;\n \n    begin\n       String_Skip (From, Pos);\n-      Item := Scan_Real (From, Pos'Access, From'Last);\n+      Item := Scan (From, Pos'Access, From'Last);\n       Last := Pos - 1;\n \n    exception\n-      when Constraint_Error =>\n-         raise Data_Error;\n+      when Constraint_Error => raise Data_Error;\n    end Gets;\n \n-   ---------------\n-   -- Load_Real --\n-   ---------------\n-\n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural)\n-   is\n-      Loaded   : Boolean;\n-\n-   begin\n-      --  Skip initial blanks and load possible sign\n-\n-      Load_Skip (File);\n-      Load (File, Buf, Ptr, '+', '-');\n-\n-      --  Case of .nnnn\n-\n-      Load (File, Buf, Ptr, '.', Loaded);\n-\n-      if Loaded then\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-      --  Otherwise must have digits to start\n-\n-      else\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-         --  Deal with based case. We recognize either the standard '#' or the\n-         --  allowed alternative replacement ':' (see RM J.2(3)).\n-\n-         Load (File, Buf, Ptr, '#', ':', Loaded);\n-\n-         if Loaded then\n-\n-            --  Case of nnn#.xxx#\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '#', ':');\n-\n-            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n-\n-            else\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '.', Loaded);\n-\n-               if Loaded then\n-                  Load_Extended_Digits (File, Buf, Ptr);\n-               end if;\n-\n-               --  As usual, it seems strange to allow mixed base characters,\n-               --  but that is what ACVC tests expect, see CE3804M, case (3).\n-\n-               Load (File, Buf, Ptr, '#', ':');\n-            end if;\n-\n-         --  Case of nnn.[nnn] or nnn\n-\n-         else\n-            --  Prevent the potential processing of '.' in cases where the\n-            --  initial digits have a trailing underscore.\n-\n-            if Buf (Ptr) = '_' then\n-               return;\n-            end if;\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Digits (File, Buf, Ptr);\n-            end if;\n-         end if;\n-      end if;\n-\n-      --  Deal with exponent\n-\n-      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n-\n-      if Loaded then\n-         Load (File, Buf, Ptr, '+', '-');\n-         Load_Digits (File, Buf, Ptr);\n-      end if;\n-   end Load_Real;\n-\n    ---------\n    -- Put --\n    ---------\n \n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field)\n    is\n-      Buf : String (1 .. Field'Last);\n+      Buf : String (1 .. Max_Real_Image_Length);\n       Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (Item), Buf, Ptr, Fore, Aft, Exp);\n       Put_Item (File, Buf (1 .. Ptr));\n    end Put;\n \n@@ -208,15 +106,16 @@ package body Ada.Wide_Text_IO.Float_Aux is\n \n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field)\n    is\n-      Buf : String (1 .. Field'Last);\n+      Buf : String (1 .. Max_Real_Image_Length);\n       Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n+      Set_Image_Real\n+        (Long_Long_Float (Item), Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n \n       if Ptr > To'Length then\n          raise Layout_Error;"}, {"sha": "82ace794bc4aa6c3726d61bbb605b3277ed45a3e", "filename": "gcc/ada/libgnat/a-wtflau.ads", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtflau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -31,41 +31,42 @@\n \n --  This package contains the routines for Ada.Wide_Text_IO.Float_IO that\n --  are shared among separate instantiations of this package. The routines\n---  in this package are identical semantically to those in Float_IO itself,\n---  except that generic parameter Num has been replaced by Long_Long_Float,\n---  and the default parameters have been removed because they are supplied\n+--  in this package are identical semantically to those in Float_IO, except\n+--  that the default parameters have been removed because they are supplied\n --  explicitly by the calls from within the generic template. This package\n---  is also used by Ada.Wide_Text_IO.Fixed_IO, Ada.Wide_Text_IO.Decimal_IO.\n+--  is also used by Ada.Wide_Text_IO.Fixed_IO and Ada.Wide_Text_IO.Decimal_IO.\n \n-private package Ada.Wide_Text_IO.Float_Aux is\n+private generic\n \n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural);\n-   --  This is an auxiliary routine that is used to load a possibly signed\n-   --  real literal value from the input file into Buf, starting at Ptr + 1.\n+   type Num is digits <>;\n+\n+   with function Scan\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Num;\n+\n+package Ada.Wide_Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field);\n \n-   procedure Gets\n-     (From : String;\n-      Item : out Long_Long_Float;\n-      Last : out Positive);\n-\n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field);\n \n+   procedure Gets\n+     (From : String;\n+      Item : out Num;\n+      Last : out Positive);\n+\n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field);\n "}, {"sha": "369178633f12cb1c73cdb4d732601a49d2286e8d", "filename": "gcc/ada/libgnat/a-wtflio.adb", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtflio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,13 +30,31 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Float_Aux;\n-\n-with System.WCh_Con; use System.WCh_Con;\n-with System.WCh_WtS; use System.WCh_WtS;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n+with System.WCh_Con;  use System.WCh_Con;\n+with System.WCh_WtS;  use System.WCh_WtS;\n \n package body Ada.Wide_Text_IO.Float_IO is\n \n-   package Aux renames Ada.Wide_Text_IO.Float_Aux;\n+   package Aux_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Aux_Long_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Aux_Long_Long_Float is new\n+      Ada.Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Num'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Num'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n@@ -47,8 +65,25 @@ package body Ada.Wide_Text_IO.Float_IO is\n       Item  : out Num;\n       Width : Field := 0)\n    is\n+      pragma Unsuppress (Range_Check);\n+\n    begin\n-      Aux.Get (File, Long_Long_Float (Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get (File, Long_Float (Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n+      end if;\n+\n+      --  In the case where the type is unconstrained (e.g. Standard'Float),\n+      --  the above conversion may result in an infinite value, which is\n+      --  normally fine for a conversion, but in this case, we want to treat\n+      --  that as a data error.\n+\n+      if not Item'Valid then\n+         raise Data_Error;\n+      end if;\n \n    exception\n       when Constraint_Error => raise Data_Error;\n@@ -67,14 +102,31 @@ package body Ada.Wide_Text_IO.Float_IO is\n       Item : out Num;\n       Last : out Positive)\n    is\n+      pragma Unsuppress (Range_Check);\n+\n       S : constant String := Wide_String_To_String (From, WCEM_Upper);\n       --  String on which we do the actual conversion. Note that the method\n       --  used for wide character encoding is irrelevant, since if there is\n       --  a character outside the Standard.Character range then the call to\n       --  Aux.Gets will raise Data_Error in any case.\n \n    begin\n-      Aux.Gets (S, Long_Long_Float (Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (S, Float (Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets (S, Long_Float (Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n+      end if;\n+\n+      --  In the case where the type is unconstrained (e.g. Standard'Float),\n+      --  the above conversion may result in an infinite value, which is\n+      --  normally fine for a conversion, but in this case, we want to treat\n+      --  that as a data error.\n+\n+      if not Item'Valid then\n+         raise Data_Error;\n+      end if;\n \n    exception\n       when Constraint_Error => raise Data_Error;\n@@ -92,7 +144,14 @@ package body Ada.Wide_Text_IO.Float_IO is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put (File, Float (Item), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put (File, Long_Float (Item), Fore, Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    procedure Put\n@@ -114,7 +173,13 @@ package body Ada.Wide_Text_IO.Float_IO is\n       S : String (To'First .. To'Last);\n \n    begin\n-      Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (S, Float (Item), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts (S, Long_Float (Item), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+      end if;\n \n       for J in S'Range loop\n          To (J) := Wide_Character'Val (Character'Pos (S (J)));"}, {"sha": "bc9b459a9f7b60d6a80f6c99b674b1c041a69d0a", "filename": "gcc/ada/libgnat/a-wtgeau.adb", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtgeau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtgeau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtgeau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -402,6 +402,106 @@ package body Ada.Wide_Text_IO.Generic_Aux is\n       end if;\n    end Load_Integer;\n \n+   ---------------\n+   -- Load_Real --\n+   ---------------\n+\n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural)\n+   is\n+      Loaded   : Boolean;\n+\n+   begin\n+      --  Skip initial blanks and load possible sign\n+\n+      Load_Skip (File);\n+      Load (File, Buf, Ptr, '+', '-');\n+\n+      --  Case of .nnnn\n+\n+      Load (File, Buf, Ptr, '.', Loaded);\n+\n+      if Loaded then\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+      --  Otherwise must have digits to start\n+\n+      else\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n+         Load (File, Buf, Ptr, '#', ':', Loaded);\n+\n+         if Loaded then\n+\n+            --  Case of nnn#.xxx#\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '#', ':');\n+\n+            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n+\n+            else\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '.', Loaded);\n+\n+               if Loaded then\n+                  Load_Extended_Digits (File, Buf, Ptr);\n+               end if;\n+\n+               --  As usual, it seems strange to allow mixed base characters,\n+               --  but that is what ACVC tests expect, see CE3804M, case (3).\n+\n+               Load (File, Buf, Ptr, '#', ':');\n+            end if;\n+\n+         --  Case of nnn.[nnn] or nnn\n+\n+         else\n+            --  Prevent the potential processing of '.' in cases where the\n+            --  initial digits have a trailing underscore.\n+\n+            if Buf (Ptr) = '_' then\n+               return;\n+            end if;\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Digits (File, Buf, Ptr);\n+            end if;\n+         end if;\n+      end if;\n+\n+      --  Deal with exponent\n+\n+      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n+\n+      if Loaded then\n+         Load (File, Buf, Ptr, '+', '-');\n+         Load_Digits (File, Buf, Ptr);\n+      end if;\n+   end Load_Real;\n+\n    ---------------\n    -- Load_Skip --\n    ---------------"}, {"sha": "7c899717c2db402a5a0b341e62d22274f2b9218e", "filename": "gcc/ada/libgnat/a-wtgeau.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtgeau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-wtgeau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-wtgeau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -155,6 +155,12 @@ package Ada.Wide_Text_IO.Generic_Aux is\n       Ptr  : in out Natural);\n    --  Loads a possibly signed integer literal value\n \n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural);\n+   --  Loads a possibly signed real literal value\n+\n    procedure Put_Item (File : File_Type; Str : String);\n    --  This routine is like Wide_Text_IO.Put, except that it checks for\n    --  overflow of bounded lines, as described in (RM A.10.6(8)). It is used"}, {"sha": "bb3368095427724dc2094e7f372cbf56b62b0173", "filename": "gcc/ada/libgnat/a-ztcoau.adb", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztcoau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,22 +30,19 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Wide_Text_IO.Generic_Aux; use Ada.Wide_Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Wide_Text_IO.Float_Aux;\n \n with System.Img_Real; use System.Img_Real;\n \n package body Ada.Wide_Wide_Text_IO.Complex_Aux is\n \n-   package Aux renames Ada.Wide_Wide_Text_IO.Float_Aux;\n-\n    ---------\n    -- Get --\n    ---------\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field)\n    is\n       Buf   : String (1 .. Field'Last);\n@@ -95,8 +92,8 @@ package body Ada.Wide_Wide_Text_IO.Complex_Aux is\n \n    procedure Gets\n      (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Last  : out Positive)\n    is\n       Paren : Boolean;\n@@ -139,8 +136,8 @@ package body Ada.Wide_Wide_Text_IO.Complex_Aux is\n \n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field)\n@@ -159,8 +156,8 @@ package body Ada.Wide_Wide_Text_IO.Complex_Aux is\n \n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   :  Field;\n       Exp   :  Field)\n    is\n@@ -174,9 +171,9 @@ package body Ada.Wide_Wide_Text_IO.Complex_Aux is\n       --  Both parts are initially converted with a Fore of 0\n \n       Rptr := 0;\n-      Set_Image_Real (ItemR, R_String, Rptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemR), R_String, Rptr, 0, Aft, Exp);\n       Iptr := 0;\n-      Set_Image_Real (ItemI, I_String, Iptr, 0, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (ItemI), I_String, Iptr, 0, Aft, Exp);\n \n       --  Check room for both parts plus parens plus comma (RM G.1.3(34))\n "}, {"sha": "43546d804dfcfcaff96cc2648bf392798daf97e3", "filename": "gcc/ada/libgnat/a-ztcoau.ads", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztcoau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -15,38 +15,45 @@\n \n --  This package contains the routines for Ada.Wide_Wide_Text_IO.Complex_IO\n --  that are shared among separate instantiations of this package. The routines\n---  in this package are identical semantically to those in Complex_IO itself,\n---  except that the generic parameter Complex has been replaced by separate\n---  real and imaginary values of type Long_Long_Float, and default parameters\n---  have been removed because they are supplied explicitly by the calls from\n---  within the generic template.\n+--  in this package are identical semantically to those in Complex_IO, except\n+--  that the generic parameter Complex has been replaced by separate real and\n+--  imaginary parameters, and default parameters have been removed because they\n+--  are supplied explicitly by the calls from within the generic template.\n+\n+with Ada.Wide_Wide_Text_IO.Float_Aux;\n+\n+private generic\n+\n+   type Num is digits <>;\n+\n+   with package Aux is new Ada.Wide_Wide_Text_IO.Float_Aux (Num, <>);\n \n package Ada.Wide_Wide_Text_IO.Complex_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n+      ItemR : out Num;\n+      ItemI : out Num;\n       Width : Field);\n \n-   procedure Gets\n-     (From  : String;\n-      ItemR : out Long_Long_Float;\n-      ItemI : out Long_Long_Float;\n-      Last  : out Positive);\n-\n    procedure Put\n      (File  : File_Type;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Fore  : Field;\n       Aft   : Field;\n       Exp   : Field);\n \n+   procedure Gets\n+     (From  : String;\n+      ItemR : out Num;\n+      ItemI : out Num;\n+      Last  : out Positive);\n+\n    procedure Puts\n      (To    : out String;\n-      ItemR : Long_Long_Float;\n-      ItemI : Long_Long_Float;\n+      ItemR : Num;\n+      ItemI : Num;\n       Aft   : Field;\n       Exp   : Field);\n "}, {"sha": "51031912604c04e6535acb606e20f99215bb1d5e", "filename": "gcc/ada/libgnat/a-ztcoio.adb", "status": "modified", "additions": 77, "deletions": 15, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztcoio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,24 +30,46 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Wide_Text_IO.Complex_Aux;\n-\n-with System.WCh_Con; use System.WCh_Con;\n-with System.WCh_WtS; use System.WCh_WtS;\n+with Ada.Wide_Wide_Text_IO.Float_Aux;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n+with System.WCh_Con;  use System.WCh_Con;\n+with System.WCh_WtS;  use System.WCh_WtS;\n \n with Ada.Unchecked_Conversion;\n \n package body Ada.Wide_Wide_Text_IO.Complex_IO is\n \n-   package Aux renames Ada.Wide_Wide_Text_IO.Complex_Aux;\n+   use Complex_Types;\n+\n+   package Scalar_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Scalar_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Scalar_Long_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   package Aux_Float is new\n+      Ada.Wide_Wide_Text_IO.Complex_Aux (Float, Scalar_Float);\n \n-   subtype LLF is Long_Long_Float;\n-   --  Type used for calls to routines in Aux\n+   package Aux_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Complex_Aux (Long_Float, Scalar_Long_Float);\n \n-   function TFT is new\n-     Ada.Unchecked_Conversion (File_Type, Ada.Wide_Wide_Text_IO.File_Type);\n-   --  This unchecked conversion is to get around a visibility bug in\n-   --  GNAT version 2.04w. It should be possible to simply use the\n-   --  subtype declared above and do normal checked conversions.\n+   package Aux_Long_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Complex_Aux\n+        (Long_Long_Float, Scalar_Long_Long_Float);\n+\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Real'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Real'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n@@ -62,7 +84,17 @@ package body Ada.Wide_Wide_Text_IO.Complex_IO is\n       Imag_Item : Real'Base;\n \n    begin\n-      Aux.Get (TFT (File), LLF (Real_Item), LLF (Imag_Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Real_Item), Float (Imag_Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get\n+           (File, Long_Float (Real_Item), Long_Float (Imag_Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get\n+           (File, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Width);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -100,7 +132,17 @@ package body Ada.Wide_Wide_Text_IO.Complex_IO is\n       --  Aux.Gets will raise Data_Error in any case.\n \n    begin\n-      Aux.Gets (S, LLF (Real_Item), LLF (Imag_Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (S, Float (Real_Item), Float (Imag_Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets\n+           (S, Long_Float (Real_Item), Long_Float (Imag_Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets\n+           (S, Long_Long_Float (Real_Item), Long_Long_Float (Imag_Item),\n+            Last);\n+      end if;\n+\n       Item := (Real_Item, Imag_Item);\n \n    exception\n@@ -119,7 +161,18 @@ package body Ada.Wide_Wide_Text_IO.Complex_IO is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (TFT (File), LLF (Re (Item)), LLF (Im (Item)), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put\n+           (File, Float (Re (Item)), Float (Im (Item)), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put\n+           (File, Long_Float (Re (Item)), Long_Float (Im (Item)), Fore, Aft,\n+            Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    ---------\n@@ -149,7 +202,16 @@ package body Ada.Wide_Wide_Text_IO.Complex_IO is\n       S : String (To'First .. To'Last);\n \n    begin\n-      Aux.Puts (S, LLF (Re (Item)), LLF (Im (Item)), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (S, Float (Re (Item)), Float (Im (Item)), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts\n+           (S, Long_Float (Re (Item)), Long_Float (Im (Item)), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts\n+           (S, Long_Long_Float (Re (Item)), Long_Long_Float (Im (Item)),\n+            Aft, Exp);\n+      end if;\n \n       for J in S'Range loop\n          To (J) := Wide_Wide_Character'Val (Character'Pos (S (J)));"}, {"sha": "2a08153a36d28420fdabd5bf71f0711ca2a57732", "filename": "gcc/ada/libgnat/a-ztcoio.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztcoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztcoio.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -23,39 +23,39 @@ package Ada.Wide_Wide_Text_IO.Complex_IO is\n    use Complex_Types;\n \n    Default_Fore : Field := 2;\n-   Default_Aft  : Field := Real'Digits - 1;\n+   Default_Aft  : Field := Complex_Types.Real'Digits - 1;\n    Default_Exp  : Field := 3;\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Complex;\n+      Item  : out Complex_Types.Complex;\n       Width : Field := 0);\n \n    procedure Get\n-     (Item  : out Complex;\n+     (Item  : out Complex_Types.Complex;\n       Width : Field := 0);\n \n    procedure Put\n      (File : File_Type;\n-      Item : Complex;\n+      Item : Complex_Types.Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n \n    procedure Put\n-     (Item : Complex;\n+     (Item : Complex_Types.Complex;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n \n    procedure Get\n      (From : Wide_Wide_String;\n-      Item : out Complex;\n+      Item : out Complex_Types.Complex;\n       Last : out Positive);\n \n    procedure Put\n      (To   : out Wide_Wide_String;\n-      Item : Complex;\n+      Item : Complex_Types.Complex;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp);\n "}, {"sha": "ec6431bee9973740e92b9dcea9c79ccebcf9979d", "filename": "gcc/ada/libgnat/a-ztdeau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztdeau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztdeau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztdeau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Wide_Text_IO.Generic_Aux; use Ada.Wide_Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Wide_Text_IO.Float_Aux;   use Ada.Wide_Wide_Text_IO.Float_Aux;\n \n package body Ada.Wide_Wide_Text_IO.Decimal_Aux is\n "}, {"sha": "1e94fef0231b6c3e0718fa4ab045434bb78d48ac", "filename": "gcc/ada/libgnat/a-ztfiau.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztfiau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Wide_Text_IO.Generic_Aux; use Ada.Wide_Wide_Text_IO.Generic_Aux;\n-with Ada.Wide_Wide_Text_IO.Float_Aux;   use Ada.Wide_Wide_Text_IO.Float_Aux;\n \n package body Ada.Wide_Wide_Text_IO.Fixed_Aux is\n "}, {"sha": "53ed45b8ee3a26ee4b145c54d80ecb82b0056e19", "filename": "gcc/ada/libgnat/a-ztfiio.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztfiio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -36,6 +36,7 @@ with System.Img_Fixed_32; use System.Img_Fixed_32;\n with System.Img_Fixed_64; use System.Img_Fixed_64;\n with System.Val_Fixed_32; use System.Val_Fixed_32;\n with System.Val_Fixed_64; use System.Val_Fixed_64;\n+with System.Val_LLF;      use System.Val_LLF;\n with System.WCh_Con;      use System.WCh_Con;\n with System.WCh_WtS;      use System.WCh_WtS;\n \n@@ -55,6 +56,9 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n    package Aux64 is new\n      Ada.Wide_Wide_Text_IO.Fixed_Aux (Int64, Scan_Fixed64, Set_Image_Fixed64);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Wide_Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK and where type Int64 is OK. These boolean constants are used\n    --  to test for this, such that only code for the relevant case is included\n@@ -157,7 +161,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                                -Num'Small_Numerator,\n                                -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -197,7 +201,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (S, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -225,7 +229,8 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                     -Num'Small_Numerator, -Num'Small_Denominator,\n                     For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -257,7 +262,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n       end if;\n \n       for J in S'Range loop"}, {"sha": "13ed410354fd250bdcd5694eaaf9be0065fa5c67", "filename": "gcc/ada/libgnat/a-ztfiio__128.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiio__128.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztfiio__128.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztfiio__128.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -38,6 +38,7 @@ with System.Img_Fixed_128; use System.Img_Fixed_128;\n with System.Val_Fixed_32;  use System.Val_Fixed_32;\n with System.Val_Fixed_64;  use System.Val_Fixed_64;\n with System.Val_Fixed_128; use System.Val_Fixed_128;\n+with System.Val_LLF;       use System.Val_LLF;\n with System.WCh_Con;       use System.WCh_Con;\n with System.WCh_WtS;       use System.WCh_WtS;\n \n@@ -62,6 +63,9 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n      Ada.Wide_Wide_Text_IO.Fixed_Aux\n       (Int128, Scan_Fixed128, Set_Image_Fixed128);\n \n+   package Aux_Long_Long_Float is new\n+     Ada.Wide_Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n    --  Throughout this generic body, we distinguish between the case where type\n    --  Int32 is OK, where type Int64 is OK and where type Int128 is OK. These\n    --  boolean constants are used to test for this, such that only code for the\n@@ -198,7 +202,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                                 -Num'Small_Numerator,\n                                 -Num'Small_Denominator));\n       else\n-         Float_Aux.Get (File, Long_Long_Float (Item), Width);\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n       end if;\n \n    exception\n@@ -243,7 +247,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                                  -Num'Small_Numerator,\n                                  -Num'Small_Denominator));\n       else\n-         Float_Aux.Gets (S, Long_Long_Float (Item), Last);\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n       end if;\n \n    exception\n@@ -275,7 +279,8 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                      -Num'Small_Numerator, -Num'Small_Denominator,\n                      For0, Num'Aft);\n       else\n-         Float_Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n       end if;\n    end Put;\n \n@@ -311,7 +316,7 @@ package body Ada.Wide_Wide_Text_IO.Fixed_IO is\n                       -Num'Small_Numerator, -Num'Small_Denominator,\n                       For0, Num'Aft);\n       else\n-         Float_Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n       end if;\n \n       for J in S'Range loop"}, {"sha": "1bddcd86ddf6830f5132ccea5d8953941c2b3a51", "filename": "gcc/ada/libgnat/a-ztflau.adb", "status": "modified", "additions": 16, "deletions": 117, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztflau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -31,8 +31,7 @@\n \n with Ada.Wide_Wide_Text_IO.Generic_Aux; use Ada.Wide_Wide_Text_IO.Generic_Aux;\n \n-with System.Img_Real;  use System.Img_Real;\n-with System.Val_Real;  use System.Val_Real;\n+with System.Img_Real; use System.Img_Real;\n \n package body Ada.Wide_Wide_Text_IO.Float_Aux is\n \n@@ -42,23 +41,23 @@ package body Ada.Wide_Wide_Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field)\n    is\n       Buf  : String (1 .. Field'Last);\n       Stop : Integer := 0;\n-      Ptr  : aliased Integer := 1;\n+      Ptr  : aliased Integer;\n \n    begin\n       if Width /= 0 then\n          Load_Width (File, Width, Buf, Stop);\n          String_Skip (Buf, Ptr);\n       else\n          Load_Real (File, Buf, Stop);\n+         Ptr := 1;\n       end if;\n \n-      Item := Scan_Real (Buf, Ptr'Access, Stop);\n-\n+      Item := Scan (Buf, Ptr'Access, Stop);\n       Check_End_Of_Field (Buf, Stop, Ptr, Width);\n    end Get;\n \n@@ -68,137 +67,36 @@ package body Ada.Wide_Wide_Text_IO.Float_Aux is\n \n    procedure Gets\n      (From : String;\n-      Item : out Long_Long_Float;\n+      Item : out Num;\n       Last : out Positive)\n    is\n       Pos : aliased Integer;\n \n    begin\n       String_Skip (From, Pos);\n-      Item := Scan_Real (From, Pos'Access, From'Last);\n+      Item := Scan (From, Pos'Access, From'Last);\n       Last := Pos - 1;\n \n    exception\n-      when Constraint_Error =>\n-         raise Data_Error;\n+      when Constraint_Error => raise Data_Error;\n    end Gets;\n \n-   ---------------\n-   -- Load_Real --\n-   ---------------\n-\n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural)\n-   is\n-      Loaded   : Boolean;\n-\n-   begin\n-      --  Skip initial blanks and load possible sign\n-\n-      Load_Skip (File);\n-      Load (File, Buf, Ptr, '+', '-');\n-\n-      --  Case of .nnnn\n-\n-      Load (File, Buf, Ptr, '.', Loaded);\n-\n-      if Loaded then\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-      --  Otherwise must have digits to start\n-\n-      else\n-         Load_Digits (File, Buf, Ptr, Loaded);\n-\n-         --  Hopeless junk if no digits loaded\n-\n-         if not Loaded then\n-            return;\n-         end if;\n-\n-         --  Deal with based case. We recognize either the standard '#' or the\n-         --  allowed alternative replacement ':' (see RM J.2(3)).\n-\n-         Load (File, Buf, Ptr, '#', ':', Loaded);\n-\n-         if Loaded then\n-\n-            --  Case of nnn#.xxx#\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '#', ':');\n-\n-            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n-\n-            else\n-               Load_Extended_Digits (File, Buf, Ptr);\n-               Load (File, Buf, Ptr, '.', Loaded);\n-\n-               if Loaded then\n-                  Load_Extended_Digits (File, Buf, Ptr);\n-               end if;\n-\n-               --  As usual, it seems strange to allow mixed base characters,\n-               --  but that is what ACVC tests expect, see CE3804M, case (3).\n-\n-               Load (File, Buf, Ptr, '#', ':');\n-            end if;\n-\n-         --  Case of nnn.[nnn] or nnn\n-\n-         else\n-            --  Prevent the potential processing of '.' in cases where the\n-            --  initial digits have a trailing underscore.\n-\n-            if Buf (Ptr) = '_' then\n-               return;\n-            end if;\n-\n-            Load (File, Buf, Ptr, '.', Loaded);\n-\n-            if Loaded then\n-               Load_Digits (File, Buf, Ptr);\n-            end if;\n-         end if;\n-      end if;\n-\n-      --  Deal with exponent\n-\n-      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n-\n-      if Loaded then\n-         Load (File, Buf, Ptr, '+', '-');\n-         Load_Digits (File, Buf, Ptr);\n-      end if;\n-   end Load_Real;\n-\n    ---------\n    -- Put --\n    ---------\n \n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field)\n    is\n-      Buf : String (1 .. Field'Last);\n+      Buf : String (1 .. Max_Real_Image_Length);\n       Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore, Aft, Exp);\n+      Set_Image_Real (Long_Long_Float (Item), Buf, Ptr, Fore, Aft, Exp);\n       Put_Item (File, Buf (1 .. Ptr));\n    end Put;\n \n@@ -208,15 +106,16 @@ package body Ada.Wide_Wide_Text_IO.Float_Aux is\n \n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field)\n    is\n-      Buf    : String (1 .. Field'Last);\n-      Ptr    : Natural := 0;\n+      Buf : String (1 .. Max_Real_Image_Length);\n+      Ptr : Natural := 0;\n \n    begin\n-      Set_Image_Real (Item, Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n+      Set_Image_Real\n+        (Long_Long_Float (Item), Buf, Ptr, Fore => 1, Aft => Aft, Exp => Exp);\n \n       if Ptr > To'Length then\n          raise Layout_Error;"}, {"sha": "48fba8267acf81cc49a70a7041fa0d463a99de1b", "filename": "gcc/ada/libgnat/a-ztflau.ads", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztflau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -31,41 +31,42 @@\n \n --  This package contains the routines for Ada.Wide_Wide_Text_IO.Float_IO that\n --  are shared among separate instantiations of this package. The routines\n---  in this package are identical semantically to those in Float_IO itself,\n---  except that generic parameter Num has been replaced by Long_Long_Float,\n---  and the default parameters have been removed because they are supplied\n+--  in this package are identical semantically to those in Float_IO, except\n+--  that the default parameters have been removed because they are supplied\n --  explicitly by the calls from within the generic template. Also used by\n---  Ada.Wide_Wide_Text_IO.Fixed_IO, and by Ada.Wide_Wide_Text_IO.Decimal_IO.\n+--  Ada.Wide_Wide_Text_IO.Fixed_IO and by Ada.Wide_Wide_Text_IO.Decimal_IO.\n \n-private package Ada.Wide_Wide_Text_IO.Float_Aux is\n+private generic\n \n-   procedure Load_Real\n-     (File : File_Type;\n-      Buf  : out String;\n-      Ptr  : in out Natural);\n-   --  This is an auxiliary routine that is used to load a possibly signed\n-   --  real literal value from the input file into Buf, starting at Ptr + 1.\n+   type Num is digits <>;\n+\n+   with function Scan\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Num;\n+\n+package Ada.Wide_Wide_Text_IO.Float_Aux is\n \n    procedure Get\n      (File  : File_Type;\n-      Item  : out Long_Long_Float;\n+      Item  : out Num;\n       Width : Field);\n \n-   procedure Gets\n-     (From : String;\n-      Item : out Long_Long_Float;\n-      Last : out Positive);\n-\n    procedure Put\n      (File : File_Type;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Fore : Field;\n       Aft  : Field;\n       Exp  : Field);\n \n+   procedure Gets\n+     (From : String;\n+      Item : out Num;\n+      Last : out Positive);\n+\n    procedure Puts\n      (To   : out String;\n-      Item : Long_Long_Float;\n+      Item : Num;\n       Aft  : Field;\n       Exp  : Field);\n "}, {"sha": "e491e6298976c9818d41807a46ffa5471d37368d", "filename": "gcc/ada/libgnat/a-ztflio.adb", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztflio.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -30,12 +30,31 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Wide_Text_IO.Float_Aux;\n-with System.WCh_Con; use System.WCh_Con;\n-with System.WCh_WtS; use System.WCh_WtS;\n+with System.Val_Flt;  use System.Val_Flt;\n+with System.Val_LFlt; use System.Val_LFlt;\n+with System.Val_LLF;  use System.Val_LLF;\n+with System.WCh_Con;  use System.WCh_Con;\n+with System.WCh_WtS;  use System.WCh_WtS;\n \n package body Ada.Wide_Wide_Text_IO.Float_IO is\n \n-   package Aux renames Ada.Wide_Wide_Text_IO.Float_Aux;\n+   package Aux_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Float, Scan_Float);\n+\n+   package Aux_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Long_Float, Scan_Long_Float);\n+\n+   package Aux_Long_Long_Float is new\n+      Ada.Wide_Wide_Text_IO.Float_Aux (Long_Long_Float, Scan_Long_Long_Float);\n+\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Float is OK, where type Long_Float is OK and where type Long_Long_Float\n+   --  is needed. These boolean constants are used to test for this, such that\n+   --  only code for the relevant case is included in the instance.\n+\n+   OK_Float : constant Boolean := Num'Base'Digits <= Float'Digits;\n+\n+   OK_Long_Float : constant Boolean := Num'Base'Digits <= Long_Float'Digits;\n \n    ---------\n    -- Get --\n@@ -46,8 +65,25 @@ package body Ada.Wide_Wide_Text_IO.Float_IO is\n       Item  : out Num;\n       Width : Field := 0)\n    is\n+      pragma Unsuppress (Range_Check);\n+\n    begin\n-      Aux.Get (File, Long_Long_Float (Item), Width);\n+      if OK_Float then\n+         Aux_Float.Get (File, Float (Item), Width);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Get (File, Long_Float (Item), Width);\n+      else\n+         Aux_Long_Long_Float.Get (File, Long_Long_Float (Item), Width);\n+      end if;\n+\n+      --  In the case where the type is unconstrained (e.g. Standard'Float),\n+      --  the above conversion may result in an infinite value, which is\n+      --  normally fine for a conversion, but in this case, we want to treat\n+      --  that as a data error.\n+\n+      if not Item'Valid then\n+         raise Data_Error;\n+      end if;\n \n    exception\n       when Constraint_Error => raise Data_Error;\n@@ -66,14 +102,31 @@ package body Ada.Wide_Wide_Text_IO.Float_IO is\n       Item : out Num;\n       Last : out Positive)\n    is\n+      pragma Unsuppress (Range_Check);\n+\n       S : constant String := Wide_Wide_String_To_String (From, WCEM_Upper);\n       --  String on which we do the actual conversion. Note that the method\n       --  used for wide character encoding is irrelevant, since if there is\n       --  a character outside the Standard.Character range then the call to\n       --  Aux.Gets will raise Data_Error in any case.\n \n    begin\n-      Aux.Gets (S, Long_Long_Float (Item), Last);\n+      if OK_Float then\n+         Aux_Float.Gets (S, Float (Item), Last);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Gets (S, Long_Float (Item), Last);\n+      else\n+         Aux_Long_Long_Float.Gets (S, Long_Long_Float (Item), Last);\n+      end if;\n+\n+      --  In the case where the type is unconstrained (e.g. Standard'Float),\n+      --  the above conversion may result in an infinite value, which is\n+      --  normally fine for a conversion, but in this case, we want to treat\n+      --  that as a data error.\n+\n+      if not Item'Valid then\n+         raise Data_Error;\n+      end if;\n \n    exception\n       when Constraint_Error => raise Data_Error;\n@@ -91,7 +144,14 @@ package body Ada.Wide_Wide_Text_IO.Float_IO is\n       Exp  : Field := Default_Exp)\n    is\n    begin\n-      Aux.Put (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Put (File, Float (Item), Fore, Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Put (File, Long_Float (Item), Fore, Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Put\n+           (File, Long_Long_Float (Item), Fore, Aft, Exp);\n+      end if;\n    end Put;\n \n    procedure Put\n@@ -113,7 +173,13 @@ package body Ada.Wide_Wide_Text_IO.Float_IO is\n       S : String (To'First .. To'Last);\n \n    begin\n-      Aux.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+      if OK_Float then\n+         Aux_Float.Puts (S, Float (Item), Aft, Exp);\n+      elsif OK_Long_Float then\n+         Aux_Long_Float.Puts (S, Long_Float (Item), Aft, Exp);\n+      else\n+         Aux_Long_Long_Float.Puts (S, Long_Long_Float (Item), Aft, Exp);\n+      end if;\n \n       for J in S'Range loop\n          To (J) := Wide_Wide_Character'Val (Character'Pos (S (J)));"}, {"sha": "6b5e4c5add8e2af1eeed750a789a4745a04f1dd9", "filename": "gcc/ada/libgnat/a-ztgeau.adb", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztgeau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztgeau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztgeau.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -402,6 +402,106 @@ package body Ada.Wide_Wide_Text_IO.Generic_Aux is\n       end if;\n    end Load_Integer;\n \n+   ---------------\n+   -- Load_Real --\n+   ---------------\n+\n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural)\n+   is\n+      Loaded   : Boolean;\n+\n+   begin\n+      --  Skip initial blanks and load possible sign\n+\n+      Load_Skip (File);\n+      Load (File, Buf, Ptr, '+', '-');\n+\n+      --  Case of .nnnn\n+\n+      Load (File, Buf, Ptr, '.', Loaded);\n+\n+      if Loaded then\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+      --  Otherwise must have digits to start\n+\n+      else\n+         Load_Digits (File, Buf, Ptr, Loaded);\n+\n+         --  Hopeless junk if no digits loaded\n+\n+         if not Loaded then\n+            return;\n+         end if;\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n+         Load (File, Buf, Ptr, '#', ':', Loaded);\n+\n+         if Loaded then\n+\n+            --  Case of nnn#.xxx#\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '#', ':');\n+\n+            --  Case of nnn#xxx.[xxx]# or nnn#xxx#\n+\n+            else\n+               Load_Extended_Digits (File, Buf, Ptr);\n+               Load (File, Buf, Ptr, '.', Loaded);\n+\n+               if Loaded then\n+                  Load_Extended_Digits (File, Buf, Ptr);\n+               end if;\n+\n+               --  As usual, it seems strange to allow mixed base characters,\n+               --  but that is what ACVC tests expect, see CE3804M, case (3).\n+\n+               Load (File, Buf, Ptr, '#', ':');\n+            end if;\n+\n+         --  Case of nnn.[nnn] or nnn\n+\n+         else\n+            --  Prevent the potential processing of '.' in cases where the\n+            --  initial digits have a trailing underscore.\n+\n+            if Buf (Ptr) = '_' then\n+               return;\n+            end if;\n+\n+            Load (File, Buf, Ptr, '.', Loaded);\n+\n+            if Loaded then\n+               Load_Digits (File, Buf, Ptr);\n+            end if;\n+         end if;\n+      end if;\n+\n+      --  Deal with exponent\n+\n+      Load (File, Buf, Ptr, 'E', 'e', Loaded);\n+\n+      if Loaded then\n+         Load (File, Buf, Ptr, '+', '-');\n+         Load_Digits (File, Buf, Ptr);\n+      end if;\n+   end Load_Real;\n+\n    ---------------\n    -- Load_Skip --\n    ---------------"}, {"sha": "6b80ed4cfe107846a75a0d0d8ae280f16d661bdc", "filename": "gcc/ada/libgnat/a-ztgeau.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztgeau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fa-ztgeau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ztgeau.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -155,6 +155,12 @@ package Ada.Wide_Wide_Text_IO.Generic_Aux is\n       Ptr  : in out Natural);\n    --  Loads a possibly signed integer literal value\n \n+   procedure Load_Real\n+     (File : File_Type;\n+      Buf  : out String;\n+      Ptr  : in out Natural);\n+   --  Loads a possibly signed real literal value\n+\n    procedure Put_Item (File : File_Type; Str : String);\n    --  This routine is like Wide_Wide_Text_IO.Put, except that it checks for\n    --  overflow of bounded lines, as described in (RM A.10.6(8)). It is used"}, {"sha": "9f25987e42885b4e9d014ce40efb3b42a4547528", "filename": "gcc/ada/libgnat/s-fatgen.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -654,6 +654,8 @@ package body System.Fat_Gen is\n          if Adjustment > IEEE_Emax - Exp then\n             XX := 0.0;\n             return (if Minus then -1.0 / XX else 1.0 / XX);\n+            pragma Annotate\n+              (CodePeer, Intentional, \"overflow check\", \"Infinity produced\");\n             pragma Annotate\n               (CodePeer, Intentional, \"divide by zero\", \"Infinity produced\");\n "}, {"sha": "476a25189a33583eae0a87f105b048aaf26db199", "filename": "gcc/ada/libgnat/s-valflt.ads", "status": "renamed", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valflt.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                      S Y S T E M . F A T _ S F L T                       --\n+--                       S Y S T E M . V A L _ F L T                        --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2020, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,19 +29,24 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains an instantiation of the floating-point attribute\n---  runtime routines for the type Short_Float.\n+--  This package contains routines for scanning real values for floating point\n+--  type Float, for use in Text_IO.Float_IO and the Value attribute.\n \n-with System.Fat_Gen;\n+with Interfaces;\n+with System.Val_Real;\n \n-package System.Fat_SFlt is\n-   pragma Pure;\n+package System.Val_Flt is\n+   pragma Preelaborate;\n \n-   --  Note the only entity from this package that is accessed by Rtsfind\n-   --  is the name of the package instantiation. Entities within this package\n-   --  (i.e. the individual floating-point attribute routines) are accessed\n-   --  by name using selected notation.\n+   package Impl is new Val_Real (Float, Interfaces.Unsigned_32);\n \n-   package Attr_Short_Float is new System.Fat_Gen (Short_Float);\n+   function Scan_Float\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Float\n+     renames Impl.Scan_Real;\n \n-end System.Fat_SFlt;\n+   function Value_Float (Str : String) return Float\n+     renames Impl.Value_Real;\n+\n+end System.Val_Flt;", "previous_filename": "gcc/ada/libgnat/s-fatsfl.ads"}, {"sha": "5bb6da478670c8dcfc1607311813084489c288b9", "filename": "gcc/ada/libgnat/s-vallfl.ads", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -0,0 +1,52 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . V A L _ L F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains routines for scanning real values for floating point\n+--  type Long_Float, for use in Text_IO.Float_IO and the Value attribute.\n+\n+with Interfaces;\n+with System.Val_Real;\n+\n+package System.Val_LFlt is\n+   pragma Preelaborate;\n+\n+   package Impl is new Val_Real (Long_Float, Interfaces.Unsigned_64);\n+\n+   function Scan_Long_Float\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Long_Float\n+     renames Impl.Scan_Real;\n+\n+   function Value_Long_Float (Str : String) return Long_Float\n+     renames Impl.Value_Real;\n+\n+end System.Val_LFlt;"}, {"sha": "715f6acba78ccf2d4fed4c7c07a79fadadf4b46b", "filename": "gcc/ada/libgnat/s-valllf.ads", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valllf.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -0,0 +1,52 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . V A L _ L L F                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains routines for scanning real values for floating point\n+--  type Long_Long_Float, for use in Text_IO.Float_IO and the Value attribute.\n+\n+with Interfaces;\n+with System.Val_Real;\n+\n+package System.Val_LLF is\n+   pragma Preelaborate;\n+\n+   package Impl is new Val_Real (Long_Long_Float, Interfaces.Unsigned_64);\n+\n+   function Scan_Long_Long_Float\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Long_Long_Float\n+     renames Impl.Scan_Real;\n+\n+   function Value_Long_Long_Float (Str : String) return Long_Long_Float\n+     renames Impl.Value_Real;\n+\n+end System.Val_LLF;"}, {"sha": "cd02dfea5f64954e718ea9d03547cfd489d284e3", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -36,14 +36,14 @@ with System.Value_R;\n \n package body System.Val_Real is\n \n-   package Impl is new Value_R (Long_Long_Unsigned, Floating => True);\n+   package Impl is new Value_R (Uns, Floating => True);\n \n    function Integer_to_Real\n      (Str   : String;\n-      Val   : Long_Long_Unsigned;\n+      Val   : Uns;\n       Base  : Unsigned;\n       Scale : Integer;\n-      Minus : Boolean) return Long_Long_Float;\n+      Minus : Boolean) return Num;\n    --  Convert the real value from integer to real representation\n \n    ---------------------\n@@ -52,26 +52,34 @@ package body System.Val_Real is\n \n    function Integer_to_Real\n      (Str   : String;\n-      Val   : Long_Long_Unsigned;\n+      Val   : Uns;\n       Base  : Unsigned;\n       Scale : Integer;\n-      Minus : Boolean) return Long_Long_Float\n+      Minus : Boolean) return Num\n    is\n+      pragma Assert (Base in 2 .. 16);\n+\n       pragma Unsuppress (Range_Check);\n \n-      R_Val : Long_Long_Float;\n+      R_Val : Num;\n \n    begin\n       --  We call the floating-point processor reset routine so we can be sure\n-      --  that the processor is properly set for conversions. This is notably\n+      --  that the x87 FPU is properly set for conversions. This is especially\n       --  needed on Windows, where calls to the operating system randomly reset\n       --  the processor into 64-bit mode.\n \n-      System.Float_Control.Reset;\n+      if Num'Machine_Mantissa = 64 then\n+         System.Float_Control.Reset;\n+      end if;\n \n-      --  Compute the final value\n+      --  Compute the final value with a single rounding if possible\n \n-      R_Val := Long_Long_Float (Val) * Long_Long_Float (Base) ** Scale;\n+      if Scale < 0 then\n+         R_Val := Num (Val) / Num (Base) ** (-Scale);\n+      else\n+         R_Val := Num (Val) * Num (Base) ** Scale;\n+      end if;\n \n       --  Finally deal with initial minus sign, note that this processing is\n       --  done even if Uval is zero, so that -0.0 is correctly interpreted.\n@@ -87,16 +95,16 @@ package body System.Val_Real is\n    ---------------\n \n    function Scan_Real\n-      (Str : String;\n-       Ptr : not null access Integer;\n-       Max : Integer)\n-      return Long_Long_Float\n+     (Str : String;\n+      Ptr : not null access Integer;\n+      Max : Integer) return Num\n    is\n       Base  : Unsigned;\n       Scale : Integer;\n       Extra : Unsigned;\n+      pragma Unreferenced (Extra);\n       Minus : Boolean;\n-      Val   : Long_Long_Unsigned;\n+      Val   : Uns;\n \n    begin\n       Val := Impl.Scan_Raw_Real (Str, Ptr, Max, Base, Scale, Extra, Minus);\n@@ -108,12 +116,13 @@ package body System.Val_Real is\n    -- Value_Real --\n    ----------------\n \n-   function Value_Real (Str : String) return Long_Long_Float is\n+   function Value_Real (Str : String) return Num is\n       Base  : Unsigned;\n       Scale : Integer;\n       Extra : Unsigned;\n+      pragma Unreferenced (Extra);\n       Minus : Boolean;\n-      Val   : Long_Long_Unsigned;\n+      Val   : Uns;\n \n    begin\n       Val := Impl.Value_Raw_Real (Str, Base, Scale, Extra, Minus);"}, {"sha": "961c4803a84caa706a902d280dda4b367fbf4b42", "filename": "gcc/ada/libgnat/s-valrea.ads", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -29,13 +29,22 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This package contains routines for scanning real values for use in\n+--  Text_IO.Float_IO and the Value attribute.\n+\n+generic\n+\n+   type Num is digits <>;\n+\n+   type Uns is mod <>;\n+\n package System.Val_Real is\n    pragma Preelaborate;\n \n    function Scan_Real\n      (Str : String;\n       Ptr : not null access Integer;\n-      Max : Integer) return Long_Long_Float;\n+      Max : Integer) return Num;\n    --  This function scans the string starting at Str (Ptr.all) for a valid\n    --  real literal according to the syntax described in (RM 3.5(43)). The\n    --  substring scanned extends no further than Str (Max). There are three\n@@ -65,10 +74,10 @@ package System.Val_Real is\n    --  If this occurs Program_Error is raised with a message noting that this\n    --  case is not supported. Most such cases are eliminated by the caller.\n \n-   function Value_Real (Str : String) return Long_Long_Float;\n+   function Value_Real (Str : String) return Num;\n    --  Used in computing X'Value (Str) where X is a floating-point type or an\n    --  ordinary fixed-point type. Str is the string argument of the attribute.\n    --  Constraint_Error is raised if the string is malformed, or if the value\n-   --  out of range of Long_Long_Float.\n+   --  out of range of Num.\n \n end System.Val_Real;"}, {"sha": "04b064fbe08e59e72f0b63d88a04ac1d96a284cc", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -33,11 +33,7 @@ with System.Val_Util; use System.Val_Util;\n \n package body System.Value_R is\n \n-   F_Limit : constant Uns := 2 ** (Long_Long_Float'Machine_Mantissa - 1);\n-   I_Limit : constant Uns := 2 ** (Uns'Size - 1);\n-   --  Absolute value of largest representable signed integer\n-\n-   Precision_Limit : constant Uns := (if Floating then F_Limit else I_Limit);\n+   Precision_Limit : constant Uns := 2 ** (Uns'Size - 1);\n    --  Limit beyond which additional digits are dropped\n \n    subtype Char_As_Digit is Unsigned range 0 .. 17;\n@@ -133,6 +129,8 @@ package body System.Value_R is\n \n    is\n       pragma Assert (Base in 2 .. 16);\n+      pragma Assert (Index in Str'Range);\n+      pragma Assert (Max <= Str'Last);\n \n       Umax : constant Uns := (Precision_Limit - Uns (Base) + 1) / Uns (Base);\n       --  Max value which cannot overflow on accumulating next digit\n@@ -144,8 +142,9 @@ package body System.Value_R is\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n-      Precision_Limit_Just_Reached : Boolean := False;\n+      Precision_Limit_Just_Reached : Boolean;\n       --  Set to True if Precision_Limit_Reached was just set to True\n+      --  Only used when Floating = False.\n \n       Digit : Char_As_Digit;\n       --  The current digit\n@@ -166,6 +165,10 @@ package body System.Value_R is\n          Extra := 0;\n       end if;\n \n+      if not Floating then\n+         Precision_Limit_Just_Reached := False;\n+      end if;\n+\n       --  The function precondition is that the first character is a valid\n       --  digit.\n \n@@ -194,7 +197,7 @@ package body System.Value_R is\n          --  continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n-            if Precision_Limit_Just_Reached and then not Floating then\n+            if not Floating and then Precision_Limit_Just_Reached then\n                if Digit >= Base / 2 then\n                   if Extra = Base - 1 then\n                      Extra := 0;\n@@ -244,7 +247,10 @@ package body System.Value_R is\n                else\n                   Extra := Digit;\n                   Precision_Limit_Reached := True;\n-                  Precision_Limit_Just_Reached := True;\n+\n+                  if not Floating then\n+                     Precision_Limit_Just_Reached := True;\n+                  end if;\n                end if;\n             end if;\n          end if;\n@@ -308,8 +314,9 @@ package body System.Value_R is\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n-      Precision_Limit_Just_Reached : Boolean := False;\n-      --  Set to True if Precision_Limit_Reached was just set to True\n+      Precision_Limit_Just_Reached : Boolean;\n+      --  Set to True if Precision_Limit_Reached was just set to True.\n+      --  Only used when Floating = False.\n \n       Digit : Char_As_Digit;\n       --  The current digit\n@@ -324,6 +331,12 @@ package body System.Value_R is\n       Scale := 0;\n       Extra := 0;\n \n+      if not Floating then\n+         Precision_Limit_Just_Reached := False;\n+      end if;\n+\n+      pragma Assert (Max <= Str'Last);\n+\n       --  The function precondition is that the first character is a valid\n       --  digit.\n \n@@ -354,7 +367,7 @@ package body System.Value_R is\n          if Precision_Limit_Reached then\n             Scale := Scale + 1;\n \n-            if Precision_Limit_Just_Reached and then not Floating then\n+            if not Floating and then Precision_Limit_Just_Reached then\n                if Digit >= Base / 2 then\n                   if Extra = Base - 1 then\n                      Extra := 0;\n@@ -378,7 +391,11 @@ package body System.Value_R is\n             else\n                Extra := Digit;\n                Precision_Limit_Reached := True;\n-               Precision_Limit_Just_Reached := True;\n+\n+               if not Floating then\n+                  Precision_Limit_Just_Reached := True;\n+               end if;\n+\n                Scale := Scale + 1;\n             end if;\n          end if;\n@@ -409,7 +426,6 @@ package body System.Value_R is\n             end if;\n          end if;\n       end loop;\n-\n    end Scan_Integral_Digits;\n \n    -------------------\n@@ -425,6 +441,8 @@ package body System.Value_R is\n       Extra : out Unsigned;\n       Minus : out Boolean) return Uns\n    is\n+      pragma Assert (Max <= Str'Last);\n+\n       After_Point : Boolean;\n       --  True if a decimal should be parsed\n \n@@ -440,7 +458,7 @@ package body System.Value_R is\n       --  Local copy of string pointer\n \n       Start : Positive;\n-      --  Position of starting non-blank character\n+      pragma Unreferenced (Start);\n \n       Value : Uns;\n       --  Mantissa as an Integer\n@@ -461,14 +479,15 @@ package body System.Value_R is\n \n       Scan_Sign (Str, Ptr, Max, Minus, Start);\n       Index := Ptr.all;\n-      Ptr.all := Start;\n \n-      --  First character can be either a decimal digit or a dot\n+      pragma Assert (Index >= Str'First);\n \n-      if Str (Index) in '0' .. '9' then\n-         pragma Annotate\n-           (CodePeer, False_Positive, \"test always true\", \"defensive code\");\n+      pragma Annotate (CodePeer, Modified, Str (Index));\n+\n+      --  First character can be either a decimal digit or a dot and for some\n+      --  reason CodePeer incorrectly thinks it is always a digit.\n \n+      if Str (Index) in '0' .. '9' then\n          After_Point := False;\n \n          --  If this is a digit it can indicates either the float decimal\n@@ -496,13 +515,16 @@ package body System.Value_R is\n \n       --  Check if the first number encountered is a base\n \n+      pragma Assert (Index >= Str'First);\n+\n       if Index < Max\n         and then (Str (Index) = '#' or else Str (Index) = ':')\n       then\n          Base_Char := Str (Index);\n-         Base := Unsigned (Value);\n \n-         if Base < 2 or else Base > 16 then\n+         if Value in 2 .. 16 then\n+            Base := Unsigned (Value);\n+         else\n             Base_Violation := True;\n             Base := 16;\n          end if;\n@@ -533,6 +555,8 @@ package body System.Value_R is\n \n       --  Do we have a dot?\n \n+      pragma Assert (Index >= Str'First);\n+\n       if not After_Point and then Index <= Max and then Str (Index) = '.' then\n \n          --  At this stage if After_Point was not set, this means that an\n@@ -549,6 +573,8 @@ package body System.Value_R is\n       --  Scan the decimal part\n \n       if After_Point then\n+         pragma Assert (Index <= Max);\n+\n          Scan_Decimal_Digits\n            (Str, Index, Max, Value, Scale, Char_As_Digit (Extra),\n             Base_Violation, Base, Base_Specified => Base_Char /= ASCII.NUL);\n@@ -557,6 +583,8 @@ package body System.Value_R is\n       --  If an explicit base was specified ensure that the delimiter is found\n \n       if Base_Char /= ASCII.NUL then\n+         pragma Assert (Index > Max or else Index in Str'Range);\n+\n          if Index > Max or else Str (Index) /= Base_Char then\n             Bad_Value (Str);\n          else"}, {"sha": "27bbe0915ee3c3466a8d81b662e73eed40a3f4df", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338e513351c03cf66197e8316a69d5459e52f9ed/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=338e513351c03cf66197e8316a69d5459e52f9ed", "patch": "@@ -239,8 +239,6 @@ package Rtsfind is\n       System_Exp_Mod,\n       System_Exp_Uns,\n       System_Fat_Flt,\n-      System_Fat_IEEE_Long_Float,\n-      System_Fat_IEEE_Short_Float,\n       System_Fat_LFlt,\n       System_Fat_LLF,\n       System_Fat_SFlt,\n@@ -434,13 +432,15 @@ package Rtsfind is\n       System_Val_Fixed_32,\n       System_Val_Fixed_64,\n       System_Val_Fixed_128,\n+      System_Val_Flt,\n       System_Val_Int,\n+      System_Val_LFlt,\n+      System_Val_LLF,\n       System_Val_LLI,\n       System_Val_LLLI,\n       System_Val_LLU,\n       System_Val_LLLU,\n       System_Val_Name,\n-      System_Val_Real,\n       System_Val_Uns,\n       System_Val_WChar,\n       System_Version_Control,\n@@ -925,18 +925,10 @@ package Rtsfind is\n \n      RE_Attr_Float,                      -- System.Fat_Flt\n \n-     RE_Attr_IEEE_Long,                  -- System.Fat_IEEE_Long_Float\n-     RE_Fat_IEEE_Long,                   -- System.Fat_IEEE_Long_Float\n-\n-     RE_Attr_IEEE_Short,                 -- System.Fat_IEEE_Short_Float\n-     RE_Fat_IEEE_Short,                  -- System.Fat_IEEE_Short_Float\n-\n      RE_Attr_Long_Float,                 -- System.Fat_LFlt\n \n      RE_Attr_Long_Long_Float,            -- System.Fat_LLF\n \n-     RE_Attr_Short_Float,                -- System.Fat_SFlt\n-\n      RE_Attr_VAX_D_Float,                -- System.Fat_VAX_D_Float\n      RE_Fat_VAX_D,                       -- System.Fat_VAX_D_Float\n \n@@ -2045,8 +2037,14 @@ package Rtsfind is\n \n      RE_Value_Fixed128,                  -- System_Val_Fixed_128\n \n+     RE_Value_Float,                     -- System_Val_Flt\n+\n      RE_Value_Integer,                   -- System.Val_Int\n \n+     RE_Value_Long_Float,                -- System_Val_LFlt\n+\n+     RE_Value_Long_Long_Float,           -- System_Val_LLF\n+\n      RE_Value_Long_Long_Integer,         -- System.Val_LLI\n \n      RE_Value_Long_Long_Long_Integer,    -- System.Val_LLLI\n@@ -2055,8 +2053,6 @@ package Rtsfind is\n \n      RE_Value_Long_Long_Long_Unsigned,   -- System.Val_LLLU\n \n-     RE_Value_Real,                      -- System.Val_Real\n-\n      RE_Value_Unsigned,                  -- System.Val_Uns\n \n      RE_Value_Wide_Character,            -- System.Val_WChar\n@@ -2610,18 +2606,10 @@ package Rtsfind is\n \n      RE_Attr_Float                       => System_Fat_Flt,\n \n-     RE_Attr_IEEE_Long                   => System_Fat_IEEE_Long_Float,\n-     RE_Fat_IEEE_Long                    => System_Fat_IEEE_Long_Float,\n-\n-     RE_Attr_IEEE_Short                  => System_Fat_IEEE_Short_Float,\n-     RE_Fat_IEEE_Short                   => System_Fat_IEEE_Short_Float,\n-\n      RE_Attr_Long_Float                  => System_Fat_LFlt,\n \n      RE_Attr_Long_Long_Float             => System_Fat_LLF,\n \n-     RE_Attr_Short_Float                 => System_Fat_SFlt,\n-\n      RE_Attr_VAX_D_Float                 => System_Fat_VAX_D_Float,\n      RE_Fat_VAX_D                        => System_Fat_VAX_D_Float,\n \n@@ -3730,8 +3718,14 @@ package Rtsfind is\n \n      RE_Value_Fixed128                   => System_Val_Fixed_128,\n \n+     RE_Value_Float                      => System_Val_Flt,\n+\n      RE_Value_Integer                    => System_Val_Int,\n \n+     RE_Value_Long_Float                 => System_Val_LFlt,\n+\n+     RE_Value_Long_Long_Float            => System_Val_LLF,\n+\n      RE_Value_Long_Long_Integer          => System_Val_LLI,\n \n      RE_Value_Long_Long_Long_Integer     => System_Val_LLLI,\n@@ -3740,8 +3734,6 @@ package Rtsfind is\n \n      RE_Value_Long_Long_Long_Unsigned    => System_Val_LLLU,\n \n-     RE_Value_Real                       => System_Val_Real,\n-\n      RE_Value_Unsigned                   => System_Val_Uns,\n \n      RE_Value_Wide_Character             => System_Val_WChar,"}]}