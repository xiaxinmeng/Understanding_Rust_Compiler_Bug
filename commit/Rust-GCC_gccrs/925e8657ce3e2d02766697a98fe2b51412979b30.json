{"sha": "925e8657ce3e2d02766697a98fe2b51412979b30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1ZTg2NTdjZTNlMmQwMjc2NjY5N2E5OGZlMmI1MTQxMjk3OWIzMA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-15T18:46:42Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-15T18:46:42Z"}, "message": "In gcc/: 2010-11-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-typeck.c (build_unary_op): Use\n        objc_build_incr_expr_for_property_ref to build the pre/post\n        increment/decrement of an Objective-C property ref, and skip the\n        lvalue_or_else check in that case.\n\nIn gcc/c-family/:\n2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-common.h (objc_build_incr_expr_for_property_ref): New.\n        * stub-objc.c (objc_build_incr_expr_for_property_ref): New.\n\nIn gcc/cp/:\n2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * typeck.c (cp_build_unary_op): Use\n        objc_build_incr_expr_for_property_ref to build the pre/post\n        increment/decrement of an Objective-C property ref.\n\nIn gcc/objc/:\n2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (objc_build_incr_expr_for_property_ref): New.\n        (objc_create_temporary_var): Moved it towards the beginning of the\n        file so that objc_build_incr_expr_for_property_ref can use it.\n\nIn gcc/testsuite/:\n2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/property/dotsyntax-16.m: New.\n        * objc.dg/property/dotsyntax-17.m: New.\n        * obj-c++.dg/property/dotsyntax-16.mm: New.\n        * obj-c++.dg/property/dotsyntax-17.mm: New.\n        * objc.dg/property/at-property-10.m: Uncommented using 'x++'\n        syntax with properties, which now works.\n        * obj-c++.dg/property/at-property-10.mm: Same change.\n\nFrom-SVN: r166763", "tree": {"sha": "c064bc86c2dd877b014c5bb9bac5ed26f06dcd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c064bc86c2dd877b014c5bb9bac5ed26f06dcd5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/925e8657ce3e2d02766697a98fe2b51412979b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925e8657ce3e2d02766697a98fe2b51412979b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925e8657ce3e2d02766697a98fe2b51412979b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925e8657ce3e2d02766697a98fe2b51412979b30/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1"}], "stats": {"total": 570, "additions": 527, "deletions": 43}, "files": [{"sha": "5f7d0c5cc34498941ccf0d776f68e66a5e9b3a99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1,3 +1,10 @@\n+2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-typeck.c (build_unary_op): Use\n+\tobjc_build_incr_expr_for_property_ref to build the pre/post\n+\tincrement/decrement of an Objective-C property ref, and skip the\n+\tlvalue_or_else check in that case.\n+\n 2010-11-15  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/46349"}, {"sha": "a66f37acefd581650e7e1fd999b7583e2c29426e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1,3 +1,8 @@\n+2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (objc_build_incr_expr_for_property_ref): New.\n+\t* stub-objc.c (objc_build_incr_expr_for_property_ref): New.\n+\n 2010-11-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR preprocessor/45038"}, {"sha": "cddad17348fee0de75ccc7d354f218f17fd64123", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1040,6 +1040,8 @@ extern void objc_add_property_declaration (location_t, tree, bool, bool, bool,\n extern tree objc_maybe_build_component_ref (tree, tree);\n extern tree objc_build_class_component_ref (tree, tree);\n extern tree objc_maybe_build_modify_expr (tree, tree);\n+extern tree objc_build_incr_expr_for_property_ref (location_t, enum tree_code, \n+\t\t\t\t\t\t   tree, tree);\n extern void objc_add_synthesize_declaration (location_t, tree);\n extern void objc_add_dynamic_declaration (location_t, tree);\n extern const char * objc_maybe_printable_name (tree, int);"}, {"sha": "5cd6e6d6e79eac89ac3556591cb40740902c0186", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -361,6 +361,15 @@ objc_maybe_build_modify_expr (tree ARG_UNUSED (lhs), tree ARG_UNUSED (rhs))\n   return 0;\n }\n \n+tree\n+objc_build_incr_expr_for_property_ref (location_t ARG_UNUSED (location),\n+\t\t\t\t       enum tree_code ARG_UNUSED (code),\n+\t\t\t\t       tree ARG_UNUSED (argument),\n+\t\t\t\t       tree ARG_UNUSED (increment))\n+{\n+  return 0;\n+}\n+\n void\n objc_add_synthesize_declaration (location_t ARG_UNUSED (start_locus), \n \t\t\t\t tree ARG_UNUSED (property_and_ivar_list))"}, {"sha": "2bfa97be68e6b238f9741b9e79b1945151fdf0da", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -3603,11 +3603,13 @@ build_unary_op (location_t location,\n \t  goto return_build_unary_op;\n \t}\n \n-      /* Complain about anything that is not a true lvalue.  */\n-      if (!lvalue_or_else (arg, ((code == PREINCREMENT_EXPR\n-\t\t\t\t  || code == POSTINCREMENT_EXPR)\n-\t\t\t\t ? lv_increment\n-\t\t\t\t : lv_decrement)))\n+      /* Complain about anything that is not a true lvalue.  In\n+\t Objective-C, skip this check for property_refs.  */\n+      if (!objc_is_property_ref (arg) \n+\t  && !lvalue_or_else (arg, ((code == PREINCREMENT_EXPR\n+\t\t\t\t     || code == POSTINCREMENT_EXPR)\n+\t\t\t\t    ? lv_increment\n+\t\t\t\t    : lv_decrement)))\n \treturn error_mark_node;\n \n       if (warn_cxx_compat && TREE_CODE (TREE_TYPE (arg)) == ENUMERAL_TYPE)\n@@ -3715,6 +3717,13 @@ build_unary_op (location_t location,\n \t    inc = convert (argtype, inc);\n \t  }\n \n+\t/* If 'arg' is an Objective-C PROPERTY_REF expression, then we\n+\t   need to ask Objective-C to build the increment or decrement\n+\t   expression for it.  */\n+\tif (objc_is_property_ref (arg))\n+\t  return objc_build_incr_expr_for_property_ref (location, code, \n+\t\t\t\t\t\t\targ, inc);\n+\n \t/* Report a read-only lvalue.  */\n \tif (TYPE_READONLY (argtype))\n \t  {"}, {"sha": "cdbec790eef4b2a38b960be875096faef2d50361", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1,3 +1,9 @@\n+2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* typeck.c (cp_build_unary_op): Use\n+\tobjc_build_incr_expr_for_property_ref to build the pre/post\n+\tincrement/decrement of an Objective-C property ref.\n+\n 2010-11-13  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_finish_decl): Use resolve_nondeduced_context for auto."}, {"sha": "92a7d9ed6deabde68bb3be89314d7ad84a4983de", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -5233,6 +5233,13 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \n \tinc = cp_convert (argtype, inc);\n \n+\t/* If 'arg' is an Objective-C PROPERTY_REF expression, then we\n+\t   need to ask Objective-C to build the increment or decrement\n+\t   expression for it.  */\n+\tif (objc_is_property_ref (arg))\n+\t  return objc_build_incr_expr_for_property_ref (input_location, code, \n+\t\t\t\t\t\t\targ, inc);\t\n+\n \t/* Complain about anything else that is not a true lvalue.  */\n \tif (!lvalue_or_else (arg, ((code == PREINCREMENT_EXPR\n \t\t\t\t    || code == POSTINCREMENT_EXPR)"}, {"sha": "c5103faddcdb58ff2775d70fd708d75ad93f075e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1,3 +1,9 @@\n+2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_build_incr_expr_for_property_ref): New.\n+\t(objc_create_temporary_var): Moved it towards the beginning of the\n+\tfile so that objc_build_incr_expr_for_property_ref can use it.\n+\n 2010-11-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_add_property_declaration): Check that the decl"}, {"sha": "8f953b66434a10bb9631c572c00c7180c8e16f4b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 137, "deletions": 26, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -485,6 +485,33 @@ add_field_decl (tree type, const char *name, tree **chain)\n   return field;\n }\n \n+/* Create a temporary variable of type 'type'.  If 'name' is set, uses\n+   the specified name, else use no name.  Returns the declaration of\n+   the type.  The 'name' is mostly useful for debugging.\n+*/\n+static tree\n+objc_create_temporary_var (tree type, const char *name)\n+{\n+  tree decl;\n+\n+  if (name != NULL)\n+    {\n+      decl = build_decl (input_location,\n+\t\t\t VAR_DECL, get_identifier (name), type);\n+    }\n+  else\n+    {\n+      decl = build_decl (input_location,\n+\t\t\t VAR_DECL, NULL_TREE, type);\n+    }\n+  TREE_USED (decl) = 1;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  DECL_CONTEXT (decl) = current_function_decl;\n+\n+  return decl;\n+}\n+\n /* Some platforms pass small structures through registers versus\n    through an invisible pointer.  Determine at what size structure is\n    the transition point between the two possibilities.  */\n@@ -1766,6 +1793,116 @@ objc_maybe_build_modify_expr (tree lhs, tree rhs)\n     return NULL_TREE;\n }\n \n+/* This hook is called by the frontend when one of the four unary\n+   expressions PREINCREMENT_EXPR, POSTINCREMENT_EXPR,\n+   PREDECREMENT_EXPR and POSTDECREMENT_EXPR is being built with an\n+   argument which is a PROPERTY_REF.  For example, this happens if you have\n+\n+   object.count++;\n+\n+   where 'count' is a property.  We need to use the 'getter' and\n+   'setter' for the property in an appropriate way to build the\n+   appropriate expression.  'code' is the code for the expression (one\n+   of the four mentioned above); 'argument' is the PROPERTY_REF, and\n+   'increment' is how much we need to add or subtract.  */   \n+tree\n+objc_build_incr_expr_for_property_ref (location_t location,\n+\t\t\t\t       enum tree_code code, \n+\t\t\t\t       tree argument, tree increment)\n+{\n+  /* Here are the expressions that we want to build:\n+\n+     For PREINCREMENT_EXPR / PREDECREMENT_EXPR:\n+    (temp = [object property] +/- increment, [object setProperty: temp], temp)\n+    \n+    For POSTINCREMENT_EXPR / POSTECREMENT_EXPR:\n+    (temp = [object property], [object setProperty: temp +/- increment], temp) */\n+  \n+  tree temp_variable_decl, bind;\n+  /* s1, s2 and s3 are the tree statements that we need in the\n+     compound expression.  */\n+  tree s1, s2, s3;\n+  \n+  /* Safety check.  */\n+  if (!argument || TREE_CODE (argument) != PROPERTY_REF)\n+    return error_mark_node;\n+\n+  /* Declare __objc_property_temp in a local bind.  */\n+  temp_variable_decl = objc_create_temporary_var (TREE_TYPE (argument), \"__objc_property_temp\");\n+  DECL_SOURCE_LOCATION (temp_variable_decl) = location;\n+  bind = build3 (BIND_EXPR, void_type_node, temp_variable_decl, NULL, NULL);\n+  SET_EXPR_LOCATION (bind, location);\n+  TREE_SIDE_EFFECTS (bind) = 1;\n+  add_stmt (bind);\n+  \n+  /* Now build the compound statement.  */\n+  \n+  /* Note that the 'getter' is generated at gimplify time; at this\n+     time, we can simply put the property_ref (ie, argument) wherever\n+     we want the getter ultimately to be.  */\n+  \n+  /* s1: __objc_property_temp = [object property] <+/- increment> */\n+  switch (code)\n+    {\n+    case PREINCREMENT_EXPR:\t \n+      /* __objc_property_temp = [object property] + increment */\n+      s1 = build2 (MODIFY_EXPR, void_type_node, temp_variable_decl,\n+\t\t   build2 (PLUS_EXPR, TREE_TYPE (argument), argument, increment));\n+      break;\n+    case PREDECREMENT_EXPR:\n+      /* __objc_property_temp = [object property] - increment */\n+      s1 = build2 (MODIFY_EXPR, void_type_node, temp_variable_decl,\n+\t\t   build2 (MINUS_EXPR, TREE_TYPE (argument), argument, increment));\n+      break;\n+    case POSTINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+      /* __objc_property_temp = [object property] */\n+      s1 = build2 (MODIFY_EXPR, void_type_node, temp_variable_decl, argument);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  SET_EXPR_LOCATION (s1, location);\n+  \n+  /* s2: [object setProperty: __objc_property_temp <+/- increment>] */\n+  switch (code)\n+    {\n+    case PREINCREMENT_EXPR:\t \n+    case PREDECREMENT_EXPR:\n+      /* [object setProperty: __objc_property_temp] */\n+      s2 = objc_maybe_build_modify_expr (argument, temp_variable_decl);\n+      break;\n+    case POSTINCREMENT_EXPR:\n+      /* [object setProperty: __objc_property_temp + increment] */\n+      s2 = objc_maybe_build_modify_expr (argument,\n+\t\t\t\t\t build2 (PLUS_EXPR, TREE_TYPE (argument), \n+\t\t\t\t\t\t temp_variable_decl, increment));\n+      break;\n+    case POSTDECREMENT_EXPR:\n+      /* [object setProperty: __objc_property_temp - increment] */\n+      s2 = objc_maybe_build_modify_expr (argument,\n+\t\t\t\t\t build2 (MINUS_EXPR, TREE_TYPE (argument), \n+\t\t\t\t\t\t temp_variable_decl, increment));\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* This happens if building the setter failed because the property\n+     is readonly.  */\n+  if (s2 == error_mark_node)\n+    return error_mark_node;\n+\n+  SET_EXPR_LOCATION (s2, location); \n+  \n+  /* s3: __objc_property_temp */\n+  s3 = build1 (NOP_EXPR, TREE_TYPE (argument), temp_variable_decl);\n+  SET_EXPR_LOCATION (s3, location); \n+  \n+  /* Now build the compound statement (s1, s2, s3) */\n+  return build_compound_expr (location, build_compound_expr (location, s1, s2), s3);\n+}\n+\n tree\n objc_build_method_signature (bool is_class_method, tree rettype, tree selector,\n \t\t\t     tree optparms, bool ellipsis)\n@@ -4658,32 +4795,6 @@ get_class_ivars (tree interface, bool inherited)\n   return ivar_chain;\n }\n \n-/* Create a temporary variable of type 'type'.  If 'name' is set, uses\n-   the specified name, else use no name.  Returns the declaration of\n-   the type.  The 'name' is mostly useful for debugging.\n-*/\n-static tree\n-objc_create_temporary_var (tree type, const char *name)\n-{\n-  tree decl;\n-\n-  if (name != NULL)\n-    {\n-      decl = build_decl (input_location,\n-\t\t\t VAR_DECL, get_identifier (name), type);\n-    }\n-  else\n-    {\n-      decl = build_decl (input_location,\n-\t\t\t VAR_DECL, NULL_TREE, type);\n-    }\n-  TREE_USED (decl) = 1;\n-  DECL_ARTIFICIAL (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  DECL_CONTEXT (decl) = current_function_decl;\n-\n-  return decl;\n-}\n \f\n /* Exception handling constructs.  We begin by having the parser do most\n    of the work and passing us blocks.  What we do next depends on whether"}, {"sha": "c855ae3aa039332b981652d965b9a081da8924c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -1,3 +1,13 @@\n+2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/property/dotsyntax-16.m: New.\n+\t* objc.dg/property/dotsyntax-17.m: New.\t\n+\t* obj-c++.dg/property/dotsyntax-16.mm: New.\n+\t* obj-c++.dg/property/dotsyntax-17.mm: New.\t\n+\t* objc.dg/property/at-property-10.m: Uncommented using 'x++'\n+\tsyntax with properties, which now works.\n+\t* obj-c++.dg/property/at-property-10.mm: Same change.\n+\t\n 2010-11-15  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/46349"}, {"sha": "010c41bd396f10ee27b07291f6306ad6e0092553", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-10.mm", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-10.mm?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -44,9 +44,7 @@ int main (void)\n     abort ();\n \n   object.a = 99;\n-  /* TODO: The following one does not work yet.  */\n-  /* object.a++; */\n-  object.a = object.a + 1;\n+  object.a++;\n \n   if (object.a != 100)\n     abort ();\n@@ -83,9 +81,7 @@ int main (void)\n   if (object.a != -198)\n     abort ();\n \n-  /* TODO: The following one does not work yet.  */\n-  /* for (object.a = 0; object.a < 99; object.a++) */\n-  for (object.a = 0; object.a < 99; object.a = object.a + 1)\n+  for (object.a = 0; object.a < 99; object.a++)\n     object2.a = object.a;\n \n   if (object2.a != object.a - 1)"}, {"sha": "e0ae3f6edeb648b56f1f76cbaede14c0d666d96a", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-16.mm", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-16.mm?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -0,0 +1,92 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test dot-syntax with pre/post increment and decrement.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int a;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+- (int) count;\n+- (void) setCount: (int)count;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+- (int) count\n+{\n+  return a;\n+}\n+- (void) setCount: (int)count\n+{\n+  a = count;\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+  int i;\n+\n+  object.count = 10;\n+  if (object.count != 10)\n+    abort ();\n+\n+  /* First, test that they increment/decrement as expected.  */\n+  object.count++;\n+  if (object.count != 11)\n+    abort ();\n+\n+  ++object.count;\n+  if (object.count != 12)\n+    abort ();\n+\n+  object.count--;\n+  if (object.count != 11)\n+    abort ();\n+\n+  --object.count;\n+  if (object.count != 10)\n+    abort ();\n+\n+  /* Now, test that they are pre/post increment/decrement, as\n+     expected.  */\n+  if (object.count++ != 10)\n+    abort ();\n+\n+  if (object.count != 11)\n+    abort ();\n+\n+  if (++object.count != 12)\n+    abort ();\n+\n+  if (object.count != 12)\n+    abort ();\n+\n+  if (object.count-- != 12)\n+    abort ();\n+\n+  if (object.count != 11)\n+    abort ();\n+\n+  if (--object.count != 10)\n+    abort ();\n+\n+  if (object.count != 10)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "f3942fccb11b1bf53b66c341bfde5d60e02ee080", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-17.mm", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -0,0 +1,68 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test errors with the dot-syntax with pre/post increment and decrement.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int count;\n+  int a;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property (assign, readonly) int count;\n+- (void) setWriteOnlyCount: (int)value;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize count;\n+- (void) setWriteOnlyCount: (int)value\n+{\n+  a = value;\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+  int i;\n+\n+  object.count = 10; /* { dg-error \"readonly property can not be set\" } */\n+  if (object.count != 10) /* Ok */\n+    abort ();\n+\n+  /* Test errors when trying to change a readonly property using\n+     pre/post increment/decrement operators.  */\n+  object.count++; /* { dg-error \"readonly property can not be set\" } */\n+\n+  ++object.count; /* { dg-error \"readonly property can not be set\" } */\n+\n+  object.count--; /* { dg-error \"readonly property can not be set\" } */\n+\n+  --object.count; /* { dg-error \"readonly property can not be set\" } */\n+\n+  /* Test errors when trying to change something using Objective-C 2.0\n+     dot-syntax but there is a setter but no getter.  */\n+  object.writeOnlyCount = 10; /* Ok */\n+\n+  object.writeOnlyCount++; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  ++object.writeOnlyCount; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  object.writeOnlyCount--; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  --object.writeOnlyCount; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "79d2ecdbbf0354bdf06ddc81cfc1362d61365dee", "filename": "gcc/testsuite/objc.dg/property/at-property-10.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-10.m?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -47,9 +47,7 @@ int main (void)\n     abort ();\n \n   object.a = 99;\n-  /* TODO: The following one does not work yet.  */\n-  /* object.a++; */\n-  object.a = object.a + 1;\n+  object.a++;\n \n   if (object.a != 100)\n     abort ();\n@@ -86,9 +84,7 @@ int main (void)\n   if (object.a != -198)\n     abort ();\n \n-  /* TODO: The following one does not work yet.  */\n-  /* for (object.a = 0; object.a < 99; object.a++) */\n-  for (object.a = 0; object.a < 99; object.a = object.a + 1)\n+  for (object.a = 0; object.a < 99; object.a++)\n     object2.a = object.a;\n \n   if (object2.a != object.a - 1)"}, {"sha": "e0ae3f6edeb648b56f1f76cbaede14c0d666d96a", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-16.m", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-16.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-16.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-16.m?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -0,0 +1,92 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test dot-syntax with pre/post increment and decrement.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int a;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+- (int) count;\n+- (void) setCount: (int)count;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+- (int) count\n+{\n+  return a;\n+}\n+- (void) setCount: (int)count\n+{\n+  a = count;\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+  int i;\n+\n+  object.count = 10;\n+  if (object.count != 10)\n+    abort ();\n+\n+  /* First, test that they increment/decrement as expected.  */\n+  object.count++;\n+  if (object.count != 11)\n+    abort ();\n+\n+  ++object.count;\n+  if (object.count != 12)\n+    abort ();\n+\n+  object.count--;\n+  if (object.count != 11)\n+    abort ();\n+\n+  --object.count;\n+  if (object.count != 10)\n+    abort ();\n+\n+  /* Now, test that they are pre/post increment/decrement, as\n+     expected.  */\n+  if (object.count++ != 10)\n+    abort ();\n+\n+  if (object.count != 11)\n+    abort ();\n+\n+  if (++object.count != 12)\n+    abort ();\n+\n+  if (object.count != 12)\n+    abort ();\n+\n+  if (object.count-- != 12)\n+    abort ();\n+\n+  if (object.count != 11)\n+    abort ();\n+\n+  if (--object.count != 10)\n+    abort ();\n+\n+  if (object.count != 10)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "f3942fccb11b1bf53b66c341bfde5d60e02ee080", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-17.m", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925e8657ce3e2d02766697a98fe2b51412979b30/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m?ref=925e8657ce3e2d02766697a98fe2b51412979b30", "patch": "@@ -0,0 +1,68 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test errors with the dot-syntax with pre/post increment and decrement.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int count;\n+  int a;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property (assign, readonly) int count;\n+- (void) setWriteOnlyCount: (int)value;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize count;\n+- (void) setWriteOnlyCount: (int)value\n+{\n+  a = value;\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+  int i;\n+\n+  object.count = 10; /* { dg-error \"readonly property can not be set\" } */\n+  if (object.count != 10) /* Ok */\n+    abort ();\n+\n+  /* Test errors when trying to change a readonly property using\n+     pre/post increment/decrement operators.  */\n+  object.count++; /* { dg-error \"readonly property can not be set\" } */\n+\n+  ++object.count; /* { dg-error \"readonly property can not be set\" } */\n+\n+  object.count--; /* { dg-error \"readonly property can not be set\" } */\n+\n+  --object.count; /* { dg-error \"readonly property can not be set\" } */\n+\n+  /* Test errors when trying to change something using Objective-C 2.0\n+     dot-syntax but there is a setter but no getter.  */\n+  object.writeOnlyCount = 10; /* Ok */\n+\n+  object.writeOnlyCount++; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  ++object.writeOnlyCount; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  object.writeOnlyCount--; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  --object.writeOnlyCount; /* { dg-error \"no .writeOnlyCount. getter found\" } */\n+\n+  return 0;\n+}\n+\n+"}]}