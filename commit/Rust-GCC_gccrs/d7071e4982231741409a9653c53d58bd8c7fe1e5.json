{"sha": "d7071e4982231741409a9653c53d58bd8c7fe1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwNzFlNDk4MjIzMTc0MTQwOWE5NjUzYzUzZDU4YmQ4YzdmZTFlNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-09-16T17:04:34Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-09-16T17:06:12Z"}, "message": "[i386] Change ix86_decompose_address return type to bool.\n\nAfter a recent change only a boolean value is returned.\n\n2021-09-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386-protos.h (ix86_decompose_address):\n\tChange return type to bool.\n\t* config/i386/i386.c (ix86_decompose_address): Ditto.", "tree": {"sha": "fd600a708fdc71f6594a73062b27cf98d3086efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd600a708fdc71f6594a73062b27cf98d3086efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7071e4982231741409a9653c53d58bd8c7fe1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7071e4982231741409a9653c53d58bd8c7fe1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7071e4982231741409a9653c53d58bd8c7fe1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7071e4982231741409a9653c53d58bd8c7fe1e5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd7e7b33fd576b336ca0bf5ec51f77b32ba51cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd7e7b33fd576b336ca0bf5ec51f77b32ba51cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd7e7b33fd576b336ca0bf5ec51f77b32ba51cc"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "708834ae832662b3948d9ebb4f84287314bb8e8e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7071e4982231741409a9653c53d58bd8c7fe1e5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7071e4982231741409a9653c53d58bd8c7fe1e5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d7071e4982231741409a9653c53d58bd8c7fe1e5", "patch": "@@ -320,7 +320,7 @@ struct ix86_address\n   addr_space_t seg;\n };\n \n-extern int ix86_decompose_address (rtx, struct ix86_address *);\n+extern bool ix86_decompose_address (rtx, struct ix86_address *);\n extern int memory_address_length (rtx, bool);\n extern void x86_output_aligned_bss (FILE *, tree, const char *,\n \t\t\t\t    unsigned HOST_WIDE_INT, unsigned);"}, {"sha": "337ea29178084bac5ec7345b88d9245faf8bad5f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7071e4982231741409a9653c53d58bd8c7fe1e5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7071e4982231741409a9653c53d58bd8c7fe1e5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d7071e4982231741409a9653c53d58bd8c7fe1e5", "patch": "@@ -10101,10 +10101,10 @@ ix86_live_on_entry (bitmap regs)\n }\n \f\n /* Extract the parts of an RTL expression that is a valid memory address\n-   for an instruction.  Return 0 if the structure of the address is\n+   for an instruction.  Return false if the structure of the address is\n    grossly off.  */\n \n-int\n+bool\n ix86_decompose_address (rtx addr, struct ix86_address *out)\n {\n   rtx base = NULL_RTX, index = NULL_RTX, disp = NULL_RTX;\n@@ -10123,17 +10123,17 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t{\n \t  addr = XEXP (addr, 0);\n \t  if (CONST_INT_P (addr))\n-\t    return 0;\n+\t    return false;\n \t}\t      \n       else if (GET_CODE (addr) == AND\n \t       && const_32bit_mask (XEXP (addr, 1), DImode))\n \t{\n \t  addr = lowpart_subreg (SImode, XEXP (addr, 0), DImode);\n \t  if (addr == NULL_RTX)\n-\t    return 0;\n+\t    return false;\n \n \t  if (CONST_INT_P (addr))\n-\t    return 0;\n+\t    return false;\n \t}\n       else if (GET_CODE (addr) == AND)\n \t{\n@@ -10167,7 +10167,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t{\n \t  addr = SUBREG_REG (addr);\n \t  if (CONST_INT_P (addr))\n-\t    return 0;\n+\t    return false;\n \t}\n     }\n \n@@ -10178,7 +10178,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n       if (REG_P (SUBREG_REG (addr)))\n \tbase = addr;\n       else\n-\treturn 0;\n+\treturn false;\n     }\n   else if (GET_CODE (addr) == PLUS)\n     {\n@@ -10189,13 +10189,13 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n       do\n \t{\n \t  if (n >= 4)\n-\t    return 0;\n+\t    return false;\n \t  addends[n++] = XEXP (op, 1);\n \t  op = XEXP (op, 0);\n \t}\n       while (GET_CODE (op) == PLUS);\n       if (n >= 4)\n-\treturn 0;\n+\treturn false;\n       addends[n] = op;\n \n       for (i = n; i >= 0; --i)\n@@ -10205,28 +10205,28 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t    {\n \t    case MULT:\n \t      if (index)\n-\t\treturn 0;\n+\t\treturn false;\n \t      index = XEXP (op, 0);\n \t      scale_rtx = XEXP (op, 1);\n \t      break;\n \n \t    case ASHIFT:\n \t      if (index)\n-\t\treturn 0;\n+\t\treturn false;\n \t      index = XEXP (op, 0);\n \t      tmp = XEXP (op, 1);\n \t      if (!CONST_INT_P (tmp))\n-\t\treturn 0;\n+\t\treturn false;\n \t      scale = INTVAL (tmp);\n \t      if ((unsigned HOST_WIDE_INT) scale > 3)\n-\t\treturn 0;\n+\t\treturn false;\n \t      scale = 1 << scale;\n \t      break;\n \n \t    case ZERO_EXTEND:\n \t      op = XEXP (op, 0);\n \t      if (GET_CODE (op) != UNSPEC)\n-\t\treturn 0;\n+\t\treturn false;\n \t      /* FALLTHRU */\n \n \t    case UNSPEC:\n@@ -10235,12 +10235,12 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t          && seg == ADDR_SPACE_GENERIC)\n \t\tseg = DEFAULT_TLS_SEG_REG;\n \t      else\n-\t\treturn 0;\n+\t\treturn false;\n \t      break;\n \n \t    case SUBREG:\n \t      if (!REG_P (SUBREG_REG (op)))\n-\t\treturn 0;\n+\t\treturn false;\n \t      /* FALLTHRU */\n \n \t    case REG:\n@@ -10249,20 +10249,20 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t      else if (!index)\n \t\tindex = op;\n \t      else\n-\t\treturn 0;\n+\t\treturn false;\n \t      break;\n \n \t    case CONST:\n \t    case CONST_INT:\n \t    case SYMBOL_REF:\n \t    case LABEL_REF:\n \t      if (disp)\n-\t\treturn 0;\n+\t\treturn false;\n \t      disp = op;\n \t      break;\n \n \t    default:\n-\t      return 0;\n+\t      return false;\n \t    }\n \t}\n     }\n@@ -10277,10 +10277,10 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n       index = XEXP (addr, 0);\n       tmp = XEXP (addr, 1);\n       if (!CONST_INT_P (tmp))\n-\treturn 0;\n+\treturn false;\n       scale = INTVAL (tmp);\n       if ((unsigned HOST_WIDE_INT) scale > 3)\n-\treturn 0;\n+\treturn false;\n       scale = 1 << scale;\n     }\n   else\n@@ -10294,14 +10294,14 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \t       && REG_P (SUBREG_REG (index)))\n \t;\n       else\n-\treturn 0;\n+\treturn false;\n     }\n \n   /* Extract the integral value of scale.  */\n   if (scale_rtx)\n     {\n       if (!CONST_INT_P (scale_rtx))\n-\treturn 0;\n+\treturn false;\n       scale = INTVAL (scale_rtx);\n     }\n \n@@ -10354,7 +10354,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n   out->scale = scale;\n   out->seg = seg;\n \n-  return 1;\n+  return true;\n }\n \f\n /* Return cost of the memory address x."}]}