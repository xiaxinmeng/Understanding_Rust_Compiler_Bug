{"sha": "9c530261cbdb84199ed7a16e31acc3b53afdb0e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1MzAyNjFjYmRiODQxOTllZDdhMTZlMzFhY2MzYjUzYWZkYjBlMQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-11T00:18:24Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-11T00:18:24Z"}, "message": "(extendsidi2,zero_extendsidi2): New patterns.\n\n(adddi3,subdi3): Don't emit code for low part if known to be zero.\n\nFrom-SVN: r3187", "tree": {"sha": "2ecdc1b8d8e955402fbaa9864e4b4e6841403ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecdc1b8d8e955402fbaa9864e4b4e6841403ff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c530261cbdb84199ed7a16e31acc3b53afdb0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c530261cbdb84199ed7a16e31acc3b53afdb0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c530261cbdb84199ed7a16e31acc3b53afdb0e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c530261cbdb84199ed7a16e31acc3b53afdb0e1/comments", "author": null, "committer": null, "parents": [{"sha": "43940f6bb9f83f8b0784a485914d090118cc225d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43940f6bb9f83f8b0784a485914d090118cc225d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43940f6bb9f83f8b0784a485914d090118cc225d"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "62e61566a72272fcc31ad2456a3e01d407f9a623", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c530261cbdb84199ed7a16e31acc3b53afdb0e1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c530261cbdb84199ed7a16e31acc3b53afdb0e1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9c530261cbdb84199ed7a16e31acc3b53afdb0e1", "patch": "@@ -1025,17 +1025,36 @@\n   return AS2 (movz%B0%L0,%1,%0);\n #endif\n }\")\n+\n+(define_insn \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (match_operand:SI 1 \"register_operand\" \"0\")))]\n+  \"\"\n+  \"*\n+{\n+  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  return AS2 (xor%L0,%0,%0);\n+}\")\n \f\n ;;- sign extension instructions\n \n-/*\n (define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=a\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (match_operand:SI 1 \"nonimmediate_operand\" \"a\")))]\n+\t (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n-  \"clq\")\n-*/\n+  \"*\n+{\n+  if (REGNO (operands[0]) == 0)\n+    return \\\"clq\\\";\n+\n+  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]));\n+  output_asm_insn (AS2 (mov%L0,%0,%1), operands);\n+\n+  operands[0] = GEN_INT (31);\n+  return AS2 (sar%L1,%0,%1);\n+}\")\n \n ;; Note that the i386 programmers' manual says that the opcodes\n ;; are named movsx..., but the assembler on Unix does not accept that.\n@@ -1395,8 +1414,13 @@\n \n   split_di (operands, 3, low, high);\n \n-  output_asm_insn (AS2 (add%L0,%2,%0), low);\n-  output_asm_insn (AS2 (adc%L0,%2,%0), high);\n+  if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n+    {\n+      output_asm_insn (AS2 (add%L0,%2,%0), low);\n+      output_asm_insn (AS2 (adc%L0,%2,%0), high);\n+    }\n+  else\n+    output_asm_insn (AS2 (add%L0,%2,%0), high);\n   RET;\n }\")\n \n@@ -1566,8 +1590,14 @@\n \n   split_di (operands, 3, low, high);\n \n-  output_asm_insn (AS2 (sub%L0,%2,%0), low);\n-  output_asm_insn (AS2 (sbb%L0,%2,%0), high);\n+  if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n+    {\n+      output_asm_insn (AS2 (sub%L0,%2,%0), low);\n+      output_asm_insn (AS2 (sbb%L0,%2,%0), high);\n+    }\n+  else\n+    output_asm_insn (AS2 (sub%L0,%2,%0), high);\n+\n   RET;\n }\")\n "}]}