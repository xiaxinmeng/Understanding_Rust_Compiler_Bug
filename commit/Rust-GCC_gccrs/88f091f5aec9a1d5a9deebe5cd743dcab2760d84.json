{"sha": "88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmMDkxZjVhZWM5YTFkNWE5ZGVlYmU1Y2Q3NDNkY2FiMjc2MGQ4NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-08-12T13:13:38Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-12T13:13:38Z"}, "message": "real.c (spu_single_format): New variable.\n\nChangeLog:\n\n\t* real.c (spu_single_format): New variable.\n\t* real.h (spu_single_format): Declare.\n\n\t* config/spu/spu.c (spu_override_options): Install SFmode format.\n\t(spu_split_immediate): Use integer mode to operate on pieces of\n\tfloating-point values in all cases.\n\n\t* config/spu/spu.md (UNSPEC_FLOAT_EXTEND, UNSPEC_FLOAT_TRUNCATE): New.\n\t(\"extendsfdf2\"): Use UNSPEC_FLOAT_EXTEND instead of FLOAT_EXTEND.\n\t(\"truncdfsf2\"): Use UNSPEC_FLOAT_TRUNCATE instead of FLOAT_TRUNCATE.\n\ntestsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/ieee/inf-2.c (testf): Skip on the SPU.\n\nCo-Authored-By: Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n\nFrom-SVN: r139013", "tree": {"sha": "b25b470542b27fbf4f61b6021a4e127af758b12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b25b470542b27fbf4f61b6021a4e127af758b12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/comments", "author": null, "committer": null, "parents": [{"sha": "4230d0fe3258a221706f791c04683bffb982e4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4230d0fe3258a221706f791c04683bffb982e4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4230d0fe3258a221706f791c04683bffb982e4f3"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "cbd499ee0fb76cea04eed1d2cfa3b651dcb48c11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -1,3 +1,17 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\t    Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n+\n+\t* real.c (spu_single_format): New variable.\n+\t* real.h (spu_single_format): Declare.\n+\n+\t* config/spu/spu.c (spu_override_options): Install SFmode format.\n+\t(spu_split_immediate): Use integer mode to operate on pieces of\n+\tfloating-point values in all cases.\n+\n+\t* config/spu/spu.md (UNSPEC_FLOAT_EXTEND, UNSPEC_FLOAT_TRUNCATE): New.\n+\t(\"extendsfdf2\"): Use UNSPEC_FLOAT_EXTEND instead of FLOAT_EXTEND.\n+\t(\"truncdfsf2\"): Use UNSPEC_FLOAT_TRUNCATE instead of FLOAT_TRUNCATE.\n+\n 2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_safe_dma): Respect TARGET_SAFE_DMA."}, {"sha": "1021a918275b68fdbe5e86d3aa7b08beb4323c05", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -352,6 +352,8 @@ spu_override_options (void)\n       else\n         error (\"Unknown architecture '%s'\", &spu_tune_string[0]);\n     }\n+\n+  REAL_MODE_FORMAT (SFmode) = &spu_single_format;\n }\n \f\n /* Handle an attribute requiring a FUNCTION_DECL; arguments as in\n@@ -1519,22 +1521,30 @@ spu_split_immediate (rtx * ops)\n       {\n \tunsigned char arrhi[16];\n \tunsigned char arrlo[16];\n-\trtx to, hi, lo;\n+\trtx to, temp, hi, lo;\n \tint i;\n+\tenum machine_mode imode = mode;\n+\t/* We need to do reals as ints because the constant used in the\n+\t   IOR might not be a legitimate real constant. */\n+\timode = int_mode_for_mode (mode);\n \tconstant_to_array (mode, ops[1], arrhi);\n-\tto = !can_create_pseudo_p () ? ops[0] : gen_reg_rtx (mode);\n+\tif (imode != mode)\n+\t  to = simplify_gen_subreg (imode, ops[0], mode, 0);\n+\telse\n+\t  to = ops[0];\n+\ttemp = !can_create_pseudo_p () ? to : gen_reg_rtx (imode);\n \tfor (i = 0; i < 16; i += 4)\n \t  {\n \t    arrlo[i + 2] = arrhi[i + 2];\n \t    arrlo[i + 3] = arrhi[i + 3];\n \t    arrlo[i + 0] = arrlo[i + 1] = 0;\n \t    arrhi[i + 2] = arrhi[i + 3] = 0;\n \t  }\n-\thi = array_to_constant (mode, arrhi);\n-\tlo = array_to_constant (mode, arrlo);\n-\temit_move_insn (to, hi);\n+\thi = array_to_constant (imode, arrhi);\n+\tlo = array_to_constant (imode, arrlo);\n+\temit_move_insn (temp, hi);\n \temit_insn (gen_rtx_SET\n-\t\t   (VOIDmode, ops[0], gen_rtx_IOR (mode, to, lo)));\n+\t\t   (VOIDmode, to, gen_rtx_IOR (imode, temp, lo)));\n \treturn 1;\n       }\n     case IC_FSMBI2:"}, {"sha": "e50a65a188979a81ff15af8a6d385962233e0199", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -153,6 +153,8 @@\n  (UNSPEC_SPU_REALIGN_LOAD 49)\n  (UNSPEC_SPU_MASK_FOR_LOAD 50)\n  (UNSPEC_DFTSV\t\t 51)\n+ (UNSPEC_FLOAT_EXTEND\t 52)\n+ (UNSPEC_FLOAT_TRUNCATE\t 53)\n ])\n \n (include \"predicates.md\")\n@@ -648,14 +650,16 @@\n \n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"spu_reg_operand\" \"=r\")\n-\t(float_extend:DF (match_operand:SF 1 \"spu_reg_operand\" \"r\")))]\n+\t(unspec:DF [(match_operand:SF 1 \"spu_reg_operand\" \"r\")]\n+                   UNSPEC_FLOAT_EXTEND))]\n   \"\"\n   \"fesd\\t%0,%1\"\n   [(set_attr \"type\" \"fpd\")])\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"spu_reg_operand\" \"=r\")\n-\t(float_truncate:SF (match_operand:DF 1 \"spu_reg_operand\" \"r\")))]\n+\t(unspec:SF [(match_operand:DF 1 \"spu_reg_operand\" \"r\")]\n+                   UNSPEC_FLOAT_TRUNCATE))]\n   \"\"\n   \"frds\\t%0,%1\"\n   [(set_attr \"type\" \"fpd\")])"}, {"sha": "49eb97d740c63b681367c46863cb0d36a6c81007", "filename": "gcc/real.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -2862,6 +2862,36 @@ const struct real_format motorola_single_format =\n     true,\n     true\n   };\n+\n+/*  SPU Single Precision (Extended-Range Mode) format is the same as IEEE\n+    single precision with the following differences:\n+      - Infinities are not supported.  Instead MAX_FLOAT or MIN_FLOAT\n+\tare generated.\n+      - NaNs are not supported.\n+      - The range of non-zero numbers in binary is\n+\t(001)[1.]000...000 to (255)[1.]111...111.\n+      - Denormals can be represented, but are treated as +0.0 when\n+\tused as an operand and are never generated as a result.\n+      - -0.0 can be represented, but a zero result is always +0.0.\n+      - the only supported rounding mode is trunction (towards zero).  */\n+const struct real_format spu_single_format =\n+  {\n+    encode_ieee_single,\n+    decode_ieee_single,\n+    2,\n+    24,\n+    24,\n+    -125,\n+    129,\n+    31,\n+    31,\n+    false,\n+    false,\n+    true,\n+    true,\n+    false,\n+    false\n+  };\n \f\n /* IEEE double-precision format.  */\n "}, {"sha": "39522b6332c5e1eac9d80b09a51f9ae327ad65c6", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -259,6 +259,7 @@ extern unsigned int real_hash (const REAL_VALUE_TYPE *);\n extern const struct real_format ieee_single_format;\n extern const struct real_format mips_single_format;\n extern const struct real_format motorola_single_format;\n+extern const struct real_format spu_single_format;\n extern const struct real_format ieee_double_format;\n extern const struct real_format mips_double_format;\n extern const struct real_format motorola_double_format;"}, {"sha": "8653a14d64aeecc7bbb5c0731a84a5542aa23396", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -1,3 +1,7 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.c-torture/execute/ieee/inf-2.c (testf): Skip on the SPU.\n+\n 2008-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36688"}, {"sha": "1823b35ff0ff18a9ba0368b31157ebc5d39a8a02", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/inf-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f091f5aec9a1d5a9deebe5cd743dcab2760d84/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c?ref=88f091f5aec9a1d5a9deebe5cd743dcab2760d84", "patch": "@@ -25,6 +25,9 @@ void test(double f, double i)\n \n void testf(float f, float i)\n {\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support Inf.  */\n+\n   if (f == __builtin_inff())\n     abort ();\n   if (f == -__builtin_inff())\n@@ -44,6 +47,7 @@ void testf(float f, float i)\n     abort ();\n   if (f < -__builtin_inff())\n     abort ();\n+#endif\n }\n \n void testl(long double f, long double i)"}]}