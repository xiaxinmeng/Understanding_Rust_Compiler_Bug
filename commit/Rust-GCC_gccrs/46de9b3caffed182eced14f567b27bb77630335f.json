{"sha": "46de9b3caffed182eced14f567b27bb77630335f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkZTliM2NhZmZlZDE4MmVjZWQxNGY1NjdiMjdiYjc3NjMwMzM1Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-11-15T00:59:21Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-11-15T00:59:21Z"}, "message": "re PR rtl-optimization/22002 (internal consistency failure with -funroll-loops)\n\n\tPR rtl-optimization/22002\n\t* combine.c (distribute_notes): Detect cases where a reg dies\n\ttwo or more times in a bb, including on the insn we are combining,\n\tand place the death note on the correct range.\n\nFrom-SVN: r106921", "tree": {"sha": "fb1b5a7c58c0d92dea3fff32e17615973850ea40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb1b5a7c58c0d92dea3fff32e17615973850ea40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46de9b3caffed182eced14f567b27bb77630335f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46de9b3caffed182eced14f567b27bb77630335f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46de9b3caffed182eced14f567b27bb77630335f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46de9b3caffed182eced14f567b27bb77630335f/comments", "author": null, "committer": null, "parents": [{"sha": "12431170a7501c25893590d93c876951081da6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12431170a7501c25893590d93c876951081da6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12431170a7501c25893590d93c876951081da6f9"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "188d5095c0388c52b8047cab0e15373b80f6828b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46de9b3caffed182eced14f567b27bb77630335f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46de9b3caffed182eced14f567b27bb77630335f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46de9b3caffed182eced14f567b27bb77630335f", "patch": "@@ -1,3 +1,10 @@\n+2005-11-15  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR rtl-optimization/22002\n+\t* combine.c (distribute_notes): Detect cases where a reg dies\n+\ttwo or more times in a bb, including on the insn we are combining,\n+\tand place the death note on the correct range.\n+\n 2005-11-14  Dale Johannesen  <dalej@apple.com>\n \n \t* expmed.c (store_bit_field):  Add offset unconditionally for"}, {"sha": "9f910a7b336e85a19a86ac9e577844f14b8b1bbd", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46de9b3caffed182eced14f567b27bb77630335f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46de9b3caffed182eced14f567b27bb77630335f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=46de9b3caffed182eced14f567b27bb77630335f", "patch": "@@ -12232,6 +12232,10 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t    {\n \t      basic_block bb = this_basic_block;\n \n+\t      /* You might think you could search back from FROM_INSN\n+\t\t rather than from I3, but combine tries to split invalid\n+\t\t combined instructions.  This can result in the old I2\n+\t\t or I1 moving later in the insn sequence.  */\n \t      for (tem = PREV_INSN (i3); place == 0; tem = PREV_INSN (tem))\n \t\t{\n \t\t  if (! INSN_P (tem))\n@@ -12332,6 +12336,22 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t\t\t   || (CALL_P (tem)\n \t\t\t       && find_reg_fusage (tem, USE, XEXP (note, 0))))\n \t\t    {\n+\t\t      /* This may not be the correct place for the death\n+\t\t\t note if FROM_INSN is before TEM, and the reg is\n+\t\t\t set between FROM_INSN and TEM.  The reg might\n+\t\t\t die two or more times.  An existing death note\n+\t\t\t means we are looking at the wrong live range.  */\n+\t\t      if (from_insn\n+\t\t\t  && INSN_CUID (from_insn) < INSN_CUID (tem)\n+\t\t\t  && find_regno_note (tem, REG_DEAD,\n+\t\t\t\t\t      REGNO (XEXP (note, 0))))\n+\t\t\t{\n+\t\t\t  tem = from_insn;\n+\t\t\t  if (tem == BB_HEAD (bb))\n+\t\t\t    break;\n+\t\t\t  continue;\n+\t\t\t}\n+\n \t\t      place = tem;\n \n \t\t      /* If we are doing a 3->2 combination, and we have a"}]}