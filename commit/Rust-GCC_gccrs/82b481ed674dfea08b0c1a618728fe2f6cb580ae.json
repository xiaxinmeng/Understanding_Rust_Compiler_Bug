{"sha": "82b481ed674dfea08b0c1a618728fe2f6cb580ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiNDgxZWQ2NzRkZmVhMDhiMGMxYTYxODcyOGZlMmY2Y2I1ODBhZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-08-09T06:35:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-08-09T06:35:09Z"}, "message": "utils.c (build_vms_descriptor32): Fix formatting.\n\n\t* gcc-interface/utils.c (build_vms_descriptor32): Fix formatting.\n\t(build_vms_descriptor): Likewise.\n\nFrom-SVN: r163027", "tree": {"sha": "afc45898a1aa07d9a80525a7acad2f171d45daa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc45898a1aa07d9a80525a7acad2f171d45daa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b481ed674dfea08b0c1a618728fe2f6cb580ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b481ed674dfea08b0c1a618728fe2f6cb580ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b481ed674dfea08b0c1a618728fe2f6cb580ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b481ed674dfea08b0c1a618728fe2f6cb580ae/comments", "author": null, "committer": null, "parents": [{"sha": "788e504636c63174540326bfd7e7431f5d34d9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788e504636c63174540326bfd7e7431f5d34d9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788e504636c63174540326bfd7e7431f5d34d9ad"}], "stats": {"total": 175, "additions": 93, "deletions": 82}, "files": [{"sha": "34248250db33e2c48c298c98578e67eda09c34f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b481ed674dfea08b0c1a618728fe2f6cb580ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b481ed674dfea08b0c1a618728fe2f6cb580ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=82b481ed674dfea08b0c1a618728fe2f6cb580ae", "patch": "@@ -1,3 +1,8 @@\n+2010-08-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (build_vms_descriptor32): Fix formatting.\n+\t(build_vms_descriptor): Likewise.\n+\n 2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/utils.c (make_descriptor_field): Add tree parameter.\n@@ -6,9 +11,8 @@\n \n 2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n-\t* gcc-interface/decl.c (rec_variant).  Declare.  Declare a VEC of it.\n-\t(build_variant_list): Return a VEC instead of a tree.  Take a\n-\tVEC instead of a tree.\n+\t* gcc-interface/decl.c (rec_variant):  Declare.  Declare a VEC of it.\n+\t(build_variant_list): Take and return a VEC instead of a tree.\n \t(create_variant_part_from): Take a VEC instead of a tree for\n \tvariant_list.  Adjust accordingly.\n \t(gnat_to_gnu_entity): Adjust for changes to previous functions."}, {"sha": "5edcbfeb9994dcb834342b71ab005006d2a0965d", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 86, "deletions": 79, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b481ed674dfea08b0c1a618728fe2f6cb580ae/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b481ed674dfea08b0c1a618728fe2f6cb580ae/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=82b481ed674dfea08b0c1a618728fe2f6cb580ae", "patch": "@@ -2427,30 +2427,29 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n   /* Make the type for a descriptor for VMS.  The first four fields are the\n      same for all types.  */\n-  field_list = \n-    make_descriptor_field (\"LENGTH\", gnat_type_for_size (16, 1),\n-\t\t\t   record_type,\n-\t\t\t   size_in_bytes\n-\t\t\t   ((mech == By_Descriptor_A\n-\t\t\t     || mech == By_Short_Descriptor_A)\n-\t\t\t    ? inner_type : type), field_list);\n-  field_list =\n-    make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1),\n-\t\t\t   record_type, size_int (dtype), field_list);\n-  field_list =\n-    make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n-\t\t\t   record_type, size_int (klass), field_list);\n+  field_list\n+    = make_descriptor_field (\"LENGTH\", gnat_type_for_size (16, 1), record_type,\n+\t\t\t     size_in_bytes ((mech == By_Descriptor_A\n+\t\t\t\t\t     || mech == By_Short_Descriptor_A)\n+\t\t\t\t\t    ? inner_type : type),\n+\t\t\t     field_list);\n+  field_list\n+    = make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1), record_type,\n+\t\t\t     size_int (dtype), field_list);\n+  field_list\n+    = make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1), record_type,\n+\t\t\t     size_int (klass), field_list);\n \n   /* Of course this will crash at run time if the address space is not\n      within the low 32 bits, but there is nothing else we can do.  */\n   pointer32_type = build_pointer_type_for_mode (type, SImode, false);\n \n-  field_list =\n-    make_descriptor_field (\"POINTER\", pointer32_type, record_type,\n-\t\t\t   build_unary_op (ADDR_EXPR,\n-\t\t\t\t\t   pointer32_type,\n-\t\t\t\t\t   build0 (PLACEHOLDER_EXPR,\n-\t\t\t\t\t\t   type)), field_list);\n+  field_list\n+    = make_descriptor_field (\"POINTER\", pointer32_type, record_type,\n+\t\t\t     build_unary_op (ADDR_EXPR,\n+\t\t\t\t\t     pointer32_type,\n+\t\t\t\t\t     build0 (PLACEHOLDER_EXPR, type)),\n+\t\t\t     field_list);\n \n   switch (mech)\n     {\n@@ -2462,52 +2461,57 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n     case By_Descriptor_SB:\n     case By_Short_Descriptor_SB:\n-      field_list =\n-\tmake_descriptor_field (\"SB_L1\", gnat_type_for_size (32, 1),\n-\t\t\t       record_type,\n-\t\t\t       (TREE_CODE (type) == ARRAY_TYPE\n-\t\t\t\t? TYPE_MIN_VALUE (TYPE_DOMAIN (type))\n-\t\t\t\t: size_zero_node), field_list);\n-      field_list =\n-\tmake_descriptor_field (\"SB_U1\", gnat_type_for_size (32, 1),\n-\t\t\t       record_type,\n-\t\t\t       (TREE_CODE (type) == ARRAY_TYPE\n-\t\t\t\t? TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n-\t\t\t\t: size_zero_node), field_list);\n+      field_list\n+\t= make_descriptor_field (\"SB_L1\", gnat_type_for_size (32, 1),\n+\t\t\t         record_type,\n+\t\t\t         (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t  ? TYPE_MIN_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t  : size_zero_node),\n+\t\t\t\t field_list);\n+      field_list\n+\t= make_descriptor_field (\"SB_U1\", gnat_type_for_size (32, 1),\n+\t\t\t\t record_type,\n+\t\t\t\t (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t  ? TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t  : size_zero_node),\n+\t\t\t\t field_list);\n       break;\n \n     case By_Descriptor_A:\n     case By_Short_Descriptor_A:\n     case By_Descriptor_NCA:\n     case By_Short_Descriptor_NCA:\n-      field_list =\n-\tmake_descriptor_field (\"SCALE\", gnat_type_for_size (8, 1),\n-\t\t\t       record_type, size_zero_node, field_list);\n-\n-      field_list =\n-\tmake_descriptor_field (\"DIGITS\", gnat_type_for_size (8, 1),\n-\t\t\t       record_type, size_zero_node, field_list);\n-\n-\n-      field_list =\n-\tmake_descriptor_field (\"AFLAGS\", gnat_type_for_size (8, 1),\n-\t\t\t       record_type,\n-\t\t\t       size_int ((mech == By_Descriptor_NCA ||\n-\t\t\t\t\t  mech == By_Short_Descriptor_NCA)\n-\t\t\t\t\t ? 0\n-\t\t\t\t\t /* Set FL_COLUMN, FL_COEFF, and\n-\t\t\t\t\t    FL_BOUNDS.  */\n-\t\t\t\t\t : (TREE_CODE (type) == ARRAY_TYPE\n-\t\t\t\t\t    && TYPE_CONVENTION_FORTRAN_P (type)\n-\t\t\t\t\t    ? 224 : 192)), field_list);\n-\n-      field_list =\n-\tmake_descriptor_field (\"DIMCT\", gnat_type_for_size (8, 1),\n-\t\t\t       record_type, size_int (ndim), field_list);\n-\n-      field_list =\n-\tmake_descriptor_field (\"ARSIZE\", gnat_type_for_size (32, 1),\n-\t\t\t       record_type, size_in_bytes (type), field_list);\n+      field_list\n+\t= make_descriptor_field (\"SCALE\", gnat_type_for_size (8, 1),\n+\t\t\t\t record_type, size_zero_node, field_list);\n+\n+      field_list\n+\t= make_descriptor_field (\"DIGITS\", gnat_type_for_size (8, 1),\n+\t\t\t\t record_type, size_zero_node, field_list);\n+\n+\n+      field_list\n+\t= make_descriptor_field (\"AFLAGS\", gnat_type_for_size (8, 1),\n+\t\t\t\t record_type,\n+\t\t\t\t size_int ((mech == By_Descriptor_NCA\n+\t\t\t\t\t    || mech == By_Short_Descriptor_NCA)\n+\t\t\t\t\t   ? 0\n+\t\t\t\t\t   /* Set FL_COLUMN, FL_COEFF, and\n+\t\t\t\t\t      FL_BOUNDS.  */\n+\t\t\t\t\t   : (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t\t      && TYPE_CONVENTION_FORTRAN_P\n+\t\t\t\t\t\t (type)\n+\t\t\t\t\t     ? 224 : 192)),\n+\t\t\t\t field_list);\n+\n+      field_list\n+\t= make_descriptor_field (\"DIMCT\", gnat_type_for_size (8, 1),\n+\t\t\t\t record_type, size_int (ndim), field_list);\n+\n+      field_list\n+\t= make_descriptor_field (\"ARSIZE\", gnat_type_for_size (32, 1),\n+\t\t\t\t record_type, size_in_bytes (type),\n+\t\t\t\t field_list);\n \n       /* Now build a pointer to the 0,0,0... element.  */\n       tem = build0 (PLACEHOLDER_EXPR, type);\n@@ -2517,10 +2521,10 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t\t      convert (TYPE_DOMAIN (inner_type), size_zero_node),\n \t\t      NULL_TREE, NULL_TREE);\n \n-      field_list =\n-\tmake_descriptor_field (\"A0\", pointer32_type, record_type,\n-\t\t\t       build1 (ADDR_EXPR, pointer32_type, tem),\n-\t\t\t       field_list);\n+      field_list\n+\t= make_descriptor_field (\"A0\", pointer32_type, record_type,\n+\t\t\t\t build1 (ADDR_EXPR, pointer32_type, tem),\n+\t\t\t\t field_list);\n \n       /* Next come the addressing coefficients.  */\n       tem = size_one_node;\n@@ -2538,9 +2542,9 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t  fname[0] = ((mech == By_Descriptor_NCA ||\n                        mech == By_Short_Descriptor_NCA) ? 'S' : 'M');\n \t  fname[1] = '0' + i, fname[2] = 0;\n-\t  field_list =\n-\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n-\t\t\t\t   record_type, idx_length, field_list);\n+\t  field_list\n+\t    = make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t     record_type, idx_length, field_list);\n \n \t  if (mech == By_Descriptor_NCA || mech == By_Short_Descriptor_NCA)\n \t    tem = idx_length;\n@@ -2552,16 +2556,16 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t  char fname[3];\n \n \t  fname[0] = 'L', fname[1] = '0' + i, fname[2] = 0;\n-\t  field_list =\n-\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n-\t\t\t\t   record_type, TYPE_MIN_VALUE (idx_arr[i]),\n-\t\t\t\t   field_list);\n+\t  field_list\n+\t    = make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t     record_type, TYPE_MIN_VALUE (idx_arr[i]),\n+\t\t\t\t     field_list);\n \n \t  fname[0] = 'U';\n-\t  field_list =\n-\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n-\t\t\t\t   record_type, TYPE_MAX_VALUE (idx_arr[i]),\n-\t\t\t\t   field_list);\n+\t  field_list\n+\t    = make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t     record_type, TYPE_MAX_VALUE (idx_arr[i]),\n+\t\t\t\t     field_list);\n \t}\n       break;\n \n@@ -2731,15 +2735,16 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     = make_descriptor_field (\"LENGTH\", gnat_type_for_size (64, 1),\n \t\t\t     record64_type,\n \t\t\t     size_in_bytes (mech == By_Descriptor_A\n-\t\t\t\t\t    ? inner_type : type), field_list64);\n+\t\t\t\t\t    ? inner_type : type),\n+\t\t\t     field_list64);\n \n   pointer64_type = build_pointer_type_for_mode (type, DImode, false);\n \n   field_list64\n     = make_descriptor_field (\"POINTER\", pointer64_type, record64_type,\n \t\t\t     build_unary_op (ADDR_EXPR, pointer64_type,\n-\t\t\t\t\t     build0 (PLACEHOLDER_EXPR,\n-\t\t\t\t\t\t     type)), field_list64);\n+\t\t\t\t\t     build0 (PLACEHOLDER_EXPR, type)),\n+\t\t\t     field_list64);\n \n   switch (mech)\n     {\n@@ -2753,13 +2758,15 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t\t\t\t record64_type,\n \t\t\t\t (TREE_CODE (type) == ARRAY_TYPE\n \t\t\t\t  ? TYPE_MIN_VALUE (TYPE_DOMAIN (type))\n-\t\t\t\t  : size_zero_node), field_list64);\n+\t\t\t\t  : size_zero_node),\n+\t\t\t\t field_list64);\n       field_list64\n \t= make_descriptor_field (\"SB_U1\", gnat_type_for_size (64, 1),\n \t\t\t\t record64_type,\n \t\t\t\t (TREE_CODE (type) == ARRAY_TYPE\n \t\t\t\t  ? TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n-\t\t\t\t  : size_zero_node), field_list64);\n+\t\t\t\t  : size_zero_node),\n+\t\t\t\t field_list64);\n       break;\n \n     case By_Descriptor_A:"}]}