{"sha": "d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "node_id": "C_kwDOANBUbNoAKGQ3MWQwMTlmNjNlZDVkM2ZkYjM0NTc5MDIzYmFmYTRkY2YzMjNmMmM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-22T19:09:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-24T05:22:10Z"}, "message": "c++: Fix missing NSDMI diagnostic in C++98 [PR103347]\n\nHere the problem is that we aren't detecting a NSDMI in C++98:\n\nstruct A {\n  void *x = NULL;\n};\n\nbecause maybe_warn_cpp0x uses input_location and that happens to point\nto NULL which comes from a system header.  Jakub suggested changing the\nlocation to the '=', thereby avoiding the system header problem.  To\nthat end, I've added a new location_t member into cp_declarator.  This\nmember is used when this declarator is part of an init-declarator.  The\nrest of the changes is obvious.  I've also taken the liberty of adding\nloc_or_input_loc, since I want to avoid checking for UNKNOWN_LOCATION.\n\n\tPR c++/103347\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (struct cp_declarator): Add a location_t member.\n\t(maybe_warn_cpp0x): Add a location_t parameter with a default argument.\n\t(loc_or_input_loc): New.\n\t* decl.c (grokdeclarator): Use loc_or_input_loc.  Pass init_loc down\n\tto maybe_warn_cpp0x.\n\t* error.c (maybe_warn_cpp0x): Add a location_t parameter.  Use it.\n\t* parser.c (make_declarator): Initialize init_loc.\n\t(cp_parser_member_declaration): Set init_loc.\n\t(cp_parser_condition): Likewise.\n\t(cp_parser_init_declarator): Likewise.\n\t(cp_parser_parameter_declaration): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-warn1.C: New test.\n\t* g++.dg/cpp0x/nsdmi-warn1.h: New file.", "tree": {"sha": "21384cd37c5ec8783cd0e7463c81c87f7f12c9eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21384cd37c5ec8783cd0e7463c81c87f7f12c9eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bf69a8558638ce0cdd69e83a68776deb9b8e053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf69a8558638ce0cdd69e83a68776deb9b8e053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf69a8558638ce0cdd69e83a68776deb9b8e053"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "2037082b0c7d7a923f39bf9174c1b87f902fe5bc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -6231,9 +6231,11 @@ struct cp_declarator {\n   /* If this declarator is parenthesized, this the open-paren.  It is\n      UNKNOWN_LOCATION when not parenthesized.  */\n   location_t parenthesized;\n-\n-  location_t id_loc; /* Currently only set for cdk_id, cdk_decomp and\n-\t\t\tcdk_function. */\n+  /* Currently only set for cdk_id, cdk_decomp and cdk_function.  */\n+  location_t id_loc;\n+  /* If this declarator is part of an init-declarator, the location of the\n+     initializer.  */\n+  location_t init_loc;\n   /* GNU Attributes that apply to this declarator.  If the declarator\n      is a pointer or a reference, these attribute apply to the type\n      pointed to.  */\n@@ -6878,7 +6880,8 @@ extern const char *lang_decl_dwarf_name\t\t(tree, int, bool);\n extern const char *language_to_string\t\t(enum languages);\n extern const char *class_key_or_enum_as_string\t(tree);\n extern void maybe_warn_variadic_templates       (void);\n-extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n+extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str,\n+\t\t\t\t\t\t location_t = input_location);\n extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n extern location_t location_of                   (tree);\n extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n@@ -7996,6 +7999,11 @@ extern bool decl_in_std_namespace_p\t     (tree);\n extern void require_complete_eh_spec_types\t(tree, tree);\n extern void cxx_incomplete_type_diagnostic\t(location_t, const_tree,\n \t\t\t\t\t\t const_tree, diagnostic_t);\n+inline location_t\n+loc_or_input_loc (location_t loc)\n+{\n+  return loc == UNKNOWN_LOCATION ? input_location : loc;\n+}\n \n inline location_t\n cp_expr_loc_or_loc (const_tree t, location_t or_loc)"}, {"sha": "588094b1db6e57167f9bf38a6dae75318bd4ef76", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -11507,14 +11507,18 @@ grokdeclarator (const cp_declarator *declarator,\n   if (initialized == SD_DEFAULTED || initialized == SD_DELETED)\n     funcdef_flag = true;\n \n-  location_t typespec_loc = smallest_type_location (type_quals,\n-\t\t\t\t\t\t    declspecs->locations);\n-  if (typespec_loc == UNKNOWN_LOCATION)\n-    typespec_loc = input_location;\n-\n-  location_t id_loc = declarator ? declarator->id_loc : input_location;\n-  if (id_loc == UNKNOWN_LOCATION)\n-    id_loc = input_location;\n+  location_t typespec_loc = loc_or_input_loc (smallest_type_location\n+\t\t\t\t\t      (type_quals,\n+\t\t\t\t\t       declspecs->locations));\n+  location_t id_loc;\n+  location_t init_loc;\n+  if (declarator)\n+    {\n+      id_loc = loc_or_input_loc (declarator->id_loc);\n+      init_loc = loc_or_input_loc (declarator->init_loc);\n+    }\n+  else\n+    init_loc = id_loc = input_location;\n \n   /* Look inside a declarator for the name being declared\n      and get it as a string, for an error message.  */\n@@ -14027,7 +14031,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  {\n \t\t    /* An attempt is being made to initialize a non-static\n \t\t       member.  This is new in C++11.  */\n-\t\t    maybe_warn_cpp0x (CPP0X_NSDMI);\n+\t\t    maybe_warn_cpp0x (CPP0X_NSDMI, init_loc);\n \n \t\t    /* If this has been parsed with static storage class, but\n \t\t       errors forced staticp to be cleared, ensure NSDMI is"}, {"sha": "98c1f0e4bdfdf30c1d195eb451cfa5dd98d80a72", "filename": "gcc/cp/error.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -4428,84 +4428,84 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n \f\n /* Warn about the use of C++0x features when appropriate.  */\n void\n-maybe_warn_cpp0x (cpp0x_warn_str str)\n+maybe_warn_cpp0x (cpp0x_warn_str str, location_t loc/*=input_location*/)\n {\n   if (cxx_dialect == cxx98)\n     switch (str)\n       {\n       case CPP0X_INITIALIZER_LISTS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"extended initializer lists \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_EXPLICIT_CONVERSION:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"explicit conversion operators \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_VARIADIC_TEMPLATES:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"variadic templates \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_LAMBDA_EXPR:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"lambda expressions \"\n \t\t  \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_AUTO:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"C++11 auto only available with %<-std=c++11%> or \"\n \t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_SCOPED_ENUMS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"scoped enums only available with %<-std=c++11%> or \"\n \t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DEFAULTED_DELETED:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"defaulted and deleted functions \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_INLINE_NAMESPACES:\n \tif (pedantic)\n-\t  pedwarn (input_location, OPT_Wc__11_extensions,\n+\t  pedwarn (loc, OPT_Wc__11_extensions,\n \t\t   \"inline namespaces \"\n \t\t   \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_OVERRIDE_CONTROLS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"override controls (override/final) \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_NSDMI:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"non-static data member initializers \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_USER_DEFINED_LITERALS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"user-defined literals \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DELEGATING_CTORS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"delegating constructors \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_INHERITING_CTORS:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"inheriting constructors \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_ATTRIBUTES:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"C++11 attributes \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_REF_QUALIFIER:\n-\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\tpedwarn (loc, OPT_Wc__11_extensions,\n \t\t \"ref-qualifiers \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;"}, {"sha": "7a6a30208ef5a5f9f0532d3ad781da89e398f5ac", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -1542,6 +1542,7 @@ make_declarator (cp_declarator_kind kind)\n   declarator->declarator = NULL;\n   declarator->parameter_pack_p = false;\n   declarator->id_loc = UNKNOWN_LOCATION;\n+  declarator->init_loc = UNKNOWN_LOCATION;\n \n   return declarator;\n }\n@@ -13286,6 +13287,7 @@ cp_parser_condition (cp_parser* parser)\n \t\t\t     attributes, prefix_attributes,\n \t\t\t     &pushed_scope);\n \n+\t  declarator->init_loc = cp_lexer_peek_token (parser->lexer)->location;\n \t  /* Parse the initializer.  */\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t    {\n@@ -22492,6 +22494,7 @@ cp_parser_init_declarator (cp_parser* parser,\n     {\n       is_initialized = SD_INITIALIZED;\n       initialization_kind = token->type;\n+      declarator->init_loc = token->location;\n       if (maybe_range_for_decl)\n \t*maybe_range_for_decl = error_mark_node;\n       tmp_init_loc = token->location;\n@@ -24751,6 +24754,8 @@ cp_parser_parameter_declaration (cp_parser *parser,\n     {\n       tree type = decl_specifiers.type;\n       token = cp_lexer_peek_token (parser->lexer);\n+      if (declarator)\n+\tdeclarator->init_loc = token->location;\n       /* If we are defining a class, then the tokens that make up the\n \t default argument must be saved and processed later.  */\n       if (!template_parm_p && at_class_scope_p ()\n@@ -27143,6 +27148,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t     constant-initializer.  When we call `grokfield', it will\n \t\t     perform more stringent semantics checks.  */\n \t\t  initializer_token_start = cp_lexer_peek_token (parser->lexer);\n+\t\t  declarator->init_loc = initializer_token_start->location;\n \t\t  if (function_declarator_p (declarator)\n \t\t      || (decl_specifiers.type\n \t\t\t  && TREE_CODE (decl_specifiers.type) == TYPE_DECL\n@@ -27171,6 +27177,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t       && !function_declarator_p (declarator))\n \t\t{\n \t\t  bool x;\n+\t\t  declarator->init_loc\n+\t\t    = cp_lexer_peek_token (parser->lexer)->location;\n \t\t  if (decl_specifiers.storage_class != sc_static)\n \t\t    initializer = cp_parser_save_nsdmi (parser);\n \t\t  else"}, {"sha": "aacc8b28255aa495ee98ee4cf585c2489919b2fc", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-warn1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.C?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/103347\n+// { dg-do compile { target c++11_down } }\n+\n+#include \"nsdmi-warn1.h\"\n+\n+struct A {\n+  void *x = NULL; // { dg-error \"11:only available\" \"\" { target c++98_only } }\n+  void *y{NULL}; // { dg-error \"only available|extended initializer\" \"\" { target c++98_only } }\n+  int z = 1 + 2; // { dg-error \"9:only available\" \"\" { target c++98_only } }\n+};"}, {"sha": "ee5be5a24783a2627744a67393a35dbd6ec86115", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-warn1.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71d019f63ed5d3fdb34579023bafa4dcf323f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-warn1.h?ref=d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "patch": "@@ -0,0 +1,2 @@\n+#pragma GCC system_header\n+#define NULL (void *)0"}]}