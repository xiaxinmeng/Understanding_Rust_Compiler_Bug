{"sha": "c98f502f0ab9e51357665d7afcad724feee6088b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4ZjUwMmYwYWI5ZTUxMzU3NjY1ZDdhZmNhZDcyNGZlZWU2MDg4Yg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-10-01T13:05:30Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-10-01T13:05:30Z"}, "message": "Cleanup the AArch64 testsuite when stack-clash is on.\n\nThis patch cleans up the testsuite when a run is done with stack clash\nprotection turned on.\n\nConcretely this switches off -fstack-clash-protection for a couple of tests:\n\n* assembler scan: some tests are quite fragile in that they check for exact\n       assembly output, e.g. check for exact amount of sub etc.  These won't\n       match now.\n* vla: Some of the ubsan tests negative array indices. Because the arrays weren't\n       used before the incorrect $sp wouldn't have been used. The correct value is\n       restored on ret.  Now however we probe the $sp which causes a segfault.\n* params: When testing the parameters we have to skip these on AArch64 because of our\n          custom constraints on them.  We already test them separately so this isn't a\n          loss.\n\nNote that the testsuite is not entire clean due to gdb failure caused by alloca with\nstack clash. On AArch64 we output an incorrect .loc directive, but this is already the\ncase with the current implementation in GCC and is a bug unrelated to this patch series.\n\ngcc/testsuite/\n\n\tPR target/86486\n\t* gcc.dg/pr82788.c: Skip for AArch64.\n\t* gcc.dg/guality/vla-1.c: Turn off stack-clash.\n\t* gcc.target/aarch64/subsp.c: Likewise.\n\t* gcc.dg/params/blocksort-part.c: Skip stack-clash checks\n\ton AArch64.\n\t* gcc.dg/stack-check-10.c: Add AArch64 specific checks.\n\t* gcc.dg/stack-check-12.c: ILP32 fixup.\n\t* gcc.dg/stack-check-5.c: Add AArch64 specific checks.\n\t* gcc.dg/stack-check-6a.c: Skip on AArch64, we don't support this.\n\t* testsuite/lib/target-supports.exp\n\t(check_effective_target_frame_pointer_for_non_leaf): AArch64 does not\n\trequire frame pointer for non-leaf functions.\n\nFrom-SVN: r264754", "tree": {"sha": "7e55159b79a8eb4575fbf7cc125f0282901f696e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e55159b79a8eb4575fbf7cc125f0282901f696e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98f502f0ab9e51357665d7afcad724feee6088b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98f502f0ab9e51357665d7afcad724feee6088b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98f502f0ab9e51357665d7afcad724feee6088b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98f502f0ab9e51357665d7afcad724feee6088b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe9af5042f7c09bc00c105ef1a30ac7149171e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe9af5042f7c09bc00c105ef1a30ac7149171e4"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "e8ba7fc66597a41e68c875342f1b4130e82410f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -1,3 +1,19 @@\n+2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/86486\n+\t* gcc.dg/pr82788.c: Skip for AArch64.\n+\t* gcc.dg/guality/vla-1.c: Turn off stack-clash.\n+\t* gcc.target/aarch64/subsp.c: Likewise.\n+\t* gcc.dg/params/blocksort-part.c: Skip stack-clash checks\n+\ton AArch64.\n+\t* gcc.dg/stack-check-10.c: Add AArch64 specific checks.\n+\t* gcc.dg/stack-check-12.c: ILP32 fixup.\n+\t* gcc.dg/stack-check-5.c: Add AArch64 specific checks.\n+\t* gcc.dg/stack-check-6a.c: Skip on AArch64, we don't support this.\n+\t* testsuite/lib/target-supports.exp\n+\t(check_effective_target_frame_pointer_for_non_leaf): AArch64 does not\n+\trequire frame pointer for non-leaf functions.\n+\n 2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/86486"}, {"sha": "c97465edae195442a71ee66ab25015a2ac4fc8fc", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable\" } */\n+/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -fno-stack-clash-protection\" } */\n \n typedef long int V;\n int x = -1;"}, {"sha": "1e677878e7bd9c68b026f8c72b0de9f01e15459c", "filename": "gcc/testsuite/gcc.dg/params/blocksort-part.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fparams%2Fblocksort-part.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fparams%2Fblocksort-part.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparams%2Fblocksort-part.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-skip-if \"AArch64 does not support these bounds.\" { aarch64*-*-* } { \"--param stack-clash-protection-*\" } } */\n \n /*-------------------------------------------------------------*/\n /*--- Block sorting machinery                               ---*/"}, {"sha": "41c442f61a625c8b350e1e4c870a98d86b167031", "filename": "gcc/testsuite/gcc.dg/pr82788.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82788.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82788.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82788.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fstack-clash-protection --param stack-clash-protection-probe-interval=10 --param stack-clash-protection-guard-size=12\" } */\n /* { dg-require-effective-target supports_stack_clash_protection } */\n+/* { dg-skip-if \"AArch64 does not support this interval.\" { aarch64*-*-* } } */\n int main() { int a[1442]; return 0;}"}, {"sha": "2f5a090cb7a4ed6d2e6e4317492150a348a326ab", "filename": "gcc/testsuite/gcc.dg/stack-check-10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -39,3 +39,4 @@ f3 (void)\n    need a frame pointer.  Otherwise neither should.  */\n /* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n /* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe small stack adjustment in prologue\" 2 \"pro_and_epilogue\" { target { aarch64*-*-* } } } } */"}, {"sha": "0243147939c10e8f4632520b12714724af85b332", "filename": "gcc/testsuite/gcc.dg/stack-check-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -66,7 +66,9 @@ f3 (void)\n /* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 4 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n /* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n /* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n-\n+/* AArch64 won't require a probe here due to the allocation amount being less than 1KB.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe small stack adjustment in prologue\" 3 \"pro_and_epilogue\" { target { aarch64*-*-* } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe no stack adjustment in prologue\" 1 \"pro_and_epilogue\" { target { aarch64*-*-* } } } } */\n \n /* We have selected the size of the array in f2/f3 to be large enough\n    to not live in the red zone on targets that support it."}, {"sha": "68dd9bc48a0c26ecb84ddd2c09b8aa74d3276695", "filename": "gcc/testsuite/gcc.dg/stack-check-6a.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -5,6 +5,7 @@\n /* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=16\" } */\n /* { dg-require-effective-target supports_stack_clash_protection  } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fstack-protector*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { aarch64*-*-* } } */\n \n \n #include \"stack-check-6.c\""}, {"sha": "be5a57a9ec6bb0a866ab57571d06912731d76c7a", "filename": "gcc/testsuite/gcc.target/aarch64/stack-check-12.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-check-12.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -2,12 +2,14 @@\n /* { dg-options \"-O2 -fstack-clash-protection --param stack-clash-protection-guard-size=16 -fno-asynchronous-unwind-tables -fno-unwind-tables\" } */\n /* { dg-require-effective-target supports_stack_clash_protection } */\n \n-extern void arf (unsigned long int *, unsigned long int *);\n+typedef unsigned __attribute__((mode(DI))) uint64_t;\n+\n+extern void arf (uint64_t *, uint64_t *);\n void\n frob ()\n {\n-  unsigned long int num[10000];\n-  unsigned long int den[10000];\n+  uint64_t num[10000];\n+  uint64_t den[10000];\n   arf (den, num);\n }\n "}, {"sha": "6ef6b2c90ae694055749a94b68cbba5ee4aea882", "filename": "gcc/testsuite/gcc.target/aarch64/subsp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -fno-stack-clash-protection\" } */\n \n int foo (void *);\n "}, {"sha": "b82c332ca8b09383fdb1dbb185c53ebd8bc8679e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98f502f0ab9e51357665d7afcad724feee6088b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c98f502f0ab9e51357665d7afcad724feee6088b", "patch": "@@ -8396,10 +8396,6 @@ proc check_effective_target_supports_stack_clash_protection { } {\n # Return 1 if the target creates a frame pointer for non-leaf functions\n # Note we ignore cases where we apply tail call optimization here.\n proc check_effective_target_frame_pointer_for_non_leaf { } {\n-  if { [istarget aarch*-*-*] } {\n-\treturn 1\n-  }\n-\n   # Solaris/x86 defaults to -fno-omit-frame-pointer.\n   if { [istarget i?86-*-solaris*] || [istarget x86_64-*-solaris*] } {\n     return 1"}]}