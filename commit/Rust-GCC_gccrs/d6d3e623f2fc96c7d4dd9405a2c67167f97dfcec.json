{"sha": "d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkM2U2MjNmMmZjOTZjN2Q0ZGQ5NDA1YTJjNjcxNjdmOTdkZmNlYw==", "commit": {"author": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-08-28T21:58:02Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-08-28T21:58:02Z"}, "message": "mips.h (ISA_HAS_DMUL3): New macro.\n\n\t* config/mips/mips.h (ISA_HAS_DMUL3): New macro.\n\t* config/mips/mips.md (D): New mode attribute.\n\t(mulsi3, muldi3): Merge it into ...\n\t(mul<mode>3): ... new template.  Use _mul3 ending for 3-op\n\tpatterns.\n\t(muldi3_mul3): New pattern.\n\t(mulsi3_mult3): Rename to mulsi3_mul3.\n\ntestsuite/\n\t* gcc.target/mips/octeon-dmul-1.c: New test.\n\t* gcc.target/mips/octeon-dmul-2.c: New test.\n\t* gcc.target/mips/dmult-1.c: New test.\n\nFrom-SVN: r139738", "tree": {"sha": "2b5a6153783b20e61441dd38eb467d5dfc342867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5a6153783b20e61441dd38eb467d5dfc342867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/comments", "author": null, "committer": null, "parents": [{"sha": "3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3debdc1e9da1742b04771e44bf96e0104f0c3bcb"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "b6bcce4794094e6ee90d603c25bea7b3d23ff2f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -1,6 +1,17 @@\n+2008-08-28  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_DMUL3): New macro.\n+\t* config/mips/mips.md (D): New mode attribute.\n+\t(mulsi3, muldi3): Merge it into ...\n+\t(mul<mode>3): ... new template.  Use _mul3 ending for 3-op\n+\tpatterns.\n+\t(muldi3_mul3): New pattern.\n+\t(mulsi3_mult3): Rename to mulsi3_mul3.\n+\n 2008-08-28  Jan Hubicka  <jh@suse.cz>\n \n-\t* expmed.c (store_bit_field_1): Be prepared for movstrict expander to fail.\n+\t* expmed.c (store_bit_field_1): Be prepared for movstrict expander\n+\tto fail.\n \t* predict.c (always_optimize_for_size_p): Rename to ...\n \t(optimize_function_for_size): ... this one; make extern.\n \t(optimize_function_for_speed_p): New.\n@@ -9,7 +20,8 @@\n \toptimize_insn_for_size_p, optimize_insn_for_size_p): Update.\n \t* basic-block.h (optimize_function_for_size_p,\n \toptimize_function_for_speed_p): Declare.\n-\t* i386.md (optimize_size checks): Replace them by appropriate predicate.\n+\t* i386.md (optimize_size checks): Replace them by appropriate\n+\tpredicate.\n \t(standard_80387_constant_p, ix86_compute_frame_layout,\n \tix86_expand_epilogue, ix86_decompose_address,\n \tprint_operand, emit_i387_cw_initialization,"}, {"sha": "14512e2e67e4a36183c596f71766bc99a1d6e302", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -778,6 +778,9 @@ enum mips_code_readable_setting {\n \t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has a three-operand multiplication instruction.  */\n+#define ISA_HAS_DMUL3\t\t(TARGET_64BIT && TARGET_OCTEON)\n+\n /* ISA has the floating-point conditional move instructions introduced\n    in mips4.  */\n #define ISA_HAS_FP_CONDMOVE\t((ISA_MIPS4\t\t\t\t\\"}, {"sha": "84a44ee90d5226c78c0a887fae00a458de826932", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -685,6 +685,13 @@\n \t\t     (HA \"\") (SA \"\") (DA \"d\")\n \t\t     (UHA \"\") (USA \"\") (UDA \"d\")])\n \n+;; Same as d but upper-case.\n+(define_mode_attr D [(SI \"\") (DI \"D\")\n+\t\t     (QQ \"\") (HQ \"\") (SQ \"\") (DQ \"D\")\n+\t\t     (UQQ \"\") (UHQ \"\") (USQ \"\") (UDQ \"D\")\n+\t\t     (HA \"\") (SA \"\") (DA \"D\")\n+\t\t     (UHA \"\") (USA \"\") (UDA \"D\")])\n+\n ;; This attribute gives the length suffix for a sign- or zero-extension\n ;; instruction.\n (define_mode_attr size [(QI \"b\") (HI \"h\")])\n@@ -1286,35 +1293,23 @@\n ;; These processors have PRId values of 0x00004220 and 0x00004300,\n ;; respectively.\n \n-(define_expand \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\")\n-\t\t (match_operand:SI 2 \"register_operand\")))]\n+(define_expand \"mul<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(mult:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t  (match_operand:GPR 2 \"register_operand\")))]\n   \"\"\n {\n-  if (ISA_HAS_MUL3)\n-    emit_insn (gen_mulsi3_mult3 (operands[0], operands[1], operands[2]));\n+  if (ISA_HAS_<D>MUL3)\n+    emit_insn (gen_mul<mode>3_mul3 (operands[0], operands[1], operands[2]));\n   else if (TARGET_FIX_R4000)\n-    emit_insn (gen_mulsi3_r4000 (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_mulsi3_internal (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\")\n-\t\t (match_operand:DI 2 \"register_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_FIX_R4000)\n-    emit_insn (gen_muldi3_r4000 (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mul<mode>3_r4000 (operands[0], operands[1], operands[2]));\n   else\n-    emit_insn (gen_muldi3_internal (operands[0], operands[1], operands[2]));\n+    emit_insn\n+      (gen_mul<mode>3_internal (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"mulsi3_mult3\"\n+(define_insn \"mulsi3_mul3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,l\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t\t (match_operand:SI 2 \"register_operand\" \"d,d\")))\n@@ -1330,6 +1325,20 @@\n   [(set_attr \"type\" \"imul3,imul\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"muldi3_mul3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,l\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"d,d\")))\n+   (clobber (match_scratch:DI 3 \"=l,X\"))]\n+  \"ISA_HAS_DMUL3\"\n+{\n+  if (which_alternative == 1)\n+    return \"dmult\\t%1,%2\";\n+  return \"dmul\\t%0,%1,%2\";\n+}\n+  [(set_attr \"type\" \"imul3,imul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;; If a register gets allocated to LO, and we spill to memory, the reload\n ;; will include a move from LO to a GPR.  Merge it into the multiplication\n ;; if it can set the GPR directly."}, {"sha": "f65db77f24bac0805b8db665bcc6709457054e1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -1,3 +1,9 @@\n+2008-08-28  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/octeon-dmul-1.c: New test.\n+\t* gcc.target/mips/octeon-dmul-2.c: New test.\n+\t* gcc.target/mips/dmult-1.c: New test.\n+\n 2008-08-28  Xuepeng Guo  <xuepeng.guo@intel.com>\n \t    Joey Ye  <joey.ye@intel.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "561bdf4bb15e16748206ab235839b6b95bee3243", "filename": "gcc/testsuite/gcc.target/mips/dmult-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target mips16_attribute } } */\n+/* { dg-mips-options \"-mips64 -mgp64\" } */\n+/* { dg-add-options mips16_attribute } */\n+/* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdmul\\t\" } } */\n+\n+long long\n+f (long long a, long long b)\n+{\n+  return a * b;\n+}"}, {"sha": "1cbf7a63c5186de334194caeaa3d2648bbdc6f9a", "filename": "gcc/testsuite/gcc.target/mips/octeon-dmul-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-1.c?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler \"\\tdmul\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tdmult\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmflo\\t\" } } */\n+\n+NOMIPS16 long long\n+f (long long a, long long b)\n+{\n+  return a * b;\n+}"}, {"sha": "2e8e4e61033fb5b7ff87ccdedc819f51b6476d7a", "filename": "gcc/testsuite/gcc.target/mips/octeon-dmul-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-dmul-2.c?ref=d6d3e623f2fc96c7d4dd9405a2c67167f97dfcec", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-not \"\\tdmul\" } } */\n+\n+NOMIPS16 long long\n+f (long long a)\n+{\n+  return a * 7;\n+}"}]}