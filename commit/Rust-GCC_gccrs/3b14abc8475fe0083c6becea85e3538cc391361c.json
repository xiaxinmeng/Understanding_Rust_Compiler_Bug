{"sha": "3b14abc8475fe0083c6becea85e3538cc391361c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxNGFiYzg0NzVmZTAwODNjNmJlY2VhODVlMzUzOGNjMzkxMzYxYw==", "commit": {"author": {"name": "Felix Yang", "email": "felix.yang@huawei.com", "date": "2015-08-21T14:34:52Z"}, "committer": {"name": "Fei Yang", "email": "fyang@gcc.gnu.org", "date": "2015-08-21T14:34:52Z"}, "message": "value-prof.c (interesting_stringop_to_profile_p): Removed FNDECL argument and get builtin function code directly from CALL.\n\n\t* value-prof.c (interesting_stringop_to_profile_p): Removed FNDECL argument\n\tand get builtin function code directly from CALL.\n\t(gimple_stringop_fixed_value): Modified accordingly.\n\t(gimple_stringops_transform, gimple_stringops_values_to_profile): Modified\n\taccordingly and only accept BUILT_IN_NORMAL string operations.\n\nCo-Authored-By: Jiji Jiang <jiangjiji@huawei.com>\n\nFrom-SVN: r227060", "tree": {"sha": "11b1f0ca9c33577ba7a05ff5ff8c97cbd87117de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11b1f0ca9c33577ba7a05ff5ff8c97cbd87117de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b14abc8475fe0083c6becea85e3538cc391361c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14abc8475fe0083c6becea85e3538cc391361c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b14abc8475fe0083c6becea85e3538cc391361c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14abc8475fe0083c6becea85e3538cc391361c/comments", "author": null, "committer": null, "parents": [{"sha": "a560e5d418a796c99d1c3d47209044a9cf5745c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a560e5d418a796c99d1c3d47209044a9cf5745c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a560e5d418a796c99d1c3d47209044a9cf5745c6"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "66006138bab640ac538a9ea9f6ee81c49a0ce9ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14abc8475fe0083c6becea85e3538cc391361c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14abc8475fe0083c6becea85e3538cc391361c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b14abc8475fe0083c6becea85e3538cc391361c", "patch": "@@ -1,3 +1,12 @@\n+2014-08-21  Felix Yang  <felix.yang@huawei.com>\n+\t    Jiji Jiang  <jiangjiji@huawei.com>\n+\n+\t* value-prof.c (interesting_stringop_to_profile_p): Removed FNDECL argument\n+\tand get builtin function code directly from CALL.\n+\t(gimple_stringop_fixed_value): Modified accordingly.\n+\t(gimple_stringops_transform, gimple_stringops_values_to_profile): Modified\n+\taccordingly and only accept BUILT_IN_NORMAL string operations.\n+\n 2015-08-21  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390-builtins.def: Fix value range of vec_load_bndry."}, {"sha": "324f3c8a8177628a93d300c5fb134c32894ffc36", "filename": "gcc/value-prof.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14abc8475fe0083c6becea85e3538cc391361c/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14abc8475fe0083c6becea85e3538cc391361c/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=3b14abc8475fe0083c6becea85e3538cc391361c", "patch": "@@ -212,7 +212,6 @@ gimple_add_histogram_value (struct function *fun, gimple stmt,\n   hist->fun = fun;\n }\n \n-\n /* Remove histogram HIST from STMT's histogram list.  */\n \n void\n@@ -237,7 +236,6 @@ gimple_remove_histogram_value (struct function *fun, gimple stmt,\n   free (hist);\n }\n \n-\n /* Lookup histogram of type TYPE in the STMT.  */\n \n histogram_value\n@@ -408,6 +406,7 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)\n   if (hist->hvalue.next)\n     stream_out_histogram_value (ob, hist->hvalue.next);\n }\n+\n /* Dump information about HIST to DUMP_FILE.  */\n \n void\n@@ -512,7 +511,6 @@ gimple_duplicate_stmt_histograms (struct function *fun, gimple stmt,\n     }\n }\n \n-\n /* Move all histograms associated with OSTMT to STMT.  */\n \n void\n@@ -553,7 +551,6 @@ visit_hist (void **slot, void *data)\n   return 1;\n }\n \n-\n /* Verify sanity of the histograms.  */\n \n DEBUG_FUNCTION void\n@@ -616,7 +613,6 @@ free_histograms (void)\n     }\n }\n \n-\n /* The overall number of invocations of the counter should match\n    execution count of basic block.  Report it as error rather than\n    internal error as it might mean that user has misused the profile\n@@ -660,7 +656,6 @@ check_counter (gimple stmt, const char * name,\n   return false;\n }\n \n-\n /* GIMPLE based transformations. */\n \n bool\n@@ -669,7 +664,6 @@ gimple_value_profile_transformations (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n   bool changed = false;\n-\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -719,7 +713,6 @@ gimple_value_profile_transformations (void)\n   return changed;\n }\n \n-\n /* Generate code for transformation 1 (with parent gimple assignment\n    STMT and probability of taking the optimal path PROB, which is\n    equivalent to COUNT/ALL within roundoff error).  This generates the\n@@ -802,7 +795,6 @@ gimple_divmod_fixed_value (gassign *stmt, tree value, int prob,\n   return tmp2;\n }\n \n-\n /* Do transform 1) on INSN if applicable.  */\n \n static bool\n@@ -888,6 +880,7 @@ gimple_divmod_fixed_value_transform (gimple_stmt_iterator *si)\n    probability of taking the optimal path PROB, which is equivalent to COUNT/ALL\n    within roundoff error).  This generates the result into a temp and returns\n    the temp; it does not replace or alter the original STMT.  */\n+\n static tree\n gimple_mod_pow2 (gassign *stmt, int prob, gcov_type count, gcov_type all)\n {\n@@ -968,6 +961,7 @@ gimple_mod_pow2 (gassign *stmt, int prob, gcov_type count, gcov_type all)\n }\n \n /* Do transform 2) on INSN if applicable.  */\n+\n static bool\n gimple_mod_pow2_value_transform (gimple_stmt_iterator *si)\n {\n@@ -1137,7 +1131,6 @@ gimple_mod_subtract (gassign *stmt, int prob1, int prob2, int ncounts,\n   return result;\n }\n \n-\n /* Do transforms 3) and 4) on the statement pointed-to by SI if applicable.  */\n \n static bool\n@@ -1151,7 +1144,6 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n   unsigned int i, steps;\n   gcov_type count1, count2;\n   gassign *stmt;\n-\n   stmt = dyn_cast <gassign *> (gsi_stmt (*si));\n   if (!stmt)\n     return false;\n@@ -1632,15 +1624,15 @@ gimple_ic_transform (gimple_stmt_iterator *gsi)\n   return true;\n }\n \n-/* Return true if the stringop CALL with FNDECL shall be profiled.\n-   SIZE_ARG be set to the argument index for the size of the string\n-   operation.\n-*/\n+/* Return true if the stringop CALL shall be profiled.  SIZE_ARG be\n+   set to the argument index for the size of the string operation.  */\n+\n static bool\n-interesting_stringop_to_profile_p (tree fndecl, gcall *call, int *size_arg)\n+interesting_stringop_to_profile_p (gcall *call, int *size_arg)\n {\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum built_in_function fcode;\n \n+  fcode = DECL_FUNCTION_CODE (gimple_call_fndecl (call));\n   if (fcode != BUILT_IN_MEMCPY && fcode != BUILT_IN_MEMPCPY\n       && fcode != BUILT_IN_MEMSET && fcode != BUILT_IN_BZERO)\n     return false;\n@@ -1665,7 +1657,7 @@ interesting_stringop_to_profile_p (tree fndecl, gcall *call, int *size_arg)\n     }\n }\n \n-/* Convert   stringop (..., vcall_size)\n+/* Convert stringop (..., vcall_size)\n    into\n    if (vcall_size == icall_size)\n      stringop (..., icall_size);\n@@ -1684,11 +1676,9 @@ gimple_stringop_fixed_value (gcall *vcall_stmt, tree icall_size, int prob,\n   basic_block cond_bb, icall_bb, vcall_bb, join_bb;\n   edge e_ci, e_cv, e_iv, e_ij, e_vj;\n   gimple_stmt_iterator gsi;\n-  tree fndecl;\n   int size_arg;\n \n-  fndecl = gimple_call_fndecl (vcall_stmt);\n-  if (!interesting_stringop_to_profile_p (fndecl, vcall_stmt, &size_arg))\n+  if (!interesting_stringop_to_profile_p (vcall_stmt, &size_arg))\n     gcc_unreachable ();\n \n   cond_bb = gimple_bb (vcall_stmt);\n@@ -1767,11 +1757,11 @@ gimple_stringop_fixed_value (gcall *vcall_stmt, tree icall_size, int prob,\n \n /* Find values inside STMT for that we want to measure histograms for\n    division/modulo optimization.  */\n+\n static bool\n gimple_stringops_transform (gimple_stmt_iterator *gsi)\n {\n   gcall *stmt;\n-  tree fndecl;\n   tree blck_size;\n   enum built_in_function fcode;\n   histogram_value histogram;\n@@ -1785,11 +1775,11 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n   stmt = dyn_cast <gcall *> (gsi_stmt (*gsi));\n   if (!stmt)\n     return false;\n-  fndecl = gimple_call_fndecl (stmt);\n-  if (!fndecl)\n+\n+  if (!gimple_call_builtin_p (gsi_stmt (*gsi), BUILT_IN_NORMAL))\n     return false;\n-  fcode = DECL_FUNCTION_CODE (fndecl);\n-  if (!interesting_stringop_to_profile_p (fndecl, stmt, &size_arg))\n+\n+  if (!interesting_stringop_to_profile_p (stmt, &size_arg))\n     return false;\n \n   blck_size = gimple_call_arg (stmt, size_arg);\n@@ -1799,10 +1789,12 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n   histogram = gimple_histogram_value_of_type (cfun, stmt, HIST_TYPE_SINGLE_VALUE);\n   if (!histogram)\n     return false;\n+\n   val = histogram->hvalue.counters[0];\n   count = histogram->hvalue.counters[1];\n   all = histogram->hvalue.counters[2];\n   gimple_remove_histogram_value (cfun, stmt, histogram);\n+\n   /* We require that count is at least half of all; this means\n      that for the transformation to fire the value must be constant\n      at least 80% of time.  */\n@@ -1814,8 +1806,10 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n     prob = GCOV_COMPUTE_SCALE (count, all);\n   else\n     prob = 0;\n+\n   dest = gimple_call_arg (stmt, 0);\n   dest_align = get_pointer_alignment (dest);\n+  fcode = DECL_FUNCTION_CODE (gimple_call_fndecl (stmt));\n   switch (fcode)\n     {\n     case BUILT_IN_MEMCPY:\n@@ -1840,6 +1834,7 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n     default:\n       gcc_unreachable ();\n     }\n+\n   if (sizeof (gcov_type) == sizeof (HOST_WIDE_INT))\n     tree_val = build_int_cst (get_gcov_type (), val);\n   else\n@@ -1858,6 +1853,7 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n \t       (int)val);\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n+\n   gimple_stringop_fixed_value (stmt, tree_val, prob, count, all);\n \n   return true;\n@@ -1869,6 +1865,7 @@ stringop_block_profile (gimple stmt, unsigned int *expected_align,\n {\n   histogram_value histogram;\n   histogram = gimple_histogram_value_of_type (cfun, stmt, HIST_TYPE_AVERAGE);\n+\n   if (!histogram)\n     *expected_size = -1;\n   else if (!histogram->hvalue.counters[1])\n@@ -1889,7 +1886,9 @@ stringop_block_profile (gimple stmt, unsigned int *expected_align,\n       *expected_size = size;\n       gimple_remove_histogram_value (cfun, stmt, histogram);\n     }\n+\n   histogram = gimple_histogram_value_of_type (cfun, stmt, HIST_TYPE_IOR);\n+\n   if (!histogram)\n     *expected_align = 0;\n   else if (!histogram->hvalue.counters[0])\n@@ -1915,6 +1914,7 @@ stringop_block_profile (gimple stmt, unsigned int *expected_align,\n \f\n /* Find values inside STMT for that we want to measure histograms for\n    division/modulo optimization.  */\n+\n static void\n gimple_divmod_values_to_profile (gimple stmt, histogram_values *values)\n {\n@@ -1999,23 +1999,23 @@ gimple_indirect_call_to_profile (gimple stmt, histogram_values *values)\n \n /* Find values inside STMT for that we want to measure histograms for\n    string operations.  */\n+\n static void\n gimple_stringops_values_to_profile (gimple gs, histogram_values *values)\n {\n   gcall *stmt;\n-  tree fndecl;\n   tree blck_size;\n   tree dest;\n   int size_arg;\n \n   stmt = dyn_cast <gcall *> (gs);\n   if (!stmt)\n     return;\n-  fndecl = gimple_call_fndecl (stmt);\n-  if (!fndecl)\n+\n+  if (!gimple_call_builtin_p (gs, BUILT_IN_NORMAL))\n     return;\n \n-  if (!interesting_stringop_to_profile_p (fndecl, stmt, &size_arg))\n+  if (!interesting_stringop_to_profile_p (stmt, &size_arg))\n     return;\n \n   dest = gimple_call_arg (stmt, 0);\n@@ -2029,6 +2029,7 @@ gimple_stringops_values_to_profile (gimple gs, histogram_values *values)\n       values->safe_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_AVERAGE,\n \t\t\t\t\t\t       stmt, blck_size));\n     }\n+\n   if (TREE_CODE (blck_size) != INTEGER_CST)\n     values->safe_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_IOR,\n \t\t\t\t\t\t     stmt, dest));"}]}