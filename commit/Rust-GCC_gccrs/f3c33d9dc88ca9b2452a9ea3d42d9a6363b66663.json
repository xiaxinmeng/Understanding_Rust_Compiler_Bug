{"sha": "f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjMzNkOWRjODhjYTliMjQ1MmE5ZWEzZDQyZDlhNjM2M2I2NjY2Mw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2011-03-21T16:21:30Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-03-21T16:21:30Z"}, "message": "Make UNSPEC/UNSPECV constants use the enum; Fix 48192; Add test case for 48053\n\nFrom-SVN: r171247", "tree": {"sha": "a11038042e07218234e45c1da1c876bdbdf8c2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11038042e07218234e45c1da1c876bdbdf8c2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/comments", "author": null, "committer": null, "parents": [{"sha": "ac43f774369194320ba2368b21550d4aa5ca97b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac43f774369194320ba2368b21550d4aa5ca97b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac43f774369194320ba2368b21550d4aa5ca97b9"}], "stats": {"total": 596, "additions": 364, "deletions": 232}, "files": [{"sha": "baf4d854a07cafcfa5e0c8e0961305a4bf30561a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,3 +1,20 @@\n+2011-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC_*, UNSPECV_*): Redefine all\n+\tUNSPEC constants to be in the unspec enumeration, and redefine\n+\tall UNSPECV constants to be in the unspecv enumeration, so that\n+\tdumps print which unspec/unspec_volatile this is.\n+\t* config/rs6000/vector.md (UNSPEC_*): Ditto.\n+\t* config/rs6000/paired.md (UNSPEC_*): Ditto.\n+\t* config/rs6000/vsx.md (UNSPEC_*): Ditto.\n+\t* config/rs6000/altivec.md (UNSPEC_*, UNSPECV_*): Ditto.\n+\t* config/rs6000/dfp.md (UNSPEC_*): Ditto.\n+\n+\t* config/rs6000/rs6000.md (UNSPECV_ISYNC, UNSPECV_LWSYNC): Rename\n+\tUNSPEC_ISYNC and UNSPEC_HWSYNC to UNSPECV_ISYNC and\n+\tUNSPECV_LWSYNC, since these are used as unspec_volatile.\n+\t* config/rs6000/sync.md (isync, lwsync): Ditto.\n+\n 2011-03-21  Richard Guenther  <rguenther@suse.de>\n \n \t* params.def (lto-min-partition): Fix typo."}, {"sha": "d507b86973f43bd788d267cace35326fbeef4762", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 122, "deletions": 130, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -19,138 +19,130 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_constants\n-   ;; 51-62 deleted\n-  [(UNSPEC_VCMPBFP       64)\n-   (UNSPEC_VMSUMU        65)\n-   (UNSPEC_VMSUMM        66)\n-   (UNSPEC_VMSUMSHM      68)\n-   (UNSPEC_VMSUMUHS      69)\n-   (UNSPEC_VMSUMSHS      70)\n-   (UNSPEC_VMHADDSHS     71)\n-   (UNSPEC_VMHRADDSHS    72)\n-   (UNSPEC_VMLADDUHM     73)\n-   (UNSPEC_VADDCUW       75)\n-   (UNSPEC_VADDU         76)\n-   (UNSPEC_VADDS         77)\n-   (UNSPEC_VAVGU         80)\n-   (UNSPEC_VAVGS         81)\n-   (UNSPEC_VMULEUB       83)\n-   (UNSPEC_VMULESB       84)\n-   (UNSPEC_VMULEUH       85)\n-   (UNSPEC_VMULESH       86)\n-   (UNSPEC_VMULOUB       87)\n-   (UNSPEC_VMULOSB       88)\n-   (UNSPEC_VMULOUH       89)\n-   (UNSPEC_VMULOSH       90)\n-   (UNSPEC_VPKUHUM       93)\n-   (UNSPEC_VPKUWUM       94)\n-   (UNSPEC_VPKPX         95)\n-   (UNSPEC_VPKSHSS       97)\n-   (UNSPEC_VPKSWSS       99)\n-   (UNSPEC_VPKUHUS      100)\n-   (UNSPEC_VPKSHUS      101)\n-   (UNSPEC_VPKUWUS      102)\n-   (UNSPEC_VPKSWUS      103)\n-   ;; 104 deleted\n-   (UNSPEC_VSLV4SI      110)\n-   (UNSPEC_VSLO         111)\n-   (UNSPEC_VSR          118)\n-   (UNSPEC_VSRO         119)\n-   (UNSPEC_VSUBCUW      124)\n-   (UNSPEC_VSUBU        125)\n-   (UNSPEC_VSUBS        126)\n-   (UNSPEC_VSUM4UBS     131)\n-   (UNSPEC_VSUM4S       132)\n-   (UNSPEC_VSUM2SWS     134)\n-   (UNSPEC_VSUMSWS      135)\n-   (UNSPEC_VPERM        144)\n-   (UNSPEC_VPERM_UNS    145)\n-   ;; 148 deleted\n-   (UNSPEC_VRFIN        149)\n-   ;; 150 deleted\n-   (UNSPEC_VCFUX        151)\n-   (UNSPEC_VCFSX        152)\n-   (UNSPEC_VCTUXS       153)\n-   (UNSPEC_VCTSXS       154)\n-   (UNSPEC_VLOGEFP      155)\n-   (UNSPEC_VEXPTEFP     156)\n-   ;; 157-162 deleted\n-   (UNSPEC_VLSDOI       163)\n-   (UNSPEC_VUPKHSB      167)\n-   (UNSPEC_VUPKHPX      168)\n-   (UNSPEC_VUPKHSH      169)\n-   (UNSPEC_VUPKLSB      170)\n-   (UNSPEC_VUPKLPX      171)\n-   (UNSPEC_VUPKLSH      172)\n-   ;; 173 deleted\n-   (UNSPEC_DST          190)\n-   (UNSPEC_DSTT         191)\n-   (UNSPEC_DSTST        192)\n-   (UNSPEC_DSTSTT       193)\n-   (UNSPEC_LVSL         194)\n-   (UNSPEC_LVSR         195)\n-   (UNSPEC_LVE          196)\n-   (UNSPEC_STVX         201)\n-   (UNSPEC_STVXL        202)\n-   (UNSPEC_STVE         203)\n-   (UNSPEC_SET_VSCR     213)\n-   (UNSPEC_GET_VRSAVE   214)\n-   (UNSPEC_LVX\t\t215)\n-   (UNSPEC_REDUC_PLUS   217)\n-   (UNSPEC_VECSH        219)\n-   (UNSPEC_EXTEVEN_V4SI 220)\n-   (UNSPEC_EXTEVEN_V8HI 221)\n-   (UNSPEC_EXTEVEN_V16QI 222)\n-   (UNSPEC_EXTEVEN_V4SF 223)\n-   (UNSPEC_EXTODD_V4SI  224)\n-   (UNSPEC_EXTODD_V8HI  225)\n-   (UNSPEC_EXTODD_V16QI 226)\n-   (UNSPEC_EXTODD_V4SF  227)\n-   (UNSPEC_INTERHI_V4SI 228)\n-   (UNSPEC_INTERHI_V8HI 229)\n-   (UNSPEC_INTERHI_V16QI 230)\n-   ;; delete 231\n-   (UNSPEC_INTERLO_V4SI 232)\n-   (UNSPEC_INTERLO_V8HI 233)\n-   (UNSPEC_INTERLO_V16QI 234)\n-   ;; delete 235\n-   (UNSPEC_LVLX         236)\n-   (UNSPEC_LVLXL        237)\n-   (UNSPEC_LVRX         238)\n-   (UNSPEC_LVRXL        239)\n-   (UNSPEC_STVLX        240)\n-   (UNSPEC_STVLXL       241)\n-   (UNSPEC_STVRX        242)\n-   (UNSPEC_STVRXL       243)\n-   (UNSPEC_VMULWHUB     308)\n-   (UNSPEC_VMULWLUB     309)\n-   (UNSPEC_VMULWHSB     310)\n-   (UNSPEC_VMULWLSB     311)\n-   (UNSPEC_VMULWHUH     312)\n-   (UNSPEC_VMULWLUH     313)\n-   (UNSPEC_VMULWHSH     314)\n-   (UNSPEC_VMULWLSH     315)\n-   (UNSPEC_VUPKHUB      316)\n-   (UNSPEC_VUPKHUH      317)\n-   (UNSPEC_VUPKLUB      318)\n-   (UNSPEC_VUPKLUH      319)\n-   (UNSPEC_VPERMSI\t320)\n-   (UNSPEC_VPERMHI\t321)\n-   (UNSPEC_INTERHI      322)\n-   (UNSPEC_INTERLO      323)\n-   (UNSPEC_VUPKHS_V4SF  324)\n-   (UNSPEC_VUPKLS_V4SF  325)\n-   (UNSPEC_VUPKHU_V4SF  326)\n-   (UNSPEC_VUPKLU_V4SF  327)\n+(define_c_enum \"unspec\"\n+  [UNSPEC_VCMPBFP\n+   UNSPEC_VMSUMU\n+   UNSPEC_VMSUMM\n+   UNSPEC_VMSUMSHM\n+   UNSPEC_VMSUMUHS\n+   UNSPEC_VMSUMSHS\n+   UNSPEC_VMHADDSHS\n+   UNSPEC_VMHRADDSHS\n+   UNSPEC_VMLADDUHM\n+   UNSPEC_VADDCUW\n+   UNSPEC_VADDU\n+   UNSPEC_VADDS\n+   UNSPEC_VAVGU\n+   UNSPEC_VAVGS\n+   UNSPEC_VMULEUB\n+   UNSPEC_VMULESB\n+   UNSPEC_VMULEUH\n+   UNSPEC_VMULESH\n+   UNSPEC_VMULOUB\n+   UNSPEC_VMULOSB\n+   UNSPEC_VMULOUH\n+   UNSPEC_VMULOSH\n+   UNSPEC_VPKUHUM\n+   UNSPEC_VPKUWUM\n+   UNSPEC_VPKPX\n+   UNSPEC_VPKSHSS\n+   UNSPEC_VPKSWSS\n+   UNSPEC_VPKUHUS\n+   UNSPEC_VPKSHUS\n+   UNSPEC_VPKUWUS\n+   UNSPEC_VPKSWUS\n+   UNSPEC_VSLV4SI\n+   UNSPEC_VSLO\n+   UNSPEC_VSR\n+   UNSPEC_VSRO\n+   UNSPEC_VSUBCUW\n+   UNSPEC_VSUBU\n+   UNSPEC_VSUBS\n+   UNSPEC_VSUM4UBS\n+   UNSPEC_VSUM4S\n+   UNSPEC_VSUM2SWS\n+   UNSPEC_VSUMSWS\n+   UNSPEC_VPERM\n+   UNSPEC_VPERM_UNS\n+   UNSPEC_VRFIN\n+   UNSPEC_VCFUX\n+   UNSPEC_VCFSX\n+   UNSPEC_VCTUXS\n+   UNSPEC_VCTSXS\n+   UNSPEC_VLOGEFP\n+   UNSPEC_VEXPTEFP\n+   UNSPEC_VLSDOI\n+   UNSPEC_VUPKHSB\n+   UNSPEC_VUPKHPX\n+   UNSPEC_VUPKHSH\n+   UNSPEC_VUPKLSB\n+   UNSPEC_VUPKLPX\n+   UNSPEC_VUPKLSH\n+   UNSPEC_DST\n+   UNSPEC_DSTT\n+   UNSPEC_DSTST\n+   UNSPEC_DSTSTT\n+   UNSPEC_LVSL\n+   UNSPEC_LVSR\n+   UNSPEC_LVE\n+   UNSPEC_STVX\n+   UNSPEC_STVXL\n+   UNSPEC_STVE\n+   UNSPEC_SET_VSCR\n+   UNSPEC_GET_VRSAVE\n+   UNSPEC_LVX\n+   UNSPEC_REDUC_PLUS\n+   UNSPEC_VECSH\n+   UNSPEC_EXTEVEN_V4SI\n+   UNSPEC_EXTEVEN_V8HI\n+   UNSPEC_EXTEVEN_V16QI\n+   UNSPEC_EXTEVEN_V4SF\n+   UNSPEC_EXTODD_V4SI\n+   UNSPEC_EXTODD_V8HI\n+   UNSPEC_EXTODD_V16QI\n+   UNSPEC_EXTODD_V4SF\n+   UNSPEC_INTERHI_V4SI\n+   UNSPEC_INTERHI_V8HI\n+   UNSPEC_INTERHI_V16QI\n+   UNSPEC_INTERLO_V4SI\n+   UNSPEC_INTERLO_V8HI\n+   UNSPEC_INTERLO_V16QI\n+   UNSPEC_LVLX\n+   UNSPEC_LVLXL\n+   UNSPEC_LVRX\n+   UNSPEC_LVRXL\n+   UNSPEC_STVLX\n+   UNSPEC_STVLXL\n+   UNSPEC_STVRX\n+   UNSPEC_STVRXL\n+   UNSPEC_VMULWHUB\n+   UNSPEC_VMULWLUB\n+   UNSPEC_VMULWHSB\n+   UNSPEC_VMULWLSB\n+   UNSPEC_VMULWHUH\n+   UNSPEC_VMULWLUH\n+   UNSPEC_VMULWHSH\n+   UNSPEC_VMULWLSH\n+   UNSPEC_VUPKHUB\n+   UNSPEC_VUPKHUH\n+   UNSPEC_VUPKLUB\n+   UNSPEC_VUPKLUH\n+   UNSPEC_VPERMSI\n+   UNSPEC_VPERMHI\n+   UNSPEC_INTERHI\n+   UNSPEC_INTERLO\n+   UNSPEC_VUPKHS_V4SF\n+   UNSPEC_VUPKLS_V4SF\n+   UNSPEC_VUPKHU_V4SF\n+   UNSPEC_VUPKLU_V4SF\n ])\n \n-(define_constants\n-  [(UNSPECV_SET_VRSAVE   30)\n-   (UNSPECV_MTVSCR      186)\n-   (UNSPECV_MFVSCR      187)\n-   (UNSPECV_DSSALL      188)\n-   (UNSPECV_DSS         189)\n+(define_c_enum \"unspecv\"\n+  [UNSPECV_SET_VRSAVE\n+   UNSPECV_MTVSCR\n+   UNSPECV_MFVSCR\n+   UNSPECV_DSSALL\n+   UNSPECV_DSS\n   ])\n \n ;; Vec int modes"}, {"sha": "d57ac93fbb9e891ab0c5adeab11272a84e71c1e8", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,5 +1,5 @@\n ;; Decimal Floating Point (DFP) patterns.\n-;; Copyright (C) 2007, 2008, 2010\n+;; Copyright (C) 2007, 2008, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;; Contributed by Ben Elliston (bje@au.ibm.com) and Peter Bergner\n ;; (bergner@vnet.ibm.com).\n@@ -24,9 +24,9 @@\n ;; UNSPEC usage\n ;;\n \n-(define_constants\n-  [(UNSPEC_MOVSD_LOAD\t\t400)\n-   (UNSPEC_MOVSD_STORE\t\t401)\n+(define_c_enum \"unspec\"\n+  [UNSPEC_MOVSD_LOAD\n+   UNSPEC_MOVSD_STORE\n   ])\n \n "}, {"sha": "d1b0e8e45f2da80ff259debecf5f2e6b820c1584", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,5 +1,5 @@\n ;; PowerPC paired single and double hummer description\n-;; Copyright (C) 2007, 2009, 2010\n+;; Copyright (C) 2007, 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;; Contributed by David Edelsohn <edelsohn@gnu.org> and Revital Eres\n ;; <eres@il.ibm.com>\n@@ -20,12 +20,12 @@\n ;; along with this program; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_constants\n-[(UNSPEC_INTERHI_V2SF     330)\n- (UNSPEC_INTERLO_V2SF     331)\n- (UNSPEC_EXTEVEN_V2SF     332)\n- (UNSPEC_EXTODD_V2SF      333)\n-])\n+(define_c_enum \"unspec\"\n+  [UNSPEC_INTERHI_V2SF\n+   UNSPEC_INTERLO_V2SF\n+   UNSPEC_EXTEVEN_V2SF\n+   UNSPEC_EXTODD_V2SF\n+  ])\n \n (define_insn \"paired_negv2sf2\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")"}, {"sha": "dafc2d2a4f9dfaa04923e6c96d48568058fc7bbe", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 65, "deletions": 64, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,6 +1,6 @@\n ;; Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n ;; Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+;; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n@@ -53,76 +53,77 @@\n ;; UNSPEC usage\n ;;\n \n-(define_constants\n-  [(UNSPEC_FRSP\t\t\t0)\t; frsp for POWER machines\n-   (UNSPEC_PROBE_STACK\t\t4)\t; probe stack memory reference\n-   (UNSPEC_TIE\t\t\t5)\t; tie stack contents and stack pointer\n-   (UNSPEC_TOCPTR\t\t6)\t; address of a word pointing to the TOC\n-   (UNSPEC_TOC\t\t\t7)\t; address of the TOC (more-or-less)\n-   (UNSPEC_MOVSI_GOT\t\t8)\n-   (UNSPEC_MV_CR_OV\t\t9)\t; move_from_CR_ov_bit\n-   (UNSPEC_FCTIWZ\t\t10)\n-   (UNSPEC_FRIM\t\t\t11)\n-   (UNSPEC_FRIN\t\t\t12)\n-   (UNSPEC_FRIP\t\t\t13)\n-   (UNSPEC_FRIZ\t\t\t14)\n-   (UNSPEC_LD_MPIC\t\t15)\t; load_macho_picbase\n-   (UNSPEC_MPIC_CORRECT\t\t16)\t; macho_correct_pic\n-   (UNSPEC_TLSGD\t\t17)\n-   (UNSPEC_TLSLD\t\t18)\n-   (UNSPEC_MOVESI_FROM_CR\t19)\n-   (UNSPEC_MOVESI_TO_CR\t\t20)\n-   (UNSPEC_TLSDTPREL\t\t21)\n-   (UNSPEC_TLSDTPRELHA\t\t22)\n-   (UNSPEC_TLSDTPRELLO\t\t23)\n-   (UNSPEC_TLSGOTDTPREL\t\t24)\n-   (UNSPEC_TLSTPREL\t\t25)\n-   (UNSPEC_TLSTPRELHA\t\t26)\n-   (UNSPEC_TLSTPRELLO\t\t27)\n-   (UNSPEC_TLSGOTTPREL\t\t28)\n-   (UNSPEC_TLSTLS\t\t29)\n-   (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n-   (UNSPEC_MV_CR_GT\t\t31)\t; move_from_CR_gt_bit\n-   (UNSPEC_STFIWX\t\t32)\n-   (UNSPEC_POPCNTB\t\t33)\n-   (UNSPEC_FRES\t\t\t34)\n-   (UNSPEC_SP_SET\t\t35)\n-   (UNSPEC_SP_TEST\t\t36)\n-   (UNSPEC_SYNC\t\t\t37)\n-   (UNSPEC_LWSYNC\t\t38)\n-   (UNSPEC_ISYNC\t\t39)\n-   (UNSPEC_SYNC_OP\t\t40)\n-   (UNSPEC_ATOMIC\t\t41)\n-   (UNSPEC_CMPXCHG\t\t42)\n-   (UNSPEC_XCHG\t\t\t43)\n-   (UNSPEC_AND\t\t\t44)\n-   (UNSPEC_DLMZB\t\t45)\n-   (UNSPEC_DLMZB_CR\t\t46)\n-   (UNSPEC_DLMZB_STRLEN\t\t47)\n-   (UNSPEC_RSQRT\t\t48)\n-   (UNSPEC_TOCREL\t\t49)\n-   (UNSPEC_MACHOPIC_OFFSET\t50)\n-   (UNSPEC_BPERM\t\t51)\n-   (UNSPEC_COPYSIGN\t\t52)\n-   (UNSPEC_PARITY\t\t53)\n-   (UNSPEC_FCTIW\t\t54)\n-   (UNSPEC_FCTID\t\t55)\n-   (UNSPEC_LFIWAX\t\t56)\n-   (UNSPEC_LFIWZX\t\t57)\n-   (UNSPEC_FCTIWUZ\t\t58)\n+(define_c_enum \"unspec\"\n+  [UNSPEC_FRSP\t\t\t; frsp for POWER machines\n+   UNSPEC_PROBE_STACK\t\t; probe stack memory reference\n+   UNSPEC_TIE\t\t\t; tie stack contents and stack pointer\n+   UNSPEC_TOCPTR\t\t; address of a word pointing to the TOC\n+   UNSPEC_TOC\t\t\t; address of the TOC (more-or-less)\n+   UNSPEC_MOVSI_GOT\n+   UNSPEC_MV_CR_OV\t\t; move_from_CR_ov_bit\n+   UNSPEC_FCTIWZ\n+   UNSPEC_FRIM\n+   UNSPEC_FRIN\n+   UNSPEC_FRIP\n+   UNSPEC_FRIZ\n+   UNSPEC_LD_MPIC\t\t; load_macho_picbase\n+   UNSPEC_MPIC_CORRECT\t\t; macho_correct_pic\n+   UNSPEC_TLSGD\n+   UNSPEC_TLSLD\n+   UNSPEC_MOVESI_FROM_CR\n+   UNSPEC_MOVESI_TO_CR\n+   UNSPEC_TLSDTPREL\n+   UNSPEC_TLSDTPRELHA\n+   UNSPEC_TLSDTPRELLO\n+   UNSPEC_TLSGOTDTPREL\n+   UNSPEC_TLSTPREL\n+   UNSPEC_TLSTPRELHA\n+   UNSPEC_TLSTPRELLO\n+   UNSPEC_TLSGOTTPREL\n+   UNSPEC_TLSTLS\n+   UNSPEC_FIX_TRUNC_TF\t\t; fadd, rounding towards zero\n+   UNSPEC_MV_CR_GT\t\t; move_from_CR_gt_bit\n+   UNSPEC_STFIWX\n+   UNSPEC_POPCNTB\n+   UNSPEC_FRES\n+   UNSPEC_SP_SET\n+   UNSPEC_SP_TEST\n+   UNSPEC_SYNC\n+   UNSPEC_SYNC_OP\n+   UNSPEC_ATOMIC\n+   UNSPEC_CMPXCHG\n+   UNSPEC_XCHG\n+   UNSPEC_AND\n+   UNSPEC_DLMZB\n+   UNSPEC_DLMZB_CR\n+   UNSPEC_DLMZB_STRLEN\n+   UNSPEC_RSQRT\n+   UNSPEC_TOCREL\n+   UNSPEC_MACHOPIC_OFFSET\n+   UNSPEC_BPERM\n+   UNSPEC_COPYSIGN\n+   UNSPEC_PARITY\n+   UNSPEC_FCTIW\n+   UNSPEC_FCTID\n+   UNSPEC_LFIWAX\n+   UNSPEC_LFIWZX\n+   UNSPEC_FCTIWUZ\n   ])\n \n ;;\n ;; UNSPEC_VOLATILE usage\n ;;\n \n-(define_constants\n-  [(UNSPECV_BLOCK\t\t0)\n-   (UNSPECV_LL\t\t\t1)\t; load-locked\n-   (UNSPECV_SC\t\t\t2)\t; store-conditional\n-   (UNSPECV_PROBE_STACK_RANGE\t3)\t; probe range of stack addresses\n-   (UNSPECV_EH_RR\t\t9)\t; eh_reg_restore\n+(define_c_enum \"unspecv\"\n+  [UNSPECV_BLOCK\n+   UNSPECV_LL\t\t\t; load-locked\n+   UNSPECV_SC\t\t\t; store-conditional\n+   UNSPECV_PROBE_STACK_RANGE\t; probe range of stack addresses\n+   UNSPECV_EH_RR\t\t; eh_reg_restore\n+   UNSPECV_ISYNC\t\t; isync instruction\n+   UNSPECV_LWSYNC\t\t; lwsync\n   ])\n+\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations."}, {"sha": "c3fbd9ee0284b5225aab25d36b680a4650a7f9f7", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,5 +1,6 @@\n ;; Machine description for PowerPC synchronization instructions.\n-;; Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+;; Copyright (C) 2005, 2007, 2008, 2009, 2011\n+;; Free Software Foundation, Inc.\n ;; Contributed by Geoffrey Keating.\n \n ;; This file is part of GCC.\n@@ -591,7 +592,7 @@\n \n (define_insn \"isync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_ISYNC))]\n+\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_ISYNC))]\n   \"\"\n   \"{ics|isync}\"\n   [(set_attr \"type\" \"isync\")])\n@@ -610,7 +611,7 @@\n ; Some AIX assemblers don't accept lwsync, so we use a .long.\n (define_insn \"lwsync\"\n   [(set (mem:BLK (match_scratch 0 \"X\"))\n-\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPEC_LWSYNC))]\n+\t(unspec_volatile:BLK [(mem:BLK (match_scratch 1 \"X\"))] UNSPECV_LWSYNC))]\n   \"\"\n {\n   if (TARGET_NO_LWSYNC)"}, {"sha": "c5a7870a5c7d8b5bd3853bcb4f96d237788f5b05", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -74,8 +74,7 @@\n \t\t\t   (V2DF  \"V2DI\")])\n \n ;; constants for unspec\n-(define_constants\n-  [(UNSPEC_PREDICATE\t400)])\n+(define_c_enum \"unspec\" [UNSPEC_PREDICATE])\n \n \f\n ;; Vector move instructions."}, {"sha": "fc331dc27edcbc99a181b63f5a75cbe4fdbdead9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -183,25 +183,25 @@\n \t\t\t     (V16QI\t\"QI\")])\n \t\t\t     \n ;; Constants for creating unspecs\n-(define_constants\n-  [(UNSPEC_VSX_CONCAT\t\t500)\n-   (UNSPEC_VSX_CVDPSXWS\t\t501)\n-   (UNSPEC_VSX_CVDPUXWS\t\t502)\n-   (UNSPEC_VSX_CVSPDP\t\t503)\n-   (UNSPEC_VSX_CVSXWDP\t\t504)\n-   (UNSPEC_VSX_CVUXWDP\t\t505)\n-   (UNSPEC_VSX_CVSXDSP\t\t506)\n-   (UNSPEC_VSX_CVUXDSP\t\t507)\n-   (UNSPEC_VSX_CVSPSXDS\t\t508)\n-   (UNSPEC_VSX_CVSPUXDS\t\t509)\n-   ;; 510-514 deleted\n-   (UNSPEC_VSX_TDIV\t\t515)\n-   (UNSPEC_VSX_TSQRT\t\t516)\n-   (UNSPEC_VSX_XXPERMDI\t\t517)\n-   (UNSPEC_VSX_SET\t\t518)\n-   (UNSPEC_VSX_ROUND_I\t\t519)\n-   (UNSPEC_VSX_ROUND_IC\t\t520)\n-   (UNSPEC_VSX_SLDWI\t\t521)])\n+(define_c_enum \"unspec\"\n+  [UNSPEC_VSX_CONCAT\n+   UNSPEC_VSX_CVDPSXWS\n+   UNSPEC_VSX_CVDPUXWS\n+   UNSPEC_VSX_CVSPDP\n+   UNSPEC_VSX_CVSXWDP\n+   UNSPEC_VSX_CVUXWDP\n+   UNSPEC_VSX_CVSXDSP\n+   UNSPEC_VSX_CVUXDSP\n+   UNSPEC_VSX_CVSPSXDS\n+   UNSPEC_VSX_CVSPUXDS\n+   UNSPEC_VSX_TDIV\n+   UNSPEC_VSX_TSQRT\n+   UNSPEC_VSX_XXPERMDI\n+   UNSPEC_VSX_SET\n+   UNSPEC_VSX_ROUND_I\n+   UNSPEC_VSX_ROUND_IC\n+   UNSPEC_VSX_SLDWI\n+  ])\n \n ;; VSX moves\n (define_insn \"*vsx_mov<mode>\""}, {"sha": "97fa329bb007544b712dc2f84d07278e1e171976", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,3 +1,12 @@\n+2011-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR preprocessor/48192\n+\t* gcc.target/powerpc/pr48192.c: New file.\n+\n+\tPR target/48053\n+\t* gcc.target/powerpc/pr48053-3.c: New file, add test case for\n+\tsplit problem of 0 being loaded in a VSX register.\n+\n 2011-03-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/47939"}, {"sha": "399b3d3ea36a21e20489fe997827bd967ef4042f", "filename": "gcc/testsuite/gcc.target/powerpc/pr48053-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-3.c?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O3 -mcpu=power7\" } */\n+\n+/* Cut down example from s_scalbnl that aborted on 32-bit when the fix for\n+   48053 went in to allow creating DImode 0's in VSX registers.  */\n+\n+typedef union\n+{\n+  long double value;\n+  struct\n+  {\n+    unsigned long long msw;\n+    unsigned long long lsw;\n+  } parts64;\n+  struct\n+  {\n+    unsigned int w0, w1, w2, w3;\n+  } parts32;\n+} ieee854_long_double_shape_type;\n+\n+static const long double twolm54 = 5.55111512312578270212e-17;\n+\n+long double foo (long double x, int n)\n+{\n+  long long k, hx, lx;\n+  ieee854_long_double_shape_type qw_u;\n+\n+  qw_u.value = x;\n+  hx = qw_u.parts64.msw;\n+  lx = qw_u.parts64.lsw;\n+\n+  k = ((hx >> 52) & 0x7ff) + n + 54;\n+\n+  qw_u.parts64.msw = ((hx & 0x800fffffffffffffULL) | (k << 52));\n+  qw_u.parts64.lsw = lx;\n+  x = qw_u.value;\n+\n+  return x*twolm54;\n+}"}, {"sha": "5159260857cb59d18ef06b5bcd1e2c770057ab1a", "filename": "gcc/testsuite/gcc.target/powerpc/pr48192.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48192.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48192.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48192.c?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O3 -mcpu=power7 -std=gnu89\" } */\n+\n+/* Make sure that the conditional macros vector, bool, and pixel are not\n+   considered as being defined.  */\n+\n+#ifdef bool\n+#error \"bool is considered defined\"\n+#endif\n+\n+#ifdef vector\n+#error \"vector is considered defined\"\n+#endif\n+\n+#ifdef pixel\n+#error \"pixel is condsidered defined\"\n+#endif\n+\n+#if defined(bool)\n+#error \"bool is considered defined\"\n+#endif\n+\n+#if defined(vector)\n+#error \"vector is considered defined\"\n+#endif\n+\n+#if defined(pixel)\n+#error \"pixel is condsidered defined\"\n+#endif\n+\n+#ifndef bool\n+#else\n+#error \"bool is considered defined\"\n+#endif\n+\n+#ifndef vector\n+#else\n+#error \"vector is considered defined\"\n+#endif\n+\n+#ifndef pixel\n+#else\n+#error \"pixel is condsidered defined\"\n+#endif\n+\n+#define bool long double\n+bool pixel = 0;"}, {"sha": "c08e6fe139b171ecdfe5990bd36465a5a826310e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1,3 +1,11 @@\n+2011-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR preprocessor/48192\n+\t* directives.c (do_ifdef): Do not consider conditional macros as\n+\tbeing defined.\n+\t(do_ifndef): Ditto.\n+\t* expr.c (parse_defined): Ditto.\n+\n 2011-03-18  Richard Henderson  <rth@redhat.com>\n \n \tPR bootstrap/45381"}, {"sha": "f244ae5b5b28c6785130acb4c6fa1f0699304ce8", "filename": "libcpp/directives.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -1819,7 +1819,12 @@ do_ifdef (cpp_reader *pfile)\n \n       if (node)\n \t{\n-\t  skip = node->type != NT_MACRO;\n+\t  /* Do not treat conditional macros as being defined.  This is due to\n+\t     the powerpc and spu ports using conditional macros for 'vector',\n+\t     'bool', and 'pixel' to act as conditional keywords.  This messes\n+\t     up tests like #ifndef bool.  */\n+\t  skip = (node->type != NT_MACRO\n+\t\t  || ((node->flags & NODE_CONDITIONAL) != 0));\n \t  _cpp_mark_macro_used (node);\n \t  if (!(node->flags & NODE_USED))\n \t    {\n@@ -1860,7 +1865,12 @@ do_ifndef (cpp_reader *pfile)\n \n       if (node)\n \t{\n-\t  skip = node->type == NT_MACRO;\n+\t  /* Do not treat conditional macros as being defined.  This is due to\n+\t     the powerpc and spu ports using conditional macros for 'vector',\n+\t     'bool', and 'pixel' to act as conditional keywords.  This messes\n+\t     up tests like #ifndef bool.  */\n+\t  skip = (node->type == NT_MACRO\n+\t\t  && ((node->flags & NODE_CONDITIONAL) == 0));\n \t  _cpp_mark_macro_used (node);\n \t  if (!(node->flags & NODE_USED))\n \t    {"}, {"sha": "3c36127b54f9c51e8cd1ff80a4d40a5555118ef0", "filename": "libcpp/expr.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=f3c33d9dc88ca9b2452a9ea3d42d9a6363b66663", "patch": "@@ -720,10 +720,15 @@ parse_defined (cpp_reader *pfile)\n \n   pfile->state.prevent_expansion--;\n \n+  /* Do not treat conditional macros as being defined.  This is due to the\n+     powerpc and spu ports using conditional macros for 'vector', 'bool', and\n+     'pixel' to act as conditional keywords.  This messes up tests like #ifndef\n+     bool.  */\n   result.unsignedp = false;\n   result.high = 0;\n   result.overflow = false;\n-  result.low = node && node->type == NT_MACRO;\n+  result.low = (node && node->type == NT_MACRO\n+\t\t&& (node->flags & NODE_CONDITIONAL) == 0);\n   return result;\n }\n "}]}