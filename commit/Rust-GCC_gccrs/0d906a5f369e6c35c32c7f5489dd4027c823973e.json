{"sha": "0d906a5f369e6c35c32c7f5489dd4027c823973e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5MDZhNWYzNjllNmMzNWMzMmM3ZjU0ODlkZDQwMjdjODIzOTczZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-08-13T15:26:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-13T15:26:46Z"}, "message": "c-typeck.c (initializer_constant_valid_p): Allow conversion of 0 of any size to a pointer.\n\n\t* c-typeck.c (initializer_constant_valid_p): Allow conversion of 0\n\tof any size to a pointer.\n\nFrom-SVN: r21697", "tree": {"sha": "3ebba1f35f15621b20d82f27a0859d38b55d307c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebba1f35f15621b20d82f27a0859d38b55d307c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d906a5f369e6c35c32c7f5489dd4027c823973e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d906a5f369e6c35c32c7f5489dd4027c823973e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d906a5f369e6c35c32c7f5489dd4027c823973e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d906a5f369e6c35c32c7f5489dd4027c823973e/comments", "author": null, "committer": null, "parents": [{"sha": "6ece24871f3f0bd6b3eaa098be79ca8ca5613f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ece24871f3f0bd6b3eaa098be79ca8ca5613f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ece24871f3f0bd6b3eaa098be79ca8ca5613f46"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "35e2e6cd9098fb8be8285d205a6075fc6b61ec0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d906a5f369e6c35c32c7f5489dd4027c823973e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d906a5f369e6c35c32c7f5489dd4027c823973e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d906a5f369e6c35c32c7f5489dd4027c823973e", "patch": "@@ -1,3 +1,8 @@\n+Thu Aug 13 15:24:48 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* c-typeck.c (initializer_constant_valid_p): Allow conversion of 0\n+\tof any size to a pointer.\n+\n Thu Aug 13 12:53:13 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* i386/winnt.c (i386_pe_asm_file_end): Check TREE_SYMBOL_REFERENCED.\n@@ -567,7 +572,7 @@ Tue Jul 28 22:31:12 1998  Craig Burley  <burley@gnu.org>\n \tSUBREG, MEM.\n \t* rtlanal.c (replace_rtx): Prohibit replaces in\tCONST_DOUBLE. \n \n-Tue Jul 28 11:33:09 1998  Mark Mitchell  <mark@markmitchell.com>\n+\n \n \t* cplus-dem.c (type_kind_t): New type.\n \t(demangle_template_value_parm): Add type_kind_t parameter.  Rely"}, {"sha": "0a1f490577cdd9403c77ee459b3bf3c0fb1509d3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d906a5f369e6c35c32c7f5489dd4027c823973e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d906a5f369e6c35c32c7f5489dd4027c823973e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0d906a5f369e6c35c32c7f5489dd4027c823973e", "patch": "@@ -4423,13 +4423,18 @@ initializer_constant_valid_p (value, endtype)\n \treturn initializer_constant_valid_p (TREE_OPERAND (value, 0),\n \t\t\t\t\t     endtype);\n \n-      /* Likewise conversions from int to pointers.  */\n+      /* Likewise conversions from int to pointers, but also allow\n+\t conversions from 0.  */\n       if (TREE_CODE (TREE_TYPE (value)) == POINTER_TYPE\n-\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (value, 0))) == INTEGER_TYPE\n-\t  && (TYPE_PRECISION (TREE_TYPE (value))\n-\t      <= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (value, 0)))))\n-\treturn initializer_constant_valid_p (TREE_OPERAND (value, 0),\n-\t\t\t\t\t     endtype);\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (value, 0))) == INTEGER_TYPE)\n+\t{\n+\t  if (integer_zerop (TREE_OPERAND (value, 0)))\n+\t    return null_pointer_node;\n+\t  else if (TYPE_PRECISION (TREE_TYPE (value))\n+\t\t   <= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (value, 0))))\n+\t    return initializer_constant_valid_p (TREE_OPERAND (value, 0),\n+\t\t\t\t\t\t endtype);\n+\t}\n \n       /* Allow conversions to union types if the value inside is okay.  */\n       if (TREE_CODE (TREE_TYPE (value)) == UNION_TYPE)"}]}