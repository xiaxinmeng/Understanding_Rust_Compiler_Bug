{"sha": "605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1YTk5ZjZiZTdjZDBkMmMzMWQzODJiMGFlYTM3Y2FlOWFhMDNiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-06T21:31:01Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-06T21:31:01Z"}, "message": "(build_binary_op): Don't call common_type for uncommon pointer types.\n\nFrom-SVN: r9317", "tree": {"sha": "2f548b059ebe13d8f4aa677bd8e596aee9eab653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f548b059ebe13d8f4aa677bd8e596aee9eab653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc/comments", "author": null, "committer": null, "parents": [{"sha": "b3ca463cdad1c4d09304baf3841906be92681d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ca463cdad1c4d09304baf3841906be92681d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ca463cdad1c4d09304baf3841906be92681d0a"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "6cfc77702cbc227535b722616d370ff9565adef0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605a99f6be7cd0d2c31d382b0aea37cae9aa03bc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=605a99f6be7cd0d2c31d382b0aea37cae9aa03bc", "patch": "@@ -2187,7 +2187,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t     Otherwise, the targets must be compatible\n \t     and both must be object or both incomplete.  */\n \t  if (comp_target_types (type0, type1))\n-\t    ;\n+\t    result_type = common_type (type0, type1);\n \t  else if (TYPE_MAIN_VARIANT (tt0) == void_type_node)\n \t    {\n \t      /* op0 != orig_op0 detects the case of something\n@@ -2204,7 +2204,9 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    }\n \t  else\n \t    pedwarn (\"comparison of distinct pointer types lacks a cast\");\n-\t  result_type = common_type (type0, type1);\n+\n+\t  if (result_type == NULL_TREE)\n+\t    result_type = ptr_type_node;\n \t}\n       else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n \t       && integer_zerop (op1))\n@@ -2233,12 +2235,18 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \tshorten = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t{\n-\t  if (! comp_target_types (type0, type1))\n-\t    pedwarn (\"comparison of distinct pointer types lacks a cast\");\n-\t  else if (pedantic \n-\t\t   && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n-\t    pedwarn (\"ANSI C forbids ordered comparisons of pointers to functions\");\n-\t  result_type = common_type (type0, type1);\n+\t  if (comp_target_types (type0, type1))\n+\t    {\n+\t      result_type = common_type (type0, type1);\n+\t      if (pedantic \n+\t\t  && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n+\t\tpedwarn (\"ANSI C forbids ordered comparisons of pointers to functions\");\n+\t    }\n+\t  else\n+\t    {\n+\t      result_type = ptr_type_node;\n+\t      pedwarn (\"comparison of distinct pointer types lacks a cast\");\n+\t    }\n \t}\n       break;\n \n@@ -2252,15 +2260,21 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \tshort_compare = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t{\n-\t  if (! comp_target_types (type0, type1))\n-\t    pedwarn (\"comparison of distinct pointer types lacks a cast\");\n-\t  else if ((TYPE_SIZE (TREE_TYPE (type0)) != 0)\n-\t\t   != (TYPE_SIZE (TREE_TYPE (type1)) != 0))\n-\t    pedwarn (\"comparison of complete and incomplete pointers\");\n-\t  else if (pedantic \n-\t\t   && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n-\t    pedwarn (\"ANSI C forbids ordered comparisons of pointers to functions\");\n-\t  result_type = common_type (type0, type1);\n+\t  if (comp_target_types (type0, type1))\n+\t    {\n+\t      result_type = common_type (type0, type1);\n+\t      if ((TYPE_SIZE (TREE_TYPE (type0)) != 0)\n+\t\t  != (TYPE_SIZE (TREE_TYPE (type1)) != 0))\n+\t\tpedwarn (\"comparison of complete and incomplete pointers\");\n+\t      else if (pedantic \n+\t\t       && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n+\t\tpedwarn (\"ANSI C forbids ordered comparisons of pointers to functions\");\n+\t    }\n+\t  else\n+\t    {\n+\t      result_type = ptr_type_node;\n+\t      pedwarn (\"comparison of distinct pointer types lacks a cast\");\n+\t    }\n \t}\n       else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n \t       && integer_zerop (op1))"}]}