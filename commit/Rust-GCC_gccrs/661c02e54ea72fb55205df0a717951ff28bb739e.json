{"sha": "661c02e54ea72fb55205df0a717951ff28bb739e", "node_id": "C_kwDOANBUbNoAKDY2MWMwMmU1NGVhNzJmYjU1MjA1ZGYwYTcxNzk1MWZmMjhiYjczOWU", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-23T19:12:29Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-25T13:44:27Z"}, "message": "Check for equivalences between PHI argument and def.\n\nIf a PHI argument on an edge is equivalent with the DEF, then it doesn't\nprovide any new information, defer processing it unless they are all\nequivalences.\n\n\tPR tree-optimization/103359\n\tgcc/\n\t* gimple-range-fold.cc (fold_using_range::range_of_phi): If arg is\n\tequivalent to def, don't initially include it's range.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr103359.c: New.", "tree": {"sha": "95da0613a67a1427bd0c59a55fabe050cd158b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95da0613a67a1427bd0c59a55fabe050cd158b0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661c02e54ea72fb55205df0a717951ff28bb739e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661c02e54ea72fb55205df0a717951ff28bb739e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661c02e54ea72fb55205df0a717951ff28bb739e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661c02e54ea72fb55205df0a717951ff28bb739e/comments", "author": null, "committer": null, "parents": [{"sha": "f4e470d44e8104bada6a95c12765f6ed8bd505e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e470d44e8104bada6a95c12765f6ed8bd505e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e470d44e8104bada6a95c12765f6ed8bd505e2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "d66ada5bb7c469f3962abf44b5783885942d0866", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c02e54ea72fb55205df0a717951ff28bb739e/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c02e54ea72fb55205df0a717951ff28bb739e/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=661c02e54ea72fb55205df0a717951ff28bb739e", "patch": "@@ -771,6 +771,7 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n   tree phi_def = gimple_phi_result (phi);\n   tree type = gimple_range_type (phi);\n   int_range_max arg_range;\n+  int_range_max equiv_range;\n   unsigned x;\n \n   if (!type)\n@@ -794,6 +795,16 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n       // Get the range of the argument on its edge.\n       src.get_phi_operand (arg_range, arg, e);\n \n+      // Likewise, if the incoming PHI argument is equivalent to this\n+      // PHI definition, it provides no new info.  Accumulate these ranges\n+      // in case all arguments are equivalences.\n+      if (src.query ()->query_relation (e, arg, phi_def, false) == EQ_EXPR)\n+\t{\n+\t  single_arg = arg;\n+\t  equiv_range.union_(arg_range);\n+\t  continue;\n+\t}\n+\n       if (!arg_range.undefined_p ())\n \t{\n \t  // Register potential dependencies for stale value tracking.\n@@ -816,6 +827,11 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n \tbreak;\n     }\n \n+    // If all arguments were equivalences, use the equivalence ranges as no\n+    // arguments were processed.\n+    if (!seen_arg)\n+      r = equiv_range;\n+\n     // If the PHI boils down to a single effective argument, look at it.\n     if (single_arg)\n       {"}, {"sha": "13406f90d7d47d3c85f43e2055a98d9c1de3bd44", "filename": "gcc/testsuite/gcc.dg/pr103359.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c02e54ea72fb55205df0a717951ff28bb739e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c02e54ea72fb55205df0a717951ff28bb739e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103359.c?ref=661c02e54ea72fb55205df0a717951ff28bb739e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-evrp\" } */\n+\n+void foo();\n+static char a, c;\n+static int d, e;\n+static short b(short f, short g) { return f * g; }\n+int main() {\n+  short h = 4;\n+  for (; d;)\n+    if (h)\n+      if(e) {\n+        if (!b(a & 1 | h, 3))\n+          c = 0;\n+        h = 1;\n+      }\n+  if (c)\n+    foo();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"c = 0\" \"evrp\" } } */"}]}