{"sha": "8875e93954432e5ea444ea2bf2182507c259531f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3NWU5Mzk1NDQzMmU1ZWE0NDRlYTJiZjIxODI1MDdjMjU5NTMxZg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2012-05-09T12:51:36Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-05-09T12:51:36Z"}, "message": "tree-ssa-loop-ivopts.c (add_autoinc_candidates, [...]): Replace use of HAVE_{POST/PRE}_{INCREMENT/DECREMENT} with...\n\n\n2012-05-09  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\t* tree-ssa-loop-ivopts.c (add_autoinc_candidates, get_address_cost):\n\tReplace use of HAVE_{POST/PRE}_{INCREMENT/DECREMENT} with\n\tUSE_{LOAD/STORE}_{PRE/POST}_{INCREMENT/DECREMENT} appropriately.\n\t* config/arm/arm.h (ARM_AUTOINC_VALID_FOR_MODE_P): New.\n\t(USE_LOAD_POST_INCREMENT): Define.\n\t(USE_LOAD_PRE_INCREMENT): Define.\n\t(USE_LOAD_POST_DECREMENT): Define.\n\t(USE_LOAD_PRE_DECREMENT): Define.\n\t(USE_STORE_PRE_DECREMENT): Define.\n\t(USE_STORE_PRE_INCREMENT): Define.\n\t(USE_STORE_POST_DECREMENT): Define.\n\t(USE_STORE_POST_INCREMENT): Define.\n\t(arm_auto_incmodes): Add enumeration.\n\t* config/arm/arm-protos.h (arm_autoinc_modes_ok_p): Declare.\n\t* config/arm/arm.c (arm_autoinc_modes_ok_p): Define.\n\nFrom-SVN: r187329", "tree": {"sha": "d976d5bac6b62c92bb8582fb7c0f8cc8fdcf02ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d976d5bac6b62c92bb8582fb7c0f8cc8fdcf02ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8875e93954432e5ea444ea2bf2182507c259531f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8875e93954432e5ea444ea2bf2182507c259531f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8875e93954432e5ea444ea2bf2182507c259531f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8875e93954432e5ea444ea2bf2182507c259531f/comments", "author": null, "committer": null, "parents": [{"sha": "cc603b4051d06937fbb33e1e591a444ab06cb8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc603b4051d06937fbb33e1e591a444ab06cb8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc603b4051d06937fbb33e1e591a444ab06cb8e0"}], "stats": {"total": 120, "additions": 111, "deletions": 9}, "files": [{"sha": "605ea10a98f7a1886d95a6c4ae9d350c6b8e6314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8875e93954432e5ea444ea2bf2182507c259531f", "patch": "@@ -1,3 +1,21 @@\n+2012-05-09  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\t* tree-ssa-loop-ivopts.c (add_autoinc_candidates, get_address_cost):\n+\tReplace use of HAVE_{POST/PRE}_{INCREMENT/DECREMENT} with\n+\tUSE_{LOAD/STORE}_{PRE/POST}_{INCREMENT/DECREMENT} appropriately.\n+\t* config/arm/arm.h (ARM_AUTOINC_VALID_FOR_MODE_P): New.\n+\t(USE_LOAD_POST_INCREMENT): Define.\n+\t(USE_LOAD_PRE_INCREMENT): Define.\n+\t(USE_LOAD_POST_DECREMENT): Define.\n+\t(USE_LOAD_PRE_DECREMENT): Define.\n+\t(USE_STORE_PRE_DECREMENT): Define.\n+\t(USE_STORE_PRE_INCREMENT): Define.\n+\t(USE_STORE_POST_DECREMENT): Define.\n+\t(USE_STORE_POST_INCREMENT): Define.\n+\t(arm_auto_incmodes): Add enumeration.\n+\t* config/arm/arm-protos.h (arm_autoinc_modes_ok_p): Declare.\n+\t* config/arm/arm.c (arm_autoinc_modes_ok_p): Define.\n+\n 2012-05-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/53226"}, {"sha": "cb74d707c21a1aed6be3ab25360cc3025e20a8cf", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8875e93954432e5ea444ea2bf2182507c259531f", "patch": "@@ -250,4 +250,6 @@ extern int vfp3_const_double_for_fract_bits (rtx);\n extern void arm_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel);\n extern bool arm_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel);\n \n+extern bool arm_autoinc_modes_ok_p (enum machine_mode, enum arm_auto_incmodes);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "2c62c518e67438f44c755f67da8d4882a8d14164", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8875e93954432e5ea444ea2bf2182507c259531f", "patch": "@@ -25886,5 +25886,51 @@ arm_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n   return ret;\n }\n \n-\f\n+bool\n+arm_autoinc_modes_ok_p (enum machine_mode mode, enum arm_auto_incmodes code)\n+{\n+  /* If we are soft float and we do not have ldrd \n+     then all auto increment forms are ok.  */\n+  if (TARGET_SOFT_FLOAT && (TARGET_LDRD || GET_MODE_SIZE (mode) <= 4))\n+    return true;\n+\n+  switch (code)\n+    {\n+      /* Post increment and Pre Decrement are supported for all\n+\t instruction forms except for vector forms.  */\n+    case ARM_POST_INC:\n+    case ARM_PRE_DEC:\n+      if (VECTOR_MODE_P (mode))\n+\t{\n+\t  if (code != ARM_PRE_DEC)\n+\t    return true;\n+\t  else \n+\t    return false;\n+\t}\n+      \n+      return true;\n+\n+    case ARM_POST_DEC:\n+    case ARM_PRE_INC:\n+      /* Without LDRD and mode size greater than \n+\t word size, there is no point in auto-incrementing\n+         because ldm and stm will not have these forms.  */\n+      if (!TARGET_LDRD && GET_MODE_SIZE (mode) > 4)\n+\treturn false;\n+\n+      /* Vector and floating point modes do not support\n+\t these auto increment forms.  */\n+      if (FLOAT_MODE_P (mode) || VECTOR_MODE_P (mode))\n+\treturn false;\n+\n+      return true;\n+     \n+    default:\n+      return false;\n+      \n+    }\n+\n+  return false;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "f4204e4857ab7f9ca713a1c195135cfce7a251ae", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8875e93954432e5ea444ea2bf2182507c259531f", "patch": "@@ -1613,6 +1613,30 @@ typedef struct\n #define HAVE_PRE_MODIFY_REG   TARGET_32BIT\n #define HAVE_POST_MODIFY_REG  TARGET_32BIT\n \n+enum arm_auto_incmodes\n+  {\n+    ARM_POST_INC,\n+    ARM_PRE_INC,\n+    ARM_POST_DEC,\n+    ARM_PRE_DEC\n+  };\n+\n+#define ARM_AUTOINC_VALID_FOR_MODE_P(mode, code) \\\n+  (TARGET_32BIT && arm_autoinc_modes_ok_p (mode, code))\n+#define USE_LOAD_POST_INCREMENT(mode) \\\n+  ARM_AUTOINC_VALID_FOR_MODE_P(mode, ARM_POST_INC)\n+#define USE_LOAD_PRE_INCREMENT(mode)  \\\n+  ARM_AUTOINC_VALID_FOR_MODE_P(mode, ARM_PRE_INC)\n+#define USE_LOAD_POST_DECREMENT(mode) \\\n+  ARM_AUTOINC_VALID_FOR_MODE_P(mode, ARM_POST_DEC)\n+#define USE_LOAD_PRE_DECREMENT(mode)  \\\n+  ARM_AUTOINC_VALID_FOR_MODE_P(mode, ARM_PRE_DEC)\n+\n+#define USE_STORE_PRE_DECREMENT(mode) USE_LOAD_PRE_DECREMENT(mode)\n+#define USE_STORE_PRE_INCREMENT(mode) USE_LOAD_PRE_INCREMENT(mode)\n+#define USE_STORE_POST_DECREMENT(mode) USE_LOAD_POST_DECREMENT(mode)\n+#define USE_STORE_POST_INCREMENT(mode) USE_LOAD_POST_INCREMENT(mode)\n+\n /* Macros to check register numbers against specific register classes.  */\n \n /* These assume that REGNO is a hard or pseudo reg number."}, {"sha": "3016f08e7e3fbc8ff684354ca73fcf8c3160cc56", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875e93954432e5ea444ea2bf2182507c259531f/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=8875e93954432e5ea444ea2bf2182507c259531f", "patch": "@@ -2362,8 +2362,12 @@ add_autoinc_candidates (struct ivopts_data *data, tree base, tree step,\n   cstepi = int_cst_value (step);\n \n   mem_mode = TYPE_MODE (TREE_TYPE (*use->op_p));\n-  if ((HAVE_PRE_INCREMENT && GET_MODE_SIZE (mem_mode) == cstepi)\n-      || (HAVE_PRE_DECREMENT && GET_MODE_SIZE (mem_mode) == -cstepi))\n+  if (((USE_LOAD_PRE_INCREMENT (mem_mode)\n+\t|| USE_STORE_PRE_INCREMENT (mem_mode))\n+       && GET_MODE_SIZE (mem_mode) == cstepi)\n+      || ((USE_LOAD_PRE_DECREMENT (mem_mode)\n+\t   || USE_STORE_PRE_DECREMENT (mem_mode))\n+\t  && GET_MODE_SIZE (mem_mode) == -cstepi))\n     {\n       enum tree_code code = MINUS_EXPR;\n       tree new_base;\n@@ -2380,8 +2384,12 @@ add_autoinc_candidates (struct ivopts_data *data, tree base, tree step,\n       add_candidate_1 (data, new_base, step, important, IP_BEFORE_USE, use,\n \t\t       use->stmt);\n     }\n-  if ((HAVE_POST_INCREMENT && GET_MODE_SIZE (mem_mode) == cstepi)\n-      || (HAVE_POST_DECREMENT && GET_MODE_SIZE (mem_mode) == -cstepi))\n+  if (((USE_LOAD_POST_INCREMENT (mem_mode)\n+\t|| USE_STORE_POST_INCREMENT (mem_mode))\n+       && GET_MODE_SIZE (mem_mode) == cstepi)\n+      || ((USE_LOAD_POST_DECREMENT (mem_mode)\n+\t   || USE_STORE_POST_DECREMENT (mem_mode))\n+\t  && GET_MODE_SIZE (mem_mode) == -cstepi))\n     {\n       add_candidate_1 (data, base, step, important, IP_AFTER_USE, use,\n \t\t       use->stmt);\n@@ -3315,25 +3323,29 @@ get_address_cost (bool symbol_present, bool var_present,\n       reg0 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1);\n       reg1 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 2);\n \n-      if (HAVE_PRE_DECREMENT)\n+      if (USE_LOAD_PRE_DECREMENT (mem_mode) \n+\t  || USE_STORE_PRE_DECREMENT (mem_mode))\n \t{\n \t  addr = gen_rtx_PRE_DEC (address_mode, reg0);\n \t  has_predec[mem_mode]\n \t    = memory_address_addr_space_p (mem_mode, addr, as);\n \t}\n-      if (HAVE_POST_DECREMENT)\n+      if (USE_LOAD_POST_DECREMENT (mem_mode) \n+\t  || USE_STORE_POST_DECREMENT (mem_mode))\n \t{\n \t  addr = gen_rtx_POST_DEC (address_mode, reg0);\n \t  has_postdec[mem_mode]\n \t    = memory_address_addr_space_p (mem_mode, addr, as);\n \t}\n-      if (HAVE_PRE_INCREMENT)\n+      if (USE_LOAD_PRE_INCREMENT (mem_mode) \n+\t  || USE_STORE_PRE_DECREMENT (mem_mode))\n \t{\n \t  addr = gen_rtx_PRE_INC (address_mode, reg0);\n \t  has_preinc[mem_mode]\n \t    = memory_address_addr_space_p (mem_mode, addr, as);\n \t}\n-      if (HAVE_POST_INCREMENT)\n+      if (USE_LOAD_POST_INCREMENT (mem_mode) \n+\t  || USE_STORE_POST_INCREMENT (mem_mode))\n \t{\n \t  addr = gen_rtx_POST_INC (address_mode, reg0);\n \t  has_postinc[mem_mode]"}]}