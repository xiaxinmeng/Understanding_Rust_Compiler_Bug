{"sha": "b72271b953b368fab603cb86294c49c72097b78f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMjcxYjk1M2IzNjhmYWI2MDNjYjg2Mjk0YzQ5YzcyMDk3Yjc4Zg==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2014-01-24T23:13:49Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2014-01-24T23:13:49Z"}, "message": "Replace flag_enable_cilkplus with flag_cilkplus.\n\ngcc/ChangeLog\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * builtins.c (is_builtin_name): Renamed flag_enable_cilkplus to\n+       flag_cilkplus.\n+       * builtins.def: Likewise.\n+       * cilk.h (fn_contains_cilk_spawn_p): Likewise.\n+       * cppbuiltin.c (define_builtin_macros_for_compilation_flags): Likewise.\n+       * ira.c (ira_setup_eliminable_regset): Likewise.\n+       * omp-low.c (gate_expand_omp): Likewise.\n+       (execute_lower_omp): Likewise.\n+       (diagnose_sb_0): Likewise.\n+       (gate_diagnose_omp_blocks): Likewise.\n+       (simd_clone_clauses_extract): Likewise.\n+       (gate): Likewise.\n+\n\ngcc/c-family/ChangeLog\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-common.c (c_define_builtins): Replaced flag_enable_cilkplus with\n+       flag_cilkplus.\n+       * c-pragma.c (init_pragma): Likewise.\n+       * c.opt: Likewise.\n+\n\ngcc/c/ChangeLog\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-parser.c (c_parser_declaration_or_fndef): Replaced\n+       flag_enable_cilkplus with flag_cilkplus.\n+       (c_parser_direct_declarator_inner): Likewise.\n+       (c_parser_attribute_any_word): Likewise.\n+       (c_parser_attributes): Likewise.\n+       (c_parser_compound_statement): Likewise.\n+       (c_parser_statement_after_labels): Likewise.\n+       (c_parser_if_statement): Likewise.\n+       (c_parser_switch_statement): Likewise.\n+       (c_parser_do_statement): Likewise.\n+       (c_parser_for_statement): Likewise.\n+       (c_parser_unary_expression): Likewise.\n+       (c_parser_postfix_expression): Likewise.\n+       (c_parser_postfix_expression_after_primary): Likewise.\n+       (c_parser_postfix_expression_after_primary): Likewise.\n+       (c_parser_omp_clause_name): Likewise.\n+       (c_finish_omp_declare_simd): Likewise.\n+       (c_parser_cilk_verify_simd): Likewise.\n+       * c-typeck.c (build_array_ref): Likewise.\n+       (build_function_call_vec): Likewise.\n+       (convert_arguments): Likewise.\n+       (build_compound_expr): Likewise.\n+       (c_finish_return): Likewise.\n+       (c_finish_if_stmt): Likewise.\n+       (c_finish_loop): Likewise.\n+       (build_binary_op): Likewise.\n+\n\ngcc/lto/ChangeLog\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * lto-lang.c (lto_init): Replaced flag_enable_cilkplus with\n+       flag_cilkplus.\n+\n\nFrom-SVN: r207064", "tree": {"sha": "7c2fc7d7a4f6f51a88b3e89ee69680fac44aab8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c2fc7d7a4f6f51a88b3e89ee69680fac44aab8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b72271b953b368fab603cb86294c49c72097b78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72271b953b368fab603cb86294c49c72097b78f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72271b953b368fab603cb86294c49c72097b78f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72271b953b368fab603cb86294c49c72097b78f/comments", "author": null, "committer": null, "parents": [{"sha": "8a35e18d02fd52813f21072ef8d664806b97a349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a35e18d02fd52813f21072ef8d664806b97a349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a35e18d02fd52813f21072ef8d664806b97a349"}], "stats": {"total": 209, "additions": 141, "deletions": 68}, "files": [{"sha": "2ad876eb36a32504d50ed48a66f9a82e35db28e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1,3 +1,18 @@\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* builtins.c (is_builtin_name): Renamed flag_enable_cilkplus to\n+\tflag_cilkplus.\n+\t* builtins.def: Likewise.\n+\t* cilk.h (fn_contains_cilk_spawn_p): Likewise.\n+\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags): Likewise.\n+\t* ira.c (ira_setup_eliminable_regset): Likewise.\n+\t* omp-low.c (gate_expand_omp): Likewise.\n+\t(execute_lower_omp): Likewise.\n+\t(diagnose_sb_0): Likewise.\n+\t(gate_diagnose_omp_blocks): Likewise.\n+\t(simd_clone_clauses_extract): Likewise.\n+\t(gate): Likewise.\n+\n 2014-01-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_expand_vec_perm_const_1): Remove"}, {"sha": "3e34c83858bc76efb2d433ea4585b7b7cb85817f", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -244,7 +244,7 @@ is_builtin_name (const char *name)\n     return true;\n   if (strncmp (name, \"__atomic_\", 9) == 0)\n     return true;\n-  if (flag_enable_cilkplus \n+  if (flag_cilkplus \n       && (!strcmp (name, \"__cilkrts_detach\")   \n \t  || !strcmp (name, \"__cilkrts_pop_frame\")))\n     return true;"}, {"sha": "524153f22a595a1c1f9eeab3b800bde6b4a930ec", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -174,7 +174,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEF_CILKPLUS_BUILTIN\n #define DEF_CILKPLUS_BUILTIN(ENUM, NAME, TYPE, ATTRS)  \\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, BT_FN_INT_VAR, BT_LAST, \\\n-  \t       false, false, false, ATTRS, false, flag_enable_cilkplus) \n+  \t       false, false, false, ATTRS, false, flag_cilkplus) \n \n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for"}, {"sha": "8e3c3f89fd9e9faa5c8c46fd015443cd71ae243a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1,3 +1,10 @@\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-common.c (c_define_builtins): Replaced flag_enable_cilkplus with\n+\tflag_cilkplus.\n+\t* c-pragma.c (init_pragma): Likewise.\n+\t* c.opt: Likewise.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59846"}, {"sha": "3ea5763e8da2565f28bbdbd8133e1f0d19d77131", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -5261,7 +5261,7 @@ c_define_builtins (tree va_list_ref_type_node, tree va_list_arg_type_node)\n \n   build_common_builtin_nodes ();\n \n-  if (flag_enable_cilkplus)\n+  if (flag_cilkplus)\n     cilk_init_builtins ();\n }\n "}, {"sha": "07d23ace9450696d90396948bd0c03eebfe21348", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1384,7 +1384,7 @@ init_pragma (void)\n \t\t\t\t      omp_pragmas_simd[i].id, true, true);\n     }\n \n-  if (flag_enable_cilkplus && !flag_preprocess_only)\n+  if (flag_cilkplus && !flag_preprocess_only)\n     cpp_register_deferred_pragma (parse_in, NULL, \"simd\", PRAGMA_CILK_SIMD,\n \t\t\t\t  true, false);\n "}, {"sha": "aad54e2cd348500bf30bb8a1cdaed85ec3a22f78", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -863,7 +863,7 @@ C ObjC C++ ObjC++\n Where shorter, use canonicalized paths to systems headers.\n \n fcilkplus\n-C ObjC C++ ObjC++ LTO Report Var(flag_enable_cilkplus) Init(0)\n+C ObjC C++ ObjC++ LTO Report Var(flag_cilkplus) Init(0)\n Enable Cilk Plus\n \n fcond-mismatch"}, {"sha": "228a93be42dfced1317e0ed6d8b1fe3682beb44d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1,3 +1,32 @@\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Replaced\n+\tflag_enable_cilkplus with flag_cilkplus.\n+\t(c_parser_direct_declarator_inner): Likewise.\n+\t(c_parser_attribute_any_word): Likewise.\n+\t(c_parser_attributes): Likewise.\n+\t(c_parser_compound_statement): Likewise.\n+\t(c_parser_statement_after_labels): Likewise.\n+\t(c_parser_if_statement): Likewise.\n+\t(c_parser_switch_statement): Likewise.\n+\t(c_parser_do_statement): Likewise.\n+\t(c_parser_for_statement): Likewise.\n+\t(c_parser_unary_expression): Likewise.\n+\t(c_parser_postfix_expression): Likewise.\n+\t(c_parser_postfix_expression_after_primary): Likewise.\n+\t(c_parser_postfix_expression_after_primary): Likewise.\n+\t(c_parser_omp_clause_name): Likewise.\n+\t(c_finish_omp_declare_simd): Likewise.\n+\t(c_parser_cilk_verify_simd): Likewise.\n+\t* c-typeck.c (build_array_ref): Likewise.\n+\t(build_function_call_vec): Likewise.\n+\t(convert_arguments): Likewise.\n+\t(build_compound_expr): Likewise.\n+\t(c_finish_return): Likewise.\n+\t(c_finish_if_stmt): Likewise.\n+\t(c_finish_loop): Likewise.\n+\t(build_binary_op): Likewise.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59846"}, {"sha": "e6b7b301258b475fc1547bd8358975de301de21f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1919,7 +1919,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n \t= c_parser_peek_token (parser)->location;\n       fnbody = c_parser_compound_statement (parser);\n-      if (flag_enable_cilkplus && contains_array_notation_expr (fnbody))\n+      if (flag_cilkplus && contains_array_notation_expr (fnbody))\n \tfnbody = expand_array_notation_exprs (fnbody);\n       if (nested)\n \t{\n@@ -3340,7 +3340,7 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \t      dimen.value = NULL_TREE;\n \t      star_seen = false;\n \t    }\n-\t  else if (flag_enable_cilkplus\n+\t  else if (flag_cilkplus\n \t\t   && c_parser_next_token_is (parser, CPP_COLON))\n \t    {\n \t      dimen.value = error_mark_node;\n@@ -3371,7 +3371,7 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \t}\n       if (c_parser_next_token_is (parser, CPP_CLOSE_SQUARE))\n \tc_parser_consume_token (parser);\n-      else if (flag_enable_cilkplus\n+      else if (flag_cilkplus\n \t       && c_parser_next_token_is (parser, CPP_COLON))\n \t{\n \t  error_at (c_parser_peek_token (parser)->location,\n@@ -3783,7 +3783,7 @@ c_parser_attribute_any_word (c_parser *parser)\n static inline bool\n is_cilkplus_vector_p (tree name)\n { \n-  if (flag_enable_cilkplus && is_attribute_p (\"vector\", name)) \n+  if (flag_cilkplus && is_attribute_p (\"vector\", name)) \n     return true;\n   return false;\n }\n@@ -4009,7 +4009,7 @@ c_parser_attributes (c_parser *parser)\n       parser->lex_untranslated_string = false;\n     }\n \n-  if (flag_enable_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+  if (flag_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n     c_finish_cilk_simd_fn_tokens (parser);\n   return attrs;\n }\n@@ -4461,7 +4461,7 @@ c_parser_compound_statement (c_parser *parser)\n   c_parser_compound_statement_nostart (parser);\n \n   /* If the compound stmt contains array notations, then we expand them.  */\n-  if (flag_enable_cilkplus && contains_array_notation_expr (stmt))\n+  if (flag_cilkplus && contains_array_notation_expr (stmt))\n     stmt = expand_array_notation_exprs (stmt);\n   return c_end_compound_stmt (brace_loc, stmt, true);\n }\n@@ -4881,7 +4881,7 @@ c_parser_statement_after_labels (c_parser *parser)\n \tcase RID_CILK_SYNC:\n \t  c_parser_consume_token (parser);\n \t  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n-\t  if (!flag_enable_cilkplus) \n+\t  if (!flag_cilkplus) \n \t    error_at (loc, \"-fcilkplus must be enabled to use %<_Cilk_sync%>\");\n \t  else \n \t    add_stmt (build_cilk_sync ());\n@@ -5151,7 +5151,7 @@ c_parser_if_statement (c_parser *parser)\n   if_stmt = c_end_compound_stmt (loc, block, flag_isoc99);\n \n   /* If the if statement contains array notations, then we expand them.  */\n-  if (flag_enable_cilkplus && contains_array_notation_expr (if_stmt))\n+  if (flag_cilkplus && contains_array_notation_expr (if_stmt))\n     if_stmt = fix_conditional_array_notations (if_stmt);\n   add_stmt (if_stmt);\n }\n@@ -5178,7 +5178,7 @@ c_parser_switch_statement (c_parser *parser)\n       ce = c_parser_expression (parser);\n       ce = convert_lvalue_to_rvalue (switch_cond_loc, ce, true, false);\n       expr = ce.value;\n-      if (flag_enable_cilkplus && contains_array_notation_expr (expr))\n+      if (flag_cilkplus && contains_array_notation_expr (expr))\n \t{\n \t  error_at (switch_cond_loc,\n \t\t    \"array notations cannot be used as a condition for switch \"\n@@ -5224,7 +5224,7 @@ c_parser_while_statement (c_parser *parser, bool ivdep)\n   block = c_begin_compound_stmt (flag_isoc99);\n   loc = c_parser_peek_token (parser)->location;\n   cond = c_parser_paren_condition (parser);\n-  if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+  if (flag_cilkplus && contains_array_notation_expr (cond))\n     {\n       error_at (loc, \"array notations cannot be used as a condition for while \"\n \t\t\"statement\");\n@@ -5276,7 +5276,7 @@ c_parser_do_statement (c_parser *parser, bool ivdep)\n   new_cont = c_cont_label;\n   c_cont_label = save_cont;\n   cond = c_parser_paren_condition (parser);\n-  if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+  if (flag_cilkplus && contains_array_notation_expr (cond))\n     {\n       error_at (loc, \"array notations cannot be used as a condition for a \"\n \t\t\"do-while statement\");\n@@ -5474,7 +5474,7 @@ c_parser_for_statement (c_parser *parser, bool ivdep)\n \t  else\n \t    {\n \t      cond = c_parser_condition (parser);\n-\t      if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+\t      if (flag_cilkplus && contains_array_notation_expr (cond))\n \t\t{\n \t\t  error_at (loc, \"array notations cannot be used in a \"\n \t\t\t    \"condition for a for-loop\");\n@@ -6370,7 +6370,7 @@ c_parser_unary_expression (c_parser *parser)\n       op = c_parser_cast_expression (parser, NULL);\n \n       /* If there is array notations in op, we expand them.  */\n-      if (flag_enable_cilkplus && TREE_CODE (op.value) == ARRAY_NOTATION_REF)\n+      if (flag_cilkplus && TREE_CODE (op.value) == ARRAY_NOTATION_REF)\n \treturn fix_array_notation_expr (exp_loc, PREINCREMENT_EXPR, op);\n       else\n \t{\n@@ -6383,7 +6383,7 @@ c_parser_unary_expression (c_parser *parser)\n       op = c_parser_cast_expression (parser, NULL);\n       \n       /* If there is array notations in op, we expand them.  */\n-      if (flag_enable_cilkplus && TREE_CODE (op.value) == ARRAY_NOTATION_REF)\n+      if (flag_cilkplus && TREE_CODE (op.value) == ARRAY_NOTATION_REF)\n \treturn fix_array_notation_expr (exp_loc, PREDECREMENT_EXPR, op);\n       else\n \t{\n@@ -7493,7 +7493,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  break;\n \tcase RID_CILK_SPAWN:\n \t  c_parser_consume_token (parser);\n-\t  if (!flag_enable_cilkplus)\n+\t  if (!flag_cilkplus)\n \t    {\n \t      error_at (loc, \"-fcilkplus must be enabled to use \"\n \t\t\t\"%<_Cilk_spawn%>\");\n@@ -7645,7 +7645,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \tcase CPP_OPEN_SQUARE:\n \t  /* Array reference.  */\n \t  c_parser_consume_token (parser);\n-\t  if (flag_enable_cilkplus\n+\t  if (flag_cilkplus\n \t      && c_parser_peek_token (parser)->type == CPP_COLON)\n \t    /* If we are here, then we have something like this:\n \t       Array [ : ]\n@@ -7664,7 +7664,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t For 2 and 3 we handle it like we handle array notations.  The\n \t\t idx value we have above becomes the initial/start index.\n \t      */\n-\t      if (flag_enable_cilkplus\n+\t      if (flag_cilkplus\n \t\t  && c_parser_peek_token (parser)->type == CPP_COLON)\n \t\texpr.value = c_parser_array_notation (expr_loc, parser, idx, \n \t\t\t\t\t\t      expr.value);\n@@ -7783,7 +7783,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  /* Postincrement.  */\n \t  c_parser_consume_token (parser);\n \t  /* If the expressions have array notations, we expand them.  */\n-\t  if (flag_enable_cilkplus\n+\t  if (flag_cilkplus\n \t      && TREE_CODE (expr.value) == ARRAY_NOTATION_REF)\n \t    expr = fix_array_notation_expr (expr_loc, POSTINCREMENT_EXPR, expr);\n \t  else\n@@ -7799,7 +7799,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  /* Postdecrement.  */\n \t  c_parser_consume_token (parser);\n \t  /* If the expressions have array notations, we expand them.  */\n-\t  if (flag_enable_cilkplus\n+\t  if (flag_cilkplus\n \t      && TREE_CODE (expr.value) == ARRAY_NOTATION_REF)\n \t    expr = fix_array_notation_expr (expr_loc, POSTDECREMENT_EXPR, expr);\n \t  else\n@@ -9626,7 +9626,7 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_MAP;\n \t  else if (!strcmp (\"mergeable\", p))\n \t    result = PRAGMA_OMP_CLAUSE_MERGEABLE;\n-\t  else if (flag_enable_cilkplus && !strcmp (\"mask\", p))\n+\t  else if (flag_cilkplus && !strcmp (\"mask\", p))\n \t    result = PRAGMA_CILK_CLAUSE_MASK;\n \t  break;\n \tcase 'n':\n@@ -9638,7 +9638,7 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_NUM_TEAMS;\n \t  else if (!strcmp (\"num_threads\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NUM_THREADS;\n-\t  else if (flag_enable_cilkplus && !strcmp (\"nomask\", p))\n+\t  else if (flag_cilkplus && !strcmp (\"nomask\", p))\n \t    result = PRAGMA_CILK_CLAUSE_NOMASK;\n \t  break;\n \tcase 'o':\n@@ -9684,7 +9684,7 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  break;\n \tcase 'v':\n-\t  if (flag_enable_cilkplus && !strcmp (\"vectorlength\", p))\n+\t  if (flag_cilkplus && !strcmp (\"vectorlength\", p))\n \t    result = PRAGMA_CILK_CLAUSE_VECTORLENGTH;\n \t  break;\n \t}\n@@ -12850,7 +12850,7 @@ static void\n c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \t\t\t   vec<c_token> clauses)\n {\n-  if (flag_enable_cilkplus\n+  if (flag_cilkplus\n       && clauses.exists () && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n     {\n       error (\"%<#pragma omp declare simd%> cannot be used in the same \"\n@@ -12887,7 +12887,7 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n   gcc_assert (parser->tokens == &parser->tokens_buf[0]);\n   bool is_cilkplus_cilk_simd_fn = false;\n   \n-  if (flag_enable_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+  if (flag_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n     {\n       parser->tokens = parser->cilk_simd_fn_tokens->address ();\n       parser->tokens_avail = vec_safe_length (parser->cilk_simd_fn_tokens);\n@@ -13517,7 +13517,7 @@ static bool\n c_parser_cilk_verify_simd (c_parser *parser,\n \t\t\t\t  enum pragma_context context)\n {\n-  if (!flag_enable_cilkplus)\n+  if (!flag_cilkplus)\n     {\n       warning (0, \"pragma simd ignored because -fcilkplus is not enabled\");\n       c_parser_skip_until_found (parser, CPP_PRAGMA_EOL, NULL);"}, {"sha": "8477dd43fbf1d07fd861cc2218386e806a9653f8", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -2423,7 +2423,7 @@ build_array_ref (location_t loc, tree array, tree index)\n       || TREE_TYPE (index) == error_mark_node)\n     return error_mark_node;\n \n-  if (flag_enable_cilkplus && contains_array_notation_expr (index))\n+  if (flag_cilkplus && contains_array_notation_expr (index))\n     {\n       size_t rank = 0;\n       if (!find_rank (loc, index, index, true, &rank))\n@@ -2853,7 +2853,7 @@ build_function_call_vec (location_t loc, tree function,\n       if (name && !strncmp (IDENTIFIER_POINTER (name), \"__atomic_\", 9))\n         origtypes = NULL;\n \n-      if (flag_enable_cilkplus\n+      if (flag_cilkplus\n \t  && is_cilkplus_reduce_builtin (function))\n \torigtypes = NULL;\n     }\n@@ -3061,7 +3061,7 @@ convert_arguments (tree typelist, vec<tree, va_gc> *values,\n \t  break;\n \t}\n     }\n-  if (flag_enable_cilkplus && fundecl && is_cilkplus_reduce_builtin (fundecl))\n+  if (flag_cilkplus && fundecl && is_cilkplus_reduce_builtin (fundecl))\n     return vec_safe_length (values);\n \n   /* Scan the given expressions and types, producing individual\n@@ -4739,7 +4739,7 @@ build_compound_expr (location_t loc, tree expr1, tree expr2)\n   tree eptype = NULL_TREE;\n   tree ret;\n \n-  if (flag_enable_cilkplus\n+  if (flag_cilkplus\n       && (TREE_CODE (expr1) == CILK_SPAWN_STMT\n \t  || TREE_CODE (expr2) == CILK_SPAWN_STMT))\n     {\n@@ -9136,7 +9136,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n     warning_at (loc, 0,\n \t\t\"function declared %<noreturn%> has a %<return%> statement\");\n \n-  if (flag_enable_cilkplus && contains_array_notation_expr (retval))\n+  if (flag_cilkplus && contains_array_notation_expr (retval))\n     {\n       /* Array notations are allowed in a return statement if it is inside a\n \t built-in array notation reduction function.  */\n@@ -9149,7 +9149,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \t  return error_mark_node;\n \t}\n     }\n-  if (flag_enable_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n+  if (flag_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n     {\n       error_at (loc, \"use of %<_Cilk_spawn%> in a return statement is not \"\n \t\t\"allowed\");\n@@ -9450,7 +9450,7 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n      else_block must be either 0 or be equal to the rank of the condition.  If\n      the condition does not have array notations then break them up as it is\n      broken up in a normal expression.  */\n-  if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+  if (flag_cilkplus && contains_array_notation_expr (cond))\n     {\n       size_t then_rank = 0, cond_rank = 0, else_rank = 0;\n       if (!find_rank (if_locus, cond, cond, true, &cond_rank))\n@@ -9525,7 +9525,7 @@ c_finish_loop (location_t start_locus, tree cond, tree incr, tree body,\n {\n   tree entry = NULL, exit = NULL, t;\n \n-  if (flag_enable_cilkplus && contains_array_notation_expr (cond))\n+  if (flag_cilkplus && contains_array_notation_expr (cond))\n     {\n       error_at (start_locus, \"array notation expression cannot be used in a \"\n \t\t\"loop%'s condition\");\n@@ -10074,12 +10074,12 @@ build_binary_op (location_t location, enum tree_code code,\n   /* When Cilk Plus is enabled and there are array notations inside op0, then\n      we check to see if there are builtin array notation functions.  If\n      so, then we take on the type of the array notation inside it.  */\n-  if (flag_enable_cilkplus && contains_array_notation_expr (op0)) \n+  if (flag_cilkplus && contains_array_notation_expr (op0)) \n     orig_type0 = type0 = find_correct_array_notation_type (op0);\n   else\n     orig_type0 = type0 = TREE_TYPE (op0);\n \n-  if (flag_enable_cilkplus && contains_array_notation_expr (op1))\n+  if (flag_cilkplus && contains_array_notation_expr (op1))\n     orig_type1 = type1 = find_correct_array_notation_type (op1);\n   else \n     orig_type1 = type1 = TREE_TYPE (op1);"}, {"sha": "ae96f53c37c26cef8510f6859d724eacedcc1b89", "filename": "gcc/cilk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcilk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcilk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk.h?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -97,7 +97,7 @@ extern tree cilk_call_setjmp (tree);\n inline bool\n fn_contains_cilk_spawn_p (function *f)\n {\n-  return (flag_enable_cilkplus \n+  return (flag_cilkplus \n \t  && (f->calls_cilk_spawn || f->cilk_frame_decl != NULL_TREE));\n }\n "}, {"sha": "635fb053e2c8aee46d4ea4cdbeee0b761a543f9c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1,3 +1,20 @@\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* call.c (magic_varargs_p): Replaced flag_enable_cilkplus with\n+\tflag_cilkplus.\n+\t* cp-gimplify.c (cp_genericize): Likewise.\n+\t* decl.c (grokfndecl): Likewise.\n+\t* parser.c (cp_parser_postfix_expression): Likewise.\n+\t(cp_parser_postfix_open_square_expression): Likewise.\n+\t(cp_parser_direct_declarator): Likewise.\n+\t(is_cilkplus_vector_p): Likewise.\n+\t(cp_parser_omp_clause_name): Likewise.\n+\t(cp_parser_omp_all_clauses): Likewise.\n+\t* pt.c (apply_late_template_attributes): Likewise.\n+\t* typeck.c (cp_build_array_ref): Likewise.\n+\t(cp_build_compound_expr): Likewise.\n+\t(check_return_expr): Likewise.\n+\n 2014-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58550"}, {"sha": "2c779733f0d9679bd3e15a29d4c988c49d03e6b3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -6568,7 +6568,7 @@ convert_for_arg_passing (tree type, tree val, tsubst_flags_t complain)\n bool\n magic_varargs_p (tree fn)\n {\n-  if (flag_enable_cilkplus && is_cilkplus_reduce_builtin (fn) != BUILT_IN_NONE)\n+  if (flag_cilkplus && is_cilkplus_reduce_builtin (fn) != BUILT_IN_NONE)\n     return true;\n \n   if (DECL_BUILT_IN (fn))\n@@ -7191,7 +7191,7 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n     /* If it is a built-in array notation function, then the return type of\n      the function is the element type of the array passed in as array \n      notation (i.e. the first parameter of the function).  */\n-  if (flag_enable_cilkplus && TREE_CODE (fn) == CALL_EXPR) \n+  if (flag_cilkplus && TREE_CODE (fn) == CALL_EXPR) \n     {\n       enum built_in_function bif = \n \tis_cilkplus_reduce_builtin (CALL_EXPR_FN (fn));"}, {"sha": "ef4b04372bc21f30ee34f368d306ad6fb2c2948c", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1311,7 +1311,7 @@ cp_genericize (tree fndecl)\n     return;\n \n   /* Expand all the array notations here.  */\n-  if (flag_enable_cilkplus \n+  if (flag_cilkplus \n       && contains_array_notation_expr (DECL_SAVED_TREE (fndecl)))\n     DECL_SAVED_TREE (fndecl) = \n       expand_array_notation_exprs (DECL_SAVED_TREE (fndecl));"}, {"sha": "38f2de0d06965cecdeac3341ad09ae05c6b0e8eb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -7674,7 +7674,7 @@ grokfndecl (tree ctype,\n   if (TYPE_NOTHROW_P (type) || nothrow_libfn_p (decl))\n     TREE_NOTHROW (decl) = 1;\n \n-  if (flag_openmp || flag_enable_cilkplus)\n+  if (flag_openmp || flag_cilkplus)\n     {\n       /* Adjust \"omp declare simd\" attributes.  */\n       tree ods = lookup_attribute (\"omp declare simd\", *attrlist);"}, {"sha": "0636445198bfba2e9852cb8f19b63ec660b7ba60", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -5808,7 +5808,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tpostfix_expression = \n \t  cp_parser_postfix_expression (parser, false, false, \n \t\t\t\t\tfalse, false, &idk);\n-\tif (!flag_enable_cilkplus)\n+\tif (!flag_cilkplus)\n \t  {\n \t    error_at (token->location, \"-fcilkplus must be enabled to use\"\n \t\t      \" %<_Cilk_spawn%>\");\n@@ -5833,7 +5833,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n       }\n       \n     case RID_CILK_SYNC:\n-      if (flag_enable_cilkplus)\n+      if (flag_cilkplus)\n \t{ \n \t  tree sync_expr = build_cilk_sync ();\n \t  SET_EXPR_LOCATION (sync_expr, \n@@ -6373,7 +6373,7 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n \t  bool expr_nonconst_p;\n \t  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n-\t  if (flag_enable_cilkplus\n+\t  if (flag_cilkplus\n \t      && cp_lexer_peek_token (parser->lexer)->type == CPP_COLON)\n \t    {\n \t      error_at (cp_lexer_peek_token (parser->lexer)->location,\n@@ -6383,7 +6383,7 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n \t      return error_mark_node;\n \t    }\n \t}\n-      else if (flag_enable_cilkplus)\n+      else if (flag_cilkplus)\n \t{\n \t  /* Here are have these two options:\n \t     ARRAY[EXP : EXP]        - Array notation expr with default\n@@ -17141,7 +17141,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  /* In here, we handle cases where attribute is used after\n \t\t     the function declaration.  For example:\n \t\t     void func (int x) __attribute__((vector(..)));  */\n-\t\t  if (flag_enable_cilkplus\n+\t\t  if (flag_cilkplus\n \t\t      && cp_next_tokens_can_be_gnu_attribute_p (parser))\n \t\t    {\n \t\t      cp_parser_parse_tentatively (parser);\n@@ -21565,7 +21565,7 @@ cp_parser_gnu_attributes_opt (cp_parser* parser)\n static inline bool\n is_cilkplus_vector_p (tree name)\n { \n-  if (flag_enable_cilkplus && is_attribute_p (\"vector\", name)) \n+  if (flag_cilkplus && is_attribute_p (\"vector\", name)) \n     return true;\n   return false;\n }\n@@ -26934,15 +26934,15 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_MAP;\n \t  else if (!strcmp (\"mergeable\", p))\n \t    result = PRAGMA_OMP_CLAUSE_MERGEABLE;\n-\t  else if (flag_enable_cilkplus && !strcmp (\"mask\", p))\n+\t  else if (flag_cilkplus && !strcmp (\"mask\", p))\n \t    result = PRAGMA_CILK_CLAUSE_MASK;\n \t  break;\n \tcase 'n':\n \t  if (!strcmp (\"notinbranch\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOTINBRANCH;\n \t  else if (!strcmp (\"nowait\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOWAIT;\n-\t  else if (flag_enable_cilkplus && !strcmp (\"nomask\", p))\n+\t  else if (flag_cilkplus && !strcmp (\"nomask\", p))\n \t    result = PRAGMA_CILK_CLAUSE_NOMASK;\n \t  else if (!strcmp (\"num_teams\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NUM_TEAMS;\n@@ -26990,7 +26990,7 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  break;\n \tcase 'v':\n-\t  if (flag_enable_cilkplus && !strcmp (\"vectorlength\", p))\n+\t  if (flag_cilkplus && !strcmp (\"vectorlength\", p))\n \t    result = PRAGMA_CILK_CLAUSE_VECTORLENGTH;\n \t  break;\n \t}\n@@ -28319,7 +28319,7 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n  saw_error:\n   /* In Cilk Plus SIMD enabled functions there is no pragma_token, so\n      no reason to skip to the end.  */\n-  if (!(flag_enable_cilkplus && pragma_tok == NULL))\n+  if (!(flag_cilkplus && pragma_tok == NULL))\n     cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n   if (finish_p)\n     return finish_omp_clauses (clauses);"}, {"sha": "4414e498fce32ec70603fd7b9477cae2ab9f53fd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -8613,7 +8613,7 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t    {\n \t      *p = TREE_CHAIN (t);\n \t      TREE_CHAIN (t) = NULL_TREE;\n-\t      if ((flag_openmp || flag_enable_cilkplus)\n+\t      if ((flag_openmp || flag_cilkplus)\n \t\t  && is_attribute_p (\"omp declare simd\",\n \t\t\t\t     get_attribute_name (t))\n \t\t  && TREE_VALUE (t))"}, {"sha": "78090a735ced3d6981a14a084f4afaeafd4ea448", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -3012,7 +3012,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \n   /* If an array's index is an array notation, then its rank cannot be\n      greater than one.  */ \n-  if (flag_enable_cilkplus && contains_array_notation_expr (idx))\n+  if (flag_cilkplus && contains_array_notation_expr (idx))\n     {\n       size_t rank = 0;\n \n@@ -6188,7 +6188,7 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n   if (lhs == error_mark_node || rhs == error_mark_node)\n     return error_mark_node;\n \n-  if (flag_enable_cilkplus\n+  if (flag_cilkplus\n       && (TREE_CODE (lhs) == CILK_SPAWN_STMT\n \t  || TREE_CODE (rhs) == CILK_SPAWN_STMT))\n     {\n@@ -8323,7 +8323,7 @@ check_return_expr (tree retval, bool *no_warning)\n \n   *no_warning = false;\n \n-  if (flag_enable_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n+  if (flag_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n     {\n       error_at (EXPR_LOCATION (retval), \"use of %<_Cilk_spawn%> in a return \"\n \t\t\"statement is not allowed\");"}, {"sha": "8b2c6b4d3d2d65404ec244199bb61846e1c2e35d", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -105,7 +105,7 @@ define_builtin_macros_for_compilation_flags (cpp_reader *pfile)\n \n   cpp_define_formatted (pfile, \"__FINITE_MATH_ONLY__=%d\",\n \t\t\tflag_finite_math_only);\n-  if (flag_enable_cilkplus)\n+  if (flag_cilkplus)\n     cpp_define (pfile, \"__cilk=200\");\n }\n "}, {"sha": "7c49b7f6b744295b80d0b35534f656358ac32204", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -2405,7 +2405,7 @@ ira_setup_eliminable_regset (void)\n        || (SUPPORTS_STACK_ALIGNMENT && crtl->stack_realign_needed)\n        /* We need a frame pointer for all Cilk Plus functions that use\n \t  Cilk keywords.  */\n-       || (flag_enable_cilkplus && cfun->is_cilk_function)\n+       || (flag_cilkplus && cfun->is_cilk_function)\n        || targetm.frame_pointer_required ());\n \n     /* The chance that FRAME_POINTER_NEEDED is changed from inspecting"}, {"sha": "8eede88031c244e592ee744b4191103f7135d68d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1,3 +1,8 @@\n+2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* lto-lang.c (lto_init): Replaced flag_enable_cilkplus with\n+\tflag_cilkplus.\n+\n 2014-01-09  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (gimple_canonical_types_compatible_p): Fix comment."}, {"sha": "b5e5d6a6b578abe1ddf2f1890237f2309fbc9b5c", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -1183,7 +1183,7 @@ lto_init (void)\n \t\t\t   build_reference_type (va_list_type_node));\n     }\n   \n-  if (flag_enable_cilkplus)\n+  if (flag_cilkplus)\n     cilk_init_builtins ();\n \n   targetm.init_builtins ();"}, {"sha": "eeba4ae84706f49eee97b39e94724fdbb59c4cea", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72271b953b368fab603cb86294c49c72097b78f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b72271b953b368fab603cb86294c49c72097b78f", "patch": "@@ -8328,7 +8328,7 @@ static bool\n gate_expand_omp (void)\n {\n   return ((flag_openmp != 0 || flag_openmp_simd != 0\n-\t   || flag_enable_cilkplus != 0) && !seen_error ());\n+\t   || flag_cilkplus != 0) && !seen_error ());\n }\n \n namespace {\n@@ -10139,7 +10139,7 @@ execute_lower_omp (void)\n \n   /* This pass always runs, to provide PROP_gimple_lomp.\n      But there is nothing to do unless -fopenmp is given.  */\n-  if (flag_openmp == 0 && flag_openmp_simd == 0 && flag_enable_cilkplus == 0)\n+  if (flag_openmp == 0 && flag_openmp_simd == 0 && flag_cilkplus == 0)\n     return 0;\n \n   all_contexts = splay_tree_new (splay_tree_compare_pointers, 0,\n@@ -10258,7 +10258,7 @@ diagnose_sb_0 (gimple_stmt_iterator *gsi_p,\n #endif\n \n   bool cilkplus_block = false;\n-  if (flag_enable_cilkplus)\n+  if (flag_cilkplus)\n     {\n       if ((branch_ctx\n \t   && gimple_code (branch_ctx) == GIMPLE_OMP_FOR\n@@ -10587,7 +10587,7 @@ diagnose_omp_structured_block_errors (void)\n static bool\n gate_diagnose_omp_blocks (void)\n {\n-  return flag_openmp || flag_enable_cilkplus;\n+  return flag_openmp || flag_cilkplus;\n }\n \n namespace {\n@@ -10696,7 +10696,7 @@ simd_clone_clauses_extract (struct cgraph_node *node, tree clauses,\n      be cloned have a distinctive artificial label in addition to \"omp\n      declare simd\".  */\n   bool cilk_clone\n-    = (flag_enable_cilkplus\n+    = (flag_cilkplus\n        && lookup_attribute (\"cilk simd function\",\n \t\t\t    DECL_ATTRIBUTES (node->decl)));\n \n@@ -11781,7 +11781,7 @@ class pass_omp_simd_clone : public simple_ipa_opt_pass\n \n   /* opt_pass methods: */\n   bool gate () { return ((flag_openmp || flag_openmp_simd\n-\t\t\t  || flag_enable_cilkplus || (in_lto_p && !flag_wpa))\n+\t\t\t  || flag_cilkplus || (in_lto_p && !flag_wpa))\n \t\t\t && (targetm.simd_clone.compute_vecsize_and_simdlen\n \t\t\t     != NULL)); }\n   unsigned int execute () { return ipa_omp_simd_clone (); }"}]}