{"sha": "04159acfd818cbc29a9d12dfa2e83716c106f2c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxNTlhY2ZkODE4Y2JjMjlhOWQxMmRmYTJlODM3MTZjMTA2ZjJjNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-19T18:50:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-19T18:50:00Z"}, "message": "re PR c++/62153 (warn for bool expression compared with integer different from 0/1)\n\n\tPR c++/62153\n\t* doc/invoke.texi: Document -Wbool-compare.\nc-family/\n\t* c-common.c (maybe_warn_bool_compare): New function.\n\t* c-common.h (maybe_warn_bool_compare): Declare.\n\t* c.opt (Wbool-compare): New option.\nc/\n\t* c-typeck.c (build_binary_op): If either operand of a comparison\n\tis a boolean expression, call maybe_warn_bool_compare.\ncp/\n\t* call.c (build_new_op_1): Remember the type of arguments for\n\ta comparison.  If either operand of a comparison is a boolean\n\texpression, call maybe_warn_bool_compare.\ntestsuite/\n\t* c-c++-common/Wbool-compare-1.c: New test.\n\nFrom-SVN: r214183", "tree": {"sha": "c01c9d77dc28f6a4d017760a2f0f57809574d010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01c9d77dc28f6a4d017760a2f0f57809574d010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04159acfd818cbc29a9d12dfa2e83716c106f2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04159acfd818cbc29a9d12dfa2e83716c106f2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04159acfd818cbc29a9d12dfa2e83716c106f2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04159acfd818cbc29a9d12dfa2e83716c106f2c7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a2e8325e4b35265ea983561eca4a23a13630b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2e8325e4b35265ea983561eca4a23a13630b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2e8325e4b35265ea983561eca4a23a13630b07"}], "stats": {"total": 244, "additions": 239, "deletions": 5}, "files": [{"sha": "900d616ac92d1d8712d6cbd7478864fec4a93fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1,3 +1,8 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62153\n+\t* doc/invoke.texi: Document -Wbool-compare.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (entry_of_function): Strengthen return type from rtx to"}, {"sha": "e458f5e2250e8c7126e7bcda5d2660bc8051da9f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1,3 +1,10 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62153\n+\t* c-common.c (maybe_warn_bool_compare): New function.\n+\t* c-common.h (maybe_warn_bool_compare): Declare.\n+\t* c.opt (Wbool-compare): New option.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wc99-c11-compat): New option."}, {"sha": "901a5edd707939e80d60b51ac18d946372cb6c4e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -11612,6 +11612,39 @@ maybe_warn_unused_local_typedefs (void)\n   vec_free (l->local_typedefs);\n }\n \n+/* Warn about boolean expression compared with an integer value different\n+   from true/false.  Warns also e.g. about \"(i1 == i2) == 2\".\n+   LOC is the location of the comparison, CODE is its code, OP0 and OP1\n+   are the operands of the comparison.  The caller must ensure that\n+   either operand is a boolean expression.  */\n+\n+void\n+maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n+\t\t\t tree op1)\n+{\n+  if (TREE_CODE_CLASS (code) != tcc_comparison)\n+    return;\n+\n+  tree cst = (TREE_CODE (op0) == INTEGER_CST)\n+\t     ? op0 : (TREE_CODE (op1) == INTEGER_CST) ? op1 : NULL_TREE;\n+  if (!cst)\n+    return;\n+\n+  if (!integer_zerop (cst) && !integer_onep (cst))\n+    {\n+      int sign = (TREE_CODE (op0) == INTEGER_CST)\n+\t\t ? tree_int_cst_sgn (cst) : -tree_int_cst_sgn (cst);\n+      if (code == EQ_EXPR\n+\t  || ((code == GT_EXPR || code == GE_EXPR) && sign < 0)\n+\t  || ((code == LT_EXPR || code == LE_EXPR) && sign > 0))\n+\twarning_at (loc, OPT_Wbool_compare, \"comparison of constant %qE \"\n+\t\t    \"with boolean expression is always false\", cst);\n+      else\n+\twarning_at (loc, OPT_Wbool_compare, \"comparison of constant %qE \"\n+\t\t    \"with boolean expression is always true\", cst);\n+    }\n+}\n+\n /* The C and C++ parsers both use vectors to hold function arguments.\n    For efficiency, we keep a cache of unused vectors.  This is the\n    cache.  */"}, {"sha": "995bc8ca50ed9f04a4d08859e842fbd1203b25b1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1015,6 +1015,7 @@ extern void record_types_used_by_current_var_decl (tree);\n extern void record_locally_defined_typedef (tree);\n extern void maybe_record_typedef_use (tree);\n extern void maybe_warn_unused_local_typedefs (void);\n+extern void maybe_warn_bool_compare (location_t, enum tree_code, tree, tree);\n extern vec<tree, va_gc> *make_tree_vector (void);\n extern void release_tree_vector (vec<tree, va_gc> *);\n extern vec<tree, va_gc> *make_tree_vector_single (tree);"}, {"sha": "f97a11a19cc773fcb610cef1fc57624c5a0440e8", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -287,6 +287,10 @@ Wbad-function-cast\n C ObjC Var(warn_bad_function_cast) Warning\n Warn about casting functions to incompatible types\n \n+Wbool-compare\n+C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about boolean expression compared with an integer value different from true/false\n+\n Wbuiltin-macro-redefined\n C ObjC C++ ObjC++ Warning\n Warn when a built-in preprocessor macro is undefined or redefined"}, {"sha": "e5429ac617cfeaa6bc3de8cfb777327cfd431a85", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1,3 +1,9 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62153\n+\t* c-typeck.c (build_binary_op): If either operand of a comparison\n+\tis a boolean expression, call maybe_warn_bool_compare.\n+\n 2014-08-19  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c/45584"}, {"sha": "d6d96cf3550f1adc29f3fce917034a049e2195dc", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -10679,6 +10679,11 @@ build_binary_op (location_t location, enum tree_code code,\n \t  result_type = type1;\n \t  pedwarn (location, 0, \"comparison between pointer and integer\");\n \t}\n+      if ((TREE_CODE (TREE_TYPE (orig_op0)) == BOOLEAN_TYPE\n+\t   || truth_value_p (TREE_CODE (orig_op0)))\n+\t  ^ (TREE_CODE (TREE_TYPE (orig_op1)) == BOOLEAN_TYPE\n+\t     || truth_value_p (TREE_CODE (orig_op1))))\n+\tmaybe_warn_bool_compare (location, code, orig_op0, orig_op1);\n       break;\n \n     case LE_EXPR:\n@@ -10783,6 +10788,11 @@ build_binary_op (location_t location, enum tree_code code,\n \t  result_type = type1;\n \t  pedwarn (location, 0, \"comparison between pointer and integer\");\n \t}\n+      if ((TREE_CODE (TREE_TYPE (orig_op0)) == BOOLEAN_TYPE\n+\t   || truth_value_p (TREE_CODE (orig_op0)))\n+\t  ^ (TREE_CODE (TREE_TYPE (orig_op1)) == BOOLEAN_TYPE\n+\t     || truth_value_p (TREE_CODE (orig_op1))))\n+\tmaybe_warn_bool_compare (location, code, orig_op0, orig_op1);\n       break;\n \n     default:"}, {"sha": "6d61f75b804b9ef7d7bed07dee36dff68cfa639e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1,3 +1,10 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62153\n+\t* call.c (build_new_op_1): Remember the type of arguments for\n+\ta comparison.  If either operand of a comparison is a boolean\n+\texpression, call maybe_warn_bool_compare.\n+\n 2014-08-19  Jason Merrill  <jason@redhat.com>\n \n \tPR tree-optimization/62091"}, {"sha": "161235b64cb05070007219f362ea2662249b09ac", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -5318,7 +5318,17 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n       /* These are saved for the sake of warn_logical_operator.  */\n       code_orig_arg1 = TREE_CODE (arg1);\n       code_orig_arg2 = TREE_CODE (arg2);\n-\n+      break;\n+    case GT_EXPR:\n+    case LT_EXPR:\n+    case GE_EXPR:\n+    case LE_EXPR:\n+    case EQ_EXPR:\n+    case NE_EXPR:\n+      /* These are saved for the sake of maybe_warn_bool_compare.  */\n+      code_orig_arg1 = TREE_CODE (TREE_TYPE (arg1));\n+      code_orig_arg2 = TREE_CODE (TREE_TYPE (arg2));\n+      break;\n     default:\n       break;\n     }\n@@ -5625,16 +5635,20 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n       warn_logical_operator (loc, code, boolean_type_node,\n \t\t\t     code_orig_arg1, arg1, code_orig_arg2, arg2);\n       /* Fall through.  */\n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-    case MULT_EXPR:\n-    case TRUNC_DIV_EXPR:\n     case GT_EXPR:\n     case LT_EXPR:\n     case GE_EXPR:\n     case LE_EXPR:\n     case EQ_EXPR:\n     case NE_EXPR:\n+      if ((code_orig_arg1 == BOOLEAN_TYPE)\n+\t  ^ (code_orig_arg2 == BOOLEAN_TYPE))\n+\tmaybe_warn_bool_compare (loc, code, arg1, arg2);\n+      /* Fall through.  */\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case TRUNC_DIV_EXPR:\n     case MAX_EXPR:\n     case MIN_EXPR:\n     case LSHIFT_EXPR:"}, {"sha": "b8e42949f21951df5dcec96adda4f5b001ccb484", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -240,6 +240,7 @@ Objective-C and Objective-C++ Dialects}.\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Waggressive-loop-optimizations -Warray-bounds @gol\n+-Wbool-compare @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n@@ -4221,6 +4222,19 @@ This option is only active when @option{-ftree-vrp} is active\n (default for @option{-O2} and above). It warns about subscripts to arrays\n that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n+@item -Wbool-compare\n+@opindex Wno-bool-compare\n+@opindex Wbool-compare\n+Warn about boolean expression compared with an integer value different from\n+@code{true}/@code{false}.  For instance, the following comparison is\n+always false:\n+@smallexample\n+int n = 5;\n+@dots{}\n+if ((n > 1) == 2) @{ @dots{} @}\n+@end smallexample\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wno-discarded-qualifiers @r{(C and Objective-C only)}\n @opindex Wno-discarded-qualifiers\n @opindex Wdiscarded-qualifiers"}, {"sha": "b1703fa1e148317a074026756e70c5d66d94399e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -1,3 +1,8 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62153\n+\t* c-c++-common/Wbool-compare-1.c: New test.\n+\n 2014-08-19  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c/45584"}, {"sha": "5b03e0682109186775c5c3bdc270eeca0db62a4c", "filename": "gcc/testsuite/c-c++-common/Wbool-compare-1.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04159acfd818cbc29a9d12dfa2e83716c106f2c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c?ref=04159acfd818cbc29a9d12dfa2e83716c106f2c7", "patch": "@@ -0,0 +1,128 @@\n+/* PR c++/62153 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern bool foo (void);\n+bool r;\n+\n+enum { E = 4 };\n+\n+void\n+fn1 (bool b)\n+{\n+  r = b == 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b != 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b < 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b > 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b <= 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b >= 2; /* { dg-warning \"with boolean expression is always false\" } */\n+\n+  r = b == -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b != -1; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b < -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b > -1; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b <= -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b >= -1; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r = foo () == 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = foo () != 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = foo () < 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = foo () > 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = foo () <= 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = foo () >= 2; /* { dg-warning \"with boolean expression is always false\" } */\n+\n+  r = b == E; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b != E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b < E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b > E; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = b <= E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = b >= E; /* { dg-warning \"with boolean expression is always false\" } */\n+\n+  /* Swap LHS and RHS.  */\n+  r = 2 == b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = 2 != b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = 2 < b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = 2 > b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = 2 <= b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = 2 >= b; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r = -1 == b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = -1 != b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = -1 < b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = -1 > b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = -1 <= b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = -1 >= b; /* { dg-warning \"with boolean expression is always false\" } */\n+\n+  r = E == b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = E != b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = E < b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = E > b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = E <= b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = E >= b; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  /* These are of course fine.  */\n+  r = b == false;\n+  r = b != false;\n+  r = b == true;\n+  r = b != true;\n+\n+  /* Some of these don't make much sense, but we don't warn.  */\n+  r = b < false;\n+  r = b >= false;\n+  r = b <= false;\n+  r = b > false;\n+  r = b < true;\n+  r = b >= true;\n+  r = b <= true;\n+  r = b > true;\n+}\n+\n+void\n+fn2 (int i1, int i2)\n+{\n+  r = (i1 == i2) == 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) != 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) < 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) > 2; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) <= 2; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) >= 2; /* { dg-warning \"with boolean expression is always false\" } */\n+\n+  r = (i1 == i2) == -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) != -1; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) < -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) > -1; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) <= -1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) >= -1; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r = (i1 == i2) == E; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) != E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) < E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) > E; /* { dg-warning \"with boolean expression is always false\" } */\n+  r = (i1 == i2) <= E; /* { dg-warning \"with boolean expression is always true\" } */\n+  r = (i1 == i2) >= E; /* { dg-warning \"with boolean expression is always false\" } */\n+}\n+\n+void\n+fn3 (int n, bool b)\n+{\n+  /* Don't warn here.  */\n+  r = b == n;\n+  r = b != n;\n+  r = b < n;\n+  r = b > n;\n+  r = b <= n;\n+  r = b >= n;\n+\n+  r = n == E;\n+  r = n != E;\n+  r = n < E;\n+  r = n > E;\n+  r = n <= E;\n+  r = n >= E;\n+}"}]}