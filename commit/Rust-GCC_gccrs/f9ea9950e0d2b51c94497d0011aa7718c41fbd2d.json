{"sha": "f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllYTk5NTBlMGQyYjUxYzk0NDk3ZDAwMTFhYTc3MThjNDFmYmQyZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-12-09T03:56:28Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-12-09T03:56:28Z"}, "message": "re PR target/64204 (gcc.dg/c11-atomic-2.c fails on powerpc 64-bit little endian after -mupper-regs patches went in)\n\n2014-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/64204\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Do not split TFmode\n\tconstant moves if -mupper-regs-df.\n\n\t* config/rs6000/rs6000.md (mov<mode>_64bit_dm): Optimize moving\n\t0.0L to TFmode.\n\t(movtd_64bit_nodm): Likewise.\n\t(mov<mode>_32bit, FMOVE128 case): Likewise.\n\nFrom-SVN: r218505", "tree": {"sha": "f6ff4b42ecf4682452700f317241f86653c78072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ff4b42ecf4682452700f317241f86653c78072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/comments", "author": null, "committer": null, "parents": [{"sha": "10828a0194f2cc16f345e392ae968f9582e01952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10828a0194f2cc16f345e392ae968f9582e01952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10828a0194f2cc16f345e392ae968f9582e01952"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "5217b8d57a68aa8b1bd5bf4022108a83dbc9dd4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "patch": "@@ -1,3 +1,14 @@\n+2014-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/64204\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Do not split TFmode\n+\tconstant moves if -mupper-regs-df.\n+\n+\t* config/rs6000/rs6000.md (mov<mode>_64bit_dm): Optimize moving\n+\t0.0L to TFmode.\n+\t(movtd_64bit_nodm): Likewise.\n+\t(mov<mode>_32bit, FMOVE128 case): Likewise.\n+\n 2014-12-08  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* simplify-rtx.c (simplify_relational_operation_1): Handle"}, {"sha": "be092a64eb9e0c7d2360f9d58cae465ddebb11bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "patch": "@@ -8396,9 +8396,11 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t  || ! nonimmediate_operand (operands[0], mode)))\n     goto emit_set;\n \n-  /* 128-bit constant floating-point values on Darwin should really be\n-     loaded as two parts.  */\n+  /* 128-bit constant floating-point values on Darwin should really be loaded\n+     as two parts.  However, this premature splitting is a problem when DFmode\n+     values can go into Altivec registers.  */\n   if (!TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128\n+      && !reg_addr[DFmode].scalar_in_vmx_p\n       && mode == TFmode && GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n       rs6000_emit_move (simplify_gen_subreg (DFmode, operands[0], mode, 0),"}, {"sha": "8fc186f1fe9c3fdc60226406f319ab8dd75661b7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "patch": "@@ -8086,8 +8086,8 @@\n ;; problematical.  Don't allow direct move for this case.\n \n (define_insn_and_split \"*mov<mode>_64bit_dm\"\n-  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r,r,wm\")\n-\t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,r,YGHF,r,wm,r\"))]\n+  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,ws,Y,r,r,r,wm\")\n+\t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,j,r,jYGHF,r,wm,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_POWERPC64\n    && (<MODE>mode != TDmode || WORDS_BIG_ENDIAN)\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n@@ -8096,31 +8096,31 @@\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,12,12,8,8,8\")])\n+  [(set_attr \"length\" \"8,8,8,8,12,12,8,8,8\")])\n \n (define_insn_and_split \"*movtd_64bit_nodm\"\n-  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n-\t(match_operand:TD 1 \"input_operand\" \"d,m,d,r,YGHF,r\"))]\n+  [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,ws,Y,r,r\")\n+\t(match_operand:TD 1 \"input_operand\" \"d,m,d,j,r,jYGHF,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_POWERPC64 && !WORDS_BIG_ENDIAN\n    && (gpc_reg_operand (operands[0], TDmode)\n        || gpc_reg_operand (operands[1], TDmode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,12,12,8\")])\n+  [(set_attr \"length\" \"8,8,8,8,12,12,8\")])\n \n (define_insn_and_split \"*mov<mode>_32bit\"\n-  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n-\t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,r,YGHF,r\"))]\n+  [(set (match_operand:FMOVE128 0 \"nonimmediate_operand\" \"=m,d,d,ws,Y,r,r\")\n+\t(match_operand:FMOVE128 1 \"input_operand\" \"d,m,d,j,r,jYGHF,r\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n-  [(set_attr \"length\" \"8,8,8,20,20,16\")])\n+  [(set_attr \"length\" \"8,8,8,8,20,20,16\")])\n \n (define_insn_and_split \"*mov<mode>_softfloat\"\n   [(set (match_operand:FMOVE128 0 \"rs6000_nonimmediate_operand\" \"=Y,r,r\")"}]}