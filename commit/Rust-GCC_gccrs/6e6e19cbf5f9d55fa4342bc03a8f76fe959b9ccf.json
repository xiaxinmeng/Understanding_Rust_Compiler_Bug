{"sha": "6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2ZTE5Y2JmNWY5ZDU1ZmE0MzQyYmMwM2E4Zjc2ZmU5NTliOWNjZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-04-09T17:00:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-04-09T17:00:10Z"}, "message": "foldaddr-3.c: New file.\n\n\t* gcc.dg/tree-ssa/foldaddr-3.c: New file.\n\n\t* tree-ssa-ccp (maybe_fold_offset_to_component_ref): Recurse into\n\tmultiple fields of union.\n\nFrom-SVN: r123674", "tree": {"sha": "227546b12a4334149bbdfbb52ced391d41ec4f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227546b12a4334149bbdfbb52ced391d41ec4f21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/comments", "author": null, "committer": null, "parents": [{"sha": "ea798d0f6615f17ccad16d07536a8a1e7650405d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea798d0f6615f17ccad16d07536a8a1e7650405d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea798d0f6615f17ccad16d07536a8a1e7650405d"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "52134722695124fdba9c65f74c7a4d729a7d1b3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "patch": "@@ -1,3 +1,8 @@\n+2007-04-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-ccp (maybe_fold_offset_to_component_ref): Recurse into\n+\tmultiple fields of union.\n+\n 2007-04-09  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* cfgloopmanip.c (create_preheader): Do not use loop_preheader_edge."}, {"sha": "90550f2f762cecc219be8feb71ac1725177d94ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "patch": "@@ -1,3 +1,7 @@\n+2007-04-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/foldaddr-3.c: New file.\n+\n 2007-04-08  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/foldaddr-2.c: New file."}, {"sha": "b764187a029f335860e0cb826b9dcf3ee208e96d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldaddr-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-3.c?ref=6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+union a\n+{\n+  struct s1\n+  {\n+    long long a;\n+    long long b;\n+  } s1;\n+  struct s2\n+  {\n+    int c;\n+    int d;\n+  } s2;\n+  struct s3\n+  {\n+    unsigned long long e;\n+    unsigned long long f;\n+  } s3;\n+} a;\n+int *\n+t ()\n+{\n+  return (int *) &a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"a.s2.c\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8e4d88ca4574bb938cbfacbe17352018580aa6de", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "patch": "@@ -1648,6 +1648,8 @@ maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,\n \t\t\t\t    tree orig_type, bool base_is_ptr)\n {\n   tree f, t, field_type, tail_array_field, field_offset;\n+  tree ret;\n+  tree new_base;\n \n   if (TREE_CODE (record_type) != RECORD_TYPE\n       && TREE_CODE (record_type) != UNION_TYPE\n@@ -1719,8 +1721,20 @@ maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,\n \n       /* If we matched, then set offset to the displacement into\n \t this field.  */\n-      offset = t;\n-      goto found;\n+      if (base_is_ptr)\n+\tnew_base = build1 (INDIRECT_REF, record_type, base);\n+      else\n+\tnew_base = base;\n+      new_base = build3 (COMPONENT_REF, field_type, new_base, f, NULL_TREE);\n+\n+      /* Recurse to possibly find the match.  */\n+      ret = maybe_fold_offset_to_array_ref (new_base, t, orig_type);\n+      if (ret)\n+\treturn ret;\n+      ret = maybe_fold_offset_to_component_ref (field_type, new_base, t,\n+\t\t\t\t\t\torig_type, false);\n+      if (ret)\n+\treturn ret;\n     }\n \n   if (!tail_array_field)\n@@ -1730,7 +1744,6 @@ maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,\n   field_type = TREE_TYPE (f);\n   offset = int_const_binop (MINUS_EXPR, offset, byte_position (f), 1);\n \n- found:\n   /* If we get here, we've got an aggregate field, and a possibly \n      nonzero offset into them.  Recurse and hope for a valid match.  */\n   if (base_is_ptr)"}]}