{"sha": "88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmNTkyZTNmNDExN2U1ZGEzZGE4NGY5YmQyYjFkYThjNGJjOWE5OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-04-14T19:59:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-04-14T19:59:00Z"}, "message": "ipa-devirt.c (maybe_record_node): Ignore all non-methods (including cxa_pure_virtual).\n\n\n\t* ipa-devirt.c (maybe_record_node): Ignore all non-methods (including\n\tcxa_pure_virtual).\n\nFrom-SVN: r209391", "tree": {"sha": "14406a5b0a033e3277ab049f0f109dd8796fcf71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14406a5b0a033e3277ab049f0f109dd8796fcf71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99/comments", "author": null, "committer": null, "parents": [{"sha": "9dba4b5565efd56bcfadecc173ed66947492153e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dba4b5565efd56bcfadecc173ed66947492153e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dba4b5565efd56bcfadecc173ed66947492153e"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ca7dfb51d0e4df6ca40062a4bf11d520c8353650", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "patch": "@@ -1,3 +1,8 @@\n+2014-04-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (maybe_record_node): Ignore all non-methods (including\n+\tcxa_pure_virtual).\n+\n 2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* tree.h (TYPE_IDENTIFIER): Declare."}, {"sha": "3a5432e13c13fec7651c90ca1aaec6c4fdcda693", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=88f592e3f4117e5da3da84f9bd2b1da8c4bc9a99", "patch": "@@ -611,30 +611,32 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n \t\t   bool *completep)\n {\n   struct cgraph_node *target_node;\n-  enum built_in_function fcode;\n+\n+  /* cxa_pure_virtual and __builtin_unreachable do not need to be added into\n+     list of targets; the runtime effect of calling them is undefined.\n+     Only \"real\" virtual methods should be accounted.  */\n+  if (target && TREE_CODE (TREE_TYPE (target)) != METHOD_TYPE)\n+    return;\n \n   if (!can_refer)\n     {\n       /* The only case when method of anonymous namespace becomes unreferable\n \t is when we completely optimized it out.  */\n       if (flag_ltrans\n \t  || !target \n-          || !type_in_anonymous_namespace_p (DECL_CONTEXT (target)))\n+\t  || !type_in_anonymous_namespace_p (DECL_CONTEXT (target)))\n \t*completep = false;\n       return;\n     }\n \n-  if (!target\n-      /* Those are used to mark impossible scenarios.  */\n-      || (fcode = DECL_FUNCTION_CODE (target))\n-\t  == BUILT_IN_UNREACHABLE\n-      || fcode == BUILT_IN_TRAP)\n+  if (!target)\n     return;\n \n   target_node = cgraph_get_node (target);\n \n   if (target_node != NULL\n-      && (TREE_PUBLIC (target)\n+      && ((TREE_PUBLIC (target)\n+\t   || DECL_EXTERNAL (target))\n \t  || target_node->definition)\n       && symtab_real_symbol_p (target_node))\n     {"}]}