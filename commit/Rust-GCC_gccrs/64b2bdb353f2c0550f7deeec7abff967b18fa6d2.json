{"sha": "64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiMmJkYjM1M2YyYzA1NTBmN2RlZWVjN2FiZmY5NjdiMThmYTZkMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-05-29T00:16:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-05-29T00:16:05Z"}, "message": "re PR c++/21340 (error in constructor lookup (can't find constructor with \"const void**\" argument))\n\n\tPR c++/21340\n\t* method.c (implicitly_declare_fn): Clear processing_template_decl\n\twhen generating implicit declaration.\n\n\tPR c++/21340\n\t* g++.dg/init/ctor6.C: New test.\n\nFrom-SVN: r100306", "tree": {"sha": "33ff78e64cfd8923493efdc5cccd2b88af4a72ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ff78e64cfd8923493efdc5cccd2b88af4a72ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/comments", "author": null, "committer": null, "parents": [{"sha": "fd44f634fde1fee21b4ff2a77173d44184afe33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd44f634fde1fee21b4ff2a77173d44184afe33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd44f634fde1fee21b4ff2a77173d44184afe33b"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "59af6b18bde3e032396455915e630c4c9aabf14b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "patch": "@@ -1,3 +1,9 @@\n+2005-05-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21340\n+\t* method.c (implicitly_declare_fn): Clear processing_template_decl\n+\twhen generating implicit declaration.\n+\n 2005-05-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21614"}, {"sha": "843f414bb9b5a90464977a1dd140339317dc09b6", "filename": "gcc/cp/method.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "patch": "@@ -968,6 +968,19 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   tree raises = empty_except_spec;\n   tree rhs_parm_type = NULL_TREE;\n   tree name;\n+  HOST_WIDE_INT saved_processing_template_decl;\n+\n+  /* Because we create declarations for implictly declared functions\n+     lazily, we may be creating the declaration for a member of TYPE\n+     while in some completely different context.  However, TYPE will\n+     never be a dependent class (because we never want to do lookups\n+     for implicitly defined functions in a dependent class).\n+     Furthermore, we must set PROCESSING_TEMPLATE_DECL to zero here\n+     because we only create clones for constructors and destructors\n+     when not in a template.  */\n+  gcc_assert (!dependent_type_p (type));\n+  saved_processing_template_decl = processing_template_decl;\n+  processing_template_decl = 0;\n \n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -1066,6 +1079,9 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   DECL_INLINE (fn) = 1;\n   gcc_assert (!TREE_USED (fn));\n \n+  /* Restore PROCESSING_TEMPLATE_DECL.  */\n+  processing_template_decl = saved_processing_template_decl;\n+\n   return fn;\n }\n "}, {"sha": "a85e6b5d6b6ca29ab68fe7bb7c5236a35dd8990d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "patch": "@@ -1,3 +1,8 @@\n+2005-05-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21340\n+\t* g++.dg/init/ctor6.C: New test.\n+\n 2005-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/compile/pr21562.c: New."}, {"sha": "a25ecab1fa76f4aa53be163ac8de690536c493a0", "filename": "gcc/testsuite/g++.dg/init/ctor6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b2bdb353f2c0550f7deeec7abff967b18fa6d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor6.C?ref=64b2bdb353f2c0550f7deeec7abff967b18fa6d2", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/21340\n+\n+struct Base{};\n+struct Iterator : virtual Base {};\n+bool operator==(const Iterator&, const Iterator&);\n+struct IteratorI : Iterator {};\n+struct Obj\n+{\n+  bool operator==(const Obj&) const;\n+};\n+template <int>bool dummy()\n+{\n+  Obj lhs, rhs;\n+  return lhs == rhs;\n+}\n+int\n+main(int argc, char** argv)\n+{\n+  IteratorI* it2 = new IteratorI();\n+}"}]}