{"sha": "03943c05c123b301f978f2c5f56fc692a03586cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5NDNjMDVjMTIzYjMwMWY5NzhmMmM1ZjU2ZmM2OTJhMDM1ODZjYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-03-13T07:19:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-03-13T07:19:14Z"}, "message": "configure.ac: Test for assembler tolerance to # 0 \"\".\n\n* configure.ac: Test for assembler tolerance to # 0 \"\".\n* configure, config.in: Rebuilt.\n* final.c (final_scan_insn): Emit it if HAVE_AS_LINE_ZERO.\n\nFrom-SVN: r122879", "tree": {"sha": "a589b7305cf809c8177da753f9992003644b90a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a589b7305cf809c8177da753f9992003644b90a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03943c05c123b301f978f2c5f56fc692a03586cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03943c05c123b301f978f2c5f56fc692a03586cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03943c05c123b301f978f2c5f56fc692a03586cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03943c05c123b301f978f2c5f56fc692a03586cb/comments", "author": null, "committer": null, "parents": [{"sha": "98312a9bed2a80aa30c3cc2abc70f50def92d595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98312a9bed2a80aa30c3cc2abc70f50def92d595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98312a9bed2a80aa30c3cc2abc70f50def92d595"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "2006f4819338ec72fdc62fe1af15fd0d03b6774d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03943c05c123b301f978f2c5f56fc692a03586cb", "patch": "@@ -1,3 +1,9 @@\n+2007-03-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* configure.ac: Test for assembler tolerance to # 0 \"\".\n+\t* configure, config.in: Rebuilt.\n+\t* final.c (final_scan_insn): Emit it if HAVE_AS_LINE_ZERO.\n+\n 2007-03-13  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/invoke.texi (Spec Files): Update for '%{,' spec."}, {"sha": "9906ad71fdaa2b4c7e8c922b0d07f47bc4f4466f", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=03943c05c123b301f978f2c5f56fc692a03586cb", "patch": "@@ -240,6 +240,12 @@\n #endif\n \n \n+/* Define if the assembler won't complain about a line such as # 0 \"\" 2. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_LINE_ZERO\n+#endif\n+\n+\n /* Define if your assembler supports ltoffx and ldxmov relocations. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_LTOFFX_LDXMOV_RELOCS"}, {"sha": "488794bcd2508017150bd2e820897f59488be0f1", "filename": "gcc/configure", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=03943c05c123b301f978f2c5f56fc692a03586cb", "patch": "@@ -16005,6 +16005,46 @@ _ACEOF\n fi\n fi\n \n+echo \"$as_me:$LINENO: checking assembler for tolerance to line number 0\" >&5\n+echo $ECHO_N \"checking assembler for tolerance to line number 0... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_line_zero+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_line_zero=no\n+  if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( elf,2,16,91 \\* 1000 \\) + gcc_cv_as_line_zero=yes \\) \\* 1000 + `\n+  then :\n+fi\n+  elif test \"x$gcc_cv_as\" != x; then\n+    { echo '# 1 \"test.s\" 1'; echo '# 0 \"\" 2'; } > conftest.s\n+    if { ac_try='$gcc_cv_as -o conftest.o conftest.s >&5 2>conftest.out'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+       test \"x`cat conftest.out`\" = x\n+    then\n+      gcc_cv_as_line_zero=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+      echo \"configure: error output was\" >&5\n+      cat conftest.out >&5\n+    fi\n+    rm -f conftest.o conftest.s conftest.out\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_line_zero\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_line_zero\" >&6\n+if test \"x$gcc_cv_as_line_zero\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_LINE_ZERO 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking linker read-only and read-write section mixing\" >&5\n echo $ECHO_N \"checking linker read-only and read-write section mixing... $ECHO_C\" >&6\n gcc_cv_ld_ro_rw_mix=unknown"}, {"sha": "768cff05208f07eae492afb36c3e380367df740f", "filename": "gcc/configure.ac", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=03943c05c123b301f978f2c5f56fc692a03586cb", "patch": "@@ -3069,6 +3069,30 @@ if test x\"$insn\" != x; then\n [Define if your assembler supports the --gstabs option.])])\n fi\n \n+AC_CACHE_CHECK([assembler for tolerance to line number 0],\n+ [gcc_cv_as_line_zero],\n+ [gcc_cv_as_line_zero=no\n+  if test $in_tree_gas = yes; then\n+    gcc_GAS_VERSION_GTE_IFELSE([elf,2,16,91], [gcc_cv_as_line_zero=yes])\n+  elif test \"x$gcc_cv_as\" != x; then\n+    { echo '# 1 \"test.s\" 1'; echo '# 0 \"\" 2'; } > conftest.s\n+    if AC_TRY_COMMAND([$gcc_cv_as -o conftest.o conftest.s >&AS_MESSAGE_LOG_FD 2>conftest.out]) &&\n+       test \"x`cat conftest.out`\" = x\n+    then\n+      gcc_cv_as_line_zero=yes\n+    else\n+      echo \"configure: failed program was\" >&AS_MESSAGE_LOG_FD\n+      cat conftest.s >&AS_MESSAGE_LOG_FD\n+      echo \"configure: error output was\" >&AS_MESSAGE_LOG_FD\n+      cat conftest.out >&AS_MESSAGE_LOG_FD\n+    fi\n+    rm -f conftest.o conftest.s conftest.out\n+  fi])\n+if test \"x$gcc_cv_as_line_zero\" = xyes; then\n+  AC_DEFINE([HAVE_AS_LINE_ZERO], 1,\n+[Define if the assembler won't complain about a line such as # 0 \"\" 2.])\n+fi\n+\n AC_MSG_CHECKING(linker read-only and read-write section mixing)\n gcc_cv_ld_ro_rw_mix=unknown\n if test $in_tree_ld = yes ; then"}, {"sha": "93112ec808baec40bfaa5d3f1d633f096d3d12cd", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943c05c123b301f978f2c5f56fc692a03586cb/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=03943c05c123b301f978f2c5f56fc692a03586cb", "patch": "@@ -2085,8 +2085,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n \t\t\t   ASM_COMMENT_START, loc.line, loc.file);\n \t\tfprintf (asm_out_file, \"\\t%s\\n\", string);\n-\t\tif (loc.file && loc.line)\n+#if HAVE_AS_LINE_ZERO\n+\t\tif (*loc.file && loc.line)\n \t\t  fprintf (asm_out_file, \"%s 0 \\\"\\\" 2\\n\", ASM_COMMENT_START);\n+#endif\n \t      }\n \t    break;\n \t  }\n@@ -2124,8 +2126,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n \t\t\t   ASM_COMMENT_START, loc.line, loc.file);\n \t        output_asm_insn (string, ops);\n+#if HAVE_AS_LINE_ZERO\n \t\tif (loc.file && loc.line)\n \t\t  fprintf (asm_out_file, \"%s 0 \\\"\\\" 2\\n\", ASM_COMMENT_START);\n+#endif\n \t      }\n \n \t    this_is_asm_operands = 0;"}]}