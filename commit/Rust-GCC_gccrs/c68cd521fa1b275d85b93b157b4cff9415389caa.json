{"sha": "c68cd521fa1b275d85b93b157b4cff9415389caa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4Y2Q1MjFmYTFiMjc1ZDg1YjkzYjE1N2I0Y2ZmOTQxNTM4OWNhYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-01-14T19:04:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-01-14T19:04:15Z"}, "message": "2002-01-14  Paolo Carlini  <pcarlini@unitus.it>\n\t    Nathan Myers  <ncm@cantrip.org>\n\n\t* include/bits/basic_string.h\n\t(replace(__pos, __n1, __s, __n2)): Optimize by avoiding\n\ttemporaries (i.e., call _M_replace_safe) when possible.\n\t(replace(__pos, __n, __str)): Call replace(__pos, __n1, __s, __n2).\n\t(replace(__pos, __n1, __s)): Call replace(__pos, __n1, __s , __n2).\n\t(replace(__i1, __i2, __str)): Call replace(__i1, __i2, __s, __n).\n\t(replace(__i1, __i2, __s)): Call replace(__i1, __i2, __s, __n).\n\t(replace(__i1, __i2, __s, __n)): Call replace(__pos1, __n1, __s, __n2).\n\t* include/bits/basic_string.tcc\n\t(replace(__pos1, __n1, __str, __pos2, __n2)): Call\n\treplace(__pos, __n1, __s, __n2).\n\t* testsuite/21_strings/replace.cc (test03): New testcases.\n\n\t* include/bits/basic_string.h (insert(__pos, __s, __n)):\n\tAdjust comparison wrt overflow.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r48834", "tree": {"sha": "caa42f7b432dd4506dde01e7d8c7e1563d243029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caa42f7b432dd4506dde01e7d8c7e1563d243029"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c68cd521fa1b275d85b93b157b4cff9415389caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68cd521fa1b275d85b93b157b4cff9415389caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68cd521fa1b275d85b93b157b4cff9415389caa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68cd521fa1b275d85b93b157b4cff9415389caa/comments", "author": null, "committer": null, "parents": [{"sha": "9f37ccb1946e0333e03cf6bcecad46e410a7158b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37ccb1946e0333e03cf6bcecad46e410a7158b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f37ccb1946e0333e03cf6bcecad46e410a7158b"}], "stats": {"total": 119, "additions": 95, "deletions": 24}, "files": [{"sha": "ecd575702a0644d581b16b72b3ae6d226ccc5a31", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c68cd521fa1b275d85b93b157b4cff9415389caa", "patch": "@@ -1,3 +1,22 @@\n+2002-01-14  Paolo Carlini  <pcarlini@unitus.it>\n+\t    Nathan Myers  <ncm@cantrip.org>\n+\n+\t* include/bits/basic_string.h\n+\t(replace(__pos, __n1, __s, __n2)): Optimize by avoiding\n+\ttemporaries (i.e., call _M_replace_safe) when possible.\n+\t(replace(__pos, __n, __str)): Call replace(__pos, __n1, __s, __n2).\n+\t(replace(__pos, __n1, __s)): Call replace(__pos, __n1, __s , __n2).\n+\t(replace(__i1, __i2, __str)): Call replace(__i1, __i2, __s, __n).\n+\t(replace(__i1, __i2, __s)): Call replace(__i1, __i2, __s, __n).\n+\t(replace(__i1, __i2, __s, __n)): Call replace(__pos1, __n1, __s, __n2).\n+\t* include/bits/basic_string.tcc\n+\t(replace(__pos1, __n1, __str, __pos2, __n2)): Call\n+\treplace(__pos, __n1, __s, __n2).\n+\t* testsuite/21_strings/replace.cc (test03): New testcases.\n+\n+\t* include/bits/basic_string.h (insert(__pos, __s, __n)):\n+\tAdjust comparison wrt overflow.\n+\t\n 2002-01-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (std_headers_rename): New variable."}, {"sha": "5756e9eac44bafb6934f583fba0485ccd18b6ad5", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=c68cd521fa1b275d85b93b157b4cff9415389caa", "patch": "@@ -1,6 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -551,7 +552,7 @@ namespace std\n \tconst size_type __size = this->size();\n  \tif (__pos > __size)\n \t  __throw_out_of_range(\"basic_string::insert\");\n-\tif (__n + __size > this->max_size())\n+\tif (__size > this->max_size() - __n)\n \t  __throw_length_error(\"basic_string::insert\");\n \tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t    || less<const _CharT*>()(_M_data() + __size, __s))\n@@ -626,10 +627,7 @@ namespace std\n \n       basic_string& \n       replace(size_type __pos, size_type __n, const basic_string& __str)\n-      { \n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n),\n-\t\t\t      __str.begin(), __str.end()); \n-      }\n+      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n \n       basic_string& \n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n@@ -639,36 +637,41 @@ namespace std\n       replace(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2)\n       { \n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n1),\n-\t\t\t     __s, __s + __n2); \n+\tconst size_type __size = this->size();\n+ \tif (__pos > __size)\n+\t  __throw_out_of_range(\"basic_string::replace\");\n+\tif (__size - __n1 > this->max_size() - __n2)\n+\t  __throw_length_error(\"basic_string::replace\");\n+\tconst bool __testn1 = __n1 < __size - __pos;\n+\tconst size_type __foldn1 = __testn1 ? __n1 : __size - __pos;\n+\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+\t    || less<const _CharT*>()(_M_data() + __size, __s))\n+\t  return _M_replace_safe(_M_ibegin() + __pos,\n+\t\t\t\t _M_ibegin() + __pos + __foldn1, __s, __s + __n2);\t\n+\telse return this->replace(_M_check(__pos), _M_fold(__pos, __n1),\n+\t\t\t\t  __s, __s + __n2); \n       }\n \n       basic_string& \n       replace(size_type __pos, size_type __n1, const _CharT* __s)\n-      { \n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n1),\n-\t\t\t     __s, __s + traits_type::length(__s)); \n-      }\n+      { return this->replace(__pos, __n1, __s, traits_type::length(__s)); }\n \n       basic_string& \n       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n-      { \n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n1), __n2, __c);\n-      }\n+      { return this->replace(_M_check(__pos), _M_fold(__pos, __n1), __n2, __c); }\n \n       basic_string& \n       replace(iterator __i1, iterator __i2, const basic_string& __str)\n-      { return this->replace(__i1, __i2, __str.begin(), __str.end()); }\n+      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n \n       basic_string& \n       replace(iterator __i1, iterator __i2,\n                            const _CharT* __s, size_type __n)\n-      { return this->replace(__i1, __i2, __s, __s + __n); }\n+      { return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n); }\n \n       basic_string& \n       replace(iterator __i1, iterator __i2, const _CharT* __s)\n-      { return this->replace(__i1, __i2, __s, \n-\t\t\t     __s + traits_type::length(__s)); }\n+      { return this->replace(__i1, __i2, __s, traits_type::length(__s)); }\n \n       basic_string& \n       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c);"}, {"sha": "b57c7f642f998b5e3791259c6b56c4a3af2bb451", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=c68cd521fa1b275d85b93b157b4cff9415389caa", "patch": "@@ -1,6 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -543,9 +544,13 @@ namespace std\n     replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2)\n     {\n-      return this->replace(_M_check(__pos1), _M_fold(__pos1, __n1),\n-\t\t\t   __str._M_check(__pos2), \n-\t\t\t   __str._M_fold(__pos2, __n2));      \n+      const size_type __strsize = __str.size();\n+      if (__pos2 > __strsize)\n+\t__throw_out_of_range(\"basic_string::replace\");\n+      const bool __testn2 = __n2 < __strsize - __pos2;\n+      const size_type __foldn2 = __testn2 ? __n2 : __strsize - __pos2;\n+      return this->replace(__pos1, __n1,\n+\t\t\t   __str._M_data() + __pos2, __foldn2);      \n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "aeaba190ecc5104b414f4b8a041a771a603feb2b", "filename": "libstdc++-v3/testsuite/21_strings/replace.cc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68cd521fa1b275d85b93b157b4cff9415389caa/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc?ref=c68cd521fa1b275d85b93b157b4cff9415389caa", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-10 bkoz\n \n-// Copyright (C) 1994, 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -96,9 +96,53 @@ test02()\n   VERIFY(aux == \"../the lone long pier/Hanr/Hanalei Bay/Kauai/Hawaii\");\n }\n \n+// Some more miscellaneous tests\n+void\n+test03()\n+{\n+  const char* title01 = \"nine types of ambiguity\";\n+  const char* title02 = \"ultra\";\n+  std::string str01 = title01;\n+  std::string str02 = title02;\n+\n+  str01.replace(0, 4, str02);\n+  VERIFY(str01 == \"ultra types of ambiguity\");\n+\n+  str01.replace(15, 9, str02, 2, 2);\n+  VERIFY(str01 == \"ultra types of tr\");\n+\n+  str01 = title01;\n+  str02.replace(0, 0, str01, 0, std::string::npos);\n+  VERIFY(str02 == \"nine types of ambiguityultra\");\n+\n+  str02.replace(11, 2, title02, 5);\n+  VERIFY(str02 == \"nine types ultra ambiguityultra\");\n+\n+  str02.replace(11, 5, title01, 2);\n+  VERIFY(str02 == \"nine types ni ambiguityultra\");\n+\n+  str01.replace(str01.size(), 0, title02);\n+  VERIFY(str01 == \"nine types of ambiguityultra\");\n+  \n+  str01 = title01;\n+  str02 = title02;\n+  str01.replace(str01.begin(), str01.end(), str02);\n+  VERIFY(str01 == \"ultra\");\n+\n+  str01.replace(str01.begin(), str01.begin(), title01, 4);\n+  VERIFY(str01 == \"nineultra\");\n+\n+  str01.replace(str01.end(), str01.end(), title01 + 5, 5);\n+  VERIFY(str01 == \"nineultratypes\");\n+  \n+  str01.replace(str01.begin(), str01.end(), title02);\n+  VERIFY(str01 == \"ultra\");\n+}\n+\n int main()\n { \n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}]}