{"sha": "92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4ODZkM2U4NmNiN2IyZjgzY2ZjOTcyNGNiNTI3YWI4MDMyYWVkOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-13T00:06:51Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-13T00:06:51Z"}, "message": "Fix PR c++/70610 (wrong overload resolution during template processing)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/70610\n\t* tree.c (lvalue_kind) [NON_DEPENDENT_EXPR]: Unconditionally\n\trecurse into it.\n\t* typeck.c (build_x_conditional_expr): Unconditionally remember\n\tthat the result is an lvalue or xvalue.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/70610\n\t* g++.dg/template/pr70610.C: New test.\n\t* g++.dg/template/pr70610-2.C: New test.\n\t* g++.dg/template/pr70610-3.C: New test.\n\t* g++.dg/template/pr70610-4.C: New test.\n\nFrom-SVN: r234926", "tree": {"sha": "2c6544cbcec2e437adb45867ccd31332d79effc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6544cbcec2e437adb45867ccd31332d79effc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/comments", "author": null, "committer": null, "parents": [{"sha": "d90936ff88545c9312a0137725a9b1ab0919ad48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90936ff88545c9312a0137725a9b1ab0919ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90936ff88545c9312a0137725a9b1ab0919ad48"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "5696eea0e7eba5e1f0c808e6665fd4e5eccbedf4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -1,3 +1,11 @@\n+2016-04-12  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70610\n+\t* tree.c (lvalue_kind) [NON_DEPENDENT_EXPR]: Unconditionally\n+\trecurse into it.\n+\t* typeck.c (build_x_conditional_expr): Unconditionally remember\n+\tthat the result is an lvalue or xvalue.\n+\n 2016-04-12  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (is_really_empty_class): A zero-length array is empty."}, {"sha": "df2981fd3f4279e52de8b247642a401738da89bd", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -224,13 +224,7 @@ lvalue_kind (const_tree ref)\n       return lvalue_kind (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n \n     case NON_DEPENDENT_EXPR:\n-      /* We just return clk_ordinary for NON_DEPENDENT_EXPR in C++98, but\n-\t in C++11 lvalues don't bind to rvalue references, so we need to\n-\t work harder to avoid bogus errors (c++/44870).  */\n-      if (cxx_dialect < cxx11)\n-\treturn clk_ordinary;\n-      else\n-\treturn lvalue_kind (TREE_OPERAND (ref, 0));\n+      return lvalue_kind (TREE_OPERAND (ref, 0));\n \n     default:\n       if (!TREE_TYPE (ref))"}, {"sha": "cef5604bd0b478255f02e3a5eb15c63effd3e68f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -6275,10 +6275,8 @@ build_x_conditional_expr (location_t loc, tree ifexp, tree op1, tree op2,\n     {\n       tree min = build_min_non_dep (COND_EXPR, expr,\n \t\t\t\t    orig_ifexp, orig_op1, orig_op2);\n-      /* In C++11, remember that the result is an lvalue or xvalue.\n-         In C++98, lvalue_kind can just assume lvalue in a template.  */\n-      if (cxx_dialect >= cxx11\n-\t  && lvalue_or_rvalue_with_address_p (expr)\n+      /* Remember that the result is an lvalue or xvalue.  */\n+      if (lvalue_or_rvalue_with_address_p (expr)\n \t  && !lvalue_or_rvalue_with_address_p (min))\n \tTREE_TYPE (min) = cp_build_reference_type (TREE_TYPE (min),\n \t\t\t\t\t\t   !real_lvalue_p (expr));"}, {"sha": "75c4fa810ccb270de0899f50213928b0f3d0f65d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -1,3 +1,11 @@\n+2016-04-12  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70610\n+\t* g++.dg/template/pr70610.C: New test.\n+\t* g++.dg/template/pr70610-2.C: New test.\n+\t* g++.dg/template/pr70610-3.C: New test.\n+\t* g++.dg/template/pr70610-4.C: New test.\n+\n 2016-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/cilk-plus/SE/ef_error2.c (func2): Use vectorlength"}, {"sha": "3368a5e5d89259ca00c6c172e75f86f3de009c7f", "filename": "gcc/testsuite/g++.dg/template/pr70610-2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-2.C?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/70610\n+// { dg-do link }\n+\n+struct A { };\n+\n+void operator+ (const A &, A &);\n+void operator+ (A &, const A &);\n+void operator+ (const A &, const A &) { }\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  A () + A ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}, {"sha": "4be458cca59a284b45618a4aa5c717a5f8e2cade", "filename": "gcc/testsuite/g++.dg/template/pr70610-3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-3.C?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/70610\n+// { dg-do link }\n+\n+void bar (const int &, int &);\n+void bar (int &, const int &);\n+void bar (const int &, const int &) { }\n+\n+int a, b;\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  bar (a + 1, b + 2);\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}, {"sha": "127abdc44e36f410b50ef309999e25a3c3372945", "filename": "gcc/testsuite/g++.dg/template/pr70610-4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610-4.C?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/70610\n+// { dg-do link }\n+\n+struct A { void operator+ (const A &) { }; };\n+\n+void operator+ (const A &, A &);\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  A () + A ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}, {"sha": "c7dde1c5cec266d6ca44283f8ac22217a8623613", "filename": "gcc/testsuite/g++.dg/template/pr70610.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92886d3e86cb7b2f83cfc9724cb527ab8032aed8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr70610.C?ref=92886d3e86cb7b2f83cfc9724cb527ab8032aed8", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/70610\n+// { dg-do link }\n+\n+struct A { };\n+\n+void operator+ (A &);\n+void operator+ (const A &) { }\n+\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  +A ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}]}