{"sha": "edc676cfe8988c62c81b0df224c7fe82583012b1", "node_id": "C_kwDOANBUbNoAKGVkYzY3NmNmZTg5ODhjNjJjODFiMGRmMjI0YzdmZTgyNTgzMDEyYjE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:45:19Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:08Z"}, "message": "gccrs: Add README, CONTRIBUTING and compiler logo\n\nWe still need to write out a documentation section, but these READMEs will\nhelp in the meantime.\n\n\tgcc/rust/\n\t* CONTRIBUTING.md: New.\n\t* README.md: New.\n\t* logo.png: New.", "tree": {"sha": "f3331056fd43ea89ff5836b1d178fe9807a37ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3331056fd43ea89ff5836b1d178fe9807a37ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edc676cfe8988c62c81b0df224c7fe82583012b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc676cfe8988c62c81b0df224c7fe82583012b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc676cfe8988c62c81b0df224c7fe82583012b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc676cfe8988c62c81b0df224c7fe82583012b1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a75f038c069cc3a23b214854bedf04321fe88bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f038c069cc3a23b214854bedf04321fe88bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75f038c069cc3a23b214854bedf04321fe88bc5"}], "stats": {"total": 394, "additions": 394, "deletions": 0}, "files": [{"sha": "75812a657a30cc54cfe03b92abeb24e044002926", "filename": "gcc/rust/CONTRIBUTING.md", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2FCONTRIBUTING.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FCONTRIBUTING.md?ref=edc676cfe8988c62c81b0df224c7fe82583012b1", "patch": "@@ -0,0 +1,130 @@\n+## How to contribute to GCC Rust\n+\n+#### **Did you find a bug?**\n+\n+* **Ensure the bug was not already reported** by searching on GitHub under [Issues](https://github.com/Rust-GCC/gccrs/issues).\n+\n+* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/Rust-GCC/gccrs/issues/new).\n+  Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample**\n+  or an **executable test case** demonstrating the expected behavior that is not occurring.\n+\n+#### **Do you want to submit a patch?**\n+\n+* Open a new GitHub pull request with the patch.\n+\n+* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n+\n+* Before submitting, GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off.\n+   Please see the [Contributing to GCC](https://gcc.gnu.org/contribute.html) guide or [Developer's Certificate of Origin (DCO) Sign-off](https://gcc.gnu.org/dco.html) guide.\n+\n+* Patches sent to the [`gcc-rust` mailing list](https://gcc.gnu.org/mailman/listinfo/gcc-rust) are likewise welcome.\n+These will be imported into a GitHub PR to follow the normal review process,\n+and the link to the GitHub PR sent to the submitter.\n+\n+#### **Do you intend to add a new feature or change an existing one?**\n+\n+* Suggest your change in the [Zulip](https://gcc-rust.zulipchat.com/) and start writing code.\n+\n+* Do not open an issue on GitHub until you have collected positive feedback about the change.\n+  GitHub issues are primarily intended for bug reports and fixes.\n+\n+#### **Do you have questions about the source code?**\n+\n+* Ask any question about how to use GCCRS in [Zulip](https://gcc-rust.zulipchat.com/).\n+\n+### **PR Policy**\n+\n+* The PR policy: Everything has to go through a PR\n+  - An exception to this rule will be the merge commits of updating the repo against upstream GCC\n+\n+* Reviewers/Maintainers of the project (aka people who have bors rights) should be pinged for reviews/questions.\n+\n+* A PR can have one or several commits (split should have a technical/logical reason, ie. no fixup-ish commit)\n+\n+* Avoid PR's with merge commit unless there's a good reason\n+\n+* Where possible please add test cases to `gcc/testsuite/rust/` for all PRs.\n+  Some issues may not be testable via dejagnu/automation such as debug dump changes.\n+\n+* Follow the [GCC coding style](https://gcc.gnu.org/codingconventions.html) (see `clang-format` below).\n+\n+* PRs won't be merged until the build and tests pass.\n+\n+* Please take the time to create good git commit messages.\n+  See the existing format of them in the git log or refer to something like: https://chris.beams.io/posts/git-commit/\n+\n+#### Running `clang-format` locally\n+\n+* on all files using python scripts\n+... corresponding to what the _Clang Format Lint_ (`.github/workflows/clang-format.yml`)\n+is doing, with `clang-format-10` being available locally, and avoiding the Docker overhead.\n+\n+```shell\n+$ wget 'https://github.com/DoozyX/clang-format-lint-action/raw/v0.11/run-clang-format.py'\n+$ cp contrib/clang-format .clang-format\n+$ python3 run-clang-format.py --clang-format-executable clang-format-10 --recursive --extensions h,cc gcc/rust/\n+```\n+\n+* on a given patch using python scripts\n+See the [clang-format documentation](https://clang.llvm.org/docs/ClangFormat.html#script-for-patch-reformatting) :\n+\n+    $ git diff -U0 --no-color HEAD^ | clang-format-diff.py -i -p1\n+\n+* using `git` interface\n+\n+At least on Debian and its derivative, each `clang-format` packages also comes\n+with `git-clang-format` command that can be used easily. It applies on staged\n+changes, and any modification can be seen as unstaged changes:\n+\n+```diff\n+$ git diff --cached\n+diff --git a/gcc/rust/rust-abi.h b/gcc/rust/rust-abi.h\n+index bd3043295ce..9559374ce60 100644\n+--- a/gcc/rust/rust-abi.h\n++++ b/gcc/rust/rust-abi.h\n+@@ -22,10 +22,10 @@ namespace Rust {\n+ enum ABI\n+ {\n+   UNKNOWN,\n+-  RUST,\n++     RUST,\n+   INTRINSIC,\n+   C,\n+-  CDECL,\n++     CDECL,\n+   STDCALL,\n+   FASTCALL,\n+ };\n+\n+gccrs/gcc/rust on \ue0a0 dkm/clang_format [$!+?]\n+\u276f git clang-format\n+changed files:\n+    gcc/rust/rust-abi.h\n+\n+gccrs/gcc/rust on \ue0a0 dkm/clang_format [$!+?]\n+$ git diff rust-abi.h\n+diff --git a/gcc/rust/rust-abi.h b/gcc/rust/rust-abi.h\n+index 9559374ce60..bd3043295ce 100644\n+--- a/gcc/rust/rust-abi.h\n++++ b/gcc/rust/rust-abi.h\n+@@ -22,10 +22,10 @@ namespace Rust {\n+ enum ABI\n+ {\n+   UNKNOWN,\n+-     RUST,\n++  RUST,\n+   INTRINSIC,\n+   C,\n+-     CDECL,\n++  CDECL,\n+   STDCALL,\n+   FASTCALL,\n+ };\n+```\n+\n+Also note that you can use a given version of `clang-format` by using `git clang-format-10` if you have\n+installed that particular version.\n+\n+Thanks! :heart: :heart: :heart:\n+\n+GCCRS Team"}, {"sha": "1f76bba9f5f07304f3b2887625e566ff1a056439", "filename": "gcc/rust/README.md", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2FREADME.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2FREADME.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FREADME.md?ref=edc676cfe8988c62c81b0df224c7fe82583012b1", "patch": "@@ -0,0 +1,264 @@\n+![C/C++ CI](https://github.com/Rust-GCC/gccrs/workflows/C/C++%20CI/badge.svg)\n+[![GCC Bootstrap Build](https://github.com/Rust-GCC/gccrs/actions/workflows/bootstrap.yml/badge.svg)](https://github.com/Rust-GCC/gccrs/actions/workflows/bootstrap.yml)\n+[![Build Docker image](https://github.com/Rust-GCC/gccrs/actions/workflows/docker.yml/badge.svg)](https://github.com/Rust-GCC/gccrs/actions/workflows/docker.yml)\n+![Docker Pulls](https://img.shields.io/docker/pulls/philberty/gccrs)\n+[![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://gcc-rust.zulipchat.com/)\n+[![Bors enabled](https://bors.tech/images/badge_small.svg)](https://app.bors.tech/repositories/32890)\n+# GCC Rust\n+![GCC Rust](logo.png?raw=true \"GCC rust Logo\")\n+\n+Please note, the compiler is in a very early stage and not usable yet for compiling real Rust programs.\n+\n+gccrs is a full alternative implementation of the Rust language ontop of GCC with the goal\n+to become fully upstream with the GNU toolchain.\n+\n+The origin of this project was a community effort several years ago where Rust was still at version 0.9;\n+the language was subject to so much change that it became difficult for a community effort to play catch up.\n+Now that the language is stable, it is an excellent time to create alternative compilers. The developers of\n+the project are keen \u201cRustaceans\u201d with a desire to give back to the Rust community and to learn what GCC is capable\n+of when it comes to a modern language.\n+\n+## Build Farm Status\n+\n+- [Debian i386](https://builder.sourceware.org/buildbot/#/builders/gccrust-debian-i386) [![Debian i386](https://builder.sourceware.org/buildbot/badges/gccrust-debian-i386.svg)](https://builder.sourceware.org/buildbot/#/builders/gccrust-debian-i386)\n+- [Debian ppc64](https://builder.sourceware.org/buildbot/#/builders/gccrust-debian-ppc64) [![Debian ppc64](https://builder.sourceware.org/buildbot/badges/gccrust-debian-ppc64.svg)](https://builder.sourceware.org/buildbot/#/builders/gccrust-debian-ppc64)\n+- [Debian testing-x86_64](https://builder.sourceware.org/buildbot/#/builders/146) [![Debian testing-x86_64](https://builder.sourceware.org/buildbot/badges/gccrust-debian-testing-x86_64.svg)](https://builder.sourceware.org/buildbot/#/builders/146)\n+- [Fedora arm64](https://builder.sourceware.org/buildbot/#/builders/179) [![Fedora arm64](https://builder.sourceware.org/buildbot/badges/gccrust-fedora-arm64.svg)](https://builder.sourceware.org/buildbot/#/builders/179)\n+- [Fedora ppc64le](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-ppc64le) [![Fedora ppc64le](https://builder.sourceware.org/buildbot/badges/gccrust-fedora-ppc64le.svg)](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-ppc64le)\n+- [Fedora s390x](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-s390x) [![Fedora s390x](https://builder.sourceware.org/buildbot/badges/gccrust-fedora-s390x.svg)](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-s390x)\n+- [Fedora X86_64](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-x86_64) [![Fedora X86-64](https://builder.sourceware.org/buildbot/badges/gccrust-fedora-x86_64.svg)](https://builder.sourceware.org/buildbot/#/builders/gccrust-fedora-x86_64)\n+- [OpenSUSE Leap X86_64](https://builder.sourceware.org/buildbot/#/builders/104) [![OpenSUSE Leap X86_64](https://builder.sourceware.org/buildbot/badges/gccrust-opensuseleap-x86_64.svg)](https://builder.sourceware.org/buildbot/#/builders/104)\n+- [OpenSUSE tw X86_64](https://builder.sourceware.org/buildbot/#/builders/103) [![OpenSUSE tw X86_64](https://builder.sourceware.org/buildbot/badges/gccrust-opensusetw-x86_64.svg)](https://builder.sourceware.org/buildbot/#/builders/103)\n+- [Rawhide X86_64](https://builder.sourceware.org/buildbot/#/builders/132) [![Rawhide X86_64](https://builder.sourceware.org/buildbot/badges/gccrust-rawhide-x86_64.svg)](https://builder.sourceware.org/buildbot/#/builders/132)\n+\n+## FAQ\n+\n+Please find the answers to frequently asked questions over on: https://github.com/Rust-GCC/gccrs/wiki/Frequently-Asked-Questions\n+\n+## Development Environment\n+\n+### Building\n+\n+Fetch dependencies for Ubuntu:\n+\n+```bash\n+$ apt install build-essential libgmp3-dev libmpfr-dev libmpc-dev flex bison autogen gcc-multilib dejagnu\n+```\n+\n+Clone the repository\n+\n+```bash\n+$ git clone https://github.com/Rust-GCC/gccrs\n+```\n+\n+#### Linux\n+\n+It is important to remember that GNU toolchain projects are designed to be built outside of their source directory\n+which is why a build directory is created.\n+\n+```bash\n+$ mkdir gccrs-build\n+$ cd gccrs-build\n+$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust\n+$ make\n+```\n+\n+#### MacOS\n+\n+The path of header dir and sysroot should be specified when you configure the project.\n+```bash\n+$ mkdir mac-build\n+$ cd mac-build\n+$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\n+$ make\n+\n+```\n+\n+#### Running GCC Rust\n+\n+Running the compiler itself without make install we can simply invoke the compiler proper:\n+\n+```bash\n+$ ./gcc/rust1 test.rs -frust-debug -frust-dump-parse -Warray-bounds -dumpbase test.rs -mtune=generic -march=x86-64 -O0 -version -fdump-tree-gimple -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib64\n+```\n+\n+To invoke the compiler driver (gccrs) we need to:\n+\n+```bash\n+$ make install\n+```\n+\n+Then invoke the compiler from the installation directory:\n+\n+```bash\n+$ $HOME/gccrs-install/gccrs -g -O2 -c test.rs -o test.o\n+$ $HOME/gccrs-install/gccrs -o test test.o\n+```\n+\n+You can also setup your shell to automatically find the installed compiler. For example for `bash`,\n+add the following in your `$HOME/.bashrc`:\n+\n+```bash\n+export PATH=$HOME/gccrs-install/bin:$PATH\n+\n+```\n+\n+## Testsuite\n+\n+Invoke the full testsuite from the build directory (`gccrs-build` in the previous commands):\n+\n+```bash\n+$ make check-rust\n+```\n+\n+Invoke a subset of the testsuite. For example, to only run tests that are currently known/expected to fail:\n+\n+```bash\n+$ make check-rust RUNTESTFLAGS=\"xfail.exp\"\n+```\n+There are the following sets of tests:\n+- `compile.exp` : compilation tests\n+- `execute.exp` : execution tests\n+- `xfail.exp` : tests that are currently known/expected to fail\n+\n+Invoke only a specific test :\n+\n+```bash\n+$ make check-rust RUNTESTFLAGS=\"--all compile.exp=continue1.rs\"\n+```\n+\n+Logs (with corresponding commands) can be found in : `gccrs-build/gcc/testsuite/rust/rust.log`.\n+\n+See [GCC Testing documentation](https://gcc.gnu.org/install/test.html) for more details.\n+\n+Test cases are located within [`gcc/testsuite/rust/`](gcc/testsuite/rust/).\n+Please contribute your specific\n+test cases referencing any issues on Github.\n+\n+## Debugging\n+\n+### Enabling internal checks\n+\n+GCC has several internal checks that can be enabled during configuration. In the case of `gccrs`,\n+you can enable the following:\n+```bash\n+$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --enable-checking=gimple,tree,types\n+```\n+\n+### GDB\n+You can directly invoke `gdb` on the `rust1` compiler process (you can find the\n+exact command adding `--verbose` to your `gccrs` invocation):\n+```bash\n+$ gccrs test.rs -O0 -S -o arithmetic_expressions1.s --verbose\n+...\n+ /some/path/../../rust1 test.rs -quiet -dumpbase arithmetic_expressions1.rs -dumpbase-ext .rs\n+ -mtune=generic -march=x86-64 -O0 -w -version -fdiagnostics-color=never -fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-urls=never -fdiagnostics-path-format=separate-events -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu\n+...\n+$ gdb --args  /some/path/../../rust1 test.rs -quiet -dumpbase arithmetic_expressions1.rs -dumpbase-ext .rs\n+ -mtune=generic -march=x86-64 -O0 -w -version -fdiagnostics-color=never -fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-urls=never -fdiagnostics-path-format=separate-events -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu\n+```\n+\n+Or simply add the `-wrapper gdb,--args` option.\n+This will call each subcommand in `gdb` and you simply have to break/debug in `rust1`:\n+```bash\n+$ gccrs test.rs -O0 -S -o arithmetic_expressions1.s -wrapper gdb,--args\n+```\n+\n+## Docker image\n+\n+There is a docker image hosted over on:\n+\n+https://hub.docker.com/repository/docker/philberty/gccrs\n+\n+```bash\n+$ docker pull philberty/gccrs\n+```\n+\n+Or you can build your own image:\n+\n+```bash\n+$ docker build . -t gccrs-dev\n+```\n+If you want to build an object file:\n+\n+```bash\n+$ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n+    gccrs-dev:latest gccrs -g -O2 -c \\\n+    gcc/testsuite/rust/compile/torture/type_infer1.rs -o type_infer1.o\n+```\n+\n+If you want to build an executable file:\n+```bash\n+$ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n+    gccrs-dev:latest gccrs -g -O2 \\\n+    gcc/testsuite/rust/compile/torture/type_infer1.rs -o type_infer1\n+```\n+\n+To emit assembly :\n+```bash\n+$ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n+    gccrs-dev:latest gccrs -g -O2 \\\n+    gcc/testsuite/rust/compile/torture/type_infer1.rs -S -o type_infer1.s\n+```\n+\n+To emit Rust front end debug output, you may add options like `-frust-debug`, `-frust-dump-all`.\n+\n+\n+## Contributing\n+\n+If you want to contribute to GCC Rust, you can find more information in [CONTRIBUTING.md](https://github.com/Rust-GCC/gccrs/blob/master/CONTRIBUTING.md).\n+\n+Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones,\n+and this means we require copyright assignment or the Developer's Certificate of Origin sign-off.\n+Please see the [Contributing to GCC](https://gcc.gnu.org/contribute.html) guide or [Developer's Certificate of Origin (DCO) Sign-off](https://gcc.gnu.org/dco.html) guide.\n+\n+Not all contributions must be code; we would love to see new test cases or bugs and issues to be reported.\n+Feel free to add any comments on open PRs\n+\n+\n+## Continuous Integration\n+\n+When submitting (or updating) a [GitHub Pull Request](https://github.com/Rust-GCC/gccrs/pull/),\n+several automated checks are run.\n+Generally, a \"green status\" is necessary before merge.\n+\n+\n+### Compiler Diagnostics\n+\n+That is, here, diagnostics emitted by the \"initial\" compiler used to build GCC/Rust.\n+\n+If building a native toolchain,\n+GCC by default does a 3-stage bootstrap build (<https://gcc.gnu.org/install/configure.html>).\n+In addition to making sure that GCC is able to reproduce itself bit-by-bit,\n+this also means that stages 2+ are built with `-Werror`\n+(turning most _warning_ into _error_ diagnostics; see `--enable-werror`,\n+possibly enabled by default).\n+This helps to catch a good number of bugs, because it enforces that GCC compiles without compiler diagnostics;\n+it's a requirement for upstream patch submission (<https://gcc.gnu.org/contribute.html#testing>).\n+\n+GCC generally is only expected to be \"warning-clean\" without `--disable-bootstrap`\n+(that is, default `--enable-bootstrap` for a native build),\n+and not for the initial stage where it's using the \"initial\" compiler -- otherwise\n+we're at the mercy of whatever \"initial\" compiler we're using.\n+Doing a `--disable-bootstrap` build is much faster, of course, so we're often doing that:\n+for example, per the instructions above, or in the standard CI.\n+With that, we're missing out on the aspect that _enforces that GCC compiles without compiler diagnostics_.\n+\n+To encounter that, the default CI has a [_check for new warnings_ step](https://github.com/Rust-GCC/gccrs/pull/1026)\n+that verifies in the CI `--disable-bootstrap` build configuration that no new warnings are introduced.\n+If that step fails, it usually points out a new _warning_ you've introduced erroneously, and should address.\n+Occasionally it means that simply the `.github/bors_log_expected_warnings` file needs to be updated,\n+for example if due to any kind of \"environmental changes\" (for example, CI \"initial\" compiler changes).\n+Unless diligently reproducing the CI configuration (in particular \"initial\" compiler, GCC version),\n+it's not really feasible to reproduce this check locally.\n+If in doubt, do a local `--enable-bootstrap` build, or submit your changes, and wait for the CI system's results.\n+\n+\n+## Community\n+\n+We can be found on all usual Rust channels such as Zulip, but we also have our own channels:\n+\n+* GCC Rust Zulip: https://gcc-rust.zulipchat.com/\n+* Twitter: https://twitter.com/gcc_rust\n+* GCC Mailing List: https://gcc.gnu.org/mailman/listinfo/gcc-rust\n+* irc: irc.oftc.net - gccrust"}, {"sha": "e5b22ad646f87e9ad00427f891d2f93baaf83520", "filename": "gcc/rust/logo.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2Flogo.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc676cfe8988c62c81b0df224c7fe82583012b1/gcc%2Frust%2Flogo.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flogo.png?ref=edc676cfe8988c62c81b0df224c7fe82583012b1"}]}