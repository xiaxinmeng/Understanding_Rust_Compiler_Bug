{"sha": "4c334b377cb494b44fabd5f5263d53863f051748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzMzRiMzc3Y2I0OTRiNDRmYWJkNWY1MjYzZDUzODYzZjA1MTc0OA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-02-19T01:02:23Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-02-19T01:02:23Z"}, "message": "Remove obsolete IA-64 -mb-step option.\n\n* doc/invoke.texi (IA-64 Options): Delete -mb-step.\n* config/ia64/ia64.c (last_group, group_idx): Delete variables.\n(errata_find_address_regs, errata_emit_nops, fixup_errata): Delete\nfunctions.\n(ia64_reorg): Delete fixup_errata call.\n* config/ia64/ia64.h (MASK_B_STEP, TARGET_B_STEP): Delete.\n(TARGET_SWITCHES): Delete -mb-step entry.\n\nFrom-SVN: r95257", "tree": {"sha": "a1b27212978d98ed38001a50c2911069790dbf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b27212978d98ed38001a50c2911069790dbf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c334b377cb494b44fabd5f5263d53863f051748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c334b377cb494b44fabd5f5263d53863f051748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c334b377cb494b44fabd5f5263d53863f051748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c334b377cb494b44fabd5f5263d53863f051748/comments", "author": null, "committer": null, "parents": [{"sha": "c3491df4dd8c01794f69ae7c3fdd1fef6cb7174a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3491df4dd8c01794f69ae7c3fdd1fef6cb7174a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3491df4dd8c01794f69ae7c3fdd1fef6cb7174a"}], "stats": {"total": 164, "additions": 11, "deletions": 153}, "files": [{"sha": "691d4855317aaa06244d30e634bfa808236df998", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c334b377cb494b44fabd5f5263d53863f051748", "patch": "@@ -1,3 +1,13 @@\n+2005-02-18  James E. Wilson  <wilson@specifixinc.com>\n+\n+\t* doc/invoke.texi (IA-64 Options): Delete -mb-step.\n+\t* config/ia64/ia64.c (last_group, group_idx): Delete variables.\n+\t(errata_find_address_regs, errata_emit_nops, fixup_errata): Delete\n+\tfunctions.\n+\t(ia64_reorg): Delete fixup_errata call.\n+\t* config/ia64/ia64.h (MASK_B_STEP, TARGET_B_STEP): Delete.\n+\t(TARGET_SWITCHES): Delete -mb-step entry.\n+\n 2005-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/20043"}, {"sha": "d67bb1f9620af0f6d317d9026e8c486dbdcb636a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4c334b377cb494b44fabd5f5263d53863f051748", "patch": "@@ -5683,147 +5683,6 @@ emit_all_insn_group_barriers (FILE *dump ATTRIBUTE_UNUSED)\n     }\n }\n \n-\f\n-static int errata_find_address_regs (rtx *, void *);\n-static void errata_emit_nops (rtx);\n-static void fixup_errata (void);\n-\n-/* This structure is used to track some details about the previous insns\n-   groups so we can determine if it may be necessary to insert NOPs to\n-   workaround hardware errata.  */\n-static struct group\n-{\n-  HARD_REG_SET p_reg_set;\n-  HARD_REG_SET gr_reg_conditionally_set;\n-} last_group[2];\n-\n-/* Index into the last_group array.  */\n-static int group_idx;\n-\n-/* Called through for_each_rtx; determines if a hard register that was\n-   conditionally set in the previous group is used as an address register.\n-   It ensures that for_each_rtx returns 1 in that case.  */\n-static int\n-errata_find_address_regs (rtx *xp, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *xp;\n-  if (GET_CODE (x) != MEM)\n-    return 0;\n-  x = XEXP (x, 0);\n-  if (GET_CODE (x) == POST_MODIFY)\n-    x = XEXP (x, 0);\n-  if (GET_CODE (x) == REG)\n-    {\n-      struct group *prev_group = last_group + (group_idx ^ 1);\n-      if (TEST_HARD_REG_BIT (prev_group->gr_reg_conditionally_set,\n-\t\t\t     REGNO (x)))\n-\treturn 1;\n-      return -1;\n-    }\n-  return 0;\n-}\n-\n-/* Called for each insn; this function keeps track of the state in\n-   last_group and emits additional NOPs if necessary to work around\n-   an Itanium A/B step erratum.  */\n-static void\n-errata_emit_nops (rtx insn)\n-{\n-  struct group *this_group = last_group + group_idx;\n-  struct group *prev_group = last_group + (group_idx ^ 1);\n-  rtx pat = PATTERN (insn);\n-  rtx cond = GET_CODE (pat) == COND_EXEC ? COND_EXEC_TEST (pat) : 0;\n-  rtx real_pat = cond ? COND_EXEC_CODE (pat) : pat;\n-  enum attr_type type;\n-  rtx set = real_pat;\n-\n-  if (GET_CODE (real_pat) == USE\n-      || GET_CODE (real_pat) == CLOBBER\n-      || GET_CODE (real_pat) == ASM_INPUT\n-      || GET_CODE (real_pat) == ADDR_VEC\n-      || GET_CODE (real_pat) == ADDR_DIFF_VEC\n-      || asm_noperands (PATTERN (insn)) >= 0)\n-    return;\n-\n-  /* single_set doesn't work for COND_EXEC insns, so we have to duplicate\n-     parts of it.  */\n-\n-  if (GET_CODE (set) == PARALLEL)\n-    {\n-      int i;\n-      set = XVECEXP (real_pat, 0, 0);\n-      for (i = 1; i < XVECLEN (real_pat, 0); i++)\n-\tif (GET_CODE (XVECEXP (real_pat, 0, i)) != USE\n-\t    && GET_CODE (XVECEXP (real_pat, 0, i)) != CLOBBER)\n-\t  {\n-\t    set = 0;\n-\t    break;\n-\t  }\n-    }\n-\n-  if (set && GET_CODE (set) != SET)\n-    set = 0;\n-\n-  type  = get_attr_type (insn);\n-\n-  if (type == TYPE_F\n-      && set && REG_P (SET_DEST (set)) && PR_REGNO_P (REGNO (SET_DEST (set))))\n-    SET_HARD_REG_BIT (this_group->p_reg_set, REGNO (SET_DEST (set)));\n-\n-  if ((type == TYPE_M || type == TYPE_A) && cond && set\n-      && REG_P (SET_DEST (set))\n-      && GET_CODE (SET_SRC (set)) != PLUS\n-      && GET_CODE (SET_SRC (set)) != MINUS\n-      && (GET_CODE (SET_SRC (set)) != ASHIFT\n-\t  || !shladd_operand (XEXP (SET_SRC (set), 1), VOIDmode))\n-      && (GET_CODE (SET_SRC (set)) != MEM\n-\t  || GET_CODE (XEXP (SET_SRC (set), 0)) != POST_MODIFY)\n-      && GENERAL_REGNO_P (REGNO (SET_DEST (set))))\n-    {\n-      if (!COMPARISON_P (cond)\n-\t  || !REG_P (XEXP (cond, 0)))\n-\tabort ();\n-\n-      if (TEST_HARD_REG_BIT (prev_group->p_reg_set, REGNO (XEXP (cond, 0))))\n-\tSET_HARD_REG_BIT (this_group->gr_reg_conditionally_set, REGNO (SET_DEST (set)));\n-    }\n-  if (for_each_rtx (&real_pat, errata_find_address_regs, NULL))\n-    {\n-      emit_insn_before (gen_insn_group_barrier (GEN_INT (3)), insn);\n-      emit_insn_before (gen_nop (), insn);\n-      emit_insn_before (gen_insn_group_barrier (GEN_INT (3)), insn);\n-      group_idx = 0;\n-      memset (last_group, 0, sizeof last_group);\n-    }\n-}\n-\n-/* Emit extra nops if they are required to work around hardware errata.  */\n-\n-static void\n-fixup_errata (void)\n-{\n-  rtx insn;\n-\n-  if (! TARGET_B_STEP)\n-    return;\n-\n-  group_idx = 0;\n-  memset (last_group, 0, sizeof last_group);\n-\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    {\n-      if (!INSN_P (insn))\n-\tcontinue;\n-\n-      if (ia64_safe_type (insn) == TYPE_S)\n-\t{\n-\t  group_idx ^= 1;\n-\t  memset (last_group + group_idx, 0, sizeof last_group[group_idx]);\n-\t}\n-      else\n-\terrata_emit_nops (insn);\n-    }\n-}\n \f\n \n /* Instruction scheduling support.  */\n@@ -7583,7 +7442,6 @@ ia64_reorg (void)\n \t}\n     }\n \n-  fixup_errata ();\n   emit_predicate_relation_info ();\n \n   if (ia64_flag_var_tracking)"}, {"sha": "a81cd2c9fe24eda32c08eec76c6d8509d594b750", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=4c334b377cb494b44fabd5f5263d53863f051748", "patch": "@@ -75,8 +75,6 @@ extern int target_flags;\n \n #define MASK_ILP32      0x00000020      /* Generate ILP32 code.  */\n \n-#define MASK_B_STEP\t0x00000040\t/* Emit code for Itanium B step.  */\n-\n #define MASK_REG_NAMES\t0x00000080\t/* Use in/loc/out register names.  */\n \n #define MASK_NO_SDATA   0x00000100\t/* Disable sdata/scommon/sbss.  */\n@@ -113,8 +111,6 @@ extern int target_flags;\n \n #define TARGET_ILP32            (target_flags & MASK_ILP32)\n \n-#define TARGET_B_STEP\t\t(target_flags & MASK_B_STEP)\n-\n #define TARGET_REG_NAMES\t(target_flags & MASK_REG_NAMES)\n \n #define TARGET_NO_SDATA\t\t(target_flags & MASK_NO_SDATA)\n@@ -196,8 +192,6 @@ extern int ia64_tls_size;\n       N_(\"Emit stop bits before and after volatile extended asms\") },\t\\\n   { \"no-volatile-asm-stop\", -MASK_VOL_ASM_STOP,\t\t\t\t\\\n       N_(\"Don't emit stop bits before and after volatile extended asms\") }, \\\n-  { \"b-step\",\t\tMASK_B_STEP,\t\t\t\t\t\\\n-      N_(\"Emit code for Itanium (TM) processor B step\")},\t\t\\\n   { \"register-names\",\tMASK_REG_NAMES,\t\t\t\t\t\\\n       N_(\"Use in/loc/out register names\")},\t\t\t\t\\\n   { \"no-sdata\",\t\tMASK_NO_SDATA,\t\t\t\t\t\\"}, {"sha": "048f4950910e269a0cd8d3788291e73534e06880", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334b377cb494b44fabd5f5263d53863f051748/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4c334b377cb494b44fabd5f5263d53863f051748", "patch": "@@ -499,7 +499,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{IA-64 Options}\n @gccoptlist{-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n--mvolatile-asm-stop  -mb-step  -mregister-names  -mno-sdata @gol\n+-mvolatile-asm-stop  -mregister-names  -mno-sdata @gol\n -mconstant-gp  -mauto-pic  -minline-float-divide-min-latency @gol\n -minline-float-divide-max-throughput @gol\n -minline-int-divide-min-latency @gol\n@@ -8866,10 +8866,6 @@ is not position independent code, and violates the IA-64 ABI@.\n Generate (or don't) a stop bit immediately before and after volatile asm\n statements.\n \n-@item -mb-step\n-@opindex mb-step\n-Generate code that works around Itanium B step errata.\n-\n @item -mregister-names\n @itemx -mno-register-names\n @opindex mregister-names"}]}