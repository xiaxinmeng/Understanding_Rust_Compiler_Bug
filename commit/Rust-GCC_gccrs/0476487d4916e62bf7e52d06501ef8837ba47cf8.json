{"sha": "0476487d4916e62bf7e52d06501ef8837ba47cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3NjQ4N2Q0OTE2ZTYyYmY3ZTUyZDA2NTAxZWY4ODM3YmE0N2NmOA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-08-08T09:06:49Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-08-08T09:06:49Z"}, "message": "[RS6000] PR72802 part 2, reload ICE\n\nAfter fixing the constraint problem, we hit an \"insn does not satisfy\nits constraints\" with -mno-lra on the following insn, a vector load\nfrom mem which has an invalid offset:\n(insn 631 630 1122 12 (set (reg:SF 108 31 [orig:260 pretmp_44 ] [260])\n        (mem:SF (plus:DI (reg:DI 30 30 [orig:338 ivtmp.141 ] [338])\n                (const_int 2 [0x2])) [5 MEM[base: _1, offset: 2B]+0 S4 A32])) 470 {movsf_hardfloat}\n     (nil))\n\nHere are the reload costs for the various alternatives of\nmovsf_hardfloat:\n\"=!r, !r,  m,  f, ww, ww, !r,  f, wb,  m, wY, wu,  Z,?wn, ?r,*c*l, !r, *h\"\n  \"r,  m,  r,  f, ww,  j,  j,  m, wY,  f, wb,  Z, wu,  r, wn,   r, *h,  0\"\n 617 609  17  17   8   8 617   9   8  17  17   8  17  23  23   17 617  17\n\nNotice that the cost for a vector<-vector move (ww,ww) is the same as\nthe cost for a vector<-mem move (wb,wY or wu,Z).  Since the\nvector<-vector move comes first, it is chosen and the mem part of the\ninsn reloaded.  That just gives another copy of insn 631.\n\n\tPR target/72802\n\t* config/rs6000/rs6000.md (mov<mode>_hardfloat): Sort\n\talternatives.  Put loads first, then stores, and reg/reg moves\n\twithin same class later.  Delete attr length.\ntestsuite/\n\t* gcc.c-torture/compile/pr72802.c: New.\n\nFrom-SVN: r239234", "tree": {"sha": "2e7447a8b4469907cfa07780bdb22d820b3a8b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7447a8b4469907cfa07780bdb22d820b3a8b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0476487d4916e62bf7e52d06501ef8837ba47cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0476487d4916e62bf7e52d06501ef8837ba47cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0476487d4916e62bf7e52d06501ef8837ba47cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0476487d4916e62bf7e52d06501ef8837ba47cf8/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad69178ca9b691e39308062bc46a801806ea1030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad69178ca9b691e39308062bc46a801806ea1030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad69178ca9b691e39308062bc46a801806ea1030"}], "stats": {"total": 249, "additions": 238, "deletions": 11}, "files": [{"sha": "083b61366392c73e1af18eae9ef2cebb7148dea4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0476487d4916e62bf7e52d06501ef8837ba47cf8", "patch": "@@ -1,3 +1,10 @@\n+2016-08-08  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/72802\n+\t* config/rs6000/rs6000.md (mov<mode>_hardfloat): Sort\n+\talternatives.  Put loads first, then stores, and reg/reg moves\n+\twithin same class later.  Delete attr length.\n+\n 2016-08-08  Alan Modra  <amodra@gmail.com>\n \n \tPR target/72802"}, {"sha": "84cb066b0245c9fc315abc17b5d679ce7b6be5f6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0476487d4916e62bf7e52d06501ef8837ba47cf8", "patch": "@@ -6689,32 +6689,37 @@\n }\")\n \n (define_insn \"mov<mode>_hardfloat\"\n-  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\" \"=!r,!r,m,f,<f32_vsx>,<f32_vsx>,!r,<f32_lr>,<f32_lr2>,<f32_sm>,<f32_sm2>,<f32_av>,Z,?<f32_dm>,?r,*c*l,!r,*h\")\n-\t(match_operand:FMOVE32 1 \"input_operand\" \"r,m,r,f,<f32_vsx>,<zero_fp>,<zero_fp>,<f32_lm>,<f32_lm2>,<f32_sr>,<f32_sr2>,Z,<f32_av>,r,<f32_dm>,r,h,0\"))]\n+  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\"\n+\t \"=!r,       <f32_lr>,  <f32_lr2>, <f32_av>,  m,         <f32_sm>,\n+\t  <f32_sm2>, Z,         <f32_vsx>, !r,        ?<f32_dm>, ?r,\n+\t  f,         <f32_vsx>, !r,        *c*l,      !r,        *h\")\n+\t(match_operand:FMOVE32 1 \"input_operand\"\n+\t \"m,         <f32_lm>,  <f32_lm2>, Z,         r,         <f32_sr>,\n+\t  <f32_sr2>, <f32_av>,  <zero_fp>, <zero_fp>, r,         <f32_dm>,\n+\t  f,         <f32_vsx>, r,         r,         *h,        0\"))]\n   \"(gpc_reg_operand (operands[0], <MODE>mode)\n    || gpc_reg_operand (operands[1], <MODE>mode))\n    && (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT)\"\n   \"@\n-   mr %0,%1\n    lwz%U1%X1 %0,%1\n-   stw%U0%X0 %1,%0\n-   fmr %0,%1\n-   xscpsgndp %x0,%x1,%x1\n-   xxlxor %x0,%x0,%x0\n-   li %0,0\n    <f32_li>\n    <f32_li2>\n+   <f32_lv>\n+   stw%U0%X0 %1,%0\n    <f32_si>\n    <f32_si2>\n-   <f32_lv>\n    <f32_sv>\n+   xxlxor %x0,%x0,%x0\n+   li %0,0\n    mtvsrwz %x0,%1\n    mfvsrwz %0,%x1\n+   fmr %0,%1\n+   xscpsgndp %x0,%x1,%x1\n+   mr %0,%1\n    mt%0 %1\n    mf%1 %0\n    nop\"\n-  [(set_attr \"type\" \"*,load,store,fpsimple,fpsimple,veclogical,integer,fpload,fpload,fpstore,fpstore,fpload,fpstore,mffgpr,mftgpr,mtjmpr,mfjmpr,*\")\n-   (set_attr \"length\" \"4\")])\n+  [(set_attr \"type\" \"load,fpload,fpload,fpload,store,fpstore,fpstore,fpstore,veclogical,integer,mffgpr,mftgpr,fpsimple,fpsimple,*,mtjmpr,mfjmpr,*\")])\n \n (define_insn \"*mov<mode>_softfloat\"\n   [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\" \"=r,cl,r,r,m,r,r,r,r,*h\")"}, {"sha": "c7a11282a998f89b71a2e6e3678dc7cceea3f90a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0476487d4916e62bf7e52d06501ef8837ba47cf8", "patch": "@@ -1,3 +1,7 @@\n+2016-08-08  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.c-torture/compile/pr72802.c: New.\n+\n 2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/70524"}, {"sha": "b9e1ab31580e795928b497f665fc0fb8b3634fa9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr72802.c", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72802.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476487d4916e62bf7e52d06501ef8837ba47cf8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72802.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr72802.c?ref=0476487d4916e62bf7e52d06501ef8837ba47cf8", "patch": "@@ -0,0 +1,211 @@\n+static a[];\n+static b, h, m, n, o, p, q, t, u, v, t5, t6, t16, t17, t18, t25;\n+c;\n+static volatile d;\n+static volatile e;\n+static volatile f;\n+static volatile g;\n+j;\n+static volatile k;\n+static volatile l;\n+static volatile r;\n+const volatile s;\n+static volatile w;\n+static volatile x;\n+const volatile y;\n+static volatile z;\n+static volatile t1;\n+static volatile t2;\n+const t3;\n+t4;\n+const volatile t8;\n+const volatile t9;\n+const volatile t10;\n+static volatile t11;\n+static volatile t12;\n+static volatile t13;\n+static volatile t14;\n+const volatile t15;\n+static volatile t19;\n+static volatile t20;\n+const volatile t21;\n+static volatile t22;\n+static volatile t23;\n+const volatile t24;\n+*t29;\n+fn1() { b = 5; }\n+fn2(long);\n+#pragma pack(1)\n+struct S0 {\n+  short f3;\n+  float f4;\n+  signed f5\n+};\n+const struct S0 t7[] = {};\n+static fn3() {\n+  int t26[] = {};\n+  int t27[10] = {};\n+  --t25;\n+  if (fn4()) {\n+    t5++;\n+    fn5();\n+    int t28[] = {t26, t27};\n+    return;\n+  }\n+}\n+fn6() {\n+  int i, t30 = 0;\n+  if (fn6 == 2)\n+    t30 = 1;\n+  {\n+    int t31, i = 0;\n+    for (; i < 256; i++) {\n+      t31 = i;\n+      if (i & 1)\n+        t31 = 0;\n+      a[i] = t31;\n+    }\n+    i = 0;\n+    for (; i < 3; i++)\n+      t29[i] = t6;\n+    fn7();\n+    fn3();\n+    t4 = c = j = 0;\n+  }\n+  fn2(h);\n+  if (t30)\n+    printf(b);\n+  g;\n+  fn2(g);\n+  printf(b);\n+  f;\n+  fn2(f);\n+  if (t30)\n+    printf(b);\n+  e;\n+  fn2(e);\n+  printf(b);\n+  fn8();\n+  d;\n+  fn2(d);\n+  if (t30)\n+    printf(b);\n+  l;\n+  fn2(l);\n+  printf(b);\n+  k;\n+  fn2(k);\n+  if (t30)\n+    printf(b);\n+  printf(b);\n+  for (; i; i++) {\n+    y;\n+    fn2(y);\n+    printf(b);\n+    x;\n+    fn2(x);\n+    if (t30)\n+      printf(b);\n+    w;\n+    fn2(w);\n+    printf(b);\n+    fn2(v);\n+    printf(b);\n+    fn2(u);\n+    if (t30)\n+      printf(b);\n+    fn2(t);\n+    printf(b);\n+    s;\n+    fn2(s);\n+    if (t30)\n+      printf(b);\n+    r;\n+    fn2(r);\n+    printf(b);\n+    fn2(q);\n+    if (t30)\n+      printf(b);\n+    fn2(p);\n+    printf(\"\", b);\n+    fn2(o);\n+    printf(b);\n+    fn2(n);\n+    if (t30)\n+      printf(b);\n+    fn2(m);\n+    printf(b);\n+  }\n+  fn2(z);\n+  if (t30)\n+    printf(b);\n+  printf(\"\", t3);\n+  t2;\n+  fn2(t2);\n+  printf(b);\n+  t1;\n+  fn2(t1);\n+  if (t30)\n+    printf(b);\n+  for (; i < 6; i++) {\n+    t10;\n+    fn2(t10);\n+    printf(b);\n+    t9;\n+    fn2(t9);\n+    if (t30)\n+      printf(b);\n+    t8;\n+    fn2(t8);\n+    printf(b);\n+    fn2(t7[i].f3);\n+    if (t30)\n+      printf(b);\n+    fn2(t7[i].f4);\n+    printf(b);\n+    fn2(t7[i].f5);\n+    if (t30)\n+      printf(b);\n+    t15;\n+    fn2(t15);\n+    printf(b);\n+    t14;\n+    fn2(t14);\n+    if (t30)\n+      printf(b);\n+    t13;\n+    fn2(t13);\n+    printf(b);\n+    t12;\n+    fn2(t12);\n+    if (t30)\n+      printf(b);\n+    t11;\n+    fn2(t11);\n+    printf(b);\n+    t21;\n+    fn2(t21);\n+    if (t30)\n+      printf(b);\n+    t20;\n+    fn2(t20);\n+    fn2(t19);\n+    if (t30)\n+      printf(b);\n+    fn2(t18);\n+    printf(b);\n+    fn2(t17);\n+    printf(b);\n+    fn2(t16);\n+    printf(b);\n+  }\n+  t24;\n+  t24;\n+  if (t30)\n+    printf(b);\n+  printf(t23);\n+  t22;\n+  t22;\n+  if (t30)\n+    printf(b);\n+}"}]}