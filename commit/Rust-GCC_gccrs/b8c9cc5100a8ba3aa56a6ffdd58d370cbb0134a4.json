{"sha": "b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjOWNjNTEwMGE4YmEzYWE1NmE2ZmZkZDU4ZDM3MGNiYjAxMzRhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-23T09:43:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-23T09:43:46Z"}, "message": "[C++] Make same_type_p return false for gnu_vector_type_p differences (PR 92789)\n\nAs Jason pointed out in the review of the C++ gnu_vector_type_p patch:\n\n    https://gcc.gnu.org/ml/gcc-patches/2019-12/msg00173.html\n\nthe real fix for the XFAILs in acle/general-c++/gnu_vectors_*.C is to\nmake same_type_p return false for two types if one is gnu_vector_type_p\nand the other isn't.  This patch does that and fixes the fallout.\n\nOriginally I'd tried to make it so that \"X *\" and \"Y *\" are\ninterconvertible whenever X and Y are, and similarly for\n\"X &\" and \"Y &\".  That doesn't fall out naturally though,\nand is different from how -flax-vector-conversions works.\nThe patch therefore accepts all the consequences of making\nX and Y !same_type_p instead of trying to work around them.\n\n2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/cp/\n\tPR c++/92789\n\t* typeck.c (structural_comptypes): Make sure that two vector types\n\tagree on gnu_vector_type_p.\n\ngcc/testsuite/\n\tPR c++/92789\n\t* g++.dg/ext/sve-sizeless-2.C (statements): Expect pointer\n\tdifference and comparisons between GNU and non-GNU types\n\tto be rejected.  Expect __is_same to be false for such pairs.\n\t* g++.target/aarch64/sve/acle/general-c++/gnu_vectors_1.C: Remove\n\tXFAILs.  Expect conversions between SVE vector pointers and\n\tGNU vector pointers to be rejected.  Test references.\n\t* g++.target/aarch64/sve/acle/general-c++/gnu_vectors_2.C: Likewise.\n\nFrom-SVN: r279717", "tree": {"sha": "dff0b758de52b2af42cc79a1e0c7362d5c89164d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff0b758de52b2af42cc79a1e0c7362d5c89164d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96bea935c08ab0773b02cdeed7a2c066744fe861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bea935c08ab0773b02cdeed7a2c066744fe861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96bea935c08ab0773b02cdeed7a2c066744fe861"}], "stats": {"total": 120, "additions": 83, "deletions": 37}, "files": [{"sha": "14c6d324580727665a4b6cf1119a45b23906cdf9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -1,3 +1,9 @@\n+2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/92789\n+\t* typeck.c (structural_comptypes): Make sure that two vector types\n+\tagree on gnu_vector_type_p.\n+\n 2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cvt.c (ocp_convert): Apply rvalue to the source of vector"}, {"sha": "18c16857a8298863e3e744a417a44047389d1364", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -1425,7 +1425,8 @@ structural_comptypes (tree t1, tree t2, int strict)\n       break;\n \n     case VECTOR_TYPE:\n-      if (maybe_ne (TYPE_VECTOR_SUBPARTS (t1), TYPE_VECTOR_SUBPARTS (t2))\n+      if (gnu_vector_type_p (t1) != gnu_vector_type_p (t2)\n+\t  || maybe_ne (TYPE_VECTOR_SUBPARTS (t1), TYPE_VECTOR_SUBPARTS (t2))\n \t  || !same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \treturn false;\n       break;"}, {"sha": "59fc56447acd2093d53e72d277f3d3cec5f2c615", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -1,3 +1,14 @@\n+2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/92789\n+\t* g++.dg/ext/sve-sizeless-2.C (statements): Expect pointer\n+\tdifference and comparisons between GNU and non-GNU types\n+\tto be rejected.  Expect __is_same to be false for such pairs.\n+\t* g++.target/aarch64/sve/acle/general-c++/gnu_vectors_1.C: Remove\n+\tXFAILs.  Expect conversions between SVE vector pointers and\n+\tGNU vector pointers to be rejected.  Test references.\n+\t* g++.target/aarch64/sve/acle/general-c++/gnu_vectors_2.C: Likewise.\n+\n 2019-12-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.dg/ext/vector39.C: New test."}, {"sha": "40b65d37f8a1e70eafbec0c86a31664998be211c", "filename": "gcc/testsuite/g++.dg/ext/sve-sizeless-2.C", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -183,8 +183,8 @@ statements (int n)\n \n   // Pointer assignment.\n \n-  gnu_sc_ptr = sve_sc_ptr;\n-  sve_sc_ptr = gnu_sc_ptr;\n+  gnu_sc_ptr = sve_sc_ptr; // { dg-error {invalid conversion from 'svint8_t\\*' to 'int8x32_t\\*'} }\n+  sve_sc_ptr = gnu_sc_ptr; // { dg-error {invalid conversion from 'int8x32_t\\*'[^\\n]* to 'svint8_t\\*'} }\n \n   // Pointer arithmetic.\n \n@@ -197,8 +197,8 @@ statements (int n)\n   sve_sc_ptr -= 0; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n   sve_sc_ptr -= 1; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n   sve_sc_ptr - sve_sc_ptr; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n-  gnu_sc_ptr - sve_sc_ptr; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n-  sve_sc_ptr - gnu_sc_ptr; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n+  gnu_sc_ptr - sve_sc_ptr; // { dg-error {invalid operands of types 'int8x32_t\\*'[^\\n]* and 'svint8_t\\*' to binary 'operator-'} }\n+  sve_sc_ptr - gnu_sc_ptr; // { dg-error {invalid operands of types 'svint8_t\\*' and 'int8x32_t\\*'[^\\n]* to binary 'operator-'} }\n   sve_sc1 = sve_sc_ptr[0]; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n   sve_sc1 = sve_sc_ptr[1]; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n \n@@ -210,18 +210,18 @@ statements (int n)\n   sve_sc_ptr <= &sve_sc1;\n   sve_sc_ptr > &sve_sc1;\n   sve_sc_ptr >= &sve_sc1;\n-  gnu_sc_ptr == sve_sc_ptr;\n-  gnu_sc_ptr != sve_sc_ptr;\n-  gnu_sc_ptr < sve_sc_ptr;\n-  gnu_sc_ptr <= sve_sc_ptr;\n-  gnu_sc_ptr > sve_sc_ptr;\n-  gnu_sc_ptr >= sve_sc_ptr;\n-  sve_sc_ptr == gnu_sc_ptr;\n-  sve_sc_ptr != gnu_sc_ptr;\n-  sve_sc_ptr < gnu_sc_ptr;\n-  sve_sc_ptr <= gnu_sc_ptr;\n-  sve_sc_ptr > gnu_sc_ptr;\n-  sve_sc_ptr >= gnu_sc_ptr;\n+  gnu_sc_ptr == sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  gnu_sc_ptr != sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  gnu_sc_ptr < sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  gnu_sc_ptr <= sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  gnu_sc_ptr > sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  gnu_sc_ptr >= sve_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr == gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr != gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr < gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr <= gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr > gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n+  sve_sc_ptr >= gnu_sc_ptr; // { dg-error {comparison between distinct pointer types [^\\n]*lacks a cast} }\n \n   // New and delete.\n \n@@ -243,8 +243,8 @@ statements (int n)\n   0 ? 0 : sve_sc1; // { dg-error {different types 'int' and 'svint8_t'} }\n   0 ? sve_sc1 : sve_sc1;\n   0 ? sve_sc_ptr : sve_sc_ptr;\n-  0 ? sve_sc_ptr : gnu_sc_ptr;\n-  0 ? gnu_sc_ptr : sve_sc_ptr;\n+  0 ? sve_sc_ptr : gnu_sc_ptr; // { dg-error {conditional expression between distinct pointer types [^\\n]*lacks a cast} }\n+  0 ? gnu_sc_ptr : sve_sc_ptr; // { dg-error {conditional expression between distinct pointer types [^\\n]*lacks a cast} }\n \n   // Function arguments.\n \n@@ -321,11 +321,11 @@ statements (int n)\n   { typedef int f[__is_pod (svint8_t) ? 1 : -1]; }\n   { typedef int f[!__is_polymorphic (svint8_t) ? 1 : -1]; }\n   { typedef int f[__is_same_as (svint8_t, svint8_t) ? 1 : -1]; }\n-  { typedef int f[__is_same_as (svint8_t, int8x32_t) ? 1 : -1]; }\n-  { typedef int f[__is_same_as (int8x32_t, svint8_t) ? 1 : -1]; }\n+  { typedef int f[!__is_same_as (svint8_t, int8x32_t) ? 1 : -1]; }\n+  { typedef int f[!__is_same_as (int8x32_t, svint8_t) ? 1 : -1]; }\n   { typedef int f[__is_same_as (svint8_t *, svint8_t *) ? 1 : -1]; }\n-  { typedef int f[__is_same_as (svint8_t *, int8x32_t *) ? 1 : -1]; }\n-  { typedef int f[__is_same_as (int8x32_t *, svint8_t *) ? 1 : -1]; }\n+  { typedef int f[!__is_same_as (svint8_t *, int8x32_t *) ? 1 : -1]; }\n+  { typedef int f[!__is_same_as (int8x32_t *, svint8_t *) ? 1 : -1]; }\n   { typedef int f[!__is_same_as (svint8_t, int) ? 1 : -1]; }\n   { typedef int f[!__is_same_as (svint8_t, svint16_t) ? 1 : -1]; }\n   { typedef int f[__is_trivial (svint8_t) ? 1 : -1]; }"}, {"sha": "f60ffe4a262f0546b07277f1feb5cfbd8458499c", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/gnu_vectors_1.C", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_1.C?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -36,14 +36,14 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n \n   gnu_uint8_t init_gnu_u1 = 0; // { dg-error {cannot convert 'int' to 'gnu_uint8_t'[^\\n]* in initialization} }\n   gnu_uint8_t init_gnu_u2 = {};\n-  gnu_uint8_t init_gnu_u3 = { sve_u1 };\n+  gnu_uint8_t init_gnu_u3 = { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u4 = { gnu_u1 };\n   gnu_uint8_t init_gnu_u5 = { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u6 = { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u7 = { 0 };\n   gnu_uint8_t init_gnu_u8 = { sve_u1, sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u9 = { gnu_u1, gnu_u1 }; // { dg-error {cannot convert 'gnu_uint8_t'[^\\n]* to 'unsigned char' in initialization} }\n-  gnu_uint8_t init_gnu_u10 { sve_u1 };\n+  gnu_uint8_t init_gnu_u10 { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u11 { gnu_u1 };\n   gnu_uint8_t init_gnu_u12 { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u13 { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n@@ -69,7 +69,7 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n \n   (gnu_uint8_t) {};\n   (gnu_uint8_t) { 0 };\n-  (gnu_uint8_t) { sve_u1 };\n+  (gnu_uint8_t) { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   (gnu_uint8_t) { gnu_u1 };\n   (gnu_uint8_t) { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   (gnu_uint8_t) { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n@@ -434,8 +434,8 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n   // Conditional expressions.\n \n   uc ? sve_u1 : sve_u1;\n-  uc ? gnu_u1 : sve_u1; // { dg-error {operands to '\\?:' have different types 'gnu_uint8_t'[^\\n]* and 'svuint8_t'} \"\" { xfail *-*-* } }\n-  uc ? sve_u1 : gnu_u1; // { dg-error {operands to '\\?:' have different types 'svuint8_t' and 'gnu_uint8_t'} \"\" { xfail *-*-* } }\n+  uc ? gnu_u1 : sve_u1; // { dg-error {operands to '\\?:' have different types 'gnu_uint8_t'[^\\n]* and 'svuint8_t'} }\n+  uc ? sve_u1 : gnu_u1; // { dg-error {operands to '\\?:' have different types 'svuint8_t' and 'gnu_uint8_t'} }\n   uc ? gnu_u1 : gnu_u1;\n \n   sve_u1 ? sve_u1 : sve_u1; // { dg-error {could not convert 'sve_u1' from 'svuint8_t' to 'bool'} }\n@@ -474,15 +474,29 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n   static_assert(__is_literal_type(svuint8_t));\n   static_assert(__is_literal_type(gnu_uint8_t));\n \n+  // Pointers.\n+\n   svuint8_t *sve_ptr1 = &sve_u1;\n-  svuint8_t *sve_ptr2 = &gnu_u1;\n+  svuint8_t *sve_ptr2 = &gnu_u1; // { dg-error {invalid conversion} }\n   svuint8_t *sve_ptr3 = &sve_s1; // { dg-error {cannot convert 'svint8_t\\*' to 'svuint8_t\\*' in initialization} }\n   svuint8_t *sve_ptr4 = &gnu_s1; // { dg-error {cannot convert 'gnu_int8_t\\*'[^\\n]* to 'svuint8_t\\*' in initialization} }\n \n-  gnu_uint8_t *gnu_ptr1 = &sve_u1;\n+  gnu_uint8_t *gnu_ptr1 = &sve_u1; // { dg-error {invalid conversion} }\n   gnu_uint8_t *gnu_ptr2 = &gnu_u1;\n   gnu_uint8_t *gnu_ptr3 = &sve_s1; // { dg-error {cannot convert 'svint8_t\\*' to 'gnu_uint8_t\\*'} }\n   gnu_uint8_t *gnu_ptr4 = &gnu_s1; // { dg-error {cannot convert 'gnu_int8_t\\*'[^\\n]* to 'gnu_uint8_t\\*'} }\n+\n+  // References.\n+\n+  svuint8_t &sve_ref1 = sve_u1;\n+  svuint8_t &sve_ref2 = gnu_u1; // { dg-error {cannot bind non-const lvalue reference} }\n+  svuint8_t &sve_ref3 = sve_s1; // { dg-error {invalid initialization of reference of type 'svuint8_t\\&' from expression of type 'svint8_t'} }\n+  svuint8_t &sve_ref4 = gnu_s1; // { dg-error {invalid initialization of reference of type 'svuint8_t\\&' from expression of type 'gnu_int8_t'} }\n+\n+  gnu_uint8_t &gnu_ref1 = sve_u1; // { dg-error {cannot bind non-const lvalue reference} }\n+  gnu_uint8_t &gnu_ref2 = gnu_u1;\n+  gnu_uint8_t &gnu_ref3 = sve_s1; // { dg-error {invalid initialization of reference of type 'gnu_uint8_t\\&} }\n+  gnu_uint8_t &gnu_ref4 = gnu_s1; // { dg-error {invalid initialization of reference of type 'gnu_uint8_t\\&} }\n }\n \n constexpr svuint8_t const1 (svuint8_t x) { return x; }"}, {"sha": "30b2ca59d791afc7c22c9e6e8ab1455129826d21", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/gnu_vectors_2.C", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fgnu_vectors_2.C?ref=b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4", "patch": "@@ -36,14 +36,14 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n \n   gnu_uint8_t init_gnu_u1 = 0; // { dg-error {cannot convert 'int' to 'gnu_uint8_t'[^\\n]* in initialization} }\n   gnu_uint8_t init_gnu_u2 = {};\n-  gnu_uint8_t init_gnu_u3 = { sve_u1 };\n+  gnu_uint8_t init_gnu_u3 = { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u4 = { gnu_u1 };\n   gnu_uint8_t init_gnu_u5 = { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u6 = { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u7 = { 0 };\n   gnu_uint8_t init_gnu_u8 = { sve_u1, sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u9 = { gnu_u1, gnu_u1 }; // { dg-error {cannot convert 'gnu_uint8_t'[^\\n]* to 'unsigned char' in initialization} }\n-  gnu_uint8_t init_gnu_u10 { sve_u1 };\n+  gnu_uint8_t init_gnu_u10 { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u11 { gnu_u1 };\n   gnu_uint8_t init_gnu_u12 { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   gnu_uint8_t init_gnu_u13 { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n@@ -69,7 +69,7 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n \n   (gnu_uint8_t) {};\n   (gnu_uint8_t) { 0 };\n-  (gnu_uint8_t) { sve_u1 };\n+  (gnu_uint8_t) { sve_u1 }; // { dg-error {cannot convert 'svuint8_t' to 'unsigned char' in initialization} }\n   (gnu_uint8_t) { gnu_u1 };\n   (gnu_uint8_t) { sve_s1 }; // { dg-error {cannot convert 'svint8_t' to 'unsigned char' in initialization} }\n   (gnu_uint8_t) { gnu_s1 }; // { dg-error {cannot convert 'gnu_int8_t'[^\\n]* to 'unsigned char' in initialization} }\n@@ -434,8 +434,8 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n   // Conditional expressions.\n \n   uc ? sve_u1 : sve_u1;\n-  uc ? gnu_u1 : sve_u1; // { dg-error {operands to '\\?:' have different types 'gnu_uint8_t'[^\\n]* and 'svuint8_t'} \"\" { xfail *-*-* } }\n-  uc ? sve_u1 : gnu_u1; // { dg-error {operands to '\\?:' have different types 'svuint8_t' and 'gnu_uint8_t'} \"\" { xfail *-*-* } }\n+  uc ? gnu_u1 : sve_u1; // { dg-error {operands to '\\?:' have different types 'gnu_uint8_t'[^\\n]* and 'svuint8_t'} }\n+  uc ? sve_u1 : gnu_u1; // { dg-error {operands to '\\?:' have different types 'svuint8_t' and 'gnu_uint8_t'} }\n   uc ? gnu_u1 : gnu_u1;\n \n   sve_u1 ? sve_u1 : sve_u1; // { dg-error {could not convert 'sve_u1' from 'svuint8_t' to 'bool'} }\n@@ -474,15 +474,29 @@ f (svuint8_t sve_u1, svint8_t sve_s1,\n   static_assert(__is_literal_type(svuint8_t));\n   static_assert(__is_literal_type(gnu_uint8_t));\n \n+  // Pointers.\n+\n   svuint8_t *sve_ptr1 = &sve_u1;\n-  svuint8_t *sve_ptr2 = &gnu_u1;\n+  svuint8_t *sve_ptr2 = &gnu_u1; // { dg-error {invalid conversion} }\n   svuint8_t *sve_ptr3 = &sve_s1; // { dg-error {invalid conversion from 'svint8_t\\*' to 'svuint8_t\\*'} }\n   svuint8_t *sve_ptr4 = &gnu_s1; // { dg-error {invalid conversion from 'gnu_int8_t\\*'[^\\n]* to 'svuint8_t\\*'} }\n \n-  gnu_uint8_t *gnu_ptr1 = &sve_u1;\n+  gnu_uint8_t *gnu_ptr1 = &sve_u1; // { dg-error {invalid conversion} }\n   gnu_uint8_t *gnu_ptr2 = &gnu_u1;\n   gnu_uint8_t *gnu_ptr3 = &sve_s1; // { dg-error {invalid conversion from 'svint8_t\\*' to 'gnu_uint8_t\\*'} }\n   gnu_uint8_t *gnu_ptr4 = &gnu_s1; // { dg-error {invalid conversion from 'gnu_int8_t\\*'[^\\n]* to 'gnu_uint8_t\\*'} }\n+\n+  // References.\n+\n+  svuint8_t &sve_ref1 = sve_u1;\n+  svuint8_t &sve_ref2 = gnu_u1; // { dg-error {cannot bind non-const lvalue reference} }\n+  svuint8_t &sve_ref3 = sve_s1; // { dg-error {cannot bind non-const lvalue reference} }\n+  svuint8_t &sve_ref4 = gnu_s1; // { dg-error {cannot bind non-const lvalue reference} }\n+\n+  gnu_uint8_t &gnu_ref1 = sve_u1; // { dg-error {cannot bind non-const lvalue reference} }\n+  gnu_uint8_t &gnu_ref2 = gnu_u1;\n+  gnu_uint8_t &gnu_ref3 = sve_s1; // { dg-error {cannot bind non-const lvalue reference} }\n+  gnu_uint8_t &gnu_ref4 = gnu_s1; // { dg-error {cannot bind non-const lvalue reference} }\n }\n \n constexpr svuint8_t const1 (svuint8_t x) { return x; }"}]}