{"sha": "7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "node_id": "C_kwDOANBUbNoAKDdiY2UwYmUwM2I4NTdlZWZlNTk5MGMzZWYwYWYwNmVhOGY4YWUwNGU", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-03-18T17:16:29Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-03-22T03:48:38Z"}, "message": "AVX512FP16: Fix wrong code for _mm_mask_f[c]madd.*sch [PR 104978]\n\nFor complex scalar intrinsic like _mm_mask_fcmadd_sch, the\nmask should be and by 1 to ensure the mask is bind to lowest byte.\nUse masked vmovss to perform same operation which omits higher bits\nof mask.\n\ngcc/ChangeLog:\n\n\tPR target/104978\n\t* config/i386/sse.md\n\t(avx512fp16_fmaddcsh_v8hf_mask1<round_expand_name):\n\tUse avx512f_movsf_mask instead of vmovaps or vblend, and\n\tforce_reg before lowpart_subreg.\n\t(avx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/104978\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: Adjust asm scan.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1c.c: Removed.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1c.c: Ditto.\n\t* gcc.target/i386/pr104978.c: New test.", "tree": {"sha": "5d2ba232d0294f28781f9b0690d9d7cf72f33127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2ba232d0294f28781f9b0690d9d7cf72f33127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d156bb870225f442b32983983f94e731397fdb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d156bb870225f442b32983983f94e731397fdb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d156bb870225f442b32983983f94e731397fdb6e"}], "stats": {"total": 114, "additions": 42, "deletions": 72}, "files": [{"sha": "6f7af2f21d666082b1f384f56e387d7b3bb68852", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "patch": "@@ -6576,7 +6576,7 @@\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx op0, op1, dest;\n \n   if (<round_embedded_complex>)\n     emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask<round_expand_name> (\n@@ -6586,26 +6586,15 @@\n     emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask (operands[0],\n       operands[1], operands[2], operands[3], operands[4]));\n \n-  if (TARGET_AVX512VL)\n-  {\n-    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n-    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n-    emit_insn (gen_avx512vl_loadv4sf_mask (op0, op0, op1, operands[4]));\n-  }\n-  else\n-  {\n-    rtx mask, tmp, vec_mask;\n-    mask = lowpart_subreg (SImode, operands[4], QImode),\n-    tmp = gen_reg_rtx (SImode);\n-    emit_insn (gen_ashlsi3 (tmp, mask, GEN_INT (31)));\n-    vec_mask = gen_reg_rtx (V4SImode);\n-    emit_insn (gen_rtx_SET (vec_mask, CONST0_RTX (V4SImode)));\n-    emit_insn (gen_vec_setv4si_0 (vec_mask, vec_mask, tmp));\n-    vec_mask = lowpart_subreg (V4SFmode, vec_mask, V4SImode);\n-    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n-    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n-    emit_insn (gen_sse4_1_blendvps (op0, op1, op0, vec_mask));\n-  }\n+  op0 = lowpart_subreg (V4SFmode, force_reg (V8HFmode, operands[0]),\n+\t\t\tV8HFmode);\n+  if (!MEM_P (operands[1]))\n+    operands[1] = force_reg (V8HFmode, operands[1]);\n+  op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+  dest = gen_reg_rtx (V4SFmode);\n+  emit_insn (gen_avx512f_movsf_mask (dest, op1, op0, op1, operands[4]));\n+  emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest,\n+\t\t\t\t\t       V4SFmode));\n   DONE;\n })\n \n@@ -6631,7 +6620,7 @@\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx op0, op1, dest;\n \n   if (<round_embedded_complex>)\n     emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask<round_expand_name> (\n@@ -6641,26 +6630,15 @@\n     emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask (operands[0],\n       operands[1], operands[2], operands[3], operands[4]));\n \n-  if (TARGET_AVX512VL)\n-  {\n-    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n-    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n-    emit_insn (gen_avx512vl_loadv4sf_mask (op0, op0, op1, operands[4]));\n-  }\n-  else\n-  {\n-    rtx mask, tmp, vec_mask;\n-    mask = lowpart_subreg (SImode, operands[4], QImode),\n-    tmp = gen_reg_rtx (SImode);\n-    emit_insn (gen_ashlsi3 (tmp, mask, GEN_INT (31)));\n-    vec_mask = gen_reg_rtx (V4SImode);\n-    emit_insn (gen_rtx_SET (vec_mask, CONST0_RTX (V4SImode)));\n-    emit_insn (gen_vec_setv4si_0 (vec_mask, vec_mask, tmp));\n-    vec_mask = lowpart_subreg (V4SFmode, vec_mask, V4SImode);\n-    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n-    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n-    emit_insn (gen_sse4_1_blendvps (op0, op1, op0, vec_mask));\n-  }\n+  op0 = lowpart_subreg (V4SFmode, force_reg (V8HFmode, operands[0]),\n+\t\t\tV8HFmode);\n+  if (!MEM_P (operands[1]))\n+    operands[1] = force_reg (V8HFmode, operands[1]);\n+  op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+  dest = gen_reg_rtx (V4SFmode);\n+  emit_insn (gen_avx512f_movsf_mask (dest, op1, op0, op1, operands[4]));\n+  emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest,\n+\t\t\t\t\t       V4SFmode));\n   DONE;\n })\n "}, {"sha": "0f87861f09b254c64d80c6e89cd486ebb6707c0e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c?ref=7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mavx512fp16 -mno-avx512vl -O2\" } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendvps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "79a295f722cf8cd9f5f25bd1813f7730485cd952", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1c.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d156bb870225f442b32983983f94e731397fdb6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d156bb870225f442b32983983f94e731397fdb6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c?ref=d156bb870225f442b32983983f94e731397fdb6e", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-\n-#include \"avx512fp16-vfcmaddcsh-1a.c\"\n-"}, {"sha": "6b07957a8bbcdb977bd0753596f238f5ed9b0467", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c?ref=7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mavx512fp16 -mno-avx512vl -O2\" } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendvps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "7863f8f9af96c3891626186420f390c90d72280f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1c.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d156bb870225f442b32983983f94e731397fdb6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d156bb870225f442b32983983f94e731397fdb6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c?ref=d156bb870225f442b32983983f94e731397fdb6e", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n-\n-#include \"avx512fp16-vfmaddcsh-1a.c\"\n-"}, {"sha": "54788171affd83703c45596c48e930c02f070858", "filename": "gcc/testsuite/gcc.target/i386/pr104978.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104978.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bce0be03b857eefe5990c3ef0af06ea8f8ae04e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104978.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104978.c?ref=7bce0be03b857eefe5990c3ef0af06ea8f8ae04e", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/104978 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include<immintrin.h>\n+\n+__m128h\n+foo (__m128h a, __m128h b, __m128h c, __mmask8 m)\n+{ \n+  return _mm_mask_fmadd_round_sch (a, m, b, c, 8);\n+}\n+\n+__m128h\n+foo2 (__m128h a, __m128h b, __m128h c, __mmask8 m)\n+{ \n+  return _mm_mask_fcmadd_round_sch (a, m, b, c, 8);\n+}"}]}