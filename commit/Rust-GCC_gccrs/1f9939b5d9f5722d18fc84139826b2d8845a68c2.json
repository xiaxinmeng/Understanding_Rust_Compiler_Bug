{"sha": "1f9939b5d9f5722d18fc84139826b2d8845a68c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5OTM5YjVkOWY1NzIyZDE4ZmM4NDEzOTgyNmIyZDg4NDVhNjhjMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:54:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:54:52Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Check_Arg_Is_String_Literal): remove useless procedure\n\t(Analyze_Pragma): allow static string expression for name of Test_Case,\n\tinstead of simply string literals.\n\t* sem_util.adb (Get_Name_From_Test_Case_Pragma): adapt to static string\n\texpressions.\n\n2011-08-04  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Complete_Mains.Find_File_Add_Extension): Use canonical\n\tcase suffixes to find truncated main sources.\n\n2011-08-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* impunit.adb (Non_Imp_File_Names_95): Add g-tastus.\n\ts-stusta.adb (Compute_All_Task): Use Put_Line instead of Put.\n\t(Compute_Current_Task): Ditto.\n\n2011-08-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnat_ugn.texi: Mention GNAT.Task_Stack_Usage.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Is_Global_Constant): new function that detects\n\tlibrary-level constant.\n\t(Add_ALFA_Xrefs): ignore global constants in ALFA xref.\n\t* sem_res.adb (Resolve_Actuals): do not add cross-reference to Formal\n\tused as selector of parameter association, in ALFA mode.\n\nFrom-SVN: r177389", "tree": {"sha": "9ba8c776b625b0e2d8de3d8711b53c866e0052df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba8c776b625b0e2d8de3d8711b53c866e0052df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9939b5d9f5722d18fc84139826b2d8845a68c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9939b5d9f5722d18fc84139826b2d8845a68c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9939b5d9f5722d18fc84139826b2d8845a68c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9939b5d9f5722d18fc84139826b2d8845a68c2/comments", "author": null, "committer": null, "parents": [{"sha": "15d8a51dee9e80190ac43afc9b553976776e17a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d8a51dee9e80190ac43afc9b553976776e17a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d8a51dee9e80190ac43afc9b553976776e17a9"}], "stats": {"total": 134, "additions": 89, "deletions": 45}, "files": [{"sha": "01ac7c31ccb334e0c499ca26f165687caa32d963", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -1,3 +1,34 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Check_Arg_Is_String_Literal): remove useless procedure\n+\t(Analyze_Pragma): allow static string expression for name of Test_Case,\n+\tinstead of simply string literals.\n+\t* sem_util.adb (Get_Name_From_Test_Case_Pragma): adapt to static string\n+\texpressions.\n+\n+2011-08-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.adb (Complete_Mains.Find_File_Add_Extension): Use canonical\n+\tcase suffixes to find truncated main sources.\n+\n+2011-08-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* impunit.adb (Non_Imp_File_Names_95): Add g-tastus.\n+\ts-stusta.adb (Compute_All_Task): Use Put_Line instead of Put.\n+\t(Compute_Current_Task): Ditto.\n+\n+2011-08-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnat_ugn.texi: Mention GNAT.Task_Stack_Usage.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Is_Global_Constant): new function that detects\n+\tlibrary-level constant.\n+\t(Add_ALFA_Xrefs): ignore global constants in ALFA xref.\n+\t* sem_res.adb (Resolve_Actuals): do not add cross-reference to Formal\n+\tused as selector of parameter association, in ALFA mode.\n+\n 2011-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, exp_ch7.adb, exp_util.adb, bindgen.adb, sem_prag.adb,"}, {"sha": "d45a6fc3aa3130834ad4a5fe3e07e0df8ba53325", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -17285,6 +17285,9 @@ much has actually been used.\n The environment task stack, e.g., the stack that contains the main unit, is\n only processed when the environment variable GNAT_STACK_LIMIT is set.\n \n+@noident\n+The package @code{GNAT.Task_Stack_Usage} provides facilities to get\n+stack usage reports at run-time. See its body for the details.\n \n @c *********************************\n @c *            GNATCHECK          *"}, {"sha": "e58b345d72a4c26b8d7edca23d1175ca5cfe2c77", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -295,6 +295,7 @@ package body Impunit is\n      \"g-ssvety\",    -- GNAT.SSE.Vector_Types\n      \"g-table \",    -- GNAT.Table\n      \"g-tasloc\",    -- GNAT.Task_Lock\n+     \"g-tastus\",    -- GNAT.Task_Stack_Usage\n      \"g-thread\",    -- GNAT.Threads\n      \"g-timsta\",    -- GNAT.Time_Stamp\n      \"g-traceb\",    -- GNAT.Traceback"}, {"sha": "0e0a4ff2973f53a3db83e9c44cf98425e84e6211", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -524,6 +524,10 @@ package body ALFA is\n          function Is_ALFA_Scope (E : Entity_Id) return Boolean;\n          --  Return whether the entity or reference scope is adequate\n \n+         function Is_Global_Constant (E : Entity_Id) return Boolean;\n+         --  Return True if E is a global constant for which we should ignore\n+         --  reads in ALFA.\n+\n          -------------------\n          -- Is_ALFA_Scope --\n          -------------------\n@@ -536,6 +540,16 @@ package body ALFA is\n               and then Get_Scope_Num (E) /= No_Scope;\n          end Is_ALFA_Scope;\n \n+         ------------------------\n+         -- Is_Global_Constant --\n+         ------------------------\n+\n+         function Is_Global_Constant (E : Entity_Id) return Boolean is\n+         begin\n+            return Ekind (E) in E_Constant\n+              and then Ekind_In (Scope (E), E_Package, E_Package_Body);\n+         end Is_Global_Constant;\n+\n          --  Start of processing for Eliminate_Before_Sort\n       begin\n \n@@ -547,6 +561,7 @@ package body ALFA is\n               and then ALFA_References (Xrefs.Table (Rnums (J)).Typ)\n               and then Is_ALFA_Scope (Xrefs.Table (Rnums (J)).Ent_Scope)\n               and then Is_ALFA_Scope (Xrefs.Table (Rnums (J)).Ref_Scope)\n+              and then not Is_Global_Constant (Xrefs.Table (Rnums (J)).Ent)\n             then\n                Nrefs         := Nrefs + 1;\n                Rnums (Nrefs) := Rnums (J);"}, {"sha": "f091690eb1f436e63a2d002740dcb4f8afb93a14", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -1368,9 +1368,16 @@ package body Makeutl is\n                      Suffix :=\n                        Source.Language.Config.Naming_Data.Body_Suffix;\n \n-                     exit when Suffix /= No_File and then\n-                       Name_Buffer (Base_Main'Length + 1 .. Name_Len) =\n-                       Get_Name_String (Suffix);\n+                     if Suffix /= No_File then\n+                        declare\n+                           Suffix_Str : String := Get_Name_String (Suffix);\n+                        begin\n+                           Canonical_Case_File_Name (Suffix_Str);\n+                           exit when\n+                             Name_Buffer (Base_Main'Length + 1 .. Name_Len) =\n+                             Suffix_Str;\n+                        end;\n+                     end if;\n                   end if;\n \n                elsif Source.Kind = Spec then\n@@ -1385,12 +1392,18 @@ package body Makeutl is\n                      Suffix :=\n                        Source.Language.Config.Naming_Data.Spec_Suffix;\n \n-                     if Suffix /= No_File\n-                       and then\n-                         Name_Buffer (Base_Main'Length + 1 .. Name_Len) =\n-                         Get_Name_String (Suffix)\n-                     then\n-                        Spec_Source := Source;\n+                     if Suffix /= No_File then\n+                        declare\n+                           Suffix_Str : String := Get_Name_String (Suffix);\n+                        begin\n+                           Canonical_Case_File_Name (Suffix_Str);\n+\n+                           if Name_Buffer (Base_Main'Length + 1 .. Name_Len) =\n+                             Suffix_Str\n+                           then\n+                              Spec_Source := Source;\n+                           end if;\n+                        end;\n                      end if;\n                   end if;\n                end if;"}, {"sha": "f899266218eb62072c9a038a43f02352c16890f5", "filename": "gcc/ada/s-stusta.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fs-stusta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fs-stusta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stusta.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -92,7 +92,7 @@ package body System.Stack_Usage.Tasking is\n       use type System.Tasking.Task_Id;\n    begin\n       if not System.Stack_Usage.Is_Enabled then\n-         Put (\"Stack Usage not enabled: bind with -uNNN switch\");\n+         Put_Line (\"Stack Usage not enabled: bind with -uNNN switch\");\n       else\n \n          --  Loop over all tasks\n@@ -118,7 +118,7 @@ package body System.Stack_Usage.Tasking is\n    procedure Compute_Current_Task is\n    begin\n       if not System.Stack_Usage.Is_Enabled then\n-         Put (\"Stack Usage not enabled: bind with -uNNN switch\");\n+         Put_Line (\"Stack Usage not enabled: bind with -uNNN switch\");\n       else\n \n          --  The current task"}, {"sha": "8c95ada1cc44fbe68d15b728740b98a8e5e043b8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -335,10 +335,6 @@ package body Sem_Prag is\n       --  Check the specified argument Arg to make sure that it is an integer\n       --  literal. If not give error and raise Pragma_Exit.\n \n-      procedure Check_Arg_Is_String_Literal (Arg : Node_Id);\n-      --  Check the specified argument Arg to make sure that it is a string\n-      --  literal. If not give error and raise Pragma_Exit.\n-\n       procedure Check_Arg_Is_Library_Level_Local_Name (Arg : Node_Id);\n       --  Check the specified argument Arg to make sure that it has the proper\n       --  syntactic form for a local name and meets the semantic requirements\n@@ -426,9 +422,9 @@ package body Sem_Prag is\n       --  Checks that the given argument has an identifier, and if so, requires\n       --  it to match one of the given identifier names. If there is no\n       --  identifier, or a non-matching identifier, then an error message is\n-      --  given and Pragma_Exit is raised. ??? why is this needed, why isnt\n-      --  Check_Arg_Is_One_Of good enough. At the very least explain this\n-      --  odd apparent redundancy\n+      --  given and Pragma_Exit is raised. This checks the optional identifier\n+      --  of a pragma argument, not the argument itself like\n+      --  Check_Arg_Is_One_Of does.\n \n       procedure Check_In_Main_Program;\n       --  Common checks for pragmas that appear within a main program\n@@ -901,19 +897,6 @@ package body Sem_Prag is\n          end if;\n       end Check_Arg_Is_Integer_Literal;\n \n-      ---------------------------------\n-      -- Check_Arg_Is_String_Literal --\n-      ---------------------------------\n-\n-      procedure Check_Arg_Is_String_Literal (Arg : Node_Id) is\n-         Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n-      begin\n-         if Nkind (Argx) /= N_String_Literal then\n-            Error_Pragma_Arg\n-              (\"argument for pragma% must be string literal\", Argx);\n-         end if;\n-      end Check_Arg_Is_String_Literal;\n-\n       -------------------------------------------\n       -- Check_Arg_Is_Library_Level_Local_Name --\n       -------------------------------------------\n@@ -13264,17 +13247,12 @@ package body Sem_Prag is\n          -- Test_Case --\n          ---------------\n \n-         --  pragma Test_Case ([Name     =>] String_EXPRESSION\n+         --  pragma Test_Case ([Name     =>] static_string_EXPRESSION\n          --                   ,[Mode     =>] (Normal | Robustness)\n          --                  [, Requires =>  Boolean_EXPRESSION]\n          --                  [, Ensures  =>  Boolean_EXPRESSION]);\n \n-         --  ??? Why is Name not static_string_EXPRESSION??? Seems very\n-         --  weird to require it to be a string literal, and if we DO want\n-         --  that restriction the grammar should make this clear.\n-\n          when Pragma_Test_Case => Test_Case : declare\n-\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (3);\n@@ -13283,17 +13261,14 @@ package body Sem_Prag is\n               ((Name_Name, Name_Mode, Name_Requires, Name_Ensures));\n \n             Check_Optional_Identifier (Arg1, Name_Name);\n-            Check_Arg_Is_String_Literal (Arg1);\n+            Check_Arg_Is_Static_Expression (Arg1, Standard_String);\n             Check_Optional_Identifier (Arg2, Name_Mode);\n             Check_Arg_Is_One_Of (Arg2, Name_Normal, Name_Robustness);\n \n             if Arg_Count = 4 then\n                Check_Identifier (Arg3, Name_Requires);\n                Check_Identifier (Arg4, Name_Ensures);\n             else\n-               --  ??? why not Check_Arg_Is_One_Of, very odd!!! At the very\n-               --  least needs an explanation!\n-\n                Check_Identifier_Is_One_Of (Arg3, Name_Requires, Name_Ensures);\n             end if;\n "}, {"sha": "f383809bf3d1b3faa4bfdd2bb0dd046a9b200887", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -3971,9 +3971,14 @@ package body Sem_Res is\n             Eval_Actual (A);\n \n             --  If it is a named association, treat the selector_name as a\n-            --  proper identifier, and mark the corresponding entity.\n+            --  proper identifier, and mark the corresponding entity. Ignore\n+            --  this reference in ALFA mode, as it refers to an entity not in\n+            --  scope at the point of reference, so the reference should be\n+            --  ignored for computing effects of subprograms.\n \n-            if Nkind (Parent (A)) = N_Parameter_Association then\n+            if Nkind (Parent (A)) = N_Parameter_Association\n+              and then not ALFA_Mode\n+            then\n                Set_Entity (Selector_Name (Parent (A)), F);\n                Generate_Reference (F, Selector_Name (Parent (A)));\n                Set_Etype (Selector_Name (Parent (A)), F_Typ);"}, {"sha": "0c36811ec5bdfa9cec2f8dfcb7d95c02ac4d84bc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9939b5d9f5722d18fc84139826b2d8845a68c2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1f9939b5d9f5722d18fc84139826b2d8845a68c2", "patch": "@@ -4336,9 +4336,10 @@ package body Sem_Util is\n    ------------------------------------\n \n    function Get_Name_From_Test_Case_Pragma (N : Node_Id) return String_Id is\n+      Arg : constant Node_Id :=\n+              Get_Pragma_Arg (First (Pragma_Argument_Associations (N)));\n    begin\n-      return\n-        Strval (Get_Pragma_Arg (First (Pragma_Argument_Associations (N))));\n+      return Strval (Expr_Value_S (Arg));\n    end Get_Name_From_Test_Case_Pragma;\n \n    -------------------"}]}