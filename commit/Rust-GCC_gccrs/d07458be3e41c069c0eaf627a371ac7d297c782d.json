{"sha": "d07458be3e41c069c0eaf627a371ac7d297c782d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3NDU4YmUzZTQxYzA2OWMwZWFmNjI3YTM3MWFjN2QyOTdjNzgyZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-11T08:58:34Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-11T08:58:34Z"}, "message": "[PATCH, AARCH64] Fix unrecognizable insn issue with vcond against 0.0f\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_vcond_internal): Fix\n\tfloating-point vector comparisons against 0.\n\ngcc/testsuite/\n   \t* gcc.target/aarch64/vect-fcm.x: Add check for zero forms of\n\tinverse operands.\n\t* gcc.target/aarch64/vect-fcm-eq-d.c: Check that new zero form\n\tloop is vectorized.\n   \t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n   \t* gcc.target/aarch64/vect-fcm-ge-d.c: Check that new zero form\n\tloop is vectorized and that the correct instruction is generated.\n   \t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n   \t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n   \t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n\nFrom-SVN: r197741", "tree": {"sha": "6a3a34a69243fe5d1a1d77ded71e1292680d2ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a3a34a69243fe5d1a1d77ded71e1292680d2ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07458be3e41c069c0eaf627a371ac7d297c782d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07458be3e41c069c0eaf627a371ac7d297c782d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07458be3e41c069c0eaf627a371ac7d297c782d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07458be3e41c069c0eaf627a371ac7d297c782d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "146b8692e33b78872476435d084d5062a243a200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146b8692e33b78872476435d084d5062a243a200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146b8692e33b78872476435d084d5062a243a200"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "24a179275c5e098b743f93ed1ba37fd5e3d161f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -1,3 +1,8 @@\n+2013-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_vcond_internal): Fix\n+\tfloating-point vector comparisons against 0.\n+\n 2013-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56899"}, {"sha": "f72a2e2ff4b765b207e27d63f2e0edbd4a2e6134", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -1622,6 +1622,7 @@\n   \"TARGET_SIMD\"\n {\n   int inverse = 0;\n+  int use_zero_form = 0;\n   int swap_bsl_operands = 0;\n   rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n   rtx tmp = gen_reg_rtx (<V_cmp_result>mode);\n@@ -1632,12 +1633,16 @@\n   switch (GET_CODE (operands[3]))\n     {\n     case GE:\n+    case GT:\n     case LE:\n+    case LT:\n     case EQ:\n-      if (!REG_P (operands[5])\n-\t  && (operands[5] != CONST0_RTX (<MODE>mode)))\n-\toperands[5] = force_reg (<MODE>mode, operands[5]);\n-      break;\n+      if (operands[5] == CONST0_RTX (<MODE>mode))\n+\t{\n+\t  use_zero_form = 1;\n+\t  break;\n+\t}\n+      /* Fall through.  */\n     default:\n       if (!REG_P (operands[5]))\n \toperands[5] = force_reg (<MODE>mode, operands[5]);\n@@ -1688,7 +1693,26 @@\n \t a GT b -> a GT b\n \t a LE b -> b GE a\n \t a LT b -> b GT a\n-\t a EQ b -> a EQ b  */\n+\t a EQ b -> a EQ b\n+\t Note that there also exist direct comparison against 0 forms,\n+\t so catch those as a special case.  */\n+      if (use_zero_form)\n+\t{\n+\t  inverse = 0;\n+\t  switch (GET_CODE (operands[3]))\n+\t    {\n+\t    case LT:\n+\t      base_comparison = gen_aarch64_cmlt<mode>;\n+\t      break;\n+\t    case LE:\n+\t      base_comparison = gen_aarch64_cmle<mode>;\n+\t      break;\n+\t    default:\n+\t      /* Do nothing, other zero form cases already have the correct\n+\t\t base_comparison.  */\n+\t      break;\n+\t    }\n+\t}\n \n       if (!inverse)\n \temit_insn (base_comparison (mask, operands[4], operands[5]));"}, {"sha": "abe23e239f765ddbe40e41ab736f127dd63a370d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -1,3 +1,16 @@\n+2013-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-fcm.x: Add check for zero forms of\n+\tinverse operands.\n+\t* gcc.target/aarch64/vect-fcm-eq-d.c: Check that new zero form\n+\tloop is vectorized.\n+\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Check that new zero form\n+\tloop is vectorized and that the correct instruction is generated.\n+\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n+\n 2013-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56899"}, {"sha": "19ecd63b1d1371beb40d75220dac0e3f53d2d959", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,7 +7,7 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "30be5adf529fd9ed96dfc4151e84111bd89b24f3", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,7 +7,7 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b922833be8c97a687f3495f24f8b758d42c12c21", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,8 +7,9 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n+/* { dg-final { scan-assembler \"fcmlt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "04d3533ffe3657f22581804b5e412f052447a6b7", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,8 +7,9 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n+/* { dg-final { scan-assembler \"fcmlt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "421a04acfb407655b5bd56e5900a2ed6d7f5eba3", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,8 +7,9 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n+/* { dg-final { scan-assembler \"fcmle\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cdeab14e0ed90f75162deb4900531d39f2631965", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -7,8 +7,9 @@\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n+/* { dg-final { scan-assembler \"fcmle\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "803861b02930cf54d979b556c2f2c083b6adf7d6", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm.x", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07458be3e41c069c0eaf627a371ac7d297c782d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x?ref=d07458be3e41c069c0eaf627a371ac7d297c782d", "patch": "@@ -40,6 +40,15 @@ foobar (FTYPE *in1, FTYPE *in2, FTYPE *output)\n     output[i] = (in1[i] OP 0.0) ? 4.0 : 2.0;\n }\n \n+void\n+foobarbar (FTYPE *in1, FTYPE *in2, FTYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] INV_OP 0.0) ? 4.0 : 2.0;\n+}\n+\n int\n main (int argc, char **argv)\n {\n@@ -51,6 +60,11 @@ main (int argc, char **argv)\n   for (i = 0; i < N; i++)\n     if (out1[i] != out2[i])\n       abort ();\n+  foobar (input1, input2, out1);\n+  foobarbar (input1, input2, out2);\n+  for (i = 0; i < N; i++)\n+    if (out1[i] == out2[i])\n+      abort ();\n   return 0;\n }\n "}]}