{"sha": "f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmZmFkZTA5YzNjYzEzZWIxYTE5OWEyNDUxN2I5YjE5MDljNmU4MA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-07-21T19:15:13Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-07-21T19:15:13Z"}, "message": "ssa-iterators.h (has_zero_uses, [...]): Implement as straight loops.\n\n\n2015-07-21  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* ssa-iterators.h (has_zero_uses, has_single_use): Implement as\n\tstraight loops.\n\t(single_imm_use): Check for iterator node.\n\t(num_imm_uses): Likewise.\n\t* tree-ssa-operands.c (has_zero_uses_1): Delete.\n\t(single_imm_use_1): Check for iterator node.\n\nFrom-SVN: r226051", "tree": {"sha": "15769f2b54469137ff69aba07b201d29a7b12110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15769f2b54469137ff69aba07b201d29a7b12110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/comments", "author": null, "committer": null, "parents": [{"sha": "324000329be228765b56c2b11d24256a8a30000e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324000329be228765b56c2b11d24256a8a30000e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324000329be228765b56c2b11d24256a8a30000e"}], "stats": {"total": 90, "additions": 37, "deletions": 53}, "files": [{"sha": "240cbefe5007f3e6d43e557ebe2ab348d885165a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "patch": "@@ -1,3 +1,12 @@\n+2015-07-21  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* ssa-iterators.h (has_zero_uses, has_single_use): Implement as\n+\tstraight loops.\n+\t(single_imm_use): Check for iterator node.\n+\t(num_imm_uses): Likewise.\n+\t* tree-ssa-operands.c (has_zero_uses_1): Delete.\n+\t(single_imm_use_1): Check for iterator node.\n+\n 2015-07-21  Mike Frysinger  <vapier@gentoo.org>\n \t    Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n "}, {"sha": "a9bf6990fa3fa5489d878c7e5e5e9d95186100b1", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 26, "deletions": 36, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "patch": "@@ -114,7 +114,6 @@ struct imm_use_iterator\n \n \n \n-extern bool has_zero_uses_1 (const ssa_use_operand_t *head);\n extern bool single_imm_use_1 (const ssa_use_operand_t *head,\n \t\t\t      use_operand_p *use_p, gimple *stmt);\n \n@@ -379,42 +378,36 @@ next_readonly_imm_use (imm_use_iterator *imm)\n static inline bool\n has_zero_uses (const_tree var)\n {\n-  const ssa_use_operand_t *const ptr = &(SSA_NAME_IMM_USE_NODE (var));\n-\n-  /* A single use_operand means there is no items in the list.  */\n-  if (ptr == ptr->next)\n-    return true;\n+  const ssa_use_operand_t *const head = &(SSA_NAME_IMM_USE_NODE (var));\n+  const ssa_use_operand_t *ptr;\n \n-  /* If there are debug stmts, we have to look at each use and see\n-     whether there are any nondebug uses.  */\n-  if (!MAY_HAVE_DEBUG_STMTS)\n-    return false;\n+  for (ptr = head->next; ptr != head; ptr = ptr->next)\n+    if (USE_STMT (ptr) && !is_gimple_debug (USE_STMT (ptr)))\n+      return false;\n \n-  return has_zero_uses_1 (ptr);\n+  return true;\n }\n \n /* Return true if VAR has a single nondebug use.  */\n static inline bool\n has_single_use (const_tree var)\n {\n-  const ssa_use_operand_t *const ptr = &(SSA_NAME_IMM_USE_NODE (var));\n-\n-  /* If there aren't any uses whatsoever, we're done.  */\n-  if (ptr == ptr->next)\n-    return false;\n-\n-  /* If there's a single use, check that it's not a debug stmt.  */\n-  if (ptr == ptr->next->next)\n-    return !is_gimple_debug (USE_STMT (ptr->next));\n-\n-  /* If there are debug stmts, we have to look at each of them.  */\n-  if (!MAY_HAVE_DEBUG_STMTS)\n-    return false;\n-\n-  return single_imm_use_1 (ptr, NULL, NULL);\n-}\n-\n-\n+  const ssa_use_operand_t *const head = &(SSA_NAME_IMM_USE_NODE (var));\n+  const ssa_use_operand_t *ptr;\n+  bool single = false;\n+   \n+  for (ptr = head->next; ptr != head; ptr = ptr->next)\n+    if (USE_STMT(ptr) && !is_gimple_debug (USE_STMT (ptr)))\n+      {\n+\tif (single)\n+\t  return false;\n+\telse \n+\t  single = true;\n+      }\n+\n+  return single;\n+}\n+    \n /* If VAR has only a single immediate nondebug use, return true, and\n    set USE_P and STMT to the use pointer and stmt of occurrence.  */\n static inline bool\n@@ -434,7 +427,7 @@ single_imm_use (const_tree var, use_operand_p *use_p, gimple *stmt)\n   /* If there's a single use, check that it's not a debug stmt.  */\n   if (ptr == ptr->next->next)\n     {\n-      if (!is_gimple_debug (USE_STMT (ptr->next)))\n+      if (USE_STMT (ptr->next) && !is_gimple_debug (USE_STMT (ptr->next)))\n \t{\n \t  *use_p = ptr->next;\n \t  *stmt = ptr->next->loc.stmt;\n@@ -444,10 +437,6 @@ single_imm_use (const_tree var, use_operand_p *use_p, gimple *stmt)\n \tgoto return_false;\n     }\n \n-  /* If there are debug stmts, we have to look at each of them.  */\n-  if (!MAY_HAVE_DEBUG_STMTS)\n-    goto return_false;\n-\n   return single_imm_use_1 (ptr, use_p, stmt);\n }\n \n@@ -461,10 +450,11 @@ num_imm_uses (const_tree var)\n \n   if (!MAY_HAVE_DEBUG_STMTS)\n     for (ptr = start->next; ptr != start; ptr = ptr->next)\n-      num++;\n+      if (USE_STMT (ptr))\n+\tnum++;\n   else\n     for (ptr = start->next; ptr != start; ptr = ptr->next)\n-      if (!is_gimple_debug (USE_STMT (ptr)))\n+      if (USE_STMT (ptr) && !is_gimple_debug (USE_STMT (ptr)))\n \tnum++;\n \n   return num;"}, {"sha": "b1e3f99337a5152e200e344ec48a3f1f5129272b", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ffade09c3cc13eb1a199a24517b9b1909c6e80/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=f9ffade09c3cc13eb1a199a24517b9b1909c6e80", "patch": "@@ -1304,22 +1304,6 @@ unlink_stmt_vdef (gimple stmt)\n     SSA_NAME_OCCURS_IN_ABNORMAL_PHI (vuse) = 1;\n }\n \n-\n-/* Return true if the var whose chain of uses starts at PTR has no\n-   nondebug uses.  */\n-bool\n-has_zero_uses_1 (const ssa_use_operand_t *head)\n-{\n-  const ssa_use_operand_t *ptr;\n-\n-  for (ptr = head->next; ptr != head; ptr = ptr->next)\n-    if (!is_gimple_debug (USE_STMT (ptr)))\n-      return false;\n-\n-  return true;\n-}\n-\n-\n /* Return true if the var whose chain of uses starts at PTR has a\n    single nondebug use.  Set USE_P and STMT to that single nondebug\n    use, if so, or to NULL otherwise.  */\n@@ -1330,7 +1314,7 @@ single_imm_use_1 (const ssa_use_operand_t *head,\n   ssa_use_operand_t *ptr, *single_use = 0;\n \n   for (ptr = head->next; ptr != head; ptr = ptr->next)\n-    if (!is_gimple_debug (USE_STMT (ptr)))\n+    if (USE_STMT(ptr) && !is_gimple_debug (USE_STMT (ptr)))\n       {\n \tif (single_use)\n \t  {\n@@ -1348,3 +1332,4 @@ single_imm_use_1 (const ssa_use_operand_t *head,\n \n   return single_use;\n }\n+"}]}