{"sha": "75647adecab60e14e0d5473245c338ed2c3a846e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU2NDdhZGVjYWI2MGUxNGUwZDU0NzMyNDVjMzM4ZWQyYzNhODQ2ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-07T12:29:05Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-07T12:29:05Z"}, "message": "m68k.c (m68k_sched_branch_type): Remove.\n\n\t* config/m68k/m68k.c (m68k_sched_branch_type): Remove.\n\t(sched_branch_type): Remove.\n\t(m68k_sched_md_init_global): Don't allocate it.\n\t(m68k_sched_md_finish_global): Don't free it.\n\t* config/m68k/m68k.h (m68k_sched_branch_type): Remove prototype.\n\t* config/m68k/m68k.md: Set the type of insns using m68k_sched_branch_type\n\tto bcc directly.\n\nFrom-SVN: r187234", "tree": {"sha": "c93350e13588b280b9f58d91331133dfd1ef95ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93350e13588b280b9f58d91331133dfd1ef95ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75647adecab60e14e0d5473245c338ed2c3a846e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75647adecab60e14e0d5473245c338ed2c3a846e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75647adecab60e14e0d5473245c338ed2c3a846e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75647adecab60e14e0d5473245c338ed2c3a846e/comments", "author": null, "committer": null, "parents": [{"sha": "7d7f7fb7700f62ae33d9a74acac060818842e6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7f7fb7700f62ae33d9a74acac060818842e6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7f7fb7700f62ae33d9a74acac060818842e6b8"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "a73b9e34dbcee6c211054ed30a94dcfde6bc4685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75647adecab60e14e0d5473245c338ed2c3a846e", "patch": "@@ -1,3 +1,13 @@\n+2012-05-07  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/m68k/m68k.c (m68k_sched_branch_type): Remove.\n+\t(sched_branch_type): Remove.\n+\t(m68k_sched_md_init_global): Don't allocate it.\n+\t(m68k_sched_md_finish_global): Don't free it.\n+\t* config/m68k/m68k.h (m68k_sched_branch_type): Remove prototype.\n+\t* config/m68k/m68k.md: Set the type of insns using m68k_sched_branch_type\n+\tto bcc directly.\n+\n 2012-05-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/sol2.c (solaris_override_options): New function."}, {"sha": "c77958812dc2556e95a4e0f6302d67df890863d9", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=75647adecab60e14e0d5473245c338ed2c3a846e", "patch": "@@ -81,7 +81,6 @@ extern enum attr_opx_type m68k_sched_attr_opx_type (rtx, int);\n extern enum attr_opy_type m68k_sched_attr_opy_type (rtx, int);\n extern enum attr_size m68k_sched_attr_size (rtx);\n extern enum attr_op_mem m68k_sched_attr_op_mem (rtx);\n-extern enum attr_type m68k_sched_branch_type (rtx);\n #endif /* HAVE_ATTR_cpu */\n \n #endif /* RTX_CODE */"}, {"sha": "c6b2ce3aff300237f62ef80f8e7baac3b98552ed", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=75647adecab60e14e0d5473245c338ed2c3a846e", "patch": "@@ -5882,26 +5882,6 @@ m68k_sched_attr_op_mem (rtx insn)\n   return OP_MEM_I1;\n }\n \n-/* Jump instructions types.  Indexed by INSN_UID.\n-   The same rtl insn can be expanded into different asm instructions\n-   depending on the cc0_status.  To properly determine type of jump\n-   instructions we scan instruction stream and map jumps types to this\n-   array.  */\n-static enum attr_type *sched_branch_type;\n-\n-/* Return the type of the jump insn.  */\n-enum attr_type\n-m68k_sched_branch_type (rtx insn)\n-{\n-  enum attr_type type;\n-\n-  type = sched_branch_type[INSN_UID (insn)];\n-\n-  gcc_assert (type != 0);\n-\n-  return type;\n-}\n-\n /* Data for ColdFire V4 index bypass.\n    Producer modifies register that is used as index in consumer with\n    specified scale.  */\n@@ -6125,20 +6105,6 @@ m68k_sched_md_init_global (FILE *sched_dump ATTRIBUTE_UNUSED,\n \t\t\t   int sched_verbose ATTRIBUTE_UNUSED,\n \t\t\t   int n_insns ATTRIBUTE_UNUSED)\n {\n-  /* Init branch types.  */\n-  {\n-    rtx insn;\n-\n-    sched_branch_type = XCNEWVEC (enum attr_type, get_max_uid () + 1);\n-\n-    for (insn = get_insns (); insn != NULL_RTX; insn = NEXT_INSN (insn))\n-      {\n-\tif (JUMP_P (insn))\n-\t  /* !!! FIXME: Implement real scan here.  */\n-\t  sched_branch_type[INSN_UID (insn)] = TYPE_BCC;\n-      }\n-  }\n-\n #ifdef ENABLE_CHECKING\n   /* Check that all instructions have DFA reservations and\n      that all instructions can be issued from a clean state.  */\n@@ -6220,9 +6186,6 @@ m68k_sched_md_finish_global (FILE *dump ATTRIBUTE_UNUSED,\n   sched_ib.records.adjust = NULL;\n   sched_ib.records.n_insns = 0;\n   max_insn_size = 0;\n-\n-  free (sched_branch_type);\n-  sched_branch_type = NULL;\n }\n \n /* Implementation of targetm.sched.init () hook."}, {"sha": "8fc81b53e0977b69d022aee12c570b251d0246c1", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75647adecab60e14e0d5473245c338ed2c3a846e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=75647adecab60e14e0d5473245c338ed2c3a846e", "patch": "@@ -6346,7 +6346,7 @@\n {\n   OUTPUT_JUMP (\"jeq %l0\", \"fjeq %l0\", \"jeq %l0\");\n }\n-  [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n+  [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bne\"\n   [(set (pc)\n@@ -6358,7 +6358,7 @@\n {\n   OUTPUT_JUMP (\"jne %l0\", \"fjne %l0\", \"jne %l0\");\n }\n-  [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n+  [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bgt\"\n   [(set (pc)\n@@ -6376,7 +6376,7 @@\n \n   OUTPUT_JUMP (\"jgt %l0\", \"fjgt %l0\", 0);\n }\n-  [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n+  [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bgtu\"\n   [(set (pc)\n@@ -6412,7 +6412,7 @@\n \n   OUTPUT_JUMP (\"jlt %l0\", \"fjlt %l0\", \"jmi %l0\");\n }\n-  [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n+  [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bltu\"\n   [(set (pc)"}]}