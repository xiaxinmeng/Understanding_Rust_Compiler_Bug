{"sha": "458692b00c947e500d42d2704c3a38604ee6b451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4NjkyYjAwYzk0N2U1MDBkNDJkMjcwNGMzYTM4NjA0ZWU2YjQ1MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-20T16:46:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-20T16:46:46Z"}, "message": "Check for duplicate parameter/result names.\n\nFrom-SVN: r179010", "tree": {"sha": "f418101b123973bea669d8eed9ad229dbf0a64be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f418101b123973bea669d8eed9ad229dbf0a64be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/458692b00c947e500d42d2704c3a38604ee6b451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458692b00c947e500d42d2704c3a38604ee6b451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458692b00c947e500d42d2704c3a38604ee6b451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458692b00c947e500d42d2704c3a38604ee6b451/comments", "author": null, "committer": null, "parents": [{"sha": "40ebf57b67ae30304a7c12fcbac885a8eb6463ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ebf57b67ae30304a7c12fcbac885a8eb6463ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ebf57b67ae30304a7c12fcbac885a8eb6463ce"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "be7592b136a91aeabc82570baf3801a20aedd4a7", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=458692b00c947e500d42d2704c3a38604ee6b451", "patch": "@@ -4482,6 +4482,12 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n \n     case Named_object::NAMED_OBJECT_VAR:\n     case Named_object::NAMED_OBJECT_RESULT_VAR:\n+      // We have already given an error in the parser for cases where\n+      // one parameter or result variable redeclares another one.\n+      if ((new_object->is_variable()\n+\t   && new_object->var_value()->is_parameter())\n+\t  || new_object->is_result_variable())\n+\treturn old_object;\n       break;\n \n     case Named_object::NAMED_OBJECT_SINK:"}, {"sha": "29f4c69d82b4fff272db99be221fcba5c86ee217", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=458692b00c947e500d42d2704c3a38604ee6b451", "patch": "@@ -677,6 +677,32 @@ Parse::channel_type()\n   return Type::make_channel_type(send, receive, element_type);\n }\n \n+// Give an error for a duplicate parameter or receiver name.\n+\n+void\n+Parse::check_signature_names(const Typed_identifier_list* params,\n+\t\t\t     Parse::Names* names)\n+{\n+  for (Typed_identifier_list::const_iterator p = params->begin();\n+       p != params->end();\n+       ++p)\n+    {\n+      if (p->name().empty() || Gogo::is_sink_name(p->name()))\n+\tcontinue;\n+      std::pair<std::string, const Typed_identifier*> val =\n+\tstd::make_pair(p->name(), &*p);\n+      std::pair<Parse::Names::iterator, bool> ins = names->insert(val);\n+      if (!ins.second)\n+\t{\n+\t  error_at(p->location(), \"redefinition of %qs\",\n+\t\t   Gogo::message_name(p->name()).c_str());\n+\t  inform(ins.first->second->location(),\n+\t\t \"previous definition of %qs was here\",\n+\t\t Gogo::message_name(p->name()).c_str());\n+\t}\n+    }\n+}\n+\n // Signature      = Parameters [ Result ] .\n \n // RECEIVER is the receiver if there is one, or NULL.  LOCATION is the\n@@ -691,18 +717,24 @@ Parse::signature(Typed_identifier* receiver, source_location location)\n   Typed_identifier_list* params;\n   bool params_ok = this->parameters(&params, &is_varargs);\n \n-  Typed_identifier_list* result = NULL;\n+  Typed_identifier_list* results = NULL;\n   if (this->peek_token()->is_op(OPERATOR_LPAREN)\n       || this->type_may_start_here())\n     {\n-      if (!this->result(&result))\n+      if (!this->result(&results))\n \treturn NULL;\n     }\n \n   if (!params_ok)\n     return NULL;\n \n-  Function_type* ret = Type::make_function_type(receiver, params, result,\n+  Parse::Names names;\n+  if (params != NULL)\n+    this->check_signature_names(params, &names);\n+  if (results != NULL)\n+    this->check_signature_names(results, &names);\n+\n+  Function_type* ret = Type::make_function_type(receiver, params, results,\n \t\t\t\t\t\tlocation);\n   if (is_varargs)\n     ret->set_is_varargs();"}, {"sha": "0da86fbae42e9b9b8e9b36b8694fb62af02ef550", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458692b00c947e500d42d2704c3a38604ee6b451/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=458692b00c947e500d42d2704c3a38604ee6b451", "patch": "@@ -131,6 +131,9 @@ class Parse\n   // A set of Enclosing_var entries.\n   typedef std::set<Enclosing_var, Enclosing_var_comparison> Enclosing_vars;\n \n+  // Used to detect duplicate parameter/result names.\n+  typedef std::map<std::string, const Typed_identifier*> Names;\n+\n   // Peek at the current token from the lexer.\n   const Token*\n   peek_token();\n@@ -165,6 +168,7 @@ class Parse\n   void field_decl(Struct_field_list*);\n   Type* pointer_type();\n   Type* channel_type();\n+  void check_signature_names(const Typed_identifier_list*, Names*);\n   Function_type* signature(Typed_identifier*, source_location);\n   bool parameters(Typed_identifier_list**, bool* is_varargs);\n   Typed_identifier_list* parameter_list(bool* is_varargs);"}]}