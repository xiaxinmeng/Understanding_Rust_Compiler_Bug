{"sha": "20b47be02cc8a1bde28519b496a5acea5419c995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiNDdiZTAyY2M4YTFiZGUyODUxOWI0OTZhNWFjZWE1NDE5Yzk5NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-16T17:13:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-16T17:13:41Z"}, "message": "PR libstdc++/86537 remove less<shared_ptr<T>> partial specialization\n\nThe standard doesn't specify this partial specialization (it was\nrequired after the changes in N2637 but then should have been removed\nfollowing LWG 1262). Its presence is observable because it causes\ndifferent results when operator< has been overloaded for a shared_ptr\nspecialization.\n\n\tPR libstdc++/86537\n\t* include/bits/shared_ptr.h (less<shared_ptr<_Tp>>): Remove\n\tnon-standard partial specialization.\n\t* include/bits/shared_ptr_base.h (_Sp_less): Remove class definition.\n\t(less<__shared_ptr<_Tp, _Lp>): Remove partial specialization.\n\t* testsuite/20_util/shared_ptr/comparison/86537.cc: New test.\n\nFrom-SVN: r262739", "tree": {"sha": "24156815bed6f991ee7acdf1d1d62a0fc4e41642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24156815bed6f991ee7acdf1d1d62a0fc4e41642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b47be02cc8a1bde28519b496a5acea5419c995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b47be02cc8a1bde28519b496a5acea5419c995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b47be02cc8a1bde28519b496a5acea5419c995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b47be02cc8a1bde28519b496a5acea5419c995/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee1228ecd5f5c6e3ff4ac07e4b7f45c79211576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee1228ecd5f5c6e3ff4ac07e4b7f45c79211576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee1228ecd5f5c6e3ff4ac07e4b7f45c79211576"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "cad666123deb352125294181fe35131da6729845", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=20b47be02cc8a1bde28519b496a5acea5419c995", "patch": "@@ -1,3 +1,12 @@\n+2018-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/86537\n+\t* include/bits/shared_ptr.h (less<shared_ptr<_Tp>>): Remove\n+\tnon-standard partial specialization.\n+\t* include/bits/shared_ptr_base.h (_Sp_less): Remove class definition.\n+\t(less<__shared_ptr<_Tp, _Lp>): Remove partial specialization.\n+\t* testsuite/20_util/shared_ptr/comparison/86537.cc: New test.\n+\n 2018-07-16  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/abi/post/s390-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "2a82f18632840d89f362b998c2ebfe7bc4f6061f", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=20b47be02cc8a1bde28519b496a5acea5419c995", "patch": "@@ -480,10 +480,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(nullptr < __a); }\n \n-  template<typename _Tp>\n-    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>\n-    { };\n-\n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void"}, {"sha": "f3994da158f6885e5c23230e9b4c280aaa2b54f5", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=20b47be02cc8a1bde28519b496a5acea5419c995", "patch": "@@ -1502,22 +1502,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n     { return !(nullptr < __a); }\n \n-  template<typename _Sp>\n-    struct _Sp_less : public binary_function<_Sp, _Sp, bool>\n-    {\n-      bool\n-      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept\n-      {\n-\ttypedef typename _Sp::element_type element_type;\n-\treturn std::less<element_type*>()(__lhs.get(), __rhs.get());\n-      }\n-    };\n-\n-  template<typename _Tp, _Lock_policy _Lp>\n-    struct less<__shared_ptr<_Tp, _Lp>>\n-    : public _Sp_less<__shared_ptr<_Tp, _Lp>>\n-    { };\n-\n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n   template<typename _Tp, _Lock_policy _Lp>\n     inline void"}, {"sha": "c8440a38ad0f1fb684881ad2d14f9a6a301bf183", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/86537.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F86537.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b47be02cc8a1bde28519b496a5acea5419c995/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F86537.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2F86537.cc?ref=20b47be02cc8a1bde28519b496a5acea5419c995", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct Should_not_happen { };\n+\n+struct X { };\n+\n+namespace std {\n+  template<> struct less<X*> {\n+    bool operator()(X*, X*) const { throw Should_not_happen(); }\n+  };\n+}\n+\n+bool custom_op_called = false;\n+\n+bool\n+operator<(const std::shared_ptr<X>&, const std::shared_ptr<X>&)\n+{\n+  custom_op_called = true;\n+  return false;\n+}\n+\n+void\n+test01()\n+{\n+  const std::shared_ptr<X> sp;\n+  bool b = sp < sp;\n+  VERIFY( !b );\n+  VERIFY( custom_op_called );\n+\n+  std::less<std::shared_ptr<X>> lt;\n+  custom_op_called = false;\n+  b = lt(sp, sp);\n+  VERIFY( !b );\n+  VERIFY( custom_op_called ); // PR libstdc++/86537 and LWG DR 1262\n+\n+#if __cplusplus >= 201402L\n+  std::less<> ltv;\n+  custom_op_called = false;\n+  b = ltv(sp, sp);\n+  VERIFY( !b );\n+  VERIFY( custom_op_called );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}