{"sha": "29c6debccf0d155cb0a0fd14eb6afe077a206f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljNmRlYmNjZjBkMTU1Y2IwYTBmZDE0ZWI2YWZlMDc3YTIwNmYyNw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-02-28T10:43:41Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-02-28T10:43:41Z"}, "message": "AArch64: Have empty HWCAPs string ignored during native feature detection \n\nThis patch makes the feature detection code for AArch64 GCC not add features\nautomatically when the feature had no hwcaps string to match against.\n\nThis means that -mcpu=native no longer adds feature flags such as +profile.\nThe behavior wasn't noticed before because at the time +profile was added a bug\nwas preventing any feature bits from being added by native detections.\n\nThe loop has also been changed as Jakub specified in order to avoid a memory\nleak that was present in the existing code and to be slightly more efficient.\n\ngcc/ChangeLog:\n\n\tPR target/88530\n\t* config/aarch64/aarch64-option-extensions.def: Document it.\n\t* config/aarch64/driver-aarch64.c (host_detect_local_cpu): Skip feature\n\tif empty hwcaps.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/88530\n\t* gcc.target/aarch64/options_set_10.c: New test.\n\nFrom-SVN: r269276", "tree": {"sha": "162f8aaf5ae7a6a3a63322618e8e4bd851bc3940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162f8aaf5ae7a6a3a63322618e8e4bd851bc3940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c6debccf0d155cb0a0fd14eb6afe077a206f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c6debccf0d155cb0a0fd14eb6afe077a206f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c6debccf0d155cb0a0fd14eb6afe077a206f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c6debccf0d155cb0a0fd14eb6afe077a206f27/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee8b2b8ea44097072e2df28f1b248d45ddd4c0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8b2b8ea44097072e2df28f1b248d45ddd4c0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8b2b8ea44097072e2df28f1b248d45ddd4c0fd"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "e7ca0e4c15efffb682f6816cc856e9d0a015e0bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c6debccf0d155cb0a0fd14eb6afe077a206f27", "patch": "@@ -1,3 +1,10 @@\n+2019-02-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88530\n+\t* config/aarch64/aarch64-option-extensions.def: Document it.\n+\t* config/aarch64/driver-aarch64.c (host_detect_local_cpu): Skip feature\n+\tif empty hwcaps.\n+\n 2019-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89520"}, {"sha": "7a80b690ef23b26d81f0aa6159e5c118bb7d076c", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=29c6debccf0d155cb0a0fd14eb6afe077a206f27", "patch": "@@ -44,7 +44,8 @@\n      the extension (for example, the 'crypto' extension depends on four\n      entries: aes, pmull, sha1, sha2 being present).  In that case this field\n      should contain a space (\" \") separated list of the strings in 'Features'\n-     that are required.  Their order is not important.  */\n+     that are required.  Their order is not important.  An empty string means\n+     do not detect this feature during auto detection.  */\n \n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\","}, {"sha": "6f16775f47d44288c45d1bbf2cc1b59dc08528ac", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=29c6debccf0d155cb0a0fd14eb6afe077a206f27", "patch": "@@ -249,27 +249,35 @@ host_detect_local_cpu (int argc, const char **argv)\n \t{\n \t  for (i = 0; i < num_exts; i++)\n \t    {\n-\t      char *p = NULL;\n-\t      char *feat_string\n-\t\t= concat (aarch64_extensions[i].feat_string, NULL);\n+\t      const char *p = aarch64_extensions[i].feat_string;\n+\n+\t      /* If the feature contains no HWCAPS string then ignore it for the\n+\t\t auto detection.  */\n+\t      if (*p == '\\0')\n+\t\tcontinue;\n+\n \t      bool enabled = true;\n \n \t      /* This may be a multi-token feature string.  We need\n-\t\t to match all parts, which could be in any order.\n-\t\t If this isn't a multi-token feature string, strtok is\n-\t\t just going to return a pointer to feat_string.  */\n-\t      p = strtok (feat_string, \" \");\n-\t      while (p != NULL)\n+\t\t to match all parts, which could be in any order.  */\n+\t      size_t len = strlen (buf);\n+\t      do\n \t\t{\n-\t\t  if (strstr (buf, p) == NULL)\n+\t\t  const char *end = strchr (p, ' ');\n+\t\t  if (end == NULL)\n+\t\t    end = strchr (p, '\\0');\n+\t\t  if (memmem (buf, len, p, end - p) == NULL)\n \t\t    {\n \t\t      /* Failed to match this token.  Turn off the\n \t\t\t features we'd otherwise enable.  */\n \t\t      enabled = false;\n \t\t      break;\n \t\t    }\n-\t\t  p = strtok (NULL, \" \");\n+\t\t  if (*end == '\\0')\n+\t\t    break;\n+\t\t  p = end + 1;\n \t\t}\n+\t      while (1);\n \n \t      if (enabled)\n \t\textension_flags |= aarch64_extensions[i].flag;\n@@ -360,12 +368,12 @@ host_detect_local_cpu (int argc, const char **argv)\n not_found:\n   {\n    /* If detection fails we ignore the option.\n-      Clean up and return empty string.  */\n+      Clean up and return NULL.  */\n \n     if (f)\n       fclose (f);\n \n-    return \"\";\n+    return NULL;\n   }\n }\n "}, {"sha": "6795bfc767841d2e67a076df6b0d9bf54b5a1b32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29c6debccf0d155cb0a0fd14eb6afe077a206f27", "patch": "@@ -1,3 +1,8 @@\n+2019-02-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88530\n+\t* gcc.target/aarch64/options_set_10.c: New test.\n+\n 2019-02-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/89522"}, {"sha": "5ffe83c199165dd4129814674297056bdf27cd83", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_10.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c6debccf0d155cb0a0fd14eb6afe077a206f27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_10.c?ref=29c6debccf0d155cb0a0fd14eb6afe077a206f27", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target \"aarch64*-*-linux*\" } } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\.arch .+\\+profile.*} } } */\n+\n+ /* Check that an empty feature string is not detected during mcpu=native.  */"}]}