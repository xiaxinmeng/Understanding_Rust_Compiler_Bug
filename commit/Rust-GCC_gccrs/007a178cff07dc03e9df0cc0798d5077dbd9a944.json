{"sha": "007a178cff07dc03e9df0cc0798d5077dbd9a944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3YTE3OGNmZjA3ZGMwM2U5ZGYwY2MwNzk4ZDUwNzdkYmQ5YTk0NA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-10-08T18:28:48Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-10-08T18:28:48Z"}, "message": "* config/avr/avr.c (last_insn_address) Remove variable.\n\n\t(expand_prologue): Don't initialise last_insn_address variable.\n\t(final_prescan_insn): Don't output insn size.\n\t* config/avr/avr.opt (msize): Remove switch.\n\t* doc/invoke.texi (AVR Options): Remove documentation of -msize\n\tswitch.\n\nFrom-SVN: r152568", "tree": {"sha": "baa39b99f458db604664b5d5b0a55a0cc8eab780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa39b99f458db604664b5d5b0a55a0cc8eab780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/007a178cff07dc03e9df0cc0798d5077dbd9a944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007a178cff07dc03e9df0cc0798d5077dbd9a944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007a178cff07dc03e9df0cc0798d5077dbd9a944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007a178cff07dc03e9df0cc0798d5077dbd9a944/comments", "author": null, "committer": null, "parents": [{"sha": "e3104f55001fa42614c49cab274e078978d64e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3104f55001fa42614c49cab274e078978d64e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3104f55001fa42614c49cab274e078978d64e5a"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "c128a74a183c0d6087695212f1a476ec42a3e428", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=007a178cff07dc03e9df0cc0798d5077dbd9a944", "patch": "@@ -1,3 +1,12 @@\n+2009-10-08  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.c (last_insn_address) Remove variable.\n+\t(expand_prologue): Don't initialise last_insn_address variable.\n+\t(final_prescan_insn): Don't output insn size.\n+\t* config/avr/avr.opt (msize): Remove switch.\n+\t* doc/invoke.texi (AVR Options): Remove documentation of -msize\n+\tswitch.\n+\n 2009-10-08  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* combine.c (label_tick_ebb_start): Fix comment."}, {"sha": "7c3234f8f640b88241885fb6780fb8dbe97308d0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=007a178cff07dc03e9df0cc0798d5077dbd9a944", "patch": "@@ -104,9 +104,6 @@ static GTY(()) rtx zero_reg_rtx;\n /* AVR register names {\"r0\", \"r1\", ..., \"r31\"} */\n static const char *const avr_regnames[] = REGISTER_NAMES;\n \n-/* This holds the last insn address.  */\n-static int last_insn_address = 0;\n-\n /* Preprocessor macros to define depending on MCU type.  */\n static const char *avr_extra_arch_macro;\n \n@@ -556,8 +553,6 @@ expand_prologue (void)\n   rtx pushword = gen_rtx_MEM (HImode,\n                   gen_rtx_POST_DEC (HImode, stack_pointer_rtx));\n   rtx insn;\n-\n-  last_insn_address = 0;\n   \n   /* Init cfun->machine.  */\n   cfun->machine->is_naked = avr_naked_function_p (current_function_decl);\n@@ -1459,25 +1454,17 @@ byte_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n           && INTVAL (op) <= 0xff && INTVAL (op) >= 0);\n }\n \n-/* Output all insn addresses and their sizes into the assembly language\n-   output file.  This is helpful for debugging whether the length attributes\n-   in the md file are correct.\n-   Output insn cost for next insn.  */\n+/* Output insn cost for next insn.  */\n \n void\n final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n \t\t    int num_operands ATTRIBUTE_UNUSED)\n {\n-  int uid = INSN_UID (insn);\n-\n-  if (TARGET_INSN_SIZE_DUMP || TARGET_ALL_DEBUG)\n+  if (TARGET_ALL_DEBUG)\n     {\n-      fprintf (asm_out_file, \"/*DEBUG: 0x%x\\t\\t%d\\t%d */\\n\",\n-\t       INSN_ADDRESSES (uid),\n-               INSN_ADDRESSES (uid) - last_insn_address,\n+      fprintf (asm_out_file, \"/* DEBUG: cost = %d.  */\\n\",\n \t       rtx_cost (PATTERN (insn), INSN, !optimize_size));\n     }\n-  last_insn_address = INSN_ADDRESSES (uid);\n }\n \n /* Return 0 if undefined, 1 if always true or always false.  */"}, {"sha": "f8013e53a18653c0bd6f0bb873d5594b2e5592a7", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=007a178cff07dc03e9df0cc0798d5077dbd9a944", "patch": "@@ -47,10 +47,6 @@ mshort-calls\n Target Report Mask(SHORT_CALLS)\n Use rjmp/rcall (limited range) on >8K devices\n \n-msize\n-Target Report Mask(INSN_SIZE_DUMP)\n-Output instruction sizes to the asm file\n-\n mtiny-stack\n Target Report Mask(TINY_STACK)\n Change only the low 8 bits of the stack pointer"}, {"sha": "6d0d4c4f5d8cfa6c55f3d72f17007498565efac1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007a178cff07dc03e9df0cc0798d5077dbd9a944/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=007a178cff07dc03e9df0cc0798d5077dbd9a944", "patch": "@@ -471,7 +471,7 @@ Objective-C and Objective-C++ Dialects}.\n -mfix-cortex-m3-ldrd}\n \n @emph{AVR Options}\n-@gccoptlist{-mmcu=@var{mcu}  -msize  -mno-interrupts @gol\n+@gccoptlist{-mmcu=@var{mcu}  -mno-interrupts @gol\n -mcall-prologues  -mtiny-stack  -mint8}\n \n @emph{Blackfin Options}\n@@ -9931,10 +9931,6 @@ Instruction set avr5 is for the enhanced AVR core with up to 128K program\n memory space (MCU types: atmega16, atmega161, atmega163, atmega32, atmega323,\n atmega64, atmega128, at43usb355, at94k).\n \n-@item -msize\n-@opindex msize\n-Output instruction sizes to the asm file.\n-\n @item -mno-interrupts\n @opindex mno-interrupts\n Generated code is not compatible with hardware interrupts."}]}