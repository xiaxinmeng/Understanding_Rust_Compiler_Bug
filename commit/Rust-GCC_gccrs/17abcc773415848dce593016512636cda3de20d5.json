{"sha": "17abcc773415848dce593016512636cda3de20d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhYmNjNzczNDE1ODQ4ZGNlNTkzMDE2NTEyNjM2Y2RhM2RlMjBkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-05T21:17:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-05T21:17:18Z"}, "message": "libstdc++: Replace operator>>(istream&, char*) [LWG 2499]\n\nP0487R1 resolved LWG 2499 for C++20 by removing the operator>> overloads\nthat have high risk of buffer overflows. They were replaced by\nequivalents that only accept a reference to an array, and so can\nguarantee not to write past the end of the array.\n\nIn order to support both the old and new functionality, this patch\nintroduces a new overloaded __istream_extract function which takes a\nmaximum length. The new operator>> overloads use the array size as the\nmaximum length. The old overloads now use __builtin_object_size to\ndetermine the available buffer size if available (which requires -O2) or\nuse numeric_limits<streamsize>::max()/sizeof(char_type) otherwise. This\nis a change in behaviour, as the old overloads previously always used\nnumeric_limits<streamsize>::max(), without considering sizeof(char_type)\nand without attempting to prevent overflows.\n\nBecause they now do little more than call __istream_extract, the old\noperator>> overloads are very small inline functions. This means there\nis no advantage to explicitly instantiating them in the library (in fact\nthat would prevent the __builtin_object_size checks from ever working).\nAs a result, the explicit instantiation declarations can be removed from\nthe header. The explicit instantiation definitions are still needed, for\nbackwards compatibility with existing code that expects to link to the\ndefinitions in the library.\n\nWhile working on this change I noticed that src/c++11/istream-inst.cc\nhas the following explicit instantiation definition:\n  template istream& operator>>(istream&, char*);\nThis had no effect (and so should not have been present in that file),\nbecause there was an explicit specialization declared in <istream> and\ndefined in src/++98/istream.cc. However, this change removes the\nexplicit specialization, and now the explicit instantiation definition\nis necessary to ensure the symbol gets defined in the library.\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Export new symbols.\n\t* include/bits/istream.tcc (__istream_extract): New function\n\ttemplate implementing both of operator>>(istream&, char*) and\n\toperator>>(istream&, char(&)[N]). Add explicit instantiation\n\tdeclaration for it. Remove explicit instantiation declarations\n\tfor old function templates.\n\t* include/std/istream (__istream_extract): Declare.\n\t(operator>>(basic_istream<C,T>&, C*)): Define inline and simply\n\tcall __istream_extract.\n\t(operator>>(basic_istream<char,T>&, signed char*)): Likewise.\n\t(operator>>(basic_istream<char,T>&, unsigned char*)): Likewise.\n\t(operator>>(basic_istream<C,T>&, C(7)[N])): Define for LWG 2499.\n\t(operator>>(basic_istream<char,T>&, signed char(&)[N])):\n\tLikewise.\n\t(operator>>(basic_istream<char,T>&, unsigned char(&)[N])):\n\tLikewise.\n\t* include/std/streambuf (basic_streambuf): Declare char overload\n\tof __istream_extract as a friend.\n\t* src/c++11/istream-inst.cc: Add explicit instantiation\n\tdefinition for wchar_t overload of __istream_extract. Remove\n\texplicit instantiation definitions of old operator>> overloads\n\tfor versioned-namespace build.\n\t* src/c++98/istream.cc (operator>>(istream&, char*)): Replace\n\twith __istream_extract(istream&, char*, streamsize).\n\t* testsuite/27_io/basic_istream/extractors_character/char/3.cc:\n\tDo not use variable-length array.\n\t* testsuite/27_io/basic_istream/extractors_character/char/4.cc:\n\tDo not run test for C++20.\n\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc:\n\tDo not test writing to pointers for C++20.\n\t* testsuite/27_io/basic_istream/extractors_character/char/9826.cc:\n\tUse array instead of pointer.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/3.cc:\n\tDo not use variable-length array.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc:\n\tDo not run test for C++20.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/9555-ic.cc:\n\tDo not test writing to pointers for C++20.\n\t* testsuite/27_io/basic_istream/extractors_character/char/lwg2499.cc:\n\tNew test.\n\t* testsuite/27_io/basic_istream/extractors_character/char/lwg2499_neg.cc:\n\tNew test.\n\t* testsuite/27_io/basic_istream/extractors_character/char/overflow.cc:\n\tNew test.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499.cc:\n\tNew test.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499_neg.cc:\n\tNew test.", "tree": {"sha": "388be0949b70820b6ea3b47999c64c151ab144c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388be0949b70820b6ea3b47999c64c151ab144c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17abcc773415848dce593016512636cda3de20d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17abcc773415848dce593016512636cda3de20d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17abcc773415848dce593016512636cda3de20d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17abcc773415848dce593016512636cda3de20d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21252de6c81ed236d8981d47b9a57dc4f1c6d57"}], "stats": {"total": 427, "additions": 386, "deletions": 41}, "files": [{"sha": "b6ce76c1f2094e11bb162ebc6e54e5eaa7e76a68", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -2304,6 +2304,11 @@ GLIBCXX_3.4.29 {\n     # std::from_chars\n     _ZSt10from_charsPKcS0_R[def]St12chars_format;\n \n+    # std::__istream_extract(istream&, char*, streamsize)\n+    _ZSt17__istream_extractRSiPc[ilx];\n+    # std::__istream_extract(wistream&, wchar_t*, streamsize)\n+    _ZSt17__istream_extractIwSt11char_traitsIwEEvRSt13basic_istreamIT_T0_EPS3_[ilx];\n+\n } GLIBCXX_3.4.28;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "b8f530f6ef5061f1dbf59057adb14bf169bc40a3", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -986,8 +986,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n+    void\n+    __istream_extract(basic_istream<_CharT, _Traits>& __in, _CharT* __s,\n+\t\t      streamsize __num)\n     {\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n       typedef basic_streambuf<_CharT, _Traits>          __streambuf_type;\n@@ -1003,9 +1004,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __try\n \t    {\n \t      // Figure out how many characters to extract.\n-\t      streamsize __num = __in.width();\n-\t      if (__num <= 0)\n-\t\t__num = __gnu_cxx::__numeric_traits<streamsize>::__max;\n+\t      streamsize __width = __in.width();\n+\t      if (0 < __width && __width < __num)\n+\t\t__num = __width;\n \n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \n@@ -1042,7 +1043,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__err |= ios_base::failbit;\n       if (__err)\n \t__in.setstate(__err);\n-      return __in;\n     }\n \n   // 27.6.1.4 Standard basic_istream manipulators\n@@ -1075,11 +1075,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern template class basic_istream<char>;\n   extern template istream& ws(istream&);\n   extern template istream& operator>>(istream&, char&);\n-  extern template istream& operator>>(istream&, char*);\n   extern template istream& operator>>(istream&, unsigned char&);\n   extern template istream& operator>>(istream&, signed char&);\n-  extern template istream& operator>>(istream&, unsigned char*);\n-  extern template istream& operator>>(istream&, signed char*);\n \n   extern template istream& istream::_M_extract(unsigned short&);\n   extern template istream& istream::_M_extract(unsigned int&);  \n@@ -1101,7 +1098,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern template class basic_istream<wchar_t>;\n   extern template wistream& ws(wistream&);\n   extern template wistream& operator>>(wistream&, wchar_t&);\n-  extern template wistream& operator>>(wistream&, wchar_t*);\n+  extern template void __istream_extract(wistream&, wchar_t*, streamsize);\n \n   extern template wistream& wistream::_M_extract(unsigned short&);\n   extern template wistream& wistream::_M_extract(unsigned int&);  "}, {"sha": "cb8e9f87c90c59cc2d092985227c9fa39735cbbf", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 51, "deletions": 18, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -762,41 +762,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return (__in >> reinterpret_cast<char&>(__c)); }\n   //@}\n \n+\n+  template<typename _CharT, typename _Traits>\n+    void\n+    __istream_extract(basic_istream<_CharT, _Traits>&, _CharT*, streamsize);\n+\n+  void __istream_extract(istream&, char*, streamsize);\n+\n   //@{\n   /**\n    *  @brief  Character string extractors\n    *  @param  __in  An input stream.\n-   *  @param  __s  A pointer to a character array.\n+   *  @param  __s  A character array (or a pointer to an array before C++20).\n    *  @return  __in\n    *\n    *  Behaves like one of the formatted arithmetic extractors described in\n-   *  std::basic_istream.  After constructing a sentry object with good\n-   *  status, this function extracts up to @c n characters and stores them\n-   *  into the array starting at @a __s.  @c n is defined as:\n+   *  `std::basic_istream`.  After constructing a sentry object with good\n+   *  status, this function extracts up to `n` characters and stores them\n+   *  into the array `__s`.  `n` is defined as:\n    *\n-   *  - if @c width() is greater than zero, @c n is width() otherwise\n-   *  - @c n is <em>the number of elements of the largest array of *\n-   *  - @c char_type that can store a terminating @c eos.</em>\n-   *  - [27.6.1.2.3]/6\n+   *  - if `width()` is greater than zero, `n` is `min(width(), n)`\n+   *  - otherwise `n` is the number of elements of the array\n+   *  - (before C++20 the pointer is assumed to point to an array of\n+   *  - the largest possible size for an array of `char_type`).\n    *\n    *  Characters are extracted and stored until one of the following happens:\n-   *  - @c n-1 characters are stored\n+   *  - `n - 1` characters are stored\n    *  - EOF is reached\n    *  - the next character is whitespace according to the current locale\n-   *  - the next character is a null byte (i.e., @c charT() )\n+   *  - the next character is a null byte (i.e., `charT()`)\n    *\n-   *  @c width(0) is then called for the input stream.\n+   *  `width(0)` is then called for the input stream.\n    *\n    *  If no characters are extracted, sets failbit.\n   */\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);\n \n-  // Explicit specialization declaration, defined in src/istream.cc.\n-  template<>\n-    basic_istream<char>&\n-    operator>>(basic_istream<char>& __in, char* __s);\n+#if __cplusplus <= 201703L\n+  template<typename _CharT, typename _Traits>\n+    inline basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n+    {\n+      streamsize __n = __builtin_object_size(__s, 2) / sizeof(_CharT);\n+      if (__n == 0)\n+\t__n = __gnu_cxx::__numeric_traits<streamsize>::__max / sizeof(_CharT);\n+      std::__istream_extract(__in, __s, __n);\n+      return __in;\n+    }\n \n   template<class _Traits>\n     inline basic_istream<char, _Traits>&\n@@ -807,6 +818,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_istream<char, _Traits>&\n     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n     { return (__in >> reinterpret_cast<char*>(__s)); }\n+#else\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2499. operator>>(istream&, char*) makes it hard to avoid buffer overflows\n+  template<typename _CharT, typename _Traits, size_t _Num>\n+    inline basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT (&__s)[_Num])\n+    {\n+      static_assert(_Num <= __gnu_cxx::__numeric_traits<streamsize>::__max);\n+      std::__istream_extract(__in, __s, _Num);\n+      return __in;\n+    }\n+\n+  template<class _Traits, size_t _Num>\n+    inline basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, unsigned char (&__s)[_Num])\n+    { return __in >> reinterpret_cast<char(&)[_Num]>(__s); }\n+\n+  template<class _Traits, size_t _Num>\n+    inline basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, signed char (&__s)[_Num])\n+    { return __in >> reinterpret_cast<char(&)[_Num]>(__s); }\n+#endif\n   //@}\n \n   /**"}, {"sha": "3e512364b864d3ae4496d40a822a2ef307b3317e", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -166,9 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t       void>::__type\n         advance(istreambuf_iterator<_CharT2>&, _Distance);\n \n-      template<typename _CharT2, typename _Traits2>\n-        friend basic_istream<_CharT2, _Traits2>&\n-        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);\n+      friend void __istream_extract(istream&, char*, streamsize);\n \n       template<typename _CharT2, typename _Traits2, typename _Alloc>\n         friend basic_istream<_CharT2, _Traits2>&"}, {"sha": "2262db6f0ccb304dc48e6264d5bf00cab84138e5", "filename": "libstdc++-v3/src/c++11/istream-inst.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -38,9 +38,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template istream& operator>>(istream&, char&);\n   template istream& operator>>(istream&, unsigned char&);\n   template istream& operator>>(istream&, signed char&);\n+\n+#if ! _GLIBCXX_INLINE_VERSION\n+  // XXX GLIBCXX_ABI Deprecated\n   template istream& operator>>(istream&, char*);\n   template istream& operator>>(istream&, unsigned char*);\n   template istream& operator>>(istream&, signed char*);\n+#endif\n \n   template istream& operator>>(istream&, _Setfill<char>);\n   template istream& operator>>(istream&, _Setiosflags);\n@@ -67,7 +71,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template class basic_istream<wchar_t>;\n   template wistream& ws(wistream&);\n   template wistream& operator>>(wistream&, wchar_t&);\n+  template void __istream_extract(wistream&, wchar_t*, streamsize);\n+\n+#if ! _GLIBCXX_INLINE_VERSION\n+  // XXX GLIBCXX_ABI Deprecated\n   template wistream& operator>>(wistream&, wchar_t*);\n+#endif\n \n   template wistream& operator>>(wistream&, _Setfill<wchar_t>);\n   template wistream& operator>>(wistream&, _Setiosflags);"}, {"sha": "7a48779d337ab43e53670f1e1b6764795994bf1f", "filename": "libstdc++-v3/src/c++98/istream.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -204,9 +204,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n-  template<>\n-    basic_istream<char>&\n-    operator>>(basic_istream<char>& __in, char* __s)\n+    void\n+    __istream_extract(istream& __in, char* __s, streamsize __num)\n     {\n       typedef basic_istream<char>       \t__istream_type;\n       typedef __istream_type::int_type\t\t__int_type;\n@@ -223,9 +222,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __try\n \t    {\n \t      // Figure out how many characters to extract.\n-\t      streamsize __num = __in.width();\n-\t      if (__num <= 0)\n-\t\t__num = __gnu_cxx::__numeric_traits<streamsize>::__max;\n+\t      streamsize __width = __in.width();\n+\t      if (0 < __width && __width < __num)\n+\t\t__num = __width;\n \n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \n@@ -282,7 +281,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__err |= ios_base::failbit;\n       if (__err)\n \t__in.setstate(__err);\n-      return __in;\n     }\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "32020b1ba0042408a431cd3d68045c7cb2255820", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F3.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -39,7 +39,7 @@ void test01()\n \n   // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, _CharT*)\n-  int n = 20;\n+  const int n = 20;\n   char array1[n];\n   typedef std::ios::traits_type ctraits_type;\n "}, {"sha": "9e427cc045f739c0341f2bde3e5128c52d5ce9ea", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/4.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F4.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -19,6 +19,7 @@\n \n // 27.6.1.2.3 basic_istream::operator>>\n \n+// { dg-do run { target { ! c++20 } } }\n // { dg-require-fileio \"\" }\n \n #include <istream>"}, {"sha": "d5d86c635dfb2c85ba5f18e690b248bf9c2696c1", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -60,9 +60,11 @@ int main()\n   testthrow(c);\n   testthrow(uc);\n   testthrow(sc);\n+#if __cplusplus <= 201703L\n   testthrow(cp);\n   testthrow(scp);\n   testthrow(ucp);\n+#endif\n \n   return 0;\n }"}, {"sha": "bc77f7bfb541ce4a2e120c26988a83162fea5a3e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9826.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -39,7 +39,7 @@ void test02()\n   sstr >> str;\n \n   // 2\n-  pod_char*  chr = 0;\n+  pod_char  chr[1];\n   sstr >> chr;\n \n   // 3"}, {"sha": "d77b7114583dc79de3eb0581d4230fe6c338c45d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/lwg2499.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// LWG 2499\n+// operator>>(basic_istream&, CharT*) makes it hard to avoid buffer overflows\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test(std::basic_istream<char, T>& in)\n+{\n+  char pc[3];\n+  in >> pc;\n+  VERIFY( in.good() );\n+  VERIFY( pc[0] == 'a' && pc[1] == 'b' && pc[2] == '\\0' );\n+\n+  signed char sc[4];\n+  in >> sc;\n+  VERIFY( in.good() );\n+  VERIFY( sc[0] == 'c' && sc[1] == 'd' && sc[2] == 'e' && sc[3] ==  '\\0' );\n+\n+  unsigned char uc[4];\n+  in >> uc;\n+  VERIFY( in.good() );\n+  VERIFY( uc[0] == 'f' && uc[1] == 'g' && uc[2] == 'h' && uc[3] ==  '\\0' );\n+\n+  pc[2] = '#';\n+  in >> pc;\n+  VERIFY( in.good() );\n+  VERIFY( pc[0] == 'i' && pc[1] == '\\0' && pc[2] == '#' );\n+\n+  in >> pc;\n+  VERIFY( in.good() );\n+  VERIFY( pc[0] == 'j' && pc[1] == 'k' && pc[2] == '\\0' );\n+\n+  pc[2] = '#';\n+  in >> pc;\n+  VERIFY( in.eof() );\n+  VERIFY( pc[0] == 'l' && pc[1] == '\\0' && pc[2] == '#' );\n+}\n+\n+void\n+test01()\n+{\n+  std::istringstream in(\"abcdefghi jk l\");\n+  test(in);\n+}\n+\n+void\n+test02()\n+{\n+  struct CT : std::char_traits<char> { };\n+  std::basic_istringstream<char, CT> in(\"abcdefghi jk l\");\n+  test(in);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "2c2bd521d5c06321abf278b4de9e44922fe17287", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/lwg2499_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Flwg2499_neg.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// LWG 2499\n+// operator>>(basic_istream&, CharT*) makes it hard to avoid buffer overflows\n+\n+#include <istream>\n+\n+void\n+test01(std::istream& in, char* pc, signed char* sc, unsigned char* uc)\n+{\n+  in >> pc; // { dg-error \"here\" }\n+  in >> sc; // { dg-error \"here\" }\n+  in >> uc; // { dg-error \"here\" }\n+}\n+\n+struct CT : std::char_traits<char> { };\n+\n+void\n+test02(std::basic_istream<char, CT>& in, char* pc, signed char* sc,\n+       unsigned char* uc)\n+{\n+  in >> pc; // { dg-error \"here\" }\n+  in >> sc; // { dg-error \"here\" }\n+  in >> uc; // { dg-error \"here\" }\n+}\n+\n+// { dg-excess-errors \"\" }"}, {"sha": "1141a41b20828723305b7bdacc3e638e087777d8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/overflow.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Foverflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Foverflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2Foverflow.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-O2 -std=gnu++98\" }\n+// { dg-do run }\n+\n+// This test checks that operator>> will avoid a buffer overflow when\n+// reading into a buffer with a size that is known at compile time.\n+\n+// Since C++20 this is guaranteed (see LWG 2499), for previous standards\n+// we try to check the buffer size as an extension (which depends on -O2).\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream in(\"foolish child\");\n+  char pc[5];\n+  in >> pc;\n+  VERIFY( in.good() );\n+  VERIFY( std::string(pc) == \"fool\" );\n+}\n+\n+void\n+test02()\n+{\n+  std::istringstream in(\"foolish\");\n+  signed char sc[5];\n+  in >> sc;\n+  VERIFY( in.good() );\n+  VERIFY( std::string((const char*)sc) == \"fool\" );\n+}\n+\n+void\n+test03()\n+{\n+  std::istringstream in(\"foolish\");\n+  unsigned char uc[5];\n+  in >> uc;\n+  VERIFY( in.good() );\n+  VERIFY( std::string((const char*)uc) == \"fool\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "5ee3ee166928b064eedf568951c8999056bed0b1", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -37,7 +37,7 @@ void test01()\n \n   // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, _CharT*)\n-  int n = 20;\n+  const int n = 20;\n   wchar_t array1[n];\n   typedef std::wios::traits_type ctraits_type;\n "}, {"sha": "8414d62eee311d52aec19ecd0cb3d62abf93ff6a", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -20,6 +20,7 @@\n // 27.6.1.2.3 basic_istream::operator>>\n \n // { dg-options \"-DMAX_SIZE=466\" { target simulator } }\n+// { dg-do run { target { ! c++20 } } }\n // { dg-require-fileio \"\" }\n \n #ifndef MAX_SIZE"}, {"sha": "1a9f9aa56ba16a3315f20b45e46bc3d3bd73e93c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/9555-ic.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -54,7 +54,9 @@ int main()\n   wchar_t* cp = &c;\n \n   testthrow(c);\n+#if __cplusplus <= 201703L\n   testthrow(cp);\n+#endif\n \n   return 0;\n }"}, {"sha": "e1d42b4bc42ee2e52dadabc22b11a083f3ae7265", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// LWG 2499\n+// operator>>(basic_istream&, CharT*) makes it hard to avoid buffer overflows\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test(std::basic_istream<wchar_t, T>& in)\n+{\n+  wchar_t wc[3];\n+  in >> wc;\n+  VERIFY( in.good() );\n+  VERIFY( wc[0] == L'a' && wc[1] == L'b' && wc[2] == L'\\0' );\n+\n+  wc[2] = L'#';\n+  in >> wc;\n+  VERIFY( in.good() );\n+  VERIFY( wc[0] == L'c' && wc[1] == L'\\0' && wc[2] == L'#' );\n+\n+  in >> wc;\n+  VERIFY( in.good() );\n+  VERIFY( wc[0] == L'd' && wc[1] == L'\\0' && wc[2] == L'#' );\n+\n+  wc[2] = L'#';\n+  in >> wc;\n+  VERIFY( in.eof() );\n+  VERIFY( wc[0] == L'e' && wc[1] == L'\\0' && wc[2] == L'#' );\n+}\n+\n+void\n+test01()\n+{\n+  std::wistringstream in(L\"abc d e\");\n+  test(in);\n+}\n+\n+void\n+test02()\n+{\n+  struct WT : std::char_traits<wchar_t> { };\n+  std::basic_istringstream<wchar_t, WT> in(L\"abc d e\");\n+  test(in);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "676cdee82977d31eeada3606ec97ef7830055f50", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17abcc773415848dce593016512636cda3de20d5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2Flwg2499_neg.cc?ref=17abcc773415848dce593016512636cda3de20d5", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// LWG 2499\n+// operator>>(basic_istream&, CharT*) makes it hard to avoid buffer overflows\n+\n+#include <istream>\n+\n+void\n+test01(std::wistream& in, wchar_t* wc)\n+{\n+  in >> wc; // { dg-error \"here\" }\n+}\n+\n+struct WT : std::char_traits<wchar_t> { };\n+\n+void\n+test02(std::basic_istream<wchar_t, WT>& in, wchar_t* wc)\n+{\n+  in >> wc; // { dg-error \"here\" }\n+}\n+\n+// { dg-excess-errors \"\" }"}]}