{"sha": "a602f9851691dc8199fc3c4d78500e47143b90a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYwMmY5ODUxNjkxZGM4MTk5ZmMzYzRkNzg1MDBlNDcxNDNiOTBhMA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T13:54:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T13:54:23Z"}, "message": "S/390: vec_init improvements\n\nThis enables the vec_init pattern also for V4SF, V1TI, and V1TF.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vec-init-2.c: New test.\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_vec_init): Enable vector load\n\tpair for all vector types with 64 bit elements.\n\t* config/s390/vx-builtins.md (V_HW_64): Move mode iterator to ...\n\t* config/s390/vector.md (V_HW_64): ... here.\n\t(V_128_NOSINGLE): New mode iterator.\n\t(\"vec_init<V_HW:mode>\"): Use V_128 as mode iterator.\n\t(\"*vec_splat<mode>\"): Use V_128_NOSINGLE mode iterator.\n\t(\"*vec_tf_to_v1tf\", \"*vec_ti_to_v1ti\"): New pattern definitions.\n\t(\"*vec_load_pairv2di\"): Change to ...\n\t(\"*vec_load_pair<mode>\"): ... this one.\n\nFrom-SVN: r246446", "tree": {"sha": "7411e42d775bfb86186d31464a4ea91f4ef95830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7411e42d775bfb86186d31464a4ea91f4ef95830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a602f9851691dc8199fc3c4d78500e47143b90a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a602f9851691dc8199fc3c4d78500e47143b90a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a602f9851691dc8199fc3c4d78500e47143b90a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a602f9851691dc8199fc3c4d78500e47143b90a0/comments", "author": null, "committer": null, "parents": [{"sha": "9d605427fa64d5f3988ff0f658426a1e704e9178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d605427fa64d5f3988ff0f658426a1e704e9178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d605427fa64d5f3988ff0f658426a1e704e9178"}], "stats": {"total": 143, "additions": 122, "deletions": 21}, "files": [{"sha": "7098da9ca3af6547fc4ef9cef5d4ab489e87377d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -1,3 +1,16 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_init): Enable vector load\n+\tpair for all vector types with 64 bit elements.\n+\t* config/s390/vx-builtins.md (V_HW_64): Move mode iterator to ...\n+\t* config/s390/vector.md (V_HW_64): ... here.\n+\t(V_128_NOSINGLE): New mode iterator.\n+\t(\"vec_init<V_HW:mode>\"): Use V_128 as mode iterator.\n+\t(\"*vec_splat<mode>\"): Use V_128_NOSINGLE mode iterator.\n+\t(\"*vec_tf_to_v1tf\", \"*vec_ti_to_v1ti\"): New pattern definitions.\n+\t(\"*vec_load_pairv2di\"): Change to ...\n+\t(\"*vec_load_pair<mode>\"): ... this one.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/constraints.md: Add comments."}, {"sha": "65a75464b1c957d9e70bd2c813d8a927701f10e1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -6617,7 +6617,10 @@ s390_expand_vec_init (rtx target, rtx vals)\n       return;\n     }\n \n-  if (all_regs && REG_P (target) && n_elts == 2 && inner_mode == DImode)\n+  if (all_regs\n+      && REG_P (target)\n+      && n_elts == 2\n+      && GET_MODE_SIZE (inner_mode) == 8)\n     {\n       /* Use vector load pair.  */\n       emit_insn (gen_rtx_SET (target,"}, {"sha": "7ddeb9a2f9c5d5021af0c7e3dfc38d72c88798bb", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -31,6 +31,9 @@\n ; independently e.g. vcond\n (define_mode_iterator V_HW  [V16QI V8HI V4SI V2DI V2DF])\n (define_mode_iterator V_HW2 [V16QI V8HI V4SI V2DI V2DF])\n+\n+(define_mode_iterator V_HW_64 [V2DI V2DF])\n+\n ; Including TI for instructions that support it (va, vn, ...)\n (define_mode_iterator VT_HW [V16QI V8HI V4SI V2DI V2DF V1TI TI])\n \n@@ -53,6 +56,8 @@\n (define_mode_iterator V_64  [V8QI  V4HI V2SI V2SF V1DI V1DF])\n (define_mode_iterator V_128 [V16QI V8HI V4SI V4SF V2DI V2DF V1TI V1TF])\n \n+(define_mode_iterator V_128_NOSINGLE [V16QI V8HI V4SI V4SF V2DI V2DF])\n+\n ; A blank for vector modes and a * for TImode.  This is used to hide\n ; the TImode expander name in case it is defined already.  See addti3\n ; for an example.\n@@ -437,9 +442,9 @@\n   \"vlgv<bhfgq>\\t%0,%v1,%Y3(%2)\"\n   [(set_attr \"op_type\" \"VRS\")])\n \n-(define_expand \"vec_init<V_HW:mode>\"\n-  [(match_operand:V_HW 0 \"register_operand\" \"\")\n-   (match_operand:V_HW 1 \"nonmemory_operand\" \"\")]\n+(define_expand \"vec_init<mode>\"\n+  [(match_operand:V_128 0 \"register_operand\" \"\")\n+   (match_operand:V_128 1 \"nonmemory_operand\" \"\")]\n   \"TARGET_VX\"\n {\n   s390_expand_vec_init (operands[0], operands[1]);\n@@ -449,20 +454,20 @@\n ; Replicate from vector element\n ; vrepb, vreph, vrepf, vrepg\n (define_insn \"*vec_splat<mode>\"\n-  [(set (match_operand:V_HW   0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:V_HW\n+  [(set (match_operand:V_128_NOSINGLE   0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V_128_NOSINGLE\n \t (vec_select:<non_vec>\n-\t  (match_operand:V_HW 1 \"register_operand\"  \"v\")\n+\t  (match_operand:V_128_NOSINGLE 1 \"register_operand\"  \"v\")\n \t  (parallel\n \t   [(match_operand:QI 2 \"const_mask_operand\" \"C\")]))))]\n-  \"TARGET_VX && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW:MODE>mode)\"\n+  \"TARGET_VX && UINTVAL (operands[2]) < GET_MODE_NUNITS (<MODE>mode)\"\n   \"vrep<bhfgq>\\t%v0,%v1,%2\"\n   [(set_attr \"op_type\" \"VRI\")])\n \n ; vlrepb, vlreph, vlrepf, vlrepg, vrepib, vrepih, vrepif, vrepig, vrepb, vreph, vrepf, vrepg\n (define_insn \"*vec_splats<mode>\"\n-  [(set (match_operand:V_HW                          0 \"register_operand\" \"=v,v,v,v\")\n-\t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"general_operand\"  \" R,K,v,d\")))]\n+  [(set (match_operand:V_128_NOSINGLE                          0 \"register_operand\" \"=v,v,v,v\")\n+\t(vec_duplicate:V_128_NOSINGLE (match_operand:<non_vec> 1 \"general_operand\"  \" R,K,v,d\")))]\n   \"TARGET_VX\"\n   \"@\n    vlrep<bhfgq>\\t%v0,%1\n@@ -471,18 +476,45 @@\n    #\"\n   [(set_attr \"op_type\" \"VRX,VRI,VRI,*\")])\n \n+; A TFmode operand resides in FPR register pairs while V1TF is in a\n+; single vector register.\n+(define_insn \"*vec_tf_to_v1tf\"\n+  [(set (match_operand:V1TF                   0 \"nonimmediate_operand\" \"=v,v,R,v,v\")\n+\t(vec_duplicate:V1TF (match_operand:TF 1 \"general_operand\"       \"v,R,v,G,d\")))]\n+  \"TARGET_VX\"\n+  \"@\n+   vmrhg\\t%v0,%1,%N1\n+   vl\\t%v0,%1\n+   vst\\t%v1,%0\n+   vzero\\t%v0\n+   vlvgp\\t%v0,%1,%N1\"\n+  [(set_attr \"op_type\" \"VRR,VRX,VRX,VRI,VRR\")])\n+\n+(define_insn \"*vec_ti_to_v1ti\"\n+  [(set (match_operand:V1TI                   0 \"nonimmediate_operand\" \"=v,v,R,  v,  v,v\")\n+\t(vec_duplicate:V1TI (match_operand:TI 1 \"general_operand\"       \"v,R,v,j00,jm1,d\")))]\n+  \"TARGET_VX\"\n+  \"@\n+   vlr\\t%v0,%v1\n+   vl\\t%v0,%1\n+   vst\\t%v1,%0\n+   vzero\\t%v0\n+   vone\\t%v0\n+   vlvgp\\t%v0,%1,%N1\"\n+  [(set_attr \"op_type\" \"VRR,VRX,VRX,VRI,VRI,VRR\")])\n+\n ; vec_splats is supposed to replicate op1 into all elements of op0\n ; This splitter first sets the rightmost element of op0 to op1 and\n ; then does a vec_splat to replicate that element into all other\n ; elements.\n (define_split\n-  [(set (match_operand:V_HW                          0 \"register_operand\" \"\")\n-\t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:V_128_NOSINGLE                          0 \"register_operand\" \"\")\n+\t(vec_duplicate:V_128_NOSINGLE (match_operand:<non_vec> 1 \"register_operand\" \"\")))]\n   \"TARGET_VX && GENERAL_REG_P (operands[1])\"\n   [(set (match_dup 0)\n-\t(unspec:V_HW [(match_dup 1) (match_dup 2) (match_dup 0)] UNSPEC_VEC_SET))\n+\t(unspec:V_128_NOSINGLE [(match_dup 1) (match_dup 2) (match_dup 0)] UNSPEC_VEC_SET))\n    (set (match_dup 0)\n-\t(vec_duplicate:V_HW\n+\t(vec_duplicate:V_128_NOSINGLE\n \t (vec_select:<non_vec>\n \t  (match_dup 0) (parallel [(match_dup 2)]))))]\n {\n@@ -1129,13 +1161,15 @@\n   operands[3] = gen_reg_rtx (V2DImode);\n })\n \n-(define_insn \"*vec_load_pairv2di\"\n-  [(set (match_operand:V2DI                0 \"register_operand\" \"=v\")\n-\t(vec_concat:V2DI (match_operand:DI 1 \"register_operand\"  \"d\")\n-\t\t\t (match_operand:DI 2 \"register_operand\"  \"d\")))]\n+(define_insn \"*vec_load_pair<mode>\"\n+  [(set (match_operand:V_HW_64                       0 \"register_operand\" \"=v,v\")\n+\t(vec_concat:V_HW_64 (match_operand:<non_vec> 1 \"register_operand\"  \"d,v\")\n+\t\t\t    (match_operand:<non_vec> 2 \"register_operand\"  \"d,v\")))]\n   \"TARGET_VX\"\n-  \"vlvgp\\t%v0,%1,%2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n+  \"@\n+   vlvgp\\t%v0,%1,%2\n+   vmrhg\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR,VRR\")])\n \n (define_insn \"vllv16qi\"\n   [(set (match_operand:V16QI              0 \"register_operand\" \"=v\")"}, {"sha": "48164dae213c889faec7174681ee641de9186617", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -20,7 +20,6 @@\n \n ; The patterns in this file are enabled with -mzvector\n \n-(define_mode_iterator V_HW_64 [V2DI V2DF])\n (define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n (define_mode_iterator V_HW_HSD [V8HI V4SI V2DI V2DF])"}, {"sha": "359673ff6e3ed0938436a1412b311d8e14f31e84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -1,3 +1,7 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-init-2.c: New test.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.dg/ubsan/pr79904-2.c: New test."}, {"sha": "e497210a8ce58892003586ba52873fb698cdb004", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-init-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a602f9851691dc8199fc3c4d78500e47143b90a0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-2.c?ref=a602f9851691dc8199fc3c4d78500e47143b90a0", "patch": "@@ -0,0 +1,48 @@\n+/* Check that the vec_init expander does its job.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+/* { dg-require-effective-target int128 } */\n+\n+\n+\n+\n+typedef __attribute__((vector_size(16))) double v2df;\n+typedef __attribute__((vector_size(16))) long long v2di;\n+\n+typedef __attribute__((vector_size(16))) long double v1tf;\n+typedef __attribute__((vector_size(16))) __int128 v1ti;\n+\n+v1tf gld;\n+\n+v1tf\n+f (long double a)\n+{\n+  return (v1tf){ a };\n+}\n+\n+v1ti\n+g (__int128 a)\n+{\n+  return (v1ti){ a };\n+}\n+/* { dg-final { scan-assembler-times \"vl\\t\" 2 } } */\n+\n+v1tf\n+h ()\n+{\n+  long double a;\n+  asm volatile (\"\" : \"=f\" (a));\n+  return (v1tf){ a };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrhg\\t\" 1 } } */\n+\n+v1ti\n+i ()\n+{\n+  __int128 a;\n+  asm volatile (\"\" : \"=d\" (a));\n+  return (v1ti){ a };\n+}\n+/* { dg-final { scan-assembler-times \"vlvgp\\t\" 1 } } */"}]}