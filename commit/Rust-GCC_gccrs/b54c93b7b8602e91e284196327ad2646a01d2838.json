{"sha": "b54c93b7b8602e91e284196327ad2646a01d2838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0YzkzYjdiODYwMmU5MWUyODQxOTYzMjdhZDI2NDZhMDFkMjgzOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-11-13T13:10:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-11-13T13:10:17Z"}, "message": "bpapi.h (TARGET_BPABI_CPP_BUILTINS): Define __GXX_TYPEINFO_EQUALITY_INLINE but not __GXX_MERGED_TYPEINFO_NAMES.\n\ngcc:\n\t* config/arm/bpapi.h (TARGET_BPABI_CPP_BUILTINS): Define\n\t__GXX_TYPEINFO_EQUALITY_INLINE but not\n\t__GXX_MERGED_TYPEINFO_NAMES.\n\t* config/arm/symbian.h (TARGET_OS_CPP_BUILTINS): Define\n\t__GXX_MERGED_TYPEINFO_NAMES.\n\t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Define\n\t__GXX_TYPEINFO_EQUALITY_INLINE.\n\nlibstdc++-v3:\n\t* libsupc++/typeinfo (__GXX_TYPEINFO_EQUALITY_INLINE): Define.\n\tUse instead of __GXX_MERGED_TYPEINFO_NAMES to condition inline\n\tdefinitions.\n\t* libsupc++/tinfo.cc (operator==): Condition on\n\t__GXX_TYPEINFO_EQUALITY_INLINE; check __GXX_MERGED_TYPEINFO_NAMES\n\tto determine algorithm.\n\t* libsupc++/tinfo2.cc (type_info::before): Likewise.\n\nFrom-SVN: r118755", "tree": {"sha": "e7e22593e28800c7b7ed6b9d807015761663859d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e22593e28800c7b7ed6b9d807015761663859d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54c93b7b8602e91e284196327ad2646a01d2838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54c93b7b8602e91e284196327ad2646a01d2838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54c93b7b8602e91e284196327ad2646a01d2838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54c93b7b8602e91e284196327ad2646a01d2838/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da10ac71f76160cb5f94912e29b449cfd2de04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da10ac71f76160cb5f94912e29b449cfd2de04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da10ac71f76160cb5f94912e29b449cfd2de04d"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "00039dc0ad9195bdde0fee29e11401bd49cae7e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -1,3 +1,13 @@\n+2006-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/bpapi.h (TARGET_BPABI_CPP_BUILTINS): Define\n+\t__GXX_TYPEINFO_EQUALITY_INLINE but not\n+\t__GXX_MERGED_TYPEINFO_NAMES.\n+\t* config/arm/symbian.h (TARGET_OS_CPP_BUILTINS): Define\n+\t__GXX_MERGED_TYPEINFO_NAMES.\n+\t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Define\n+\t__GXX_TYPEINFO_EQUALITY_INLINE.\n+\n 2006-11-13  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Zdenek Dvorak <dvorakz@suse.cz>\n "}, {"sha": "71b2ec580c64f11c7698168989eef3389585bd3c", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -102,7 +102,7 @@\n #define TARGET_BPABI_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      builtin_define (\"__GXX_MERGED_TYPEINFO_NAMES=0\");\t\\\n+      builtin_define (\"__GXX_TYPEINFO_EQUALITY_INLINE=0\");\t\\\n     }\t\t\t\t\t\t\t\\\n   while (false)\n "}, {"sha": "eca67db655c02e557cc256c55cf6a864cff49d60", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -79,13 +79,16 @@\n \n /* Define the __symbian__ macro.  */\n #undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      /* Include the default BPABI stuff.  */\t\\\n-      TARGET_BPABI_CPP_BUILTINS ();\t\t\\\n-      builtin_define (\"__symbian__\");\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      /* Include the default BPABI stuff.  */\t\t\t\\\n+      TARGET_BPABI_CPP_BUILTINS ();\t\t\t\t\\\n+      /* Symbian OS does not support merging symbols across DLL\t\\\n+\t boundaries.  */\t\t\t\t\t\\\n+      builtin_define (\"__GXX_MERGED_TYPEINFO_NAMES=0\");\t\t\\\n+      builtin_define (\"__symbian__\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (false)\n \n /* On SymbianOS, these sections are not writable, so we use \"a\","}, {"sha": "9b0cd7f0c7999a4220aa2f5d03c5eb4da0423aca", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -70,6 +70,7 @@ Boston, MA 02110-1301, USA.  */\n \t/* Even though linkonce works with static libs, this is needed \t\\\n \t    to compare typeinfo symbols across dll boundaries.  */\t\\\n \tbuiltin_define (\"__GXX_MERGED_TYPEINFO_NAMES=0\");\t\t\\\n+\tbuiltin_define (\"__GXX_TYPEINFO_EQUALITY_INLINE=0\");\t\t\\\n \tMAYBE_UWIN_CPP_BUILTINS ();\t\t\t\t\t\\\n \tEXTRA_OS_CPP_BUILTINS ();\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "bb9d08ce52c785f2b92448fa1876fa8c9d29bf8e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -1,3 +1,13 @@\n+2006-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libsupc++/typeinfo (__GXX_TYPEINFO_EQUALITY_INLINE): Define.\n+\tUse instead of __GXX_MERGED_TYPEINFO_NAMES to condition inline\n+\tdefinitions.\n+\t* libsupc++/tinfo.cc (operator==): Condition on\n+\t__GXX_TYPEINFO_EQUALITY_INLINE; check __GXX_MERGED_TYPEINFO_NAMES\n+\tto determine algorithm.\n+\t* libsupc++/tinfo2.cc (type_info::before): Likewise.\n+\n 2006-11-12  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/bitmap_allocator.h: Uglify some names."}, {"sha": "a153c2d4d4c533c2ae32ebc0ac8edd9160b53fc8", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -44,13 +44,17 @@ std::type_info::\n std::bad_cast::~bad_cast() throw() { }\n std::bad_typeid::~bad_typeid() throw() { }\n \n-#if !__GXX_MERGED_TYPEINFO_NAMES\n+#if !__GXX_TYPEINFO_EQUALITY_INLINE\n \n // We can't rely on common symbols being shared between shared objects.\n bool std::type_info::\n operator== (const std::type_info& arg) const\n {\n+#if __GXX_MERGED_TYPEINFO_NAMES\n+  return name () == arg.name ();\n+#else\n   return (&arg == this) || (__builtin_strcmp (name (), arg.name ()) == 0);\n+#endif\n }\n \n #endif"}, {"sha": "8fdcac3604a7f019115881a0224f4d7efae98e0b", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -38,12 +38,16 @@ extern \"C\" void abort ();\n \n using std::type_info;\n \n-#if !__GXX_MERGED_TYPEINFO_NAMES\n+#if !__GXX_TYPEINFO_EQUALITY_INLINE\n \n bool\n type_info::before (const type_info &arg) const\n {\n+#if __GXX_MERGED_TYPEINFO_NAMES\n+  return name () < arg.name ();\n+#else\n   return __builtin_strcmp (name (), arg.name ()) < 0;\n+#endif\n }\n \n #endif"}, {"sha": "fb5957d30dd8944b7a4ede28756f9b32802c6748", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c93b7b8602e91e284196327ad2646a01d2838/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=b54c93b7b8602e91e284196327ad2646a01d2838", "patch": "@@ -46,6 +46,22 @@ namespace __cxxabiv1\n   class __class_type_info;\n } // namespace __cxxabiv1\n \n+// Determine whether typeinfo names for the same type are merged (in which\n+// case comparison can just compare pointers) or not (in which case\n+// strings must be compared and g++.dg/abi/local1.C will fail), and\n+// whether comparison is to be implemented inline or not.  By default we\n+// use inline pointer comparison if weak symbols are available, and\n+// out-of-line strcmp if not.  Out-of-line pointer comparison is used\n+// where the object files are to be portable to multiple systems, some of\n+// which may not be able to use pointer comparison, but the particular\n+// system for which libstdc++ is being built can use pointer comparison;\n+// in particular for most ARM EABI systems, where the ABI specifies\n+// out-of-line comparison.  Inline strcmp is not currently supported.  The\n+// compiler's target configuration can override the defaults by defining\n+// __GXX_TYPEINFO_EQUALITY_INLINE to 1 or 0 to indicate whether or not\n+// comparison is inline, and __GXX_MERGED_TYPEINFO_NAMES to 1 or 0 to\n+// indicate whether or not pointer comparison can be used.\n+\n #ifndef __GXX_MERGED_TYPEINFO_NAMES\n   #if !__GXX_WEAK__\n     // If weak symbols are not supported, typeinfo names are not merged.\n@@ -56,6 +72,15 @@ namespace __cxxabiv1\n   #endif\n #endif\n \n+// By default follow the same rules as for __GXX_MERGED_TYPEINFO_NAMES.\n+#ifndef __GXX_TYPEINFO_EQUALITY_INLINE\n+  #if !__GXX_WEAK__\n+    #define __GXX_TYPEINFO_EQUALITY_INLINE 0\n+  #else\n+    #define __GXX_TYPEINFO_EQUALITY_INLINE 1\n+  #endif\n+#endif\n+\n namespace std \n {\n   /**\n@@ -91,13 +116,16 @@ namespace std\n     const char* name() const\n     { return __name; }\n \n-#if !__GXX_MERGED_TYPEINFO_NAMES\n+#if !__GXX_TYPEINFO_EQUALITY_INLINE\n     bool before(const type_info& __arg) const;\n     // In old abi, or when weak symbols are not supported, there can\n     // be multiple instances of a type_info object for one\n     // type. Uniqueness must use the _name value, not object address.\n     bool operator==(const type_info& __arg) const;\n #else\n+  #if !__GXX_MERGED_TYPEINFO_NAMES\n+    #error \"Inline implementation of type_info comparision requires merging of type_info objects\"\n+  #endif\n     /** Returns true if @c *this precedes @c __arg in the implementation's\n      *  collation order.  */\n     // In new abi we can rely on type_info's NTBS being unique,"}]}