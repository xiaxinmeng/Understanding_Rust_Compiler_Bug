{"sha": "22e0395a104807767c1dda3e97ba8a44d435dee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlMDM5NWExMDQ4MDc3NjdjMWRkYTNlOTdiYThhNDRkNDM1ZGVlNw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-12-12T14:55:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-12-12T14:55:59Z"}, "message": "cfgcleanup.c (condjump_equiv_p, [...]): Fix whitespace in vincinity of to-be-installed changes.\n\n2005-12-12  J\"orn Rennecke <joern.rennecke@st.com>\n\n\t* cfgcleanup.c (condjump_equiv_p, try_crossjump_to_edge):\n\tFix whitespace in vincinity of to-be-installed changes.\n\t* struct-equiv.c (merge_memattrs, death_notes_match_p): Fix whitespace.\n\t(insns_match_p): Likewise.\n\nFrom-SVN: r108410", "tree": {"sha": "82ddbcc23afcc99d1d1a5c150cc7d84e9f8ddb39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ddbcc23afcc99d1d1a5c150cc7d84e9f8ddb39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e0395a104807767c1dda3e97ba8a44d435dee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e0395a104807767c1dda3e97ba8a44d435dee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e0395a104807767c1dda3e97ba8a44d435dee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e0395a104807767c1dda3e97ba8a44d435dee7/comments", "author": null, "committer": null, "parents": [{"sha": "e5c681b3ee561d6576eff6a4d9244d7916f522e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c681b3ee561d6576eff6a4d9244d7916f522e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c681b3ee561d6576eff6a4d9244d7916f522e6"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "063cc3f666042a5740e4e7a5fca329b271fe5eb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22e0395a104807767c1dda3e97ba8a44d435dee7", "patch": "@@ -1,3 +1,10 @@\n+2005-12-12  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* cfgcleanup.c (condjump_equiv_p, try_crossjump_to_edge):\n+\tFix whitespace in vincinity of to-be-installed changes.\n+\t* struct-equiv.c (merge_memattrs, death_notes_match_p): Fix whitespace.\n+\t(insns_match_p): Likewise.\n+\n 2005-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config.gcc (ms1): Replace with ..."}, {"sha": "80d68de7d93af706d6afa571af175309598172a8", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=22e0395a104807767c1dda3e97ba8a44d435dee7", "patch": "@@ -956,28 +956,28 @@ condjump_equiv_p (basic_block bb1, basic_block bb2)\n       int prob2;\n \n       if (b1->dest == b2->dest)\n-        prob2 = b2->probability;\n+\tprob2 = b2->probability;\n       else\n-        /* Do not use f2 probability as f2 may be forwarded.  */\n-        prob2 = REG_BR_PROB_BASE - b2->probability;\n+\t/* Do not use f2 probability as f2 may be forwarded.  */\n+\tprob2 = REG_BR_PROB_BASE - b2->probability;\n \n       /* Fail if the difference in probabilities is greater than 50%.\n-         This rules out two well-predicted branches with opposite\n-         outcomes.  */\n+\t This rules out two well-predicted branches with opposite\n+\t outcomes.  */\n       if (abs (b1->probability - prob2) > REG_BR_PROB_BASE / 2)\n-        {\n-          if (dump_file)\n-            fprintf (dump_file,\n-                     \"Outcomes of branch in bb %i and %i differ too much (%i %i)\\n\",\n-                     bb1->index, bb2->index, b1->probability, prob2);\n-\n-          return false;\n-        }\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file,\n+\t\t     \"Outcomes of branch in bb %i and %i differ too much (%i %i)\\n\",\n+\t\t     bb1->index, bb2->index, b1->probability, prob2);\n+\n+\t  return false;\n+\t}\n     }\n \n   if (dump_file && match)\n     fprintf (dump_file, \"Conditionals in bb %i and %i match.\\n\",\n-             bb1->index, bb2->index);\n+\t     bb1->index, bb2->index);\n \n   return match;\n }\n@@ -1173,12 +1173,12 @@ try_crossjump_to_edge (int mode, edge e1, edge e2)\n   newpos1 = newpos2 = NULL_RTX;\n \n   /* If we have partitioned hot/cold basic blocks, it is a bad idea\n-     to try this optimization. \n+     to try this optimization.\n \n      Basic block partitioning may result in some jumps that appear to\n-     be optimizable (or blocks that appear to be mergeable), but which really \n-     must be left untouched (they are required to make it safely across \n-     partition boundaries).  See the comments at the top of \n+     be optimizable (or blocks that appear to be mergeable), but which really\n+     must be left untouched (they are required to make it safely across\n+     partition boundaries).  See the comments at the top of\n      bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n \n   if (flag_reorder_blocks_and_partition && no_new_pseudos)"}, {"sha": "9169958333f51c1a47404593cd28183cc4ba60d6", "filename": "gcc/struct-equiv.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2Fstruct-equiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e0395a104807767c1dda3e97ba8a44d435dee7/gcc%2Fstruct-equiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstruct-equiv.c?ref=22e0395a104807767c1dda3e97ba8a44d435dee7", "patch": "@@ -69,7 +69,7 @@ merge_memattrs (rtx x, rtx y)\n \tMEM_ATTRS (y) = 0;\n       else if (! MEM_ATTRS (y))\n \tMEM_ATTRS (x) = 0;\n-      else \n+      else\n \t{\n \t  rtx mem_size;\n \n@@ -78,7 +78,7 @@ merge_memattrs (rtx x, rtx y)\n \t      set_mem_alias_set (x, 0);\n \t      set_mem_alias_set (y, 0);\n \t    }\n-\t  \n+\n \t  if (! mem_expr_equal_p (MEM_EXPR (x), MEM_EXPR (y)))\n \t    {\n \t      set_mem_expr (x, 0);\n@@ -91,7 +91,7 @@ merge_memattrs (rtx x, rtx y)\n \t      set_mem_offset (x, 0);\n \t      set_mem_offset (y, 0);\n \t    }\n-\t \n+\n \t  if (!MEM_SIZE (x))\n \t    mem_size = NULL_RTX;\n \t  else if (!MEM_SIZE (y))\n@@ -106,7 +106,7 @@ merge_memattrs (rtx x, rtx y)\n \t  set_mem_align (y, MEM_ALIGN (x));\n \t}\n     }\n-  \n+\n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n@@ -143,8 +143,8 @@ death_notes_match_p (rtx i1 ATTRIBUTE_UNUSED, rtx i2 ATTRIBUTE_UNUSED,\n   if ((mode & CLEANUP_POST_REGSTACK) && stack_regs_mentioned (i1))\n     {\n       /* If register stack conversion has already been done, then\n-         death notes must also be compared before it is certain that\n-         the two instruction streams match.  */\n+\t death notes must also be compared before it is certain that\n+\t the two instruction streams match.  */\n \n       rtx note;\n       HARD_REG_SET i1_regset, i2_regset;\n@@ -200,7 +200,7 @@ insns_match_p (int mode, rtx i1, rtx i2)\n \n   if (CALL_P (i1)\n       && (!rtx_equal_p (CALL_INSN_FUNCTION_USAGE (i1),\n-\t\t        CALL_INSN_FUNCTION_USAGE (i2))\n+\t\t\tCALL_INSN_FUNCTION_USAGE (i2))\n \t  || SIBLING_CALL_P (i1) != SIBLING_CALL_P (i2)))\n     return false;\n "}]}