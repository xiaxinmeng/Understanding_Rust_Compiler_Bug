{"sha": "e65a3857a5b89f314ceeecb2edd4c244bde3872b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1YTM4NTdhNWI4OWYzMTRjZWVlY2IyZWRkNGMyNDRiZGUzODcyYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-03-25T02:41:54Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-03-25T02:41:54Z"}, "message": "darwin.md (load_macho_picbase): Ignore operand 0.\n\n        * config/rs6000/darwin.md (load_macho_picbase): Ignore operand 0.\n        (load_macho_picbase_{si,di}): Convert to LR hard reg.\n        (call_indirect_nonlocal_darwin64): Same.\n        (call_nonlocal_darwin64): Same.\n        (call_value_indirect_nonlocal_darwin64): Same.\n        (call_value_nonlocal_darwin64): Same.\n        (sibcall_nonlocal_darwin64): Same.\n        (sibcall_value_nonlocal_darwin64): Same.\n        (sibcall_symbolic_64): Same.\n        (sibcall_value_symbolic_64): Same.\n        * config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Remove\n        LR pseudo.\n        (rs6000_emit_load_toc_table): Same.\n        * config/rs6000/altivec.md (restore_world): Convert to LR hard reg.\n        * config/rs6000/rs6000.md (mulh_call): Convert to LR hard reg.\n        (mull_call): Same.\n        (divss_call): Same.\n        (divus_call): Same.\n        (quoss_call): Same.\n        (quous_call): Same.\n        (load_toc_v4_pic_si): Same\n        (load_toc_v4_PIC_1): Same.\n        (load_toc_v4_PIC_1b): Same.\n        (call_indirect_aix{32,64}): Same.\n        (call_value_indirect_aix{32,64}): Same.\n        (call): Same.\n        (call_value): Same.\n        (call_local{32,64}): Same.\n        (call_value_local{32,64}): Same.\n        (call_indirect_nonlocal_aix{32,64}): Same.\n        (call_nonlocal_aix{32,64}): Same.\n        (call_value_indirect_nonlocal_aix{32,64}): Same.\n        (call_value_nonlocal_aix{32,64}): Same.\n        (call_indirect_nonlocal_sysv<mode>): Same.\n        (call_nonlocal_sysv<mode>): Same.\n        (call_value_indirect_nonlocal_sysv<mode>): Same.\n        (call_value_nonlocal_sysv<mode>): Same.\n        (sibcall): Same.\n        (sibcall_local{32,64}): Same.\n        (sibcall_value_local{32,64}): Same.\n        (sibcall_nonlocal_aix{32,64}): Same.\n        (sibcall_value_nonlocal_aix{32,64}): Same.\n        (sibcall_value_nonlocal_aix{32,64}): Same.\n        (sibcall_nonlocal_sysv<mode>): Same.\n        (sibcall_value): Same.\n        (sibcall_value_nonlocal_sysv<mode>): Same.\n\nFrom-SVN: r123193", "tree": {"sha": "be8bc4ce0f4525d83337e709f78253edfbe04d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8bc4ce0f4525d83337e709f78253edfbe04d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65a3857a5b89f314ceeecb2edd4c244bde3872b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65a3857a5b89f314ceeecb2edd4c244bde3872b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65a3857a5b89f314ceeecb2edd4c244bde3872b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65a3857a5b89f314ceeecb2edd4c244bde3872b/comments", "author": null, "committer": null, "parents": [{"sha": "3303be154cf041e2bd173ef5b2939f300949a7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3303be154cf041e2bd173ef5b2939f300949a7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3303be154cf041e2bd173ef5b2939f300949a7ea"}], "stats": {"total": 248, "additions": 143, "deletions": 105}, "files": [{"sha": "ae81fcd9db4ef5a92f63aa9568f54513b7e927ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65a3857a5b89f314ceeecb2edd4c244bde3872b", "patch": "@@ -1,3 +1,51 @@\n+2007-03-25  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/darwin.md (load_macho_picbase): Ignore operand 0.\n+\t(load_macho_picbase_{si,di}): Convert to LR hard reg.\n+\t(call_indirect_nonlocal_darwin64): Same.\n+\t(call_nonlocal_darwin64): Same.\n+\t(call_value_indirect_nonlocal_darwin64): Same.\n+\t(call_value_nonlocal_darwin64): Same.\n+\t(sibcall_nonlocal_darwin64): Same.\n+\t(sibcall_value_nonlocal_darwin64): Same.\n+\t(sibcall_symbolic_64): Same.\n+\t(sibcall_value_symbolic_64): Same.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Remove\n+\tLR pseudo.\n+\t(rs6000_emit_load_toc_table): Same.\n+\t* config/rs6000/altivec.md (restore_world): Convert to LR hard reg.\n+\t* config/rs6000/rs6000.md (mulh_call): Convert to LR hard reg.\n+\t(mull_call): Same.\n+\t(divss_call): Same.\n+\t(divus_call): Same.\n+\t(quoss_call): Same.\n+\t(quous_call): Same.\n+\t(load_toc_v4_pic_si): Same\n+\t(load_toc_v4_PIC_1): Same.\n+\t(load_toc_v4_PIC_1b): Same.\n+\t(call_indirect_aix{32,64}): Same.\n+\t(call_value_indirect_aix{32,64}): Same.\n+\t(call): Same.\n+\t(call_value): Same.\n+\t(call_local{32,64}): Same.\n+\t(call_value_local{32,64}): Same.\n+\t(call_indirect_nonlocal_aix{32,64}): Same.\n+\t(call_nonlocal_aix{32,64}): Same.\n+\t(call_value_indirect_nonlocal_aix{32,64}): Same.\n+\t(call_value_nonlocal_aix{32,64}): Same.\n+\t(call_indirect_nonlocal_sysv<mode>): Same.\n+\t(call_nonlocal_sysv<mode>): Same.\n+\t(call_value_indirect_nonlocal_sysv<mode>): Same.\n+\t(call_value_nonlocal_sysv<mode>): Same.\n+\t(sibcall): Same.\n+\t(sibcall_local{32,64}): Same.\n+\t(sibcall_value_local{32,64}): Same.\n+\t(sibcall_nonlocal_aix{32,64}): Same.\n+\t(sibcall_value_nonlocal_aix{32,64}): Same.\n+\t(sibcall_nonlocal_sysv<mode>): Same.\n+\t(sibcall_value): Same.\n+\t(sibcall_value_nonlocal_sysv<mode>): Same.\n+\n 2007-03-24  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/lib1funcs.asm (div0): Use ARM_FUNC_START and do_push."}, {"sha": "072e813edf63b05854a0d07e19b407b3162e2d6b", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=e65a3857a5b89f314ceeecb2edd4c244bde3872b", "patch": "@@ -312,7 +312,7 @@\n (define_insn \"*restore_world\"\n  [(match_parallel 0 \"restore_world_operation\"\n                   [(return)\n-                   (use (match_operand:SI 1 \"register_operand\" \"l\"))\n+\t\t   (use (reg:SI 65))\n                    (use (match_operand:SI 2 \"call_operand\" \"s\"))\n                    (clobber (match_operand:SI 3 \"gpc_reg_operand\" \"=r\"))])]\n  \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN) && TARGET_32BIT\""}, {"sha": "ea46ef03585d1aa169bcba60ec2459db837189ba", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=e65a3857a5b89f314ceeecb2edd4c244bde3872b", "patch": "@@ -245,28 +245,28 @@ Boston, MA 02110-1301, USA.  */\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n {\n   if (TARGET_32BIT)\n-    emit_insn (gen_load_macho_picbase_si (operands[0], operands[1]));\n+    emit_insn (gen_load_macho_picbase_si (operands[1]));\n   else\n-    emit_insn (gen_load_macho_picbase_di (operands[0], operands[1]));\n+    emit_insn (gen_load_macho_picbase_di (operands[1]));\n \n   DONE;\n })\n \n (define_insn \"load_macho_picbase_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")\n+  [(set (reg:SI 65)\n+\t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n-  \"bcl 20,31,%1\\\\n%1:\"\n+  \"bcl 20,31,%0\\\\n%0:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"load_macho_picbase_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n-\t(unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+  [(set (reg:DI 65)\n+\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n-  \"bcl 20,31,%1\\\\n%1:\"\n+  \"bcl 20,31,%0\\\\n%0:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n@@ -312,7 +312,7 @@ Boston, MA 02110-1301, USA.  */\n   [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"c,*l,c,*l\"))\n \t (match_operand 1 \"\" \"g,g,g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,O,n,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l,l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT\"\n {\n   return \"b%T0l\";\n@@ -324,7 +324,7 @@ Boston, MA 02110-1301, USA.  */\n   [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(DEFAULT_ABI == ABI_DARWIN)\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n {\n@@ -342,7 +342,7 @@ Boston, MA 02110-1301, USA.  */\n \t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"c,*l,c,*l\"))\n \t      (match_operand 2 \"\" \"g,g,g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,O,n,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l,l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"DEFAULT_ABI == ABI_DARWIN\"\n {\n   return \"b%T1l\";\n@@ -355,7 +355,7 @@ Boston, MA 02110-1301, USA.  */\n \t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(DEFAULT_ABI == ABI_DARWIN)\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n {\n@@ -372,7 +372,7 @@ Boston, MA 02110-1301, USA.  */\n   [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN)\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n@@ -387,7 +387,7 @@ Boston, MA 02110-1301, USA.  */\n \t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN)\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n@@ -403,7 +403,7 @@ Boston, MA 02110-1301, USA.  */\n   [(call (mem:SI (match_operand:DI 0 \"call_operand\" \"s,c\")) ; 64\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n   \"*\n@@ -423,7 +423,7 @@ Boston, MA 02110-1301, USA.  */\n \t(call (mem:SI (match_operand:DI 1 \"call_operand\" \"s,c\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand:SI 3 \"\" \"\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n   \"*"}, {"sha": "51ee7c089f38572f96fbc373ae173082cdfc7a25", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e65a3857a5b89f314ceeecb2edd4c244bde3872b", "patch": "@@ -3444,17 +3444,17 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\trs6000_emit_move (got, gsym, Pmode);\n \t      else\n \t\t{\n-\t\t  rtx tempLR, tmp3, mem;\n+\t\t  rtx tmp3, mem;\n \t\t  rtx first, last;\n \n-\t\t  tempLR = gen_reg_rtx (Pmode);\n \t\t  tmp1 = gen_reg_rtx (Pmode);\n \t\t  tmp2 = gen_reg_rtx (Pmode);\n \t\t  tmp3 = gen_reg_rtx (Pmode);\n \t\t  mem = gen_const_mem (Pmode, tmp1);\n \n-\t\t  first = emit_insn (gen_load_toc_v4_PIC_1b (tempLR, gsym));\n-\t\t  emit_move_insn (tmp1, tempLR);\n+\t\t  first = emit_insn (gen_load_toc_v4_PIC_1b (gsym));\n+\t\t  emit_move_insn (tmp1,\n+\t\t\t\t  gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n \t\t  emit_move_insn (tmp2, mem);\n \t\t  emit_insn (gen_addsi3 (tmp3, tmp1, tmp2));\n \t\t  last = emit_move_insn (got, tmp3);\n@@ -13988,7 +13988,7 @@ rs6000_emit_load_toc_table (int fromprolog)\n   if (TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic)\n     {\n       char buf[30];\n-      rtx lab, tmp1, tmp2, got, tempLR;\n+      rtx lab, tmp1, tmp2, got;\n \n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n       lab = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n@@ -14002,13 +14002,11 @@ rs6000_emit_load_toc_table (int fromprolog)\n \t  tmp1 = gen_reg_rtx (Pmode);\n \t  tmp2 = gen_reg_rtx (Pmode);\n \t}\n-      tempLR = (fromprolog\n-\t\t? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t: gen_reg_rtx (Pmode));\n-      insn = emit_insn (gen_load_toc_v4_PIC_1 (tempLR, lab));\n+      insn = emit_insn (gen_load_toc_v4_PIC_1 (lab));\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n-      insn = emit_move_insn (tmp1, tempLR);\n+      insn = emit_move_insn (tmp1,\n+\t\t\t     gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n       insn = emit_insn (gen_load_toc_v4_PIC_3b (tmp2, tmp1, got, lab));\n@@ -14020,23 +14018,17 @@ rs6000_emit_load_toc_table (int fromprolog)\n     }\n   else if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n     {\n-      rtx tempLR = (fromprolog\n-\t\t    ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t    : gen_reg_rtx (Pmode));\n-\n-      insn = emit_insn (gen_load_toc_v4_pic_si (tempLR));\n+      insn = emit_insn (gen_load_toc_v4_pic_si ());\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n-      insn = emit_move_insn (dest, tempLR);\n+      insn = emit_move_insn (dest,\n+\t\t\t     gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n       if (fromprolog)\n \trs6000_maybe_dead (insn);\n     }\n   else if (TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2)\n     {\n       char buf[30];\n-      rtx tempLR = (fromprolog\n-\t\t    ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n-\t\t    : gen_reg_rtx (Pmode));\n       rtx temp0 = (fromprolog\n \t\t   ? gen_rtx_REG (Pmode, 0)\n \t\t   : gen_reg_rtx (Pmode));\n@@ -14051,9 +14043,10 @@ rs6000_emit_load_toc_table (int fromprolog)\n \t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCL\", rs6000_pic_labelno);\n \t  symL = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n-\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (tempLR,\n-\t\t\t\t\t\t\t       symF)));\n-\t  rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n+\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (symF)));\n+\t  rs6000_maybe_dead (emit_move_insn (dest,\n+\t\t\t\t\t     gen_rtx_REG (Pmode,\n+\t\t\t\t\t\t\t  LINK_REGISTER_REGNUM)));\n \t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_2 (temp0, dest,\n \t\t\t\t\t\t\t       symL,\n \t\t\t\t\t\t\t       symF)));\n@@ -14063,8 +14056,9 @@ rs6000_emit_load_toc_table (int fromprolog)\n \t  rtx tocsym;\n \n \t  tocsym = gen_rtx_SYMBOL_REF (Pmode, toc_label_name);\n-\t  emit_insn (gen_load_toc_v4_PIC_1b (tempLR, tocsym));\n-\t  emit_move_insn (dest, tempLR);\n+\t  emit_insn (gen_load_toc_v4_PIC_1b (tocsym));\n+\t  emit_move_insn (dest,\n+\t\t\t  gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n \t  emit_move_insn (temp0, gen_rtx_MEM (Pmode, dest));\n \t}\n       insn = emit_insn (gen_addsi3 (dest, temp0, dest));"}, {"sha": "9a26c37dc2dcc6c7570fa318ac3a6ce110adeb9e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 64, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65a3857a5b89f314ceeecb2edd4c244bde3872b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e65a3857a5b89f314ceeecb2edd4c244bde3872b", "patch": "@@ -2713,7 +2713,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n \t\t\t       (sign_extend:DI (reg:SI 4)))\n \t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __mulh\"\n   [(set_attr \"type\" \"imul\")])\n@@ -2722,7 +2722,7 @@\n   [(set (reg:DI 3)\n \t(mult:DI (sign_extend:DI (reg:SI 3))\n \t\t (sign_extend:DI (reg:SI 4))))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 65))\n    (clobber (reg:SI 0))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __mull\"\n@@ -2733,7 +2733,7 @@\n \t(div:SI (reg:SI 3) (reg:SI 4)))\n    (set (reg:SI 4)\n \t(mod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 65))\n    (clobber (reg:SI 0))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __divss\"\n@@ -2744,9 +2744,9 @@\n \t(udiv:SI (reg:SI 3) (reg:SI 4)))\n    (set (reg:SI 4)\n \t(umod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 65))\n    (clobber (reg:SI 0))\n-   (clobber (match_scratch:CC 1 \"=x\"))\n+   (clobber (match_scratch:CC 0 \"=x\"))\n    (clobber (reg:CC 69))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __divus\"\n@@ -2755,17 +2755,17 @@\n (define_insn \"quoss_call\"\n   [(set (reg:SI 3)\n \t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __quoss\"\n   [(set_attr \"type\" \"idiv\")])\n \n (define_insn \"quous_call\"\n   [(set (reg:SI 3)\n \t(udiv:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 65))\n    (clobber (reg:SI 0))\n-   (clobber (match_scratch:CC 1 \"=x\"))\n+   (clobber (match_scratch:CC 0 \"=x\"))\n    (clobber (reg:CC 69))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n   \"bla __quous\"\n@@ -10482,29 +10482,29 @@\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"load_toc_v4_pic_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n+  [(set (reg:SI 65)\n \t(unspec:SI [(const_int 0)] UNSPEC_TOC))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1 && TARGET_32BIT\"\n   \"bl _GLOBAL_OFFSET_TABLE_@local-4\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"load_toc_v4_PIC_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n-   (use (unspec [(match_dup 1)] UNSPEC_TOC))]\n+  [(set (reg:SI 65)\n+\t(match_operand:SI 0 \"immediate_operand\" \"s\"))\n+   (use (unspec [(match_dup 0)] UNSPEC_TOC))]\n   \"TARGET_ELF && DEFAULT_ABI != ABI_AIX\n    && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n-  \"bcl 20,31,%1\\\\n%1:\"\n+  \"bcl 20,31,%0\\\\n%0:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"load_toc_v4_PIC_1b\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")]\n+  [(set (reg:SI 65)\n+\t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")]\n \t\tUNSPEC_TOCPTR))]\n   \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n-  \"bcl 20,31,$+8\\\\n\\\\t.long %1-$\"\n+  \"bcl 20,31,$+8\\\\n\\\\t.long %0-$\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n@@ -10610,7 +10610,7 @@\n \t      (use (reg:SI 11))\n \t      (set (reg:SI 2)\n \t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"TARGET_32BIT\"\n   \"\n { operands[2] = gen_reg_rtx (SImode); }\")\n@@ -10632,7 +10632,7 @@\n \t      (use (reg:DI 11))\n \t      (set (reg:DI 2)\n \t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"TARGET_64BIT\"\n   \"\n { operands[2] = gen_reg_rtx (DImode); }\")\n@@ -10655,7 +10655,7 @@\n \t      (use (reg:SI 11))\n \t      (set (reg:SI 2)\n \t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"TARGET_32BIT\"\n   \"\n { operands[3] = gen_reg_rtx (SImode); }\")\n@@ -10678,7 +10678,7 @@\n \t      (use (reg:DI 11))\n \t      (set (reg:DI 2)\n \t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"TARGET_64BIT\"\n   \"\n { operands[3] = gen_reg_rtx (DImode); }\")\n@@ -10688,7 +10688,7 @@\n   [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"\"\n   \"\n {\n@@ -10758,7 +10758,7 @@\n \t\t   (call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (use (match_operand 3 \"\" \"\"))\n-\t      (clobber (scratch:SI))])]\n+\t      (clobber (reg:SI 65))])]\n   \"\"\n   \"\n {\n@@ -10838,7 +10838,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n {\n@@ -10857,7 +10857,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n {\n@@ -10877,7 +10877,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n {\n@@ -10898,7 +10898,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n {\n@@ -10927,7 +10927,7 @@\n    (use (reg:SI 11))\n    (set (reg:SI 2)\n \t(mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n-   (clobber (match_scratch:SI 2 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T0l\\;{l|lwz} 2,20(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -10937,7 +10937,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (clobber (match_scratch:SI 3 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n@@ -10952,7 +10952,7 @@\n    (use (reg:DI 11))\n    (set (reg:DI 2)\n \t(mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n-   (clobber (match_scratch:SI 2 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T0l\\;ld 2,40(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -10962,7 +10962,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (clobber (match_scratch:SI 3 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n@@ -10978,7 +10978,7 @@\n    (use (reg:SI 11))\n    (set (reg:SI 2)\n \t(mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T1l\\;{l|lwz} 2,20(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -10989,7 +10989,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (clobber (match_scratch:SI 4 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n@@ -11005,7 +11005,7 @@\n    (use (reg:DI 11))\n    (set (reg:DI 2)\n \t(mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n   \"b%T1l\\;ld 2,40(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n@@ -11016,7 +11016,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (clobber (match_scratch:SI 4 \"=l\"))]\n+   (clobber (reg:SI 65))]\n   \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n@@ -11034,7 +11034,7 @@\n   [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l,c,*l\"))\n \t (match_operand 1 \"\" \"g,g,g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,O,n,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l,l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"DEFAULT_ABI == ABI_V4\n    || DEFAULT_ABI == ABI_DARWIN\"\n {\n@@ -11053,7 +11053,7 @@\n   [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(DEFAULT_ABI == ABI_DARWIN\n    || (DEFAULT_ABI == ABI_V4\n        && (INTVAL (operands[2]) & CALL_LONG) == 0))\"\n@@ -11089,7 +11089,7 @@\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l,c,*l\"))\n \t      (match_operand 2 \"\" \"g,g,g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,O,n,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l,l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"DEFAULT_ABI == ABI_V4\n    || DEFAULT_ABI == ABI_DARWIN\"\n {\n@@ -11109,7 +11109,7 @@\n \t(call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+   (clobber (reg:SI 65))]\n   \"(DEFAULT_ABI == ABI_DARWIN\n    || (DEFAULT_ABI == ABI_V4\n        && (INTVAL (operands[3]) & CALL_LONG) == 0))\"\n@@ -11170,7 +11170,7 @@\n   [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n-\t      (use (match_operand 3 \"\" \"\"))\n+\t      (use (reg:SI 65))\n \t      (return)])]\n   \"\"\n   \"\n@@ -11184,8 +11184,6 @@\n   gcc_assert (GET_CODE (operands[1]) == CONST_INT);\n \n   operands[0] = XEXP (operands[0], 0);\n-  operands[3] = gen_reg_rtx (SImode);\n-\n }\")\n \n ;; this and similar patterns must be marked as using LR, otherwise\n@@ -11196,7 +11194,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n@@ -11216,7 +11214,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n@@ -11237,7 +11235,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n@@ -11259,7 +11257,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n@@ -11279,7 +11277,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11292,7 +11290,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11306,7 +11304,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11320,7 +11318,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11333,7 +11331,7 @@\n   [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n      || DEFAULT_ABI == ABI_V4)\n@@ -11364,7 +11362,7 @@\n \t\t(call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n \t\t      (match_operand 2 \"\" \"\")))\n \t      (use (match_operand 3 \"\" \"\"))\n-\t      (use (match_operand 4 \"\" \"\"))\n+\t      (use (reg:SI 65))\n \t      (return)])]\n   \"\"\n   \"\n@@ -11378,16 +11376,14 @@\n   gcc_assert (GET_CODE (operands[2]) == CONST_INT);\n \n   operands[1] = XEXP (operands[1], 0);\n-  operands[4] = gen_reg_rtx (SImode);\n-\n }\")\n \n (define_insn \"*sibcall_value_nonlocal_sysv<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n+   (use (reg:SI 65))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n        || DEFAULT_ABI == ABI_V4)\n@@ -14381,12 +14377,12 @@\n \n (define_insn \"*save_fpregs_<mode>\"\n   [(match_parallel 0 \"any_parallel_operand\"\n-\t\t   [(clobber (match_operand:P 1 \"register_operand\" \"=l\"))\n-\t\t    (use (match_operand:P 2 \"call_operand\" \"s\"))\n-\t\t    (set (match_operand:DF 3 \"memory_operand\" \"=m\")\n-\t\t\t (match_operand:DF 4 \"gpc_reg_operand\" \"f\"))])]\n+\t\t   [(clobber (reg:P 65))\n+\t\t    (use (match_operand:P 1 \"call_operand\" \"s\"))\n+\t\t    (set (match_operand:DF 2 \"memory_operand\" \"=m\")\n+\t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))])]\n   \"\"\n-  \"bl %z2\"\n+  \"bl %z1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n@@ -14475,12 +14471,12 @@\n (define_insn \"*return_and_restore_fpregs_<mode>\"\n  [(match_parallel 0 \"any_parallel_operand\"\n                   [(return)\n-\t\t   (use (match_operand:P 1 \"register_operand\" \"l\"))\n-\t\t   (use (match_operand:P 2 \"call_operand\" \"s\"))\n-\t\t   (set (match_operand:DF 3 \"gpc_reg_operand\" \"=f\")\n-\t\t\t(match_operand:DF 4 \"memory_operand\" \"m\"))])]\n+\t\t   (use (reg:P 65))\n+\t\t   (use (match_operand:P 1 \"call_operand\" \"s\"))\n+\t\t   (set (match_operand:DF 2 \"gpc_reg_operand\" \"=f\")\n+\t\t\t(match_operand:DF 3 \"memory_operand\" \"m\"))])]\n  \"\"\n- \"b %z2\")\n+ \"b %z1\")\n \n ; This is used in compiling the unwind routines.\n (define_expand \"eh_return\""}]}