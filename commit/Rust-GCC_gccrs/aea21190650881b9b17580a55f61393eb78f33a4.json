{"sha": "aea21190650881b9b17580a55f61393eb78f33a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhMjExOTA2NTA4ODFiOWIxNzU4MGE1NWY2MTM5M2ViNzhmMzNhNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-07-21T10:38:20Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-07-21T10:38:20Z"}, "message": "mips-protos.h (mips_expand_ext_as_unaligned_load): Add a bool argument.\n\n2012-07-21  Andrew Pinski  <apinski@cavium.com>\n\n        * config/mips/mips-protos.h (mips_expand_ext_as_unaligned_load): \n        Add a bool argument.\n        * config/mips/mips.c (mips_block_move_straight): Update call to\n        mips_expand_ext_as_unaligned_load.\n        (mips_expand_ext_as_unaligned_load): Add unsigned_p argument.\n        Accept DImode dest when the width is that of SImode.\n        * config/mips/mips.md (extv): Update call to\n\tmips_expand_ext_as_unaligned_load.\n\t(extzv): Likewise.\n\n2012-07-21  Andrew Pinski  <apinski@cavium.com>\n\n        * gcc.target/mips/unaligned-1.c: New testcase.\n\nFrom-SVN: r189742", "tree": {"sha": "82994461bf1705ad28d5bc60086f1c77591e01f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82994461bf1705ad28d5bc60086f1c77591e01f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea21190650881b9b17580a55f61393eb78f33a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea21190650881b9b17580a55f61393eb78f33a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea21190650881b9b17580a55f61393eb78f33a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea21190650881b9b17580a55f61393eb78f33a4/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6220bf437fdafee2250024aacff0a37e33ebd96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6220bf437fdafee2250024aacff0a37e33ebd96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6220bf437fdafee2250024aacff0a37e33ebd96b"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "40277665f23b751ffb9fe2fb7b6d285cccfff271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -1,3 +1,15 @@\n+2012-07-21  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/mips/mips-protos.h (mips_expand_ext_as_unaligned_load):\n+\tAdd a bool argument.\n+\t* config/mips/mips.c (mips_block_move_straight): Update call to\n+\tmips_expand_ext_as_unaligned_load.\n+\t(mips_expand_ext_as_unaligned_load): Add unsigned_p argument.\n+\tAccept DImode dest when the width is that of SImode.\n+        * config/mips/mips.md (extv): Update call to\n+\tmips_expand_ext_as_unaligned_load.\n+\t(extzv): Likewise.\n+\n 2012-07-21  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/mips/mips.c (mips_get_unaligned_mem): Copy *op after calling"}, {"sha": "cba76b6672b31bc5c9d0b8f08b3ab13271e1b5bb", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -241,7 +241,7 @@ extern bool mips_pad_arg_upward (enum machine_mode, const_tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n \n extern bool mips_expand_ext_as_unaligned_load (rtx, rtx, HOST_WIDE_INT,\n-\t\t\t\t\t       HOST_WIDE_INT);\n+\t\t\t\t\t       HOST_WIDE_INT, bool);\n extern bool mips_expand_ins_as_unaligned_store (rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t\t\tHOST_WIDE_INT);\n extern bool mips_mem_fits_mode_p (enum machine_mode mode, rtx x);"}, {"sha": "e4e93e69731ec28356bf01fb9e150101afe4dc74", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -6916,7 +6916,7 @@ mips_block_move_straight (rtx dest, rtx src, HOST_WIDE_INT length)\n       else\n \t{\n \t  rtx part = adjust_address (src, BLKmode, offset);\n-\t  if (!mips_expand_ext_as_unaligned_load (regs[i], part, bits, 0))\n+\t  if (!mips_expand_ext_as_unaligned_load (regs[i], part, bits, 0, 0))\n \t    gcc_unreachable ();\n \t}\n     }\n@@ -7249,9 +7249,10 @@ mips_get_unaligned_mem (rtx *op, HOST_WIDE_INT width, HOST_WIDE_INT bitpos,\n \n bool\n mips_expand_ext_as_unaligned_load (rtx dest, rtx src, HOST_WIDE_INT width,\n-\t\t\t\t   HOST_WIDE_INT bitpos)\n+\t\t\t\t   HOST_WIDE_INT bitpos, bool unsigned_p)\n {\n   rtx left, right, temp;\n+  rtx dest1 = NULL_RTX;\n \n   /* If TARGET_64BIT, the destination of a 32-bit \"extz\" or \"extzv\" will\n      be a paradoxical word_mode subreg.  This is the only case in which\n@@ -7261,6 +7262,16 @@ mips_expand_ext_as_unaligned_load (rtx dest, rtx src, HOST_WIDE_INT width,\n       && GET_MODE (SUBREG_REG (dest)) == SImode)\n     dest = SUBREG_REG (dest);\n \n+  /* If TARGET_64BIT, the destination of a 32-bit \"extz\" or \"extzv\" will\n+     be a DImode, create a new temp and emit a zero extend at the end.  */\n+  if (GET_MODE (dest) == DImode\n+      && REG_P (dest)\n+      && GET_MODE_BITSIZE (SImode) == width)\n+    {\n+      dest1 = dest;\n+      dest = gen_reg_rtx (SImode);\n+    }\n+\n   /* After the above adjustment, the destination must be the same\n      width as the source.  */\n   if (GET_MODE_BITSIZE (GET_MODE (dest)) != width)\n@@ -7280,6 +7291,16 @@ mips_expand_ext_as_unaligned_load (rtx dest, rtx src, HOST_WIDE_INT width,\n       emit_insn (gen_mov_lwl (temp, src, left));\n       emit_insn (gen_mov_lwr (dest, copy_rtx (src), right, temp));\n     }\n+\n+  /* If we were loading 32bits and the original register was DI then\n+     sign/zero extend into the orignal dest.  */\n+  if (dest1)\n+    {\n+      if (unsigned_p)\n+        emit_insn (gen_zero_extendsidi2 (dest1, dest));\n+      else\n+        emit_insn (gen_extendsidi2 (dest1, dest));\n+    }\n   return true;\n }\n "}, {"sha": "0edc9d94986a3d779514d6186e0481a064891e5c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -3657,7 +3657,8 @@\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n \t\t\t\t\t INTVAL (operands[2]),\n-\t\t\t\t\t INTVAL (operands[3])))\n+\t\t\t\t\t INTVAL (operands[3]),\n+\t\t\t\t\t /*unsigned=*/ false))\n     DONE;\n   else if (register_operand (operands[1], GET_MODE (operands[0]))\n \t   && ISA_HAS_EXTS && UINTVAL (operands[2]) <= 32)\n@@ -3694,7 +3695,8 @@\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n \t\t\t\t\t INTVAL (operands[2]),\n-\t\t\t\t\t INTVAL (operands[3])))\n+\t\t\t\t\t INTVAL (operands[3]),\n+\t\t\t\t\t /*unsigned=*/true))\n     DONE;\n   else if (mips_use_ins_ext_p (operands[1], INTVAL (operands[2]),\n \t\t\t       INTVAL (operands[3])))"}, {"sha": "25ca1359f97f142f2c6c2476edf794b3cd0d4bb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -1,3 +1,7 @@\n+2012-07-21  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.target/mips/unaligned-1.c: New testcase.\n+\n 2012-07-21  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.c-torture/execute/20101011-1.c (DO_TEST): Define as 0 for CRIS."}, {"sha": "23b6c8c74344420909b3cc9784cc95eb3ab164b8", "filename": "gcc/testsuite/gcc.target/mips/unaligned-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea21190650881b9b17580a55f61393eb78f33a4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c?ref=aea21190650881b9b17580a55f61393eb78f33a4", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-options \"-O2 -mgp64\" } */\n+/* { dg-final { scan-assembler-times \"sdl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sdr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ldl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ldr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"swl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"swr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lwl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lwr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+\n+/* Test to make sure we produce the unaligned load/store for\n+   both 64bit and 32bits sized accesses.  */\n+\n+struct s\n+{\n+  char c;\n+  int i;\n+  long long l;\n+} __attribute__ ((packed)) s __attribute__((aligned(1) ));\n+\n+void\n+sd (long long l)\n+{\n+  s.l = l;\n+}\n+\n+long long\n+ld ()\n+{\n+  return s.l;\n+}\n+\n+void\n+sw (int i)\n+{\n+  s.i = i;\n+}\n+\n+int\n+lw ()\n+{\n+  return s.i;\n+}"}]}