{"sha": "75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlMDI5NWIwMGFlZWRkYmQ0ZWZiMmU1NWVmM2VkOTQ2Zjg4NmE4Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-02-26T15:03:23Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-02-26T15:03:23Z"}, "message": "re PR c++/65202 (ICE segfault with constexpr/noexcept)\n\n\tPR c++/65202\n\t* constexpr.c (cxx_eval_constant_expression): Don't evaluate\n\ta RETURN_EXPR if its operand is null.\n\n\t* g++.dg/cpp1y/pr65202.C: New test.\n\nFrom-SVN: r221015", "tree": {"sha": "20c60114b5a64e884884b07d01545a630fd00ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c60114b5a64e884884b07d01545a630fd00ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "491080f4c1c24586c5e59cd7dc178e8d22fffb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491080f4c1c24586c5e59cd7dc178e8d22fffb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491080f4c1c24586c5e59cd7dc178e8d22fffb3c"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "7fcbcb93df04d46e8d07e88461c3e53ea0afc531", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "patch": "@@ -1,3 +1,9 @@\n+2015-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65202\n+\t* constexpr.c (cxx_eval_constant_expression): Don't evaluate\n+\ta RETURN_EXPR if its operand is null.\n+\n 2015-02-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65209"}, {"sha": "f7e8ce949f332a4a5612f4c943641d5a2754c4bd", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "patch": "@@ -3113,9 +3113,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case RETURN_EXPR:\n-      r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),\n-\t\t\t\t\tlval,\n-\t\t\t\t\tnon_constant_p, overflow_p);\n+      if (TREE_OPERAND (t, 0) != NULL_TREE)\n+\tr = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),\n+\t\t\t\t\t  lval,\n+\t\t\t\t\t  non_constant_p, overflow_p);\n       *jump_target = t;\n       break;\n "}, {"sha": "41c0685db708d1df394ea63b1068c9d5936ab98f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "patch": "@@ -1,3 +1,8 @@\n+2015-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65202\n+\t* g++.dg/cpp1y/pr65202.C: New test.\n+\n 2015-02-26  Tom de Vries  <tom@codesourcery.com>\n \n \t* g++.dg/gcov/gcov-14.C: Add cleanup of iostream.gcov, ostream.gcov and"}, {"sha": "602b264b302821d17a64c8ed4dbda04da609d0a1", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65202.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e0295b00aeeddbd4efb2e55ef3ed946f886a86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C?ref=75e0295b00aeeddbd4efb2e55ef3ed946f886a86", "patch": "@@ -0,0 +1,26 @@\n+// // PR c++/65202\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> struct is_move_constructible;\n+template <typename T> struct is_move_assignable;\n+template <int, typename T> using enable_if_t = int;\n+namespace adl {\n+template <\n+    typename L, typename R,\n+    enable_if_t<is_move_constructible<L>() && is_move_assignable<L>(), int>...>\n+constexpr auto adl_swap(L &l, R &r) -> decltype(swap(l, r)) {\n+  return;\n+}\n+template <typename L, typename R>\n+auto swap(L &l, R &r) noexcept(noexcept(adl::adl_swap(l, r)))\n+    -> decltype(adl::adl_swap(l, r));\n+namespace ns {\n+template <typename T> struct foo {};\n+template <typename T> void swap(foo<T> &, foo<T> &);\n+struct bar;\n+\n+int main()\n+{\n+    foo<ns::bar> f;\n+    adl::swap(f, f)\n+} // { dg-error \"\" }"}]}