{"sha": "c32983082576e1452a19bc7df8901d6e6d9229c2", "node_id": "C_kwDOANBUbNoAKGMzMjk4MzA4MjU3NmUxNDUyYTE5YmM3ZGY4OTAxZDZlNmQ5MjI5YzI", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-18T22:04:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:38Z"}, "message": "[Ada] Raise Constraint_Error when converting negative values to Char_Code\n\nGNATprove relies on the comment for Get_Enum_Lit_From_Pos, which\npromises to raise Constraint_Error when its Pos parameter is not among\nthe representation values for enumeration literal. However, this promise\nwas only respected in builds with range checks enabled.\n\nThe root problem was that a similar comment for conversion from Uint to\nChar_Code was likewise only respected in builds with range checks\nenabled.\n\nNow both routines respect promises in their comments. The behaviour of\nGNAT itself is not affected. The fix is needed to filter garbage\ncounterexamples generated by provers for characters objects in SPARK.\n\ngcc/ada/\n\n\t* uintp.adb (UI_To_CC): Guard against illegal inputs; reuse\n\tUI_To_Int.", "tree": {"sha": "bc408321616b89794a134c0380daf7efd921e6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc408321616b89794a134c0380daf7efd921e6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c32983082576e1452a19bc7df8901d6e6d9229c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32983082576e1452a19bc7df8901d6e6d9229c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32983082576e1452a19bc7df8901d6e6d9229c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32983082576e1452a19bc7df8901d6e6d9229c2/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8053df7b7cbb9709aec0f295c4d0b8c7251f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8053df7b7cbb9709aec0f295c4d0b8c7251f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8053df7b7cbb9709aec0f295c4d0b8c7251f7f"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "921c1d279560dc1f48737f8394e6c42ad2f85060", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32983082576e1452a19bc7df8901d6e6d9229c2/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32983082576e1452a19bc7df8901d6e6d9229c2/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=c32983082576e1452a19bc7df8901d6e6d9229c2", "patch": "@@ -2233,30 +2233,17 @@ package body Uintp is\n \n    function UI_To_CC (Input : Valid_Uint) return Char_Code is\n    begin\n-      if Direct (Input) then\n-         return Char_Code (Direct_Val (Input));\n+      --  Char_Code and Int have equal upper bounds, so simply guard against\n+      --  negative Input and reuse conversion to Int. We trust that conversion\n+      --  to Int will raise Constraint_Error when Input is too large.\n \n-      --  Case of input is more than one digit\n+      pragma Assert\n+        (Char_Code'First = 0 and then Int (Char_Code'Last) = Int'Last);\n \n+      if Input >= Uint_0 then\n+         return Char_Code (UI_To_Int (Input));\n       else\n-         declare\n-            In_Length : constant Int := N_Digits (Input);\n-            In_Vec    : UI_Vector (1 .. In_Length);\n-            Ret_CC    : Char_Code;\n-\n-         begin\n-            Init_Operand (Input, In_Vec);\n-\n-            --  We assume value is positive\n-\n-            Ret_CC := 0;\n-            for Idx in In_Vec'Range loop\n-               Ret_CC := Ret_CC * Char_Code (Base) +\n-                                  Char_Code (abs In_Vec (Idx));\n-            end loop;\n-\n-            return Ret_CC;\n-         end;\n+         raise Constraint_Error;\n       end if;\n    end UI_To_CC;\n "}]}