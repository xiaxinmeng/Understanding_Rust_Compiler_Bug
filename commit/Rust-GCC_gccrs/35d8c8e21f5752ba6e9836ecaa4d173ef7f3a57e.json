{"sha": "35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkOGM4ZTIxZjU3NTJiYTZlOTgzNmVjYWE0ZDE3M2VmN2YzYTU3ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "s.bosscher@student.tudelft.nl", "date": "2003-01-26T14:40:22Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-01-26T14:40:22Z"}, "message": "avr.h, [...]: Undefine ASM_FINISH_DECLARE_OBJECT before defining it.\n\n2003-01-26  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n\n\t* config/avr/avr.h, config/cris/aout.h, config/elfos.h,\n\tconfig/i386/freebsd-aout.h, config/mips/iris6.h: Undefine\n\tASM_FINISH_DECLARE_OBJECT before defining it.\n\t* toplev.c (rest_of_decl_compilation):  Don't define\n\tASM_FINISH_DECLARE_OBJECT.  Only use it if it is defined.\n\t(rest_of_type_compilation): Don't ATTRIBUTE_UNUSED function\n\tparameters for DWARF2 targets because they _are_ used.\n\nFrom-SVN: r61851", "tree": {"sha": "1ad40e789d391d8f3140aebb5c259c027424f6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad40e789d391d8f3140aebb5c259c027424f6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/comments", "author": null, "committer": null, "parents": [{"sha": "e5fcbd77a60d3f80b11bfe32ecd17a1fb491024a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fcbd77a60d3f80b11bfe32ecd17a1fb491024a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fcbd77a60d3f80b11bfe32ecd17a1fb491024a"}], "stats": {"total": 131, "additions": 71, "deletions": 60}, "files": [{"sha": "6960af93c64d5c158531d89d207266fccae93c36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -1,3 +1,13 @@\n+2003-01-26  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* config/avr/avr.h, config/cris/aout.h, config/elfos.h,\n+\tconfig/i386/freebsd-aout.h, config/mips/iris6.h: Undefine\n+\tASM_FINISH_DECLARE_OBJECT before defining it.\n+\t* toplev.c (rest_of_decl_compilation):  Don't define\n+\tASM_FINISH_DECLARE_OBJECT.  Only use it if it is defined.\n+\t(rest_of_type_compilation): Don't ATTRIBUTE_UNUSED function\n+\tparameters for DWARF2 targets because they _are_ used.\n+\n 2003-01-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* fp-bit.h: Define macros for TFmode floating-point constants"}, {"sha": "5309a0d58786cf8280d79d0e7e211a6abfa3a7f3", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n This file is part of GNU CC.\n@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Names to predefine in the preprocessor for this target machine. */\n \n-#define TARGET_CPU_CPP_BUILTINS() \t\t\\\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       builtin_define_std (\"AVR\");\t\t\\\n@@ -58,7 +58,7 @@ extern int target_flags;\n \n #define TARGET_ORDER_1\t\t(target_flags & MASK_ORDER_1)\n #define TARGET_ORDER_2\t\t(target_flags & MASK_ORDER_2)\n-#define TARGET_INT8  \t\t(target_flags & MASK_INT8)\n+#define TARGET_INT8\t\t(target_flags & MASK_INT8)\n #define TARGET_NO_INTERRUPTS\t(target_flags & MASK_NO_INTERRUPTS)\n #define TARGET_INSN_SIZE_DUMP\t(target_flags & MASK_INSN_SIZE_DUMP)\n #define TARGET_CALL_PROLOGUES\t(target_flags & MASK_CALL_PROLOGUES)\n@@ -70,7 +70,7 @@ extern int target_flags;\n    This is for debugging the compiler itself.  */\n \n #define TARGET_RTL_DUMP\t\t(target_flags & MASK_RTL_DUMP)\n-#define TARGET_ALL_DEBUG \t(target_flags & MASK_ALL_DEBUG)\n+#define TARGET_ALL_DEBUG\t(target_flags & MASK_ALL_DEBUG)\n \n #define TARGET_SWITCHES {\t\t\t\t\t\t\\\n   { \"order1\", MASK_ORDER_1, NULL },\t\t\t\t\t\\\n@@ -244,15 +244,15 @@ extern int avr_asm_only_p;\n /* A C expression for a string describing the name of the data type\n    to use for size values.  The typedef name `size_t' is defined\n    using the contents of the string.\n-   \n+\n    The string can contain more than one keyword.  If so, separate\n    them with spaces, and write first any length keyword, then\n    `unsigned' if appropriate, and finally `int'.  The string must\n    exactly match one of the data type names defined in the function\n    `init_decl_processing' in the file `c-decl.c'.  You may not omit\n    `int' or change the order--that would cause the compiler to crash\n    on startup.\n-   \n+\n    If you don't define this macro, the default is `\"long unsigned\n    int\"'.  */\n \n@@ -261,7 +261,7 @@ extern int avr_asm_only_p;\n    to use for the result of subtracting two pointers.  The typedef\n    name `ptrdiff_t' is defined using the contents of the string.  See\n    `SIZE_TYPE' above for more information.\n-   \n+\n    If you don't define this macro, the default is `\"long int\"'.  */\n \n \n@@ -365,10 +365,10 @@ extern int avr_asm_only_p;\n /* If defined, an initializer for a vector of integers, containing the\n    numbers of hard registers in the order in which GNU CC should\n    prefer to use them (from most preferred to least).\n-   \n+\n    If this macro is not defined, registers are used lowest numbered\n    first (all else being equal).\n-   \n+\n    One use of this macro is on machines where the highest numbered\n    registers must always be saved and the save-multiple-registers\n    instruction supports only sequences of consetionve registers.  On\n@@ -543,10 +543,10 @@ enum reg_class {\n      0x00000000},\t\t/* POINTER_REGS, r26 - r31 */\t\t\\\n   {(3 << REG_X) | (3 << REG_Y) | (3 << REG_Z) | (3 << REG_W),\t\t\\\n      0x00000000},\t\t/* ADDW_REGS, r24 - r31 */\t\t\\\n-  {0x00ff0000,0x00000000}, \t/* SIMPLE_LD_REGS r16 - r23 */          \\\n+  {0x00ff0000,0x00000000},\t/* SIMPLE_LD_REGS r16 - r23 */          \\\n   {(3 << REG_X)|(3 << REG_Y)|(3 << REG_Z)|(3 << REG_W)|(0xff << 16),\t\\\n      0x00000000},\t/* LD_REGS, r16 - r31 */\t\t\t\\\n-  {0x0000ffff,0x00000000}, \t/* NO_LD_REGS  r0 - r15 */              \\\n+  {0x0000ffff,0x00000000},\t/* NO_LD_REGS  r0 - r15 */              \\\n   {0xffffffff,0x00000000},\t/* GENERAL_REGS, r0 - r31 */\t\t\\\n   {0xffffffff,0x00000003}\t/* ALL_REGS */\t\t\t\t\\\n }\n@@ -1148,7 +1148,7 @@ typedef struct avr_args {\n    is zero for a call to an explicitly named function, a library\n    function call, or when `INIT_CUMULATIVE_ARGS' is used to find\n    arguments for the function being compiled.\n-   \n+\n    When processing a call to a compiler support library function,\n    LIBNAME identifies which one.  It is a `symbol_ref' rtx which\n    contains the name of the function, as a string.  LIBNAME is 0 when\n@@ -1164,7 +1164,7 @@ typedef struct avr_args {\n    MODE, TYPE and NAMED describe that argument.  Once this is done,\n    the variable CUM is suitable for analyzing the *following*\n    argument with `FUNCTION_ARG', etc.\n-   \n+\n    This macro need not do anything if the argument in question was\n    passed on the stack.  The compiler knows how to track the amount\n    of stack space used for arguments without any special help. */\n@@ -1496,7 +1496,7 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    top level, you'll need to replace first the top leve It is not\n    necessary for this macro to come up with a legitimate address;\n    but often a machine-dependent strategy can generate better code.  */\n-\t\n+\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n       if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\\n         goto LABEL\n@@ -1558,9 +1558,9 @@ do {\t\t\t\t\t\t\t\t\t    \\\n {\t\t\t\t\t\t\t\\\n   int cst = default_rtx_costs (x, code, outer_code);\t\\\n   if (cst>0)\t\t\t\t\t\t\\\n-    return cst; \t\t\t                \\\n+    return cst;\t\t\t                \\\n   else if (cst<0)\t\t\t\t\t\\\n-    total += -cst; \t\t\t                \\\n+    total += -cst;\t\t\t                \\\n   break;\t\t\t\t\t\t\\\n }\n \n@@ -1758,7 +1758,7 @@ progmem_section ()\t\t\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n       fprintf (asm_out_file,\t\t\t\t\t\t      \\\n \t       \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\t      \\\n-\t       AVR_MEGA ? \"a\" : \"ax\"); \t\t\t\t\t      \\\n+\t       AVR_MEGA ? \"a\" : \"ax\");\t\t\t\t\t      \\\n       /* Should already be aligned, this is just to be safe if it isn't.  */  \\\n       fprintf (asm_out_file, \"\\t.p2align 1\\n\");\t\t\t\t      \\\n       in_section = in_progmem;\t\t\t\t\t\t      \\\n@@ -1986,6 +1986,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    If this macro is not defined, then the variable name is defined in\n    the usual manner as a label (by means of `ASM_OUTPUT_LABEL').  */\n \n+#undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n@@ -2050,11 +2051,11 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \".global\\t\"\n \n-#define ASM_WEAKEN_LABEL(FILE, NAME) \t\\\n+#define ASM_WEAKEN_LABEL(FILE, NAME)\t\\\n   do\t\t\t\t\t\\\n     {\t\t\t\t\t\\\n       fputs (\"\\t.weak\\t\", (FILE));\t\\\n-      assemble_name ((FILE), (NAME)); \t\\\n+      assemble_name ((FILE), (NAME));\t\\\n       fputc ('\\n', (FILE));\t\t\\\n     }\t\t\t\t\t\\\n   while (0)"}, {"sha": "1484499ff710efd0c61196c170d8bbe74a64c80f", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -173,13 +173,13 @@ Boston, MA 02111-1307, USA.  */\n       register const unsigned char *_limited_str =\t\\\n \t(const unsigned char *) (STR);\t\t\t\\\n       register unsigned ch;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\\\n         {\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\\\n-\t  \t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n \t  switch (escape = ESCAPES[ch])\t\t\t\\\n \t    {\t\t\t\t\t\t\\\n \t    case 0:\t\t\t\t\t\\\n@@ -194,7 +194,7 @@ Boston, MA 02111-1307, USA.  */\n \t      break;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n         }\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n@@ -218,35 +218,35 @@ Boston, MA 02111-1307, USA.  */\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register const unsigned char *p;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 60)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n \t      bytes_in_chunk = 0;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\t\t\\\n \t    continue;\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  if (p < limit && (p - _ascii_bytes) <= (long)STRING_LIMIT)\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk > 0)\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n \t\t  bytes_in_chunk = 0;\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      ASM_OUTPUT_LIMITED_STRING ((FILE), _ascii_bytes);\t\t\\\n \t      _ascii_bytes = p;\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      register int escape;\t\t\t\t\t\\\n \t      register unsigned ch;\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n \t\tfprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      switch (escape = ESCAPES[ch = *_ascii_bytes])\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\tcase 0:\t\t\t\t\t\t\t\\\n@@ -265,7 +265,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n         fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -279,11 +279,11 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n   (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n \n-#define ASM_WEAKEN_LABEL(FILE, NAME) \t\\\n+#define ASM_WEAKEN_LABEL(FILE, NAME)\t\\\n   do\t\t\t\t\t\\\n     {\t\t\t\t\t\\\n       fputs (\"\\t.weak\\t\", (FILE));\t\\\n-      assemble_name ((FILE), (NAME)); \t\\\n+      assemble_name ((FILE), (NAME));\t\\\n       fputc ('\\n', (FILE));\t\t\\\n     }\t\t\t\t\t\\\n   while (0)\n@@ -316,12 +316,13 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n       HOST_WIDE_INT size;\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && DECL_SIZE (DECL)\t\t\t\t\t\\\n \t  && ! AT_END && TOP_LEVEL\t\t\t\t\\"}, {"sha": "5925d256012d7674d94c36276353a5d4ddc40d63", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -1,6 +1,6 @@\n /* elfos.h  --  operating system specific defines to be used when\n    targeting GCC for some generic ELF system\n-   Copyright (C) 1991, 1994, 1995, 1999, 2000, 2001, 2002\n+   Copyright (C) 1991, 1994, 1995, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Based on svr4.h contributed by Ron Guilmette (rfg@netcom.com).\n \n@@ -220,7 +220,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-     \n+\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n@@ -240,11 +240,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n-#define ASM_WEAKEN_LABEL(FILE, NAME) \t\\\n+#define ASM_WEAKEN_LABEL(FILE, NAME)\t\\\n   do\t\t\t\t\t\\\n     {\t\t\t\t\t\\\n       fputs (\"\\t.weak\\t\", (FILE));\t\\\n-      assemble_name ((FILE), (NAME)); \t\\\n+      assemble_name ((FILE), (NAME));\t\\\n       fputc ('\\n', (FILE));\t\t\\\n     }\t\t\t\t\t\\\n   while (0)\n@@ -313,12 +313,13 @@ Boston, MA 02111-1307, USA.  */\n    size_directive_output was set\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n+#undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\\\n       HOST_WIDE_INT size;\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive\t\t\t\t\\\n \t  && DECL_SIZE (DECL)\t\t\t\t\t\\\n \t  && ! AT_END && TOP_LEVEL\t\t\t\t\\\n@@ -396,13 +397,13 @@ Boston, MA 02111-1307, USA.  */\n       register const unsigned char *_limited_str =\t\\\n \t(const unsigned char *) (STR);\t\t\t\\\n       register unsigned ch;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\\\n         {\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\\\n-\t  \t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n \t  switch (escape = ESCAPES[ch])\t\t\t\\\n \t    {\t\t\t\t\t\t\\\n \t    case 0:\t\t\t\t\t\\\n@@ -417,7 +418,7 @@ Boston, MA 02111-1307, USA.  */\n \t      break;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n         }\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n@@ -441,35 +442,35 @@ Boston, MA 02111-1307, USA.  */\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register const unsigned char *p;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 60)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n \t      bytes_in_chunk = 0;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\t\t\\\n \t    continue;\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  if (p < limit && (p - _ascii_bytes) <= (long)STRING_LIMIT)\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk > 0)\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n \t\t  bytes_in_chunk = 0;\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      ASM_OUTPUT_LIMITED_STRING ((FILE), _ascii_bytes);\t\t\\\n \t      _ascii_bytes = p;\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      register int escape;\t\t\t\t\t\\\n \t      register unsigned ch;\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n \t\tfprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t      switch (escape = ESCAPES[ch = *_ascii_bytes])\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\tcase 0:\t\t\t\t\t\t\t\\\n@@ -488,7 +489,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n         fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "78735f0d71baa93acf67430f837af87f459d3fea", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for Intel 80386\n    running FreeBSD.\n-   Copyright (C) 1988, 1992, 1994, 1996, 1997, 1999, 2000, 2002\n+   Copyright (C) 1988, 1992, 1994, 1996, 1997, 1999, 2000, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Poul-Henning Kamp <phk@login.dkuug.dk>\n    Continued development by David O'Brien <obrien@NUXI.org>\n@@ -175,6 +175,7 @@ Boston, MA 02111-1307, USA.  */\n    size_directive_output was set\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n+#undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)        \\\n do {                                                                    \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);            \\"}, {"sha": "6e37de58f9ac7e40e8dea61c8833917f0c9ad02e", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -418,6 +418,7 @@ while (0)\n    size_directive_output was set\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n+#undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\"}, {"sha": "3ab85ad97f8860cf7e140c830aa23229cc7b1e93", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=35d8c8e21f5752ba6e9836ecaa4d173ef7f3a57e", "patch": "@@ -2249,14 +2249,6 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n      int top_level;\n      int at_end;\n {\n-  /* Declarations of variables, and of functions defined elsewhere.  */\n-\n-/* The most obvious approach, to put an #ifndef around where\n-   this macro is used, doesn't work since it's inside a macro call.  */\n-#ifndef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP, END)\n-#endif\n-\n   /* We deferred calling assemble_alias so that we could collect\n      other attributes such as visibility.  Emit the alias now.  */\n   {\n@@ -2284,11 +2276,14 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n \t is seen.  But at end of compilation, do output code for them.  */\n       if (at_end || !DECL_DEFER_OUTPUT (decl))\n \tassemble_variable (decl, top_level, at_end, 0);\n+\n+#ifdef ASM_FINISH_DECLARE_OBJECT\n       if (decl == last_assemble_variable_decl)\n \t{\n \t  ASM_FINISH_DECLARE_OBJECT (asm_out_file, decl,\n \t\t\t\t     top_level, at_end);\n \t}\n+#endif\n \n       timevar_pop (TV_VARCONST);\n     }\n@@ -2342,7 +2337,8 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n \n void\n rest_of_type_compilation (type, toplev)\n-#if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO) || defined (SDB_DEBUGGING_INFO)\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\t\\\n+    || defined (SDB_DEBUGGING_INFO) || defined (DWARF2_DEBUGGING_INFO)\n      tree type;\n      int toplev;\n #else"}]}