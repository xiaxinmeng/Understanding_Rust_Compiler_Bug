{"sha": "d9f646e4b9df9983fdedd151af4065008ef3bd51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmNjQ2ZTRiOWRmOTk4M2ZkZWRkMTUxYWY0MDY1MDA4ZWYzYmQ1MQ==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2007-02-20T13:06:37Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2007-02-20T13:06:37Z"}, "message": "XEventLoop.h: Regenerated.\n\n2007-02-20  Gary Benson  <gbenson@redhat.com>\n\n\t* gnu/awt/xlib/XEventLoop.h: Regenerated.\n\t* gnu/java/awt/peer/gtk/GThreadMutex.h: Likewise.\n\t* gnu/java/rmi/server/ConnectionRunnerPool$ConnectionRunner.h:\n\tLikewise.\n\t* gnu/java/rmi/server/UnicastConnectionManager.h: Likewise.\n\t* java/lang/SecurityManager.h: Likewise.\n\t* java/lang/Thread.h: Likewise.\n\t* java/security/VMSecureRandom$Spinner.h: Likewise.\n\t* java/util/concurrent/atomic/AtomicBoolean.h: Likewise.\n\t* java/util/concurrent/atomic/AtomicInteger.h: Likewise.\n\t* java/util/concurrent/atomic/AtomicLong.h: Likewise.\n\t* java/util/concurrent/atomic/AtomicReference.h: Likewise.\n\t* java/util/concurrent/ConcurrentHashMap$HashEntry.h: Likewise.\n\t* java/util/concurrent/ConcurrentHashMap$Segment.h: Likewise.\n\t* java/util/concurrent/ConcurrentLinkedQueue.h: Likewise.\n\t* java/util/concurrent/ConcurrentLinkedQueue$Node.h: Likewise.\n\t* java/util/concurrent/ConcurrentSkipListMap.h: Likewise.\n\t* java/util/concurrent/ConcurrentSkipListMap$Index.h: Likewise.\n\t* java/util/concurrent/ConcurrentSkipListMap$Node.h: Likewise.\n\t* java/util/concurrent/Exchanger.h: Likewise.\n\t* java/util/concurrent/Exchanger$Node.h: Likewise.\n\t* java/util/concurrent/FutureTask$Sync.h: Likewise.\n\t* java/util/concurrent/LinkedBlockingQueue$Node.h: Likewise.\n\t* java/util/concurrent/locks/AbstractQueuedLongSynchronizer.h:\n\tLikewise.\n\t* java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node.h: \n\tLikewise.\n\t* java/util/concurrent/locks/AbstractQueuedSynchronizer.h: Likewise.\n\t* java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.h:\n\tLikewise.\n\t* java/util/concurrent/ScheduledThreadPoolExecutor.h: Likewise.\n\t* java/util/concurrent/SynchronousQueue.h: Likewise.\n\t* java/util/concurrent/SynchronousQueue$TransferQueue.h: Likewise.\n\t* java/util/concurrent/SynchronousQueue$TransferQueue$QNode.h:\n\tLikewise.\n\t* java/util/concurrent/SynchronousQueue$TransferStack.h: Likewise.\n\t* java/util/concurrent/SynchronousQueue$TransferStack$SNode.h:\n\tLikewise.\n\t* java/util/concurrent/ThreadPoolExecutor.h: Likewise.\n\t* java/util/concurrent/ThreadPoolExecutor$Worker.h: Likewise.\n\t* java/util/logging/ErrorManager.h: Likewise.\n\t* javax/swing/plaf/basic/BasicSpinnerUI$2.h: Likewise.\n\t* javax/swing/plaf/basic/BasicSpinnerUI$4.h: Likewise.\n\nFrom-SVN: r122161", "tree": {"sha": "d6c55cbfdc115ee2f426a2ea52eabbf9be189b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c55cbfdc115ee2f426a2ea52eabbf9be189b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f646e4b9df9983fdedd151af4065008ef3bd51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f646e4b9df9983fdedd151af4065008ef3bd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f646e4b9df9983fdedd151af4065008ef3bd51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f646e4b9df9983fdedd151af4065008ef3bd51/comments", "author": null, "committer": null, "parents": [{"sha": "4e2bae26bfa2eab9678a125a7701291fe3dd7153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2bae26bfa2eab9678a125a7701291fe3dd7153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2bae26bfa2eab9678a125a7701291fe3dd7153"}], "stats": {"total": 178, "additions": 112, "deletions": 66}, "files": [{"sha": "8e52bc41cfb8238213df4231f0bdeeeac7d63ce0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -1,3 +1,49 @@\n+2007-02-20  Gary Benson  <gbenson@redhat.com>\n+\n+\t* gnu/awt/xlib/XEventLoop.h: Regenerated.\n+\t* gnu/java/awt/peer/gtk/GThreadMutex.h: Likewise.\n+\t* gnu/java/rmi/server/ConnectionRunnerPool$ConnectionRunner.h:\n+\tLikewise.\n+\t* gnu/java/rmi/server/UnicastConnectionManager.h: Likewise.\n+\t* java/lang/SecurityManager.h: Likewise.\n+\t* java/lang/Thread.h: Likewise.\n+\t* java/security/VMSecureRandom$Spinner.h: Likewise.\n+\t* java/util/concurrent/atomic/AtomicBoolean.h: Likewise.\n+\t* java/util/concurrent/atomic/AtomicInteger.h: Likewise.\n+\t* java/util/concurrent/atomic/AtomicLong.h: Likewise.\n+\t* java/util/concurrent/atomic/AtomicReference.h: Likewise.\n+\t* java/util/concurrent/ConcurrentHashMap$HashEntry.h: Likewise.\n+\t* java/util/concurrent/ConcurrentHashMap$Segment.h: Likewise.\n+\t* java/util/concurrent/ConcurrentLinkedQueue.h: Likewise.\n+\t* java/util/concurrent/ConcurrentLinkedQueue$Node.h: Likewise.\n+\t* java/util/concurrent/ConcurrentSkipListMap.h: Likewise.\n+\t* java/util/concurrent/ConcurrentSkipListMap$Index.h: Likewise.\n+\t* java/util/concurrent/ConcurrentSkipListMap$Node.h: Likewise.\n+\t* java/util/concurrent/Exchanger.h: Likewise.\n+\t* java/util/concurrent/Exchanger$Node.h: Likewise.\n+\t* java/util/concurrent/FutureTask$Sync.h: Likewise.\n+\t* java/util/concurrent/LinkedBlockingQueue$Node.h: Likewise.\n+\t* java/util/concurrent/locks/AbstractQueuedLongSynchronizer.h:\n+\tLikewise.\n+\t* java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node.h: \n+\tLikewise.\n+\t* java/util/concurrent/locks/AbstractQueuedSynchronizer.h: Likewise.\n+\t* java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.h:\n+\tLikewise.\n+\t* java/util/concurrent/ScheduledThreadPoolExecutor.h: Likewise.\n+\t* java/util/concurrent/SynchronousQueue.h: Likewise.\n+\t* java/util/concurrent/SynchronousQueue$TransferQueue.h: Likewise.\n+\t* java/util/concurrent/SynchronousQueue$TransferQueue$QNode.h:\n+\tLikewise.\n+\t* java/util/concurrent/SynchronousQueue$TransferStack.h: Likewise.\n+\t* java/util/concurrent/SynchronousQueue$TransferStack$SNode.h:\n+\tLikewise.\n+\t* java/util/concurrent/ThreadPoolExecutor.h: Likewise.\n+\t* java/util/concurrent/ThreadPoolExecutor$Worker.h: Likewise.\n+\t* java/util/logging/ErrorManager.h: Likewise.\n+\t* javax/swing/plaf/basic/BasicSpinnerUI$2.h: Likewise.\n+\t* javax/swing/plaf/basic/BasicSpinnerUI$4.h: Likewise.\n+\n 2007-02-16  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc"}, {"sha": "0827f8aaa9a002bf570d364a2e49971a5538cad6", "filename": "libjava/gnu/awt/xlib/XEventLoop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXEventLoop.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -67,7 +67,7 @@ class gnu::awt::xlib::XEventLoop : public ::java::lang::Object\n   ::java::lang::Thread * eventLoopThread;\n public: // actually package-private\n   ::gnu::awt::LightweightRedirector * lightweightRedirector;\n-  jboolean volatile idle;\n+  volatile jboolean idle;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "9380a5dda27dac97e4674807db79d5f2d1f36b36", "filename": "libjava/gnu/java/awt/peer/gtk/GThreadMutex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGThreadMutex.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -32,7 +32,7 @@ class gnu::java::awt::peer::gtk::GThreadMutex : public ::java::lang::Object\n \n public: // actually package-private\n   GThreadMutex();\n-  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) potentialLockers;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) potentialLockers;\n   ::java::lang::Object * lockForPotentialLockers;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "9b98afc9e1340f7f488298ca61fdead7d6731877", "filename": "libjava/gnu/java/rmi/server/ConnectionRunnerPool$ConnectionRunner.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FConnectionRunnerPool%24ConnectionRunner.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -36,7 +36,7 @@ class gnu::java::rmi::server::ConnectionRunnerPool$ConnectionRunner : public ::j\n   virtual void exit();\n private:\n   ::gnu::java::rmi::server::UnicastConnection * __attribute__((aligned(__alignof__( ::java::lang::Thread)))) conn;\n-  jboolean volatile exiting;\n+  volatile jboolean exiting;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "dd6b828317dcb32b6558445e33648041b72c63b4", "filename": "libjava/gnu/java/rmi/server/UnicastConnectionManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -70,7 +70,7 @@ class gnu::java::rmi::server::UnicastConnectionManager : public ::java::lang::Ob\n   static ::java::util::Hashtable * clients;\n   ::java::util::ArrayList * __attribute__((aligned(__alignof__( ::java::lang::Object)))) connections;\n private:\n-  ::java::lang::Thread * volatile serverThread;\n+  volatile ::java::lang::Thread * serverThread;\n   ::java::net::ServerSocket * ssock;\n public: // actually package-private\n   ::java::lang::String * serverName;"}, {"sha": "28ef484c3cea2f9d66501bc4cdfc07c0ba1573ea", "filename": "libjava/java/lang/SecurityManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Flang%2FSecurityManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Flang%2FSecurityManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityManager.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -74,7 +74,7 @@ class java::lang::SecurityManager : public ::java::lang::Object\n   virtual ::java::lang::ThreadGroup * getThreadGroup();\n public: // actually package-private\n   virtual void checkPackageList(::java::lang::String *, ::java::lang::String *, ::java::lang::String *);\n-  static ::java::lang::SecurityManager * volatile current;\n+  static volatile ::java::lang::SecurityManager * current;\n public: // actually protected\n   jboolean __attribute__((aligned(__alignof__( ::java::lang::Object)))) inCheck;\n public:"}, {"sha": "e9cf921610073bbdce1fd08387cfee90c2f52011", "filename": "libjava/java/lang/Thread.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Flang%2FThread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Flang%2FThread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -147,7 +147,7 @@ class java::lang::Thread : public ::java::lang::Object\n   ::java::lang::Object * accessControlState;\n   ::gnu::gcj::RawData * interp_frame;\n   ::gnu::gcj::RawData * frame;\n-  jint volatile state;\n+  volatile jint state;\n   ::gnu::gcj::RawDataManaged * data;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "32a1e31acdf246ad96f4e23af6c643de4e8f363a", "filename": "libjava/java/security/VMSecureRandom$Spinner.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FVMSecureRandom%24Spinner.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -29,8 +29,8 @@ class java::security::VMSecureRandom$Spinner : public ::java::lang::Object\n   void stop();\n public: // actually package-private\n   static void access$0(::java::security::VMSecureRandom$Spinner *);\n-  jbyte volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n-  jboolean volatile running;\n+  volatile jbyte __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  volatile jboolean running;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "730394d1c23d7b74feb62780cfd08e9452d0aee1", "filename": "libjava/java/util/concurrent/ConcurrentHashMap$HashEntry.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24HashEntry.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -18,7 +18,7 @@ class java::util::concurrent::ConcurrentHashMap$HashEntry : public ::java::lang:\n   static JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * newArray(jint);\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) key;\n   jint hash;\n-  ::java::lang::Object * volatile value;\n+  volatile ::java::lang::Object * value;\n   ::java::util::concurrent::ConcurrentHashMap$HashEntry * next;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "aaa2a7ae10d4edda2c5d78da35b12c9692519e58", "filename": "libjava/java/util/concurrent/ConcurrentHashMap$Segment.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentHashMap%24Segment.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -31,10 +31,10 @@ class java::util::concurrent::ConcurrentHashMap$Segment : public ::java::util::c\n private:\n   static const jlong serialVersionUID = 2249069246763182397LL;\n public: // actually package-private\n-  jint volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::ReentrantLock)))) count;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::ReentrantLock)))) count;\n   jint modCount;\n   jint threshold;\n-  JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * volatile table;\n+  volatile JArray< ::java::util::concurrent::ConcurrentHashMap$HashEntry * > * table;\n   jfloat loadFactor;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "60fee41a4d0228c7aa1c5be419722a454a417c7b", "filename": "libjava/java/util/concurrent/ConcurrentLinkedQueue$Node.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -21,8 +21,8 @@ class java::util::concurrent::ConcurrentLinkedQueue$Node : public ::java::lang::\n   virtual jboolean casNext(::java::util::concurrent::ConcurrentLinkedQueue$Node *, ::java::util::concurrent::ConcurrentLinkedQueue$Node *);\n   virtual void setNext(::java::util::concurrent::ConcurrentLinkedQueue$Node *);\n private:\n-  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n-  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile next;\n+  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n+  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * next;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * itemUpdater;\n public:"}, {"sha": "281690e36fb84b5284d39869d957d4c328aed9d3", "filename": "libjava/java/util/concurrent/ConcurrentLinkedQueue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentLinkedQueue.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -34,8 +34,8 @@ class java::util::concurrent::ConcurrentLinkedQueue : public ::java::util::Abstr\n   static const jlong serialVersionUID = 196745693267521676LL;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * tailUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n-  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) head;\n-  ::java::util::concurrent::ConcurrentLinkedQueue$Node * volatile tail;\n+  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) head;\n+  volatile ::java::util::concurrent::ConcurrentLinkedQueue$Node * tail;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "c71b25bd327ba9ef1d8810b240d8797642e2e316", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap$Index.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Index.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -19,7 +19,7 @@ class java::util::concurrent::ConcurrentSkipListMap$Index : public ::java::lang:\n   virtual jboolean unlink(::java::util::concurrent::ConcurrentSkipListMap$Index *);\n   ::java::util::concurrent::ConcurrentSkipListMap$Node * __attribute__((aligned(__alignof__( ::java::lang::Object)))) node;\n   ::java::util::concurrent::ConcurrentSkipListMap$Index * down;\n-  ::java::util::concurrent::ConcurrentSkipListMap$Index * volatile right;\n+  volatile ::java::util::concurrent::ConcurrentSkipListMap$Index * right;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * rightUpdater;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "1b94c35907128551792db451b30bda10f7ecd8d8", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap$Node.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -23,8 +23,8 @@ class java::util::concurrent::ConcurrentSkipListMap$Node : public ::java::lang::\n   ::java::lang::Object * getValidValue();\n   ::java::util::AbstractMap$SimpleImmutableEntry * createSnapshot();\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) key;\n-  ::java::lang::Object * volatile value;\n-  ::java::util::concurrent::ConcurrentSkipListMap$Node * volatile next;\n+  volatile ::java::lang::Object * value;\n+  volatile ::java::util::concurrent::ConcurrentSkipListMap$Node * next;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * valueUpdater;\n public:"}, {"sha": "4d42f54688a44881a3c894590da1d5993d473db5", "filename": "libjava/java/util/concurrent/ConcurrentSkipListMap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FConcurrentSkipListMap.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -118,7 +118,7 @@ class java::util::concurrent::ConcurrentSkipListMap : public ::java::util::Abstr\n   static const jlong serialVersionUID = -8627078645895051609LL;\n   static ::java::util::Random * seedGenerator;\n   static ::java::lang::Object * BASE_HEADER;\n-  ::java::util::concurrent::ConcurrentSkipListMap$HeadIndex * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractMap)))) head;\n+  volatile ::java::util::concurrent::ConcurrentSkipListMap$HeadIndex * __attribute__((aligned(__alignof__( ::java::util::AbstractMap)))) head;\n   ::java::util::Comparator * comparator__;\n   jint randomSeed;\n   ::java::util::concurrent::ConcurrentSkipListMap$KeySet * keySet__;"}, {"sha": "5e1087b7611464268730fad09854ae35f1166db6", "filename": "libjava/java/util/concurrent/Exchanger$Node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -14,7 +14,7 @@ class java::util::concurrent::Exchanger$Node : public ::java::util::concurrent::\n public:\n   Exchanger$Node(::java::lang::Object *);\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::util::concurrent::atomic::AtomicReference)))) item;\n-  ::java::lang::Thread * volatile waiter;\n+  volatile ::java::lang::Thread * waiter;\n   static ::java::lang::Class class$;\n };\n "}, {"sha": "5ed4d252a900ad8f23c69b1e043b1604ecb51724", "filename": "libjava/java/util/concurrent/Exchanger.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FExchanger.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -33,7 +33,7 @@ class java::util::concurrent::Exchanger : public ::java::lang::Object\n   static jint TIMED_SPINS;\n   static ::java::lang::Object * CANCEL;\n   static ::java::lang::Object * NULL_ITEM;\n-  JArray< ::java::util::concurrent::Exchanger$Slot * > * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) arena;\n+  volatile JArray< ::java::util::concurrent::Exchanger$Slot * > * __attribute__((aligned(__alignof__( ::java::lang::Object)))) arena;\n   ::java::util::concurrent::atomic::AtomicInteger * max;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "18808697181bc958860c2e6f1f7863e3bd0b9145", "filename": "libjava/java/util/concurrent/FutureTask$Sync.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FFutureTask%24Sync.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -36,7 +36,7 @@ class java::util::concurrent::FutureTask$Sync : public ::java::util::concurrent:\n   ::java::util::concurrent::Callable * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractQueuedSynchronizer)))) callable;\n   ::java::lang::Object * result;\n   ::java::lang::Throwable * exception;\n-  ::java::lang::Thread * volatile runner;\n+  volatile ::java::lang::Thread * runner;\n public: // actually package-private\n   ::java::util::concurrent::FutureTask * this$0;\n public:"}, {"sha": "36d1f654a64cd0ad2a32fe5cc24014fe115691ae", "filename": "libjava/java/util/concurrent/LinkedBlockingQueue$Node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FLinkedBlockingQueue%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -13,7 +13,7 @@ class java::util::concurrent::LinkedBlockingQueue$Node : public ::java::lang::Ob\n \n public: // actually package-private\n   LinkedBlockingQueue$Node(::java::lang::Object *);\n-  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n+  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) item;\n   ::java::util::concurrent::LinkedBlockingQueue$Node * next;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "e01b42074bf0d8ea732bd827013e1e093b5bd7a8", "filename": "libjava/java/util/concurrent/ScheduledThreadPoolExecutor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FScheduledThreadPoolExecutor.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -45,8 +45,8 @@ class java::util::concurrent::ScheduledThreadPoolExecutor : public ::java::util:\n   static ::java::util::concurrent::atomic::AtomicLong * access$0();\n   static ::java::util::concurrent::BlockingQueue * access$1(::java::util::concurrent::ScheduledThreadPoolExecutor *);\n private:\n-  jboolean volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::ThreadPoolExecutor)))) continueExistingPeriodicTasksAfterShutdown;\n-  jboolean volatile executeExistingDelayedTasksAfterShutdown;\n+  volatile jboolean __attribute__((aligned(__alignof__( ::java::util::concurrent::ThreadPoolExecutor)))) continueExistingPeriodicTasksAfterShutdown;\n+  volatile jboolean executeExistingDelayedTasksAfterShutdown;\n   static ::java::util::concurrent::atomic::AtomicLong * sequencer;\n   static jlong NANO_ORIGIN;\n public:"}, {"sha": "07486a9abf8842aacdc9ccee694b3cf237a6941d", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferQueue$QNode.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue%24QNode.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -18,9 +18,9 @@ class java::util::concurrent::SynchronousQueue$TransferQueue$QNode : public ::ja\n   void tryCancel(::java::lang::Object *);\n   jboolean isCancelled();\n   jboolean isOffList();\n-  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n-  ::java::lang::Object * volatile item;\n-  ::java::lang::Thread * volatile waiter;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n+  volatile ::java::lang::Object * item;\n+  volatile ::java::lang::Thread * waiter;\n   jboolean isData;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * itemUpdater;"}, {"sha": "d1b55c99983c9671a52760b05443132593230b49", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferQueue.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferQueue.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -19,9 +19,9 @@ class java::util::concurrent::SynchronousQueue$TransferQueue : public ::java::ut\n   ::java::lang::Object * transfer(::java::lang::Object *, jboolean, jlong);\n   ::java::lang::Object * awaitFulfill(::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *, ::java::lang::Object *, jboolean, jlong);\n   void clean(::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *, ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode *);\n-  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n-  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile tail;\n-  ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * volatile cleanMe;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * tail;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferQueue$QNode * cleanMe;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * tailUpdater;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * cleanMeUpdater;"}, {"sha": "77af8cb17f4af3002be875d56ccfbbbb6851c730", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferStack$SNode.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack%24SNode.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -17,9 +17,9 @@ class java::util::concurrent::SynchronousQueue$TransferStack$SNode : public ::ja\n   jboolean tryMatch(::java::util::concurrent::SynchronousQueue$TransferStack$SNode *);\n   void tryCancel();\n   jboolean isCancelled();\n-  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n-  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile match;\n-  ::java::lang::Thread * volatile waiter;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * __attribute__((aligned(__alignof__( ::java::lang::Object)))) next;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * match;\n+  volatile ::java::lang::Thread * waiter;\n   ::java::lang::Object * item;\n   jint mode;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * nextUpdater;"}, {"sha": "b29138fede41f81aed7dc5a0286e3309fc1c6f39", "filename": "libjava/java/util/concurrent/SynchronousQueue$TransferStack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue%24TransferStack.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -23,7 +23,7 @@ class java::util::concurrent::SynchronousQueue$TransferStack : public ::java::ut\n   static const jint REQUEST = 0;\n   static const jint DATA = 1;\n   static const jint FULFILLING = 2;\n-  ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n+  volatile ::java::util::concurrent::SynchronousQueue$TransferStack$SNode * __attribute__((aligned(__alignof__( ::java::util::concurrent::SynchronousQueue$Transferer)))) head;\n   static ::java::util::concurrent::atomic::AtomicReferenceFieldUpdater * headUpdater;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "82ecce492c17f2c1a4370c1c75a94f4e22173fa8", "filename": "libjava/java/util/concurrent/SynchronousQueue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FSynchronousQueue.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -47,7 +47,7 @@ class java::util::concurrent::SynchronousQueue : public ::java::util::AbstractQu\n   static jint maxUntimedSpins;\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:\n-  ::java::util::concurrent::SynchronousQueue$Transferer * volatile __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) transferer;\n+  volatile ::java::util::concurrent::SynchronousQueue$Transferer * __attribute__((aligned(__alignof__( ::java::util::AbstractQueue)))) transferer;\n   ::java::util::concurrent::locks::ReentrantLock * qlock;\n   ::java::util::concurrent::SynchronousQueue$WaitQueue * waitingProducers;\n   ::java::util::concurrent::SynchronousQueue$WaitQueue * waitingConsumers;"}, {"sha": "18d3f3204a327fda41d9fac88da86056d1c6954d", "filename": "libjava/java/util/concurrent/ThreadPoolExecutor$Worker.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor%24Worker.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -24,7 +24,7 @@ class java::util::concurrent::ThreadPoolExecutor$Worker : public ::java::lang::O\n   ::java::util::concurrent::locks::ReentrantLock * __attribute__((aligned(__alignof__( ::java::lang::Object)))) runLock;\n   ::java::lang::Runnable * firstTask;\n public: // actually package-private\n-  jlong volatile completedTasks;\n+  volatile jlong completedTasks;\n   ::java::lang::Thread * thread;\n   ::java::util::concurrent::ThreadPoolExecutor * this$0;\n public:"}, {"sha": "00b9dde7c9fa1a1600a6844d1a635300a7141ea0", "filename": "libjava/java/util/concurrent/ThreadPoolExecutor.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2FThreadPoolExecutor.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -71,20 +71,20 @@ class java::util::concurrent::ThreadPoolExecutor : public ::java::util::concurre\n   ::java::util::concurrent::locks::ReentrantLock * mainLock;\n   ::java::util::concurrent::locks::Condition * termination;\n   ::java::util::HashSet * workers;\n-  jlong volatile keepAliveTime;\n-  jboolean volatile allowCoreThreadTimeOut__;\n-  jint volatile corePoolSize;\n-  jint volatile maximumPoolSize;\n-  jint volatile poolSize;\n+  volatile jlong keepAliveTime;\n+  volatile jboolean allowCoreThreadTimeOut__;\n+  volatile jint corePoolSize;\n+  volatile jint maximumPoolSize;\n+  volatile jint poolSize;\n public: // actually package-private\n-  jint volatile runState;\n+  volatile jint runState;\n   static const jint RUNNING = 0;\n   static const jint SHUTDOWN = 1;\n   static const jint STOP = 2;\n   static const jint TERMINATED = 3;\n private:\n-  ::java::util::concurrent::RejectedExecutionHandler * volatile handler;\n-  ::java::util::concurrent::ThreadFactory * volatile threadFactory;\n+  volatile ::java::util::concurrent::RejectedExecutionHandler * handler;\n+  volatile ::java::util::concurrent::ThreadFactory * threadFactory;\n   jint largestPoolSize;\n   jlong completedTaskCount;\n   static ::java::util::concurrent::RejectedExecutionHandler * defaultHandler;"}, {"sha": "08a6d597e14a9cbde2b8d9371770e19d1864b49c", "filename": "libjava/java/util/concurrent/atomic/AtomicBoolean.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicBoolean.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -35,7 +35,7 @@ class java::util::concurrent::atomic::AtomicBoolean : public ::java::lang::Objec\n   static const jlong serialVersionUID = 4654671469794556979LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "286aff1d003c6c5efa9ac81a1fdd6093d063857d", "filename": "libjava/java/util/concurrent/atomic/AtomicInteger.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicInteger.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -45,7 +45,7 @@ class java::util::concurrent::atomic::AtomicInteger : public ::java::lang::Numbe\n   static const jlong serialVersionUID = 6214790243416807050LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "c70a4e6d83972ca9db1687078cf566e301fbb586", "filename": "libjava/java/util/concurrent/atomic/AtomicLong.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicLong.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -49,7 +49,7 @@ class java::util::concurrent::atomic::AtomicLong : public ::java::lang::Number\n public: // actually package-private\n   static jboolean VM_SUPPORTS_LONG_CAS;\n private:\n-  jlong volatile __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n+  volatile jlong __attribute__((aligned(__alignof__( ::java::lang::Number)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "e8862e8433f84cf10c5ad1b4327277ee1f453348", "filename": "libjava/java/util/concurrent/atomic/AtomicReference.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Fatomic%2FAtomicReference.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -35,7 +35,7 @@ class java::util::concurrent::atomic::AtomicReference : public ::java::lang::Obj\n   static const jlong serialVersionUID = -1848883965231344442LL;\n   static ::sun::misc::Unsafe * unsafe;\n   static jlong valueOffset;\n-  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n+  volatile ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "423f2a063566db03d784fd10a70f054cad351149", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -22,10 +22,10 @@ class java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node : publi\n   static const jint CONDITION = -2;\n   static ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * SHARED;\n   static ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * EXCLUSIVE;\n-  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n-  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile prev;\n-  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile next;\n-  ::java::lang::Thread * volatile thread;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * prev;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * next;\n+  volatile ::java::lang::Thread * thread;\n   ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * nextWaiter;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "1e95c3d34b8890168e14422d36cd09a37653642f", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedLongSynchronizer.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -97,9 +97,9 @@ class java::util::concurrent::locks::AbstractQueuedLongSynchronizer : public ::j\n   static void access$0();\n private:\n   static const jlong serialVersionUID = 7373984972572414692LL;\n-  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n-  ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * volatile tail;\n-  jlong volatile state;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedLongSynchronizer$Node * tail;\n+  volatile jlong state;\n public: // actually package-private\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:"}, {"sha": "0abbb8fd23a502b84065dbbb42eee3a5590138da", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer%24Node.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -22,10 +22,10 @@ class java::util::concurrent::locks::AbstractQueuedSynchronizer$Node : public ::\n   static const jint CONDITION = -2;\n   static ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * SHARED;\n   static ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * EXCLUSIVE;\n-  jint volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n-  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile prev;\n-  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile next;\n-  ::java::lang::Thread * volatile thread;\n+  volatile jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) waitStatus;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * prev;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * next;\n+  volatile ::java::lang::Thread * thread;\n   ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * nextWaiter;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "fc2b9df033d8c5561a4f8e0935b3bd16ab04323c", "filename": "libjava/java/util/concurrent/locks/AbstractQueuedSynchronizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fconcurrent%2Flocks%2FAbstractQueuedSynchronizer.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -97,9 +97,9 @@ class java::util::concurrent::locks::AbstractQueuedSynchronizer : public ::java:\n   static void access$0();\n private:\n   static const jlong serialVersionUID = 7373984972572414691LL;\n-  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n-  ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * volatile tail;\n-  jint volatile state;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * __attribute__((aligned(__alignof__( ::java::util::concurrent::locks::AbstractOwnableSynchronizer)))) head;\n+  volatile ::java::util::concurrent::locks::AbstractQueuedSynchronizer$Node * tail;\n+  volatile jint state;\n public: // actually package-private\n   static const jlong spinForTimeoutThreshold = 1000LL;\n private:"}, {"sha": "e6c115e29d8473e57a0c5ccbfe54466034e5ac9e", "filename": "libjava/java/util/logging/ErrorManager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FErrorManager.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -21,7 +21,7 @@ class java::util::logging::ErrorManager : public ::java::lang::Object\n   static const jint OPEN_FAILURE = 4;\n   static const jint FORMAT_FAILURE = 5;\n private:\n-  jboolean volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) everUsed;\n+  volatile jboolean __attribute__((aligned(__alignof__( ::java::lang::Object)))) everUsed;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "5d8697b83c517b284a8d6fc94de14a4e45480e9f", "filename": "libjava/javax/swing/plaf/basic/BasicSpinnerUI$2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%242.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -46,7 +46,7 @@ class javax::swing::plaf::basic::BasicSpinnerUI$2 : public ::java::awt::event::M\n   void mouseReleased(::java::awt::event::MouseEvent *);\n public: // actually package-private\n   void increment();\n-  jboolean volatile __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n+  volatile jboolean __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n   ::javax::swing::Timer * timer;\n   ::javax::swing::plaf::basic::BasicSpinnerUI * this$0;\n public:"}, {"sha": "0d9dddce85a2c5ac339fcac932943205ac1a3940", "filename": "libjava/javax/swing/plaf/basic/BasicSpinnerUI$4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f646e4b9df9983fdedd151af4065008ef3bd51/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSpinnerUI%244.h?ref=d9f646e4b9df9983fdedd151af4065008ef3bd51", "patch": "@@ -46,7 +46,7 @@ class javax::swing::plaf::basic::BasicSpinnerUI$4 : public ::java::awt::event::M\n   void mouseReleased(::java::awt::event::MouseEvent *);\n public: // actually package-private\n   void decrement();\n-  jboolean volatile __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n+  volatile jboolean __attribute__((aligned(__alignof__( ::java::awt::event::MouseAdapter)))) mouseDown;\n   ::javax::swing::Timer * timer;\n   ::javax::swing::plaf::basic::BasicSpinnerUI * this$0;\n public:"}]}