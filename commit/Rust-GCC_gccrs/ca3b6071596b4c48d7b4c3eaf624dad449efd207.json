{"sha": "ca3b6071596b4c48d7b4c3eaf624dad449efd207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzYjYwNzE1OTZiNGM0OGQ3YjRjM2VhZjYyNGRhZDQ0OWVmZDIwNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-12-14T10:30:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-12-14T10:30:24Z"}, "message": "Enhance analyze_brprob script\n\n\t* analyze_brprob.py: Add new column to output and new sorting\n\toption. Fix coding style to not exceed 80 characters.\n\t* analyze_brprob_spec.py: Add new sorting\n\toption. Fix coding style to not exceed 80 characters.\n\nFrom-SVN: r243640", "tree": {"sha": "2cf585c86cf9acc0da3b74b8e326afe0cacf82ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cf585c86cf9acc0da3b74b8e326afe0cacf82ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3b6071596b4c48d7b4c3eaf624dad449efd207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3b6071596b4c48d7b4c3eaf624dad449efd207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3b6071596b4c48d7b4c3eaf624dad449efd207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3b6071596b4c48d7b4c3eaf624dad449efd207/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "998f4f30ea96b8eba79af8c317b8a250a74cab0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998f4f30ea96b8eba79af8c317b8a250a74cab0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998f4f30ea96b8eba79af8c317b8a250a74cab0c"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "baa32bb51348417e8846284fe6cb4b71b8e69b24", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ca3b6071596b4c48d7b4c3eaf624dad449efd207", "patch": "@@ -1,3 +1,10 @@\n+2016-12-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* analyze_brprob.py: Add new column to output and new sorting\n+\toption. Fix coding style to not exceed 80 characters.\n+\t* analyze_brprob_spec.py: Add new sorting\n+\toption. Fix coding style to not exceed 80 characters.\n+\n 2016-10-24  Moritz Klammler  <moritz@glammler.eu>\n \n \tPR other/61439"}, {"sha": "b4dbbc4ac158a5066b16e22347fb028527ff27b9", "filename": "contrib/analyze_brprob.py", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2Fanalyze_brprob.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2Fanalyze_brprob.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fanalyze_brprob.py?ref=ca3b6071596b4c48d7b4c3eaf624dad449efd207", "patch": "@@ -69,6 +69,9 @@\n \n from math import *\n \n+counter_aggregates = set(['combined', 'first match', 'DS theory',\n+    'no prediction'])\n+\n def percentage(a, b):\n     return 100.0 * a / b\n \n@@ -91,12 +94,16 @@ class Summary:\n     def __init__(self, name):\n         self.name = name\n         self.branches = 0\n+        self.successfull_branches = 0\n         self.count = 0\n         self.hits = 0\n         self.fits = 0\n \n     def get_hitrate(self):\n-        return self.hits / self.count\n+        return 100.0 * self.hits / self.count\n+\n+    def get_branch_hitrate(self):\n+        return 100.0 * self.successfull_branches / self.branches\n \n     def count_formatted(self):\n         v = self.count\n@@ -106,6 +113,16 @@ def count_formatted(self):\n             v /= 1000.0\n         return \"%.1f%s\" % (v, 'Y')\n \n+    def print(self, branches_max, count_max):\n+        print('%-40s %8i %5.1f%% %11.2f%% %7.2f%% / %6.2f%% %14i %8s %5.1f%%' %\n+            (self.name, self.branches,\n+                percentage(self.branches, branches_max),\n+                self.get_branch_hitrate(),\n+                self.get_hitrate(),\n+                percentage(self.fits, self.count),\n+                self.count, self.count_formatted(),\n+                percentage(self.count, count_max)))\n+\n class Profile:\n     def __init__(self, filename):\n         self.filename = filename\n@@ -118,11 +135,16 @@ def add(self, name, prediction, count, hits):\n \n         s = self.heuristics[name]\n         s.branches += 1\n+\n         s.count += count\n         if prediction < 50:\n             hits = count - hits\n+        remaining = count - hits\n+        if hits >= remaining:\n+            s.successfull_branches += 1\n+\n         s.hits += hits\n-        s.fits += max(hits, count - hits)\n+        s.fits += max(hits, remaining)\n \n     def add_loop_niter(self, niter):\n         if niter > 0:\n@@ -134,32 +156,56 @@ def branches_max(self):\n     def count_max(self):\n         return max([v.count for k, v in self.heuristics.items()])\n \n-    def dump(self, sorting):\n-        sorter = lambda x: x[1].branches\n-        if sorting == 'hitrate':\n-            sorter = lambda x: x[1].get_hitrate()\n+    def print_group(self, sorting, group_name, heuristics):\n+        count_max = self.count_max()\n+        branches_max = self.branches_max()\n+\n+        sorter = lambda x: x.branches\n+        if sorting == 'branch-hitrate':\n+            sorter = lambda x: x.get_branch_hitrate()\n+        elif sorting == 'hitrate':\n+            sorter = lambda x: x.get_hitrate()\n         elif sorting == 'coverage':\n-            sorter = lambda x: x[1].count\n+            sorter = lambda x: x.count\n+        elif sorting == 'name':\n+            sorter = lambda x: x.name.lower()\n+\n+        print('%-40s %8s %6s %12s %18s %14s %8s %6s' %\n+            ('HEURISTICS', 'BRANCHES', '(REL)',\n+            'BR. HITRATE', 'HITRATE', 'COVERAGE', 'COVERAGE', '(REL)'))\n+        for h in sorted(heuristics, key = sorter):\n+            h.print(branches_max, count_max)\n+\n+    def dump(self, sorting):\n+        heuristics = self.heuristics.values()\n+        if len(heuristics) == 0:\n+            print('No heuristics available')\n+            return\n+\n+        special = list(filter(lambda x: x.name in counter_aggregates,\n+            heuristics))\n+        normal = list(filter(lambda x: x.name not in counter_aggregates,\n+            heuristics))\n \n-        print('%-40s %8s %6s  %-16s %14s %8s %6s' % ('HEURISTICS', 'BRANCHES', '(REL)',\n-              'HITRATE', 'COVERAGE', 'COVERAGE', '(REL)'))\n-        for (k, v) in sorted(self.heuristics.items(), key = sorter):\n-            print('%-40s %8i %5.1f%% %6.2f%% / %6.2f%% %14i %8s %5.1f%%' %\n-            (k, v.branches, percentage(v.branches, self.branches_max ()),\n-             percentage(v.hits, v.count), percentage(v.fits, v.count),\n-             v.count, v.count_formatted(), percentage(v.count, self.count_max()) ))\n+        self.print_group(sorting, 'HEURISTICS', normal)\n+        print()\n+        self.print_group(sorting, 'HEURISTIC AGGREGATES', special)\n \n         if len(self.niter_vector) > 0:\n             print ('\\nLoop count: %d' % len(self.niter_vector)),\n             print('  avg. # of iter: %.2f' % average(self.niter_vector))\n             print('  median # of iter: %.2f' % median(self.niter_vector))\n             for v in [1, 5, 10, 20, 30]:\n                 cut = 0.01 * v\n-                print('  avg. (%d%% cutoff) # of iter: %.2f' % (v, average_cutoff(self.niter_vector, cut)))\n+                print('  avg. (%d%% cutoff) # of iter: %.2f'\n+                    % (v, average_cutoff(self.niter_vector, cut)))\n \n parser = argparse.ArgumentParser()\n-parser.add_argument('dump_file', metavar = 'dump_file', help = 'IPA profile dump file')\n-parser.add_argument('-s', '--sorting', dest = 'sorting', choices = ['branches', 'hitrate', 'coverage'], default = 'branches')\n+parser.add_argument('dump_file', metavar = 'dump_file',\n+    help = 'IPA profile dump file')\n+parser.add_argument('-s', '--sorting', dest = 'sorting',\n+    choices = ['branches', 'branch-hitrate', 'hitrate', 'coverage', 'name'],\n+    default = 'branches')\n \n args = parser.parse_args()\n "}, {"sha": "908db3960dc702f78f000d383b3965c946765bff", "filename": "contrib/analyze_brprob_spec.py", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2Fanalyze_brprob_spec.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b6071596b4c48d7b4c3eaf624dad449efd207/contrib%2Fanalyze_brprob_spec.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fanalyze_brprob_spec.py?ref=ca3b6071596b4c48d7b4c3eaf624dad449efd207", "patch": "@@ -25,8 +25,11 @@\n script_location = os.path.realpath(__file__)\n \n parser = argparse.ArgumentParser()\n-parser.add_argument('location', metavar = 'dump_file', help = 'Location with SPEC benchmarks')\n-parser.add_argument('-s', '--sorting', dest = 'sorting', choices = ['branches', 'hitrate', 'coverage'], default = 'branches')\n+parser.add_argument('location', metavar = 'dump_file',\n+    help = 'Location with SPEC benchmarks')\n+parser.add_argument('-s', '--sorting', dest = 'sorting',\n+    choices = ['branches', 'branch-hitrate', 'hitrate', 'coverage', 'name'],\n+    default = 'branches')\n \n args = parser.parse_args()\n \n@@ -51,7 +54,8 @@\n     print()\n     print(b)\n     sys.stdout.flush()\n-    p = [os.path.join(os.path.dirname(script_location), 'analyze_brprob.py'), temp.name, '--sorting', args.sorting]\n+    p = [os.path.join(os.path.dirname(script_location), 'analyze_brprob.py'),\n+        temp.name, '--sorting', args.sorting]\n     p = subprocess.check_call(p)\n     sys.stdout.flush()\n "}]}