{"sha": "1f85a61235ffff1f585386ac3fe113577b2a756a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4NWE2MTIzNWZmZmYxZjU4NTM4NmFjM2ZlMTEzNTc3YjJhNzU2YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-22T17:54:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-22T17:54:20Z"}, "message": "m68hc11.c: Don't use the `0' flag for asm_fprintf specifiers.\n\n\t* m68hc11.c: Don't use the `0' flag for asm_fprintf specifiers.\n\t* m68k.c: Likewise.\n\t* m68k.h: Likewise.\n\nFrom-SVN: r67093", "tree": {"sha": "27fc7e51e5b1cd871f1ddc643338dea89e89c12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fc7e51e5b1cd871f1ddc643338dea89e89c12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f85a61235ffff1f585386ac3fe113577b2a756a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f85a61235ffff1f585386ac3fe113577b2a756a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f85a61235ffff1f585386ac3fe113577b2a756a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f85a61235ffff1f585386ac3fe113577b2a756a/comments", "author": null, "committer": null, "parents": [{"sha": "e8751f35270e3802deaefb86371097dd48c51ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8751f35270e3802deaefb86371097dd48c51ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8751f35270e3802deaefb86371097dd48c51ed9"}], "stats": {"total": 120, "additions": 63, "deletions": 57}, "files": [{"sha": "5dc52cbc68a462a0ec06b9b436babd84d98d2aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f85a61235ffff1f585386ac3fe113577b2a756a", "patch": "@@ -1,3 +1,9 @@\n+2003-05-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* m68hc11.c: Don't use the `0' flag for asm_fprintf specifiers.\n+\t* m68k.c: Likewise.\n+\t* m68k.h: Likewise.\n+\n 2003-05-22  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR other/2873"}, {"sha": "0e2f6233ae93fd7b42c6ce9bc4022db63a390ddc", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=1f85a61235ffff1f585386ac3fe113577b2a756a", "patch": "@@ -2225,7 +2225,7 @@ print_operand (file, op, letter)\n     }\n   else if (letter == '#')\n     {\n-      asm_fprintf (file, \"%0I\");\n+      asm_fprintf (file, \"%I\");\n     }\n \n   if (GET_CODE (op) == REG)\n@@ -2249,9 +2249,9 @@ print_operand (file, op, letter)\n   if (GET_CODE (op) == SYMBOL_REF && (letter == 'b' || letter == 'h'))\n     {\n       if (letter == 'b')\n-\tasm_fprintf (file, \"%0I%%lo(\");\n+\tasm_fprintf (file, \"%I%%lo(\");\n       else\n-\tasm_fprintf (file, \"%0I%%hi(\");\n+\tasm_fprintf (file, \"%I%%hi(\");\n \n       output_addr_const (file, op);\n       fprintf (file, \")\");\n@@ -2347,7 +2347,7 @@ print_operand (file, op, letter)\n       int need_parenthesize = 0;\n \n       if (letter != 'i')\n-\tasm_fprintf (file, \"%0I\");\n+\tasm_fprintf (file, \"%I\");\n       else\n         need_parenthesize = must_parenthesize (op);\n "}, {"sha": "92e64262e6cad53ea9c55234e00fb3e390d094f9", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1f85a61235ffff1f585386ac3fe113577b2a756a", "patch": "@@ -333,10 +333,10 @@ m68k_output_function_prologue (stream, size)\n       && GET_CODE (stack_limit_rtx) == SYMBOL_REF)\n     {\n #if defined (MOTOROLA)\n-      asm_fprintf (stream, \"\\tcmp.l %0I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n+      asm_fprintf (stream, \"\\tcmp.l %I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n \t\t   XSTR (stack_limit_rtx, 0), fsize + 4);\n #else\n-      asm_fprintf (stream, \"\\tcmpl %0I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n+      asm_fprintf (stream, \"\\tcmpl %I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n \t\t   XSTR (stack_limit_rtx, 0), fsize + 4);\n #endif\n     }\n@@ -361,31 +361,31 @@ m68k_output_function_prologue (stream, size)\n       else if (fsize < 0x8000)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%0I%wd\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I%wd\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else if (TARGET_68020)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.l %s,%0I%wd\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.l %s,%I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I%wd\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else\n \t{\n       /* Adding negative number is faster on the 68040.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%0I0\\n\\tadd.l %0I%wd,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%I0\\n\\tadd.l %I%wd,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I0\\n\\taddl %0I%wd,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%I0\\n\\taddl %I%wd,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n@@ -411,18 +411,18 @@ m68k_output_function_prologue (stream, size)\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.w %0I%wd,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.w %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubqw %0I%wd,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubqw %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t      else\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.l %0I%wd,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.l %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubql %0I%wd,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubql %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t    }\n@@ -433,10 +433,10 @@ m68k_output_function_prologue (stream, size)\n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream,\n-\t\t\t   \"\\tsubq.w %0I8,%Rsp\\n\\tsubq.w %0I%wd,%Rsp\\n\",\n+\t\t\t   \"\\tsubq.w %I8,%Rsp\\n\\tsubq.w %I%wd,%Rsp\\n\",\n \t\t\t   fsize + 4 - 8);\n #else\n-\t      asm_fprintf (stream, \"\\tsubqw %0I8,%Rsp\\n\\tsubqw %0I%wd,%Rsp\\n\",\n+\t      asm_fprintf (stream, \"\\tsubqw %I8,%Rsp\\n\\tsubqw %I%wd,%Rsp\\n\",\n \t\t\t   fsize + 4 - 8);\n #endif\n \t    }\n@@ -447,9 +447,9 @@ m68k_output_function_prologue (stream, size)\n \t      /* Adding negative number is faster on the 68040.  */\n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %0I%wd,%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\tadd.w %I%wd,%Rsp\\n\", - (fsize + 4));\n #else\n-\t      asm_fprintf (stream, \"\\taddw %0I%wd,%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\taddw %I%wd,%Rsp\\n\", - (fsize + 4));\n #endif\n \t    }\n \t  else\n@@ -465,9 +465,9 @@ m68k_output_function_prologue (stream, size)\n \t{\n \t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%wd,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\tadd.l %I%wd,%Rsp\\n\", - (fsize + 4));\n #else\n-\t  asm_fprintf (stream, \"\\taddl %0I%wd,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\taddl %I%wd,%Rsp\\n\", - (fsize + 4));\n #endif\n \t}\n       if (dwarf2out_do_frame ())\n@@ -488,9 +488,9 @@ m68k_output_function_prologue (stream, size)\n       if ((mask & 0xff) != 0)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm %0I0x%x,-(%Rsp)\\n\", mask & 0xff);\n+\t  asm_fprintf (stream, \"\\tfmovm %I0x%x,-(%Rsp)\\n\", mask & 0xff);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %0I0x%x,%Rsp@-\\n\", mask & 0xff);\n+\t  asm_fprintf (stream, \"\\tfmovem %I0x%x,%Rsp@-\\n\", mask & 0xff);\n #endif\n \t  if (dwarf2out_do_frame ())\n \t    {\n@@ -602,18 +602,18 @@ m68k_output_function_prologue (stream, size)\n \n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\tlea (%d,%Rsp),%Rsp\\n\", -num_saved_regs*4);\n-\t  asm_fprintf (stream, \"\\tmovm.l %0I0x%x,(%Rsp)\\n\", newmask);\n+\t  asm_fprintf (stream, \"\\tmovm.l %I0x%x,(%Rsp)\\n\", newmask);\n #else\n \t  asm_fprintf (stream, \"\\tlea %Rsp@(%d),%Rsp\\n\", -num_saved_regs*4);\n-\t  asm_fprintf (stream, \"\\tmoveml %0I0x%x,%Rsp@\\n\", newmask);\n+\t  asm_fprintf (stream, \"\\tmoveml %I0x%x,%Rsp@\\n\", newmask);\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l %0I0x%x,-(%Rsp)\\n\", mask);\n+\t  asm_fprintf (stream, \"\\tmovm.l %I0x%x,-(%Rsp)\\n\", mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %0I0x%x,%Rsp@-\\n\", mask);\n+\t  asm_fprintf (stream, \"\\tmoveml %I0x%x,%Rsp@-\\n\", mask);\n #endif\n \t}\n       if (dwarf2out_do_frame ())\n@@ -639,7 +639,7 @@ m68k_output_function_prologue (stream, size)\n       asm_fprintf (stream, \"\\t%Olea (%Rpc, %U_GLOBAL_OFFSET_TABLE_@GOTPC), %s\\n\",\n \t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n #else\n-      asm_fprintf (stream, \"\\tmovel %0I__GLOBAL_OFFSET_TABLE_, %s\\n\",\n+      asm_fprintf (stream, \"\\tmovel %I__GLOBAL_OFFSET_TABLE_, %s\\n\",\n \t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n       asm_fprintf (stream, \"\\tlea %Rpc@(0,%s:l),%s\\n\",\n \t\t   reg_names[PIC_OFFSET_TABLE_REGNUM],\n@@ -833,9 +833,9 @@ m68k_output_function_epilogue (stream, size)\n       && (mask || fmask))\n     {\n #ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\t%Omove.l %0I%wd,%Ra1\\n\", -fsize);\n+      asm_fprintf (stream, \"\\t%Omove.l %I%wd,%Ra1\\n\", -fsize);\n #else\n-      asm_fprintf (stream, \"\\tmovel %0I%wd,%Ra1\\n\", -fsize);\n+      asm_fprintf (stream, \"\\tmovel %I%wd,%Ra1\\n\", -fsize);\n #endif\n       fsize = 0, big = 1;\n     }\n@@ -897,33 +897,33 @@ m68k_output_function_epilogue (stream, size)\n       if (big)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s,%Ra1.l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s,%Ra1.l),%I0x%x\\n\",\n \t\t       offset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd,%Ra1:l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       offset + fsize, mask);\n #endif\n \t}\n       else if (restore_from_sp)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l (%Rsp)+,%0I0x%x\\n\", mask);\n+\t  asm_fprintf (stream, \"\\tmovm.l (%Rsp)+,%I0x%x\\n\", mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %Rsp@+,%0I0x%x\\n\", mask);\n+\t  asm_fprintf (stream, \"\\tmoveml %Rsp@+,%I0x%x\\n\", mask);\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s),%I0x%x\\n\",\n \t\t       offset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd),%I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       offset + fsize, mask);\n #endif\n@@ -934,33 +934,33 @@ m68k_output_function_epilogue (stream, size)\n       if (big)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s,%Ra1.l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s,%Ra1.l),%I0x%x\\n\",\n \t\t       foffset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       fmask);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd,%Ra1:l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       foffset + fsize, fmask);\n #endif\n \t}\n       else if (restore_from_sp)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm (%Rsp)+,%0I0x%x\\n\", fmask);\n+\t  asm_fprintf (stream, \"\\tfmovm (%Rsp)+,%I0x%x\\n\", fmask);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %Rsp@+,%0I0x%x\\n\", fmask);\n+\t  asm_fprintf (stream, \"\\tfmovem %Rsp@+,%I0x%x\\n\", fmask);\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s),%I0x%x\\n\",\n \t\t       foffset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       fmask);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd),%I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       foffset + fsize, fmask);\n #endif\n@@ -977,17 +977,17 @@ m68k_output_function_epilogue (stream, size)\n \t  if (!TARGET_5200)\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.w %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.w %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddqw %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddqw %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.l %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.l %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddql %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddql %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t}\n@@ -997,10 +997,10 @@ m68k_output_function_epilogue (stream, size)\n \t     add a small integer (8 < N <= 16) to a register.  */\n \t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\taddq.w %0I8,%Rsp\\n\\taddq.w %0I%wd,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddq.w %I8,%Rsp\\n\\taddq.w %I%wd,%Rsp\\n\",\n \t\t       fsize + 4 - 8);\n #else\n-\t  asm_fprintf (stream, \"\\taddqw %0I8,%Rsp\\n\\taddqw %0I%wd,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddqw %I8,%Rsp\\n\\taddqw %I%wd,%Rsp\\n\",\n \t\t       fsize + 4 - 8);\n #endif\n \t}\n@@ -1012,9 +1012,9 @@ m68k_output_function_epilogue (stream, size)\n \t    { \n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\tadd.w %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddw %0I%wd,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddw %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t  else\n@@ -1030,9 +1030,9 @@ m68k_output_function_epilogue (stream, size)\n \t{\n \t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%wd,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\tadd.l %I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t  asm_fprintf (stream, \"\\taddl %0I%wd,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\taddl %I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t}\n     }\n@@ -1045,7 +1045,7 @@ m68k_output_function_epilogue (stream, size)\n #endif\n     }\n   if (current_function_pops_args)\n-    asm_fprintf (stream, \"\\trtd %0I%d\\n\", current_function_pops_args);\n+    asm_fprintf (stream, \"\\trtd %I%d\\n\", current_function_pops_args);\n   else\n     fprintf (stream, \"\\trts\\n\");\n }\n@@ -2829,7 +2829,7 @@ print_operand (file, op, letter)\n     }\n   else if (letter == '#')\n     {\n-      asm_fprintf (file, \"%0I\");\n+      asm_fprintf (file, \"%I\");\n     }\n   else if (letter == '-')\n     {\n@@ -2932,7 +2932,7 @@ print_operand (file, op, letter)\n     {\n       /* Use `print_operand_address' instead of `output_addr_const'\n \t to ensure that we print relevant PIC stuff.  */\n-      asm_fprintf (file, \"%0I\");\n+      asm_fprintf (file, \"%I\");\n       if (TARGET_PCREL\n \t  && (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == CONST))\n \tprint_operand_address (file, op);"}, {"sha": "c6c8e0fe39e8c538467e7179aec95a4659e31e41", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f85a61235ffff1f585386ac3fe113577b2a756a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1f85a61235ffff1f585386ac3fe113577b2a756a", "patch": "@@ -1396,7 +1396,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    `assemble_name' uses this.  */\n \n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n-  asm_fprintf (FILE, \"%0U%s\", NAME)\n+  asm_fprintf (FILE, \"%U%s\", NAME)\n \n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where"}]}