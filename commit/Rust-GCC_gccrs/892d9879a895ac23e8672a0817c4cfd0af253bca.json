{"sha": "892d9879a895ac23e8672a0817c4cfd0af253bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyZDk4NzlhODk1YWMyM2U4NjcyYTA4MTdjNGNmZDBhZjI1M2JjYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-24T11:09:59Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-24T11:09:59Z"}, "message": "[sched-deps] Remove needless check for modified_in_p when trying to fuse two non-conditional jump insns\n\n\t* sched-deps.c (sched_macro_fuse_insns): Do not check modified_in_p\n\tin the not conditional jump case.\n\t* doc/tm.texi (TARGET_SCHED_MACRO_FUSION_PAIR_P): Update description.\n\t* target.def (TARGET_SCHED_MACRO_FUSION_PAIR_P): Update description.\n\n\t* gcc.target/aarch64/fuse_adrp_add_1.c: New test.\n\nFrom-SVN: r218012", "tree": {"sha": "796682fd2edd26a0fabad078aaaf49c3506d6499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796682fd2edd26a0fabad078aaaf49c3506d6499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892d9879a895ac23e8672a0817c4cfd0af253bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892d9879a895ac23e8672a0817c4cfd0af253bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892d9879a895ac23e8672a0817c4cfd0af253bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892d9879a895ac23e8672a0817c4cfd0af253bca/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9a318b031037cf3c486d7d863eae8491f1898d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a318b031037cf3c486d7d863eae8491f1898d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a318b031037cf3c486d7d863eae8491f1898d2"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "0db7927f2a2d12d3ada55569103de4f0ff35926d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -1,3 +1,10 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* sched-deps.c (sched_macro_fuse_insns): Do not check modified_in_p\n+\tin the not conditional jump case.\n+\t* doc/tm.texi (TARGET_SCHED_MACRO_FUSION_PAIR_P): Update description.\n+\t* target.def (TARGET_SCHED_MACRO_FUSION_PAIR_P): Update description.\n+\n 2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c: Include tm-constrs.h"}, {"sha": "c54fc71788c96bc4a303b7dffdd8a956835881ed", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -6484,11 +6484,13 @@ cycle.  These other insns can then be taken into account properly.\n This hook is used to check whether target platform supports macro fusion.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SCHED_MACRO_FUSION_PAIR_P (rtx_insn *@var{condgen}, rtx_insn *@var{condjmp})\n-This hook is used to check whether two insns could be macro fused for\n-target microarchitecture. If this hook returns true for the given insn pair\n-(@var{condgen} and @var{condjmp}), scheduler will put them into a sched\n-group, and they will not be scheduled apart.\n+@deftypefn {Target Hook} bool TARGET_SCHED_MACRO_FUSION_PAIR_P (rtx_insn *@var{prev}, rtx_insn *@var{curr})\n+This hook is used to check whether two insns should be macro fused for\n+a target microarchitecture. If this hook returns true for the given insn pair\n+(@var{prev} and @var{curr}), the scheduler will put them into a sched\n+group, and they will not be scheduled apart.  The two insns will be either\n+two SET insns or a compare and a conditional jump and this hook should\n+validate any dependencies needed to fuse the two insns together.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK (rtx_insn *@var{head}, rtx_insn *@var{tail})"}, {"sha": "ee534b02ef8ab8c1e4818c799359522d68001298", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -2877,8 +2877,7 @@ sched_macro_fuse_insns (rtx_insn *insn)\n       prev = prev_nonnote_nondebug_insn (insn);\n       if (!prev\n           || !insn_set\n-          || !single_set (prev)\n-          || !modified_in_p (SET_DEST (insn_set), prev))\n+          || !single_set (prev))\n         return;\n \n     }"}, {"sha": "7c0296d58e47a9825d7cdfcd1bdcbb2be4c920dc", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -1067,11 +1067,13 @@ DEFHOOK\n \n DEFHOOK\n (macro_fusion_pair_p,\n- \"This hook is used to check whether two insns could be macro fused for\\n\\\n-target microarchitecture. If this hook returns true for the given insn pair\\n\\\n-(@var{condgen} and @var{condjmp}), scheduler will put them into a sched\\n\\\n-group, and they will not be scheduled apart.\",\n- bool, (rtx_insn *condgen, rtx_insn *condjmp), NULL)\n+ \"This hook is used to check whether two insns should be macro fused for\\n\\\n+a target microarchitecture. If this hook returns true for the given insn pair\\n\\\n+(@var{prev} and @var{curr}), the scheduler will put them into a sched\\n\\\n+group, and they will not be scheduled apart.  The two insns will be either\\n\\\n+two SET insns or a compare and a conditional jump and this hook should\\n\\\n+validate any dependencies needed to fuse the two insns together.\",\n+ bool, (rtx_insn *prev, rtx_insn *curr), NULL)\n \n /* The following member value is a pointer to a function called\n    after evaluation forward dependencies of insns in chain given"}, {"sha": "b3d827fe6ab7ba3bc86b6ce8960df33aeb9f26fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -1,3 +1,7 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/fuse_adrp_add_1.c: New test.\n+\n 2014-11-24  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/64039"}, {"sha": "074c629469bfa160653df223981fa1748dce545d", "filename": "gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse_adrp_add_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892d9879a895ac23e8672a0817c4cfd0af253bca/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse_adrp_add_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffuse_adrp_add_1.c?ref=892d9879a895ac23e8672a0817c4cfd0af253bca", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=cortex-a57\" } */\n+\n+enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n+                 XGRF_REGS, ALL_REGS, LIM_REG_CLASSES };\n+\n+enum rtx_code { REG,  LAST_AND_UNUSED_RTX_CODE };\n+\n+typedef union rtunion_def\n+{\n+  int rtint;\n+} rtunion;\n+\n+typedef struct rtx_def\n+{\n+  unsigned int volatil : 1;\n+  rtunion fld[1];\n+} *rtx;\n+\n+extern char fixed_regs[64];\n+extern char global_regs[64];\n+\n+int\n+rtx_cost (rtx x, int outer_code)\n+{\n+  register enum rtx_code code;\n+  switch (code)\n+    {\n+      case REG:\n+        return ! ((((x)->volatil) && ((x)->fld[0].rtint) < 64)\n+                 || ((((x)->fld[0].rtint)) == 30 || (((x)->fld[0].rtint)) == 30\n+                 || (((x)->fld[0].rtint)) == 31 || (((x)->fld[0].rtint)) == 0\n+                 || ((((x)->fld[0].rtint)) >= (64)\n+                     && (((x)->fld[0].rtint)) <= (((64)) + 3))\n+                 || ((((x)->fld[0].rtint)) < 64 && ((((x)->fld[0].rtint)) == 30\n+                 || (((x)->fld[0].rtint)) == 30 || fixed_regs[((x)->fld[0].rtint)]\n+                 || global_regs[((x)->fld[0].rtint)])\n+                    && ((((x)->fld[0].rtint))\n+                          ? ((((x)->fld[0].rtint) < 32)\n+                             ? GENERAL_REGS : XRF_REGS)\n+                          : AP_REG) != NO_REGS)));\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"adrp\\tx.*, fixed_regs\\n\\tadd\\tx.*, x.*fixed_regs\" } } */"}]}