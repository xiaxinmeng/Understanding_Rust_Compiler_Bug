{"sha": "a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjYTFhYjJlOTk5ZGFkYjVlZjY0YWY5YTlhZGIwNjUyN2U3M2IwNw==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-03-28T14:14:33Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-03-28T14:14:33Z"}, "message": "parser.c (struct cp_parser): Update comment for greater_than_is_operator_p.\n\n2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n\n\t* parser.c (struct cp_parser): Update comment for\n\tgreater_than_is_operator_p.\n\t(cp_parser_primary_expression): In C++0x mode, a cast operator can\n\tbe terminated with a `>>' token when !GREATER_THAN_IS_OPERATOR_P.\n\t(TOKEN_PRECEDENCE): In C++0x mode, `>>' is treated like `>' when\n\t!GREATER_THAN_IS_OPERATOR_P.\n\t(cp_parser_binary_expression): When -Wc++0x-compat, warn about\n\t`>>' operators that will become two `>' tokens in C++0x.\n\t(cp_parser_parameter_declaration): Treat `>>' like `>' in C++0x\n\tmode, allowing it to terminate default arguments.\n\t(cp_parser_enclosed_template_argument_list): In C++0x mode, treat\n\t`>>' like two consecutive `>' tokens.\n\t(cp_parser_skip_to_end_of_template_parameter_list): Ditto.\n\t(cp_parser_next_token_ends_template_argument_p): In C++0x, `>>'\n\tends a template argument.\n\n\n2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n\n\t* g++.dg/cpp0x/bracket1.C: New.\n\t* g++.dg/cpp0x/bracket2.C: New.\n\t* g++.dg/cpp0x/bracket3.C: New.\n\t* g++.dg/cpp0x/bracket4.C: New.\n\nFrom-SVN: r123302", "tree": {"sha": "a16779ee40a6eeacded6ce16a5b7e6aa3bc6ea09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16779ee40a6eeacded6ce16a5b7e6aa3bc6ea09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a646adedf047f2ce932c516bc249b788f4947356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a646adedf047f2ce932c516bc249b788f4947356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a646adedf047f2ce932c516bc249b788f4947356"}], "stats": {"total": 173, "additions": 161, "deletions": 12}, "files": [{"sha": "a2a0f6ef90cb33c75cc196dc9914af70af2910d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -1,3 +1,21 @@\n+2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n+\n+\t* parser.c (struct cp_parser): Update comment for\n+\tgreater_than_is_operator_p.\n+\t(cp_parser_primary_expression): In C++0x mode, a cast operator can\n+\tbe terminated with a `>>' token when !GREATER_THAN_IS_OPERATOR_P.\n+\t(TOKEN_PRECEDENCE): In C++0x mode, `>>' is treated like `>' when\n+\t!GREATER_THAN_IS_OPERATOR_P.\n+\t(cp_parser_binary_expression): When -Wc++0x-compat, warn about\n+\t`>>' operators that will become two `>' tokens in C++0x.\n+\t(cp_parser_parameter_declaration): Treat `>>' like `>' in C++0x\n+\tmode, allowing it to terminate default arguments.\n+\t(cp_parser_enclosed_template_argument_list): In C++0x mode, treat\n+\t`>>' like two consecutive `>' tokens.\n+\t(cp_parser_skip_to_end_of_template_parameter_list): Ditto.\n+\t(cp_parser_next_token_ends_template_argument_p): In C++0x, `>>'\n+\tends a template argument.\n+\n 2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* decl.c (redeclaration_error_message): Complain when redeclaring"}, {"sha": "dcd73f06ab510e44541e0ce6ccb075cb4e610146", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 77, "deletions": 12, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -1400,7 +1400,9 @@ typedef struct cp_parser GTY(())\n \n   /* TRUE if the `>' token should be interpreted as the greater-than\n      operator.  FALSE if it is the end of a template-id or\n-     template-parameter-list.  */\n+     template-parameter-list. In C++0x mode, this flag also applies to\n+     `>>' tokens, which are viewed as two consecutive `>' tokens when\n+     this flag is FALSE.  */\n   bool greater_than_is_operator_p;\n \n   /* TRUE if default arguments are allowed within a parameter list\n@@ -3027,6 +3029,11 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t  && next_token->type != CPP_CLOSE_SQUARE\n \t\t  /* The closing \">\" in a template-argument-list.  */\n \t\t  && (next_token->type != CPP_GREATER\n+\t\t      || parser->greater_than_is_operator_p)\n+\t\t  /* C++0x only: A \">>\" treated like two \">\" tokens,\n+                     in a template-argument-list.  */\n+\t\t  && (next_token->type != CPP_RSHIFT\n+                      || !flag_cpp0x\n \t\t      || parser->greater_than_is_operator_p))\n \t\tcast_p = false;\n \t    }\n@@ -5792,10 +5799,12 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n    The binops_by_token map is used to get the tree codes for each <token> type.\n    binary-expressions are associated according to a precedence table.  */\n \n-#define TOKEN_PRECEDENCE(token) \\\n-  ((token->type == CPP_GREATER && !parser->greater_than_is_operator_p) \\\n-   ? PREC_NOT_OPERATOR \\\n-   : binops_by_token[token->type].prec)\n+#define TOKEN_PRECEDENCE(token)\t\t\t\t\\\n+(((token->type == CPP_GREATER\t\t\t\t\\\n+   || (flag_cpp0x && token->type == CPP_RSHIFT))\t\\\n+  && !parser->greater_than_is_operator_p)\t\t\\\n+ ? PREC_NOT_OPERATOR\t\t\t\t\t\\\n+ : binops_by_token[token->type].prec)\n \n static tree\n cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n@@ -5817,6 +5826,17 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n       /* Get an operator token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n \n+      if (warn_cxx0x_compat\n+          && token->type == CPP_RSHIFT\n+          && !parser->greater_than_is_operator_p)\n+        {\n+          warning (OPT_Wc__0x_compat, \n+                   \"%H%<>>%> operator will be treated as two right angle brackets in C++0x\", \n+                   &token->location);\n+          warning (OPT_Wc__0x_compat, \n+                   \"suggest parentheses around %<>>%> expression\");\n+        }\n+\n       new_prec = TOKEN_PRECEDENCE (token);\n \n       /* Popping an entry off the stack means we completed a subexpression:\n@@ -13015,6 +13035,13 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t  ++depth;\n \t\t  break;\n \n+                case CPP_RSHIFT:\n+                  if (!flag_cpp0x)\n+                    break;\n+                  /* Fall through for C++0x, which treats the `>>'\n+                     operator like two `>' tokens in certain\n+                     cases.  */\n+\n \t\tcase CPP_GREATER:\n \t\t  /* If we see a non-nested `>', and `>' is not an\n \t\t     operator, then it marks the end of the default\n@@ -16536,15 +16563,37 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n   saved_skip_evaluation = skip_evaluation;\n   skip_evaluation = false;\n   /* Parse the template-argument-list itself.  */\n-  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER))\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER)\n+      || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n     arguments = NULL_TREE;\n   else\n     arguments = cp_parser_template_argument_list (parser);\n   /* Look for the `>' that ends the template-argument-list. If we find\n      a '>>' instead, it's probably just a typo.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n     {\n-      if (!saved_greater_than_is_operator_p)\n+      if (flag_cpp0x)\n+        {\n+          /* In C++0x, a `>>' in a template argument list or cast\n+             expression is considered to be two separate `>'\n+             tokens. So, change the current token to a `>', but don't\n+             consume it: it will be consumed later when the outer\n+             template argument list (or cast expression) is parsed.\n+             Note that this replacement of `>' for `>>' is necessary\n+             even if we are parsing tentatively: in the tentative\n+             case, after calling\n+             cp_parser_enclosed_template_argument_list we will always\n+             throw away all of the template arguments and the first\n+             closing `>', either because the template argument list\n+             was erroneous or because we are replacing those tokens\n+             with a CPP_TEMPLATE_ID token.  The second `>' (which will\n+             not have been thrown away) is needed either to close an\n+             outer template argument list or to complete a new-style\n+             cast.  */\n+\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+          token->type = CPP_GREATER;\n+        }\n+      else if (!saved_greater_than_is_operator_p)\n \t{\n \t  /* If we're in a nested template argument list, the '>>' has\n \t    to be a typo for '> >'. We emit the error message, but we\n@@ -16557,8 +16606,6 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n \t\t \"within a nested template argument list\",\n \t\t &token->location);\n \n-\t  /* ??? Proper recovery should terminate two levels of\n-\t     template argument list here.  */\n \t  token->type = CPP_GREATER;\n \t}\n       else\n@@ -17054,6 +17101,23 @@ cp_parser_skip_to_end_of_template_parameter_list (cp_parser* parser)\n \t    ++level;\n \t  break;\n \n+        case CPP_RSHIFT:\n+          if (!flag_cpp0x)\n+            /* C++0x views the `>>' operator as two `>' tokens, but\n+               C++98 does not. */\n+            break;\n+          else if (!nesting_depth && level-- == 0)\n+\t    {\n+              /* We've hit a `>>' where the first `>' closes the\n+                 template argument list, and the second `>' is\n+                 spurious.  Just consume the `>>' and stop; we've\n+                 already produced at least one error.  */\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t      return;\n+\t    }\n+          /* Fall through for C++0x, so we handle the second `>' in\n+             the `>>'.  */\n+\n \tcase CPP_GREATER:\n \t  if (!nesting_depth && level-- == 0)\n \t    {\n@@ -17148,8 +17212,8 @@ cp_parser_next_token_starts_class_definition_p (cp_parser *parser)\n   return (token->type == CPP_OPEN_BRACE || token->type == CPP_COLON);\n }\n \n-/* Returns TRUE iff the next token is the \",\" or \">\" ending a\n-   template-argument.  */\n+/* Returns TRUE iff the next token is the \",\" or \">\" (or `>>', in\n+   C++0x) ending a template-argument.  */\n \n static bool\n cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n@@ -17159,7 +17223,8 @@ cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n   token = cp_lexer_peek_token (parser->lexer);\n   return (token->type == CPP_COMMA \n           || token->type == CPP_GREATER\n-          || token->type == CPP_ELLIPSIS);\n+          || token->type == CPP_ELLIPSIS\n+\t  || (flag_cpp0x && token->type == CPP_RSHIFT));\n }\n \n /* Returns TRUE iff the n-th token is a \"<\", or the n-th is a \"[\" and the"}, {"sha": "2b66dad9c0372d351faa4d2568d45453554e33bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -1,3 +1,10 @@\n+2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n+\n+\t* g++.dg/cpp0x/bracket1.C: New.\n+\t* g++.dg/cpp0x/bracket2.C: New.\n+\t* g++.dg/cpp0x/bracket3.C: New.\n+\t* g++.dg/cpp0x/bracket4.C: New.\n+\n 2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* g++.dg/cpp0x/temp_default1.C: New."}, {"sha": "cffb921edcf31a18d691027723d6ba6ec6f9a987", "filename": "gcc/testsuite/g++.dg/cpp0x/bracket1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket1.C?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do \"compile\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<typename T>\n+struct list {};\n+\n+template<typename T>\n+struct vector { \n+  operator T() const;\n+};\n+\n+void f()\n+{\n+  vector<vector<int>> v;\n+  const vector<int> vi = static_cast<vector<int>>(v);\n+}"}, {"sha": "ccd466da26fcba555e0c0b66ed8c19cd9e96e653", "filename": "gcc/testsuite/g++.dg/cpp0x/bracket2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket2.C?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do \"compile\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<int i> class X { /* ... */ };\n+X< 1>2 > x1;    // // { dg-error \"numeric constant\" }\n+X<(1>2)> x2;    // Okay.\n+\n+template<class T> class Y { /* ... */ };\n+Y<X<1>> x3;     // Okay, same as \"Y<X<1> > x3;\".\n+Y<X<6>>1>> x4;  // { dg-error \"numeric constant\" }\n+Y<X<(6>>1)>> x5;  // Okay"}, {"sha": "eb1ef02297d56bf5375e70d74777adf189ef9e4e", "filename": "gcc/testsuite/g++.dg/cpp0x/bracket3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket3.C?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-std=c++98 -Wc++0x-compat\" }\n+\n+template<int N> struct X {};\n+\n+X<1 >> 2> x; // { dg-warning \"will be treated as|suggest parentheses\" }"}, {"sha": "2ac5ff3d734488ba8765ace6ae72d9eb67c1d671", "filename": "gcc/testsuite/g++.dg/cpp0x/bracket4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ca1ab2e999dadb5ef64af9a9adb06527e73b07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbracket4.C?ref=a2ca1ab2e999dadb5ef64af9a9adb06527e73b07", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do \"compile\" }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T>\n+struct vector { \n+};\n+\n+struct X {\n+  template<typename T>\n+  struct tmpl { \n+    operator T() const;\n+  };\n+};\n+\n+template<typename T>\n+void g()\n+{\n+  T::template tmpl<vector<int>>() + 2;\n+}\n+\n+template<typename T>\n+void operator+(vector<T>, int);\n+\n+void f()\n+{\n+  vector<vector<int>>() + 2;\n+}"}]}