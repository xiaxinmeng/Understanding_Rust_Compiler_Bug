{"sha": "d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmMDM1ZWE1MjRlNTI3YmRhM2RiMmI5ZWVjNDZhMmMxZDNmYzQwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-23T14:59:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-23T14:59:57Z"}, "message": "re PR tree-optimization/65518 (gcc consumes all memory with -O3)\n\n2015-03-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65518\n\t* tree-vect-stmts.c (vectorizable_load): Reject single-element\n\tinterleaving cases we generate absymal code for.\n\n\t* gcc.dg/vect/pr65518.c: New testcase.\n\nFrom-SVN: r221595", "tree": {"sha": "9e7222ca7f57fd727ba128586760fd688dba755e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e7222ca7f57fd727ba128586760fd688dba755e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d886f7cc3376e5f61e39e860401a10dab5b8f5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d886f7cc3376e5f61e39e860401a10dab5b8f5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d886f7cc3376e5f61e39e860401a10dab5b8f5d8"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "724d13fd0d8c558a2ff282583b78acf92387d0f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "patch": "@@ -1,3 +1,9 @@\n+2015-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65518\n+\t* tree-vect-stmts.c (vectorizable_load): Reject single-element\n+\tinterleaving cases we generate absymal code for.\n+\n 2015-03-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65494"}, {"sha": "e6e63d1a10e9141622435a41dc7ae1611103ad2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "patch": "@@ -1,3 +1,8 @@\n+2015-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65518\n+\t* gcc.dg/vect/pr65518.c: New testcase.\n+\n 2015-03-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65494"}, {"sha": "dc400c6d82346be46dad4d2d95eb006df179a599", "filename": "gcc/testsuite/gcc.dg/vect/pr65518.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c?ref=d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\r\n+\r\n+extern void abort (void);\r\n+\r\n+typedef struct giga\r\n+{\r\n+  unsigned int g[16];\r\n+} giga;\r\n+\r\n+unsigned long __attribute__((noinline,noclone))\r\n+addfst(giga const *gptr, int num)\r\n+{\r\n+  unsigned int retval = 0;\r\n+  int i;\r\n+  for (i = 0; i < num; i++)\r\n+    retval += gptr[i].g[0];\r\n+  return retval;\r\n+}\r\n+\r\n+int main ()\r\n+{\r\n+  struct giga g[8];\r\n+  unsigned int n = 1;\r\n+  int i, j;\r\n+  for (i = 0; i < 8; ++i)\r\n+    for (j = 0; j < 16; ++j)\r\n+      {\r\n+\tg[i].g[j] = n++;\r\n+\t__asm__ volatile (\"\");\r\n+      }\r\n+  if (addfst (g, 8) != 456)\r\n+    abort ();\r\n+  return 0;\r\n+}\r\n+\r\n+/* We don't want to vectorize the single-element interleaving in the way\r\n+   we currently do that (without ignoring not needed vectors in the\r\n+   gap between gptr[0].g[0] and gptr[1].g[0]), because that's very\r\n+   sub-optimal and causes memory explosion (even though the cost model\r\n+   should reject that in the end).  */\r\n+\r\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops in function\" 2 \"vect\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\r"}, {"sha": "de35508d560436578b8935bd4f0095d813520d14", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f035ea524e527bda3db2b9eec46a2c1d3fc404/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d5f035ea524e527bda3db2b9eec46a2c1d3fc404", "patch": "@@ -5780,6 +5780,22 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       gcc_assert (! nested_in_vect_loop && !STMT_VINFO_GATHER_P (stmt_info));\n \n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n+\n+      /* If this is single-element interleaving with an element distance\n+         that leaves unused vector loads around punt - we at least create\n+\t very sub-optimal code in that case (and blow up memory,\n+\t see PR65518).  */\n+      if (first_stmt == stmt\n+\t  && !GROUP_NEXT_ELEMENT (stmt_info)\n+\t  && GROUP_SIZE (stmt_info) > TYPE_VECTOR_SUBPARTS (vectype))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"single-element interleaving not supported \"\n+\t\t\t     \"for not adjacent vector loads\\n\");\n+\t  return false;\n+\t}\n+\n       if (!slp && !PURE_SLP_STMT (stmt_info))\n \t{\n \t  group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));"}]}