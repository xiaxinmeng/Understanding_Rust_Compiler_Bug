{"sha": "d98fd13429d8819de437e6a681aebea99e3edbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4ZmQxMzQyOWQ4ODE5ZGU0MzdlNmE2ODFhZWJlYTk5ZTNlZGJmZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-30T00:21:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-30T00:21:10Z"}, "message": "Minimal fixes for -fno-exceptions.\n\n2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tMinimal fixes for -fno-exceptions.\n\t* src/bitmap_allocator.cc (free_list::_M_get): Use\n\t__throw_exception_again, instead of plain throw.\n\t* testsuite/testsuite_abi.cc (get_symbol, examine_symbol,\n\tcreate_symbols): Likewise.\n\t* testsuite/testsuite_hooks.cc (verify_demangle,\n\trun_tests_wrapped_locale, run_tests_wrapped_env): Likewise.\n\t(try_named_locale): Wrap the whole catch in __EXCEPTIONS.\n\nFrom-SVN: r92720", "tree": {"sha": "53fbaf5bf7be5d0613a639ddf4b5d53dbddcadd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53fbaf5bf7be5d0613a639ddf4b5d53dbddcadd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98fd13429d8819de437e6a681aebea99e3edbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98fd13429d8819de437e6a681aebea99e3edbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98fd13429d8819de437e6a681aebea99e3edbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98fd13429d8819de437e6a681aebea99e3edbfe/comments", "author": null, "committer": null, "parents": [{"sha": "b53948b951e8fddb8f1cafa910c3da5a2a158fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53948b951e8fddb8f1cafa910c3da5a2a158fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53948b951e8fddb8f1cafa910c3da5a2a158fee"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "4f9c8d08779a26c7f735b5fdd35ee8eeb025c7c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d98fd13429d8819de437e6a681aebea99e3edbfe", "patch": "@@ -1,3 +1,14 @@\n+2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tMinimal fixes for -fno-exceptions.\n+\t* src/bitmap_allocator.cc (free_list::_M_get): Use\n+\t__throw_exception_again, instead of plain throw.\n+\t* testsuite/testsuite_abi.cc (get_symbol, examine_symbol,\n+\tcreate_symbols): Likewise.\n+\t* testsuite/testsuite_hooks.cc (verify_demangle,\n+\trun_tests_wrapped_locale, run_tests_wrapped_env): Likewise.\n+\t(try_named_locale): Wrap the whole catch in __EXCEPTIONS.\n+\n 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Add has_nothrow_constructor."}, {"sha": "6e774a2c4081047887e4a2d81981474a8374274c", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=d98fd13429d8819de437e6a681aebea99e3edbfe", "patch": "@@ -96,7 +96,7 @@ namespace __gnu_cxx\n \t    *__ret = __sz;\n \t    return __ret + 1;\n \t  }\n-\tthrow std::bad_alloc();\n+\t__throw_exception_again std::bad_alloc();\n       }\n     else\n       {"}, {"sha": "5957b78f9e9cb30346535e851800152de6615840", "filename": "libstdc++-v3/testsuite/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc?ref=d98fd13429d8819de437e6a681aebea99e3edbfe", "patch": "@@ -263,7 +263,7 @@ get_symbol(const string& mangled, const symbols& s)\n     {\n       ostringstream os;\n       os << \"get_symbol failed for symbol \" << mangled;\n-      throw symbol_error(os.str());\n+      __throw_exception_again symbol_error(os.str());\n     }\n }\n \n@@ -277,7 +277,7 @@ examine_symbol(const char* name, const char* file)\n       sym.print();\n     }\n   catch(...)\n-    { throw; }\n+    { __throw_exception_again; }\n }\n \n void \n@@ -420,7 +420,7 @@ create_symbols(const char* file)\n     {\n       ostringstream os;\n       os << \"create_symbols failed for file \" << file;\n-      throw runtime_error(os.str());\n+      __throw_exception_again runtime_error(os.str());\n     }\n   return s;\n }"}, {"sha": "f503979b65d85d2ca8aec98606e654bd801d42f0", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98fd13429d8819de437e6a681aebea99e3edbfe/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=d98fd13429d8819de437e6a681aebea99e3edbfe", "patch": "@@ -137,7 +137,7 @@ namespace __gnu_test\n \n     std::string w(wanted);\n     if (w != s)\n-      throw std::runtime_error(s);\n+      __throw_exception_again std::runtime_error(std::string(s));\n   }\n \n   \n@@ -184,7 +184,8 @@ namespace __gnu_test\n \tVERIFY( preLC_ALL == postLC_ALL );\n       }\n     else\n-      throw environment_variable(string(\"LC_ALL for \") + string(name));\n+      __throw_exception_again\n+\tenvironment_variable(string(\"LC_ALL for \") + string(name));\n   }\n   \n   void \n@@ -209,7 +210,8 @@ namespace __gnu_test\n \tsetenv(env, oldENV ? oldENV : \"\", 1);\n       }\n     else\n-      throw environment_variable(string(env) + string(\" to \") + string(name));\n+      __throw_exception_again\n+\tenvironment_variable(string(env) + string(\" to \") + string(name));\n #endif\n   }\n \n@@ -220,6 +222,7 @@ namespace __gnu_test\n       {\n \treturn std::locale(name);\n       }\n+#ifdef __EXCEPTIONS\n     catch (std::runtime_error& ex)\n       {\n \t// Thrown by generic and gnu implemenation if named locale fails.\n@@ -228,6 +231,7 @@ namespace __gnu_test\n \telse\n \t  throw;\n       }\n+#endif\n   }\n \n   int"}]}