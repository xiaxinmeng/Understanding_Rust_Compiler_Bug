{"sha": "e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "node_id": "C_kwDOANBUbNoAKGU0M2IxNWM4OGMyNDJiMTRhOGNlZDhlNjMxYzFmOWI4MGU4M2Q2M2M", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-29T14:19:34Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-30T14:07:21Z"}, "message": "Always track arguments, even when ignoring equiv params.\n\nTo \"ignore\" ranges from equivalences, we should track the range separately,\nbut still do the other name processing which determiens if there is a single\nname or not for equivalence.  Otherwise we mistakently think we can introduce\nan equivalences.\n\n\tgcc/\n\tPR tree-optimization/103440\n\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Continue\n\tnormal param processing for equiv params.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr103440.c: New.", "tree": {"sha": "80d5dae509a532247a94efe060bec069984ece96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d5dae509a532247a94efe060bec069984ece96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43b15c88c242b14a8ced8e631c1f9b80e83d63c/comments", "author": null, "committer": null, "parents": [{"sha": "fa01e206c87581186f64f4500f926cdb70549de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01e206c87581186f64f4500f926cdb70549de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa01e206c87581186f64f4500f926cdb70549de0"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "58122297c0b19594da8598a711e5e4a40a895eb1", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b15c88c242b14a8ced8e631c1f9b80e83d63c/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b15c88c242b14a8ced8e631c1f9b80e83d63c/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "patch": "@@ -795,20 +795,17 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n       // Get the range of the argument on its edge.\n       src.get_phi_operand (arg_range, arg, e);\n \n-      // Likewise, if the incoming PHI argument is equivalent to this\n-      // PHI definition, it provides no new info.  Accumulate these ranges\n-      // in case all arguments are equivalences.\n-      if (src.query ()->query_relation (e, arg, phi_def, false) == EQ_EXPR)\n-\t{\n-\t  single_arg = arg;\n-\t  equiv_range.union_(arg_range);\n-\t  continue;\n-\t}\n-\n       if (!arg_range.undefined_p ())\n \t{\n \t  // Register potential dependencies for stale value tracking.\n-\t  r.union_ (arg_range);\n+\t  // Likewise, if the incoming PHI argument is equivalent to this\n+\t  // PHI definition, it provides no new info.  Accumulate these ranges\n+\t  // in case all arguments are equivalences.\n+\t  if (src.query ()->query_relation (e, arg, phi_def, false) == EQ_EXPR)\n+\t    equiv_range.union_(arg_range);\n+\t  else\n+\t    r.union_ (arg_range);\n+\n \t  if (gimple_range_ssa_p (arg) && src.gori ())\n \t    src.gori ()->register_dependency (phi_def, arg);\n \n@@ -829,7 +826,7 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n \n     // If all arguments were equivalences, use the equivalence ranges as no\n     // arguments were processed.\n-    if (!seen_arg)\n+    if (r.undefined_p () && !equiv_range.undefined_p ())\n       r = equiv_range;\n \n     // If the PHI boils down to a single effective argument, look at it."}, {"sha": "b97f45cd3ed6bf2183c98b192a640c57f5d09372", "filename": "gcc/testsuite/gcc.dg/pr103440.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43b15c88c242b14a8ced8e631c1f9b80e83d63c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103440.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43b15c88c242b14a8ced8e631c1f9b80e83d63c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103440.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103440.c?ref=e43b15c88c242b14a8ced8e631c1f9b80e83d63c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-timeout 10 } */\n+\n+int a, b, c, d, e;\n+int main() {\n+  int f = 2, g = 1, h = -3;\n+L1:\n+  c = b ^ 1;\n+  if (!f)\n+    goto L3;\n+  if (d)\n+    g = e;\n+  f = h;\n+  if (!c)\n+    goto L1;\n+L2:\n+  if (g)\n+    a = 0;\n+L3:\n+  if (d == g)\n+    goto L2;\n+  return 0;\n+}"}]}