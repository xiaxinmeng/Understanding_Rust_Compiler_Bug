{"sha": "d751beac550156b637116db02867e629715e3dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1MWJlYWM1NTAxNTZiNjM3MTE2ZGIwMjg2N2U2Mjk3MTVlM2RmYg==", "commit": {"author": {"name": "Louis Krupp", "email": "louis.krupp@zoho.com", "date": "2015-10-02T04:03:34Z"}, "committer": {"name": "Louis Krupp", "email": "lkrupp@gcc.gnu.org", "date": "2015-10-02T04:03:34Z"}, "message": "[multiple changes]\n\n2015-10-01  Louis Krupp <louis.krupp@zoho.com>\n\n\tPR fortran/62242\n\tPR fortran/52332\n\t* trans-array.c\n\t(store_backend_decl): Create new gfc_charlen instance if requested\n\t(get_array_ctor_all_strlen): Call store_backend_decl requesting\n\tnew gfc_charlen\n\t(trans_array_constructor): Call store_backend_decl requesting\n\tnew gfc_charlen if get_array_ctor_strlen was called\n\t(gfc_add_loop_ss_code): Don't try to convert non-constant length\n\n2015-10-01  Louis Krupp     <louis.krupp@zoho.com>\n\n\tPR fortran/62242\n\tPR fortran/52332\n\t* gfortran.dg/string_array_constructor_1.f90: New.\n\t* gfortran.dg/string_array_constructor_2.f90: New.\n\t* gfortran.dg/string_array_constructor_3.f90: New.\n\nFrom-SVN: r228368", "tree": {"sha": "76c5ba775fc41c47381d092d6f967ce451f0c0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c5ba775fc41c47381d092d6f967ce451f0c0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d751beac550156b637116db02867e629715e3dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d751beac550156b637116db02867e629715e3dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d751beac550156b637116db02867e629715e3dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d751beac550156b637116db02867e629715e3dfb/comments", "author": null, "committer": null, "parents": [{"sha": "5a4d7a169fdb8a155ffbec612e957b9182e0e167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4d7a169fdb8a155ffbec612e957b9182e0e167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4d7a169fdb8a155ffbec612e957b9182e0e167"}], "stats": {"total": 154, "additions": 149, "deletions": 5}, "files": [{"sha": "1e9435550f5903a55a62a393170efce9ad8a121f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -1,3 +1,15 @@\n+2015-10-01  Louis Krupp <louis.krupp@zoho.com>\n+\n+\tPR fortran/62242\n+\tPR fortran/52332\n+\t* trans-array.c\n+\t(store_backend_decl): Create new gfc_charlen instance if requested\n+\t(get_array_ctor_all_strlen): Call store_backend_decl requesting\n+\tnew gfc_charlen\n+\t(trans_array_constructor): Call store_backend_decl requesting\n+\tnew gfc_charlen if get_array_ctor_strlen was called\n+\t(gfc_add_loop_ss_code): Don't try to convert non-constant length\n+\n 2015-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran.67802"}, {"sha": "e1d7f78bb6b042d9c3100a2a92943f4ac7f2a705", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -1799,6 +1799,29 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n }\n \n \n+/* The array constructor code can create a string length with an operand\n+   in the form of a temporary variable.  This variable will retain its\n+   context (current_function_decl).  If we store this length tree in a\n+   gfc_charlen structure which is shared by a variable in another\n+   context, the resulting gfc_charlen structure with a variable in a\n+   different context, we could trip the assertion in expand_expr_real_1\n+   when it sees that a variable has been created in one context and\n+   referenced in another.\n+\n+   If this might be the case, we create a new gfc_charlen structure and\n+   link it into the current namespace.  */\n+\n+static void\n+store_backend_decl (gfc_charlen **clp, tree len, bool force_new_cl)\n+{\n+  if (force_new_cl)\n+    {\n+      gfc_charlen *new_cl = gfc_new_charlen (gfc_current_ns, *clp);\n+      *clp = new_cl;\n+    }\n+  (*clp)->backend_decl = len;\n+}\n+\n /* A catch-all to obtain the string length for anything that is not\n    a substring of non-constant length, a constant, array or variable.  */\n \n@@ -1836,7 +1859,7 @@ get_array_ctor_all_strlen (stmtblock_t *block, gfc_expr *e, tree *len)\n       gfc_add_block_to_block (block, &se.pre);\n       gfc_add_block_to_block (block, &se.post);\n \n-      e->ts.u.cl->backend_decl = *len;\n+      store_backend_decl (&e->ts.u.cl, *len, true);\n     }\n }\n \n@@ -2226,6 +2249,7 @@ trans_array_constructor (gfc_ss * ss, locus * where)\n   if (expr->ts.type == BT_CHARACTER)\n     {\n       bool const_string;\n+      bool force_new_cl = false;\n \n       /* get_array_ctor_strlen walks the elements of the constructor, if a\n \t typespec was given, we already know the string length and want the one\n@@ -2244,14 +2268,17 @@ trans_array_constructor (gfc_ss * ss, locus * where)\n \t  gfc_add_block_to_block (&outer_loop->post, &length_se.post);\n \t}\n       else\n-\tconst_string = get_array_ctor_strlen (&outer_loop->pre, c,\n-\t\t\t\t\t      &ss_info->string_length);\n+\t{\n+\t  const_string = get_array_ctor_strlen (&outer_loop->pre, c,\n+\t\t\t\t\t\t&ss_info->string_length);\n+\t  force_new_cl = true;\n+\t}\n \n       /* Complex character array constructors should have been taken care of\n \t and not end up here.  */\n       gcc_assert (ss_info->string_length);\n \n-      expr->ts.u.cl->backend_decl = ss_info->string_length;\n+      store_backend_decl (&expr->ts.u.cl, ss_info->string_length, force_new_cl);\n \n       type = gfc_get_character_type_len (expr->ts.kind, ss_info->string_length);\n       if (const_string)\n@@ -2589,7 +2616,8 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t  if (expr->ts.type == BT_CHARACTER\n \t      && ss_info->string_length == NULL\n \t      && expr->ts.u.cl\n-\t      && expr->ts.u.cl->length)\n+\t      && expr->ts.u.cl->length\n+\t      && expr->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n \t    {\n \t      gfc_init_se (&se, NULL);\n \t      gfc_conv_expr_type (&se, expr->ts.u.cl->length,"}, {"sha": "65a6a9396ff3e9b068d41c1388f42d31886b8794", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -1,3 +1,11 @@\n+2015-10-01  Louis Krupp     <louis.krupp@zoho.com>\n+\n+\tPR fortran/62242\n+\tPR fortran/52332\n+\t* gfortran.dg/string_array_constructor_1.f90: New.\n+\t* gfortran.dg/string_array_constructor_2.f90: New.\n+\t* gfortran.dg/string_array_constructor_3.f90: New.\n+\n 2015-10-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/67788"}, {"sha": "a5968fb37a2668a0edd008e9dd108faed7f96c4f", "filename": "gcc/testsuite/gfortran.dg/string_array_constructor_1.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_1.f90?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! PR 62242\n+! Array constructor with an array element whose value is a\n+! character function that is described in an interface block and which\n+! has an assumed-length result\n+module gfbug\n+    implicit none\n+    INTERFACE\n+      function UpperCase(string) result(upper) \n+          character(*), intent(IN) :: string\n+          character(LEN(string)) :: upper\n+      end function\n+      function f2(string) result(upper) \n+          character(*), intent(IN) :: string\n+          character(5) :: upper\n+      end function\n+    END INTERFACE\n+contains\n+    subroutine s1\n+        character(5) c\n+        character(5), dimension(1) :: ca\n+        ca = (/f2(c)/)  ! This compiles\n+        ca = (/Uppercase(c)/) ! This gets an ICE\n+    end subroutine\n+end module gfbug\n+"}, {"sha": "0d352b7f5ca093d1bb430b1402d4f764f819d6f7", "filename": "gcc/testsuite/gfortran.dg/string_array_constructor_2.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_2.f90?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+! PR 62242\n+! Array constructor with an array element whose value is a\n+! character function that is described in an interface block and which\n+! has an assumed-length result\n+module gfbug\n+    implicit none\n+    INTERFACE\n+      function UpperCase(string) result(upper) \n+          character(*), intent(IN) :: string\n+          character(LEN(string)) :: upper\n+      end function\n+      function f2(string) result(upper) \n+          character(*), intent(IN) :: string\n+          character(5) :: upper\n+      end function\n+    END INTERFACE\n+contains\n+    subroutine s1\n+        character(5) c\n+        character(5), dimension(1) :: ca\n+        character(5), dimension(1) :: cb\n+        c = \"12345\"\n+        ca = (/f2(c)/) ! This works\n+        !print *, ca(1)\n+        cb = (/Uppercase(c)/) ! This gets an ICE\n+        if (ca(1) .ne. cb(1)) then\n+            call abort()\n+        end if\n+        !print *, ca(1)\n+    end subroutine\n+end module gfbug\n+\n+function UpperCase(string) result(upper) \n+    character(*), intent(IN) :: string\n+    character(LEN(string)) :: upper\n+    upper = string\n+end function\n+function f2(string) result(upper) \n+    character(*), intent(IN) :: string\n+    character(5) :: upper\n+    upper = string\n+end function\n+\n+program main\n+    use gfbug\n+    call s1\n+end program"}, {"sha": "1ba33e5de908465473b73493c5d9d513931bff26", "filename": "gcc/testsuite/gfortran.dg/string_array_constructor_3.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d751beac550156b637116db02867e629715e3dfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_array_constructor_3.f90?ref=d751beac550156b637116db02867e629715e3dfb", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! PR 62242\n+! A subprogram calling an array constructor with an array element whose\n+! value is the result of calling a character function with both an\n+! assumed-length argument and an assumed-length result\n+module gfbug\n+    implicit none\n+contains\n+    function inner(inner_str) result(upper)\n+        character(*), intent(IN) :: inner_str\n+        character(LEN(inner_str)) :: upper\n+\n+        upper = '123'\n+    end function\n+\n+    subroutine outer(outer_str)\n+        character(*), intent(IN) :: outer_str\n+        character(5) :: z(1)\n+\n+        z = [inner(outer_str)]\n+    end subroutine\n+end module gfbug"}]}