{"sha": "f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmZTNiYmY5ZjZjMGI3MjQ5OTMzZTE5Yjk0NTYwYjZiMjZiZjI2OQ==", "commit": {"author": {"name": "Tiziano M\u00fcller", "email": "tiziano.mueller@chem.uzh.ch", "date": "2020-07-29T14:28:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-29T14:47:21Z"}, "message": "preprocessor: Teach traditional about has_include [PR95889]\n\nTraditional cpp (used by fortran) didn;t know about the new\n__has_include__ implementation.  Hey, since when did traditional cpp\ngrow __has_include__? That wasn't in knr!\n\n\tlibcpp/\n\t* init.c (builtin_array): Add xref comment.\n\t* traditional.c (fun_like_macro): Add HAS_INCLUDE codes.\n\tgcc/testsuite/\n\t* c-c++-common/cpp/has-include-1-traditional.c: New.", "tree": {"sha": "92e81c82505a9d23ed95b53c521f8dc1a40dd14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e81c82505a9d23ed95b53c521f8dc1a40dd14d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/comments", "author": {"login": "dev-zero", "id": 11307, "node_id": "MDQ6VXNlcjExMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/11307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dev-zero", "html_url": "https://github.com/dev-zero", "followers_url": "https://api.github.com/users/dev-zero/followers", "following_url": "https://api.github.com/users/dev-zero/following{/other_user}", "gists_url": "https://api.github.com/users/dev-zero/gists{/gist_id}", "starred_url": "https://api.github.com/users/dev-zero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dev-zero/subscriptions", "organizations_url": "https://api.github.com/users/dev-zero/orgs", "repos_url": "https://api.github.com/users/dev-zero/repos", "events_url": "https://api.github.com/users/dev-zero/events{/privacy}", "received_events_url": "https://api.github.com/users/dev-zero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ede0bb87e74463c5b89fbfd501e85e9e683048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ede0bb87e74463c5b89fbfd501e85e9e683048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ede0bb87e74463c5b89fbfd501e85e9e683048"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "b0acdbece4d5011769e7c70108c307ce36c43582", "filename": "gcc/testsuite/c-c++-common/cpp/has-include-1-traditional.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1-traditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1-traditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1-traditional.c?ref=f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do preprocess { target c } } */\n+/* { dg-options \"-traditional-cpp\" } */\n+\n+#if __has_include (\"stdlib.h\")\n+#else\n+#error error 1\n+#endif\n+#if __has_include (<stdlib.h>)\n+#else\n+#error error 2\n+#endif\n+#if !__has_include (\"stdlib.h\")\n+#error error 3\n+#elif !__has_include (<stdlib.h>)\n+#error error 4\n+#endif\n+#if __has_include (\"stdlib.h\") && __has_include (<stdlib.h>)\n+#else\n+#error error 5\n+#endif\n+#if !defined(__has_include)\n+#error error 6\n+#endif\n+#ifndef __has_include\n+#error error 7\n+#endif\n+#ifdef __has_include\n+#else\n+#error error 8\n+#endif\n+#define m1 __has_include(\"stdlib.h\")\n+#define m2 <stdlib.h>\n+#if !m1\n+#error error 9\n+#endif\n+#if !__has_include (m2)\n+#error error 13\n+#endif"}, {"sha": "aba5854d357b6b76f05b4abebb15fe16b2426aef", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "patch": "@@ -400,6 +400,9 @@ static const struct builtin_macro builtin_array[] =\n   B(\"__LINE__\",\t\t BT_SPECLINE,      true),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL, true),\n   B(\"__COUNTER__\",\t BT_COUNTER,       true),\n+  /* Make sure to update the list of built-in\n+     function-like macros in traditional.c:\n+     fun_like_macro() when adding more following */\n   B(\"__has_attribute\",\t BT_HAS_ATTRIBUTE, true),\n   B(\"__has_cpp_attribute\", BT_HAS_ATTRIBUTE, true),\n   B(\"__has_builtin\",\t BT_HAS_BUILTIN,   true),"}, {"sha": "b087072c9b4ced7a85a15dc53110d0037ce03dad", "filename": "libcpp/traditional.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "patch": "@@ -330,7 +330,9 @@ fun_like_macro (cpp_hashnode *node)\n {\n   if (cpp_builtin_macro_p (node))\n     return (node->value.builtin == BT_HAS_ATTRIBUTE\n-\t    || node->value.builtin == BT_HAS_BUILTIN);\n+\t    || node->value.builtin == BT_HAS_BUILTIN\n+\t    || node->value.builtin == BT_HAS_INCLUDE\n+\t    || node->value.builtin == BT_HAS_INCLUDE_NEXT);\n   return node->value.macro->fun_like;\n }\n "}]}