{"sha": "211b7533bff68e5dd72e7d75249f470101759d6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExYjc1MzNiZmY2OGU1ZGQ3MmU3ZDc1MjQ5ZjQ3MDEwMTc1OWQ2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-15T07:09:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-15T07:09:04Z"}, "message": "re PR middle-end/90779 (Fortran array initialization in offload regions)\n\n\tPR middle-end/90779\n\t* gimplify.c: Include omp-offload.h and context.h.\n\t(gimplify_bind_expr): Add \"omp declare target\" attributes\n\tto static block scope variables inside of target region or target\n\tfunctions.\n\n\t* c-c++-common/goacc/routine-5.c (func2): Don't expect error for\n\tstatic block scope variable in #pragma acc routine.\n\n\t* testsuite/libgomp.c/pr90779.c: New test.\n\t* testsuite/libgomp.fortran/pr90779.f90: New test.\n\nFrom-SVN: r272322", "tree": {"sha": "2ee472c92423b3830a2afa44855e5bf7fdf62803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee472c92423b3830a2afa44855e5bf7fdf62803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/211b7533bff68e5dd72e7d75249f470101759d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211b7533bff68e5dd72e7d75249f470101759d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211b7533bff68e5dd72e7d75249f470101759d6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211b7533bff68e5dd72e7d75249f470101759d6d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "120a01d160cd47b4276507dc8f6c1ab571a9c006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120a01d160cd47b4276507dc8f6c1ab571a9c006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120a01d160cd47b4276507dc8f6c1ab571a9c006"}], "stats": {"total": 102, "additions": 91, "deletions": 11}, "files": [{"sha": "febee6df6ea287bfb2df70a8e159a9e402f78df2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -1,3 +1,11 @@\n+2019-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/90779\n+\t* gimplify.c: Include omp-offload.h and context.h.\n+\t(gimplify_bind_expr): Add \"omp declare target\" attributes\n+\tto static block scope variables inside of target region or target\n+\tfunctions.\n+\n 2019-06-15  Tom de Vries  <tdevries@suse.de>\n \n \tPR tree-optimization/90009"}, {"sha": "0b25e7100cde48795a7d68f52064b541c1084984", "filename": "gcc/gimplify.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -65,6 +65,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n #include \"dbgcnt.h\"\n+#include \"omp-offload.h\"\n+#include \"context.h\"\n \n /* Hash set of poisoned variables in a bind expr.  */\n static hash_set<tree> *asan_poisoned_variables = NULL;\n@@ -1323,17 +1325,45 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t  struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n \n \t  /* Mark variable as local.  */\n-\t  if (ctx && ctx->region_type != ORT_NONE && !DECL_EXTERNAL (t)\n-\t      && (! DECL_SEEN_IN_BIND_EXPR_P (t)\n-\t\t  || splay_tree_lookup (ctx->variables,\n-\t\t\t\t\t(splay_tree_key) t) == NULL))\n+\t  if (ctx && ctx->region_type != ORT_NONE && !DECL_EXTERNAL (t))\n \t    {\n-\t      if (ctx->region_type == ORT_SIMD\n-\t\t  && TREE_ADDRESSABLE (t)\n-\t\t  && !TREE_STATIC (t))\n-\t\tomp_add_variable (ctx, t, GOVD_PRIVATE | GOVD_SEEN);\n-\t      else\n-\t\tomp_add_variable (ctx, t, GOVD_LOCAL | GOVD_SEEN);\n+\t      if (! DECL_SEEN_IN_BIND_EXPR_P (t)\n+\t\t  || splay_tree_lookup (ctx->variables,\n+\t\t\t\t\t(splay_tree_key) t) == NULL)\n+\t\t{\n+\t\t  if (ctx->region_type == ORT_SIMD\n+\t\t      && TREE_ADDRESSABLE (t)\n+\t\t      && !TREE_STATIC (t))\n+\t\t    omp_add_variable (ctx, t, GOVD_PRIVATE | GOVD_SEEN);\n+\t\t  else\n+\t\t    omp_add_variable (ctx, t, GOVD_LOCAL | GOVD_SEEN);\n+\t\t}\n+\t      /* Static locals inside of target construct or offloaded\n+\t\t routines need to be \"omp declare target\".  */\n+\t      if (TREE_STATIC (t))\n+\t\tfor (; ctx; ctx = ctx->outer_context)\n+\t\t  if ((ctx->region_type & ORT_TARGET) != 0)\n+\t\t    {\n+\t\t      if (!lookup_attribute (\"omp declare target\",\n+\t\t\t\t\t     DECL_ATTRIBUTES (t)))\n+\t\t\t{\n+\t\t\t  tree id = get_identifier (\"omp declare target\");\n+\t\t\t  DECL_ATTRIBUTES (t)\n+\t\t\t    = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t\t\t  varpool_node *node = varpool_node::get (t);\n+\t\t\t  if (node)\n+\t\t\t    {\n+\t\t\t      node->offloadable = 1;\n+\t\t\t      if (ENABLE_OFFLOADING && !DECL_EXTERNAL (t))\n+\t\t\t\t{\n+\t\t\t\t  g->have_offload = true;\n+\t\t\t\t  if (!in_lto_p)\n+\t\t\t\t    vec_safe_push (offload_vars, t);\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t}\n+\t\t      break;\n+\t\t    }\n \t    }\n \n \t  DECL_SEEN_IN_BIND_EXPR_P (t) = 1;"}, {"sha": "ea8cd7892078ee722a011e71ca0f1d74f664c30e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -1,3 +1,9 @@\n+2019-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/90779\n+\t* c-c++-common/goacc/routine-5.c (func2): Don't expect error for\n+\tstatic block scope variable in #pragma acc routine.\n+\n 2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/integer_exponentiation_4.f90: Update test."}, {"sha": "e3fbd6573b83944cb1f56adf57afdec578a1f99e", "filename": "gcc/testsuite/c-c++-common/goacc/routine-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -201,7 +201,7 @@ int\n func2 (int a)\n {\n   extern int vb4;\t/* { dg-error \"directive for use\" } */\n-  static int vb5;\t/* { dg-error \"directive for use\" } */\n+  static int vb5;\n \n   vb4 = a + 1;\n   vb5 = vb4 + 1;"}, {"sha": "bc8647be2137cc9ee9677b95b872b51e05bde394", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -1,3 +1,9 @@\n+2019-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/90779\n+\t* testsuite/libgomp.c/pr90779.c: New test.\n+\t* testsuite/libgomp.fortran/pr90779.f90: New test.\n+\n 2019-06-15  Tom de Vries  <tdevries@suse.de>\n \n \tPR tree-optimization/90009"}, {"sha": "0dd1c105a383b62ef00c8bd4c7300f7e68b5210d", "filename": "libgomp/testsuite/libgomp.c/pr90779.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr90779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr90779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr90779.c?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/90779 */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  for (i = 0; i < 2; ++i)\n+    #pragma omp target map(from: j)\n+    {\n+      static int k = 5;\n+      j = ++k;\n+    }\n+  if (j != 7)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "a6d687abfe622eeb79a2c83940fccffa0b2d6e4b", "filename": "libgomp/testsuite/libgomp.fortran/pr90779.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90779.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211b7533bff68e5dd72e7d75249f470101759d6d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90779.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90779.f90?ref=211b7533bff68e5dd72e7d75249f470101759d6d", "patch": "@@ -0,0 +1,12 @@\n+! PR middle-end/90779\n+\n+program pr90779\n+  implicit none\n+  integer :: v(4), i\n+\n+  !$omp target map(from:v)\n+    v(:) = (/ (i, i=1,4) /)\n+  !$omp end target\n+\n+  if (any (v .ne. (/ (i, i=1,4) /))) stop 1\n+end program"}]}