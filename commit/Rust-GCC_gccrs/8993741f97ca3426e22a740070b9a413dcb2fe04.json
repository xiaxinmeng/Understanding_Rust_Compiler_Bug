{"sha": "8993741f97ca3426e22a740070b9a413dcb2fe04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5Mzc0MWY5N2NhMzQyNmUyMmE3NDAwNzBiOWE0MTNkY2IyZmUwNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-01T16:18:25Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-01T17:50:50Z"}, "message": "GIMPLE coversions for ArrayIndexExpr and Arrays with values\n\nThis compiles the ArrayIndexExpressions and Arrays such as:\n  let x = [1,2,3];\n  let a = x[0];\n\nAddresses: #55", "tree": {"sha": "5d7fb01e8c3a3bbb350653fb3f71e7e1584012c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7fb01e8c3a3bbb350653fb3f71e7e1584012c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8993741f97ca3426e22a740070b9a413dcb2fe04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8993741f97ca3426e22a740070b9a413dcb2fe04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8993741f97ca3426e22a740070b9a413dcb2fe04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8993741f97ca3426e22a740070b9a413dcb2fe04/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f491614f6e4e2dea93b534c063c142e8de55bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f491614f6e4e2dea93b534c063c142e8de55bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f491614f6e4e2dea93b534c063c142e8de55bb3"}], "stats": {"total": 149, "additions": 143, "deletions": 6}, "files": [{"sha": "541acd00d8f9238ce777f4b9ce8e12f3b0869f55", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -466,7 +466,17 @@ void\n TypeResolution::visit (AST::ArrayExpr &expr)\n {\n   auto elements = expr.get_internal_elements ();\n+\n+  auto before = typeBuffer.size ();\n   elements->accept_vis (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"unable to determine type for ArrayExpr\");\n+      return;\n+    }\n+\n+  expr.set_inferred_type (typeBuffer.back ());\n }\n \n void"}, {"sha": "49710419266b63bd950134158681c28f5ebf25a2", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -1000,6 +1000,10 @@ class ArrayExpr : public ExprWithoutBlock\n \n   Location locus;\n \n+  // this is a reference to what the inferred type is based on\n+  // this init expression\n+  Type *inferredType;\n+\n public:\n   std::string as_string () const override;\n \n@@ -1050,6 +1054,9 @@ class ArrayExpr : public ExprWithoutBlock\n \n   ArrayElems *get_internal_elements () { return internal_elements.get (); };\n \n+  Type *get_inferred_type () { return inferredType; }\n+  void set_inferred_type (Type *type) { inferredType = type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "089aaeb5470b71e3033fb0bebc2a4185ce67d19a", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -576,6 +576,10 @@ class ArrayType : public TypeNoBounds\n \n   Type *get_element_type () { return elem_type.get (); }\n \n+  Expr *get_size_expr () { return size.get (); }\n+\n+  Location &get_locus () { return locus; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "2dbce169f040999b71e47a4401edda37cb0872ef", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 113, "deletions": 5, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -503,19 +503,102 @@ Compilation::visit (AST::CompoundAssignmentExpr &expr)\n void\n Compilation::visit (AST::GroupedExpr &expr)\n {}\n-// void Compilation::visit(ArrayElems& elems) {}\n+\n void\n Compilation::visit (AST::ArrayElemsValues &elems)\n-{}\n+{\n+  std::vector< ::Bexpression *> elements;\n+\n+  bool failed = false;\n+  elems.iterate ([&] (AST::Expr *expr) mutable -> bool {\n+    Bexpression *value = nullptr;\n+    VISIT_POP (expr.get_locus_slow (), expr, value, exprs);\n+    if (value == nullptr)\n+      {\n+\trust_fatal_error (expr->get_locus_slow (),\n+\t\t\t  \"failed to compile value to array initialiser\");\n+\treturn false;\n+      }\n+    elements.push_back (value);\n+    return true;\n+  });\n+\n+  // nothing to do when its failed\n+  if (failed)\n+    return;\n+\n+  arrayConsStack.push_back (elements);\n+}\n+\n void\n Compilation::visit (AST::ArrayElemsCopied &elems)\n {}\n+\n void\n Compilation::visit (AST::ArrayExpr &expr)\n-{}\n+{\n+  translatedType = nullptr;\n+  expr.get_inferred_type ()->accept_vis (*this);\n+  if (translatedType == nullptr)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"failed to compile array type for ArrayExpr\");\n+      return;\n+    }\n+\n+  ::Btype *compiledType = translatedType;\n+  translatedType = nullptr;\n+\n+  auto before = arrayConsStack.size ();\n+  expr.get_internal_elements ()->accept_vis (*this);\n+  if (arrayConsStack.size () <= before)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"failed to compile the array constructor\");\n+      return;\n+    }\n+  std::vector< ::Bexpression *> initializer = arrayConsStack.back ();\n+  arrayConsStack.pop_back ();\n+\n+  std::vector<unsigned long> indexes;\n+  for (unsigned long i = 0; i < initializer.size (); ++i)\n+    indexes.push_back (i);\n+\n+  Bexpression *cons\n+    = backend->array_constructor_expression (compiledType, indexes, initializer,\n+\t\t\t\t\t     expr.get_locus_slow ());\n+  exprs.push_back (cons);\n+}\n+\n void\n Compilation::visit (AST::ArrayIndexExpr &expr)\n-{}\n+{\n+  Bexpression *arrayExpr = nullptr;\n+  VISIT_POP (expr.get_array_expr ()->get_locus_slow (), expr.get_array_expr (),\n+\t     arrayExpr, exprs);\n+  if (arrayExpr == nullptr)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"failed to compile value to array expression reference\");\n+      return;\n+    }\n+\n+  Bexpression *indexExpr = nullptr;\n+  VISIT_POP (expr.get_index_expr ()->get_locus_slow (), expr.get_index_expr (),\n+\t     indexExpr, exprs);\n+  if (indexExpr == nullptr)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"failed to compile value to array index expression\");\n+      return;\n+    }\n+\n+  Bexpression *indexExpression\n+    = backend->array_index_expression (arrayExpr, indexExpr,\n+\t\t\t\t       expr.get_locus_slow ());\n+  exprs.push_back (indexExpression);\n+}\n+\n void\n Compilation::visit (AST::TupleExpr &expr)\n {}\n@@ -1376,9 +1459,34 @@ Compilation::visit (AST::RawPointerType &type)\n void\n Compilation::visit (AST::ReferenceType &type)\n {}\n+\n void\n Compilation::visit (AST::ArrayType &type)\n-{}\n+{\n+  Btype *elementType;\n+  translatedType = nullptr;\n+  type.get_element_type ()->accept_vis (*this);\n+  if (translatedType == nullptr)\n+    {\n+      rust_error_at (type.get_locus (),\n+\t\t     \"Failed to compile element type for array\");\n+      return;\n+    }\n+  elementType = translatedType;\n+\n+  Bexpression *length = nullptr;\n+  VISIT_POP (type.get_size_expr ()->get_locus_slow (), type.get_size_expr (),\n+\t     length, exprs);\n+  if (length == nullptr)\n+    {\n+      rust_error_at (type.get_size_expr ()->get_locus_slow (),\n+\t\t     \"failed to size for array type\");\n+      return;\n+    }\n+\n+  translatedType = backend->array_type (elementType, length);\n+}\n+\n void\n Compilation::visit (AST::SliceType &type)\n {}"}, {"sha": "88c83187a0dea1bfec94c2ddc40b031ed492bd15", "filename": "gcc/rust/backend/rust-compile.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fbackend%2Frust-compile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Frust%2Fbackend%2Frust-compile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.h?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -243,7 +243,8 @@ class Compilation : public AST::ASTVisitor\n   std::vector< ::Bexpression *> exprs;\n   std::vector< ::Bstatement *> stmts;\n   std::vector< ::Bvariable *> varBuffer;\n-  std::vector<AST::StructStruct*> structBuffer;\n+  std::vector<AST::StructStruct *> structBuffer;\n+  std::vector<std::vector< ::Bexpression *> > arrayConsStack;\n \n   // careful these are the vectors we pass into the GCC middle-end\n   std::vector< ::Btype *> type_decls;"}, {"sha": "f7e66af7a266179f8bad20292b0c6908b506c70b", "filename": "gcc/testsuite/rust.test/compilable/arrays1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8993741f97ca3426e22a740070b9a413dcb2fe04/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays1.rs?ref=8993741f97ca3426e22a740070b9a413dcb2fe04", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let xy = [6, 7, 8];\n+\n+    let a = xs[0];\n+    let b = xy[2];\n+}"}]}