{"sha": "77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjNGQ2YzA2YTgzZjdkODY0NzFiZWZiNzZhMWJlNDMzZGMyZTNhMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-18T23:18:36Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-18T23:18:36Z"}, "message": "c-decl.c (check_for_loop_decls): New function.\n\n\t* c-decl.c (check_for_loop_decls): New function.\n\t* c-parse.in (for_init_stmt): New.\n\t(select_or_iter_stmt): Use for_init_stmt.\n\t* c-tree.h (check_for_loop_decls): New declaration.\n\ntestsuite:\n\t* gcc.dg/c90-fordecl-1.c, gcc.dg/c99-fordecl-1.c,\n\tgcc.dg/c99-fordecl-2.c: New tests.\n\nFrom-SVN: r37549", "tree": {"sha": "b4a745279c572b08d93715d1c76a506422218e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a745279c572b08d93715d1c76a506422218e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce7d4fc8dd42a1885bc22d1c720c6c94314acad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7d4fc8dd42a1885bc22d1c720c6c94314acad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7d4fc8dd42a1885bc22d1c720c6c94314acad1"}], "stats": {"total": 162, "additions": 153, "deletions": 9}, "files": [{"sha": "e80a4892ed46645ba42b964609c16c07d89baf38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -1,3 +1,10 @@\n+2000-11-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (check_for_loop_decls): New function.\n+\t* c-parse.in (for_init_stmt): New.\n+\t(select_or_iter_stmt): Use for_init_stmt.\n+\t* c-tree.h (check_for_loop_decls): New declaration.\n+\n 2000-11-18  Neil Booth  <neilb@earthling.net>\n \n \t* cppinit.c: Update comments."}, {"sha": "d97419d2e99f239dadb347c3038320b9f642c6a9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -6924,6 +6924,55 @@ c_expand_body (fndecl, nested_p)\n       \n }\n \f\n+/* Check the declarations given in a for-loop for satisfying the C99\n+   constraints.  */\n+void\n+check_for_loop_decls ()\n+{\n+  tree t;\n+\n+  if (!flag_isoc99)\n+    {\n+      /* If we get here, declarations have been used in a for loop without\n+\t the C99 for loop scope.  This doesn't make much sense, so don't\n+\t allow it.  */\n+      error (\"`for' loop initial declaration used outside C99 mode\");\n+      return;\n+    }\n+  /* C99 subclause 6.8.5 paragraph 3:\n+\n+       [#3]  The  declaration  part  of  a for statement shall only\n+       declare identifiers for objects having storage class auto or\n+       register.\n+\n+     It isn't clear whether, in this sentence, \"identifiers\" binds to\n+     \"shall only declare\" or to \"objects\" - that is, whether all identifiers\n+     declared must be identifiers for objects, or whether the restriction\n+     only applies to those that are.  (A question on this in comp.std.c\n+     in November 2000 received no answer.)  We implement the strictest\n+     interpretation, to avoid creating an extension which later causes\n+     problems.  */\n+\n+  for (t = gettags (); t; t = TREE_CHAIN (t))\n+    {\n+      if (TREE_PURPOSE (t) != 0)\n+\terror (\"`%s %s' declared in `for' loop initial declaration\",\n+\t       (TREE_CODE (TREE_VALUE (t)) == RECORD_TYPE ? \"struct\"\n+\t\t: TREE_CODE (TREE_VALUE (t)) == UNION_TYPE ? \"union\"\n+\t\t: \"enum\"),\n+\t       IDENTIFIER_POINTER (TREE_PURPOSE (t)));\n+    }\n+  for (t = getdecls (); t; t = TREE_CHAIN (t))\n+    {\n+      if (TREE_CODE (t) != VAR_DECL && DECL_NAME (t))\n+\terror_with_decl (t, \"declaration of non-variable `%s' in `for' loop initial declaration\");\n+      else if (TREE_STATIC (t))\n+\terror_with_decl (t, \"declaration of static variable `%s' in `for' loop initial declaration\");\n+      else if (DECL_EXTERNAL (t))\n+\terror_with_decl (t, \"declaration of `extern' variable `%s' in `for' loop initial declaration\");\n+    }\n+}\n+\f\n /* Save and restore the variables in this file and elsewhere\n    that keep track of the progress of compilation of the current function.\n    Used for nested functions.  */"}, {"sha": "517b488c9d9a4849605525d42fe7f7428938a369", "filename": "gcc/c-parse.in", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -1868,26 +1868,32 @@ select_or_iter_stmt:\n \t| do_stmt_start error\n  \t\t{ }\n \t| FOR\n-\t  '(' xexpr ';'\n-\t\t{ stmt_count++;\n-\t\t  $3 = build_stmt (EXPR_STMT, $3); \n-\t\t  $<ttype>$ = build_stmt (FOR_STMT, $3, NULL_TREE,\n+\t\t{ $<ttype>$ = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,\n \t\t\t\t\t  NULL_TREE, NULL_TREE);\n-\t\t  add_stmt ($<ttype>$);\n-\t\t}\n+\t\t  add_stmt ($<ttype>$); } \n+\t  '(' for_init_stmt\n+\t\t{ stmt_count++;\n+\t\t  RECHAIN_STMTS ($<ttype>2, FOR_INIT_STMT ($<ttype>2)); }\n \t  xexpr ';'\n-                { FOR_COND ($<ttype>5) = $6; }\n+                { FOR_COND ($<ttype>2) = $6; }\n \t  xexpr ')'\n-\t\t{ FOR_EXPR ($<ttype>5) = $9; }\n+\t\t{ FOR_EXPR ($<ttype>2) = $9; }\n \t  c99_block_lineno_labeled_stmt\n-                { RECHAIN_STMTS ($<ttype>5, FOR_BODY ($<ttype>5)); }\n+                { RECHAIN_STMTS ($<ttype>2, FOR_BODY ($<ttype>2)); }\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n \t\t  $<ttype>$ = c_start_case ($3); }\n \t  c99_block_lineno_labeled_stmt\n                 { c_finish_case (); }\n \t;\n \n+for_init_stmt:\n+\t  xexpr ';'\n+\t\t{ add_stmt (build_stmt (EXPR_STMT, $1)); } \n+\t| decl\n+\t\t{ check_for_loop_decls (); }\n+\t;\n+\n /* Parse a single real statement, not including any labels.  */\n stmt:\n \t  compstmt"}, {"sha": "669c89b7d1bdd937d64c6840ac5b44d8df81f72f", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -170,6 +170,7 @@ extern tree build_enumerator                    PARAMS ((tree, tree));\n \t\t\t  ((VOLATILE_P) ? TYPE_QUAL_VOLATILE : 0))\n extern int  c_decode_option                     PARAMS ((int, char **));\n extern void c_mark_varargs                      PARAMS ((void));\n+extern void check_for_loop_decls                PARAMS ((void));\n extern tree check_identifier                    PARAMS ((tree, tree));\n extern void clear_parm_order                    PARAMS ((void));\n extern tree combine_parm_decls                  PARAMS ((tree, tree, int));"}, {"sha": "78eb81f8c6af86aa55f2dbeb42f2945777dce2e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -1,3 +1,8 @@\n+2000-11-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-fordecl-1.c, gcc.dg/c99-fordecl-1.c,\n+\tgcc.dg/c99-fordecl-2.c: New tests.\n+\n 2000-11-18  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/zerolen-1.c: Rename from 20001115-1.c."}, {"sha": "8e48dd61752de006a70ffe62a894fe2d84fdf3ca", "filename": "gcc/testsuite/gcc.dg/c90-fordecl-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -0,0 +1,13 @@\n+/* Test for C99 declarations in for loops - rejection in C90 mode.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  int j = 0;\n+  for (int i = 1; i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += i;\n+  /* { dg-error \"parse|decl\" \"declaration in for loop\" { target *-*-* } 10 } */\n+}"}, {"sha": "faaab1e9539f51441dafeead6063b6450653cb60", "filename": "gcc/testsuite/gcc.dg/c99-fordecl-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-1.c?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -0,0 +1,35 @@\n+/* Test for C99 declarations in for loops.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  int j = 0;\n+  int i = -1;\n+  for (int i = 1; i <= 10; i++)\n+    j += i;\n+  if (j != 55)\n+    abort ();\n+  if (i != -1)\n+    abort ();\n+  j = 0;\n+  for (auto int i = 1; i <= 10; i++)\n+    j += i;\n+  if (j != 55)\n+    abort ();\n+  if (i != -1)\n+    abort ();\n+  j = 0;\n+  for (register int i = 1; i <= 10; i++)\n+    j += i;\n+  if (j != 55)\n+    abort ();\n+  if (i != -1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "0ef11f612252999a20ce0b85020b1016a1ec943c", "filename": "gcc/testsuite/gcc.dg/c99-fordecl-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4d6c06a83f7d86471befb76a1be433dc2e3a3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c?ref=77c4d6c06a83f7d86471befb76a1be433dc2e3a3", "patch": "@@ -0,0 +1,28 @@\n+/* Test for C99 declarations in for loops.  Test constraints.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  /* See comments in check_for_loop_decls (c-decl.c) for the presumptions\n+     behind these tests.  */\n+  int j = 0;\n+  for (int i = 1, bar (void); i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += i;\n+  /* { dg-error \"bar\" \"function in for loop\" { target *-*-* } 12 } */\n+  for (static int i = 1; i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += i;\n+  /* { dg-error \"static\" \"static in for loop\" { target *-*-* } 15 } */\n+  for (extern int i; j <= 500; j++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += 5;\n+  /* { dg-error \"extern\" \"extern in for loop\" { target *-*-* } 18 } */\n+  for (enum { FOO } i = FOO; i < 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += i;\n+  /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } 21 } */\n+  for (enum BAR { FOO } i = FOO; i < 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    j += i;\n+  /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } 24 } */\n+  /* { dg-error \"BAR\" \"enum tag in for loop\" { target *-*-* } 24 } */\n+}"}]}