{"sha": "41a7b9484a39657deab7cac7092c2bf634a39365", "node_id": "C_kwDOANBUbNoAKDQxYTdiOTQ4NGEzOTY1N2RlYWI3Y2FjNzA5MmMyYmY2MzRhMzkzNjU", "commit": {"author": {"name": "Etienne Servais", "email": "servais@adacore.com", "date": "2021-12-03T14:13:07Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:35Z"}, "message": "[Ada] Fix typo in comments found running aspell\n\ngcc/ada/\n\n\t* atree.adb: Fix typo.\n\t* einfo.ads: Likewise.\n\t* exp_aggr.adb: Likewise.\n\t* exp_ch6.adb: Likewise.\n\t* exp_ch7.adb: Likewise.\n\t* exp_ch9.adb: Likewise.\n\t* exp_prag.adb: Likewise.\n\t* exp_unst.adb: Likewise.\n\t* exp_unst.ads: Likewise.\n\t* exp_util.adb: Likewise.\n\t* par-endh.adb: Likewise.\n\t* par.adb: Likewise.\n\t* restrict.adb: Likewise.\n\t* sem.ads: Likewise.\n\t* sem_ch4.adb: Likewise.\n\t* sem_ch5.adb: Likewise.\n\t* sem_ch6.adb: Likewise.\n\t* sem_ch8.adb: Likewise.\n\t* sem_ch12.adb: Likewise.\n\t* sem_ch13.adb: Likewise.\n\t* sem_dim.adb: Likewise.\n\t* sem_elab.adb: Likewise.\n\t* sem_prag.adb: Likewise.\n\t* sem_res.adb: Likewise.\n\t* sem_util.adb: Likewise.\n\t* sem_util.ads: Likewise.\n\t* sinfo.ads: Likewise.\n\t* sprint.adb: Likewise.\n\t* urealp.adb: Likewise.", "tree": {"sha": "2f19782ff911aa4ee3a3473e9f4907310eec6686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f19782ff911aa4ee3a3473e9f4907310eec6686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a7b9484a39657deab7cac7092c2bf634a39365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a7b9484a39657deab7cac7092c2bf634a39365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a7b9484a39657deab7cac7092c2bf634a39365", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a7b9484a39657deab7cac7092c2bf634a39365/comments", "author": {"login": "vser1", "id": 8308457, "node_id": "MDQ6VXNlcjgzMDg0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8308457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vser1", "html_url": "https://github.com/vser1", "followers_url": "https://api.github.com/users/vser1/followers", "following_url": "https://api.github.com/users/vser1/following{/other_user}", "gists_url": "https://api.github.com/users/vser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vser1/subscriptions", "organizations_url": "https://api.github.com/users/vser1/orgs", "repos_url": "https://api.github.com/users/vser1/repos", "events_url": "https://api.github.com/users/vser1/events{/privacy}", "received_events_url": "https://api.github.com/users/vser1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f26ff11b688e3cec00da85b13f6f33e23fc7410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f26ff11b688e3cec00da85b13f6f33e23fc7410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f26ff11b688e3cec00da85b13f6f33e23fc7410"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "b4a33cb479fca735994cb4b325069dd7b170a7fa", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -93,7 +93,7 @@ package body Atree is\n    --------------------------\n \n    --  The Small_Paren_Count field has range 0 .. 3. If the Paren_Count is\n-   --  in the range 0 .. 2, then it is stoed as Small_Paren_Count. Otherwise,\n+   --  in the range 0 .. 2, then it is stored as Small_Paren_Count. Otherwise,\n    --  Small_Paren_Count = 3, and the actual Paren_Count is stored in the\n    --  Paren_Counts table.\n    --"}, {"sha": "a7a40fc66e9c6fd0781c6de2f75bfc30f02f44a5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -3745,7 +3745,7 @@ package Einfo is\n \n --    No_Dynamic_Predicate_On_Actual\n --       Defined in discrete types. Set for generic formal types that are used\n---       in loops and quantified expressions. The corresponing actual cannot\n+--       in loops and quantified expressions. The corresponding actual cannot\n --       have dynamic predicates.\n \n --    No_Pool_Assigned [root type only]"}, {"sha": "89f2ce653380142483bc2de94d58ebcf521876a0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -169,9 +169,9 @@ package body Exp_Aggr is\n    --  Subsidiary to the expansion of array and record aggregates. Generate\n    --  part of the necessary code to finalize a transient component. Aggr is\n    --  the related aggregate. Fin_Clear is the finalization call used to clean\n-   --  up the transient component. Hook_Clear is the hook reset statment. Stmts\n-   --  is the initialization statement list for the component. All generated\n-   --  code is added to Stmts.\n+   --  up the transient component. Hook_Clear is the hook reset statement.\n+   --  Stmts is the initialization statement list for the component. All\n+   --  generated code is added to Stmts.\n \n    procedure Sort_Case_Table (Case_Table : in out Case_Table_Type);\n    --  Sort the Case Table using the Lower Bound of each Choice as the key.\n@@ -6932,7 +6932,7 @@ package body Exp_Aggr is\n \n       --  In the remaining cases the aggregate appears in the RHS of an\n       --  assignment, which may be part of the expansion of an object\n-      --  delaration. If the aggregate is an actual in a call, itself\n+      --  declaration. If the aggregate is an actual in a call, itself\n       --  possibly in a RHS, building it in the target is not possible.\n \n       elsif Maybe_In_Place_OK\n@@ -7271,7 +7271,7 @@ package body Exp_Aggr is\n       --  overestimate if a filter is present, but is a safe approximation.\n       --  If bounds are dynamic the aggregate is created in two passes, and\n       --  the first generates a loop for the sole purpose of computing the\n-      --  number of elements that will be generated on the seocnd pass.\n+      --  number of elements that will be generated on the second pass.\n \n       procedure Expand_Iterated_Component (Comp : Node_Id);\n       --  Handle iterated_component_association and iterated_Element\n@@ -7495,7 +7495,7 @@ package body Exp_Aggr is\n                    Iterator_Specification => Iterator_Specification (Comp));\n \n             else\n-               --  Loop_Parameter_Specifcation is parsed with a choice list.\n+               --  Loop_Parameter_Specification is parsed with a choice list.\n                --  where the range is the first (and only) choice.\n \n                L_Range := Relocate_Node (First (Discrete_Choices (Comp)));"}, {"sha": "09e7477451586f823bf7f3206ed254f7bcfa4579", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -2817,7 +2817,7 @@ package body Exp_Ch6 is\n \n       procedure Check_Subprogram_Variant;\n       --  Emit a call to the internally generated procedure with checks for\n-      --  aspect Subprogrgram_Variant, if present and enabled.\n+      --  aspect Subprogram_Variant, if present and enabled.\n \n       function Inherited_From_Formal (S : Entity_Id) return Entity_Id;\n       --  Within an instance, a type derived from an untagged formal derived"}, {"sha": "367bd3d54ed2a9a1f037f69bbf3e649e4d6ea1de", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -4059,7 +4059,7 @@ package body Exp_Ch7 is\n          end if;\n \n          --  Call _postconditions when no general finalization exceptions have\n-         --  occured taking care to enable the postconditions and save any\n+         --  occurred taking care to enable the postconditions and save any\n          --  exception occurrences.\n \n          --  Generate:"}, {"sha": "b0f814810051aef5304533c38be3970f7bb8f9bf", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -2937,7 +2937,7 @@ package body Exp_Ch9 is\n    --             Desired_Comp : Comp_Type := Expected_Comp;\n    --             Comp         : Comp_Type renames Desired_Comp;\n    --\n-   --             <original delarations after the object renaming declaration\n+   --             <original declarations after the object renaming declaration\n    --              of Comp>\n    --\n    --          begin\n@@ -2977,7 +2977,7 @@ package body Exp_Ch9 is\n    --                              (_Object.Comp'Address));\n    --       Comp          : Comp_Type renames Expected_Comp;\n    --\n-   --       <original delarations after the object renaming declaration of\n+   --       <original declarations after the object renaming declaration of\n    --        Comp>\n    --\n    --    begin"}, {"sha": "f19eedfaad7ae21e1f4536ec78f64695bad9834c", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -125,7 +125,7 @@ package body Exp_Prag is\n \n    begin\n       --  Suppress the expansion of an ignored assertion pragma. Such a pragma\n-      --  should not be transformed into a null statment because:\n+      --  should not be transformed into a null statement because:\n       --\n       --    * The pragma may be part of the rep item chain of a type, in which\n       --      case rewriting it will destroy the chain."}, {"sha": "dcae4b31222c8dce9df6a2e9c6a6c9ebab1b74f3", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1755,7 +1755,7 @@ package body Exp_Unst is\n \n                      procedure Add_Form_To_Spec (F : Entity_Id; S : Node_Id);\n                      --  S is an N_Function/Procedure_Specification node, and F\n-                     --  is the new entity to add to this subprogramn spec as\n+                     --  is the new entity to add to this subprogram spec as\n                      --  the last Extra_Formal.\n \n                      ----------------------\n@@ -2206,7 +2206,7 @@ package body Exp_Unst is\n \n          begin\n             --  Ignore type references, these are implicit references that do\n-            --  not need rewriting (e.g. the appearence in a conversion).\n+            --  not need rewriting (e.g. the appearance in a conversion).\n             --  Also ignore if no reference was specified or if the rewriting\n             --  has already been done (this can happen if the N_Identifier\n             --  occurs more than one time in the tree). Also ignore references"}, {"sha": "39ab1286d7069dae59f60dd15c527a0bcd87ab60", "filename": "gcc/ada/exp_unst.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_unst.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_unst.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.ads?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -636,7 +636,7 @@ package Exp_Unst is\n       --  the subprogram is declared but not actually referenced. We remove\n       --  such subprograms from the tree, which simplifies our task, because\n       --  we don't have to worry about e.g. uplevel references from such an\n-      --  unreferenced subpogram, which might require (useless) activation\n+      --  unreferenced subprogram, which might require (useless) activation\n       --  records to be created. This is computed by setting the outer level\n       --  subprogram (Subp itself) as reachable, and then doing a transitive\n       --  closure following all calls.\n@@ -669,7 +669,7 @@ package Exp_Unst is\n       --  uplevel referenced. It contains both objects (which will be put in\n       --  the corresponding AREC activation record), and types. The types are\n       --  not put in the AREC activation record, but referenced bounds (i.e.\n-      --  generated _FIRST and _LAST entites, and formal parameters) will be\n+      --  generated _FIRST and _LAST entities, and formal parameters) will be\n       --  in the list in their own right.\n \n       Last : SI_Type;"}, {"sha": "99372e39fcfeb78992fa07293f2a40e7373fa8ec", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1422,7 +1422,7 @@ package body Exp_Util is\n       --  Add a runtime check to verify assertion expression DIC_Expr of\n       --  inherited pragma DIC_Prag. This routine applies class-wide pre-\n       --  and postcondition-like runtime semantics to the check. Expr is\n-      --  the assertion expression after substitition has been performed\n+      --  the assertion expression after substitution has been performed\n       --  (via Replace_References). All generated code is added to list Stmts.\n \n       procedure Add_Inherited_DICs"}, {"sha": "612f16dc40dba18feefb1d4e64cea448cca95f3f", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -732,7 +732,7 @@ package body Endh is\n       --       ...\n       --    end My_Label;\n \n-      --  This is the case where we want to use the entry in the suspicous\n+      --  This is the case where we want to use the entry in the suspicious\n       --  label table to flag the semicolon saying it should be a colon.\n \n       --  Label_OK will be false because the label does not match (we have"}, {"sha": "ad902bf36ec00230da5c12b7f8be73b3f460cd63", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -484,11 +484,11 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  This field is used to provide the name of the construct being parsed\n       --  and indirectly its kind. For loops and blocks, the field contains the\n       --  source name or the generated one. For package specifications, bodies,\n-      --  subprogram specifications and bodies the field holds the correponding\n-      --  program unit name. For task declarations and bodies, protected types\n-      --  and bodies, and accept statements the field hold the name of the type\n-      --  or operation. For if-statements, case-statements, return statements,\n-      --  and selects, the field is initialized to Error.\n+      --  subprogram specifications and bodies the field holds the\n+      --  corresponding program unit name. For task declarations and bodies,\n+      --  protected types and bodies, and accept statements the field hold the\n+      --  name of the type or operation. For if-statements, case-statements,\n+      --  return statements, and selects, the field is initialized to Error.\n \n       --  Note: this is a bit of an odd (mis)use of Error, since there is no\n       --  Error, but we use this value as a place holder to indicate that it\n@@ -564,7 +564,7 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    -- Table for Handling Suspicious Labels --\n    ------------------------------------------\n \n-   --  This is a special data structure which is used to deal very spefifically\n+   --  This is a special data structure which is used to deal very specifically\n    --  with the following error case\n \n    --     label;"}, {"sha": "cc5d33a0843d2416ae03c8cc1884478796b409ff", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -71,12 +71,12 @@ package body Restrict is\n \n    No_Specification_Of_Aspect_Warning : array (Aspect_Id) of Boolean :=\n                                           (others => True);\n-   --  An entry in this array is set False in reponse to a previous call to\n-   --  Set_No_Speficiation_Of_Aspect for pragmas in the main unit that\n+   --  An entry in this array is set False in response to a previous call to\n+   --  Set_No_Specification_Of_Aspect for pragmas in the main unit that\n    --  specify Warning as False. Once set False, an entry is never reset.\n \n    No_Specification_Of_Aspect_Set : Boolean := False;\n-   --  Set True if any entry of No_Specifcation_Of_Aspects has been set True.\n+   --  Set True if any entry of No_Specification_Of_Aspects has been set True.\n    --  Once set True, this is never turned off again.\n \n    No_Use_Of_Attribute : array (Attribute_Id) of Source_Ptr :="}, {"sha": "e0c3ac7996ac2ec1510e9f6a73f51e5c9470dd4c", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -503,7 +503,7 @@ package Sem is\n       --  Save contents of Check_Policy_List on entry to restore on exit. The\n       --  Check_Policy pragmas are chained with Check_Policy_List pointing to\n       --  the most recent entry. This list is searched starting here, so that\n-      --  the search finds the most recent appicable entry. When we restore\n+      --  the search finds the most recent applicable entry. When we restore\n       --  Check_Policy_List on exit from the scope, the effect is to remove\n       --  all entries set in the scope being exited.\n "}, {"sha": "9010410a87f5fc773d59961d163ca9aa39a462d3", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -3192,7 +3192,7 @@ package body Sem_Ch12 is\n \n    <<Leave>>\n       if Has_Aspects (N) then\n-         --  Unclear that any other aspects may appear here, snalyze them\n+         --  Unclear that any other aspects may appear here, analyze them\n          --  for completion, given that the grammar allows their appearance.\n \n          Analyze_Aspect_Specifications (N, Pack_Id);"}, {"sha": "81735328cab7f20e202e8a5705053eff3896540b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -3670,7 +3670,7 @@ package body Sem_Ch13 is\n \n                begin\n                   --  When aspect Abstract_State appears on a generic package,\n-                  --  it is propageted to the package instance. The context in\n+                  --  it is propagated to the package instance. The context in\n                   --  this case is the instance spec.\n \n                   if Nkind (Context) = N_Package_Instantiation then\n@@ -3903,7 +3903,7 @@ package body Sem_Ch13 is\n \n                begin\n                   --  When aspect Initial_Condition appears on a generic\n-                  --  package, it is propageted to the package instance. The\n+                  --  package, it is propagated to the package instance. The\n                   --  context in this case is the instance spec.\n \n                   if Nkind (Context) = N_Package_Instantiation then\n@@ -3951,7 +3951,7 @@ package body Sem_Ch13 is\n \n                begin\n                   --  When aspect Initializes appears on a generic package,\n-                  --  it is propageted to the package instance. The context\n+                  --  it is propagated to the package instance. The context\n                   --  in this case is the instance spec.\n \n                   if Nkind (Context) = N_Package_Instantiation then\n@@ -7404,7 +7404,7 @@ package body Sem_Ch13 is\n                else False); -- can't happen\n             --  For X'Size, X can be a type or object; for X'Value_Size,\n             --  X can be a type. Note that we already checked that 'Size\n-            --  can be specified only for a first subytype.\n+            --  can be specified only for a first subtype.\n \n          begin\n             FOnly := True;\n@@ -13675,7 +13675,7 @@ package body Sem_Ch13 is\n       function Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item\n         (Rep_Item : Node_Id) return Boolean;\n       --  This routine checks if Rep_Item is either a pragma or an aspect\n-      --  specification node whose correponding pragma (if any) is present in\n+      --  specification node whose corresponding pragma (if any) is present in\n       --  the Rep Item chain of the entity it has been specified to.\n \n       --------------------------------------------------"}, {"sha": "bf453f2a5dbeba8135dd7cce68d2c244321412f9", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1497,7 +1497,7 @@ package body Sem_Ch4 is\n             while Present (Form) and then Present (Act) loop\n                --  Check whether the formal is aliased and if the accessibility\n                --  level of the actual is deeper than the accessibility level\n-               --  of the enclosing subprogam to which the current return\n+               --  of the enclosing subprogram to which the current return\n                --  statement applies.\n \n                --  Should we be checking Is_Entity_Name on Act? Won't this miss"}, {"sha": "78a38d6b1a06bf6a796933ac4eed63b016fe308f", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -142,7 +142,7 @@ package body Sem_Ch5 is\n       --  If the right-hand side of an assignment statement is a build-in-place\n       --  call we cannot build in place, so we insert a temp initialized with\n       --  the call, and transform the assignment statement to copy the temp.\n-      --  Transform_BIP_Assignment does the tranformation, and\n+      --  Transform_BIP_Assignment does the transformation, and\n       --  Should_Transform_BIP_Assignment determines whether we should.\n       --  The same goes for qualified expressions and conversions whose\n       --  operand is such a call.\n@@ -2906,8 +2906,8 @@ package body Sem_Ch5 is\n       procedure Check_Predicate_Use (T : Entity_Id);\n       --  Diagnose Attempt to iterate through non-static predicate. Note that\n       --  a type with inherited predicates may have both static and dynamic\n-      --  forms. In this case it is not sufficent to check the static predicate\n-      --  function only, look for a dynamic predicate aspect as well.\n+      --  forms. In this case it is not sufficient to check the static\n+      --  predicate function only, look for a dynamic predicate aspect as well.\n \n       procedure Process_Bounds (R : Node_Id);\n       --  If the iteration is given by a range, create temporaries and\n@@ -3560,7 +3560,7 @@ package body Sem_Ch5 is\n                      Set_Is_Null_Loop (Loop_Nod);\n                      Null_Range := True;\n \n-                     --  Suppress other warnigns about the body of the loop, as\n+                     --  Suppress other warnings about the body of the loop, as\n                      --  it will never execute.\n                      Set_Suppress_Loop_Warnings (Loop_Nod);\n                   end if;"}, {"sha": "bd1bb5065d2eca635766cd2558709338db622091", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -5040,7 +5040,7 @@ package body Sem_Ch6 is\n       --  object representing the minimum of the accessibility level value that\n       --  is passed in and the accessibility level of the callee's parameter\n       --  and locals and use it in the case of a call to a nested subprogram.\n-      --  This generated object is refered to as a \"minimum accessiblity\n+      --  This generated object is referred to as a \"minimum accessibility\n       --  level.\"\n \n       if Present (Spec_Id) or else Present (Body_Id) then\n@@ -11637,7 +11637,7 @@ package body Sem_Ch6 is\n             E : Entity_Id;\n \n          begin\n-            --  Search for entities in the enclosing scope of this synchonized\n+            --  Search for entities in the enclosing scope of this synchronized\n             --  type.\n \n             pragma Assert (Is_Concurrent_Type (Conc_Typ));"}, {"sha": "8ee34966d3316fbdf5501a64c8bf6fa40ab29a82", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -10120,7 +10120,7 @@ package body Sem_Ch8 is\n             return;\n          end if;\n \n-         --  Set P back to the non-renamed package so that visiblilty of the\n+         --  Set P back to the non-renamed package so that visibility of the\n          --  entities within the package can be properly set below.\n \n          P := Entity (Pack_Name);"}, {"sha": "74ebe50d02921694d3a6f8e567cec2d0a5e17329", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -3032,12 +3032,12 @@ package body Sem_Dim is\n    --                  symbol is not empty, then the symbol appears as a\n    --                  suffix. Otherwise, a new string is created and appears\n    --                  as a suffix of Item. This string results in the\n-   --                  successive concatanations between each unit symbol\n+   --                  successive concatenations between each unit symbol\n    --                  raised by its corresponding dimension power from the\n    --                  dimensions of Item.\n \n    --   * Put_Dim_Of : The output is a new string resulting in the successive\n-   --                  concatanations between each dimension symbol raised by\n+   --                  concatenations between each dimension symbol raised by\n    --                  its corresponding dimension power from the dimensions of\n    --                  Item.\n "}, {"sha": "ce407bcf77d67c57e503249b76ffdc489b5a8953", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1752,13 +1752,13 @@ package body Sem_Elab is\n \n       function Is_Ada_Semantic_Target (Id : Entity_Id) return Boolean;\n       pragma Inline (Is_Ada_Semantic_Target);\n-      --  Determine whether arbitrary entity Id denodes a source or internally\n+      --  Determine whether arbitrary entity Id denotes a source or internally\n       --  generated subprogram which emulates Ada semantics.\n \n       function Is_Assertion_Pragma_Target (Id : Entity_Id) return Boolean;\n       pragma Inline (Is_Assertion_Pragma_Target);\n       --  Determine whether arbitrary entity Id denotes a procedure which\n-      --  varifies the run-time semantics of an assertion pragma.\n+      --  verifies the run-time semantics of an assertion pragma.\n \n       function Is_Bodiless_Subprogram (Subp_Id : Entity_Id) return Boolean;\n       pragma Inline (Is_Bodiless_Subprogram);\n@@ -4949,7 +4949,7 @@ package body Sem_Elab is\n          --  which started the recursive search. If this is not the case, then\n          --  there is a potential ABE if the access value is used to call the\n          --  subprogram. Emit a warning only when switch -gnatw.f (warnings on\n-         --  suspucious 'Access) is in effect.\n+         --  suspicious 'Access) is in effect.\n \n          elsif Warn_On_Elab_Access\n            and then Present (Body_Decl)\n@@ -9033,7 +9033,7 @@ package body Sem_Elab is\n             if not Comes_From_Source (Curr) then\n                null;\n \n-            --  If the traversal came from the handled sequence of statments,\n+            --  If the traversal came from the handled sequence of statements,\n             --  then the node appears at the level of the enclosing construct.\n             --  This is a more reliable test because transients scopes within\n             --  the declarative region of the encapsulator are hard to detect.\n@@ -9055,7 +9055,7 @@ package body Sem_Elab is\n          elsif Nkind (Curr) in\n                  N_Entry_Body | N_Subprogram_Body | N_Task_Body\n          then\n-            --  If the traversal came from the handled sequence of statments,\n+            --  If the traversal came from the handled sequence of statements,\n             --  then the node cannot possibly appear at any level. This is\n             --  a more reliable test because transients scopes within the\n             --  declarative region of the encapsulator are hard to detect."}, {"sha": "2f723bcdec4278c9c0b05ed3ebf86c4bc3c6fa5a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -7113,7 +7113,7 @@ package body Sem_Prag is\n \n          if From_Aspect_Specification (N) then\n \n-            --  Change appearence of \"pragma\" in message to \"aspect\"\n+            --  Change appearance of \"pragma\" in message to \"aspect\"\n \n             J := Res'First;\n             while J <= Res_Last - 5 loop\n@@ -26585,7 +26585,7 @@ package body Sem_Prag is\n \n             --  The current refinement clause is legally constructed following\n             --  the rules in SPARK RM 7.2.5, therefore it can be removed from\n-            --  the pool of candidates. The seach continues because a single\n+            --  the pool of candidates. The search continues because a single\n             --  dependence clause may have multiple matching refinements.\n \n             if Inputs_Match and Outputs_Match then\n@@ -30903,8 +30903,8 @@ package body Sem_Prag is\n                   return Stmt;\n \n                --  The subprogram declaration is an internally generated spec\n-               --  for a stand-alone subrogram body declared inside a protected\n-               --  body.\n+               --  for a stand-alone subprogram body declared inside a\n+               --  protected body.\n \n                elsif Present (Corresponding_Body (Stmt))\n                  and then Comes_From_Source (Corresponding_Body (Stmt))\n@@ -31387,7 +31387,7 @@ package body Sem_Prag is\n    --  whether appearance of some name in a given pragma is to be considered\n    --  as a reference for the purposes of warnings about unreferenced objects.\n \n-   --  -1  indicates that appearence in any argument is significant\n+   --  -1  indicates that appearance in any argument is significant\n    --  0   indicates that appearance in any argument is not significant\n    --  +n  indicates that appearance as argument n is significant, but all\n    --      other arguments are not significant"}, {"sha": "ee843d39e9d4cccf8b6a0fc358bee36f5b5eff1a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -302,7 +302,7 @@ package body Sem_Res is\n    --  of the context, or the type of the other operand has a user-defined\n    --  literal aspect that can be applied to the literal to resolve the node.\n    --  If such aspect exists, replace literal with a call to the\n-   --  corresponing function and return True, return false otherwise.\n+   --  corresponding function and return True, return false otherwise.\n \n    -------------------------\n    -- Ambiguous_Character --\n@@ -3439,7 +3439,7 @@ package body Sem_Res is\n          end case;\n \n          --  Mark relevant use-type and use-package clauses as effective using\n-         --  the original node because constant folding may have occured and\n+         --  the original node because constant folding may have occurred and\n          --  removed references that need to be examined.\n \n          if Nkind (Original_Node (N)) in N_Op then\n@@ -10574,7 +10574,7 @@ package body Sem_Res is\n       end if;\n \n       --  AI12-0100: Once the qualified expression is resolved, check whether\n-      --  operand statisfies a static predicate of the target subtype, if any.\n+      --  operand satisfies a static predicate of the target subtype, if any.\n       --  In the static expression case, a predicate check failure is an error.\n \n       if Has_Predicates (Target_Typ) then\n@@ -12172,7 +12172,7 @@ package body Sem_Res is\n       end if;\n \n       --  Ada 2012: Once the type conversion is resolved, check whether the\n-      --  operand statisfies a static predicate of the target subtype, if any.\n+      --  operand satisfies a static predicate of the target subtype, if any.\n       --  In the static expression case, a predicate check failure is an error.\n \n       if Has_Predicates (Target_Typ) then\n@@ -13128,7 +13128,7 @@ package body Sem_Res is\n       function In_Instance_Code return Boolean;\n       --  Return True if expression is within an instance but is not in one of\n       --  the actuals of the instantiation. Type conversions within an instance\n-      --  are not rechecked because type visbility may lead to spurious errors,\n+      --  are not rechecked because type visibility may lead to spurious errors\n       --  but conversions in an actual for a formal object must be checked.\n \n       function Is_Discrim_Of_Bad_Access_Conversion_Argument"}, {"sha": "05fa3eda82c87c146ded0612b45c8ead4b584623", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -503,7 +503,7 @@ package body Sem_Util is\n                              (Scope (Defining_Identifier (Par))));\n \n                when N_Assignment_Statement =>\n-                  --  Return the accessiblity level of the left-hand part\n+                  --  Return the accessibility level of the left-hand part\n \n                   return Accessibility_Level\n                            (Expr              => Name (Par),\n@@ -25132,7 +25132,7 @@ package body Sem_Util is\n       --    * Semantic fields of nodes such as First_Real_Statement must be\n       --      updated to reference the proper replicated nodes.\n \n-      --  Finally, quantified expressions contain an implicit delaration for\n+      --  Finally, quantified expressions contain an implicit declaration for\n       --  the bound variable. Given that quantified expressions appearing\n       --  in contracts are copied to create pragmas and eventually checking\n       --  procedures, a new bound variable must be created for each copy, to"}, {"sha": "5ef0a228abe2a31d45f5e40020ab2aa73fa310c4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -2615,7 +2615,7 @@ package Sem_Util is\n    --  follows:\n    --\n    --    Checks   - Save the status of Elaboration_Check\n-   --    Level    - Save the declaration level of N_Id (if appicable)\n+   --    Level    - Save the declaration level of N_Id (if applicable)\n    --    Modes    - Save the Ghost and SPARK modes in effect (if applicable)\n    --    Warnings - Save the status of Elab_Warnings\n "}, {"sha": "e96227462ba3445920339c6077c4b86f76a2614d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1842,7 +1842,7 @@ package Sinfo is\n \n    --  Is_Read\n    --    Present in variable reference markers. Set when the original variable\n-   --    reference constitues a read of the variable.\n+   --    reference constitutes a read of the variable.\n \n    --  Is_Source_Call\n    --    Present in call marker nodes. Set when the related call came from\n@@ -1902,7 +1902,7 @@ package Sinfo is\n \n    --  Is_Write\n    --    Present in variable reference markers. Set when the original variable\n-   --    reference constitues a write of the variable.\n+   --    reference constitutes a write of the variable.\n \n    --  Itype\n    --    Used in N_Itype_Reference node to reference an itype for which it is"}, {"sha": "252d72d18255e06cfccd10ea8a7c088e00961542", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -309,7 +309,7 @@ package body Sprint is\n    procedure Write_Param_Specs (N : Node_Id);\n    --  Output parameter specifications for node N (which is a subprogram, or\n    --  entry or entry family or access-subprogram-definition, all of which\n-   --  have a Parameter_Specificatioons field).\n+   --  have a Parameter_Specifications field).\n \n    procedure Write_Rewrite_Str (S : String);\n    --  Writes out a string (typically containing <<< or >>>}) for a node\n@@ -1135,7 +1135,7 @@ package body Sprint is\n          --  Note: the following code for N_Aspect_Specification is not\n          --  normally used, since we deal with aspects as part of a\n          --  declaration, but it is here in case we deliberately try\n-         --  to print an N_Aspect_Speficiation node (e.g. from GDB).\n+         --  to print an N_Aspect_Specification node (e.g. from GDB).\n \n          when N_Aspect_Specification =>\n             Sprint_Node (Identifier (Node));\n@@ -4806,7 +4806,7 @@ package body Sprint is\n       --  Set true if we output at least one parameter\n \n    begin\n-      --  Write out explicit specs from Parameter_Speficiations list\n+      --  Write out explicit specs from Parameter_Specifications list\n \n       if Specs_Present then\n          Write_Str_With_Col_Check (\" (\");"}, {"sha": "cd9bc78d35ca3221a2950a981f629ad39196b968", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7b9484a39657deab7cac7092c2bf634a39365/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=41a7b9484a39657deab7cac7092c2bf634a39365", "patch": "@@ -1520,7 +1520,7 @@ package body Urealp is\n \n    --  We defer to the implementation of UR_Write in all cases, either directly\n    --  for values that are naturally written in a JSON compatible format, or by\n-   --  first computing a decimal approxixmation for other values.\n+   --  first computing a decimal approximation for other values.\n \n    procedure UR_Write_To_JSON (Real : Ureal) is\n       Val  : constant Ureal_Entry      := Ureals.Table (Real);\n@@ -1561,7 +1561,7 @@ package body Urealp is\n       elsif Val.Rbase = 0 and then Val.Num mod Val.Den = 0 then\n          T := Real;\n \n-      --  For other constants, compute an approxixmation in base 10\n+      --  For other constants, compute an approximation in base 10\n \n       else\n          declare"}]}