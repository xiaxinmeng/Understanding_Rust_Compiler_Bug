{"sha": "525e67c1e839212666cbcec7c64ad77925472949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1ZTY3YzFlODM5MjEyNjY2Y2JjZWM3YzY0YWQ3NzkyNTQ3Mjk0OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-11-02T18:20:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-11-02T18:20:07Z"}, "message": "re PR target/24178 (generates code that produces unaligned access exceptions)\n\n        PR target/24178\n        * config/alpha/alpha.c (get_aligned_mem): Honor alignment given\n        by MEM_ALIGN.\n\nFrom-SVN: r106388", "tree": {"sha": "e2cced7f10ef56e2daf669d5da637210ada561c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2cced7f10ef56e2daf669d5da637210ada561c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525e67c1e839212666cbcec7c64ad77925472949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525e67c1e839212666cbcec7c64ad77925472949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525e67c1e839212666cbcec7c64ad77925472949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525e67c1e839212666cbcec7c64ad77925472949/comments", "author": null, "committer": null, "parents": [{"sha": "f85f1ca7b80e46fd145be68f0dffc87f661656ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85f1ca7b80e46fd145be68f0dffc87f661656ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85f1ca7b80e46fd145be68f0dffc87f661656ec"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "f2b2f54e377249d7cb67073d002a2c01cd5852a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525e67c1e839212666cbcec7c64ad77925472949/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525e67c1e839212666cbcec7c64ad77925472949/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=525e67c1e839212666cbcec7c64ad77925472949", "patch": "@@ -1,3 +1,9 @@\n+2005-11-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/24178\n+\t* config/alpha/alpha.c (get_aligned_mem): Honor alignment given\n+\tby MEM_ALIGN.\n+\n 2005-11-01  Richard Henderson  <rth@redhat.com>\n \n \tPR 21518"}, {"sha": "ec53778ce1837488caf45cde777a3eb9b34d816f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525e67c1e839212666cbcec7c64ad77925472949/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525e67c1e839212666cbcec7c64ad77925472949/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=525e67c1e839212666cbcec7c64ad77925472949", "patch": "@@ -1487,31 +1487,42 @@ void\n get_aligned_mem (rtx ref, rtx *paligned_mem, rtx *pbitnum)\n {\n   rtx base;\n-  HOST_WIDE_INT offset = 0;\n+  HOST_WIDE_INT disp, offset;\n \n   gcc_assert (GET_CODE (ref) == MEM);\n \n   if (reload_in_progress\n       && ! memory_address_p (GET_MODE (ref), XEXP (ref, 0)))\n     {\n       base = find_replacement (&XEXP (ref, 0));\n-\n       gcc_assert (memory_address_p (GET_MODE (ref), base));\n     }\n   else\n     base = XEXP (ref, 0);\n \n   if (GET_CODE (base) == PLUS)\n-    offset += INTVAL (XEXP (base, 1)), base = XEXP (base, 0);\n+    disp = INTVAL (XEXP (base, 1)), base = XEXP (base, 0);\n+  else\n+    disp = 0;\n+\n+  /* Find the byte offset within an aligned word.  If the memory itself is\n+     claimed to be aligned, believe it.  Otherwise, aligned_memory_operand\n+     will have examined the base register and determined it is aligned, and\n+     thus displacements from it are naturally alignable.  */\n+  if (MEM_ALIGN (ref) >= 32)\n+    offset = 0;\n+  else\n+    offset = disp & 3;\n \n-  *paligned_mem\n-    = widen_memory_access (ref, SImode, (offset & ~3) - offset);\n+  /* Access the entire aligned word.  */\n+  *paligned_mem = widen_memory_access (ref, SImode, -offset);\n \n+  /* Convert the byte offset within the word to a bit offset.  */\n   if (WORDS_BIG_ENDIAN)\n-    *pbitnum = GEN_INT (32 - (GET_MODE_BITSIZE (GET_MODE (ref))\n-\t\t\t      + (offset & 3) * 8));\n+    offset = 32 - (GET_MODE_BITSIZE (GET_MODE (ref)) + offset * 8);\n   else\n-    *pbitnum = GEN_INT ((offset & 3) * 8);\n+    offset *= 8;\n+  *pbitnum = GEN_INT (offset);\n }\n \n /* Similar, but just get the address.  Handle the two reload cases."}, {"sha": "0a31aa7366ad2a86563747bedcb1a4c7b50a88e4", "filename": "gcc/testsuite/gcc.target/alpha/pr24178.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525e67c1e839212666cbcec7c64ad77925472949/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr24178.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525e67c1e839212666cbcec7c64ad77925472949/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr24178.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr24178.c?ref=525e67c1e839212666cbcec7c64ad77925472949", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=ev4\" } */\n+\n+struct S {\n+    long l;\n+    unsigned char c;\n+};\n+unsigned long f(unsigned char *p10) {\n+    struct S *p = (struct S *) (p10 + 10);\n+    return p->c;\n+}\n+\n+/* { dg-final { scan-assembler \"ldl.*,18\\\\(\" } } */"}]}