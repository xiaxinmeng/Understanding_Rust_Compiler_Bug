{"sha": "120b24f7ba504ac2ff8876bae10df5b327586b70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIwYjI0ZjdiYTUwNGFjMmZmODg3NmJhZTEwZGY1YjMyNzU4NmI3MA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2006-11-07T18:33:57Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2006-11-07T18:33:57Z"}, "message": "avr-protos.h (mask_one_bit_p, [...]): Remove prototype.\n\n\t* config/avr/avr-protos.h (mask_one_bit_p, const_int_pow2_p): Remove \n\tprototype.\n\t* config/avr/avr.c (mask_one_bit_p, const_int_pow2_p): Remove.\n\t(output_movhi, ashlhi3_out, ashlsi3_out, ashrhi3_out, ashrsi3_out,\n\tlshrhi3_out, lshrsi3_out): Remove unnecessary code for handling value\n\twhich start in an odd register.\n\nFrom-SVN: r118563", "tree": {"sha": "decee8fd30879f6cd8afb7e7cd5f651a491912d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/decee8fd30879f6cd8afb7e7cd5f651a491912d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/120b24f7ba504ac2ff8876bae10df5b327586b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120b24f7ba504ac2ff8876bae10df5b327586b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120b24f7ba504ac2ff8876bae10df5b327586b70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120b24f7ba504ac2ff8876bae10df5b327586b70/comments", "author": null, "committer": null, "parents": [{"sha": "daca5b05b041425a41cd31851c8b9a717bf8a7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca5b05b041425a41cd31851c8b9a717bf8a7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daca5b05b041425a41cd31851c8b9a717bf8a7f8"}], "stats": {"total": 244, "additions": 67, "deletions": 177}, "files": [{"sha": "833078d8990b8c1c7a96ba927083d5e90bc0df66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=120b24f7ba504ac2ff8876bae10df5b327586b70", "patch": "@@ -1,3 +1,12 @@\n+2006-11-06  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr-protos.h (mask_one_bit_p, const_int_pow2_p): Remove \n+\tprototype.\n+\t* config/avr/avr.c (mask_one_bit_p, const_int_pow2_p): Remove.\n+\t(output_movhi, ashlhi3_out, ashlsi3_out, ashrhi3_out, ashrsi3_out,\n+\tlshrhi3_out, lshrsi3_out): Remove unnecessary code for handling value\n+\twhich start in an odd register.\n+\n 2006-11-07  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.h (ISA_HAS_PREFETCHX): Fix typo."}, {"sha": "ece55b7e5103e94d6afed2544c3e541826c7bdc4", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=120b24f7ba504ac2ff8876bae10df5b327586b70", "patch": "@@ -36,7 +36,6 @@ extern void asm_globalize_label (FILE *file, const char *name);\n extern void order_regs_for_local_alloc (void);\n extern int initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);\n-extern int mask_one_bit_p (HOST_WIDE_INT mask);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);\n \n@@ -122,7 +121,6 @@ extern int compare_eq_p (rtx insn);\n extern void out_shift_with_cnt (const char *template, rtx insn,\n \t\t\t\trtx operands[], int *len, int t_len);\n extern int avr_io_address_p (rtx x, int size);\n-extern int const_int_pow2_p (rtx x);\n extern int avr_peep2_scratch_safe (rtx reg_rtx);\n #endif /* RTX_CODE */\n "}, {"sha": "edc3f303c7f5606e128db81f8ccbc9446ce70e88", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 58, "deletions": 175, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120b24f7ba504ac2ff8876bae10df5b327586b70/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=120b24f7ba504ac2ff8876bae10df5b327586b70", "patch": "@@ -1669,13 +1669,6 @@ output_movhi (rtx insn, rtx operands[], int *l)\n \t      *l = 1;\n \t      return (AS2 (movw,%0,%1));\n \t    }\n-\n-\t  if (true_regnum (dest) > true_regnum (src))\n-\t    {\n-\t      *l = 2;\n-\t      return (AS2 (mov,%B0,%B1) CR_TAB\n-\t\t      AS2 (mov,%A0,%A1));\n-\t    }\n \t  else\n \t    {\n \t      *l = 2;\n@@ -3133,11 +3126,8 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (ror,%A0));\n \n \tcase 8:\n-\t  if (true_regnum (operands[0]) + 1 == true_regnum (operands[1]))\n-\t    return *len = 1, AS1 (clr,%A0);\n-\t  else\n-\t    return *len = 2, (AS2 (mov,%B0,%A1) CR_TAB\n-\t\t\t      AS1 (clr,%A0));\n+\t  return *len = 2, (AS2 (mov,%B0,%A1) CR_TAB\n+\t\t\t    AS1 (clr,%A0));\n \n \tcase 9:\n \t  *len = 3;\n@@ -3329,11 +3319,6 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS2 (mov,%C0,%B1)  CR_TAB\n \t\t      AS2 (mov,%B0,%A1)  CR_TAB\n \t\t      AS1 (clr,%A0));\n-\t    else if (reg0 + 1 == reg1)\n-\t      {\n-\t\t*len = 1;\n-\t\treturn AS1 (clr,%A0);\n-\t      }\n \t    else\n \t      return (AS1 (clr,%A0)      CR_TAB\n \t\t      AS2 (mov,%B0,%A1)  CR_TAB\n@@ -3345,46 +3330,26 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n-\t    *len = 4;\n-\t    if (AVR_HAVE_MOVW && (reg0 + 2 != reg1))\n-\t      {\n-\t\t*len = 3;\n-\t\treturn (AS2 (movw,%C0,%A1) CR_TAB\n-\t\t\tAS1 (clr,%B0)      CR_TAB\n-\t\t\tAS1 (clr,%A0));\n-\t      }\n-\t    if (reg0 + 1 >= reg1)\n-\t      return (AS2 (mov,%D0,%B1)  CR_TAB\n-\t\t      AS2 (mov,%C0,%A1)  CR_TAB\n-\t\t      AS1 (clr,%B0)      CR_TAB\n-\t\t      AS1 (clr,%A0));\n \t    if (reg0 + 2 == reg1)\n-\t      {\n-\t\t*len = 2;\n-\t\treturn (AS1 (clr,%B0)      CR_TAB\n-\t\t\tAS1 (clr,%A0));\n-\t      }\n+\t      return *len = 2, (AS1 (clr,%B0)      CR_TAB\n+\t\t\t\tAS1 (clr,%A0));\n+\t    if (AVR_HAVE_MOVW)\n+\t      return *len = 3, (AS2 (movw,%C0,%A1) CR_TAB\n+\t\t\t\tAS1 (clr,%B0)      CR_TAB\n+\t\t\t\tAS1 (clr,%A0));\n \t    else\n-\t      return (AS2 (mov,%C0,%A1)  CR_TAB\n-\t\t      AS2 (mov,%D0,%B1)  CR_TAB\n-\t\t      AS1 (clr,%B0)      CR_TAB\n-\t\t      AS1 (clr,%A0));\n+\t      return *len = 4, (AS2 (mov,%C0,%A1)  CR_TAB\n+\t\t\t\tAS2 (mov,%D0,%B1)  CR_TAB\n+\t\t\t\tAS1 (clr,%B0)      CR_TAB\n+\t\t\t\tAS1 (clr,%A0));\n \t  }\n \n \tcase 24:\n \t  *len = 4;\n-\t  if (true_regnum (operands[0]) + 3 != true_regnum (operands[1]))\n-\t    return (AS2 (mov,%D0,%A1)  CR_TAB\n-\t\t    AS1 (clr,%C0)      CR_TAB\n-\t\t    AS1 (clr,%B0)      CR_TAB\n-\t\t    AS1 (clr,%A0));\n-\t  else\n-\t    {\n-\t      *len = 3;\n-\t      return (AS1 (clr,%C0)      CR_TAB\n-\t\t      AS1 (clr,%B0)      CR_TAB\n-\t\t      AS1 (clr,%A0));\n-\t    }\n+\t  return (AS2 (mov,%D0,%A1)  CR_TAB\n+\t\t  AS1 (clr,%C0)      CR_TAB\n+\t\t  AS1 (clr,%B0)      CR_TAB\n+\t\t  AS1 (clr,%A0));\n \n \tcase 31:\n \t  *len = 6;\n@@ -3528,15 +3493,11 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t      return *len = 3, (AS2 (mov,%A0,%B0) CR_TAB\n \t\t\t\tAS1 (lsl,%B0)     CR_TAB\n \t\t\t\tAS2 (sbc,%B0,%B0));\n-\t    else if (reg0 == reg1 + 1)\n-\t      return *len = 3, (AS1 (clr,%B0)    CR_TAB\n-\t\t\t\tAS2 (sbrc,%A0,7) CR_TAB\n-\t\t\t\tAS1 (dec,%B0));\n-\n-\t    return *len = 4, (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t\t      AS2 (sbrc,%A0,7)  CR_TAB\n-\t\t\t      AS1 (dec,%B0));\n+\t    else \n+\t      return *len = 4, (AS2 (mov,%A0,%B1) CR_TAB\n+\t\t\t        AS1 (clr,%B0)     CR_TAB\n+\t\t\t        AS2 (sbrc,%A0,7)  CR_TAB\n+\t\t\t        AS1 (dec,%B0));\n \t  }\n \n \tcase 9:\n@@ -3672,13 +3633,6 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS1 (clr,%D0)     CR_TAB\n \t\t      AS2 (sbrc,%C0,7)  CR_TAB\n \t\t      AS1 (dec,%D0));\n-\t    else if (reg0 == reg1 + 1)\n-\t      {\n-\t\t*len = 3;\n-\t\treturn (AS1 (clr,%D0)     CR_TAB\n-\t\t\tAS2 (sbrc,%C0,7)  CR_TAB\n-\t\t\tAS1 (dec,%D0));\n-\t      }\n \t    else\n \t      return (AS1 (clr,%D0)     CR_TAB\n \t\t      AS2 (sbrc,%D1,7)  CR_TAB\n@@ -3692,51 +3646,34 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n-\t    *len=6;\n-\t    if (AVR_HAVE_MOVW && (reg0 != reg1 + 2))\n-\t      {\n-\t\t*len = 5;\n-\t\treturn (AS2 (movw,%A0,%C1) CR_TAB\n-\t\t\tAS1 (clr,%D0)      CR_TAB\n-\t\t\tAS2 (sbrc,%B0,7)   CR_TAB\n-\t\t\tAS1 (com,%D0)      CR_TAB\n-\t\t\tAS2 (mov,%C0,%D0));\n-\t      }\n-\t    if (reg0 <= reg1 + 1)\n-\t      return (AS2 (mov,%A0,%C1) CR_TAB\n-\t\t      AS2 (mov,%B0,%D1) CR_TAB\n-\t\t      AS1 (clr,%D0)     CR_TAB\n-\t\t      AS2 (sbrc,%B0,7)  CR_TAB\n-\t\t      AS1 (com,%D0)     CR_TAB\n-\t\t      AS2 (mov,%C0,%D0));\n-\t    else if (reg0 == reg1 + 2)\n+\t    \n+\t    if (reg0 == reg1 + 2)\n \t      return *len = 4, (AS1 (clr,%D0)     CR_TAB\n \t\t\t\tAS2 (sbrc,%B0,7)  CR_TAB\n \t\t\t\tAS1 (com,%D0)     CR_TAB\n \t\t\t\tAS2 (mov,%C0,%D0));\n-\t    else\n-\t      return (AS2 (mov,%B0,%D1) CR_TAB\n-\t\t      AS2 (mov,%A0,%C1) CR_TAB\n-\t\t      AS1 (clr,%D0)     CR_TAB\n-\t\t      AS2 (sbrc,%B0,7)  CR_TAB\n-\t\t      AS1 (com,%D0)     CR_TAB\n-\t\t      AS2 (mov,%C0,%D0));\n+\t    if (AVR_HAVE_MOVW)\n+\t      return *len = 5, (AS2 (movw,%A0,%C1) CR_TAB\n+\t\t\t\tAS1 (clr,%D0)      CR_TAB\n+\t\t\t\tAS2 (sbrc,%B0,7)   CR_TAB\n+\t\t\t\tAS1 (com,%D0)      CR_TAB\n+\t\t\t\tAS2 (mov,%C0,%D0));\n+\t    else \n+\t      return *len = 6, (AS2 (mov,%B0,%D1) CR_TAB\n+\t\t\t\tAS2 (mov,%A0,%C1) CR_TAB\n+\t\t\t\tAS1 (clr,%D0)     CR_TAB\n+\t\t\t\tAS2 (sbrc,%B0,7)  CR_TAB\n+\t\t\t\tAS1 (com,%D0)     CR_TAB\n+\t\t\t\tAS2 (mov,%C0,%D0));\n \t  }\n \n \tcase 24:\n-\t  if (true_regnum (operands[0]) != true_regnum (operands[1]) + 3)\n-\t    return *len = 6, (AS2 (mov,%A0,%D1) CR_TAB\n-\t\t\t      AS1 (clr,%D0)     CR_TAB\n-\t\t\t      AS2 (sbrc,%A0,7)  CR_TAB\n-\t\t\t      AS1 (com,%D0)     CR_TAB\n-\t\t\t      AS2 (mov,%B0,%D0) CR_TAB\n-\t\t\t      AS2 (mov,%C0,%D0));\n-\t  else\n-\t    return *len = 5, (AS1 (clr,%D0)     CR_TAB\n-\t\t\t      AS2 (sbrc,%A0,7)  CR_TAB\n-\t\t\t      AS1 (com,%D0)     CR_TAB\n-\t\t\t      AS2 (mov,%B0,%D0) CR_TAB\n-\t\t\t      AS2 (mov,%C0,%D0));\n+\t  return *len = 6, (AS2 (mov,%A0,%D1) CR_TAB\n+\t\t\t    AS1 (clr,%D0)     CR_TAB\n+\t\t\t    AS2 (sbrc,%A0,7)  CR_TAB\n+\t\t\t    AS1 (com,%D0)     CR_TAB\n+\t\t\t    AS2 (mov,%B0,%D0) CR_TAB\n+\t\t\t    AS2 (mov,%C0,%D0));\n \n \tdefault:\n \t  if (INTVAL (operands[2]) < 32)\n@@ -3966,11 +3903,8 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (neg,%B0));\n \n \tcase 8:\n-\t  if (true_regnum (operands[0]) != true_regnum (operands[1]) + 1)\n-\t    return *len = 2, (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t\t      AS1 (clr,%B0));\n-\t  else\n-\t    return *len = 1, AS1 (clr,%B0);\n+\t  return *len = 2, (AS2 (mov,%A0,%B1) CR_TAB\n+\t\t\t    AS1 (clr,%B0));\n \n \tcase 9:\n \t  *len = 3;\n@@ -4161,8 +4095,6 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS2 (mov,%B0,%C1) CR_TAB\n \t\t      AS2 (mov,%C0,%D1) CR_TAB\n \t\t      AS1 (clr,%D0));\n-\t    else if (reg0 == reg1 + 1)\n-\t      return *len = 1, AS1 (clr,%D0);\n \t    else\n \t      return (AS1 (clr,%D0)     CR_TAB\n \t\t      AS2 (mov,%C0,%D1) CR_TAB\n@@ -4174,39 +4106,26 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n-\t    *len = 4;\n-\t    if (AVR_HAVE_MOVW && (reg0 != reg1 + 2))\n-\t      {\n-\t\t*len = 3;\n-\t\treturn (AS2 (movw,%A0,%C1) CR_TAB\n-\t\t\tAS1 (clr,%C0)      CR_TAB\n-\t\t\tAS1 (clr,%D0));\n-\t      }\n-\t    if (reg0 <= reg1 + 1)\n-\t      return (AS2 (mov,%A0,%C1) CR_TAB\n-\t\t      AS2 (mov,%B0,%D1) CR_TAB\n-\t\t      AS1 (clr,%C0)     CR_TAB\n-\t\t      AS1 (clr,%D0));\n-\t    else if (reg0 == reg1 + 2)\n+\n+\t    if (reg0 == reg1 + 2)\n \t      return *len = 2, (AS1 (clr,%C0)     CR_TAB\n \t\t\t\tAS1 (clr,%D0));\n+\t    if (AVR_HAVE_MOVW)\n+\t      return *len = 3, (AS2 (movw,%A0,%C1) CR_TAB\n+\t\t\t\tAS1 (clr,%C0)      CR_TAB\n+\t\t\t\tAS1 (clr,%D0));\n \t    else\n-\t      return (AS2 (mov,%B0,%D1) CR_TAB\n-\t\t      AS2 (mov,%A0,%C1) CR_TAB\n-\t\t      AS1 (clr,%C0)     CR_TAB\n-\t\t      AS1 (clr,%D0));\n+\t      return *len = 4, (AS2 (mov,%B0,%D1) CR_TAB\n+\t\t\t\tAS2 (mov,%A0,%C1) CR_TAB\n+\t\t\t\tAS1 (clr,%C0)     CR_TAB\n+\t\t\t\tAS1 (clr,%D0));\n \t  }\n \t  \n \tcase 24:\n-\t  if (true_regnum (operands[0]) != true_regnum (operands[1]) + 3)\n-\t    return *len = 4, (AS2 (mov,%A0,%D1) CR_TAB\n-\t\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t\t      AS1 (clr,%C0)     CR_TAB\n-\t\t\t      AS1 (clr,%D0));\n-\t  else\n-\t    return *len = 3, (AS1 (clr,%B0)     CR_TAB\n-\t\t\t      AS1 (clr,%C0)     CR_TAB\n-\t\t\t      AS1 (clr,%D0));\n+\t  return *len = 4, (AS2 (mov,%A0,%D1) CR_TAB\n+\t\t\t    AS1 (clr,%B0)     CR_TAB\n+\t\t\t    AS1 (clr,%C0)     CR_TAB\n+\t\t\t    AS1 (clr,%D0));\n \n \tcase 31:\n \t  *len = 6;\n@@ -5658,28 +5577,6 @@ avr_function_value (tree type, tree func ATTRIBUTE_UNUSED)\n   return gen_rtx_REG (BLKmode, RET_REGISTER + 2 - offs);\n }\n \n-/* Returns nonzero if the number MASK has only one bit set.  */\n-\n-int\n-mask_one_bit_p (HOST_WIDE_INT mask)\n-{\n-  int i;\n-  unsigned HOST_WIDE_INT n=mask;\n-  for (i = 0; i < 32; ++i)\n-    {\n-      if (n & 0x80000000L)\n-\t{\n-\t  if (n & 0x7fffffffL)\n-\t    return 0;\n-\t  else\n-\t    return 32-i;\n-\t}\n-      n<<=1;\n-    }\n-  return 0; \n-}\n-\n-\n /* Places additional restrictions on the register class to\n    use when it is necessary to copy value X into a register\n    in class CLASS.  */\n@@ -5753,20 +5650,6 @@ avr_io_address_p (rtx x, int size)\n \t  && INTVAL (x) >= 0x20 && INTVAL (x) <= 0x60 - size);\n }\n \n-/* Returns nonzero (bit number + 1) if X, or -X, is a constant power of 2.  */\n-\n-int\n-const_int_pow2_p (rtx x)\n-{\n-  if (GET_CODE (x) == CONST_INT)\n-    {\n-      HOST_WIDE_INT d = INTVAL (x);\n-      HOST_WIDE_INT abs_d = (d >= 0) ? d : -d;\n-      return exact_log2 (abs_d) + 1;\n-    }\n-  return 0;\n-}\n-\n const char *\n output_reload_inhi (rtx insn ATTRIBUTE_UNUSED, rtx *operands, int *len)\n {"}]}