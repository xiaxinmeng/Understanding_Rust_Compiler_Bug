{"sha": "ae79697b721b607964d32468c87d1881c3a39974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3OTY5N2I3MjFiNjA3OTY0ZDMyNDY4Yzg3ZDE4ODFjM2EzOTk3NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-31T23:16:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-31T23:16:11Z"}, "message": "cpplib.h: Merge struct cpp_options into struct cpp_reader.\n\n\t* cpplib.h: Merge struct cpp_options into struct cpp_reader.\n\tReorder struct cpp_options and struct cpp_reader for better\n\tpacking.  Replace CPP_OPTIONS macro with CPP_OPTION which\n\ttakes two args.  Change all 'char' flags to 'unsigned char'.\n\tMove show_column flag into struct cpp_options.  Don't\n\tprototype cpp_options_init.\n\t* cpphash.h, cpperror.c, cppexp.c, cppfiles.c, cpphash.c,\n\tcppinit.c, cpplex.c, cpplib.c:\n\tReplace CPP_OPTIONS (pfile)->whatever with\n\tCPP_OPTION (pfile, whatever), and likewise for\n\topts = CPP_OPTIONS (pfile); ... opts->whatever;\n\n\t* cppinit.c (merge_include_chains): Take a cpp_reader *.\n\tExtract CPP_OPTION (pfile, pending) and work with that\n\tdirectly.\n\t(cpp_options_init): Delete.\n\t(cpp_reader_init): Turn on on-by-default options here.\n\tAllocate the pending structure here.\n\t(cl_options, enum opt_code): Define these from the same table,\n\tkept in a large macro.  Add -fshow-column and -fno-show-column\n\toptions.\n\n\t* cpperror.c (v_message): If show_column is off, don't print\n\tthe column number.\n\n\t* cppmain.c: Update for new interface.\n\t* fix-header.c: Likewise.\n\nFrom-SVN: r32850", "tree": {"sha": "c407bb10c858c1ee81576f79ea01d3e9c8890316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c407bb10c858c1ee81576f79ea01d3e9c8890316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae79697b721b607964d32468c87d1881c3a39974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae79697b721b607964d32468c87d1881c3a39974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae79697b721b607964d32468c87d1881c3a39974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae79697b721b607964d32468c87d1881c3a39974/comments", "author": null, "committer": null, "parents": [{"sha": "7bde2862db58ec0828e26fc95768f6d008a97f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bde2862db58ec0828e26fc95768f6d008a97f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bde2862db58ec0828e26fc95768f6d008a97f6f"}], "stats": {"total": 1434, "additions": 738, "deletions": 696}, "files": [{"sha": "d54214d00aad2f4bea7ed43f229ea5deb7c29944", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -1,3 +1,33 @@\n+2000-03-31  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.h: Merge struct cpp_options into struct cpp_reader.\n+\tReorder struct cpp_options and struct cpp_reader for better \n+\tpacking.  Replace CPP_OPTIONS macro with CPP_OPTION which\n+\ttakes two args.  Change all 'char' flags to 'unsigned char'.\n+\tMove show_column flag into struct cpp_options.  Don't\n+\tprototype cpp_options_init.\n+\t* cpphash.h, cpperror.c, cppexp.c, cppfiles.c, cpphash.c,\n+\tcppinit.c, cpplex.c, cpplib.c:\n+\tReplace CPP_OPTIONS (pfile)->whatever with\n+\tCPP_OPTION (pfile, whatever), and likewise for\n+\topts = CPP_OPTIONS (pfile); ... opts->whatever;\n+\n+\t* cppinit.c (merge_include_chains): Take a cpp_reader *.\n+\tExtract CPP_OPTION (pfile, pending) and work with that\n+\tdirectly.\n+\t(cpp_options_init): Delete.\n+\t(cpp_reader_init): Turn on on-by-default options here.\n+\tAllocate the pending structure here.\t\t  \n+\t(cl_options, enum opt_code): Define these from the same table,\n+\tkept in a large macro.  Add -fshow-column and -fno-show-column\n+\toptions.\n+\n+\t* cpperror.c (v_message): If show_column is off, don't print\n+\tthe column number.\n+\n+\t* cppmain.c: Update for new interface.\n+\t* fix-header.c: Likewise.\n+\n 2000-03-30  Geoff Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/t-aix43 (AR_FLAGS_FOR_TARGET): Adjust for new\n@@ -365,11 +395,11 @@ Tue Mar 28 08:29:46 2000  Jan Hubicka  <jh@suse.cz>\n \n 2000-03-28  Neil Booth  <NeilB@earthling.net>\n \n-        * cpplex.c (_cpp_read_and_prescan): Mark end of input buffer with\n+\t* cpplex.c (_cpp_read_and_prescan): Mark end of input buffer with\n \t'\\\\' rather than a null character, so nulls are not special.  Fix\n \t\"\\\\\\n\" handling in end-of-buffer conditions.  Use trigraph map to\n \tspeed trigraph conversion.\n-        (_cpp_init_input_buffer): Initialize trigraph map.\n+\t(_cpp_init_input_buffer): Initialize trigraph map.\n \n 2000-03-27  Alan Modra  <alan@linuxcare.com.au>\n \n@@ -4041,7 +4071,7 @@ Tue Feb 15 23:22:26 2000  Andrew Haley  <aph@cygnus.com>\n \t* config/sh/sh.h: Correct comment about macros.\n \n Tue Feb 15 22:30:36 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n-\t                  Andrew MacLeod  <amacleod@cygnus.com>\n+\t\t\t  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* Makefile.in (lcm.o): Depend on insn-attr.h.\n \t* basic-block.h (optimize_mode_switching): Declare.\n@@ -4136,7 +4166,7 @@ Tue Feb 15 22:30:36 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \tto import the frames themselves.\n \n Mon Feb 14 13:31:01 2000  Stan Cox  <scox@cygnus.com>\n-\t                  Jason Eckhardt  <jle@cygnus.com>\n+\t\t\t  Jason Eckhardt  <jle@cygnus.com>\n \n \t* basic_block.h: Added prototype for reorder_basic_blocks.\n \t* toplev.c: Changes to add -freorder-blocks and graph dump after"}, {"sha": "0da2c57075d9028c92581af1bbe8bf0afaa3b309", "filename": "gcc/cpperror.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -121,7 +121,8 @@ v_message (pfile, is_error, file, line, col, msg, ap)\n \tcpp_buf_line_and_col (ip, &line, &col);\n \n       print_containing_files (pfile, ip);\n-      print_file_and_line (file, line, col);\n+      print_file_and_line (file, line,\n+\t\t\t   CPP_OPTION (pfile, show_column) ? col : 0);\n     }\n   else\n     fprintf (stderr, \"%s: \", progname);\n@@ -217,7 +218,7 @@ cpp_error VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->inhibit_errors)\n+  if (CPP_OPTION (pfile, inhibit_errors))\n     return;\n \n   v_message (pfile, 1, NULL, -1, -1, msgid, ap);\n@@ -245,7 +246,7 @@ cpp_error_with_line VPARAMS ((cpp_reader *pfile, int line, int column,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->inhibit_errors)\n+  if (CPP_OPTION (pfile, inhibit_errors))\n     return;\n \n   v_message (pfile, 1, NULL, line, column, msgid, ap);\n@@ -277,7 +278,7 @@ cpp_warning VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->inhibit_warnings)\n+  if (CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n   v_message (pfile, 0, NULL, -1, -1, msgid, ap);\n@@ -305,7 +306,7 @@ cpp_warning_with_line VPARAMS ((cpp_reader * pfile, int line, int column,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->inhibit_warnings)\n+  if (CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n   v_message (pfile, 0, NULL, line, column, msgid, ap);\n@@ -328,12 +329,12 @@ cpp_pedwarn VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->pedantic_errors\n-      ? CPP_OPTIONS (pfile)->inhibit_errors\n-      : CPP_OPTIONS (pfile)->inhibit_warnings)\n+  if (CPP_OPTION (pfile, pedantic_errors)\n+      ? CPP_OPTION (pfile, inhibit_errors)\n+      : CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n-  v_message (pfile, CPP_OPTIONS (pfile)->pedantic_errors,\n+  v_message (pfile, CPP_OPTION (pfile, pedantic_errors),\n \t\t NULL, -1, -1, msgid, ap);\n   va_end(ap);\n }\n@@ -359,12 +360,12 @@ cpp_pedwarn_with_line VPARAMS ((cpp_reader * pfile, int line, int column,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->pedantic_errors\n-      ? CPP_OPTIONS (pfile)->inhibit_errors\n-      : CPP_OPTIONS (pfile)->inhibit_warnings)\n+  if (CPP_OPTION (pfile, pedantic_errors)\n+      ? CPP_OPTION (pfile, inhibit_errors)\n+      : CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n-  v_message (pfile, CPP_OPTIONS (pfile)->pedantic_errors,\n+  v_message (pfile, CPP_OPTION (pfile, pedantic_errors),\n \t\t NULL, line, column, msgid, ap);\n   va_end(ap);\n }\n@@ -396,12 +397,12 @@ cpp_pedwarn_with_file_and_line VPARAMS ((cpp_reader *pfile,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (CPP_OPTIONS (pfile)->pedantic_errors\n-      ? CPP_OPTIONS (pfile)->inhibit_errors\n-      : CPP_OPTIONS (pfile)->inhibit_warnings)\n+  if (CPP_OPTION (pfile, pedantic_errors)\n+      ? CPP_OPTION (pfile, inhibit_errors)\n+      : CPP_OPTION (pfile, inhibit_warnings))\n     return;\n \n-  v_message (pfile, CPP_OPTIONS (pfile)->pedantic_errors,\n+  v_message (pfile, CPP_OPTION (pfile, pedantic_errors),\n \t\t file, line, col, msgid, ap);\n   va_end(ap);\n }"}, {"sha": "6a391d76966444296d7eb3d5a41fb548aa3901ec", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -204,7 +204,7 @@ parse_number (pfile, start, end)\n       cpp_error (pfile, \"invalid number in #if expression\");\n       goto error;\n     }\n-  else if (spec_long > (CPP_OPTIONS (pfile)->c89 ? 1 : 2))\n+  else if (spec_long > (CPP_OPTION (pfile, c89) ? 1 : 2))\n     {\n       cpp_error (pfile, \"too many `l' suffixes in integer constant\");\n       goto error;\n@@ -443,7 +443,7 @@ lex (pfile, skip_evaluation)\n       op.unsignedp = 0;\n       op.value = 0;\n \n-      if (CPP_OPTIONS (pfile)->warn_undef && !skip_evaluation)\n+      if (CPP_OPTION (pfile, warn_undef) && !skip_evaluation)\n \tcpp_warning (pfile, \"`%.*s' is not defined\",\n \t\t     (int) (tok_end - tok_start), tok_start);\n       return op;\n@@ -505,7 +505,7 @@ parse_escape (pfile, string_ptr, result_mask)\n       return TARGET_BS;\n     case 'e':\n     case 'E':\n-      if (CPP_OPTIONS (pfile)->pedantic)\n+      if (CPP_PEDANTIC (pfile))\n \tcpp_pedwarn (pfile, \"non-ANSI-standard escape sequence, `\\\\%c'\", c);\n       return TARGET_ESC;\n     case 'f':"}, {"sha": "a3bbcde5801d4b8e25d0d87fa742967bd8a30be7", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -243,7 +243,7 @@ find_include_file (pfile, fname, search_start, ihash, before)\n \t  name[path->nlen] = '/';\n \t  strcpy (&name[path->nlen+1], fname);\n \t  _cpp_simplify_pathname (name);\n-\t  if (CPP_OPTIONS (pfile)->remap)\n+\t  if (CPP_OPTION (pfile, remap))\n \t    name = remap_filename (pfile, name, path);\n \n \t  f = open_include_file (pfile, name);\n@@ -369,7 +369,7 @@ read_name_map (pfile, dirname)\n   char *name;\n   FILE *f;\n \n-  for (map_list_ptr = CPP_OPTIONS (pfile)->map_list; map_list_ptr;\n+  for (map_list_ptr = CPP_OPTION (pfile, map_list); map_list_ptr;\n        map_list_ptr = map_list_ptr->map_list_next)\n     if (! strcmp (map_list_ptr->map_list_name, dirname))\n       return map_list_ptr->map_list_map;\n@@ -429,8 +429,8 @@ read_name_map (pfile, dirname)\n       fclose (f);\n     }\n   \n-  map_list_ptr->map_list_next = CPP_OPTIONS (pfile)->map_list;\n-  CPP_OPTIONS (pfile)->map_list = map_list_ptr;\n+  map_list_ptr->map_list_next = CPP_OPTION (pfile, map_list);\n+  CPP_OPTION (pfile, map_list) = map_list_ptr;\n \n   return map_list_ptr->map_list_map;\n }  \n@@ -511,9 +511,9 @@ _cpp_execute_include (pfile, fname, len, no_reinclude, search_start)\n   if (!search_start)\n     {\n       if (angle_brackets)\n-\tsearch_start = CPP_OPTIONS (pfile)->bracket_include;\n-      else if (CPP_OPTIONS (pfile)->ignore_srcdir)\n-\tsearch_start = CPP_OPTIONS (pfile)->quote_include;\n+\tsearch_start = CPP_OPTION (pfile, bracket_include);\n+      else if (CPP_OPTION (pfile, ignore_srcdir))\n+\tsearch_start = CPP_OPTION (pfile, quote_include);\n       else\n \tsearch_start = CPP_BUFFER (pfile)->actual_dir;\n     }\n@@ -536,7 +536,7 @@ _cpp_execute_include (pfile, fname, len, no_reinclude, search_start)\n   \n   if (fd == -1)\n     {\n-      if (CPP_OPTIONS (pfile)->print_deps_missing_files\n+      if (CPP_OPTION (pfile, print_deps_missing_files)\n \t  && CPP_PRINT_DEPS (pfile) > (angle_brackets ||\n \t\t\t\t       (pfile->system_include_depth > 0)))\n         {\n@@ -548,10 +548,10 @@ _cpp_execute_include (pfile, fname, len, no_reinclude, search_start)\n \t      struct file_name_list *ptr;\n \t      /* If requested as a system header, assume it belongs in\n \t\t the first system header directory. */\n-\t      if (CPP_OPTIONS (pfile)->bracket_include)\n-\t        ptr = CPP_OPTIONS (pfile)->bracket_include;\n+\t      if (CPP_OPTION (pfile, bracket_include))\n+\t        ptr = CPP_OPTION (pfile, bracket_include);\n \t      else\n-\t        ptr = CPP_OPTIONS (pfile)->quote_include;\n+\t        ptr = CPP_OPTION (pfile, quote_include);\n \n \t      p = (char *) alloca (strlen (ptr->name)\n \t\t\t\t   + strlen (fname) + 2);\n@@ -586,7 +586,7 @@ _cpp_execute_include (pfile, fname, len, no_reinclude, search_start)\n     deps_add_dep (pfile->deps, ihash->name);\n \n   /* Handle -H option.  */\n-  if (CPP_OPTIONS(pfile)->print_include_names)\n+  if (CPP_OPTION (pfile, print_include_names))\n     {\n       cpp_buffer *fp = CPP_BUFFER (pfile);\n       while ((fp = CPP_PREV_BUFFER (fp)) != NULL)\n@@ -753,7 +753,7 @@ read_include_file (pfile, fd, ihash)\n \n   /* The ->actual_dir field is only used when ignore_srcdir is not in effect;\n      see do_include */\n-  if (!CPP_OPTIONS (pfile)->ignore_srcdir)\n+  if (!CPP_OPTION (pfile, ignore_srcdir))\n     fp->actual_dir = actual_directory (pfile, ihash->name);\n \n   pfile->input_stack_listing_current = 0;\n@@ -819,7 +819,7 @@ actual_directory (pfile, fname)\n   x = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n   x->name = dir;\n   x->nlen = dlen;\n-  x->next = CPP_OPTIONS (pfile)->quote_include;\n+  x->next = CPP_OPTION (pfile, quote_include);\n   x->alloc = pfile->actual_dirs;\n   x->sysp = CPP_BUFFER (pfile)->system_header_p;\n   x->name_map = NULL;"}, {"sha": "998ebe6a6348ddabbfdbb1d997ddda706a441e7b", "filename": "gcc/cpphash.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -406,7 +406,7 @@ collect_expansion (pfile, arglist)\n \t  if (last_token == STRIZE)\n \t    cpp_error (pfile, \"`#' is not followed by a macro argument name\");\n \n-\t  if (CPP_TRADITIONAL (pfile) || CPP_OPTIONS (pfile)->warn_stringify)\n+\t  if (CPP_TRADITIONAL (pfile) || CPP_OPTION (pfile, warn_stringify))\n \t    goto maybe_trad_stringify;\n \t  else\n \t    goto norm;\n@@ -480,7 +480,7 @@ collect_expansion (pfile, arglist)\n \t\t\t     (int) argv[i].len, argv[i].name);\n \t\tcontinue;\n \t      }\n-\t    if (CPP_OPTIONS (pfile)->warn_stringify)\n+\t    if (CPP_OPTION (pfile, warn_stringify))\n \t      cpp_warning (pfile, \"macro argument `%.*s' is stringified\",\n \t\t\t     (int) argv[i].len, argv[i].name);\n \n@@ -614,7 +614,7 @@ collect_formal_parameters (pfile)\n \t      cpp_error (pfile, \"duplicate macro argument name `%s'\", tok);\n \t      continue;\n \t    }\n-\t  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->c99\n+\t  if (CPP_PEDANTIC (pfile) && CPP_OPTION (pfile, c99)\n \t      && len == sizeof \"__VA_ARGS__\" - 1\n \t      && !strncmp (tok, \"__VA_ARGS__\", len))\n \t    cpp_pedwarn (pfile,\n@@ -661,7 +661,7 @@ collect_formal_parameters (pfile)\n      those elsewhere.  */\n   if (argv[argc].len == 0)\n     {\n-      if (CPP_PEDANTIC (pfile) && ! CPP_OPTIONS (pfile)->c99)\n+      if (CPP_PEDANTIC (pfile) && ! CPP_OPTION (pfile, c99))\n \tcpp_pedwarn (pfile, \"C89 does not permit varargs macros\");\n \n       len = sizeof \"__VA_ARGS__\" - 1;\n@@ -740,8 +740,8 @@ _cpp_create_definition (pfile, funlike)\n \n   pfile->no_macro_expand++;\n   pfile->parsing_define_directive++;\n-  CPP_OPTIONS (pfile)->discard_comments++;\n-  CPP_OPTIONS (pfile)->no_line_commands++;\n+  CPP_OPTION (pfile, discard_comments)++;\n+  CPP_OPTION (pfile, no_line_commands)++;\n   \n   if (funlike)\n     {\n@@ -760,15 +760,15 @@ _cpp_create_definition (pfile, funlike)\n \n   pfile->no_macro_expand--;\n   pfile->parsing_define_directive--;\n-  CPP_OPTIONS (pfile)->discard_comments--;\n-  CPP_OPTIONS (pfile)->no_line_commands--;\n+  CPP_OPTION (pfile, discard_comments)--;\n+  CPP_OPTION (pfile, no_line_commands)--;\n   return defn;\n \n  err:\n   pfile->no_macro_expand--;\n   pfile->parsing_define_directive--;\n-  CPP_OPTIONS (pfile)->discard_comments--;\n-  CPP_OPTIONS (pfile)->no_line_commands--;\n+  CPP_OPTION (pfile, discard_comments)--;\n+  CPP_OPTION (pfile, no_line_commands)--;\n   return 0;\n }\n \n@@ -1069,8 +1069,8 @@ _cpp_macroexpand (pfile, hp)\n       rest_args = 0;\n \n       /* Skip over the opening parenthesis.  */\n-      CPP_OPTIONS (pfile)->discard_comments++;\n-      CPP_OPTIONS (pfile)->no_line_commands++;\n+      CPP_OPTION (pfile, discard_comments)++;\n+      CPP_OPTION (pfile, no_line_commands)++;\n       pfile->no_macro_expand++;\n       pfile->no_directives++;\n \n@@ -1102,8 +1102,8 @@ _cpp_macroexpand (pfile, hp)\n \t  i++;\n \t}\n       while (token == CPP_COMMA);\n-      CPP_OPTIONS (pfile)->discard_comments--;\n-      CPP_OPTIONS (pfile)->no_line_commands--;\n+      CPP_OPTION (pfile, discard_comments)--;\n+      CPP_OPTION (pfile, no_line_commands)--;\n       pfile->no_macro_expand--;\n       pfile->no_directives--;\n       if (token != CPP_RPAREN)\n@@ -1457,7 +1457,7 @@ unsafe_chars (pfile, c1, c2)\n       goto letter;\n \n     case '$':\n-      if (CPP_OPTIONS (pfile)->dollars_in_ident)\n+      if (CPP_OPTION (pfile, dollars_in_ident))\n \tgoto letter;\n       return 0;\n "}, {"sha": "33aa0d1d894e0992a82e7f0b8b10a1afbb093078", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -172,7 +172,7 @@ typedef struct ihash IHASH;\n #define IShspace\t0x08\t/* ' ' \\t \\f \\v */\n #define ISspace\t\t0x10\t/* ' ' \\t \\f \\v \\n */\n \n-#define _dollar_ok(x)\t((x) == '$' && CPP_OPTIONS (pfile)->dollars_in_ident)\n+#define _dollar_ok(x)\t((x) == '$' && CPP_OPTION (pfile, dollars_in_ident))\n \n #define is_idchar(x)\t((_cpp_IStable[x] & ISidnum) || _dollar_ok(x))\n #define is_idstart(x)\t((_cpp_IStable[x] & ISidstart) || _dollar_ok(x))\n@@ -223,10 +223,10 @@ extern unsigned char _cpp_IStable[256];\n #define CPP_BUMP_LINE(PFILE) CPP_BUMP_BUFFER_LINE(CPP_BUFFER(PFILE))\n #define CPP_PREV_BUFFER(BUFFER) ((BUFFER)->prev)\n \n-#define CPP_PRINT_DEPS(PFILE) (CPP_OPTIONS (PFILE)->print_deps)\n-#define CPP_TRADITIONAL(PFILE) (CPP_OPTIONS(PFILE)->traditional)\n+#define CPP_PRINT_DEPS(PFILE) CPP_OPTION (PFILE, print_deps)\n+#define CPP_TRADITIONAL(PFILE) CPP_OPTION (PFILE, traditional)\n #define CPP_PEDANTIC(PFILE) \\\n-  (CPP_OPTIONS (PFILE)->pedantic && !CPP_BUFFER (pfile)->system_header_p)\n+  (CPP_OPTION (PFILE, pedantic) && !CPP_BUFFER (pfile)->system_header_p)\n \n /* CPP_IS_MACRO_BUFFER is true if the buffer contains macro expansion.\n    (Note that it is false while we're expanding macro *arguments*.) */"}, {"sha": "baafb7e285fb4c82736dc82304942c254b166a2a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 354, "deletions": 332, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -92,7 +92,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    It may be overridden by the various -I and -ixxx options.\n \n    #include \"file\" looks in the same directory as the current file,\n-   then this list. \n+   then this list.\n    #include <file> just looks in this list.\n \n    All these directories are treated as `system' include directories\n@@ -213,12 +213,12 @@ static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct cpp_pending *,\n \t\t\t\t\t\t char *, int, int));\n-static void merge_include_chains\tPARAMS ((struct cpp_options *));\n+static void merge_include_chains\tPARAMS ((cpp_reader *));\n \n static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n-static void new_pending_directive\t\tPARAMS ((struct cpp_options *,\n+static void new_pending_directive\t\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t cl_directive_handler));\n #ifdef HOST_EBCDIC\n@@ -243,7 +243,7 @@ enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n #define ISTABLE unsigned char _cpp_IStable[256] = { 0 }; \\\n  static void init_IStable PARAMS ((void)) { \\\n  unsigned char *x = _cpp_IStable;\n-#define END } \n+#define END }\n #define s(p, v) x[p] = v;\n #endif\n \n@@ -342,7 +342,7 @@ append_include_chain (pfile, pend, dir, path, cxx_aware)\n       /* Dirs that don't exist are silently ignored. */\n       if (errno != ENOENT)\n \tcpp_notice_from_errno (pfile, dir);\n-      else if (CPP_OPTIONS (pfile)->verbose)\n+      else if (CPP_OPTION (pfile, verbose))\n \tfprintf (stderr, _(\"ignoring nonexistent directory `%s'\\n\"), dir);\n       return;\n     }\n@@ -356,7 +356,7 @@ append_include_chain (pfile, pend, dir, path, cxx_aware)\n   len = strlen (dir);\n   if (len > pfile->max_include_len)\n     pfile->max_include_len = len;\n-  \n+\n   new = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n   new->name = dir;\n   new->nlen = len;\n@@ -389,22 +389,24 @@ append_include_chain (pfile, pend, dir, path, cxx_aware)\n    how?) and possibly preload the include hash. */\n \n static void\n-merge_include_chains (opts)\n-     struct cpp_options *opts;\n+merge_include_chains (pfile)\n+     cpp_reader *pfile;\n {\n   struct file_name_list *prev, *cur, *other;\n   struct file_name_list *quote, *brack, *systm, *after;\n   struct file_name_list *qtail, *btail, *stail, *atail;\n \n-  qtail = opts->pending->quote_tail;\n-  btail = opts->pending->brack_tail;\n-  stail = opts->pending->systm_tail;\n-  atail = opts->pending->after_tail;\n+  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \n-  quote = opts->pending->quote_head;\n-  brack = opts->pending->brack_head;\n-  systm = opts->pending->systm_head;\n-  after = opts->pending->after_head;\n+  qtail = pend->quote_tail;\n+  btail = pend->brack_tail;\n+  stail = pend->systm_tail;\n+  atail = pend->after_tail;\n+\n+  quote = pend->quote_head;\n+  brack = pend->brack_head;\n+  systm = pend->systm_head;\n+  after = pend->after_head;\n \n   /* Paste together bracket, system, and after include chains. */\n   if (stail)\n@@ -437,7 +439,7 @@ merge_include_chains (opts)\n         if (INO_T_EQ (cur->ino, other->ino)\n \t    && cur->dev == other->dev)\n           {\n-\t    if (opts->verbose)\n+\t    if (CPP_OPTION (pfile, verbose))\n \t      fprintf (stderr, _(\"ignoring duplicate directory `%s'\\n\"),\n \t\t       cur->name);\n \n@@ -457,7 +459,7 @@ merge_include_chains (opts)\n         if (INO_T_EQ (cur->ino, other->ino)\n \t    && cur->dev == other->dev)\n           {\n-\t    if (opts->verbose)\n+\t    if (CPP_OPTION (pfile, verbose))\n \t      fprintf (stderr, _(\"ignoring duplicate directory `%s'\\n\"),\n \t\t       cur->name);\n \n@@ -476,7 +478,7 @@ merge_include_chains (opts)\n         {\n \t  if (quote == qtail)\n \t    {\n-\t      if (opts->verbose)\n+\t      if (CPP_OPTION (pfile, verbose))\n \t\tfprintf (stderr, _(\"ignoring duplicate directory `%s'\\n\"),\n \t\t\t quote->name);\n \n@@ -490,7 +492,7 @@ merge_include_chains (opts)\n \t      while (cur->next != qtail)\n \t\t  cur = cur->next;\n \t      cur->next = brack;\n-\t      if (opts->verbose)\n+\t      if (CPP_OPTION (pfile, verbose))\n \t\tfprintf (stderr, _(\"ignoring duplicate directory `%s'\\n\"),\n \t\t\t qtail->name);\n \n@@ -504,8 +506,8 @@ merge_include_chains (opts)\n   else\n       quote = brack;\n \n-  opts->quote_include = quote;\n-  opts->bracket_include = brack;\n+  CPP_OPTION (pfile, quote_include) = quote;\n+  CPP_OPTION (pfile, bracket_include) = brack;\n }\n \n \n@@ -528,22 +530,6 @@ dump_special_to_buffer (pfile, macro_name)\n   CPP_PUTC (pfile, '\\n');\n }\n \n-/* Initialize a cpp_options structure. */\n-void\n-cpp_options_init (opts)\n-     cpp_options *opts;\n-{\n-  memset ((char *) opts, 0, sizeof (struct cpp_options));\n-\n-  opts->dollars_in_ident = 1;\n-  opts->cplusplus_comments = 1;\n-  opts->warn_import = 1;\n-  opts->discard_comments = 1;\n-\n-  opts->pending =\n-    (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n-}\n-\n /* Initialize a cpp_reader structure. */\n void\n cpp_reader_init (pfile)\n@@ -555,6 +541,15 @@ cpp_reader_init (pfile)\n   pfile->token_buffer = (U_CHAR *) xmalloc (pfile->token_buffer_size);\n   CPP_SET_WRITTEN (pfile, 0);\n \n+  CPP_OPTION (pfile, dollars_in_ident) = 1;\n+  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+  CPP_OPTION (pfile, warn_import) = 1;\n+  CPP_OPTION (pfile, discard_comments) = 1;\n+  CPP_OPTION (pfile, show_column) = 1;\n+\n+  CPP_OPTION (pfile, pending) =\n+    (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n+\n   _cpp_init_macro_hash (pfile);\n   _cpp_init_include_hash (pfile);\n }\n@@ -665,7 +660,7 @@ initialize_builtins (pfile)\n       hp->value.cpval = val;\n       *(htab_find_slot (pfile->hashtab, (void *)hp, 1)) = hp;\n \n-      if ((b->flags & DUMP) && CPP_OPTIONS (pfile)->debug_output)\n+      if ((b->flags & DUMP) && CPP_OPTION (pfile, debug_output))\n \tdump_special_to_buffer (pfile, b->name);\n     }\n \n@@ -681,24 +676,23 @@ static void\n initialize_dependency_output (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_options *opts = CPP_OPTIONS (pfile);\n   char *spec, *s, *output_file;\n-  \n+\n   /* Either of two environment variables can specify output of deps.\n      Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n      where OUTPUT_FILE is the file to write deps info to\n      and DEPS_TARGET is the target to mention in the deps.  */\n \n-  if (opts->print_deps == 0)\n+  if (CPP_OPTION (pfile, print_deps) == 0)\n     {\n       spec = getenv (\"DEPENDENCIES_OUTPUT\");\n       if (spec)\n-\topts->print_deps = 1;\n+\tCPP_OPTION (pfile, print_deps) = 1;\n       else\n \t{\n \t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n \t  if (spec)\n-\t    opts->print_deps = 2;\n+\t    CPP_OPTION (pfile, print_deps) = 2;\n \t  else\n \t    return;\n \t}\n@@ -707,44 +701,43 @@ initialize_dependency_output (pfile)\n       s = strchr (spec, ' ');\n       if (s)\n \t{\n-\t  opts->deps_target = s + 1;\n+\t  CPP_OPTION (pfile, deps_target) = s + 1;\n \t  output_file = (char *) xmalloc (s - spec + 1);\n \t  memcpy (output_file, spec, s - spec);\n \t  output_file[s - spec] = 0;\n \t}\n       else\n \t{\n-\t  opts->deps_target = 0;\n+\t  CPP_OPTION (pfile, deps_target) = 0;\n \t  output_file = spec;\n \t}\n \n-      opts->deps_file = output_file;\n-      opts->print_deps_append = 1;\n+      CPP_OPTION (pfile, deps_file) = output_file;\n+      CPP_OPTION (pfile, print_deps_append) = 1;\n     }\n \n   pfile->deps = deps_init ();\n \n   /* Print the expected object file name as the target of this Make-rule.  */\n-  if (opts->deps_target)\n-    deps_add_target (pfile->deps, opts->deps_target);\n-  else if (*opts->in_fname == 0)\n+  if (CPP_OPTION (pfile, deps_target))\n+    deps_add_target (pfile->deps, CPP_OPTION (pfile, deps_target));\n+  else if (*CPP_OPTION (pfile, in_fname) == 0)\n     deps_add_target (pfile->deps, \"-\");\n   else\n-    deps_calc_target (pfile->deps, opts->in_fname);\n+    deps_calc_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n \n-  if (opts->in_fname)\n-    deps_add_dep (pfile->deps, opts->in_fname);\n+  if (CPP_OPTION (pfile, in_fname))\n+    deps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n }\n \n /* And another subroutine.  This one sets up the standard include path.  */\n static void\n initialize_standard_includes (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_options *opts = CPP_OPTIONS (pfile);\n   char *path;\n   const struct default_include *p;\n-  const char *specd_prefix = opts->include_prefix;\n+  const char *specd_prefix = CPP_OPTION (pfile, include_prefix);\n \n   /* Several environment variables may add to the include search path.\n      CPATH specifies an additional list of directories to be searched\n@@ -754,9 +747,9 @@ initialize_standard_includes (pfile)\n \n   GET_ENV_PATH_LIST (path, \"CPATH\");\n   if (path != 0 && *path != 0)\n-    path_include (pfile, opts->pending, path, BRACKET);\n+    path_include (pfile, CPP_OPTION (pfile, pending), path, BRACKET);\n \n-  switch ((opts->objc << 1) + opts->cplusplus)\n+  switch ((CPP_OPTION (pfile, objc) << 1) + CPP_OPTION (pfile, cplusplus))\n     {\n     case 0:\n       GET_ENV_PATH_LIST (path, \"C_INCLUDE_PATH\");\n@@ -772,7 +765,7 @@ initialize_standard_includes (pfile)\n       break;\n     }\n   if (path != 0 && *path != 0)\n-    path_include (pfile, opts->pending, path, SYSTEM);\n+    path_include (pfile, CPP_OPTION (pfile, pending), path, SYSTEM);\n \n   /* Search \"translated\" versions of GNU directories.\n      These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n@@ -791,8 +784,8 @@ initialize_standard_includes (pfile)\n \t{\n \t  /* Some standard dirs are only for C++.  */\n \t  if (!p->cplusplus\n-\t      || (opts->cplusplus\n-\t\t  && !opts->no_standard_cplusplus_includes))\n+\t      || (CPP_OPTION (pfile, cplusplus)\n+\t\t  && !CPP_OPTION (pfile, no_standard_cplusplus_includes)))\n \t    {\n \t      /* Does this dir start with the prefix?  */\n \t      if (!strncmp (p->fname, default_prefix, default_len))\n@@ -806,7 +799,7 @@ initialize_standard_includes (pfile)\n \t\t\t  p->fname + default_len,\n \t\t\t  flen - default_len + 1);\n \n-\t\t  append_include_chain (pfile, opts->pending,\n+\t\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n \t\t\t\t\tstr, SYSTEM, p->cxx_aware);\n \t\t}\n \t    }\n@@ -818,13 +811,13 @@ initialize_standard_includes (pfile)\n     {\n       /* Some standard dirs are only for C++.  */\n       if (!p->cplusplus\n-\t  || (opts->cplusplus\n-\t      && !opts->no_standard_cplusplus_includes))\n+\t  || (CPP_OPTION (pfile, cplusplus)\n+\t      && !CPP_OPTION (pfile, no_standard_cplusplus_includes)))\n \t{\n \t  /* XXX Potential memory leak! */\n \t  char *str = xstrdup (update_path (p->fname, p->component));\n-\t  append_include_chain (pfile, opts->pending, str, SYSTEM,\n-\t\t\t\tp->cxx_aware);\n+\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n+\t\t\t\tstr, SYSTEM, p->cxx_aware);\n \t}\n     }\n }\n@@ -840,24 +833,24 @@ cpp_start_read (pfile, fname)\n      cpp_reader *pfile;\n      const char *fname;\n {\n-  struct cpp_options *opts = CPP_OPTIONS (pfile);\n   struct pending_option *p, *q;\n \n   /* -MG doesn't select the form of output and must be specified with one of\n      -M or -MM.  -MG doesn't make sense with -MD or -MMD since they don't\n      inhibit compilation.  */\n-  if (opts->print_deps_missing_files\n-      && (opts->print_deps == 0 || !opts->no_output))\n+  if (CPP_OPTION (pfile, print_deps_missing_files)\n+      && (CPP_OPTION (pfile, print_deps) == 0\n+\t  || !CPP_OPTION (pfile, no_output)))\n     {\n       cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n       return 0;\n     }\n \n   /* Chill should not be used with -trigraphs. */\n-  if (opts->chill && opts->trigraphs)\n+  if (CPP_OPTION (pfile, chill) && CPP_OPTION (pfile, trigraphs))\n     {\n       cpp_warning (pfile, \"-lang-chill and -trigraphs are mutually exclusive\");\n-      opts->trigraphs = 0;\n+      CPP_OPTION (pfile, trigraphs) = 0;\n     }\n \n   /* Set this if it hasn't been set already. */\n@@ -866,7 +859,7 @@ cpp_start_read (pfile, fname)\n \n   /* Don't bother trying to do macro expansion if we've already done\n      preprocessing.  */\n-  if (opts->preprocessed)\n+  if (CPP_OPTION (pfile, preprocessed))\n     pfile->no_macro_expand++;\n \n   /* Set up the IStable.  This doesn't do anything if we were compiled\n@@ -875,21 +868,21 @@ cpp_start_read (pfile, fname)\n \n   /* Set up the tables used by read_and_prescan.  */\n   _cpp_init_input_buffer (pfile);\n-  \n+\n   /* Set up the include search path now.  */\n-  if (! opts->no_standard_includes)\n+  if (! CPP_OPTION (pfile, no_standard_includes))\n     initialize_standard_includes (pfile);\n \n-  merge_include_chains (opts);\n+  merge_include_chains (pfile);\n \n   /* With -v, print the list of dirs to search.  */\n-  if (opts->verbose)\n+  if (CPP_OPTION (pfile, verbose))\n     {\n       struct file_name_list *l;\n       fprintf (stderr, _(\"#include \\\"...\\\" search starts here:\\n\"));\n-      for (l = opts->quote_include; l; l = l->next)\n+      for (l = CPP_OPTION (pfile, quote_include); l; l = l->next)\n \t{\n-\t  if (l == opts->bracket_include)\n+\t  if (l == CPP_OPTION (pfile, bracket_include))\n \t    fprintf (stderr, _(\"#include <...> search starts here:\\n\"));\n \t  fprintf (stderr, \" %s\\n\", l->name);\n \t}\n@@ -898,18 +891,21 @@ cpp_start_read (pfile, fname)\n \n   /* Open the main input file.  This must be done early, so we have a\n      buffer to stand on.  */\n-  if (opts->in_fname == NULL || *opts->in_fname == 0)\n+  if (CPP_OPTION (pfile, in_fname) == NULL\n+      || *CPP_OPTION (pfile, in_fname) == 0)\n     {\n-      opts->in_fname = fname;\n-      if (opts->in_fname == NULL)\n-\topts->in_fname = \"\";\n+      CPP_OPTION (pfile, in_fname) = fname;\n+      if (CPP_OPTION (pfile, in_fname) == NULL)\n+\tCPP_OPTION (pfile, in_fname) = \"\";\n     }\n+  if (CPP_OPTION (pfile, out_fname) == NULL)\n+    CPP_OPTION (pfile, out_fname) = \"\";\n \n   if (!cpp_read_file (pfile, fname))\n     return 0;\n \n   initialize_dependency_output (pfile);\n-  \n+\n   /* -D and friends may produce output, which should be identified\n      as line 0.  */\n \n@@ -919,7 +915,7 @@ cpp_start_read (pfile, fname)\n   initialize_builtins (pfile);\n \n   /* Do -U's, -D's and -A's in the order they were seen.  */\n-  p = opts->pending->directive_head;\n+  p = CPP_OPTION (pfile, pending)->directive_head;\n   while (p)\n     {\n       (*p->handler) (pfile, p->arg);\n@@ -928,10 +924,10 @@ cpp_start_read (pfile, fname)\n       p = q;\n     }\n \n-  opts->done_initializing = 1;\n+  pfile->done_initializing = 1;\n   CPP_BUFFER (pfile)->lineno = 1;\n \n-  if (opts->preprocessed)\n+  if (CPP_OPTION (pfile, preprocessed))\n     /* If we've already processed this code, we want to trust the #line\n        directives in the input.  But we still need to update our line\n        counter accordingly.  */\n@@ -943,9 +939,9 @@ cpp_start_read (pfile, fname)\n   /* The -imacros files can be scanned now, but the -include files\n      have to be pushed onto the include stack and processed later,\n      in the main loop calling cpp_get_token.  */\n-  \n-  opts->no_output++;\n-  p = opts->pending->imacros_head;\n+\n+  CPP_OPTION (pfile, no_output)++;\n+  p = CPP_OPTION (pfile, pending)->imacros_head;\n   while (p)\n     {\n       if (cpp_read_file (pfile, p->arg))\n@@ -955,9 +951,9 @@ cpp_start_read (pfile, fname)\n       free (p);\n       p = q;\n     }\n-  opts->no_output--;\n+  CPP_OPTION (pfile, no_output)--;\n \n-  p = opts->pending->include_head;\n+  p = CPP_OPTION (pfile, pending)->include_head;\n   while (p)\n     {\n       if (cpp_read_file (pfile, p->arg))\n@@ -968,8 +964,8 @@ cpp_start_read (pfile, fname)\n       p = q;\n     }\n \n-  free (opts->pending);\n-  opts->pending = NULL;\n+  free (CPP_OPTION (pfile, pending));\n+  CPP_OPTION (pfile, pending) = NULL;\n \n   return 1;\n }\n@@ -982,43 +978,44 @@ void\n cpp_finish (pfile)\n      cpp_reader *pfile;\n {\n-  struct cpp_options *opts = CPP_OPTIONS (pfile);\n-\n   if (CPP_PREV_BUFFER (CPP_BUFFER (pfile)))\n     cpp_ice (pfile, \"buffers still stacked in cpp_finish\");\n   while (CPP_BUFFER (pfile))\n     cpp_pop_buffer (pfile);\n \n   /* Don't write the deps file if preprocessing has failed.  */\n-  if (opts->print_deps && pfile->errors == 0)\n+  if (CPP_OPTION (pfile, print_deps) && pfile->errors == 0)\n     {\n       /* Stream on which to print the dependency information.  */\n       FILE *deps_stream = 0;\n-\n-      const char *deps_mode = opts->print_deps_append ? \"a\" : \"w\";\n-      if (opts->deps_file == 0)\n+      const char *deps_mode\n+\t= CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n+      if (CPP_OPTION (pfile, deps_file) == 0)\n \tdeps_stream = stdout;\n-      else if ((deps_stream = fopen (opts->deps_file, deps_mode)) == 0)\n-\tcpp_notice_from_errno (pfile, opts->deps_file);\n-\n+      else\n+\t{\n+\t  deps_stream = fopen (CPP_OPTION (pfile, deps_file), deps_mode);\n+\t  if (deps_stream == 0)\n+\t    cpp_notice_from_errno (pfile, CPP_OPTION (pfile, deps_file));\n+\t}\n       if (deps_stream)\n \t{\n \t  deps_write (pfile->deps, deps_stream, 72);\n-\t  if (opts->deps_file)\n+\t  if (CPP_OPTION (pfile, deps_file))\n \t    {\n \t      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n \t\tcpp_fatal (pfile, \"I/O error on output\");\n \t    }\n \t}\n     }\n \n-  if (opts->dump_macros == dump_only)\n+  if (CPP_OPTION (pfile, dump_macros) == dump_only)\n     _cpp_dump_macro_hash (pfile);\n }\n \n static void\n-new_pending_directive (opts, text, handler)\n-     struct cpp_options *opts;\n+new_pending_directive (pend, text, handler)\n+     struct cpp_pending *pend;\n      const char *text;\n      cl_directive_handler handler;\n {\n@@ -1028,34 +1025,92 @@ new_pending_directive (opts, text, handler)\n   o->arg = text;\n   o->next = NULL;\n   o->handler = handler;\n-  APPEND (opts->pending, directive, o);\n+  APPEND (pend, directive, o);\n }\n \n+/* Irix6 \"cc -n32\" and OSF4 cc have problems with char foo[] = (\"string\");\n+   I.e. a const string initializer with parens around it.  That is\n+   what N_(\"string\") resolves to, so we make no_* be macros instead.  */\n+#define no_arg N_(\"Argument missing after %s\")\n+#define no_ass N_(\"Assertion missing after %s\")\n+#define no_dir N_(\"Directory name missing after %s\")\n+#define no_fil N_(\"File name missing after %s\")\n+#define no_mac N_(\"Macro name missing after %s\")\n+#define no_pth N_(\"Path name missing after %s\")\n+\n+/* This is the list of all command line options, with the leading\n+   \"-\" removed.  It must be sorted in ASCII collating order.  */\n+#define COMMAND_LINE_OPTIONS                                                  \\\n+  DEF_OPT(\"\",                         0,      OPT_stdin_stdout)               \\\n+  DEF_OPT(\"$\",                        0,      OPT_dollar)                     \\\n+  DEF_OPT(\"+\",                        0,      OPT_plus)                       \\\n+  DEF_OPT(\"-help\",                    0,      OPT__help)                      \\\n+  DEF_OPT(\"-version\",                 0,      OPT__version)                   \\\n+  DEF_OPT(\"A\",                        no_ass, OPT_A)                          \\\n+  DEF_OPT(\"C\",                        0,      OPT_C)                          \\\n+  DEF_OPT(\"D\",                        no_mac, OPT_D)                          \\\n+  DEF_OPT(\"H\",                        0,      OPT_H)                          \\\n+  DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n+  DEF_OPT(\"M\",                        0,      OPT_M)                          \\\n+  DEF_OPT(\"MD\",                       no_fil, OPT_MD)                         \\\n+  DEF_OPT(\"MG\",                       0,      OPT_MG)                         \\\n+  DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n+  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n+  DEF_OPT(\"P\",                        0,      OPT_P)                          \\\n+  DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n+  DEF_OPT(\"W\",                        no_arg, OPT_W)  /* arg optional */      \\\n+  DEF_OPT(\"d\",                        no_arg, OPT_d)                          \\\n+  DEF_OPT(\"fleading-underscore\",      0,      OPT_fleading_underscore)        \\\n+  DEF_OPT(\"fno-leading-underscore\",   0,      OPT_fno_leading_underscore)     \\\n+  DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed)           \\\n+  DEF_OPT(\"fno-show-column\",          0,      OPT_fno_show_column)            \\\n+  DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed)              \\\n+  DEF_OPT(\"fshow-column\",             0,      OPT_fshow_column)               \\\n+  DEF_OPT(\"g\",                        no_arg, OPT_g)  /* arg optional */      \\\n+  DEF_OPT(\"h\",                        0,      OPT_h)                          \\\n+  DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n+  DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n+  DEF_OPT(\"include\",                  no_fil, OPT_include)                    \\\n+  DEF_OPT(\"iprefix\",                  no_pth, OPT_iprefix)                    \\\n+  DEF_OPT(\"isystem\",                  no_dir, OPT_isystem)                    \\\n+  DEF_OPT(\"iwithprefix\",              no_dir, OPT_iwithprefix)                \\\n+  DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore)          \\\n+  DEF_OPT(\"lang-asm\",                 0,      OPT_lang_asm)                   \\\n+  DEF_OPT(\"lang-c\",                   0,      OPT_lang_c)                     \\\n+  DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus)             \\\n+  DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89)                   \\\n+  DEF_OPT(\"lang-chill\",               0,      OPT_lang_chill)                 \\\n+  DEF_OPT(\"lang-fortran\",             0,      OPT_lang_fortran)               \\\n+  DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc)                  \\\n+  DEF_OPT(\"lang-objc++\",              0,      OPT_lang_objcplusplus)          \\\n+  DEF_OPT(\"nostdinc\",                 0,      OPT_nostdinc)                   \\\n+  DEF_OPT(\"nostdinc++\",               0,      OPT_nostdincplusplus)           \\\n+  DEF_OPT(\"o\",                        no_fil, OPT_o)                          \\\n+  DEF_OPT(\"pedantic\",                 0,      OPT_pedantic)                   \\\n+  DEF_OPT(\"pedantic-errors\",          0,      OPT_pedantic_errors)            \\\n+  DEF_OPT(\"remap\",                    0,      OPT_remap)                      \\\n+  DEF_OPT(\"std=c89\",                  0,      OPT_std_c89)                    \\\n+  DEF_OPT(\"std=c99\",                  0,      OPT_std_c99)                    \\\n+  DEF_OPT(\"std=c9x\",                  0,      OPT_std_c9x)                    \\\n+  DEF_OPT(\"std=gnu89\",                0,      OPT_std_gnu89)                  \\\n+  DEF_OPT(\"std=gnu99\",                0,      OPT_std_gnu99)                  \\\n+  DEF_OPT(\"std=gnu9x\",                0,      OPT_std_gnu9x)                  \\\n+  DEF_OPT(\"std=iso9899:1990\",         0,      OPT_std_iso9899_1990)           \\\n+  DEF_OPT(\"std=iso9899:199409\",       0,      OPT_std_iso9899_199409)         \\\n+  DEF_OPT(\"std=iso9899:1999\",         0,      OPT_std_iso9899_1999)           \\\n+  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x)           \\\n+  DEF_OPT(\"traditional\",              0,      OPT_traditional)                \\\n+  DEF_OPT(\"trigraphs\",                0,      OPT_trigraphs)                  \\\n+  DEF_OPT(\"v\",                        0,      OPT_v)                          \\\n+  DEF_OPT(\"w\",                        0,      OPT_w)\n+\n+#define DEF_OPT(text, msg, code) code,\n enum opt_code\n {\n-  OPT_stdin_stdout = 0, OPT_dollar, OPT_plus,\n-  OPT__help, OPT__version,\n-  OPT_A, OPT_C, OPT_D, OPT_H, OPT_I, OPT_M,\n-  OPT_MD, OPT_MG, OPT_MM, OPT_MMD,\n-  OPT_P, OPT_U, OPT_W,\n-  OPT_d,\n-  OPT_fleading_underscore, OPT_fno_leading_underscore,\n-  OPT_fpreprocessed, OPT_fno_preprocessed,\n-  OPT_g, OPT_h, \n-  OPT_idirafter, OPT_imacros, OPT_include,\n-  OPT_iprefix, OPT_isystem, OPT_iwithprefix, OPT_iwithprefixbefore,\n-  OPT_lang_asm, OPT_lang_c, OPT_lang_cplusplus, OPT_lang_c89,\n-  OPT_lang_chill, OPT_lang_fortran, OPT_lang_objc, OPT_lang_objcplusplus,\n-  OPT_nostdinc, OPT_nostdincplusplus,\n-  OPT_o,\n-  OPT_pedantic, OPT_pedantic_errors, OPT_remap,\n-  OPT_std_c89, OPT_std_c99, OPT_std_c9x, OPT_std_gnu89, OPT_std_gnu99,\n-  OPT_std_gnu9x, OPT_std_iso9899_1990, OPT_std_iso9899_199409,\n-  OPT_std_iso9899_1999, OPT_std_iso9899_199x,\n-  OPT_traditional, OPT_trigraphs,\n-  OPT_v, OPT_w,\n+  COMMAND_LINE_OPTIONS\n   N_OPTS\n };\n+#undef DEF_OPT\n \n struct cl_option\n {\n@@ -1065,89 +1120,17 @@ struct cl_option\n   enum opt_code opt_code;\n };\n \n-/* Irix6 \"cc -n32\" and OSF4 cc have problems with char foo[] = (\"string\");\n-   I.e. a const string initializer with parens around it.  That is\n-   what N_(\"string\") resolves to, so we make no_* be macros instead.  */\n-#define no_arg N_(\"Argument missing after `%s' option\")\n-#define no_ass N_(\"Assertion missing after `%s' option\")\n-#define no_dir N_(\"Directory name missing after `%s' option\")\n-#define no_fil N_(\"File name missing after `%s' option\")\n-#define no_mac N_(\"Macro name missing after `%s' option\")\n-#define no_pth N_(\"Path name missing after `%s' option\")\n-\n-/* This list must be ASCII sorted. Make enum order above match this. */\n-#define DEF_OPT(text, msg, code) {text, msg, sizeof(text) - 1, code}\n-\n+#define DEF_OPT(text, msg, code) { text, msg, sizeof(text) - 1, code },\n #ifdef HOST_EBCDIC\n static struct cl_option cl_options[] =\n #else\n static const struct cl_option cl_options[] =\n #endif\n {\n-  DEF_OPT(\"\",                         0,      OPT_stdin_stdout),\n-  DEF_OPT(\"$\",                        0,      OPT_dollar),\n-  DEF_OPT(\"+\",                        0,      OPT_plus),\n-  DEF_OPT(\"-help\",                    0,      OPT__help),\n-  DEF_OPT(\"-version\",                 0,      OPT__version),\n-  DEF_OPT(\"A\",                        no_ass, OPT_A),\n-  DEF_OPT(\"C\",                        0,      OPT_C),\n-  DEF_OPT(\"D\",                        no_mac, OPT_D),\n-  DEF_OPT(\"H\",                        0,      OPT_H),\n-  DEF_OPT(\"I\",                        no_dir, OPT_I),\n-  DEF_OPT(\"M\",                        0,      OPT_M),\n-  DEF_OPT(\"MD\",                       no_fil, OPT_MD),\n-  DEF_OPT(\"MG\",                       0,      OPT_MG),\n-  DEF_OPT(\"MM\",                       0,      OPT_MM),\n-  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD),\n-  DEF_OPT(\"P\",                        0,      OPT_P),\n-  DEF_OPT(\"U\",                        no_mac, OPT_U),\n-  /* NB: Immed arg only, and not reqd */\n-  DEF_OPT(\"W\",                        no_arg, OPT_W),\n-  DEF_OPT(\"d\",                        no_arg, OPT_d),\n-  DEF_OPT(\"fleading-underscore\",      0,      OPT_fleading_underscore),\n-  DEF_OPT(\"fno-leading-underscore\",   0,      OPT_fno_leading_underscore),\n-  DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed),\n-  DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed),\n-  /* NB: Immed arg only, and not reqd */\n-  DEF_OPT(\"g\",                        no_arg, OPT_g),\n-  DEF_OPT(\"h\",                        0,      OPT_h),\n-  DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter),\n-  DEF_OPT(\"imacros\",                  no_fil, OPT_imacros),\n-  DEF_OPT(\"include\",                  no_fil, OPT_include),\n-  DEF_OPT(\"iprefix\",                  no_pth, OPT_iprefix),\n-  DEF_OPT(\"isystem\",                  no_dir, OPT_isystem),\n-  DEF_OPT(\"iwithprefix\",              no_dir, OPT_iwithprefix),\n-  DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore),\n-  DEF_OPT(\"lang-asm\",                 0,      OPT_lang_asm),\n-  DEF_OPT(\"lang-c\",                   0,      OPT_lang_c),\n-  DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus),\n-  DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89),\n-  DEF_OPT(\"lang-chill\",               0,      OPT_lang_chill),\n-  DEF_OPT(\"lang-fortran\",             0,      OPT_lang_fortran),\n-  DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc),\n-  DEF_OPT(\"lang-objc++\",              0,      OPT_lang_objcplusplus),\n-  DEF_OPT(\"nostdinc\",                 0,      OPT_nostdinc),\n-  DEF_OPT(\"nostdinc++\",               0,      OPT_nostdincplusplus),\n-  DEF_OPT(\"o\",                        no_fil, OPT_o),\n-  DEF_OPT(\"pedantic\",                 0,      OPT_pedantic),\n-  DEF_OPT(\"pedantic-errors\",          0,      OPT_pedantic_errors),\n-  DEF_OPT(\"remap\",                    0,      OPT_remap),\n-  DEF_OPT(\"std=c89\",                  0,      OPT_std_c89),\n-  DEF_OPT(\"std=c99\",                  0,      OPT_std_c99),\n-  DEF_OPT(\"std=c9x\",                  0,      OPT_std_c9x),\n-  DEF_OPT(\"std=gnu89\",                0,      OPT_std_gnu89),\n-  DEF_OPT(\"std=gnu99\",                0,      OPT_std_gnu99),\n-  DEF_OPT(\"std=gnu9x\",                0,      OPT_std_gnu9x),\n-  DEF_OPT(\"std=iso9899:1990\",         0,      OPT_std_iso9899_1990),\n-  DEF_OPT(\"std=iso9899:199409\",       0,      OPT_std_iso9899_199409),\n-  DEF_OPT(\"std=iso9899:1999\",         0,      OPT_std_iso9899_1999),\n-  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x),\n-  DEF_OPT(\"traditional\",              0,      OPT_traditional),\n-  DEF_OPT(\"trigraphs\",                0,      OPT_trigraphs),\n-  DEF_OPT(\"v\",                        0,      OPT_v),\n-  DEF_OPT(\"w\",                        0,      OPT_w)\n+  COMMAND_LINE_OPTIONS\n };\n #undef DEF_OPT\n+#undef COMMAND_LINE_OPTIONS\n \n /* Perform a binary search to find which, if any, option the given\n    command-line matches.  Returns its index in the option array,\n@@ -1171,10 +1154,10 @@ parse_option (input)\n   while (mx > mn)\n     {\n       md = (mn + mx) / 2;\n-    \n+\n       opt_len = cl_options[md].opt_len;\n       comp = strncmp (input, cl_options[md].opt_text, opt_len);\n-    \n+\n       if (comp > 0)\n \tmn = md + 1;\n       else if (comp < 0)\n@@ -1223,20 +1206,17 @@ handle_option (pfile, argc, argv)\n      int argc;\n      char **argv;\n {\n-  struct cpp_options *opts = CPP_OPTIONS (pfile);\n   int i = 0;\n \n   if (argv[i][0] != '-')\n     {\n-      if (opts->out_fname != NULL)\n-\t{\n-\t  print_help ();\n-\t  cpp_fatal (pfile, \"Too many arguments\");\n-\t}\n-      else if (opts->in_fname != NULL)\n-\topts->out_fname = argv[i];\n+      if (CPP_OPTION (pfile, out_fname) != NULL)\n+\tcpp_fatal (pfile, \"Too many arguments. Type %s --help for usage info\",\n+\t\t   progname);\n+      else if (CPP_OPTION (pfile, in_fname) != NULL)\n+\tCPP_OPTION (pfile, out_fname) = argv[i];\n       else\n-\topts->in_fname = argv[i];\n+\tCPP_OPTION (pfile, in_fname) = argv[i];\n     }\n   else\n     {\n@@ -1267,7 +1247,7 @@ handle_option (pfile, argc, argv)\n \t\t}\n \t    }\n \t}\n- \n+\n       switch (opt_code)\n \t{\n \tcase N_OPTS: /* shut GCC up */\n@@ -1279,17 +1259,23 @@ handle_option (pfile, argc, argv)\n \t  user_label_prefix = \"\";\n \t  break;\n \tcase OPT_fpreprocessed:\n-\t  opts->preprocessed = 1;\n+\t  CPP_OPTION (pfile, preprocessed) = 1;\n \t  break;\n \tcase OPT_fno_preprocessed:\n-\t  opts->preprocessed = 0;\n+\t  CPP_OPTION (pfile, preprocessed) = 0;\n+\t  break;\n+\tcase OPT_fshow_column:\n+\t  CPP_OPTION (pfile, show_column) = 1;\n+\t  break;\n+\tcase OPT_fno_show_column:\n+\t  CPP_OPTION (pfile, show_column) = 0;\n \t  break;\n \tcase OPT_w:\n-\t  opts->inhibit_warnings = 1;\n+\t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n \t  break;\n \tcase OPT_g:  /* Silently ignore anything but -g3 */\n \t  if (!strcmp(&argv[i][2], \"3\"))\n-\t    opts->debug_output = 1;\n+\t    CPP_OPTION (pfile, debug_output) = 1;\n \t  break;\n \tcase OPT_h:\n \tcase OPT__help:\n@@ -1301,162 +1287,194 @@ handle_option (pfile, argc, argv)\n \t  exit (0);  /* XXX */\n \t  break;\n \tcase OPT_C:\n-\t  opts->discard_comments = 0;\n+\t  CPP_OPTION (pfile, discard_comments) = 0;\n \t  break;\n \tcase OPT_P:\n-\t  opts->no_line_commands = 1;\n+\t  CPP_OPTION (pfile, no_line_commands) = 1;\n \t  break;\n \tcase OPT_dollar:\t\t/* Don't include $ in identifiers.  */\n-\t  opts->dollars_in_ident = 0;\n+\t  CPP_OPTION (pfile, dollars_in_ident) = 0;\n \t  break;\n \tcase OPT_H:\n-\t  opts->print_include_names = 1;\n+\t  CPP_OPTION (pfile, print_include_names) = 1;\n \t  break;\n \tcase OPT_D:\n-\t  new_pending_directive (opts, arg, cpp_define);\n+\t  new_pending_directive (CPP_OPTION (pfile, pending), arg, cpp_define);\n \t  break;\n \tcase OPT_pedantic_errors:\n-\t  opts->pedantic_errors = 1;\n+\t  CPP_OPTION (pfile, pedantic_errors) = 1;\n \t  /* fall through */\n \tcase OPT_pedantic:\n- \t  opts->pedantic = 1;\n+ \t  CPP_OPTION (pfile, pedantic) = 1;\n \t  break;\n \tcase OPT_traditional:\n-\t  opts->traditional = 1;\n-\t  opts->cplusplus_comments = 0;\n-\t  opts->trigraphs = 0;\n-\t  opts->warn_trigraphs = 0;\n+\t  CPP_OPTION (pfile, traditional) = 1;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n+\t  CPP_OPTION (pfile, trigraphs) = 0;\n+\t  CPP_OPTION (pfile, warn_trigraphs) = 0;\n \t  break;\n \tcase OPT_trigraphs:\n- \t  opts->trigraphs = 1;\n+ \t  CPP_OPTION (pfile, trigraphs) = 1;\n \t  break;\n \tcase OPT_plus:\n-\t  opts->cplusplus = 1;\n-\t  opts->cplusplus_comments = 1;\n+\t  CPP_OPTION (pfile, cplusplus) = 1;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n \t  break;\n \tcase OPT_remap:\n-\t  opts->remap = 1;\n+\t  CPP_OPTION (pfile, remap) = 1;\n \t  break;\n \tcase OPT_iprefix:\n-\t  opts->include_prefix = arg;\n-\t  opts->include_prefix_len = strlen (arg);\n+\t  CPP_OPTION (pfile, include_prefix) = arg;\n+\t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n \t  break;\n \tcase OPT_lang_c:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 0;\n+\t  CPP_OPTION (pfile, c99) = 1;\n+\t  CPP_OPTION (pfile, objc) = 0;\n \t  break;\n \tcase OPT_lang_c89:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t  opts->trigraphs = 1;\n-\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n+\t  CPP_OPTION (pfile, c89) = 1;\n+\t  CPP_OPTION (pfile, c99) = 0;\n+\t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, trigraphs) = 1;\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STRICT_ANSI__\", cpp_define);\n \t  break;\n \tcase OPT_lang_cplusplus:\n-\t  opts->cplusplus = 1, opts->cplusplus_comments = 1;\n-\t  opts->c89 = 0, opts->c99 = 0, opts->objc = 0;\n+\t  CPP_OPTION (pfile, cplusplus) = 1;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 0;\n+\t  CPP_OPTION (pfile, c99) = 0;\n+\t  CPP_OPTION (pfile, objc) = 0;\n \t  break;\n \tcase OPT_lang_objc:\n \tcase OPT_lang_objcplusplus:\n-\t  opts->cplusplus = opt_code == OPT_lang_objcplusplus;\n-\t  opts->cplusplus_comments = 1;\n-\t  opts->c89 = 0, opts->c99 = 0, opts->objc = 1;\n+\t  CPP_OPTION (pfile, cplusplus) = opt_code == OPT_lang_objcplusplus;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 0;\n+\t  CPP_OPTION (pfile, c99) = 0;\n+\t  CPP_OPTION (pfile, objc) = 1;\n \t  break;\n \tcase OPT_lang_asm:\n- \t  opts->lang_asm = 1;\n+ \t  CPP_OPTION (pfile, lang_asm) = 1;\n \t  break;\n \tcase OPT_lang_fortran:\n- \t  opts->lang_fortran = 1, opts->cplusplus_comments = 0;\n+ \t  CPP_OPTION (pfile, lang_fortran) = 1;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n \t  break;\n \tcase OPT_lang_chill:\n-\t  opts->objc = 0, opts->cplusplus = 0;\n-\t  opts->chill = 1, opts->traditional = 1;\n+\t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, chill) = 1;\n+\t  CPP_OPTION (pfile, traditional) = 1;\n \t  break;\n \tcase OPT_nostdinc:\n \t  /* -nostdinc causes no default include directories.\n \t     You must specify all include-file directories with -I.  */\n-\t  opts->no_standard_includes = 1;\n+\t  CPP_OPTION (pfile, no_standard_includes) = 1;\n \t  break;\n \tcase OPT_nostdincplusplus:\n \t  /* -nostdinc++ causes no default C++-specific include directories. */\n-\t  opts->no_standard_cplusplus_includes = 1;\n+\t  CPP_OPTION (pfile, no_standard_cplusplus_includes) = 1;\n \t  break;\n \tcase OPT_std_gnu89:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 1;\n+\t  CPP_OPTION (pfile, c99) = 0;\n+\t  CPP_OPTION (pfile, objc) = 0;\n \t  break;\n \tcase OPT_std_gnu9x:\n \tcase OPT_std_gnu99:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n-\t  new_pending_directive (opts, \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 0;\n+\t  CPP_OPTION (pfile, c99) = 1;\n+\t  CPP_OPTION (pfile, objc) = 0;\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199409:\n-\t  new_pending_directive (opts, \"__STDC_VERSION__=199409L\", cpp_define);\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STDC_VERSION__=199409L\", cpp_define);\n \t  /* Fall through */\n \tcase OPT_std_iso9899_1990:\n \tcase OPT_std_c89:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t  opts->trigraphs = 1;\n-\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n+\t  CPP_OPTION (pfile, c89) = 1;\n+\t  CPP_OPTION (pfile, c99) = 0;\n+\t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, trigraphs) = 1;\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STRICT_ANSI__\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199x:\n \tcase OPT_std_iso9899_1999:\n \tcase OPT_std_c9x:\n \tcase OPT_std_c99:\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n-\t  opts->trigraphs = 1;\n-\t  new_pending_directive (opts, \"__STRICT_ANSI__\", cpp_define);\n-\t  new_pending_directive (opts, \"__STDC_VERSION__=199901L\", cpp_define);\n+\t  CPP_OPTION (pfile, cplusplus) = 0;\n+\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n+\t  CPP_OPTION (pfile, c89) = 0;\n+\t  CPP_OPTION (pfile, c99) = 1;\n+\t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, trigraphs) = 1;\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STRICT_ANSI__\", cpp_define);\n+\t  new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t \"__STDC_VERSION__=199901L\", cpp_define);\n \t  break;\n \tcase OPT_o:\n-\t  if (opts->out_fname != NULL)\n+\t  if (CPP_OPTION (pfile, out_fname) != NULL)\n \t    {\n \t      cpp_fatal (pfile, \"Output filename specified twice\");\n \t      return argc;\n \t    }\n-\t  opts->out_fname = arg;\n-\t  if (!strcmp (opts->out_fname, \"-\"))\n-\t    opts->out_fname = \"\";\n+\t  CPP_OPTION (pfile, out_fname) = arg;\n+\t  if (!strcmp (CPP_OPTION (pfile, out_fname), \"-\"))\n+\t    CPP_OPTION (pfile, out_fname) = \"\";\n \t  break;\n \tcase OPT_v:\n \t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n #ifdef TARGET_VERSION\n \t  TARGET_VERSION;\n #endif\n \t  fputc ('\\n', stderr);\n-\t  opts->verbose = 1;\n+\t  CPP_OPTION (pfile, verbose) = 1;\n \t  break;\n \tcase OPT_stdin_stdout:\n \t  /* JF handle '-' as file name meaning stdin or stdout */\n-\t  if (opts->in_fname == NULL)\n-\t    opts->in_fname = \"\";\n-\t  else if (opts->out_fname == NULL)\n-\t    opts->out_fname = \"\";\n+\t  if (CPP_OPTION (pfile, in_fname) == NULL)\n+\t    CPP_OPTION (pfile, in_fname) = \"\";\n+\t  else if (CPP_OPTION (pfile, out_fname) == NULL)\n+\t    CPP_OPTION (pfile, out_fname) = \"\";\n \t  break;\n \tcase OPT_d:\n \t  /* Args to -d specify what parts of macros to dump.\n \t     Silently ignore unrecognised options; they may\n \t     be aimed at the compiler proper. */\n  \t  {\n \t    char c;\n- \n+\n \t    while ((c = *arg++) != '\\0')\n  \t      switch (c)\n  \t\t{\n  \t\tcase 'M':\n-\t\t  opts->dump_macros = dump_only;\n-\t\t  opts->no_output = 1;\n+\t\t  CPP_OPTION (pfile, dump_macros) = dump_only;\n+\t\t  CPP_OPTION (pfile, no_output) = 1;\n \t\t  break;\n \t\tcase 'N':\n-\t\t  opts->dump_macros = dump_names;\n+\t\t  CPP_OPTION (pfile, dump_macros) = dump_names;\n \t\t  break;\n \t\tcase 'D':\n-\t\t  opts->dump_macros = dump_definitions;\n+\t\t  CPP_OPTION (pfile, dump_macros) = dump_definitions;\n \t\t  break;\n \t\tcase 'I':\n-\t\t  opts->dump_includes = 1;\n+\t\t  CPP_OPTION (pfile, dump_includes) = 1;\n \t\t  break;\n \t\t}\n \t  }\n@@ -1471,27 +1489,27 @@ handle_option (pfile, argc, argv)\n \t  /* ??? -MG must be specified in addition to one of -M or -MM.\n \t     This can be relaxed in the future without breaking anything.\n \t     The converse isn't true.  */\n-       \n+\n \t  /* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n \tcase OPT_MG:\n-\t  opts->print_deps_missing_files = 1;\n+\t  CPP_OPTION (pfile, print_deps_missing_files) = 1;\n \t  break;\n \tcase OPT_M:\n \tcase OPT_MD:\n \tcase OPT_MM:\n \tcase OPT_MMD:\n \t  if (opt_code == OPT_M || opt_code == OPT_MD)\n-\t    opts->print_deps = 2;\n+\t    CPP_OPTION (pfile, print_deps) = 2;\n  \t  else\n-\t    opts->print_deps = 1;\n+\t    CPP_OPTION (pfile, print_deps) = 1;\n \n \t  /* For -MD and -MMD options, write deps on file named by next arg */\n \t  /* For -M and -MM, write deps on standard output\n \t     and suppress the usual output.  */\n \t  if (opt_code == OPT_MD || opt_code == OPT_MMD)\n-\t      opts->deps_file = arg;\n+\t      CPP_OPTION (pfile, deps_file) = arg;\n  \t  else\n-\t      opts->no_output = 1;\n+\t      CPP_OPTION (pfile, no_output) = 1;\n \t  break;\n \tcase OPT_A:\n \t  if (arg[0] == '-')\n@@ -1508,24 +1526,26 @@ handle_option (pfile, argc, argv)\n \t\t{\n \t\t  struct pending_option *o1, *o2;\n \n-\t\t  o1 = opts->pending->directive_head;\n+\t\t  o1 = CPP_OPTION (pfile, pending)->directive_head;\n \t\t  while (o1)\n \t\t    {\n \t\t      o2 = o1->next;\n \t\t      free (o1);\n \t\t      o1 = o2;\n \t\t    }\n-\t\t  opts->pending->directive_head = NULL;\n-\t\t  opts->pending->directive_tail = NULL;\n+\t\t  CPP_OPTION (pfile, pending)->directive_head = NULL;\n+\t\t  CPP_OPTION (pfile, pending)->directive_tail = NULL;\n \t\t}\n \t      else\n-\t\tnew_pending_directive (opts, arg + 1, cpp_unassert);\n+\t\tnew_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t       arg + 1, cpp_unassert);\n \t    }\n \t  else\n-\t    new_pending_directive (opts, arg, cpp_assert);\n+\t    new_pending_directive (CPP_OPTION (pfile, pending),\n+\t\t\t\t   arg, cpp_assert);\n \t  break;\n \tcase OPT_U:\n-\t  new_pending_directive (opts, arg, cpp_undef);\n+\t  new_pending_directive (CPP_OPTION (pfile, pending), arg, cpp_undef);\n \t  break;\n \tcase OPT_I:           /* Add directory to path for includes.  */\n \t  if (!strcmp (arg, \"-\"))\n@@ -1536,13 +1556,14 @@ handle_option (pfile, argc, argv)\n \t\t Don't search the directory of the present file\n \t\t for #include \"...\".  (Note that -I. -I- is not the same as\n \t\t the default setup; -I. uses the compiler's working dir.)  */\n-\t      if (! opts->ignore_srcdir)\n+\t      if (! CPP_OPTION (pfile, ignore_srcdir))\n \t\t{\n-\t\t  opts->ignore_srcdir = 1;\n-\t\t  opts->pending->quote_head = opts->pending->brack_head;\n-\t\t  opts->pending->quote_tail = opts->pending->brack_tail;\n-\t\t  opts->pending->brack_head = 0;\n-\t\t  opts->pending->brack_tail = 0;\n+\t\t  struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n+\t\t  pend->quote_head = pend->brack_head;\n+\t\t  pend->quote_tail = pend->brack_tail;\n+\t\t  pend->brack_head = 0;\n+\t\t  pend->brack_tail = 0;\n+\t\t  CPP_OPTION (pfile, ignore_srcdir) = 1;\n \t\t}\n \t      else\n \t\t{\n@@ -1551,13 +1572,13 @@ handle_option (pfile, argc, argv)\n \t\t}\n  \t    }\n  \t  else\n-\t    append_include_chain (pfile, opts->pending,\n+\t    append_include_chain (pfile, CPP_OPTION (pfile, pending),\n \t\t\t\t  xstrdup (arg), BRACKET, 0);\n \t  break;\n \tcase OPT_isystem:\n \t  /* Add directory to beginning of system include path, as a system\n \t     include directory. */\n-\t  append_include_chain (pfile, opts->pending,\n+\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n \t\t\t\txstrdup (arg), SYSTEM, 0);\n \t  break;\n \tcase OPT_include:\n@@ -1569,8 +1590,8 @@ handle_option (pfile, argc, argv)\n \t    /* This list has to be built in reverse order so that\n \t       when cpp_start_read pushes all the -include files onto\n \t       the buffer stack, they will be scanned in forward order.  */\n-\t    o->next = opts->pending->include_head;\n-\t    opts->pending->include_head = o;\n+\t    o->next = CPP_OPTION (pfile, pending)->include_head;\n+\t    CPP_OPTION (pfile, pending)->include_head = o;\n \t  }\n \t  break;\n \tcase OPT_imacros:\n@@ -1579,8 +1600,8 @@ handle_option (pfile, argc, argv)\n \t      xmalloc (sizeof (struct pending_option));\n \t    o->arg = arg;\n \t    o->next = NULL;\n-\t    \n-\t    APPEND (opts->pending, imacros, o);\n+\n+\t    APPEND (CPP_OPTION (pfile, pending), imacros, o);\n \t  }\n \t  break;\n \tcase OPT_iwithprefix:\n@@ -1593,66 +1614,67 @@ handle_option (pfile, argc, argv)\n \t  {\n \t    char *fname;\n \t    int len;\n-\t    \n+\n \t    len = strlen (arg);\n- \n-\t    if (opts->include_prefix != 0)\n+\n+\t    if (CPP_OPTION (pfile, include_prefix) != 0)\n \t      {\n-\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n-\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n-\t\tmemcpy (fname + opts->include_prefix_len, arg, len + 1);\n+\t\tsize_t ipl = CPP_OPTION (pfile, include_prefix_len);\n+\t\tfname = xmalloc (ipl + len + 1);\n+\t\tmemcpy (fname, CPP_OPTION (pfile, include_prefix), ipl);\n+\t\tmemcpy (fname + ipl, arg, len + 1);\n \t      }\n \t    else\n \t      {\n \t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n \t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n \t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, arg, len + 1);\n \t      }\n-\t    \n-\t    append_include_chain (pfile, opts->pending, fname, \n+\n+\t    append_include_chain (pfile, CPP_OPTION (pfile, pending), fname,\n \t\t\t  opt_code == OPT_iwithprefix ? SYSTEM: BRACKET, 0);\n \t  }\n \t  break;\n \tcase OPT_idirafter:\n \t  /* Add directory to end of path for includes.  */\n-\t  append_include_chain (pfile, opts->pending,\n+\t  append_include_chain (pfile, CPP_OPTION (pfile, pending),\n \t\t\t\txstrdup (arg), AFTER, 0);\n \t  break;\n \tcase OPT_W:\n \t  /* Silently ignore unrecognised options */\n \t  if (!strcmp (argv[i], \"-Wall\"))\n \t    {\n-\t      opts->warn_trigraphs = 1;\n-\t      opts->warn_comments = 1;\n+\t      CPP_OPTION (pfile, warn_trigraphs) = 1;\n+\t      CPP_OPTION (pfile, warn_comments) = 1;\n \t    }\n \t  else if (!strcmp (argv[i], \"-Wtraditional\"))\n-\t    opts->warn_stringify = 1;\n+\t    CPP_OPTION (pfile, warn_stringify) = 1;\n \t  else if (!strcmp (argv[i], \"-Wtrigraphs\"))\n-\t    opts->warn_trigraphs = 1;\n+\t    CPP_OPTION (pfile, warn_trigraphs) = 1;\n \t  else if (!strcmp (argv[i], \"-Wcomment\"))\n-\t    opts->warn_comments = 1;\n+\t    CPP_OPTION (pfile, warn_comments) = 1;\n \t  else if (!strcmp (argv[i], \"-Wcomments\"))\n-\t    opts->warn_comments = 1;\n+\t    CPP_OPTION (pfile, warn_comments) = 1;\n \t  else if (!strcmp (argv[i], \"-Wundef\"))\n-\t    opts->warn_undef = 1;\n+\t    CPP_OPTION (pfile, warn_undef) = 1;\n \t  else if (!strcmp (argv[i], \"-Wimport\"))\n-\t    opts->warn_import = 1;\n+\t    CPP_OPTION (pfile, warn_import) = 1;\n \t  else if (!strcmp (argv[i], \"-Werror\"))\n-\t    opts->warnings_are_errors = 1;\n+\t    CPP_OPTION (pfile, warnings_are_errors) = 1;\n \t  else if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\t    opts->warn_stringify = 0;\n+\t    CPP_OPTION (pfile, warn_stringify) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n-\t    opts->warn_trigraphs = 0;\n+\t    CPP_OPTION (pfile, warn_trigraphs) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-comment\"))\n-\t    opts->warn_comments = 0;\n+\t    CPP_OPTION (pfile, warn_comments) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-comments\"))\n-\t    opts->warn_comments = 0;\n+\t    CPP_OPTION (pfile, warn_comments) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-undef\"))\n-\t    opts->warn_undef = 0;\n+\t    CPP_OPTION (pfile, warn_undef) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-import\"))\n-\t    opts->warn_import = 0;\n+\t    CPP_OPTION (pfile, warn_import) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-error\"))\n-\t    opts->warnings_are_errors = 0;\n+\t    CPP_OPTION (pfile, warnings_are_errors) = 0;\n \t  break;\n  \t}\n     }"}, {"sha": "e28aadf6fb9657310047b3cdc30a249f98d360b1", "filename": "gcc/cpplex.c", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -119,7 +119,7 @@ cpp_scan_buffer (pfile)\n {\n   cpp_buffer *buffer = CPP_BUFFER (pfile);\n   enum cpp_token token;\n-  if (CPP_OPTIONS (pfile)->no_output)\n+  if (CPP_OPTION (pfile, no_output))\n     {\n       long old_written = CPP_WRITTEN (pfile);\n       /* In no-output mode, we can ignore everything but directives.  */\n@@ -193,12 +193,12 @@ cpp_expand_to_buffer (pfile, buf, length)\n   ip->has_escapes = 1;\n \n   /* Scan the input, create the output.  */\n-  save_no_output = CPP_OPTIONS (pfile)->no_output;\n-  CPP_OPTIONS (pfile)->no_output = 0;\n-  CPP_OPTIONS (pfile)->no_line_commands++;\n+  save_no_output = CPP_OPTION (pfile, no_output);\n+  CPP_OPTION (pfile, no_output) = 0;\n+  CPP_OPTION (pfile, no_line_commands)++;\n   cpp_scan_buffer (pfile);\n-  CPP_OPTIONS (pfile)->no_line_commands--;\n-  CPP_OPTIONS (pfile)->no_output = save_no_output;\n+  CPP_OPTION (pfile, no_line_commands)--;\n+  CPP_OPTION (pfile, no_output) = save_no_output;\n \n   CPP_NUL_TERMINATE (pfile);\n }\n@@ -264,7 +264,7 @@ skip_block_comment (pfile)\n       else if (c == '/' && prev_c == '*')\n \treturn;\n       else if (c == '*' && prev_c == '/'\n-\t       && CPP_OPTIONS (pfile)->warn_comments)\n+\t       && CPP_OPTION (pfile, warn_comments))\n \tcpp_warning (pfile, \"`/*' within comment\");\n \n       prev_c = c;\n@@ -294,7 +294,7 @@ skip_line_comment (pfile)\n \t  /* \\r cannot be a macro escape marker here. */\n \t  if (!ACTIVE_MARK_P (pfile))\n \t    CPP_BUMP_LINE (pfile);\n-\t  if (CPP_OPTIONS (pfile)->warn_comments)\n+\t  if (CPP_OPTION (pfile, warn_comments))\n \t    cpp_warning (pfile, \"backslash-newline within line comment\");\n \t}\n     }\n@@ -325,9 +325,9 @@ skip_comment (pfile, m)\n \t  skip_line_comment (pfile);\n \t  return ' ';\n \t}\n-      else if (CPP_OPTIONS (pfile)->cplusplus_comments)\n+      else if (CPP_OPTION (pfile, cplusplus_comments))\n \t{\n-\t  if (CPP_OPTIONS (pfile)->c89\n+\t  if (CPP_OPTION (pfile, c89)\n \t      && CPP_PEDANTIC (pfile)\n \t      && ! CPP_BUFFER (pfile)->warned_cplusplus_comments)\n \t    {\n@@ -344,7 +344,7 @@ skip_comment (pfile, m)\n \treturn m;\n     }\n   else if (m == '-' && PEEKC() == '-'\n-\t   && CPP_OPTIONS (pfile)->chill)\n+\t   && CPP_OPTION (pfile, chill))\n     {\n       skip_line_comment (pfile);\n       return ' ';\n@@ -524,8 +524,8 @@ skip_string (pfile, c)\n \t     strings of either variety at end of line.  This is a\n \t     kludge around not knowing where comments are in these\n \t     languages.  */\n-\t  if (CPP_OPTIONS (pfile)->lang_fortran\n-\t      || CPP_OPTIONS (pfile)->lang_asm)\n+\t  if (CPP_OPTION (pfile, lang_fortran)\n+\t      || CPP_OPTION (pfile, lang_asm))\n \t    {\n \t      FORWARD(-1);\n \t      return;\n@@ -675,7 +675,6 @@ _cpp_lex_token (pfile)\n {\n   register int c, c2, c3;\n   enum cpp_token token;\n-  struct cpp_options *opts = CPP_OPTIONS (pfile);\n \n  get_next:\n   c = GETC();\n@@ -689,7 +688,7 @@ _cpp_lex_token (pfile)\n \tgoto op2;\n \n     comment:\n-      if (opts->discard_comments)\n+      if (CPP_OPTION (pfile, discard_comments))\n \tc = skip_comment (pfile, c);\n       else\n \tc = copy_comment (pfile, c);\n@@ -698,7 +697,7 @@ _cpp_lex_token (pfile)\n \t  \n       /* Comments are equivalent to spaces.\n \t For -traditional, a comment is equivalent to nothing.  */\n-      if (opts->traditional || !opts->discard_comments)\n+      if (CPP_TRADITIONAL (pfile) || !CPP_OPTION (pfile, discard_comments))\n \treturn CPP_COMMENT;\n       else\n \t{\n@@ -745,12 +744,12 @@ _cpp_lex_token (pfile)\n       return c == '\\'' ? CPP_CHAR : CPP_STRING;\n \n     case '$':\n-      if (!opts->dollars_in_ident)\n+      if (!CPP_OPTION (pfile, dollars_in_ident))\n \tgoto randomchar;\n       goto letter;\n \n     case ':':\n-      if (opts->cplusplus && PEEKC () == ':')\n+      if (CPP_OPTION (pfile, cplusplus) && PEEKC () == ':')\n \tgoto op2;\n       goto randomchar;\n \n@@ -775,7 +774,7 @@ _cpp_lex_token (pfile)\n       c2 = PEEKC ();\n       if (c2 == '-')\n \t{\n-\t  if (opts->chill)\n+\t  if (CPP_OPTION (pfile, chill))\n \t    goto comment;  /* Chill style comment */\n \t  else\n \t    goto op2;\n@@ -784,7 +783,7 @@ _cpp_lex_token (pfile)\n \tgoto op2;\n       else if (c2 == '>')\n \t{\n-\t  if (opts->cplusplus && PEEKN (1) == '*')\n+\t  if (CPP_OPTION (pfile, cplusplus) && PEEKN (1) == '*')\n \t    {\n \t      /* In C++, there's a ->* operator.  */\n \t      token = CPP_OTHER;\n@@ -842,7 +841,7 @@ _cpp_lex_token (pfile)\n       if (c2 == '=')\n \tgoto op2;\n       /* GNU C++ supports MIN and MAX operators <? and >?.  */\n-      if (c2 != c && (!opts->cplusplus || c2 != '?'))\n+      if (c2 != c && (!CPP_OPTION (pfile, cplusplus) || c2 != '?'))\n \tgoto randomchar;\n       FORWARD(1);\n       CPP_RESERVE (pfile, 4);\n@@ -866,7 +865,7 @@ _cpp_lex_token (pfile)\n \t}\n \n       /* In C++ there's a .* operator.  */\n-      if (opts->cplusplus && c2 == '*')\n+      if (CPP_OPTION (pfile, cplusplus) && c2 == '*')\n \tgoto op2;\n \n       if (c2 == '.' && PEEKN(1) == '.')\n@@ -917,7 +916,7 @@ _cpp_lex_token (pfile)\n \tif (!is_numchar(c) && c != '.'\n \t    && ((c2 != 'e' && c2 != 'E'\n \t\t && ((c2 != 'p' && c2 != 'P')\n-\t\t     || CPP_OPTIONS (pfile)->c89))\n+\t\t     || CPP_OPTION (pfile, c89)))\n \t\t|| (c != '+' && c != '-')))\n \t  break;\n \tFORWARD(1);\n@@ -928,7 +927,7 @@ _cpp_lex_token (pfile)\n     return CPP_NUMBER;\n     case 'b': case 'c': case 'd': case 'h': case 'o':\n     case 'B': case 'C': case 'D': case 'H': case 'O':\n-      if (opts->chill && PEEKC () == '\\'')\n+      if (CPP_OPTION (pfile, chill) && PEEKC () == '\\'')\n \t{\n \t  pfile->only_seen_white = 0;\n \t  CPP_RESERVE (pfile, 2);\n@@ -1023,7 +1022,7 @@ _cpp_lex_token (pfile)\n       if (pfile->only_seen_white == 0)\n \tpfile->only_seen_white = 1;\n       CPP_BUMP_LINE (pfile);\n-      if (! CPP_OPTIONS (pfile)->no_line_commands)\n+      if (! CPP_OPTION (pfile, no_line_commands))\n \t{\n \t  pfile->lineno++;\n \t  if (CPP_BUFFER (pfile)->lineno != pfile->lineno)\n@@ -1466,12 +1465,12 @@ _cpp_read_and_prescan (pfile, fp, desc, len)\n \t\tif (t == 0)\n \t\t  break;\n \n-\t\tif (CPP_OPTIONS (pfile)->warn_trigraphs)\n+\t\tif (CPP_OPTION (pfile, warn_trigraphs))\n \t\t  {\n \t\t    unsigned long col;\n \t\t    line_base = find_position (line_base, op, &line);\n \t\t    col = op - line_base + 1;\n-\t\t    if (CPP_OPTIONS (pfile)->trigraphs)\n+\t\t    if (CPP_OPTION (pfile, trigraphs))\n \t\t      cpp_warning_with_line (pfile, line, col,\n \t\t\t\t\t     \"trigraph ??%c converted to %c\", d, t);\n \t\t    else\n@@ -1480,7 +1479,7 @@ _cpp_read_and_prescan (pfile, fp, desc, len)\n \t\t  }\n \n \t\tip += 2;\n-\t\tif (CPP_OPTIONS (pfile)->trigraphs)\n+\t\tif (CPP_OPTION (pfile, trigraphs))\n \t\t  {\n \t\t    op[-1] = t;\t    /* Overwrite '?' */\n \t\t    if (t == '\\\\')\n@@ -1554,7 +1553,7 @@ _cpp_init_input_buffer (pfile)\n   memset (tmp, SPECCASE_EMPTY, 1 << CHAR_BIT);\n   tmp['\\r'] = SPECCASE_CR;\n   tmp['\\\\'] = SPECCASE_BACKSLASH;\n-  if (CPP_OPTIONS (pfile)->trigraphs || CPP_OPTIONS (pfile)->warn_trigraphs)\n+  if (CPP_OPTION (pfile, trigraphs) || CPP_OPTION (pfile, warn_trigraphs))\n     tmp['?'] = SPECCASE_QUESTION;\n   pfile->input_speccase = tmp;\n "}, {"sha": "a64c8bc46f0b89c77c64006450c324008dc26fc1", "filename": "gcc/cpplib.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -157,11 +157,11 @@ _cpp_handle_directive (pfile)\n      input (preprocessed or fed back in by the C++ frontend).  */\n   if (c >= '0' && c <= '9')\n     {\n-      if (CPP_OPTIONS (pfile)->lang_asm)\n+      if (CPP_OPTION (pfile, lang_asm))\n \treturn 0;\n \n       if (CPP_PEDANTIC (pfile)\n-\t  && ! CPP_OPTIONS (pfile)->preprocessed\n+\t  && ! CPP_OPTION (pfile, preprocessed)\n \t  && ! CPP_BUFFER (pfile)->manual_pop)\n \tcpp_pedwarn (pfile, \"`#' followed by integer\");\n       do_line (pfile);\n@@ -170,7 +170,7 @@ _cpp_handle_directive (pfile)\n \n   /* If we are rescanning preprocessed input, don't obey any directives\n      other than # nnn.  */\n-  if (CPP_OPTIONS (pfile)->preprocessed)\n+  if (CPP_OPTION (pfile, preprocessed))\n     return 0;\n \n   /* Now find the directive name.  */\n@@ -320,7 +320,7 @@ do_define (pfile)\n \tok = ! _cpp_compare_defs (pfile, def, hp->value.defn);\n       /* Redefining a constant is ok with -D.  */\n       else if (hp->type == T_CONST || hp->type == T_STDC)\n-        ok = ! CPP_OPTIONS (pfile)->done_initializing;\n+        ok = ! pfile->done_initializing;\n       /* Otherwise it's not ok.  */\n       else\n \tok = 0;\n@@ -331,7 +331,7 @@ do_define (pfile)\n \t    cpp_error (pfile, \"redefining poisoned `%.*s'\", len, sym);\n \t  else\n \t    cpp_pedwarn (pfile, \"`%.*s' redefined\", len, sym);\n-\t  if (hp->type == T_MACRO && CPP_OPTIONS (pfile)->done_initializing)\n+\t  if (hp->type == T_MACRO && pfile->done_initializing)\n \t    {\n \t      DEFINITION *d = hp->value.defn;\n \t      cpp_pedwarn_with_file_and_line (pfile, d->file, d->line, d->col,\n@@ -354,10 +354,10 @@ do_define (pfile)\n       *slot = hp;\n     }\n \n-  if (CPP_OPTIONS (pfile)->debug_output\n-      || CPP_OPTIONS (pfile)->dump_macros == dump_definitions)\n+  if (CPP_OPTION (pfile, debug_output)\n+      || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n     _cpp_dump_definition (pfile, sym, len, def);\n-  else if (CPP_OPTIONS (pfile)->dump_macros == dump_names)\n+  else if (CPP_OPTION (pfile, dump_macros) == dump_names)\n     pass_thru_directive (sym, len, pfile, T_DEFINE);\n \n   return 0;\n@@ -376,8 +376,8 @@ _cpp_output_line_command (pfile, file_change)\n   long line;\n   cpp_buffer *ip;\n \n-  if (CPP_OPTIONS (pfile)->no_line_commands\n-      || CPP_OPTIONS (pfile)->no_output)\n+  if (CPP_OPTION (pfile, no_line_commands)\n+      || CPP_OPTION (pfile, no_output))\n     return;\n \n   ip = cpp_file_buffer (pfile);\n@@ -428,7 +428,7 @@ _cpp_output_line_command (pfile, file_change)\n     }\n #ifndef NO_IMPLICIT_EXTERN_C\n   /* Tell cc1plus if following text should be treated as C.  */\n-  if (ip->system_header_p == 2 && CPP_OPTIONS (pfile)->cplusplus)\n+  if (ip->system_header_p == 2 && CPP_OPTION (pfile, cplusplus))\n     {\n       CPP_PUTC_Q (pfile, ' ');\n       CPP_PUTC_Q (pfile, '4');\n@@ -513,7 +513,7 @@ do_include (pfile)\n   token = alloca (len + 1);\n   strcpy (token, CPP_PWRITTEN (pfile));\n   \n-  if (CPP_OPTIONS (pfile)->dump_includes)\n+  if (CPP_OPTION (pfile, dump_includes))\n     pass_thru_directive (token, len, pfile, T_INCLUDE);\n \n   _cpp_execute_include (pfile, token, len, 0, 0);\n@@ -530,7 +530,7 @@ do_import (pfile)\n   if (CPP_PEDANTIC (pfile))\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#import'\");\n \n-  if (CPP_OPTIONS (pfile)->warn_import\n+  if (CPP_OPTION (pfile, warn_import)\n       && !CPP_BUFFER (pfile)->system_header_p && !pfile->import_warning)\n     {\n       pfile->import_warning = 1;\n@@ -544,7 +544,7 @@ do_import (pfile)\n   token = alloca (len + 1);\n   strcpy (token, CPP_PWRITTEN (pfile));\n   \n-  if (CPP_OPTIONS (pfile)->dump_includes)\n+  if (CPP_OPTION (pfile, dump_includes))\n     pass_thru_directive (token, len, pfile, T_IMPORT);\n \n   _cpp_execute_include (pfile, token, len, 1, 0);\n@@ -568,7 +568,7 @@ do_include_next (pfile)\n   token = alloca (len + 1);\n   strcpy (token, CPP_PWRITTEN (pfile));\n   \n-  if (CPP_OPTIONS (pfile)->dump_includes)\n+  if (CPP_OPTION (pfile, dump_includes))\n     pass_thru_directive (token, len, pfile, T_INCLUDE_NEXT);\n \n   /* For #include_next, skip in the search path past the dir in which the\n@@ -782,7 +782,7 @@ do_undef (pfile)\n       HASHNODE *hp = *slot;\n       /* If we are generating additional info for debugging (with -g) we\n \t need to pass through all effective #undef commands.  */\n-      if (CPP_OPTIONS (pfile)->debug_output)\n+      if (CPP_OPTION (pfile, debug_output))\n \tpass_thru_directive (name, len, pfile, T_UNDEF);\n       if (hp->type == T_POISON)\n \tcpp_error (pfile, \"cannot undefine poisoned `%s'\", hp->name);\n@@ -1021,9 +1021,9 @@ do_pragma_poison (pfile)\n \n   /* As a rule, don't include #pragma poison commands in output,  \n      unless the user asks for them.  */\n-  writeit = (CPP_OPTIONS (pfile)->debug_output\n-\t     || CPP_OPTIONS (pfile)->dump_macros == dump_definitions\n-\t     || CPP_OPTIONS (pfile)->dump_macros == dump_names);\n+  writeit = (CPP_OPTION (pfile, debug_output)\n+\t     || CPP_OPTION (pfile, dump_macros) == dump_definitions\n+\t     || CPP_OPTION (pfile, dump_macros) == dump_names);\n \n   for (;;)\n     {\n@@ -1399,7 +1399,7 @@ consider_directive_while_skipping (pfile, stack)\n     }\n \n     /* Don't let erroneous code go by.\t*/\n-    if (!CPP_OPTIONS (pfile)->lang_asm && CPP_PEDANTIC (pfile))\n+    if (!CPP_OPTION (pfile, lang_asm) && CPP_PEDANTIC (pfile))\n \tcpp_pedwarn (pfile, \"invalid preprocessor directive name\");\n     return 0;\n }\n@@ -1612,7 +1612,7 @@ do_assert (pfile)\n   size_t blen, tlen;\n   unsigned long bhash, thash;\n \n-  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing)\n+  if (CPP_PEDANTIC (pfile) && pfile->done_initializing)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#assert'\");\n \n   _cpp_skip_hspace (pfile);\n@@ -1678,7 +1678,7 @@ do_unassert (pfile)\n   long baselen, thislen;\n   HASHNODE *base, *this, *next;\n   \n-  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing)\n+  if (CPP_PEDANTIC (pfile) && pfile->done_initializing)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#unassert'\");\n \n   _cpp_skip_hspace (pfile);"}, {"sha": "e1ae46e9eeb48d935c73f38117161dd40698b444", "filename": "gcc/cpplib.h", "status": "modified", "additions": 203, "deletions": 216, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -128,306 +128,294 @@ struct htab;\n    efficiency, and partly to limit runaway recursion.  */\n #define CPP_STACK_MAX 200\n \n-/* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n-   Applying cpp_get_token repeatedly yields a stream of pre-processor\n-   tokens.  Usually, there is only one cpp_reader object active. */\n+/* Values for opts.dump_macros.\n+  dump_only means inhibit output of the preprocessed text\n+             and instead output the definitions of all user-defined\n+             macros in a form suitable for use as input to cccp.\n+   dump_names means pass #define and the macro name through to output.\n+   dump_definitions means pass the whole definition (plus #define) through\n+*/\n+enum { dump_none = 0, dump_only, dump_names, dump_definitions };\n \n-struct cpp_reader\n+/* This structure is nested inside struct cpp_reader, and\n+   carries all the options visible to the command line.  */\n+struct cpp_options\n {\n-  cpp_buffer *buffer;\n-  cpp_options *opts;\n-\n-  /* A buffer used for both for cpp_get_token's output, and also internally. */\n-  unsigned char *token_buffer;\n-  /* Allocated size of token_buffer.  CPP_RESERVE allocates space.  */\n-  unsigned int token_buffer_size;\n-  /* End of the written part of token_buffer. */\n-  unsigned char *limit;\n-\n-  /* Error counter for exit code */\n-  int errors;\n-\n-  /* Line where a newline was first seen in a string constant.  */\n-  int multiline_string_line;\n-\n-  /* Current depth in #include directives that use <...>.  */\n-  int system_include_depth;\n-\n-  /* Current depth of buffer stack. */\n-  int buffer_stack_depth;\n-\n-  /* Hash table of macros and assertions.  See cpphash.c */\n-  struct htab *hashtab;\n-\n-  /* Hash table of other included files.  See cppfiles.c */\n-  struct htab *all_include_files;\n-\n-  /* Chain of `actual directory' file_name_list entries,\n-     for \"\" inclusion. */\n-  struct file_name_list *actual_dirs;\n-\n-  /* Current maximum length of directory names in the search path\n-     for include files.  (Altered as we get more of them.)  */\n-  unsigned int max_include_len;\n-\n-  struct if_stack *if_stack;\n-\n-  /* Nonzero means we have printed (while error reporting) a list of\n-     containing files that matches the current status.  */\n-  char input_stack_listing_current;\n-\n-  /* If non-zero, macros are not expanded.  */\n-  char no_macro_expand;\n-\n-  /* If non-zero, directives cause a hard error.  Used when parsing\n-     macro arguments.  */\n-  char no_directives;\n-\n-  /* Print column number in error messages.  */\n-  char show_column;\n-\n-  /* We're printed a warning recommending against using #import.  */\n-  char import_warning;\n-\n-  /* If true, character between '<' and '>' are a single (string) token.  */\n-  char parsing_include_directive;\n-\n-  /* If true, # introduces an assertion (see do_assert) */\n-  char parsing_if_directive;\n-\n-  /* If true, # and ## are the STRINGIZE and TOKPASTE operators */\n-  char parsing_define_directive;\n-\n-  /* True if escape sequences (as described for has_escapes in\n-     parse_buffer) should be emitted.  */\n-  char output_escapes;\n-\n-  /* 0: Have seen non-white-space on this line.\n-     1: Only seen white space so far on this line.\n-     2: Only seen white space so far in this file.  */\n-  char only_seen_white;\n-\n-  long lineno;\n-\n-  struct tm *timebuf;\n-\n-  /* Buffer of -M output.  */\n-  struct deps *deps;\n-\n-  /* A buffer and a table, used only by read_and_prescan (in cppfiles.c)\n-     which are allocated once per cpp_reader object to keep them off the\n-     stack and avoid setup costs.  */\n-  unsigned char *input_buffer;\n-  unsigned char *input_speccase;\n-  size_t input_buffer_len;\n-};\n-\n-#define CPP_FATAL_LIMIT 1000\n-/* True if we have seen a \"fatal\" error. */\n-#define CPP_FATAL_ERRORS(READER) ((READER)->errors >= CPP_FATAL_LIMIT)\n-\n-/* Macros for manipulating the token_buffer. */\n+  /* Name of input and output files.  */\n+  const char *in_fname;\n+  const char *out_fname;\n \n-/* Number of characters currently in PFILE's output buffer. */\n-#define CPP_WRITTEN(PFILE) ((size_t)((PFILE)->limit - (PFILE)->token_buffer))\n-#define CPP_PWRITTEN(PFILE) ((PFILE)->limit)\n-#define CPP_ADJUST_WRITTEN(PFILE,DELTA) ((PFILE)->limit += (DELTA))\n-#define CPP_SET_WRITTEN(PFILE,N) ((PFILE)->limit = (PFILE)->token_buffer + (N))\n+  /* Pending options - -D, -U, -A, -I, -ixxx. */\n+  struct cpp_pending *pending;\n \n-#define CPP_OPTIONS(PFILE) ((PFILE)->opts)\n-#define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n+  /* File name which deps are being written to.  This is 0 if deps are\n+     being written to stdout.  */\n+  const char *deps_file;\n \n-/* Pointed to by cpp_reader.opts. */\n-struct cpp_options\n-{\n-  const char *in_fname;\n+  /* Target-name to write with the dependency information.  */\n+  char *deps_target;\n \n-  /* Name of output file, for error messages.  */\n-  const char *out_fname;\n+  /* Search paths for include files.  */\n+  struct file_name_list *quote_include;\t /* First dir to search for \"file\" */\n+  struct file_name_list *bracket_include;/* First dir to search for <file> */\n \n+  /* Map between header names and file names, used only on DOS where\n+     file names are limited in length.  */\n   struct file_name_map_list *map_list;\n \n+  /* Directory prefix that should replace `/usr/lib/gcc-lib/TARGET/VERSION'\n+     in the standard include file directories.  */\n+  const char *include_prefix;\n+  unsigned int include_prefix_len;\n+\n   /* Non-0 means -v, so print the full set of include dirs.  */\n-  char verbose;\n+  unsigned char verbose;\n \n   /* Nonzero means use extra default include directories for C++.  */\n-\n-  char cplusplus;\n+  unsigned char cplusplus;\n \n   /* Nonzero means handle cplusplus style comments */\n-\n-  char cplusplus_comments;\n+  unsigned char cplusplus_comments;\n \n   /* Nonzero means handle #import, for objective C.  */\n-\n-  char objc;\n+  unsigned char objc;\n \n   /* Nonzero means this is an assembly file, so ignore unrecognized\n      directives and the \"# 33\" form of #line, both of which are\n      probably comments.  Also, permit unbalanced ' strings (again,\n      likely to be in comments).  */\n-\n-  char lang_asm;\n+  unsigned char lang_asm;\n \n   /* Nonzero means this is Fortran, and we don't know where the\n      comments are, so permit unbalanced ' strings.  Unlike lang_asm,\n      this does not ignore unrecognized directives.  */\n+  unsigned char lang_fortran;\n \n-  char lang_fortran;\n-\n-  /* Nonzero means handle CHILL comment syntax\n-     and output CHILL string delimiter for __DATE___ etc. */\n-\n-  char chill;\n+  /* Nonzero means handle CHILL comment syntax and output CHILL string\n+     delimiters for __DATE__ etc. */\n+  unsigned char chill;\n \n   /* Nonzero means don't copy comments into the output file.  */\n-\n-  char discard_comments;\n+  unsigned char discard_comments;\n \n   /* Nonzero means process the ANSI trigraph sequences.  */\n+  unsigned char trigraphs;\n \n-  char trigraphs;\n+  /* Nonzero means print the names of included files rather than the\n+     preprocessed output.  1 means just the #include \"...\", 2 means\n+     #include <...> as well.  */\n+  unsigned char print_deps;\n \n-  /* Nonzero means print the names of included files rather than\n-     the preprocessed output.  1 means just the #include \"...\",\n-     2 means #include <...> as well.  */\n-\n-  char print_deps;\n-\n-  /* Nonzero if missing .h files in -M output are assumed to be generated\n-     files and not errors.  */\n-\n-  char print_deps_missing_files;\n+  /* Nonzero if missing .h files in -M output are assumed to be\n+     generated files and not errors.  */\n+  unsigned char print_deps_missing_files;\n \n   /* If true, fopen (deps_file, \"a\") else fopen (deps_file, \"w\"). */\n-  char print_deps_append;\n+  unsigned char print_deps_append;\n \n   /* Nonzero means print names of header files (-H).  */\n+  unsigned char print_include_names;\n \n-  char print_include_names;\n-\n-  /* Nonzero means try to make failure to fit ANSI C an error.  */\n-\n-  char pedantic_errors;\n+  /* Nonzero means cpp_pedwarn causes a hard error.  */\n+  unsigned char pedantic_errors;\n \n   /* Nonzero means don't print warning messages.  */\n+  unsigned char inhibit_warnings;\n \n-  char inhibit_warnings;\n-\n-  /* Nonzero means don't print error messages.  Has no option to select it,\n-     but can be set by a user of cpplib (e.g. fix-header).  */\n-\n-  char inhibit_errors;\n+  /* Nonzero means don't print error messages.  Has no option to\n+     select it, but can be set by a user of cpplib (e.g. fix-header).  */\n+  unsigned char inhibit_errors;\n \n   /* Nonzero means warn if slash-star appears in a comment.  */\n-\n-  char warn_comments;\n+  unsigned char warn_comments;\n \n   /* Nonzero means warn if there are any trigraphs.  */\n-\n-  char warn_trigraphs;\n+  unsigned char warn_trigraphs;\n \n   /* Nonzero means warn if #import is used.  */\n-\n-  char warn_import;\n+  unsigned char warn_import;\n \n   /* Nonzero means warn if a macro argument is (or would be)\n      stringified with -traditional.  */\n-\n-  char warn_stringify;\n+  unsigned char warn_stringify;\n \n   /* Nonzero means turn warnings into errors.  */\n+  unsigned char warnings_are_errors;\n \n-  char warnings_are_errors;\n-\n-  /* Nonzero causes output not to be done,\n-     but directives such as #define that have side effects\n-     are still obeyed.  */\n-\n-  char no_output;\n+  /* Nonzero causes output not to be done, but directives such as\n+     #define that have side effects are still obeyed.  */\n+  unsigned char no_output;\n \n   /* Nonzero means we should look for header.gcc files that remap file\n      names.  */\n-  char remap;\n+  unsigned char remap;\n \n   /* Nonzero means don't output line number information.  */\n-  char no_line_commands;\n+  unsigned char no_line_commands;\n \n-  /* Nonzero means -I- has been seen,\n-     so don't look for #include \"foo\" the source-file directory.  */\n-  char ignore_srcdir;\n+  /* Nonzero means -I- has been seen, so don't look for #include \"foo\"\n+     the source-file directory.  */\n+  unsigned char ignore_srcdir;\n \n-  /* Zero means dollar signs are punctuation.\n-     This used to be needed for conformance to the C Standard,\n-     before the C Standard was corrected.  */\n-  char dollars_in_ident;\n+  /* Zero means dollar signs are punctuation. */\n+  unsigned char dollars_in_ident;\n \n   /* Nonzero means try to imitate old fashioned non-ANSI preprocessor.  */\n-  char traditional;\n+  unsigned char traditional;\n \n   /* Nonzero means warn if undefined identifiers are evaluated in an #if.  */\n-  char warn_undef;\n+  unsigned char warn_undef;\n \n   /* Nonzero for the 1989 C Standard, including corrigenda and amendments.  */\n-  char c89;\n+  unsigned char c89;\n \n   /* Nonzero for the 1999 C Standard, including corrigenda and amendments.  */\n-  char c99;\n+  unsigned char c99;\n \n   /* Nonzero means give all the error messages the ANSI standard requires.  */\n-  char pedantic;\n+  unsigned char pedantic;\n \n   /* Nonzero means we're looking at already preprocessed code, so don't\n      bother trying to do macro expansion and whatnot.  */\n-  char preprocessed;\n+  unsigned char preprocessed;\n \n-  char done_initializing;\n+  /* Nonzero disables all the standard directories for headers.  */\n+  unsigned char no_standard_includes;\n \n-  /* Search paths for include files.  */\n-  struct file_name_list *quote_include;\t /* First dir to search for \"file\" */\n-  struct file_name_list *bracket_include;/* First dir to search for <file> */\n+  /* Nonzero disables the C++-specific standard directories for headers.  */\n+  unsigned char no_standard_cplusplus_includes;\n \n-  /* Directory prefix that should replace `/usr/lib/gcc-lib/TARGET/VERSION'\n-     in the standard include file directories.  */\n-  const char *include_prefix;\n-  int include_prefix_len;\n+  /* Nonzero means dump macros in some fashion - see above.  */\n+  unsigned char dump_macros;\n \n-  char no_standard_includes;\n-  char no_standard_cplusplus_includes;\n+  /* Nonzero means pass all #define and #undef directives which we\n+     actually process through to the output stream.  This feature is\n+     used primarily to allow cc1 to record the #defines and #undefs\n+     for the sake of debuggers which understand about preprocessor\n+     macros, but it may also be useful with -E to figure out how\n+     symbols are defined, and where they are defined.  */\n+  unsigned char debug_output;\n \n-/* dump_only means inhibit output of the preprocessed text\n-             and instead output the definitions of all user-defined\n-             macros in a form suitable for use as input to cccp.\n-   dump_names means pass #define and the macro name through to output.\n-   dump_definitions means pass the whole definition (plus #define) through\n-*/\n+  /* Nonzero means pass #include lines through to the output.  */\n+  unsigned char dump_includes;\n \n-  enum {dump_none = 0, dump_only, dump_names, dump_definitions}\n-     dump_macros;\n+  /* Print column number in error messages.  */\n+  unsigned char show_column;\n+};\n \n-/* Nonzero means pass all #define and #undef directives which we actually\n-   process through to the output stream.  This feature is used primarily\n-   to allow cc1 to record the #defines and #undefs for the sake of\n-   debuggers which understand about preprocessor macros, but it may\n-   also be useful with -E to figure out how symbols are defined, and\n-   where they are defined.  */\n-  int debug_output;\n \n-  /* Nonzero means pass #include lines through to the output,\n-     even if they are ifdefed out.  */\n-  int dump_includes;\n+/* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n+   Applying cpp_get_token repeatedly yields a stream of pre-processor\n+   tokens.  Usually, there is only one cpp_reader object active. */\n \n-  /* Pending options - -D, -U, -A, -I, -ixxx. */\n-  struct cpp_pending *pending;\n+struct cpp_reader\n+{\n+  cpp_buffer *buffer;\n \n-  /* File name which deps are being written to.\n-     This is 0 if deps are being written to stdout.  */\n-  const char *deps_file;\n+  /* A buffer used for both for cpp_get_token's output, and also internally. */\n+  unsigned char *token_buffer;\n+  /* Allocated size of token_buffer.  CPP_RESERVE allocates space.  */\n+  unsigned int token_buffer_size;\n+  /* End of the written part of token_buffer. */\n+  unsigned char *limit;\n \n-  /* Target-name to write with the dependency information.  */\n-  char *deps_target;\n+  /* Error counter for exit code */\n+  int errors;\n+\n+  /* Line where a newline was first seen in a string constant.  */\n+  int multiline_string_line;\n+\n+  /* Current depth in #include directives that use <...>.  */\n+  int system_include_depth;\n+\n+  /* Current depth of buffer stack. */\n+  int buffer_stack_depth;\n+\n+  /* Hash table of macros and assertions.  See cpphash.c */\n+  struct htab *hashtab;\n+\n+  /* Hash table of other included files.  See cppfiles.c */\n+  struct htab *all_include_files;\n+\n+  /* Chain of `actual directory' file_name_list entries,\n+     for \"\" inclusion. */\n+  struct file_name_list *actual_dirs;\n+\n+  /* Current maximum length of directory names in the search path\n+     for include files.  (Altered as we get more of them.)  */\n+  unsigned int max_include_len;\n+\n+  struct if_stack *if_stack;\n+\n+  long lineno;\n+\n+  struct tm *timebuf;\n+\n+  /* Buffer of -M output.  */\n+  struct deps *deps;\n+\n+  /* A buffer and a table, used only by read_and_prescan (in cppfiles.c)\n+     which are allocated once per cpp_reader object to keep them off the\n+     stack and avoid setup costs.  */\n+  unsigned char *input_buffer;\n+  unsigned char *input_speccase;\n+  size_t input_buffer_len;\n+\n+  /* User visible options.  */\n+  struct cpp_options opts;\n+\n+  /* Nonzero means we have printed (while error reporting) a list of\n+     containing files that matches the current status.  */\n+  unsigned char input_stack_listing_current;\n+\n+  /* If non-zero, macros are not expanded.  */\n+  unsigned char no_macro_expand;\n+\n+  /* If non-zero, directives cause a hard error.  Used when parsing\n+     macro arguments.  */\n+  unsigned char no_directives;\n+\n+  /* We're printed a warning recommending against using #import.  */\n+  unsigned char import_warning;\n+\n+  /* If true, characters between '<' and '>' are a single (string) token.  */\n+  unsigned char parsing_include_directive;\n+\n+  /* If true, # introduces an assertion (see do_assert) */\n+  unsigned char parsing_if_directive;\n+\n+  /* If true, # and ## are the STRINGIZE and TOKPASTE operators */\n+  unsigned char parsing_define_directive;\n+\n+  /* True if escape sequences (as described for has_escapes in\n+     parse_buffer) should be emitted.  */\n+  unsigned char output_escapes;\n+\n+  /* 0: Have seen non-white-space on this line.\n+     1: Only seen white space so far on this line.\n+     2: Only seen white space so far in this file.  */\n+  unsigned char only_seen_white;\n+\n+  /* True after cpp_start_read completes.  Used to inhibit some\n+     warnings while parsing the command line.  */\n+  unsigned char done_initializing;\n };\n \n+#define CPP_FATAL_LIMIT 1000\n+/* True if we have seen a \"fatal\" error. */\n+#define CPP_FATAL_ERRORS(READER) ((READER)->errors >= CPP_FATAL_LIMIT)\n+\n+/* Macros for manipulating the token_buffer. */\n+\n+/* Number of characters currently in PFILE's output buffer. */\n+#define CPP_WRITTEN(PFILE) ((size_t)((PFILE)->limit - (PFILE)->token_buffer))\n+#define CPP_PWRITTEN(PFILE) ((PFILE)->limit)\n+#define CPP_ADJUST_WRITTEN(PFILE,DELTA) ((PFILE)->limit += (DELTA))\n+#define CPP_SET_WRITTEN(PFILE,N) ((PFILE)->limit = (PFILE)->token_buffer + (N))\n+\n+#define CPP_OPTION(PFILE, OPTION) ((PFILE)->opts.OPTION)\n+#define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n+\n /* Name under which this program was invoked.  */\n extern const char *progname;\n \n@@ -436,7 +424,6 @@ extern enum cpp_token cpp_get_token PARAMS ((cpp_reader *));\n extern enum cpp_token cpp_get_non_space_token PARAMS ((cpp_reader *));\n \n extern void cpp_reader_init PARAMS ((cpp_reader *));\n-extern void cpp_options_init PARAMS ((cpp_options *));\n extern int cpp_start_read PARAMS ((cpp_reader *, const char *));\n extern void cpp_finish PARAMS ((cpp_reader *));\n extern void cpp_cleanup PARAMS ((cpp_reader *PFILE));"}, {"sha": "43d4c7bf52c39e614f57e5667e579b78bc5ec59a", "filename": "gcc/cppmain.c", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -28,7 +28,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n const char *progname;\n \n cpp_reader parse_in;\n-cpp_options options;\n \n \f\n extern int main\t\t\t\tPARAMS ((int, char **));\n@@ -38,9 +37,11 @@ main (argc, argv)\n      char **argv;\n {\n   char *p;\n+  cpp_reader *pfile = &parse_in;\n   int argi = 1;  /* Next argument to handle.  */\n-  struct cpp_options *opts = &options;\n   enum cpp_token kind;\n+  FILE *out;\n+  const char *out_fname;\n \n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && p[-1] != '/') --p;\n@@ -54,47 +55,49 @@ main (argc, argv)\n   (void) bindtextdomain (PACKAGE, localedir);\n   (void) textdomain (PACKAGE);\n \n-  cpp_reader_init (&parse_in);\n-  parse_in.opts = opts;\n-\n-  cpp_options_init (opts);\n+  cpp_reader_init (pfile);\n   \n-  argi += cpp_handle_options (&parse_in, argc - argi , argv + argi);\n-  if (argi < argc && ! CPP_FATAL_ERRORS (&parse_in))\n-    cpp_fatal (&parse_in, \"Invalid option `%s'\", argv[argi]);\n-  if (CPP_FATAL_ERRORS (&parse_in))\n+  argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n+  if (argi < argc && ! CPP_FATAL_ERRORS (pfile))\n+    cpp_fatal (pfile, \"Invalid option %s\", argv[argi]);\n+  if (CPP_FATAL_ERRORS (pfile))\n     return (FATAL_EXIT_CODE);\n-      \n-  parse_in.show_column = 1;\n \n-  if (! cpp_start_read (&parse_in, opts->in_fname))\n+  if (! cpp_start_read (pfile, CPP_OPTION (pfile, in_fname)))\n     return (FATAL_EXIT_CODE);\n \n   /* Now that we know the input file is valid, open the output.  */\n-\n-  if (!opts->out_fname || !strcmp (opts->out_fname, \"\"))\n-    opts->out_fname = \"stdout\";\n-  else if (! freopen (opts->out_fname, \"w\", stdout))\n+  out_fname = CPP_OPTION (pfile, out_fname);\n+  if (*out_fname == '\\0')\n+    {\n+      out_fname = \"stdout\";\n+      out = stdout;\n+    }\n+  else\n     {\n-      cpp_notice_from_errno (&parse_in, opts->out_fname);\n-      return (FATAL_EXIT_CODE);\n+      out = fopen (out_fname, \"w\");\n+      if (!out)\n+\t{\n+\t  cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n+\t  return (FATAL_EXIT_CODE);\n+\t}\n     }\n \n-  if (! opts->no_output)\n+  if (! CPP_OPTION (pfile, no_output))\n     {\n       do\n \t{\n-\t  kind = cpp_get_token (&parse_in);\n-\t  if (CPP_WRITTEN (&parse_in) >= BUFSIZ || kind == CPP_EOF)\n+\t  kind = cpp_get_token (pfile);\n+\t  if (CPP_WRITTEN (pfile) >= BUFSIZ || kind == CPP_EOF)\n \t    {\n-\t      size_t rem, count = CPP_WRITTEN (&parse_in);\n+\t      size_t rem, count = CPP_WRITTEN (pfile);\n \n-\t      rem = fwrite (parse_in.token_buffer, 1, count, stdout);\n+\t      rem = fwrite (parse_in.token_buffer, 1, count, out);\n \t      if (rem < count)\n \t\t/* Write error. */\n-\t\tcpp_notice_from_errno (&parse_in, opts->out_fname);\n+\t\tcpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n \n-\t      CPP_SET_WRITTEN (&parse_in, 0);\n+\t      CPP_SET_WRITTEN (pfile, 0);\n \t    }\n \t}\n       while (kind != CPP_EOF);\n@@ -103,19 +106,22 @@ main (argc, argv)\n     {\n       do\n \t{\n-\t  cpp_scan_buffer (&parse_in);\n-\t  kind = cpp_get_token (&parse_in);\n+\t  cpp_scan_buffer (pfile);\n+\t  kind = cpp_get_token (pfile);\n \t}\n       while (kind != CPP_EOF);\n-      CPP_SET_WRITTEN (&parse_in, 0);\n+      CPP_SET_WRITTEN (pfile, 0);\n     }\n \n-  cpp_finish (&parse_in);\n-  if (fwrite (parse_in.token_buffer, 1, CPP_WRITTEN (&parse_in), stdout)\n-      < CPP_WRITTEN (&parse_in))\n-    cpp_notice_from_errno (&parse_in, opts->out_fname);\n+  cpp_finish (pfile);\n+  if (fwrite (parse_in.token_buffer, 1, CPP_WRITTEN (pfile), out)\n+      < CPP_WRITTEN (pfile))\n+    cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n+\n+  if (ferror (out) || fclose (out))\n+    cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n \n-  cpp_cleanup (&parse_in);\n+  cpp_cleanup (pfile);\n \n   if (parse_in.errors)\n     return (FATAL_EXIT_CODE);"}, {"sha": "f6dae3a8ffa5108fe713a0528c829fbb2bc16555", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae79697b721b607964d32468c87d1881c3a39974/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=ae79697b721b607964d32468c87d1881c3a39974", "patch": "@@ -617,21 +617,18 @@ read_scan_file (in_fname, argc, argv)\n      char **argv;\n {\n   cpp_reader scan_in;\n-  cpp_options scan_options;\n   struct fn_decl *fn;\n   int i;\n   register struct symbol_list *cur_symbols;\n \n   obstack_init (&scan_file_obstack); \n \n   cpp_reader_init (&scan_in);\n-  scan_in.opts = &scan_options;\n-  cpp_options_init (&scan_options);\n   /* We are going to be scanning a header file out of its proper context,\n      so ignore warnings and errors.  */\n-  scan_options.inhibit_warnings = 1;\n-  scan_options.inhibit_errors = 1;\n-  scan_options.no_line_commands = 1;\n+  CPP_OPTION (&scan_in, inhibit_warnings) = 1;\n+  CPP_OPTION (&scan_in, inhibit_errors) = 1;\n+  CPP_OPTION (&scan_in, no_line_commands) = 1;\n   i = cpp_handle_options (&scan_in, argc, argv);\n   if (i < argc && ! CPP_FATAL_ERRORS (&scan_in))\n     cpp_fatal (&scan_in, \"Invalid option `%s'\", argv[i]);"}]}