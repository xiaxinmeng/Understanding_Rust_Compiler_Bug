{"sha": "213ab0a6c49f10069615b98d38bb794f844cf433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzYWIwYTZjNDlmMTAwNjk2MTViOThkMzhiYjc5NGY4NDRjZjQzMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-02T13:34:58Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-02T13:34:58Z"}, "message": "trans-decl.c (gfc_build_qualified_array): Fix coarray tokens for module coarrays with -fcoarray=lib.\n\n2015-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-decl.c (gfc_build_qualified_array): Fix coarray tokens\n        for module coarrays with -fcoarray=lib.\n\n2015-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray/codimension_2.f90: New.\n        * gfortran.dg/coarray/codimension_2a.f90: New.\n        * gfortran.dg/coarray_35.f90: New.\n        * gfortran.dg/coarray_35a.f90: New.\n\nFrom-SVN: r219142", "tree": {"sha": "aaed31262b527da51678b25c953076b79c972526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaed31262b527da51678b25c953076b79c972526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213ab0a6c49f10069615b98d38bb794f844cf433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213ab0a6c49f10069615b98d38bb794f844cf433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213ab0a6c49f10069615b98d38bb794f844cf433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213ab0a6c49f10069615b98d38bb794f844cf433/comments", "author": null, "committer": null, "parents": [{"sha": "4294c0935c186a724f044c36ca9693a7138853ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4294c0935c186a724f044c36ca9693a7138853ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4294c0935c186a724f044c36ca9693a7138853ae"}], "stats": {"total": 119, "additions": 114, "deletions": 5}, "files": [{"sha": "ea72687383f63db8481967d5eb5d78df0ea89277", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -1,11 +1,16 @@\n+2015-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (gfc_build_qualified_array): Fix coarray tokens\n+\tfor module coarrays with -fcoarray=lib.\n+\n 2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/60507\n \t* interface.c (is_procptr_result): New function to check if an\n \texpression is a procedure-pointer result.\n \t(compare_actual_formal): Use it.\n \n-Copyright (C) 2014 Free Software Foundation, Inc.\n+Copyright (C) 2015 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "9ef6bfcda80806645f2744c147053ec028be09d2", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -819,10 +819,22 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n       && GFC_TYPE_ARRAY_CAF_TOKEN (type) == NULL_TREE)\n     {\n       tree token;\n+      tree token_type = build_qualified_type (pvoid_type_node,\n+\t\t\t\t\t      TYPE_QUAL_RESTRICT);\n+\n+      if (sym->module && (sym->attr.use_assoc\n+\t\t\t  || sym->ns->proc_name->attr.flavor == FL_MODULE))\n+\t{\n+\t  tree token_name\n+\t\t= get_identifier (gfc_get_string (GFC_PREFIX (\"caf_token%s\"),\n+\t\t\tIDENTIFIER_POINTER (gfc_sym_mangled_identifier (sym))));\n+\t  token = build_decl (DECL_SOURCE_LOCATION (decl), VAR_DECL, token_name,\n+\t\t\t      token_type);\n+\t  TREE_PUBLIC (token) = 1;\n+\t}\n+      else\n+\ttoken = gfc_create_var_np (token_type, \"caf_token\");\n \n-      token = gfc_create_var_np (build_qualified_type (pvoid_type_node,\n-\t\t\t\t\t\t       TYPE_QUAL_RESTRICT),\n-\t\t\t\t \"caf_token\");\n       GFC_TYPE_ARRAY_CAF_TOKEN (type) = token;\n       DECL_ARTIFICIAL (token) = 1;\n       TREE_STATIC (token) = 1;"}, {"sha": "543cec61e1a6cc20e0950cdcaead29fc5f536534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -1,9 +1,16 @@\n+2015-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray/codimension_2.f90: New.\n+\t* gfortran.dg/coarray/codimension_2a.f90: New.\n+\t* gfortran.dg/coarray_35.f90: New.\n+\t* gfortran.dg/coarray_35a.f90: New.\n+\n 2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/60507\n \t* gfortran.dg/dummy_procedure_11: New.\n \n-Copyright (C) 2014 Free Software Foundation, Inc.\n+Copyright (C) 2015 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "b211f9b2448588d7a67c485c46d0b756e49657bc", "filename": "gcc/testsuite/gfortran.dg/coarray/codimension_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2.f90?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do link }\n+! { dg-additional-sources codimension_2a.f90 }\n+!\n+! To be used with codimension_2a.f90\n+! Check that the coarray declared in the module is accessible\n+! by doing a link test\n+!\n+! Contributed by Alessandro Fanfarillo.\n+!\n+module global_coarrays\n+  implicit none\n+  integer,parameter :: n=10\n+  integer :: b(10)[*]\n+end module global_coarrays"}, {"sha": "8eb472c6358c010a6bdfec9f17f19ac8c71e795d", "filename": "gcc/testsuite/gfortran.dg/coarray/codimension_2a.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_2a.f90?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile { target { ! *-*-* } } }\n+! SKIP THIS FILE\n+!\n+! Used by codimension_2.f90\n+!\n+! Check that the coarray declared in the module is accessible\n+! by doing a link test\n+!\n+! Contributed by Alessandro Fanfarillo.\n+!\n+program testmod\n+  use global_coarrays\n+  implicit none\n+  \n+  integer :: me\n+\n+  me = this_image()\n+\n+  b = me\n+\n+  if(me==1) then\n+     b(:) = b(:)[2]\n+     write(*,*) b\n+  end if\n+\n+end program testmod"}, {"sha": "e65f8fec90fc8659fc9d99f6be2048526646deaa", "filename": "gcc/testsuite/gfortran.dg/coarray_35.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35.f90?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! To be used with coarray_35a.f90\n+! Check that the coarray declared in the module is accessible\n+! by checking the assembler name\n+!\n+! Contributed by Alessandro Fanfarillo.\n+!\n+module global_coarrays\n+  implicit none\n+  integer,parameter :: n=10\n+  integer :: b(10)[*]\n+end module global_coarrays\n+\n+! Check for the symbol of the coarray token (w/o system-dependend prefix)\n+! { dg-final { scan-assembler \"caf_token__global_coarrays_MOD_b\" } }"}, {"sha": "eeeb2891ca99ace74358cb15c4a6ba3602badba9", "filename": "gcc/testsuite/gfortran.dg/coarray_35a.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213ab0a6c49f10069615b98d38bb794f844cf433/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_35a.f90?ref=213ab0a6c49f10069615b98d38bb794f844cf433", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+! { dg-compile-aux-modules \"coarray_35.f90\" }\n+!\n+! Check that the coarray declared in the module is accessible\n+! by checking the assembler name\n+!\n+! Contributed by Alessandro Fanfarillo.\n+!\n+program testmod\n+  use global_coarrays\n+  implicit none\n+  \n+  integer :: me\n+\n+  me = this_image()\n+\n+  b = me\n+\n+  if(me==1) then\n+     b(:) = b(:)[2]\n+     write(*,*) b\n+  end if\n+\n+end program testmod\n+\n+! Check for the symbol of the coarray token (w/o system-dependend prefix)\n+! { dg-final { scan-assembler \"caf_token__global_coarrays_MOD_b\" } }"}]}