{"sha": "6a2b39bdda1bb40449552e3b7617653b63cefac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyYjM5YmRkYTFiYjQwNDQ5NTUyZTNiNzYxNzY1M2I2M2NlZmFjOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:47:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:47:46Z"}, "message": "misc.c (gnat_types_compatible_p, [...]): Remove.\n\n\t* misc.c (gnat_types_compatible_p, LANG_HOOKS_TYPES_COMPATIBLE_P):\n\tRemove.\n\t(LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): New.\n\n\t* adaint.h: (__gnat_dup, __gnat_dup2): Add missing decls.\n\n\t* trans.c (Exception_Handler_to_gnu_sjlj): Also handle renamed\n\texception.\n\t(call_to_gnu): Convert to actual DECL_ARG_TYPE, not variant of it.\n\nFrom-SVN: r91890", "tree": {"sha": "7b83673455bc8ce24ce19e2a48a13fe8acf141db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b83673455bc8ce24ce19e2a48a13fe8acf141db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2b39bdda1bb40449552e3b7617653b63cefac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2b39bdda1bb40449552e3b7617653b63cefac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2b39bdda1bb40449552e3b7617653b63cefac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2b39bdda1bb40449552e3b7617653b63cefac9/comments", "author": null, "committer": null, "parents": [{"sha": "bd94e912ff679565d51bae79ef140ab7e7836aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd94e912ff679565d51bae79ef140ab7e7836aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd94e912ff679565d51bae79ef140ab7e7836aef"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "542b1c12cf9043f577304406df6813e0acc46fcb", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=6a2b39bdda1bb40449552e3b7617653b63cefac9", "patch": "@@ -78,6 +78,8 @@ extern OS_Time __gnat_file_time_fd                  (int);\n extern void   __gnat_set_file_time_name\t\t   (char *, time_t);\n extern void   __gnat_get_env_value_ptr             (char *, int *,\n \t\t\t\t\t\t    char **);\n+extern int    __gnat_dup\t\t\t   (int);\n+extern int    __gnat_dup2\t\t\t   (int, int);\n extern int    __gnat_file_exists\t\t   (char *);\n extern int    __gnat_is_regular_file               (char *);\n extern int    __gnat_is_absolute_path              (char *,int);"}, {"sha": "8c44421775963f3c454c71ea5a23a9c79f9de3e7", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=6a2b39bdda1bb40449552e3b7617653b63cefac9", "patch": "@@ -94,7 +94,6 @@ static bool gnat_post_options\t\t(const char **);\n static HOST_WIDE_INT gnat_get_alias_set\t(tree);\n static void gnat_print_decl\t\t(FILE *, tree, int);\n static void gnat_print_type\t\t(FILE *, tree, int);\n-static int gnat_types_compatible_p\t(tree, tree);\n static const char *gnat_printable_name\t(tree, int);\n static tree gnat_eh_runtime_type\t(tree);\n static int gnat_eh_type_covers\t\t(tree, tree);\n@@ -130,6 +129,8 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_PUSHDECL\t\tlhd_return_tree\n #undef  LANG_HOOKS_FINISH_INCOMPLETE_DECL\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL gnat_finish_incomplete_decl\n+#undef\tLANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS\n+#define LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS true\n #undef  LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n #undef  LANG_HOOKS_EXPAND_EXPR\n@@ -142,8 +143,6 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n #undef  LANG_HOOKS_PRINT_TYPE\n #define LANG_HOOKS_PRINT_TYPE\t\tgnat_print_type\n-#undef  LANG_HOOKS_TYPES_COMPATIBLE_P\n-#define LANG_HOOKS_TYPES_COMPATIBLE_P\tgnat_types_compatible_p\n #undef  LANG_HOOKS_TYPE_MAX_SIZE\n #define LANG_HOOKS_TYPE_MAX_SIZE\tgnat_type_max_size\n #undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n@@ -554,27 +553,6 @@ gnat_print_type (FILE *file, tree node, int indent)\n     }\n }\n \n-/* We consider two types compatible if they have the same main variant,\n-   but we also consider two array types compatible if they have the same\n-   component type and bounds.\n-\n-   ??? We may also want to generalize to considering lots of integer types\n-   compatible, but we need to understand the effects of alias sets first.  */\n-\n-static int\n-gnat_types_compatible_p (tree x, tree y)\n-{\n-  if (TREE_CODE (x) == ARRAY_TYPE && TREE_CODE (y) == ARRAY_TYPE\n-      && gnat_types_compatible_p (TREE_TYPE (x), TREE_TYPE (y))\n-      && operand_equal_p (TYPE_MIN_VALUE (TYPE_DOMAIN (x)),\n-\t\t\t  TYPE_MIN_VALUE (TYPE_DOMAIN (y)), 0)\n-      && operand_equal_p (TYPE_MAX_VALUE (TYPE_DOMAIN (x)),\n-\t\t\t  TYPE_MAX_VALUE (TYPE_DOMAIN (y)), 0))\n-    return 1;\n-  else\n-    return TYPE_MAIN_VARIANT (x) == TYPE_MAIN_VARIANT (y);\n-}\n-\n static const char *\n gnat_printable_name (tree decl, int verbosity)\n {"}, {"sha": "2acf8323849e8b10fdbc6f8293c6e4e09586d93a", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2b39bdda1bb40449552e3b7617653b63cefac9/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=6a2b39bdda1bb40449552e3b7617653b63cefac9", "patch": "@@ -1621,7 +1621,9 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n        gnat_formal = Next_Formal_With_Extras (gnat_formal),\n        gnat_actual = Next_Actual (gnat_actual))\n     {\n-      tree gnu_formal_type = gnat_to_gnu_type (Etype (gnat_formal));\n+      tree gnu_formal\n+\t= (present_gnu_tree (gnat_formal)\n+\t   ? get_gnu_tree (gnat_formal) : NULL_TREE);\n       /* We treat a conversion between aggregate types as if it is an\n \t unchecked conversion.  */\n       bool unchecked_convert_p\n@@ -1632,10 +1634,8 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t\t   ? Expression (gnat_actual) : gnat_actual);\n       tree gnu_name = gnat_to_gnu (gnat_name);\n       tree gnu_name_type = gnat_to_gnu_type (Etype (gnat_name));\n-      tree gnu_formal\n-\t= (present_gnu_tree (gnat_formal)\n-\t   ? get_gnu_tree (gnat_formal) : NULL_TREE);\n       tree gnu_actual;\n+      tree gnu_formal_type;\n \n       /* If it's possible we may need to use this expression twice, make sure\n \t than any side-effects are handled via SAVE_EXPRs. Likewise if we need\n@@ -1739,9 +1739,6 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \tgnu_actual = convert (gnat_to_gnu_type (Etype (gnat_actual)),\n \t\t\t      gnu_actual);\n \n-      if (TREE_CODE (gnu_actual) != SAVE_EXPR)\n-\tgnu_actual = convert (gnu_formal_type, gnu_actual);\n-\n       /* If we have not saved a GCC object for the formal, it means it is an\n \t OUT parameter not passed by reference and that does not need to be\n \t copied in. Otherwise, look at the PARM_DECL to see if it is passed by\n@@ -1856,9 +1853,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t\t\t\t    integer_zero_node),\n \t\t\t\t   false);\n \t  else\n-\t    gnu_actual\n-\t      = convert (TYPE_MAIN_VARIANT (DECL_ARG_TYPE (gnu_formal)),\n-\t\t\t gnu_actual);\n+\t    gnu_actual = convert (DECL_ARG_TYPE (gnu_formal), gnu_actual);\n \t}\n \n       gnu_actual_list = tree_cons (NULL_TREE, gnu_actual, gnu_actual_list);\n@@ -2244,8 +2239,15 @@ Exception_Handler_to_gnu_sjlj (Node_Id gnat_node)\n       else if (Nkind (gnat_temp) == N_Identifier\n \t       || Nkind (gnat_temp) == N_Expanded_Name)\n \t{\n-\t  tree gnu_expr\n-\t    = gnat_to_gnu_entity (Entity (gnat_temp), NULL_TREE, 0);\n+\t  Entity_Id gnat_ex_id = Entity (gnat_temp);\n+\t  tree gnu_expr;\n+\n+\t  /* Exception may be a renaming. Recover original exception which is\n+\t     the one elaborated and registered.  */\n+\t  if (Present (Renamed_Object (gnat_ex_id)))\n+\t    gnat_ex_id = Renamed_Object (gnat_ex_id);\n+\n+\t  gnu_expr = gnat_to_gnu_entity (gnat_ex_id, NULL_TREE, 0);\n \n \t  this_choice\n \t    = build_binary_op"}]}