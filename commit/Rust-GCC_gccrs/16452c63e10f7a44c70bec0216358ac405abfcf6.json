{"sha": "16452c63e10f7a44c70bec0216358ac405abfcf6", "node_id": "C_kwDOANBUbNoAKDE2NDUyYzYzZTEwZjdhNDRjNzBiZWMwMjE2MzU4YWM0MDVhYmZjZjY", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:04:41Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:21Z"}, "message": "arm: improve tests and fix vclzq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (@mve_vclzq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u8.c: Likewise.\n\t* gcc.target/arm/simd/mve-vclz.c: Update test.", "tree": {"sha": "607b2bfb921369cb0e8c4b75e00a230166cbee43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607b2bfb921369cb0e8c4b75e00a230166cbee43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16452c63e10f7a44c70bec0216358ac405abfcf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16452c63e10f7a44c70bec0216358ac405abfcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16452c63e10f7a44c70bec0216358ac405abfcf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16452c63e10f7a44c70bec0216358ac405abfcf6/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4424ef898608321b60610c4f3c98737ace3680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4424ef898608321b60610c4f3c98737ace3680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4424ef898608321b60610c4f3c98737ace3680"}], "stats": {"total": 568, "additions": 506, "deletions": 62}, "files": [{"sha": "2728537009106b38ccb949ba84c2ac25d040ac83", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -448,7 +448,7 @@\n \t(clz:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vclz.i%#<V_sz_elem>  %q0, %q1\"\n+  \"vclz.i%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n (define_expand \"mve_vclzq_u<mode>\""}, {"sha": "620314e4ff27951975962812d90c18ef13508e72", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vclzq_m_s16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dfda1e67287d69b502f791bfdcab2bc332e3ac90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vclzq_m_s32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1300fe6f8c41d0de3da87d62580264a5b6b9e4a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_s8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vclzq_m_s8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "922819d388e41405599c932a86f7c34267b4b47e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n {\n   return vclzq_m_u16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6e75a0463cf145bac5fb9f8ca0f0b2dc2a091dac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n {\n   return vclzq_m_u32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3c450e8eca0017b6a06c4a0b6bd4206f930cf772", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_m_u8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_m_u8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n {\n   return vclzq_m_u8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n {\n   return vclzq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "17be53f395b3bb601310021590acb3e9fb4169ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a)\n {\n   return vclzq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a)\n {\n   return vclzq (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5e440febb295d75aacb69afb6111a916c037995d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s32.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a)\n {\n   return vclzq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a)\n {\n   return vclzq (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9eaa9a4269af3e13859632d78236b4cc7e24b887", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_s8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a)\n {\n   return vclzq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a)\n {\n   return vclzq (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "37179b22a5c5a4ffaf1513e4710423d8c0ec2a61", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a)\n {\n-    return vclzq_u16 (a);\n+  return vclzq_u16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a)\n {\n-    return vclzq (a);\n+  return vclzq (a);\n+}\n+\n+#ifdef __cplusplus\n }\n+#endif\n \n-/* { dg-final { scan-assembler \"vclz.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "65ee44d41d5225eca09c5a5c133a00c46a8ed243", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u32.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a)\n {\n-    return vclzq_u32 (a);\n+  return vclzq_u32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a)\n {\n-    return vclzq (a);\n+  return vclzq (a);\n+}\n+\n+#ifdef __cplusplus\n }\n+#endif\n \n-/* { dg-final { scan-assembler \"vclz.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bed4ab1878a7db1b2068e59beac53b719ce19325", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_u8.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_u8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvclz.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a)\n {\n-    return vclzq_u8 (a);\n+  return vclzq_u8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvclz.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a)\n {\n-    return vclzq (a);\n+  return vclzq (a);\n+}\n+\n+#ifdef __cplusplus\n }\n+#endif\n \n-/* { dg-final { scan-assembler \"vclz.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ea78bf20066531a60ec6d8570643be64c17993df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, mve_pred16_t p)\n {\n   return vclzq_x_s16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cc85d4d27e2284a22f5259f0e44164f492f98790", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, mve_pred16_t p)\n {\n   return vclzq_x_s32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0f809167a4f813b4e38683e4212e2fe96d4726f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, mve_pred16_t p)\n {\n   return vclzq_x_s8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a9b662d40f29556447de8c3db98c2a83cec0d875", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, mve_pred16_t p)\n {\n   return vclzq_x_u16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5446938c3fd0cbfb8f8ffd76b719871072dbc511", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, mve_pred16_t p)\n {\n   return vclzq_x_u32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "548a74e83674b170a9cc1361aaa2b2c5637d5ed5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, mve_pred16_t p)\n {\n   return vclzq_x_u8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclzt.i8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, mve_pred16_t p)\n {\n   return vclzq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "38e91fc5bcec6ae3d0b7a634aaf9b403c10769ff", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vclz.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16452c63e10f7a44c70bec0216358ac405abfcf6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c?ref=16452c63e10f7a44c70bec0216358ac405abfcf6", "patch": "@@ -23,6 +23,6 @@ FUNC(u, uint, 8, clz)\n \n /* 16 and 8-bit versions are not vectorized because they need pack/unpack\n    patterns since __builtin_clz uses 32-bit parameter and return value.  */\n-/* { dg-final { scan-assembler-times {vclz\\.i32  q[0-9]+, q[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-times {vclz\\.i16  q[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {vclz\\.i8  q[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vclz\\.i32\\tq[0-9]+, q[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vclz\\.i16\\tq[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vclz\\.i8\\tq[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */"}]}