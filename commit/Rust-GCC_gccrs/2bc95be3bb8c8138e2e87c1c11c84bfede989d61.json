{"sha": "2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjOTViZTNiYjhjODEzOGUyZTg3YzFjMTFjODRiZmVkZTk4OWQ2MQ==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-06-04T12:42:16Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-13T12:49:20Z"}, "message": "aarch64: fix __builtin_eh_return with pac-ret [PR94891]\n\nCurrently __builtin_eh_return takes a signed return address, which can\ncause ABI and API issues: 1) pointer representation problems if the\naddress is passed around before eh return, 2) the source code needs\npac-ret specific changes and needs to know if pac-ret is used in the\ncurrent frame, 3) signed address may not be representible as void *\n(with ilp32 abi).\n\nUsing address signing to protect eh return is ineffective because the\ninstruction sequence in the unwinder that starts from the address\nsigning and ends with a ret can be used as a return to anywhere gadget.\nUsing indirect branch istead of ret with bti j landing pads at the\ntarget can reduce the potential of such gadget, which also implies\nthat __builtin_eh_return should not take a signed address.\n\nThis is a big hammer fix to the ABI and API issues: it turns pac-ret\noff for the caller completely (not just on the eh return path).  To\nharden the caller against ROP attacks, it should use indirect branch\ninstead of ret, this is not attempted so the patch remains small and\nbackportable.\n\n2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\ngcc/ChangeLog:\n\n\tPR target/94891\n\t* config/aarch64/aarch64.c (aarch64_return_address_signing_enabled):\n\tDisable return address signing if __builtin_eh_return is used.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94891\n\t* gcc.target/aarch64/return_address_sign_1.c: Update test.\n\t* gcc.target/aarch64/return_address_sign_b_1.c: Likewise.", "tree": {"sha": "6161837033e61864d8763fe42ef2306a6f0b6145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6161837033e61864d8763fe42ef2306a6f0b6145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463a54e5d4956143f81c1f23b91cbd2d93855741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463a54e5d4956143f81c1f23b91cbd2d93855741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463a54e5d4956143f81c1f23b91cbd2d93855741"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "6ef2e397d3930346e42bfe1c3e7c7c36c03e9a22", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "patch": "@@ -6957,6 +6957,17 @@ aarch64_return_address_signing_enabled (void)\n   /* This function should only be called after frame laid out.   */\n   gcc_assert (cfun->machine->frame.laid_out);\n \n+  /* Turn return address signing off in any function that uses\n+     __builtin_eh_return.  The address passed to __builtin_eh_return\n+     is not signed so either it has to be signed (with original sp)\n+     or the code path that uses it has to avoid authenticating it.\n+     Currently eh return introduces a return to anywhere gadget, no\n+     matter what we do here since it uses ret with user provided\n+     address. An ideal fix for that is to use indirect branch which\n+     can be protected with BTI j (to some extent).  */\n+  if (crtl->calls_eh_return)\n+    return false;\n+\n   /* If signing scope is AARCH64_FUNCTION_NON_LEAF, we only sign a leaf function\n      if its LR is pushed onto stack.  */\n   return (aarch64_ra_sign_scope == AARCH64_FUNCTION_ALL"}, {"sha": "232ba67ade0ba0e494dc80893df13e6cf6ff1df1", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c?ref=2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "patch": "@@ -41,12 +41,12 @@ func3 (int a, int b, int c)\n void __attribute__ ((target (\"arch=armv8.3-a\")))\n func4 (long offset, void *handler, int *ptr, int imm1, int imm2)\n {\n-  /* paciasp */\n+  /* no paciasp */\n   *ptr = imm1 + foo (imm1) + imm2;\n   __builtin_eh_return (offset, handler);\n-  /* autiasp */\n+  /* no autiasp */\n   return;\n }\n \n-/* { dg-final { scan-assembler-times \"autiasp\" 4 } } */\n-/* { dg-final { scan-assembler-times \"paciasp\" 4 } } */\n+/* { dg-final { scan-assembler-times \"autiasp\" 3 } } */\n+/* { dg-final { scan-assembler-times \"paciasp\" 3 } } */"}, {"sha": "43e32ab6cb77c749469a902a27c3a2a133b0f47e", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_b_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc95be3bb8c8138e2e87c1c11c84bfede989d61/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_b_1.c?ref=2bc95be3bb8c8138e2e87c1c11c84bfede989d61", "patch": "@@ -41,12 +41,12 @@ func3 (int a, int b, int c)\n void __attribute__ ((target (\"arch=armv8.3-a\")))\n func4 (long offset, void *handler, int *ptr, int imm1, int imm2)\n {\n-  /* pacibsp */\n+  /* no pacibsp */\n   *ptr = imm1 + foo (imm1) + imm2;\n   __builtin_eh_return (offset, handler);\n-  /* autibsp */\n+  /* no autibsp */\n   return;\n }\n \n-/* { dg-final { scan-assembler-times \"pacibsp\" 4 } } */\n-/* { dg-final { scan-assembler-times \"autibsp\" 4 } } */\n+/* { dg-final { scan-assembler-times \"pacibsp\" 3 } } */\n+/* { dg-final { scan-assembler-times \"autibsp\" 3 } } */"}]}