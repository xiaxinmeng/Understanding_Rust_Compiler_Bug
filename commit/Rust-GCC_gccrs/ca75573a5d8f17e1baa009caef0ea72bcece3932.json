{"sha": "ca75573a5d8f17e1baa009caef0ea72bcece3932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3NTU3M2E1ZDhmMTdlMWJhYTAwOWNhZWYwZWE3MmJjZWNlMzkzMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-08-16T21:49:33Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-08-16T21:49:33Z"}, "message": "gcj.texi (Class Initialization): Mention class initialization of arrays.\n\n\t* gcj.texi (Class Initialization): Mention class initialization of\n\tarrays.\n\nFrom-SVN: r56386", "tree": {"sha": "a81a851051e84ed06c1f2de52ebdce8c9f6f65f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81a851051e84ed06c1f2de52ebdce8c9f6f65f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca75573a5d8f17e1baa009caef0ea72bcece3932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca75573a5d8f17e1baa009caef0ea72bcece3932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca75573a5d8f17e1baa009caef0ea72bcece3932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca75573a5d8f17e1baa009caef0ea72bcece3932/comments", "author": null, "committer": null, "parents": [{"sha": "f97a5bda3af8c5396ed5704b78ec634c82987a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f97a5bda3af8c5396ed5704b78ec634c82987a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f97a5bda3af8c5396ed5704b78ec634c82987a48"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "962e409edc942fd4a04268766eb79f9b3bb63d2d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca75573a5d8f17e1baa009caef0ea72bcece3932/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca75573a5d8f17e1baa009caef0ea72bcece3932/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca75573a5d8f17e1baa009caef0ea72bcece3932", "patch": "@@ -1,3 +1,8 @@\n+2002-08-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gcj.texi (Class Initialization): Mention class initialization of\n+\tarrays.\n+\n 2002-07-30  Andrew Haley  <aph@cambridge.redhat.com>\n \n \t* Make-lang.in (java-tree-inline.o): New."}, {"sha": "ac1702f250367c11973b0ea8a0c15e02348ed47a", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca75573a5d8f17e1baa009caef0ea72bcece3932/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca75573a5d8f17e1baa009caef0ea72bcece3932/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=ca75573a5d8f17e1baa009caef0ea72bcece3932", "patch": "@@ -1316,16 +1316,17 @@ programmer's responsibility to make sure classes are initialized.\n However, this is fairly painless because of the conventions assumed by\n the Java system.\n \n-First, @code{libgcj} will make sure a class is initialized\n-before an instance of that object is created.  This is one\n-of the responsibilities of the @code{new} operation.  This is\n-taken care of both in Java code, and in C++ code.  (When the G++\n-compiler sees a @code{new} of a Java class, it will call\n-a routine in @code{libgcj} to allocate the object, and that\n-routine will take care of initializing the class.)  It follows that you can\n-access an instance field, or call an instance (non-static)\n-method and be safe in the knowledge that the class and all\n-of its base classes have been initialized.\n+First, @code{libgcj} will make sure a class is initialized before an\n+instance of that object is created.  This is one of the\n+responsibilities of the @code{new} operation.  This is taken care of\n+both in Java code, and in C++ code.  When G++ sees a @code{new} of a\n+Java class, it will call a routine in @code{libgcj} to allocate the\n+object, and that routine will take care of initializing the class.\n+Note however that this does not happen for Java arrays; you must\n+allocate those using the appropriate CNI function.  It follows that\n+you can access an instance field, or call an instance (non-static)\n+method and be safe in the knowledge that the class and all of its base\n+classes have been initialized.\n \n Invoking a static method is also safe.  This is because the\n Java compiler adds code to the start of a static method to make sure"}]}