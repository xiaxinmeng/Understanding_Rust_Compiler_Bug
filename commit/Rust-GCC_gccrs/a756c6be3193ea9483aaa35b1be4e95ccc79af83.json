{"sha": "a756c6be3193ea9483aaa35b1be4e95ccc79af83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1NmM2YmUzMTkzZWE5NDgzYWFhMzViMWJlNGU5NWNjYzc5YWY4Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T19:49:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T19:49:43Z"}, "message": "Introduce rtx_insn_list subclass of rtx_def\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (class rtx_insn_list): Add forward declaration.\n\t* rtl.h (class rtx_insn_list): New subclass of rtx_def\n\t(is_a_helper <rtx_insn_list *>::test): New.\n\t(rtx_insn_list::next): New.\n\t(rtx_insn_list::insn): New.\n\t(gen_rtx_INSN_LIST): Add prototype.\n\t* emit-rtl.c (gen_rtx_INSN_LIST): New.\n\t* gengenrtl.c (special_rtx): Add INSN_LIST.\n\nFrom-SVN: r214589", "tree": {"sha": "607183220b262722c379a6414c416ad35da185a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607183220b262722c379a6414c416ad35da185a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a756c6be3193ea9483aaa35b1be4e95ccc79af83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a756c6be3193ea9483aaa35b1be4e95ccc79af83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a756c6be3193ea9483aaa35b1be4e95ccc79af83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a756c6be3193ea9483aaa35b1be4e95ccc79af83/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9daaca3673d515327b9d13933b4f0f5e3d9f9582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9daaca3673d515327b9d13933b4f0f5e3d9f9582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9daaca3673d515327b9d13933b4f0f5e3d9f9582"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "2004d583c3fda691379d1a4e17f379009b3b9384", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a756c6be3193ea9483aaa35b1be4e95ccc79af83", "patch": "@@ -1,3 +1,14 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (class rtx_insn_list): Add forward declaration.\n+\t* rtl.h (class rtx_insn_list): New subclass of rtx_def\n+\t(is_a_helper <rtx_insn_list *>::test): New.\n+\t(rtx_insn_list::next): New.\n+\t(rtx_insn_list::insn): New.\n+\t(gen_rtx_INSN_LIST): Add prototype.\n+\t* emit-rtl.c (gen_rtx_INSN_LIST): New.\n+\t* gengenrtl.c (special_rtx): Add INSN_LIST.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ira-lives.c (find_call_crossed_cheap_reg): Strengthen local"}, {"sha": "99ddbdbaf145e8be7a15451fd5e07aa064615ffd", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=a756c6be3193ea9483aaa35b1be4e95ccc79af83", "patch": "@@ -60,6 +60,7 @@ typedef const struct rtx_def *const_rtx;\n    hierarchy, along with the relevant invariant.\n    Where possible, keep this list in the same order as in rtl.def.  */\n class rtx_def;\n+  class rtx_insn_list;           /* GET_CODE (X) == INSN_LIST */\n   class rtx_insn;\n     class rtx_debug_insn;      /* DEBUG_INSN_P (X) */\n     class rtx_nonjump_insn;    /* NONJUMP_INSN_P (X) */"}, {"sha": "cffb8db40f45f997bee4ecacd150f35a1d70fa77", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a756c6be3193ea9483aaa35b1be4e95ccc79af83", "patch": "@@ -409,6 +409,13 @@ gen_raw_REG (enum machine_mode mode, int regno)\n    functions do the raw handling.  If you add to this list, modify\n    special_rtx in gengenrtl.c as well.  */\n \n+rtx_insn_list *\n+gen_rtx_INSN_LIST (enum machine_mode mode, rtx insn, rtx insn_list)\n+{\n+  return as_a <rtx_insn_list *> (gen_rtx_fmt_ue (INSN_LIST, mode, insn,\n+\t\t\t\t\t\t insn_list));\n+}\n+\n rtx\n gen_rtx_CONST_INT (enum machine_mode mode ATTRIBUTE_UNUSED, HOST_WIDE_INT arg)\n {"}, {"sha": "cd2934126af2d03972c5fdc11d006465284c8c6d", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=a756c6be3193ea9483aaa35b1be4e95ccc79af83", "patch": "@@ -123,7 +123,8 @@ special_format (const char *fmt)\n static int\n special_rtx (int idx)\n {\n-  return (strcmp (defs[idx].enumname, \"CONST_INT\") == 0\n+  return (strcmp (defs[idx].enumname, \"INSN_LIST\") == 0\n+\t  || strcmp (defs[idx].enumname, \"CONST_INT\") == 0\n \t  || strcmp (defs[idx].enumname, \"REG\") == 0\n \t  || strcmp (defs[idx].enumname, \"SUBREG\") == 0\n \t  || strcmp (defs[idx].enumname, \"MEM\") == 0"}, {"sha": "9f57170d804d18288a879ad3f9387e017a996ad2", "filename": "gcc/rtl.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a756c6be3193ea9483aaa35b1be4e95ccc79af83/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a756c6be3193ea9483aaa35b1be4e95ccc79af83", "patch": "@@ -402,6 +402,35 @@ struct GTY((desc(\"0\"), tag(\"0\"),\n   } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n+class GTY(()) rtx_insn_list : public rtx_def\n+{\n+  /* No extra fields, but adds invariant: (GET_CODE (X) == INSN_LIST).\n+\n+     This is an instance of:\n+\n+       DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n+\n+     i.e. a node for constructing singly-linked lists of rtx_insn *, where\n+     the list is \"external\" to the insn (as opposed to the doubly-linked\n+     list embedded within rtx_insn itself).  */\n+\n+public:\n+  /* Get next in list.  */\n+  rtx_insn_list *next () const;\n+\n+  /* Get at the underlying instruction.  */\n+  rtx_insn *insn () const;\n+\n+};\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_insn_list *>::test (rtx rt)\n+{\n+  return rt->code == INSN_LIST;\n+}\n+\n class GTY(()) rtx_insn : public rtx_def\n {\n   /* No extra fields, but adds the invariant:\n@@ -1168,6 +1197,21 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)\n \f\n+\n+/* Methods of rtx_insn_list.  */\n+\n+inline rtx_insn_list *rtx_insn_list::next () const\n+{\n+  rtx tmp = XEXP (this, 1);\n+  return safe_as_a <rtx_insn_list *> (tmp);\n+}\n+\n+inline rtx_insn *rtx_insn_list::insn () const\n+{\n+  rtx tmp = XEXP (this, 0);\n+  return safe_as_a <rtx_insn *> (tmp);\n+}\n+\n /* ACCESS MACROS for particular fields of insns.  */\n \n /* Holds a unique number for each insn.\n@@ -2952,6 +2996,7 @@ get_mem_attrs (const_rtx x)\n    generation functions included above do the raw handling.  If you\n    add to this list, modify special_rtx in gengenrtl.c as well.  */\n \n+extern rtx_insn_list *gen_rtx_INSN_LIST (enum machine_mode, rtx, rtx);\n extern rtx gen_rtx_CONST_INT (enum machine_mode, HOST_WIDE_INT);\n extern rtx gen_rtx_CONST_VECTOR (enum machine_mode, rtvec);\n extern rtx gen_raw_REG (enum machine_mode, int);"}]}