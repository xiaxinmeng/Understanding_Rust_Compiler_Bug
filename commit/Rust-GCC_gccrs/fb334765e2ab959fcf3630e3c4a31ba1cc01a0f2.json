{"sha": "fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzMzQ3NjVlMmFiOTU5ZmNmMzYzMGUzYzRhMzFiYTFjYzAxYTBmMg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-05-09T11:03:36Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-05-09T11:03:36Z"}, "message": "Avoid endless run-time recursion for copying single-element tuples where the...\n\n\tAvoid endless run-time recursion for copying single-element\n\ttuples where the element type is by-value constructible\n\tfrom any type.\n \t* include/std/tuple (_NotSameTuple): New.\n \t* include/std/tuple (tuple(_UElements&&...): Use it.\n\t* testsuite/20_util/tuple/cons/element_accepts_anything_byval.cc: New.\n\nFrom-SVN: r236025", "tree": {"sha": "9e1995589052979ed36437c6c15615ab0ee511d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1995589052979ed36437c6c15615ab0ee511d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc48633e86abf4dacc6ee7281a3be14d97328980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc48633e86abf4dacc6ee7281a3be14d97328980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc48633e86abf4dacc6ee7281a3be14d97328980"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "6f4ae5f49502d8742998190e64cddbc333edb45b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "patch": "@@ -1,3 +1,12 @@\n+2016-05-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tAvoid endless run-time recursion for copying single-element\n+\ttuples where the element type is by-value constructible\n+\tfrom any type.\n+\t* include/std/tuple (_NotSameTuple): New.\n+\t* include/std/tuple (tuple(_UElements&&...): Use it.\n+\t* testsuite/20_util/tuple/cons/element_accepts_anything_byval.cc: New.\n+\n 2016-05-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/71004"}, {"sha": "7522e435184564c8765f12510f9668e0b4d55ee8", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "patch": "@@ -500,6 +500,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                      __not_<is_constructible<_Elements..., _SrcTuple>>\n               >::value;\n     }\n+    template<typename... _UElements>\n+    static constexpr bool _NotSameTuple()\n+    {\n+      return  __not_<is_same<tuple<_Elements...>,\n+\t\t\t     typename remove_const<\n+\t\t\t       typename remove_reference<_UElements...>::type\n+\t\t\t       >::type>>::value;\n+    }\n   };\n \n   template<typename... _Elements>\n@@ -534,6 +542,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return true;\n     }\n+    template<typename... _UElements>\n+    static constexpr bool _NotSameTuple()\n+    {\n+      return  true;\n+    }\n   };\n \n   /// Primary class template, tuple\n@@ -611,7 +624,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       _Elements...>;\n \n       template<typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+\t       enable_if<\n+\t\t  _TC<sizeof...(_UElements) == 1, _Elements...>::template\n+\t\t    _NotSameTuple<_UElements...>()\n+\t\t  && _TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && _TMC<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()\n@@ -621,7 +637,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         : _Inherited(std::forward<_UElements>(__elements)...) { }\n \n       template<typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<\n+\t\t  _TC<sizeof...(_UElements) == 1, _Elements...>::template\n+\t\t    _NotSameTuple<_UElements...>()\n+\t\t  && _TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && !_TMC<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()"}, {"sha": "fe9bea678a47fe9165404ca571fc53a9da25f9c2", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/element_accepts_anything_byval.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Felement_accepts_anything_byval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Felement_accepts_anything_byval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Felement_accepts_anything_byval.cc?ref=fb334765e2ab959fcf3630e3c4a31ba1cc01a0f2", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+using namespace std;\n+\n+struct Something {\n+    Something() { }\n+    template <typename T> Something(T) { }\n+};\n+\n+int main() {\n+    tuple<Something> t1;\n+    tuple<Something> t2 = t1;\n+}\n+"}]}