{"sha": "7ebf9677e58b3f97e71f267e4f27bcaf01458393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViZjk2NzdlNThiM2Y5N2U3MWYyNjdlNGYyN2JjYWYwMTQ1ODM5Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-20T09:31:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-20T09:31:40Z"}, "message": "stor-layout.c (finish_bitfield_representative): Fallback to conservative maximum size if the padding up to the next field...\n\n2012-03-20  Richard Guenther  <rguenther@suse.de>\n\n\t* stor-layout.c (finish_bitfield_representative): Fallback\n\tto conservative maximum size if the padding up to the next\n\tfield cannot be computed as a constant.\n\t(finish_bitfield_layout): If we cannot compute the distance\n\tbetween the start of the bitfield representative and the\n\tbitfield member start a new representative.\n\t* expr.c (get_bit_range): The distance between the start of\n\tthe bitfield representative and the bitfield member is zero\n\tif the field offsets are not constants.\n\n\t* gnat.dg/pack16.adb: New testcase.\n\t* gnat.dg/pack16_pkg.ads: Likewise.\n\t* gnat.dg/specs/pack8.ads: Likewise.\n\t* gnat.dg/specs/pack8_pkg.ads: Likewise.\n\nFrom-SVN: r185563", "tree": {"sha": "0549509c3acd6070b5ca74672b96a9e435dd8bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0549509c3acd6070b5ca74672b96a9e435dd8bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ebf9677e58b3f97e71f267e4f27bcaf01458393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebf9677e58b3f97e71f267e4f27bcaf01458393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebf9677e58b3f97e71f267e4f27bcaf01458393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebf9677e58b3f97e71f267e4f27bcaf01458393/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b96cf92a4334eccb74163397e94ade6e4acac48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b96cf92a4334eccb74163397e94ade6e4acac48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b96cf92a4334eccb74163397e94ade6e4acac48"}], "stats": {"total": 128, "additions": 117, "deletions": 11}, "files": [{"sha": "9eade87ce520c6ea53dfad63f0ce11243839da3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -1,3 +1,15 @@\n+2012-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* stor-layout.c (finish_bitfield_representative): Fallback\n+\tto conservative maximum size if the padding up to the next\n+\tfield cannot be computed as a constant.\n+\t(finish_bitfield_layout): If we cannot compute the distance\n+\tbetween the start of the bitfield representative and the\n+\tbitfield member start a new representative.\n+\t* expr.c (get_bit_range): The distance between the start of\n+\tthe bitfield representative and the bitfield member is zero\n+\tif the field offsets are not constants.\n+\n 2012-03-20  Tristan Gingold  <gingold@adacore.com>\n \n \t* tree.h (enum size_type_kind): Add stk_ prefix to constants,"}, {"sha": "f9de9080d8b1135c7b6d35ccc9d582647627db25", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -4452,7 +4452,7 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n \t       HOST_WIDE_INT bitpos)\n {\n   unsigned HOST_WIDE_INT bitoffset;\n-  tree field, repr, offset;\n+  tree field, repr;\n \n   gcc_assert (TREE_CODE (exp) == COMPONENT_REF);\n \n@@ -4467,12 +4467,17 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n     }\n \n   /* Compute the adjustment to bitpos from the offset of the field\n-     relative to the representative.  */\n-  offset = size_diffop (DECL_FIELD_OFFSET (field),\n-\t\t\tDECL_FIELD_OFFSET (repr));\n-  bitoffset = (tree_low_cst (offset, 1) * BITS_PER_UNIT\n-\t       + tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n-\t       - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+     relative to the representative.  DECL_FIELD_OFFSET of field and\n+     repr are the same by construction if they are not constants,\n+     see finish_bitfield_layout.  */\n+  if (host_integerp (DECL_FIELD_OFFSET (field), 1)\n+      && host_integerp (DECL_FIELD_OFFSET (repr), 1))\n+    bitoffset = (tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n+\t\t - tree_low_cst (DECL_FIELD_OFFSET (repr), 1)) * BITS_PER_UNIT;\n+  else\n+    bitoffset = 0;\n+  bitoffset += (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+\t\t- tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n \n   *bitstart = bitpos - bitoffset;\n   *bitend = *bitstart + tree_low_cst (DECL_SIZE (repr), 1) - 1;"}, {"sha": "d79be1424e3d94a036a983aadbe46c8b0eb4a43d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -1781,10 +1781,17 @@ finish_bitfield_representative (tree repr, tree field)\n \treturn;\n       maxsize = size_diffop (DECL_FIELD_OFFSET (nextf),\n \t\t\t     DECL_FIELD_OFFSET (repr));\n-      gcc_assert (host_integerp (maxsize, 1));\n-      maxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n-\t\t    + tree_low_cst (DECL_FIELD_BIT_OFFSET (nextf), 1)\n-\t\t    - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+      if (host_integerp (maxsize, 1))\n+\t{\n+\t  maxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n+\t\t\t+ tree_low_cst (DECL_FIELD_BIT_OFFSET (nextf), 1)\n+\t\t\t- tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n+\t  /* If the group ends within a bitfield nextf does not need to be\n+\t     aligned to BITS_PER_UNIT.  Thus round up.  */\n+\t  maxbitsize = (maxbitsize + BITS_PER_UNIT - 1) & ~(BITS_PER_UNIT - 1);\n+\t}\n+      else\n+\tmaxbitsize = bitsize;\n     }\n   else\n     {\n@@ -1888,6 +1895,8 @@ finish_bitfield_layout (record_layout_info rli)\n \t}\n       else if (DECL_BIT_FIELD_TYPE (field))\n \t{\n+\t  gcc_assert (repr != NULL_TREE);\n+\n \t  /* Zero-size bitfields finish off a representative and\n \t     do not have a representative themselves.  This is\n \t     required by the C++ memory model.  */\n@@ -1896,6 +1905,24 @@ finish_bitfield_layout (record_layout_info rli)\n \t      finish_bitfield_representative (repr, prev);\n \t      repr = NULL_TREE;\n \t    }\n+\n+\t  /* We assume that either DECL_FIELD_OFFSET of the representative\n+\t     and each bitfield member is a constant or they are equal.\n+\t     This is because we need to be able to compute the bit-offset\n+\t     of each field relative to the representative in get_bit_range\n+\t     during RTL expansion.\n+\t     If these constraints are not met, simply force a new\n+\t     representative to be generated.  That will at most\n+\t     generate worse code but still maintain correctness with\n+\t     respect to the C++ memory model.  */\n+\t  else if (!((host_integerp (DECL_FIELD_OFFSET (repr), 1)\n+\t\t      && host_integerp (DECL_FIELD_OFFSET (field), 1))\n+\t\t     || operand_equal_p (DECL_FIELD_OFFSET (repr),\n+\t\t\t\t\t DECL_FIELD_OFFSET (field), 0)))\n+\t    {\n+\t      finish_bitfield_representative (repr, prev);\n+\t      repr = start_bitfield_representative (field);\n+\t    }\n \t}\n       else\n \tcontinue;"}, {"sha": "02641707476b924350f02f267204c9128dada158", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -1,3 +1,10 @@\n+2012-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gnat.dg/pack16.adb: New testcase.\n+\t* gnat.dg/pack16_pkg.ads: Likewise.\n+\t* gnat.dg/specs/pack8.ads: Likewise.\n+\t* gnat.dg/specs/pack8_pkg.ads: Likewise.\n+\n 2012-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/warn/Wuseless-cast.C: Extend."}, {"sha": "eb8e2f9b8d362207722c515aa346eeb7d959ee1a", "filename": "gcc/testsuite/gnat.dg/pack16.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16.adb?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with Pack16_Pkg; use Pack16_Pkg;\n+\n+procedure Pack16 is\n+\n+   type Sample_Table_T is array (1 .. N) of Integer;\n+\n+   type Clock_T is record\n+      N_Ticks  : Integer := 0;\n+   end record;\n+\n+   type Sampling_Descriptor_T is record\n+      Values : Sample_Table_T;\n+      Valid  : Boolean;\n+      Tstamp : Clock_T;\n+   end record;\n+\n+   pragma Pack (Sampling_Descriptor_T);\n+\n+   Sampling_Data : Sampling_Descriptor_T;\n+\n+begin\n+   null;\n+end;"}, {"sha": "92884f32fde3a112fa64dda7e392bb0a13a05d77", "filename": "gcc/testsuite/gnat.dg/pack16_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack16_pkg.ads?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -0,0 +1,5 @@\n+package Pack16_Pkg is\n+\n+   N : Natural := 16;\n+\n+end Pack16_Pkg;"}, {"sha": "db839cbe276e1a6d82bd04f0003e60a612a16086", "filename": "gcc/testsuite/gnat.dg/specs/pack8.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8.ads?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -0,0 +1,19 @@\n+with Pack8_Pkg;\n+\n+package Pack8 is\n+\n+   subtype Index_Type is Integer range 1 .. Pack8_Pkg.N;\n+\n+   subtype Str is String( Index_Type);\n+\n+   subtype Str2 is String (1 .. 11);\n+\n+   type Rec is record\n+      S1 : Str;\n+      S2 : Str;\n+      B  : Boolean;\n+      S3 : Str2;\n+   end record;\n+   pragma Pack (Rec);\n+\n+end Pack8;"}, {"sha": "f35e629cad87eee2352ed8124afc17aa90ef7a91", "filename": "gcc/testsuite/gnat.dg/specs/pack8_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebf9677e58b3f97e71f267e4f27bcaf01458393/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack8_pkg.ads?ref=7ebf9677e58b3f97e71f267e4f27bcaf01458393", "patch": "@@ -0,0 +1,5 @@\n+package Pack8_Pkg is\n+\n+   N : Natural := 1;\n+\n+end Pack8_Pkg;"}]}