{"sha": "2af6dd77ea742d4ee911f466878624972929508a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmNmRkNzdlYTc0MmQ0ZWU5MTFmNDY2ODc4NjI0OTcyOTI5NTA4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-02T09:25:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-02T09:25:07Z"}, "message": "match.pd: Demote IFN_{ADD,SUB,MUL}_OVERFLOW operands [PR99591]\n\nThe overflow builtins work on infinite precision integers and then convert\nto the result type's precision, so any argument promotions are useless.\nThe expand_arith_overflow expansion is able to demote the arguments itself\nthrough get_range_pos_neg and get_min_precision calls and if needed promote\nto whatever mode it decides to perform the operations in, but if there are\nany promotions it demoted, those are already expanded.  Normally combine\nwould remove the useless sign or zero extensions when it sees the result\nof those is only used in a lowpart subreg, but typically those lowpart\nsubregs appear multiple times in the pattern so that they describe properly\nthe overflow behavior and combine gives up, so we end up with e.g.\n        movswl  %si, %esi\n        movswl  %di, %edi\n        imulw   %si, %di\n        seto    %al\nwhere both movswl insns are useless.\n\nThe following patch fixes it by demoting operands of the ifns (only gets\nrid of integral to integral conversions that increase precision).\nWhile IFN_{ADD,MUL}_OVERFLOW are commutative and just one simplify would be\nenough, IFN_SUB_OVERFLOW is not, therefore two simplifications.\n\n2021-09-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/99591\n\t* match.pd: Demote operands of IFN_{ADD,SUB,MUL}_OVERFLOW if they\n\twere promoted.\n\n\t* gcc.target/i386/pr99591.c: New test.\n\t* gcc.target/i386/pr97950.c: Match or reject setb or jn?b instructions\n\ttogether with seta or jn?a.", "tree": {"sha": "241843c7c5376b9bcc948183c215c9837caa83bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241843c7c5376b9bcc948183c215c9837caa83bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af6dd77ea742d4ee911f466878624972929508a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af6dd77ea742d4ee911f466878624972929508a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af6dd77ea742d4ee911f466878624972929508a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af6dd77ea742d4ee911f466878624972929508a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6267b335262eb6244c86a7102f00b26e57af4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6267b335262eb6244c86a7102f00b26e57af4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6267b335262eb6244c86a7102f00b26e57af4d"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "f920bc4b7c1c3b4d7de71eb91592f14026043959", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2af6dd77ea742d4ee911f466878624972929508a", "patch": "@@ -5587,6 +5587,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (with { tree t = TREE_TYPE (@0), cpx = build_complex_type (t); }\n     (cmp (imagpart (IFN_MUL_OVERFLOW:cpx @0 @1)) { build_zero_cst (t); })))))\n \n+/* Demote operands of IFN_{ADD,SUB,MUL}_OVERFLOW.  */\n+(for ovf (IFN_ADD_OVERFLOW IFN_SUB_OVERFLOW IFN_MUL_OVERFLOW)\n+ (simplify\n+  (ovf (convert@2 @0) @1)\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+       && TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (TREE_TYPE (@0)))\n+   (ovf @0 @1)))\n+ (simplify\n+  (ovf @1 (convert@2 @0))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+       && TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (TREE_TYPE (@0)))\n+   (ovf @1 @0))))\n+\n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new\n    form could be a pessimization, the rule should go in the canonicalization"}, {"sha": "185d73378cb3987328edc36b17319b18d331c4ae", "filename": "gcc/testsuite/gcc.target/i386/pr97950.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c?ref=2af6dd77ea742d4ee911f466878624972929508a", "patch": "@@ -1,10 +1,10 @@\n /* PR target/95950 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mtune=generic\" } */\n-/* { dg-final { scan-assembler-times \"\\tseta\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tset\\[ab]\\t\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\tseto\\t\" 16 } } */\n /* { dg-final { scan-assembler-times \"\\tsetc\\t\" 4 } } */\n-/* { dg-final { scan-assembler-not \"\\tjn?a\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjn?\\[ab]\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tjn?o\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tjn?c\\t\" } } */\n "}, {"sha": "01d8485840160ccbdbb904a55d7f3da2a7beb37b", "filename": "gcc/testsuite/gcc.target/i386/pr99591.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af6dd77ea742d4ee911f466878624972929508a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99591.c?ref=2af6dd77ea742d4ee911f466878624972929508a", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/99591 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tmovs\\[bw]l\\t\" } } */\n+\n+int\n+foo (signed char a, signed char b)\n+{\n+  signed char r;\n+  return __builtin_add_overflow (a, b, &r);\n+}\n+\n+int\n+bar (short a, short b)\n+{\n+  short r;\n+  return __builtin_add_overflow (a, b, &r);\n+}\n+\n+int\n+baz (signed char a, signed char b)\n+{\n+  signed char r;\n+  return __builtin_add_overflow ((int) a, (int) b, &r);\n+}\n+\n+int\n+qux (short a, short b)\n+{\n+  short r;\n+  return __builtin_add_overflow ((int) a, (int) b, &r);\n+}"}]}