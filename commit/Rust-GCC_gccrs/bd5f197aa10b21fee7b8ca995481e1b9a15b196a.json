{"sha": "bd5f197aa10b21fee7b8ca995481e1b9a15b196a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ1ZjE5N2FhMTBiMjFmZWU3YjhjYTk5NTQ4MWUxYjlhMTViMTk2YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-23T11:47:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-23T11:47:16Z"}, "message": "(scratch_block, scratch_list{,_length}, scratch_index): New variables.\n\n(local_alloc): Allocate and initialize them.\n(block_alloc): Only allocate a SCRATCH if it can fit in the block we make.\nDon't mark regs used in SCRATCH live here; instead, make entry in new tables.\n\nFrom-SVN: r4713", "tree": {"sha": "e5e36c97515a82acc2d639b78a30a53e5f2aff3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e36c97515a82acc2d639b78a30a53e5f2aff3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd5f197aa10b21fee7b8ca995481e1b9a15b196a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5f197aa10b21fee7b8ca995481e1b9a15b196a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5f197aa10b21fee7b8ca995481e1b9a15b196a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5f197aa10b21fee7b8ca995481e1b9a15b196a/comments", "author": null, "committer": null, "parents": [{"sha": "c307c23778c34eb7eae050de7c09f108e33c436f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c307c23778c34eb7eae050de7c09f108e33c436f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c307c23778c34eb7eae050de7c09f108e33c436f"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a576efa0421211fa1ae29b30f801f5eb31eb5c02", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5f197aa10b21fee7b8ca995481e1b9a15b196a/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5f197aa10b21fee7b8ca995481e1b9a15b196a/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=bd5f197aa10b21fee7b8ca995481e1b9a15b196a", "patch": "@@ -227,6 +227,11 @@ static HARD_REG_SET regs_live;\n \n static HARD_REG_SET *regs_live_at;\n \n+int *scratch_block;\n+rtx *scratch_list;\n+int scratch_list_length;\n+static int scratch_index;\n+\n /* Communicate local vars `insn_number' and `insn'\n    from `block_alloc' to `reg_is_set', `wipe_dead_reg', and `alloc_qty'.  */\n static int this_insn_number;\n@@ -395,6 +400,13 @@ local_alloc ()\n      See the declarations of these variables, above,\n      for what they mean.  */\n \n+  scratch_list_length = max_qty;\n+  scratch_list = (rtx *) xmalloc (scratch_list_length * sizeof (rtx));\n+  bzero (scratch_list, scratch_list_length * sizeof (rtx));\n+  scratch_block = (int *) xmalloc (scratch_list_length * sizeof (int));\n+  bzero (scratch_block, scratch_list_length * sizeof (int));\n+  scratch_index = 0;\n+\n   qty_phys_reg = (short *) alloca (max_qty * sizeof (short));\n   qty_phys_copy_sugg = (HARD_REG_SET *) alloca (max_qty * sizeof (HARD_REG_SET));\n   qty_phys_has_copy_sugg = (char *) alloca (max_qty * sizeof (char));\n@@ -1333,7 +1345,8 @@ block_alloc (b)\n \n \t  if (insn_code_number >= 0)\n \t    for (i = 0; i < insn_n_operands[insn_code_number]; i++)\n-\t      if (GET_CODE (recog_operand[i]) == SCRATCH)\n+\t      if (GET_CODE (recog_operand[i]) == SCRATCH\n+\t\t  && scratch_index < scratch_list_length - 1)\n \t\talloc_qty_for_scratch (recog_operand[i], i, insn,\n \t\t\t\t       insn_code_number, insn_number);\n #endif\n@@ -1450,13 +1463,13 @@ block_alloc (b)\n \t  reg_renumber[i] = qty_phys_reg[q] + reg_offset[i];\n \tif (qty_scratch_rtx[q])\n \t  {\n+\t    if (GET_CODE (qty_scratch_rtx[q]) == REG)\n+\t      abort ();\n \t    PUT_CODE (qty_scratch_rtx[q], REG);\n \t    REGNO (qty_scratch_rtx[q]) = qty_phys_reg[q];\n \n-\t    for (i = HARD_REGNO_NREGS (qty_phys_reg[q],\n-\t\t\t\t       GET_MODE (qty_scratch_rtx[q])) - 1;\n-\t\t i >= 0; i--)\n-\t      regs_ever_live[qty_phys_reg[q] + i] = 1;\n+\t    scratch_block[scratch_index] = b;\n+\t    scratch_list[scratch_index++] = qty_scratch_rtx[q];\n \n \t    /* Must clear the USED field, because it will have been set by\n \t       copy_rtx_if_shared, but the leaf_register code expects that"}]}