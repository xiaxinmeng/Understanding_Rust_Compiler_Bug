{"sha": "809c8c30be2829c4a7d60ec52c34274804a80aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5YzhjMzBiZTI4MjljNGE3ZDYwZWM1MmMzNDI3NDgwNGE4MGFhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1996-05-02T16:31:04Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-02T16:31:04Z"}, "message": "86th Cygnus<->FSF quick merge\n\nFrom-SVN: r11914", "tree": {"sha": "72594d744b0932519be2df3c1b2f5e24c0936936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72594d744b0932519be2df3c1b2f5e24c0936936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809c8c30be2829c4a7d60ec52c34274804a80aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c8c30be2829c4a7d60ec52c34274804a80aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809c8c30be2829c4a7d60ec52c34274804a80aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c8c30be2829c4a7d60ec52c34274804a80aad/comments", "author": null, "committer": null, "parents": [{"sha": "1df8f58fafb0cc8221a9828239fde24dcb9e9cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df8f58fafb0cc8221a9828239fde24dcb9e9cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df8f58fafb0cc8221a9828239fde24dcb9e9cc1"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "4c00b1e87b9aac1c209559aa5603a60cc52142d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=809c8c30be2829c4a7d60ec52c34274804a80aad", "patch": "@@ -1,3 +1,20 @@\n+Wed May  1 11:26:52 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Also use sentries for vars with\n+ \tDECL_ONE_ONLY or DECL_WEAK set (should any such happen to be\n+ \tcreated).\n+\n+\t* lex.c (handle_cp_pragma): Disable #pragma\n+ \tinterface/implementation if SUPPORTS_ONE_ONLY > 1.\n+\n+Tue Apr 30 11:25:46 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* method.c (emit_thunk): Wrap default case in\n+ \ttemporary/permanent_allocation.\n+\n+\t* method.c (make_thunk): Use DECL_ONE_ONLY.\n+\t(emit_thunk): Call assemble_end_function.\n+\n Mon Apr 29 15:38:29 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (import_export_vtable): Use DECL_ONE_ONLY."}, {"sha": "49011d67b77199c21c238a7f9e4210d5e9a881fa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=809c8c30be2829c4a7d60ec52c34274804a80aad", "patch": "@@ -3008,9 +3008,15 @@ finish_file ()\n       if (TYPE_NEEDS_DESTRUCTOR (type) && ! TREE_STATIC (vars)\n \t  && ! DECL_EXTERNAL (decl))\n \t{\n+\t  int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n+#ifdef DECL_ONE_ONLY\n+\t\t\t\t\t\t|| DECL_ONE_ONLY (decl)\n+#endif\n+\t\t\t\t\t\t|| DECL_WEAK (decl)));\n+\n \t  temp = build_cleanup (decl);\n \n-\t  if (DECL_COMMON (decl) && TREE_PUBLIC (decl))\n+\t  if (protect)\n \t    {\n \t      tree sentry = get_sentry (DECL_ASSEMBLER_NAME (decl));\n \t      sentry = build_unary_op (PREDECREMENT_EXPR, sentry, 0);\n@@ -3020,7 +3026,7 @@ finish_file ()\n \n \t  expand_expr_stmt (temp);\n \n-\t  if (DECL_COMMON (decl) && TREE_PUBLIC (decl))\n+\t  if (protect)\n \t    expand_end_cond ();\n \t}\n     }\n@@ -3083,6 +3089,12 @@ finish_file ()\n \n \t  if (TREE_CODE (decl) == VAR_DECL)\n \t    {\n+\t  int protect = (TREE_PUBLIC (decl) && (DECL_COMMON (decl)\n+#ifdef DECL_ONE_ONLY\n+\t\t\t\t\t\t|| DECL_ONE_ONLY (decl)\n+#endif\n+\t\t\t\t\t\t|| DECL_WEAK (decl)));\n+\n \t      /* Set these global variables so that GDB at least puts\n \t\t us near the declaration which required the initialization.  */\n \t      input_filename = DECL_SOURCE_FILE (decl);\n@@ -3094,7 +3106,7 @@ finish_file ()\n \t      DECL_CLASS_CONTEXT (current_function_decl) = DECL_CONTEXT (decl);\n \t      DECL_STATIC_FUNCTION_P (current_function_decl) = 1;\n \n-\t      if (DECL_COMMON (decl) && TREE_PUBLIC (decl))\n+\t      if (protect)\n \t\t{\n \t\t  tree sentry = get_sentry (DECL_ASSEMBLER_NAME (decl));\n \t\t  sentry = build_unary_op (PREINCREMENT_EXPR, sentry, 0);\n@@ -3116,7 +3128,7 @@ finish_file ()\n \t      else\n \t\texpand_assignment (decl, init, 0, 0);\n \n-\t      if (DECL_COMMON (decl) && TREE_PUBLIC (decl))\n+\t      if (protect)\n \t\texpand_end_cond ();\n \n \t      DECL_CLASS_CONTEXT (current_function_decl) = NULL_TREE;"}, {"sha": "0b46990f60db6b148dbcbb4c95722a15a2fef199", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=809c8c30be2829c4a7d60ec52c34274804a80aad", "patch": "@@ -4449,6 +4449,11 @@ handle_cp_pragma (pname)\n \t    }\n \t  main_filename = TREE_STRING_POINTER (yylval.ttype);\n \t}\n+\n+#ifdef SUPPORTS_ONE_ONLY\n+      if (SUPPORTS_ONE_ONLY > 1)\n+\treturn 1;\n+#endif\n       \n       while (token != END_OF_LINE)\n \t{\n@@ -4518,6 +4523,11 @@ handle_cp_pragma (pname)\n \t  token = real_yylex ();\n \t}\n \n+#ifdef SUPPORTS_ONE_ONLY\n+      if (SUPPORTS_ONE_ONLY > 1)\n+\treturn 1;\n+#endif\n+\n       if (write_virtuals == 3)\n \t{\n \t  struct impl_files *ifiles = impl_file_chain;"}, {"sha": "5e1793bcc050e1fed645d302659192b72a61508a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c8c30be2829c4a7d60ec52c34274804a80aad/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=809c8c30be2829c4a7d60ec52c34274804a80aad", "patch": "@@ -39,6 +39,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n \n+#ifndef SUPPORTS_ONE_ONLY\n+#define SUPPORTS_ONE_ONLY 0\n+#endif\n+\n /* TREE_LIST of the current inline functions that need to be\n    processed.  */\n struct pending_inline *pending_inlines;\n@@ -1831,7 +1835,15 @@ make_thunk (function, delta)\n       DECL_INITIAL (thunk) = function;\n       THUNK_DELTA (thunk) = delta;\n       DECL_EXTERNAL (thunk) = 1;\n-      TREE_PUBLIC (thunk) = 0;\n+#ifdef DECL_ONE_ONLY\n+      if (SUPPORTS_ONE_ONLY)\n+\t{\n+\t  DECL_ONE_ONLY (thunk) = 1;\n+\t  TREE_PUBLIC (thunk) = 1;\n+\t}\n+      else\n+#endif\n+\tTREE_PUBLIC (thunk) = 0;\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n     }\n@@ -1868,20 +1880,24 @@ emit_thunk (thunk_fndecl)\n \n   TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n \n+  TREE_ADDRESSABLE (function) = 1;\n+  mark_used (function);\n+\n   decl_printable_name = thunk_printable_name;\n   if (current_function_decl)\n     abort ();\n   current_function_decl = thunk_fndecl;\n-  TREE_ADDRESSABLE (function) = 1;\n-  mark_used (function);\n #ifdef ASM_OUTPUT_MI_THUNK\n   assemble_start_function (thunk_fndecl, fnname);\n   ASM_OUTPUT_MI_THUNK (asm_out_file, thunk_fndecl, delta, function);\n+  assemble_end_function (thunk_fndecl, fnname);\n #else\n   init_function_start (thunk_fndecl, input_filename, lineno);\n   pushlevel (0);\n   expand_start_bindings (1);\n \n+  temporary_allocation ();\n+\n   /* Start updating where the next arg would go.  */\n   INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (function), NULL_RTX, 0);\n   stack_args_size.constant = 0;\n@@ -2053,10 +2069,10 @@ emit_thunk (thunk_fndecl)\n \n   /* Cancel the effect of rtl_in_current_obstack.  */\n \n-  resume_temporary_allocation ();\n+  permanent_allocation (1);\n+#endif /* ASM_OUTPUT_MI_THUNK */\n \n   decl_printable_name = save_decl_printable_name;\n-#endif /* ASM_OUTPUT_MI_THUNK */\n   current_function_decl = 0;\n }\n \f"}]}