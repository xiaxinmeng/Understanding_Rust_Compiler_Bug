{"sha": "0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyOGRlMGM0ZjkxY2IyY2MwMzgxZjJmMmM0MDNjYWFiNmU3ZDgyZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-05T22:07:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-05T22:07:36Z"}, "message": "[multiple changes]\n\n\n2001-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tDR/282\n\t* include/bits/locale_facets.tcc (num_put::_M_widen_float): Add\n\tgrouping to floating point types.\n\t* testsuite/27_io/ostream_inserter_arith.cc (test02): Add test.\n\n2001-12-04  Paolo Carlini <pcarlini@unitus.it>\n\n        libstdc++/4402\n        * testsuite/27_io/ostream_inserter_arith.cc (test02): add testcase\n\tfrom the PR.\n        * include/bits/locale_facets.tcc (num_put::_M_convert_float):\n        Deal properly with long ios_base::fixed floats.\n        (num_put::_M_widen_float): use\n\t__len in __builtin_alloca call.\n\nFrom-SVN: r47696", "tree": {"sha": "434f9b1969290c6575921690cf5ef445f97d33ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434f9b1969290c6575921690cf5ef445f97d33ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/comments", "author": null, "committer": null, "parents": [{"sha": "0df47f6610ae1ad8b7b3372da8bff6e59230b901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df47f6610ae1ad8b7b3372da8bff6e59230b901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df47f6610ae1ad8b7b3372da8bff6e59230b901"}], "stats": {"total": 106, "additions": 96, "deletions": 10}, "files": [{"sha": "08d0eb8cf1842c592b7b8bdc34dc85db1083364a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "patch": "@@ -1,3 +1,20 @@\n+2001-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tDR/282\n+\t* include/bits/locale_facets.tcc (num_put::_M_widen_float): Add\n+\tgrouping to floating point types.\n+\t* testsuite/27_io/ostream_inserter_arith.cc (test02): Add test.\n+\t\n+2001-12-04  Paolo Carlini <pcarlini@unitus.it>\n+\n+        libstdc++/4402\n+        * testsuite/27_io/ostream_inserter_arith.cc (test02): add testcase\n+\tfrom the PR.\n+        * include/bits/locale_facets.tcc (num_put::_M_convert_float):\n+        Deal properly with long ios_base::fixed floats.\n+        (num_put::_M_widen_float): use\n+\t__len in __builtin_alloca call.\n+\n 2001-12-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/Makefile.am (sources): Add ext-inst.cc."}, {"sha": "95cbee5d8f14446ffe8e6764663bdabb8e2b73d7", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "patch": "@@ -711,15 +711,23 @@ namespace std\n       _M_convert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,\n \t\t       _ValueT __v) const\n       {\n-\tconst streamsize __max_prec = numeric_limits<_ValueT>::digits10;\n+\tconst int __max_digits = numeric_limits<_ValueT>::digits10;\n \tstreamsize __prec = __io.precision();\n \t// Protect against sprintf() buffer overflows.\n-\tif (__prec > __max_prec)\n-\t  __prec = __max_prec;\n+\tif (__prec > static_cast<streamsize>(__max_digits))\n+\t  __prec = static_cast<streamsize>(__max_digits);\n \n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n-\tchar __cs[64];\n+\n+\t// Consider the possibility of long ios_base::fixed outputs\n+\tconst bool __fixed = __io.flags() & ios_base::fixed;\n+\tconst int __max_exp = numeric_limits<_ValueT>::max_exponent10;\n+\t// XXX Why + 4? Why * 4? What's going on? Who's on first?\n+\tconst int __cs_size = __fixed ? __max_exp + __max_digits + 4 \n+\t                              : __max_digits * 4;\n+\tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+\n \tint __len;\n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tif (_S_format_float(__io, __fbuf, __mod, __prec))\n@@ -757,14 +765,47 @@ namespace std\n       // numpunct.decimal_point() values for '.' and adding grouping.\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * 64));\n+      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t\t\t\t\t   * __len));\n+      // Grouping can add (almost) as many separators as the number of\n+      // digits, but no more.\n+      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t \t\t\t\t    * __len * 2));\n       __ctype.widen(__cs, __cs + __len, __ws);\n       \n-      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n       // Replace decimal point.\n       const _CharT* __p;\n+      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n       if (__p = char_traits<_CharT>::find(__ws, __len, __ctype.widen('.')))\n \t__ws[__p - __ws] = __np.decimal_point();\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+//282. What types does numpunct grouping refer to?\n+      // Add grouping, if necessary. \n+      const string __grouping = __np.grouping();\n+      ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n+      if (__grouping.size())\n+\t{\n+\t  _CharT* __p2;\n+\t  int __declen = __p ? __p - __ws : __len;\n+\t  __p2 = __add_grouping(__ws2, __np.thousands_sep(), \n+\t\t\t\t__grouping.c_str(),\n+\t\t\t\t__grouping.c_str() + __grouping.size(),\n+\t\t\t\t__ws, __ws + __declen);\n+\t  int __newlen = __p2 - __ws2;\n+\t\n+\t  // Tack on decimal part.\n+\t  if (__p)\n+\t    {\n+\t      char_traits<_CharT>::copy(__p2, __p, __len - __declen);\n+\t      __newlen += __len - __declen;\n+\t    }    \n+\n+\t  // Switch strings, establish correct new length.\n+\t  __ws = __ws2;\n+\t  __len = __newlen;\n+\t}\n+#endif\n       return _M_insert(__s, __io, __fill, __ws, __len);\n     }\n \n@@ -778,13 +819,17 @@ namespace std\n       // numpunct.decimal_point() values for '.' and adding grouping.\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * 64));\n-      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * 64));\n+      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t\t\t\t\t   * __len));\n+      // Grouping can add (almost) as many separators as the number of\n+      // digits, but no more.\n+      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t\t\t\t\t    * __len * 2));\n       __ctype.widen(__cs, __cs + __len, __ws);\n \n       // Add grouping, if necessary.\n       const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n-      string __grouping = __np.grouping();\n+      const string __grouping = __np.grouping();\n       ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n       bool __dec = __basefield != ios_base::oct \n \t           && __basefield != ios_base::hex;\n@@ -810,8 +855,9 @@ namespace std\n \t      int __len) const\n     {\n       // [22.2.2.2.2] Stage 3.\n-      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * 64));\n       streamsize __w = __io.width();\n+      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n+\t\t\t\t\t\t\t    * __w));\n       if (__w > static_cast<streamsize>(__len))\n \t{\n \t  __pad(__io, __fill, __ws2, __ws, __w, __len, true);"}, {"sha": "580730b42cd94fdbc4a7975e3e8192104dda0cdd", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0228de0c4f91cb2cc0381f2f2c403caab6e7d82e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=0228de0c4f91cb2cc0381f2f2c403caab6e7d82e", "patch": "@@ -272,6 +272,29 @@ test02()\n #endif\n   VERIFY(os && os.str() == largebuf);\n \n+  // Make sure we can output a long float in fixed format\n+  // without seg-faulting (libstdc++/4402)\n+  double val2 = 3.5e230;\n+\n+  ostringstream os2;\n+  os2.precision(3);\n+  os2.setf(ios::fixed);\n+  os2 << val2;\n+\n+  sprintf(largebuf, \"%.*f\", 3, val2);\n+#ifdef TEST_NUMPUT_VERBOSE\n+  cout << \"expect: \" << largebuf << endl;\n+  cout << \"result: \" << os2.str() << endl;\n+#endif\n+  VERIFY(os2 && os2.str() == largebuf);\n+\n+  // Check it can be done in a locale with grouping on.\n+  locale loc2(\"de_DE\");\n+  os2.imbue(loc2);\n+  os2 << fixed << setprecision(3) << val2 << endl;\n+  os2 << endl;\n+  os2 << fixed << setprecision(1) << val2 << endl;\n+\n   return 0;\n }\n "}]}