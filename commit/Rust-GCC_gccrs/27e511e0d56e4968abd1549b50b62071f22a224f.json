{"sha": "27e511e0d56e4968abd1549b50b62071f22a224f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlNTExZTBkNTZlNDk2OGFiZDE1NDliNTBiNjIwNzFmMjJhMjI0Zg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2002-06-02T19:06:30Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-06-02T19:06:30Z"}, "message": "diagnostic.h (struct diagnostic_context): Add new member internal_error.\n\n\t* diagnostic.h (struct diagnostic_context):  Add new member\n\tinternal_error.\n\t(internal_error_function): Remove declaration.\n\t* diagnostic.c (internal_error_function): Remove definition..\n\t(internal_error): Adjust use.\nada/\n\t* misc.c (gnat_init): Adjust setting of internal_error_function.\n\nFrom-SVN: r54179", "tree": {"sha": "be65308bcd5fc6c907af860b48e4f96e8e84c1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be65308bcd5fc6c907af860b48e4f96e8e84c1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e511e0d56e4968abd1549b50b62071f22a224f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e511e0d56e4968abd1549b50b62071f22a224f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e511e0d56e4968abd1549b50b62071f22a224f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e511e0d56e4968abd1549b50b62071f22a224f/comments", "author": null, "committer": null, "parents": [{"sha": "818b6b7fb170190ce8c9253895f200234b4a8880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b6b7fb170190ce8c9253895f200234b4a8880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818b6b7fb170190ce8c9253895f200234b4a8880"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "dc8a45dd7c8327e96e417dccf2fb8ae2756f58a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27e511e0d56e4968abd1549b50b62071f22a224f", "patch": "@@ -1,3 +1,11 @@\n+2002-06-02  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h (struct diagnostic_context):  Add new member\n+\tinternal_error. \n+\t(internal_error_function): Remove declaration.\n+\t* diagnostic.c (internal_error_function): Remove definition..\n+\t(internal_error): Adjust use.\n+\n 2002-06-02  Richard Henderson  <rth@redhat.com>\n \n \t* rtl.h (CC0_P): New."}, {"sha": "a17ab0357985ebea87d4dd9fe6d2225f28a7eb7a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=27e511e0d56e4968abd1549b50b62071f22a224f", "patch": "@@ -1,3 +1,7 @@\n+2002-06-02  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* misc.c (gnat_init): Adjust setting of internal_error_function.\n+\n 2002-06-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gnat_ug.texi: Use @ifnottex instead of @ifinfo."}, {"sha": "3bc01d303aae16ee54db23e1ca0a2b073c63babc", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=27e511e0d56e4968abd1549b50b62071f22a224f", "patch": "@@ -384,7 +384,7 @@ gnat_init (filename)\n   gnat_argc++;\n   gnat_argv[gnat_argc] = 0;\n \n-  set_internal_error_function (internal_error_function);\n+  global_dc->internal_error = &internal_error_function;\n \n   /* Show that REFERENCE_TYPEs are internal and should be Pmode.  */\n   internal_reference_types ();"}, {"sha": "f276ec0dd1ddc72d1641e542c669af082c5293d9", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=27e511e0d56e4968abd1549b50b62071f22a224f", "patch": "@@ -1236,20 +1236,6 @@ fatal_error VPARAMS ((const char *msgid, ...))\n   exit (FATAL_EXIT_CODE);\n }\n \n-/* Report a compiler error at the current line number.  Allow a front end to\n-   intercept the message.  */\n-\n-static void (*internal_error_function) PARAMS ((const char *, va_list *));\n-\n-/* Set the function to call when a compiler error occurs.  */\n-\n-void\n-set_internal_error_function (f)\n-     void (*f) PARAMS ((const char *, va_list *));\n-{\n-  internal_error_function = f;\n-}\n-\n void\n internal_error VPARAMS ((const char *msgid, ...))\n {\n@@ -1270,8 +1256,8 @@ internal_error VPARAMS ((const char *msgid, ...))\n     }\n #endif\n \n-  if (internal_error_function != 0)\n-    (*internal_error_function) (_(msgid), &ap);\n+  if (global_dc->internal_error != 0)\n+    (*global_dc->internal_error) (_(msgid), &ap);\n \n   set_diagnostic_context\n     (&dc, msgid, &ap, input_filename, lineno, /* warn = */0);"}, {"sha": "3762136d0b62f233f9e019003a00a31dd3a38c22", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e511e0d56e4968abd1549b50b62071f22a224f/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=27e511e0d56e4968abd1549b50b62071f22a224f", "patch": "@@ -203,6 +203,9 @@ struct diagnostic_context\n   /* This function is called after the diagnostic message is printed.  */\n   void (*end_diagnostic) PARAMS ((output_buffer *, diagnostic_context *));\n \n+  /* Client hook to report an internal error.  */\n+  void (*internal_error) PARAMS ((const char *, va_list *));\n+\n   /* Hook for front-end extensions.  */\n   void *x_data;\n };\n@@ -275,9 +278,6 @@ extern diagnostic_context *global_dc;\n extern void set_diagnostic_context\tPARAMS ((diagnostic_context *,\n \t\t\t\t\t\t const char *, va_list *,\n \t\t\t\t\t\t const char *, int, int));\n-extern void set_internal_error_function\tPARAMS ((void (*)\n-\t\t\t\t\t\t PARAMS ((const char *,\n-\t\t\t\t\t\t\t  va_list *))));\n extern void report_diagnostic\t\tPARAMS ((diagnostic_context *));\n extern void diagnostic_initialize\tPARAMS ((diagnostic_context *));\n extern void init_output_buffer\t\tPARAMS ((output_buffer *,"}]}