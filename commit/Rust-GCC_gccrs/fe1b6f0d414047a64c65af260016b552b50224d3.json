{"sha": "fe1b6f0d414047a64c65af260016b552b50224d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxYjZmMGQ0MTQwNDdhNjRjNjVhZjI2MDAxNmI1NTJiNTAyMjRkMw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2018-01-18T01:21:50Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-01-18T01:21:50Z"}, "message": "rs6000.md (*call_indirect_nonlocal_sysv<mode>): Generate different code for -mno-speculate-indirect-jumps.\n\n[gcc]\n\n2018-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (*call_indirect_nonlocal_sysv<mode>):\n\tGenerate different code for -mno-speculate-indirect-jumps.\n\t(*call_value_indirect_nonlocal_sysv<mode>): Likewise.\n\t(*call_indirect_aix<mode>): Disable for\n\t-mno-speculate-indirect-jumps.\n\t(*call_indirect_aix<mode>_nospec): New define_insn.\n\t(*call_value_indirect_aix<mode>): Disable for\n\t-mno-speculate-indirect-jumps.\n\t(*call_value_indirect_aix<mode>_nospec): New define_insn.\n\t(*sibcall_nonlocal_sysv<mode>): Generate different code for\n\t-mno-speculate-indirect-jumps.\n\t(*sibcall_value_nonlocal_sysv<mode>): Likewise.\n\n[gcc/testsuite]\n\n2018-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/safe-indirect-jump-1.c: Remove endian\n\trestriction, but still restrict to 64-bit.\n\t* gcc.target/powerpc/safe-indirect-jump-7.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-8.c: New file.\n\nFrom-SVN: r256831", "tree": {"sha": "2d380c8b319db1411ee2963b84d02abcf620e4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d380c8b319db1411ee2963b84d02abcf620e4dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1b6f0d414047a64c65af260016b552b50224d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1b6f0d414047a64c65af260016b552b50224d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1b6f0d414047a64c65af260016b552b50224d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1b6f0d414047a64c65af260016b552b50224d3/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e91478f6c79ff476482774e4fe2b36ae2e52d695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91478f6c79ff476482774e4fe2b36ae2e52d695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91478f6c79ff476482774e4fe2b36ae2e52d695"}], "stats": {"total": 204, "additions": 191, "deletions": 13}, "files": [{"sha": "5e4d6b38645ea5a1f3f9bdb7ff74e6a15b4bcbcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -1,3 +1,18 @@\n+2018-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (*call_indirect_nonlocal_sysv<mode>):\n+\tGenerate different code for -mno-speculate-indirect-jumps.\n+\t(*call_value_indirect_nonlocal_sysv<mode>): Likewise.\n+\t(*call_indirect_aix<mode>): Disable for\n+\t-mno-speculate-indirect-jumps.\n+\t(*call_indirect_aix<mode>_nospec): New define_insn.\n+\t(*call_value_indirect_aix<mode>): Disable for\n+\t-mno-speculate-indirect-jumps.\n+\t(*call_value_indirect_aix<mode>_nospec): New define_insn.\n+\t(*sibcall_nonlocal_sysv<mode>): Generate different code for\n+\t-mno-speculate-indirect-jumps.\n+\t(*sibcall_value_nonlocal_sysv<mode>): Likewise.\n+\n 2018-01-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_move): If we load or store a"}, {"sha": "4cef5bbc799b95fbb503ad51c23281276efb773f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 137, "deletions": 10, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -10453,10 +10453,35 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  return \"b%T0l\";\n+  if (rs6000_speculate_indirect_jumps\n+      || which_alternative == 1 || which_alternative == 3)\n+    return \"b%T0l\";\n+  else\n+    return \"crset eq\\;beq%T0l-\";\n }\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n+   (set (attr \"length\")\n+\t(cond [(and (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"8\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t          (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"12\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t  (const_string \"8\")]\n+\t      (const_string \"4\")))])\n \n (define_insn_and_split \"*call_nonlocal_sysv<mode>\"\n   [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n@@ -10541,10 +10566,35 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  return \"b%T1l\";\n+  if (rs6000_speculate_indirect_jumps\n+      || which_alternative == 1 || which_alternative == 3)\n+    return \"b%T1l\";\n+  else\n+    return \"crset eq\\;beq%T1l-\";\n }\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n+   (set (attr \"length\")\n+\t(cond [(and (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"8\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t          (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"12\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t  (const_string \"8\")]\n+\t      (const_string \"4\")))])\n \n (define_insn_and_split \"*call_value_nonlocal_sysv<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -10669,23 +10719,46 @@\n    (use (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX\"\n+  \"DEFAULT_ABI == ABI_AIX && rs6000_speculate_indirect_jumps\"\n   \"<ptrload> 2,%2\\;b%T0l\\;<ptrload> 2,%3(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"*call_indirect_aix<mode>_nospec\"\n+  [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n+   (clobber (reg:P LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_AIX && !rs6000_speculate_indirect_jumps\"\n+  \"crset eq\\;<ptrload> 2,%2\\;beq%T0l-\\;<ptrload> 2,%3(1)\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"16\")])\n+\n (define_insn \"*call_value_indirect_aix<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 4 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX\"\n+  \"DEFAULT_ABI == ABI_AIX && rs6000_speculate_indirect_jumps\"\n   \"<ptrload> 2,%3\\;b%T1l\\;<ptrload> 2,%4(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"*call_value_indirect_aix<mode>_nospec\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 4 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n+   (clobber (reg:P LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_AIX && !rs6000_speculate_indirect_jumps\"\n+  \"crset eq\\;<ptrload> 2,%3\\;beq%T1l-\\;<ptrload> 2,%4(1)\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"16\")])\n+\n ;; Call to indirect functions with the ELFv2 ABI.\n ;; Operand0 is the addresss of the function to call\n ;; Operand2 is the offset of the stack location holding the current TOC pointer\n@@ -10909,7 +10982,13 @@\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   if (which_alternative >= 2)\n-    return \\\"b%T0\\\";\n+    {\n+      if (rs6000_speculate_indirect_jumps)\n+\treturn \\\"b%T0\\\";\n+      else\n+\t/* Can use CR0 since it is volatile across sibcalls.  */\n+\treturn \\\"crset eq\\;beq%T0-\\;b .\\\";\n+    }\n   else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n       gcc_assert (!TARGET_SECURE_PLT);\n@@ -10919,7 +10998,28 @@\n     return \\\"b %z0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,8,4,8\")])\n+   (set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t  (const_string \"4\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"12\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"16\")]\n+\t      (const_string \"4\")))])\n \n (define_insn \"*sibcall_value_nonlocal_sysv<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -10939,7 +11039,13 @@\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n   if (which_alternative >= 2)\n-    return \\\"b%T1\\\";\n+    {\n+      if (rs6000_speculate_indirect_jumps)\n+\treturn \\\"b%T1\\\";\n+      else\n+\t/* Can use CR0 since it is volatile across sibcalls.  */\n+\treturn \\\"crset eq\\;beq%T1-\\;b .\\\";\n+    }\n   else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n       gcc_assert (!TARGET_SECURE_PLT);\n@@ -10949,7 +11055,28 @@\n     return \\\"b %z1\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,8,4,8\")])\n+   (set (attr \"length\")\n+\t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n+\t\t  (const_string \"4\")\n+\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"4\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 2))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"12\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 1)))\n+\t\t  (const_string \"8\")\n+\t       (and (eq (symbol_ref \"which_alternative\") (const_int 3))\n+\t\t    (eq (symbol_ref \"rs6000_speculate_indirect_jumps\")\n+\t\t\t(const_int 0)))\n+\t\t  (const_string \"16\")]\n+\t      (const_string \"4\")))])\n \n ;; AIX ABI sibling call patterns.\n "}, {"sha": "f710c15884852039454871e237cbae503264a95e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -1,5 +1,12 @@\n+2018-01-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/safe-indirect-jump-1.c: Remove endian\n+\trestriction, but still restrict to 64-bit.\n+\t* gcc.target/powerpc/safe-indirect-jump-7.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-8.c: New file.\n+\n 2018-01-17  Harald Anlauf  <anlauf@gmx.de>\n-                         \n+\n \tPR fortran/83874\n \t* gfortran.dg/pr83874.f90: New test.\n "}, {"sha": "d66e9c3cdb9d0de87e52bd0844e240053f8d6d74", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -1,7 +1,7 @@\n-/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-do compile { target { lp64 } } } */\n /* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n \n-/* Test for deliberate misprediction of indirect calls for ELFv2.  */\n+/* Test for deliberate misprediction of indirect calls.  */\n \n extern int (*f)();\n "}, {"sha": "d19245e34c4fcf6b9bceb55ca5134dbe13669ed0", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-7.c?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of indirect calls.  */\n+\n+extern int (*f)();\n+\n+int bar ()\n+{\n+  return (*f) () * 53;\n+}\n+\n+/* { dg-final { scan-assembler \"crset eq\" } } */\n+/* { dg-final { scan-assembler \"beqctrl-\" } } */"}, {"sha": "be2150e0c148a5312160a68fd81fa69ca5e295d8", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1b6f0d414047a64c65af260016b552b50224d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c?ref=fe1b6f0d414047a64c65af260016b552b50224d3", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ilp32 } } } */\n+/* { dg-additional-options \"-O2 -mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of -m32 sibcalls.  */\n+\n+extern int (*f)();\n+\n+int bar ()\n+{\n+  return (*f) ();\n+}\n+\n+/* { dg-final { scan-assembler \"crset eq\" } } */\n+/* { dg-final { scan-assembler \"beqctr-\" } } */\n+/* { dg-final { scan-assembler \"b .\" } } */"}]}