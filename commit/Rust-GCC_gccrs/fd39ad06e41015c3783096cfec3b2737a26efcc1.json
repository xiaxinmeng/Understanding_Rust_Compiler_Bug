{"sha": "fd39ad06e41015c3783096cfec3b2737a26efcc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzOWFkMDZlNDEwMTVjMzc4MzA5NmNmZWMzYjI3MzdhMjZlZmNjMQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1994-08-29T19:25:21Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1994-08-29T19:25:21Z"}, "message": "Initial revision\n\nFrom-SVN: r7998", "tree": {"sha": "45d4d6ac745ec27dcef7be55f9c8cbf1625cb7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d4d6ac745ec27dcef7be55f9c8cbf1625cb7a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd39ad06e41015c3783096cfec3b2737a26efcc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd39ad06e41015c3783096cfec3b2737a26efcc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd39ad06e41015c3783096cfec3b2737a26efcc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd39ad06e41015c3783096cfec3b2737a26efcc1/comments", "author": null, "committer": null, "parents": [{"sha": "f6df50cfd659277bb891e7e5044ab482bd088cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6df50cfd659277bb891e7e5044ab482bd088cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6df50cfd659277bb891e7e5044ab482bd088cf9"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "06b853438456657f65271fc282937dcb7485a2d8", "filename": "gcc/listing", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39ad06e41015c3783096cfec3b2737a26efcc1/gcc%2Flisting", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39ad06e41015c3783096cfec3b2737a26efcc1/gcc%2Flisting", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flisting?ref=fd39ad06e41015c3783096cfec3b2737a26efcc1", "patch": "@@ -0,0 +1,159 @@\n+#!/bin/sh -f\n+# Generate a source code listing for C or C++ code with assembler code. The\n+# listing is always written to stdout.\n+# Author: Igor Metz <metz@iam.unibe.ch>\n+\n+# Revision 1.3  89/12/18  13:58:27  metz\n+# lister must now be configured before it can be used. This is done in the\n+# /bin/sh part of the code.\n+# \n+# \n+# Revision 1.2  89/08/16  17:35:02  metz\n+# Support for SPARC added.\n+# \n+# Revision 1.1  89/08/16  16:49:22  metz\n+# Initial revision\n+# \n+\n+# Requires: gawk (may be it works also with nawk)\n+\n+# usage:  lister filename [compiler-options]\n+\n+# Method:\n+# compile the source with -g option to assembler code, then merge the\n+# generated assembler code with the source code. Compiler options\n+# can be supplied on the command line (for example -O)\n+\n+# To install lister, assign one of the supported values to the variable MYSYS:\n+# mc68020  for Motorola 68020 (Sun-3, ..)\n+# mc68030  for Motorola 68030 (Sun-3, ..)\n+# sparc    for SPARC (SUN-4, ..)\n+# i386     for i386 (Sun i386, ...)\n+# i386-linux for i386 (Linux, ...)\n+\n+# uncomment the line you need:\n+# MYSYS=mc68020\n+# MYSYS=mc68030\n+# MYSYS=sparc\n+# MYSYS=i386\n+# MYSYS=i386-linux\n+# MYSYS=`mach`  # this will work on Suns with SunOS > 4.0.0\n+\n+FILENAME=$1\n+shift\n+\n+exec gawk -vsys=$MYSYS -voptions=\"$*\" '\n+# commandline arguments:\n+#  ARGV[0] = \"gawk\"\n+#  ARGV[1] = processid\n+#  ARGV[2] = filename\n+BEGIN {\n+  if (ARGC != 3) {\n+    usage()\n+    exit 1\n+  }\n+\n+  # Declaration of global variables\n+  c_filename = \"\"\n+  asm_filename = \"\"\n+  cmdline = \"\"\n+  asm_code = \"\"\n+  c_code = \"\"\n+  c_lineno = 0\n+  oldlineno = 0\n+  newlineno = 0\n+  ignore_stabd = 0\n+  num_of_fields = 0\n+\n+  # check processor architecture and set sourcecode line_hint accordingly\n+  if (sys == \"sparc\" || sys == \"i386\") {\n+    line_hint = \"^[ \\t]*\\.stabn.*\"\n+  }\n+  else if (sys == \"mc68020\" || sys == \"mc68030\" || sys == \"i386-linux\") {\n+    line_hint = \"^[ \\t]*\\.stabd.*\"\n+  }\n+  else {\n+    error(\"Processor type \" sys \" is not supported yet, sorry\")\n+  }\n+\n+  parse_cmdline()\n+\n+  printf(\"compiling %s to asm code\\n\", c_filename ) > \"/dev/stderr\"\n+\n+  if (system(cmdline) != 0 ) {\n+    error(\"Compilation of \" c_filename \" failed\")\n+  }\n+\n+  printf(\"generating listing\\n\") > \"/dev/stderr\"\n+\n+\n+  while ( getline asm_code < asm_filename > 0 ) {\n+    if ( (ignore_stabd==0) && (asm_code ~ line_hint)) {\n+      # source line hint found. Split the line into fields separated by commas.\n+      # num_of_fields is 4 for sparc, 3 for m68k\n+      num_of_fields = split(asm_code, fields, \",\")\n+      newlineno = fields[3] + 0 # the line number we are looking for is field 3\n+\n+      if (newlineno > oldlineno) {\n+        while ( newlineno > c_lineno ) {\n+\t  getline c_code < c_filename\n+\t  c_lineno++\n+\t  printf(\"%4d %s\\n\", c_lineno, c_code)\n+\t}\n+\toldlineno = newlineno\n+      }\n+    }\n+    else if ( asm_code ~ \".*Ltext[ \\t]*$\" ) {\n+      # filename hint found\n+      if ( match(asm_code, c_filename)) {\n+        ignore_stabd = 0\n+      }\n+      else {\n+        ignore_stabd = 1\n+      }\n+    }\n+    printf(\"\\t\\t\\t%s\\n\", asm_code)\n+  }\n+\n+  # general cleanup\n+  system(\"/bin/rm \" asm_filename)\n+}\n+\n+function usage() {\n+    printf(\"usage: %s filename compiler-options\\n\", argv[0]) > \"/dev/stderr\"\n+}\n+\n+function error(s) {\n+    printf(\"error: %s\\n\", s) > \"/dev/stderr\"\n+    exit 1\n+}\n+\n+function parse_cmdline(    i) {\n+  # construct filenames to use\n+  asm_filename = \"/tmp/lister\" ARGV[1] \".s\"\n+  ARGV[1] = \"\"\n+  c_filename = ARGV[2]\n+  ARGV[2] = \"\"\n+\n+  # construct commandline to use\n+  if ( match(c_filename, \".C\") || match(c_filename, \".cc\") ) {\n+    cmdline = \"g++\"\n+  }\n+  else if (match(c_filename, \".c\")) {\n+    cmdline = \"gcc\"\n+  }\n+  else {\n+    error(\"unknown extension for file \" c_filename)\n+  }\n+\n+  cmdline = cmdline \" -g -S -o \" asm_filename\n+\n+  # now we append the compiler options specified by the user\n+  cmdline = cmdline \" \" options\n+\n+  # last but not least: the name of the file to compile\n+  cmdline = cmdline \" \" c_filename\n+}\n+\n+' $$ $FILENAME\n+"}]}