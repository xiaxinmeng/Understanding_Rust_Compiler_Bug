{"sha": "8d12174db5a92005143deae74b57e553cfa97266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxMjE3NGRiNWE5MjAwNTE0M2RlYWU3NGI1N2U1NTNjZmE5NzI2Ng==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-26T19:04:35Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-26T19:04:35Z"}, "message": "Move target CPP macro handling to C file and add __VIS/__VIS__.\n\n\t* config/sparc/sparc-c.c: New file implementing sparc_target_macros,\n\twhich will now define __VIS and __VIS__ when -mvis is enabled.\n\t* config/sparc/t-sparc: Likewise.\n\t* config.gcc: Add sparc-c.o to c_target_objs and cxx_target_objs,\n\tand add t-sparc to tmake_file for all sparc targets.\n\t* config/sparc/sparc-protos.h (sparc_target_macros): Declare.\n\t* config/sparc/sparc.h (TARGE_CPU_CPP_BUILTINS): Call it.\n\nFrom-SVN: r179210", "tree": {"sha": "6c047b798984899fe89ec8b5c02c76d52d97768a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c047b798984899fe89ec8b5c02c76d52d97768a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d12174db5a92005143deae74b57e553cfa97266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d12174db5a92005143deae74b57e553cfa97266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d12174db5a92005143deae74b57e553cfa97266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d12174db5a92005143deae74b57e553cfa97266/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cb1ef51438f731064431977ca56f7db598409d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb1ef51438f731064431977ca56f7db598409d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb1ef51438f731064431977ca56f7db598409d1"}], "stats": {"total": 150, "additions": 119, "deletions": 31}, "files": [{"sha": "309eca549dfe67d5bc79de73612e535d32691e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -1,3 +1,13 @@\n+2011-09-26  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc-c.c: New file implementing sparc_target_macros,\n+\twhich will now define __VIS and __VIS__ when -mvis is enabled.\n+\t* config/sparc/t-sparc: Likewise.\n+\t* config.gcc: Add sparc-c.o to c_target_objs and cxx_target_objs,\n+\tand add t-sparc to tmake_file for all sparc targets.\n+\t* config/sparc/sparc-protos.h (sparc_target_macros): Declare.\n+\t* config/sparc/sparc.h (TARGE_CPU_CPP_BUILTINS): Call it.\n+\n 2011-09-26  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (peephole casesi+2): Use -1 instead of 65536."}, {"sha": "cf11364fd95a9ce054079addd59c1aa63966a8a3", "filename": "gcc/config.gcc", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -422,6 +422,8 @@ score*-*-*)\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc\n+\tc_target_objs=\"sparc-c.o\"\n+\tcxx_target_objs=\"sparc-c.o\"\n \textra_headers=\"visintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n@@ -2457,32 +2459,32 @@ sparc-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h sparc/sysv4.h sparc/sp-elf.h\"\n \tcase ${target} in\n \t    *-leon-*)\n-\t\ttmake_file=\"sparc/t-leon\"\n+\t\ttmake_file=\"sparc/t-sparc sparc/t-leon\"\n \t\t;;\n \t    *-leon[3-9]*)\n-\t\ttmake_file=\"sparc/t-leon3\"\n+\t\ttmake_file=\"sparc/t-sparc sparc/t-leon3\"\n \t\t;;\n \t    *)\n-\t\ttmake_file=\"sparc/t-elf\"\n+\t\ttmake_file=\"sparc/t-sparc sparc/t-elf\"\n \t\t;;\n \tesac\n \t;;\n sparc-*-rtems*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sparc/sysv4.h sparc/sp-elf.h sparc/rtemself.h rtems.h newlib-stdint.h\"\n-\ttmake_file=\"sparc/t-elf t-rtems\"\n+\ttmake_file=\"sparc/t-sparc sparc/t-elf t-rtems\"\n \t;;\n sparc-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sparc/sysv4.h gnu-user.h linux.h glibc-stdint.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \tcase ${target} in\n \t    *-leon-*)\n-\t\ttmake_file=\"${tmake_file} sparc/t-leon\"\n+\t\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-leon\"\n \t\t;;\n \t    *-leon[3-9]*)\n-\t\ttmake_file=\"${tmake_file} sparc/t-leon3\"\n+\t\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-leon3\"\n \t\t;;\n \t    *)\n-\t\ttmake_file=\"${tmake_file} sparc/t-linux\"\n+\t\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-linux\"\n \t\t;;\n \tesac\n \tif test x$enable_targets = xall; then\n@@ -2497,6 +2499,7 @@ sparc-*-netbsdelf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc\"\n \t;;\n sparc*-*-solaris2*)\n \ttm_file=\"sparc/biarch64.h ${tm_file} ${sol2_tm_file} sol2-bi.h\"\n@@ -2508,25 +2511,26 @@ sparc*-*-solaris2*)\n \t\ttest x$with_cpu != x || with_cpu=v9\n \t\t;;\n \tesac\n-\ttmake_file=\"${tmake_file} sparc/t-sol2-64\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-sol2-64\"\n \t;;\n sparc-wrs-vxworks)\n \ttm_file=\"${tm_file} elfos.h sparc/sysv4.h vx-common.h vxworks.h sparc/vxworks.h\"\n-\ttmake_file=\"${tmake_file} sparc/t-vxworks\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-vxworks\"\n \t;;\n sparc64-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h sparc/sysv4.h sparc/sp64-elf.h\"\n \textra_options=\"${extra_options} sparc/little-endian.opt\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc\"\n \t;;\n sparc64-*-rtems*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h sparc/sysv4.h sparc/sp64-elf.h sparc/rtemself.h rtems.h\"\n \textra_options=\"${extra_options} sparc/little-endian.opt\"\n-\ttmake_file=\"${tmake_file} t-rtems\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc t-rtems\"\n \t;;\n sparc64-*-linux*)\n \ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h gnu-user.h linux.h glibc-stdint.h sparc/default-64.h sparc/linux64.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n-\ttmake_file=\"${tmake_file} sparc/t-linux sparc/t-linux64\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-linux sparc/t-linux64\"\n \textra_parts=\"${extra_parts} crtfastmath.o\"\n \t;;\n sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n@@ -2538,13 +2542,14 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \t\t*) echo \"$with_cpu not supported for freebsd target\"; exit 1 ;;\n \tesac\n \textra_parts=\"${extra_parts} crtfastmath.o\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc\"\n \t;;\n sparc64-*-netbsd*)\n \ttm_file=\"sparc/biarch64.h ${tm_file}\"\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n-\ttmake_file=\"${tmake_file} sparc/t-netbsd64\"\n+\ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-netbsd64\"\n \t;;\n sparc64-*-openbsd*)\n \ttm_file=\"sparc/openbsd1-64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h sparc/sp64-elf.h\"\n@@ -2553,6 +2558,7 @@ sparc64-*-openbsd*)\n \textra_options=\"${extra_options} sparc/little-endian.opt\"\n \tgas=yes gnu_ld=yes\n \twith_cpu=ultrasparc\n+\ttmake_file=\"${tmake_file} sparc/t-sparc\"\n \t;;\n spu-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h spu/spu-elf.h spu/spu.h newlib-stdint.h\""}, {"sha": "6e30950df0f83a18d392477fab2c56744578afd0", "filename": "gcc/config/sparc/sparc-c.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-c.c?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -0,0 +1,53 @@\n+/* Subroutines used for macro/preprocessor support on SPARC.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"tm_p.h\"\n+#include \"flags.h\"\n+#include \"c-family/c-common.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"cpplib.h\"\n+\n+void\n+sparc_target_macros (void)\n+{\n+  builtin_define_std (\"sparc\");\n+\n+  if (TARGET_64BIT)\n+    {\n+      cpp_assert (parse_in, \"cpu=sparc64\");\n+      cpp_assert (parse_in, \"machine=sparc64\");\n+    }\n+  else\n+    {\n+      cpp_assert (parse_in, \"cpu=sparc\");\n+      cpp_assert (parse_in, \"machine=sparc\");\n+    }\n+\n+  if (TARGET_VIS)\n+    {\n+      cpp_define (parse_in, \"__VIS__=0x100\");\n+      cpp_define (parse_in, \"__VIS=0x100\");\n+    }\n+}"}, {"sha": "dfa461a5f585347fd86673d9481ef105278ad91b", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -47,6 +47,7 @@ extern int short_branch (int, int);\n extern void sparc_profile_hook (int);\n extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n+extern void sparc_target_macros (void);\n \n #ifdef RTX_CODE\n extern enum machine_mode select_cc_mode (enum rtx_code, rtx, rtx);"}, {"sha": "cccd4446c91e4f5f59ff63110de242daacf63184", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -105,25 +105,7 @@ struct processor_costs {\n \n extern const struct processor_costs *sparc_costs;\n \n-/* Target CPU builtins.  FIXME: Defining sparc is for the benefit of\n-   Solaris only; otherwise just define __sparc__.  Sadly the headers\n-   are such a mess there is no Solaris-specific header.  */\n-#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"sparc\");\t\t\\\n-\tif (TARGET_64BIT)\t\t\t\\\n-\t  { \t\t\t\t\t\\\n-\t    builtin_assert (\"cpu=sparc64\");\t\\\n-\t    builtin_assert (\"machine=sparc64\");\t\\\n-\t  }\t\t\t\t\t\\\n-\telse\t\t\t\t\t\\\n-\t  { \t\t\t\t\t\\\n-\t    builtin_assert (\"cpu=sparc\");\t\\\n-\t    builtin_assert (\"machine=sparc\");\t\\\n-\t  }\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_CPU_CPP_BUILTINS() sparc_target_macros ()\n \n /* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n /* #define SPARC_BI_ARCH */"}, {"sha": "ea9d0e824e233a4bd966bd8445ae2870168fe51d", "filename": "gcc/config/sparc/t-sparc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Ft-sparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d12174db5a92005143deae74b57e553cfa97266/gcc%2Fconfig%2Fsparc%2Ft-sparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparc?ref=8d12174db5a92005143deae74b57e553cfa97266", "patch": "@@ -0,0 +1,36 @@\n+# General rules that all sparc/ targets must have.\n+#\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+sparc.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+  $(TREE_H) $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h  \\\n+  insn-codes.h conditions.h output.h $(INSN_ATTR_H) $(FLAGS_H) \\\n+  $(FUNCTION_H) $(EXCEPT_H) $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n+  $(DIAGNOSTIC_CORE_H) $(GGC_H) $(TM_P_H) debug.h $(TARGET_H) \\\n+  $(TARGET_DEF_H) $(COMMON_TARGET_H) $(CFGLAYOUT_H) $(GIMPLE_H) \\\n+  langhooks.h reload.h $(PARAMS_H) $(DF_H) dwarf2out.h $(OPTS_H) \\\n+  gt-sparc.h\n+\n+sparc-c.o: $(srcdir)/config/sparc/sparc-c.c \\\n+    $(srcdir)/config/sparc/sparc-protos.h \\\n+    $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) $(FLAGS_H) \\\n+    $(TM_P_H) coretypes.h $(TM_H) $(TREE_H) \\\n+    $(C_COMMON_H) $(C_PRAGMA_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/sparc/sparc-c.c"}]}