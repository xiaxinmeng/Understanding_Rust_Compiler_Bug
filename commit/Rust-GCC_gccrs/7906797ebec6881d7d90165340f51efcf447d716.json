{"sha": "7906797ebec6881d7d90165340f51efcf447d716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkwNjc5N2ViZWM2ODgxZDdkOTAxNjUzNDBmNTFlZmNmNDQ3ZDcxNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-12-05T20:13:03Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-12-05T20:13:03Z"}, "message": "PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n\nThis patch implements C++20 P1331, allowing trivial default initialization in\nconstexpr contexts.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Adjust the value of __cpp_constexpr.\n\n\t* class.c (trivial_default_constructor_is_constexpr): Return true in\n\tC++20.\n\t* constexpr.c (cx_check_missing_mem_inits): Allow missing field\n\tinitializers in C++20.\n\t(cxx_eval_call_expression): Don't clear CONSTRUCTOR_NO_CLEARING for\n\tconstexpr constructors in C++20.\n\t(reduced_constant_expression_p): Don't set FIELD for union and array\n\ttypes.  Skip empty class fields without initializers.\n\t* decl.c (check_for_uninitialized_const_var): Permit trivial default\n\tinitialization in constexpr.\n\t(next_initializable_field): Don't skip vptr fields.\n\t* method.c (walk_field_subobs): Still consider a constructor that\n\tdoesn't initialize all the members constexpr.\n\n\t* g++.dg/cpp0x/constexpr-array6.C: Adjust dg-error.\n\t* g++.dg/cpp0x/constexpr-ctor.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-diag4.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-template2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-union2.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-mangle.C: Rip out a piece of code ...\n\t* g++.dg/cpp0x/lambda/lambda-mangle6.C: ... and put it here.\n\t* g++.dg/cpp0x/pr79118.C: Adjust dg-error.\n\t* g++.dg/cpp1y/constexpr-83921-3.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-neg1.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda12.C: Likewise.\n\t* g++.dg/cpp1z/feat-cxx1z.C: Use -std=c++17.\n\t* g++.dg/cpp2a/constexpr-init1.C: New test.\n\t* g++.dg/cpp2a/constexpr-init2.C: New test.\n\t* g++.dg/cpp2a/constexpr-init3.C: New test.\n\t* g++.dg/cpp2a/constexpr-init4.C: New test.\n\t* g++.dg/cpp2a/constexpr-init5.C: New test.\n\t* g++.dg/cpp2a/constexpr-init6.C: New test.\n\t* g++.dg/cpp2a/constexpr-init7.C: New test.\n\t* g++.dg/cpp2a/constexpr-init8.C: New test.\n\t* g++.dg/cpp2a/constexpr-init9.C: New test.\n\t* g++.dg/cpp2a/constexpr-init10.C: New test.\n\t* g++.dg/cpp2a/constexpr-init11.C: New test.\n\t* g++.dg/cpp2a/constexpr-init12.C: New test.\n\t* g++.dg/cpp2a/constexpr-init13.C: New test.\n\t* g++.dg/cpp2a/constexpr-init14.C: New test.\n\t* g++.dg/cpp2a/constexpr-init15.C: New test.\n\t* g++.dg/cpp2a/constexpr-try5.C: Adjust dg-error.\n\t* g++.dg/cpp2a/feat-cxx2a.C: Test __cpp_constexpr.\n\t* g++.dg/cpp2a/lambda-mangle.C: New test.\n\t* g++.dg/debug/dwarf2/pr44641.C: Skip for c++2a.\n\t* g++.dg/ext/stmtexpr21.C: Adjust dg-error.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r279019", "tree": {"sha": "ed7a31a3d6aa39957a07685ac63429cd13bede4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed7a31a3d6aa39957a07685ac63429cd13bede4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7906797ebec6881d7d90165340f51efcf447d716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7906797ebec6881d7d90165340f51efcf447d716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7906797ebec6881d7d90165340f51efcf447d716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7906797ebec6881d7d90165340f51efcf447d716/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c04da88731961636d08c0fd06f2aa291410d5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c04da88731961636d08c0fd06f2aa291410d5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c04da88731961636d08c0fd06f2aa291410d5b9"}], "stats": {"total": 723, "additions": 666, "deletions": 57}, "files": [{"sha": "bcbb999dcbf83a99bdcdd05c424ea894810977d0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -1,3 +1,9 @@\n+2019-12-05  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Adjust the value of __cpp_constexpr.\n+\n 2019-12-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92271 - make __is_same alias for __is_same_as."}, {"sha": "5ad626d7f2466362d02ce09969fad0fdb6463687", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -975,7 +975,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_fold_expressions=201603L\");\n \t  cpp_define (pfile, \"__cpp_nontype_template_args=201411L\");\n \t  cpp_define (pfile, \"__cpp_range_based_for=201603L\");\n-\t  cpp_define (pfile, \"__cpp_constexpr=201603L\");\n+\t  if (cxx_dialect <= cxx17)\n+\t    cpp_define (pfile, \"__cpp_constexpr=201603L\");\n \t  cpp_define (pfile, \"__cpp_if_constexpr=201606L\");\n \t  cpp_define (pfile, \"__cpp_capture_star_this=201603L\");\n \t  cpp_define (pfile, \"__cpp_inline_variables=201606L\");\n@@ -997,6 +998,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_init_captures=201803L\");\n \t  cpp_define (pfile, \"__cpp_generic_lambdas=201707L\");\n \t  cpp_define (pfile, \"__cpp_designated_initializers=201707L\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=201907L\");\n \t  cpp_define (pfile, \"__cpp_constexpr_in_decltype=201711L\");\n \t  cpp_define (pfile, \"__cpp_conditional_explicit=201806L\");\n \t  cpp_define (pfile, \"__cpp_consteval=201811L\");"}, {"sha": "b5c2d1baf349b52365d6bc5c88c6bc6ff4be6115", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -1,3 +1,21 @@\n+2019-12-05  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+\t* class.c (trivial_default_constructor_is_constexpr): Return true in\n+\tC++20.\n+\t* constexpr.c (cx_check_missing_mem_inits): Allow missing field\n+\tinitializers in C++20.\n+\t(cxx_eval_call_expression): Don't clear CONSTRUCTOR_NO_CLEARING for\n+\tconstexpr constructors in C++20.\n+\t(reduced_constant_expression_p): Don't set FIELD for union and array\n+\ttypes.  Skip empty class fields without initializers.\n+\t* decl.c (check_for_uninitialized_const_var): Permit trivial default\n+\tinitialization in constexpr.\n+\t(next_initializable_field): Don't skip vptr fields.\n+\t* method.c (walk_field_subobs): Still consider a constructor that\n+\tdoesn't initialize all the members constexpr.\n+\n 2019-12-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92271 - make __is_same alias for __is_same_as."}, {"sha": "d8bb44990b7c1565528014a79951d15834c072d6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -5288,8 +5288,14 @@ trivial_default_constructor_is_constexpr (tree t)\n   /* A defaulted trivial default constructor is constexpr\n      if there is nothing to initialize.  */\n   gcc_assert (!TYPE_HAS_COMPLEX_DFLT (t));\n-  /* A class with a vptr doesn't have a trivial default ctor.  */\n-  return is_really_empty_class (t, /*ignore_vptr*/true);\n+  /* A class with a vptr doesn't have a trivial default ctor.\n+     In C++20, a class can have transient uninitialized members, e.g.:\n+\n+       struct S { int i; constexpr S() = default; };\n+\n+     should work.  */\n+  return (cxx_dialect >= cxx2a\n+\t  || is_really_empty_class (t, /*ignore_vptr*/true));\n }\n \n /* Returns true iff class T has a constexpr default constructor.  */"}, {"sha": "19e09c74760affd8d6caf50852ea72bc318b1368", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -767,6 +767,10 @@ massage_constexpr_body (tree fun, tree body)\n static bool\n cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n {\n+  /* We allow uninitialized bases/fields in C++20.  */\n+  if (cxx_dialect >= cxx2a)\n+    return false;\n+\n   unsigned nelts = 0;\n   \n   if (body)\n@@ -815,7 +819,7 @@ cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n \t    continue;\n \t  if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n \t    {\n-\t      /* Recurse to check the anonummous aggregate member.  */\n+\t      /* Recurse to check the anonymous aggregate member.  */\n \t      bad |= cx_check_missing_mem_inits\n \t\t(TREE_TYPE (field), NULL_TREE, complain);\n \t      if (bad && !complain)\n@@ -2179,15 +2183,26 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \tentry->result = result;\n     }\n \n-  /* The result of a constexpr function must be completely initialized.  */\n-  if (TREE_CODE (result) == CONSTRUCTOR)\n+  /* The result of a constexpr function must be completely initialized.\n+\n+     However, in C++20, a constexpr constructor doesn't necessarily have\n+     to initialize all the fields, so we don't clear CONSTRUCTOR_NO_CLEARING\n+     in order to detect reading an unitialized object in constexpr instead\n+     of value-initializing it.  (reduced_constant_expression_p is expected to\n+     take care of clearing the flag.)  */\n+  if (TREE_CODE (result) == CONSTRUCTOR\n+      && (cxx_dialect < cxx2a\n+\t  || !DECL_CONSTRUCTOR_P (fun)))\n     clear_no_implicit_zero (result);\n \n   pop_cx_call_context ();\n   return result;\n }\n \n-/* FIXME speed this up, it's taking 16% of compile time on sieve testcase.  */\n+/* Return true if T is a valid constant initializer.  If a CONSTRUCTOR\n+   initializes all the members, the CONSTRUCTOR_NO_CLEARING flag will be\n+   cleared.\n+   FIXME speed this up, it's taking 16% of compile time on sieve testcase.  */\n \n bool\n reduced_constant_expression_p (tree t)\n@@ -2209,6 +2224,12 @@ reduced_constant_expression_p (tree t)\n \t  if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n \t    /* An initialized vector would have a VECTOR_CST.  */\n \t    return false;\n+\t  else if (cxx_dialect >= cxx2a\n+\t\t   /* An ARRAY_TYPE doesn't have any TYPE_FIELDS.  */\n+\t\t   && (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n+\t\t       /* A union only initializes one member.  */\n+\t\t       || TREE_CODE (TREE_TYPE (t)) == UNION_TYPE))\n+\t    field = NULL_TREE;\n \t  else\n \t    field = next_initializable_field (TYPE_FIELDS (TREE_TYPE (t)));\n \t}\n@@ -2222,14 +2243,20 @@ reduced_constant_expression_p (tree t)\n \t    return false;\n \t  if (field)\n \t    {\n-\t      if (idx != field)\n-\t\treturn false;\n+\t      /* Empty class field may or may not have an initializer.  */\n+\t      for (; idx != field;\n+\t\t   field = next_initializable_field (DECL_CHAIN (field)))\n+\t\tif (!is_really_empty_class (TREE_TYPE (field),\n+\t\t\t\t\t    /*ignore_vptr*/false))\n+\t\t  return false;\n \t      field = next_initializable_field (DECL_CHAIN (field));\n \t    }\n \t}\n-      if (field)\n-\treturn false;\n-      else if (CONSTRUCTOR_NO_CLEARING (t))\n+      /* There could be a non-empty field at the end.  */\n+      for (; field; field = next_initializable_field (DECL_CHAIN (field)))\n+\tif (!is_really_empty_class (TREE_TYPE (field), /*ignore_vptr*/false))\n+\t  return false;\n+      if (CONSTRUCTOR_NO_CLEARING (t))\n \t/* All the fields are initialized.  */\n \tCONSTRUCTOR_NO_CLEARING (t) = false;\n       return true;"}, {"sha": "a44f1721ea227c5f31ecbb2b7b76dbd7b0e56623", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -5858,8 +5858,12 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n      7.1.6 */\n   if (VAR_P (decl)\n       && !TYPE_REF_P (type)\n-      && (constexpr_context_p\n-\t  || CP_TYPE_CONST_P (type) || var_in_constexpr_fn (decl))\n+      && (CP_TYPE_CONST_P (type)\n+\t  /* C++20 permits trivial default initialization in constexpr\n+\t     context (P1331R2).  */\n+\t  || (cxx_dialect < cxx2a\n+\t      && (constexpr_context_p\n+\t\t  || var_in_constexpr_fn (decl))))\n       && !DECL_NONTRIVIALLY_INITIALIZED_P (decl))\n     {\n       tree field = default_init_uninitialized_part (type);\n@@ -5868,7 +5872,7 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n \n       bool show_notes = true;\n \n-      if (!constexpr_context_p)\n+      if (!constexpr_context_p || cxx_dialect >= cxx2a)\n \t{\n \t  if (CP_TYPE_CONST_P (type))\n \t    {\n@@ -5938,7 +5942,11 @@ next_initializable_field (tree field)\n \t && (TREE_CODE (field) != FIELD_DECL\n \t     || DECL_UNNAMED_BIT_FIELD (field)\n \t     || (DECL_ARTIFICIAL (field)\n-\t\t && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field)))))\n+\t\t /* In C++17, don't skip base class fields.  */\n+\t\t && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field))\n+\t\t /* Don't skip vptr fields.  We might see them when we're\n+\t\t    called from reduced_constant_expression_p.  */\n+\t\t && !DECL_VIRTUAL_P (field))))\n     field = DECL_CHAIN (field);\n \n   return field;"}, {"sha": "d2aed473d777aecbb1bbe7f95502ed66804908a4", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -1985,10 +1985,12 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t  if (bad && deleted_p)\n \t    *deleted_p = true;\n \n-\t  /* For an implicitly-defined default constructor to be constexpr,\n-\t     every member must have a user-provided default constructor or\n-\t     an explicit initializer.  */\n-\t  if (constexpr_p && !CLASS_TYPE_P (mem_type)\n+\t  /* Before C++20, for an implicitly-defined default constructor to\n+\t     be constexpr, every member must have a user-provided default\n+\t     constructor or an explicit initializer.  */\n+\t  if (constexpr_p\n+\t      && cxx_dialect < cxx2a\n+\t      && !CLASS_TYPE_P (mem_type)\n \t      && TREE_CODE (DECL_CONTEXT (field)) != UNION_TYPE)\n \t    {\n \t      *constexpr_p = false;"}, {"sha": "6d4c403e129458df00db648e5ca5555ddcc3bbd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -1,3 +1,42 @@\n+2019-12-05  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+\t* g++.dg/cpp0x/constexpr-array6.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/constexpr-ctor.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-diag4.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-template2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-union2.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-mangle.C: Rip out a piece of code ...\n+\t* g++.dg/cpp0x/lambda/lambda-mangle6.C: ... and put it here.\n+\t* g++.dg/cpp0x/pr79118.C: Adjust dg-error.\n+\t* g++.dg/cpp1y/constexpr-83921-3.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-neg1.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda12.C: Likewise.\n+\t* g++.dg/cpp1z/feat-cxx1z.C: Use -std=c++17.\n+\t* g++.dg/cpp2a/constexpr-init1.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init2.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init3.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init4.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init5.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init6.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init7.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init8.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init9.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init10.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init11.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init12.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init13.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init14.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init15.C: New test.\n+\t* g++.dg/cpp2a/constexpr-try5.C: Adjust dg-error.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Test __cpp_constexpr.\n+\t* g++.dg/cpp2a/lambda-mangle.C: New test.\n+\t* g++.dg/debug/dwarf2/pr44641.C: Skip for c++2a.\n+\t* g++.dg/ext/stmtexpr21.C: Adjust dg-error.\n+\n 2019-12-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92271 - make __is_same alias for __is_same_as."}, {"sha": "48dae5d9609e15d0899b6d750fd1aff6213460a1", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array6.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array6.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -4,12 +4,13 @@\n struct A\n {\n   int i;\n-  constexpr A() {}\t\t// { dg-error \"A::i\" }\n+  constexpr A() {}\t\t// { dg-error \"A::i\" \"\" { target c++17_down } }\n };\n \n struct B\n {\n   A a;\n };\n \n-constexpr B b[] = { {} };\t// { dg-error \"A::A\" }\n+constexpr B b[] = { {} };\t// { dg-error \"A::A\" \"\" { target c++17_down } }\n+// { dg-error \"is not a constant expression\" \"\" { target c++2a } .-1 }"}, {"sha": "1d0fa479cbcdcf79b87f1c4170d140e9be1df216", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -3,5 +3,5 @@\n struct A\n {\n   int i;\n-  constexpr A() { }\t\t// { dg-error \"A::i\" }\n+  constexpr A() { }\t\t// { dg-error \"A::i\" \"\" { target c++17_down } }\n };"}, {"sha": "1c43569615c5f5fb81603e8604549a1d77756370", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -48,7 +48,7 @@ struct Def\n {\n   int _M_i;\t\t\t// { dg-message \"does not initialize\" }\n \n-  constexpr Def() = default;\t// { dg-error \"implicit declaration is not .constexpr.\" }\n+  constexpr Def() = default;\t// { dg-error \"implicit declaration is not .constexpr.\" \"\" { target c++17_down } }\n };\n \n constexpr Def defobj;\t\t// { dg-error \"uninitialized\" }"}, {"sha": "c603bdd1a00a5c18c3f97a1a571b2c1d8d79d297", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag4.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -21,5 +21,5 @@ struct A1\n struct B1\n {\n     A1 a1;\n-    constexpr B1() {} // { dg-error \"B1::a1\" }\n+    constexpr B1() {} // { dg-error \"B1::a1\" \"\" { target c++17_down } }\n };"}, {"sha": "9d6d5ff587ca9a34745cbc09be8e3d3c893026b1", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -6,7 +6,7 @@\n struct A\n {\n   int i;\n-  constexpr A(int _i) { i = _i; } // { dg-error \"empty body|A::i\" }\n+  constexpr A(int _i) { i = _i; } // { dg-error \"empty body|A::i\" \"\" { target c++17_down } }\n };\n \n template <class T>"}, {"sha": "71eb559a24c5607df63f2df7bd578ad7bb3c247f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-template2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-template2.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -3,7 +3,7 @@\n template <class T> struct A\n {\n   T t;\n-  constexpr A() { }\t\t// { dg-error \"::t\" }\n+  constexpr A() { }\t\t// { dg-error \"::t\" \"\" { target c++17_down } }\n };\n \n int main()"}, {"sha": "c22ecc99efba83c6432d9bfc0a53db3ac4dbd772", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-union2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union2.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -14,5 +14,5 @@ union bar\n   int x;\n   short y;\n \n-  constexpr bar() = default;\t// { dg-error \"constexpr\" }\n+  constexpr bar() = default;\t// { dg-error \"constexpr\" \"\" { target c++17_down } }\n };"}, {"sha": "7894ef3051e4771a0716ab80fb94bc0433ad3495", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle.C", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -47,17 +47,6 @@ struct S {\n \t []{return 3;}());\n };\n \n-template<typename T> struct R {\n-  static int x;\n-};\n-// \"int i;\" makes the op() non-constexpr in C++17.\n-template<typename T> int R<T>::x = []{int i; return 1;}();\n-template int R<int>::x;\n-// Type of lambda in intializer of R<int>::x: N1RIiE1xMUlvE_E\n-// Corresponding operator(): _ZNK1RIiE1xMUlvE_clEv\n-// { dg-final { scan-assembler \"_ZNK1RIiE1xMUlvE_clEv\" } }\n-// { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*_?_ZNK1RIiE1xMUlvE_clEv\" { target { ! { *-*-mingw* *-*-cygwin } } } } }\n-\n void bar()\n {\n   // lambdas in non-vague linkage functions have internal linkage."}, {"sha": "9ec13e79bbf4584f963830cc4072cf7507a44c3f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle6.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle6.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,15 @@\n+// Test lambda mangling\n+// { dg-do compile { target { c++11 && c++17_down } } }\n+// { dg-require-weak \"\" }\n+// { dg-options \"-fno-inline\" }\n+\n+template<typename T> struct R {\n+  static int x;\n+};\n+// \"int i;\" makes the op() non-constexpr in C++17.  In C++20, it does not.\n+template<typename T> int R<T>::x = []{int i; return 1;}();\n+template int R<int>::x;\n+// Type of lambda in intializer of R<int>::x: N1RIiE1xMUlvE_E\n+// Corresponding operator(): _ZNK1RIiE1xMUlvE_clEv\n+// { dg-final { scan-assembler \"_ZNK1RIiE1xMUlvE_clEv\" } }\n+// { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*_?_ZNK1RIiE1xMUlvE_clEv\" { target { ! { *-*-mingw* *-*-cygwin } } } } }"}, {"sha": "616b51ea29a976ae428fc231d2dd247cc2e85a9b", "filename": "gcc/testsuite/g++.dg/cpp0x/pr79118.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -13,7 +13,7 @@ struct One\n   constexpr One () : a(), b() {} // { dg-error \"multiple\" }\n   constexpr One (int) : a() {}\n   constexpr One (unsigned) : b () {}\n-  constexpr One (void *) {} // { dg-error \"exactly one\" }\n+  constexpr One (void *) {} // { dg-error \"exactly one\" \"\" { target c++17_down } }\n };\n \n One a ();\n@@ -30,10 +30,10 @@ struct Two\n   };\n \n   constexpr Two () : a(), b() {}\n-  constexpr Two (int) : a() {} // { dg-error \"b' must be initialized\" }\n-  constexpr Two (unsigned) : b () {} // { dg-error \"a' must be initialized\" }\n-  constexpr Two (void *) {} // { dg-error \"a' must be initialized\" }\n-   // { dg-error \"b' must be initialized\" \"\" { target *-*-* } .-1 }\n+  constexpr Two (int) : a() {} // { dg-error \"b' must be initialized\" \"\" { target c++17_down } }\n+  constexpr Two (unsigned) : b () {} // { dg-error \"a' must be initialized\" \"\" { target c++17_down } }\n+  constexpr Two (void *) {} // { dg-error \"a' must be initialized\" \"\" { target c++17_down } }\n+   // { dg-error \"b' must be initialized\" \"\" { target c++17_down } .-1 }\n };\n \n Two e ();"}, {"sha": "2f1218693e02e59996afef3105f690d7123f7cc4", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-83921-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++14 } }\n \n struct Foo { int m; };\n-constexpr void test() { Foo f; }  // { dg-error \"uninitialized\" }\n+constexpr void test() { Foo f; }  // { dg-error \"uninitialized\" \"\" { target c++17_down } }"}, {"sha": "53f0f1f7a2bf032daa2f4f3522f0bad30f773501", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -8,7 +8,7 @@ constexpr int f(int i) {\n   goto foo;\t\t\t// { dg-error \"goto\" }\n  foo:\n   asm(\"foo\");\t\t\t// { dg-error \"asm\" \"\" { target c++17_down } }\n-  int k;\t\t\t// { dg-error \"uninitialized\" }\n+  int k;\t\t\t// { dg-error \"uninitialized\" \"\" { target c++17_down } }\n   A a;\t\t\t\t// { dg-error \"non-literal\" }\n   return i;\n }"}, {"sha": "93b53273741036df59047f0b09fcb0ddf26cf46f", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -3,7 +3,7 @@\n void f(int i)\n {\n   [i]() constexpr {\n-    int j;\t\t\t// { dg-error \"uninitialized\" }\n+    int j;\t\t\t// { dg-error \"uninitialized\" \"\" { target c++17_down } }\n     j = i;\n     return j;\n   }();"}, {"sha": "ab7b89da9e899e8b52bd952c1b32fc4bc6135925", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init1.C", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,99 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+// Test basic use.\n+\n+struct S {\n+  int i;\n+  constexpr S(bool b) {\n+    if (b)\n+      i = 42;\n+  }\n+};\n+constexpr S s1(true);\n+constexpr S s2(false); // { dg-error \"not a constant expression\" }\n+\n+constexpr int\n+fn1 (int x)\n+{\n+  int a;\n+  a = 5;\n+  return x + a;\n+}\n+\n+static_assert (fn1 (2) == 7);\n+\n+constexpr int\n+fn2 (int x)\n+{\n+  const int a; // { dg-error \"uninitialized .const a.\" }\n+  constexpr int b; // { dg-error \"uninitialized .const b.\" }\n+  return x;\n+}\n+\n+constexpr int\n+fn3 (int x)\n+{\n+  int a; // { dg-message \".int a. is not const\" }\n+  return x + a; // { dg-error \"the value of .a. is not usable in a constant expression\" }\n+}\n+\n+constexpr int a = fn3 (5); // { dg-message \"in .constexpr. expansion of\" }\n+\n+constexpr int\n+fn4 ()\n+{\n+  struct S { int a = -5; int b; } s;\n+  return s.a;\n+}\n+\n+static_assert (fn4 () == -5);\n+\n+constexpr int\n+fn5 ()\n+{\n+  struct S { int a = 9; int b; } s;\n+  return s.b;\n+}\n+\n+constexpr int b = fn5 (); // { dg-error \"accessing uninitialized member\" }\n+// { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-1 }\n+\n+constexpr int\n+fn6 ()\n+{\n+  int a;\n+  return 42;\n+}\n+\n+static_assert (fn6 () == 42);\n+\n+constexpr int\n+fn7 (bool b)\n+{\n+  int a; // { dg-message \".int a. is not const\" }\n+  if (b)\n+    a = 42;\n+  return a;\n+}\n+\n+static_assert (fn7 (true) == 42);\n+static_assert (fn7 (false) == 42); // { dg-error \"non-constant condition|the value of .a. is not usable\" }\n+// { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-1 }\n+\n+constexpr int\n+fn8 (int n)\n+{\n+  int r;\n+  switch (n)\n+    {\n+    case 1:\n+    r = n;\n+    return r;\n+    case 42:\n+    r = n;\n+    return r;\n+    }\n+}\n+\n+static_assert (fn8 (1) == 1);\n+static_assert (fn8 (42) == 42);"}, {"sha": "74bf8e6677bddab4bfbb80527ee835a698e91c81", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init10.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+// In c++2a we don't emit a call to _ZN3FooI3ArgEC1Ev.\n+\n+struct Arg;\n+struct Base {\n+  int i;\n+  virtual ~Base();\n+};\n+template <class> struct Foo : Base { };\n+Foo<Arg> a;"}, {"sha": "1c7836a674aed1bccb8b362e9a24bc0114af5929", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  int i;\n+  constexpr S(int) : i(10) {}\n+};\n+\n+struct W {\n+  constexpr W(int) : s(8), p() {}\n+\n+  S s;\n+  int *p;\n+};\n+\n+constexpr auto a = W(42);"}, {"sha": "7d3d3729b31802be251b05f578fb845ba880b444", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init12.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  int uninit;\n+  constexpr S(int) {}\n+};\n+\n+struct W {\n+  constexpr W(int) : s(8), p() {}\n+\n+  S s;\n+  int *p;\n+};\n+\n+constexpr auto a = W(42); // { dg-error \"not a constant expression\" }"}, {"sha": "3d4460a0eb87fb91fc0189f43c947d343f72778e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init13.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct E { };\n+\n+struct S {\n+  E e;\n+  constexpr S() {}\n+};\n+\n+constexpr S s;\n+constexpr S s2[4];\n+\n+struct W {\n+  [[no_unique_address]] E e1, e2;\n+  constexpr W() {}\n+};\n+\n+constexpr W w;\n+constexpr W w2[4];\n+\n+struct Y {\n+  [[no_unique_address]] E e;\n+  __extension__ char a[0];\n+  constexpr Y() {}\n+};\n+\n+constexpr Y y;\n+constexpr Y y2[4];\n+\n+struct Z {\n+  [[no_unique_address]] E e;\n+  int i;\n+  constexpr Z(int n) :i(n) { }\n+};\n+\n+constexpr Z z(42);"}, {"sha": "6ab6abf150567d251fb6c795cc7fba187f45a55d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init14.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct E {\n+  constexpr E() = default;\n+  constexpr E(int) {}\n+};\n+\n+struct W {\n+  [[no_unique_address]] E e;\n+  constexpr W(int) : e(8) {}\n+};\n+\n+constexpr W w = W(42);\n+\n+struct S {\n+  E e;\n+  constexpr S() : e{} { }\n+};\n+\n+constexpr S s;\n+\n+struct S2 {\n+  [[no_unique_address]] E e;\n+  constexpr S2() : e{} { }\n+};\n+\n+constexpr S2 s2;"}, {"sha": "f80d3f2c27c436d98e95a4d5e94269e3a6b76fa3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init15.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct E {\n+  constexpr E() = default;\n+  constexpr E(int) {}\n+};\n+\n+struct W {\n+  [[no_unique_address]] E e;\n+  int i;\n+  constexpr W(int) : e(8), i(11) {}\n+};\n+\n+constexpr W w = W(42);\n+\n+struct S {\n+  E e;\n+  int i;\n+  constexpr S() : e{}, i(11) { }\n+};\n+\n+constexpr S s;\n+\n+struct S2 {\n+  [[no_unique_address]] E e;\n+  int i;\n+  constexpr S2() : e{}, i(11) { }\n+};\n+\n+constexpr S2 s2;"}, {"sha": "541da1c023fd33cbede1fb44fcb085a1d7aef269", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct A\n+{\n+  int i;\n+  constexpr A() : i{} {} \n+};\n+\n+struct B\n+{\n+  A a;\n+};\n+\n+constexpr B b[] = { {} };"}, {"sha": "dd2735289cb669902b6570d78d11b5f58a9de90e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct A\n+{\n+  int i;\n+  constexpr A() {} \n+};\n+\n+struct B\n+{\n+  A a;\n+};\n+\n+// A::i not initialized.\n+constexpr B b[] = { {} }; // { dg-error \"is not a constant expression\" }"}, {"sha": "dd614ede2c69be0806048e3769dcd463d3ada6f1", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init4.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+// This bullet in [dcl.constexpr] is now gone:\n+//  - every non-static data member and base class sub-object shall be initialized\n+\n+struct A {\n+  int i;\n+  constexpr A(int _i) { i = _i; }\n+};\n+\n+struct B {\n+  int i;\n+  constexpr B() { }\n+};\n+\n+// Anonymous members.\n+struct E {\n+  int a;\n+  union {\n+    char b;\n+    __extension__ struct {\n+      double c;\n+      long d;\n+    };  \n+    union {\n+      char e;\n+      void *f; \n+    };  \n+  };  \n+  __extension__ struct {\n+    long long g;\n+    __extension__ struct {\n+      int h;\n+      double i;\n+    };  \n+    union {\n+      char *j; \n+      E *k; \n+    };  \n+  };  \n+\n+  // Completely initialized.\n+  constexpr E(int(&)[1]) : a(), b(), g(), h(), i(), j() {}\n+  constexpr E(int(&)[3]) : a(), e(), g(), h(), i(), k() {}\n+  constexpr E(int(&)[7]) : a(), b(), g(), h(), i(), j() {}\n+  constexpr E(int(&)[8]) : a(), f(), g(), h(), i(), k() {}\n+  constexpr E(int(&)[9]) : a(), c(), d(), g(), h(), i(), k() {}\n+\n+  // Missing d, i, j/k union init.\n+  constexpr E(int(&)[2]) : a(), c(), g(), h() {}\n+\n+  // Missing h, j/k union init.\n+  constexpr E(int(&)[4]) : a(), c(), d(), g(), i() {}\n+\n+  // Missing b/c/d/e/f union init.\n+  constexpr E(int(&)[5]) : a(), g(), h(), i(), k() {}\n+\n+  // Missing a, b/c/d/e/f union, g/h/i/j/k struct init.\n+  constexpr E(int(&)[6]) {}\n+};"}, {"sha": "0d21f26da0ef4ce709018809f65e92256a2ab24b", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S { int i; };\n+\n+constexpr void\n+fn ()\n+{\n+  S s;\n+\n+  []() constexpr {\n+    int i;\n+  }();\n+}\n+\n+constexpr int\n+fn2 ()\n+{\n+  return __extension__ ({ int n; n; }); // { dg-error \"not usable in a constant expression\" }\n+}\n+\n+constexpr int i = fn2 (); // { dg-message \"in .constexpr. expansion of\" }"}, {"sha": "a2994f5272ca73aef90ab8b4f87665dbe80c0f93", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init6.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+/* We used to get the \"constexpr constructor for union S::<unnamed union>\n+   must initialize exactly one non-static data member\" error, but not anymore\n+   in C++20.  */\n+\n+struct S {\n+  union {\n+    int i;\n+    double d;\n+  };\n+  constexpr S() { }\n+};\n+\n+union U {\n+  int a;\n+  constexpr U() { }\n+};\n+\n+struct W {\n+  union {\n+    int a;\n+  };\n+  constexpr W() { }\n+};"}, {"sha": "dd2741efa8c4152f1f4cbb46857d961dcd74dcab", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init7.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,63 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  int a = 1;\n+  constexpr S() = default;\n+};\n+\n+constexpr S s;\n+\n+union U {\n+  int a = 1;\n+  constexpr U() = default;\n+};\n+\n+constexpr U u;\n+\n+struct S2 {\n+  int a;\n+  constexpr S2() = default;\n+};\n+\n+constexpr S2 s2; // { dg-error \"uninitialized .const s2.\" }\n+\n+union U2 {\n+  int a;\n+  constexpr U2() = default;\n+};\n+\n+constexpr U2 u2; // { dg-error \"uninitialized .const u2.\" }\n+\n+struct S3 {\n+  // FIXME if it's anonymous union, we don't give the error below\n+  union {\n+    int a;\n+  } u;\n+  constexpr S3() = default;\n+};\n+\n+constexpr S3 s3; // { dg-error \"uninitialized .const s3.\" }\n+\n+struct S4 {\n+  // FIXME if it's anonymous union, we don't give the error below\n+  union {\n+    int n;\n+  } u;\n+  constexpr S4() = default;\n+};\n+\n+constexpr S4 s4; // { dg-error \"uninitialized .const s4.\" }\n+\n+struct S5 {\n+  union {\n+    int n = 0;\n+  };\n+  // FIXME if it's anonymous union, we don't give the error below\n+  union {\n+    int m;\n+  } u;\n+  constexpr S5() = default;\n+};\n+\n+constexpr S5 s5; // { dg-error \"uninitialized .const s5.|not a constant expression\" }"}, {"sha": "0d5a4a79c904599d34ff8b83e203ab66f7d1b983", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  constexpr S(int) {}\n+};\n+\n+struct W {\n+  constexpr W(int) : s(8), p() {}\n+\n+  S s;\n+  int *p;\n+};\n+\n+constexpr auto a = W(42);"}, {"sha": "b44098cc89b122fefb33d5ea41c884f8da26ce07", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  constexpr S(int) {}\n+};\n+\n+struct W {\n+  constexpr W(int (&)[8]) : W(8) { }\n+  constexpr W(int) : s(8), p() {}\n+\n+  S s;\n+  int *p;\n+};\n+\n+int arr[8];\n+constexpr auto a = W(arr);"}, {"sha": "3b51bf7c9019f5fa52e21b7b2d6b9a167862f9bc", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try5.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -4,13 +4,13 @@\n \n constexpr int foo ()\n try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n-  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" }\n+  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n   static double b = 1.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n   goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n   l:;\n   return 0;\n } catch (...) {\n-  long int c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" }\n+  long int c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n   static float d = 2.0f;// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n   goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n   l2:;\n@@ -19,19 +19,19 @@ try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only av\n \n constexpr int bar ()\n {\n-  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" }\n+  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n   static long double b = 3.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n   goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n   l:;\n   try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n-    short c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" }\n+    short c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n     static float d;\t// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n-\t\t\t// { dg-error \"uninitialized variable 'd' in 'constexpr' function\" \"\" { target *-*-* } .-1 }\n+\t\t\t// { dg-error \"uninitialized variable 'd' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n     goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n     l2:;\n     return 0;\n   } catch (int) {\n-    char e;\t\t// { dg-error \"uninitialized variable 'e' in 'constexpr' function\" }\n+    char e;\t\t// { dg-error \"uninitialized variable 'e' in 'constexpr' function\" \"\" { target c++17_down } }\n     static int f = 5;\t// { dg-error \"'f' declared 'static' in 'constexpr' function\" }\n     goto l3;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n     l3:;"}, {"sha": "c86aead79af8aa723e5e45fdd894cee6c7d0b2d6", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -134,8 +134,8 @@\n \n #ifndef __cpp_constexpr\n #  error \"__cpp_constexpr\"\n-#elif __cpp_constexpr != 201603\n-#  error \"__cpp_constexpr != 201603\"\n+#elif __cpp_constexpr != 201907\n+#  error \"__cpp_constexpr != 201907\"\n #endif\n \n #ifndef __cpp_decltype_auto"}, {"sha": "8ee9b0327a5a6b898abad108c7b8e109353250d1", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-mangle.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -0,0 +1,15 @@\n+// Test lambda mangling\n+// { dg-do compile { target c++2a } }\n+// { dg-require-weak \"\" }\n+// { dg-options \"-fno-inline\" }\n+\n+template<typename T> struct R {\n+  static int x;\n+};\n+// \"int i;\" makes the op() non-constexpr in C++17.  In C++20, it does not.\n+template<typename T> int R<T>::x = []{int i; return 1;}();\n+template int R<int>::x;\n+// Type of lambda in intializer of R<int>::x: N1RIiE1xMUlvE_E\n+// Corresponding operator(): _ZNK1RIiE1xMUlvE_clEv\n+// { dg-final { scan-assembler-not \"_ZNK1RIiE1xMUlvE_clEv\" } }\n+// { dg-final { scan-assembler-not \"weak\\[^\\n\\r\\]*_?_ZNK1RIiE1xMUlvE_clEv\" } }"}, {"sha": "1139f412fda61f039ac44e7ad80739c4f1b2e966", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr44641.C", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -1,5 +1,5 @@\n // Origin: PR 44641\n-// { dg-do compile }\n+// { dg-do compile { target c++17_down } }\n // { dg-options \"-gdwarf-2 -O0 -dA\" }\n \n template <class A> struct MisplacedDbg;\n@@ -40,3 +40,11 @@ struct MisplacedDbg  // { dg-function-on-line {_ZN12MisplacedDbgI3ArgEC[12]Ev} {\n static MisplacedDbg<Arg> static_var1;\n static MisplacedDbg<Arg*> static_var2;\n static MisplacedDbg<Full> static_var3;\n+\n+// This test is skipped in C++20 because we consider the default constructor\n+// MisplacedDbg() constexpr despite the uninitialized member \"int i;\".  So\n+// the calls to\n+//    MisplacedDbg<Arg>::MisplacedDbg()\n+//    MisplacedDbg<Full>::MisplacedDbg()\n+//    MisplacedDbg<Arg*>::MisplacedDbg()\n+// are elided.  (This comment is here not to mess up the line numbers.)"}, {"sha": "97052a117a70674dc2c2d3d76675e8e34f3b203d", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7906797ebec6881d7d90165340f51efcf447d716/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C?ref=7906797ebec6881d7d90165340f51efcf447d716", "patch": "@@ -7,7 +7,7 @@ struct test { const int *addr; };\n const test* setup()\n {\n   static constexpr test atest =\n-    { ({ int inner; (const int*)(0); }) };  // { dg-error \"uninitialized\" }\n+    { ({ int inner; (const int*)(0); }) };  // { dg-error \"uninitialized\" \"\" { target c++17_down } }\n \n   return &atest;\n }"}]}