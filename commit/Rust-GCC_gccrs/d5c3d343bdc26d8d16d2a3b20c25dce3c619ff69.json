{"sha": "d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjM2QzNDNiZGMyNmQ4ZDE2ZDJhM2IyMGMyNWRjZTNjNjE5ZmY2OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-07-01T08:31:58Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-07-01T08:31:58Z"}, "message": "re PR c/58286 (Need option to make incompatible pointer type warnings into compiler errors)\n\n\tPR c/58286\n\t* doc/invoke.texi: Document -Wincompatible-pointer-types.\nc-family/\n\t* c.opt (Wincompatible-pointer-types): New option.\nc/\n\t* c-typeck.c (convert_for_assignment): Pass\n\tOPT_Wincompatible_pointer_types instead of 0 to WARN_FOR_ASSIGNMENT.\ntestsuite/\n\t* gcc.dg/Wincompatible-pointer-types.c: New test.\n\nFrom-SVN: r212192", "tree": {"sha": "877b640f90c7fa56352477c59e8e3116c904da16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/877b640f90c7fa56352477c59e8e3116c904da16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e55637b71514b1f2106980ff1e8951d5d072f9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55637b71514b1f2106980ff1e8951d5d072f9c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55637b71514b1f2106980ff1e8951d5d072f9c4"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "76dc43c715ca09734f0a76d09a2de9cc1cc40adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -1,3 +1,8 @@\n+2014-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58286\n+\t* doc/invoke.texi: Document -Wincompatible-pointer-types.\n+\n 2014-07-01  Martin Liska  <mliska@suse.cz>\n \n \tIPA REF alias refactoring"}, {"sha": "e8d2942482ad062926b1d1972e8349b92e6fd20d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -1,3 +1,8 @@\n+2014-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58286\n+\t* c.opt (Wincompatible-pointer-types): New option.\n+\n 2014-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51400"}, {"sha": "6448b1b9495c526adda10965f575aa6c234bedd1", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -443,6 +443,10 @@ Wignored-qualifiers\n C C++ Var(warn_ignored_qualifiers) Warning EnabledBy(Wextra)\n Warn whenever type qualifiers are ignored.\n \n+Wincompatible-pointer-types\n+C ObjC Var(warn_incompatible_pointer_types) Init(1) Warning\n+Warn when there is a conversion between pointers that have incompatible types\n+\n Winit-self\n C ObjC C++ ObjC++ Var(warn_init_self) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about variables which are initialized to themselves"}, {"sha": "c64c553a5aad79ee3527a907e0ae45a4a1bc9b7d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -1,3 +1,9 @@\n+2014-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58286\n+\t* c-typeck.c (convert_for_assignment): Pass\n+\tOPT_Wincompatible_pointer_types instead of 0 to WARN_FOR_ASSIGNMENT.\n+\n 2014-06-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c (grokdeclarator): Don't instrument VLAs if the function"}, {"sha": "fff26a3993ab3777eb81834549a5064cb79f80d9", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -6189,7 +6189,8 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       else\n \t/* Avoid warning about the volatile ObjC EH puts on decls.  */\n \tif (!objc_ok)\n-\t  WARN_FOR_ASSIGNMENT (location, expr_loc, 0,\n+\t  WARN_FOR_ASSIGNMENT (location, expr_loc,\n+\t\t\t       OPT_Wincompatible_pointer_types,\n \t\t\t       G_(\"passing argument %d of %qE from \"\n \t\t\t\t  \"incompatible pointer type\"),\n \t\t\t       G_(\"assignment from incompatible pointer type\"),"}, {"sha": "409fa1716a86421a6014099b583165aab5f9ccc8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -251,7 +251,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral @gol\n -Wformat-security  -Wformat-signedness  -Wformat-y2k @gol\n -Wframe-larger-than=@var{len} -Wno-free-nonheap-object -Wjump-misses-init @gol\n--Wignored-qualifiers @gol\n+-Wignored-qualifiers  -Wincompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n -Winit-self  -Winline @gol\n -Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n@@ -4199,14 +4199,20 @@ This option is only active when @option{-ftree-vrp} is active\n (default for @option{-O2} and above). It warns about subscripts to arrays\n that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n-@item -Wno-discarded-qualifiers\n+@item -Wno-discarded-qualifiers @r{(C and Objective-C only)}\n @opindex Wno-discarded-qualifiers\n @opindex Wdiscarded-qualifiers\n Do not warn if type qualifiers on pointers are being discarded.\n Typically, the compiler will warn if a @code{const char *} variable is\n passed to a function that takes @code{char *} parameter.  This option\n-can be used to suppress such a warning.  This warning is only supported\n-for C.\n+can be used to suppress such a warning.\n+\n+@item -Wno-incompatible-pointer-types @r{(C and Objective-C only)}\n+@opindex Wno-incompatible-pointer-types\n+@opindex Wincompatible-pointer-types\n+Do not warn when there is a conversion between pointers that have incompatible\n+types.  This warning is for cases not covered by @option{-Wno-pointer-sign},\n+which warns for pointer argument passing or assignment with different signedness\n \n @item -Wno-div-by-zero\n @opindex Wno-div-by-zero"}, {"sha": "6dc8f950bfa05e89d3a02cf0069b9eb5034aa94a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -1,3 +1,8 @@\n+2014-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/58286\n+\t* gcc.dg/Wincompatible-pointer-types.c: New test.\n+\n 2014-06-30  David Holsgrove <david.holsgrove@xilinx.com>\n \n \t* gcc/testsuite/lib/scanasm.exp (dg-function-on-line): Add"}, {"sha": "e765b27609abafbdf1d44ca7b6c0855afd0d2d1e", "filename": "gcc/testsuite/gcc.dg/Wincompatible-pointer-types.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Ftestsuite%2Fgcc.dg%2FWincompatible-pointer-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69/gcc%2Ftestsuite%2Fgcc.dg%2FWincompatible-pointer-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWincompatible-pointer-types.c?ref=d5c3d343bdc26d8d16d2a3b20c25dce3c619ff69", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/58286 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-incompatible-pointer-types\" } */\n+\n+void\n+fn2 (short *s, long *l)\n+{\n+}\n+\n+unsigned *\n+fn1 (void)\n+{\n+  int (*fpi) (int);\n+  int (*fpd) (double) = fpi;\n+  fpi = fpd;\n+  char *di;\n+  float *dp = &di;\n+  di = dp;\n+  fn2 (dp, di);\n+  return dp;\n+}"}]}