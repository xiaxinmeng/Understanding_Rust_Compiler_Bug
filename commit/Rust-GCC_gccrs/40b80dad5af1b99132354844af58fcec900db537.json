{"sha": "40b80dad5af1b99132354844af58fcec900db537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiODBkYWQ1YWYxYjk5MTMyMzU0ODQ0YWY1OGZjZWM5MDBkYjUzNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-11-13T22:27:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-11-13T22:27:44Z"}, "message": "alpha.c (reg_not_elim_operand): New.\n\n        * alpha.c (reg_not_elim_operand): New.\n        * alpha.h (PREDICATE_CODES): Add it.\n        * alpha.md (s48addq, s48subq patterns): Use it as the predicate\n        for the multiplicand.\n\nFrom-SVN: r23650", "tree": {"sha": "3067c3c859d4d927509524132785211f848fb067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3067c3c859d4d927509524132785211f848fb067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b80dad5af1b99132354844af58fcec900db537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b80dad5af1b99132354844af58fcec900db537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b80dad5af1b99132354844af58fcec900db537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b80dad5af1b99132354844af58fcec900db537/comments", "author": null, "committer": null, "parents": [{"sha": "06ca201039ee55c927cc99f9d2057544cb8630af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ca201039ee55c927cc99f9d2057544cb8630af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ca201039ee55c927cc99f9d2057544cb8630af"}], "stats": {"total": 159, "additions": 51, "deletions": 108}, "files": [{"sha": "df3073f4b6e3dfa58d4d2ee6085b3d53e8656c89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b80dad5af1b99132354844af58fcec900db537/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b80dad5af1b99132354844af58fcec900db537/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b80dad5af1b99132354844af58fcec900db537", "patch": "@@ -1,3 +1,10 @@\n+Fri Nov 13 22:19:23 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (reg_not_elim_operand): New.\n+\t* alpha.h (PREDICATE_CODES): Add it.\n+\t* alpha.md (s48addq, s48subq patterns): Use it as the predicate\n+\tfor the multiplicand.\n+\n Fri Nov 13 22:50:37 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* rs6000.md (movsf): Remove explicit secondary-reload-like"}, {"sha": "04a5c402da20246bf1abc9f7064ab9829495e99d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=40b80dad5af1b99132354844af58fcec900db537", "patch": "@@ -833,6 +833,31 @@ any_memory_operand (op, mode)\n \t      && REGNO (SUBREG_REG (op)) >= FIRST_PSEUDO_REGISTER));\n }\n \n+/* Returns 1 if OP is not an eliminable register.\n+\n+   This exists to cure a pathological abort in the s8addq (et al) patterns,\n+\n+\tlong foo () { long t; bar(); return (long) &t * 26107; }\n+\n+   which run afoul of a hack in reload to cure a (presumably) similar\n+   problem with lea-type instructions on other targets.  But there is\n+   one of us and many of them, so work around the problem by selectively\n+   preventing combine from making the optimization.  */\n+\n+int\n+reg_not_elim_operand (op, mode)\n+      register rtx op;\n+      enum machine_mode mode;\n+{\n+  rtx inner = op;\n+  if (GET_CODE (op) == SUBREG)\n+    inner = SUBREG_REG (op);\n+  if (inner == frame_pointer_rtx || inner == arg_pointer_rtx)\n+    return 0;\n+\n+  return register_operand (op, mode);\n+}\n+\f\n /* Return 1 if this function can directly return via $26.  */\n \n int"}, {"sha": "13ce722dc3e495bd66a884e6def09df7f88fdf7d", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=40b80dad5af1b99132354844af58fcec900db537", "patch": "@@ -2293,7 +2293,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"unaligned_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"any_memory_operand\", {MEM}},\t\t\t\t\t\\\n-  {\"hard_fp_register_operand\", {SUBREG, REG}},\n+  {\"hard_fp_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"reg_not_elim_operand\", {SUBREG, REG}},\n \f\n /* Tell collect that the object format is ECOFF.  */\n #define OBJECT_FORMAT_COFF\n@@ -2484,6 +2485,7 @@ extern int divmod_operator ();\n extern int call_operand ();\n extern int reg_or_cint_operand ();\n extern int hard_fp_register_operand ();\n+extern int reg_not_elim_operand ();\n extern void alpha_set_memflags ();\n extern int aligned_memory_operand ();\n extern void get_aligned_mem ();"}, {"sha": "b237eaed16047872e0e89b84780e0bfbb5a70ae6", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 16, "deletions": 107, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b80dad5af1b99132354844af58fcec900db537/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=40b80dad5af1b99132354844af58fcec900db537", "patch": "@@ -484,7 +484,7 @@\n \t(sign_extend:DI\n \t (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t  (match_operand:SI 2 \"const_int_operand\" \"\"))))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+   (clobber (match_operand:SI 3 \"reg_not_elim_operand\" \"\"))]\n   \"! sext_add_operand (operands[2], SImode) && INTVAL (operands[2]) > 0\n    && INTVAL (operands[2]) % 4 == 0\"\n   [(set (match_dup 3) (match_dup 4))\n@@ -554,24 +554,24 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n \t\t\t  (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n \t\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\")))]\n   \"\"\n   \"@\n-   s%2addl %r1,%3,%0\n-   s%2subl %r1,%n3,%0\")\n+   s%2addl %1,%3,%0\n+   s%2subl %1,%n3,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t (plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n \t\t  (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n   \"\"\n   \"@\n-   s%2addl %r1,%3,%0\n-   s%2subl %r1,%n3,%0\")\n+   s%2addl %1,%3,%0\n+   s%2subl %1,%n3,%0\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -581,7 +581,7 @@\n \t\t\t\t\t       (match_operand 3 \"\" \"\")])\n \t\t\t   (match_operand:SI 4 \"const48_operand\" \"\"))\n \t\t  (match_operand:SI 5 \"add_operand\" \"\"))))\n-   (clobber (match_operand:DI 6 \"register_operand\" \"\"))]\n+   (clobber (match_operand:DI 6 \"reg_not_elim_operand\" \"\"))]\n   \"\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0)\n@@ -596,105 +596,14 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t(plus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n \t\t\t  (match_operand:DI 2 \"const48_operand\" \"I,I\"))\n \t\t (match_operand:DI 3 \"sext_add_operand\" \"rI,O\")))]\n   \"\"\n   \"@\n-   s%2addq %r1,%3,%0\n+   s%2addq %1,%3,%0\n    s%2subq %1,%n3,%0\")\n \n-;; These variants of the above insns can occur if the third operand\n-;; is the frame pointer.  This is a kludge, but there doesn't\n-;; seem to be a way around it.  Only recognize them while reloading.\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n-\t(plus:DI (plus:DI (match_operand:DI 1 \"some_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"some_operand\" \"r\"))\n-\t\t (match_operand:DI 3 \"some_operand\" \"rIOKL\")))]\n-  \"reload_in_progress\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:DI 2 \"register_operand\" \"\"))\n-\t\t (match_operand:DI 3 \"add_operand\" \"\")))]\n-  \"reload_completed\"\n-  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n-  \"\")\n-\t\t\t\t\t   \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"some_operand\" \"=&r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ\")\n-\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n-\t\t\t  (match_operand:SI 3 \"some_operand\" \"r\"))\n-\t\t (match_operand:SI 4 \"some_operand\" \"rIOKL\")))]\n-  \"reload_in_progress\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n-\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"\"))\n-\t\t\t  (match_operand:SI 3 \"register_operand\" \"\"))\n-\t\t (match_operand:SI 4 \"add_operand\" \"rIOKL\")))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n-\t(sign_extend:DI\n-\t (plus:SI (plus:SI\n-\t\t   (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ\")\n-\t\t\t    (match_operand:SI 2 \"const48_operand\" \"I\"))\n-\t\t   (match_operand:SI 3 \"some_operand\" \"r\"))\n-\t\t  (match_operand:SI 4 \"some_operand\" \"rIOKL\"))))]\n-  \"reload_in_progress\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extend:DI\n-\t (plus:SI (plus:SI\n-\t\t   (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n-\t\t\t    (match_operand:SI 2 \"const48_operand\" \"\"))\n-\t\t   (match_operand:SI 3 \"register_operand\" \"\"))\n-\t\t  (match_operand:SI 4 \"add_operand\" \"\"))))]\n-  \"reload_completed\"\n-  [(set (match_dup 5)\n-\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 0) (sign_extend:DI (plus:SI (match_dup 5) (match_dup 4))))]\n-  \"\n-{ operands[5] = gen_lowpart (SImode, operands[0]);\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"some_operand\" \"=&r\")\n-\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"some_operand\" \"rJ\")\n-\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n-\t\t\t  (match_operand:DI 3 \"some_operand\" \"r\"))\n-\t\t (match_operand:DI 4 \"some_operand\" \"rIOKL\")))]\n-  \"reload_in_progress\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=\")\n-\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"\"))\n-\t\t\t  (match_operand:DI 3 \"register_operand\" \"\"))\n-\t\t (match_operand:DI 4 \"add_operand\" \"\")))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:DI (mult:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n-  \"\")\n-\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\")))]\n@@ -758,28 +667,28 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t(minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n \t\t  (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"s%2subl %r1,%3,%0\")\n+  \"s%2subl %1,%3,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (minus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t (minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"const48_operand\" \"I\"))\n \t\t   (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n   \"\"\n-  \"s%2subl %r1,%3,%0\")\n+  \"s%2subl %1,%3,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n+\t(minus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n \t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n \t\t  (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"s%2subq %r1,%3,%0\")\n+  \"s%2subq %1,%3,%0\")\n \n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")"}]}