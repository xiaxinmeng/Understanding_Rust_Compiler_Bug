{"sha": "d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwMzBlYTQyYTJhYTI1OTBmMmQ0NDBkNTNlMGY2NTZmM2IwZTVkNw==", "commit": {"author": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2012-04-24T06:59:57Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2012-04-24T06:59:57Z"}, "message": "Use braced string notation where applicable for v850.md\n\nFrom-SVN: r186747", "tree": {"sha": "ad401733a391797da174c861917768e1f88829c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad401733a391797da174c861917768e1f88829c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7/comments", "author": null, "committer": null, "parents": [{"sha": "b8ed5fd023f285e71c85f72bcd6281b4d49b116b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ed5fd023f285e71c85f72bcd6281b4d49b116b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ed5fd023f285e71c85f72bcd6281b4d49b116b"}], "stats": {"total": 908, "additions": 444, "deletions": 464}, "files": [{"sha": "bf3492e79752719220c7bb956d04dd44a367c743", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 444, "deletions": 464, "changes": 908, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "patch": "@@ -62,16 +62,16 @@\n \n (define_attr \"cpu\" \"none,v850,v850e,v850e1,v850e2,v850e2v3\"\n   (cond [(match_test \"TARGET_V850\")\n-       (const_string \"v850\")\n-       (match_test \"TARGET_V850E\")\n-       (const_string \"v850e\")\n-       (match_test \"TARGET_V850E1\")\n-       (const_string \"v850e1\")\n-       (match_test \"TARGET_V850E2\")\n-       (const_string \"v850e2\")\n-       (match_test \"TARGET_V850E2\")\n-       (const_string \"v850e2v3\")]\n-       (const_string \"none\")))\n+\t (const_string \"v850\")\n+\t (match_test \"TARGET_V850E\")\n+\t (const_string \"v850e\")\n+\t (match_test \"TARGET_V850E1\")\n+\t (const_string \"v850e1\")\n+\t (match_test \"TARGET_V850E2\")\n+\t (const_string \"v850e2\")\n+\t (match_test \"TARGET_V850E2\")\n+\t (const_string \"v850e2v3\")]\n+\t (const_string \"none\")))\n \n ;; Condition code settings.\n ;; none - insn does not affect cc\n@@ -180,26 +180,28 @@\n   \"st.w %2,%1[%0]\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n+\n ;; movqi\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n-{\n-  /* One of the ops has to be in a register or 0 */\n-  if (!register_operand (operand0, QImode)\n-      && !reg_or_0_operand (operand1, QImode))\n-    operands[1] = copy_to_mode_reg (QImode, operand1);\n-}\")\n+  {\n+    /* One of the ops has to be in a register or 0 */\n+    if (!register_operand (operand0, QImode)\n+\t&& !reg_or_0_operand (operand1, QImode))\n+      operands[1] = copy_to_mode_reg (QImode, operand1);\n+  })\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,Q,r,m,m\")\n \t(match_operand:QI 1 \"general_operand\" \"Jr,n,Q,Ir,m,r,I\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n-  \"* return output_move_single (operands);\"\n+{\n+  return output_move_single (operands);\n+}\n   [(set_attr \"length\" \"2,4,2,2,4,4,4\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,load,other,load,store,store\")])\n@@ -210,20 +212,21 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* One of the ops has to be in a register or 0 */\n   if (!register_operand (operand0, HImode)\n       && !reg_or_0_operand (operand1, HImode))\n     operands[1] = copy_to_mode_reg (HImode, operand1);\n-}\")\n+})\n \n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,Q,r,m,m\")\n \t(match_operand:HI 1 \"general_operand\" \"Jr,n,Q,Ir,m,r,I\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n-  \"* return output_move_single (operands);\"\n+{\n+  return output_move_single (operands);\n+}\n   [(set_attr \"length\" \"2,4,2,2,4,4,4\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,load,other,load,store,store\")])\n@@ -253,38 +256,37 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n-{\n-  /* One of the ops has to be in a register or 0 */\n-  if (!register_operand (operand0, SImode)\n-      && !reg_or_0_operand (operand1, SImode))\n-    operands[1] = copy_to_mode_reg (SImode, operand1);\n-\n-  /* Some constants, as well as symbolic operands\n-     must be done with HIGH & LO_SUM patterns.  */\n-  if (CONSTANT_P (operands[1])\n-      && GET_CODE (operands[1]) != HIGH\n-      && ! (TARGET_V850E || TARGET_V850E2_ALL)\n-      && !special_symbolref_operand (operands[1], VOIDmode)\n-      && !(GET_CODE (operands[1]) == CONST_INT\n-\t   && (CONST_OK_FOR_J (INTVAL (operands[1]))\n-\t       || CONST_OK_FOR_K (INTVAL (operands[1]))\n-\t       || CONST_OK_FOR_L (INTVAL (operands[1])))))\n-    {\n-      rtx temp;\n-\n-      if (reload_in_progress || reload_completed)\n-        temp = operands[0];\n-      else\n-\ttemp = gen_reg_rtx (SImode);\n-\n-      emit_insn (gen_rtx_SET (SImode, temp,\n-\t\t\t      gen_rtx_HIGH (SImode, operand1)));\n-      emit_insn (gen_rtx_SET (SImode, operand0,\n-\t\t\t      gen_rtx_LO_SUM (SImode, temp, operand1)));\n-      DONE;\n-    }\n-}\")\n+  {\n+    /* One of the ops has to be in a register or 0 */\n+    if (!register_operand (operand0, SImode)\n+\t&& !reg_or_0_operand (operand1, SImode))\n+      operands[1] = copy_to_mode_reg (SImode, operand1);\n+\n+    /* Some constants, as well as symbolic operands\n+       must be done with HIGH & LO_SUM patterns.  */\n+    if (CONSTANT_P (operands[1])\t\n+\t&& GET_CODE (operands[1]) != HIGH\n+\t&& ! (TARGET_V850E || TARGET_V850E2_ALL)\n+\t&& !special_symbolref_operand (operands[1], VOIDmode)\n+\t&& !(GET_CODE (operands[1]) == CONST_INT\n+\t     && (CONST_OK_FOR_J (INTVAL (operands[1]))\n+\t\t || CONST_OK_FOR_K (INTVAL (operands[1]))\n+\t\t || CONST_OK_FOR_L (INTVAL (operands[1])))))\n+      {\n+\trtx temp;\n+\n+\tif (reload_in_progress || reload_completed)\n+          temp = operands[0];\n+\telse\n+\t  temp = gen_reg_rtx (SImode);\n+\n+\temit_insn (gen_rtx_SET (SImode, temp,\n+\t\t\t\tgen_rtx_HIGH (SImode, operand1)));\n+\temit_insn (gen_rtx_SET (SImode, operand0,\n+\t\t\t\tgen_rtx_LO_SUM (SImode, temp, operand1)));\n+\tDONE;\n+      }\n+  })\n \n ;; This is the same as the following pattern, except that it includes\n ;; support for arbitrary 32-bit immediates.\n@@ -299,7 +301,9 @@\n   \"(TARGET_V850E || TARGET_V850E2_ALL)\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n-  \"* return output_move_single (operands);\"\n+{\n+  return output_move_single (operands);\n+}\n   [(set_attr \"length\" \"2,4,4,2,2,4,4,4,4,6\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,other,load,other,load,other,store,store,other\")])\n@@ -309,7 +313,9 @@\n \t(match_operand:SI 1 \"movsi_source_operand\" \"Jr,K,L,Q,Ir,m,R,r,I\"))]\n   \"register_operand (operands[0], SImode)\n    || reg_or_0_operand (operands[1], SImode)\"\n-  \"* return output_move_single (operands);\"\n+{\n+  return output_move_single (operands);\n+}\n   [(set_attr \"length\" \"2,4,4,2,2,4,4,4,4\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,other,load,other,load,store,store,other\")])\n@@ -319,7 +325,9 @@\n \t(match_operand:SF 1 \"general_operand\" \"Jr,K,L,n,Q,Ir,m,r,IG,iF\"))]\n   \"register_operand (operands[0], SFmode)\n    || reg_or_0_operand (operands[1], SFmode)\"\n-  \"* return output_move_single (operands);\"\n+{\n+  return output_move_single (operands);\n+}\n   [(set_attr \"length\" \"2,4,4,8,2,2,4,4,4,8\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,other,other,load,other,load,store,store,other\")])\n@@ -380,12 +388,11 @@\n \t(compare (match_operand:SI 0 \"register_operand\" \"r,r\")\n \t\t (match_operand:SI 1 \"reg_or_int5_operand\" \"r,J\")))]\n    \"\"\n-  \"\n-{\n-  v850_compare_op0 = operands[0];\n-  v850_compare_op1 = operands[1];\n-  DONE;\n-}\")\n+  {\n+    v850_compare_op0 = operands[0];\n+    v850_compare_op1 = operands[1];\n+    DONE;\n+  })\n \n (define_insn \"cmpsi_insn\"\n   [(set (cc0)\n@@ -403,24 +410,22 @@\n \t(compare (match_operand:SF 0 \"register_operand\" \"r\")\n \t\t (match_operand:SF 1 \"register_operand\" \"r\")))]\n   \"TARGET_V850E2V3\"\n-  \"\n-{\n-  v850_compare_op0 = operands[0];\n-  v850_compare_op1 = operands[1];\n-  DONE;\n-}\")\n+  {\n+    v850_compare_op0 = operands[0];\n+    v850_compare_op1 = operands[1];\n+    DONE;\n+  })\n \n (define_expand \"cmpdf\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare (match_operand:DF 0 \"even_reg_operand\" \"r\")\n \t\t (match_operand:DF 1 \"even_reg_operand\" \"r\")))]\n   \"TARGET_V850E2V3\"\n-  \"\n-{\n-  v850_compare_op0 = operands[0];\n-  v850_compare_op1 = operands[1];\n-  DONE;\n-}\")\n+  {\n+    v850_compare_op0 = operands[0];\n+    v850_compare_op1 = operands[1];\n+    DONE;\n+  })\n \n ;; ----------------------------------------------------------------------\n ;; ADD INSTRUCTIONS\n@@ -475,11 +480,13 @@\n \t  (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n \t  (sign_extend:SI (match_operand:HI 2 \"nonmemory_operand\" \"\"))))]\n   \"\"\n-  \"if (GET_CODE (operands[2]) == CONST_INT)\n-     {\n-       emit_insn (gen_mulhisi3_internal2 (operands[0], operands[1], operands[2]));\n-       DONE;\n-     }\")\n+  {\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      {\n+\temit_insn (gen_mulhisi3_internal2 (operands[0], operands[1], operands[2]));\n+\tDONE;\n+      }\n+  })\n \n (define_insn \"*mulhisi3_internal1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -544,12 +551,12 @@\n \t\t(match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_V850E || TARGET_V850E2_ALL\"\n-  {\n-   if (TARGET_V850E2_ALL)\n-     return \"divq %2,%0,%3\";\n+{\n+  if (TARGET_V850E2_ALL)\n+    return \"divq %2,%0,%3\";\n    else\n-     return \"div %2,%0,%3\";\n-  }\n+    return \"div %2,%0,%3\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"div\")])\n@@ -563,12 +570,12 @@\n \t\t (match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_V850E || TARGET_V850E2_ALL\"\n-  {\n-    if (TARGET_V850E2_ALL)\n-      return \"divqu %2,%0,%3\";\n-   else\n-      return \"divu %2,%0,%3\";\n-  }\n+{\n+  if (TARGET_V850E2_ALL)\n+    return \"divqu %2,%0,%3\";\n+  else\n+    return \"divu %2,%0,%3\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"div\")])\n@@ -618,14 +625,13 @@\n \t\t  (match_operand:QI 1 \"not_power_of_two_operand\" \"\")) 0))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n {\n   rtx xoperands[2];\n   xoperands[0] = operands[0];\n   xoperands[1] = GEN_INT (~INTVAL (operands[1]) & 0xff);\n-  output_asm_insn (\\\"clr1 %M1,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\"\n+  output_asm_insn (\"clr1 %M1,%0\", xoperands);\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -637,17 +643,16 @@\n \t\t  (match_operand:HI 1 \"not_power_of_two_operand\" \"\")) 0))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (~INTVAL (operands[1]) & 0xffff);\n \n   rtx xoperands[2];\n   xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t      plus_constant (XEXP (operands[0], 0), log2 / 8));\n   xoperands[1] = GEN_INT (log2 % 8);\n-  output_asm_insn (\\\"clr1 %1,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\"\n+  output_asm_insn (\"clr1 %1,%0\", xoperands);\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -658,17 +663,16 @@\n \t\t(match_operand:SI 1 \"not_power_of_two_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (~INTVAL (operands[1]) & 0xffffffff);\n \n   rtx xoperands[2];\n   xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t      plus_constant (XEXP (operands[0], 0), log2 / 8));\n   xoperands[1] = GEN_INT (log2 % 8);\n-  output_asm_insn (\\\"clr1 %1,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\"\n+  output_asm_insn (\"clr1 %1,%0\", xoperands);\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -706,23 +710,22 @@\n \t(subreg:HI (ior:SI (subreg:SI (match_dup 0) 0)\n \t\t\t   (match_operand 1 \"power_of_two_operand\" \"\")) 0))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (INTVAL (operands[1]));\n \n   if (log2 < 8)\n-    return \\\"set1 %M1,%0\\\";\n+    return \"set1 %M1,%0\";\n   else\n     {\n       rtx xoperands[2];\n       xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t\t  plus_constant (XEXP (operands[0], 0),\n \t\t\t\t\t\t log2 / 8));\n       xoperands[1] = GEN_INT (log2 % 8);\n-      output_asm_insn (\\\"set1 %1,%0\\\", xoperands);\n+      output_asm_insn (\"set1 %1,%0\", xoperands);\n     }\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -733,23 +736,22 @@\n \t\t(match_operand 1 \"power_of_two_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (INTVAL (operands[1]));\n \n   if (log2 < 8)\n-    return \\\"set1 %M1,%0\\\";\n+    return \"set1 %M1,%0\";\n   else\n     {\n       rtx xoperands[2];\n       xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t\t  plus_constant (XEXP (operands[0], 0),\n \t\t\t\t\t\t log2 / 8));\n       xoperands[1] = GEN_INT (log2 % 8);\n-      output_asm_insn (\\\"set1 %1,%0\\\", xoperands);\n+      output_asm_insn (\"set1 %1,%0\", xoperands);\n     }\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -787,23 +789,22 @@\n \t(subreg:HI (xor:SI (subreg:SI (match_dup 0) 0)\n \t\t\t   (match_operand 1 \"power_of_two_operand\" \"\")) 0))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (INTVAL (operands[1]));\n \n   if (log2 < 8)\n-    return \\\"not1 %M1,%0\\\";\n+    return \"not1 %M1,%0\";\n   else\n     {\n       rtx xoperands[2];\n       xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t\t  plus_constant (XEXP (operands[0], 0),\n \t\t\t\t\t\t log2 / 8));\n       xoperands[1] = GEN_INT (log2 % 8);\n-      output_asm_insn (\\\"not1 %1,%0\\\", xoperands);\n+      output_asm_insn (\"not1 %1,%0\", xoperands);\n     }\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -814,23 +815,22 @@\n \t\t(match_operand 1 \"power_of_two_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n {\n   int log2 = exact_log2 (INTVAL (operands[1]));\n \n   if (log2 < 8)\n-    return \\\"not1 %M1,%0\\\";\n+    return \"not1 %M1,%0\";\n   else\n     {\n       rtx xoperands[2];\n       xoperands[0] = gen_rtx_MEM (QImode,\n \t\t\t\t  plus_constant (XEXP (operands[0], 0),\n \t\t\t\t\t\t log2 / 8));\n       xoperands[1] = GEN_INT (log2 % 8);\n-      output_asm_insn (\\\"not1 %1,%0\\\", xoperands);\n+      output_asm_insn (\"not1 %1,%0\", xoperands);\n     }\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n    (set_attr \"type\" \"bit1\")])\n@@ -884,7 +884,6 @@\n         (match_operator:SI 1 \"comparison_operator\"\n \t [(cc0) (const_int 0)]))]\n   \"\"\n-  \"*\n {\n   if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n       && (GET_CODE (operands[1]) == GT\n@@ -893,8 +892,8 @@\n \t  || GET_CODE (operands[1]) == LT))\n     return 0;\n \n-  return \\\"setf %c1,%0\\\";\n-}\"\n+  return \"setf %c1,%0\";\n+}\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n@@ -938,35 +937,34 @@\n \t (match_operand:SI 2 \"reg_or_const_operand\" \"rJ\")\n \t (match_operand:SI 3 \"reg_or_const_operand\" \"rI\")))]\n   \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n-  \"\n-{\n-  if (   (GET_CODE (operands[2]) == CONST_INT\n-       && GET_CODE (operands[3]) == CONST_INT))\n-    {\n-      int o2 = INTVAL (operands[2]);\n-      int o3 = INTVAL (operands[3]);\n-\n-      if (o2 == 1 && o3 == 0)\n-\tFAIL;   /* setf */\n-      if (o3 == 1 && o2 == 0)\n-\tFAIL;   /* setf */\n-      if (o2 == 0 && (o3 < -16 || o3 > 15) && exact_log2 (o3) >= 0)\n-\tFAIL;   /* setf + shift */\n-      if (o3 == 0 && (o2 < -16 || o2 > 15) && exact_log2 (o2) >=0)\n-\tFAIL;   /* setf + shift */\n-      if (o2 != 0)\n-\toperands[2] = copy_to_mode_reg (SImode, operands[2]);\n-      if (o3 !=0 )\n-\toperands[3] = copy_to_mode_reg (SImode, operands[3]);\n-    }\n-  else\n-    {\n-      if (GET_CODE (operands[2]) != REG)\n-\toperands[2] = copy_to_mode_reg (SImode,operands[2]);\n-      if (GET_CODE (operands[3]) != REG)\n-\toperands[3] = copy_to_mode_reg (SImode, operands[3]);\n-    }\n-}\")\n+  {\n+    if ((GET_CODE (operands[2]) == CONST_INT\n+\t&& GET_CODE (operands[3]) == CONST_INT))\n+      {\n+\tint o2 = INTVAL (operands[2]);\n+\tint o3 = INTVAL (operands[3]);\n+\n+\tif (o2 == 1 && o3 == 0)\n+\t  FAIL;   /* setf */\n+\tif (o3 == 1 && o2 == 0)\n+\t  FAIL;   /* setf */\n+\tif (o2 == 0 && (o3 < -16 || o3 > 15) && exact_log2 (o3) >= 0)\n+\t  FAIL;   /* setf + shift */\n+\tif (o3 == 0 && (o2 < -16 || o2 > 15) && exact_log2 (o2) >=0)\n+\t  FAIL;   /* setf + shift */\n+\tif (o2 != 0)\n+\t  operands[2] = copy_to_mode_reg (SImode, operands[2]);\n+\tif (o3 !=0 )\n+\t  operands[3] = copy_to_mode_reg (SImode, operands[3]);\n+      }\n+    else\n+      {\n+\tif (GET_CODE (operands[2]) != REG)\n+\t  operands[2] = copy_to_mode_reg (SImode,operands[2]);\n+\tif (GET_CODE (operands[3]) != REG)\n+\t  operands[3] = copy_to_mode_reg (SImode, operands[3]);\n+      }\n+  })\n \n ;; ??? Clobbering the condition codes is overkill.\n \n@@ -1095,16 +1093,15 @@\n \t\t   (ior:SI (match_op_dup 7 [(match_dup 4) (match_dup 5)])\n \t\t\t   (ashift:SI (match_dup 0) (const_int 1))))\n \t      (clobber (reg:CC CC_REGNUM))])]\n-  \"\n-{\n-  operands[6] = GEN_INT (INTVAL (operands[2]) >> 1);\n-  if (INTVAL (operands[2]) & 0x1)\n-    operands[7] = operands[1];\n-  else\n-    operands[7] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n-\t\t\t\t  GET_MODE (operands[1]),\n-\t\t\t\t  XEXP (operands[1], 0), XEXP (operands[1], 1));\n-}\")\n+  {\n+    operands[6] = GEN_INT (INTVAL (operands[2]) >> 1);\n+    if (INTVAL (operands[2]) & 0x1)\n+      operands[7] = operands[1];\n+    else\n+      operands[7] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n+\t\t\t\t    GET_MODE (operands[1]),\n+\t\t\t\t    XEXP (operands[1], 0), XEXP (operands[1], 1));\n+  })\n \n ;; ---------------------------------------------------------------------\n ;; BYTE SWAP INSTRUCTIONS\n@@ -1115,11 +1112,10 @@\n \t\t\t      (match_operand:HI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n-  \"\n-{\n-  if (INTVAL (operands[2]) != 8)\n-    FAIL;\n-}\")\n+  {\n+    if (INTVAL (operands[2]) != 8)\n+      FAIL;\n+  })\n \n (define_insn \"*rotlhi3_8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1137,11 +1133,10 @@\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n-  \"\n-{\n-  if (INTVAL (operands[2]) != 16)\n-    FAIL;\n-}\")\n+  {\n+    if (INTVAL (operands[2]) != 16)\n+      FAIL;\n+  })\n \n (define_insn \"*rotlsi3_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1166,7 +1161,6 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n       && (GET_CODE (operands[1]) == GT\n@@ -1176,10 +1170,10 @@\n     return 0;\n \n   if (get_attr_length (insn) == 2)\n-    return \\\"b%b1 %l0\\\";\n+    return \"b%b1 %l0\";\n   else\n-    return \\\"b%B1 .+6 ; jr %l0\\\";\n-}\"\n+    return \"b%B1 .+6 ; jr %l0\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n@@ -1194,7 +1188,6 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n       && (GET_CODE (operands[1]) == GT\n@@ -1203,10 +1196,10 @@\n \t  || GET_CODE (operands[1]) == LT))\n     return 0;\n   if (get_attr_length (insn) == 2)\n-    return \\\"b%B1 %l0\\\";\n+    return \"b%B1 %l0\";\n   else\n-    return \\\"b%b1 .+6 ; jr %l0\\\";\n-}\"\n+    return \"b%b1 .+6 ; jr %l0\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n@@ -1220,13 +1213,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_V850E2V3\"\n-  \"*\n {\n   if (get_attr_length (insn) == 2)\n-    return \\\"bz %l0\\\";\n+    return \"bz %l0\";\n   else\n-    return \\\"bnz 1f ; jr %l0 ; 1:\\\";\n-}\"\n+    return \"bnz 1f ; jr %l0 ; 1:\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n@@ -1240,13 +1232,12 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_V850E2V3\"\n-  \"*\n {\n   if (get_attr_length (insn) == 2)\n-    return \\\"bnz %l0\\\";\n+    return \"bnz %l0\";\n   else\n-    return \\\"bz 1f ; jr %l0 ; 1:\\\";\n-}\"\n+    return \"bz 1f ; jr %l0 ; 1:\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t\t   (const_int 256))\n@@ -1260,13 +1251,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_V850E2V3\"\n-  \"*\n {\n   if (get_attr_length (insn) == 2)\n-    return \\\"bnz %l0\\\";\n+    return \"bnz %l0\";\n   else\n-    return \\\"bz 1f ; jr %l0 ; 1:\\\";\n-}\"\n+    return \"bz 1f ; jr %l0 ; 1:\";\n+}\n [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t\t   (const_int 256))\n@@ -1280,13 +1270,12 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_V850E2V3\"\n-  \"*\n {\n   if (get_attr_length (insn) == 2)\n-    return \\\"bz %l0\\\";\n+    return \"bz %l0\";\n   else\n-    return \\\"bnz 1f ; jr %l0 ; 1:\\\";\n-}\"\n+    return \"bnz 1f ; jr %l0 ; 1:\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n@@ -1300,13 +1289,12 @@\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"*\n {\n  if (get_attr_length (insn) == 2)\n-    return \\\"br %0\\\";\n+    return \"br %0\";\n   else\n-    return \\\"jr %0\\\";\n-}\"\n+    return \"jr %0\";\n+}\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n@@ -1349,63 +1337,61 @@\n    (match_operand:SI 2 \"register_operand\" \"\")\n    (match_operand 3 \"\" \"\") (match_operand 4 \"\" \"\")]\n   \"\"\n-  \"\n-{\n-  rtx reg = gen_reg_rtx (SImode);\n-  rtx tableaddress = gen_reg_rtx (SImode);\n-  rtx test;\n-  rtx mem;\n-\n-  /* Subtract the lower bound from the index.  */\n-  emit_insn (gen_subsi3 (reg, operands[0], operands[1]));\n-\n-  /* Compare the result against the number of table entries;\n-     branch to the default label if out of range of the table.  */\n-  test = gen_rtx_fmt_ee (GTU, VOIDmode, reg, operands[2]);\n-  emit_jump_insn (gen_cbranchsi4 (test, reg, operands[2], operands[4]));\n-\n-  /* Shift index for the table array access.  */\n-  emit_insn (gen_ashlsi3 (reg, reg, GEN_INT (TARGET_BIG_SWITCH ? 2 : 1)));\n-  /* Load the table address into a pseudo.  */\n-  emit_insn (gen_movsi (tableaddress,\n-\t\t\tgen_rtx_LABEL_REF (Pmode, operands[3])));\n-  /* Add the table address to the index.  */\n-  emit_insn (gen_addsi3 (reg, reg, tableaddress));\n-  /* Load the table entry.  */\n-  mem = gen_const_mem (CASE_VECTOR_MODE, reg);\n-  if (! TARGET_BIG_SWITCH)\n-    {\n-      rtx reg2 = gen_reg_rtx (HImode);\n-      emit_insn (gen_movhi (reg2, mem));\n-      emit_insn (gen_extendhisi2 (reg, reg2));\n-    }\n-  else\n-    emit_insn (gen_movsi (reg, mem));\n-  /* Add the table address.  */\n-  emit_insn (gen_addsi3 (reg, reg, tableaddress));\n-  /* Branch to the switch label.  */\n-  emit_jump_insn (gen_tablejump (reg, operands[3]));\n-  DONE;\n-}\")\n+  {\n+    rtx reg = gen_reg_rtx (SImode);\n+    rtx tableaddress = gen_reg_rtx (SImode);\n+    rtx test;\n+    rtx mem;\n+\n+    /* Subtract the lower bound from the index.  */\n+    emit_insn (gen_subsi3 (reg, operands[0], operands[1]));\n+\n+    /* Compare the result against the number of table entries;\n+       branch to the default label if out of range of the table.  */\n+    test = gen_rtx_fmt_ee (GTU, VOIDmode, reg, operands[2]);\n+    emit_jump_insn (gen_cbranchsi4 (test, reg, operands[2], operands[4]));\n+\n+    /* Shift index for the table array access.  */\n+    emit_insn (gen_ashlsi3 (reg, reg, GEN_INT (TARGET_BIG_SWITCH ? 2 : 1)));\n+    /* Load the table address into a pseudo.  */\n+    emit_insn (gen_movsi (tableaddress,\n+\t\t\t  gen_rtx_LABEL_REF (Pmode, operands[3])));\n+    /* Add the table address to the index.  */\n+    emit_insn (gen_addsi3 (reg, reg, tableaddress));\n+    /* Load the table entry.  */\n+    mem = gen_const_mem (CASE_VECTOR_MODE, reg);\n+    if (! TARGET_BIG_SWITCH)\n+      {\n+\trtx reg2 = gen_reg_rtx (HImode);\n+\temit_insn (gen_movhi (reg2, mem));\n+\temit_insn (gen_extendhisi2 (reg, reg2));\n+      }\n+    else\n+      emit_insn (gen_movsi (reg, mem));\n+    /* Add the table address.  */\n+    emit_insn (gen_addsi3 (reg, reg, tableaddress));\n+    /* Branch to the switch label.  */\n+    emit_jump_insn (gen_tablejump (reg, operands[3]));\n+    DONE;\n+  })\n \n ;; Call subroutine with no return value.\n \n (define_expand \"call\"\n   [(call (match_operand:QI 0 \"general_operand\" \"\")\n \t (match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n-{\n-  if (! call_address_operand (XEXP (operands[0], 0), QImode)\n-      || TARGET_LONG_CALLS)\n-    XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n-  if (TARGET_LONG_CALLS)\n-    emit_call_insn (gen_call_internal_long (XEXP (operands[0], 0), operands[1]));\n-  else\n-    emit_call_insn (gen_call_internal_short (XEXP (operands[0], 0), operands[1]));\n+  {\n+    if (! call_address_operand (XEXP (operands[0], 0), QImode)\n+\t|| TARGET_LONG_CALLS)\n+      XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n+    if (TARGET_LONG_CALLS)\n+      emit_call_insn (gen_call_internal_long (XEXP (operands[0], 0), operands[1]));\n+    else\n+      emit_call_insn (gen_call_internal_short (XEXP (operands[0], 0), operands[1]));\n   \n-  DONE;\n-}\")\n+    DONE;\n+  })\n \n (define_insn \"call_internal_short\"\n   [(call (mem:QI (match_operand:SI 0 \"call_address_operand\" \"S,r\"))\n@@ -1424,18 +1410,17 @@\n \t (match_operand:SI 1 \"general_operand\" \"g,g\"))\n    (clobber (reg:SI 31))]\n   \"TARGET_LONG_CALLS\"\n-  \"*\n-  {\n+{\n   if (which_alternative == 0)\n     {\n       if (GET_CODE (operands[0]) == REG)\n-        return \\\"jarl %0,r31\\\";\n+        return \"jarl %0,r31\";\n       else\n-        return \\\"movhi hi(%0), r0, r11 ; movea lo(%0), r11, r11 ; jarl .+4,r31 ; add 4, r31 ; jmp r11\\\";\n+        return \"movhi hi(%0), r0, r11 ; movea lo(%0), r11, r11 ; jarl .+4,r31 ; add 4, r31 ; jmp r11\";\n     }\n   else\n-    return \\\"jarl .+4,r31 ; add 4,r31 ; jmp %0\\\";\n-  }\"\n+    return \"jarl .+4,r31 ; add 4,r31 ; jmp %0\";\n+}\n   [(set_attr \"length\" \"16,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n )\n@@ -1448,21 +1433,20 @@\n \t(call (match_operand:QI 1 \"general_operand\" \"\")\n \t      (match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n-{\n-  if (! call_address_operand (XEXP (operands[1], 0), QImode)\n-      || TARGET_LONG_CALLS)\n-    XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n-  if (TARGET_LONG_CALLS)\n-    emit_call_insn (gen_call_value_internal_long (operands[0],\n-\t \t\t\t\t          XEXP (operands[1], 0),\n-\t\t\t\t\t          operands[2]));\n-  else\n-    emit_call_insn (gen_call_value_internal_short (operands[0],\n-\t \t\t\t\t           XEXP (operands[1], 0),\n-\t\t\t\t\t           operands[2]));\n-  DONE;\n-}\")\n+  {\n+    if (! call_address_operand (XEXP (operands[1], 0), QImode)\n+\t|| TARGET_LONG_CALLS)\n+      XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n+    if (TARGET_LONG_CALLS)\n+      emit_call_insn (gen_call_value_internal_long (operands[0],\n+\t \t\t\t\t\t    XEXP (operands[1], 0),\n+\t\t\t\t\t\t    operands[2]));\n+    else\n+      emit_call_insn (gen_call_value_internal_short (operands[0],\n+\t \t\t\t\t\t     XEXP (operands[1], 0),\n+\t\t\t\t\t\t     operands[2]));\n+    DONE;\n+  })\n \n (define_insn \"call_value_internal_short\"\n   [(set (match_operand 0 \"\" \"=r,r\")\n@@ -1483,19 +1467,18 @@\n \t      (match_operand:SI 2 \"general_operand\" \"g,g\")))\n    (clobber (reg:SI 31))]\n   \"TARGET_LONG_CALLS\"\n-  \"*\n-  {\n+{\n   if (which_alternative == 0)\n     {\n       if (GET_CODE (operands[1]) == REG)\n-        return \\\"jarl %1, r31\\\";\n+        return \"jarl %1, r31\";\n       else\n       /* Reload can generate this pattern....  */\n-        return \\\"movhi hi(%1), r0, r11 ; movea lo(%1), r11, r11 ; jarl .+4, r31 ; add 4, r31 ; jmp r11\\\";\n+        return \"movhi hi(%1), r0, r11 ; movea lo(%1), r11, r11 ; jarl .+4, r31 ; add 4, r31 ; jmp r11\";\n     }\n   else\n-    return \\\"jarl .+4, r31 ; add 4, r31 ; jmp %1\\\";\n-  }\"\n+    return \"jarl .+4, r31 ; add 4, r31 ; jmp %1\";\n+}\n   [(set_attr \"length\" \"16,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n )\n@@ -1544,8 +1527,7 @@\n   {\n     if (! (TARGET_V850E || TARGET_V850E2_ALL))\n       operands[1] = force_reg (HImode, operands[1]);\n-  }\n-)\n+  })\n \n (define_insn \"*zero_extendqisi2_v850e\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n@@ -1564,7 +1546,7 @@\n (define_insn \"*zero_extendqisi2_v850\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI\n-\t (match_operand:QI 1 \"register_operand\" \"r\")))\n+\t  (match_operand:QI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REGNUM))] ;; A lie, but we have to match the expander\n   \"\"\n   \"andi 255,%1,%0\"\n@@ -1580,8 +1562,7 @@\n   {\n     if (! (TARGET_V850E || TARGET_V850E2_ALL))\n       operands[1] = force_reg (QImode, operands[1]);\n-  }\n-)\n+  })\n \n ;;- sign extension instructions\n \n@@ -1612,11 +1593,10 @@\n \t\t\t\t(const_int 16)))\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n-  \"\n-{\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode);\n-}\")\n+  {\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[2] = gen_reg_rtx (SImode);\n+  })\n \n ;; ??? The extendqisi2 pattern should not emit shifts for v850e?\n \n@@ -1645,11 +1625,10 @@\n \t\t\t      (const_int 24)))\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n-  \"\n-{\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode);\n-}\")\n+  {\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[2] = gen_reg_rtx (SImode);\n+  })\n \f\n ;; ----------------------------------------------------------------------\n ;; SHIFTS\n@@ -1746,16 +1725,18 @@\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n-  \"expand_prologue (); DONE;\")\n+  {\n+    expand_prologue ();\n+    DONE;\n+  })\n \n (define_expand \"epilogue\"\n   [(return)]\n   \"\"\n-  \"\n-{\n-  expand_epilogue ();\n-  DONE;\n-}\")\n+  {\n+    expand_epilogue ();\n+    DONE;\n+  })\n \n (define_insn \"return_simple\"\n   [(return)]\n@@ -2344,8 +2325,9 @@\n \t\t\t  (match_operand:SI 2 \"immediate_operand\" \"i\")))\n \t (match_operand:SI 3 \"register_is_ok_for_epilogue\" \"r\"))])]\n  \"TARGET_PROLOG_FUNCTION && (TARGET_V850E || TARGET_V850E2_ALL)\"\n- \"* return construct_prepare_instruction (operands[0]);\n- \"\n+{\n+  return construct_prepare_instruction (operands[0]);\n+}\n  [(set_attr \"length\" \"4\")\n   (set_attr \"cc\"     \"clobber\")])\n \n@@ -2357,8 +2339,9 @@\n \t\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))\n \t (match_operand:SI 3 \"register_is_ok_for_epilogue\" \"r\"))])]\n  \"TARGET_PROLOG_FUNCTION\"\n- \"* return construct_save_jarl (operands[0]);\n- \"\n+{\n+  return construct_save_jarl (operands[0]);\n+}\n  [(set (attr \"length\") (if_then_else (eq_attr \"long_calls\" \"yes\")\n \t\t\t\t     (const_string \"16\")\n \t\t\t\t     (const_string \"4\")))\n@@ -2376,8 +2359,9 @@\n \t (mem:SI (plus:SI (reg:SI 3)\n \t\t\t  (match_operand:SI 3 \"immediate_operand\" \"i\"))))])]\n  \"TARGET_PROLOG_FUNCTION && (TARGET_V850E || TARGET_V850E2_ALL)\"\n- \"* return construct_dispose_instruction (operands[0]);\n- \"\n+{\n+  return construct_dispose_instruction (operands[0]);\n+}\n  [(set_attr \"length\" \"4\")\n   (set_attr \"cc\"     \"clobber\")])\n \n@@ -2394,8 +2378,9 @@\n \t (mem:SI (plus:SI (reg:SI 3)\n \t\t\t  (match_operand:SI 3 \"immediate_operand\" \"i\"))))])]\n  \"TARGET_PROLOG_FUNCTION\"\n- \"* return construct_restore_jr (operands[0]);\n- \"\n+{\n+  return construct_restore_jr (operands[0]);\n+}\n  [(set (attr \"length\") (if_then_else (eq_attr \"long_calls\" \"yes\")\n \t\t\t\t     (const_string \"12\")\n \t\t\t\t     (const_string \"4\")))\n@@ -2409,19 +2394,18 @@\n     ;; without saving its previous value.  So if the interrupt handler\n     ;; or its caller could possibly execute the CALLT insn, save_interrupt \n     ;; MUST NOT be called via CALLT.\n-    \"*\n {\n-  output_asm_insn (\\\"addi -28,   sp, sp\\\", operands);\n-  output_asm_insn (\\\"st.w r1,    24[sp]\\\", operands);\n-  output_asm_insn (\\\"st.w r10,   12[sp]\\\", operands);\n-  output_asm_insn (\\\"st.w r11,   16[sp]\\\", operands);\n-  output_asm_insn (\\\"stsr ctpc,  r10\\\",    operands);\n-  output_asm_insn (\\\"st.w r10,   20[sp]\\\", operands);\n-  output_asm_insn (\\\"stsr ctpsw, r10\\\",    operands);\n-  output_asm_insn (\\\"st.w r10,   24[sp]\\\", operands);\n-  output_asm_insn (\\\"callt ctoff(__callt_save_interrupt)\\\", operands);\n-  return \\\"\\\";\n-}\"\n+  output_asm_insn (\"addi -28,   sp, sp\", operands);\n+  output_asm_insn (\"st.w r1,    24[sp]\", operands);\n+  output_asm_insn (\"st.w r10,   12[sp]\", operands);\n+  output_asm_insn (\"st.w r11,   16[sp]\", operands);\n+  output_asm_insn (\"stsr ctpc,  r10\",    operands);\n+  output_asm_insn (\"st.w r10,   20[sp]\", operands);\n+  output_asm_insn (\"stsr ctpsw, r10\",    operands);\n+  output_asm_insn (\"st.w r10,   24[sp]\", operands);\n+  output_asm_insn (\"callt ctoff(__callt_save_interrupt)\", operands);\n+  return \"\";\n+}\n    [(set_attr \"length\" \"26\")\n     (set_attr \"cc\" \"clobber\")])\n \n@@ -2440,25 +2424,24 @@\n    (set (mem:SI (plus:SI (reg:SI 3) (const_int  -8))) (reg:SI 10))\n    (set (mem:SI (plus:SI (reg:SI 3) (const_int  -4))) (reg:SI 11))]\n   \"\"\n-  \"*\n {\n   if (TARGET_PROLOG_FUNCTION && !TARGET_LONG_CALLS)\n-    return \\\"addi -20,sp,sp \\; st.w r11,16[sp] \\; st.w r10,12[sp] \\; jarl __save_interrupt,r10\\\";\n+    return \"addi -20,sp,sp \\; st.w r11,16[sp] \\; st.w r10,12[sp] \\; jarl __save_interrupt,r10\";\n   else\n     {\n-      output_asm_insn (\\\"addi  -20, sp, sp\\\", operands);\n-      output_asm_insn (\\\"st.w  r11, 16[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w  r10, 12[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w  ep, 0[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w  gp, 4[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w  r1, 8[sp]\\\", operands);\n-      output_asm_insn (\\\"movhi hi(__ep), r0, ep\\\", operands);\n-      output_asm_insn (\\\"movea lo(__ep), ep, ep\\\", operands);\n-      output_asm_insn (\\\"movhi hi(__gp), r0, gp\\\", operands);\n-      output_asm_insn (\\\"movea lo(__gp), gp, gp\\\", operands);\n-      return \\\"\\\";\n+      output_asm_insn (\"addi  -20, sp, sp\", operands);\n+      output_asm_insn (\"st.w  r11, 16[sp]\", operands);\n+      output_asm_insn (\"st.w  r10, 12[sp]\", operands);\n+      output_asm_insn (\"st.w  ep, 0[sp]\", operands);\n+      output_asm_insn (\"st.w  gp, 4[sp]\", operands);\n+      output_asm_insn (\"st.w  r1, 8[sp]\", operands);\n+      output_asm_insn (\"movhi hi(__ep), r0, ep\", operands);\n+      output_asm_insn (\"movea lo(__ep), ep, ep\", operands);\n+      output_asm_insn (\"movhi hi(__gp), r0, gp\", operands);\n+      output_asm_insn (\"movea lo(__gp), gp, gp\", operands);\n+      return \"\";\n     }\n-}\"\n+}\n   [(set (attr \"length\")\n         (if_then_else (match_test \"TARGET_LONG_CALLS\")\n                        (const_int 10)\n@@ -2475,22 +2458,21 @@\n    (set (reg:SI 4)  (mem:SI (plus:SI (reg:SI 3) (const_int  4))))\n    (set (reg:SI 30) (mem:SI (reg:SI 3)))]\n   \"\"\n-  \"*\n {\n   if (TARGET_PROLOG_FUNCTION && !TARGET_LONG_CALLS)\n-    return \\\"jr __return_interrupt\\\";\n+    return \"jr __return_interrupt\";\n   else \n     {\n-      output_asm_insn (\\\"ld.w 0[sp],  ep\\\",   operands);\n-      output_asm_insn (\\\"ld.w 4[sp],  gp\\\",   operands);\n-      output_asm_insn (\\\"ld.w 8[sp],  r1\\\",   operands);\n-      output_asm_insn (\\\"ld.w 12[sp], r10\\\", operands);\n-      output_asm_insn (\\\"ld.w 16[sp], r11\\\", operands);\n-      output_asm_insn (\\\"addi 20, sp, sp\\\",   operands);\n-      output_asm_insn (\\\"reti\\\",            operands);\n-      return \\\"\\\";\n+      output_asm_insn (\"ld.w 0[sp],  ep\",   operands);\n+      output_asm_insn (\"ld.w 4[sp],  gp\",   operands);\n+      output_asm_insn (\"ld.w 8[sp],  r1\",   operands);\n+      output_asm_insn (\"ld.w 12[sp], r10\", operands);\n+      output_asm_insn (\"ld.w 16[sp], r11\", operands);\n+      output_asm_insn (\"addi 20, sp, sp\",   operands);\n+      output_asm_insn (\"reti\",            operands);\n+      return \"\";\n     }\n-}\"\n+}\n   [(set (attr \"length\")\n         (if_then_else (match_test \"TARGET_LONG_CALLS\")\n                        (const_int 4)\n@@ -2514,77 +2496,76 @@\n (define_insn \"save_all_interrupt\"\n   [(unspec_volatile [(const_int 0)] 0)]\n   \"\"\n-  \"*\n {\n   if (TARGET_PROLOG_FUNCTION && !TARGET_LONG_CALLS)\n-    return \\\"jarl __save_all_interrupt,r10\\\";\n+    return \"jarl __save_all_interrupt,r10\";\n \n-  output_asm_insn (\\\"addi -120, sp, sp\\\", operands);\n+  output_asm_insn (\"addi -120, sp, sp\", operands);\n \n   if (TARGET_EP)\n     {\n-      output_asm_insn (\\\"mov ep, r1\\\", operands);\n-      output_asm_insn (\\\"mov sp, ep\\\", operands);\n-      output_asm_insn (\\\"sst.w r31, 116[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r2,  112[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w gp,  108[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r6,  104[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r7,  100[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r8,   96[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r9,   92[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r11,  88[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r12,  84[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r13,  80[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r14,  76[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r15,  72[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r16,  68[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r17,  64[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r18,  60[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r19,  56[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r20,  52[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r21,  48[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r22,  44[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r23,  40[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r24,  36[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r25,  32[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r26,  28[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r27,  24[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r28,  20[ep]\\\", operands);\n-      output_asm_insn (\\\"sst.w r29,  16[ep]\\\", operands);\n-      output_asm_insn (\\\"mov   r1,   ep\\\", operands);\n+      output_asm_insn (\"mov ep, r1\", operands);\n+      output_asm_insn (\"mov sp, ep\", operands);\n+      output_asm_insn (\"sst.w r31, 116[ep]\", operands);\n+      output_asm_insn (\"sst.w r2,  112[ep]\", operands);\n+      output_asm_insn (\"sst.w gp,  108[ep]\", operands);\n+      output_asm_insn (\"sst.w r6,  104[ep]\", operands);\n+      output_asm_insn (\"sst.w r7,  100[ep]\", operands);\n+      output_asm_insn (\"sst.w r8,   96[ep]\", operands);\n+      output_asm_insn (\"sst.w r9,   92[ep]\", operands);\n+      output_asm_insn (\"sst.w r11,  88[ep]\", operands);\n+      output_asm_insn (\"sst.w r12,  84[ep]\", operands);\n+      output_asm_insn (\"sst.w r13,  80[ep]\", operands);\n+      output_asm_insn (\"sst.w r14,  76[ep]\", operands);\n+      output_asm_insn (\"sst.w r15,  72[ep]\", operands);\n+      output_asm_insn (\"sst.w r16,  68[ep]\", operands);\n+      output_asm_insn (\"sst.w r17,  64[ep]\", operands);\n+      output_asm_insn (\"sst.w r18,  60[ep]\", operands);\n+      output_asm_insn (\"sst.w r19,  56[ep]\", operands);\n+      output_asm_insn (\"sst.w r20,  52[ep]\", operands);\n+      output_asm_insn (\"sst.w r21,  48[ep]\", operands);\n+      output_asm_insn (\"sst.w r22,  44[ep]\", operands);\n+      output_asm_insn (\"sst.w r23,  40[ep]\", operands);\n+      output_asm_insn (\"sst.w r24,  36[ep]\", operands);\n+      output_asm_insn (\"sst.w r25,  32[ep]\", operands);\n+      output_asm_insn (\"sst.w r26,  28[ep]\", operands);\n+      output_asm_insn (\"sst.w r27,  24[ep]\", operands);\n+      output_asm_insn (\"sst.w r28,  20[ep]\", operands);\n+      output_asm_insn (\"sst.w r29,  16[ep]\", operands);\n+      output_asm_insn (\"mov   r1,   ep\", operands);\n     }\n   else\n     {\n-      output_asm_insn (\\\"st.w r31, 116[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r2,  112[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w gp,  108[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r6,  104[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r7,  100[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r8,   96[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r9,   92[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r11,  88[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r12,  84[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r13,  80[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r14,  76[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r15,  72[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r16,  68[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r17,  64[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r18,  60[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r19,  56[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r20,  52[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r21,  48[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r22,  44[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r23,  40[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r24,  36[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r25,  32[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r26,  28[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r27,  24[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r28,  20[sp]\\\", operands);\n-      output_asm_insn (\\\"st.w r29,  16[sp]\\\", operands);\n+      output_asm_insn (\"st.w r31, 116[sp]\", operands);\n+      output_asm_insn (\"st.w r2,  112[sp]\", operands);\n+      output_asm_insn (\"st.w gp,  108[sp]\", operands);\n+      output_asm_insn (\"st.w r6,  104[sp]\", operands);\n+      output_asm_insn (\"st.w r7,  100[sp]\", operands);\n+      output_asm_insn (\"st.w r8,   96[sp]\", operands);\n+      output_asm_insn (\"st.w r9,   92[sp]\", operands);\n+      output_asm_insn (\"st.w r11,  88[sp]\", operands);\n+      output_asm_insn (\"st.w r12,  84[sp]\", operands);\n+      output_asm_insn (\"st.w r13,  80[sp]\", operands);\n+      output_asm_insn (\"st.w r14,  76[sp]\", operands);\n+      output_asm_insn (\"st.w r15,  72[sp]\", operands);\n+      output_asm_insn (\"st.w r16,  68[sp]\", operands);\n+      output_asm_insn (\"st.w r17,  64[sp]\", operands);\n+      output_asm_insn (\"st.w r18,  60[sp]\", operands);\n+      output_asm_insn (\"st.w r19,  56[sp]\", operands);\n+      output_asm_insn (\"st.w r20,  52[sp]\", operands);\n+      output_asm_insn (\"st.w r21,  48[sp]\", operands);\n+      output_asm_insn (\"st.w r22,  44[sp]\", operands);\n+      output_asm_insn (\"st.w r23,  40[sp]\", operands);\n+      output_asm_insn (\"st.w r24,  36[sp]\", operands);\n+      output_asm_insn (\"st.w r25,  32[sp]\", operands);\n+      output_asm_insn (\"st.w r26,  28[sp]\", operands);\n+      output_asm_insn (\"st.w r27,  24[sp]\", operands);\n+      output_asm_insn (\"st.w r28,  20[sp]\", operands);\n+      output_asm_insn (\"st.w r29,  16[sp]\", operands);\n     }\n     \n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set (attr \"length\")\n         (if_then_else (match_test \"TARGET_LONG_CALLS\")\n                        (const_int 4)\n@@ -2615,75 +2596,74 @@\n (define_insn \"restore_all_interrupt\"\n   [(unspec_volatile [(const_int 0)] 1)]\n   \"\"\n-  \"*\n {\n   if (TARGET_PROLOG_FUNCTION && !TARGET_LONG_CALLS)\n-    return \\\"jarl __restore_all_interrupt,r10\\\";\n+    return \"jarl __restore_all_interrupt,r10\";\n \n   if (TARGET_EP)\n     {\n-      output_asm_insn (\\\"mov   ep,      r1\\\", operands);\n-      output_asm_insn (\\\"mov   sp,      ep\\\", operands);\n-      output_asm_insn (\\\"sld.w 116[ep], r31\\\", operands);\n-      output_asm_insn (\\\"sld.w 112[ep], r2\\\", operands);\n-      output_asm_insn (\\\"sld.w 108[ep], gp\\\", operands);\n-      output_asm_insn (\\\"sld.w 104[ep], r6\\\", operands);\n-      output_asm_insn (\\\"sld.w 100[ep], r7\\\", operands);\n-      output_asm_insn (\\\"sld.w 96[ep],  r8\\\", operands);\n-      output_asm_insn (\\\"sld.w 92[ep],  r9\\\", operands);\n-      output_asm_insn (\\\"sld.w 88[ep],  r11\\\", operands);\n-      output_asm_insn (\\\"sld.w 84[ep],  r12\\\", operands);\n-      output_asm_insn (\\\"sld.w 80[ep],  r13\\\", operands);\n-      output_asm_insn (\\\"sld.w 76[ep],  r14\\\", operands);\n-      output_asm_insn (\\\"sld.w 72[ep],  r15\\\", operands);\n-      output_asm_insn (\\\"sld.w 68[ep],  r16\\\", operands);\n-      output_asm_insn (\\\"sld.w 64[ep],  r17\\\", operands);\n-      output_asm_insn (\\\"sld.w 60[ep],  r18\\\", operands);\n-      output_asm_insn (\\\"sld.w 56[ep],  r19\\\", operands);\n-      output_asm_insn (\\\"sld.w 52[ep],  r20\\\", operands);\n-      output_asm_insn (\\\"sld.w 48[ep],  r21\\\", operands);\n-      output_asm_insn (\\\"sld.w 44[ep],  r22\\\", operands);\n-      output_asm_insn (\\\"sld.w 40[ep],  r23\\\", operands);\n-      output_asm_insn (\\\"sld.w 36[ep],  r24\\\", operands);\n-      output_asm_insn (\\\"sld.w 32[ep],  r25\\\", operands);\n-      output_asm_insn (\\\"sld.w 28[ep],  r26\\\", operands);\n-      output_asm_insn (\\\"sld.w 24[ep],  r27\\\", operands);\n-      output_asm_insn (\\\"sld.w 20[ep],  r28\\\", operands);\n-      output_asm_insn (\\\"sld.w 16[ep],  r29\\\", operands);\n-      output_asm_insn (\\\"mov   r1,      ep\\\", operands);\n+      output_asm_insn (\"mov   ep,      r1\", operands);\n+      output_asm_insn (\"mov   sp,      ep\", operands);\n+      output_asm_insn (\"sld.w 116[ep], r31\", operands);\n+      output_asm_insn (\"sld.w 112[ep], r2\", operands);\n+      output_asm_insn (\"sld.w 108[ep], gp\", operands);\n+      output_asm_insn (\"sld.w 104[ep], r6\", operands);\n+      output_asm_insn (\"sld.w 100[ep], r7\", operands);\n+      output_asm_insn (\"sld.w 96[ep],  r8\", operands);\n+      output_asm_insn (\"sld.w 92[ep],  r9\", operands);\n+      output_asm_insn (\"sld.w 88[ep],  r11\", operands);\n+      output_asm_insn (\"sld.w 84[ep],  r12\", operands);\n+      output_asm_insn (\"sld.w 80[ep],  r13\", operands);\n+      output_asm_insn (\"sld.w 76[ep],  r14\", operands);\n+      output_asm_insn (\"sld.w 72[ep],  r15\", operands);\n+      output_asm_insn (\"sld.w 68[ep],  r16\", operands);\n+      output_asm_insn (\"sld.w 64[ep],  r17\", operands);\n+      output_asm_insn (\"sld.w 60[ep],  r18\", operands);\n+      output_asm_insn (\"sld.w 56[ep],  r19\", operands);\n+      output_asm_insn (\"sld.w 52[ep],  r20\", operands);\n+      output_asm_insn (\"sld.w 48[ep],  r21\", operands);\n+      output_asm_insn (\"sld.w 44[ep],  r22\", operands);\n+      output_asm_insn (\"sld.w 40[ep],  r23\", operands);\n+      output_asm_insn (\"sld.w 36[ep],  r24\", operands);\n+      output_asm_insn (\"sld.w 32[ep],  r25\", operands);\n+      output_asm_insn (\"sld.w 28[ep],  r26\", operands);\n+      output_asm_insn (\"sld.w 24[ep],  r27\", operands);\n+      output_asm_insn (\"sld.w 20[ep],  r28\", operands);\n+      output_asm_insn (\"sld.w 16[ep],  r29\", operands);\n+      output_asm_insn (\"mov   r1,      ep\", operands);\n     }\n   else\n     {\n-      output_asm_insn (\\\"ld.w 116[sp], r31\\\", operands);\n-      output_asm_insn (\\\"ld.w 112[sp], r2\\\", operands);\n-      output_asm_insn (\\\"ld.w 108[sp], gp\\\", operands);\n-      output_asm_insn (\\\"ld.w 104[sp], r6\\\", operands);\n-      output_asm_insn (\\\"ld.w 100[sp], r7\\\", operands);\n-      output_asm_insn (\\\"ld.w 96[sp],  r8\\\", operands);\n-      output_asm_insn (\\\"ld.w 92[sp],  r9\\\", operands);\n-      output_asm_insn (\\\"ld.w 88[sp],  r11\\\", operands);\n-      output_asm_insn (\\\"ld.w 84[sp],  r12\\\", operands);\n-      output_asm_insn (\\\"ld.w 80[sp],  r13\\\", operands);\n-      output_asm_insn (\\\"ld.w 76[sp],  r14\\\", operands);\n-      output_asm_insn (\\\"ld.w 72[sp],  r15\\\", operands);\n-      output_asm_insn (\\\"ld.w 68[sp],  r16\\\", operands);\n-      output_asm_insn (\\\"ld.w 64[sp],  r17\\\", operands);\n-      output_asm_insn (\\\"ld.w 60[sp],  r18\\\", operands);\n-      output_asm_insn (\\\"ld.w 56[sp],  r19\\\", operands);\n-      output_asm_insn (\\\"ld.w 52[sp],  r20\\\", operands);\n-      output_asm_insn (\\\"ld.w 48[sp],  r21\\\", operands);\n-      output_asm_insn (\\\"ld.w 44[sp],  r22\\\", operands);\n-      output_asm_insn (\\\"ld.w 40[sp],  r23\\\", operands);\n-      output_asm_insn (\\\"ld.w 36[sp],  r24\\\", operands);\n-      output_asm_insn (\\\"ld.w 32[sp],  r25\\\", operands);\n-      output_asm_insn (\\\"ld.w 28[sp],  r26\\\", operands);\n-      output_asm_insn (\\\"ld.w 24[sp],  r27\\\", operands);\n-      output_asm_insn (\\\"ld.w 20[sp],  r28\\\", operands);\n-      output_asm_insn (\\\"ld.w 16[sp],  r29\\\", operands);\n+      output_asm_insn (\"ld.w 116[sp], r31\", operands);\n+      output_asm_insn (\"ld.w 112[sp], r2\", operands);\n+      output_asm_insn (\"ld.w 108[sp], gp\", operands);\n+      output_asm_insn (\"ld.w 104[sp], r6\", operands);\n+      output_asm_insn (\"ld.w 100[sp], r7\", operands);\n+      output_asm_insn (\"ld.w 96[sp],  r8\", operands);\n+      output_asm_insn (\"ld.w 92[sp],  r9\", operands);\n+      output_asm_insn (\"ld.w 88[sp],  r11\", operands);\n+      output_asm_insn (\"ld.w 84[sp],  r12\", operands);\n+      output_asm_insn (\"ld.w 80[sp],  r13\", operands);\n+      output_asm_insn (\"ld.w 76[sp],  r14\", operands);\n+      output_asm_insn (\"ld.w 72[sp],  r15\", operands);\n+      output_asm_insn (\"ld.w 68[sp],  r16\", operands);\n+      output_asm_insn (\"ld.w 64[sp],  r17\", operands);\n+      output_asm_insn (\"ld.w 60[sp],  r18\", operands);\n+      output_asm_insn (\"ld.w 56[sp],  r19\", operands);\n+      output_asm_insn (\"ld.w 52[sp],  r20\", operands);\n+      output_asm_insn (\"ld.w 48[sp],  r21\", operands);\n+      output_asm_insn (\"ld.w 44[sp],  r22\", operands);\n+      output_asm_insn (\"ld.w 40[sp],  r23\", operands);\n+      output_asm_insn (\"ld.w 36[sp],  r24\", operands);\n+      output_asm_insn (\"ld.w 32[sp],  r25\", operands);\n+      output_asm_insn (\"ld.w 28[sp],  r26\", operands);\n+      output_asm_insn (\"ld.w 24[sp],  r27\", operands);\n+      output_asm_insn (\"ld.w 20[sp],  r28\", operands);\n+      output_asm_insn (\"ld.w 16[sp],  r29\", operands);\n     }\n-  output_asm_insn (\\\"addi  120, sp, sp\\\", operands);\n-  return \\\"\\\";\n-}\"\n+  output_asm_insn (\"addi  120, sp, sp\", operands);\n+  return \"\";\n+}\n   [(set (attr \"length\")\n         (if_then_else (match_test \"TARGET_LONG_CALLS\")\n                        (const_int 4)"}]}