{"sha": "2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0MWM4YTk2ZGJlZjhhNmNiYzJjZTAyYWNmMTdlNjcxMDQ1N2Y0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-25T08:02:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:23Z"}, "message": "[Ada] Remove support for -gnatP and pragma Polling\n\ngcc/ada/\n\n\t* Makefile.rtl, gnat1drv.adb, expander.adb\n\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_ugn/the_gnat_compilation_model.rst, exp_ch5.ads,\n\texp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_util.adb,\n\texp_util.ads, libgnarl/s-osinte__aix.adb,\n\tlibgnarl/s-osinte__android.adb, libgnarl/s-osinte__darwin.adb,\n\tlibgnarl/s-osinte__gnu.adb, libgnarl/s-osinte__hpux-dce.adb,\n\tlibgnarl/s-osinte__lynxos178.adb, libgnarl/s-osinte__posix.adb,\n\tlibgnarl/s-osinte__qnx.adb, libgnarl/s-osinte__rtems.adb,\n\tlibgnarl/s-osinte__solaris.adb, libgnarl/s-osinte__vxworks.adb,\n\tlibgnarl/s-osinte__x32.adb, libgnarl/s-solita.adb,\n\tlibgnarl/s-taasde.adb, libgnarl/s-taprob.adb,\n\tlibgnarl/s-taprop__dummy.adb, libgnarl/s-taprop__hpux-dce.adb,\n\tlibgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,\n\tlibgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,\n\tlibgnarl/s-tarest.adb, libgnarl/s-tasini.adb,\n\tlibgnarl/s-taskin.adb, libgnarl/s-taspri__dummy.ads,\n\tlibgnarl/s-taspri__hpux-dce.ads, libgnarl/s-taspri__lynxos.ads,\n\tlibgnarl/s-taspri__mingw.ads,\n\tlibgnarl/s-taspri__posix-noaltstack.ads,\n\tlibgnarl/s-taspri__posix.ads, libgnarl/s-taspri__solaris.ads,\n\tlibgnarl/s-taspri__vxworks.ads, libgnarl/s-tassta.adb,\n\tlibgnarl/s-tasuti.adb, libgnarl/s-tposen.adb,\n\tlibgnat/a-except.adb, libgnat/a-except.ads,\n\tlibgnat/s-dwalin.adb, libgnat/s-dwalin.ads,\n\tlibgnat/s-mastop.ads, libgnat/s-soflin.adb,\n\tlibgnat/s-stalib.adb, libgnat/s-stalib.ads,\n\tlibgnat/s-stchop.adb, libgnat/s-stchop.ads,\n\tlibgnat/s-stchop__limit.ads, libgnat/s-traceb.ads,\n\tlibgnat/s-traent.adb, libgnat/s-traent.ads,\n\tlibgnat/s-trasym.adb, libgnat/s-trasym.ads,\n\tlibgnat/s-trasym__dwarf.adb, opt.adb, opt.ads, par-prag.adb,\n\tsem_prag.adb, snames.ads-tmpl, switch-c.adb, targparm.adb,\n\ttargparm.ads, usage.adb: Remove support for -gnatP and pragma\n\tPolling.\n\t* gnat_ugn.texi: Regenerate.\n\t* libgnat/a-excpol.adb, libgnat/a-excpol__abort.adb: Removed.", "tree": {"sha": "631832c0fa72883bf75a9cf452b84ce2811c13b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631832c0fa72883bf75a9cf452b84ce2811c13b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5540812a4d623975660159172d3cf4241ead8494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5540812a4d623975660159172d3cf4241ead8494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5540812a4d623975660159172d3cf4241ead8494"}], "stats": {"total": 577, "additions": 5, "deletions": 572}, "files": [{"sha": "cd38184210074ea53897732ac820cef0863f7bf1", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -1812,7 +1812,6 @@ endif\n # HP/PA HP-UX 10\n ifeq ($(strip $(filter-out hppa% hp hpux10%,$(target_cpu) $(target_vendor) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n-  a-excpol.adb<libgnat/a-excpol__abort.adb \\\n   a-intnam.ads<libgnarl/a-intnam__hpux.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n   s-interr.adb<libgnarl/s-interr__sigaction.adb \\\n@@ -1992,7 +1991,6 @@ ifeq ($(strip $(filter-out cygwin% mingw32% pe,$(target_os))),)\n   endif\n   LIBGNAT_TARGET_PAIRS += \\\n   a-dirval.adb<libgnat/a-dirval__mingw.adb \\\n-  a-excpol.adb<libgnat/a-excpol__abort.adb \\\n   s-gloloc.adb<libgnat/s-gloloc__mingw.adb \\\n   s-inmaop.adb<libgnarl/s-inmaop__dummy.adb \\\n   s-taspri.ads<libgnarl/s-taspri__mingw.ads \\"}, {"sha": "af313c1f0bb630f34af9d1e27383e431f1bc85be", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -4525,48 +4525,6 @@ type is potentially persistent.\n If this pragma is used on a target where this feature is not supported,\n then the pragma will be ignored. See also ``pragma Linker_Section``.\n \n-Pragma Polling\n-==============\n-\n-Syntax:\n-\n-\n-.. code-block:: ada\n-\n-  pragma Polling (ON | OFF);\n-\n-\n-This pragma controls the generation of polling code.  This is normally off.\n-If ``pragma Polling (ON)`` is used then periodic calls are generated to\n-the routine ``Ada.Exceptions.Poll``.  This routine is a separate unit in the\n-runtime library, and can be found in file :file:`a-excpol.adb`.\n-\n-Pragma ``Polling`` can appear as a configuration pragma (for example it\n-can be placed in the :file:`gnat.adc` file) to enable polling globally, or it\n-can be used in the statement or declaration sequence to control polling\n-more locally.\n-\n-A call to the polling routine is generated at the start of every loop and\n-at the start of every subprogram call.  This guarantees that the ``Poll``\n-routine is called frequently, and places an upper bound (determined by\n-the complexity of the code) on the period between two ``Poll`` calls.\n-\n-The primary purpose of the polling interface is to enable asynchronous\n-aborts on targets that cannot otherwise support it (for example Windows\n-NT), but it may be used for any other purpose requiring periodic polling.\n-The standard version is null, and can be replaced by a user program.  This\n-will require re-compilation of the ``Ada.Exceptions`` package that can\n-be found in files :file:`a-except.ads` and :file:`a-except.adb`.\n-\n-A standard alternative unit (in file :file:`4wexcpol.adb` in the standard GNAT\n-distribution) is used to enable the asynchronous abort capability on\n-targets that do not normally support the capability.  The version of\n-``Poll`` in this file makes a call to the appropriate runtime routine\n-to test for an abort condition.\n-\n-Note that polling can also be enabled by use of the *-gnatP* switch.\n-See the section on switches for gcc in the :title:`GNAT User's Guide`.\n-\n Pragma Post\n ===========\n .. index:: Post"}, {"sha": "972d512ed4430f980409c164126ec822d2317d3a", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -2058,15 +2058,6 @@ Alphabetical List of All Switches\n   Cancel effect of previous :switch:`-gnatp` switch.\n \n \n-.. index:: -gnatP  (gcc)\n-\n-:switch:`-gnatP`\n-  Enable polling. This is required on some systems (notably Windows NT) to\n-  obtain asynchronous abort and asynchronous transfer of control capability.\n-  See ``Pragma_Polling`` in the :title:`GNAT_Reference_Manual` for full\n-  details.\n-\n-\n .. index:: -gnatq  (gcc)\n \n :switch:`-gnatq`"}, {"sha": "2f0e10c2d0af9330966551197967629326abdd3f", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -1445,7 +1445,6 @@ recognized by GNAT::\n      Overriding_Renamings\n      Partition_Elaboration_Policy\n      Persistent_BSS\n-     Polling\n      Prefix_Exception_Messages\n      Priority_Specific_Dispatching\n      Profile"}, {"sha": "9a319886500ec7febbaea3c5752d63092344d2a1", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -3510,17 +3510,6 @@ package body Exp_Ch5 is\n       Analyze (N);\n    end Expand_Formal_Container_Element_Loop;\n \n-   -----------------------------\n-   -- Expand_N_Goto_Statement --\n-   -----------------------------\n-\n-   --  Add poll before goto if polling active\n-\n-   procedure Expand_N_Goto_Statement (N : Node_Id) is\n-   begin\n-      Generate_Poll_Call (N);\n-   end Expand_N_Goto_Statement;\n-\n    ---------------------------\n    -- Expand_N_If_Statement --\n    ---------------------------\n@@ -4608,7 +4597,6 @@ package body Exp_Ch5 is\n    --  4. Deal with while loops where Condition_Actions is set\n    --  5. Deal with loops over predicated subtypes\n    --  6. Deal with loops with iterators over arrays and containers\n-   --  7. Insert polling call if required\n \n    procedure Expand_N_Loop_Statement (N : Node_Id) is\n       Loc    : constant Source_Ptr := Sloc (N);\n@@ -4629,12 +4617,6 @@ package body Exp_Ch5 is\n          Adjust_Condition (Condition (Scheme));\n       end if;\n \n-      --  Generate polling call\n-\n-      if Is_Non_Empty_List (Statements (N)) then\n-         Generate_Poll_Call (First (Statements (N)));\n-      end if;\n-\n       --  Nothing more to do for plain loop with no iteration scheme\n \n       if No (Scheme) then"}, {"sha": "4f5e9951df9f6d27d77f467801db873dfa5a8d3b", "filename": "gcc/ada/exp_ch5.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,7 +32,6 @@ package Exp_Ch5 is\n    procedure Expand_N_Block_Statement           (N : Node_Id);\n    procedure Expand_N_Case_Statement            (N : Node_Id);\n    procedure Expand_N_Exit_Statement            (N : Node_Id);\n-   procedure Expand_N_Goto_Statement            (N : Node_Id);\n    procedure Expand_N_If_Statement              (N : Node_Id);\n    procedure Expand_N_Loop_Statement            (N : Node_Id);\n "}, {"sha": "c78ff0beb33ad95134e73763ac3bc6c92c175c0c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -6389,9 +6389,6 @@ package body Exp_Ch6 is\n    -- Expand_N_Subprogram_Body --\n    ------------------------------\n \n-   --  Add poll call if ATC polling is enabled, unless the body will be inlined\n-   --  by the back-end.\n-\n    --  Add dummy push/pop label nodes at start and end to clear any local\n    --  exception indications if local-exception-to-goto optimization is active.\n \n@@ -6601,25 +6598,6 @@ package body Exp_Ch6 is\n          end;\n       end if;\n \n-      --  Need poll on entry to subprogram if polling enabled. We only do this\n-      --  for non-empty subprograms, since it does not seem necessary to poll\n-      --  for a dummy null subprogram.\n-\n-      if Is_Non_Empty_List (L) then\n-\n-         --  Do not add a polling call if the subprogram is to be inlined by\n-         --  the back-end, to avoid repeated calls with multiple inlinings.\n-\n-         if Is_Inlined (Spec_Id)\n-           and then Front_End_Inlining\n-           and then Optimization_Level > 1\n-         then\n-            null;\n-         else\n-            Generate_Poll_Call (First (L));\n-         end if;\n-      end if;\n-\n       --  Initialize any scalar OUT args if Initialize/Normalize_Scalars\n \n       if Init_Or_Norm_Scalars and then Is_Subprogram (Spec_Id) then"}, {"sha": "0ff0a15a9dd24796afcca2b7f0013816e0011800", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -4919,7 +4919,6 @@ package body Exp_Ch7 is\n          Fin_Id    : Entity_Id;\n          Mark      : Entity_Id := Empty;\n          New_Decls : List_Id;\n-         Old_Poll  : Boolean;\n \n       begin\n          --  If we are generating expanded code for debugging purposes, use the\n@@ -4936,12 +4935,6 @@ package body Exp_Ch7 is\n             Loc := No_Location;\n          end if;\n \n-         --  Set polling off. The finalization and cleanup code is executed\n-         --  with aborts deferred.\n-\n-         Old_Poll := Polling_Required;\n-         Polling_Required := False;\n-\n          --  A task activation call has already been built for a task\n          --  allocation block.\n \n@@ -5050,10 +5043,6 @@ package body Exp_Ch7 is\n          if Present (Fin_Id) then\n             Build_Finalizer_Call (N, Fin_Id);\n          end if;\n-\n-         --  Restore saved polling mode\n-\n-         Polling_Required := Old_Poll;\n       end;\n    end Expand_Cleanup_Actions;\n "}, {"sha": "8ef05d4d3722deef88dc1b93f52c49b9967b7376", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -6198,26 +6198,6 @@ package body Exp_Util is\n       return End_String;\n    end Fully_Qualified_Name_String;\n \n-   ------------------------\n-   -- Generate_Poll_Call --\n-   ------------------------\n-\n-   procedure Generate_Poll_Call (N : Node_Id) is\n-   begin\n-      --  No poll call if polling not active\n-\n-      if not Polling_Required then\n-         return;\n-\n-      --  Otherwise generate require poll call\n-\n-      else\n-         Insert_Before_And_Analyze (N,\n-           Make_Procedure_Call_Statement (Sloc (N),\n-             Name => New_Occurrence_Of (RTE (RE_Poll), Sloc (N))));\n-      end if;\n-   end Generate_Poll_Call;\n-\n    ---------------------------------\n    -- Get_Current_Value_Condition --\n    ---------------------------------"}, {"sha": "bde640f5a4b14755dad086c18acdd6986aa99ba9", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -687,10 +687,6 @@ package Exp_Util is\n    --  of entity E, in all upper case, with an ASCII.NUL appended at the end\n    --  of the name if Append_NUL is True.\n \n-   procedure Generate_Poll_Call (N : Node_Id);\n-   --  If polling is active, then a call to the Poll routine is built,\n-   --  and then inserted before the given node N and analyzed.\n-\n    procedure Get_Current_Value_Condition\n      (Var : Node_Id;\n       Op  : out Node_Kind;"}, {"sha": "d6219f4a7010110591a2c7a532e773f063033c89", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -273,9 +273,6 @@ package body Expander is\n                when N_Generic_Instantiation =>\n                   Expand_N_Generic_Instantiation (N);\n \n-               when N_Goto_Statement =>\n-                  Expand_N_Goto_Statement (N);\n-\n                when N_Handled_Sequence_Of_Statements =>\n                   Expand_N_Handled_Sequence_Of_Statements (N);\n "}, {"sha": "26a65fa210d525821f792ea143b88e33bbf99f2b", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -342,10 +342,6 @@ procedure Gnat1drv is\n \n          Xref_Active := True;\n \n-         --  Polling mode forced off, since it generates confusing junk\n-\n-         Polling_Required := False;\n-\n          --  Set operating mode to Generate_Code to benefit from full front-end\n          --  expansion (e.g. generics).\n \n@@ -531,10 +527,6 @@ procedure Gnat1drv is\n \n          Xref_Active := True;\n \n-         --  Polling mode forced off, since it generates confusing junk\n-\n-         Polling_Required := False;\n-\n          --  Set operating mode to Check_Semantics, but a light front-end\n          --  expansion is still performed.\n "}, {"sha": "c98fe761480ccb61b32a461b75ebd585d2d19561", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Jul 01, 2020\n+GNAT User's Guide for Native Platforms , Sep 29, 2020\n \n AdaCore\n \n@@ -2850,7 +2850,6 @@ Overflow_Mode\n Overriding_Renamings\n Partition_Elaboration_Policy\n Persistent_BSS\n-Polling\n Prefix_Exception_Messages\n Priority_Specific_Dispatching\n Profile\n@@ -9721,19 +9720,6 @@ has no effect if cancelled by a subsequent @code{-gnat-p} switch.\n Cancel effect of previous @code{-gnatp} switch.\n @end table\n \n-@geindex -gnatP (gcc)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatP}\n-\n-Enable polling. This is required on some systems (notably Windows NT) to\n-obtain asynchronous abort and asynchronous transfer of control capability.\n-See @code{Pragma_Polling} in the @cite{GNAT_Reference_Manual} for full\n-details.\n-@end table\n-\n @geindex -gnatq (gcc)\n \n "}, {"sha": "91c449401b9626df4801317115047d00bcb68d5c", "filename": "gcc/ada/libgnarl/s-osinte__aix.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__aix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__aix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__aix.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is a AIX (Native) version of this package\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n package body System.OS_Interface is\n \n    use Interfaces.C;"}, {"sha": "5895940574e99b3fc780b2dbb30fd9938969f452", "filename": "gcc/ada/libgnarl/s-osinte__android.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is an Android version of this package.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n "}, {"sha": "b57a31a8c9a3b38553558ddcfc6b76c281348f52", "filename": "gcc/ada/libgnarl/s-osinte__darwin.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is a Darwin Threads version of this package\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n with Interfaces.C.Extensions;\n \n package body System.OS_Interface is"}, {"sha": "dc0f4ecdf885e90e5d210201bacbf07e51d12c90", "filename": "gcc/ada/libgnarl/s-osinte__gnu.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__gnu.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is the GNU/Hurd version of this package.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n "}, {"sha": "bcfcf6160077dc4e977fc7eed9753d7992b12565", "filename": "gcc/ada/libgnarl/s-osinte__hpux-dce.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux-dce.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,10 +33,6 @@\n --  This is a DCE version of this package.\n --  Currently HP-UX and SNI use this file\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n "}, {"sha": "79099d76a8dc164900a31db57ed1ac6b2601fb4a", "filename": "gcc/ada/libgnarl/s-osinte__lynxos178.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  Version of System.OS_Interface for LynxOS-178 (POSIX Threads)\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It may cause infinite loops and other problems.\n-\n package body System.OS_Interface is\n \n    ------------------"}, {"sha": "48181627208312213c1dece24769253b1b7fa83b", "filename": "gcc/ada/libgnarl/s-osinte__posix.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__posix.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,10 +32,6 @@\n \n --  This version is for POSIX-like operating systems\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n "}, {"sha": "45b7ea796512a8cfbe4063e27144936746fbaa8f", "filename": "gcc/ada/libgnarl/s-osinte__qnx.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,10 +32,6 @@\n \n --  This version is for QNX operating systems\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n "}, {"sha": "06cf1abe5d940354c54e0d50caa3f61c1a0ba89d", "filename": "gcc/ada/libgnarl/s-osinte__rtems.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -40,11 +40,8 @@\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n with Interfaces.C; use Interfaces.C;\n+\n package body System.OS_Interface is\n \n    -----------------"}, {"sha": "adfc3869cc1df589e952080a90e7756cf20f9889", "filename": "gcc/ada/libgnarl/s-osinte__solaris.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__solaris.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -35,10 +35,6 @@\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n with Interfaces.C; use Interfaces.C;\n \n package body System.OS_Interface is"}, {"sha": "e88a9af30ee64ea3c3a60703f44f509d13820cd3", "filename": "gcc/ada/libgnarl/s-osinte__vxworks.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package encapsulates all direct interfaces to OS services that are\n --  needed by children of System.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n package body System.OS_Interface is\n \n    use type Interfaces.C.int;"}, {"sha": "8a7cb4ca8723f738c5596999afb7db276eb82888", "filename": "gcc/ada/libgnarl/s-osinte__x32.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__x32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-osinte__x32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__x32.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,14 +32,11 @@\n \n --  This version is for Linux/x32\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by children of System.\n \n with Interfaces.C; use Interfaces.C;\n+\n package body System.OS_Interface is\n \n    --------------------"}, {"sha": "ac3578146fad1e656655905e688811696093d0c7", "filename": "gcc/ada/libgnarl/s-solita.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-solita.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-solita.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-solita.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,11 +33,6 @@ pragma Style_Checks (All_Checks);\n --  Turn off subprogram alpha ordering check, since we group soft link bodies\n --  and dummy soft link bodies together separately in this unit.\n \n-pragma Polling (Off);\n---  Turn polling off for this package. We don't need polling during any of the\n---  routines in this package, and more to the point, if we try to poll it can\n---  cause infinite loops.\n-\n with Ada.Exceptions;\n with Ada.Exceptions.Is_Null_Occurrence;\n "}, {"sha": "9c4340c62cf9916bc3f790da21b3c5c725b8481e", "filename": "gcc/ada/libgnarl/s-taasde.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taasde.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -29,10 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n with Ada.Task_Identification;\n "}, {"sha": "6ce522a0321f712e0619d7ed585db4aa6cad4111", "filename": "gcc/ada/libgnarl/s-taprob.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprob.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -30,10 +30,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.Task_Primitives.Operations;\n with System.Soft_Links.Tasking;\n "}, {"sha": "7e9093a58fcd007ca29d6edb2515327879390010", "filename": "gcc/ada/libgnarl/s-taprop__dummy.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__dummy.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n package body System.Task_Primitives.Operations is\n \n    use System.Tasking;"}, {"sha": "0e005118a4ede7d4ebd4b48a6f9a136130032cb8", "filename": "gcc/ada/libgnarl/s-taprop__hpux-dce.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__hpux-dce.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C;"}, {"sha": "757a6cdfdadd6d25855b23f13392f05915620df3", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Interfaces.C; use Interfaces; use type Interfaces.C.int;\n \n with System.Task_Info;"}, {"sha": "440523101a0e6e7308dc5395953383052cb21aab", "filename": "gcc/ada/libgnarl/s-taprop__mingw.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__mingw.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Interfaces.C;\n with Interfaces.C.Strings;\n "}, {"sha": "8ecb29338947d91031626748b6daeed7a7d39480", "filename": "gcc/ada/libgnarl/s-taprop__posix.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__posix.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -40,10 +40,6 @@\n --  For configurations where SCHED_FIFO and priority ceiling are not a\n --  requirement, this file can also be used (e.g AiX threads)\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C;"}, {"sha": "e3ad521a441e664867b595166abc68958fb59ff0", "filename": "gcc/ada/libgnarl/s-taprop__qnx.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__qnx.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -40,10 +40,6 @@\n --  For configurations where SCHED_FIFO and priority ceiling are not a\n --  requirement, this file can also be used (e.g AiX threads)\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C;"}, {"sha": "3084842e91981f90d14328ac69036b2aeb0704cd", "filename": "gcc/ada/libgnarl/s-taprop__solaris.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__solaris.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Interfaces.C;\n \n with System.Multiprocessors;"}, {"sha": "c9d019ef853a6094fabeee144dbfbbff9f3a6eb3", "filename": "gcc/ada/libgnarl/s-taprop__vxworks.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n --  This package contains all the GNULL primitives that interface directly with\n --  the underlying OS.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C;"}, {"sha": "45551014bf833ab59f5a5825b865ab5d581fac17", "filename": "gcc/ada/libgnarl/s-tarest.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tarest.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -39,10 +39,6 @@ pragma Style_Checks (All_Checks);\n --  This package represents the high level tasking interface used by the\n --  compiler to expand Ada 95 tasking constructs into simpler run time calls.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n with Ada.Exceptions;\n \n with System.Task_Primitives.Operations;"}, {"sha": "2080ac28f93b817a939c15694a05966fe0f3459a", "filename": "gcc/ada/libgnarl/s-tasini.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasini.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,11 +33,6 @@ pragma Style_Checks (All_Checks);\n --  Turn off subprogram alpha ordering check, since we group soft link bodies\n --  and dummy soft link bodies together separately in this unit.\n \n-pragma Polling (Off);\n---  Turn polling off for this package. We don't need polling during any of the\n---  routines in this package, and more to the point, if we try to poll it can\n---  cause infinite loops.\n-\n with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n with System.Soft_Links;"}, {"sha": "16171c18f50d331d5e98e6649cf86d0df2135364", "filename": "gcc/ada/libgnarl/s-taskin.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -29,10 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.Task_Primitives.Operations;\n with System.Storage_Elements;\n "}, {"sha": "7d87e22a44f9fab0619f82eee42e0cffd2e88fa4", "filename": "gcc/ada/libgnarl/s-taspri__dummy.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__dummy.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is a no tasking version of this package\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n package System.Task_Primitives is\n    pragma Preelaborate;\n "}, {"sha": "e5bb2eb3c4eebad212266b4ba1d0a77abc392efd", "filename": "gcc/ada/libgnarl/s-taspri__hpux-dce.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__hpux-dce.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,10 +33,6 @@\n \n --  This package provides low-level support for most tasking features\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n \n package System.Task_Primitives is"}, {"sha": "36bb3a5f45a0758f373f5c19cc295fa0e5cd020e", "filename": "gcc/ada/libgnarl/s-taspri__lynxos.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__lynxos.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,10 +32,6 @@\n \n --  This is LynxOS Family version of this package.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n \n package System.Task_Primitives is"}, {"sha": "8199a3628c9796192d436291e0c676996933cf9f", "filename": "gcc/ada/libgnarl/s-taspri__mingw.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__mingw.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is a NT (native) version of this package\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n with System.Win32;\n "}, {"sha": "6b1934595bfbddfe1f22ba301675eb92b217e79c", "filename": "gcc/ada/libgnarl/s-taspri__posix-noaltstack.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix-noaltstack.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -35,10 +35,6 @@\n \n --  Note: this file can only be used for POSIX compliant systems\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n \n package System.Task_Primitives is"}, {"sha": "562175473b49fa091f8ac09210b1622961448441", "filename": "gcc/ada/libgnarl/s-taspri__posix.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__posix.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -34,10 +34,6 @@\n \n --  Note: this file can only be used for POSIX compliant systems\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n \n package System.Task_Primitives is"}, {"sha": "6e963d548c72257685f4d7252915da883ef11757", "filename": "gcc/ada/libgnarl/s-taspri__solaris.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__solaris.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,10 +33,6 @@\n \n --  This package provides low-level support for most tasking features\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with Ada.Unchecked_Conversion;\n \n with System.OS_Interface;"}, {"sha": "2c7aadd9cd6a137b21b20b21ec33d580f5fc00bb", "filename": "gcc/ada/libgnarl/s-taspri__vxworks.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-taspri__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taspri__vxworks.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  This is a VxWorks version of this package\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.OS_Interface;\n \n package System.Task_Primitives is"}, {"sha": "aada734777176c8e3d93d4dd37e2722d40ebb37b", "filename": "gcc/ada/libgnarl/s-tassta.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -29,10 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n pragma Partition_Elaboration_Policy (Concurrent);\n --  This package only implements the concurrent elaboration policy. This pragma\n --  will enforce it (and detect conflicts with user specified policy)."}, {"sha": "6dbd1f0640452232b65371e3190da7ba7bcfb84a", "filename": "gcc/ada/libgnarl/s-tasuti.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasuti.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,10 +33,6 @@\n \n --  These declarations are not part of the GNARLI\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n with System.Tasking.Debug;\n with System.Task_Primitives.Operations;\n with System.Tasking.Initialization;"}, {"sha": "eb01580c5f4fe0fda21819e273363d6861797937", "filename": "gcc/ada/libgnarl/s-tposen.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tposen.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -52,10 +52,6 @@ pragma Style_Checks (All_Checks);\n --  performed at compile time, and is relatively cheap (see PO_Do_Or_Queue,\n --  Service_Entry).\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want polling to take place during tasking\n---  operations. It can cause infinite loops and other problems.\n-\n pragma Suppress (All_Checks);\n --  Why is this required ???\n "}, {"sha": "52e716f2412ed1fce35947f994e5def27c2ee826", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -32,10 +32,6 @@\n pragma Style_Checks (All_Checks);\n --  No subprogram ordering check, due to logical grouping\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with System.Exception_Tables.\n-\n with System;                  use System;\n with System.Exceptions;       use System.Exceptions;\n with System.Exceptions_Debug; use System.Exceptions_Debug;\n@@ -668,21 +664,6 @@ package body Ada.Exceptions is\n    Rmsg_36 : constant String := \"stream operation not allowed\"     & NUL;\n    Rmsg_37 : constant String := \"build-in-place mismatch\"          & NUL;\n \n-   -----------------------\n-   -- Polling Interface --\n-   -----------------------\n-\n-   type Unsigned is mod 2 ** 32;\n-\n-   Counter : Unsigned := 0;\n-   pragma Warnings (Off, Counter);\n-   --  This counter is provided for convenience. It can be used in Poll to\n-   --  perform periodic but not systematic operations.\n-\n-   procedure Poll is separate;\n-   --  The actual polling routine is separate, so that it can easily be\n-   --  replaced with a target dependent version.\n-\n    --------------------------\n    -- Code_Address_For_AAA --\n    --------------------------"}, {"sha": "22b7be94effff6b61d1c7c32f2d4a4289ff54186", "filename": "gcc/ada/libgnat/a-except.ads", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -36,10 +36,6 @@\n --  This is the default version of this package. We also have cert and zfp\n --  versions.\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with ourself.\n-\n with System;\n with System.Parameters;\n with System.Standard_Library;\n@@ -240,31 +236,6 @@ private\n    --  Determine whether the current exception (if it exists) is an instance of\n    --  Standard'Abort_Signal.\n \n-   -----------------------\n-   -- Polling Interface --\n-   -----------------------\n-\n-   --  The GNAT compiler has an option to generate polling calls to the Poll\n-   --  routine in this package. Specifying the -gnatP option for a compilation\n-   --  causes a call to Ada.Exceptions.Poll to be generated on every subprogram\n-   --  entry and on every iteration of a loop, thus avoiding the possibility of\n-   --  a case of unbounded time between calls.\n-\n-   --  This polling interface may be used for instrumentation or debugging\n-   --  purposes (e.g. implementing watchpoints in software or in the debugger).\n-\n-   --  In the GNAT technology itself, this interface is used to implement\n-   --  immediate asynchronous transfer of control and immediate abort on\n-   --  targets which do not provide for one thread interrupting another.\n-\n-   --  Note: this used to be in a separate unit called System.Poll, but that\n-   --  caused horrible circular elaboration problems between System.Poll and\n-   --  Ada.Exceptions.\n-\n-   procedure Poll;\n-   --  Check for asynchronous abort. Note that we do not inline the body.\n-   --  This makes the interface more useful for debugging purposes.\n-\n    --------------------------\n    -- Exception_Occurrence --\n    --------------------------"}, {"sha": "27893c36a41bd44fc6d1f2568077bd0bb7df1aa1", "filename": "gcc/ada/libgnat/a-excpol.adb", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5540812a4d623975660159172d3cf4241ead8494/gcc%2Fada%2Flibgnat%2Fa-excpol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5540812a4d623975660159172d3cf4241ead8494/gcc%2Fada%2Flibgnat%2Fa-excpol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-excpol.adb?ref=5540812a4d623975660159172d3cf4241ead8494", "patch": "@@ -1,42 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---                   A D A . E X C E P T I O N S . P O L L                  --\n---                                                                          --\n---                                  B o d y                                 --\n---                 (dummy version where polling is not used)                --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-separate (Ada.Exceptions)\n-\n-----------\n--- Poll --\n-----------\n-\n-procedure Poll is\n-begin\n-   null;\n-end Poll;"}, {"sha": "511f58c2a770f136cbcc34eb4c91356fd8b2b029", "filename": "gcc/ada/libgnat/a-excpol__abort.adb", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5540812a4d623975660159172d3cf4241ead8494/gcc%2Fada%2Flibgnat%2Fa-excpol__abort.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5540812a4d623975660159172d3cf4241ead8494/gcc%2Fada%2Flibgnat%2Fa-excpol__abort.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-excpol__abort.adb?ref=5540812a4d623975660159172d3cf4241ead8494", "patch": "@@ -1,62 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---                   A D A . E X C E P T I O N S . P O L L                  --\n---                (version supporting asynchronous abort test)              --\n---                                                                          --\n---                                  B o d y                                 --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for targets that do not support per-thread asynchronous\n---  signals. On such targets, we require compilation with the -gnatP switch\n---  that activates periodic polling. Then in the body of the polling routine\n---  we test for asynchronous abort.\n-\n---  Windows and HPUX 10 currently use this file\n-\n-pragma Warnings (Off);\n---  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n---  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules.\n-\n-with System.Soft_Links;\n-\n-pragma Warnings (On);\n-\n-separate (Ada.Exceptions)\n-\n-----------\n--- Poll --\n-----------\n-\n-procedure Poll is\n-begin\n-   --  Test for asynchronous abort on each poll\n-\n-   if System.Soft_Links.Check_Abort_Status.all /= 0 then\n-      raise Standard'Abort_Signal;\n-   end if;\n-end Poll;"}, {"sha": "abb499c35cbe0e56282ca7892b1dce7ed5876849", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -29,10 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we can get\n---  elaboration circularities when polling is turned on\n-\n with Ada.Characters.Handling;\n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n with Ada.Unchecked_Deallocation;"}, {"sha": "072f089509e5e37974f16ac3759b76785317c3ab", "filename": "gcc/ada/libgnat/s-dwalin.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -38,10 +38,6 @@\n --  size is a consideration it's possible to strip all other .debug sections,\n --  which will decrease the size of the object significantly.\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we can get\n---  elaboration circularities when polling is turned on\n-\n with Ada.Exceptions.Traceback;\n \n with System.Object_Reader;"}, {"sha": "ffe04be7df79976822e8ae83a25d5517a4ec5f80", "filename": "gcc/ada/libgnat/s-mastop.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-mastop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-mastop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-mastop.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n pragma Compiler_Unit_Warning;\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with System.Exception_Tables.\n-\n with System.Storage_Elements;\n \n package System.Machine_State_Operations is"}, {"sha": "48d133878f3c4dcbde3b5c237796450eda5c5eb0", "filename": "gcc/ada/libgnat/s-soflin.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soflin.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n pragma Compiler_Unit_Warning;\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get an\n---  infinite loop from the code within the Poll routine itself.\n-\n pragma Warnings (Off);\n --  Disable warnings as System.Soft_Links.Initialize is not Preelaborate. It is\n --  safe to with this unit as its elaboration routine will only be initializing"}, {"sha": "7c6001384be6a3783dda81f8c0f4279cd28fb154", "filename": "gcc/ada/libgnat/s-stalib.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stalib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stalib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stalib.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -36,10 +36,6 @@ pragma Compiler_Unit_Warning;\n --  of System.Standard_Library, since this would cause order of elaboration\n --  problems (Elaborate_Body would have the same problem).\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with Ada.Exceptions if polling is on.\n-\n pragma Warnings (Off);\n --  Kill warnings from unused withs. These unused with's are here to make\n --  sure the relevant units are loaded and properly elaborated."}, {"sha": "b6258ed6ae1b536b68c063e7cc5092f704118d2b", "filename": "gcc/ada/libgnat/s-stalib.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stalib.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -46,10 +46,6 @@\n \n pragma Compiler_Unit_Warning;\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with Ada.Exceptions if polling is on.\n-\n with Ada.Unchecked_Conversion;\n \n package System.Standard_Library is"}, {"sha": "340d27bc6312a7762adffb88936c89ab89fba4a2", "filename": "gcc/ada/libgnat/s-stchop.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stchop.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -61,8 +61,6 @@ package body System.Stack_Checking.Operations is\n    --  cache is pending, that write should be followed by a Poll to prevent\n    --  losing signals.\n    --\n-   --  Note: This function must be compiled with Polling turned off\n-   --\n    --  Note: on systems with real thread-local storage, Set_Stack_Info should\n    --  return an access value for such local storage. In those cases the cache\n    --  will always be up-to-date."}, {"sha": "185301c3d25f4b975018f5e879d4be551bf49b1b", "filename": "gcc/ada/libgnat/s-stchop.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stchop.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -36,10 +36,6 @@ pragma Restrictions (No_Elaboration_Code);\n --  We want to guarantee the absence of elaboration code because the binder\n --  does not handle references to this package.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want polling to take place during stack\n---  checking operations. It causes infinite loops and other problems.\n-\n with System.Storage_Elements;\n \n package System.Stack_Checking.Operations is"}, {"sha": "73306765e471cef8cec354af7c3a9ca0984bf31c", "filename": "gcc/ada/libgnat/s-stchop__limit.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop__limit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-stchop__limit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stchop__limit.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -37,10 +37,6 @@ pragma Restrictions (No_Elaboration_Code);\n --  We want to guarantee the absence of elaboration code because the binder\n --  does not handle references to this package.\n \n-pragma Polling (Off);\n---  Turn off polling, we do not want polling to take place during stack\n---  checking operations. It causes infinite loops and other problems.\n-\n package System.Stack_Checking.Operations is\n    pragma Preelaborate;\n "}, {"sha": "094218cd6cb6bb6886fbf1746a81b30225b67442", "filename": "gcc/ada/libgnat/s-traceb.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traceb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traceb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-traceb.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -35,10 +35,6 @@\n \n pragma Compiler_Unit_Warning;\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with System.Exception_Tables.\n-\n with System.Traceback_Entries;\n \n package System.Traceback is"}, {"sha": "23d174faf3ff8b17583308d78832297c53abb0bb", "filename": "gcc/ada/libgnat/s-traent.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traent.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traent.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-traent.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -29,10 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with Ada.Exceptions.\n-\n pragma Compiler_Unit_Warning;\n \n package body System.Traceback_Entries is"}, {"sha": "83ef5691ddaf550f7dae88bcbb1fb6962a77149e", "filename": "gcc/ada/libgnat/s-traent.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traent.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-traent.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-traent.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -38,10 +38,6 @@\n --  version of the package, an entry is a mere code location representing the\n --  address of a call instruction part of the call-chain.\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we get\n---  elaboration circularities with Ada.Exceptions.\n-\n pragma Compiler_Unit_Warning;\n \n package System.Traceback_Entries is"}, {"sha": "bfc3a98c962634dfd987e5216a497d4502ef26de", "filename": "gcc/ada/libgnat/s-trasym.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -33,10 +33,6 @@\n --  is not supported. It returns tracebacks as lists of hexadecimal addresses\n --  of the form \"0x...\".\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we can get\n---  elaboration circularities when polling is turned on.\n-\n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n with System.Address_Image;\n "}, {"sha": "e974ee9c76bf27e784c9434b7363728bfffa1bdf", "filename": "gcc/ada/libgnat/s-trasym.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -71,10 +71,6 @@\n --  executable. You should consider using gdb to obtain symbolic traceback in\n --  such cases.\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we can get\n---  elaboration circularities when polling is turned on.\n-\n with Ada.Exceptions;\n \n package System.Traceback.Symbolic is"}, {"sha": "78cbcc202c7613b1aecef6f6f34d84035912bfb8", "filename": "gcc/ada/libgnat/s-trasym__dwarf.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -31,10 +31,6 @@\n \n --  Run-time symbolic traceback support for targets using DWARF debug data\n \n-pragma Polling (Off);\n---  We must turn polling off for this unit, because otherwise we can get\n---  elaboration circularities when polling is turned on.\n-\n with Ada.Unchecked_Deallocation;\n \n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;"}, {"sha": "2bdccbde56b09fad99705cda0e3baee779e407e8", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -98,7 +98,6 @@ package body Opt is\n       No_Component_Reordering_Config        := No_Component_Reordering;\n       Optimize_Alignment_Config             := Optimize_Alignment;\n       Persistent_BSS_Mode_Config            := Persistent_BSS_Mode;\n-      Polling_Required_Config               := Polling_Required;\n       Prefix_Exception_Messages_Config      := Prefix_Exception_Messages;\n       SPARK_Mode_Config                     := SPARK_Mode;\n       SPARK_Mode_Pragma_Config              := SPARK_Mode_Pragma;\n@@ -139,7 +138,6 @@ package body Opt is\n       Optimize_Alignment             := Save.Optimize_Alignment;\n       Optimize_Alignment_Local       := Save.Optimize_Alignment_Local;\n       Persistent_BSS_Mode            := Save.Persistent_BSS_Mode;\n-      Polling_Required               := Save.Polling_Required;\n       Prefix_Exception_Messages      := Save.Prefix_Exception_Messages;\n       SPARK_Mode                     := Save.SPARK_Mode;\n       SPARK_Mode_Pragma              := Save.SPARK_Mode_Pragma;\n@@ -183,7 +181,6 @@ package body Opt is\n          Optimize_Alignment             => Optimize_Alignment,\n          Optimize_Alignment_Local       => Optimize_Alignment_Local,\n          Persistent_BSS_Mode            => Persistent_BSS_Mode,\n-         Polling_Required               => Polling_Required,\n          Prefix_Exception_Messages      => Prefix_Exception_Messages,\n          SPARK_Mode                     => SPARK_Mode,\n          SPARK_Mode_Pragma              => SPARK_Mode_Pragma,\n@@ -302,7 +299,6 @@ package body Opt is\n       Default_Pool                   := Default_Pool_Config;\n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Fast_Math                      := Fast_Math_Config;\n-      Polling_Required               := Polling_Required_Config;\n    end Set_Config_Switches;\n \n end Opt;"}, {"sha": "88a1ef412ad070685b9eb17b88d7bd9f35f3d9f8", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -1306,11 +1306,6 @@ package Opt is\n    --  GNATBIND\n    --  True if pessimistic elaboration order is to be chosen (-p switch set)\n \n-   Polling_Required : Boolean := False;\n-   --  GNAT\n-   --  Set to True if polling for asynchronous abort is enabled by using\n-   --  the -gnatP option for GNAT.\n-\n    Prefix_Exception_Messages : Boolean := False;\n    --  GNAT\n    --  Set True to prefix exception messages with entity-name:\n@@ -2103,14 +2098,6 @@ package Opt is\n    --  at the start of each compilation unit, except that it is always\n    --  set False for predefined units.\n \n-   Polling_Required_Config : Boolean;\n-   --  GNAT\n-   --  This is the value of the configuration switch that controls polling\n-   --  mode. It can be set True by the command line switch -gnatP, and then\n-   --  further modified by the use of pragma Polling in the gnat.adc file. This\n-   --  flag is used to set the initial value for Polling_Required at the start\n-   --  of analyzing each unit.\n-\n    Prefix_Exception_Messages_Config : Boolean;\n    --  The setting of Prefix_Exception_Messages from configuration pragmas\n \n@@ -2338,7 +2325,6 @@ private\n       Optimize_Alignment             : Character;\n       Optimize_Alignment_Local       : Boolean;\n       Persistent_BSS_Mode            : Boolean;\n-      Polling_Required               : Boolean;\n       Prefix_Exception_Messages      : Boolean;\n       SPARK_Mode                     : SPARK_Mode_Type;\n       SPARK_Mode_Pragma              : Node_Id;"}, {"sha": "120aab5d7da24fa58426762fb000044ac7b06507", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -1449,7 +1449,6 @@ begin\n          | Pragma_Partition_Elaboration_Policy\n          | Pragma_Passive\n          | Pragma_Persistent_BSS\n-         | Pragma_Polling\n          | Pragma_Post\n          | Pragma_Post_Class\n          | Pragma_Postcondition"}, {"sha": "52e0e8971e0a6915c7d86815b7b9a4e1f8145d62", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -21054,19 +21054,6 @@ package body Sem_Prag is\n             Map_Pragma_Name (From => Chars (New_Name), To => Chars (Old_Name));\n          end Rename_Pragma;\n \n-         -------------\n-         -- Polling --\n-         -------------\n-\n-         --  pragma Polling (ON | OFF);\n-\n-         when Pragma_Polling =>\n-            GNAT_Pragma;\n-            Check_Arg_Count (1);\n-            Check_No_Identifiers;\n-            Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off);\n-            Polling_Required := (Chars (Get_Pragma_Arg (Arg1)) = Name_On);\n-\n          -----------------------------------\n          -- Post/Post_Class/Postcondition --\n          -----------------------------------\n@@ -30942,7 +30929,6 @@ package body Sem_Prag is\n       Pragma_Partition_Elaboration_Policy   =>  0,\n       Pragma_Passive                        =>  0,\n       Pragma_Persistent_BSS                 =>  0,\n-      Pragma_Polling                        =>  0,\n       Pragma_Post                           => -1,\n       Pragma_Postcondition                  => -1,\n       Pragma_Post_Class                     => -1,"}, {"sha": "fa5134f972fd3f10e4466b65be540e2094ea6f3a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -453,7 +453,6 @@ package Snames is\n    Name_Overriding_Renamings           : constant Name_Id := N + $; -- GNAT\n    Name_Partition_Elaboration_Policy   : constant Name_Id := N + $; -- Ada 05\n    Name_Persistent_BSS                 : constant Name_Id := N + $; -- GNAT\n-   Name_Polling                        : constant Name_Id := N + $; -- GNAT\n    Name_Prefix_Exception_Messages      : constant Name_Id := N + $; -- GNAT\n    Name_Priority_Specific_Dispatching  : constant Name_Id := N + $; -- Ada 05\n    Name_Profile                        : constant Name_Id := N + $; -- Ada 05\n@@ -1942,7 +1941,6 @@ package Snames is\n       Pragma_Overriding_Renamings,\n       Pragma_Partition_Elaboration_Policy,\n       Pragma_Persistent_BSS,\n-      Pragma_Polling,\n       Pragma_Prefix_Exception_Messages,\n       Pragma_Priority_Specific_Dispatching,\n       Pragma_Profile,"}, {"sha": "1816808c0cb545d9f26328e12825b73f38fc9b2f", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -723,6 +723,7 @@ package body Switch.C is\n \n                   when 'P' =>\n                      Treat_Categorization_Errors_As_Warnings := True;\n+                     Ptr := Ptr + 1;\n \n                   --  -gnates=file (specify extra file switches for gnat2why)\n \n@@ -808,8 +809,8 @@ package body Switch.C is\n                   --  -gnateu (unrecognized y,V,w switches)\n \n                   when 'u' =>\n-                     Ptr := Ptr + 1;\n                      Ignore_Unrecognized_VWY_Switches := True;\n+                     Ptr := Ptr + 1;\n \n                   --  -gnateV (validity checks on parameters)\n \n@@ -1154,12 +1155,6 @@ package body Switch.C is\n                   Suppress_Options.Overflow_Mode_Assertions := Strict;\n                end if;\n \n-            --  -gnatP (periodic poll)\n-\n-            when 'P' =>\n-               Ptr := Ptr + 1;\n-               Polling_Required := True;\n-\n             --  -gnatq (don't quit)\n \n             when 'q' =>"}, {"sha": "0be05aec9c900f15f5efd2de83fbe4bc34d04034", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -655,12 +655,6 @@ package body Targparm is\n             Opt.Partition_Elaboration_Policy_Sloc := System_Location;\n             goto Line_Loop_Continue;\n \n-         --  Polling (On)\n-\n-         elsif Looking_At_Skip (\"pragma Polling (On);\") then\n-            Opt.Polling_Required := True;\n-            goto Line_Loop_Continue;\n-\n          --  Queuing Policy\n \n          elsif Looking_At_Skip (\"pragma Queuing_Policy (\") then"}, {"sha": "60b23679d566483fa88a6f7d98665a0a99385035", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -101,9 +101,6 @@ package Targparm is\n    --  policy name, and Opt.Task_Dispatching_Policy_Sloc is set to\n    --  System_Location.\n \n-   --  If a pragma Polling (On) appears, then the flag Opt.Polling_Required\n-   --  is set to True.\n-\n    --  If a pragma Detect_Blocking appears, then the flag Opt.Detect_Blocking\n    --  is set to True.\n "}, {"sha": "f9864842d527cbe8cea0ee60d8e1577db2906e49", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2341c8a96dbef8a6cbc2ce02acf17e6710457f4e/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=2341c8a96dbef8a6cbc2ce02acf17e6710457f4e", "patch": "@@ -378,11 +378,6 @@ begin\n    Write_Switch_Char (\"p\");\n    Write_Line (\"Suppress all checks\");\n \n-   --  Line for -gnatP switch\n-\n-   Write_Switch_Char (\"P\");\n-   Write_Line (\"Generate periodic calls to System.Polling.Poll\");\n-\n    --  Line for -gnatq switch\n \n    Write_Switch_Char (\"q\");"}]}