{"sha": "77afec780ae6193a5e4d3895d3169b150e4b556d", "node_id": "C_kwDOANBUbNoAKDc3YWZlYzc4MGFlNjE5M2E1ZTRkMzg5NWQzMTY5YjE1MGU0YjU1NmQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T08:00:03Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T10:23:21Z"}, "message": "privacy: visibility: Add base for ModuleVisibility resolver", "tree": {"sha": "3bc15d2a100659cd559465fb4af633881ad38fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bc15d2a100659cd559465fb4af633881ad38fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77afec780ae6193a5e4d3895d3169b150e4b556d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77afec780ae6193a5e4d3895d3169b150e4b556d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77afec780ae6193a5e4d3895d3169b150e4b556d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77afec780ae6193a5e4d3895d3169b150e4b556d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca59275cc9f2d8e1fe59c684d48b9dbae1e30376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca59275cc9f2d8e1fe59c684d48b9dbae1e30376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca59275cc9f2d8e1fe59c684d48b9dbae1e30376"}], "stats": {"total": 224, "additions": 224, "deletions": 0}, "files": [{"sha": "d25f403fbfbd2632e3614f67b7aabfbe95409386", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -93,6 +93,7 @@ GRS_OBJS = \\\n     rust/rust-privacy-check.o \\\n     rust/rust-privacy-ctx.o \\\n     rust/rust-reachability.o \\\n+    rust/rust-visibility-resolver.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\"}, {"sha": "ccfed2c1a0f963d31f7cc61e3beaa885efcfbe2c", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -19,6 +19,8 @@\n #include \"rust-privacy-check.h\"\n #include \"rust-reachability.h\"\n #include \"rust-hir-type-check.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-visibility-resolver.h\"\n \n extern bool\n saw_errors (void);\n@@ -29,10 +31,16 @@ void\n Resolver::resolve (HIR::Crate &crate)\n {\n   PrivacyContext ctx;\n+  auto mappings = Analysis::Mappings::get ();\n+\n+  auto resolver = VisibilityResolver (*mappings);\n+  resolver.go (crate);\n+\n   auto ty_ctx = ::Rust::Resolver::TypeCheckContext::get ();\n   auto visitor = ReachabilityVisitor (ctx, *ty_ctx);\n \n   const auto &items = crate.items;\n+\n   for (auto &item : items)\n     {\n       if (item->get_hir_kind () == HIR::Node::VIS_ITEM)"}, {"sha": "a94d3c80b4d5adeb5cd831366aefcf91cd179c3e", "filename": "gcc/rust/privacy/rust-privacy-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -30,11 +30,14 @@ class ModuleVisibility\n public:\n   enum Type\n   {\n+    Unknown,\n     Private,\n     Public,\n     Restricted,\n   };\n \n+  ModuleVisibility () : kind (Unknown), module_id (UNKNOWN_DEFID) {}\n+\n   static ModuleVisibility create_restricted (DefId module_id)\n   {\n     return ModuleVisibility (Type::Restricted, module_id);"}, {"sha": "e0bc4f5f0b877c8e4de7df6a41616af0e57c27e6", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -46,6 +46,8 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n     : current_level (ReachLevel::Reachable), ctx (ctx), ty_ctx (ty_ctx)\n   {}\n \n+  // FIXME: Add `go` method which takes an `HIR::Crate &` as argument\n+\n   /**\n    * Visit all the predicates of all the generic types of a given item, marking\n    * them as reachable or not."}, {"sha": "2ca3bd75174ec4f44e7a52ba24aa1cce971cd82f", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -0,0 +1,121 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-visibility-resolver.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings)\n+  : mappings (mappings)\n+{\n+  // FIXME: Insert a top module (crate) inside the module_stack\n+  // FIXME: Insert the visibility of the crate in the mappings maybe?\n+}\n+\n+void\n+VisibilityResolver::go (HIR::Crate &crate)\n+{\n+  for (auto &item : crate.items)\n+    {\n+      if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+}\n+\n+bool\n+VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n+\t\t\t\t\tModuleVisibility &to_resolve)\n+{\n+  return false;\n+}\n+\n+DefId\n+VisibilityResolver::peek_module ()\n+{\n+  // We're always inserting a top module - the crate\n+  // But we have to check otherwise `.back()` is UB\n+  if (module_stack.empty ())\n+    gcc_unreachable ();\n+\n+  return module_stack.back ();\n+}\n+\n+void\n+VisibilityResolver::visit (HIR::Module &mod)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ExternCrate &crate)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::UseDeclaration &use_decl)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Function &func)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::TypeAlias &type_alias)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::StructStruct &struct_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::TupleStruct &tuple_struct)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Enum &enum_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Union &union_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ConstantItem &const_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::StaticItem &static_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Trait &trait)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ImplBlock &impl)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ExternBlock &block)\n+{}\n+\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "394c3d4c4149129a7802504cac0b2ff4815216a8", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77afec780ae6193a5e4d3895d3169b150e4b556d/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=77afec780ae6193a5e4d3895d3169b150e4b556d", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_VISIBILITY_H\n+#define RUST_VISIBILITY_H\n+\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-visitor.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+class VisibilityResolver : public HIR::HIRVisItemVisitor\n+{\n+public:\n+  VisibilityResolver (Analysis::Mappings &mappings);\n+\n+  /**\n+   * Perform visibility resolving on an entire crate\n+   */\n+  void go (HIR::Crate &crate);\n+\n+  /**\n+   * Resolve the visibility of an item to its ModuleVisibility. This function\n+   * emits errors if necessary. The contents of the to_resolve parameter will be\n+   * overwritten on success.\n+   *\n+   * @param visibility Visibility of the item to resolve\n+   * @param to_resolve ModuleVisibility reference to fill on success.\n+   *\n+   * @return false on error, true if the resolving was successful.\n+   */\n+  bool resolve_visibility (const HIR::Visibility &visibility,\n+\t\t\t   ModuleVisibility &to_resolve);\n+\n+  /**\n+   * Get the DefId of the parent module we are currently visiting.\n+   *\n+   * @return UNKNOWN_DEFID if the module stack is empty, a valid `DefId`\n+   * otherwise\n+   */\n+  DefId peek_module ();\n+\n+  virtual void visit (HIR::Module &mod);\n+  virtual void visit (HIR::ExternCrate &crate);\n+  virtual void visit (HIR::UseDeclaration &use_decl);\n+  virtual void visit (HIR::Function &func);\n+  virtual void visit (HIR::TypeAlias &type_alias);\n+  virtual void visit (HIR::StructStruct &struct_item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::Enum &enum_item);\n+  virtual void visit (HIR::Union &union_item);\n+  virtual void visit (HIR::ConstantItem &const_item);\n+  virtual void visit (HIR::StaticItem &static_item);\n+  virtual void visit (HIR::Trait &trait);\n+  virtual void visit (HIR::ImplBlock &impl);\n+  virtual void visit (HIR::ExternBlock &block);\n+\n+private:\n+  /* Mappings to insert visibilities into */\n+  Analysis::Mappings &mappings;\n+\n+  /* Stack of modules visited by this visitor */\n+  std::vector<DefId> module_stack;\n+};\n+\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_VISIBILITY_H"}]}