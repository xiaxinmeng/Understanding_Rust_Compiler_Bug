{"sha": "d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzYjM0ZTk4YWYxYTU5ZWY0YjRjN2VkOTA1ODIyN2JjOGY5NzMxNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-08-17T15:05:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-08-17T15:05:43Z"}, "message": "cxxabi.h (__cxa_vec_new2, [...]): Declare.\n\n\t* inc/cxxabi.h (__cxa_vec_new2, __cxa_vec_new3): Declare.\n\t(__cxa_vec_delete2, __cxa_vec_delete3): Declare.\n\t* vec.cc (__cxa_vec_new2, __cxa_vec_new3): Implement.\n\t(__cxa_vec_delete2, __cxa_vec_delete3): Implement.\n\t(__cxa_vec_new): Use __cxa_vec_new2.\n\t(__cxa_vec_delete): Use __cxa_vec_delete2.\n\nFrom-SVN: r35761", "tree": {"sha": "f506e6d5babf8445261e0e3fe88c592415f10ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f506e6d5babf8445261e0e3fe88c592415f10ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/comments", "author": null, "committer": null, "parents": [{"sha": "2f1b80afded2f0dce530ea8733ebc75a1ea5fe61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1b80afded2f0dce530ea8733ebc75a1ea5fe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1b80afded2f0dce530ea8733ebc75a1ea5fe61"}], "stats": {"total": 142, "additions": 135, "deletions": 7}, "files": [{"sha": "e2248aa7b250b71ef4802d6862da8add14d090f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "patch": "@@ -1,3 +1,12 @@\n+2000-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* inc/cxxabi.h (__cxa_vec_new2, __cxa_vec_new3): Declare.\n+\t(__cxa_vec_delete2, __cxa_vec_delete3): Declare.\n+\t* vec.cc (__cxa_vec_new2, __cxa_vec_new3): Implement.\n+\t(__cxa_vec_delete2, __cxa_vec_delete3): Implement.\n+\t(__cxa_vec_new): Use __cxa_vec_new2.\n+\t(__cxa_vec_delete): Use __cxa_vec_delete2.\n+\n 2000-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* vec.cc (__cxa_vec_new): Set \"C\" linkage."}, {"sha": "908d7c467fec0b25c5bc20e955090e5a7fbb454e", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "patch": "@@ -437,6 +437,24 @@ void *__cxa_vec_new (__SIZE_TYPE__ __element_count,\n                      void (*__constructor) (void *),\n                      void (*__destructor) (void *));\n \n+extern \"C\"\n+void *__cxa_vec_new2 (__SIZE_TYPE__ __element_count,\n+                      __SIZE_TYPE__ __element_size,\n+                      __SIZE_TYPE__ __padding_size,\n+                      void (*__constructor) (void *),\n+                      void (*__destructor) (void *),\n+                      void *(*__alloc) (__SIZE_TYPE__),\n+                      void (*__dealloc) (void *));\n+\n+extern \"C\"\n+void *__cxa_vec_new3 (__SIZE_TYPE__ __element_count,\n+                      __SIZE_TYPE__ __element_size,\n+                      __SIZE_TYPE__ __padding_size,\n+                      void (*__constructor) (void *),\n+                      void (*__destructor) (void *),\n+                      void *(*__alloc) (__SIZE_TYPE__),\n+                      void (*__dealloc) (void *, __SIZE_TYPE__));\n+\n /* construct array */\n extern \"C\"\n void __cxa_vec_ctor (void *__array_address,\n@@ -467,6 +485,20 @@ void __cxa_vec_delete (void *__array_address,\n                        __SIZE_TYPE__ __padding_size,\n                        void (*__destructor) (void *));\n \n+extern \"C\"\n+void __cxa_vec_delete2 (void *__array_address,\n+                        __SIZE_TYPE__ __element_size,\n+                        __SIZE_TYPE__ __padding_size,\n+                        void (*__destructor) (void *),\n+                        void (*__dealloc) (void *));\n+                  \n+extern \"C\"\n+void __cxa_vec_delete3 (void *__array_address,\n+                        __SIZE_TYPE__ __element_size,\n+                        __SIZE_TYPE__ __padding_size,\n+                        void (*__destructor) (void *),\n+                        void (*__dealloc) (void *, __SIZE_TYPE__));\n+                  \n /* demangling routines */\n \n extern \"C\" "}, {"sha": "966feb486de49a7f124dd1b9263d6e60e7681454", "filename": "gcc/cp/vec.cc", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13b34e98af1a59ef4b4c7ed9058227bc8f97314/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=d13b34e98af1a59ef4b4c7ed9058227bc8f97314", "patch": "@@ -46,9 +46,23 @@ __cxa_vec_new (size_t element_count,\n                size_t padding_size,\n                void (*constructor) (void *),\n                void (*destructor) (void *))\n+{\n+  return __cxa_vec_new2 (element_count, element_size, padding_size,\n+                         constructor, destructor,\n+                         &operator new[], &operator delete []);\n+}\n+\n+extern \"C\" void *\n+__cxa_vec_new2 (size_t element_count,\n+                size_t element_size,\n+                size_t padding_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *),\n+                void *(*alloc) (size_t),\n+                void (*dealloc) (void *))\n {\n   size_t size = element_count * element_size + padding_size;\n-  char *base = static_cast <char *> (operator new[] (size));\n+  char *base = static_cast <char *> (alloc (size));\n   \n   if (padding_size)\n     {\n@@ -62,8 +76,39 @@ __cxa_vec_new (size_t element_count,\n     }\n   catch (...)\n     {\n-      // operator delete [] cannot throw, so no need to protect it\n-      operator delete[] (base - padding_size);\n+      __uncatch_exception ();\n+      dealloc (base - padding_size);\n+      throw;\n+    }\n+  return base;\n+}\n+\n+extern \"C\" void *\n+__cxa_vec_new3 (size_t element_count,\n+                size_t element_size,\n+                size_t padding_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *),\n+                void *(*alloc) (size_t),\n+                void (*dealloc) (void *, size_t))\n+{\n+  size_t size = element_count * element_size + padding_size;\n+  char *base = static_cast <char *> (alloc (size));\n+  \n+  if (padding_size)\n+    {\n+      base += padding_size;\n+      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+    }\n+  try\n+    {\n+      __cxa_vec_ctor (base, element_count, element_size,\n+                      constructor, destructor);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      dealloc (base - padding_size, size);\n       throw;\n     }\n   return base;\n@@ -150,7 +195,7 @@ __cxa_vec_dtor (void *array_address,\n         {\n           if (unwinding)\n             // [except.ctor]/3 If a destructor called during stack unwinding\n-            // exists with an exception, terminate is called.\n+            // exits with an exception, terminate is called.\n             std::terminate ();\n           __uncatch_exception ();\n           __cxa_vec_dtor (array_address, ix, element_size, destructor);\n@@ -165,26 +210,68 @@ __cxa_vec_delete (void *array_address,\n                   size_t element_size,\n                   size_t padding_size,\n                   void (*destructor) (void *))\n+{\n+  __cxa_vec_delete2 (array_address, element_size, padding_size,\n+                     destructor,\n+                     &operator delete []);\n+}\n+\n+extern \"C\" void\n+__cxa_vec_delete2 (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *),\n+                  void (*dealloc) (void *))\n+{\n+  char *base = static_cast <char *> (array_address);\n+  \n+  if (padding_size)\n+    {\n+      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      base -= padding_size;\n+      try\n+        {\n+          __cxa_vec_dtor (array_address, element_count, element_size,\n+                          destructor);\n+        }\n+      catch (...)\n+        {\n+          __uncatch_exception ();\n+          dealloc (base);\n+          throw;\n+        }\n+    }\n+  dealloc (base);\n+}\n+\n+extern \"C\" void\n+__cxa_vec_delete3 (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *),\n+                  void (*dealloc) (void *, size_t))\n {\n   char *base = static_cast <char *> (array_address);\n+  size_t size = 0;\n   \n   if (padding_size)\n     {\n       size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n       base -= padding_size;\n+      size = element_count * element_size + padding_size;\n       try\n         {\n           __cxa_vec_dtor (array_address, element_count, element_size,\n                           destructor);\n         }\n       catch (...)\n         {\n-          // operator delete [] cannot throw, so no need to protect it\n-          operator delete[] (base);\n+          __uncatch_exception ();\n+          dealloc (base, size);\n           throw;\n         }\n     }\n-  operator delete[] (base);\n+  dealloc (base, size);\n }\n \n } // namespace __cxxabiv1"}]}