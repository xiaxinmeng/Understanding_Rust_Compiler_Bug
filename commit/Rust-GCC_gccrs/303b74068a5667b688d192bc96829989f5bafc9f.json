{"sha": "303b74068a5667b688d192bc96829989f5bafc9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzYjc0MDY4YTU2NjdiNjg4ZDE5MmJjOTY4Mjk5ODlmNWJhZmM5Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-18T12:55:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-18T12:55:04Z"}, "message": "re PR c++/11957 (wrong \"warning: statement has no effect\")\n\ncp:\n\tPR c++/11957\n\t* cp-tree.h (finish_stmt_expr): Add bool parameter.\n\t* init.c (finish_init_stmts): Pass true to finish_stmt_expr. Don't\n\tadjust the stmt_expr here.\n\t(build_vec_init): Use finish_stmt_expr_expr, convert result to\n\tarray type.\n\t* parser.c (cp_parser_primar_expression): Adjust finish_stmt_expr\n\tcall.\n\t* pt.c (tsubst_copy): Likewise.\n\t* semantics.c (finish_stmt_expr): Add parameter.\ntestsuite:\n\tPR c++/11957\n\t* g++.dg/warn/noeffect1.C: New test.\n\nFrom-SVN: r70541", "tree": {"sha": "648c5a079b6d873effc48807fb0fab2d455cdd19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/648c5a079b6d873effc48807fb0fab2d455cdd19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303b74068a5667b688d192bc96829989f5bafc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303b74068a5667b688d192bc96829989f5bafc9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303b74068a5667b688d192bc96829989f5bafc9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303b74068a5667b688d192bc96829989f5bafc9f/comments", "author": null, "committer": null, "parents": [{"sha": "a2507277ed143a8f75f5a60f43541fc3d714aede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2507277ed143a8f75f5a60f43541fc3d714aede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2507277ed143a8f75f5a60f43541fc3d714aede"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "732540ebd19c6f69c356b42ab9606794fc6185ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -1,5 +1,16 @@\n 2003-08-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/11957\n+\t* cp-tree.h (finish_stmt_expr): Add bool parameter.\n+\t* init.c (finish_init_stmts): Pass true to finish_stmt_expr. Don't\n+\tadjust the stmt_expr here.\n+\t(build_vec_init): Use finish_stmt_expr_expr, convert result to\n+\tarray type.\n+\t* parser.c (cp_parser_primar_expression): Adjust finish_stmt_expr\n+\tcall.\n+\t* pt.c (tsubst_copy): Likewise.\n+\t* semantics.c (finish_stmt_expr): Add parameter.\n+\n \t* pt.c (instantiate_class_template): Push to class's scope before\n \ttsubsting base.\n "}, {"sha": "43655b570f4ab505511b270cb52703d141ce0ad6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -4102,7 +4102,7 @@ extern tree finish_parenthesized_expr           (tree);\n extern tree finish_non_static_data_member       (tree, tree, tree);\n extern tree begin_stmt_expr                     (void);\n extern tree finish_stmt_expr_expr \t\t(tree);\n-extern tree finish_stmt_expr                    (tree);\n+extern tree finish_stmt_expr                    (tree, bool);\n extern tree perform_koenig_lookup               (tree, tree);\n extern tree finish_call_expr                    (tree, tree, bool);\n extern tree finish_increment_expr               (tree, enum tree_code);"}, {"sha": "0cd7270ca3784ef547b90e8fa2bed2b6eca367c2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -85,9 +85,7 @@ finish_init_stmts (bool is_global, tree stmt_expr, tree compound_stmt)\n {  \n   finish_compound_stmt (compound_stmt);\n   \n-  stmt_expr = finish_stmt_expr (stmt_expr);\n-  STMT_EXPR_NO_SCOPE (stmt_expr) = true;\n-  TREE_USED (stmt_expr) = 1;\n+  stmt_expr = finish_stmt_expr (stmt_expr, true);\n \n   my_friendly_assert (!building_stmt_tree () == is_global, 20030726);\n   \n@@ -2478,7 +2476,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n     base = cp_convert (ptype, decay_conversion (base));\n \n   /* The code we are generating looks like:\n-\n+     ({\n        T* t1 = (T*) base;\n        T* rval = t1;\n        ptrdiff_t iterator = maxindex;\n@@ -2490,7 +2488,8 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n        } catch (...) {\n          ... destroy elements that were constructed ...\n        }\n-       return rval;\n+       rval;\n+     })\n        \n      We can omit the try and catch blocks if we know that the\n      initialization will never throw an exception, or if the array\n@@ -2662,18 +2661,22 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n \n       finish_compound_stmt (try_body);\n       finish_cleanup_try_block (try_block);\n-      e = build_vec_delete_1 (rval, m,\n-\t\t\t      type,\n-\t\t\t      sfk_base_destructor,\n+      e = build_vec_delete_1 (rval, m, type, sfk_base_destructor,\n \t\t\t      /*use_global_delete=*/0);\n       finish_cleanup (e, try_block);\n     }\n \n-  /* The value of the array initialization is the address of the\n-     first element in the array.  */\n-  finish_expr_stmt (rval);\n+  /* The value of the array initialization is the array itself, RVAL\n+     is a pointer to the first element.  */\n+  finish_stmt_expr_expr (rval);\n \n   stmt_expr = finish_init_stmts (is_global, stmt_expr, compound_stmt);\n+\n+  /* Now convert make the result have the correct type. */\n+  atype = build_pointer_type (atype);\n+  stmt_expr = build1 (NOP_EXPR, atype, stmt_expr);\n+  stmt_expr = build_indirect_ref (stmt_expr, NULL);\n+  \n   current_stmt_tree ()->stmts_are_full_exprs_p = destroy_temps;\n   return stmt_expr;\n }"}, {"sha": "2e5e4dd54abb755de1be019c3cbe0c9e62a2a298", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -2270,7 +2270,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    /* Parse the compound-statement.  */\n \t    cp_parser_compound_statement (parser, true);\n \t    /* Finish up.  */\n-\t    expr = finish_stmt_expr (expr);\n+\t    expr = finish_stmt_expr (expr, false);\n \t  }\n \telse\n \t  {"}, {"sha": "083060329d26e2db6eb32893b7b63c852e9cdf6e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -7343,7 +7343,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  \n \t  tsubst_expr (STMT_EXPR_STMT (t), args,\n \t\t       complain | tf_stmt_expr_cmpd, in_decl);\n-\t  return finish_stmt_expr (stmt_expr);\n+\t  return finish_stmt_expr (stmt_expr, false);\n \t}\n       \n       return t;"}, {"sha": "2997237b06ae6a6d810f67db4e33dd06effd0151", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303b74068a5667b688d192bc96829989f5bafc9f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=303b74068a5667b688d192bc96829989f5bafc9f", "patch": "@@ -1405,7 +1405,7 @@ begin_stmt_expr (void)\n   last_expr_type = NULL_TREE;\n   \n   keep_next_level (1);\n-  \n+\n   return last_tree; \n }\n \n@@ -1469,13 +1469,12 @@ finish_stmt_expr_expr (tree expr)\n   return result;\n }\n \n-/* Finish a statement-expression.  RTL_EXPR should be the value\n-   returned by the previous begin_stmt_expr; EXPR is the\n-   statement-expression.  Returns an expression representing the\n-   statement-expression.  */\n+/* Finish a statement-expression.  EXPR should be the value returned\n+   by the previous begin_stmt_expr.  Returns an expression\n+   representing the statement-expression.  */\n \n tree \n-finish_stmt_expr (tree rtl_expr)\n+finish_stmt_expr (tree rtl_expr, bool has_no_scope)\n {\n   tree result;\n   tree result_stmt = last_expr_type;\n@@ -1496,6 +1495,7 @@ finish_stmt_expr (tree rtl_expr)\n   \n   result = build_min (STMT_EXPR, type, last_tree);\n   TREE_SIDE_EFFECTS (result) = 1;\n+  STMT_EXPR_NO_SCOPE (result) = has_no_scope;\n   \n   last_expr_type = NULL_TREE;\n   "}]}