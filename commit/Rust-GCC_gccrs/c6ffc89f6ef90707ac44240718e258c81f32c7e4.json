{"sha": "c6ffc89f6ef90707ac44240718e258c81f32c7e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmZmM4OWY2ZWY5MDcwN2FjNDQyNDA3MThlMjU4YzgxZjMyYzdlNA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-04-23T09:53:59Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-04-23T10:00:32Z"}, "message": "Modify the MVE polymorphic variant arguments to match the MVE intrinsic definition.\n\nWhen MVE intrinsic's are called, few implicit typecasting are done on the formal arguments to match the intrinsic parameters.\nBut when same intrinsics are called through MVE polymorphic variants, _Generic feature used here does strict type checking and fails to match the exact intrinsic.\nThis patch corrects the behaviour of polymorphic variants and match the expected intrinsic by explicitly typecasting the polymorphic variant's arguments.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nRegression tested on arm-none-eabi and found no regressions.\n\nOk for trunk?\n\nThanks,\nSrinath.\n\ngcc/ChangeLog:\n\n2020-04-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (__arm_vbicq_n_u16): Modify function parameter's\n\tdatatype.\n\t(__arm_vbicq_n_s16): Likewise.\n\t(__arm_vbicq_n_u32): Likewise.\n\t(__arm_vbicq_n_s32): Likewise.\n\t(__arm_vbicq): Likewise.\n\t(__arm_vbicq_n_s16): Modify MVE polymorphic variant argument's datatype.\n\t(__arm_vbicq_n_s32): Likewise.\n\t(__arm_vbicq_n_u16): Likewise.\n\t(__arm_vbicq_n_u32): Likewise.\n\t(__arm_vdupq_m_n_s8): Likewise.\n\t(__arm_vdupq_m_n_s16): Likewise.\n\t(__arm_vdupq_m_n_s32): Likewise.\n\t(__arm_vdupq_m_n_u8): Likewise.\n\t(__arm_vdupq_m_n_u16): Likewise.\n\t(__arm_vdupq_m_n_u32): Likewise.\n\t(__arm_vdupq_m_n_f16): Likewise.\n\t(__arm_vdupq_m_n_f32): Likewise.\n\t(__arm_vldrhq_gather_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_f16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_f16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_f16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_f16): Likewise.\n\t(__arm_vldrwq_gather_offset_s32): Likewise.\n\t(__arm_vldrwq_gather_offset_u32): Likewise.\n\t(__arm_vldrwq_gather_offset_f32): Likewise.\n\t(__arm_vldrwq_gather_offset_z_s32): Likewise.\n\t(__arm_vldrwq_gather_offset_z_u32): Likewise.\n\t(__arm_vldrwq_gather_offset_z_f32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_s32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_u32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_f32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_z_s32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_z_u32): Likewise.\n\t(__arm_vldrwq_gather_shifted_offset_z_f32): Likewise.\n\t(__arm_vdwdupq_x_n_u8): Likewise.\n\t(__arm_vdwdupq_x_n_u16): Likewise.\n\t(__arm_vdwdupq_x_n_u32): Likewise.\n\t(__arm_viwdupq_x_n_u8): Likewise.\n\t(__arm_viwdupq_x_n_u16): Likewise.\n\t(__arm_viwdupq_x_n_u32): Likewise.\n\t(__arm_vidupq_x_n_u8): Likewise.\n\t(__arm_vddupq_x_n_u8): Likewise.\n\t(__arm_vidupq_x_n_u16): Likewise.\n\t(__arm_vddupq_x_n_u16): Likewise.\n\t(__arm_vidupq_x_n_u32): Likewise.\n\t(__arm_vddupq_x_n_u32): Likewise.\n\t(__arm_vldrdq_gather_offset_s64): Likewise.\n\t(__arm_vldrdq_gather_offset_u64): Likewise.\n\t(__arm_vldrdq_gather_offset_z_s64): Likewise.\n\t(__arm_vldrdq_gather_offset_z_u64): Likewise.\n\t(__arm_vldrdq_gather_shifted_offset_s64): Likewise.\n\t(__arm_vldrdq_gather_shifted_offset_u64): Likewise.\n\t(__arm_vldrdq_gather_shifted_offset_z_s64): Likewise.\n\t(__arm_vldrdq_gather_shifted_offset_z_u64): Likewise.\n\t(__arm_vidupq_m_n_u8): Likewise.\n\t(__arm_vidupq_m_n_u16): Likewise.\n\t(__arm_vidupq_m_n_u32): Likewise.\n\t(__arm_vddupq_m_n_u8): Likewise.\n\t(__arm_vddupq_m_n_u16): Likewise.\n\t(__arm_vddupq_m_n_u32): Likewise.\n\t(__arm_vidupq_n_u16): Likewise.\n\t(__arm_vidupq_n_u32): Likewise.\n\t(__arm_vidupq_n_u8): Likewise.\n\t(__arm_vddupq_n_u16): Likewise.\n\t(__arm_vddupq_n_u32): Likewise.\n\t(__arm_vddupq_n_u8): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_s64.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_u64.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_f16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_f16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_f16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_f16.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s16.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s32.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u16.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u32.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_f32.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_s32.c\n\t: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_u32.c\n\t: Likewise.", "tree": {"sha": "2a83a8c2ac0ef227b275cc9a8a37b766feb02c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a83a8c2ac0ef227b275cc9a8a37b766feb02c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6ffc89f6ef90707ac44240718e258c81f32c7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ffc89f6ef90707ac44240718e258c81f32c7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ffc89f6ef90707ac44240718e258c81f32c7e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ffc89f6ef90707ac44240718e258c81f32c7e4/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c2273714eb14bf8f6ba052e8c0e26c25709bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c2273714eb14bf8f6ba052e8c0e26c25709bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c2273714eb14bf8f6ba052e8c0e26c25709bc9"}], "stats": {"total": 1122, "additions": 1004, "deletions": 118}, "files": [{"sha": "5f299e463db889825c5e9edd854df0b1b027f42d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -1,3 +1,88 @@\n+2020-04-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vbicq_n_u16): Modify function parameter's\n+\tdatatype.\n+\t(__arm_vbicq_n_s16): Likewise.\n+\t(__arm_vbicq_n_u32): Likewise.\n+\t(__arm_vbicq_n_s32): Likewise.\n+\t(__arm_vbicq): Likewise.\n+\t(__arm_vbicq_n_s16): Modify MVE polymorphic variant argument's datatype.\n+\t(__arm_vbicq_n_s32): Likewise.\n+\t(__arm_vbicq_n_u16): Likewise.\n+\t(__arm_vbicq_n_u32): Likewise.\n+\t(__arm_vdupq_m_n_s8): Likewise.\n+\t(__arm_vdupq_m_n_s16): Likewise.\n+\t(__arm_vdupq_m_n_s32): Likewise.\n+\t(__arm_vdupq_m_n_u8): Likewise.\n+\t(__arm_vdupq_m_n_u16): Likewise.\n+\t(__arm_vdupq_m_n_u32): Likewise.\n+\t(__arm_vdupq_m_n_f16): Likewise.\n+\t(__arm_vdupq_m_n_f32): Likewise.\n+\t(__arm_vldrhq_gather_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_f16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_f16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_f16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_f16): Likewise.\n+\t(__arm_vldrwq_gather_offset_s32): Likewise.\n+\t(__arm_vldrwq_gather_offset_u32): Likewise.\n+\t(__arm_vldrwq_gather_offset_f32): Likewise.\n+\t(__arm_vldrwq_gather_offset_z_s32): Likewise.\n+\t(__arm_vldrwq_gather_offset_z_u32): Likewise.\n+\t(__arm_vldrwq_gather_offset_z_f32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_s32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_u32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_f32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_z_s32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_z_u32): Likewise.\n+\t(__arm_vldrwq_gather_shifted_offset_z_f32): Likewise.\n+\t(__arm_vdwdupq_x_n_u8): Likewise.\n+\t(__arm_vdwdupq_x_n_u16): Likewise.\n+\t(__arm_vdwdupq_x_n_u32): Likewise.\n+\t(__arm_viwdupq_x_n_u8): Likewise.\n+\t(__arm_viwdupq_x_n_u16): Likewise.\n+\t(__arm_viwdupq_x_n_u32): Likewise.\n+\t(__arm_vidupq_x_n_u8): Likewise.\n+\t(__arm_vddupq_x_n_u8): Likewise.\n+\t(__arm_vidupq_x_n_u16): Likewise.\n+\t(__arm_vddupq_x_n_u16): Likewise.\n+\t(__arm_vidupq_x_n_u32): Likewise.\n+\t(__arm_vddupq_x_n_u32): Likewise.\n+\t(__arm_vldrdq_gather_offset_s64): Likewise.\n+\t(__arm_vldrdq_gather_offset_u64): Likewise.\n+\t(__arm_vldrdq_gather_offset_z_s64): Likewise.\n+\t(__arm_vldrdq_gather_offset_z_u64): Likewise.\n+\t(__arm_vldrdq_gather_shifted_offset_s64): Likewise.\n+\t(__arm_vldrdq_gather_shifted_offset_u64): Likewise.\n+\t(__arm_vldrdq_gather_shifted_offset_z_s64): Likewise.\n+\t(__arm_vldrdq_gather_shifted_offset_z_u64): Likewise.\n+\t(__arm_vidupq_m_n_u8): Likewise.\n+\t(__arm_vidupq_m_n_u16): Likewise.\n+\t(__arm_vidupq_m_n_u32): Likewise.\n+\t(__arm_vddupq_m_n_u8): Likewise.\n+\t(__arm_vddupq_m_n_u16): Likewise.\n+\t(__arm_vddupq_m_n_u32): Likewise.\n+\t(__arm_vidupq_n_u16): Likewise.\n+\t(__arm_vidupq_n_u32): Likewise.\n+\t(__arm_vidupq_n_u8): Likewise.\n+\t(__arm_vddupq_n_u16): Likewise.\n+\t(__arm_vddupq_n_u32): Likewise.\n+\t(__arm_vddupq_n_u8): Likewise.\n+\n 2020-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* doc/install.texi (D-Specific Options): Document"}, {"sha": "1002512a98f9364403f66eba0e320fe5070bdc3a", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 118, "deletions": 118, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -6361,7 +6361,7 @@ __arm_vorrq_n_u16 (uint16x8_t __a, const int __imm)\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq_n_u16 (uint16x8_t __a, const int __imm)\n+__arm_vbicq_n_u16 (uint16x8_t __a, const uint16_t __imm)\n {\n   return __builtin_mve_vbicq_n_uv8hi (__a, __imm);\n }\n@@ -6473,7 +6473,7 @@ __arm_vorrq_n_s16 (int16x8_t __a, const int __imm)\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq_n_s16 (int16x8_t __a, const int __imm)\n+__arm_vbicq_n_s16 (int16x8_t __a, const int16_t __imm)\n {\n   return __builtin_mve_vbicq_n_sv8hi (__a, __imm);\n }\n@@ -6564,7 +6564,7 @@ __arm_vorrq_n_u32 (uint32x4_t __a, const int __imm)\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq_n_u32 (uint32x4_t __a, const int __imm)\n+__arm_vbicq_n_u32 (uint32x4_t __a, const uint32_t __imm)\n {\n   return __builtin_mve_vbicq_n_uv4si (__a, __imm);\n }\n@@ -6676,7 +6676,7 @@ __arm_vorrq_n_s32 (int32x4_t __a, const int __imm)\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq_n_s32 (int32x4_t __a, const int __imm)\n+__arm_vbicq_n_s32 (int32x4_t __a, const int32_t __imm)\n {\n   return __builtin_mve_vbicq_n_sv4si (__a, __imm);\n }\n@@ -23182,7 +23182,7 @@ __arm_vorrq (uint16x8_t __a, const int __imm)\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq (uint16x8_t __a, const int __imm)\n+__arm_vbicq (uint16x8_t __a, const uint16_t __imm)\n {\n  return __arm_vbicq_n_u16 (__a, __imm);\n }\n@@ -23294,7 +23294,7 @@ __arm_vorrq (int16x8_t __a, const int __imm)\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq (int16x8_t __a, const int __imm)\n+__arm_vbicq (int16x8_t __a, const int16_t __imm)\n {\n  return __arm_vbicq_n_s16 (__a, __imm);\n }\n@@ -23385,7 +23385,7 @@ __arm_vorrq (uint32x4_t __a, const int __imm)\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq (uint32x4_t __a, const int __imm)\n+__arm_vbicq (uint32x4_t __a, const uint32_t __imm)\n {\n  return __arm_vbicq_n_u32 (__a, __imm);\n }\n@@ -23497,7 +23497,7 @@ __arm_vorrq (int32x4_t __a, const int __imm)\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-__arm_vbicq (int32x4_t __a, const int __imm)\n+__arm_vbicq (int32x4_t __a, const int32_t __imm)\n {\n  return __arm_vbicq_n_s32 (__a, __imm);\n }\n@@ -35963,10 +35963,10 @@ extern void *__ARM_undef;\n #define __arm_vbicq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), (const int16_t) __p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), (const int32_t) __p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (const uint16_t) __p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (const uint32_t) __p1), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vbicq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vbicq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vbicq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -37103,14 +37103,14 @@ extern void *__ARM_undef;\n #define __arm_vdupq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vdupq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vdupq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), (int8_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), (int16_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), (int32_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), (uint8_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (uint16_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (uint32_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vdupq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), (float16_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vdupq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), (float32_t) __p1, p2));})\n \n #define __arm_vfmaq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37676,59 +37676,59 @@ extern void *__ARM_undef;\n \n #define __arm_vldrhq_gather_offset(p0,p1) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_f16 (__ARM_mve_coerce(p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_f16 (__ARM_mve_coerce1(p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n \n #define __arm_vldrhq_gather_offset_z(p0,p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_f16 (__ARM_mve_coerce(p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_f16 (__ARM_mve_coerce1(p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n \n #define __arm_vldrhq_gather_shifted_offset(p0,p1) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_f16 (__ARM_mve_coerce(p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_f16 (__ARM_mve_coerce1(p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t)));})\n \n #define __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_f16 (__ARM_mve_coerce(p0, float16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_f16 (__ARM_mve_coerce1(p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2));})\n \n #define __arm_vldrwq_gather_offset(p0,p1) ( \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce(p0, int32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce(p0, uint32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_offset_f32 (__ARM_mve_coerce(p0, float32_t const *), p1)))\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce1(p0, int32_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce1(p0, uint32_t *), p1), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_offset_f32 (__ARM_mve_coerce1(p0, float32_t *), p1)))\n \n #define __arm_vldrwq_gather_offset_z(p0,p1,p2) ( \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce(p0, int32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce(p0, uint32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_offset_z_f32 (__ARM_mve_coerce(p0, float32_t const *), p1, p2)))\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce1(p0, int32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce1(p0, uint32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_offset_z_f32 (__ARM_mve_coerce1(p0, float32_t *), p1, p2)))\n \n #define __arm_vldrwq_gather_shifted_offset(p0,p1) ( \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce(p0, int32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce(p0, uint32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_shifted_offset_f32 (__ARM_mve_coerce(p0, float32_t const *), p1)))\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce1(p0, int32_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce1(p0, uint32_t *), p1), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_shifted_offset_f32 (__ARM_mve_coerce1(p0, float32_t *), p1)))\n \n #define __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2) ( \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(p0, int32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(p0, uint32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_f32 (__ARM_mve_coerce(p0, float32_t const *), p1, p2)))\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce1(p0, int32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce1(p0, uint32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_f32 (__ARM_mve_coerce1(p0, float32_t *), p1, p2)))\n \n #define __arm_vst1q_p(p0,p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n@@ -38875,10 +38875,10 @@ extern void *__ARM_undef;\n #define __arm_vbicq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), (const int16_t) __p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), (const int32_t) __p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (const uint16_t) __p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (const uint32_t) __p1), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vbicq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vbicq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vbicq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -39338,12 +39338,12 @@ extern void *__ARM_undef;\n #define __arm_vdupq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2));})\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), (int8_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), (int16_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), (int32_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), (uint8_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (uint16_t) __p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (uint32_t) __p1, p2));})\n \n #define __arm_vmaxaq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -39849,51 +39849,51 @@ extern void *__ARM_undef;\n \n #define __arm_vldrhq_gather_offset(p0,p1) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n \n #define __arm_vldrhq_gather_offset_z(p0,p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n #define __arm_vldrhq_gather_shifted_offset(p0,p1) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n \n #define __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce1(p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce1(p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n #define __arm_vldrwq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1));})\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_s32 (__ARM_mve_coerce1(__p0, int32_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_u32 (__ARM_mve_coerce1(__p0, uint32_t *), p1));})\n \n #define __arm_vldrwq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2));})\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_offset_z_s32 (__ARM_mve_coerce1(__p0, int32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_offset_z_u32 (__ARM_mve_coerce1(__p0, uint32_t *), p1, p2));})\n \n #define __arm_vldrwq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1));})\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_s32 (__ARM_mve_coerce1(__p0, int32_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_u32 (__ARM_mve_coerce1(__p0, uint32_t *), p1));})\n \n #define __arm_vldrwq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2));})\n+  int (*)[__ARM_mve_type_int32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce1(__p0, int32_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce1(__p0, uint32_t *), p1, p2));})\n \n #define __arm_vst1q(p0,p1) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(p0)][__ARM_mve_typeid(__p1)])0, \\\n@@ -40563,62 +40563,62 @@ extern void *__ARM_undef;\n \n #define __arm_vdwdupq_x_u8(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u8 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u8 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_x_wb_u8 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_vdwdupq_x_u16(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u16 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u16 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_x_wb_u16 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_vdwdupq_x_u32(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u32 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vdwdupq_x_n_u32 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_x_wb_u32 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_viwdupq_x_u8(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u8 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u8 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_x_wb_u8 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_viwdupq_x_u16(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u16 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u16 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_x_wb_u16 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_viwdupq_x_u32(p1,p2,p3,p4) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u32 (__ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_viwdupq_x_n_u32 ((uint32_t) __p1, p2, p3, p4), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_x_wb_u32 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n \n #define __arm_vidupq_x_u8(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u8 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u8 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_x_wb_u8 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vddupq_x_u8(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u8 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u8 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_x_wb_u8 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vidupq_x_u16(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u16 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u16 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_x_wb_u16 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vddupq_x_u16(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u16 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u16 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_x_wb_u16 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vidupq_x_u32(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u32 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_x_n_u32 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_x_wb_u32 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vddupq_x_u32(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u32 (__ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_x_n_u32 ((uint32_t) __p1, p2, p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_x_wb_u32 (__ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vshrq_x(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n@@ -40708,20 +40708,20 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_base_wb_u64 (p0, p1, __ARM_mve_coerce(__p2, uint64x2_t)));})\n \n #define __arm_vldrdq_gather_offset(p0,p1) ( _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_offset_s64 (__ARM_mve_coerce(p0, int64_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_offset_u64 (__ARM_mve_coerce(p0, uint64_t const *), p1)))\n+  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_offset_s64 (__ARM_mve_coerce1(p0, int64_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_offset_u64 (__ARM_mve_coerce1(p0, uint64_t *), p1)))\n \n #define __arm_vldrdq_gather_offset_z(p0,p1,p2) ( _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_offset_z_s64 (__ARM_mve_coerce(p0, int64_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_offset_z_u64 (__ARM_mve_coerce(p0, uint64_t const *), p1, p2)))\n+  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_offset_z_s64 (__ARM_mve_coerce1(p0, int64_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_offset_z_u64 (__ARM_mve_coerce1(p0, uint64_t *), p1, p2)))\n \n #define __arm_vldrdq_gather_shifted_offset(p0,p1) ( _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_shifted_offset_s64 (__ARM_mve_coerce(p0, int64_t const *), p1), \\\n-  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_shifted_offset_u64 (__ARM_mve_coerce(p0, uint64_t const *), p1)))\n+  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_shifted_offset_s64 (__ARM_mve_coerce1(p0, int64_t *), p1), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_shifted_offset_u64 (__ARM_mve_coerce1(p0, uint64_t *), p1)))\n \n #define __arm_vldrdq_gather_shifted_offset_z(p0,p1,p2) ( _Generic( (int (*)[__ARM_mve_typeid(p0)])0, \\\n-  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_shifted_offset_z_s64 (__ARM_mve_coerce(p0, int64_t const *), p1, p2), \\\n-  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_shifted_offset_z_u64 (__ARM_mve_coerce(p0, uint64_t const *), p1, p2)))\n+  int (*)[__ARM_mve_type_int64_t_ptr]: __arm_vldrdq_gather_shifted_offset_z_s64 (__ARM_mve_coerce1(p0, int64_t *), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint64_t_ptr]: __arm_vldrdq_gather_shifted_offset_z_u64 (__ARM_mve_coerce1(p0, uint64_t *), p1, p2)))\n \n #define __arm_vadciq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -41448,51 +41448,51 @@ extern void *__ARM_undef;\n #define __arm_vidupq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n  __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n- int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n- int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n- int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), (uint32_t) __p1, p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (uint32_t) __p1, p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vidupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (uint32_t) __p1, p2, p3), \\\n  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vddupq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n  __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n- int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n- int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n- int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), (uint32_t) __p1, p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), (uint32_t) __p1, p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vddupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), (uint32_t) __p1, p2, p3), \\\n  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n \n #define __arm_vidupq_u16(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u16 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_vidupq_u32(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u32 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_vidupq_u8(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vidupq_n_u8 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_vddupq_u16(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u16 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_vddupq_u32(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u32 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_vddupq_u8(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n-  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_int_n]: __arm_vddupq_n_u8 ((uint32_t) __p0, p1), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n \n #define __arm_viwdupq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\"}, {"sha": "155878029254391301312683dd1f5d8edf9818af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8a9ed6327d32658ac7713ca387a9df10daeda064", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "fe4aceeea97755c4936d927f18e3be0e8488b70c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_m_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "05a68cbe559c8d9cfab5ada2724695100dcb37b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (int32_t a)\n+{\n+  return vddupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f702c4cdb0a61e541a5ffb930803efdbf89fc5cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_n_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (int32_t a)\n+{\n+  return vddupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f272056c4235752cf0e7420b86d7c7e3191d80b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (int32_t a)\n+{\n+  return vddupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "31e37827e60bddf2c90e977d7f0c1e201edbdda0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint16x8_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "9989d0b0f00fa45036cc98c45d46996155a8ff21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint32x4_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u32 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "19f1501fe4e9bb9c77029a64c847cb0ffb8c827a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vddupq_x_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint8x16_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u8 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "07ea2d7d14ce50256af2ebaedcdf72a1c74f308f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "9889b0b2b660934262f55d0d16bcf70628f1b8e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "13ad8d69e183ace39d98a3fc3f42312a41cd3f21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vdwdupq_x_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cbe998e2faa17a09e400986284e826470042e441", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c9aa5c661de5889e72dd5ee838e26faf07d86a1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint32x4_t\n+foo1 (uint32x4_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7b075744d9a81ae8e474df3098fc2d5385d54190", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_m_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a461a1e64b1b462dbeee9efd01f968a929474705", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (int32_t a)\n+{\n+  return vidupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c5b01a7ac90c4ccb81fee44db77489426d5d3bf8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_n_u32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint32x4_t\n+foo1 (int32_t a)\n+{\n+  return vidupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f963d51ac0f835cd0f8cadfe8cb31b8119c02044", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (int32_t a)\n+{\n+  return vidupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "aecd4be5e719fdfb5046c2543c97f4413bb3eea9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint16x8_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u16 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "d3d33053f92a1401611f9b2f3e7d08381e219aaa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint32x4_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f71953aeef4dc82358dcb797bbd4e98a5f3da5cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vidupq_x_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint8x16_t\n+foo1 (int32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u8 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "312966773e63ab0365ab15acfccf353d243c2d0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u16 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a5d758126d4dfd7401c0b388f33122ca7d1f7ef1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "aa4e7375d3930579916eddf4f72285f036f94c7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_viwdupq_x_n_u8.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo1 (int32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u8 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e5b635983bf255b318d3b440da9ba34a452d7d13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_s64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_s64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int64x2_t\n+foo1 (int64_t * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8d96527c6dfecaf66b963b6cf369a71c76df6090", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_u64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_u64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint64x2_t\n+foo1 (uint64_t * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e66e4465b19e6f6f2f933e9aacd84d7a401abf4a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_s64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_s64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int64x2_t\n+foo1 (int64_t * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7ca9590c12cbe07358902ff8ad2f16e484687c0b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_u64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_offset_z_u64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint64x2_t\n+foo1 (uint64_t * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "b8491680536eb993fdb67c210737f5abd28f8bff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_s64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_s64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int64x2_t\n+foo1 (int64_t * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "851d4a1f435a8049541b3851155ffd39cd6a3c14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_u64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_u64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint64x2_t\n+foo1 (uint64_t * base, uint64x2_t offset)\n+{\n+  return vldrdq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "586e38cfe43dbc67a8f1332f77b3b901cd54ca51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_s64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_s64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int64x2_t\n+foo1 (int64_t * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "dd6f482422f4019f8113b286c37c6aec642a3963", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_u64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrdq_gather_shifted_offset_z_u64.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint64x2_t\n+foo1 (uint64_t * base, uint64x2_t offset, mve_pred16_t p)\n+{\n+  return vldrdq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3c0ae4b4262d633853ef1323c674f89a5ed49e04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_f16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_f16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "bc7a51b38a5db8a8cbdbf2e90de2076d4c28c9a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t\n+foo1 (int16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "d6e830729951a09484e0f683e78ced8223d8d681", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int32x4_t\n+foo1 (int16_t * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "21b0b1cf52e81dc7a6bb996326cabef88de03dac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint16x8_t\n+foo1 (uint16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3a9c47e9c47d0dce9e3dbc5c858aa95783d2374b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint16_t * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e31d0bc05bb1669ed7351eaf39638ef9d961a576", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_f16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_f16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "6a40159be42ad83316235adb94319b2c04bf6b19", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t\n+foo1 (int16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "1d9a70db727a5c607db50258d8b41eb73f23deb1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int32x4_t\n+foo1 (int16_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8fedbef9aefe530f772b50c65df4a36a7e13a18c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (uint16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "db410437c023771c8791364d7a6052a96f3c2743", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_offset_z_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint16_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c12bd91a733c3fe6ca1c0c8434352470aee8464b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_f16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_f16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "df291626299f768268522c9ffd46da71704a144b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo1 (int16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "9bc6627accf5ebc2ab7c76496b1ddb2fc4940759", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo1 (int16_t * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c470871617dd18abbc6c65115eac64f20c22a887", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo1 (uint16_t * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "2d4fe4c1d25ecad323429ac752d87b3295987bb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint16_t * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "755540d93b6d828f1f52e77fe62551f506f14d4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_f16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_f16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "b9fc8d3242b34d2fe14fb4a8325c5d8d9c7cf5aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t\n+foo1 (int16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c65df114f1598a9de31e4e9f3d969f32ed614bac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int32x4_t\n+foo1 (int16_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8bb493bc6c04d7960a58b6e57c71000c6ef29046", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u16.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint16x8_t\n+foo1 (uint16_t * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cac933f0f365b79f3e23a9c2cd23234830aa3b04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrhq_gather_shifted_offset_z_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+uint32x4_t\n+foo1 (uint16_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "6d10e1ce9e877f1dfcd7a369d8f69e7deea06f5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_f32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_f32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "0f29a6a8aa173052ff8bb7eaa3a9edf4bd6d2aca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo1 (int32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "29e231757eca3554d7100ca3a5503ce7f39accd9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "77a949fc1a65be8f378e0e783c21c2e7271236ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_f32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_f32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "849783ab89fde33baf607e61c4b6ccd130e6a976", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo1 (int32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3fe47cbeab54ba4e21f32839d7f1b12b1a3b0e43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_offset_z_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "0d166348de5892d1fa07104cdb80a8b9e41e12fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_f32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_f32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "78e520b159e44941b5086966e6842d110a5b33ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo1 (int32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "6b8b72818d960257a332ffd6e7117b37d3bef0b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint32_t * base, uint32x4_t offset)\n+{\n+  return vldrwq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "db79e57a2f5a7c98cc2fbd1ebfaf20f7450a9749", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_f32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_f32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e060fee10ca1312f5b68052e9f8617e379cf25a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_s32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo1 (int32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "72446470ae3f704c449da07fa436e94041b4e2de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ffc89f6ef90707ac44240718e258c81f32c7e4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldrwq_gather_shifted_offset_z_u32.c?ref=c6ffc89f6ef90707ac44240718e258c81f32c7e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo1 (uint32_t * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrwq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}]}