{"sha": "96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkN2IxNWZmM2RlZDQ1YzQyNGIxYTI0MGE3ZGI2NGQzYWU5NzVlMw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-02T02:21:20Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-02T02:21:20Z"}, "message": "Start adding support for VIS 3.0 instructions.\n\ngcc/\n\n\t* config/sparc/sparc.opt (VIS3): New option.\n\t* doc/invoke.texi: Document it.\n\t* config/sparc/sparc.h: Force TARGET_VIS3 to zero if assembler is\n\tnot capable of such instructions.\n\t* config/sparc/sparc-c.c (sparc_target_macros): Define __VIS__\n\tto 0x300 when TARGET_VIS3.\n\t* config/sparc/sparc-modes.def: Create 16-byte vector modes.\n\t* config/sparc/sparc.md (UNSPEC_CMASK8, UNSPEC_CMASK16, UNSPEC_CMASK32,\n\tUNSPEC_FCHKSM16, UNSPEC_PDISTN, UNSPC_FUCMP): New unspecs.\n\t(V64N8, VASS): New mode iterators.\n\t(vis3_shift, vis3_addsub_ss): New code iterators.\n\t(vbits, vconstr): New mode attributes.\n\t(vis3_shift_insn, vis3_addsub_ss_insn): New code attributes.\n\t(cmask8<P:mode>_vis, cmask16<P:mode>_vis, cmask32<P:mode>_vis,\n\tfchksm16_vis, <vis3_shift_insn><vbits>_vis, pdistn<mode>_vis,\n\tfmean16_vis, fpadd64_vis, fpsub64_vis, <vis3_addsub_ss_insn><vbits>_vis,\n\tfucmp<code>8<P:mode>_vis): New VIS 3.0 instruction patterns.\n\t* config/sparc/sparc.c (sparc_option_override): Set MASK_VIS3 by\n\tdefault when targetting capable cpus.  TARGET_VIS3 implies\n\tTARGET_VIS2 and TARGET_VIS, and clear them when TARGET_FPU is\n\tdisabled.\n\t(sparc_vis_init_builtins): Emit new VIS 3.0 builtins.\n\t(sparc_fold_builtin): Do not eliminate cmask{8,16,32} when result\n\tis ignored.\n\t* config/sparc/visintrin.h (__vis_cmask8, __vis_cmask16,\n\t__vis_cmask32, __vis_fchksm16, __vis_fsll16, __vis_fslas16,\n\t__vis_fsrl16, __vis_fsra16, __vis_fsll32, __vis_fslas32,\n\t__vis_fsrl32, __vis_fsra32, __vis_pdistn, __vis_fmean16,\n\t__vis_fpadd64, __vis_fpsub64, __vis_fpadds16, __vis_fpadds16s,\n\t__vis_fpsubs16, __vis_fpsubs16s, __vis_fpadds32, __vis_fpadds32s,\n\t__vis_fpsubs32, __vis_fpsubs32s, __vis_fucmple8, __vis_fucmpne8,\n\t__vis_fucmpgt8, __vis_fucmpeq8): New VIS 3.0 interfaces.\n\t* doc/extend.texi: Document new VIS 3.0 builtins.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/cmask.c: New test.\n\t* gcc.target/sparc/fpadds.c: New test.\n\t* gcc.target/sparc/fshift.c: New test.\n\t* gcc.target/sparc/fucmp.c: New test.\n\t* gcc.target/sparc/vis3misc.c: New test.\n\nFrom-SVN: r179421", "tree": {"sha": "678e9f7f8529fb4e91e2480e8c8e5023253ce0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678e9f7f8529fb4e91e2480e8c8e5023253ce0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a5edb85c2cf7ef821807e16c0ba388c00d22f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a5edb85c2cf7ef821807e16c0ba388c00d22f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a5edb85c2cf7ef821807e16c0ba388c00d22f5e"}], "stats": {"total": 760, "additions": 745, "deletions": 15}, "files": [{"sha": "c6c8322e0aa6a2b7fa4e11f81e0c8525b93535a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -1,3 +1,39 @@\n+2011-10-01  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.opt (VIS3): New option.\n+\t* doc/invoke.texi: Document it.\n+\t* config/sparc/sparc.h: Force TARGET_VIS3 to zero if assembler is\n+\tnot capable of such instructions.\n+\t* config/sparc/sparc-c.c (sparc_target_macros): Define __VIS__\n+\tto 0x300 when TARGET_VIS3.\n+\t* config/sparc/sparc-modes.def: Create 16-byte vector modes.\n+\t* config/sparc/sparc.md (UNSPEC_CMASK8, UNSPEC_CMASK16, UNSPEC_CMASK32,\n+\tUNSPEC_FCHKSM16, UNSPEC_PDISTN, UNSPC_FUCMP): New unspecs.\n+\t(V64N8, VASS): New mode iterators.\n+\t(vis3_shift, vis3_addsub_ss): New code iterators.\n+\t(vbits, vconstr): New mode attributes.\n+\t(vis3_shift_insn, vis3_addsub_ss_insn): New code attributes.\n+\t(cmask8<P:mode>_vis, cmask16<P:mode>_vis, cmask32<P:mode>_vis,\n+\tfchksm16_vis, <vis3_shift_insn><vbits>_vis, pdistn<mode>_vis,\n+\tfmean16_vis, fpadd64_vis, fpsub64_vis, <vis3_addsub_ss_insn><vbits>_vis,\n+\tfucmp<code>8<P:mode>_vis): New VIS 3.0 instruction patterns.\n+\t* config/sparc/sparc.c (sparc_option_override): Set MASK_VIS3 by\n+\tdefault when targetting capable cpus.  TARGET_VIS3 implies\n+\tTARGET_VIS2 and TARGET_VIS, and clear them when TARGET_FPU is\n+\tdisabled.\n+\t(sparc_vis_init_builtins): Emit new VIS 3.0 builtins.\n+\t(sparc_fold_builtin): Do not eliminate cmask{8,16,32} when result\n+\tis ignored.\n+\t* config/sparc/visintrin.h (__vis_cmask8, __vis_cmask16,\n+\t__vis_cmask32, __vis_fchksm16, __vis_fsll16, __vis_fslas16,\n+\t__vis_fsrl16, __vis_fsra16, __vis_fsll32, __vis_fslas32,\n+\t__vis_fsrl32, __vis_fsra32, __vis_pdistn, __vis_fmean16,\n+\t__vis_fpadd64, __vis_fpsub64, __vis_fpadds16, __vis_fpadds16s,\n+\t__vis_fpsubs16, __vis_fpsubs16s, __vis_fpadds32, __vis_fpadds32s,\n+\t__vis_fpsubs32, __vis_fpsubs32s, __vis_fucmple8, __vis_fucmpne8,\n+\t__vis_fucmpgt8, __vis_fucmpeq8): New VIS 3.0 interfaces.\n+\t* doc/extend.texi: Document new VIS 3.0 builtins.\n+\n 2011-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ira-color.c (assign_hard_reg): Fix typo."}, {"sha": "c18797045aebafb760e8f75354579adbda571f49", "filename": "gcc/config/sparc/sparc-c.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-c.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -45,7 +45,12 @@ sparc_target_macros (void)\n       cpp_assert (parse_in, \"machine=sparc\");\n     }\n \n-  if (TARGET_VIS2)\n+  if (TARGET_VIS3)\n+    {\n+      cpp_define (parse_in, \"__VIS__=0x300\");\n+      cpp_define (parse_in, \"__VIS=0x300\");\n+    }\n+  else if (TARGET_VIS2)\n     {\n       cpp_define (parse_in, \"__VIS__=0x200\");\n       cpp_define (parse_in, \"__VIS=0x200\");"}, {"sha": "ed135ccc1b76527644a7699b0ef1152271581524", "filename": "gcc/config/sparc/sparc-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -43,5 +43,6 @@ CC_MODE (CCFP);\n CC_MODE (CCFPE);\n \n /* Vector modes.  */\n+VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI */\n VECTOR_MODES (INT, 4);        /*       V4QI V2HI */"}, {"sha": "4df9f6a8088f21866e828448a1b2f29838c2d6fa", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 131, "deletions": 11, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -776,9 +776,9 @@ sparc_option_override (void)\n     /* UltraSPARC T2 */\n     { MASK_ISA, MASK_V9|MASK_VIS2},\n     /* UltraSPARC T3 */\n-    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n     /* UltraSPARC T4 */\n-    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_VIS3|MASK_FMAF},\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -861,9 +861,13 @@ sparc_option_override (void)\n   if (TARGET_VIS2)\n     target_flags |= MASK_VIS;\n \n-  /* Don't allow -mvis, -mvis2, or -mfmaf if FPU is disabled.  */\n+  /* -mvis3 implies -mvis2 and -mvis */\n+  if (TARGET_VIS3)\n+    target_flags |= MASK_VIS2 | MASK_VIS;\n+\n+  /* Don't allow -mvis, -mvis2, -mvis3, or -mfmaf if FPU is disabled.  */\n   if (! TARGET_FPU)\n-    target_flags &= ~(MASK_VIS | MASK_VIS2 | MASK_FMAF);\n+    target_flags &= ~(MASK_VIS | MASK_VIS2 | MASK_VIS3 | MASK_FMAF);\n \n   /* -mvis assumes UltraSPARC+, so we are sure v9 instructions\n      are available.\n@@ -9196,6 +9200,10 @@ sparc_vis_init_builtins (void)\n   tree di_ftype_v8qi_v8qi_di = build_function_type_list (intDI_type_node,\n \t\t\t\t\t\t\t v8qi, v8qi,\n \t\t\t\t\t\t\t intDI_type_node, 0);\n+  tree di_ftype_v8qi_v8qi = build_function_type_list (intDI_type_node,\n+\t\t\t\t\t\t      v8qi, v8qi, 0);\n+  tree si_ftype_v8qi_v8qi = build_function_type_list (intSI_type_node,\n+\t\t\t\t\t\t      v8qi, v8qi, 0);\n   tree di_ftype_di_di = build_function_type_list (intDI_type_node,\n \t\t\t\t\t\t  intDI_type_node,\n \t\t\t\t\t\t  intDI_type_node, 0);\n@@ -9226,6 +9234,8 @@ sparc_vis_init_builtins (void)\n \t\t\t\t\t\t intDI_type_node, 0);\n   tree di_ftype_void = build_function_type_list (intDI_type_node,\n \t\t\t\t\t\t void_type_node, 0);\n+  tree void_ftype_si = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t intSI_type_node, 0);\n \n   /* Packing and expanding vectors.  */\n   def_builtin (\"__builtin_vis_fpack16\", CODE_FOR_fpack16_vis,\n@@ -9447,6 +9457,102 @@ sparc_vis_init_builtins (void)\n       def_builtin (\"__builtin_vis_bshuffledi\", CODE_FOR_bshuffledi_vis,\n \t\t   di_ftype_di_di);\n     }\n+\n+  if (TARGET_VIS3)\n+    {\n+      if (TARGET_ARCH64)\n+\t{\n+\t  def_builtin (\"__builtin_vis_cmask8\", CODE_FOR_cmask8di_vis,\n+\t\t       void_ftype_di);\n+\t  def_builtin (\"__builtin_vis_cmask16\", CODE_FOR_cmask16di_vis,\n+\t\t       void_ftype_di);\n+\t  def_builtin (\"__builtin_vis_cmask32\", CODE_FOR_cmask32di_vis,\n+\t\t       void_ftype_di);\n+\t}\n+      else\n+\t{\n+\t  def_builtin (\"__builtin_vis_cmask8\", CODE_FOR_cmask8si_vis,\n+\t\t       void_ftype_si);\n+\t  def_builtin (\"__builtin_vis_cmask16\", CODE_FOR_cmask16si_vis,\n+\t\t       void_ftype_si);\n+\t  def_builtin (\"__builtin_vis_cmask32\", CODE_FOR_cmask32si_vis,\n+\t\t       void_ftype_si);\n+\t}\n+\n+      def_builtin_const (\"__builtin_vis_fchksm16\", CODE_FOR_fchksm16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+\n+      def_builtin_const (\"__builtin_vis_fsll16\", CODE_FOR_fsll16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fslas16\", CODE_FOR_fslas16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fsrl16\", CODE_FOR_fsrl16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fsra16\", CODE_FOR_fsra16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fsll32\", CODE_FOR_fsll32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fslas32\", CODE_FOR_fslas32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fsrl32\", CODE_FOR_fsrl32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fsra32\", CODE_FOR_fsra32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+\n+      if (TARGET_ARCH64)\n+\tdef_builtin_const (\"__builtin_vis_pdistn\", CODE_FOR_pdistndi_vis,\n+\t\t\t   di_ftype_v8qi_v8qi);\n+      else\n+\tdef_builtin_const (\"__builtin_vis_pdistn\", CODE_FOR_pdistnsi_vis,\n+\t\t\t   si_ftype_v8qi_v8qi);\n+\n+      def_builtin_const (\"__builtin_vis_fmean16\", CODE_FOR_fmean16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fpadd64\", CODE_FOR_fpadd64_vis,\n+\t\t\t di_ftype_di_di);\n+      def_builtin_const (\"__builtin_vis_fpsub64\", CODE_FOR_fpsub64_vis,\n+\t\t\t di_ftype_di_di);\n+\n+      def_builtin_const (\"__builtin_vis_fpadds16\", CODE_FOR_fpadds16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fpadds16s\", CODE_FOR_fpadds16s_vis,\n+\t\t\t v2hi_ftype_v2hi_v2hi);\n+      def_builtin_const (\"__builtin_vis_fpsubs16\", CODE_FOR_fpsubs16_vis,\n+\t\t\t v4hi_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fpsubs16s\", CODE_FOR_fpsubs16s_vis,\n+\t\t\t v2hi_ftype_v2hi_v2hi);\n+      def_builtin_const (\"__builtin_vis_fpadds32\", CODE_FOR_fpadds32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fpadds32s\", CODE_FOR_fpadds32s_vis,\n+\t\t\t v1si_ftype_v1si_v1si);\n+      def_builtin_const (\"__builtin_vis_fpsubs32\", CODE_FOR_fpsubs32_vis,\n+\t\t\t v2si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fpsubs32s\", CODE_FOR_fpsubs32s_vis,\n+\t\t\t v1si_ftype_v1si_v1si);\n+\n+      if (TARGET_ARCH64)\n+\t{\n+\t  def_builtin_const (\"__builtin_vis_fucmple8\", CODE_FOR_fucmple8di_vis,\n+\t\t\t     di_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpne8\", CODE_FOR_fucmpne8di_vis,\n+\t\t\t     di_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpgt8\", CODE_FOR_fucmpgt8di_vis,\n+\t\t\t     di_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpeq8\", CODE_FOR_fucmpeq8di_vis,\n+\t\t\t     di_ftype_v8qi_v8qi);\n+\t}\n+      else\n+\t{\n+\t  def_builtin_const (\"__builtin_vis_fucmple8\", CODE_FOR_fucmple8si_vis,\n+\t\t\t     si_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpne8\", CODE_FOR_fucmpne8si_vis,\n+\t\t\t     si_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpgt8\", CODE_FOR_fucmpgt8si_vis,\n+\t\t\t     si_ftype_v8qi_v8qi);\n+\t  def_builtin_const (\"__builtin_vis_fucmpeq8\", CODE_FOR_fucmpeq8si_vis,\n+\t\t\t     si_ftype_v8qi_v8qi);\n+\t}\n+    }\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook.\n@@ -9608,13 +9714,27 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n   tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n   enum insn_code icode = (enum insn_code) DECL_FUNCTION_CODE (fndecl);\n \n-  if (ignore\n-      && icode != CODE_FOR_alignaddrsi_vis\n-      && icode != CODE_FOR_alignaddrdi_vis\n-      && icode != CODE_FOR_wrgsr_vis\n-      && icode != CODE_FOR_bmasksi_vis\n-      && icode != CODE_FOR_bmaskdi_vis)\n-    return build_zero_cst (rtype);\n+  if (ignore)\n+    {\n+      switch (icode)\n+\t{\n+\tcase CODE_FOR_alignaddrsi_vis:\n+\tcase CODE_FOR_alignaddrdi_vis:\n+\tcase CODE_FOR_wrgsr_vis:\n+\tcase CODE_FOR_bmasksi_vis:\n+\tcase CODE_FOR_bmaskdi_vis:\n+\tcase CODE_FOR_cmask8si_vis:\n+\tcase CODE_FOR_cmask8di_vis:\n+\tcase CODE_FOR_cmask16si_vis:\n+\tcase CODE_FOR_cmask16di_vis:\n+\tcase CODE_FOR_cmask32si_vis:\n+\tcase CODE_FOR_cmask32di_vis:\n+\t  break;\n+\n+\tdefault:\n+\t  return build_zero_cst (rtype);\n+\t}\n+    }\n \n   switch (icode)\n     {"}, {"sha": "fa943877550ace56b1c5155f0fa6c422feb21511", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -1868,6 +1868,8 @@ extern int sparc_indent_opcode;\n #define AS_NIAGARA3_FLAG \"b\"\n #undef TARGET_FMAF\n #define TARGET_FMAF 0\n+#undef TARGET_VIS3\n+#define TARGET_VIS3 0\n #else\n #define AS_NIAGARA3_FLAG \"d\"\n #endif"}, {"sha": "03158c7f07c7308b6de0283ceb46dcbb0439789b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -80,6 +80,12 @@\n    (UNSPEC_EDGE32N\t\t74)\n    (UNSPEC_EDGE32LN\t\t75)\n    (UNSPEC_BSHUFFLE\t\t76)\n+   (UNSPEC_CMASK8\t\t77)\n+   (UNSPEC_CMASK16\t\t78)\n+   (UNSPEC_CMASK32\t\t79)\n+   (UNSPEC_FCHKSM16\t\t80)\n+   (UNSPEC_PDISTN\t\t81)\n+   (UNSPEC_FUCMP\t\t82)\n   ])\n \n (define_constants\n@@ -195,12 +201,16 @@\n (define_mode_iterator V64 [DF V2SI V4HI V8QI])\n (define_mode_iterator V64I [DI V2SI V4HI V8QI])\n \n+(define_mode_iterator V64N8 [V2SI V4HI])\n+\n ;; The upper 32 fp regs on the v9 can't hold SFmode values.  To deal with this\n ;; a second register class, EXTRA_FP_REGS, exists for the v9 chip.  The name\n ;; is a bit of a misnomer as it covers all 64 fp regs.  The corresponding\n ;; constraint letter is 'e'.  To avoid any confusion, 'e' is used instead of\n ;; 'f' for all DF/TFmode values, including those that are specific to the v8.\n \n+(define_mode_attr vbits [(V2SI \"32\") (V4HI \"16\") (SI \"32s\") (V2HI \"16s\")])\n+(define_mode_attr vconstr [(V2SI \"e\") (V4HI \"e\") (SI \"f\") (V2HI \"f\")])\n \n ;; Attribute for cpu type.\n ;; These must match the values for enum processor_type in sparc.h.\n@@ -8271,4 +8281,106 @@\n   \"edge32ln\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n+;; Conditional moves are possible via fcmpX --> cmaskX -> bshuffle\n+(define_insn \"cmask8<P:mode>_vis\"\n+  [(set (reg:DI GSR_REG)\n+        (unspec:DI [(match_operand:P 0 \"register_operand\" \"r\")\n+\t            (reg:DI GSR_REG)]\n+                   UNSPEC_CMASK8))]\n+  \"TARGET_VIS3\"\n+  \"cmask8\\t%r0\")\n+\n+(define_insn \"cmask16<P:mode>_vis\"\n+  [(set (reg:DI GSR_REG)\n+        (unspec:DI [(match_operand:P 0 \"register_operand\" \"r\")\n+\t            (reg:DI GSR_REG)]\n+                   UNSPEC_CMASK16))]\n+  \"TARGET_VIS3\"\n+  \"cmask16\\t%r0\")\n+\n+(define_insn \"cmask32<P:mode>_vis\"\n+  [(set (reg:DI GSR_REG)\n+        (unspec:DI [(match_operand:P 0 \"register_operand\" \"r\")\n+\t            (reg:DI GSR_REG)]\n+                   UNSPEC_CMASK32))]\n+  \"TARGET_VIS3\"\n+  \"cmask32\\t%r0\")\n+\n+(define_insn \"fchksm16_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"e\")\n+                      (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+                     UNSPEC_FCHKSM16))]\n+  \"TARGET_VIS3\"\n+  \"fchksm16\\t%1, %2, %0\")\n+\n+(define_code_iterator vis3_shift [ashift ss_ashift lshiftrt ashiftrt])\n+(define_code_attr vis3_shift_insn\n+  [(ashift \"fsll\") (ss_ashift \"fslas\") (lshiftrt \"fsrl\") (ashiftrt \"fsra\")])\n+   \n+(define_insn \"<vis3_shift_insn><vbits>_vis\"\n+  [(set (match_operand:V64N8 0 \"register_operand\" \"=<vconstr>\")\n+        (vis3_shift:V64N8 (match_operand:V64N8 1 \"register_operand\" \"<vconstr>\")\n+                          (match_operand:V64N8 2 \"register_operand\" \"<vconstr>\")))]\n+  \"TARGET_VIS3\"\n+  \"<vis3_shift_insn><vbits>\\t%1, %2, %0\")\n+\n+(define_insn \"pdistn<mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:V8QI 1 \"register_operand\" \"e\")\n+                   (match_operand:V8QI 2 \"register_operand\" \"e\")]\n+         UNSPEC_PDISTN))]\n+  \"TARGET_VIS3\"\n+  \"pdistn\\t%1, %2, %0\")\n+\n+(define_insn \"fmean16_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (truncate:V4HI\n+          (lshiftrt:V4SI\n+            (plus:V4SI\n+              (plus:V4SI\n+                (zero_extend:V4SI\n+                  (match_operand:V4HI 1 \"register_operand\" \"e\"))\n+                (zero_extend:V4SI\n+                  (match_operand:V4HI 2 \"register_operand\" \"e\")))\n+              (const_vector:V4SI [(const_int 1) (const_int 1)\n+                                  (const_int 1) (const_int 1)]))\n+          (const_int 1))))]\n+  \"TARGET_VIS3\"\n+  \"fmean16\\t%1, %2, %0\")\n+\n+(define_insn \"fpadd64_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n+        (plus:DI (match_operand:DI 1 \"register_operand\" \"e\")\n+                 (match_operand:DI 2 \"register_operand\" \"e\")))]\n+  \"TARGET_VIS3\"\n+  \"fpadd64\\t%1, %2, %0\")\n+\n+(define_insn \"fpsub64_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"e\")\n+                  (match_operand:DI 2 \"register_operand\" \"e\")))]\n+  \"TARGET_VIS3\"\n+  \"fpsub64\\t%1, %2, %0\")\n+\n+(define_mode_iterator VASS [V4HI V2SI V2HI SI])\n+(define_code_iterator vis3_addsub_ss [ss_plus ss_minus])\n+(define_code_attr vis3_addsub_ss_insn\n+  [(ss_plus \"fpadds\") (ss_minus \"fpsubs\")])\n+\n+(define_insn \"<vis3_addsub_ss_insn><vbits>_vis\"\n+  [(set (match_operand:VASS 0 \"register_operand\" \"=<vconstr>\")\n+        (vis3_addsub_ss:VASS (match_operand:VASS 1 \"register_operand\" \"<vconstr>\")\n+                             (match_operand:VASS 2 \"register_operand\" \"<vconstr>\")))]\n+  \"TARGET_VIS3\"\n+  \"<vis3_addsub_ss_insn><vbits>\\t%1, %2, %0\")\n+\n+(define_insn \"fucmp<code>8<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n+\t\t               (match_operand:V8QI 2 \"register_operand\" \"e\"))]\n+\t UNSPEC_FUCMP))]\n+  \"TARGET_VIS3\"\n+  \"fucmp<code>8\\t%1, %2, %0\")\n+\n (include \"sync.md\")"}, {"sha": "613ae731c8e1c684c6ad0af3ff4048609998f8e3", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -65,6 +65,10 @@ mvis2\n Target Report Mask(VIS2)\n Use UltraSPARC Visual Instruction Set version 2.0 extensions\n \n+mvis3\n+Target Report Mask(VIS3)\n+Use UltraSPARC Visual Instruction Set version 3.0 extensions\n+\n mfmaf\n Target Report Mask(FMAF)\n Use UltraSPARC Fused Multiply-Add extensions"}, {"sha": "32e44e55810cc75a27c3e7d18e55d707db11a34e", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -431,4 +431,200 @@ __vis_edge32ln (void *__A, void *__B)\n   return __builtin_vis_edge32ln (__A, __B);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_cmask8 (long __A)\n+{\n+  return __builtin_vis_cmask8 (__A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_cmask16 (long __A)\n+{\n+  return __builtin_vis_cmask16 (__A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_cmask32 (long __A)\n+{\n+  return __builtin_vis_cmask32 (__A);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fchksm16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fchksm16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsll16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fsll16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fslas16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fslas16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsrl16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fsrl16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsra16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fsra16 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsll32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fsll32 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fslas32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fslas32 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsrl32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fsrl32 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fsra32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fsra32 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_pdistn (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_pdistn (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmean16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmean16 (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadd64 (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_fpadd64 (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsub64 (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_fpsub64 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadds16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fpadds16 (__A, __B);\n+}\n+\n+extern __inline __v2hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadds16s (__v2hi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fpadds16s (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsubs16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fpsubs16 (__A, __B);\n+}\n+\n+extern __inline __v2hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsubs16s (__v2hi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fpsubs16s (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadds32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fpadds32 (__A, __B);\n+}\n+\n+extern __inline __v1si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadds32s (__v1si __A, __v1si __B)\n+{\n+  return __builtin_vis_fpadds32s (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsubs32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fpsubs32 (__A, __B);\n+}\n+\n+extern __inline __v1si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsubs32s (__v1si __A, __v1si __B)\n+{\n+  return __builtin_vis_fpsubs32s (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fucmple8 (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_fucmple8 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fucmpne8 (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_fucmpne8 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fucmpgt8 (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_fucmpgt8 (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fucmpeq8 (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_fucmpeq8 (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "1c688dcf60ad0d7bf298c65a78db3ed567eb2f9e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -13016,8 +13016,8 @@ long __builtin_vis_array16 (long, long);\n long __builtin_vis_array32 (long, long);\n @end smallexample\n \n-Additionally, when you use the @option{-mvis2} switch, the VIS version\n-2.0 built-in functions become available:\n+When you use the @option{-mvis2} switch, the VIS version 2.0 built-in\n+functions also become available:\n \n @smallexample\n long __builtin_vis_bmask (long, long);\n@@ -13034,6 +13034,47 @@ long __builtin_vis_edge32n (void *, void *);\n long __builtin_vis_edge32ln (void *, void *);\n @end smallexample\n \n+When you use the @option{-mvis3} switch, the VIS version 3.0 built-in\n+functions also become available:\n+\n+@smallexample\n+void __builtin_vis_cmask8 (long);\n+void __builtin_vis_cmask16 (long);\n+void __builtin_vis_cmask32 (long);\n+\n+v4hi __builtin_vis_fchksm16 (v4hi, v4hi);\n+\n+v4hi __builtin_vis_fsll16 (v4hi, v4hi);\n+v4hi __builtin_vis_fslas16 (v4hi, v4hi);\n+v4hi __builtin_vis_fsrl16 (v4hi, v4hi);\n+v4hi __builtin_vis_fsra16 (v4hi, v4hi);\n+v2si __builtin_vis_fsll16 (v2si, v2si);\n+v2si __builtin_vis_fslas16 (v2si, v2si);\n+v2si __builtin_vis_fsrl16 (v2si, v2si);\n+v2si __builtin_vis_fsra16 (v2si, v2si);\n+\n+long __builtin_vis_pdistn (v8qi, v8qi);\n+\n+v4hi __builtin_vis_fmean16 (v4hi, v4hi);\n+\n+int64_t __builtin_vis_fpadd64 (int64_t, int64_t);\n+int64_t __builtin_vis_fpsub64 (int64_t, int64_t);\n+\n+v4hi __builtin_vis_fpadds16 (v4hi, v4hi);\n+v2hi __builtin_vis_fpadds16s (v2hi, v2hi);\n+v4hi __builtin_vis_fpsubs16 (v4hi, v4hi);\n+v2hi __builtin_vis_fpsubs16s (v2hi, v2hi);\n+v2si __builtin_vis_fpadds32 (v2si, v2si);\n+v1si __builtin_vis_fpadds32s (v1si, v1si);\n+v2si __builtin_vis_fpsubs32 (v2si, v2si);\n+v1si __builtin_vis_fpsubs32s (v1si, v1si);\n+\n+long __builtin_vis_fucmple8 (v8qi, v8qi);\n+long __builtin_vis_fucmpne8 (v8qi, v8qi);\n+long __builtin_vis_fucmpgt8 (v8qi, v8qi);\n+long __builtin_vis_fucmpeq8 (v8qi, v8qi);\n+@end smallexample\n+\n @node SPU Built-in Functions\n @subsection SPU Built-in Functions\n "}, {"sha": "bdc745367b3feacea2f4e3187b9997609d886da0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -880,7 +880,8 @@ See RS/6000 and PowerPC Options.\n -mstack-bias  -mno-stack-bias @gol\n -munaligned-doubles  -mno-unaligned-doubles @gol\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n--mvis2 -mno-vis2 -mfmaf -mno-fmaf}\n+-mvis2  -mno-vis2  -mvis3  -mno-vis3 @gol\n+-mfmaf  -mno-fmaf}\n \n @emph{SPU Options}\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n@@ -17445,6 +17446,16 @@ default is @option{-mvis2} when targetting a cpu that supports such\n instructions, such as UltraSPARC-III and later.  Setting @option{-mvis2}\n also sets @option{-mvis}.\n \n+@item -mvis3\n+@itemx -mno-vis3\n+@opindex mvis3\n+@opindex mno-vis3\n+With @option{-mvis3}, GCC generates code that takes advantage of\n+version 3.0 of the UltraSPARC Visual Instruction Set extensions.  The\n+default is @option{-mvis3} when targetting a cpu that supports such\n+instructions, such as niagara-3 and later.  Setting @option{-mvis3}\n+also sets @option{-mvis2} and @option{-mvis}.\n+\n @item -mfmaf\n @itemx -mno-fmaf\n @opindex mfmaf"}, {"sha": "a43bf9d2111cb7a32304ee167480759660be8dfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -1,3 +1,11 @@\n+2011-10-01  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/cmask.c: New test.\n+\t* gcc.target/sparc/fpadds.c: New test.\n+\t* gcc.target/sparc/fshift.c: New test.\n+\t* gcc.target/sparc/fucmp.c: New test.\n+\t* gcc.target/sparc/vis3misc.c: New test.\n+\n 2011-10-01  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50585"}, {"sha": "b3168ec321d6324ab04cc35d2a57500886cd90a6", "filename": "gcc/testsuite/gcc.target/sparc/cmask.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcmask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcmask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcmask.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+\n+void test_cm8 (long x)\n+{\n+  __builtin_vis_cmask8 (x);\n+}\n+\n+void test_cm16 (long x)\n+{\n+  __builtin_vis_cmask16 (x);\n+}\n+\n+void test_cm32 (long x)\n+{\n+  __builtin_vis_cmask32 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"cmask8\\t%\" } } */\n+/* { dg-final { scan-assembler \"cmask16\\t%\" } } */\n+/* { dg-final { scan-assembler \"cmask32\\t%\" } } */"}, {"sha": "d0704e03eda47b5be17851462c067a0b6ad5efb1", "filename": "gcc/testsuite/gcc.target/sparc/fpadds.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpadds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpadds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpadds.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+typedef int __v2si __attribute__((vector_size(8)));\n+typedef int __v1si __attribute__((vector_size(4)));\n+typedef short __v4hi __attribute__((vector_size(8)));\n+typedef short __v2hi __attribute__((vector_size(4)));\n+\n+__v4hi test_fpadds16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fpadds16 (x, y);\n+}\n+\n+__v2hi test_fpadds16s (__v2hi x, __v2hi y)\n+{\n+  return __builtin_vis_fpadds16s (x, y);\n+}\n+\n+__v4hi test_fpsubs16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fpsubs16 (x, y);\n+}\n+\n+__v2hi test_fpsubs16s (__v2hi x, __v2hi y)\n+{\n+  return __builtin_vis_fpsubs16s (x, y);\n+}\n+\n+__v2si test_fpadds32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fpadds32 (x, y);\n+}\n+\n+__v1si test_fpadds32s (__v1si x, __v1si y)\n+{\n+  return __builtin_vis_fpadds32s (x, y);\n+}\n+\n+__v2si test_fpsubs32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fpsubs32 (x, y);\n+}\n+\n+__v1si test_fpsubs32s (__v1si x, __v1si y)\n+{\n+  return __builtin_vis_fpsubs32s (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"fpadds16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpadds16s\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpsubs16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpsubs16s\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpadds32\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpadds32s\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpsubs32\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpsubs32s\\t%\" } } */"}, {"sha": "a12df0451cb0ed8f980c199ca113fc6afc2aa186", "filename": "gcc/testsuite/gcc.target/sparc/fshift.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffshift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffshift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffshift.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+typedef int __v2si __attribute__((vector_size(8)));\n+typedef short __v4hi __attribute__((vector_size(8)));\n+\n+__v4hi test_fsll16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fsll16 (x, y);\n+}\n+\n+__v4hi test_fslas16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fslas16 (x, y);\n+}\n+\n+__v4hi test_fsrl16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fsrl16 (x, y);\n+}\n+\n+__v4hi test_fsra16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fsra16 (x, y);\n+}\n+\n+__v2si test_fsll32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fsll32 (x, y);\n+}\n+\n+__v2si test_fslas32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fslas32 (x, y);\n+}\n+\n+__v2si test_fsrl32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fsrl32 (x, y);\n+}\n+\n+__v2si test_fsra32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fsra32 (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"fsll16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fslas16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fsrl16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fsra16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fsll32\\t%\" } } */\n+/* { dg-final { scan-assembler \"fslas32\\t%\" } } */\n+/* { dg-final { scan-assembler \"fsrl32\\t%\" } } */\n+/* { dg-final { scan-assembler \"fsra32\\t%\" } } */"}, {"sha": "7f291c3e7ed85c85732237406fc1e612d24aa24c", "filename": "gcc/testsuite/gcc.target/sparc/fucmp.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffucmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffucmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffucmp.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+long test_fucmple8 (vec8 a, vec8 b)\n+{\n+  return __builtin_vis_fucmple8 (a, b);\n+}\n+\n+long test_fucmpne8 (vec8 a, vec8 b)\n+{\n+  return __builtin_vis_fucmpne8 (a, b);\n+}\n+\n+long test_fucmpgt8 (vec8 a, vec8 b)\n+{\n+  return __builtin_vis_fucmpgt8 (a, b);\n+}\n+\n+long test_fucmpeq8 (vec8 a, vec8 b)\n+{\n+  return __builtin_vis_fucmpeq8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"fucmple8\\t%\" } } */\n+/* { dg-final { scan-assembler \"fucmpne8\\t%\" } } */\n+/* { dg-final { scan-assembler \"fucmpgt8\\t%\" } } */\n+/* { dg-final { scan-assembler \"fucmpeq8\\t%\" } } */"}, {"sha": "8a9535e8fb506db4a24bb3de358936776e66fc2e", "filename": "gcc/testsuite/gcc.target/sparc/vis3misc.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fvis3misc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d7b15ff3ded45c424b1a240a7db64d3ae975e3/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fvis3misc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fvis3misc.c?ref=96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+typedef int __v2si __attribute__((vector_size(8)));\n+typedef short __v4hi __attribute__((vector_size(8)));\n+typedef unsigned char __v8qi __attribute__((vector_size(8)));\n+typedef long long int64_t;\n+\n+__v4hi test_fchksm16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fchksm16 (x, y);\n+}\n+\n+long test_pdistn (__v8qi x, __v8qi y)\n+{\n+  return __builtin_vis_pdistn (x, y);\n+}\n+\n+__v4hi test_fmean16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fmean16 (x, y);\n+}\n+\n+int64_t test_fpadd64 (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_fpadd64 (x, y);\n+}\n+\n+int64_t test_fpsub64 (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_fpsub64 (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"fchksm16\\t%\" } } */\n+/* { dg-final { scan-assembler \"pdistn\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmean16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpadd64\\t%\" } } */\n+/* { dg-final { scan-assembler \"fpsub64\\t%\" } } */"}]}