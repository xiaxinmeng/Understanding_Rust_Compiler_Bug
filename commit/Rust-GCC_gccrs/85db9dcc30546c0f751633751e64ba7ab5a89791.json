{"sha": "85db9dcc30546c0f751633751e64ba7ab5a89791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkYjlkY2MzMDU0NmMwZjc1MTYzMzc1MWU2NGJhN2FiNWE4OTc5MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-11-23T23:47:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-11-23T23:47:44Z"}, "message": "chrono: Constexpr markup for is_monotonic.\n\n2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/chrono: Constexpr markup for is_monotonic.\n\t* src/chrono.cc: Same.\n\t* testsuite/20_util/clocks/1.cc: Move...\n\t* testsuite/20_util/system_clock/1.cc: ...here.\n\t* testsuite/20_util/system_clock/constexpr_data.cc\n\t* testsuite/20_util/monotonic_clock/constexpr_data.cc\n\n\t* include/std/complex: Mark primary template constexpr.\n\t* testsuite/26_numerics/complex/cons/constexpr_primary.cc: Add.\n\t* testsuite/26_numerics/complex/complex_value.cc: Move...\n\t* testsuite/26_numerics/complex/dr387.cc: Move...\n\t* testsuite/26_numerics/complex/value_operations/1.cc: ... here.\n\t* testsuite/26_numerics/complex/value_operations/dr387.cc: ...here.\n\t* testsuite/26_numerics/complex/value_operations/constexpr.cc: New.\n\n2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\t* testsuite/lib/libstdc++.exp: Use scanasm.\n\t* testsuite/util/testsuite_common_types.h\n\t(constexpr_default_constructible): Add support for non-literal types.\n\t(constexpr_single_value_constructible): Same.\n\t* testsuite/20_util/enable_shared_from_this/cons/constexpr.cc:\n\tRemove xfail.\n\t* testsuite/20_util/shared_ptr/cons/constexpr.cc: Add.\n\t* testsuite/20_util/unique_ptr/cons/constexpr.cc: Add.\n\t* testsuite/20_util/weak_ptr/cons/constexpr.cc: Add.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line number.\n\n2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/future (shared_future): Default ctor constexpr.\n\t(future): Same.\n\t* testsuite/30_threads/shared_future/cons/constexpr.cc: New.\n\t* testsuite/30_threads/future/cons/constexpr.cc: New.\n\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r167099", "tree": {"sha": "b9e1c59ac246a73ee7d393b41db479a7f10ffdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e1c59ac246a73ee7d393b41db479a7f10ffdf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85db9dcc30546c0f751633751e64ba7ab5a89791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85db9dcc30546c0f751633751e64ba7ab5a89791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85db9dcc30546c0f751633751e64ba7ab5a89791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85db9dcc30546c0f751633751e64ba7ab5a89791/comments", "author": null, "committer": null, "parents": [{"sha": "9fdca9e332d60510f4402a201d699942d9884b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdca9e332d60510f4402a201d699942d9884b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdca9e332d60510f4402a201d699942d9884b92"}], "stats": {"total": 570, "additions": 515, "deletions": 55}, "files": [{"sha": "144126aca9d278545567b0707c3f37e0b8b33784", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -1,3 +1,42 @@\n+2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/chrono: Constexpr markup for is_monotonic.\n+\t* src/chrono.cc: Same.\n+\t* testsuite/20_util/clocks/1.cc: Move...\n+\t* testsuite/20_util/system_clock/1.cc: ...here.\n+\t* testsuite/20_util/system_clock/constexpr_data.cc\n+\t* testsuite/20_util/monotonic_clock/constexpr_data.cc\n+\n+\t* include/std/complex: Mark primary template constexpr.\n+\t* testsuite/26_numerics/complex/cons/constexpr_primary.cc: Add.\n+\t* testsuite/26_numerics/complex/complex_value.cc: Move...\n+\t* testsuite/26_numerics/complex/dr387.cc: Move...\n+\t* testsuite/26_numerics/complex/value_operations/1.cc: ... here.\n+\t* testsuite/26_numerics/complex/value_operations/dr387.cc: ...here.\n+\t* testsuite/26_numerics/complex/value_operations/constexpr.cc: New.\n+\n+2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Use scanasm.\n+\t* testsuite/util/testsuite_common_types.h\n+\t(constexpr_default_constructible): Add support for non-literal types.\n+\t(constexpr_single_value_constructible): Same.\n+\t* testsuite/20_util/enable_shared_from_this/cons/constexpr.cc:\n+\tRemove xfail.\n+\t* testsuite/20_util/shared_ptr/cons/constexpr.cc: Add.\n+\t* testsuite/20_util/unique_ptr/cons/constexpr.cc: Add.\n+\t* testsuite/20_util/weak_ptr/cons/constexpr.cc: Add.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line number.\n+\n+2010-11-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future (shared_future): Default ctor constexpr.\n+\t(future): Same.\n+\t* testsuite/30_threads/shared_future/cons/constexpr.cc: New.\n+\t* testsuite/30_threads/future/cons/constexpr.cc: New.\n+\n 2010-11-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/22_locale/collate/hash/char/wrapped_locale.cc: Require"}, {"sha": "25110817a155f5d4d0c89836bfaee8df09cbd127", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t && (treat_as_floating_point<rep>::value\n \t\t\t     || !treat_as_floating_point<_Rep2>::value)>::type>\n \t  constexpr explicit duration(const _Rep2& __rep)\n-\t    : __r(static_cast<rep>(__rep)) { }\n+\t  : __r(static_cast<rep>(__rep)) { }\n \n \ttemplate<typename _Rep2, typename _Period2, typename = typename\n \t       enable_if<treat_as_floating_point<rep>::value\n@@ -644,22 +644,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct system_clock\n     {\n #ifdef _GLIBCXX_USE_CLOCK_REALTIME\n-      typedef chrono::nanoseconds     duration;\n+      typedef chrono::nanoseconds     \t\t\t\tduration;\n #elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n-      typedef chrono::microseconds    duration;\n+      typedef chrono::microseconds    \t\t\t\tduration;\n #else\n-      typedef chrono::seconds         duration;\n+      typedef chrono::seconds         \t\t\t\tduration;\n #endif\n \n-      typedef duration::rep    rep;\n-      typedef duration::period period;\n-      typedef chrono::time_point<system_clock, duration> time_point;\n+      typedef duration::rep    \t\t\t\t\trep;\n+      typedef duration::period \t\t\t\t\tperiod;\n+      typedef chrono::time_point<system_clock, duration> \ttime_point;\n \n       static_assert(system_clock::duration::min()\n \t\t    < system_clock::duration::zero(),\n \t\t    \"a clock's minimum duration cannot be less than its epoch\");\n \n-      static const bool is_monotonic = false;\n+      static constexpr bool is_monotonic = false;\n \n       static time_point\n       now() throw ();\n@@ -685,12 +685,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /// monotonic_clock\n     struct monotonic_clock\n     {\n-      typedef chrono::nanoseconds duration;\n-      typedef duration::rep       rep;\n-      typedef duration::period    period;\n-      typedef chrono::time_point<monotonic_clock, duration> time_point;\n+      typedef chrono::nanoseconds \t\t\t\tduration;\n+      typedef duration::rep       \t\t\t\trep;\n+      typedef duration::period    \t\t\t\tperiod;\n+      typedef chrono::time_point<monotonic_clock, duration> \ttime_point;\n \n-      static const bool is_monotonic = true;\n+      static constexpr bool is_monotonic = true;\n \n       static time_point\n       now();"}, {"sha": "4bd8e8c42e14c1b06861f8acfd58c9944ddb5073", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -529,12 +529,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Values\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<typename _Tp>\n-    inline _Tp\n+    inline constexpr _Tp\n     real(const complex<_Tp>& __z)\n     { return __z.real(); }\n     \n   template<typename _Tp>\n-    inline _Tp\n+    inline constexpr _Tp\n     imag(const complex<_Tp>& __z)\n     { return __z.imag(); }\n #else"}, {"sha": "45691168f3fc86b398b2536f31a21bfa035a0c32", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -556,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       explicit\n       __basic_future(future<_Res>&&);\n \n-      __basic_future() { }\n+      constexpr __basic_future() : _M_state() { }\n \n       struct _Reset\n       {\n@@ -584,7 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      future() : _Base_type() { }\n+      constexpr future() : _Base_type() { }\n \n       /// Move constructor\n       future(future&& __uf) : _Base_type(std::move(__uf)) { }\n@@ -625,7 +625,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      future() : _Base_type() { }\n+      constexpr future() : _Base_type() { }\n \n       /// Move constructor\n       future(future&& __uf) : _Base_type(std::move(__uf)) { }\n@@ -666,7 +666,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      future() : _Base_type() { }\n+      constexpr future() : _Base_type() { }\n \n       /// Move constructor\n       future(future&& __uf) : _Base_type(std::move(__uf)) { }\n@@ -698,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __basic_future<_Res> _Base_type;\n \n     public:\n-      shared_future() : _Base_type() { }\n+      constexpr shared_future() : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n@@ -742,7 +742,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __basic_future<_Res&>           _Base_type;\n \n     public:\n-      shared_future() : _Base_type() { }\n+      constexpr shared_future() : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n@@ -781,7 +781,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __basic_future<void> _Base_type;\n \n     public:\n-      shared_future() : _Base_type() { }\n+      constexpr shared_future() : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }"}, {"sha": "4dcd74bcee3eab81ecb3c938573b38d8fc0aea6b", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -37,7 +37,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   namespace chrono\n   {\n-    const bool system_clock::is_monotonic;\n+    constexpr bool system_clock::is_monotonic;\n \n     system_clock::time_point\n     system_clock::now() throw ()\n@@ -61,7 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n     \n #ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    const bool monotonic_clock::is_monotonic;\n+    constexpr bool monotonic_clock::is_monotonic;\n     \n     monotonic_clock::time_point\n     monotonic_clock::now()"}, {"sha": "f66944b3a9080569c921302c7bbca6aa3d4a9f9c", "filename": "libstdc++-v3/testsuite/20_util/enable_shared_from_this/cons/constexpr.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -1,5 +1,7 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt23enable_shared_from_thisIiEC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZN7derivedC2Ev\" } }\n \n // Copyright (C) 2010 Free Software Foundation, Inc.\n //\n@@ -29,7 +31,6 @@ struct derived : public std::enable_shared_from_this<int>\n int main()\n {\n   __gnu_test::constexpr_default_constructible test;\n-  test.operator()<derived>();  // { dg-excess-errors \"\" }\n-  derived d;\n+  test.operator()<derived>();\n   return 0;\n }"}, {"sha": "34477ea183880ecd940ba9c46ae97559c7b3964f", "filename": "libstdc++-v3/testsuite/20_util/monotonic_clock/constexpr_data.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_clock%2Fconstexpr_data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_clock%2Fconstexpr_data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_clock%2Fconstexpr_data.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <testsuite_common_types.h>\n+\n+namespace __gnu_test\n+{\n+  struct constexpr_member_data\n+  {\n+    template<typename _Ttesttype>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  {\n+\t    constexpr auto v1 __attribute__((unused))\n+\t      = _Ttesttype::is_monotonic;\n+\t  }\n+\t};\n+\n+\t_Concept c;\n+\tc.__constraint();\n+      }\n+  };\n+}\n+\n+int main()\n+{\n+  __gnu_test::constexpr_member_data test;\n+  test.operator()<std::chrono::monotonic_clock>();\n+  return 0;\n+}"}, {"sha": "72eea9e0ffc6ddc9a698e0887b8905d7a526f03f", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/constexpr.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt10shared_ptrIiEC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZNSt10shared_ptrIiEC2EDn\" } }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_default_constructible test1;  //not literal\n+  test1.operator()<std::shared_ptr<int>>();\n+\n+  __gnu_test::constexpr_single_value_constructible test2;  //not literal\n+  test2.operator()<std::shared_ptr<int>, std::nullptr_t>();\n+\n+  return 0;\n+}"}, {"sha": "ead20873c7bab43aba9b12ef3a0a488ae82afedc", "filename": "libstdc++-v3/testsuite/20_util/system_clock/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2F1.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "previous_filename": "libstdc++-v3/testsuite/20_util/clocks/1.cc"}, {"sha": "2407ef16a711d62963a641b890901988fa5b669f", "filename": "libstdc++-v3/testsuite/20_util/system_clock/constexpr_data.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fsystem_clock%2Fconstexpr_data.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <testsuite_common_types.h>\n+\n+namespace __gnu_test\n+{\n+  struct constexpr_member_data\n+  {\n+    template<typename _Ttesttype>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  {\n+\t    constexpr auto v1 __attribute__((unused))\n+\t      = _Ttesttype::is_monotonic;\n+\t  }\n+\t};\n+\n+\t_Concept c;\n+\tc.__constraint();\n+      }\n+  };\n+}\n+\n+int main()\n+{\n+  __gnu_test::constexpr_member_data test;\n+  test.operator()<std::chrono::system_clock>();\n+  return 0;\n+}"}, {"sha": "1f3cabc789adae640f3ffa7c2e3338d955f6237d", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/constexpr.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt10unique_ptrIiSt14default_deleteIiEEC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZNSt10unique_ptrIiSt14default_deleteIiEEC2EDn\" } }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_default_constructible test1;  //not literal\n+  test1.operator()<std::unique_ptr<int>>();\n+\n+  __gnu_test::constexpr_single_value_constructible test2;  //not literal\n+  test2.operator()<std::unique_ptr<int>, std::nullptr_t>();\n+\n+  return 0;\n+}"}, {"sha": "ce19df1578dc80c6ee13d4432122e63e6f2c6e3e", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/cons/constexpr.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt8weak_ptrIiEC2Ev\" } }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_default_constructible test; //not literal\n+  test.operator()<std::weak_ptr<int>>();\n+  return 0;\n+}"}, {"sha": "77e01bcff00ca778427304456ca9c0f7ebdb57a9", "filename": "libstdc++-v3/testsuite/26_numerics/complex/cons/constexpr_primary.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2Fconstexpr_primary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2Fconstexpr_primary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fcons%2Fconstexpr_primary.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+\n+// User defined type, so that the primary std::complex template is used.\n+namespace numext\n+{\n+  struct ldld_base\n+  {\n+    long double one;\n+    long double two;\n+  };\n+\n+  struct ldld_lit : public ldld_base\n+  { };\n+\n+  struct ldld_nonlit : public ldld_base\n+  {\n+    ~ldld_nonlit() { }\n+  };\n+\n+  bool\n+  operator<(const ldld_base __a, const ldld_base __b)\n+  { return __a.one < __b.one && __a.two < __b.two; }\n+\n+  bool\n+  operator==(const ldld_base __a, const ldld_base __b)\n+  { return __a.one == __b.one && __a.two == __b.two; }\n+\n+  ldld_base\n+  operator+=(const ldld_base __a, const ldld_base __b)\n+  { return ldld_base({ __a.one + __b.one, __a.two + __b.two}); }\n+\n+  ldld_base\n+  operator-=(const ldld_base __a, const ldld_base __b)\n+  { return ldld_base({ __a.one - __b.one, __a.two - __b.two}); }\n+\n+  ldld_base\n+  operator*=(const ldld_base __a, const ldld_base __b)\n+  { return ldld_base({ __a.one * __b.one, __a.two * __b.two}); }\n+\n+  ldld_base\n+  operator/=(const ldld_base __a, const ldld_base __b)\n+  { return ldld_base({ __a.one / __b.one, __a.two / __b.two}); }\n+\n+}\n+\n+constexpr std::complex<numext::ldld_lit> lit; // ok\n+// constexpr std::complex<numext::ldld_nonlit> nonlit; // error"}, {"sha": "dc05a2b19b4ddaf8a1a6f04a145bb2017c82e70a", "filename": "libstdc++-v3/testsuite/26_numerics/complex/value_operations/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2F1.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "previous_filename": "libstdc++-v3/testsuite/26_numerics/complex/complex_value.cc"}, {"sha": "29728a2b3e03fc179220b4c9a053acf5b587bec9", "filename": "libstdc++-v3/testsuite/26_numerics/complex/value_operations/constexpr.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+#include <testsuite_common_types.h>\n+\n+namespace __gnu_test\n+{\n+  struct constexpr_functions\n+  {\n+    template<typename _Ttesttype>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  { \n+\t    typedef typename _Ttesttype::_ComplexT _ComplexT;\n+\t    const _ComplexT cc = { 1.1 };\n+\t    constexpr _Ttesttype a(cc);\n+\t    constexpr auto v1 __attribute__((unused)) = real(a);\n+\t    constexpr auto v2 __attribute__((unused)) = imag(a);\n+\t  }\n+\t};\n+\n+\t_Concept c;\n+\tc.__constraint();\n+      }\n+  };\n+}\n+\n+int main()\n+{\n+  __gnu_test::constexpr_functions test;\n+  test.operator()<std::complex<float>>();\n+  test.operator()<std::complex<double>>();\n+  test.operator()<std::complex<long double>>();\n+  return 0;\n+}"}, {"sha": "084a52c31dd603bb1de090ea8d2127cd7c47dceb", "filename": "libstdc++-v3/testsuite/26_numerics/complex/value_operations/dr387.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fdr387.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fdr387.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fvalue_operations%2Fdr387.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "previous_filename": "libstdc++-v3/testsuite/26_numerics/complex/dr387.cc"}, {"sha": "0045f7ca7ae8f572167fd6e48700be1d4bb3bfcd", "filename": "libstdc++-v3/testsuite/30_threads/future/cons/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt6futureIvEC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZNSt6futureIiEC2Ev\" } }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_default_constructible test; //not literal\n+  test.operator()<std::future<int>>();\n+  test.operator()<std::future<void>>();\n+  return 0;\n+}"}, {"sha": "6c661f21d06e3d7e0aa9b361b99775800c9c209e", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fconstexpr.cc?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x -fno-inline -save-temps\" }\n+// { dg-final { scan-assembler-not \"_ZNSt13shared_futureIvEC2Ev\" } }\n+// { dg-final { scan-assembler-not \"_ZNSt13shared_futureIiEC2Ev\" } }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_default_constructible test; //not literal\n+  test.operator()<std::shared_future<int>>();\n+  test.operator()<std::shared_future<void>>();\n+  return 0;\n+}"}, {"sha": "36b6e864f10b2c8f55e0a3c6230c6e7aa351bc28", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -51,6 +51,7 @@ load_gcc_lib target-supports.exp\n load_gcc_lib target-supports-dg.exp\n load_lib prune.exp\n load_lib dg-options.exp\n+load_gcc_lib scanasm.exp\n load_gcc_lib target-libpath.exp\n load_gcc_lib timeout.exp\n load_gcc_lib timeout-dg.exp"}, {"sha": "0960b7916c43f012f7a39060d6c9b5338c184a2f", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85db9dcc30546c0f751633751e64ba7ab5a89791/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=85db9dcc30546c0f751633751e64ba7ab5a89791", "patch": "@@ -637,50 +637,77 @@ namespace __gnu_test\n       }\n   };\n \n-  // Generator to test constexpr constructor\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   // Generator to test default constructor.\n   struct constexpr_default_constructible\n   {\n+    template<typename _Tp, bool _IsLitp = std::is_literal_type<_Tp>::value>\n+      struct _Concept;\n+\n     // NB: _Tp must be a literal type. \n+    // Have to have user-defined default ctor for this to work.\n+    template<typename _Tp>\n+      struct _Concept<_Tp, true>\n+      {\n+\tvoid __constraint()\n+\t{ constexpr _Tp __obj; }\n+      };\n+\n+    // Non-literal type, declare local static and verify no\n+    // constructors generated for _Tp within the translation unit.\n+    template<typename _Tp>\n+      struct _Concept<_Tp, false>\n+      {\n+\tvoid __constraint()\n+\t{ static _Tp __obj; }\n+      };\n+\n     template<typename _Tp>\n       void \n       operator()()\n       {\n-\tstruct _Concept\n-\t{\n-\t  // Have to have user-defined default ctor for this to work.\n-\t  void __constraint()\n-\t  { constexpr _Tp __v; }\n-\t};\n-\n-\tvoid (_Concept::*__x)() __attribute__((unused))\n-\t  = &_Concept::__constraint;\n+\t_Concept<_Tp> c;\n+\tc.__constraint();\n       }\n   };\n \n   struct constexpr_single_value_constructible\n   {\n-    // NB: _Tbasetype and _Ttesttype must be literal types. \n-    template<typename _Ttesttype, typename _Tbasetype>\n-      void\n-      operator()()\n+    template<typename _Ttesttype, typename _Tvaluetype, \n+\t     bool _IsLitp = std::is_literal_type<_Ttesttype>::value>\n+      struct _Concept;\n+\n+    // NB: _Tvaluetype and _Ttesttype must be literal types.\n+    // Additional constraint on _Tvaluetype needed.  Either assume\n+    // user-defined default ctor as per\n+    // constexpr_default_constructible and provide no initializer,\n+    // provide an initializer, or assume empty-list init-able. Choose\n+    // the latter.\n+    template<typename _Ttesttype, typename _Tvaluetype>\n+      struct _Concept<_Ttesttype, _Tvaluetype, true>\n       {\n-\tstruct _Concept\n+\tvoid __constraint()\n \t{\n-\t  // Additional constraint on _Tbasetype needed.\n-\t  // Either assume user-defined default ctor as per\n-\t  // constexpr_default_constructible and provide no\n-\t  // initializer, provide an initializer, or assume empty-list\n-\t  // init-able. Choose the latter.\n-\t  void __constraint()\n-\t  {\n-\t    constexpr _Tbasetype __v { };\n-\t    constexpr _Ttesttype __t(__v);\n-\t  }\n-\t};\n+\t  constexpr _Tvaluetype __v { };\n+\t  constexpr _Ttesttype __obj(__v);\n+\t}\n+      };\n \n-\t_Concept c;\n+    template<typename _Ttesttype, typename _Tvaluetype>\n+      struct _Concept<_Ttesttype, _Tvaluetype, false>\n+      {\n+\tvoid __constraint()\n+\t{ \n+\t  const _Tvaluetype __v { };\n+\t  static _Ttesttype __obj(__v);\n+\t}\n+      };\n+\n+    template<typename _Ttesttype, typename _Tvaluetype>\n+      void\n+      operator()()\n+      {\n+\t_Concept<_Ttesttype, _Tvaluetype> c;\n \tc.__constraint();\n       }\n   };"}]}