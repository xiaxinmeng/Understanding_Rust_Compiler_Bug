{"sha": "9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkZDBmNWU2OWNhNThiNjk0MDViNDQyMjkwN2MwN2FiZGNjNWE3ZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-12-08T14:19:13Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-12-08T14:19:13Z"}, "message": "Object.h (throwNoSuchMethodError): New method.\n\n2005-12-08  Andrew Haley  <aph@redhat.com>\n\n        * java/lang/Object.h (throwNoSuchMethodError): New method.\n        * java/lang/Object.java (throwNoSuchMethodError): New method.\n        * include/jvm.h (_Jv_ThrowNoSuchFieldError): Declare.\n        * link.cc (_Jv_ThrowNoSuchFieldError): New.\n        (link_symbol_table): Don't throw a NoSuchFieldError if a field is\n        missing.  Instead, set the otable entry to zero.\n        (link_symbol_table): If we don't find a nonstatic method, insert\n        the vtable offset of Object.throwNoSuchMethodError() into the\n        otable.\n\nFrom-SVN: r108231", "tree": {"sha": "e764f1b2a5c7d9e67d1a6fc89048373154d65bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e764f1b2a5c7d9e67d1a6fc89048373154d65bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e00388458d34ab0954df5d12c9d45ee0fd794e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00388458d34ab0954df5d12c9d45ee0fd794e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00388458d34ab0954df5d12c9d45ee0fd794e58"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "57f1d4d4795578bad5768c37060f2ae9e689bda2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "patch": "@@ -1,3 +1,15 @@\n+2005-12-08  Andrew Haley  <aph@redhat.com>\n+\n+\t* java/lang/Object.h (throwNoSuchMethodError): New method.\n+\t* java/lang/Object.java (throwNoSuchMethodError): New method.\n+\t* include/jvm.h (_Jv_ThrowNoSuchFieldError): Declare.\n+\t* link.cc (_Jv_ThrowNoSuchFieldError): New.\n+\t(link_symbol_table): Don't throw a NoSuchFieldError if a field is\n+\tmissing.  Instead, set the otable entry to zero.\n+\t(link_symbol_table): If we don't find a nonstatic method, insert\n+\tthe vtable offset of Object.throwNoSuchMethodError() into the\n+\totable.\n+\n 2005-12-05  Tom Tromey  <tromey@redhat.com>\n \n \t* testsuite/libjava.compile/rh174912.java: New file."}, {"sha": "85caa40e23f4d51369a55a4152f202e5f4ca4801", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "patch": "@@ -442,6 +442,10 @@ extern \"C\" void _Jv_ThrowBadArrayIndex (jint bad_index)\n   __attribute__((noreturn));\n extern \"C\" void _Jv_ThrowNullPointerException (void)\n   __attribute__((noreturn));\n+extern \"C\" void _Jv_ThrowNoSuchMethodError (void)\n+  __attribute__((noreturn));\n+extern \"C\" void _Jv_ThrowNoSuchFieldError (int)\n+  __attribute__((noreturn));\n extern \"C\" jobject _Jv_NewArray (jint type, jint size)\n   __attribute__((__malloc__));\n extern \"C\" jobject _Jv_NewMultiArray (jclass klass, jint dims, ...)"}, {"sha": "54fd447d116bfaef421834cdeafbb4e7edc49f3e", "filename": "libjava/java/lang/Object.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Fjava%2Flang%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Fjava%2Flang%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.h?ref=9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "patch": "@@ -83,6 +83,9 @@ class java::lang::Object : public _JvObjectPrefix\n \n     // Initialize the sync_info field.  Not called with JV_HASH_SYNCHRONIZATION.\n     void sync_init (void);\n+\n+public:\n+  virtual void throwNoSuchMethodError (void);\n };\n \n #endif /* __JAVA_LANG_OBJECT_H__ */"}, {"sha": "e81a48a9fb7f389b5fd49ecbaf9cb1c6a6967a02", "filename": "libjava/java/lang/Object.java", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Fjava%2Flang%2FObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Fjava%2Flang%2FObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.java?ref=9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "patch": "@@ -506,6 +506,14 @@ public final void wait(long timeout) throws InterruptedException\n   // completeness (some day we'll be able to auto-generate Object.h).\n   private final native void sync_init();\n \n+  // If we fail to find a method at class loading time we put the\n+  // vtable index of this method in its place: any attempt to call\n+  // that method will result in an error.\n+  void throwNoSuchMethodError()\n+  {\n+    throw new NoSuchMethodError(\"in \" + getClass());\n+  }\n+\n   // Note that we don't mention the sync_info field here.  If we do,\n   // jc1 will not work correctly.\n }"}, {"sha": "7070d729b4a01588caffadfee6eeed18b242e681", "filename": "libjava/link.cc", "status": "modified", "additions": 58, "deletions": 18, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edd0f5e69ca58b69405b4422907c07abdcc5a7e/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=9edd0f5e69ca58b69405b4422907c07abdcc5a7e", "patch": "@@ -713,6 +713,17 @@ _Jv_ThrowNoSuchMethodError ()\n   throw new java::lang::NoSuchMethodError;\n }\n \n+// Throw a NoSuchFieldError.  Called by compiler-generated code when\n+// an otable entry is zero.  OTABLE_INDEX is the index in the caller's\n+// otable that refers to the missing field.  This index may be used to\n+// print diagnostic information about the field.\n+void\n+_Jv_ThrowNoSuchFieldError (int /* otable_index */)\n+{\n+  throw new java::lang::NoSuchFieldError;\n+}\n+\n+\n // This is put in empty vtable slots.\n void\n _Jv_ThrowAbstractMethodError ()\n@@ -915,12 +926,6 @@ _Jv_Linker::link_symbol_table (jclass klass)\n \n       _Jv_Utf8Const *signature = sym.signature;\n \n-      {\n-\tstatic char *bounce = (char *)_Jv_ThrowNoSuchMethodError;\n-\tptrdiff_t offset = (char *)(klass->vtable) - bounce;\n-\tklass->otable->offsets[index] = offset;\n-      }\n-\n       if (target_class == NULL)\n \tthrow new java::lang::NoClassDefFoundError \n \t  (_Jv_NewStringUTF (sym.class_name->chars()));\n@@ -948,14 +953,41 @@ _Jv_Linker::link_symbol_table (jclass klass)\n \t  meth = _Jv_LookupDeclaredMethod(target_class, sym.name, \n \t\t\t\t\t  sym.signature);\n \n-\t  if (meth != NULL)\n+\t  // Every class has a throwNoSuchMethodErrorIndex method that\n+\t  // it inherits from java.lang.Object.  Find its vtable\n+\t  // offset.\n+\t  static int throwNoSuchMethodErrorIndex;\n+\t  if (throwNoSuchMethodErrorIndex == 0)\n \t    {\n-\t      int offset = _Jv_VTable::idx_to_offset (meth->index);\n-\t      if (offset == -1)\n-\t\tJvFail (\"Bad method index\");\n-\t      JvAssert (meth->index < target_class->vtable_method_count);\n-\t      klass->otable->offsets[index] = offset;\n+\t      Utf8Const* name \n+\t\t= _Jv_makeUtf8Const (\"throwNoSuchMethodError\", \n+\t\t\t\t     strlen (\"throwNoSuchMethodError\"));\n+\t      _Jv_Method* meth\n+\t\t= _Jv_LookupDeclaredMethod (&java::lang::Object::class$, \n+\t\t\t\t\t    name, gcj::void_signature);\n+\t      throwNoSuchMethodErrorIndex \n+\t\t= _Jv_VTable::idx_to_offset (meth->index);\n \t    }\n+\t  \n+\t  // If we don't find a nonstatic method, insert the\n+\t  // vtable index of Object.throwNoSuchMethodError().\n+\t  // This defers the missing method error until an attempt\n+\t  // is made to execute it.\t  \n+\t  {\n+\t    int offset;\n+\t    \n+\t    if (meth != NULL)\n+\t      offset = _Jv_VTable::idx_to_offset (meth->index);\n+\t    else\n+\t      offset = throwNoSuchMethodErrorIndex;\t\t    \n+\t    \n+\t    if (offset == -1)\n+\t      JvFail (\"Bad method index\");\n+\t    JvAssert (meth->index < target_class->vtable_method_count);\n+\t    \n+\t    klass->otable->offsets[index] = offset;\n+\t  }\n+\n \t  if (debug_link)\n \t    fprintf (stderr, \"  offsets[%d] = %d (class %s@%p : %s(%s))\\n\",\n \t\t     (int)index,\n@@ -971,12 +1003,20 @@ _Jv_Linker::link_symbol_table (jclass klass)\n       {\n \twait_for_state(target_class, JV_STATE_PREPARED);\n \tjclass found_class;\n-\t_Jv_Field *the_field = find_field (klass, target_class, &found_class,\n-\t\t\t\t\t   sym.name, sym.signature);\n-\tif ((the_field->flags & java::lang::reflect::Modifier::STATIC))\n-\t  throw new java::lang::IncompatibleClassChangeError;\n-\telse\n-\t  klass->otable->offsets[index] = the_field->u.boffset;\n+\t_Jv_Field *the_field = NULL;\n+\ttry\n+\t  {\n+\t    the_field = find_field (klass, target_class, &found_class,\n+\t\t\t\t    sym.name, sym.signature);\n+\t    if ((the_field->flags & java::lang::reflect::Modifier::STATIC))\n+\t      throw new java::lang::IncompatibleClassChangeError;\n+\t    else\n+\t      klass->otable->offsets[index] = the_field->u.boffset;\n+\t  }\n+\tcatch (java::lang::NoSuchFieldError *err)\n+\t  {\n+\t    klass->otable->offsets[index] = 0;\n+\t  }\n       }\n     }\n "}]}