{"sha": "e2c3721c55d9c73c13a149b649522a2ab26a300d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjMzcyMWM1NWQ5YzczYzEzYTE0OWI2NDk1MjJhMmFiMjZhMzAwZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-08-25T07:36:35Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-08-25T07:36:35Z"}, "message": "decl.c (cp_tree_node_structure): Kill TINST_LEVEL case.\n\n2007-08-25  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* decl.c (cp_tree_node_structure): Kill TINST_LEVEL case.\n\t* cp-objcp-common.c (cp_tree_size): Ditto.\n\t* tree.c (cp_walk_subtrees): Ditto\n\t* cp-tree.def (TINST_LEVEL): Go away.\n\t* cp-tree.h (struct tinst_level_s): Rename to struct tinst_level,\n\tmove together with other non-tree structs.\n\t(enum cp_tree_node_structure_enum): Nuke TS_CP_TINST_LEVEL.\n\t(union lang_tree_node): Eliminate tinst_level field.\n\t(TINST_DECL, TINST_LOCATION, TINST_IN_SYSTEM_HEADER_P): Annihilate.\n\t(current_instantiation, outermost_tinst_level): Return\n\ta \"struct tinst_level *\".\n\n\t* error.c (print_instantiation_partial_context): Change second\n\tparameter to a \"struct tinst_level *\".  Replace accessor macros\n\twith field access.\n\t(print_instantiation_full_context): Likewise.\n\t* lex.c (in_main_input_context): Likewise.\n\n\t* pt.c (struct pending_templates): New.\n\t(pending_templates, last_pending_template): Use it as a type.\n\t(current_tinst_level): Change typo to \"struct tinst_level *\"\n\t(reopen_tinst_level): Accept \"struct tinst_level *\", return decl.\n\t(add_pending_template): Construct a \"struct pending_template\".\n\tReplace TINST_LEVEL accessor macros with field access.\n\t(push_tinst_level): Likewise, using GGC_NEW instead of make_node.\n\t(pop_tinst_level): Likewise.\n\t(instantiate_pending_templates): Likewise.  Factor common code used\n\twhen an instantiation has been done.\n\t(outermost_tinst_level): Replace tree_last with loop.\n\t(current_instantiation): Return a \"struct tinst_level *\".\n\nFrom-SVN: r127796", "tree": {"sha": "04d6f366703986c060bd377e1803b71669165e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d6f366703986c060bd377e1803b71669165e0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c3721c55d9c73c13a149b649522a2ab26a300d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c3721c55d9c73c13a149b649522a2ab26a300d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c3721c55d9c73c13a149b649522a2ab26a300d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c3721c55d9c73c13a149b649522a2ab26a300d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65fedc2c74fc2a77798553ea0dffc070c36a8773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fedc2c74fc2a77798553ea0dffc070c36a8773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fedc2c74fc2a77798553ea0dffc070c36a8773"}], "stats": {"total": 240, "additions": 126, "deletions": 114}, "files": [{"sha": "3c608d6bd09cee54a4e60ca2a27693ccc513458f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -1,3 +1,36 @@\n+2007-08-25  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* decl.c (cp_tree_node_structure): Kill TINST_LEVEL case.\n+\t* cp-objcp-common.c (cp_tree_size): Ditto.\n+\t* tree.c (cp_walk_subtrees): Ditto\n+\t* cp-tree.def (TINST_LEVEL): Go away.\n+\t* cp-tree.h (struct tinst_level_s): Rename to struct tinst_level,\n+\tmove together with other non-tree structs.\n+\t(enum cp_tree_node_structure_enum): Nuke TS_CP_TINST_LEVEL.\n+\t(union lang_tree_node): Eliminate tinst_level field.\n+\t(TINST_DECL, TINST_LOCATION, TINST_IN_SYSTEM_HEADER_P): Annihilate.\n+\t(current_instantiation, outermost_tinst_level): Return\n+\ta \"struct tinst_level *\".\n+\n+\t* error.c (print_instantiation_partial_context): Change second\n+\tparameter to a \"struct tinst_level *\".  Replace accessor macros\n+\twith field access.\n+\t(print_instantiation_full_context): Likewise.\n+\t* lex.c (in_main_input_context): Likewise.\n+\n+\t* pt.c (struct pending_templates): New.\n+\t(pending_templates, last_pending_template): Use it as a type.\n+\t(current_tinst_level): Change typo to \"struct tinst_level *\"\n+\t(reopen_tinst_level): Accept \"struct tinst_level *\", return decl.\n+\t(add_pending_template): Construct a \"struct pending_template\".\n+\tReplace TINST_LEVEL accessor macros with field access.\n+\t(push_tinst_level): Likewise, using GGC_NEW instead of make_node.\n+\t(pop_tinst_level): Likewise.\n+\t(instantiate_pending_templates): Likewise.  Factor common code used\n+\twhen an instantiation has been done.\n+\t(outermost_tinst_level): Replace tree_last with loop.\n+\t(current_instantiation): Return a \"struct tinst_level *\".\n+\n 2007-08-24  Ollie Wild  <aaw@google.com>\n \n \t* name-lookup.c (add_decl_to_level): Remove addition to vtables chain."}, {"sha": "04fc4a8de786ca702d7f03ae4c38c3444334fb91", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -118,7 +118,6 @@ cp_tree_size (enum tree_code code)\n {\n   switch (code)\n     {\n-    case TINST_LEVEL:\t\treturn sizeof (struct tinst_level_s);\n     case PTRMEM_CST:\t\treturn sizeof (struct ptrmem_cst);\n     case BASELINK:\t\treturn sizeof (struct tree_baselink);\n     case TEMPLATE_PARM_INDEX:\treturn sizeof (template_parm_index);"}, {"sha": "a43fa8253070a6ae451c39e6928159a6f58a18b7", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -311,17 +311,6 @@ DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)\n \n DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n \n-/* Template instantiation level node.\n-\n-   TINST_DECL contains the original DECL node.\n-   TINST_LOCATION contains the location where the template is instantiated.\n-   TINST_IN_SYSTEM_HEADER_P is true if the location is in a system header.\n-\n-   A stack of template instantiation nodes is kept through the TREE_CHAIN\n-   fields of these nodes.  */\n-\n-DEFTREECODE (TINST_LEVEL, \"TINST_LEVEL\", tcc_exceptional, 0)\n-\n /* Represents an 'offsetof' expression during template expansion.  */\n DEFTREECODE (OFFSETOF_EXPR, \"offsetof_expr\", tcc_expression, 1)\n "}, {"sha": "9a44dffd5c4a7173514fdf961882f623aa61f2d2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -229,15 +229,6 @@ struct template_parm_index_s GTY(())\n };\n typedef struct template_parm_index_s template_parm_index;\n \n-struct tinst_level_s GTY(())\n-{\n-  struct tree_common common;\n-  tree decl;\n-  location_t locus;\n-  int in_system_header_p;\n-};\n-typedef struct tinst_level_s * tinst_level_t;\n-\n struct ptrmem_cst GTY(())\n {\n   struct tree_common common;\n@@ -527,7 +518,6 @@ enum cp_tree_node_structure_enum {\n   TS_CP_GENERIC,\n   TS_CP_IDENTIFIER,\n   TS_CP_TPI,\n-  TS_CP_TINST_LEVEL,\n   TS_CP_PTRMEM,\n   TS_CP_BINDING,\n   TS_CP_OVERLOAD,\n@@ -547,7 +537,6 @@ union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;\n   struct template_parm_index_s GTY ((tag (\"TS_CP_TPI\"))) tpi;\n-  struct tinst_level_s GTY ((tag (\"TS_CP_TINST_LEVEL\"))) tinst_level;\n   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n@@ -3553,15 +3542,6 @@ typedef enum unification_kind_t {\n   DEDUCE_EXACT\n } unification_kind_t;\n \n-/* Macros for operating on a template instantiation level node.  */\n-\n-#define TINST_DECL(NODE) \\\n-  (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->decl)\n-#define TINST_LOCATION(NODE) \\\n-  (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->locus)\n-#define TINST_IN_SYSTEM_HEADER_P(NODE) \\\n-  (((tinst_level_t) TINST_LEVEL_CHECK (NODE))->in_system_header_p)\n-\n /* in class.c */\n \n extern int current_class_depth;\n@@ -4056,6 +4036,24 @@ struct cp_declarator {\n   } u;\n };\n \n+/* A level of template instantiation.  */\n+struct tinst_level GTY(())\n+{\n+  /* The immediately deeper level in the chain.  */\n+  struct tinst_level *next;\n+\n+  /* The original node.  Can be either a DECL (for a function or static\n+     data member) or a TYPE (for a class), depending on what we were\n+     asked to instantiate.  */\n+  tree decl;\n+\n+  /* The location where the template is instantiated.  */\n+  location_t locus;\n+\n+  /* True if the location is in a system header.  */\n+  bool in_system_header_p;\n+};\n+\n /* A parameter list indicating for a function with no parameters,\n    e.g  \"int f(void)\".  */\n extern cp_parameter_declarator *no_parameters;\n@@ -4448,7 +4446,7 @@ extern tree most_general_template\t\t(tree);\n extern tree get_mostly_instantiated_function_type (tree);\n extern int problematic_instantiation_changed\t(void);\n extern void record_last_problematic_instantiation (void);\n-extern tree current_instantiation\t\t(void);\n+extern struct tinst_level *current_instantiation(void);\n extern tree maybe_get_template_decl_from_type_decl (tree);\n extern int processing_template_parmlist;\n extern bool dependent_type_p\t\t\t(tree);\n@@ -4466,7 +4464,7 @@ extern tree build_non_dependent_args\t\t(tree);\n extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n extern bool explicit_class_specialization_p     (tree);\n-extern tree outermost_tinst_level\t\t(void);\n+extern struct tinst_level *outermost_tinst_level(void);\n \n /* in repo.c */\n extern void init_repo\t\t\t\t(void);"}, {"sha": "be20b12e1be3de91159967f795518a0e78133f11", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -12025,7 +12025,6 @@ cp_tree_node_structure (union lang_tree_node * t)\n     case IDENTIFIER_NODE:\treturn TS_CP_IDENTIFIER;\n     case OVERLOAD:\t\treturn TS_CP_OVERLOAD;\n     case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;\n-    case TINST_LEVEL:\t\treturn TS_CP_TINST_LEVEL;\n     case PTRMEM_CST:\t\treturn TS_CP_PTRMEM;\n     case BASELINK:\t\treturn TS_CP_BASELINK;\n     case STATIC_ASSERT:\t\treturn TS_CP_STATIC_ASSERT;"}, {"sha": "2a1fa52d3e58f1f4c6910a98cf6b05d540e61565", "filename": "gcc/cp/error.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -82,7 +82,8 @@ static const char *function_category (tree);\n static void maybe_print_instantiation_context (diagnostic_context *);\n static void print_instantiation_full_context (diagnostic_context *);\n static void print_instantiation_partial_context (diagnostic_context *,\n-\t\t\t\t\t\t tree, location_t);\n+\t\t\t\t\t\t struct tinst_level *,\n+\t\t\t\t\t\t location_t);\n static void cp_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n static void cp_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n@@ -2388,30 +2389,30 @@ function_category (tree fn)\n static void\n print_instantiation_full_context (diagnostic_context *context)\n {\n-  tree p = current_instantiation ();\n+  struct tinst_level *p = current_instantiation ();\n   location_t location = input_location;\n \n   if (p)\n     {\n-      if (current_function_decl != TINST_DECL (p)\n+      if (current_function_decl != p->decl\n \t  && current_function_decl != NULL_TREE)\n \t/* We can get here during the processing of some synthesized\n-\t   method.  Then, TINST_DECL (p) will be the function that's causing\n+\t   method.  Then, P->DECL will be the function that's causing\n \t   the synthesis.  */\n \t;\n       else\n \t{\n-\t  if (current_function_decl == TINST_DECL (p))\n+\t  if (current_function_decl == p->decl)\n \t    /* Avoid redundancy with the \"In function\" line.  */;\n \t  else\n \t    pp_verbatim (context->printer,\n \t\t\t \"%s: In instantiation of %qs:\\n\",\n \t\t\t LOCATION_FILE (location),\n-\t\t\t decl_as_string (TINST_DECL (p),\n+\t\t\t decl_as_string (p->decl,\n \t\t\t\t\t TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n \n-\t  location = TINST_LOCATION (p);\n-\t  p = TREE_CHAIN (p);\n+\t  location = p->locus;\n+\t  p = p->next;\n \t}\n     }\n \n@@ -2421,19 +2422,19 @@ print_instantiation_full_context (diagnostic_context *context)\n /* Same as above but less verbose.  */\n static void\n print_instantiation_partial_context (diagnostic_context *context,\n-\t\t\t\t     tree t, location_t loc)\n+\t\t\t\t     struct tinst_level *t, location_t loc)\n {\n   expanded_location xloc;\n-  for (; ; t = TREE_CHAIN (t))\n+  for (; ; t = t->next)\n     {\n       xloc = expand_location (loc);\n-      if (t == NULL_TREE)\n+      if (t == NULL)\n \tbreak;\n       pp_verbatim (context->printer, \"%s:%d:   instantiated from %qs\\n\",\n \t\t   xloc.file, xloc.line,\n-\t\t   decl_as_string (TINST_DECL (t),\n+\t\t   decl_as_string (t->decl,\n \t\t\t\t   TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n-      loc = TINST_LOCATION (t);\n+      loc = t->locus;\n     }\n   pp_verbatim (context->printer, \"%s:%d:   instantiated from here\",\n \t       xloc.file, xloc.line);"}, {"sha": "3bb1bf43620a856683b29208161723f96c3e2e20", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -856,11 +856,11 @@ make_aggr_type (enum tree_code code)\n bool\n in_main_input_context (void)\n {\n-  tree tl = outermost_tinst_level();\n+  struct tinst_level *tl = outermost_tinst_level();\n \n   if (tl)\n     return strcmp (main_input_filename,\n-\t\t   LOCATION_FILE (TINST_LOCATION (tl))) == 0;\n+                  LOCATION_FILE (tl->locus)) == 0;\n   else\n     return strcmp (main_input_filename, input_filename) == 0;\n }"}, {"sha": "190d07651deef81ba57e5c83c10ac121be2e244f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -52,20 +52,22 @@ typedef int (*tree_fn_t) (tree, void*);\n \n /* The PENDING_TEMPLATES is a TREE_LIST of templates whose\n    instantiations have been deferred, either because their definitions\n-   were not yet available, or because we were putting off doing the work.\n-   The TREE_PURPOSE of each entry is either a DECL (for a function or\n-   static data member), or a TYPE (for a class) indicating what we are\n-   hoping to instantiate.  The TREE_VALUE is not used.  */\n-static GTY(()) tree pending_templates;\n-static GTY(()) tree last_pending_template;\n+   were not yet available, or because we were putting off doing the work.  */\n+struct pending_template GTY (()) {\n+  struct pending_template *next;\n+  struct tinst_level *tinst;\n+};\n+\n+static GTY(()) struct pending_template *pending_templates;\n+static GTY(()) struct pending_template *last_pending_template;\n \n int processing_template_parmlist;\n static int template_header_count;\n \n static GTY(()) tree saved_trees;\n static VEC(int,heap) *inline_parm_levels;\n \n-static GTY(()) tree current_tinst_level;\n+static GTY(()) struct tinst_level *current_tinst_level;\n \n static GTY(()) tree saved_access_scope;\n \n@@ -104,7 +106,7 @@ static int unify (tree, tree, tree, tree, int);\n static void add_pending_template (tree);\n static int push_tinst_level (tree);\n static void pop_tinst_level (void);\n-static void reopen_tinst_level (tree);\n+static tree reopen_tinst_level (struct tinst_level *);\n static tree tsubst_initializer_list (tree, tree);\n static tree get_class_bindings (tree, tree, tree);\n static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t,\n@@ -5139,7 +5141,7 @@ add_pending_template (tree d)\n   tree ti = (TYPE_P (d)\n \t     ? CLASSTYPE_TEMPLATE_INFO (d)\n \t     : DECL_TEMPLATE_INFO (d));\n-  tree pt;\n+  struct pending_template *pt;\n   int level;\n \n   if (TI_PENDING_TEMPLATE_FLAG (ti))\n@@ -5148,14 +5150,16 @@ add_pending_template (tree d)\n   /* We are called both from instantiate_decl, where we've already had a\n      tinst_level pushed, and instantiate_template, where we haven't.\n      Compensate.  */\n-  level = !(current_tinst_level && TINST_DECL (current_tinst_level) == d);\n+  level = !current_tinst_level || current_tinst_level->decl != d;\n \n   if (level)\n     push_tinst_level (d);\n \n-  pt = tree_cons (current_tinst_level, d, NULL_TREE);\n+  pt = GGC_NEW (struct pending_template);\n+  pt->next = NULL;\n+  pt->tinst = current_tinst_level;\n   if (last_pending_template)\n-    TREE_CHAIN (last_pending_template) = pt;\n+    last_pending_template->next = pt;\n   else\n     pending_templates = pt;\n \n@@ -5974,7 +5978,7 @@ static int last_template_error_tick;\n static int\n push_tinst_level (tree d)\n {\n-  tree new;\n+  struct tinst_level *new;\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n@@ -5994,11 +5998,11 @@ push_tinst_level (tree d)\n       return 0;\n     }\n \n-  new = make_node (TINST_LEVEL);\n-  TINST_DECL (new) = d;\n-  TINST_LOCATION (new) = input_location;\n-  TINST_IN_SYSTEM_HEADER_P (new) = in_system_header;\n-  TREE_CHAIN (new) = current_tinst_level;\n+  new = GGC_NEW (struct tinst_level);\n+  new->decl = d;\n+  new->locus = input_location;\n+  new->in_system_header_p = in_system_header;\n+  new->next = current_tinst_level;\n   current_tinst_level = new;\n \n   ++tinst_depth;\n@@ -6017,41 +6021,44 @@ push_tinst_level (tree d)\n static void\n pop_tinst_level (void)\n {\n-  tree old = current_tinst_level;\n-\n   /* Restore the filename and line number stashed away when we started\n      this instantiation.  */\n-  input_location = TINST_LOCATION (old);\n-  in_system_header = TINST_IN_SYSTEM_HEADER_P (old);\n-  current_tinst_level = TREE_CHAIN (old);\n+  input_location = current_tinst_level->locus;\n+  in_system_header = current_tinst_level->in_system_header_p;\n+  current_tinst_level = current_tinst_level->next;\n   --tinst_depth;\n   ++tinst_level_tick;\n }\n \n /* We're instantiating a deferred template; restore the template\n    instantiation context in which the instantiation was requested, which\n-   is one step out from LEVEL.  */\n+   is one step out from LEVEL.  Return the corresponding DECL or TYPE.  */\n \n-static void\n-reopen_tinst_level (tree level)\n+static tree\n+reopen_tinst_level (struct tinst_level *level)\n {\n-  tree t;\n+  struct tinst_level *t;\n \n   tinst_depth = 0;\n-  for (t = level; t; t = TREE_CHAIN (t))\n+  for (t = level; t; t = t->next)\n     ++tinst_depth;\n \n   current_tinst_level = level;\n   pop_tinst_level ();\n+  return level->decl;\n }\n \n /* Returns the TINST_LEVEL which gives the original instantiation\n    context.  */\n \n-tree\n+struct tinst_level *\n outermost_tinst_level (void)\n {\n-  return tree_last (current_tinst_level);\n+  struct tinst_level *level = current_tinst_level;\n+  if (level)\n+    while (level->next)\n+      level = level->next;\n+  return level;\n }\n \n /* DECL is a friend FUNCTION_DECL or TEMPLATE_DECL.  ARGS is the\n@@ -14486,8 +14493,6 @@ instantiate_decl (tree d, int defer_ok,\n void\n instantiate_pending_templates (int retries)\n {\n-  tree *t;\n-  tree last = NULL_TREE;\n   int reconsider;\n   location_t saved_loc = input_location;\n   int saved_in_system_header = in_system_header;\n@@ -14497,7 +14502,7 @@ instantiate_pending_templates (int retries)\n      to avoid infinite loop.  */\n   if (pending_templates && retries >= max_tinst_depth)\n     {\n-      tree decl = TREE_VALUE (pending_templates);\n+      tree decl = pending_templates->tinst->decl;\n \n       error (\"template instantiation depth exceeds maximum of %d\"\n \t     \" instantiating %q+D, possibly from virtual table generation\"\n@@ -14511,14 +14516,13 @@ instantiate_pending_templates (int retries)\n \n   do\n     {\n+      struct pending_template **t = &pending_templates;\n+      struct pending_template *last = NULL;\n       reconsider = 0;\n-\n-      t = &pending_templates;\n       while (*t)\n \t{\n-\t  tree instantiation = TREE_VALUE (*t);\n-\n-\t  reopen_tinst_level (TREE_PURPOSE (*t));\n+\t  tree instantiation = reopen_tinst_level ((*t)->tinst);\n+\t  bool complete = false;\n \n \t  if (TYPE_P (instantiation))\n \t    {\n@@ -14539,15 +14543,7 @@ instantiate_pending_templates (int retries)\n \t\t    reconsider = 1;\n \t\t}\n \n-\t      if (COMPLETE_TYPE_P (instantiation))\n-\t\t/* If INSTANTIATION has been instantiated, then we don't\n-\t\t   need to consider it again in the future.  */\n-\t\t*t = TREE_CHAIN (*t);\n-\t      else\n-\t\t{\n-\t\t  last = *t;\n-\t\t  t = &TREE_CHAIN (*t);\n-\t\t}\n+\t      complete = COMPLETE_TYPE_P (instantiation);\n \t    }\n \t  else\n \t    {\n@@ -14562,19 +14558,21 @@ instantiate_pending_templates (int retries)\n \t\t    reconsider = 1;\n \t\t}\n \n-\t      if (DECL_TEMPLATE_SPECIALIZATION (instantiation)\n-\t\t  || DECL_TEMPLATE_INSTANTIATED (instantiation))\n-\t\t/* If INSTANTIATION has been instantiated, then we don't\n-\t\t   need to consider it again in the future.  */\n-\t\t*t = TREE_CHAIN (*t);\n-\t      else\n-\t\t{\n-\t\t  last = *t;\n-\t\t  t = &TREE_CHAIN (*t);\n-\t\t}\n+\t      complete = (DECL_TEMPLATE_SPECIALIZATION (instantiation)\n+\t\t\t  || DECL_TEMPLATE_INSTANTIATED (instantiation));\n+\t    }\n+\n+\t  if (complete)\n+\t    /* If INSTANTIATION has been instantiated, then we don't\n+\t       need to consider it again in the future.  */\n+\t    *t = (*t)->next;\n+\t  else\n+\t    {\n+\t      last = *t;\n+\t      t = &(*t)->next;\n \t    }\n \t  tinst_depth = 0;\n-\t  current_tinst_level = NULL_TREE;\n+\t  current_tinst_level = NULL;\n \t}\n       last_pending_template = last;\n     }\n@@ -14823,7 +14821,7 @@ record_last_problematic_instantiation (void)\n   last_template_error_tick = tinst_level_tick;\n }\n \n-tree\n+struct tinst_level *\n current_instantiation (void)\n {\n   return current_tinst_level;"}, {"sha": "12589c330d7592b270ae395e4959c3ecc7fae400", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c3721c55d9c73c13a149b649522a2ab26a300d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e2c3721c55d9c73c13a149b649522a2ab26a300d", "patch": "@@ -2318,11 +2318,6 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       *walk_subtrees_p = 0;\n       break;\n \n-    case TINST_LEVEL:\n-      WALK_SUBTREE (TINST_DECL (*tp));\n-      *walk_subtrees_p = 0;\n-      break;\n-\n     case PTRMEM_CST:\n       WALK_SUBTREE (TREE_TYPE (*tp));\n       *walk_subtrees_p = 0;"}]}