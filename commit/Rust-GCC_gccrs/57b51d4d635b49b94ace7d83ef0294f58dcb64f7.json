{"sha": "57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiNTFkNGQ2MzViNDliOTRhY2U3ZDgzZWYwMjk0ZjU4ZGNiNjRmNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-09-06T02:05:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-09-06T02:05:07Z"}, "message": "gimplify.c, [...]: Fix comment typos.\n\n\t* gimplify.c, ipa-prop.h, varasm.c, config/vxlib.c,\n\tconfig/vxworks.h, config/crx/crx.c, config/ms1/ms1.c,\n\tconfig/ms1/ms1.md, config/rs6000/rs6000.c: Fix comment typos.\n\tFollow spelling conventions.\n\t* doc/invoke.texi: Follow spelling conventions.\n\nFrom-SVN: r103925", "tree": {"sha": "5be91040457888b19bef16f6de412ce62f0c496c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be91040457888b19bef16f6de412ce62f0c496c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/comments", "author": null, "committer": null, "parents": [{"sha": "7a7d74a971853f7186bec8d87ca8171c21243e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7d74a971853f7186bec8d87ca8171c21243e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a7d74a971853f7186bec8d87ca8171c21243e3e"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "c14950117c81c0618ac922f3388324b9a62115a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -1,3 +1,11 @@\n+2005-09-06  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* gimplify.c, ipa-prop.h, varasm.c, config/vxlib.c,\n+\tconfig/vxworks.h, config/crx/crx.c, config/ms1/ms1.c,\n+\tconfig/ms1/ms1.md, config/rs6000/rs6000.c: Fix comment typos.\n+\tFollow spelling conventions.\n+\t* doc/invoke.texi: Follow spelling conventions.\n+\n 2005-09-05  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* rtl.h (gen_frame_mem, gen_tmp_stack_mem): Declare."}, {"sha": "838993e8174ff0205c6235761805f3bfe49e9c4d", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -816,7 +816,7 @@ crx_address_cost (rtx addr)\n   if (addrtype == CRX_ABSOLUTE)\n     cost+=2;\n   \n-  /* Post-modifying addresses are more powerfull. */\n+  /* Post-modifying addresses are more powerful.  */\n   if (addrtype == CRX_POST_INC)\n     cost-=2;\n "}, {"sha": "25ba78ec40b5c97dc468711b852faa16e19bede0", "filename": "gcc/config/ms1/ms1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fms1%2Fms1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fms1%2Fms1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -1211,7 +1211,7 @@ ms1_expand_epilogue (enum epilogue_type eh_mode)\n \t\t\t   stack_pointer_rtx,\n \t\t\t   cfun->machine->eh_stack_adjust));\n \n-  /* Generate the approriate return.  */\n+  /* Generate the appropriate return.  */\n   if (eh_mode == EH_EPILOGUE)\n     {\n       emit_jump_insn (gen_eh_return_internal ());"}, {"sha": "df4ca2cf2bc9add4c78b72d10afac844471fd49d", "filename": "gcc/config/ms1/ms1.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fms1%2Fms1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fms1%2Fms1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.md?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -72,11 +72,11 @@\n ;; This pattern implements the decrement and branch non-zero instruction\n ;; which can be used by gcc loop optimizer under certain conditions.\n ;; For an example of it being used try compiling the gcc test case\n-;; gcc.c-torture/execute/921213-1.c with optimisations enabled.\n+;; gcc.c-torture/execute/921213-1.c with optimizations enabled.\n \n ;; XXX - FIXME - TARGET_MUL is used as a condition since it is set when the\n ;; target is the MS1-16-003, which is the only Morpho CPU which currently\n-;; implements this instruction.  Stricly speaking we ought to define a\n+;; implements this instruction.  Strictly speaking we ought to define a\n ;; new command line switch to enable/disable the DBNZ instruction or else\n ;; change this pattern so that it explicitly checks for an MS1-16-003\n ;; architecture.\n@@ -515,7 +515,7 @@\n \n ;; Note - it is best to only have one movsi pattern and to handle\n ;; all the various contingencies by the use of alternatives.  This\n-;; allows reload the greatest amount of flexability (since reload will\n+;; allows reload the greatest amount of flexibility (since reload will\n ;; only choose amoungst alternatives for a selected insn, it will not\n ;; replace the insn with another one).\n (define_insn \"*movsi_internal\""}, {"sha": "6cc10ec24ef1165945871832d620672e6c46b0de", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -2260,7 +2260,7 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n     {\n       rtx copy = copy_rtx (vals);\n \n-      /* Load constant part of vector, substititute neighboring value for\n+      /* Load constant part of vector, substitute neighboring value for\n \t varying element.  */\n       XVECEXP (copy, 0, one_var) = XVECEXP (vals, 0, (one_var + 1) % n_elts);\n       rs6000_expand_vector_init (target, copy);"}, {"sha": "8625981a3151fc3c261ce5df6a2ee4ff48095365", "filename": "gcc/config/vxlib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fvxlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fvxlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxlib.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -252,7 +252,7 @@ tls_destructor (void)\n /* External interface */\n \n /* Store in KEYP a value which can be passed to __gthread_setspecific/\n-   __gthread_getspecific to store and retrive a value which is\n+   __gthread_getspecific to store and retrieve a value which is\n    specific to each calling thread.  If DTOR is not NULL, it will be\n    called when a thread terminates with a non-NULL specific value for\n    this key, with the value as its sole argument.  */"}, {"sha": "70345e24608ae1ac1c7a244271649c9db07f6af9", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -39,7 +39,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n  %{!mrtp:-D_WRS_KERNEL=1\t\t\t\t\t\t\\\n \t %{!nostdinc:-isystem \" VXWORKS_TARGET_DIR \"/h}}\"\n \n-/* The references to __init and __fini will be satisified by\n+/* The references to __init and __fini will be satisfied by\n    libc_internal.a.  */\n #undef VXWORKS_LIB_SPEC\n #define\tVXWORKS_LIB_SPEC\t\t\t\t\t\t\\"}, {"sha": "d31523ac44601677b2a70e3aa6b23d592494edd0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -10608,7 +10608,7 @@ Use simulator runtime\n @item -mno-crt0\n @opindex mno-crt0\n Do not link in the C run-time initialization object file\n-@file{crti.o}.  Other run-time initialisation and termination files\n+@file{crti.o}.  Other run-time initialization and termination files\n such as @file{startup.o} and @file{exit.o} are still included on the\n linker command line.\n "}, {"sha": "a2fc7c8510f27766f16237acb644f07c63da55a9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -4460,7 +4460,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t     exception here, as all we are doing here is ensuring that\n \t     we read the bytes that make up the type.  We use\n \t     create_tmp_var_raw because create_tmp_var will abort when\n-\t     given a TREE_ADDRESSSABLE type.  */\n+\t     given a TREE_ADDRESSABLE type.  */\n \t  tree tmp = create_tmp_var_raw (type, \"vol\");\n \t  gimple_add_tmp_var (tmp);\n \t  *expr_p = build (MODIFY_EXPR, type, tmp, *expr_p);"}, {"sha": "82d0ca55711fdd13ee9710ad19788e3732fe8023", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -60,7 +60,7 @@ enum cvalue_type\n };\n \n /* Represents the value of either jump function or cval.\n-   value represnts a constant.\n+   value represents a constant.\n    formal_id is used only in jump function context and represents \n    pass-through parameter (the formal of caller is passed \n    as argument).  */"}, {"sha": "d0f7afc884654d77ea256160acfec7a72846d153", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b51d4d635b49b94ace7d83ef0294f58dcb64f7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=57b51d4d635b49b94ace7d83ef0294f58dcb64f7", "patch": "@@ -3847,7 +3847,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n   if (size == 0 || flag_syntax_only)\n     return;\n \n-  /* See if we're trying to intialize a pointer in a non-default mode\n+  /* See if we're trying to initialize a pointer in a non-default mode\n      to the address of some declaration somewhere.  If the target says\n      the mode is valid for pointers, assume the target has a way of\n      resolving it.  */"}]}