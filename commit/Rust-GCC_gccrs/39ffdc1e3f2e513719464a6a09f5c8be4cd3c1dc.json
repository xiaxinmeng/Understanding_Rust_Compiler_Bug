{"sha": "39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmZmRjMWUzZjJlNTEzNzE5NDY0YTZhMDlmNWM4YmU0Y2QzYzFkYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-20T23:03:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-20T23:03:14Z"}, "message": "(eval_if_expression): Now returns HOST_WIDE_INT.\n\n(do_if, do_elif): Reflect new return value of functions.\n\nFrom-SVN: r8107", "tree": {"sha": "e382798b23d38bcd718129203f3da96f56b86fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e382798b23d38bcd718129203f3da96f56b86fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc/comments", "author": null, "committer": null, "parents": [{"sha": "979b374813e960a9536d886e8c96182db02e6078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979b374813e960a9536d886e8c96182db02e6078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979b374813e960a9536d886e8c96182db02e6078"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "ea2e2b3a9da738e59705cd6678663230714e3c98", "filename": "gcc/cccp.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=39ffdc1e3f2e513719464a6a09f5c8be4cd3c1dc", "patch": "@@ -200,6 +200,7 @@ char *strerror ();\n char *strerror (int,...);\n #endif\n extern int parse_escape ();\n+extern HOST_WIDE_INT parse_c_expression ();\n \n #ifndef errno\n extern int errno;\n@@ -283,7 +284,7 @@ static void write_output ();\n static int check_macro_name ();\n static int compare_defs ();\n static int compare_token_lists ();\n-static int eval_if_expression ();\n+static HOST_WIDE_INT eval_if_expression ();\n static int discard_comments ();\n static int change_newlines ();\n static int line_for_error ();\n@@ -6726,7 +6727,7 @@ do_if (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  int value;\n+  HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n \n   value = eval_if_expression (buf, limit - buf);\n@@ -6745,7 +6746,7 @@ do_elif (buf, limit, op, keyword)\n      FILE_BUF *op;\n      struct directive *keyword;\n {\n-  int value;\n+  HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n \n   if (if_stack == instack[indepth].if_stack) {\n@@ -6781,14 +6782,14 @@ do_elif (buf, limit, op, keyword)\n  * evaluate a #if expression in BUF, of length LENGTH,\n  * then parse the result as a C expression and return the value as an int.\n  */\n-static int\n+static HOST_WIDE_INT\n eval_if_expression (buf, length)\n      U_CHAR *buf;\n      int length;\n {\n   FILE_BUF temp_obuf;\n   HASHNODE *save_defined;\n-  int value;\n+  HOST_WIDE_INT value;\n \n   save_defined = install (\"defined\", -1, T_SPEC_DEFINED, 0, NULL_PTR, -1);\n   pcp_inside_if = 1;"}]}