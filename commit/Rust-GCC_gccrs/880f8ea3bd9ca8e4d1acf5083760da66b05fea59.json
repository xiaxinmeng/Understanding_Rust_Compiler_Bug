{"sha": "880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwZjhlYTNiZDljYThlNGQxYWNmNTA4Mzc2MGRhNjZiMDVmZWE1OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-09-22T18:36:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-09-22T18:36:39Z"}, "message": "user.cfg.in: Define _GLIBCXX_HAS_GTHREADS for mutex, condition_variable, and thread output.\n\n\n2008-09-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/user.cfg.in: Define _GLIBCXX_HAS_GTHREADS for mutex,\n\tcondition_variable, and thread output.\n\nFrom-SVN: r140560", "tree": {"sha": "765ded06c0e461593c32a0365acc65f2e3591752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765ded06c0e461593c32a0365acc65f2e3591752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880f8ea3bd9ca8e4d1acf5083760da66b05fea59/comments", "author": null, "committer": null, "parents": [{"sha": "7846e5f9168a3909188afb578ab5b721ba629c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7846e5f9168a3909188afb578ab5b721ba629c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7846e5f9168a3909188afb578ab5b721ba629c7d"}], "stats": {"total": 456, "additions": 231, "deletions": 225}, "files": [{"sha": "9fce6436f9ad288c45627b49e29a885cff3a9c92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 230, "deletions": 225, "changes": 455, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8ea3bd9ca8e4d1acf5083760da66b05fea59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8ea3bd9ca8e4d1acf5083760da66b05fea59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "patch": "@@ -1,3 +1,8 @@\n+2008-09-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Define _GLIBCXX_HAS_GTHREADS for mutex,\n+\tcondition_variable, and thread output.\n+\n 2008-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* doc/html/ext/lwg-closed.html: Update to Revision R59.\n@@ -12,12 +17,12 @@\n \n 2008-09-19  Johannes Singler  <singler@ira.uka.de>\n \n-        PR libstdc++/37470\n-        * include/parallel/base.h: Rename log2 to __log2.\n+\tPR libstdc++/37470\n+\t* include/parallel/base.h: Rename log2 to __log2.\n \t  (__log2) Avoid infinite loop for n <= 0, return 0.\n-        * include/parallel/losertree.h: Rename log2 to __log2.\n-        * include/parallel/multiseq_selection.h: Likewise.\n-        * include/parallel/random_shuffle.h: Likewise.\n+\t* include/parallel/losertree.h: Rename log2 to __log2.\n+\t* include/parallel/multiseq_selection.h: Likewise.\n+\t* include/parallel/random_shuffle.h: Likewise.\n \n 2008-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -37,41 +42,41 @@\n \t* include/bits/algorithmfwd.h: Adjust.\n \t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Likewise.\n \t* testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc:\n-        Likewise.\n-        * testsuite/25_algorithms/max/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n+\tLikewise.\n+\t* testsuite/25_algorithms/max/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n \t* testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc:\n-        Likewise.\n-        * testsuite/25_algorithms/min/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n+\tLikewise.\n+\t* testsuite/25_algorithms/min/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n \t* testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n \t3.cc: Likewise.\n-        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n \t* testsuite/25_algorithms/max/37547.cc: New.\n \t* testsuite/25_algorithms/min/37547.cc: Likewise.\n \t* testsuite/25_algorithms/minmax/37547.cc: Likewise.\n \n 2008-09-16  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc:\n-        New.\n-        * testsuite/25_algorithms/min/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n-        * testsuite/25_algorithms/min/3.cc: Likewise.\n-        * testsuite/25_algorithms/min/4.cc: Likewise.\n-        * testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc:\n-        Likewise.\n-        * testsuite/25_algorithms/max/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n-        * testsuite/25_algorithms/max/3.cc: Likewise.\n-        * testsuite/25_algorithms/max/4.cc: Likewise.\n-        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n-        3.cc: Likewise.\n-        * testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n-        pod2.cc: Likewise.\n-        * testsuite/25_algorithms/minmax/2.cc: Likewise.\n-        * testsuite/25_algorithms/minmax/3.cc: Likewise.\n+\t* testsuite/25_algorithms/min/requirements/explicit_instantiation/3.cc:\n+\tNew.\n+\t* testsuite/25_algorithms/min/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n+\t* testsuite/25_algorithms/min/3.cc: Likewise.\n+\t* testsuite/25_algorithms/min/4.cc: Likewise.\n+\t* testsuite/25_algorithms/max/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/max/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n+\t* testsuite/25_algorithms/max/3.cc: Likewise.\n+\t* testsuite/25_algorithms/max/4.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n+\t3.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/requirements/explicit_instantiation/\n+\tpod2.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/2.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/3.cc: Likewise.\n \n 2008-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -84,11 +89,11 @@\n \n 2008-09-13  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * testsuite/30_threads/thread/algorithm/1.cc: Join thread before\n-        program exits.\n-        * testsuite/30_threads/thread/algorithm/2.cc: Likewise.\n-        * testsuite/30_threads/thread/this_thread/3.cc: Define test variable.\n-        * testsuite/30_threads/thread/this_thread/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/algorithm/1.cc: Join thread before\n+\tprogram exits.\n+\t* testsuite/30_threads/thread/algorithm/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/this_thread/3.cc: Define test variable.\n+\t* testsuite/30_threads/thread/this_thread/4.cc: Likewise.\n \n 2008-09-12  Chris Fairles  <chris.fairles@gmail.com>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n@@ -123,7 +128,7 @@\n \t* testsuite/30_threads/headers/thread/types_std_c++0x.cc: Likewise.\n \t* testsuite/30_threads/headers/thread/std_c++0x_neg.cc: Likewise.\n \t* testsuite/17_intro/headers/c++200x/all.cc: Add thread.\n-\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: \n+\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc:\n \tAdd thread, condition_variable and mutex.\n \n 2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -159,7 +164,7 @@\n \t* doc/xml/manual/abi.xml: Update for new releases.\n \t* doc/doxygen/user.cfg.in: Include C compatibility headers.\n \t* doc/html/*: Regenerate.\n-\t\n+\n 2008-09-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/cinttypes: Restore __STDC_FORMAT_MACROS after\n@@ -232,9 +237,9 @@\n \n 2008-09-04  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * include/std/mutex (once_flag): Construct __gthread_once_t in a\n+\t* include/std/mutex (once_flag): Construct __gthread_once_t in a\n \ttemporary variable before assigning to _M_once to avoid initialization\n-\terrors. \n+\terrors.\n \n 2008-09-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -263,8 +268,8 @@\n \n 2008-09-03  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * include/std/condition_variable: Use new deleted ctors.\n-        * include/std/mutex: Likewise plus implement timed_mutex, \n+\t* include/std/condition_variable: Use new deleted ctors.\n+\t* include/std/mutex: Likewise plus implement timed_mutex,\n \trecursive_timed_mutex and call_once.\n \t* src/condition_variable.cc: Implement wait(). Use gthread types.\n \tRemove _GTHREADS_HAS_COND checks in favor of global\n@@ -288,22 +293,22 @@\n \t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n \t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n \tLikewise.\n-        * testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n \t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/requirements/typedefs.cc:\n+\t* testsuite/30_threads/recursive_mutex/requirements/typedefs.cc:\n \tLikewise.\n-        * testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n \t* testsuite/30_threads/unique_lock/requirements/\n \texplicit_instantiation.cc: Likewise.\n \t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: Likewise.\n-        * testsuite/30_threads/mutex/cons/assign_neg.cc: Also adjust dg-error\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Also adjust dg-error\n \tlines for deleted members.\n-        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n \t* testsuite/30_threads/call_once/once_flag.cc: New.\n \t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n \t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n@@ -329,16 +334,16 @@\n \t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n \t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n \t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n-\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc: \n+\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc:\n \tLikewise.\n-\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc: \n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n \tLikewise.\n-\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc: \n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n \tLikewise.\n-\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc: \n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc:\n \tLikewise.\n \t* testsuite/30_threads/recursive_timed_mutex/cons: Likewise.\n-\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: \n+\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n \tLikewise.\n \t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n \t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc:\n@@ -422,7 +427,7 @@\n \n 2008-08-28  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): New. Checks for gthread\n+\t* acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): New. Checks for gthread\n \tsupport used by c++0x thread library.\n \t* configure.ac: Test unconditionally.\n \t* configure: Regenerate.\n@@ -439,8 +444,8 @@\n \t* doc/xml/manual/test.xml: Same.\n \t* doc/xml/manual/build.xml: Remove.\n \t* doc/xml/manual/prerequisites.xml: Add.\n-\t* doc/html/*: Regenerate. \n-\t\n+\t* doc/html/*: Regenerate.\n+\n 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/hashtable (_Hashtable<>): Add missing pointer and\n@@ -474,7 +479,7 @@\n 2008-08-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* linkage.m4 ([GLIBCXX_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1],\n-\t[GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT]): Remove \n+\t[GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT]): Remove\n \t* configure.ac: Do not call the latter.\n \t* crossconfig.m4: Likewise.\n \t* libmath/mathconf.h: Adjust.\n@@ -516,44 +521,44 @@\n \t* testsuite/lib/libstdc++.exp (check_v3_target_atomic_builtins): Add.\n \t* testsuite/lib/dg-options.exp (dg-require-atomic-builtins): Likewise.\n \t* testsuite/18_support/exception_ptr/current_exception.cc: Use it.\n-        * testsuite/18_support/exception_ptr/rethrow_exception.cc: Likewise.\n-        * testsuite/18_support/exception_ptr/lifespan.cc: Likewise.\n+\t* testsuite/18_support/exception_ptr/rethrow_exception.cc: Likewise.\n+\t* testsuite/18_support/exception_ptr/lifespan.cc: Likewise.\n \n 2008-08-23  Sebastian Redl <sebastian.redl@getdesigned.at>\n \n \tAdd (again) exception propagation support as per N2179.  Feature is\n \tavailable only when _GLIBCXX_ATOMIC_BUILTINS_4 is defined.\n \t* libsupc++/exception_ptr.h (exception_ptr, current_exception,\n-        copy_exception, rethrow_exception): New file, implement exception\n+\tcopy_exception, rethrow_exception): New file, implement exception\n \tpropagation.\n-        * libsupc++/eh_ptr.cc (exception_ptr, current_exception,\n-        rethrow_exception, __gxx_dependent_exception_cleanup): Likewise.\n-        * libsupc++/unwind-cxx.h (__cxa_exception): Add reference count.\n+\t* libsupc++/eh_ptr.cc (exception_ptr, current_exception,\n+\trethrow_exception, __gxx_dependent_exception_cleanup): Likewise.\n+\t* libsupc++/unwind-cxx.h (__cxa_exception): Add reference count.\n \t(__cxa_dependent_exception, __cxa_allocate_dependent_exception,\n-        __cxa_free_dependent_exception, __get_dependent_exception_from_ue,\n-        __GXX_INIT_DEPENDENT_EXCEPTION_CLASS, __is_dependent_exception,\n-        __gxx_dependent_exception_class, __get_object_from_ue,\n-        __get_object_from_ambiguous_exception): Add.\n-        (__GXX_INIT_EXCEPTION_CLASS, __gxx_exception_class): Rename.\n-        (__is_gxx_exception_class): Handle dependent exceptions.\n-        * libsupc++/eh_arm.cc (__cxa_type_match): Likewise.\n-        * libsupc++/eh_call.cc (__cxa_call_unexpected): Likewise.\n-        * libsupc++/eh_personality.cc (__gxx_personality_*): Likewise.\n-        * libsupc++/eh_type.cc (__cxa_current_exception_type): Likewise.\n-        * libsupc++/eh_alloc.cc (__cxa_allocate_dependent_exception,\n-        __cxa_free_dependent_exception): Add.\n-        * libsupc++/eh_throw.cc (__gxx_exception_cleanup): Handle reference\n-        counting.\n-        * libsupc++/exception: Conditionally include exception_ptr.h.\n-        * libsupc++/Makefile.am: Register new files.\n-        * libsupc++/Makefile.in: Regenerate.\n-        * config/abi/pre/gnu.ver: Add new symbols.\n-        * testsuite/18_support/exception_ptr/current_exception.cc: Test the\n-        core functionality of current_exception().\n-        * testsuite/18_support/exception_ptr/rethrow_exception.cc: Test the\n-        core functionality of rethrow_exception().\n-        * testsuite/18_support/exception_ptr/lifespan.cc: Test the life span of\n-        exception objects during exception propagation.\n+\t__cxa_free_dependent_exception, __get_dependent_exception_from_ue,\n+\t__GXX_INIT_DEPENDENT_EXCEPTION_CLASS, __is_dependent_exception,\n+\t__gxx_dependent_exception_class, __get_object_from_ue,\n+\t__get_object_from_ambiguous_exception): Add.\n+\t(__GXX_INIT_EXCEPTION_CLASS, __gxx_exception_class): Rename.\n+\t(__is_gxx_exception_class): Handle dependent exceptions.\n+\t* libsupc++/eh_arm.cc (__cxa_type_match): Likewise.\n+\t* libsupc++/eh_call.cc (__cxa_call_unexpected): Likewise.\n+\t* libsupc++/eh_personality.cc (__gxx_personality_*): Likewise.\n+\t* libsupc++/eh_type.cc (__cxa_current_exception_type): Likewise.\n+\t* libsupc++/eh_alloc.cc (__cxa_allocate_dependent_exception,\n+\t__cxa_free_dependent_exception): Add.\n+\t* libsupc++/eh_throw.cc (__gxx_exception_cleanup): Handle reference\n+\tcounting.\n+\t* libsupc++/exception: Conditionally include exception_ptr.h.\n+\t* libsupc++/Makefile.am: Register new files.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add new symbols.\n+\t* testsuite/18_support/exception_ptr/current_exception.cc: Test the\n+\tcore functionality of current_exception().\n+\t* testsuite/18_support/exception_ptr/rethrow_exception.cc: Test the\n+\tcore functionality of rethrow_exception().\n+\t* testsuite/18_support/exception_ptr/lifespan.cc: Test the life span of\n+\texception objects during exception propagation.\n \n 2008-08-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -666,15 +671,15 @@\n \twith -fno-exceptions as flags.\n \t* configure.ac: Run unconditionally GLIBCXX_CHECK_LFS,\n \tGLIBCXX_CHECK_POLL, GLIBCXX_CHECK_S_ISREG_OR_S_IFREG,\n-\tGLIBCXX_CHECK_WRITEV and commonized AC_CHECK_HEADERS. \n+\tGLIBCXX_CHECK_WRITEV and commonized AC_CHECK_HEADERS.\n \t* crossconfig.m4: Adjust; remove AC_CHECK_HEADERS commonized\n \tin configure.ac.\n \t* configure: Regenerate.\n \n 2008-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRe-instate last patch, amended to use __exchange_and_add_dispatch\n-\tand __atomic_add_dispatch in eh_ptr.cc and eh_throw.cc. \n+\tand __atomic_add_dispatch in eh_ptr.cc and eh_throw.cc.\n \n 2008-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -683,37 +688,37 @@\n 2008-08-13  Sebastian Redl <sebastian.redl@getdesigned.at>\n \n \tAdd exception propagation support as per N2179.\n-        * libsupc++/exception_ptr.h (exception_ptr, current_exception,\n-        copy_exception, rethrow_exception): New file, implement exception\n+\t* libsupc++/exception_ptr.h (exception_ptr, current_exception,\n+\tcopy_exception, rethrow_exception): New file, implement exception\n \tpropagation.\n-        * libsupc++/eh_ptr.cc (exception_ptr, current_exception,\n-        rethrow_exception, __gxx_dependent_exception_cleanup): Likewise.\n-        * libsupc++/unwind-cxx.h (__cxa_exception): Add reference count.\n+\t* libsupc++/eh_ptr.cc (exception_ptr, current_exception,\n+\trethrow_exception, __gxx_dependent_exception_cleanup): Likewise.\n+\t* libsupc++/unwind-cxx.h (__cxa_exception): Add reference count.\n \t(__cxa_dependent_exception, __cxa_allocate_dependent_exception,\n-        __cxa_free_dependent_exception, __get_dependent_exception_from_ue,\n-        __GXX_INIT_DEPENDENT_EXCEPTION_CLASS, __is_dependent_exception,\n-        __gxx_dependent_exception_class, __get_object_from_ue,\n-        __get_object_from_ambiguous_exception): Add.\n-        (__GXX_INIT_EXCEPTION_CLASS, __gxx_exception_class): Rename.\n-        (__is_gxx_exception_class): Handle dependent exceptions.\n-        * libsupc++/eh_arm.cc (__cxa_type_match): Likewise.\n-        * libsupc++/eh_call.cc (__cxa_call_unexpected): Likewise.\n-        * libsupc++/eh_personality.cc (__gxx_personality_*): Likewise.\n-        * libsupc++/eh_type.cc (__cxa_current_exception_type): Likewise.\n-        * libsupc++/eh_alloc.cc (__cxa_allocate_dependent_exception,\n-        __cxa_free_dependent_exception): Add.\n-        * libsupc++/eh_throw.cc (__gxx_exception_cleanup): Handle reference\n-        counting.\n-        * libsupc++/exception: Conditionally include exception_ptr.h.\n-        * libsupc++/Makefile.am: Register new files.\n-        * libsupc++/Makefile.in: Regenerate.\n-        * config/abi/pre/gnu.ver: Add new symbols.\n-        * testsuite/18_support/exception_ptr/current_exception.cc: Test the\n-        core functionality of current_exception().\n-        * testsuite/18_support/exception_ptr/rethrow_exception.cc: Test the\n-        core functionality of rethrow_exception().\n-        * testsuite/18_support/exception_ptr/lifespan.cc: Test the life span of\n-        exception objects during exception propagation.\n+\t__cxa_free_dependent_exception, __get_dependent_exception_from_ue,\n+\t__GXX_INIT_DEPENDENT_EXCEPTION_CLASS, __is_dependent_exception,\n+\t__gxx_dependent_exception_class, __get_object_from_ue,\n+\t__get_object_from_ambiguous_exception): Add.\n+\t(__GXX_INIT_EXCEPTION_CLASS, __gxx_exception_class): Rename.\n+\t(__is_gxx_exception_class): Handle dependent exceptions.\n+\t* libsupc++/eh_arm.cc (__cxa_type_match): Likewise.\n+\t* libsupc++/eh_call.cc (__cxa_call_unexpected): Likewise.\n+\t* libsupc++/eh_personality.cc (__gxx_personality_*): Likewise.\n+\t* libsupc++/eh_type.cc (__cxa_current_exception_type): Likewise.\n+\t* libsupc++/eh_alloc.cc (__cxa_allocate_dependent_exception,\n+\t__cxa_free_dependent_exception): Add.\n+\t* libsupc++/eh_throw.cc (__gxx_exception_cleanup): Handle reference\n+\tcounting.\n+\t* libsupc++/exception: Conditionally include exception_ptr.h.\n+\t* libsupc++/Makefile.am: Register new files.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add new symbols.\n+\t* testsuite/18_support/exception_ptr/current_exception.cc: Test the\n+\tcore functionality of current_exception().\n+\t* testsuite/18_support/exception_ptr/rethrow_exception.cc: Test the\n+\tcore functionality of rethrow_exception().\n+\t* testsuite/18_support/exception_ptr/lifespan.cc: Test the life span of\n+\texception objects during exception propagation.\n \n 2008-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -722,9 +727,9 @@\n \n 2008-08-12  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/paralle/losertree.h \n-        (LoserTreePointerBase<>::~LoserTreePointerBase):\n-        Replace delete by appropriate delete[].\n+\t* include/paralle/losertree.h\n+\t(LoserTreePointerBase<>::~LoserTreePointerBase):\n+\tReplace delete by appropriate delete[].\n \n 2008-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -812,7 +817,7 @@\n \tlong or long long don't include <stdint.h> unnecessarily.\n \t* configure: Regenerate.\n \t* config.h.in: Likewise.\n-\t\n+\n 2008-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_api.h (diamond_derivation<>::test):\n@@ -855,20 +860,20 @@\n \t* acinclude.m4 ([GLIBCXX_CHECK_CLOCK_GETTIME]): Reinstate clock_gettime\n \tsearch, but only in libposix4, never link librt.\n \t* src/Makefile.am: Reinstate previous change to add GLIBCXX_LIBS.\n-        * configure: Regenerate.\n-        * configure.in: Likewise.\n-        * Makefile.in: Likewise.\n-        * src/Makefile.in: Likewise.\n-        * libsup++/Makefile.in: Likewise.\n-        * po/Makefile.in: Likewise.\n-        * doc/Makefile.in: Likewise.\n+\t* configure: Regenerate.\n+\t* configure.in: Likewise.\n+\t* Makefile.in: Likewise.\n+\t* src/Makefile.in: Likewise.\n+\t* libsup++/Makefile.in: Likewise.\n+\t* po/Makefile.in: Likewise.\n+\t* doc/Makefile.in: Likewise.\n \n 2008-07-31  Chris Fairles <chris.fairles@gmail.com>\n \n-        * include/std/chrono (duration): Use explicitly defaulted ctor, cctor,\n-\tdtor and assignment. Add diagnostics as per 20.8.3 paragraphs 2, 3 \n+\t* include/std/chrono (duration): Use explicitly defaulted ctor, cctor,\n+\tdtor and assignment. Add diagnostics as per 20.8.3 paragraphs 2, 3\n \tand 4 in WD. Other minor tweaks.\n-        * testsuite/20_util/duration/cons/1_neg.cc: Adjust line numbers.\n+\t* testsuite/20_util/duration/cons/1_neg.cc: Adjust line numbers.\n \t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: New.\n \t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n \t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n@@ -934,25 +939,25 @@\n \n 2008-07-23  Chris Fairles <chris.fairles@gmail.com>\n \n-        * include/std/condition_variable: Update to N2691 WD.\n-        * include/std/mutex: Likewise.\n-        * testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n-        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n-        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\t* include/std/condition_variable: Update to N2691 WD.\n+\t* include/std/mutex: Likewise.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n \n 2008-07-23  Chris Fairles <chris.fairles@gmail.com>\n \n-        * acinclude.m4 ([GLIBCXX_CHECK_CLOCK_GETTIME]): Define GLIBCXX_LIBS.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_CLOCK_GETTIME]): Define GLIBCXX_LIBS.\n \tHolds the lib that defines clock_gettime (-lrt or -lposix4).\n-        * src/Makefile.am: Use it.\n-        * configure: Regenerate.\n-        * configure.in: Likewise.\n-        * Makefile.in: Likewise.\n-        * src/Makefile.in: Likewise.\n-        * libsup++/Makefile.in: Likewise.\n-        * po/Makefile.in: Likewise.\n-        * doc/Makefile.in: Likewise.\n+\t* src/Makefile.am: Use it.\n+\t* configure: Regenerate.\n+\t* configure.in: Likewise.\n+\t* Makefile.in: Likewise.\n+\t* src/Makefile.in: Likewise.\n+\t* libsup++/Makefile.in: Likewise.\n+\t* po/Makefile.in: Likewise.\n+\t* doc/Makefile.in: Likewise.\n \n 2008-07-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1041,7 +1046,7 @@\n \tUpdate error lineno.\n \t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n \tUpdate error lineno.\n-\t\n+\n 2008-07-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/os/gnu-linux/arm-eabi-extra.ver: New file.\n@@ -1106,38 +1111,38 @@\n \n 2008-07-15  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * include/std/chrono: New, as per N2661.\n-        * src/chrono.cc: New.\n-        * include/Makefile.am: Update.\n-        * src/Makefile.am: Likewise.\n-        * include/Makefile.in: Regenerate.\n-        * src/Makefile.in: Likewise.\n-        * acinclude.m4: Add tests for clock_gettime and gettimeofday that\n+\t* include/std/chrono: New, as per N2661.\n+\t* src/chrono.cc: New.\n+\t* include/Makefile.am: Update.\n+\t* src/Makefile.am: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Likewise.\n+\t* acinclude.m4: Add tests for clock_gettime and gettimeofday that\n \tdefine _GLIBCXX_HAS_CLOCK_GETTIME and/or _GLIBCXX_HAS_GETTIMEOFDAY.\n-        * configure.ac: Use them.\n-        * configure: Regenerate.\n-        * config.h.in: Likewise.\n-        * config/abi/pre/gnu.ver: Add symbols for system_clock::now() and\n-        system_clock::is_monotonic.\n-        * testsuite/20_util/duration/cons/1.cc: New.\n-        * testsuite/20_util/duration/cons/2.cc: Likewise.\n-        * testsuite/20_util/duration/cons/1_neg.cc: Likewise.\n-        * testsuite/20_util/duration/requirements/explicit_instantiation/\n-        explicit_instantiation.cc: Likewise.\n-        * testsuite/20_util/duration/arithmetic/1.cc: Likewise.\n-        * testsuite/20_util/duration/arithmetic/2.cc: Likewise.\n-        * testsuite/20_util/duration/comparisons/1.cc: Likewise.\n-        * testsuite/20_util/time_point/requirements/explicit_instantiation/\n-        explicit_instantiation.cc: Likewise.\n-        * testsuite/20_util/time_point/1.cc: Likewise.\n-        * testsuite/20_util/time_point/2.cc: Likewise.\n-        * testsuite/20_util/time_point/3.cc: Likewise.\n-        * testsuite/20_util/clocks/1.cc: Likewise.\n-        * testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Add\n-        missing headers.\n-        * testsuite/17_intro/headers/c++200x/all.cc: Likewise.\n-        * include/precompiled/stdc++.h: Likewise and remove <date_time>.\n-        * doc/doxygen/user.cfg.in: Likewise.\n+\t* configure.ac: Use them.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* config/abi/pre/gnu.ver: Add symbols for system_clock::now() and\n+\tsystem_clock::is_monotonic.\n+\t* testsuite/20_util/duration/cons/1.cc: New.\n+\t* testsuite/20_util/duration/cons/2.cc: Likewise.\n+\t* testsuite/20_util/duration/cons/1_neg.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/explicit_instantiation/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/duration/arithmetic/1.cc: Likewise.\n+\t* testsuite/20_util/duration/arithmetic/2.cc: Likewise.\n+\t* testsuite/20_util/duration/comparisons/1.cc: Likewise.\n+\t* testsuite/20_util/time_point/requirements/explicit_instantiation/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/time_point/1.cc: Likewise.\n+\t* testsuite/20_util/time_point/2.cc: Likewise.\n+\t* testsuite/20_util/time_point/3.cc: Likewise.\n+\t* testsuite/20_util/clocks/1.cc: Likewise.\n+\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Add\n+\tmissing headers.\n+\t* testsuite/17_intro/headers/c++200x/all.cc: Likewise.\n+\t* include/precompiled/stdc++.h: Likewise and remove <date_time>.\n+\t* doc/doxygen/user.cfg.in: Likewise.\n \n 2008-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1148,14 +1153,14 @@\n \n 2008-07-15  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/find_selectors.h:\n-        Correct name for include guard #ifndef.\n-        * include/parallel/balanced_quicksort.h: Likewise.\n-        * include/parallel/unique_copy.h: Likewise.\n-        * include/parallel/multiway_mergesort.h: Likewise.\n-        * include/parallel/checkers.h: Likewise.\n-        * include/parallel/[various files]:\n-        Add/correct comment for #endif of include guard (at end of file) \n+\t* include/parallel/find_selectors.h:\n+\tCorrect name for include guard #ifndef.\n+\t* include/parallel/balanced_quicksort.h: Likewise.\n+\t* include/parallel/unique_copy.h: Likewise.\n+\t* include/parallel/multiway_mergesort.h: Likewise.\n+\t* include/parallel/checkers.h: Likewise.\n+\t* include/parallel/[various files]:\n+\tAdd/correct comment for #endif of include guard (at end of file)\n \n 2008-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1179,8 +1184,8 @@\n \n 2008-07-10  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/balanced_quicksort.h:\n-        (qsb_divide) Replace \"*end\" by \"*(end - 1)\" in assertion.\n+\t* include/parallel/balanced_quicksort.h:\n+\t(qsb_divide) Replace \"*end\" by \"*(end - 1)\" in assertion.\n \n 2008-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -1213,17 +1218,17 @@\n 2008-07-09  Johannes Singler  <singler@ira.uka.de>\n \n \tPR libstdc++/36729\n-        * include/parallel/random_shuffle.h:\n-        (sequential_random_shuffle) Copy data back.\n-        * testsuite/25_algorithms/random_shuffle/1.cc:\n-        New. Generic random_shuffle functionality test.\n+\t* include/parallel/random_shuffle.h:\n+\t(sequential_random_shuffle) Copy data back.\n+\t* testsuite/25_algorithms/random_shuffle/1.cc:\n+\tNew. Generic random_shuffle functionality test.\n \n 2008-07-08  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * include/std/type_traits: Add common_type.\n-        * testsuite/20_util/common_type/requirements/\n+\t* include/std/type_traits: Add common_type.\n+\t* testsuite/20_util/common_type/requirements/\n \texplicit_instantiation.cc: New.\n-        * testsuite/20_util/common_type/requirements/\n+\t* testsuite/20_util/common_type/requirements/\n \ttypedefs-1.cc: Likewise.\n \n 2008-07-07  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -1259,11 +1264,11 @@\n \n 2008-07-05  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * include/std/ratio: Documentation for std::ratio class. Add conditions \n-        to ratio_less to prevent overflow.\n-        * testsuite/20_util/ratio/comparisons/comp2.cc: New.\n-        * testsuite/20_util/ratio/cons/cons_overflow.cc: Update dg-error line\n-        numbers.\n+\t* include/std/ratio: Documentation for std::ratio class. Add conditions\n+\tto ratio_less to prevent overflow.\n+\t* testsuite/20_util/ratio/comparisons/comp2.cc: New.\n+\t* testsuite/20_util/ratio/cons/cons_overflow.cc: Update dg-error line\n+\tnumbers.\n \n 2008-07-04  Chris Fairles  <chris.fairles@gmail.com>\n \n@@ -1283,7 +1288,7 @@\n \tPR libstdc++/36616\n \t* testsuite/22_locale/time_put/put/char/4.cc: Just use es_ES instead.\n \t* testsuite/22_locale/time_put/put/wchar_t/4.cc: Likewise.\n-\t\n+\n 2008-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc:\n@@ -1304,7 +1309,7 @@\n \n 2008-07-02  Jason Merrill  <jason@redhat.com>\n \n-\t* libsupc++/initializer_list: Uglify and wrap in \n+\t* libsupc++/initializer_list: Uglify and wrap in\n \t__GXX_EXPERIMENTAL_CXX0X__.\n \t* include/bits/stl_map.h (insert(initializer_list)): Wrap.\n \n@@ -1316,7 +1321,7 @@\n 2008-06-30  Alfred E. Heggestad  <aeh@db.org>\n \n \t* include/backward/backward_warning.h: Fix typo.\n-\t\n+\n 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* src/string_conversions.cc: Remove.\n@@ -1328,7 +1333,7 @@\n \tdefine numeric conversion functions.\n \t* include/ext/vstring.h: Likewise.\n \t* src/Makefile.in: Regenerate.\n-\t* include/Makefile.in: Regenerate.\t\n+\t* include/Makefile.in: Regenerate.\n \n 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1348,7 +1353,7 @@\n \texplicit_instantiation/2.cc: Likewise.\n \t* testsuite/25_algorithms/partition_point/requirements/\n \texplicit_instantiation/pod.cc: Likewise.\n-\t\n+\n 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (partition_point): Add in C++0x mode.\n@@ -1421,18 +1426,18 @@\n \n 2008-06-26  Chris Fairles  <chris.fairles@gmail.com>\n \n-        * testsuite/20_util/unique_ptr/cons/pointer_array.cc: New.\n-        * testsuite/20_util/unique_ptr/cons/pointer.cc: Likewise.\n-        * testsuite/20_util/unique_ptr/cons/pointer_array_convertible.cc:\n-        Likewise.\n-        * testsuite/20_util/unique_ptr/assign/move_array.cc: Likewise.\n-        * testsuite/20_util/unique_ptr/assign/move.cc: Likewise.\n-        * testsuite/20_util/unique_ptr/specialized_algorithms/\n-        comparisons_array.cc: Likewise.\n-        * testsuite/20_util/unique_ptr/specialized_algorithms/comparisons.cc:\n-        Likewise\n-        * testsuite/20_util/unique_ptr/specialized_algorithms/swap.cc:\n-        Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/pointer_array.cc: New.\n+\t* testsuite/20_util/unique_ptr/cons/pointer.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/pointer_array_convertible.cc:\n+\tLikewise.\n+\t* testsuite/20_util/unique_ptr/assign/move_array.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/move.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/\n+\tcomparisons_array.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/comparisons.cc:\n+\tLikewise\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/swap.cc:\n+\tLikewise.\n \n 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1497,7 +1502,7 @@\n \t* doc/xml/manual/test.xml: Remove empty para tags.\n \n \t* doc/html/*: Regenerate.\n-\t\n+\n 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (remove_if): Cast __pred result to bool.\n@@ -1644,7 +1649,7 @@\n \tdeque<>::push_front(const value_type&)): Add back.\n \t(deque<>::emplace_back(_Args&&...),\n \tdeque<>::emplace_front(_Args&&...)): Declare...\n-\t* include/bits/deque.tcc: ... and define.\t\n+\t* include/bits/deque.tcc: ... and define.\n \t* include/bits/stl_list.h (list<>::push_back(_Args&&...),\n \tlist<>::push_front(_Args&&...)): Remove.\n \t(list<>::push_back(value_type&&), list<>::push_front(value_type&&),\n@@ -1730,7 +1735,7 @@\n 2008-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/hashtable (_Hashtable<>::cbegin(size_type),\n-\tcend(size_type)): Add per DR 691. \n+\tcend(size_type)): Add per DR 691.\n \t* testsuite/23_containers/unordered_map/requirements/cliterators.cc:\n \tNew.\n \t* testsuite/23_containers/unordered_multimap/requirements/"}, {"sha": "57a73583b7ba42dc71ae2b754780ae39e49c88c4", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8ea3bd9ca8e4d1acf5083760da66b05fea59/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8ea3bd9ca8e4d1acf5083760da66b05fea59/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "patch": "@@ -1172,6 +1172,7 @@ INCLUDE_FILE_PATTERNS  =\n \n PREDEFINED             = __cplusplus \\\n \t\t         __GTHREADS \\\n+\t\t\t _GLIBCXX_HAS_GTHREADS \\\n \t\t\t __GXX_EXPERIMENTAL_CXX0X__ \\\n                          \"_GLIBCXX_STD_P= \" \\\n                          \"_GLIBCXX_STD_D= \" \\"}]}