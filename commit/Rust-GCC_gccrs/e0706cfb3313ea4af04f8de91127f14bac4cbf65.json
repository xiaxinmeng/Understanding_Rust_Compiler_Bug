{"sha": "e0706cfb3313ea4af04f8de91127f14bac4cbf65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MDZjZmIzMzEzZWE0YWYwNGY4ZGU5MTEyN2YxNGJhYzRjYmY2NQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-21T12:23:14Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-21T12:23:14Z"}, "message": "re PR target/78093 ([avr] New variable attribute \"absdata\" and option \"-mabsdata\" to enable LDS / STS on Reduced Tiny)\n\n\tPR target/78093\n\t* config/avr/avr.c (avr_decl_maybe_lds_p): New static function.\n\t(avr_encode_section_info) [TARGET_ABSDATA && AVR_TINY]: Use it.\n\nFrom-SVN: r242660", "tree": {"sha": "ee797e35d44b510ad01071923226e91bfcefa776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee797e35d44b510ad01071923226e91bfcefa776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0706cfb3313ea4af04f8de91127f14bac4cbf65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0706cfb3313ea4af04f8de91127f14bac4cbf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0706cfb3313ea4af04f8de91127f14bac4cbf65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0706cfb3313ea4af04f8de91127f14bac4cbf65/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e420e419f4eaca99f699771e35d5bf828f2b58e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e420e419f4eaca99f699771e35d5bf828f2b58e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e420e419f4eaca99f699771e35d5bf828f2b58e5"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "0e9376211c0c743b155f64a52b4d38b63dabb683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0706cfb3313ea4af04f8de91127f14bac4cbf65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0706cfb3313ea4af04f8de91127f14bac4cbf65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0706cfb3313ea4af04f8de91127f14bac4cbf65", "patch": "@@ -1,3 +1,9 @@\n+2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/78093\n+\t* config/avr/avr.c (avr_decl_maybe_lds_p): New static function.\n+\t(avr_encode_section_info) [TARGET_ABSDATA && AVR_TINY]: Use it.\n+\n 2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* rtl.h: Adjust prototype."}, {"sha": "e527a504a03933826d61f643fa4fa38ab0f6b333", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0706cfb3313ea4af04f8de91127f14bac4cbf65/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0706cfb3313ea4af04f8de91127f14bac4cbf65/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e0706cfb3313ea4af04f8de91127f14bac4cbf65", "patch": "@@ -10102,6 +10102,38 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n }\n \n \n+/* A helper for the next function.  NODE is a decl that is associated with\n+   a symbol.  Return TRUE if the respective object may be accessed by LDS.\n+   There might still be other reasons for why LDS is not appropriate.\n+   This function is only appropriate for AVR_TINY.  */\n+\n+static bool\n+avr_decl_maybe_lds_p (tree node)\n+{\n+  if (!node\n+      || TREE_CODE (node) != VAR_DECL\n+      || DECL_SECTION_NAME (node) != NULL)\n+    return false;\n+\n+  /* Don't use LDS for objects that go to .rodata.  The current default\n+     linker description file still locates .rodata in RAM, but this is not\n+     a must.  A better linker script would just keep .rodata in flash and\n+     add an offset of 0x4000 to the VMA.  Hence avoid LDS for such data.  */\n+\n+  if (TREE_READONLY (node))\n+    return false;\n+\n+  // C++ requires peeling arrays.\n+\n+  do\n+    node = TREE_TYPE (node);\n+  while (ARRAY_TYPE == TREE_CODE (node));\n+\n+  return (node != error_mark_node\n+          && !TYPE_READONLY (node));\n+}\n+\n+\n /* Implement `TARGET_ENCODE_SECTION_INFO'.  */\n \n static void\n@@ -10193,7 +10225,8 @@ avr_encode_section_info (tree decl, rtx rtl, int new_decl_p)\n       if (avr_decl_absdata_p (decl, DECL_ATTRIBUTES (decl))\n           || (TARGET_ABSDATA\n               && !progmem_p\n-              && !addr_attr)\n+              && !addr_attr\n+              && avr_decl_maybe_lds_p (decl))\n           || (addr_attr\n               // If addr_attr is non-null, it has an argument.  Peek into it.\n               && TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (addr_attr))) < 0xc0))"}]}