{"sha": "67b68b8139ca4e45c8948642cd6678159ae51311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiNjhiODEzOWNhNGU0NWM4OTQ4NjQyY2Q2Njc4MTU5YWU1MTMxMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-29T22:14:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-29T22:14:34Z"}, "message": "compiler: Propagate escape info from closures to enclosed variables.\n\nIf a closure escapes, the enclosed variables must escape via the\nclosure.  Reachability analysis had a bug where the enclosed\nvariables were not considered as reachable from the closure.\n\nFrom-SVN: r222597", "tree": {"sha": "e036dccc29cdf8c02ddd02633a88a8f847c150d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e036dccc29cdf8c02ddd02633a88a8f847c150d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b68b8139ca4e45c8948642cd6678159ae51311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b68b8139ca4e45c8948642cd6678159ae51311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b68b8139ca4e45c8948642cd6678159ae51311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b68b8139ca4e45c8948642cd6678159ae51311/comments", "author": null, "committer": null, "parents": [{"sha": "b693b8792e23b2d9839db05cbd725fbb92789df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693b8792e23b2d9839db05cbd725fbb92789df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693b8792e23b2d9839db05cbd725fbb92789df6"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "d2e7ae12931c5bc9544bf61436ae2a0c187c8c2b", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b68b8139ca4e45c8948642cd6678159ae51311/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b68b8139ca4e45c8948642cd6678159ae51311/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=67b68b8139ca4e45c8948642cd6678159ae51311", "patch": "@@ -1276,8 +1276,22 @@ Gogo::analyze_reachability()\n       Node* m = worklist.front();\n       worklist.pop_front();\n \n-      for (std::set<Node*>::iterator n = m->edges().begin();\n-\t   n != m->edges().end();\n+      std::set<Node*> reachable = m->edges();\n+      if (m->object()->is_function()\n+\t  && m->object()->func_value()->needs_closure())\n+\t{\n+\t  // If a closure escapes everything it closes over also escapes.\n+\t  Function* closure = m->object()->func_value();\n+\t  for (size_t i = 0; i < closure->closure_field_count(); i++)\n+\t    {\n+\t      Named_object* enclosed = closure->enclosing_var(i);\n+\t      Node* enclosed_node = this->lookup_connection_node(enclosed);\n+\t      go_assert(enclosed_node != NULL);\n+\t      reachable.insert(enclosed_node);\n+\t    }\n+\t}\n+      for (std::set<Node*>::iterator n = reachable.begin();\n+\t   n != reachable.end();\n \t   ++n)\n \t{\n \t  // If an object can be reached from a node with ESCAPE_GLOBAL,\n@@ -1296,7 +1310,7 @@ Gogo::analyze_reachability()\n        p != this->named_connection_nodes_.end();\n        ++p)\n     {\n-      if (p->second->connection_node()->escape_state() == Node::ESCAPE_ARG)\n+      if (p->second->connection_node()->escape_state() < Node::ESCAPE_NONE)\n \tworklist.push_back(p->second);\n     }\n \n@@ -1305,15 +1319,30 @@ Gogo::analyze_reachability()\n       Node* m = worklist.front();\n       worklist.pop_front();\n \n-      for (std::set<Node*>::iterator n = m->edges().begin();\n-\t   n != m->edges().end();\n+      std::set<Node*> reachable = m->edges();\n+      if (m->object()->is_function()\n+\t  && m->object()->func_value()->needs_closure())\n+\t{\n+\t  // If a closure escapes everything it closes over also escapes.\n+\t  Function* closure = m->object()->func_value();\n+\t  for (size_t i = 0; i < closure->closure_field_count(); i++)\n+\t    {\n+\t      Named_object* enclosed = closure->enclosing_var(i);\n+\t      Node* enclosed_node = this->lookup_connection_node(enclosed);\n+\t      go_assert(enclosed_node != NULL);\n+\t      reachable.insert(enclosed_node);\n+\t    }\n+\t}\n+      for (std::set<Node*>::iterator n = reachable.begin();\n+\t   n != reachable.end();\n \t   ++n)\n \t{\n \t  // If an object can be reached from a node with ESCAPE_ARG,\n \t  // it is ESCAPE_ARG or ESCAPE_GLOBAL.\n-\t  if ((*n)->connection_node()->escape_state() > Node::ESCAPE_ARG)\n+\t  Node::Escapement_lattice e = m->connection_node()->escape_state();\n+\t  if ((*n)->connection_node()->escape_state() > e)\n \t    {\n-\t      (*n)->connection_node()->set_escape_state(Node::ESCAPE_ARG);\n+\t      (*n)->connection_node()->set_escape_state(e);\n \t      worklist.push_back(*n);\n \t    }\n \t}"}, {"sha": "ffc2440f8ffacac74015fadb39ec0000f6496901", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b68b8139ca4e45c8948642cd6678159ae51311/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b68b8139ca4e45c8948642cd6678159ae51311/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=67b68b8139ca4e45c8948642cd6678159ae51311", "patch": "@@ -1042,6 +1042,11 @@ class Function\n     this->is_unnamed_type_stub_method_ = true;\n   }\n \n+  // Return the amount of enclosed variables in this closure.\n+  size_t\n+  closure_field_count() const\n+  { return this->closure_fields_.size(); }\n+\n   // Add a new field to the closure variable.\n   void\n   add_closure_field(Named_object* var, Location loc)"}]}