{"sha": "af8e89081ef76f93aa8502145f86bdb15991cb6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY4ZTg5MDgxZWY3NmY5M2FhODUwMjE0NWY4NmJkYjE1OTkxY2I2Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-09-13T21:50:47Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-09-13T21:50:47Z"}, "message": "darwin.md (movdf_low_si): Mark the outgoing r constraint as early clobber.\n\n2005-09-13  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * config/rs6000/darwin.md (movdf_low_si): Mark the outgoing r constraint\n        as early clobber.  Rewrite so the PIC register is not implicitly used.\n\nFrom-SVN: r104241", "tree": {"sha": "265747e87ef2eaf4e67b4bbe5ad92624cfa71b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/265747e87ef2eaf4e67b4bbe5ad92624cfa71b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af8e89081ef76f93aa8502145f86bdb15991cb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8e89081ef76f93aa8502145f86bdb15991cb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8e89081ef76f93aa8502145f86bdb15991cb6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8e89081ef76f93aa8502145f86bdb15991cb6f/comments", "author": null, "committer": null, "parents": [{"sha": "c4abe01049ca7fc5d86d08f8c7a919db2b7f00b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4abe01049ca7fc5d86d08f8c7a919db2b7f00b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4abe01049ca7fc5d86d08f8c7a919db2b7f00b7"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "bde5734bac6541038a70b78ed654a7f366922001", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8e89081ef76f93aa8502145f86bdb15991cb6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8e89081ef76f93aa8502145f86bdb15991cb6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af8e89081ef76f93aa8502145f86bdb15991cb6f", "patch": "@@ -1,3 +1,8 @@\n+2005-09-13  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* config/rs6000/darwin.md (movdf_low_si): Mark the outgoing r constraint\n+\tas early clobber.  Rewrite so the PIC register is not implicitly used.\n+\n 2005-09-13  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* tree.c (annotate_with_file_line): Compare line numbers before"}, {"sha": "0732817ef15427c3a670ab949ac9cee50f44422d", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8e89081ef76f93aa8502145f86bdb15991cb6f/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8e89081ef76f93aa8502145f86bdb15991cb6f/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=af8e89081ef76f93aa8502145f86bdb15991cb6f", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02110-1301, USA.  */\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"movdf_low_si\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!&r\")\n         (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n@@ -40,27 +40,15 @@ Boston, MA 02110-1301, USA.  */\n \treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n       case 1:\n \t{\n-\t  rtx operands2[4];\n-\t  operands2[0] = operands[0];\n-\t  operands2[1] = operands[1];\n-\t  operands2[2] = operands[2];\n \t  if (TARGET_POWERPC64 && TARGET_32BIT)\n \t    /* Note, old assemblers didn't support relocation here.  */\n \t    return \\\"ld %0,lo16(%2)(%1)\\\";\n \t  else\n-\t  {\n-\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n-\t    output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n-#if TARGET_MACHO\n-\t    if (MACHO_DYNAMIC_NO_PIC_P)\n-\t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n-\t    else\n-\t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n-\t       although in practice it almost always is.  */\n-\t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n-#endif\n-\t    return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n-\t  }\n+\t    {\n+\t      output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n+\t      output_asm_insn (\\\"{cal|la} %L0,lo16(%2)(%1)\\\", operands);\n+\t      return (\\\"{l|lwz} %L0,4(%L0)\\\");\n+\t    }\n \t}\n       default:\n \tgcc_unreachable ();"}]}