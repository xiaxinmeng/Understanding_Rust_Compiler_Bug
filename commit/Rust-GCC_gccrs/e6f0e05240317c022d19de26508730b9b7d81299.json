{"sha": "e6f0e05240317c022d19de26508730b9b7d81299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmMGUwNTI0MDMxN2MwMjJkMTlkZTI2NTA4NzMwYjliN2Q4MTI5OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-14T16:44:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-14T16:44:55Z"}, "message": "re PR target/55948 (__atomic_clear / __atomic_store_n ignore HLE_RELEASE flags)\n\n\tPR target/55948\n\t* config/i386/sync.md (atomic_store<mode>_1): New pattern.\n\t(atomic_store<mode>): Call atomic_store<mode>_1 for IX86_HLE_RELEASE\n\tmemmodel flag.\n\ntestsuite/ChangeLog\n\n\tPR target/55948\n\t* gcc.target/i386/hle-clear-rel.c: New file\n\t* gcc.target/i386/hle-store-rel.c: New file.\n\nFrom-SVN: r195155", "tree": {"sha": "8dabc46decc226ac7e33e4c8b887522986bde774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dabc46decc226ac7e33e4c8b887522986bde774"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f0e05240317c022d19de26508730b9b7d81299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f0e05240317c022d19de26508730b9b7d81299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f0e05240317c022d19de26508730b9b7d81299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f0e05240317c022d19de26508730b9b7d81299/comments", "author": null, "committer": null, "parents": [{"sha": "197fa28c0eb545670416129d3bb545dd13ddfa1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197fa28c0eb545670416129d3bb545dd13ddfa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197fa28c0eb545670416129d3bb545dd13ddfa1a"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "0e37b9813d84ec0aa07e58457d591c73b35816f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6f0e05240317c022d19de26508730b9b7d81299", "patch": "@@ -1,3 +1,11 @@\n+2012-01-14  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Andi Kleen  <ak@linux.intel.com>\n+\n+\tPR target/55948\n+\t* config/i386/sync.md (atomic_store<mode>_1): New pattern.\n+\t(atomic_store<mode>): Call atomic_store<mode>_1 for IX86_HLE_RELEASE\n+\tmemmodel flag.\n+\n 2013-01-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-stdint.h: Remove trailing blanks.\n@@ -7,7 +15,7 @@\n \t* config/avr/avr-dimode.md: Same.\n \t* config/avr/predicates.md: Same.\n \t* config/avr/avr-c.c: Same.  And fix typo.\n-\t\n+\n \t* config/avr/avr-protos.h: Same.  And:\n \t(function_arg_regno_p): Rename to avr_function_arg_regno_p.\n \t(init_cumulative_args): Rename to avr_init_cumulative_args."}, {"sha": "2309c83b12271d173e00dd44e1fdef34c9bbe002", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=e6f0e05240317c022d19de26508730b9b7d81299", "patch": "@@ -224,15 +224,27 @@\n \t  DONE;\n \t}\n \n-      /* Otherwise use a normal store.  */\n-      emit_move_insn (operands[0], operands[1]);\n+      /* Otherwise use a store.  */\n+      if (INTVAL (operands[2]) & IX86_HLE_RELEASE)\n+\temit_insn (gen_atomic_store<mode>_1 (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n+      else\n+\temit_move_insn (operands[0], operands[1]);\n     }\n   /* ... followed by an MFENCE, if required.  */\n   if (model == MEMMODEL_SEQ_CST)\n     emit_insn (gen_mem_thread_fence (operands[2]));\n   DONE;\n })\n \n+(define_insn \"atomic_store<mode>_1\"\n+  [(set (match_operand:ATOMIC 0 \"memory_operand\" \"=m\")\n+\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"<nonmemory_operand>\" \"<r><i>\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\")]\n+\t\t       UNSPEC_MOVA))]\n+  \"\"\n+  \"%K2mov{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n+\n (define_insn_and_split \"atomic_storedi_fpu\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m,m,m\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"x,m,?r\")]"}, {"sha": "b9095dd4d31c975c7b2620b034c941124beb7f94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6f0e05240317c022d19de26508730b9b7d81299", "patch": "@@ -1,3 +1,9 @@\n+2012-01-14  Andi Kleen  <ak@linux.intel.com>\n+\n+\tPR target/55948\n+\t* gcc.target/i386/hle-clear-rel.c: New file\n+\t* gcc.target/i386/hle-store-rel.c: New file.\n+\n 2013-01-14  Harald Anlauf  <anlauf@gmx.de>\n \n \t* gfortran.dg/aint_anint_1.f90: Add dg-do run.\n@@ -62,14 +68,13 @@\n \n 2013-01-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n-\tUpdate copyright years\n+\tUpdate copyright years.\n \n 2013-01-10  Aldy Hernandez  <aldyh@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/55565\n-\t* gcc.target/powerpc/ppc-mov-1.c: Update scan-assembler-not\n-\tregex.\n+\t* gcc.target/powerpc/ppc-mov-1.c: Update scan-assembler-not regex.\n \n 2013-01-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -140,7 +145,7 @@\n \n 2013-01-09  Jan Hubicka  <jh@suse.cz>\n \n-\tPR tree-optimiation/55875\n+\tPR tree-optimization/55875\n \t* gcc.c-torture/execute/pr55875.c: New testcase.\n \t* g++.dg/torture/pr55875.C: New testcase.\n \n@@ -181,14 +186,14 @@\n \n 2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>\n \n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c: New.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n-\t* gcc/testsuite/gcc.target/aarch64/vect-fcm.x: Likewise.\n-\t* gcc/testsuite/lib/target-supports.exp\n+\t* gcc.target/aarch64/vect-fcm-eq-d.c: New.\n+\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm.x: Likewise.\n+\t* lib/target-supports.exp\n \t(check_effective_target_vect_cond): Enable for AArch64.\n \n 2013-01-08  James Greenhalgh  <james.greenhalgh@arm.com>"}, {"sha": "137a820c87f8efd47d7bc0a18db1dafb3523d858", "filename": "gcc/testsuite/gcc.target/i386/hle-clear-rel.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-clear-rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-clear-rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-clear-rel.c?ref=e6f0e05240317c022d19de26508730b9b7d81299", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mhle\" } */\n+/* { dg-final { scan-assembler \"\\[ \\n\\t\\]+\\(xrelease\\|\\.byte\\[ \\t\\]+0xf3\\)\\[ \\t\\n\\]+mov\" } } */\n+\n+void\n+hle_clear (char *p, int v)\n+{\n+  __atomic_clear (p, __ATOMIC_RELEASE | __ATOMIC_HLE_RELEASE);\n+}"}, {"sha": "7295d332131edd5c44fa080604ba649f080784e1", "filename": "gcc/testsuite/gcc.target/i386/hle-store-rel.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-store-rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f0e05240317c022d19de26508730b9b7d81299/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-store-rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhle-store-rel.c?ref=e6f0e05240317c022d19de26508730b9b7d81299", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mhle\" } */\n+/* { dg-final { scan-assembler \"\\[ \\n\\t\\]+\\(xrelease\\|\\.byte\\[ \\t\\]+0xf3\\)\\[ \\t\\n\\]+mov\" } } */\n+\n+void\n+hle_store (int *p, int v)\n+{\n+  __atomic_store_n (p, v, __ATOMIC_RELEASE | __ATOMIC_HLE_RELEASE);\n+}"}]}