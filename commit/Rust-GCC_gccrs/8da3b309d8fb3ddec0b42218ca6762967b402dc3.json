{"sha": "8da3b309d8fb3ddec0b42218ca6762967b402dc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhM2IzMDlkOGZiM2RkZWMwYjQyMjE4Y2E2NzYyOTY3YjQwMmRjMw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-07T01:58:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-12T11:44:13Z"}, "message": "i386: Optimize vpblendvb on inverted mask register to vpblendvb on swapping the order of operand 1 and operand 2. [PR target/99908]\n\n-       vpcmpeqd        %ymm3, %ymm3, %ymm3\n-       vpandn  %ymm3, %ymm2, %ymm2\n-       vpblendvb       %ymm2, %ymm1, %ymm0, %ymm0\n+       vpblendvb       %ymm2, %ymm0, %ymm1, %ymm0\n\ngcc/ChangeLog:\n\n\tPR target/99908\n\t* config/i386/sse.md (<sse4_1_avx2>_pblendvb): Add\n\tsplitters for pblendvb of NOT mask register.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99908\n\t* gcc.target/i386/avx2-pr99908.c: New test.\n\t* gcc.target/i386/sse4_1-pr99908.c: New test.", "tree": {"sha": "b07758da01613401f008e289e65c6b7daab62cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b07758da01613401f008e289e65c6b7daab62cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8da3b309d8fb3ddec0b42218ca6762967b402dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da3b309d8fb3ddec0b42218ca6762967b402dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da3b309d8fb3ddec0b42218ca6762967b402dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da3b309d8fb3ddec0b42218ca6762967b402dc3/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd36bbb2281ada10b5e1df143ecf64b88cdb8119"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "49dda74fe18bacb8a2d0d5ee824acba13cfadac8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8da3b309d8fb3ddec0b42218ca6762967b402dc3", "patch": "@@ -17734,6 +17734,35 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_split\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\")\n+\t(unspec:VI1_AVX2\n+\t  [(match_operand:VI1_AVX2 1 \"vector_operand\")\n+\t   (match_operand:VI1_AVX2 2 \"register_operand\")\n+\t   (not:VI1_AVX2 (match_operand:VI1_AVX2 3 \"register_operand\"))]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t  [(match_dup 2) (match_dup 1) (match_dup 3)]\n+\t  UNSPEC_BLENDV))])\n+\n+(define_split\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\")\n+\t(unspec:VI1_AVX2\n+\t  [(match_operand:VI1_AVX2 1 \"vector_operand\")\n+\t   (match_operand:VI1_AVX2 2 \"register_operand\")\n+\t   (subreg:VI1_AVX2 (not (match_operand 3 \"register_operand\")) 0)]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\n+   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_VECTOR_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[3])) == <MODE_SIZE>\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t  [(match_dup 2) (match_dup 1) (match_dup 4)]\n+\t  UNSPEC_BLENDV))]\n+  \"operands[4] = gen_lowpart (<MODE>mode, operands[3]);\")\n+\n (define_insn_and_split \"*<sse4_1_avx2>_pblendvb_lt\"\n   [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VI1_AVX2"}, {"sha": "2775f3b50f3eb09593106172f6a67d8077483d8f", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr99908.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr99908.c?ref=8da3b309d8fb3ddec0b42218ca6762967b402dc3", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/99908 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpblendvb\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tvpcmpeq\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvpandn\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m256i\n+f1 (__m256i a, __m256i b, __m256i mask)\n+{\n+  return _mm256_blendv_epi8(a, b, \n+    _mm256_andnot_si256(mask, _mm256_set1_epi8(255)));\n+}\n+\n+__m256i\n+f2 (__v32qi x, __v32qi a, __v32qi b)\n+{\n+  x ^= (__v32qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return _mm256_blendv_epi8 ((__m256i) a, (__m256i) b, (__m256i) x);\n+}"}, {"sha": "c13e730b220c73f790bed521dc9e17543e145188", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pr99908.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr99908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da3b309d8fb3ddec0b42218ca6762967b402dc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr99908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr99908.c?ref=8da3b309d8fb3ddec0b42218ca6762967b402dc3", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/99908 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mno-avx -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tpblendvb\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tpcmpeq\" } } */\n+/* { dg-final { scan-assembler-not \"\\tpandn\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i a, __m128i b, __m128i mask)\n+{\n+  return _mm_blendv_epi8(a, b, \n+    _mm_andnot_si128(mask, _mm_set1_epi8(255)));\n+}\n+\n+__m128i\n+f2 (__v16qi x, __v16qi a, __v16qi b)\n+{\n+  x ^= (__v16qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return _mm_blendv_epi8 ((__m128i) a, (__m128i) b, (__m128i) x);\n+}"}]}