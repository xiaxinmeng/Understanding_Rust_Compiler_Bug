{"sha": "3d9577c254003f2d18185015b75ce6e3e4af9ca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5NTc3YzI1NDAwM2YyZDE4MTg1MDE1Yjc1Y2U2ZTNlNGFmOWNhMg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-17T15:13:57Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-05T16:57:37Z"}, "message": "coroutines : Adjust constraints on when to build ctors [PR98118].\n\nPR98118 shows that TYPE_NEEDS_CONSTRUCTING is necessary but not\nsufficient.  Use type_build_ctor_call() instead.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98118\n\t* coroutines.cc (build_co_await): Use type_build_ctor_call()\n\tto determine cases when a CTOR needs to be built.\n\t(flatten_await_stmt): Likewise.\n\t(morph_fn_to_coro): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98118\n\t* g++.dg/coroutines/pr98118.C: New test.", "tree": {"sha": "70357716fd6e019d39e597a5d04e36eeff1b5be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70357716fd6e019d39e597a5d04e36eeff1b5be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9577c254003f2d18185015b75ce6e3e4af9ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9577c254003f2d18185015b75ce6e3e4af9ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9577c254003f2d18185015b75ce6e3e4af9ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9577c254003f2d18185015b75ce6e3e4af9ca2/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee91079fd5879cba046e452ab5593372166b2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee91079fd5879cba046e452ab5593372166b2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee91079fd5879cba046e452ab5593372166b2ab"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "897c1a016dd6c402baaff59bda374ac5fd9e79ef", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9577c254003f2d18185015b75ce6e3e4af9ca2/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9577c254003f2d18185015b75ce6e3e4af9ca2/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=3d9577c254003f2d18185015b75ce6e3e4af9ca2", "patch": "@@ -949,7 +949,7 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n       e_proxy = o;\n       o = NULL_TREE; /* The var is already present.  */\n     }\n-  else if (CLASS_TYPE_P (o_type) || TYPE_NEEDS_CONSTRUCTING (o_type))\n+  else if (type_build_ctor_call (o_type))\n     {\n       e_proxy = get_awaitable_var (suspend_kind, o_type);\n       releasing_vec arg (make_tree_vector_single (rvalue (o)));\n@@ -2965,7 +2965,7 @@ flatten_await_stmt (var_nest_node *n, hash_set<tree> *promoted,\n \t  gcc_checking_assert (!already_present);\n \t  tree inner = TREE_OPERAND (init, 1);\n \t  gcc_checking_assert (TREE_CODE (inner) != COND_EXPR);\n-\t  if (TYPE_NEEDS_CONSTRUCTING (var_type))\n+\t  if (type_build_ctor_call (var_type))\n \t    {\n \t      releasing_vec p_in (make_tree_vector_single (init));\n \t      init = build_special_member_call (var, complete_ctor_identifier,\n@@ -2977,9 +2977,9 @@ flatten_await_stmt (var_nest_node *n, hash_set<tree> *promoted,\n \t  var_nest_node *ins\n \t    = new var_nest_node (var, init, n->prev, n);\n \t  /* We have to replace the target expr... */\n-\t  proxy_replace pr = {TREE_OPERAND (t, 0), var};\n \t  *v.entry = var;\n \t  /* ... and any uses of its var.  */\n+\t  proxy_replace pr = {TREE_OPERAND (t, 0), var};\n \t  cp_walk_tree (&n->init, replace_proxy, &pr, NULL);\n \t  /* Compiler-generated temporaries can also have uses in following\n \t     arms of compound expressions, which will be listed in 'replace_in'\n@@ -4681,7 +4681,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t   parm.frame_type, INIT_EXPR,\n \t\t\t\t   DECL_SOURCE_LOCATION (arg), arg,\n \t\t\t\t   DECL_ARG_TYPE (arg));\n-\t  else if (TYPE_NEEDS_CONSTRUCTING (parm.frame_type))\n+\t  else if (type_build_ctor_call (parm.frame_type))\n \t    {\n \t      vec<tree, va_gc> *p_in;\n \t      if (CLASS_TYPE_P (parm.frame_type)\n@@ -4739,7 +4739,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t\t   false, tf_warning_or_error);\n \n   tree promise_dtor = NULL_TREE;\n-  if (TYPE_NEEDS_CONSTRUCTING (promise_type))\n+  if (type_build_ctor_call (promise_type))\n     {\n       /* Do a placement new constructor for the promise type (we never call\n \t the new operator, just the constructor on the object in place in the\n@@ -4820,7 +4820,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \tThe expression promise.get_return_object() is used to initialize the\n \tglvalue result or... (see below)\n \tConstruct the return result directly.  */\n-      if (TYPE_NEEDS_CONSTRUCTING (gro_type))\n+      if (type_build_ctor_call (gro_type))\n \t{\n \t  vec<tree, va_gc> *arg = make_tree_vector_single (get_ro);\n \t  r = build_special_member_call (DECL_RESULT (orig),\n@@ -4853,7 +4853,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       DECL_IGNORED_P (gro) = true;\n       add_decl_expr (gro);\n       gro_bind_vars = gro;\n-      if (TYPE_NEEDS_CONSTRUCTING (gro_type))\n+      if (type_build_ctor_call (gro_type))\n \t{\n \t  vec<tree, va_gc> *arg = make_tree_vector_single (get_ro);\n \t  r = build_special_member_call (gro, complete_ctor_identifier,"}, {"sha": "d09ffff21426c17d48d66ec2fc097e9a640aabad", "filename": "gcc/testsuite/g++.dg/coroutines/pr98118.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9577c254003f2d18185015b75ce6e3e4af9ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr98118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9577c254003f2d18185015b75ce6e3e4af9ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr98118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr98118.C?ref=3d9577c254003f2d18185015b75ce6e3e4af9ca2", "patch": "@@ -0,0 +1,29 @@\n+namespace std {\n+inline namespace __n4861 {\n+template <typename _Result, typename> struct coroutine_traits : _Result {};\n+template <typename = void> struct coroutine_handle;\n+template <> struct coroutine_handle<> {};\n+template <typename> struct coroutine_handle : coroutine_handle<> {};\n+struct suspend_never {\n+  bool await_ready() noexcept;\n+  void await_suspend(coroutine_handle<>) noexcept;\n+  void await_resume() noexcept;\n+};\n+} // namespace __n4861\n+} // namespace std\n+\n+struct fire_and_forget {\n+  struct promise_type {\n+    fire_and_forget get_return_object();\n+    std::suspend_never initial_suspend();\n+    std::suspend_never final_suspend() noexcept;\n+    void return_void();\n+    void unhandled_exception();\n+  };\n+};\n+\n+struct bug {\n+  ~bug();\n+};\n+\n+fire_and_forget f(bug) { co_return; }"}]}