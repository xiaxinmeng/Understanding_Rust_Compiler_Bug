{"sha": "8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1YjQ2ZTk5YzU1Yzg0ZDRhOGRiZWM1NWQ4YWViMjA3Njk5MGQ3Zg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-05-23T09:23:47Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-05-23T09:23:47Z"}, "message": "x86, testsuite - update fuse-caller-save tests.\n\nThese tests had started to XPASS on pic targets where\nthe codegen is now as expected.\n\ngcc/testsuite/\n\n2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR rtl-optimisation/64895\n\t* gcc.target/i386/fuse-caller-save-rec.c: Remove XFAILs.\n\t* gcc.target/i386/fuse-caller-save.c: Likewise.\n\t* gcc.target/i386/fuse-caller-save-xmm.c: Adjust tests for\n\tPIC cases, remove XFAILs.\n\nFrom-SVN: r271544", "tree": {"sha": "72da2e5abb22e08b4bd01ba1cad20bc0be8f95d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72da2e5abb22e08b4bd01ba1cad20bc0be8f95d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9c52d28465513d107c77145fffed7fdc798d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9c52d28465513d107c77145fffed7fdc798d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9c52d28465513d107c77145fffed7fdc798d09"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "6f8567c809e39291c2a4ccc4b4e77194d96ed516", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "patch": "@@ -1,3 +1,11 @@\n+2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR rtl-optimisation/64895\n+\t* gcc.target/i386/fuse-caller-save-rec.c: Remove XFAILs.\n+\t* gcc.target/i386/fuse-caller-save.c: Likewise.\n+\t* gcc.target/i386/fuse-caller-save-xmm.c: Adjust tests for\n+\tPIC cases, remove XFAILs.\n+\n 2019-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR middle-end/90510"}, {"sha": "e8d4efb260e83eef04428b6c819c6a8eb99378f4", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-rec.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c?ref=8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "patch": "@@ -18,14 +18,12 @@ foo (int y)\n   return y + bar (y);\n }\n \n-/* For !nonpic && ia32 xfails, see PR64895.  */\n-\n /* Check that no registers are saved/restored. */\n-/* { dg-final { scan-assembler-not \"push\" { xfail { { ! nonpic } && ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"pop\" { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"push\" } } */\n+/* { dg-final { scan-assembler-not \"pop\" } } */\n \n /* Check that addition uses dx. */\n-/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?dx, %\\[re\\]?ax\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?dx, %\\[re\\]?ax\" 1 } } */\n \n /* Verify that bar is self-recursive.  */\n /* { dg-final { scan-assembler-times \"call\\t_?bar\" 2 } } */"}, {"sha": "4deff93c1e857f9bb5dc830f062bf27ebaf20409", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-xmm.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c?ref=8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "patch": "@@ -15,13 +15,19 @@ foo (v2df y)\n   return y + bar (y);\n }\n \n-/* For !nonpic && ia32 xfails, see PR64895.  */\n-\n /* Check presence of all insns on xmm registers.  These checks are expected to\n    pass with both -fipa-ra and -fno-ipa-ra.  */\n-/* { dg-final { scan-assembler-times \"addpd\\t\\\\.?LC0.*, %xmm0\" 1 } } */\n-/* { dg-final { scan-assembler-times \"addpd\\t%xmm1, %xmm0\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm1\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n+\n+/* Darwin local constant symbol is \"lC0\", ELF targets \".LC0\" */\n+/* { dg-final { scan-assembler-times {addpd\\t\\.?[Ll]C0.*, %xmm0} 1 { target { { ! ia32 } || nonpic } } } } */\n+/* { dg-final { scan-assembler-times {movapd\\t\\.?[Ll]C0.*, %xmm1} 1 { target { ia32 && { ! nonpic } } } } } */\n+\n+/* We happen to get this for both cases, but in different positions.  */\n+/* { dg-final { scan-assembler-times \"addpd\\t%xmm1, %xmm0\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm1\" 1 { target { { ! ia32 } || nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm2\" 1 { target { ia32 && { ! nonpic } } } } } */\n+/* { dg-final { scan-assembler-times \"addpd\\t%xmm2, %xmm0\" 1 { target { ia32 && { ! nonpic } } } } } */\n \n /* Check absence of save/restore of xmm1 register.  */\n /* { dg-final { scan-assembler-not \"movaps\\t%xmm1, \\\\(%\\[re\\]?sp\\\\)\" } } */"}, {"sha": "c0e8bf443d00ffc6617b4a8b2b192931e9318bcc", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c?ref=8f5b46e99c55c84d4a8dbec55d8aeb2076990d7f", "patch": "@@ -16,11 +16,9 @@ foo (int y)\n   return y + bar (y);\n }\n \n-/* For !nonpic && ia32 xfails, see PR64895.  */\n-\n /* Check that no registers are saved/restored. */\n-/* { dg-final { scan-assembler-not \"push\" { xfail { { ! nonpic } && ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"pop\" { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"push\" } } */\n+/* { dg-final { scan-assembler-not \"pop\" } } */\n \n /* PR61605.  If the first argument register and the return register differ, then\n    bar leaves the first argument register intact.  That means in foo that the\n@@ -31,4 +29,4 @@ foo (int y)\n /* { dg-final { scan-assembler-not \"movl\" { target { ! ia32 } } } } */\n \n /* Check that addition uses di (in case of no copy) or dx (in case of copy). */\n-/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?d\\[ix\\], %\\[re\\]?ax\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?d\\[ix\\], %\\[re\\]?ax\" 1 } } */"}]}