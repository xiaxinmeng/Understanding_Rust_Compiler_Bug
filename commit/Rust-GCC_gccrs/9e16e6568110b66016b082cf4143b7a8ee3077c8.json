{"sha": "9e16e6568110b66016b082cf4143b7a8ee3077c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxNmU2NTY4MTEwYjY2MDE2YjA4MmNmNDE0M2I3YThlZTMwNzdjOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-11-16T22:17:10Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-11-16T22:17:10Z"}, "message": "re PR tree-optimization/77848 (Gimple if-conversion results in redundant comparisons)\n\n2016-11-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/77848\n\t* tree-if-conv.c (version_loop_for_if_conversion): When versioning\n\tan outer loop, only save basic block aux information for the inner\n\tloop.\n\t(versionable_outer_loop_p): New function.\n\t(tree_if_conversion): Version the outer loop instead of the inner\n\tone if the pattern will be recognized for outer-loop\n\tvectorization.\n\nFrom-SVN: r242520", "tree": {"sha": "e8c01e70870d5bac27f8136579d9ce56fa4d30f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8c01e70870d5bac27f8136579d9ce56fa4d30f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e16e6568110b66016b082cf4143b7a8ee3077c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e16e6568110b66016b082cf4143b7a8ee3077c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e16e6568110b66016b082cf4143b7a8ee3077c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e16e6568110b66016b082cf4143b7a8ee3077c8/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2ea37fb4c8084421784c80bfd1a4e065980314c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ea37fb4c8084421784c80bfd1a4e065980314c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ea37fb4c8084421784c80bfd1a4e065980314c"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "d30e6f668d98cab934b64bcf29c19a50a4a747d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e16e6568110b66016b082cf4143b7a8ee3077c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e16e6568110b66016b082cf4143b7a8ee3077c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e16e6568110b66016b082cf4143b7a8ee3077c8", "patch": "@@ -1,3 +1,14 @@\n+2016-11-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/77848\n+\t* tree-if-conv.c (version_loop_for_if_conversion): When versioning\n+\tan outer loop, only save basic block aux information for the inner\n+\tloop.\n+\t(versionable_outer_loop_p): New function.\n+\t(tree_if_conversion): Version the outer loop instead of the inner\n+\tone if the pattern will be recognized for outer-loop\n+\tvectorization.\n+\n 2016-11-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gcc/bb-reorder.c: Remove 'toplev.h' include."}, {"sha": "e173fabf550ff2ff0455ee4b61cb7119a9f16af0", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e16e6568110b66016b082cf4143b7a8ee3077c8/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e16e6568110b66016b082cf4143b7a8ee3077c8/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=9e16e6568110b66016b082cf4143b7a8ee3077c8", "patch": "@@ -2533,15 +2533,17 @@ version_loop_for_if_conversion (struct loop *loop)\n   struct loop *new_loop;\n   gimple *g;\n   gimple_stmt_iterator gsi;\n+  unsigned int save_length;\n \n   g = gimple_build_call_internal (IFN_LOOP_VECTORIZED, 2,\n \t\t\t\t  build_int_cst (integer_type_node, loop->num),\n \t\t\t\t  integer_zero_node);\n   gimple_call_set_lhs (g, cond);\n \n   /* Save BB->aux around loop_version as that uses the same field.  */\n-  void **saved_preds = XALLOCAVEC (void *, loop->num_nodes);\n-  for (unsigned i = 0; i < loop->num_nodes; i++)\n+  save_length = loop->inner ? loop->inner->num_nodes : loop->num_nodes;\n+  void **saved_preds = XALLOCAVEC (void *, save_length);\n+  for (unsigned i = 0; i < save_length; i++)\n     saved_preds[i] = ifc_bbs[i]->aux;\n \n   initialize_original_copy_tables ();\n@@ -2550,7 +2552,7 @@ version_loop_for_if_conversion (struct loop *loop)\n \t\t\t   REG_BR_PROB_BASE, true);\n   free_original_copy_tables ();\n \n-  for (unsigned i = 0; i < loop->num_nodes; i++)\n+  for (unsigned i = 0; i < save_length; i++)\n     ifc_bbs[i]->aux = saved_preds[i];\n \n   if (new_loop == NULL)\n@@ -2565,6 +2567,40 @@ version_loop_for_if_conversion (struct loop *loop)\n   return true;\n }\n \n+/* Return true when LOOP satisfies the follow conditions that will\n+   allow it to be recognized by the vectorizer for outer-loop\n+   vectorization:\n+    - The loop is not the root node of the loop tree.\n+    - The loop has exactly one inner loop.\n+    - The loop has a single exit.\n+    - The loop header has a single successor, which is the inner\n+      loop header.\n+    - The loop exit block has a single predecessor, which is the\n+      inner loop's exit block.  */\n+\n+static bool\n+versionable_outer_loop_p (struct loop *loop)\n+{\n+  if (!loop_outer (loop)\n+      || !loop->inner\n+      || loop->inner->next\n+      || !single_exit (loop)\n+      || !single_succ_p (loop->header)\n+      || single_succ (loop->header) != loop->inner->header)\n+    return false;\n+  \n+  basic_block outer_exit = single_pred (loop->latch);\n+  basic_block inner_exit = single_pred (loop->inner->latch);\n+\n+  if (!single_pred_p (outer_exit) || single_pred (outer_exit) != inner_exit)\n+    return false;\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"Found vectorizable outer loop for versioning\\n\");\n+\n+  return true;\n+}\n+\n /* Performs splitting of critical edges.  Skip splitting and return false\n    if LOOP will not be converted because:\n \n@@ -2767,8 +2803,16 @@ tree_if_conversion (struct loop *loop)\n \t  || loop->dont_vectorize))\n     goto cleanup;\n \n+  /* Since we have no cost model, always version loops if vectorization\n+     is enabled.  Either version this loop, or if the pattern is right\n+     for outer-loop vectorization, version the outer loop.  In the\n+     latter case we will still if-convert the original inner loop.  */\n+  /* FIXME: When SLP vectorization can handle if-conversion on its own,\n+     predicate all of if-conversion on flag_tree_loop_vectorize.  */\n   if ((any_pred_load_store || any_complicated_phi)\n-      && !version_loop_for_if_conversion (loop))\n+      && !version_loop_for_if_conversion\n+      (versionable_outer_loop_p (loop_outer (loop))\n+       ? loop_outer (loop) : loop))\n     goto cleanup;\n \n   /* Now all statements are if-convertible.  Combine all the basic"}]}