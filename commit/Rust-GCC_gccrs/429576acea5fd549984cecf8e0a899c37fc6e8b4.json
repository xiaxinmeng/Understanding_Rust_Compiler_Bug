{"sha": "429576acea5fd549984cecf8e0a899c37fc6e8b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5NTc2YWNlYTVmZDU0OTk4NGNlY2Y4ZTBhODk5YzM3ZmM2ZThiNA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-03-27T18:22:39Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-03-27T18:22:39Z"}, "message": "re PR middle-end/52693 (Wrong code with SRA and arrays)\n\n2012-03-27  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/52693\n\t* tree-sra.c (sra_modify_assign): Do not call\n\tload_assign_lhs_subreplacements when working with an unscalarizable\n\tregion.\n\n\t* testsuite/gcc.dg/torture/pr52693.c: New test.\n\nFrom-SVN: r185891", "tree": {"sha": "7ff5b04eaa1b80005f086c7bd7ab9004f5039f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff5b04eaa1b80005f086c7bd7ab9004f5039f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429576acea5fd549984cecf8e0a899c37fc6e8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429576acea5fd549984cecf8e0a899c37fc6e8b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429576acea5fd549984cecf8e0a899c37fc6e8b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429576acea5fd549984cecf8e0a899c37fc6e8b4/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a1cb58a99604cf6291b86b20f0f9773065afab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1cb58a99604cf6291b86b20f0f9773065afab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1cb58a99604cf6291b86b20f0f9773065afab6"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "729f51f884659d45a9671407967ba6e695fd7aef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=429576acea5fd549984cecf8e0a899c37fc6e8b4", "patch": "@@ -1,3 +1,10 @@\n+2012-03-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52693\n+\t* tree-sra.c (sra_modify_assign): Do not call\n+\tload_assign_lhs_subreplacements when working with an unscalarizable\n+\tregion.\n+\n 2012-03-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/52698"}, {"sha": "6231db2965c0d5c8630a3642653baebd9776955f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=429576acea5fd549984cecf8e0a899c37fc6e8b4", "patch": "@@ -1,3 +1,8 @@\n+2012-03-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52693\n+\t* gcc.dg/torture/pr52693.c: New test.\n+\n 2012-03-27  Meador Inge  <meadori@codesourcery.com>\n \n \tPR c++/52672"}, {"sha": "93e0680ac7c858928854769d1e8b0fb109882b38", "filename": "gcc/testsuite/gcc.dg/torture/pr52693.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52693.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52693.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52693.c?ref=429576acea5fd549984cecf8e0a899c37fc6e8b4", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+struct pair\n+{\n+  int x;\n+  int y;\n+};\n+\n+struct array\n+{\n+  struct pair elems[ 2 ];\n+  unsigned index;\n+};\n+\n+extern void abort ();\n+\n+void __attribute__ ((noinline,noclone))\n+test_results (int x1, int y1, int x2, int y2)\n+{\n+  if (x1 != x2 || y1 != y2)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct array arr = {{{1,2}, {3,4}}, 1};\n+  struct pair last = arr.elems[arr.index];\n+\n+  test_results ( last.x, last.y, arr.elems[1].x, arr.elems[1].y);\n+\n+  return 0;\n+}"}, {"sha": "84dc3be27c81df8e520bfba124a2d142e0d3c361", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429576acea5fd549984cecf8e0a899c37fc6e8b4/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=429576acea5fd549984cecf8e0a899c37fc6e8b4", "patch": "@@ -3071,7 +3071,13 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n     }\n   else\n     {\n-      if (access_has_children_p (lacc) && access_has_children_p (racc))\n+      if (access_has_children_p (lacc)\n+\t  && access_has_children_p (racc)\n+\t  /* When an access represents an unscalarizable region, it usually\n+\t     represents accesses with variable offset and thus must not be used\n+\t     to generate new memory accesses.  */\n+\t  && !lacc->grp_unscalarizable_region\n+\t  && !racc->grp_unscalarizable_region)\n \t{\n \t  gimple_stmt_iterator orig_gsi = *gsi;\n \t  enum unscalarized_data_handling refreshed;"}]}