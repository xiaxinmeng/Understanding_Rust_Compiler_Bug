{"sha": "822971c1abe36996465482142fee0da931e5360e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyOTcxYzFhYmUzNjk5NjQ2NTQ4MjE0MmZlZTBkYTkzMWU1MzYwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-09-06T08:55:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-09-06T08:55:37Z"}, "message": "re PR c++/23056 (ICE in write_template_arg_literal, at cp/mangle.c)\n\n\tPR c++/23056\n\t* typeck.c (ignore_overflows): New helper function.\n\t(build_static_cast_1): Use it.\n\n\t* g++.dg/opt/pr23056.C: New test.\n\nFrom-SVN: r103936", "tree": {"sha": "0dafc951620743dfcf906a55b20d941aba2d2323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dafc951620743dfcf906a55b20d941aba2d2323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/822971c1abe36996465482142fee0da931e5360e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822971c1abe36996465482142fee0da931e5360e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822971c1abe36996465482142fee0da931e5360e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822971c1abe36996465482142fee0da931e5360e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c653a41cf6b763a1506679082e4743641a5e3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c653a41cf6b763a1506679082e4743641a5e3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c653a41cf6b763a1506679082e4743641a5e3b5"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "6e13cfd50e21722f099ec2ba16cee5fbe8b05a22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822971c1abe36996465482142fee0da931e5360e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822971c1abe36996465482142fee0da931e5360e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=822971c1abe36996465482142fee0da931e5360e", "patch": "@@ -1,3 +1,9 @@\n+2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/23056\n+\t* typeck.c (ignore_overflows): New helper function.\n+\t(build_static_cast_1): Use it.\n+\n 2005-09-06  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cp-tree.h, decl.c, decl2.c, semantics.c: Fix comment typos."}, {"sha": "d8dce75c38d7c72ad56537c957494179497a14e5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822971c1abe36996465482142fee0da931e5360e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822971c1abe36996465482142fee0da931e5360e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=822971c1abe36996465482142fee0da931e5360e", "patch": "@@ -4526,6 +4526,37 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n \t\t\t     allow_inverse_p, c_cast_p);\n }\n \n+/* If EXPR is an INTEGER_CST and ORIG is an arithmetic constant, return\n+   a version of EXPR that has TREE_OVERFLOW and/or TREE_CONSTANT_OVERFLOW\n+   set iff they are set in ORIG.  Otherwise, return EXPR unchanged.  */\n+\n+static tree\n+ignore_overflows (tree expr, tree orig)\n+{\n+  if (TREE_CODE (expr) == INTEGER_CST\n+      && CONSTANT_CLASS_P (orig)\n+      && TREE_CODE (orig) != STRING_CST\n+      && (TREE_OVERFLOW (expr) != TREE_OVERFLOW (orig)\n+\t  || TREE_CONSTANT_OVERFLOW (expr)\n+\t     != TREE_CONSTANT_OVERFLOW (orig)))\n+    {\n+      if (!TREE_OVERFLOW (orig) && !TREE_CONSTANT_OVERFLOW (orig))\n+\t/* Ensure constant sharing.  */\n+\texpr = build_int_cst_wide (TREE_TYPE (expr),\n+\t\t\t\t   TREE_INT_CST_LOW (expr),\n+\t\t\t\t   TREE_INT_CST_HIGH (expr));\n+      else\n+\t{\n+\t  /* Avoid clobbering a shared constant.  */\n+\t  expr = copy_node (expr);\n+\t  TREE_OVERFLOW (expr) = TREE_OVERFLOW (orig);\n+\t  TREE_CONSTANT_OVERFLOW (expr)\n+\t    = TREE_CONSTANT_OVERFLOW (orig);\n+\t}\n+    }\n+  return expr;\n+}\n+\n /* Perform a static_cast from EXPR to TYPE.  When C_CAST_P is true,\n    this static_cast is being attempted as one of the possible casts\n    allowed by a C-style cast.  (In that case, accessibility of base\n@@ -4629,13 +4660,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       result = convert_from_reference (result);\n \n       /* Ignore any integer overflow caused by the cast.  */\n-      if (TREE_CODE (result) == INTEGER_CST\n-\t  && CONSTANT_CLASS_P (orig))\n-\t{\n-\t  TREE_OVERFLOW (result) = TREE_OVERFLOW (orig);\n-\t  TREE_CONSTANT_OVERFLOW (result)\n-\t    = TREE_CONSTANT_OVERFLOW (orig);\n-\t}\n+      result = ignore_overflows (result, orig);\n+\n       /* [expr.static.cast]\n \n \t If T is a reference type, the result is an lvalue; otherwise,\n@@ -4678,12 +4704,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       expr = ocp_convert (type, expr, CONV_C_CAST, LOOKUP_NORMAL);\n \n       /* Ignore any integer overflow caused by the cast.  */\n-      if (TREE_CODE (expr) == INTEGER_CST\n-\t  && CONSTANT_CLASS_P (orig))\n-\t{\n-\t  TREE_OVERFLOW (expr) = TREE_OVERFLOW (orig);\n-\t  TREE_CONSTANT_OVERFLOW (expr) = TREE_CONSTANT_OVERFLOW (orig);\n-\t}\n+      expr = ignore_overflows (expr, orig);\n       return expr;\n     }\n "}, {"sha": "760360fc9f63f72fa54af6a4ad0917d08abf4db1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822971c1abe36996465482142fee0da931e5360e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822971c1abe36996465482142fee0da931e5360e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=822971c1abe36996465482142fee0da931e5360e", "patch": "@@ -1,5 +1,8 @@\n 2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/23056\n+\t* g++.dg/opt/pr23056.C: New test.\n+\n \tPR rtl-optimization/23098\n \t* gcc.target/i386/pr23098.c: New test.\n "}, {"sha": "b9689ec508801da76b4fbd2c1d5e6c7b11c7bb60", "filename": "gcc/testsuite/g++.dg/opt/pr23056.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822971c1abe36996465482142fee0da931e5360e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23056.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822971c1abe36996465482142fee0da931e5360e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23056.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23056.C?ref=822971c1abe36996465482142fee0da931e5360e", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/23056\n+// { dg-do compile }\n+\n+template <bool T> struct S { virtual ~S(); };\n+void foo ()\n+{\n+  static_cast<bool>(\"Foo\");\n+}\n+S<true> a;"}]}