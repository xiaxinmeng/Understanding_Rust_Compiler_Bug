{"sha": "52441f18db7e051c16f2e6e12f415b93cb5450c4", "node_id": "C_kwDOANBUbNoAKDUyNDQxZjE4ZGI3ZTA1MWMxNmYyZTZlMTJmNDE1YjkzY2I1NDUwYzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:35:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:36:06Z"}, "message": "emit-rtl: Fix a -fcompare-debug issue due to var-tracking [PR103808]\n\nWe get a -fcompare-debug FAIL on the following testcase.  The problem is\nthat during cprop we get when a TImode pseudo holding x is being\nconstructed:\n(debug_insn 111 59 103 7 (var_location:TI D#2 (clobber (const_int 0 [0]))) -1\n     (nil))\n(insn 103 111 110 7 (clobber (reg/v:TI 89 [ x ])) \"pr103808.c\":8:9 -1\n     (nil))\n(debug_insn 110 103 104 7 (var_location:TI D#2 (subreg:TI (reg:DI 111 [ x ]) 0)) -1\n     (nil))\n(insn 104 110 109 7 (set (subreg:DI (reg/v:TI 89 [ x ]) 0)\n        (reg:DI 111 [ x ])) \"pr103808.c\":8:9 80 {*movdi_internal}\n     (expr_list:REG_DEAD (reg:DI 111 [ x ])\n        (nil)))\nNow, during RA that paradoxical subreg in a debug insn obviously can't\naffect where pseudo 111 is allocated and RA puts it into the bp register,\nso we have:\n(debug_insn 110 111 109 4 (var_location:TI D#2 (reg:TI 6 bp [orig:111 x ] [111])) -1\n     (nil))\nNow, during var-tracking when we for:\n(debug_insn 25 23 26 3 (var_location:TI x (concatn/v:TI [\n            (reg:DI 6 bp [orig:111 x ] [111])\n            (subreg:DI (debug_expr:TI D#2) 8)\n        ])) \"pr103808.c\":8:9 -1\n     (nil))\ntry to simplify the highpart subreg of bp, gen_rtx_REG_offset is called in:\n      if (HARD_REGISTER_NUM_P (final_regno))\n        {\n          rtx x = gen_rtx_REG_offset (op, outermode, final_regno,\n                                      subreg_memory_offset (outermode,\n                                                            innermode, byte));\nand that unfortunately sets REG_ATTRS on stack_pointer_rtx, because\ngen_rtx_REG_offset uses gen_rtx_REG which for Pmode STACK_POINTER_REGNUM\nreturns stack_pointer_rtx rather than newly created register.\nThe clobbering of REG_ATTRS on the shared stack_pointer_rtx then shows up\nin the dumps as (reg/f:DI 7 sp [ x+8 ]) instead of (reg/f:DI 7 sp)\nthat shows up without var-tracking.\nClobbering of REG_ATTRS on the shared *_pointer_rtx looks just wrong.\nSo, IMHO either simplify_gen_subreg -> gen_rtx_REG_offset should call\ngen_raw_REG to make sure we get a new non-shared REG we can set REG_ATTRS\non, or we should make sure that we don't overwrite the REG_ATTRS on the\nshared REGs (but then simplify_gen_subreg shouldn't try to overwrite\nORIGINAL_REGNO on those either).\nFor non-DEBUG_INSNs, I'd hope this never happens, the RA shouldn't allocate\nmulti-word regs overlapping with stack pointer, hard frame pointer etc.\n\n2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/103808\n\t* emit-rtl.c (gen_rtx_REG_offset): Use gen_raw_REG instead of\n\tgen_rtx_REG.\n\n\t* gcc.dg/pr103808.c: New test.", "tree": {"sha": "e450c4e9bdb627d8a0770e704989893519d3225c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e450c4e9bdb627d8a0770e704989893519d3225c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52441f18db7e051c16f2e6e12f415b93cb5450c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52441f18db7e051c16f2e6e12f415b93cb5450c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52441f18db7e051c16f2e6e12f415b93cb5450c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52441f18db7e051c16f2e6e12f415b93cb5450c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73898bc006ee9bec1a5eed4bfdd4eb0b158b7838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73898bc006ee9bec1a5eed4bfdd4eb0b158b7838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73898bc006ee9bec1a5eed4bfdd4eb0b158b7838"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "08c425007a1b1366a85fd16dde33550b3937a40b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52441f18db7e051c16f2e6e12f415b93cb5450c4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52441f18db7e051c16f2e6e12f415b93cb5450c4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=52441f18db7e051c16f2e6e12f415b93cb5450c4", "patch": "@@ -1261,7 +1261,13 @@ rtx\n gen_rtx_REG_offset (rtx reg, machine_mode mode, unsigned int regno,\n \t\t    poly_int64 offset)\n {\n-  rtx new_rtx = gen_rtx_REG (mode, regno);\n+  /* Use gen_raw_REG rather than gen_rtx_REG, because otherwise we'd\n+     overwrite REG_ATTRS (and in the callers often ORIGINAL_REGNO too)\n+     of the shared REG rtxes like stack_pointer_rtx etc.  This should\n+     happen only for SUBREGs from DEBUG_INSNs, RA should ensure\n+     multi-word registers don't overlap the special registers like\n+     stack pointer.  */\n+  rtx new_rtx = gen_raw_REG (mode, regno);\n \n   update_reg_offset (new_rtx, reg, offset);\n   return new_rtx;"}, {"sha": "51fc460a900873ed5a59e80668f04f0b4ae20451", "filename": "gcc/testsuite/gcc.dg/pr103808.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52441f18db7e051c16f2e6e12f415b93cb5450c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103808.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52441f18db7e051c16f2e6e12f415b93cb5450c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103808.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103808.c?ref=52441f18db7e051c16f2e6e12f415b93cb5450c4", "patch": "@@ -0,0 +1,23 @@\n+/* PR debug/103808 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-fcompare-debug -O2 -ftrapv\" } */\n+\n+void\n+foo (__int128 x, int y)\n+{\n+  for (;;)\n+    {\n+      __int128 a, b;\n+\n+      x |= !!y;\n+      a = x + 1;\n+      b = y ? ++y : ++x;\n+      y = a < b;\n+      asm (\"\" : \"+r\" (y));\n+      if (x >> 2)\n+        y *= 2;\n+\n+      if (y == b)\n+        __builtin_unreachable ();\n+    }\n+}"}]}