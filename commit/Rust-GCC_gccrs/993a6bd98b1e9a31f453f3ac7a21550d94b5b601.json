{"sha": "993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzYTZiZDk4YjFlOWEzMWY0NTNmM2FjN2EyMTU1MGQ5NGI1YjYwMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-25T08:46:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-25T08:46:34Z"}, "message": "re PR tree-optimization/68502 ([i686] spec2000/179.art runfails after r222914)\n\n2015-11-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68502\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Restore\n\tcheck that the step is a multiple of the type size.\n\n\t* gcc.dg/vect/pr68502-1.c: New testcase.\n\t* gcc.dg/vect/pr68502-2.c: Likewise.\n\nFrom-SVN: r230854", "tree": {"sha": "03ddf2d2a8957559f8fbc29c53b7142f47328945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ddf2d2a8957559f8fbc29c53b7142f47328945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1b49824a8037a79e6a819bdd072820038f77586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b49824a8037a79e6a819bdd072820038f77586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b49824a8037a79e6a819bdd072820038f77586"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "362f21f1a9cacd2db8ac61379aad428f172fd8ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68502\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Restore\n+\tcheck that the step is a multiple of the type size.\n+\n 2015-11-24  Michael Collison  <michael.collison@linaro.org>\n \n \t* config/aarch64/aarch64-simd.md (widen_ssum, widen_usum)"}, {"sha": "ec80893ee43963ee8f7fca2eae5d451aa06235a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68502\n+\t* gcc.dg/vect/pr68502-1.c: New testcase.\n+\t* gcc.dg/vect/pr68502-2.c: Likewise.\n+\n 2015-11-24  Michael Collison  <michael.collison@linaro.org>\n \n \t* gcc.target/aarch64/saddw-1.c: New test."}, {"sha": "4f7d0bfca38693877ff080842d6ef7abf3d3e17b", "filename": "gcc/testsuite/gcc.dg/vect/pr68502-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-1.c?ref=993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "patch": "@@ -0,0 +1,48 @@\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+typedef struct {\n+    double *I;\n+    double W;\n+    double X;\n+    double V;\n+    double U;\n+    double P;\n+    double Q;\n+    double R;\n+} f1_neuron;\n+\n+f1_neuron *f1_layer;\n+\n+int numf1s = 1000;\n+\n+void __attribute__((noinline,noclone))\n+reset_nodes() \n+{\n+  int i;\n+\n+  for (i=0;i<numf1s;i++)\n+    {\n+      f1_layer[i].W = 0.0;\n+      f1_layer[i].X = 0.0;\n+      f1_layer[i].V = 0.0;\n+      f1_layer[i].U = 0.0;\n+      f1_layer[i].P = 0.0;\n+      f1_layer[i].Q = 0.0;\n+      f1_layer[i].R = 0.0;\n+    }\n+}\n+\n+int main ()\n+{\n+  int i;\n+  check_vect ();\n+  f1_layer = (f1_neuron *)malloc (numf1s * sizeof (f1_neuron));\n+  for (i = 0; i < numf1s; i++)\n+    f1_layer[i].I = (double *)-1;\n+  reset_nodes ();\n+  for (i = 0; i < numf1s; i++)\n+    if (f1_layer[i].I != (double *)-1)\n+      abort ();\n+  return 0; \n+}"}, {"sha": "a3eddafc7ca76cbe4c21f6ed873249cb2c94b7a6", "filename": "gcc/testsuite/gcc.dg/vect/pr68502-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr68502-2.c?ref=993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "patch": "@@ -0,0 +1,48 @@\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+typedef struct {\n+    short I;\n+    int W;\n+    int X;\n+    int V;\n+    int U;\n+    int P;\n+    int Q;\n+    int R;\n+} __attribute__((packed)) f1_neuron;\n+\n+f1_neuron *f1_layer;\n+\n+int numf1s = 1000;\n+\n+void __attribute__((noinline,noclone))\n+reset_nodes() \n+{\n+  int i;\n+\n+  for (i=0;i<numf1s;i++)\n+    {\n+      f1_layer[i].W = 0;\n+      f1_layer[i].X = 0;\n+      f1_layer[i].V = 0;\n+      f1_layer[i].U = 0;\n+      f1_layer[i].P = 0;\n+      f1_layer[i].Q = 0;\n+      f1_layer[i].R = 0;\n+    }\n+}\n+\n+int main ()\n+{\n+  int i;\n+  check_vect ();\n+  f1_layer = (f1_neuron *)malloc (numf1s * sizeof (f1_neuron));\n+  for (i = 0; i < numf1s; i++)\n+    f1_layer[i].I = -1;\n+  reset_nodes ();\n+  for (i = 0; i < numf1s; i++)\n+    if (f1_layer[i].I != -1)\n+      abort ();\n+  return 0; \n+}"}, {"sha": "d788b59dc7b5659b9f991ded054828eb2d437927", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993a6bd98b1e9a31f453f3ac7a21550d94b5b601/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=993a6bd98b1e9a31f453f3ac7a21550d94b5b601", "patch": "@@ -2176,6 +2176,27 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n   if (tree_fits_shwi_p (step))\n     {\n       dr_step = tree_to_shwi (step);\n+      /* Check that STEP is a multiple of type size.  Otherwise there is\n+         a non-element-sized gap at the end of the group which we\n+\t cannot represent in GROUP_GAP or GROUP_SIZE.\n+\t ???  As we can handle non-constant step fine here we should\n+\t simply remove uses of GROUP_GAP between the last and first\n+\t element and instead rely on DR_STEP.  GROUP_SIZE then would\n+\t simply not include that gap.  */\n+      if ((dr_step % type_size) != 0)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_printf_loc (MSG_NOTE, vect_location,\n+\t                       \"Step \");\n+\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, step);\n+\t      dump_printf (MSG_NOTE,\n+\t\t\t   \" is not a multiple of the element size for \");\n+\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr));\n+\t      dump_printf (MSG_NOTE, \"\\n\");\n+\t    }\n+\t  return false;\n+\t}\n       groupsize = absu_hwi (dr_step) / type_size;\n     }\n   else"}]}