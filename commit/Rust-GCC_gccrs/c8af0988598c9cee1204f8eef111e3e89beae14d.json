{"sha": "c8af0988598c9cee1204f8eef111e3e89beae14d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhZjA5ODg1OThjOWNlZTEyMDRmOGVlZjExMWUzZTg5YmVhZTE0ZA==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-26T07:27:28Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Remove the last trace of the Operator enum\n\nNow that everyone uses the 4 enums in the global namespace, the process\nof lowering HIR to Bexpression can be simplified by removing the\nintermediate translation.", "tree": {"sha": "0d4fce4937a40b908a56e80211906a3a51fbb814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4fce4937a40b908a56e80211906a3a51fbb814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8af0988598c9cee1204f8eef111e3e89beae14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af0988598c9cee1204f8eef111e3e89beae14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8af0988598c9cee1204f8eef111e3e89beae14d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af0988598c9cee1204f8eef111e3e89beae14d/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5b2a63268212f63ab04f17b71c2abcc6aecefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5b2a63268212f63ab04f17b71c2abcc6aecefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5b2a63268212f63ab04f17b71c2abcc6aecefc"}], "stats": {"total": 106, "additions": 19, "deletions": 87}, "files": [{"sha": "7d3f9d9a02d08ea4c98a41701b2ecb391721a9d5", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 19, "deletions": 87, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af0988598c9cee1204f8eef111e3e89beae14d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af0988598c9cee1204f8eef111e3e89beae14d/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=c8af0988598c9cee1204f8eef111e3e89beae14d", "patch": "@@ -298,107 +298,36 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ArithmeticOrLogicalExpr &expr)\n   {\n-    Operator op;\n-    switch (expr.get_expr_type ())\n-      {\n-      case HIR::ArithmeticOrLogicalExpr::ADD:\n-\top = OPERATOR_PLUS;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::SUBTRACT:\n-\top = OPERATOR_MINUS;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::MULTIPLY:\n-\top = OPERATOR_MULT;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::DIVIDE:\n-\top = OPERATOR_DIV;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::MODULUS:\n-\top = OPERATOR_MOD;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_AND:\n-\top = OPERATOR_AND;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_OR:\n-\top = OPERATOR_OR;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_XOR:\n-\top = OPERATOR_XOR;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::LEFT_SHIFT:\n-\top = OPERATOR_LSHIFT;\n-\tbreak;\n-      case HIR::ArithmeticOrLogicalExpr::RIGHT_SHIFT:\n-\top = OPERATOR_RSHIFT;\n-\tbreak;\n-      default:\n-\trust_fatal_error (expr.get_locus (), \"failed to compile operator\");\n-\treturn;\n-      }\n-\n+    auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n     auto rhs = CompileExpr::Compile (expr.get_rhs (), ctx);\n+    auto location = expr.get_locus ();\n \n-    translated = ctx->get_backend ()->binary_expression (op, lhs, rhs,\n-\t\t\t\t\t\t\t expr.get_locus ());\n+    translated\n+      = ctx->get_backend ()->arithmetic_or_logical_expression (op, lhs, rhs,\n+\t\t\t\t\t\t\t       location);\n   }\n \n   void visit (HIR::ComparisonExpr &expr)\n   {\n-    Operator op;\n-    switch (expr.get_expr_type ())\n-      {\n-      case HIR::ComparisonExpr::EQUAL:\n-\top = OPERATOR_EQEQ;\n-\tbreak;\n-      case HIR::ComparisonExpr::NOT_EQUAL:\n-\top = OPERATOR_NOTEQ;\n-\tbreak;\n-      case HIR::ComparisonExpr::GREATER_THAN:\n-\top = OPERATOR_GT;\n-\tbreak;\n-      case HIR::ComparisonExpr::LESS_THAN:\n-\top = OPERATOR_LT;\n-\tbreak;\n-      case HIR::ComparisonExpr::GREATER_OR_EQUAL:\n-\top = OPERATOR_GE;\n-\tbreak;\n-      case HIR::ComparisonExpr::LESS_OR_EQUAL:\n-\top = OPERATOR_LE;\n-\tbreak;\n-      default:\n-\trust_fatal_error (expr.get_locus (), \"failed to compile operator\");\n-\treturn;\n-      }\n-\n+    auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n     auto rhs = CompileExpr::Compile (expr.get_rhs (), ctx);\n+    auto location = expr.get_locus ();\n \n-    translated = ctx->get_backend ()->binary_expression (op, lhs, rhs,\n-\t\t\t\t\t\t\t expr.get_locus ());\n+    translated\n+      = ctx->get_backend ()->comparision_expression (op, lhs, rhs, location);\n   }\n \n   void visit (HIR::LazyBooleanExpr &expr)\n   {\n-    Operator op;\n-    switch (expr.get_expr_type ())\n-      {\n-      case HIR::LazyBooleanExpr::LOGICAL_OR:\n-\top = OPERATOR_OROR;\n-\tbreak;\n-      case HIR::LazyBooleanExpr::LOGICAL_AND:\n-\top = OPERATOR_ANDAND;\n-\tbreak;\n-      default:\n-\trust_fatal_error (expr.get_locus (), \"failed to compile operator\");\n-\treturn;\n-      }\n-\n+    auto op = expr.get_expr_type ();\n     auto lhs = CompileExpr::Compile (expr.get_lhs (), ctx);\n     auto rhs = CompileExpr::Compile (expr.get_rhs (), ctx);\n+    auto location = expr.get_locus ();\n \n-    translated = ctx->get_backend ()->binary_expression (op, lhs, rhs,\n-\t\t\t\t\t\t\t expr.get_locus ());\n+    translated\n+      = ctx->get_backend ()->lazy_boolean_expression (op, lhs, rhs, location);\n   }\n \n   void visit (HIR::NegationExpr &expr)\n@@ -415,9 +344,12 @@ class CompileExpr : public HIRCompileBase\n \tbreak;\n       }\n \n-    Bexpression *negated_expr = CompileExpr::Compile (expr.get_expr (), ctx);\n-    translated = ctx->get_backend ()->unary_expression (op, negated_expr,\n-\t\t\t\t\t\t\texpr.get_locus ());\n+    auto op = expr.get_expr_type ();\n+    auto negated_expr = CompileExpr::Compile (expr.get_expr (), ctx);\n+    auto location = expr.get_locus ();\n+\n+    translated\n+      = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n   }\n \n   void visit (HIR::IfExpr &expr)"}]}