{"sha": "2004617a8c2e67005230ebfcbdd1e4216b411bf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwNDYxN2E4YzJlNjcwMDUyMzBlYmZjYmRkMWU0MjE2YjQxMWJmMQ==", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2017-12-14T17:37:20Z"}, "committer": {"name": "Qing Zhao", "email": "qinzhao@gcc.gnu.org", "date": "2017-12-14T17:37:20Z"}, "message": "Patch for middle-end/PR79538\nmissing -Wformat-overflow with %s and non-member array arguments \n\n-Wformat-overflow uses the routine \"get_range_strlen\" to decide the \nmaximum string length, however, currently \"get_range_strlen\" misses \nthe handling of non-member arrays.\n\nAdding the handling of non-member array resolves the issue.\nAdding test case pr79538.c into gcc.dg.\n\nDuring gcc bootstrap, 2 source files (c-family/c-cppbuiltin.c, \nfortran/class.c) were detected new warnings by -Wformat-overflow\ndue to the new handling of non-member array in \"get_range_strlen\".\nin order to avoid these new warnings and continue with bootstrap,\nupdating these 2 files to avoid the warnings.\n\nin c-family/c-cppbuiltin.c, the warning is following:\n\n../../latest_gcc_2/gcc/c-family/c-cppbuiltin.c:1627:15: note: \n\u2018sprintf\u2019 output 2 or more bytes (assuming 257) into a destination \nof size 256\n       sprintf (buf1, \"%s=%s\", macro, buf2);\n       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\nin the above, buf1 and buf2 are declared as:\nchar buf1[256], buf2[256];\n\ni.e, buf1 and buf2 have same size. adjusting the size of buf1 and \nbuf2 resolves the warning. \n\nfortran/class.c has the similar issue as above. Instead of adjusting\nsize of the buffers, replacing sprintf with xasprintf is a better \nsolution for these cases.\n\nFrom-SVN: r255654", "tree": {"sha": "707f59bba7756a18a71f663acf1e92c0218c53c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/707f59bba7756a18a71f663acf1e92c0218c53c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2004617a8c2e67005230ebfcbdd1e4216b411bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2004617a8c2e67005230ebfcbdd1e4216b411bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2004617a8c2e67005230ebfcbdd1e4216b411bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2004617a8c2e67005230ebfcbdd1e4216b411bf1/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65fe74706ffbd4d51bf31add434843b1991b2b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fe74706ffbd4d51bf31add434843b1991b2b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fe74706ffbd4d51bf31add434843b1991b2b39"}], "stats": {"total": 121, "additions": 95, "deletions": 26}, "files": [{"sha": "0192d672823c2814637e92c6d128c8d89ed7a631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1,3 +1,9 @@\n+2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle_end/79538\n+\t* gimple-fold.c (get_range_strlen): Add the handling of non-member \n+\tarray.\n+\n 2017-12-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/83312"}, {"sha": "abe53019aa669e0bfbcb1436c3d575f6df7b450b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle_end/79538 \n+\t* c-cppbuiltin.c (builtin_define_with_hex_fp_value):\n+\tAdjust the size of buf1 and buf2, add a new buf to avoid\n+\tformat-overflow warning.\n+\n 2017-12-12  Alexandre Oliva <aoliva@redhat.com>\n \n \t* c-semantics.c (pop_stmt_list): Move begin stmt marker into"}, {"sha": "9e33aed9b8bc1457883398344c5ea629503b240e", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1613,7 +1613,7 @@ builtin_define_with_hex_fp_value (const char *macro,\n \t\t\t\t  const char *fp_cast)\n {\n   REAL_VALUE_TYPE real;\n-  char dec_str[64], buf1[256], buf2[256];\n+  char dec_str[64], buf[256], buf1[128], buf2[64];\n \n   /* This is very expensive, so if possible expand them lazily.  */\n   if (lazy_hex_fp_value_count < 12\n@@ -1656,11 +1656,11 @@ builtin_define_with_hex_fp_value (const char *macro,\n \n   /* Assemble the macro in the following fashion\n      macro = fp_cast [dec_str fp_suffix] */\n-  sprintf (buf1, \"%s%s\", dec_str, fp_suffix);\n-  sprintf (buf2, fp_cast, buf1);\n-  sprintf (buf1, \"%s=%s\", macro, buf2);\n+  sprintf (buf2, \"%s%s\", dec_str, fp_suffix);\n+  sprintf (buf1, fp_cast, buf2);\n+  sprintf (buf, \"%s=%s\", macro, buf1);\n \n-  cpp_define (parse_in, buf1);\n+  cpp_define (parse_in, buf);\n }\n \n /* Return a string constant for the suffix for a value of type TYPE"}, {"sha": "cc8b11879f3d62e110be2ab9548d893e22025f6f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1,3 +1,12 @@\n+2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle_end/79538\n+\t* class.c (gfc_build_class_symbol): Replace call to\n+\tsprintf with xasprintf to avoid format-overflow warning.\n+\t(generate_finalization_wrapper): Likewise.\n+\t(gfc_find_derived_vtab): Likewise.\n+\t(find_intrinsic_vtab): Likewise.\n+\n 2017-12-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* intrinsic.texi (MAXLOC): Remove double description"}, {"sha": "a08fb8d81c5d10c177234c3c5cfdf3a1fb41695d", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -602,7 +602,8 @@ bool\n gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \t\t\tgfc_array_spec **as)\n {\n-  char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n+  char tname[GFC_MAX_SYMBOL_LEN+1];\n+  char *name;\n   gfc_symbol *fclass;\n   gfc_symbol *vtab;\n   gfc_component *c;\n@@ -633,17 +634,17 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n   rank = !(*as) || (*as)->rank == -1 ? GFC_MAX_DIMENSIONS : (*as)->rank;\n   get_unique_hashed_string (tname, ts->u.derived);\n   if ((*as) && attr->allocatable)\n-    sprintf (name, \"__class_%s_%d_%da\", tname, rank, (*as)->corank);\n+    name = xasprintf (\"__class_%s_%d_%da\", tname, rank, (*as)->corank);\n   else if ((*as) && attr->pointer)\n-    sprintf (name, \"__class_%s_%d_%dp\", tname, rank, (*as)->corank);\n+    name = xasprintf (\"__class_%s_%d_%dp\", tname, rank, (*as)->corank);\n   else if ((*as))\n-    sprintf (name, \"__class_%s_%d_%dt\", tname, rank, (*as)->corank);\n+    name = xasprintf (\"__class_%s_%d_%dt\", tname, rank, (*as)->corank);\n   else if (attr->pointer)\n-    sprintf (name, \"__class_%s_p\", tname);\n+    name = xasprintf (\"__class_%s_p\", tname);\n   else if (attr->allocatable)\n-    sprintf (name, \"__class_%s_a\", tname);\n+    name = xasprintf (\"__class_%s_a\", tname);\n   else\n-    sprintf (name, \"__class_%s_t\", tname);\n+    name = xasprintf (\"__class_%s_t\", tname);\n \n   if (ts->u.derived->attr.unlimited_polymorphic)\n     {\n@@ -738,6 +739,7 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n   ts->u.derived = fclass;\n   attr->allocatable = attr->pointer = attr->dimension = attr->codimension = 0;\n   (*as) = NULL;\n+  free (name);\n   return true;\n }\n \n@@ -1527,7 +1529,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   gfc_component *comp;\n   gfc_namespace *sub_ns;\n   gfc_code *last_code, *block;\n-  char name[GFC_MAX_SYMBOL_LEN+1];\n+  char *name;\n   bool finalizable_comp = false;\n   bool expr_null_wrapper = false;\n   gfc_expr *ancestor_wrapper = NULL, *rank;\n@@ -1606,7 +1608,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   sub_ns->resolved = 1;\n \n   /* Set up the procedure symbol.  */\n-  sprintf (name, \"__final_%s\", tname);\n+  name = xasprintf (\"__final_%s\", tname);\n   gfc_get_symbol (name, sub_ns, &final);\n   sub_ns->proc_name = final;\n   final->attr.flavor = FL_PROCEDURE;\n@@ -2172,6 +2174,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   gfc_free_expr (rank);\n   vtab_final->initializer = gfc_lval_expr_from_sym (final);\n   vtab_final->ts.interface = final;\n+  free (name);\n }\n \n \n@@ -2239,10 +2242,11 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \n   if (ns)\n     {\n-      char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n+      char tname[GFC_MAX_SYMBOL_LEN+1];\n+      char *name;\n \n       get_unique_hashed_string (tname, derived);\n-      sprintf (name, \"__vtab_%s\", tname);\n+      name = xasprintf (\"__vtab_%s\", tname);\n \n       /* Look for the vtab symbol in various namespaces.  */\n       if (gsym && gsym->ns)\n@@ -2270,7 +2274,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n \t  gfc_set_sym_referenced (vtab);\n-\t  sprintf (name, \"__vtype_%s\", tname);\n+\t  name = xasprintf (\"__vtype_%s\", tname);\n \n \t  gfc_find_symbol (name, ns, 0, &vtype);\n \t  if (vtype == NULL)\n@@ -2373,7 +2377,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      else\n \t\t{\n \t\t  /* Construct default initialization variable.  */\n-\t\t  sprintf (name, \"__def_init_%s\", tname);\n+\t\t  name = xasprintf (\"__def_init_%s\", tname);\n \t\t  gfc_get_symbol (name, ns, &def_init);\n \t\t  def_init->attr.target = 1;\n \t\t  def_init->attr.artificial = 1;\n@@ -2406,7 +2410,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  ns->contained = sub_ns;\n \t\t  sub_ns->resolved = 1;\n \t\t  /* Set up procedure symbol.  */\n-\t\t  sprintf (name, \"__copy_%s\", tname);\n+\t\t  name = xasprintf (\"__copy_%s\", tname);\n \t\t  gfc_get_symbol (name, sub_ns, &copy);\n \t\t  sub_ns->proc_name = copy;\n \t\t  copy->attr.flavor = FL_PROCEDURE;\n@@ -2483,7 +2487,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  ns->contained = sub_ns;\n \t\t  sub_ns->resolved = 1;\n \t\t  /* Set up procedure symbol.  */\n-\t\t  sprintf (name, \"__deallocate_%s\", tname);\n+\t\t  name = xasprintf (\"__deallocate_%s\", tname);\n \t\t  gfc_get_symbol (name, sub_ns, &dealloc);\n \t\t  sub_ns->proc_name = dealloc;\n \t\t  dealloc->attr.flavor = FL_PROCEDURE;\n@@ -2532,6 +2536,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t  vtab->ts.u.derived = vtype;\n \t  vtab->value = gfc_default_initializer (&vtab->ts);\n \t}\n+      free (name);\n     }\n \n   found_sym = vtab;\n@@ -2623,13 +2628,14 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \n   if (ns)\n     {\n-      char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n-\n+      char tname[GFC_MAX_SYMBOL_LEN+1];\n+      char *name;\n+      \n       /* Encode all types as TYPENAME_KIND_ including especially character\n \t arrays, whose length is now consistently stored in the _len component\n \t of the class-variable.  */\n       sprintf (tname, \"%s_%d_\", gfc_basic_typename (ts->type), ts->kind);\n-      sprintf (name, \"__vtab_%s\", tname);\n+      name = xasprintf (\"__vtab_%s\", tname);\n \n       /* Look for the vtab symbol in the top-level namespace only.  */\n       gfc_find_symbol (name, ns, 0, &vtab);\n@@ -2646,7 +2652,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n \t  gfc_set_sym_referenced (vtab);\n-\t  sprintf (name, \"__vtype_%s\", tname);\n+\t  name = xasprintf (\"__vtype_%s\", tname);\n \n \t  gfc_find_symbol (name, ns, 0, &vtype);\n \t  if (vtype == NULL)\n@@ -2722,12 +2728,12 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      c->tb->ppc = 1;\n \n \t      if (ts->type != BT_CHARACTER)\n-\t\tsprintf (name, \"__copy_%s\", tname);\n+\t\tname = xasprintf (\"__copy_%s\", tname);\n \t      else\n \t\t{\n \t\t  /* __copy is always the same for characters.\n \t\t     Check to see if copy function already exists.  */\n-\t\t  sprintf (name, \"__copy_character_%d\", ts->kind);\n+\t\t  name = xasprintf (\"__copy_character_%d\", ts->kind);\n \t\t  contained = ns->contained;\n \t\t  for (; contained; contained = contained->sibling)\n \t\t    if (contained->proc_name\n@@ -2796,6 +2802,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t  vtab->ts.u.derived = vtype;\n \t  vtab->value = gfc_default_initializer (&vtab->ts);\n \t}\n+      free (name);\n     }\n \n   found_sym = vtab;"}, {"sha": "403fbb8c940872edc4c5ccbad526cf540ad5190e", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1340,6 +1340,19 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited, int type,\n \t\t the array could have zero length.  */\n \t      *minlen = ssize_int (0);\n \t    }\n+\n+\t  if (VAR_P (arg) \n+\t      && TREE_CODE (TREE_TYPE (arg)) == ARRAY_TYPE)\n+\t    {\n+\t      val = TYPE_SIZE_UNIT (TREE_TYPE (arg));\n+\t      if (!val || TREE_CODE (val) != INTEGER_CST || integer_zerop (val))\n+\t\treturn false;\n+\t      val = wide_int_to_tree (TREE_TYPE (val), \n+\t\t\t\t      wi::sub(wi::to_wide (val), 1));\n+\t      /* Set the minimum size to zero since the string in\n+\t\t the array could have zero length.  */\n+\t      *minlen = ssize_int (0);\n+\t    }\n \t}\n \n       if (!val)"}, {"sha": "6cedc130701225f2ae0efeeae144c35af88ddd73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -1,3 +1,8 @@\n+2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR middle_end/79538\n+\t* gcc.dg/pr79538.c: New test.\n+\n 2017-12-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/83312"}, {"sha": "6cdab45128afdc3672a4cdcb7ccd6c2d46082ec4", "filename": "gcc/testsuite/gcc.dg/pr79538.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79538.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2004617a8c2e67005230ebfcbdd1e4216b411bf1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79538.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79538.c?ref=2004617a8c2e67005230ebfcbdd1e4216b411bf1", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/79538 - missing -Wformat-overflow with %s and non-member array arguments\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wformat-overflow\" } */\n+\n+char a3[3];\n+char a4[4];\n+char d[3];\n+\n+void g (int i)\n+{\n+  const char *s = i < 0 ? a3 : a4;\n+  __builtin_sprintf (d, \"%s\", s);      /* { dg-warning \".__builtin_sprintf. may write a terminating nul past the end of the destination\" } */\n+  return;\n+}\n+\n+void f ()\n+{\n+  char des[3];\n+  char src[] = \"abcd\";\n+  __builtin_sprintf (des, \"%s\", src); /* { dg-warning \"directive writing up to 4 bytes into a region of size 3\" } */\n+  return;\n+}"}]}