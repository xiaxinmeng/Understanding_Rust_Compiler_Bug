{"sha": "c36193c690369c4180ab460b3a7c9a797f87e160", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2MTkzYzY5MDM2OWM0MTgwYWI0NjBiM2E3YzlhNzk3Zjg3ZTE2MA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2011-07-20T16:16:53Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-07-20T16:16:53Z"}, "message": "Allow 4 operand FMAs on power7\n\nFrom-SVN: r176522", "tree": {"sha": "ea61f50fc075e518e0f6943f421bc5f9d8ee6666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea61f50fc075e518e0f6943f421bc5f9d8ee6666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c36193c690369c4180ab460b3a7c9a797f87e160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36193c690369c4180ab460b3a7c9a797f87e160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36193c690369c4180ab460b3a7c9a797f87e160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36193c690369c4180ab460b3a7c9a797f87e160/comments", "author": null, "committer": null, "parents": [{"sha": "242f54216097a8dfc04a9b35d9b28c3f58ad0bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242f54216097a8dfc04a9b35d9b28c3f58ad0bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242f54216097a8dfc04a9b35d9b28c3f58ad0bbe"}], "stats": {"total": 239, "additions": 181, "deletions": 58}, "files": [{"sha": "eb02423e54c06bd9b614fc6d66daf730ca176ee3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -1,3 +1,19 @@\n+2011-07-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (vsx_fma*): Use 4 argument fma instructions\n+\twhere we can use them from the standard and altivec instruction\n+\tsets, instead of always using the 3 operand VSX forms that require\n+\tthe destination to overlap one of the inputs.\n+\t(vsx_fms*): Ditto.\n+\t(vsx_fnma*): Ditto.\n+\t(vsx_fnms*): Ditto.\n+\n+\t* config/rs6000/rs6000.md (fmadf4_fpr): Set fp_type fp_maddsub_d\n+\tfor DF types.\n+\t(fmsdf4_fpr): Ditto.\n+\t(nfmadf4_fpr): Ditto.\n+\t(nfmsdf4_fpr): Ditto.\n+\n 2011-07-20  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* genrecog.c (make_insn_sequence): Correct position numbering"}, {"sha": "288f291162b5af10fc5d9a01ebdcf15191c517e7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -6288,7 +6288,7 @@\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"*fmsdf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -6299,7 +6299,7 @@\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"*nfmadf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -6310,7 +6310,7 @@\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"*nfmsdf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -6321,7 +6321,7 @@\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")"}, {"sha": "e859af36e113ef368306a4bdf2bedc20bcd36e92", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 144, "deletions": 44, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -524,46 +524,112 @@\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n \n-;; Fused vector multiply/add instructions\n-\n-(define_insn \"*vsx_fma<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(fma:VSX_B\n-\t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t  (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n+;; Fused vector multiply/add instructions Support the classical DF versions of\n+;; fma, which allows the target to be a separate register from the 3 inputs.\n+;; Under VSX, the target must be either the addend or the first multiply.\n+;; Where we can, also do the same for the Altivec V4SF fmas.\n+\n+(define_insn \"*vsx_fmadf4\"\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n+\t(fma:DF\n+\t  (match_operand:DF 1 \"vsx_register_operand\" \"%ws,ws,wa,wa,d\")\n+\t  (match_operand:DF 2 \"vsx_register_operand\" \"ws,0,wa,0,d\")\n+\t  (match_operand:DF 3 \"vsx_register_operand\" \"0,ws,0,wa,d\")))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n   \"@\n-   x<VSv>madda<VSs> %x0,%x1,%x2\n-   x<VSv>maddm<VSs> %x0,%x1,%x3\n-   x<VSv>madda<VSs> %x0,%x1,%x2\n-   x<VSv>maddm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n+   xsmaddadp %x0,%x1,%x2\n+   xsmaddmdp %x0,%x1,%x3\n+   xsmaddadp %x0,%x1,%x2\n+   xsmaddmdp %x0,%x1,%x3\n+   {fma|fmadd} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n+\n+(define_insn \"*vsx_fmav4sf4\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,v\")\n+\t(fma:V4SF\n+\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%ws,ws,wa,wa,v\")\n+\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"ws,0,wa,0,v\")\n+\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,ws,0,wa,v\")))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"@\n+   xvmaddasp %x0,%x1,%x2\n+   xvmaddmsp %x0,%x1,%x3\n+   xvmaddasp %x0,%x1,%x2\n+   xvmaddmsp %x0,%x1,%x3\n+   vmaddfp %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"*vsx_fmav2df4\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa\")\n+\t(fma:V2DF\n+\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"%ws,ws,wa,wa\")\n+\t  (match_operand:V2DF 2 \"vsx_register_operand\" \"ws,0,wa,0\")\n+\t  (match_operand:V2DF 3 \"vsx_register_operand\" \"0,ws,0,wa\")))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"@\n+   xvmaddadp %x0,%x1,%x2\n+   xvmaddmdp %x0,%x1,%x3\n+   xvmaddadp %x0,%x1,%x2\n+   xvmaddmdp %x0,%x1,%x3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"*vsx_fmsdf4\"\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n+\t(fma:DF\n+\t  (match_operand:DF 1 \"vsx_register_operand\" \"%ws,ws,wa,wa,d\")\n+\t  (match_operand:DF 2 \"vsx_register_operand\" \"ws,0,wa,0,d\")\n+\t  (neg:DF\n+\t    (match_operand:DF 3 \"vsx_register_operand\" \"0,ws,0,wa,d\"))))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n+  \"@\n+   xsmsubadp %x0,%x1,%x2\n+   xsmsubmdp %x0,%x1,%x3\n+   xsmsubadp %x0,%x1,%x2\n+   xsmsubmdp %x0,%x1,%x3\n+   {fms|fmsub} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"*vsx_fms<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(fma:VSX_B\n-\t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t  (neg:VSX_B\n-\t    (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n+\t(fma:VSX_F\n+\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n+\t  (neg:VSX_F\n+\t    (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n    x<VSv>msuba<VSs> %x0,%x1,%x2\n    x<VSv>msubm<VSs> %x0,%x1,%x3\n    x<VSv>msuba<VSs> %x0,%x1,%x2\n    x<VSv>msubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"*vsx_nfmadf4\"\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n+\t(neg:DF\n+\t (fma:DF\n+\t  (match_operand:DF 1 \"vsx_register_operand\" \"ws,ws,wa,wa,d\")\n+\t  (match_operand:DF 2 \"vsx_register_operand\" \"ws,0,wa,0,d\")\n+\t  (match_operand:DF 3 \"vsx_register_operand\" \"0,ws,0,wa,d\"))))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n+  \"@\n+   xsnmaddadp %x0,%x1,%x2\n+   xsnmaddmdp %x0,%x1,%x3\n+   xsnmaddadp %x0,%x1,%x2\n+   xsnmaddmdp %x0,%x1,%x3\n+   {fnma|fnmadd} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"*vsx_nfma<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(neg:VSX_B\n-\t (fma:VSX_B\n-\t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t  (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n+\t(neg:VSX_F\n+\t (fma:VSX_F\n+\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSr>,wa,wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n+\t  (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n    x<VSv>nmadda<VSs> %x0,%x1,%x2\n@@ -573,22 +639,56 @@\n   [(set_attr \"type\" \"<VStype_mul>\")\n    (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n \n-(define_insn \"*vsx_nfms<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(neg:VSX_B\n-\t (fma:VSX_B\n-\t   (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t   (neg:VSX_B\n-\t     (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n+(define_insn \"*vsx_nfmsdf4\"\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws,ws,?wa,?wa,d\")\n+\t(neg:DF\n+\t (fma:DF\n+\t   (match_operand:DF 1 \"vsx_register_operand\" \"%ws,ws,wa,wa,d\")\n+\t   (match_operand:DF 2 \"vsx_register_operand\" \"ws,0,wa,0,d\")\n+\t   (neg:DF\n+\t     (match_operand:DF 3 \"vsx_register_operand\" \"0,ws,0,wa,d\")))))]\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n   \"@\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n+   xsnmsubadp %x0,%x1,%x2\n+   xsnmsubmdp %x0,%x1,%x3\n+   xsnmsubadp %x0,%x1,%x2\n+   xsnmsubmdp %x0,%x1,%x3\n+   {fnms|fnmsub} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n+\n+(define_insn \"*vsx_nfmsv4sf4\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wf,wf,?wa,?wa,v\")\n+\t(neg:V4SF\n+\t (fma:V4SF\n+\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wf,wf,wa,wa,v\")\n+\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wf,0,wa,0,v\")\n+\t   (neg:V4SF\n+\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wf,0,wa,v\")))))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"@\n+   xvnmsubasp %x0,%x1,%x2\n+   xvnmsubmsp %x0,%x1,%x3\n+   xvnmsubasp %x0,%x1,%x2\n+   xvnmsubmsp %x0,%x1,%x3\n+   vnmsubfp %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"*vsx_nfmsv2df4\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,wd,?wa,?wa\")\n+\t(neg:V2DF\n+\t (fma:V2DF\n+\t   (match_operand:V2DF 1 \"vsx_register_operand\" \"%wd,wd,wa,wa\")\n+\t   (match_operand:V2DF 2 \"vsx_register_operand\" \"wd,0,wa,0\")\n+\t   (neg:V2DF\n+\t     (match_operand:V2DF 3 \"vsx_register_operand\" \"0,wd,0,wa\")))))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"@\n+   xvnmsubadp %x0,%x1,%x2\n+   xvnmsubmdp %x0,%x1,%x3\n+   xvnmsubadp %x0,%x1,%x2\n+   xvnmsubmdp %x0,%x1,%x3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n \n ;; Vector conditional expressions (no scalar version for these instructions)\n (define_insn \"vsx_eq<mode>\""}, {"sha": "5aa4d6b5fa4b0c49c7e6e1713789aead2c3844c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -1,3 +1,10 @@\n+2011-07-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc-fma-1.c: Adjust to allow non-VSX fmas to\n+\tbe generated.\n+\t* gcc.target/powerpc/ppc-fma-2.c: Ditto.\n+\t* gcc.target/powerpc/recip-3.c: Ditto.\n+\n 2011-07-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/6709 (DR 743)"}, {"sha": "a3d532485e112a6f255804eb511cb347defbb8e7", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -3,16 +3,16 @@\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O3 -ftree-vectorize -mcpu=power7 -ffast-math\" } */\n /* { dg-final { scan-assembler-times \"xvmadd\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xsmadd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xsmadd\\|fmadd\\ \" 2 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 2 } } */\n /* { dg-final { scan-assembler-times \"xvmsub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsmsub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsmsub\\|fmsub\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmsubs\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvnmadd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsnmadd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsnmadd\\|fnmadd \" 1 } } */\n /* { dg-final { scan-assembler-times \"fnmadds\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvnmsub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsnmsub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsnmsub\\|fnmsub \" 1 } } */\n /* { dg-final { scan-assembler-times \"fnmsubs\" 1 } } */\n \n /* All functions should generate an appropriate (a * b) + c instruction"}, {"sha": "f732b9fa417bf0dc3dce28888ac61d8c87c84f75", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -3,16 +3,16 @@\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O3 -ftree-vectorize -mcpu=power7 -ffast-math -ffp-contract=off\" } */\n /* { dg-final { scan-assembler-times \"xvmadd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsmadd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsmadd\\|fmadd\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvmsub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsmsub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsmsub\\|fmsub\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmsubs\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvnmadd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsnmadd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsnmadd\\|fnmadd\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fnmadds\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvnmsub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xsnmsub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsnmsub\\|fnmsub\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fnmsubs\" 1 } } */\n \n /* Only the functions calling the bulitin should generate an appropriate (a *"}, {"sha": "406588180479406fe9d9b680b01858e1dbaf4891", "filename": "gcc/testsuite/gcc.target/powerpc/recip-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36193c690369c4180ab460b3a7c9a797f87e160/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c?ref=c36193c690369c4180ab460b3a7c9a797f87e160", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile { target { { powerpc*-*-* } && { ! powerpc*-apple-darwin* } } } } */\n /* { dg-options \"-O2 -mrecip -ffast-math -mcpu=power7\" } */\n /* { dg-final { scan-assembler-times \"xsrsqrtedp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xsmsub.dp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xsmsub.dp\\|fmsub\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"xsmuldp\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xsnmsub.dp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xsnmsub.dp\\|fnmsub\\ \" 2 } } */\n /* { dg-final { scan-assembler-times \"frsqrtes\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmsubs\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmuls\" 4 } } */"}]}