{"sha": "75c6a925dab5b7af9ab47c10906cb0e140261cc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNmE5MjVkYWI1YjdhZjlhYjQ3YzEwOTA2Y2IwZTE0MDI2MWNjMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-24T15:29:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-24T15:29:41Z"}, "message": "Revert ABI changes to std::allocator in C++20\n\nThe recent C++20 changes to remove the std::allocator<void> explicit\nspecialization and the destructor in the std::allocator primary template\nchange the result of some is_trivially_xxx type traits. To avoid those\nchanges, this patch restores the explicit specialization and the\ndestructor.\n\nIn order to meet the C++20 requirements the std::allocator<void>\nexplicit specialization must provide the same interface as the primary\ntemplate (except for the unusable allocate and deallocate member\nfunctions) and the destructor in the primary template must be constexpr.\n\n\t* include/bits/allocator.h (allocator<void>): Restore the explicit\n\tspecialization for C++20, but make its API consistent with the primary\n\ttemplate.\n\t(allocator::~allocator()): Restore the destructor for C++20, but make\n\tit constexpr.\n\t* testsuite/20_util/allocator/rebind_c++20.cc: Check allocator<void>.\n\t* testsuite/20_util/allocator/requirements/typedefs_c++20.cc: Likewise.\n\t* testsuite/20_util/allocator/void.cc: Check that constructors and\n\tdestructors are trivial. Check for converting constructor in C++20.\n\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Simplify\n\tdejagnu target selector.\n\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n\nFrom-SVN: r277410", "tree": {"sha": "7118ea8e1c16b8855187cdfe10af00f75cff4891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7118ea8e1c16b8855187cdfe10af00f75cff4891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c6a925dab5b7af9ab47c10906cb0e140261cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6a925dab5b7af9ab47c10906cb0e140261cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c6a925dab5b7af9ab47c10906cb0e140261cc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6a925dab5b7af9ab47c10906cb0e140261cc2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf037872d3cd0928bea72335dc7a138a0b2fb43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf037872d3cd0928bea72335dc7a138a0b2fb43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf037872d3cd0928bea72335dc7a138a0b2fb43c"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "0ae347ee4ff14172e3dc0b399767fc4d9e8523c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -1,5 +1,18 @@\n 2019-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/allocator.h (allocator<void>): Restore the explicit\n+\tspecialization for C++20, but make its API consistent with the primary\n+\ttemplate.\n+\t(allocator::~allocator()): Restore the destructor for C++20, but make\n+\tit constexpr.\n+\t* testsuite/20_util/allocator/rebind_c++20.cc: Check allocator<void>.\n+\t* testsuite/20_util/allocator/requirements/typedefs_c++20.cc: Likewise.\n+\t* testsuite/20_util/allocator/void.cc: Check that constructors and\n+\tdestructors are trivial. Check for converting constructor in C++20.\n+\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Simplify\n+\tdejagnu target selector.\n+\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n+\n \t* include/experimental/executor (__use_future_ct, use_future_t):\n \tDefine partial specializations for std::allocator.\n \t(__use_future_ch): Overload constructor for completion tokens using"}, {"sha": "2559c57b12eb0d91e2ca23e969a014c0a2fb9bf5", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -63,23 +63,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-#if __cplusplus <= 201703L\n   /// allocator<void> specialization.\n   template<>\n     class allocator<void>\n     {\n     public:\n+      typedef void        value_type;\n       typedef size_t      size_type;\n       typedef ptrdiff_t   difference_type;\n+#if __cplusplus <= 201703L\n       typedef void*       pointer;\n       typedef const void* const_pointer;\n-      typedef void        value_type;\n \n       template<typename _Tp1>\n \tstruct rebind\n \t{ typedef allocator<_Tp1> other; };\n+#else\n+      allocator() = default;\n \n-#if __cplusplus >= 201103L\n+      template<typename _Up>\n+\tconstexpr\n+\tallocator(const allocator<_Up>&) { }\n+#endif // ! C++20\n+\n+#if __cplusplus >= 201103L && __cplusplus <= 201703L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2103. std::allocator propagate_on_container_move_assignment\n       typedef true_type propagate_on_container_move_assignment;\n@@ -98,9 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tdestroy(_Up* __p)\n \tnoexcept(noexcept(__p->~_Up()))\n \t{ __p->~_Up(); }\n-#endif // C++11\n+#endif // C++11 to C++17\n     };\n-#endif // ! C++20\n \n   /**\n    * @brief  The @a standard allocator, as per [20.4].\n@@ -154,9 +160,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX20_CONSTEXPR\n \tallocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }\n \n-#if __cplusplus <= 201703L\n+      _GLIBCXX20_CONSTEXPR\n       ~allocator() _GLIBCXX_NOTHROW { }\n-#endif\n \n #if __cplusplus > 201703L\n       [[nodiscard,__gnu__::__always_inline__]]"}, {"sha": "dd7cd67f943b5e2215cba8bf41f7abf505db9b93", "filename": "libstdc++-v3/testsuite/20_util/allocator/rebind_c++20.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -23,6 +23,9 @@\n template<typename T> struct Alloc : std::allocator<T> { };\n \n using T = std::allocator_traits<Alloc<int>>;\n-\n // Prior to C++20 this finds std::allocator<int>::rebind and so fails:\n static_assert( std::is_same_v<T::rebind_alloc<long>, Alloc<long>> );\n+\n+using V = std::allocator_traits<Alloc<void>>;\n+// Prior to C++20 this finds std::allocator<void>::rebind and so fails:\n+static_assert( std::is_same_v<V::rebind_alloc<long>, Alloc<long>> );"}, {"sha": "ef193fb1bf1125962d029019b559737a21ea643f", "filename": "libstdc++-v3/testsuite/20_util/allocator/requirements/typedefs_c++20.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -54,3 +54,14 @@ static_assert( !has_rebind<A> );\n static_assert( !has_construct<A> );\n static_assert( !has_destroy<A> );\n static_assert( !has_max_size<A> );\n+\n+using V = std::allocator<void>;\n+\n+static_assert( !has_pointer<V> );\n+static_assert( !has_const_pointer<V> );\n+static_assert( !has_reference<V> );\n+static_assert( !has_const_reference<V> );\n+static_assert( !has_rebind<V> );\n+static_assert( !has_construct<V> );\n+static_assert( !has_destroy<V> );\n+static_assert( !has_max_size<V> );"}, {"sha": "9d94fac3cc0218b628d7b933fa2f865fa448ec27", "filename": "libstdc++-v3/testsuite/20_util/allocator/void.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -33,6 +33,28 @@ test01()\n   std::allocator_traits<alloc_type>::destroy(a, &i);\n }\n \n+// These properties are formally unspecified, but have always been true for\n+// the libstdc++ definition of allocator<void>.\n+static_assert(\n+    std::is_trivially_default_constructible<std::allocator<void>>::value,\n+    \"explicit specialization has trivial default constructor\");\n+static_assert(\n+    std::is_trivially_copy_constructible<std::allocator<void>>::value,\n+    \"explicit specialization has trivial copy constructor\");\n+static_assert(\n+    std::is_trivially_move_constructible<std::allocator<void>>::value,\n+    \"explicit specialization has trivial move constructor\");\n+static_assert(\n+    std::is_trivially_destructible<std::allocator<void>>::value,\n+    \"explicit specialization has trivial destructor\");\n+\n+#if __cplusplus > 201703L\n+// C++20 removes the allocator<void> explicit specialization, so it can now be\n+// constructed using the converting constructor from other specializations.\n+static_assert( std::is_constructible_v<std::allocator<void>,\n+\t\t\t\t       std::allocator<int>> );\n+#endif\n+\n int\n main()\n {"}, {"sha": "f122768d8ace01b008ba9d1590dfde328456640d", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/variadic_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target { { c++11_only || c++14_only } || c++17_only } } }\n+// { dg-do run { target { c++11 && { ! c++2a } } } }\n \n // 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "cfe93a7b6d91f8d8c71a18511dcdd377aeef8ab7", "filename": "libstdc++-v3/testsuite/ext/new_allocator/variadic_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6a925dab5b7af9ab47c10906cb0e140261cc2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc?ref=75c6a925dab5b7af9ab47c10906cb0e140261cc2", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target { { c++11_only || c++14_only } || c++17_only } } }\n+// { dg-do run { target { c++11 && { ! c++2a } } } }\n \n // 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n "}]}