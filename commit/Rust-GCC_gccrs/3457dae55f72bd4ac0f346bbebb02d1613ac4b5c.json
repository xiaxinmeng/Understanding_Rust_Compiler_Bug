{"sha": "3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1N2RhZTU1ZjcyYmQ0YWMwZjM0NmJiZWJiMDJkMTYxM2FjNGI1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-23T13:03:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-23T13:56:32Z"}, "message": "middle-end/96453 - relax gimple_expand_vec_cond_expr\n\nThis relaxes the condition under which we also try NE_EXPR\nfor a fake generated compare in addition to LT_EXPR given\nthe fact the verification ICEd when it failed but obviously\nwas only implemented for constants.  Thus the patch removes\nthe verification and the restriction to constant operands.\n\n2020-09-23  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/96453\n\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Remove\n\tLT_EXPR -> NE_EXPR verification and also apply it for\n\tnon-constant masks.\n\n\t* gcc.dg/pr96453.c: New testcase.", "tree": {"sha": "c361b2e22d8a1f2ebf9e29b57d31675d0628ceee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c361b2e22d8a1f2ebf9e29b57d31675d0628ceee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c935c8232f6fe96a4be2dc27287b7ace839c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c935c8232f6fe96a4be2dc27287b7ace839c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c935c8232f6fe96a4be2dc27287b7ace839c67"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "97922632afd6b031c0f97a3afd57f0d665afba16", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "patch": "@@ -138,22 +138,11 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n   if (icode == CODE_FOR_nothing)\n     {\n       if (tcode == LT_EXPR\n-\t  && op0a == op0\n-\t  && TREE_CODE (op0) == VECTOR_CST)\n+\t  && op0a == op0)\n \t{\n \t  /* A VEC_COND_EXPR condition could be folded from EQ_EXPR/NE_EXPR\n \t     into a constant when only get_vcond_eq_icode is supported.\n-\t     Verify < 0 and != 0 behave the same and change it to NE_EXPR.  */\n-\t  unsigned HOST_WIDE_INT nelts;\n-\t  if (!VECTOR_CST_NELTS (op0).is_constant (&nelts))\n-\t    {\n-\t      if (VECTOR_CST_STEPPED_P (op0))\n-\t\tgcc_unreachable ();\n-\t      nelts = vector_cst_encoded_nelts (op0);\n-\t    }\n-\t  for (unsigned int i = 0; i < nelts; ++i)\n-\t    if (tree_int_cst_sgn (vector_cst_elt (op0, i)) == 1)\n-\t      gcc_unreachable ();\n+\t     Try changing it to NE_EXPR.  */\n \t  tcode = NE_EXPR;\n \t}\n       if (tcode == EQ_EXPR || tcode == NE_EXPR)"}, {"sha": "f758e7ec77a45d109b0257c53e380b7e225d6fb8", "filename": "gcc/testsuite/gcc.dg/pr96453.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96453.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457dae55f72bd4ac0f346bbebb02d1613ac4b5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96453.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96453.c?ref=3457dae55f72bd4ac0f346bbebb02d1613ac4b5c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-Og -fno-early-inlining -fno-tree-ccp -fno-tree-dce\" } */\n+/* { dg-additional-options \"-mavx -mno-sse4.2\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef int __attribute__ ((__vector_size__ (16))) U;\n+typedef unsigned long __attribute__ ((__vector_size__ (16))) V;\n+\n+static inline int\n+bar (unsigned long e, V f)\n+{\n+  V g = f != e;\n+  (union {U b;}){(U) g};\n+}\n+\n+void\n+foo (void)\n+{\n+  int j = bar (8, (V) { });\n+  for (unsigned i;; i[&j])\n+    ;\n+}"}]}