{"sha": "d73c44800b53c7e130da29e4eff1960b8311ffcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczYzQ0ODAwYjUzYzdlMTMwZGEyOWU0ZWZmMTk2MGI4MzExZmZjZA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-08-30T15:58:21Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-08-30T15:58:21Z"}, "message": "Enable store fusion on Power10.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-cpus.def (ISA_3_1_MASKS_SERVER): Add\n\tOPTION_MASK_P10_FUSION_2STORE.\n\t(POWERPC_MASKS): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Enable\n\tstore fusion for Power10.\n\t(is_fusable_store): New.\n\t(power10_sched_reorder): Likewise.\n\t(rs6000_sched_reorder): Do Power10 specific reordering.\n\t(rs6000_sched_reorder2): Likewise.\n\t* config/rs6000/rs6000.opt: Add new option.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/fusion-p10-stst.c: New test.\n\t* gcc.target/powerpc/fusion-p10-stst2.c: New test.", "tree": {"sha": "023508d45482e5fc94ac282767e6298578d5c917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023508d45482e5fc94ac282767e6298578d5c917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73c44800b53c7e130da29e4eff1960b8311ffcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73c44800b53c7e130da29e4eff1960b8311ffcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73c44800b53c7e130da29e4eff1960b8311ffcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73c44800b53c7e130da29e4eff1960b8311ffcd/comments", "author": null, "committer": null, "parents": [{"sha": "02dbf5d1273eda7db1ef6164b56879e8dc0530f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02dbf5d1273eda7db1ef6164b56879e8dc0530f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02dbf5d1273eda7db1ef6164b56879e8dc0530f8"}], "stats": {"total": 164, "additions": 163, "deletions": 1}, "files": [{"sha": "f5812da01841ea63f717917fb8fa86db686ed29b", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=d73c44800b53c7e130da29e4eff1960b8311ffcd", "patch": "@@ -90,7 +90,8 @@\n \t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LOGADD \t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_ADDLOG\t\\\n-\t\t\t\t | OPTION_MASK_P10_FUSION_2ADD)\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2ADD\t\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2STORE)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -143,6 +144,7 @@\n \t\t\t\t | OPTION_MASK_P10_FUSION_LOGADD \t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_ADDLOG\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2ADD    \t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2STORE\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\"}, {"sha": "b7ea1483da51ca2755520f54d706a599fb6e79e6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d73c44800b53c7e130da29e4eff1960b8311ffcd", "patch": "@@ -4498,6 +4498,10 @@ rs6000_option_override_internal (bool global_init_p)\n       && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2ADD) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2ADD;\n \n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2STORE) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2STORE;\n+\n   /* Turn off vector pair/mma options on non-power10 systems.  */\n   else if (!TARGET_POWER10 && TARGET_MMA)\n     {\n@@ -18933,6 +18937,89 @@ power9_sched_reorder2 (rtx_insn **ready, int lastpos)\n   return cached_can_issue_more;\n }\n \n+/* Determine if INSN is a store to memory that can be fused with a similar\n+   adjacent store.  */\n+\n+static bool\n+is_fusable_store (rtx_insn *insn, rtx *str_mem)\n+{\n+  /* Insn must be a non-prefixed base+disp form store.  */\n+  if (is_store_insn (insn, str_mem)\n+      && get_attr_prefixed (insn) == PREFIXED_NO\n+      && get_attr_update (insn) == UPDATE_NO\n+      && get_attr_indexed (insn) == INDEXED_NO)\n+    {\n+      /* Further restrictions by mode and size.  */\n+      if (!MEM_SIZE_KNOWN_P (*str_mem))\n+\treturn false;\n+\n+      machine_mode mode = GET_MODE (*str_mem);\n+      HOST_WIDE_INT size = MEM_SIZE (*str_mem);\n+\n+      if (INTEGRAL_MODE_P (mode))\n+\t/* Must be word or dword size.  */\n+\treturn (size == 4 || size == 8);\n+      else if (FLOAT_MODE_P (mode))\n+\t/* Must be dword size.  */\n+\treturn (size == 8);\n+    }\n+\n+  return false;\n+}\n+\n+/* Do Power10 specific reordering of the ready list.  */\n+\n+static int\n+power10_sched_reorder (rtx_insn **ready, int lastpos)\n+{\n+  rtx mem1;\n+\n+  /* Do store fusion during sched2 only.  */\n+  if (!reload_completed)\n+    return cached_can_issue_more;\n+\n+  /* If the prior insn finished off a store fusion pair then simply\n+     reset the counter and return, nothing more to do.  */\n+  if (load_store_pendulum != 0)\n+    {\n+      load_store_pendulum = 0;\n+      return cached_can_issue_more;\n+    }\n+\n+  /* Try to pair certain store insns to adjacent memory locations\n+     so that the hardware will fuse them to a single operation.  */\n+  if (TARGET_P10_FUSION && TARGET_P10_FUSION_2STORE\n+      && is_fusable_store (last_scheduled_insn, &mem1))\n+    {\n+\n+      /* A fusable store was just scheduled.  Scan the ready list for another\n+\t store that it can fuse with.  */\n+      int pos = lastpos;\n+      while (pos >= 0)\n+\t{\n+\t  rtx mem2;\n+\t  /* GPR stores can be ascending or descending offsets, FPR/VSR stores\n+\t     must be ascending only.  */\n+\t  if (is_fusable_store (ready[pos], &mem2)\n+\t      && ((INTEGRAL_MODE_P (GET_MODE (mem1))\n+\t\t   && adjacent_mem_locations (mem1, mem2))\n+\t\t  || (FLOAT_MODE_P (GET_MODE (mem1))\n+\t\t   && (adjacent_mem_locations (mem1, mem2) == mem1))))\n+\t    {\n+\t      /* Found a fusable store.  Move it to the end of the ready list\n+\t\t so it is scheduled next.  */\n+\t      move_to_end_of_ready (ready, pos, lastpos);\n+\n+\t      load_store_pendulum = -1;\n+\t      break;\n+\t    }\n+\t  pos--;\n+\t}\n+    }\n+\n+  return cached_can_issue_more;\n+}\n+\n /* We are about to begin issuing insns for this clock cycle. */\n \n static int\n@@ -18959,6 +19046,10 @@ rs6000_sched_reorder (FILE *dump ATTRIBUTE_UNUSED, int sched_verbose,\n   if (rs6000_tune == PROCESSOR_POWER6)\n     load_store_pendulum = 0;\n \n+  /* Do Power10 dependent reordering.  */\n+  if (rs6000_tune == PROCESSOR_POWER10 && last_scheduled_insn)\n+    power10_sched_reorder (ready, n_ready - 1);\n+\n   return rs6000_issue_rate ();\n }\n \n@@ -18980,6 +19071,10 @@ rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx_insn **ready,\n       && recog_memoized (last_scheduled_insn) >= 0)\n     return power9_sched_reorder2 (ready, *pn_ready - 1);\n \n+  /* Do Power10 dependent reordering.  */\n+  if (rs6000_tune == PROCESSOR_POWER10 && last_scheduled_insn)\n+    return power10_sched_reorder (ready, *pn_ready - 1);\n+\n   return cached_can_issue_more;\n }\n "}, {"sha": "3753de19557c11c348ecd1c9abcbce529c3b5fe3", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=d73c44800b53c7e130da29e4eff1960b8311ffcd", "patch": "@@ -514,6 +514,10 @@ mpower10-fusion-2add\n Target Undocumented Mask(P10_FUSION_2ADD) Var(rs6000_isa_flags)\n Fuse dependent pairs of add or vaddudm instructions for better performance on power10.\n \n+mpower10-fusion-2store\n+Target Undocumented Mask(P10_FUSION_2STORE) Var(rs6000_isa_flags)\n+Fuse certain store operations together for better performance on power10.\n+\n mcrypto\n Target Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions."}, {"sha": "528a7e542ab555ad1534c6f90e7c8a8553a257e2", "filename": "gcc/testsuite/gcc.target/powerpc/fusion-p10-stst.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst.c?ref=d73c44800b53c7e130da29e4eff1960b8311ffcd", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+/* Verify store fusion is enabled */\n+\n+void fuse_stw (int *i, int a, int b, int c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+void fuse_std (long *i, long a, long b, long c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+void fuse_stfd (double *i, double a, double b, double c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+/* { dg-final { scan-assembler-times {stw 4,4\\(3\\)\\n\\tstw 6,8\\(3\\)} 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {stw 4,4\\(3\\)\\n\\tstw 6,8\\(3\\)} 2 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {std 4,8\\(3\\)\\n\\tstd 6,16\\(3\\)} 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {stfd 1,8\\(3\\)\\n\\tstfd 3,16\\(3\\)} 1 } } */\n+"}, {"sha": "62f1a92c2b16cf83c20cd635b2472001fb6fe358", "filename": "gcc/testsuite/gcc.target/powerpc/fusion-p10-stst2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73c44800b53c7e130da29e4eff1960b8311ffcd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-stst2.c?ref=d73c44800b53c7e130da29e4eff1960b8311ffcd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -mno-power10-fusion -O2\" } */\n+\n+/* Verify store fusion is disabled */\n+\n+void fuse_stw (int *i, int a, int b, int c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+void fuse_std (long *i, long a, long b, long c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+void fuse_stfd (double *i, double a, double b, double c)\n+{\n+  i[1] = a;\n+  i[5] = b;\n+  i[2] = c;\n+}\n+\n+\n+/* { dg-final { scan-assembler-not {stw 4,4\\(3\\)\\n\\tstw 6,8\\(3\\)} } } */\n+/* { dg-final { scan-assembler-not {std 4,8\\(3\\)\\n\\tstd 6,16\\(3\\)} { target lp64 } } } */\n+/* { dg-final { scan-assembler-not {stfd 1,8\\(3\\)\\n\\tstfd 3,16\\(3\\)} } } */"}]}