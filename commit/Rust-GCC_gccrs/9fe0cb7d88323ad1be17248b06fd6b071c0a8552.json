{"sha": "9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlMGNiN2Q4ODMyM2FkMWJlMTcyNDhiMDZmZDZiMDcxYzBhODU1Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-15T13:39:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-15T13:39:39Z"}, "message": "tree-pass.h (current_pass): Declare.\n\n2008-05-15  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-pass.h (current_pass): Declare.\n\t(get_pass_for_id): Likewise.\n\t* passes.c (passes_by_id, passes_by_id_size): New globals.\n\t(set_pass_for_id): New function.\n\t(get_pass_for_id): Likewise.\n\t(register_one_dump_file): Use set_pass_for_id to populate passes_by_id.\n\t(execute_function_todo): Flush per function statistics.\n\t* toplev.c (compile_file): Init statistics.\n\t(general_init): Do early statistics initialization.\n\t(finalize): Finish statistics.\n\t* statistics.h (statistics_early_init): Declare.\n\t(statistics_init): Likewise.\n\t(statistics_fini): Likewise.\n\t(statistics_fini_pass): Likewise.\n\t(statistics_counter_event): Likewise.\n\t(statistics_histogram_event): Likewise.\n\t* statistics.c: New file.\n\t* Makefile.in (OBJS-common): Add statistics.o.\n\t(statistics.o): Add dependencies.\n\t* doc/invoke.texi (-fdump-statistics): Document.\n\n\t* tree-ssa-pre.c (compute_antic): Use statistics_histogram_event.\n\t(insert): Likewise.\n\t(execute_pre): Use statistics_counter_event.\n\t* tree-ssa-propagate.c (struct prop_stats_d): Add num_dce field.\n\t(substitute_and_fold): Increment it.  Use statistics_counter_event.\n\n\t* gcc.dg/tree-ssa/loadpre7.c: Adjust scan for not performed\n\ttransformation.\n\t* gcc.dg/tree-ssa/ssa-fre-10.c: Likewise.\n\nFrom-SVN: r135358", "tree": {"sha": "8b2e7b5f17ea3a9b8184b7bac245f575919ed667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2e7b5f17ea3a9b8184b7bac245f575919ed667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77f377f70e6ff7e9854be833624c06c4ac567c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f377f70e6ff7e9854be833624c06c4ac567c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f377f70e6ff7e9854be833624c06c4ac567c8c"}], "stats": {"total": 162, "additions": 129, "deletions": 33}, "files": [{"sha": "cae0c9c58c414b18d2761ff60e5e1d8d77130b74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -1,3 +1,32 @@\n+2008-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-pass.h (current_pass): Declare.\n+\t(get_pass_for_id): Likewise.\n+\t* passes.c (passes_by_id, passes_by_id_size): New globals.\n+\t(set_pass_for_id): New function.\n+\t(get_pass_for_id): Likewise.\n+\t(register_one_dump_file): Use set_pass_for_id to populate passes_by_id.\n+\t(execute_function_todo): Flush per function statistics.\n+\t* toplev.c (compile_file): Init statistics.\n+\t(general_init): Do early statistics initialization.\n+\t(finalize): Finish statistics.\n+\t* statistics.h (statistics_early_init): Declare.\n+\t(statistics_init): Likewise.\n+\t(statistics_fini): Likewise.\n+\t(statistics_fini_pass): Likewise.\n+\t(statistics_counter_event): Likewise.\n+\t(statistics_histogram_event): Likewise.\n+\t* statistics.c: New file.\n+\t* Makefile.in (OBJS-common): Add statistics.o.\n+\t(statistics.o): Add dependencies.\n+\t* doc/invoke.texi (-fdump-statistics): Document.\n+\n+\t* tree-ssa-pre.c (compute_antic): Use statistics_histogram_event.\n+\t(insert): Likewise.\n+\t(execute_pre): Use statistics_counter_event.\n+\t* tree-ssa-propagate.c (struct prop_stats_d): Add num_dce field.\n+\t(substitute_and_fold): Increment it.  Use statistics_counter_event.\n+\n 2008-05-15  Diego Novillo  <dnovillo@google.com>\n \n \thttp://gcc.gnu.org/ml/gcc-patches/2008-05/msg00893.html"}, {"sha": "99d16a21b9b0996aa3a28155be0cd3073ec7468b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -1131,6 +1131,7 @@ OBJS-common = \\\n \tsparseset.o \\\n \tsreal.o \\\n \tstack-ptr-mod.o \\\n+\tstatistics.o \\\n \tstmt.o \\\n \tstor-layout.o \\\n \tstringpool.o \\\n@@ -2396,6 +2397,8 @@ function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n    gt-function.h $(TARGET_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) $(PREDICT_H) \\\n    tree-pass.h $(DF_H) timevar.h vecprim.h\n+statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(FLAGS_H) $(FUNCTION_H) $(HASHTAB_H) $(TREE_DUMP_H) tree-pass.h\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n    libfuncs.h except.h $(RECOG_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\"}, {"sha": "50b5c55ec80b786dc6c4ac37613810ca598461e4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -276,6 +276,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-noaddr -fdump-unnumbered  -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline @gol\n+-fdump-statistics @gol\n -fdump-tree-all @gol\n -fdump-tree-original@r{[}-@var{n}@r{]}  @gol\n -fdump-tree-optimized@r{[}-@var{n}@r{]} @gol\n@@ -4724,6 +4725,15 @@ Dump after function inlining.\n \n @end table\n \n+@item -fdump-statistics-@var{option}\n+@opindex -fdump-statistics\n+Enable and control dumping of pass statistics in a separate file.  The\n+file name is generated by appending a suffix ending in @samp{.statistics}\n+to the source file name.  If the @samp{-@var{option}} form is used,\n+@samp{-stats} will cause counters to be summed over the whole compilation unit\n+while @samp{-details} will dump every event as the passes generate them.\n+The default with no option is to sum counters for each function compiled.\n+\n @item -fdump-tree-@var{switch}\n @itemx -fdump-tree-@var{switch}-@var{options}\n @opindex fdump-tree"}, {"sha": "ede2cd9c5f8808d34646ed1e8efcebaa1e0033de", "filename": "gcc/passes.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -333,6 +333,37 @@ struct rtl_opt_pass pass_postreload =\n /* The root of the compilation pass tree, once constructed.  */\n struct opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n \n+/* A map from static pass id to optimization pass.  */\n+struct opt_pass **passes_by_id;\n+int passes_by_id_size;\n+\n+/* Set the static pass number of pass PASS to ID and record that\n+   in the mapping from static pass number to pass.  */\n+\n+static void\n+set_pass_for_id (int id, struct opt_pass *pass)\n+{\n+  pass->static_pass_number = id;\n+  if (passes_by_id_size <= id)\n+    {\n+      passes_by_id = xrealloc (passes_by_id, (id + 1) * sizeof (void *));\n+      memset (passes_by_id + passes_by_id_size, 0,\n+\t      (id + 1 - passes_by_id_size) * sizeof (void *));\n+      passes_by_id_size = id + 1;\n+    }\n+  passes_by_id[id] = pass;\n+}\n+\n+/* Return the pass with the static pass number ID.  */\n+\n+struct opt_pass *\n+get_pass_for_id (int id)\n+{\n+  if (id >= passes_by_id_size)\n+    return NULL;\n+  return passes_by_id[id];\n+}\n+\n /* Iterate over the pass tree allocating dump file numbers.  We want\n    to do this depth first, and independent of whether the pass is\n    enabled or not.  */\n@@ -343,7 +374,7 @@ register_one_dump_file (struct opt_pass *pass)\n   char *dot_name, *flag_name, *glob_name;\n   const char *prefix;\n   char num[10];\n-  int flags;\n+  int flags, id;\n \n   /* See below in next_pass_1.  */\n   num[0] = '\\0';\n@@ -361,8 +392,8 @@ register_one_dump_file (struct opt_pass *pass)\n \n   flag_name = concat (prefix, pass->name, num, NULL);\n   glob_name = concat (prefix, pass->name, NULL);\n-  pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n-                                            flags);\n+  id = dump_register (dot_name, flag_name, glob_name, flags);\n+  set_pass_for_id (id, pass);\n }\n \n /* Recursive worker function for register_dump_files.  */\n@@ -883,7 +914,9 @@ execute_function_todo (void *data)\n   flags &= ~cfun->last_verified;\n   if (!flags)\n     return;\n-  \n+\n+  statistics_fini_pass ();\n+\n   /* Always cleanup the CFG before trying to update SSA.  */\n   if (flags & TODO_cleanup_cfg)\n     {\n@@ -1346,4 +1379,5 @@ execute_ipa_pass_list (struct opt_pass *pass)\n     }\n   while (pass);\n }\n+\n #include \"gt-passes.h\""}, {"sha": "6e21e8557974261e2751a371470edb13e852b588", "filename": "gcc/statistics.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fstatistics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Fstatistics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.h?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -1,5 +1,5 @@\n-/* Memory statistics helpers.\n-   Copyright (C) 2004, 2007\n+/* Memory and optimization statistics helpers.\n+   Copyright (C) 2004, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -21,6 +21,7 @@\n \n #ifndef GCC_STATISTICS\n #define GCC_STATISTICS\n+\n #ifdef GATHER_STATISTICS\n #define MEM_STAT_DECL , const char * ARG_UNUSED (_loc_name), int ARG_UNUSED (_loc_line), const char * ARG_UNUSED (_loc_function)\n #define ALONE_MEM_STAT_DECL const char * ARG_UNUSED (_loc_name), int ARG_UNUSED (_loc_line), const char * ARG_UNUSED (_loc_function)\n@@ -36,4 +37,15 @@\n #define MEM_STAT_INFO\n #define ALONE_MEM_STAT_INFO\n #endif\n+\n+struct function;\n+\n+/* In statistics.c */\n+extern void statistics_early_init (void);\n+extern void statistics_init (void);\n+extern void statistics_fini (void);\n+extern void statistics_fini_pass (void);\n+extern void statistics_counter_event (struct function *, const char *, int);\n+extern void statistics_histogram_event (struct function *, const char *, int);\n+\n #endif"}, {"sha": "c2af14e25bd245e7fbd955fc8f066e5394df9f5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -1,3 +1,9 @@\n+2008-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/loadpre7.c: Adjust scan for not performed\n+\ttransformation.\n+\t* gcc.dg/tree-ssa/ssa-fre-10.c: Likewise.\n+\n 2008-05-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36244"}, {"sha": "6f68f3ae212b440740e06c2439e7f4598fff6389", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre7.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -13,5 +13,5 @@ enormlz (x)\n       eshup8 (x);\n     }\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 0\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-not \"Eliminated:\" \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "cfbb9c97b163040e1b3e0d2b974ab0310c3d4dfc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -16,5 +16,5 @@ void __frame_state_for (volatile char *state_in, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"Insertions: 0\" \"pre\" } } */\n+/* { dg-final { scan-tree-dump-not \"Insertions:\" \"pre\" } } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "3a2590ade83eba3019c360a8957ed1481e73264b", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -954,6 +954,7 @@ compile_file (void)\n   init_cgraph ();\n   init_final (main_input_filename);\n   coverage_init (aux_base_name);\n+  statistics_init ();\n \n   timevar_push (TV_PARSE);\n \n@@ -1598,6 +1599,7 @@ general_init (const char *argv0)\n   /* This must be done after add_params but before argument processing.  */\n   init_ggc_heuristics();\n   init_optimization_passes ();\n+  statistics_early_init ();\n }\n \n /* Return true if the current target supports -fsection-anchors.  */\n@@ -2118,6 +2120,7 @@ finalize (void)\n \tfatal_error (\"error closing %s: %m\", asm_file_name);\n     }\n \n+  statistics_fini ();\n   finish_optimization_passes ();\n \n   if (mem_report)"}, {"sha": "b1ac95f52c2573ea4bee392c3a3a62fed1a94785", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -508,6 +508,10 @@ extern struct gimple_opt_pass pass_update_address_taken;\n /* The root of the compilation pass tree, once constructed.  */\n extern struct opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n \n+/* Current optimization pass.  */\n+extern struct opt_pass *current_pass;\n+\n+extern struct opt_pass * get_pass_for_id (int);\n extern void execute_pass_list (struct opt_pass *);\n extern void execute_ipa_pass_list (struct opt_pass *);\n extern void print_current_pass (FILE *);"}, {"sha": "4119467964322d4c373cea79330f3a9a238c289b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -2031,9 +2031,8 @@ compute_antic (void)\n       gcc_assert (num_iterations < 50);\n     }\n \n-  if (dump_file && (dump_flags & TDF_STATS))\n-    fprintf (dump_file, \"compute_antic required %d iterations\\n\",\n-\t     num_iterations);\n+  statistics_histogram_event (cfun, \"compute_antic iterations\",\n+\t\t\t      num_iterations);\n \n   if (do_partial_partial)\n     {\n@@ -2061,9 +2060,8 @@ compute_antic (void)\n \t  /* Theoretically possible, but *highly* unlikely.  */\n \t  gcc_assert (num_iterations < 50);\n \t}\n-      if (dump_file && (dump_flags & TDF_STATS))\n-\tfprintf (dump_file, \"compute_partial_antic required %d iterations\\n\",\n-\t\t num_iterations);\n+      statistics_histogram_event (cfun, \"compute_partial_antic iterations\",\n+\t\t\t\t  num_iterations);\n     }\n   sbitmap_free (has_abnormal_preds);\n   sbitmap_free (changed_blocks);\n@@ -2936,8 +2934,7 @@ insert (void)\n       new_stuff = false;\n       new_stuff = insert_aux (ENTRY_BLOCK_PTR);\n     }\n-  if (num_iterations > 2 && dump_file && (dump_flags & TDF_STATS))\n-    fprintf (dump_file, \"insert required %d iterations\\n\", num_iterations);\n+  statistics_histogram_event (cfun, \"insert iterations\", num_iterations);\n }\n \n \n@@ -4019,14 +4016,11 @@ execute_pre (bool do_fre)\n   /* Remove all the redundant expressions.  */\n   todo |= eliminate ();\n \n-  if (dump_file && (dump_flags & TDF_STATS))\n-    {\n-      fprintf (dump_file, \"Insertions: %d\\n\", pre_stats.insertions);\n-      fprintf (dump_file, \"PA inserted: %d\\n\", pre_stats.pa_insert);\n-      fprintf (dump_file, \"New PHIs: %d\\n\", pre_stats.phis);\n-      fprintf (dump_file, \"Eliminated: %d\\n\", pre_stats.eliminations);\n-      fprintf (dump_file, \"Constified: %d\\n\", pre_stats.constified);\n-    }\n+  statistics_counter_event (cfun, \"Insertions\", pre_stats.insertions);\n+  statistics_counter_event (cfun, \"PA inserted\", pre_stats.pa_insert);\n+  statistics_counter_event (cfun, \"New PHIs\", pre_stats.phis);\n+  statistics_counter_event (cfun, \"Eliminated\", pre_stats.eliminations);\n+  statistics_counter_event (cfun, \"Constified\", pre_stats.constified);\n   bsi_commit_edge_inserts ();\n \n   clear_expression_ids ();"}, {"sha": "1b40bf095ed5b425a22a8177bd1a815af613f825", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe0cb7d88323ad1be17248b06fd6b071c0a8552/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=9fe0cb7d88323ad1be17248b06fd6b071c0a8552", "patch": "@@ -890,6 +890,7 @@ struct prop_stats_d\n   long num_const_prop;\n   long num_copy_prop;\n   long num_pred_folded;\n+  long num_dce;\n };\n \n static struct prop_stats_d prop_stats;\n@@ -1255,6 +1256,7 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n \t\t  print_generic_expr (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n+\t      prop_stats.num_dce++;\n \t      bsi_remove (&i, true);\n \t      release_defs (stmt);\n \t      if (!bsi_end_p (i))\n@@ -1341,15 +1343,14 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n \t}\n     }\n \n-  if (dump_file && (dump_flags & TDF_STATS))\n-    {\n-      fprintf (dump_file, \"Constants propagated: %6ld\\n\",\n-\t       prop_stats.num_const_prop);\n-      fprintf (dump_file, \"Copies propagated:    %6ld\\n\",\n-\t       prop_stats.num_copy_prop);\n-      fprintf (dump_file, \"Predicates folded:    %6ld\\n\",\n-\t       prop_stats.num_pred_folded);\n-    }\n+  statistics_counter_event (cfun, \"Constants propagated\",\n+\t\t\t    prop_stats.num_const_prop);\n+  statistics_counter_event (cfun, \"Copies propagated\",\n+\t\t\t    prop_stats.num_copy_prop);\n+  statistics_counter_event (cfun, \"Predicates folded\",\n+\t\t\t    prop_stats.num_pred_folded);\n+  statistics_counter_event (cfun, \"Statements deleted\",\n+\t\t\t    prop_stats.num_dce);\n   return something_changed;\n }\n "}]}