{"sha": "0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiMjlhMDU2YWVhZjhkYWFmZTVlNjFjNWVhYmY3ZWFhNDVmZmUxZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-13T07:30:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-13T07:30:45Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r208530", "tree": {"sha": "74d662238e8a471f44ada20412e0e83349bcf114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d662238e8a471f44ada20412e0e83349bcf114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f/comments", "author": null, "committer": null, "parents": [{"sha": "3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b63b663d72d1ba843d3d1c2f729c9496c236fd5"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "7d3cd4efc93697f6e9312ef4364ed7e12b3c1074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "patch": "@@ -71,13 +71,12 @@\n \t(altivec_resolve_overloaded_builtin): Add support for V1TImode.\n \n \t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Add support\n-\tfor V1TImode, and set up preferences to use VSX/Altivec\n-\tregisters.  Setup VSX reload handlers.\n+\tfor V1TImode, and set up preferences to use VSX/Altivec registers.\n+\tSetup VSX reload handlers.\n \t(rs6000_debug_reg_global): Likewise.\n \t(rs6000_init_hard_regno_mode_ok): Likewise.\n \t(rs6000_preferred_simd_mode): Likewise.\n-\t(vspltis_constant): Do not allow V1TImode as easy altivec\n-\tconstants.\n+\t(vspltis_constant): Do not allow V1TImode as easy altivec constants.\n \t(easy_altivec_constant): Likewise.\n \t(output_vec_const_move): Likewise.\n \t(rs6000_expand_vector_set): Convert V1TImode set and extract to\n@@ -100,8 +99,7 @@\n \tfor the VSX/Altivec vector types.\n \t(altivec_init_builtins): Add support for overloaded vector\n \tfunctions with V1TImode type.\n-\t(rs6000_preferred_reload_class): Prefer Altivec registers for\n-\tV1TImode.\n+\t(rs6000_preferred_reload_class): Prefer Altivec registers for V1TImode.\n \t(rs6000_move_128bit_ok_p): Move 128-bit move/split validation to\n \texternal function.\n \t(rs6000_split_128bit_ok_p): Likewise.\n@@ -118,12 +116,10 @@\n \t(VSv): Likewise.\n \t(VS_scalar): Likewise.\n \t(VS_double): Likewise.\n-\t(vsx_set_v1ti): New builtin function to create V1TImode from\n-\tTImode.\n+\t(vsx_set_v1ti): New builtin function to create V1TImode from TImode.\n \n-\t* config/rs6000/rs6000.h (TARGET_VADDUQM): New macro to say\n-\twhether we support the ISA 2.07 128-bit integer arithmetic\n-\tinstructions.\n+\t* config/rs6000/rs6000.h (TARGET_VADDUQM): New macro to say whether\n+\twe support the ISA 2.07 128-bit integer arithmetic instructions.\n \t(ALTIVEC_OR_VSX_VECTOR_MODE): Add V1TImode.\n \t(enum rs6000_builtin_type_index): Add fields to hold V1TImode\n \tand TImode types for use with the builtin functions.\n@@ -132,8 +128,8 @@\n \t(intTI_type_internal_node): Likewise.\n \t(uintTI_type_internal_node): Likewise.\n \n-\t* config/rs6000/altivec.md (UNSPEC_VADDCUQ): New unspecs for ISA\n-\t2.07 128-bit builtin functions.\n+\t* config/rs6000/altivec.md (UNSPEC_VADDCUQ): New unspecs for ISA 2.07\n+\t128-bit builtin functions.\n \t(UNSPEC_VADDEUQM): Likewise.\n \t(UNSPEC_VADDECUQ): Likewise.\n \t(UNSPEC_VSUBCUQ): Likewise.\n@@ -200,8 +196,8 @@\n 2014-03-12  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/60264\n-\t* config/arm/arm.c (arm_emit_vfp_multi_reg_pop): Emit a\tREG_CFA_DEF_CFA\n-\tnote.\n+\t* config/arm/arm.c (arm_emit_vfp_multi_reg_pop): Emit a\n+\tREG_CFA_DEF_CFA note.\n \t(arm_expand_epilogue_apcs_frame): call arm_add_cfa_adjust_cfa_note.\n \t(arm_unwind_emit): Allow REG_CFA_DEF_CFA.\n \n@@ -243,9 +239,9 @@\n \n 2014-03-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n-\t* config/arc/arc.c (conditionalize_nonjump): New function, broken\n-\tout of:\n-\t(arc_ifcvt) .\n+\t* config/arc/arc.c (conditionalize_nonjump): New function,\n+\tbroken out of ...\n+\t(arc_ifcvt): ... this.\n \t(arc_predicate_delay_insns): Use it.\n \n 2014-03-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n@@ -302,8 +298,7 @@\n \n 2014-03-08  Tobias Burnus  <burnus@net-b.de>\n \n-\t* doc/invoke.texi (-fcilkplus): Update implementation\n-\tstatus.\n+\t* doc/invoke.texi (-fcilkplus): Update implementation status.\n \n 2014-03-08  Paulo Matos  <paulo@matos-sorge.com>\n \t    Richard Biener  <rguenther@suse.de>\n@@ -322,8 +317,8 @@\n \n 2014-03-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* configure.ac (HAVE_AS_IX86_TLSLDMPLT): Improve test for Solaris\n-\t11/x86 ld.\n+\t* configure.ac (HAVE_AS_IX86_TLSLDMPLT): Improve test\n+\tfor Solaris 11/x86 ld.\n \t* configure: Regenerate.\n \n 2014-03-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n@@ -371,20 +366,17 @@\n \tRevert\n \t2014-03-04  Paulo Matos  <paulo@matos-sorge.com>\n \n-        * tree-streamer.c (record_common_node): Assert we don't record\n-        nodes with type double.\n-        (preload_common_node): Skip type double, complex double and\n-        double pointer since it is now frontend dependent due to\n-        fshort-double option.\n+\t* tree-streamer.c (record_common_node): Assert we don't record\n+\tnodes with type double.\n+\t(preload_common_node): Skip type double, complex double and double\n+\tpointer since it is now frontend dependent due to fshort-double option.\n \n 2014-03-06  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.c (PLUGIN_COND): Always enable unless -fno-use-linker-plugin\n \tor -fno-lto is specified and the linker has full plugin support.\n-\t* collect2.c (lto_mode): Default to LTO_MODE_WHOPR if LTO is\n-\tenabled.\n-\t(main): Remove -flto processing, adjust lto_mode using\n-\tuse_plugin late.\n+\t* collect2.c (lto_mode): Default to LTO_MODE_WHOPR if LTO is enabled.\n+\t(main): Remove -flto processing, adjust lto_mode using use_plugin late.\n \t* lto-wrapper.c (merge_and_complain): Merge compile-time\n \toptimization levels.\n \t(run_gcc): And pass it through to the link options.\n@@ -447,11 +439,10 @@\n \n 2014-03-04  Paulo Matos  <paulo@matos-sorge.com>\n \n-        * tree-streamer.c (record_common_node): Assert we don't record\n-        nodes with type double.\n-        (preload_common_node): Skip type double, complex double and\n-        double pointer since it is now frontend dependent due to\n-        fshort-double option.\n+\t* tree-streamer.c (record_common_node): Assert we don't record\n+\tnodes with type double.\n+\t(preload_common_node): Skip type double, complex double and double\n+\tpointer since it is now frontend dependent due to fshort-double option.\n \n 2014-03-04  Richard Biener  <rguenther@suse.de>\n \n@@ -551,8 +542,8 @@\n \n \tRevert:\n \t2013-12-14   Jan Hubicka  <jh@suse.cz>\n-        PR middle-end/58477\n-        * ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers.\n+\tPR middle-end/58477\n+\t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers.\n \n 2014-03-02  Jon Beniston  <jon@beniston.com>\n "}, {"sha": "c190cd47fa1fe59b84a3a8d0f229f41fb7ccfdd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bb29a056aeaf8daafe5e61c5eabf7eaa45ffe1f", "patch": "@@ -13,16 +13,14 @@\n \n 2014-03-12  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n-\t* lib/profopt.exp (profopt-execute): Use $testcase in\n-\tunsupported.\n+\t* lib/profopt.exp (profopt-execute): Use $testcase in unsupported.\n \n 2014-03-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/tree-ssa/ssa-ifcombine-12.c: New test.\n \t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: New test.\n-\t* gcc.dg/tree-ssa/phi-opt-2.c: Pass -mbranch-cost=1 if\n-\tpossible, only test for exactly one if if -mbranch-cost=1\n-\thas been passed.\n+\t* gcc.dg/tree-ssa/phi-opt-2.c: Pass -mbranch-cost=1 if possible,\n+\tonly test for exactly one if if -mbranch-cost=1 has been passed.\n \n 2014-03-12  Christian Bruel  <christian.bruel@st.com>\n \n@@ -299,8 +297,8 @@\n 2014-02-27  Mikael Pettersson  <mikpe@it.uu.se>\n \t    Jeff Law  <law@redhat.com>\n \n-\t PR rtl-optimization/49847\n-\t * g++.dg/pr49847.C: New test.\n+\tPR rtl-optimization/49847\n+\t* g++.dg/pr49847.C: New test.\n \n 2014-02-27  Marek Polacek  <polacek@redhat.com>\n "}]}