{"sha": "38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "node_id": "C_kwDOANBUbNoAKDM4ZWMyM2ZhZmIxNjdkZGZlODQwZDdiYjIyYjNlOTQzZDhhN2QyOWU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-18T12:20:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-18T12:20:00Z"}, "message": "aarch64: Fix overly optimistic LDP/STP matching [PR104005]\n\nIn g:526e1639aa76b0a8496b0dc3a3ff2c450229544e I'd added support\nfor finding more consecutive MEMs.  However, the check was too\neager, in that it matched MEM_REFs with the same base address\neven if that base address was an arbitrary SSA name.  This can\ngive wrong results if a MEM_REF from one loop iteration is\ncompared with a MEM_REF from another (e.g. after rtl unrolling).\n\nIn principle, we could still accept MEM_REFs based on the same\nincoming SSA name, but there seems to be no out-of-the-box API\nfor doing that.  Adding a new one at this stage in GCC 12 doesn't\nfeel like a good risk/reward trade-off.\n\nThis patch therefore restricts the MEM_EXPR comparison to base decls\nonly, excluding all MEM_REFs.  It means we lose all the new STPs in\nthe PR testcase but keep the ones in the original stp_1.c testcase.\n\ngcc/\n\tPR target/104005\n\t* config/aarch64/aarch64.cc (aarch64_check_consecutive_mems):\n\tWhen using MEM_EXPR, require the base to be a decl.\n\ngcc/testsuite/\n\tPR target/104005\n\t* gcc.target/aarch64/pr104005.c: New test.", "tree": {"sha": "1db43c3072f3419ac35534663e172deeb7ecdae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db43c3072f3419ac35534663e172deeb7ecdae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21db05b6f44f8cb6df8da5af276df0c4bb3a6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21db05b6f44f8cb6df8da5af276df0c4bb3a6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21db05b6f44f8cb6df8da5af276df0c4bb3a6c9"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "296145e6008d642b1ef28e8b62272d0258ca0cba", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "patch": "@@ -24747,6 +24747,7 @@ aarch64_check_consecutive_mems (rtx *mem1, rtx *mem2, bool *reversed)\n \t\t\t\t\t\t       &expr_offset2);\n       if (!expr_base1\n \t  || !expr_base2\n+\t  || !DECL_P (expr_base1)\n \t  || !operand_equal_p (expr_base1, expr_base2, OEP_ADDRESS_OF))\n \treturn false;\n "}, {"sha": "09dd81910eba56524fb2b15f9de46c91b9daf51b", "filename": "gcc/testsuite/gcc.target/aarch64/pr104005.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104005.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ec23fafb167ddfe840d7bb22b3e943d8a7d29e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104005.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr104005.c?ref=38ec23fafb167ddfe840d7bb22b3e943d8a7d29e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O2 -funroll-loops\" } */\n+\n+typedef int v2 __attribute__((vector_size(8)));\n+\n+void f(void) {\n+  v2 v[1024];\n+  v2 *ptr = v;\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      ptr[0][0] = 0;\n+      asm volatile (\"\":::\"memory\");\n+      ptr[0][1] = 1;\n+      ptr += 2;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tstp\\t} } } */"}]}