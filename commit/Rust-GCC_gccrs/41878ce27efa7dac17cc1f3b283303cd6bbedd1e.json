{"sha": "41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4NzhjZTI3ZWZhN2RhYzE3Y2MxZjNiMjgzMzAzY2Q2YmJlZGQxZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-16T05:47:01Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-16T05:47:01Z"}, "message": "[multiple changes]\n\n2001-10-15  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n\t* java/util/HashMap.java (HashEntry.clone): Removed.\n\t(HashMap(Map)): Use putAllInternal.\n\t(clone): Likewise.\n\t(putAllInternal): New method. Efficient counterpart to putAll which\n\tdoes not call put().\n\t* java/util/LinkedHashMap.java (rethread): Removed.\n\t(putAllInternal): New method. Clear \"head\" and \"tail\".\n\t(addEntry): New argument \"callRemove\". Don't call removeEldestEntry()\n\tif callRemove == false.\n\n\t* Makefile.am: Add new classes RandomAccess and LinkedHashMap.\n\t* Makefile.in: Rebuilt.\n\n2001-10-15  Eric Blake  <ebb9@email.byu.edu>\n\n\t* java/util/Collection.java: Updated javadoc.\n\t* java/util/Comparator.java: Updated javadoc.\n\t* java/util/Enumeration.java: Updated javadoc.\n\t* java/util/Iterator.java: Updated javadoc.\n\t* java/util/List.java: Updated javadoc.\n\t* java/util/ListIterator.java: Updated javadoc.\n\t* java/util/Map.java: Updated javadoc.\n\t* java/util/RandomAccess.java: New file.\n\t* java/util/Set.java: Updated javadoc.\n\t* java/util/SortedMap.java: Updated javadoc.\n\t* java/util/SortedSet.java: Updated javadoc.\n\nFrom-SVN: r46277", "tree": {"sha": "ae47326b1fbf6a430f495ac6b9f0b6405f37d7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae47326b1fbf6a430f495ac6b9f0b6405f37d7d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/comments", "author": null, "committer": null, "parents": [{"sha": "ffb5e2e21f98abfdb6cb7efdf8ff2e911f09ec64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb5e2e21f98abfdb6cb7efdf8ff2e911f09ec64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb5e2e21f98abfdb6cb7efdf8ff2e911f09ec64"}], "stats": {"total": 3983, "additions": 2222, "deletions": 1761}, "files": [{"sha": "860b81d88e36e959ce31bf9920fd9a73df9b4afc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,3 +1,32 @@\n+2001-10-15  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/util/HashMap.java (HashEntry.clone): Removed.\n+\t(HashMap(Map)): Use putAllInternal.\n+\t(clone): Likewise.\n+\t(putAllInternal): New method. Efficient counterpart to putAll which \n+\tdoes not call put().\t\n+\t* java/util/LinkedHashMap.java (rethread): Removed.\n+\t(putAllInternal): New method. Clear \"head\" and \"tail\".\n+\t(addEntry): New argument \"callRemove\". Don't call removeEldestEntry()\n+\tif callRemove == false. \n+\n+\t* Makefile.am: Add new classes RandomAccess and LinkedHashMap.\n+\t* Makefile.in: Rebuilt.\n+\n+2001-10-15  Eric Blake  <ebb9@email.byu.edu>\n+\n+\t* java/util/Collection.java: Updated javadoc.\n+\t* java/util/Comparator.java: Updated javadoc.\n+\t* java/util/Enumeration.java: Updated javadoc.\n+\t* java/util/Iterator.java: Updated javadoc.\n+\t* java/util/List.java: Updated javadoc.\n+\t* java/util/ListIterator.java: Updated javadoc.\n+\t* java/util/Map.java: Updated javadoc.\n+\t* java/util/RandomAccess.java: New file.\n+\t* java/util/Set.java: Updated javadoc.\n+\t* java/util/SortedMap.java: Updated javadoc.\n+\t* java/util/SortedSet.java: Updated javadoc.\n+\n 2001-10-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/reflect/AccessibleObject.java (checkPermission):\n@@ -190,6 +219,7 @@\n 2001-10-03  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* resolve.cc (_Jv_PrepareClass): Fix typos in vtable layout.\n+\t* gij.cc (version): Use GCJVERSION.\n \n 2001-10-02  Mark Wielaard  <mark@klomp.org>\n "}, {"sha": "fd450870c02c9ce0cb88d55b099ee4a311234a8f", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1089,6 +1089,7 @@ java/util/Hashtable.java \\\n java/util/IdentityHashMap.java \\\n java/util/Iterator.java\t\\\n java/util/LinkedList.java \\\n+java/util/LinkedHashMap.java \\\n java/util/List.java \\\n java/util/ListIterator.java \\\n java/util/ListResourceBundle.java \\\n@@ -1102,6 +1103,7 @@ java/util/Properties.java \\\n java/util/PropertyPermission.java \\\n java/util/PropertyResourceBundle.java \\\n java/util/Random.java \\\n+java/util/RandomAccess.java \\\n java/util/ResourceBundle.java \\\n java/util/Set.java \\\n java/util/SimpleTimeZone.java \\"}, {"sha": "664019e99068f12bad2afd374b06b7f61b527683", "filename": "libjava/Makefile.in", "status": "modified", "additions": 76, "deletions": 1149, "changes": 1225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p1 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -123,38 +123,26 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = $(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = $(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = jar\n+@CANADIAN_FALSE@ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = gcjh\n+@CANADIAN_FALSE@GCJH = $(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -169,63 +157,46 @@ JAVAC = $(GCJ_WITH_FLAGS) -C\n GCC_UNWIND_INCLUDE = @GCC_UNWIND_INCLUDE@\n \n WARNINGS = -W -Wall\n-AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n-\t-fdollars-in-identifiers \\\n-\t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n-\t-DPREFIX=\"\\\"$(prefix)\\\"\"\n+AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \t-fdollars-in-identifiers \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n \n LIBFFIINCS = @LIBFFIINCS@\n \n-INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \\\n-\t$(GCINCS) $(THREADINCS) $(INCLTDL) \\\n-\t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n+INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \t$(GCINCS) $(THREADINCS) $(INCLTDL) \t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n \n \n nat_files = $(nat_source_files:.cc=.lo)\n x_nat_files = $(x_nat_source_files:.cc=.lo)\n c_files = $(c_source_files:.c=.lo)\n-javao_files = $(java_source_files:.java=.lo) \\\n-\t$(built_java_source_files:.java=.lo)\n+javao_files = $(java_source_files:.java=.lo) \t$(built_java_source_files:.java=.lo)\n \n x_javao_files = $(x_java_source_files:.java=.lo)\n \n-libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n-\tresolve.cc defineclass.cc interpret.cc name-finder.cc \\\n-\t$(nat_source_files)\n+libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \tresolve.cc defineclass.cc interpret.cc name-finder.cc \t$(nat_source_files)\n \n-EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n-\t$(c_source_files) $(java_source_files) $(built_java_source_files)\n+EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \t$(c_source_files) $(java_source_files) $(built_java_source_files)\n \n-libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n-\t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n+libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n \n \n-libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n-\t$(THREADOBJS)\n+libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \t$(THREADOBJS)\n \n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n-libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n-\t$(GCLIBS) $(ZLIBS) \\\n-\t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \t$(GCLIBS) $(ZLIBS) \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcj_la_LINK = $(LIBLINK)\n \n libgcjx_la_SOURCES = $(x_nat_source_files)\n EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n-libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n-        -rpath $(toolexeclibdir) \\\n-        -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n+libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@         -rpath $(toolexeclibdir)         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcjx_la_LINK = $(LIBLINK)\n \n@@ -234,10 +205,7 @@ CLEANFILES = tmp-list libgcj.jar\n \n SUFFIXES = .class .java .h\n \n-nat_headers = $(ordinary_java_source_files:.java=.h) \\\n-\t$(built_java_source_files:.java=.h) \\\n-\tjava/io/ObjectOutputStream$$PutField.h \\\n-\tjava/io/ObjectInputStream$$GetField.h\n+nat_headers = $(ordinary_java_source_files:.java=.h) \t$(built_java_source_files:.java=.h) \tjava/io/ObjectOutputStream$$PutField.h \tjava/io/ObjectInputStream$$GetField.h\n \n \n x_nat_headers = $(x_java_source_files:.java=.h)\n@@ -246,22 +214,18 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n jv_convert_SOURCES = \n EXTRA_jv_convert_SOURCES = $(convert_source_files)\n-jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc\n+jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \t-rpath $(toolexeclibdir) -shared-libgcc\n \n jv_convert_LINK = $(GCJLINK)\n-jv_convert_LDADD = $(convert_source_files:.java=.lo) libgcj.la \\\n-\t$(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+jv_convert_LDADD = $(convert_source_files:.java=.lo) libgcj.la \t$(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n \n-jv_convert_DEPENDENCIES = $(convert_source_files:.java=.lo) \\\n-\t$(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n+jv_convert_DEPENDENCIES = $(convert_source_files:.java=.lo) \t$(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n \n gij_SOURCES = gij.cc\n@@ -272,1105 +236,67 @@ gij_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n rmic_SOURCES = \n EXTRA_rmic_SOURCES = $(rmi_java_source_files)\n-rmic_LDFLAGS = --main=gnu.java.rmi.rmic.RMIC \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc\n+rmic_LDFLAGS = --main=gnu.java.rmi.rmic.RMIC \t-rpath $(toolexeclibdir) -shared-libgcc\n \n rmic_LINK = $(GCJLINK)\n rmic_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n rmic_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n rmiregistry_SOURCES = \n EXTRA_rmiregistry_SOURCES = $(rmi_java_source_files)\n-rmiregistry_LDFLAGS = --main=gnu.java.rmi.registry.RegistryImpl \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc\n+rmiregistry_LDFLAGS = --main=gnu.java.rmi.registry.RegistryImpl \t-rpath $(toolexeclibdir) -shared-libgcc\n \n rmiregistry_LINK = $(GCJLINK)\n rmiregistry_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n rmiregistry_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n gen_from_JIS_SOURCES = \n-EXTRA_gen_from_JIS_SOURCES = $(srcdir)/$(CONVERT_DIR)/gen-from-JIS.c \\\n-\t\t$(srcdir)/$(CONVERT_DIR)/make-trie.c \\\n-\t\t$(srcdir)/$(CONVERT_DIR)/JIS0201.h \\\n-\t\t$(srcdir)/$(CONVERT_DIR)/JIS0208.h \\\n-\t\t$(srcdir)/$(CONVERT_DIR)/JIS0212.h\n+EXTRA_gen_from_JIS_SOURCES = $(srcdir)/$(CONVERT_DIR)/gen-from-JIS.c \t\t$(srcdir)/$(CONVERT_DIR)/make-trie.c \t\t$(srcdir)/$(CONVERT_DIR)/JIS0201.h \t\t$(srcdir)/$(CONVERT_DIR)/JIS0208.h \t\t$(srcdir)/$(CONVERT_DIR)/JIS0212.h\n \n gen_from_JIS_LDADD = $(CONVERT_DIR)/gen-from-JIS.o $(CONVERT_DIR)/make-trie.o\n-gen_from_JIS_DEPENDENCIES = $(CONVERT_DIR)/gen-from-JIS.o \\\n-\t\t$(CONVERT_DIR)/make-trie.o\n-\n-\n-convert_source_files = \\\n-gnu/gcj/convert/BytesToUnicode.java \\\n-gnu/gcj/convert/Convert.java \\\n-gnu/gcj/convert/Input_8859_1.java \\\n-gnu/gcj/convert/Input_ASCII.java \\\n-gnu/gcj/convert/Input_EUCJIS.java \\\n-gnu/gcj/convert/Input_JavaSrc.java \\\n-gnu/gcj/convert/Input_SJIS.java \\\n-gnu/gcj/convert/Input_UTF8.java\t\\\n-gnu/gcj/convert/Input_iconv.java \\\n-gnu/gcj/convert/IOConverter.java \\\n-gnu/gcj/convert/Output_8859_1.java \\\n-gnu/gcj/convert/Output_ASCII.java \\\n-gnu/gcj/convert/Output_EUCJIS.java \\\n-gnu/gcj/convert/Output_JavaSrc.java \\\n-gnu/gcj/convert/Output_SJIS.java \\\n-gnu/gcj/convert/Output_UTF8.java \\\n-gnu/gcj/convert/Output_iconv.java \\\n-gnu/gcj/convert/UnicodeToBytes.java\n+gen_from_JIS_DEPENDENCIES = $(CONVERT_DIR)/gen-from-JIS.o \t\t$(CONVERT_DIR)/make-trie.o\n+\n+\n+convert_source_files =  gnu/gcj/convert/BytesToUnicode.java gnu/gcj/convert/Convert.java gnu/gcj/convert/Input_8859_1.java gnu/gcj/convert/Input_ASCII.java gnu/gcj/convert/Input_EUCJIS.java gnu/gcj/convert/Input_JavaSrc.java gnu/gcj/convert/Input_SJIS.java gnu/gcj/convert/Input_UTF8.java\tgnu/gcj/convert/Input_iconv.java gnu/gcj/convert/IOConverter.java gnu/gcj/convert/Output_8859_1.java gnu/gcj/convert/Output_ASCII.java gnu/gcj/convert/Output_EUCJIS.java gnu/gcj/convert/Output_JavaSrc.java gnu/gcj/convert/Output_SJIS.java gnu/gcj/convert/Output_UTF8.java gnu/gcj/convert/Output_iconv.java gnu/gcj/convert/UnicodeToBytes.java\n \n \n special_java_source_files = java/lang/Class.java java/lang/Object.java\n \n-awt_java_source_files = \\\n-gnu/awt/LightweightRedirector.java \\\n-gnu/awt/j2d/AbstractGraphicsState.java \\\n-gnu/awt/j2d/DirectRasterGraphics.java \\\n-gnu/awt/j2d/Graphics2DImpl.java \\\n-gnu/awt/j2d/IntegerGraphicsState.java \\\n-gnu/awt/j2d/MappedRaster.java \\\n-gnu/gcj/awt/BitMaskExtent.java \\\n-gnu/gcj/awt/Buffers.java \\\n-gnu/gcj/awt/ComponentDataBlitOp.java \\\n-gnu/gcj/awt/GLightweightPeer.java \\\n-gnu/java/beans/editors/ColorEditor.java\t\\\n-gnu/java/beans/editors/FontEditor.java \\\n-gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n-gnu/java/beans/editors/NativeByteEditor.java \\\n-gnu/java/beans/editors/NativeDoubleEditor.java \\\n-gnu/java/beans/editors/NativeFloatEditor.java \\\n-gnu/java/beans/editors/NativeIntEditor.java \\\n-gnu/java/beans/editors/NativeLongEditor.java \\\n-gnu/java/beans/editors/NativeShortEditor.java \\\n-gnu/java/beans/editors/StringEditor.java \\\n-gnu/java/beans/info/ComponentBeanInfo.java \\\n-gnu/java/beans/BeanInfoEmbryo.java \\\n-gnu/java/beans/EmptyBeanInfo.java \\\n-gnu/java/beans/ExplicitBeanInfo.java \\\n-gnu/java/beans/IntrospectionIncubator.java \\\n-java/applet/Applet.java \\\n-java/applet/AppletStub.java \\\n-java/applet/AppletContext.java \\\n-java/applet/AudioClip.java \\\n-java/awt/AWTError.java \\\n-java/awt/AWTEvent.java \\\n-java/awt/AWTEventMulticaster.java \\\n-java/awt/AWTException.java \\\n-java/awt/AWTPermission.java \\\n-java/awt/ActiveEvent.java \\\n-java/awt/Adjustable.java \\\n-java/awt/BorderLayout.java \\\n-java/awt/Button.java \\\n-java/awt/Canvas.java \\\n-java/awt/CardLayout.java \\\n-java/awt/Checkbox.java \\\n-java/awt/CheckboxGroup.java \\\n-java/awt/CheckboxMenuItem.java \\\n-java/awt/Choice.java \\\n-java/awt/Color.java \\\n-java/awt/Component.java\t\\\n-java/awt/ComponentOrientation.java \\\n-java/awt/Container.java\t\\\n-java/awt/Cursor.java \\\n-java/awt/Dialog.java \\\n-java/awt/Dimension.java\t\\\n-java/awt/Event.java \\\n-java/awt/EventDispatchThread.java \\\n-java/awt/EventQueue.java \\\n-java/awt/FileDialog.java \\\n-java/awt/FlowLayout.java \\\n-java/awt/Font.java \\\n-java/awt/FontMetrics.java \\\n-java/awt/Frame.java \\\n-java/awt/Graphics.java \\\n-java/awt/Graphics2D.java \\\n-java/awt/GraphicsConfiguration.java \\\n-java/awt/GridBagConstraints.java \\\n-java/awt/GridLayout.java \\\n-java/awt/IllegalComponentStateException.java \\\n-java/awt/Image.java \\\n-java/awt/Insets.java \\\n-java/awt/ItemSelectable.java \\\n-java/awt/Label.java \\\n-java/awt/LayoutManager.java \\\n-java/awt/LayoutManager2.java \\\n-java/awt/List.java \\\n-java/awt/Menu.java \\\n-java/awt/MenuBar.java \\\n-java/awt/MenuComponent.java \\\n-java/awt/MenuContainer.java \\\n-java/awt/MenuItem.java \\\n-java/awt/MenuShortcut.java \\\n-java/awt/Paint.java \\\n-java/awt/PaintContext.java \\\n-java/awt/Panel.java \\\n-java/awt/Point.java \\\n-java/awt/Polygon.java \\\n-java/awt/PopupMenu.java\t\\\n-java/awt/Rectangle.java\t\\\n-java/awt/RenderingHints.java \\\n-java/awt/ScrollPane.java \\\n-java/awt/Scrollbar.java\t\\\n-java/awt/Shape.java \\\n-java/awt/SystemColor.java \\\n-java/awt/TextArea.java \\\n-java/awt/TextComponent.java \\\n-java/awt/TextField.java\t\\\n-java/awt/Toolkit.java \\\n-java/awt/Transparency.java \\\n-java/awt/Window.java \\\n-java/awt/color/ColorSpace.java \\\n-java/awt/color/ICC_ColorSpace.java \\\n-java/awt/color/ICC_Profile.java\t\\\n-java/awt/datatransfer/Clipboard.java \\\n-java/awt/event/AWTEventListener.java \\\n-java/awt/event/ActionEvent.java\t\\\n-java/awt/event/ActionListener.java \\\n-java/awt/event/AdjustmentEvent.java \\\n-java/awt/event/AdjustmentListener.java \\\n-java/awt/event/ComponentAdapter.java \\\n-java/awt/event/ComponentEvent.java \\\n-java/awt/event/ComponentListener.java \\\n-java/awt/event/ContainerAdapter.java \\\n-java/awt/event/ContainerEvent.java \\\n-java/awt/event/ContainerListener.java \\\n-java/awt/event/FocusAdapter.java \\\n-java/awt/event/FocusEvent.java \\\n-java/awt/event/FocusListener.java \\\n-java/awt/event/HierarchyBoundsAdapter.java \\\n-java/awt/event/HierarchyBoundsListener.java \\\n-java/awt/event/HierarchyEvent.java \\\n-java/awt/event/HierarchyListener.java \\\n-java/awt/event/InputEvent.java \\\n-java/awt/event/InputMethodEvent.java \\\n-java/awt/event/InputMethodListener.java\t\\\n-java/awt/event/InvocationEvent.java \\\n-java/awt/event/ItemEvent.java \\\n-java/awt/event/ItemListener.java \\\n-java/awt/event/KeyAdapter.java \\\n-java/awt/event/KeyEvent.java \\\n-java/awt/event/KeyListener.java\t\\\n-java/awt/event/MouseAdapter.java \\\n-java/awt/event/MouseEvent.java \\\n-java/awt/event/MouseListener.java \\\n-java/awt/event/MouseMotionAdapter.java \\\n-java/awt/event/MouseMotionListener.java\t\\\n-java/awt/event/PaintEvent.java \\\n-java/awt/event/TextEvent.java \\\n-java/awt/event/TextListener.java \\\n-java/awt/event/WindowAdapter.java \\\n-java/awt/event/WindowEvent.java\t\\\n-java/awt/event/WindowListener.java \\\n-java/awt/geom/AffineTransform.java \\\n-java/awt/geom/Dimension2D.java \\\n-java/awt/geom/Ellipse2D.java \\\n-java/awt/geom/IllegalPathStateException.java \\\n-java/awt/geom/Line2D.java \\\n-java/awt/geom/NoninvertibleTransformException.java \\\n-java/awt/geom/PathIterator.java\t\\\n-java/awt/geom/Point2D.java \\\n-java/awt/geom/Rectangle2D.java \\\n-java/awt/geom/RectangularShape.java \\\n-java/awt/geom/RoundRectangle2D.java \\\n-java/awt/image/BufferedImage.java \\\n-java/awt/image/ColorModel.java \\\n-java/awt/image/ComponentColorModel.java\t\\\n-java/awt/image/ComponentSampleModel.java \\\n-java/awt/image/DataBuffer.java \\\n-java/awt/image/DataBufferByte.java \\\n-java/awt/image/DataBufferInt.java \\\n-java/awt/image/DataBufferUShort.java \\\n-java/awt/image/DirectColorModel.java \\\n-java/awt/image/ImageConsumer.java \\\n-java/awt/image/ImageObserver.java \\\n-java/awt/image/ImageProducer.java \\\n-java/awt/image/IndexColorModel.java \\\n-java/awt/image/PackedColorModel.java \\\n-java/awt/image/Raster.java \\\n-java/awt/image/RasterOp.java \\\n-java/awt/image/SampleModel.java\t\\\n-java/awt/image/SinglePixelPackedSampleModel.java \\\n-java/awt/image/WritableRaster.java \\\n-java/awt/peer/ButtonPeer.java \\\n-java/awt/peer/CanvasPeer.java \\\n-java/awt/peer/CheckboxMenuItemPeer.java\t\\\n-java/awt/peer/CheckboxPeer.java\t\\\n-java/awt/peer/ChoicePeer.java \\\n-java/awt/peer/ComponentPeer.java \\\n-java/awt/peer/ContainerPeer.java \\\n-java/awt/peer/DialogPeer.java \\\n-java/awt/peer/FileDialogPeer.java \\\n-java/awt/peer/FontPeer.java \\\n-java/awt/peer/FramePeer.java \\\n-java/awt/peer/LabelPeer.java \\\n-java/awt/peer/LightweightPeer.java \\\n-java/awt/peer/ListPeer.java \\\n-java/awt/peer/MenuBarPeer.java \\\n-java/awt/peer/MenuComponentPeer.java \\\n-java/awt/peer/MenuItemPeer.java\t\\\n-java/awt/peer/MenuPeer.java \\\n-java/awt/peer/PanelPeer.java \\\n-java/awt/peer/PopupMenuPeer.java \\\n-java/awt/peer/ScrollPanePeer.java \\\n-java/awt/peer/ScrollbarPeer.java \\\n-java/awt/peer/TextAreaPeer.java\t\\\n-java/awt/peer/TextComponentPeer.java \\\n-java/awt/peer/TextFieldPeer.java \\\n-java/awt/peer/WindowPeer.java \\\n-java/beans/beancontext/BeanContext.java\t\\\n-java/beans/beancontext/BeanContextChild.java \\\n-java/beans/beancontext/BeanContextChildComponentProxy.java \\\n-java/beans/beancontext/BeanContextChildSupport.java \\\n-java/beans/beancontext/BeanContextContainerProxy.java \\\n-java/beans/beancontext/BeanContextEvent.java \\\n-java/beans/beancontext/BeanContextMembershipEvent.java \\\n-java/beans/beancontext/BeanContextMembershipListener.java \\\n-java/beans/beancontext/BeanContextProxy.java \\\n-java/beans/beancontext/BeanContextServiceAvailableEvent.java \\\n-java/beans/beancontext/BeanContextServiceProvider.java \\\n-java/beans/beancontext/BeanContextServiceProviderBeanInfo.java \\\n-java/beans/beancontext/BeanContextServiceRevokedEvent.java \\\n-java/beans/beancontext/BeanContextServiceRevokedListener.java \\\n-java/beans/beancontext/BeanContextServices.java\t\\\n-java/beans/beancontext/BeanContextServicesListener.java\t\\\n-java/beans/AppletInitializer.java \\\n-java/beans/BeanDescriptor.java \\\n-java/beans/BeanInfo.java \\\n-java/beans/Beans.java \\\n-java/beans/Customizer.java \\\n-java/beans/DesignMode.java \\\n-java/beans/EventSetDescriptor.java \\\n-java/beans/FeatureDescriptor.java \\\n-java/beans/IndexedPropertyDescriptor.java \\\n-java/beans/IntrospectionException.java \\\n-java/beans/Introspector.java \\\n-java/beans/MethodDescriptor.java \\\n-java/beans/ParameterDescriptor.java \\\n-java/beans/PropertyChangeEvent.java \\\n-java/beans/PropertyChangeListener.java \\\n-java/beans/PropertyChangeSupport.java \\\n-java/beans/PropertyDescriptor.java \\\n-java/beans/PropertyEditor.java \\\n-java/beans/PropertyEditorManager.java \\\n-java/beans/PropertyEditorSupport.java \\\n-java/beans/PropertyVetoException.java \\\n-java/beans/SimpleBeanInfo.java \\\n-java/beans/VetoableChangeListener.java \\\n-java/beans/VetoableChangeSupport.java \\\n-java/beans/Visibility.java\n-\n-\n-rmi_java_source_files = \\\n-java/rmi/activation/Activatable.java \\\n-java/rmi/activation/ActivateFailedException.java \\\n-java/rmi/activation/ActivationDesc.java\t\\\n-java/rmi/activation/ActivationException.java \\\n-java/rmi/activation/ActivationGroup.java \\\n-java/rmi/activation/ActivationGroupDesc.java \\\n-java/rmi/activation/ActivationGroupID.java \\\n-java/rmi/activation/ActivationID.java \\\n-java/rmi/activation/ActivationInstantiator.java\t\\\n-java/rmi/activation/ActivationMonitor.java \\\n-java/rmi/activation/ActivationSystem.java \\\n-java/rmi/activation/Activator.java \\\n-java/rmi/activation/UnknownGroupException.java \\\n-java/rmi/activation/UnknownObjectException.java\t\\\n-java/rmi/AccessException.java \\\n-java/rmi/AlreadyBoundException.java \\\n-java/rmi/ConnectException.java \\\n-java/rmi/ConnectIOException.java \\\n-java/rmi/MarshalException.java \\\n-java/rmi/MarshalledObject.java \\\n-java/rmi/Naming.java \\\n-java/rmi/NoSuchObjectException.java \\\n-java/rmi/NotBoundException.java\t\\\n-java/rmi/RMISecurityException.java \\\n-java/rmi/RMISecurityManager.java \\\n-java/rmi/Remote.java \\\n-java/rmi/RemoteException.java \\\n-java/rmi/ServerError.java \\\n-java/rmi/ServerException.java \\\n-java/rmi/ServerRuntimeException.java \\\n-java/rmi/StubNotFoundException.java \\\n-java/rmi/UnexpectedException.java \\\n-java/rmi/UnknownHostException.java \\\n-java/rmi/UnmarshalException.java \\\n-java/rmi/dgc/DGC.java \\\n-java/rmi/dgc/Lease.java\t\\\n-java/rmi/dgc/VMID.java \\\n-java/rmi/registry/LocateRegistry.java \\\n-java/rmi/registry/Registry.java\t\\\n-java/rmi/registry/RegistryHandler.java \\\n-java/rmi/server/ExportException.java \\\n-java/rmi/server/LoaderHandler.java \\\n-java/rmi/server/LogStream.java \\\n-java/rmi/server/ObjID.java \\\n-java/rmi/server/Operation.java \\\n-java/rmi/server/RMIClassLoader.java \\\n-java/rmi/server/RMIClientSocketFactory.java \\\n-java/rmi/server/RMIFailureHandler.java \\\n-java/rmi/server/RMIServerSocketFactory.java \\\n-java/rmi/server/RMISocketFactory.java \\\n-java/rmi/server/RemoteCall.java\t\\\n-java/rmi/server/RemoteObject.java \\\n-java/rmi/server/RemoteRef.java \\\n-java/rmi/server/RemoteServer.java \\\n-java/rmi/server/RemoteStub.java\t\\\n-java/rmi/server/ServerCloneException.java \\\n-java/rmi/server/ServerNotActiveException.java \\\n-java/rmi/server/ServerRef.java \\\n-java/rmi/server/Skeleton.java \\\n-java/rmi/server/SkeletonMismatchException.java \\\n-java/rmi/server/SkeletonNotFoundException.java \\\n-java/rmi/server/SocketSecurityException.java \\\n-java/rmi/server/UID.java \\\n-java/rmi/server/UnicastRemoteObject.java \\\n-java/rmi/server/Unreferenced.java \\\n-gnu/java/rmi/dgc/DGCImpl.java \\\n-gnu/java/rmi/dgc/DGCImpl_Skel.java \\\n-gnu/java/rmi/dgc/DGCImpl_Stub.java \\\n-gnu/java/rmi/registry/RegistryImpl.java\t\\\n-gnu/java/rmi/registry/RegistryImpl_Skel.java \\\n-gnu/java/rmi/registry/RegistryImpl_Stub.java \\\n-gnu/java/rmi/rmic/Compile_gcj.java \\\n-gnu/java/rmi/rmic/Compiler.java\t\\\n-gnu/java/rmi/rmic/CompilerProcess.java \\\n-gnu/java/rmi/rmic/RMIC.java \\\n-gnu/java/rmi/rmic/TabbedWriter.java \\\n-gnu/java/rmi/server/ProtocolConstants.java \\\n-gnu/java/rmi/server/RMIDefaultSocketFactory.java \\\n-gnu/java/rmi/server/RMIHashes.java \\\n-gnu/java/rmi/server/RMIObjectInputStream.java \\\n-gnu/java/rmi/server/RMIObjectOutputStream.java \\\n-gnu/java/rmi/server/UnicastConnection.java \\\n-gnu/java/rmi/server/UnicastConnectionManager.java \\\n-gnu/java/rmi/server/UnicastRef.java \\\n-gnu/java/rmi/server/UnicastRemoteCall.java \\\n-gnu/java/rmi/server/UnicastRemoteStub.java \\\n-gnu/java/rmi/server/UnicastServer.java \\\n-gnu/java/rmi/server/UnicastServerRef.java\n-\n-\n-built_java_source_files = java/lang/ConcreteProcess.java \\\n-                          gnu/classpath/Configuration.java\n-\n-\n-core_java_source_files = \\\n-java/lang/AbstractMethodError.java \\\n-java/lang/ArithmeticException.java \\\n-java/lang/ArrayIndexOutOfBoundsException.java \\\n-java/lang/ArrayStoreException.java \\\n-java/lang/Boolean.java \\\n-java/lang/Byte.java \\\n-java/lang/Character.java \\\n-java/lang/CharSequence.java \\\n-java/lang/ClassCastException.java \\\n-java/lang/ClassCircularityError.java \\\n-java/lang/ClassFormatError.java\t\\\n-java/lang/ClassLoader.java \\\n-java/lang/ClassNotFoundException.java \\\n-java/lang/CloneNotSupportedException.java \\\n-java/lang/Cloneable.java \\\n-java/lang/Comparable.java \\\n-java/lang/Compiler.java\t\\\n-java/lang/Double.java \\\n-java/lang/Error.java \\\n-java/lang/Exception.java \\\n-java/lang/ExceptionInInitializerError.java \\\n-java/lang/Float.java \\\n-java/lang/IllegalAccessError.java \\\n-java/lang/IllegalAccessException.java \\\n-java/lang/IllegalArgumentException.java\t\\\n-java/lang/IllegalMonitorStateException.java \\\n-java/lang/IllegalStateException.java \\\n-java/lang/IllegalThreadStateException.java \\\n-java/lang/IncompatibleClassChangeError.java \\\n-java/lang/IndexOutOfBoundsException.java \\\n-java/lang/InheritableThreadLocal.java \\\n-java/lang/InstantiationError.java \\\n-java/lang/InstantiationException.java \\\n-java/lang/Integer.java \\\n-java/lang/InternalError.java \\\n-java/lang/InterruptedException.java \\\n-java/lang/LinkageError.java \\\n-java/lang/Long.java \\\n-java/lang/Math.java \\\n-java/lang/NegativeArraySizeException.java \\\n-java/lang/NoClassDefFoundError.java \\\n-java/lang/NoSuchFieldError.java\t\\\n-java/lang/NoSuchFieldException.java \\\n-java/lang/NoSuchMethodError.java \\\n-java/lang/NoSuchMethodException.java \\\n-java/lang/NullPointerException.java \\\n-java/lang/Number.java \\\n-java/lang/NumberFormatException.java \\\n-java/lang/OutOfMemoryError.java\t\\\n-java/lang/Package.java \\\n-java/lang/Process.java \\\n-java/lang/Runnable.java\t\\\n-java/lang/Runtime.java \\\n-java/lang/RuntimeException.java\t\\\n-java/lang/RuntimePermission.java \\\n-java/lang/SecurityException.java \\\n-java/lang/SecurityManager.java \\\n-java/lang/Short.java \\\n-java/lang/StackOverflowError.java \\\n-java/lang/String.java \\\n-java/lang/StringBuffer.java \\\n-java/lang/StringIndexOutOfBoundsException.java \\\n-java/lang/System.java \\\n-java/lang/Thread.java \\\n-java/lang/ThreadDeath.java \\\n-java/lang/ThreadGroup.java \\\n-java/lang/ThreadLocal.java \\\n-java/lang/Throwable.java \\\n-java/lang/UnknownError.java \\\n-java/lang/UnsatisfiedLinkError.java \\\n-java/lang/UnsupportedClassVersionError.java \\\n-java/lang/UnsupportedOperationException.java \\\n-java/lang/VerifyError.java \\\n-java/lang/VirtualMachineError.java \\\n-java/lang/VMClassLoader.java \\\n-java/lang/VMSecurityManager.java \\\n-java/lang/Void.java \\\n-java/io/BufferedInputStream.java \\\n-java/io/BufferedOutputStream.java \\\n-java/io/BufferedReader.java \\\n-java/io/BufferedWriter.java \\\n-java/io/ByteArrayInputStream.java \\\n-java/io/ByteArrayOutputStream.java \\\n-java/io/CharArrayReader.java \\\n-java/io/CharArrayWriter.java \\\n-java/io/CharConversionException.java \\\n-java/io/DataInput.java \\\n-java/io/DataInputStream.java \\\n-java/io/DataOutput.java\t\\\n-java/io/DataOutputStream.java \\\n-java/io/EOFException.java \\\n-java/io/Externalizable.java \\\n-java/io/File.java \\\n-java/io/FileDescriptor.java \\\n-java/io/FileFilter.java \\\n-java/io/FileInputStream.java \\\n-java/io/FileNotFoundException.java \\\n-java/io/FileOutputStream.java \\\n-java/io/FilePermission.java \\\n-java/io/FileReader.java\t\\\n-java/io/FileWriter.java\t\\\n-java/io/FilenameFilter.java \\\n-java/io/FilterInputStream.java \\\n-java/io/FilterOutputStream.java\t\\\n-java/io/FilterReader.java \\\n-java/io/FilterWriter.java \\\n-java/io/IOException.java \\\n-java/io/InputStream.java \\\n-java/io/InputStreamReader.java \\\n-java/io/InterruptedIOException.java \\\n-java/io/InvalidClassException.java \\\n-java/io/InvalidObjectException.java \\\n-java/io/LineNumberInputStream.java \\\n-java/io/LineNumberReader.java \\\n-java/io/NotActiveException.java\t\\\n-java/io/NotSerializableException.java \\\n-java/io/ObjectInput.java \\\n-java/io/ObjectInputStream.java \\\n-java/io/ObjectInputValidation.java \\\n-java/io/ObjectOutput.java \\\n-java/io/ObjectOutputStream.java\t\\\n-java/io/ObjectStreamClass.java \\\n-java/io/ObjectStreamConstants.java \\\n-java/io/ObjectStreamException.java \\\n-java/io/ObjectStreamField.java \\\n-java/io/OptionalDataException.java \\\n-java/io/OutputStream.java \\\n-java/io/OutputStreamWriter.java\t\\\n-java/io/PipedInputStream.java \\\n-java/io/PipedOutputStream.java \\\n-java/io/PipedReader.java \\\n-java/io/PipedWriter.java \\\n-java/io/PrintStream.java \\\n-java/io/PrintWriter.java \\\n-java/io/PushbackInputStream.java \\\n-java/io/PushbackReader.java \\\n-java/io/RandomAccessFile.java \\\n-java/io/Reader.java \\\n-java/io/SequenceInputStream.java \\\n-java/io/Serializable.java \\\n-java/io/SerializablePermission.java \\\n-java/io/StreamCorruptedException.java \\\n-java/io/StreamTokenizer.java \\\n-java/io/StringBufferInputStream.java \\\n-java/io/StringReader.java \\\n-java/io/StringWriter.java \\\n-java/io/SyncFailedException.java \\\n-java/io/UTFDataFormatException.java \\\n-java/io/UnsupportedEncodingException.java \\\n-java/io/WriteAbortedException.java \\\n-java/io/Writer.java \\\n-java/util/AbstractCollection.java \\\n-java/util/AbstractList.java \\\n-java/util/AbstractMap.java \\\n-java/util/AbstractSequentialList.java \\\n-java/util/AbstractSet.java \\\n-java/util/ArrayList.java \\\n-java/util/Arrays.java \\\n-java/util/BasicMapEntry.java \\\n-java/util/BitSet.java \\\n-java/util/Calendar.java\t\\\n-java/util/Collection.java \\\n-java/util/Collections.java \\\n-java/util/Comparator.java \\\n-java/util/ConcurrentModificationException.java \\\n-java/util/Date.java \\\n-java/util/Dictionary.java \\\n-java/util/EmptyStackException.java \\\n-java/util/Enumeration.java \\\n-java/util/EventListener.java \\\n-java/util/EventObject.java \\\n-java/util/GregorianCalendar.java \\\n-java/util/HashMap.java \\\n-java/util/HashSet.java \\\n-java/util/Hashtable.java \\\n-java/util/IdentityHashMap.java \\\n-java/util/Iterator.java\t\\\n-java/util/LinkedList.java \\\n-java/util/List.java \\\n-java/util/ListIterator.java \\\n-java/util/ListResourceBundle.java \\\n-java/util/Locale.java \\\n-java/util/Map.java \\\n-java/util/MissingResourceException.java\t\\\n-java/util/NoSuchElementException.java \\\n-java/util/Observable.java \\\n-java/util/Observer.java\t\\\n-java/util/Properties.java \\\n-java/util/PropertyPermission.java \\\n-java/util/PropertyResourceBundle.java \\\n-java/util/Random.java \\\n-java/util/ResourceBundle.java \\\n-java/util/Set.java \\\n-java/util/SimpleTimeZone.java \\\n-java/util/SortedMap.java \\\n-java/util/SortedSet.java \\\n-java/util/Stack.java \\\n-java/util/StringTokenizer.java \\\n-java/util/TimeZone.java\t\\\n-java/util/Timer.java \\\n-java/util/TimerTask.java \\\n-java/util/TreeMap.java \\\n-java/util/TreeSet.java \\\n-java/util/TooManyListenersException.java \\\n-java/util/Vector.java \\\n-java/util/WeakHashMap.java\n-\n-\n-ordinary_java_source_files = $(core_java_source_files) \\\n-gnu/gcj/Core.java \\\n-gnu/gcj/RawData.java \\\n-gnu/gcj/io/DefaultMimeTypes.java \\\n-gnu/gcj/io/MimeTypes.java \\\n-gnu/gcj/io/SimpleSHSStream.java\t\\\n-gnu/gcj/math/MPN.java \\\n-gnu/gcj/protocol/core/Connection.java \\\n-gnu/gcj/protocol/core/Handler.java \\\n-gnu/gcj/protocol/core/CoreInputStream.java \\\n-gnu/gcj/protocol/file/Connection.java \\\n-gnu/gcj/protocol/file/Handler.java \\\n-gnu/gcj/protocol/http/Connection.java \\\n-gnu/gcj/protocol/http/Handler.java \\\n-gnu/gcj/protocol/jar/Connection.java \\\n-gnu/gcj/protocol/jar/Handler.java \\\n-gnu/gcj/runtime/FileDeleter.java \\\n-gnu/gcj/runtime/FinalizerThread.java \\\n-gnu/gcj/runtime/FirstThread.java \\\n-gnu/gcj/runtime/SharedLibLoader.java \\\n-gnu/gcj/runtime/VMClassLoader.java \\\n-gnu/java/io/ClassLoaderObjectInputStream.java \\\n-gnu/java/io/NullOutputStream.java \\\n-gnu/java/io/ObjectIdentityWrapper.java \\\n-gnu/java/lang/ArrayHelper.java \\\n-gnu/java/lang/ClassHelper.java \\\n-gnu/java/lang/reflect/TypeSignature.java \\\n-gnu/java/locale/Calendar.java \\\n-gnu/java/locale/Calendar_de.java \\\n-gnu/java/locale/Calendar_en.java \\\n-gnu/java/locale/Calendar_nl.java \\\n-gnu/java/locale/LocaleInformation.java \\\n-gnu/java/locale/LocaleInformation_de.java \\\n-gnu/java/locale/LocaleInformation_en.java \\\n-gnu/java/locale/LocaleInformation_en_US.java \\\n-gnu/java/locale/LocaleInformation_nl.java \\\n-gnu/java/security/provider/DefaultPolicy.java \\\n-gnu/java/security/provider/Gnu.java \\\n-gnu/java/security/provider/SHA.java \\\n-gnu/java/security/provider/SHA1PRNG.java \\\n-gnu/java/text/BaseBreakIterator.java \\\n-gnu/java/text/CharacterBreakIterator.java \\\n-gnu/java/text/LineBreakIterator.java \\\n-gnu/java/text/SentenceBreakIterator.java\t\\\n-gnu/java/text/WordBreakIterator.java \\\n-gnu/java/util/DoubleEnumeration.java \\\n-java/lang/ref/PhantomReference.java \\\n-java/lang/ref/Reference.java \\\n-java/lang/ref/ReferenceQueue.java \\\n-java/lang/ref/SoftReference.java \\\n-java/lang/ref/WeakReference.java \\\n-java/lang/reflect/AccessibleObject.java\t\\\n-java/lang/reflect/Array.java \\\n-java/lang/reflect/Constructor.java \\\n-java/lang/reflect/Field.java \\\n-java/lang/reflect/InvocationTargetException.java \\\n-java/lang/reflect/Member.java \\\n-java/lang/reflect/Method.java \\\n-java/lang/reflect/Modifier.java\t\\\n-java/lang/reflect/ReflectPermission.java \\\n-java/math/BigDecimal.java \\\n-java/math/BigInteger.java \\\n-java/net/Authenticator.java \\\n-java/net/BindException.java \\\n-java/net/ConnectException.java \\\n-java/net/ContentHandler.java \\\n-java/net/ContentHandlerFactory.java \\\n-java/net/DatagramPacket.java \\\n-java/net/DatagramSocket.java \\\n-java/net/DatagramSocketImpl.java \\\n-java/net/FileNameMap.java \\\n-java/net/HttpURLConnection.java\t\\\n-java/net/InetAddress.java \\\n-java/net/JarURLConnection.java \\\n-java/net/MalformedURLException.java \\\n-java/net/MulticastSocket.java \\\n-java/net/NetPermission.java \\\n-java/net/NoRouteToHostException.java \\\n-java/net/PasswordAuthentication.java \\\n-java/net/PlainDatagramSocketImpl.java \\\n-java/net/PlainSocketImpl.java \\\n-java/net/ProtocolException.java\t\\\n-java/net/ServerSocket.java \\\n-java/net/Socket.java \\\n-java/net/SocketException.java \\\n-java/net/SocketImpl.java \\\n-java/net/SocketImplFactory.java\t\\\n-java/net/SocketOptions.java \\\n-java/net/SocketPermission.java \\\n-java/net/URL.java \\\n-java/net/URLClassLoader.java \\\n-java/net/URLConnection.java \\\n-java/net/URLDecoder.java \\\n-java/net/URLEncoder.java \\\n-java/net/URLStreamHandler.java \\\n-java/net/URLStreamHandlerFactory.java \\\n-java/net/UnknownHostException.java \\\n-java/net/UnknownServiceException.java \\\n-java/security/AccessControlContext.java \\\n-java/security/AccessControlException.java \\\n-java/security/AccessController.java \\\n-java/security/AlgorithmParameterGenerator.java \\\n-java/security/AlgorithmParameters.java \\\n-java/security/AlgorithmParameterGeneratorSpi.java \\\n-java/security/AlgorithmParametersSpi.java \\\n-java/security/AllPermission.java \\\n-java/security/BasicPermission.java \\\n-java/security/Certificate.java \\\n-java/security/CodeSource.java \\\n-java/security/DigestException.java \\\n-java/security/DigestOutputStream.java \\\n-java/security/DummyKeyPairGenerator.java \\\n-java/security/DummySignature.java \\\n-java/security/DigestInputStream.java \\\n-java/security/DomainCombiner.java \\\n-java/security/DummyMessageDigest.java \\\n-java/security/GeneralSecurityException.java \\\n-java/security/Guard.java \\\n-java/security/GuardedObject.java \\\n-java/security/Identity.java \\\n-java/security/IdentityScope.java \\\n-java/security/InvalidAlgorithmParameterException.java \\\n-java/security/InvalidKeyException.java \\\n-java/security/InvalidParameterException.java \\\n-java/security/Key.java \\\n-java/security/KeyFactorySpi.java \\\n-java/security/KeyPairGenerator.java \\\n-java/security/KeyStoreException.java \\\n-java/security/KeyException.java \\\n-java/security/KeyManagementException.java \\\n-java/security/KeyPairGeneratorSpi.java \\\n-java/security/KeyStoreSpi.java \\\n-java/security/KeyFactory.java \\\n-java/security/KeyPair.java \\\n-java/security/KeyStore.java \\\n-java/security/MessageDigest.java \\\n-java/security/MessageDigestSpi.java \\\n-java/security/NoSuchAlgorithmException.java \\\n-java/security/NoSuchProviderException.java \\\n-java/security/Permission.java \\\n-java/security/Principal.java \\\n-java/security/PrivilegedExceptionAction.java \\\n-java/security/PublicKey.java \\\n-java/security/PermissionCollection.java \\\n-java/security/PrivateKey.java \\\n-java/security/ProtectionDomain.java \\\n-java/security/Permissions.java \\\n-java/security/PrivilegedAction.java \\\n-java/security/Provider.java \\\n-java/security/Policy.java \\\n-java/security/PrivilegedActionException.java \\\n-java/security/ProviderException.java \\\n-java/security/SecureClassLoader.java \\\n-java/security/SecureRandomSpi.java \\\n-java/security/SecurityPermission.java \\\n-java/security/SignatureException.java \\\n-java/security/SignedObject.java \\\n-java/security/SecureRandom.java \\\n-java/security/Security.java \\\n-java/security/Signature.java \\\n-java/security/SignatureSpi.java \\\n-java/security/Signer.java \\\n-java/security/UnrecoverableKeyException.java \\\n-java/security/UnresolvedPermission.java \\\n-java/security/acl/Acl.java \\\n-java/security/acl/AclNotFoundException.java \\\n-java/security/acl/LastOwnerException.java \\\n-java/security/acl/Owner.java \\\n-java/security/acl/AclEntry.java \\\n-java/security/acl/Group.java \\\n-java/security/acl/NotOwnerException.java \\\n-java/security/acl/Permission.java \\\n-java/security/cert/CRL.java \\\n-java/security/cert/CRLException.java \\\n-java/security/cert/Certificate.java \\\n-java/security/cert/CertificateEncodingException.java \\\n-java/security/cert/CertificateException.java \\\n-java/security/cert/CertificateExpiredException.java \\\n-java/security/cert/CertificateFactory.java \\\n-java/security/cert/CertificateFactorySpi.java \\\n-java/security/cert/CertificateNotYetValidException.java \\\n-java/security/cert/CertificateParsingException.java \\\n-java/security/cert/X509CRL.java \\\n-java/security/cert/X509CRLEntry.java \\\n-java/security/cert/X509Certificate.java \\\n-java/security/cert/X509Extension.java \\\n-java/security/interfaces/DSAKey.java \\\n-java/security/interfaces/DSAKeyPairGenerator.java \\\n-java/security/interfaces/DSAParams.java \\\n-java/security/interfaces/DSAPrivateKey.java \\\n-java/security/interfaces/DSAPublicKey.java \\\n-java/security/interfaces/RSAKey.java \\\n-java/security/interfaces/RSAPrivateCrtKey.java \\\n-java/security/interfaces/RSAPrivateKey.java \\\n-java/security/interfaces/RSAPublicKey.java \\\n-java/security/spec/AlgorithmParameterSpec.java \\\n-java/security/spec/DSAParameterSpec.java \\\n-java/security/spec/DSAPrivateKeySpec.java \\\n-java/security/spec/DSAPublicKeySpec.java \\\n-java/security/spec/EncodedKeySpec.java \\\n-java/security/spec/InvalidKeySpecException.java \\\n-java/security/spec/InvalidParameterSpecException.java \\\n-java/security/spec/KeySpec.java \\\n-java/security/spec/PKCS8EncodedKeySpec.java \\\n-java/security/spec/RSAKeyGenParameterSpec.java \\\n-java/security/spec/RSAPrivateCrtKeySpec.java \\\n-java/security/spec/RSAPrivateKeySpec.java \\\n-java/security/spec/RSAPublicKeySpec.java \\\n-java/security/spec/X509EncodedKeySpec.java \\\n-java/sql/Array.java \\\n-java/sql/BatchUpdateException.java \\\n-java/sql/Blob.java \\\n-java/sql/CallableStatement.java\t\\\n-java/sql/Clob.java \\\n-java/sql/Connection.java \\\n-java/sql/DataTruncation.java \\\n-java/sql/DatabaseMetaData.java \\\n-java/sql/Date.java \\\n-java/sql/Driver.java \\\n-java/sql/DriverManager.java \\\n-java/sql/DriverPropertyInfo.java \\\n-java/sql/PreparedStatement.java\t\\\n-java/sql/Ref.java \\\n-java/sql/ResultSet.java\t\\\n-java/sql/ResultSetMetaData.java\t\\\n-java/sql/SQLData.java \\\n-java/sql/SQLException.java \\\n-java/sql/SQLInput.java \\\n-java/sql/SQLOutput.java \\\n-java/sql/SQLWarning.java \\\n-java/sql/Statement.java\t\\\n-java/sql/Struct.java\t\\\n-java/sql/Time.java \\\n-java/sql/Timestamp.java\t\\\n-java/sql/Types.java \\\n-java/text/Annotation.java \\\n-java/text/AttributedCharacterIterator.java \\\n-java/text/AttributedString.java\t\\\n-java/text/AttributedStringIterator.java\t\\\n-java/text/BreakIterator.java \\\n-java/text/CharacterIterator.java \\\n-java/text/ChoiceFormat.java \\\n-java/text/CollationElementIterator.java\t\\\n-java/text/CollationKey.java \\\n-java/text/Collator.java\t\\\n-java/text/DateFormat.java \\\n-java/text/DateFormatSymbols.java \\\n-java/text/DecimalFormat.java \\\n-java/text/DecimalFormatSymbols.java \\\n-java/text/FieldPosition.java \\\n-java/text/Format.java \\\n-java/text/MessageFormat.java \\\n-java/text/NumberFormat.java \\\n-java/text/ParseException.java \\\n-java/text/ParsePosition.java \\\n-java/text/RuleBasedCollator.java \\\n-java/text/SimpleDateFormat.java\t\\\n-java/text/StringCharacterIterator.java \\\n-java/util/jar/Attributes.java \\\n-java/util/jar/JarEntry.java \\\n-java/util/jar/JarException.java \\\n-java/util/jar/JarFile.java \\\n-java/util/jar/JarInputStream.java \\\n-java/util/jar/JarOutputStream.java \\\n-java/util/jar/Manifest.java \\\n-java/util/zip/Adler32.java \\\n-java/util/zip/CRC32.java \\\n-java/util/zip/CheckedInputStream.java \\\n-java/util/zip/CheckedOutputStream.java \\\n-java/util/zip/Checksum.java \\\n-java/util/zip/DataFormatException.java \\\n-java/util/zip/Deflater.java \\\n-java/util/zip/DeflaterOutputStream.java\t\\\n-java/util/zip/GZIPInputStream.java \\\n-java/util/zip/GZIPOutputStream.java \\\n-java/util/zip/Inflater.java \\\n-java/util/zip/InflaterInputStream.java \\\n-java/util/zip/ZipConstants.java\t\\\n-java/util/zip/ZipEntry.java \\\n-java/util/zip/ZipException.java\t\\\n-java/util/zip/ZipFile.java \\\n-java/util/zip/ZipInputStream.java \\\n-java/util/zip/ZipOutputStream.java \\\n-org/w3c/dom/Attr.java \\\n-org/w3c/dom/CDATASection.java \\\n-org/w3c/dom/CharacterData.java \\\n-org/w3c/dom/Comment.java \\\n-org/w3c/dom/DOMException.java \\\n-org/w3c/dom/DOMImplementation.java \\\n-org/w3c/dom/Document.java \\\n-org/w3c/dom/DocumentFragment.java \\\n-org/w3c/dom/DocumentType.java \\\n-org/w3c/dom/Element.java \\\n-org/w3c/dom/Entity.java \\\n-org/w3c/dom/EntityReference.java \\\n-org/w3c/dom/NamedNodeMap.java \\\n-org/w3c/dom/Node.java \\\n-org/w3c/dom/NodeList.java \\\n-org/w3c/dom/Notation.java \\\n-org/w3c/dom/ProcessingInstruction.java \\\n-org/w3c/dom/Text.java \\\n-org/w3c/dom/ranges/DocumentRange.java \\\n-org/w3c/dom/ranges/Range.java \\\n-org/w3c/dom/ranges/RangeException.java \\\n-org/w3c/dom/traversal/DocumentTraversal.java \\\n-org/w3c/dom/traversal/NodeFilter.java \\\n-org/w3c/dom/traversal/NodeIterator.java \\\n-org/w3c/dom/traversal/TreeWalker.java \\\n-org/xml/sax/ext/DeclHandler.java \\\n-org/xml/sax/ext/LexicalHandler.java \\\n-org/xml/sax/helpers/AttributeListImpl.java \\\n-org/xml/sax/helpers/AttributesImpl.java \\\n-org/xml/sax/helpers/DefaultHandler.java \\\n-org/xml/sax/helpers/LocatorImpl.java \\\n-org/xml/sax/helpers/NamespaceSupport.java \\\n-org/xml/sax/helpers/ParserAdapter.java \\\n-org/xml/sax/helpers/ParserFactory.java \\\n-org/xml/sax/helpers/XMLFilterImpl.java \\\n-org/xml/sax/helpers/XMLReaderAdapter.java \\\n-org/xml/sax/helpers/XMLReaderFactory.java \\\n-org/xml/sax/AttributeList.java \\\n-org/xml/sax/Attributes.java \\\n-org/xml/sax/ContentHandler.java \\\n-org/xml/sax/DTDHandler.java \\\n-org/xml/sax/DocumentHandler.java \\\n-org/xml/sax/EntityResolver.java \\\n-org/xml/sax/ErrorHandler.java \\\n-org/xml/sax/HandlerBase.java \\\n-org/xml/sax/InputSource.java \\\n-org/xml/sax/Locator.java \\\n-org/xml/sax/Parser.java \\\n-org/xml/sax/SAXException.java \\\n-org/xml/sax/SAXNotRecognizedException.java \\\n-org/xml/sax/SAXNotSupportedException.java \\\n-org/xml/sax/SAXParseException.java \\\n-org/xml/sax/XMLFilter.java \\\n-org/xml/sax/XMLReader.java \\\n-$(rmi_java_source_files) \\\n-$(awt_java_source_files) \\\n-$(convert_source_files)\n+awt_java_source_files =  gnu/awt/LightweightRedirector.java gnu/awt/j2d/AbstractGraphicsState.java gnu/awt/j2d/DirectRasterGraphics.java gnu/awt/j2d/Graphics2DImpl.java gnu/awt/j2d/IntegerGraphicsState.java gnu/awt/j2d/MappedRaster.java gnu/gcj/awt/BitMaskExtent.java gnu/gcj/awt/Buffers.java gnu/gcj/awt/ComponentDataBlitOp.java gnu/gcj/awt/GLightweightPeer.java gnu/java/beans/editors/ColorEditor.java\tgnu/java/beans/editors/FontEditor.java gnu/java/beans/editors/NativeBooleanEditor.java\tgnu/java/beans/editors/NativeByteEditor.java gnu/java/beans/editors/NativeDoubleEditor.java gnu/java/beans/editors/NativeFloatEditor.java gnu/java/beans/editors/NativeIntEditor.java gnu/java/beans/editors/NativeLongEditor.java gnu/java/beans/editors/NativeShortEditor.java gnu/java/beans/editors/StringEditor.java gnu/java/beans/info/ComponentBeanInfo.java gnu/java/beans/BeanInfoEmbryo.java gnu/java/beans/EmptyBeanInfo.java gnu/java/beans/ExplicitBeanInfo.java gnu/java/beans/IntrospectionIncubator.java java/applet/Applet.java java/applet/AppletStub.java java/applet/AppletContext.java java/applet/AudioClip.java java/awt/AWTError.java java/awt/AWTEvent.java java/awt/AWTEventMulticaster.java java/awt/AWTException.java java/awt/AWTPermission.java java/awt/ActiveEvent.java java/awt/Adjustable.java java/awt/BorderLayout.java java/awt/Button.java java/awt/Canvas.java java/awt/CardLayout.java java/awt/Checkbox.java java/awt/CheckboxGroup.java java/awt/CheckboxMenuItem.java java/awt/Choice.java java/awt/Color.java java/awt/Component.java\tjava/awt/ComponentOrientation.java java/awt/Container.java\tjava/awt/Cursor.java java/awt/Dialog.java java/awt/Dimension.java\tjava/awt/Event.java java/awt/EventDispatchThread.java java/awt/EventQueue.java java/awt/FileDialog.java java/awt/FlowLayout.java java/awt/Font.java java/awt/FontMetrics.java java/awt/Frame.java java/awt/Graphics.java java/awt/Graphics2D.java java/awt/GraphicsConfiguration.java java/awt/GridBagConstraints.java java/awt/GridLayout.java java/awt/IllegalComponentStateException.java java/awt/Image.java java/awt/Insets.java java/awt/ItemSelectable.java java/awt/Label.java java/awt/LayoutManager.java java/awt/LayoutManager2.java java/awt/List.java java/awt/Menu.java java/awt/MenuBar.java java/awt/MenuComponent.java java/awt/MenuContainer.java java/awt/MenuItem.java java/awt/MenuShortcut.java java/awt/Paint.java java/awt/PaintContext.java java/awt/Panel.java java/awt/Point.java java/awt/Polygon.java java/awt/PopupMenu.java\tjava/awt/Rectangle.java\tjava/awt/RenderingHints.java java/awt/ScrollPane.java java/awt/Scrollbar.java\tjava/awt/Shape.java java/awt/SystemColor.java java/awt/TextArea.java java/awt/TextComponent.java java/awt/TextField.java\tjava/awt/Toolkit.java java/awt/Transparency.java java/awt/Window.java java/awt/color/ColorSpace.java java/awt/color/ICC_ColorSpace.java java/awt/color/ICC_Profile.java\tjava/awt/datatransfer/Clipboard.java java/awt/event/AWTEventListener.java java/awt/event/ActionEvent.java\tjava/awt/event/ActionListener.java java/awt/event/AdjustmentEvent.java java/awt/event/AdjustmentListener.java java/awt/event/ComponentAdapter.java java/awt/event/ComponentEvent.java java/awt/event/ComponentListener.java java/awt/event/ContainerAdapter.java java/awt/event/ContainerEvent.java java/awt/event/ContainerListener.java java/awt/event/FocusAdapter.java java/awt/event/FocusEvent.java java/awt/event/FocusListener.java java/awt/event/HierarchyBoundsAdapter.java java/awt/event/HierarchyBoundsListener.java java/awt/event/HierarchyEvent.java java/awt/event/HierarchyListener.java java/awt/event/InputEvent.java java/awt/event/InputMethodEvent.java java/awt/event/InputMethodListener.java\tjava/awt/event/InvocationEvent.java java/awt/event/ItemEvent.java java/awt/event/ItemListener.java java/awt/event/KeyAdapter.java java/awt/event/KeyEvent.java java/awt/event/KeyListener.java\tjava/awt/event/MouseAdapter.java java/awt/event/MouseEvent.java java/awt/event/MouseListener.java java/awt/event/MouseMotionAdapter.java java/awt/event/MouseMotionListener.java\tjava/awt/event/PaintEvent.java java/awt/event/TextEvent.java java/awt/event/TextListener.java java/awt/event/WindowAdapter.java java/awt/event/WindowEvent.java\tjava/awt/event/WindowListener.java java/awt/geom/AffineTransform.java java/awt/geom/Dimension2D.java java/awt/geom/Ellipse2D.java java/awt/geom/IllegalPathStateException.java java/awt/geom/Line2D.java java/awt/geom/NoninvertibleTransformException.java java/awt/geom/PathIterator.java\tjava/awt/geom/Point2D.java java/awt/geom/Rectangle2D.java java/awt/geom/RectangularShape.java java/awt/geom/RoundRectangle2D.java java/awt/image/BufferedImage.java java/awt/image/ColorModel.java java/awt/image/ComponentColorModel.java\tjava/awt/image/ComponentSampleModel.java java/awt/image/DataBuffer.java java/awt/image/DataBufferByte.java java/awt/image/DataBufferInt.java java/awt/image/DataBufferUShort.java java/awt/image/DirectColorModel.java java/awt/image/ImageConsumer.java java/awt/image/ImageObserver.java java/awt/image/ImageProducer.java java/awt/image/IndexColorModel.java java/awt/image/PackedColorModel.java java/awt/image/Raster.java java/awt/image/RasterOp.java java/awt/image/SampleModel.java\tjava/awt/image/SinglePixelPackedSampleModel.java java/awt/image/WritableRaster.java java/awt/peer/ButtonPeer.java java/awt/peer/CanvasPeer.java java/awt/peer/CheckboxMenuItemPeer.java\tjava/awt/peer/CheckboxPeer.java\tjava/awt/peer/ChoicePeer.java java/awt/peer/ComponentPeer.java java/awt/peer/ContainerPeer.java java/awt/peer/DialogPeer.java java/awt/peer/FileDialogPeer.java java/awt/peer/FontPeer.java java/awt/peer/FramePeer.java java/awt/peer/LabelPeer.java java/awt/peer/LightweightPeer.java java/awt/peer/ListPeer.java java/awt/peer/MenuBarPeer.java java/awt/peer/MenuComponentPeer.java java/awt/peer/MenuItemPeer.java\tjava/awt/peer/MenuPeer.java java/awt/peer/PanelPeer.java java/awt/peer/PopupMenuPeer.java java/awt/peer/ScrollPanePeer.java java/awt/peer/ScrollbarPeer.java java/awt/peer/TextAreaPeer.java\tjava/awt/peer/TextComponentPeer.java java/awt/peer/TextFieldPeer.java java/awt/peer/WindowPeer.java java/beans/beancontext/BeanContext.java\tjava/beans/beancontext/BeanContextChild.java java/beans/beancontext/BeanContextChildComponentProxy.java java/beans/beancontext/BeanContextChildSupport.java java/beans/beancontext/BeanContextContainerProxy.java java/beans/beancontext/BeanContextEvent.java java/beans/beancontext/BeanContextMembershipEvent.java java/beans/beancontext/BeanContextMembershipListener.java java/beans/beancontext/BeanContextProxy.java java/beans/beancontext/BeanContextServiceAvailableEvent.java java/beans/beancontext/BeanContextServiceProvider.java java/beans/beancontext/BeanContextServiceProviderBeanInfo.java java/beans/beancontext/BeanContextServiceRevokedEvent.java java/beans/beancontext/BeanContextServiceRevokedListener.java java/beans/beancontext/BeanContextServices.java\tjava/beans/beancontext/BeanContextServicesListener.java\tjava/beans/AppletInitializer.java java/beans/BeanDescriptor.java java/beans/BeanInfo.java java/beans/Beans.java java/beans/Customizer.java java/beans/DesignMode.java java/beans/EventSetDescriptor.java java/beans/FeatureDescriptor.java java/beans/IndexedPropertyDescriptor.java java/beans/IntrospectionException.java java/beans/Introspector.java java/beans/MethodDescriptor.java java/beans/ParameterDescriptor.java java/beans/PropertyChangeEvent.java java/beans/PropertyChangeListener.java java/beans/PropertyChangeSupport.java java/beans/PropertyDescriptor.java java/beans/PropertyEditor.java java/beans/PropertyEditorManager.java java/beans/PropertyEditorSupport.java java/beans/PropertyVetoException.java java/beans/SimpleBeanInfo.java java/beans/VetoableChangeListener.java java/beans/VetoableChangeSupport.java java/beans/Visibility.java\n+\n+\n+rmi_java_source_files =  java/rmi/activation/Activatable.java java/rmi/activation/ActivateFailedException.java java/rmi/activation/ActivationDesc.java\tjava/rmi/activation/ActivationException.java java/rmi/activation/ActivationGroup.java java/rmi/activation/ActivationGroupDesc.java java/rmi/activation/ActivationGroupID.java java/rmi/activation/ActivationID.java java/rmi/activation/ActivationInstantiator.java\tjava/rmi/activation/ActivationMonitor.java java/rmi/activation/ActivationSystem.java java/rmi/activation/Activator.java java/rmi/activation/UnknownGroupException.java java/rmi/activation/UnknownObjectException.java\tjava/rmi/AccessException.java java/rmi/AlreadyBoundException.java java/rmi/ConnectException.java java/rmi/ConnectIOException.java java/rmi/MarshalException.java java/rmi/MarshalledObject.java java/rmi/Naming.java java/rmi/NoSuchObjectException.java java/rmi/NotBoundException.java\tjava/rmi/RMISecurityException.java java/rmi/RMISecurityManager.java java/rmi/Remote.java java/rmi/RemoteException.java java/rmi/ServerError.java java/rmi/ServerException.java java/rmi/ServerRuntimeException.java java/rmi/StubNotFoundException.java java/rmi/UnexpectedException.java java/rmi/UnknownHostException.java java/rmi/UnmarshalException.java java/rmi/dgc/DGC.java java/rmi/dgc/Lease.java\tjava/rmi/dgc/VMID.java java/rmi/registry/LocateRegistry.java java/rmi/registry/Registry.java\tjava/rmi/registry/RegistryHandler.java java/rmi/server/ExportException.java java/rmi/server/LoaderHandler.java java/rmi/server/LogStream.java java/rmi/server/ObjID.java java/rmi/server/Operation.java java/rmi/server/RMIClassLoader.java java/rmi/server/RMIClientSocketFactory.java java/rmi/server/RMIFailureHandler.java java/rmi/server/RMIServerSocketFactory.java java/rmi/server/RMISocketFactory.java java/rmi/server/RemoteCall.java\tjava/rmi/server/RemoteObject.java java/rmi/server/RemoteRef.java java/rmi/server/RemoteServer.java java/rmi/server/RemoteStub.java\tjava/rmi/server/ServerCloneException.java java/rmi/server/ServerNotActiveException.java java/rmi/server/ServerRef.java java/rmi/server/Skeleton.java java/rmi/server/SkeletonMismatchException.java java/rmi/server/SkeletonNotFoundException.java java/rmi/server/SocketSecurityException.java java/rmi/server/UID.java java/rmi/server/UnicastRemoteObject.java java/rmi/server/Unreferenced.java gnu/java/rmi/dgc/DGCImpl.java gnu/java/rmi/dgc/DGCImpl_Skel.java gnu/java/rmi/dgc/DGCImpl_Stub.java gnu/java/rmi/registry/RegistryImpl.java\tgnu/java/rmi/registry/RegistryImpl_Skel.java gnu/java/rmi/registry/RegistryImpl_Stub.java gnu/java/rmi/rmic/Compile_gcj.java gnu/java/rmi/rmic/Compiler.java\tgnu/java/rmi/rmic/CompilerProcess.java gnu/java/rmi/rmic/RMIC.java gnu/java/rmi/rmic/TabbedWriter.java gnu/java/rmi/server/ProtocolConstants.java gnu/java/rmi/server/RMIDefaultSocketFactory.java gnu/java/rmi/server/RMIHashes.java gnu/java/rmi/server/RMIObjectInputStream.java gnu/java/rmi/server/RMIObjectOutputStream.java gnu/java/rmi/server/UnicastConnection.java gnu/java/rmi/server/UnicastConnectionManager.java gnu/java/rmi/server/UnicastRef.java gnu/java/rmi/server/UnicastRemoteCall.java gnu/java/rmi/server/UnicastRemoteStub.java gnu/java/rmi/server/UnicastServer.java gnu/java/rmi/server/UnicastServerRef.java\n+\n+\n+built_java_source_files = java/lang/ConcreteProcess.java                           gnu/classpath/Configuration.java\n+\n+\n+core_java_source_files =  java/lang/AbstractMethodError.java java/lang/ArithmeticException.java java/lang/ArrayIndexOutOfBoundsException.java java/lang/ArrayStoreException.java java/lang/Boolean.java java/lang/Byte.java java/lang/Character.java java/lang/CharSequence.java java/lang/ClassCastException.java java/lang/ClassCircularityError.java java/lang/ClassFormatError.java\tjava/lang/ClassLoader.java java/lang/ClassNotFoundException.java java/lang/CloneNotSupportedException.java java/lang/Cloneable.java java/lang/Comparable.java java/lang/Compiler.java\tjava/lang/Double.java java/lang/Error.java java/lang/Exception.java java/lang/ExceptionInInitializerError.java java/lang/Float.java java/lang/IllegalAccessError.java java/lang/IllegalAccessException.java java/lang/IllegalArgumentException.java\tjava/lang/IllegalMonitorStateException.java java/lang/IllegalStateException.java java/lang/IllegalThreadStateException.java java/lang/IncompatibleClassChangeError.java java/lang/IndexOutOfBoundsException.java java/lang/InheritableThreadLocal.java java/lang/InstantiationError.java java/lang/InstantiationException.java java/lang/Integer.java java/lang/InternalError.java java/lang/InterruptedException.java java/lang/LinkageError.java java/lang/Long.java java/lang/Math.java java/lang/NegativeArraySizeException.java java/lang/NoClassDefFoundError.java java/lang/NoSuchFieldError.java\tjava/lang/NoSuchFieldException.java java/lang/NoSuchMethodError.java java/lang/NoSuchMethodException.java java/lang/NullPointerException.java java/lang/Number.java java/lang/NumberFormatException.java java/lang/OutOfMemoryError.java\tjava/lang/Package.java java/lang/Process.java java/lang/Runnable.java\tjava/lang/Runtime.java java/lang/RuntimeException.java\tjava/lang/RuntimePermission.java java/lang/SecurityException.java java/lang/SecurityManager.java java/lang/Short.java java/lang/StackOverflowError.java java/lang/String.java java/lang/StringBuffer.java java/lang/StringIndexOutOfBoundsException.java java/lang/System.java java/lang/Thread.java java/lang/ThreadDeath.java java/lang/ThreadGroup.java java/lang/ThreadLocal.java java/lang/Throwable.java java/lang/UnknownError.java java/lang/UnsatisfiedLinkError.java java/lang/UnsupportedClassVersionError.java java/lang/UnsupportedOperationException.java java/lang/VerifyError.java java/lang/VirtualMachineError.java java/lang/VMClassLoader.java java/lang/VMSecurityManager.java java/lang/Void.java java/io/BufferedInputStream.java java/io/BufferedOutputStream.java java/io/BufferedReader.java java/io/BufferedWriter.java java/io/ByteArrayInputStream.java java/io/ByteArrayOutputStream.java java/io/CharArrayReader.java java/io/CharArrayWriter.java java/io/CharConversionException.java java/io/DataInput.java java/io/DataInputStream.java java/io/DataOutput.java\tjava/io/DataOutputStream.java java/io/EOFException.java java/io/Externalizable.java java/io/File.java java/io/FileDescriptor.java java/io/FileFilter.java java/io/FileInputStream.java java/io/FileNotFoundException.java java/io/FileOutputStream.java java/io/FilePermission.java java/io/FileReader.java\tjava/io/FileWriter.java\tjava/io/FilenameFilter.java java/io/FilterInputStream.java java/io/FilterOutputStream.java\tjava/io/FilterReader.java java/io/FilterWriter.java java/io/IOException.java java/io/InputStream.java java/io/InputStreamReader.java java/io/InterruptedIOException.java java/io/InvalidClassException.java java/io/InvalidObjectException.java java/io/LineNumberInputStream.java java/io/LineNumberReader.java java/io/NotActiveException.java\tjava/io/NotSerializableException.java java/io/ObjectInput.java java/io/ObjectInputStream.java java/io/ObjectInputValidation.java java/io/ObjectOutput.java java/io/ObjectOutputStream.java\tjava/io/ObjectStreamClass.java java/io/ObjectStreamConstants.java java/io/ObjectStreamException.java java/io/ObjectStreamField.java java/io/OptionalDataException.java java/io/OutputStream.java java/io/OutputStreamWriter.java\tjava/io/PipedInputStream.java java/io/PipedOutputStream.java java/io/PipedReader.java java/io/PipedWriter.java java/io/PrintStream.java java/io/PrintWriter.java java/io/PushbackInputStream.java java/io/PushbackReader.java java/io/RandomAccessFile.java java/io/Reader.java java/io/SequenceInputStream.java java/io/Serializable.java java/io/SerializablePermission.java java/io/StreamCorruptedException.java java/io/StreamTokenizer.java java/io/StringBufferInputStream.java java/io/StringReader.java java/io/StringWriter.java java/io/SyncFailedException.java java/io/UTFDataFormatException.java java/io/UnsupportedEncodingException.java java/io/WriteAbortedException.java java/io/Writer.java java/util/AbstractCollection.java java/util/AbstractList.java java/util/AbstractMap.java java/util/AbstractSequentialList.java java/util/AbstractSet.java java/util/ArrayList.java java/util/Arrays.java java/util/BasicMapEntry.java java/util/BitSet.java java/util/Calendar.java\tjava/util/Collection.java java/util/Collections.java java/util/Comparator.java java/util/ConcurrentModificationException.java java/util/Date.java java/util/Dictionary.java java/util/EmptyStackException.java java/util/Enumeration.java java/util/EventListener.java java/util/EventObject.java java/util/GregorianCalendar.java java/util/HashMap.java java/util/HashSet.java java/util/Hashtable.java java/util/IdentityHashMap.java java/util/Iterator.java\tjava/util/LinkedList.java java/util/LinkedHashMap.java java/util/List.java java/util/ListIterator.java java/util/ListResourceBundle.java java/util/Locale.java java/util/Map.java java/util/MissingResourceException.java\tjava/util/NoSuchElementException.java java/util/Observable.java java/util/Observer.java\tjava/util/Properties.java java/util/PropertyPermission.java java/util/PropertyResourceBundle.java java/util/Random.java java/util/RandomAccess.java java/util/ResourceBundle.java java/util/Set.java java/util/SimpleTimeZone.java java/util/SortedMap.java java/util/SortedSet.java java/util/Stack.java java/util/StringTokenizer.java java/util/TimeZone.java\tjava/util/Timer.java java/util/TimerTask.java java/util/TreeMap.java java/util/TreeSet.java java/util/TooManyListenersException.java java/util/Vector.java java/util/WeakHashMap.java\n+\n+\n+ordinary_java_source_files = $(core_java_source_files) gnu/gcj/Core.java gnu/gcj/RawData.java gnu/gcj/io/DefaultMimeTypes.java gnu/gcj/io/MimeTypes.java gnu/gcj/io/SimpleSHSStream.java\tgnu/gcj/math/MPN.java gnu/gcj/protocol/core/Connection.java gnu/gcj/protocol/core/Handler.java gnu/gcj/protocol/core/CoreInputStream.java gnu/gcj/protocol/file/Connection.java gnu/gcj/protocol/file/Handler.java gnu/gcj/protocol/http/Connection.java gnu/gcj/protocol/http/Handler.java gnu/gcj/protocol/jar/Connection.java gnu/gcj/protocol/jar/Handler.java gnu/gcj/runtime/FileDeleter.java gnu/gcj/runtime/FinalizerThread.java gnu/gcj/runtime/FirstThread.java gnu/gcj/runtime/SharedLibLoader.java gnu/gcj/runtime/VMClassLoader.java gnu/java/io/ClassLoaderObjectInputStream.java gnu/java/io/NullOutputStream.java gnu/java/io/ObjectIdentityWrapper.java gnu/java/lang/ArrayHelper.java gnu/java/lang/ClassHelper.java gnu/java/lang/reflect/TypeSignature.java gnu/java/locale/Calendar.java gnu/java/locale/Calendar_de.java gnu/java/locale/Calendar_en.java gnu/java/locale/Calendar_nl.java gnu/java/locale/LocaleInformation.java gnu/java/locale/LocaleInformation_de.java gnu/java/locale/LocaleInformation_en.java gnu/java/locale/LocaleInformation_en_US.java gnu/java/locale/LocaleInformation_nl.java gnu/java/security/provider/DefaultPolicy.java gnu/java/security/provider/Gnu.java gnu/java/security/provider/SHA.java gnu/java/security/provider/SHA1PRNG.java gnu/java/text/BaseBreakIterator.java gnu/java/text/CharacterBreakIterator.java gnu/java/text/LineBreakIterator.java gnu/java/text/SentenceBreakIterator.java\tgnu/java/text/WordBreakIterator.java gnu/java/util/DoubleEnumeration.java java/lang/ref/PhantomReference.java java/lang/ref/Reference.java java/lang/ref/ReferenceQueue.java java/lang/ref/SoftReference.java java/lang/ref/WeakReference.java java/lang/reflect/AccessibleObject.java\tjava/lang/reflect/Array.java java/lang/reflect/Constructor.java java/lang/reflect/Field.java java/lang/reflect/InvocationTargetException.java java/lang/reflect/Member.java java/lang/reflect/Method.java java/lang/reflect/Modifier.java\tjava/lang/reflect/ReflectPermission.java java/math/BigDecimal.java java/math/BigInteger.java java/net/Authenticator.java java/net/BindException.java java/net/ConnectException.java java/net/ContentHandler.java java/net/ContentHandlerFactory.java java/net/DatagramPacket.java java/net/DatagramSocket.java java/net/DatagramSocketImpl.java java/net/FileNameMap.java java/net/HttpURLConnection.java\tjava/net/InetAddress.java java/net/JarURLConnection.java java/net/MalformedURLException.java java/net/MulticastSocket.java java/net/NetPermission.java java/net/NoRouteToHostException.java java/net/PasswordAuthentication.java java/net/PlainDatagramSocketImpl.java java/net/PlainSocketImpl.java java/net/ProtocolException.java\tjava/net/ServerSocket.java java/net/Socket.java java/net/SocketException.java java/net/SocketImpl.java java/net/SocketImplFactory.java\tjava/net/SocketOptions.java java/net/SocketPermission.java java/net/URL.java java/net/URLClassLoader.java java/net/URLConnection.java java/net/URLDecoder.java java/net/URLEncoder.java java/net/URLStreamHandler.java java/net/URLStreamHandlerFactory.java java/net/UnknownHostException.java java/net/UnknownServiceException.java java/security/AccessControlContext.java java/security/AccessControlException.java java/security/AccessController.java java/security/AlgorithmParameterGenerator.java java/security/AlgorithmParameters.java java/security/AlgorithmParameterGeneratorSpi.java java/security/AlgorithmParametersSpi.java java/security/AllPermission.java java/security/BasicPermission.java java/security/Certificate.java java/security/CodeSource.java java/security/DigestException.java java/security/DigestOutputStream.java java/security/DummyKeyPairGenerator.java java/security/DummySignature.java java/security/DigestInputStream.java java/security/DomainCombiner.java java/security/DummyMessageDigest.java java/security/GeneralSecurityException.java java/security/Guard.java java/security/GuardedObject.java java/security/Identity.java java/security/IdentityScope.java java/security/InvalidAlgorithmParameterException.java java/security/InvalidKeyException.java java/security/InvalidParameterException.java java/security/Key.java java/security/KeyFactorySpi.java java/security/KeyPairGenerator.java java/security/KeyStoreException.java java/security/KeyException.java java/security/KeyManagementException.java java/security/KeyPairGeneratorSpi.java java/security/KeyStoreSpi.java java/security/KeyFactory.java java/security/KeyPair.java java/security/KeyStore.java java/security/MessageDigest.java java/security/MessageDigestSpi.java java/security/NoSuchAlgorithmException.java java/security/NoSuchProviderException.java java/security/Permission.java java/security/Principal.java java/security/PrivilegedExceptionAction.java java/security/PublicKey.java java/security/PermissionCollection.java java/security/PrivateKey.java java/security/ProtectionDomain.java java/security/Permissions.java java/security/PrivilegedAction.java java/security/Provider.java java/security/Policy.java java/security/PrivilegedActionException.java java/security/ProviderException.java java/security/SecureClassLoader.java java/security/SecureRandomSpi.java java/security/SecurityPermission.java java/security/SignatureException.java java/security/SignedObject.java java/security/SecureRandom.java java/security/Security.java java/security/Signature.java java/security/SignatureSpi.java java/security/Signer.java java/security/UnrecoverableKeyException.java java/security/UnresolvedPermission.java java/security/acl/Acl.java java/security/acl/AclNotFoundException.java java/security/acl/LastOwnerException.java java/security/acl/Owner.java java/security/acl/AclEntry.java java/security/acl/Group.java java/security/acl/NotOwnerException.java java/security/acl/Permission.java java/security/cert/CRL.java java/security/cert/CRLException.java java/security/cert/Certificate.java java/security/cert/CertificateEncodingException.java java/security/cert/CertificateException.java java/security/cert/CertificateExpiredException.java java/security/cert/CertificateFactory.java java/security/cert/CertificateFactorySpi.java java/security/cert/CertificateNotYetValidException.java java/security/cert/CertificateParsingException.java java/security/cert/X509CRL.java java/security/cert/X509CRLEntry.java java/security/cert/X509Certificate.java java/security/cert/X509Extension.java java/security/interfaces/DSAKey.java java/security/interfaces/DSAKeyPairGenerator.java java/security/interfaces/DSAParams.java java/security/interfaces/DSAPrivateKey.java java/security/interfaces/DSAPublicKey.java java/security/interfaces/RSAKey.java java/security/interfaces/RSAPrivateCrtKey.java java/security/interfaces/RSAPrivateKey.java java/security/interfaces/RSAPublicKey.java java/security/spec/AlgorithmParameterSpec.java java/security/spec/DSAParameterSpec.java java/security/spec/DSAPrivateKeySpec.java java/security/spec/DSAPublicKeySpec.java java/security/spec/EncodedKeySpec.java java/security/spec/InvalidKeySpecException.java java/security/spec/InvalidParameterSpecException.java java/security/spec/KeySpec.java java/security/spec/PKCS8EncodedKeySpec.java java/security/spec/RSAKeyGenParameterSpec.java java/security/spec/RSAPrivateCrtKeySpec.java java/security/spec/RSAPrivateKeySpec.java java/security/spec/RSAPublicKeySpec.java java/security/spec/X509EncodedKeySpec.java java/sql/Array.java java/sql/BatchUpdateException.java java/sql/Blob.java java/sql/CallableStatement.java\tjava/sql/Clob.java java/sql/Connection.java java/sql/DataTruncation.java java/sql/DatabaseMetaData.java java/sql/Date.java java/sql/Driver.java java/sql/DriverManager.java java/sql/DriverPropertyInfo.java java/sql/PreparedStatement.java\tjava/sql/Ref.java java/sql/ResultSet.java\tjava/sql/ResultSetMetaData.java\tjava/sql/SQLData.java java/sql/SQLException.java java/sql/SQLInput.java java/sql/SQLOutput.java java/sql/SQLWarning.java java/sql/Statement.java\tjava/sql/Struct.java\tjava/sql/Time.java java/sql/Timestamp.java\tjava/sql/Types.java java/text/Annotation.java java/text/AttributedCharacterIterator.java java/text/AttributedString.java\tjava/text/AttributedStringIterator.java\tjava/text/BreakIterator.java java/text/CharacterIterator.java java/text/ChoiceFormat.java java/text/CollationElementIterator.java\tjava/text/CollationKey.java java/text/Collator.java\tjava/text/DateFormat.java java/text/DateFormatSymbols.java java/text/DecimalFormat.java java/text/DecimalFormatSymbols.java java/text/FieldPosition.java java/text/Format.java java/text/MessageFormat.java java/text/NumberFormat.java java/text/ParseException.java java/text/ParsePosition.java java/text/RuleBasedCollator.java java/text/SimpleDateFormat.java\tjava/text/StringCharacterIterator.java java/util/jar/Attributes.java java/util/jar/JarEntry.java java/util/jar/JarException.java java/util/jar/JarFile.java java/util/jar/JarInputStream.java java/util/jar/JarOutputStream.java java/util/jar/Manifest.java java/util/zip/Adler32.java java/util/zip/CRC32.java java/util/zip/CheckedInputStream.java java/util/zip/CheckedOutputStream.java java/util/zip/Checksum.java java/util/zip/DataFormatException.java java/util/zip/Deflater.java java/util/zip/DeflaterOutputStream.java\tjava/util/zip/GZIPInputStream.java java/util/zip/GZIPOutputStream.java java/util/zip/Inflater.java java/util/zip/InflaterInputStream.java java/util/zip/ZipConstants.java\tjava/util/zip/ZipEntry.java java/util/zip/ZipException.java\tjava/util/zip/ZipFile.java java/util/zip/ZipInputStream.java java/util/zip/ZipOutputStream.java org/w3c/dom/Attr.java org/w3c/dom/CDATASection.java org/w3c/dom/CharacterData.java org/w3c/dom/Comment.java org/w3c/dom/DOMException.java org/w3c/dom/DOMImplementation.java org/w3c/dom/Document.java org/w3c/dom/DocumentFragment.java org/w3c/dom/DocumentType.java org/w3c/dom/Element.java org/w3c/dom/Entity.java org/w3c/dom/EntityReference.java org/w3c/dom/NamedNodeMap.java org/w3c/dom/Node.java org/w3c/dom/NodeList.java org/w3c/dom/Notation.java org/w3c/dom/ProcessingInstruction.java org/w3c/dom/Text.java org/w3c/dom/ranges/DocumentRange.java org/w3c/dom/ranges/Range.java org/w3c/dom/ranges/RangeException.java org/w3c/dom/traversal/DocumentTraversal.java org/w3c/dom/traversal/NodeFilter.java org/w3c/dom/traversal/NodeIterator.java org/w3c/dom/traversal/TreeWalker.java org/xml/sax/ext/DeclHandler.java org/xml/sax/ext/LexicalHandler.java org/xml/sax/helpers/AttributeListImpl.java org/xml/sax/helpers/AttributesImpl.java org/xml/sax/helpers/DefaultHandler.java org/xml/sax/helpers/LocatorImpl.java org/xml/sax/helpers/NamespaceSupport.java org/xml/sax/helpers/ParserAdapter.java org/xml/sax/helpers/ParserFactory.java org/xml/sax/helpers/XMLFilterImpl.java org/xml/sax/helpers/XMLReaderAdapter.java org/xml/sax/helpers/XMLReaderFactory.java org/xml/sax/AttributeList.java org/xml/sax/Attributes.java org/xml/sax/ContentHandler.java org/xml/sax/DTDHandler.java org/xml/sax/DocumentHandler.java org/xml/sax/EntityResolver.java org/xml/sax/ErrorHandler.java org/xml/sax/HandlerBase.java org/xml/sax/InputSource.java org/xml/sax/Locator.java org/xml/sax/Parser.java org/xml/sax/SAXException.java org/xml/sax/SAXNotRecognizedException.java org/xml/sax/SAXNotSupportedException.java org/xml/sax/SAXParseException.java org/xml/sax/XMLFilter.java org/xml/sax/XMLReader.java $(rmi_java_source_files) $(awt_java_source_files) $(convert_source_files)\n \n \n java_source_files = $(special_java_source_files) $(ordinary_java_source_files)\n \n-c_source_files = \\\n-  java/lang/dtoa.c        java/lang/k_rem_pio2.c  java/lang/s_tan.c       \\\n-  java/lang/e_acos.c      java/lang/k_sin.c       java/lang/strtod.c      \\\n-  java/lang/e_asin.c      java/lang/k_tan.c       java/lang/w_acos.c      \\\n-  java/lang/e_atan2.c     java/lang/mprec.c       java/lang/w_asin.c      \\\n-  java/lang/e_exp.c       java/lang/s_atan.c      java/lang/w_atan2.c     \\\n-  java/lang/e_fmod.c      java/lang/s_ceil.c      java/lang/w_exp.c       \\\n-  java/lang/e_log.c       java/lang/s_copysign.c  java/lang/w_fmod.c      \\\n-  java/lang/e_pow.c       java/lang/s_cos.c       java/lang/w_log.c       \\\n-  java/lang/e_rem_pio2.c  java/lang/s_fabs.c      java/lang/w_pow.c       \\\n-  java/lang/e_remainder.c java/lang/s_floor.c     java/lang/w_remainder.c \\\n-  java/lang/e_scalb.c     java/lang/s_rint.c      java/lang/w_sqrt.c      \\\n-  java/lang/e_sqrt.c      java/lang/s_scalbn.c    java/lang/sf_rint.c     \\\n-  java/lang/k_cos.c       java/lang/s_sin.c       java/lang/sf_fabs.c\n+c_source_files =    java/lang/dtoa.c        java/lang/k_rem_pio2.c  java/lang/s_tan.c         java/lang/e_acos.c      java/lang/k_sin.c       java/lang/strtod.c        java/lang/e_asin.c      java/lang/k_tan.c       java/lang/w_acos.c        java/lang/e_atan2.c     java/lang/mprec.c       java/lang/w_asin.c        java/lang/e_exp.c       java/lang/s_atan.c      java/lang/w_atan2.c       java/lang/e_fmod.c      java/lang/s_ceil.c      java/lang/w_exp.c         java/lang/e_log.c       java/lang/s_copysign.c  java/lang/w_fmod.c        java/lang/e_pow.c       java/lang/s_cos.c       java/lang/w_log.c         java/lang/e_rem_pio2.c  java/lang/s_fabs.c      java/lang/w_pow.c         java/lang/e_remainder.c java/lang/s_floor.c     java/lang/w_remainder.c   java/lang/e_scalb.c     java/lang/s_rint.c      java/lang/w_sqrt.c        java/lang/e_sqrt.c      java/lang/s_scalbn.c    java/lang/sf_rint.c       java/lang/k_cos.c       java/lang/s_sin.c       java/lang/sf_fabs.c\n \n \n #java/awt/natToolkit.cc\n \n-nat_source_files = \\\n-gnu/gcj/natCore.cc \\\n-gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n-gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n-gnu/gcj/convert/Unicode_to_JIS.cc \\\n-gnu/gcj/convert/natIconv.cc \\\n-gnu/gcj/convert/natInput_EUCJIS.cc \\\n-gnu/gcj/convert/natInput_SJIS.cc \\\n-gnu/gcj/convert/natOutput_EUCJIS.cc \\\n-gnu/gcj/convert/natOutput_SJIS.cc \\\n-gnu/gcj/io/natSimpleSHSStream.cc \\\n-gnu/gcj/io/shs.cc \\\n-gnu/gcj/protocol/core/natCoreInputStream.cc \\\n-gnu/gcj/runtime/natFinalizerThread.cc \\\n-gnu/gcj/runtime/natFirstThread.cc \\\n-gnu/gcj/runtime/natSharedLibLoader.cc \\\n-java/io/natFile.cc \\\n-java/io/natFileDescriptor.cc \\\n-java/io/natObjectInputStream.cc \\\n-java/io/natObjectOutputStream.cc \\\n-java/lang/natCharacter.cc \\\n-java/lang/natClass.cc \\\n-java/lang/natClassLoader.cc \\\n-java/lang/natConcreteProcess.cc \\\n-java/lang/natDouble.cc \\\n-java/lang/natFloat.cc \\\n-java/lang/natMath.cc \\\n-java/lang/natObject.cc \\\n-java/lang/natRuntime.cc\t\\\n-java/lang/natString.cc \\\n-java/lang/natStringBuffer.cc \\\n-java/lang/natSystem.cc \\\n-java/lang/natThread.cc \\\n-java/lang/natThrowable.cc \\\n-java/lang/ref/natReference.cc \\\n-java/lang/reflect/natArray.cc \\\n-java/lang/reflect/natConstructor.cc \\\n-java/lang/reflect/natField.cc \\\n-java/lang/reflect/natMethod.cc \\\n-java/net/natInetAddress.cc \\\n-java/net/natPlainDatagramSocketImpl.cc \\\n-java/net/natPlainSocketImpl.cc \\\n-java/text/natCollator.cc \\\n-java/util/natResourceBundle.cc \\\n-java/util/zip/natDeflater.cc \\\n-java/util/zip/natInflater.cc\n-\n-\n-x_java_source_files = \\\n-gnu/gcj/xlib/Clip.java \\\n-gnu/gcj/xlib/Colormap.java \\\n-gnu/gcj/xlib/Display.java \\\n-gnu/gcj/xlib/Drawable.java \\\n-gnu/gcj/xlib/Font.java \\\n-gnu/gcj/xlib/GC.java \\\n-gnu/gcj/xlib/Pixmap.java \\\n-gnu/gcj/xlib/Screen.java \\\n-gnu/gcj/xlib/Visual.java \\\n-gnu/gcj/xlib/WMSizeHints.java \\\n-gnu/gcj/xlib/Window.java \\\n-gnu/gcj/xlib/WindowAttributes.java \\\n-gnu/gcj/xlib/XAnyEvent.java \\\n-gnu/gcj/xlib/XButtonEvent.java \\\n-gnu/gcj/xlib/XColor.java \\\n-gnu/gcj/xlib/XConfigureEvent.java \\\n-gnu/gcj/xlib/XConnectException.java \\\n-gnu/gcj/xlib/XEvent.java \\\n-gnu/gcj/xlib/XException.java \\\n-gnu/gcj/xlib/XExposeEvent.java \\\n-gnu/gcj/xlib/XID.java \\\n-gnu/gcj/xlib/XImage.java \\\n-gnu/gcj/xlib/XUnmapEvent.java \\\n-gnu/awt/xlib/XCanvasPeer.java \\\n-gnu/awt/xlib/XEventLoop.java \\\n-gnu/awt/xlib/XEventQueue.java \\\n-gnu/awt/xlib/XFontMetrics.java \\\n-gnu/awt/xlib/XFramePeer.java \\\n-gnu/awt/xlib/XGraphics.java \\\n-gnu/awt/xlib/XGraphicsConfiguration.java \\\n-gnu/awt/xlib/XPanelPeer.java \\\n-gnu/awt/xlib/XToolkit.java\n-\n-\n-x_nat_source_files = \\\n-gnu/gcj/xlib/natClip.cc \\\n-gnu/gcj/xlib/natColormap.cc \\\n-gnu/gcj/xlib/natDisplay.cc \\\n-gnu/gcj/xlib/natDrawable.cc \\\n-gnu/gcj/xlib/natFont.cc \\\n-gnu/gcj/xlib/natGC.cc \\\n-gnu/gcj/xlib/natPixmap.cc \\\n-gnu/gcj/xlib/natScreen.cc \\\n-gnu/gcj/xlib/natVisual.cc \\\n-gnu/gcj/xlib/natWMSizeHints.cc \\\n-gnu/gcj/xlib/natWindow.cc \\\n-gnu/gcj/xlib/natWindowAttributes.cc \\\n-gnu/gcj/xlib/natXAnyEvent.cc \\\n-gnu/gcj/xlib/natXButtonEvent.cc \\\n-gnu/gcj/xlib/natXColor.cc \\\n-gnu/gcj/xlib/natXConfigureEvent.cc \\\n-gnu/gcj/xlib/natXException.cc \\\n-gnu/gcj/xlib/natXExposeEvent.cc \\\n-gnu/gcj/xlib/natXImage.cc \\\n-gnu/gcj/xlib/natXUnmapEvent.cc\n+nat_source_files =  gnu/gcj/natCore.cc gnu/gcj/convert/JIS0208_to_Unicode.cc gnu/gcj/convert/JIS0212_to_Unicode.cc gnu/gcj/convert/Unicode_to_JIS.cc gnu/gcj/convert/natIconv.cc gnu/gcj/convert/natInput_EUCJIS.cc gnu/gcj/convert/natInput_SJIS.cc gnu/gcj/convert/natOutput_EUCJIS.cc gnu/gcj/convert/natOutput_SJIS.cc gnu/gcj/io/natSimpleSHSStream.cc gnu/gcj/io/shs.cc gnu/gcj/protocol/core/natCoreInputStream.cc gnu/gcj/runtime/natFinalizerThread.cc gnu/gcj/runtime/natFirstThread.cc gnu/gcj/runtime/natSharedLibLoader.cc java/io/natFile.cc java/io/natFileDescriptor.cc java/io/natObjectInputStream.cc java/io/natObjectOutputStream.cc java/lang/natCharacter.cc java/lang/natClass.cc java/lang/natClassLoader.cc java/lang/natConcreteProcess.cc java/lang/natDouble.cc java/lang/natFloat.cc java/lang/natMath.cc java/lang/natObject.cc java/lang/natRuntime.cc\tjava/lang/natString.cc java/lang/natStringBuffer.cc java/lang/natSystem.cc java/lang/natThread.cc java/lang/natThrowable.cc java/lang/ref/natReference.cc java/lang/reflect/natArray.cc java/lang/reflect/natConstructor.cc java/lang/reflect/natField.cc java/lang/reflect/natMethod.cc java/net/natInetAddress.cc java/net/natPlainDatagramSocketImpl.cc java/net/natPlainSocketImpl.cc java/text/natCollator.cc java/util/natResourceBundle.cc java/util/zip/natDeflater.cc java/util/zip/natInflater.cc\n+\n+\n+x_java_source_files =  gnu/gcj/xlib/Clip.java gnu/gcj/xlib/Colormap.java gnu/gcj/xlib/Display.java gnu/gcj/xlib/Drawable.java gnu/gcj/xlib/Font.java gnu/gcj/xlib/GC.java gnu/gcj/xlib/Pixmap.java gnu/gcj/xlib/Screen.java gnu/gcj/xlib/Visual.java gnu/gcj/xlib/WMSizeHints.java gnu/gcj/xlib/Window.java gnu/gcj/xlib/WindowAttributes.java gnu/gcj/xlib/XAnyEvent.java gnu/gcj/xlib/XButtonEvent.java gnu/gcj/xlib/XColor.java gnu/gcj/xlib/XConfigureEvent.java gnu/gcj/xlib/XConnectException.java gnu/gcj/xlib/XEvent.java gnu/gcj/xlib/XException.java gnu/gcj/xlib/XExposeEvent.java gnu/gcj/xlib/XID.java gnu/gcj/xlib/XImage.java gnu/gcj/xlib/XUnmapEvent.java gnu/awt/xlib/XCanvasPeer.java gnu/awt/xlib/XEventLoop.java gnu/awt/xlib/XEventQueue.java gnu/awt/xlib/XFontMetrics.java gnu/awt/xlib/XFramePeer.java gnu/awt/xlib/XGraphics.java gnu/awt/xlib/XGraphicsConfiguration.java gnu/awt/xlib/XPanelPeer.java gnu/awt/xlib/XToolkit.java\n+\n+\n+x_nat_source_files =  gnu/gcj/xlib/natClip.cc gnu/gcj/xlib/natColormap.cc gnu/gcj/xlib/natDisplay.cc gnu/gcj/xlib/natDrawable.cc gnu/gcj/xlib/natFont.cc gnu/gcj/xlib/natGC.cc gnu/gcj/xlib/natPixmap.cc gnu/gcj/xlib/natScreen.cc gnu/gcj/xlib/natVisual.cc gnu/gcj/xlib/natWMSizeHints.cc gnu/gcj/xlib/natWindow.cc gnu/gcj/xlib/natWindowAttributes.cc gnu/gcj/xlib/natXAnyEvent.cc gnu/gcj/xlib/natXButtonEvent.cc gnu/gcj/xlib/natXColor.cc gnu/gcj/xlib/natXConfigureEvent.cc gnu/gcj/xlib/natXException.cc gnu/gcj/xlib/natXExposeEvent.cc gnu/gcj/xlib/natXImage.cc gnu/gcj/xlib/natXUnmapEvent.cc\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"JC1FLAGS=$(JC1FLAGS)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"DESTDIR=$(DESTDIR)\"\n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"JC1FLAGS=$(JC1FLAGS)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"prefix=$(prefix)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"NM=$(NM)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"DESTDIR=$(DESTDIR)\"\n \n \n CONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host\n@@ -1465,7 +391,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2102,24 +1028,25 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/GregorianCalendar.P .deps/java/util/HashMap.P \\\n .deps/java/util/HashSet.P .deps/java/util/Hashtable.P \\\n .deps/java/util/IdentityHashMap.P .deps/java/util/Iterator.P \\\n-.deps/java/util/LinkedList.P .deps/java/util/List.P \\\n-.deps/java/util/ListIterator.P .deps/java/util/ListResourceBundle.P \\\n-.deps/java/util/Locale.P .deps/java/util/Map.P \\\n-.deps/java/util/MissingResourceException.P \\\n+.deps/java/util/LinkedHashMap.P .deps/java/util/LinkedList.P \\\n+.deps/java/util/List.P .deps/java/util/ListIterator.P \\\n+.deps/java/util/ListResourceBundle.P .deps/java/util/Locale.P \\\n+.deps/java/util/Map.P .deps/java/util/MissingResourceException.P \\\n .deps/java/util/NoSuchElementException.P .deps/java/util/Observable.P \\\n .deps/java/util/Observer.P .deps/java/util/Properties.P \\\n .deps/java/util/PropertyPermission.P \\\n .deps/java/util/PropertyResourceBundle.P .deps/java/util/Random.P \\\n-.deps/java/util/ResourceBundle.P .deps/java/util/Set.P \\\n-.deps/java/util/SimpleTimeZone.P .deps/java/util/SortedMap.P \\\n-.deps/java/util/SortedSet.P .deps/java/util/Stack.P \\\n-.deps/java/util/StringTokenizer.P .deps/java/util/TimeZone.P \\\n-.deps/java/util/Timer.P .deps/java/util/TimerTask.P \\\n-.deps/java/util/TooManyListenersException.P .deps/java/util/TreeMap.P \\\n-.deps/java/util/TreeSet.P .deps/java/util/Vector.P \\\n-.deps/java/util/WeakHashMap.P .deps/java/util/jar/Attributes.P \\\n-.deps/java/util/jar/JarEntry.P .deps/java/util/jar/JarException.P \\\n-.deps/java/util/jar/JarFile.P .deps/java/util/jar/JarInputStream.P \\\n+.deps/java/util/RandomAccess.P .deps/java/util/ResourceBundle.P \\\n+.deps/java/util/Set.P .deps/java/util/SimpleTimeZone.P \\\n+.deps/java/util/SortedMap.P .deps/java/util/SortedSet.P \\\n+.deps/java/util/Stack.P .deps/java/util/StringTokenizer.P \\\n+.deps/java/util/TimeZone.P .deps/java/util/Timer.P \\\n+.deps/java/util/TimerTask.P .deps/java/util/TooManyListenersException.P \\\n+.deps/java/util/TreeMap.P .deps/java/util/TreeSet.P \\\n+.deps/java/util/Vector.P .deps/java/util/WeakHashMap.P \\\n+.deps/java/util/jar/Attributes.P .deps/java/util/jar/JarEntry.P \\\n+.deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n+.deps/java/util/jar/JarInputStream.P \\\n .deps/java/util/jar/JarOutputStream.P .deps/java/util/jar/Manifest.P \\\n .deps/java/util/natResourceBundle.P .deps/java/util/zip/Adler32.P \\\n .deps/java/util/zip/CRC32.P .deps/java/util/zip/CheckedInputStream.P \\\n@@ -2514,7 +1441,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "11baa30f919cadb026782cd41ed973f72c8c38bc", "filename": "libjava/java/util/Collection.java", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollection.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* Collection.java -- Interface that represents a collection of objects\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -25,9 +25,6 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Maybe some more @see clauses would be helpful.\n-\n package java.util;\n \n /**\n@@ -57,22 +54,36 @@\n  * and returns a collection containing the same elements (that is, creates a\n  * copy of the argument using its own implementation).\n  *\n- * @see java.util.List\n- * @see java.util.Set\n- * @see java.util.AbstractCollection\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see List\n+ * @see Set\n+ * @see Map\n+ * @see SortedSet\n+ * @see SortedMap\n+ * @see HashSet\n+ * @see TreeSet\n+ * @see ArrayList\n+ * @see LinkedList\n+ * @see Vector\n+ * @see Collections\n+ * @see Arrays\n+ * @see AbstractCollection\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface Collection\n {\n   /**\n    * Add an element to this collection.\n    *\n    * @param o the object to add.\n-   * @returns true if the collection was modified as a result of this action.\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @return true if the collection was modified as a result of this action.\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the add operation.\n-   * @exception ClassCastException if o cannot be added to this collection due\n+   * @throws ClassCastException if o cannot be added to this collection due\n    *   to its type.\n-   * @exception IllegalArgumentException if o cannot be added to this\n+   * @throws IllegalArgumentException if o cannot be added to this\n    *   collection for some other reason.\n    */\n   boolean add(Object o);\n@@ -81,12 +92,12 @@\n    * Add the contents of a given collection to this collection.\n    *\n    * @param c the collection to add.\n-   * @returns true if the collection was modified as a result of this action.\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @return true if the collection was modified as a result of this action.\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the addAll operation.\n-   * @exception ClassCastException if some element of c cannot be added to this\n+   * @throws ClassCastException if some element of c cannot be added to this\n    *   collection due to its type.\n-   * @exception IllegalArgumentException if some element of c cannot be added\n+   * @throws IllegalArgumentException if some element of c cannot be added\n    *   to this collection for some other reason.\n    */\n   boolean addAll(Collection c);\n@@ -95,7 +106,7 @@\n    * Clear the collection, such that a subsequent call to isEmpty() would\n    * return true.\n    *\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the clear operation.\n    */\n   void clear();\n@@ -105,7 +116,7 @@\n    * elements.\n    *\n    * @param o the element to look for.\n-   * @returns true if this collection contains at least one element e such that\n+   * @return true if this collection contains at least one element e such that\n    *   <code>o == null ? e == null : o.equals(e)</code>.\n    */\n   boolean contains(Object o);\n@@ -114,7 +125,7 @@\n    * Test whether this collection contains every element in a given collection.\n    *\n    * @param c the collection to test for.\n-   * @returns true if for every element o in c, contains(o) would return true.\n+   * @return true if for every element o in c, contains(o) would return true.\n    */\n   boolean containsAll(Collection c);\n \n@@ -132,7 +143,7 @@\n    * preserve the symmetry of the relation.\n    *\n    * @param o the object to compare to this collection.\n-   * @returns true if the o is equal to this collection.\n+   * @return true if the o is equal to this collection.\n    */\n   boolean equals(Object o);\n \n@@ -148,21 +159,21 @@\n    * method renders it impossible to correctly implement both Set and List, as\n    * the required implementations are mutually exclusive.\n    *\n-   * @returns a hash code for this collection.\n+   * @return a hash code for this collection.\n    */\n   int hashCode();\n \n   /**\n    * Test whether this collection is empty, that is, if size() == 0.\n    *\n-   * @returns true if this collection contains no elements.\n+   * @return true if this collection contains no elements.\n    */\n   boolean isEmpty();\n \n   /**\n    * Obtain an Iterator over this collection.\n    *\n-   * @returns an Iterator over the elements of this collection, in any order.\n+   * @return an Iterator over the elements of this collection, in any order.\n    */\n   Iterator iterator();\n \n@@ -172,9 +183,9 @@\n    *   : o.equals(e)</code>.\n    *\n    * @param o the object to remove.\n-   * @returns true if the collection changed as a result of this call, that is,\n+   * @return true if the collection changed as a result of this call, that is,\n    *   if the collection contained at least one occurrence of o.\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the remove operation.\n    */\n   boolean remove(Object o);\n@@ -183,8 +194,8 @@\n    * Remove all elements of a given collection from this collection. That is,\n    * remove every element e such that c.contains(e).\n    *\n-   * @returns true if this collection was modified as a result of this call.\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @return true if this collection was modified as a result of this call.\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the removeAll operation.\n    */\n   boolean removeAll(Collection c);\n@@ -193,23 +204,23 @@\n    * Remove all elements of this collection that are not contained in a given\n    * collection. That is, remove every element e such that !c.contains(e).\n    *\n-   * @returns true if this collection was modified as a result of this call.\n-   * @exception UnsupportedOperationException if this collection does not\n+   * @return true if this collection was modified as a result of this call.\n+   * @throws UnsupportedOperationException if this collection does not\n    *   support the retainAll operation.\n    */\n   boolean retainAll(Collection c);\n \n   /**\n    * Get the number of elements in this collection.\n    *\n-   * @returns the number of elements in the collection.\n+   * @return the number of elements in the collection.\n    */\n   int size();\n \n   /**\n    * Copy the current contents of this collection into an array.\n    *\n-   * @returns an array of type Object[] and length equal to the size of this\n+   * @return an array of type Object[] and length equal to the size of this\n    *   collection, containing the elements currently in this collection, in\n    *   any order.\n    */\n@@ -227,9 +238,9 @@\n    * if it is known that this collection does not contain any null elements.\n    *\n    * @param a the array to copy this collection into.\n-   * @returns an array containing the elements currently in this collection, in\n+   * @return an array containing the elements currently in this collection, in\n    *   any order.\n-   * @exception ArrayStoreException if the type of any element of the\n+   * @throws ArrayStoreException if the type of any element of the\n    *   collection is not a subtype of the element type of a.\n    */\n   Object[] toArray(Object[] a);"}, {"sha": "8522301eedf627231f934d6d90ff3f5bdcc482fc", "filename": "libjava/java/util/Comparator.java", "status": "modified", "additions": 53, "deletions": 18, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FComparator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FComparator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FComparator.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -29,45 +29,80 @@\n \n /**\n  * Interface for objects that specify an ordering between objects. The ordering\n- * can be <EM>total</EM>, such that two objects only compare equal if they are\n- * equal by the equals method, or <EM>partial</EM> such that this is not\n- * necessarily true. For example, a case-sensitive dictionary order comparison\n- * of Strings is total, but if it is case-insensitive it is partial, because\n- * \"abc\" and \"ABC\" compare as equal even though \"abc\".equals(\"ABC\") returns\n- * false.\n+ * should be <em>total</em>, such that any two objects of the correct type\n+ * can be compared, and the comparison is reflexive, anti-symmetric, and\n+ * transitive.  It is also recommended that the comparator be <em>consistent\n+ * with equals</em>, although this is not a strict requirement. A relation\n+ * is consistent with equals if these two statements always have the same\n+ * results (if no exceptions occur):<br>\n+ * <code>compare((Object) e1, (Object) e2) == 0</code> and\n+ * <code>e1.equals((Object) e2)</code><br>\n+ * Comparators that violate consistency with equals may cause strange behavior\n+ * in sorted lists and sets.  For example, a case-sensitive dictionary order\n+ * comparison of Strings is consistent with equals, but if it is\n+ * case-insensitive it is not, because \"abc\" and \"ABC\" compare as equal even\n+ * though \"abc\".equals(\"ABC\") returns false.\n  * <P>\n  * In general, Comparators should be Serializable, because when they are passed\n  * to Serializable data structures such as SortedMap or SortedSet, the entire\n  * data structure will only serialize correctly if the comparator is\n  * Serializable.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Comparable\n+ * @see TreeMap\n+ * @see TreeSet\n+ * @see SortedMap\n+ * @see SortedSet\n+ * @see Arrays#sort(Object[], Comparator)\n+ * @see java.io.Serializable\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface Comparator\n {\n   /**\n    * Return an integer that is negative, zero or positive depending on whether\n    * the first argument is less than, equal to or greater than the second\n-   * according to this ordering. This method should obey the following contract:\n-   * <UL>\n-   *   <LI>if compare(a, b) &lt; 0 then compare(b, a) &gt; 0</LI>\n-   *   <LI>if compare(a, b) throws an exception, so does compare(b, a)</LI>\n-   *   <LI>if compare(a, b) &lt; 0 and compare(b, c) &lt; 0 then compare(a, c)\n-   *       &lt; 0</LI>\n-   *   <LI>if a.equals(b) or both a and b are null, then compare(a, b) == 0.\n-   *       The converse need not be true, but if it is, this Comparator\n-   *       specifies a <EM>total</EM> ordering.</LI>\n-   * </UL>\n+   * according to this ordering. This method should obey the following\n+   * contract:\n+   * <ul>\n+   *   <li>if compare(a, b) &lt; 0 then compare(b, a) &gt; 0</li>\n+   *   <li>if compare(a, b) throws an exception, so does compare(b, a)</li>\n+   *   <li>if compare(a, b) &lt; 0 and compare(b, c) &lt; 0 then compare(a, c)\n+   *       &lt; 0</li>\n+   *   <li>if compare(a, b) == 0 then compare(a, c) and compare(b, c) must\n+   *       have the same sign</li\n+   * </ul>\n+   * To be consistent with equals, the following additional constraint is\n+   * in place:\n+   * <ul>\n+   *   <li>if a.equals(b) or both a and b are null, then\n+   *       compare(a, b) == 0.</li>\n+   * </ul><p>\n    *\n+   * Although it is permissible for a comparator to provide an order\n+   * inconsistent with equals, that should be documented.\n+   *\n+   * @param o1 the first object\n+   * @param o2 the second object\n+   * @return the comparison\n    * @throws ClassCastException if the elements are not of types that can be\n-   *   compared by this ordering.\n+   *         compared by this ordering.\n    */\n   int compare(Object o1, Object o2);\n \n   /**\n    * Return true if the object is equal to this object.  To be\n    * considered equal, the argument object must satisfy the constraints\n    * of <code>Object.equals()</code>, be a Comparator, and impose the\n-   * same ordering as this Comparator.\n+   * same ordering as this Comparator. The default implementation\n+   * inherited from Object is usually adequate.\n+   *\n    * @param obj The object\n+   * @return true if it is a Comparator that imposes the same order\n+   * @see Object#equals(Object)\n    */\n   boolean equals(Object obj);\n }"}, {"sha": "5bcfbee3b71beb043cffe40857e31eb74ac6a532", "filename": "libjava/java/util/Enumeration.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FEnumeration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FEnumeration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FEnumeration.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -42,24 +42,29 @@\n  * be obtained by the enumeration method in class Collections.\n  *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date August 25, 1998.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Iterator\n+ * @see Hashtable\n+ * @see Vector\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public interface Enumeration\n {\n   /**\n    * Tests whether there are elements remaining in the enumeration.\n    *\n    * @return true if there is at least one more element in the enumeration,\n-   *   that is, if the next call to nextElement will not throw a\n-   *   NoSuchElementException.\n+   *         that is, if the next call to nextElement will not throw a\n+   *         NoSuchElementException.\n    */\n   boolean hasMoreElements();\n \n   /**\n    * Obtain the next element in the enumeration.\n    *\n    * @return the next element in the enumeration\n-   * @exception NoSuchElementException if there are no more elements\n+   * @throws NoSuchElementException if there are no more elements\n    */\n-  Object nextElement() throws NoSuchElementException;\n+  Object nextElement();\n }"}, {"sha": "b75718ffa6305bd82a533bd34ea0fa7aa5b56e16", "filename": "libjava/java/util/HashMap.java", "status": "modified", "additions": 483, "deletions": 329, "changes": 812, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashMap.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,6 +1,6 @@\n /* HashMap.java -- a class providing a basic hashtable data structure,\n    mapping Object --> Object\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,83 +37,137 @@\n // a bug in here, chances are you should make a similar change to the Hashtable\n // code.\n \n+// NOTE: This implementation has some nasty coding style in order to\n+// support LinkedHashMap, which extends this.\n+\n /**\n  * This class provides a hashtable-backed implementation of the\n- * Map interface.  \n+ * Map interface.\n+ * <p>\n  *\n- * It uses a hash-bucket approach; that is, hash\n- * collisions are handled by linking the new node off of the\n- * pre-existing node (or list of nodes).  In this manner, techniques \n- * such as linear probing (which can casue primary clustering) and \n- * rehashing (which does not fit very well with Java's method of \n- * precomputing hash codes) are avoided.  \n+ * It uses a hash-bucket approach; that is, hash collisions are handled\n+ * by linking the new node off of the pre-existing node (or list of\n+ * nodes).  In this manner, techniques such as linear probing (which\n+ * can cause primary clustering) and rehashing (which does not fit very\n+ * well with Java's method of precomputing hash codes) are avoided.\n+ * <p>\n  *\n- * Under ideal circumstances (no collisions, HashMap offers O(1) \n+ * Under ideal circumstances (no collisions), HashMap offers O(1)\n  * performance on most operations (<pre>containsValue()</pre> is,\n- * of course, O(n)).  In the worst case (all keys map to the same \n+ * of course, O(n)).  In the worst case (all keys map to the same\n  * hash code -- very unlikely), most operations are O(n).\n+ * <p>\n  *\n- * HashMap is part of the JDK1.2 Collections API.  It differs from \n+ * HashMap is part of the JDK1.2 Collections API.  It differs from\n  * Hashtable in that it accepts the null key and null values, and it\n  * does not support \"Enumeration views.\"\n+ * <p>\n+ *\n+ * The iterators are <i>fail-fast</i>, meaning that any structural\n+ * modification, except for <code>remove()</code> called on the iterator\n+ * itself, cause the iterator to throw a\n+ * <code>ConcurrentModificationException</code> rather than exhibit\n+ * non-deterministic behavior.\n  *\n- * @author         Jon Zeppieri\n- * @author         Jochen Hoenicke\n- * @author\t   Bryce McKinlay\n+ * @author Jon Zeppieri\n+ * @author Jochen Hoenicke\n+ * @author Bryce McKinlay\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Object#hashCode()\n+ * @see Collection\n+ * @see Map\n+ * @see TreeMap\n+ * @see LinkedHashMap\n+ * @see IdentityHashMap\n+ * @see Hashtable\n+ * @since 1.2\n  */\n public class HashMap extends AbstractMap\n   implements Map, Cloneable, Serializable\n {\n-  /** Default number of buckets. This is the value the JDK 1.3 uses. Some \n-    * early documentation specified this value as 101. That is incorrect. */\n-  private static final int DEFAULT_CAPACITY = 11;  \n-  /** The defaulty load factor; this is explicitly specified by the spec. */\n-  private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n+  /**\n+   * Default number of buckets. This is the value the JDK 1.3 uses. Some\n+   * early documentation specified this value as 101. That is incorrect.\n+   */\n+  static final int DEFAULT_CAPACITY = 11;\n+\n+  /**\n+   * The default load factor; this is explicitly specified by the spec.\n+   */\n+  static final float DEFAULT_LOAD_FACTOR = 0.75f;\n+\n+  /** \"enum\" of iterator types. */\n+  static final int KEYS = 0,\n+                   VALUES = 1,\n+                   ENTRIES = 2;\n \n+  /**\n+   * Compatible with JDK 1.2.\n+   */\n   private static final long serialVersionUID = 362498820763181265L;\n \n-  /** \n-   * The rounded product of the capacity and the load factor; when the number \n+  /**\n+   * The rounded product of the capacity and the load factor; when the number\n    * of elements exceeds the threshold, the HashMap calls <pre>rehash()</pre>.\n    * @serial\n    */\n   int threshold;\n \n-  /** Load factor of this HashMap:  used in computing the threshold.\n+  /**\n+   * Load factor of this HashMap:  used in computing the threshold.\n    * @serial\n    */\n-  float loadFactor = DEFAULT_LOAD_FACTOR;\n+  final float loadFactor;\n \n-  /** \n-   * Array containing the actual key-value mappings\n+  /**\n+   * Array containing the actual key-value mappings.\n    */\n-  transient Entry[] buckets;\n+  transient HashEntry[] buckets;\n \n-  /** \n-   * counts the number of modifications this HashMap has undergone, used \n+  /**\n+   * Counts the number of modifications this HashMap has undergone, used\n    * by Iterators to know when to throw ConcurrentModificationExceptions.\n    */\n   transient int modCount;\n \n-  /** the size of this HashMap:  denotes the number of key-value pairs */\n+  /**\n+   * The size of this HashMap:  denotes the number of key-value pairs.\n+   */\n   transient int size;\n \n   /**\n    * Class to represent an entry in the hash table. Holds a single key-value\n-   * pair.\n+   * pair.  This is extended again in LinkedHashMap.  See {@link clone()}\n+   * for why this must be Cloneable.\n    */\n-  static class Entry extends BasicMapEntry\n+  static class HashEntry extends BasicMapEntry implements Cloneable\n   {\n-    Entry next;\n-    \n-    Entry(Object key, Object value)\n+    /** The next entry in the linked list. */\n+    HashEntry next;\n+\n+    /**\n+     * Simple constructor.\n+     * @param key the key\n+     * @param value the value\n+     */\n+    HashEntry(Object key, Object value)\n     {\n       super(key, value);\n     }\n+\n+    /**\n+     * Called when this entry is removed from the map. This version simply\n+     * returns the value, but in LinkedHashMap, it must also do bookkeeping.\n+     * @return the value of this key as it is removed.\n+     */\n+    Object cleanup()\n+    {\n+      return value;\n+    }\n   }\n \n   /**\n-   * construct a new HashMap with the default capacity (11) and the default\n+   * Construct a new HashMap with the default capacity (11) and the default\n    * load factor (0.75).\n    */\n   public HashMap()\n@@ -122,237 +176,279 @@ public HashMap()\n   }\n \n   /**\n-   * construct a new HashMap from the given Map\n-   * \n-   * every element in Map t will be put into this new HashMap\n+   * Construct a new HashMap from the given Map, with initial capacity\n+   * the greater of the size of <code>m</code> or the default of 11.\n+   * <p>\n    *\n-   * @param     t        a Map whose key / value pairs will be put into\n-   *                     the new HashMap.  <b>NOTE: key / value pairs\n-   *                     are not cloned in this constructor</b>\n+   * Every element in Map m will be put into this new HashMap.\n+   *\n+   * @param m a Map whose key / value pairs will be put into\n+   *          the new HashMap.  <b>NOTE: key / value pairs\n+   *          are not cloned in this constructor.</b>\n+   * @throws NullPointerException if m is null\n    */\n   public HashMap(Map m)\n   {\n-    int size = Math.max(m.size() * 2, DEFAULT_CAPACITY);\n-    buckets = new Entry[size];\n-    threshold = (int) (size * loadFactor);\n-    putAll(m);\n+    this(Math.max(m.size() * 2, DEFAULT_CAPACITY), DEFAULT_LOAD_FACTOR);\n+    putAllInternal(m);\n   }\n \n   /**\n-   * construct a new HashMap with a specific inital capacity \n-   *\n-   * @param   initialCapacity     the initial capacity of this HashMap (>=0)\n+   * Construct a new HashMap with a specific inital capacity and\n+   * default load factor of 0.75.\n    *\n-   * @throws   IllegalArgumentException    if (initialCapacity < 0)\n+   * @param initialCapacity the initial capacity of this HashMap (>=0)\n+   * @throws IllegalArgumentException if (initialCapacity < 0)\n    */\n-  public HashMap(int initialCapacity) throws IllegalArgumentException\n+  public HashMap(int initialCapacity)\n   {\n     this(initialCapacity, DEFAULT_LOAD_FACTOR);\n   }\n \n   /**\n-   * construct a new HashMap with a specific inital capacity and load factor\n+   * Construct a new HashMap with a specific inital capacity and load factor.\n    *\n-   * @param   initialCapacity  the initial capacity (>=0)\n-   * @param   loadFactor       the load factor\n-   * \n-   * @throws   IllegalArgumentException    if (initialCapacity < 0) ||\n-   *                                          (loadFactor <= 0)\n+   * @param initialCapacity the initial capacity (>=0)\n+   * @param loadFactor the load factor (>0, not NaN)\n+   * @throws IllegalArgumentException if (initialCapacity < 0) ||\n+   *                                     ! (loadFactor > 0.0)\n    */\n   public HashMap(int initialCapacity, float loadFactor)\n-    throws IllegalArgumentException\n   {\n     if (initialCapacity < 0)\n-      throw new IllegalArgumentException(\"Illegal Initial Capacity: \" \n-      \t\t\t\t\t + initialCapacity);    \n-    if (loadFactor <= 0)\n-      throw new IllegalArgumentException(\"Illegal Load Factor: \" + loadFactor);\n+      throw new IllegalArgumentException(\"Illegal Capacity: \"\n+                                         + initialCapacity);\n+    if (! (loadFactor > 0)) // check for NaN too\n+      throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n \n     if (initialCapacity == 0)\n       initialCapacity = 1;\n-    buckets = new Entry[initialCapacity];\n+    buckets = new HashEntry[initialCapacity];\n     this.loadFactor = loadFactor;\n-    this.threshold = (int) (initialCapacity * loadFactor);\n+    threshold = (int) (initialCapacity * loadFactor);\n   }\n \n-  /** returns the number of kay-value mappings currently in this Map */\n+  /**\n+   * Returns the number of kay-value mappings currently in this Map\n+   * @return the size\n+   */\n   public int size()\n   {\n     return size;\n   }\n \n-  /** returns true if there are no key-value mappings currently in this Map */\n+  /**\n+   * Returns true if there are no key-value mappings currently in this Map\n+   * @return <code>size() == 0</code>\n+   */\n   public boolean isEmpty()\n   {\n     return size == 0;\n   }\n \n   /**\n-   * returns true if this HashMap contains a value <pre>o</pre>, such that\n+   * Returns true if this HashMap contains a value <pre>o</pre>, such that\n    * <pre>o.equals(value)</pre>.\n    *\n-   * @param      value       the value to search for in this Hashtable\n+   * @param value the value to search for in this HashMap\n+   * @return true if at least one key maps to the value\n    */\n   public boolean containsValue(Object value)\n   {\n-    for (int i = 0; i < buckets.length; i++)\n+    for (int i = buckets.length - 1; i >= 0; i--)\n       {\n-\tEntry e = buckets[i];\n-\twhile (e != null)\n-\t  {\n-\t    if (value == null ? e.value == null : value.equals(e.value))\n-\t      return true;\n-\t    e = e.next;\n-\t  }\n+        HashEntry e = buckets[i];\n+        while (e != null)\n+          {\n+            if (value == null ? e.value == null : value.equals(e.value))\n+              return true;\n+            e = e.next;\n+          }\n       }\n     return false;\n   }\n \n-  /** \n-   * returns true if the supplied object equals (<pre>equals()</pre>) a key\n-   * in this HashMap \n+  /**\n+   * Returns true if the supplied object <pre>equals()</pre> a key\n+   * in this HashMap.\n    *\n-   * @param       key        the key to search for in this HashMap\n+   * @param key the key to search for in this HashMap\n+   * @return true if the key is in the table\n+   * @see #containsValue(Object)\n    */\n   public boolean containsKey(Object key)\n   {\n     int idx = hash(key);\n-    Entry e = buckets[idx];\n+    HashEntry e = buckets[idx];\n     while (e != null)\n       {\n         if (key == null ? e.key == null : key.equals(e.key))\n-\t  return true;\n-\te = e.next;\n+          return true;\n+        e = e.next;\n       }\n     return false;\n   }\n \n   /**\n-   * return the value in this Hashtable associated with the supplied key, or <pre>null</pre>\n-   * if the key maps to nothing\n+   * Return the value in this HashMap associated with the supplied key,\n+   * or <pre>null</pre> if the key maps to nothing.  NOTE: Since the value\n+   * could also be null, you must use containsKey to see if this key\n+   * actually maps to something.\n    *\n-   * @param     key      the key for which to fetch an associated value\n+   * @param key the key for which to fetch an associated value\n+   * @return what the key maps to, if present\n+   * @see #put(Object, Object)\n+   * @see #containsKey(Object)\n    */\n   public Object get(Object key)\n   {\n     int idx = hash(key);\n-    Entry e = buckets[idx];\n+    HashEntry e = buckets[idx];\n     while (e != null)\n       {\n         if (key == null ? e.key == null : key.equals(e.key))\n-\t  return e.value;\n-\te = e.next;\n+          return e.value;\n+        e = e.next;\n       }\n     return null;\n   }\n \n   /**\n-   * puts the supplied value into the Map, mapped by the supplied key\n+   * Puts the supplied value into the Map, mapped by the supplied key.\n+   * The value may be retrieved by any object which <code>equals()</code>\n+   * this key. NOTE: Since the prior value could also be null, you must\n+   * first use containsKey if you want to see if you are replacing the\n+   * key's mapping.\n    *\n-   * @param       key        the HashMap key used to locate the value\n-   * @param       value      the value to be stored in the HashMap\n+   * @param key the key used to locate the value\n+   * @param value the value to be stored in the HashMap\n+   * @return the prior mapping of the key, or null if there was none\n+   * @see #get(Object)\n+   * @see Object#equals(Object)\n    */\n   public Object put(Object key, Object value)\n   {\n     modCount++;\n     int idx = hash(key);\n-    Entry e = buckets[idx];\n-    \n+    HashEntry e = buckets[idx];\n+\n     while (e != null)\n       {\n         if (key == null ? e.key == null : key.equals(e.key))\n-\t  {\n-\t    Object r = e.value;\n-\t    e.value = value;\n-\t    return r;\n-\t  }\n-\telse\n-\t  {\n-\t    e = e.next;\n-\t  }\n+          // Must use this method for necessary bookkeeping in LinkedHashMap.\n+          return e.setValue(value);\n+        else\n+          e = e.next;\n       }\n-    \n+\n     // At this point, we know we need to add a new entry.\n     if (++size > threshold)\n       {\n-\trehash();\n-\t// Need a new hash value to suit the bigger table.\n-\tidx = hash(key);\n+        rehash();\n+        // Need a new hash value to suit the bigger table.\n+        idx = hash(key);\n       }\n \n-    e = new Entry(key, value);\n-    \n+    // LinkedHashMap cannot override put(), hence this call.\n+    addEntry(key, value, idx, true);\n+    return null;\n+  }\n+\n+  /**\n+   * Helper method for put, that creates and adds a new Entry.  This is\n+   * overridden in LinkedHashMap for bookkeeping purposes.\n+   *\n+   * @param key the key of the new Entry\n+   * @param value the value\n+   * @param idx the index in buckets where the new Entry belongs\n+   * @param callRemove Whether to call the removeEldestEntry method.\n+   * @see #put(Object, Object)\n+   */\n+  void addEntry(Object key, Object value, int idx, boolean callRemove)\n+  {\n+    HashEntry e = new HashEntry(key, value);\n+\n     e.next = buckets[idx];\n     buckets[idx] = e;\n-    \n-    return null;\n   }\n \n   /**\n-   * removes from the HashMap and returns the value which is mapped by the \n-   * supplied key; if the key maps to nothing, then the HashMap remains unchanged,\n-   * and <pre>null</pre> is returned\n+   * Removes from the HashMap and returns the value which is mapped by the\n+   * supplied key. If the key maps to nothing, then the HashMap remains\n+   * unchanged, and <pre>null</pre> is returned. NOTE: Since the value\n+   * could also be null, you must use containsKey to see if you are\n+   * actually removing a mapping.\n    *\n-   * @param    key     the key used to locate the value to remove from the HashMap\n+   * @param key the key used to locate the value to remove\n+   * @return whatever the key mapped to, if present\n    */\n   public Object remove(Object key)\n   {\n     modCount++;\n     int idx = hash(key);\n-    Entry e = buckets[idx];\n-    Entry last = null;\n+    HashEntry e = buckets[idx];\n+    HashEntry last = null;\n \n     while (e != null)\n       {\n         if (key == null ? e.key == null : key.equals(e.key))\n-\t  {\n-\t    if (last == null)\n-\t      buckets[idx] = e.next;\n-\t    else\n-\t      last.next = e.next;\n-\t    size--;\n-\t    return e.value;\n-\t  }\n-\tlast = e;\n-\te = e.next;\n+          {\n+            if (last == null)\n+              buckets[idx] = e.next;\n+            else\n+              last.next = e.next;\n+            size--;\n+            // Method call necessary for LinkedHashMap to work correctly.\n+            return e.cleanup();\n+          }\n+        last = e;\n+        e = e.next;\n       }\n     return null;\n   }\n \n+  /**\n+   * Copies all elements of the given map into this hashtable.  If this table\n+   * already has a mapping for a key, the new mapping replaces the current\n+   * one.\n+   *\n+   * @param m the map to be hashed into this\n+   */\n   public void putAll(Map m)\n   {\n-    int msize = m.size();\n     Iterator itr = m.entrySet().iterator();\n-    \n-    for (int i=0; i < msize; i++)\n+\n+    for (int msize = m.size(); msize > 0; msize--)\n       {\n         Map.Entry e = (Map.Entry) itr.next();\n-\t// Optimize in case the Entry is one of our own.\n-\tif (e instanceof BasicMapEntry)\n-\t  {\n-\t    BasicMapEntry entry = (BasicMapEntry) e;\n-\t    put(entry.key, entry.value);\n-\t  }\n-\telse\n-\t  {\n+        // Optimize in case the Entry is one of our own.\n+        if (e instanceof BasicMapEntry)\n+          {\n+            BasicMapEntry entry = (BasicMapEntry) e;\n+            put(entry.key, entry.value);\n+          }\n+        else\n+          {\n             put(e.getKey(), e.getValue());\n-\t  }\n+          }\n       }\n   }\n   \n+  /**\n+   * Clears the Map so it has no keys. This is O(1).\n+   */\n   public void clear()\n   {\n     modCount++;\n-    for (int i=0; i < buckets.length; i++)\n-      {\n-        buckets[i] = null;\n-      }\n+    Arrays.fill(buckets, null);\n     size = 0;\n   }\n \n-  /** \n-   * returns a shallow clone of this HashMap (i.e. the Map itself is cloned, but\n-   * its contents are not)\n+  /**\n+   * Returns a shallow clone of this HashMap. The Map itself is cloned,\n+   * but its contents are not.  This is O(n).\n+   *\n+   * @return the clone\n    */\n   public Object clone()\n   {\n@@ -363,49 +459,39 @@ public Object clone()\n       }\n     catch (CloneNotSupportedException x)\n       {\n+        // This is impossible.\n       }\n-    copy.buckets = new Entry[buckets.length];\n-    \n-    for (int i=0; i < buckets.length; i++)\n-      {\n-        Entry e = buckets[i];\n-\tEntry last = null;\n-\t\n-\twhile (e != null)\n-\t  {\n-\t    if (last == null)\n-\t      {\n-\t\tcopy.buckets[i] = new Entry(e.key, e.value);\n-\t\tlast = copy.buckets[i];\n-              }\n-\t    else\t\t\n-              {\n-\t        last.next = new Entry(e.key, e.value);\n-\t\tlast = last.next;\n-\t      }\n-\t    e = e.next;\n-\t  }\n-      }\n+    copy.buckets = new HashEntry[buckets.length];\n+    copy.putAllInternal(this);\n     return copy;\n   }\n \n-  /** returns a \"set view\" of this HashMap's keys */\n+  /**\n+   * Returns a \"set view\" of this HashMap's keys. The set is backed by the\n+   * HashMap, so changes in one show up in the other.  The set supports\n+   * element removal, but not element addition.\n+   *\n+   * @return a set view of the keys\n+   * @see #values()\n+   * @see #entrySet()\n+   */\n   public Set keySet()\n   {\n-    // Create an AbstractSet with custom implementations of those methods that \n-    // can be overriden easily and efficiently.\n+    // Create an AbstractSet with custom implementations of those methods that\n+    // can be overridden easily and efficiently.\n     return new AbstractSet()\n     {\n       public int size()\n       {\n         return size;\n       }\n-      \n+\n       public Iterator iterator()\n       {\n-        return new HashIterator(HashIterator.KEYS);\n+        // Cannot create the iterator directly, because of LinkedHashMap.\n+        return HashMap.this.iterator(KEYS);\n       }\n-            \n+\n       public void clear()\n       {\n         HashMap.this.clear();\n@@ -415,20 +501,29 @@ public boolean contains(Object o)\n       {\n         return HashMap.this.containsKey(o);\n       }\n-      \n+\n       public boolean remove(Object o)\n       {\n         // Test against the size of the HashMap to determine if anything\n-\t// really got removed. This is neccessary because the return value of\n-\t// HashMap.remove() is ambiguous in the null case.\n+        // really got removed. This is neccessary because the return value of\n+        // HashMap.remove() is ambiguous in the null case.\n         int oldsize = size;\n         HashMap.this.remove(o);\n-\treturn (oldsize != size);\n+        return (oldsize != size);\n       }\n     };\n   }\n-  \n-  /** Returns a \"collection view\" (or \"bag view\") of this HashMap's values. */\n+\n+  /**\n+   * Returns a \"collection view\" (or \"bag view\") of this HashMap's values.\n+   * The collection is backed by the HashMap, so changes in one show up\n+   * in the other.  The collection supports element removal, but not element\n+   * addition.\n+   *\n+   * @return a bag view of the values\n+   * @see #keySet()\n+   * @see #entrySet()\n+   */\n   public Collection values()\n   {\n     // We don't bother overriding many of the optional methods, as doing so\n@@ -439,245 +534,307 @@ public int size()\n       {\n         return size;\n       }\n-      \n+\n       public Iterator iterator()\n       {\n-        return new HashIterator(HashIterator.VALUES);\n+        // Cannot create the iterator directly, because of LinkedHashMap.\n+        return HashMap.this.iterator(VALUES);\n       }\n-      \n+\n       public void clear()\n       {\n         HashMap.this.clear();\n       }\n     };\n   }\n \n-  /** Returns a \"set view\" of this HashMap's entries. */\n+  /**\n+   * Returns a \"set view\" of this HashMap's entries. The set is backed by\n+   * the HashMap, so changes in one show up in the other.  The set supports\n+   * element removal, but not element addition.\n+   * <p>\n+   *\n+   * Note that the iterators for all three views, from keySet(), entrySet(),\n+   * and values(), traverse the HashMap in the same sequence.\n+   *\n+   * @return a set view of the entries\n+   * @see #keySet()\n+   * @see #values()\n+   * @see Map.Entry\n+   */\n   public Set entrySet()\n   {\n-    // Create an AbstractSet with custom implementations of those methods that \n-    // can be overriden easily and efficiently.\n+    // Create an AbstractSet with custom implementations of those methods that\n+    // can be overridden easily and efficiently.\n     return new AbstractSet()\n     {\n       public int size()\n       {\n         return size;\n       }\n-      \n+\n       public Iterator iterator()\n       {\n-        return new HashIterator(HashIterator.ENTRIES);\n+        // Cannot create the iterator directly, because of LinkedHashMap.\n+        return HashMap.this.iterator(ENTRIES);\n       }\n-            \n+\n       public void clear()\n       {\n         HashMap.this.clear();\n       }\n \n       public boolean contains(Object o)\n       {\n-        if (!(o instanceof Map.Entry))\n-\t  return false;\n-\tMap.Entry me = (Map.Entry) o;\n-\tEntry e = getEntry(me);\n-\treturn (e != null);\n+        return getEntry(o) != null;\n       }\n-      \n+\n       public boolean remove(Object o)\n       {\n-        if (!(o instanceof Map.Entry))\n-\t  return false;\n-\tMap.Entry me = (Map.Entry) o;\n-\tEntry e = getEntry(me);\n-\tif (e != null)\n-\t  {\n-\t    HashMap.this.remove(e.key);\n-\t    return true;\n-\t  }\n-\treturn false;\n+        HashEntry e = getEntry(o);\n+        if (e != null)\n+          {\n+            HashMap.this.remove(e.key);\n+            return true;\n+          }\n+        return false;\n       }\n     };\n   }\n-  \n-  /** Return an index in the buckets array for `key' based on its hashCode() */\n-  private int hash(Object key)\n+\n+  /** Helper method that returns an index in the buckets array for `key;\n+   * based on its hashCode().\n+   *\n+   * @param key the key\n+   * @return the bucket number\n+   */\n+  int hash(Object key)\n   {\n-    if (key == null)\n-      return 0;\n-    else\n-      return Math.abs(key.hashCode() % buckets.length);\n+    return (key == null) ? 0 : Math.abs(key.hashCode() % buckets.length);\n   }\n \n-  /** Return an Entry who's key and value equal the supplied Map.Entry. \n-    * This is used by entrySet's contains() and remove() methods. They can't\n-    * use contains(key) and remove(key) directly because that would result\n-    * in entries with the same key but a different value being matched. */\n-  private Entry getEntry(Map.Entry me)\n+  /**\n+   * Helper method for entrySet(), which matches both key and value\n+   * simultaneously.\n+   *\n+   * @param o the entry to match\n+   * @return the matching entry, if found, or null\n+   * @see #entrySet()\n+   */\n+  private HashEntry getEntry(Object o)\n   {\n+    if (!(o instanceof Map.Entry))\n+      return null;\n+    Map.Entry me = (Map.Entry) o;\n     int idx = hash(me.getKey());\n-    Entry e = buckets[idx];\n+    HashEntry e = buckets[idx];\n     while (e != null)\n       {\n         if (e.equals(me))\n-\t  return e;\n-\te = e.next;\n+          return e;\n+        e = e.next;\n       }\n     return null;\n   }\n-  \n-  /** \n-   * increases the size of the HashMap and rehashes all keys to new array \n-   * indices; this is called when the addition of a new value would cause \n-   * size() > threshold. Note that the existing Entry objects are reused in \n+\n+  /**\n+   * Increases the size of the HashMap and rehashes all keys to new array\n+   * indices; this is called when the addition of a new value would cause\n+   * size() > threshold. Note that the existing Entry objects are reused in\n    * the new hash table.\n+   * <p>\n+   *\n+   * This is not specified, but the new size is twice the current size plus\n+   * one; this number is not always prime, unfortunately.\n    */\n   private void rehash()\n   {\n-    Entry[] oldBuckets = buckets;\n-    \n+    HashEntry[] oldBuckets = buckets;\n+\n     int newcapacity = (buckets.length * 2) + 1;\n     threshold = (int) (newcapacity * loadFactor);\n-    buckets = new Entry[newcapacity];\n-    \n-    for (int i = 0; i < oldBuckets.length; i++)\n+    buckets = new HashEntry[newcapacity];\n+\n+    for (int i = oldBuckets.length - 1; i >= 0; i--)\n       {\n-\tEntry e = oldBuckets[i];\n+        HashEntry e = oldBuckets[i];\n         while (e != null)\n-\t  {\n-\t    int idx = hash(e.key);\n-\t    Entry dest = buckets[idx];\n-\n-\t    if (dest != null)\n-\t      {\n-\t\twhile (dest.next != null)\n-        \t  dest = dest.next;\n-\t\tdest.next = e;\n-\t      }\n-\t    else\n-\t      {\n-        \tbuckets[idx] = e;\n-\t      }\n-\n-\t    Entry next = e.next;\n-\t    e.next = null;\n-\t    e = next;\n-\t  }\n+          {\n+            int idx = hash(e.key);\n+            HashEntry dest = buckets[idx];\n+\n+            if (dest != null)\n+              {\n+                while (dest.next != null)\n+                  dest = dest.next;\n+                dest.next = e;\n+              }\n+            else\n+              {\n+                buckets[idx] = e;\n+              }\n+\n+            HashEntry next = e.next;\n+            e.next = null;\n+            e = next;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Generates a parameterized iterator.  Must be overrideable, since\n+   * LinkedHashMap iterates in a different order.\n+   * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}\n+   * @return the appropriate iterator\n+   */\n+  Iterator iterator(int type)\n+  {\n+    return new HashIterator(type);\n+  }\n+\n+  /**\n+   * A simplified, more efficient internal implementation of putAll(). The \n+   * Map constructor and clone() should not call putAll or put, in order to \n+   * be compatible with the JDK implementation with respect to subclasses.\n+   */\n+  void putAllInternal(Map m)\n+  {\n+    Iterator itr = m.entrySet().iterator();\n+\n+    for (int msize = m.size(); msize > 0; msize--)\n+      {\n+\tMap.Entry e = (Map.Entry) itr.next();\n+\tObject key = e.getKey();\n+\tint idx = hash(key);\n+\taddEntry(key, e.getValue(), idx, false);\n       }\n   }\n \n   /**\n    * Serializes this object to the given stream.\n-   * @serialdata the <i>capacity</i>(int) that is the length of the\n-   * bucket array, the <i>size</i>(int) of the hash map are emitted\n-   * first.  They are followed by size entries, each consisting of\n-   * a key (Object) and a value (Object).\n+   *\n+   * @param s the stream to write to\n+   * @throws IOException if the underlying stream fails\n+   * @serialData the <i>capacity</i>(int) that is the length of the\n+   *             bucket array, the <i>size</i>(int) of the hash map\n+   *             are emitted first.  They are followed by size entries,\n+   *             each consisting of a key (Object) and a value (Object).\n    */\n   private void writeObject(ObjectOutputStream s) throws IOException\n   {\n-    // the threshold and loadFactor fields\n+    // Write the threshold and loadFactor fields.\n     s.defaultWriteObject();\n \n     s.writeInt(buckets.length);\n     s.writeInt(size);\n-    Iterator it = entrySet().iterator();\n+    // Avoid creating a wasted Set by creating the iterator directly.\n+    Iterator it = iterator(ENTRIES);\n     while (it.hasNext())\n       {\n-\tMap.Entry entry = (Map.Entry) it.next();\n-\ts.writeObject(entry.getKey());\n-\ts.writeObject(entry.getValue());\n+        HashEntry entry = (HashEntry) it.next();\n+        s.writeObject(entry.key);\n+        s.writeObject(entry.value);\n       }\n   }\n \n   /**\n    * Deserializes this object from the given stream.\n-   * @serialdata the <i>capacity</i>(int) that is the length of the\n-   * bucket array, the <i>size</i>(int) of the hash map are emitted\n-   * first.  They are followed by size entries, each consisting of\n-   * a key (Object) and a value (Object).\n+   *\n+   * @param s the stream to read from\n+   * @throws ClassNotFoundException if the underlying stream fails\n+   * @throws IOException if the underlying stream fails\n+   * @serialData the <i>capacity</i>(int) that is the length of the\n+   *             bucket array, the <i>size</i>(int) of the hash map\n+   *             are emitted first.  They are followed by size entries,\n+   *             each consisting of a key (Object) and a value (Object).\n    */\n   private void readObject(ObjectInputStream s)\n     throws IOException, ClassNotFoundException\n   {\n-    // the threshold and loadFactor fields\n+    // Read the threshold and loadFactor fields.\n     s.defaultReadObject();\n \n-    int capacity = s.readInt();\n+    // Read and use capacity.\n+    buckets = new HashEntry[s.readInt()];\n     int len = s.readInt();\n-    size = 0;\n-    modCount = 0;\n-    buckets = new Entry[capacity];\n+    // Already happens automatically.\n+    // size = 0;\n+    // modCount = 0;\n \n-    for (int i = 0; i < len; i++)\n-      {\n-\tObject key = s.readObject();\n-\tObject value = s.readObject();\n-\tput(key, value);\n-      }\n+    // Read and use key/value pairs.\n+    for ( ; len > 0; len--)\n+      put(s.readObject(), s.readObject());\n   }\n \n   /**\n    * Iterate over HashMap's entries.\n    * This implementation is parameterized to give a sequential view of\n    * keys, values, or entries.\n    *\n-   * @author       Jon Zeppieri\n+   * @author Jon Zeppieri\n    */\n   class HashIterator implements Iterator\n   {\n-    static final int KEYS = 0,\n-                     VALUES = 1,\n-\t\t     ENTRIES = 2;\n-\t\t    \n-    // the type of this Iterator: KEYS, VALUES, or ENTRIES.\n-    int type;\n-    // the number of modifications to the backing Hashtable that we know about.\n-    int knownMod;\n-    // The total number of elements returned by next(). Used to determine if\n-    // there are more elements remaining.\n-    int count;\n-    // Current index in the physical hash table.\n-    int idx;\n-    // The last Entry returned by a next() call.\n-    Entry last;\n-    // The next entry that should be returned by next(). It is set to something\n-    // if we're iterating through a bucket that contains multiple linked \n-    // entries. It is null if next() needs to find a new bucket.\n-    Entry next;\n-\n-    /* construct a new HashtableIterator with the supllied type: \n-       KEYS, VALUES, or ENTRIES */\n+    /**\n+     * The type of this Iterator: {@link #KEYS}, {@link #VALUES},\n+     * or {@link #ENTRIES}.\n+     */\n+    final int type;\n+    /**\n+     * The number of modifications to the backing HashMap that we know about.\n+     */\n+    int knownMod = modCount;\n+    /** The number of elements remaining to be returned by next(). */\n+    int count = size;\n+    /** Current index in the physical hash table. */\n+    int idx = buckets.length;\n+    /** The last Entry returned by a next() call. */\n+    HashEntry last;\n+    /**\n+     * The next entry that should be returned by next(). It is set to something\n+     * if we're iterating through a bucket that contains multiple linked\n+     * entries. It is null if next() needs to find a new bucket.\n+     */\n+    HashEntry next;\n+\n+    /**\n+     * Construct a new HashIterator with the supplied type.\n+     * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}\n+     */\n     HashIterator(int type)\n     {\n       this.type = type;\n-      knownMod = HashMap.this.modCount;\n-      count = 0;\n-      idx = buckets.length;\n     }\n \n-    /** returns true if the Iterator has more elements */\n+    /**\n+     * Returns true if the Iterator has more elements.\n+     * @return true if there are more elements\n+     * @throws ConcurrentModificationException if the HashMap was modified\n+     */\n     public boolean hasNext()\n     {\n-      if (knownMod != HashMap.this.modCount)\n-\tthrow new ConcurrentModificationException();\n-      return count < size;\n+      if (knownMod != modCount)\n+        throw new ConcurrentModificationException();\n+      return count > 0;\n     }\n \n-    /** returns the next element in the Iterator's sequential view */\n+    /**\n+     * Returns the next element in the Iterator's sequential view.\n+     * @return the next element\n+     * @throws ConcurrentModificationException if the HashMap was modified\n+     * @throws NoSuchElementException if there is none\n+     */\n     public Object next()\n     {\n-      if (knownMod != HashMap.this.modCount)\n-\tthrow new ConcurrentModificationException();\n-      if (count == size)\n+      if (knownMod != modCount)\n+        throw new ConcurrentModificationException();\n+      if (count == 0)\n         throw new NoSuchElementException();\n-      count++;\n-      Entry e = null;\n-      if (next != null)\n-        e = next;\n+      count--;\n+      HashEntry e = next;\n \n       while (e == null)\n-        {\n-\t  e = buckets[--idx];\n-\t}\n+        e = buckets[--idx];\n \n       next = e.next;\n       last = e;\n@@ -688,25 +845,22 @@ else if (type == KEYS)\n       return e;\n     }\n \n-    /** \n-     * removes from the backing HashMap the last element which was fetched with the\n-     * <pre>next()</pre> method\n+    /**\n+     * Removes from the backing HashMap the last element which was fetched\n+     * with the <pre>next()</pre> method.\n+     * @throws ConcurrentModificationException if the HashMap was modified\n+     * @throws IllegalStateException if called when there is no last element\n      */\n     public void remove()\n     {\n-      if (knownMod != HashMap.this.modCount)\n-\tthrow new ConcurrentModificationException();\n+      if (knownMod != modCount)\n+        throw new ConcurrentModificationException();\n       if (last == null)\n-\t{\n-\t  throw new IllegalStateException();\n-\t}\n-      else\n-\t{\n-\t  HashMap.this.remove(last.key);\n-\t  knownMod++;\n-\t  count--;\n-\t  last = null;\n-\t}\n+        throw new IllegalStateException();\n+\n+      HashMap.this.remove(last.key);\n+      knownMod++;\n+      last = null;\n     }\n   }\n }"}, {"sha": "cc68c87da46df63e8cb6c5694729a0c1ca3222eb", "filename": "libjava/java/util/Iterator.java", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FIterator.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* Iterator.java -- Interface for iterating over collections\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -28,41 +28,49 @@\n package java.util;\n \n /**\n- * An object which iterates over a collection. An Iterator is used to return the\n- * items once only, in sequence, by successive calls to the next method. It is\n- * also possible to remove elements from the underlying collection by using the\n- * optional remove method. Iterator is intended as a replacement for the\n- * Enumeration interface of previous versions of Java, which did not have the\n- * remove method and had less conveniently named methods.\n+ * An object which iterates over a collection. An Iterator is used to return\n+ * the items once only, in sequence, by successive calls to the next method.\n+ * It is also possible to remove elements from the underlying collection by\n+ * using the optional remove method. Iterator is intended as a replacement\n+ * for the Enumeration interface of previous versions of Java, which did not\n+ * have the remove method and had less conveniently named methods.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Collection\n+ * @see ListIterator\n+ * @see Enumeration\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface Iterator\n {\n   /**\n-   * Tests whether there are elements remaining in the collection.\n+   * Tests whether there are elements remaining in the collection. In other\n+   * words, calling <code>next()</code> will not throw an exception.\n    *\n-   * @return true if there is at least one more element in the collection,\n-   *   that is, if the next call to next will not throw NoSuchElementException.\n+   * @return true if there is at least one more element in the collection\n    */\n   boolean hasNext();\n \n   /**\n    * Obtain the next element in the collection.\n    *\n    * @return the next element in the collection\n-   * @exception NoSuchElementException if there are no more elements\n+   * @throws NoSuchElementException if there are no more elements\n    */\n   Object next();\n \n   /**\n-   * Remove from the underlying collection the last element returned by next.\n-   * This method can be called only once after each call to next. It does not\n-   * affect what will be returned by subsequent calls to next. This operation is\n-   * optional, it may throw an UnsupportedOperationException.\n+   * Remove from the underlying collection the last element returned by next\n+   * (optional operation). This method can be called only once after each\n+   * call to <code>next()</code>. It does not affect what will be returned\n+   * by subsequent calls to next.\n    *\n-   * @exception IllegalStateException if next has not yet been called or remove\n-   *   has already been called since the last call to next.\n-   * @exception UnsupportedOperationException if this Iterator does not support\n-   *   the remove operation.\n+   * @throws IllegalStateException if next has not yet been called or remove\n+   *         has already been called since the last call to next.\n+   * @throws UnsupportedOperationException if this Iterator does not support\n+   *         the remove operation.\n    */\n   void remove();\n }"}, {"sha": "8950d58970b538b94d152a3c74d4df62921b3780", "filename": "libjava/java/util/LinkedHashMap.java", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FLinkedHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FLinkedHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLinkedHashMap.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -0,0 +1,474 @@\n+/* LinkedHashMap.java -- a class providing hashtable data structure,\n+   mapping Object --> Object, with linked list traversal\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.util;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+/**\n+ * This class provides a hashtable-backed implementation of the\n+ * Map interface, with predictable traversal order.\n+ * <p>\n+ *\n+ * It uses a hash-bucket approach; that is, hash collisions are handled\n+ * by linking the new node off of the pre-existing node (or list of\n+ * nodes).  In this manner, techniques such as linear probing (which\n+ * can cause primary clustering) and rehashing (which does not fit very\n+ * well with Java's method of precomputing hash codes) are avoided.  In\n+ * addition, this maintains a doubly-linked list which tracks either\n+ * insertion or access order.  Note that the insertion order is not\n+ * modified if a <code>put</code> simply reinserts a key in the map.\n+ * <p>\n+ *\n+ * One of the nice features of tracking insertion order is that you can\n+ * copy a hashtable, and regardless of the implementation of the original,\n+ * produce the same results when iterating over the copy.  This is possible\n+ * without needing the overhead of <code>TreeMap</code>.\n+ * <p>\n+ *\n+ * When using this {@link #LinkedHashMap(int, float, boolean) constructor},\n+ * you build an access-order mapping.  This can be used to implement LRU\n+ * caches, for example.  In this case, every invocation of <code>put</code>,\n+ * <code>putAll</code>, or <code>get</code> moves the accessed entry to\n+ * the end of the iteration list.  By overriding\n+ * {@link #removeEldestEntry(Map.Entry)}, you can also control the\n+ * removal of the oldest entry, and thereby do things like keep the map\n+ * at a fixed size.\n+ * <p>\n+ *\n+ * Under ideal circumstances (no collisions), LinkedHashMap offers O(1) \n+ * performance on most operations (<pre>containsValue()</pre> is,\n+ * of course, O(n)).  In the worst case (all keys map to the same \n+ * hash code -- very unlikely), most operations are O(n).\n+ * <p>\n+ *\n+ * LinkedHashMap accepts the null key and null values.  It is not\n+ * synchronized, so if you need multi-threaded access, consider using:<br>\n+ * <code>Map m = Collections.synchronizedMap(new LinkedHashMap(...));</code>\n+ * <p>\n+ *\n+ * The iterators are <i>fail-fast</i>, meaning that any structural\n+ * modification, except for <code>remove()</code> called on the iterator\n+ * itself, cause the iterator to throw a\n+ * {@link ConcurrentModificationException} rather than exhibit\n+ * non-deterministic behavior.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Object#hashCode()\n+ * @see Collection\n+ * @see Map\n+ * @see HashMap\n+ * @see TreeMap\n+ * @see Hashtable\n+ * @since 1.4\n+ */\n+public class LinkedHashMap extends HashMap\n+{\n+  /**\n+   * Compatible with JDK 1.4.\n+   */\n+  private static final long serialVersionUID = 3801124242820219131L;\n+\n+  /**\n+   * The first Entry to iterate over.\n+   */\n+  transient LinkedHashEntry head;\n+\n+  /**\n+   * The last Entry to iterate over.\n+   */\n+  transient LinkedHashEntry tail;\n+\n+  /**\n+   * The iteration order of this linked hash map: <code>true</code> for\n+   * access-order, <code>false</code> for insertion-order.\n+   * @serial\n+   */\n+  final boolean accessOrder;\n+\n+  /**\n+   * Class to represent an entry in the hash table. Holds a single key-value\n+   * pair and the doubly-linked insertion order list.\n+   */\n+  class LinkedHashEntry extends HashEntry\n+  {\n+    /** The predecessor in the iteration list, null if this is the eldest. */\n+    LinkedHashEntry pred;\n+    /** The successor in the iteration list, null if this is the newest. */\n+    LinkedHashEntry succ;\n+\n+    /**\n+     * Simple constructor.\n+     * @param key the key\n+     * @param value the value\n+     */\n+    LinkedHashEntry(Object key, Object value)\n+    {\n+      super(key, value);\n+      if (head == null)\n+        head = this;\n+      pred = tail;\n+      tail = this;\n+      if (pred != null)\n+        pred.succ = this;\n+    }\n+\n+    /**\n+     * Sets the value of this entry, and shuffles it to the end of\n+     * the list if this is in access-order.\n+     * @param value the new value\n+     * @return the prior value\n+     */\n+    public Object setValue(Object value)\n+    {\n+      if (accessOrder && succ != null)\n+        {\n+          succ.pred = pred;\n+          if (pred == null)\n+            head = succ;\n+          else\n+            pred.succ = succ;\n+          succ = null;\n+          pred = tail;\n+          pred.succ = this;\n+          tail = this;\n+        }\n+      return super.setValue(value);\n+    }\n+\n+    /**\n+     * Called when this entry is removed from the map. This version does\n+     * the necessary bookkeeping to keep the doubly-linked list in order.\n+     * @return the value of this key as it is removed\n+     */\n+    Object cleanup()\n+    {\n+      if (pred == null)\n+        head = succ;\n+      else\n+        pred.succ = succ;\n+      if (succ == null)\n+        tail = pred;\n+      else\n+        succ.pred = pred;\n+      \n+      return value;\n+    }\n+  }\n+\n+  /**\n+   * Construct a new insertion-ordered LinkedHashMap with the default\n+   * capacity (11) and the default load factor (0.75).\n+   */\n+  public LinkedHashMap()\n+  {\n+    super();\n+    accessOrder = false;\n+  }\n+\n+  /**\n+   * Construct a new insertion-ordered LinkedHashMap from the given Map,\n+   * with initial capacity the greater of the size of <code>m</code> or\n+   * the default of 11.\n+   * <p>\n+   *\n+   * Every element in Map m will be put into this new HashMap, in the\n+   * order of m's iterator.\n+   *\n+   * @param m a Map whose key / value pairs will be put into\n+   *          the new HashMap.  <b>NOTE: key / value pairs\n+   *          are not cloned in this constructor.</b>\n+   * @throws NullPointerException if m is null\n+   */\n+  public LinkedHashMap(Map m)\n+  {\n+    super(m);\n+    accessOrder = false;\n+  }\n+\n+  /**\n+   * Construct a new insertion-ordered LinkedHashMap with a specific\n+   * inital capacity and default load factor of 0.75.\n+   *\n+   * @param initialCapacity the initial capacity of this HashMap (>=0)\n+   * @throws IllegalArgumentException if (initialCapacity < 0)\n+   */\n+  public LinkedHashMap(int initialCapacity)\n+  {\n+    super(initialCapacity);\n+    accessOrder = false;\n+  }\n+\n+  /**\n+   * Construct a new insertion-orderd LinkedHashMap with a specific\n+   * inital capacity and load factor.\n+   *\n+   * @param initialCapacity the initial capacity (>=0)\n+   * @param loadFactor the load factor (>0, not NaN)\n+   * @throws IllegalArgumentException if (initialCapacity < 0) ||\n+   *                                     ! (loadFactor > 0.0)\n+   */\n+  public LinkedHashMap(int initialCapacity, float loadFactor)\n+  {\n+    super(initialCapacity, loadFactor);\n+    accessOrder = false;\n+  }\n+\n+  /**\n+   * Construct a new LinkedHashMap with a specific inital capacity, load\n+   * factor, and ordering mode.\n+   *\n+   * @param initialCapacity the initial capacity (>=0)\n+   * @param loadFactor the load factor (>0, not NaN)\n+   * @param accessOrder true for access-order, false for insertion-order\n+   * @throws IllegalArgumentException if (initialCapacity < 0) ||\n+   *                                     ! (loadFactor > 0.0)\n+   */\n+  public LinkedHashMap(int initialCapacity, float loadFactor,\n+                       boolean accessOrder)\n+  {\n+    super(initialCapacity, loadFactor);\n+    this.accessOrder = accessOrder;\n+  }\n+\n+  /**\n+   * Clears the Map so it has no keys. This is O(1).\n+   */\n+  public void clear()\n+  {\n+    super.clear();\n+    head = null;\n+    tail = null;\n+  }\n+\n+  /**\n+   * Returns true if this HashMap contains a value <pre>o</pre>, such that\n+   * <pre>o.equals(value)</pre>.\n+   *\n+   * @param value the value to search for in this HashMap\n+   * @return true if at least one key maps to the value\n+   */\n+  public boolean containsValue(Object value)\n+  {\n+    LinkedHashEntry e = head;\n+    while (e != null)\n+      {\n+        if (value == null ? e.value == null : value.equals(e.value))\n+          return true;\n+        e = e.succ;\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Return the value in this Map associated with the supplied key,\n+   * or <pre>null</pre> if the key maps to nothing.  If this is an\n+   * access-ordered Map and the key is found, this performs structural\n+   * modification, moving the key to the newest end of the list. NOTE:\n+   * Since the value could also be null, you must use containsKey to\n+   * see if this key actually maps to something.\n+   *\n+   * @param key the key for which to fetch an associated value\n+   * @return what the key maps to, if present\n+   * @see #put(Object, Object)\n+   * @see #containsKey(Object)\n+   */\n+  public Object get(Object key)\n+  {\n+    int idx = hash(key);\n+    HashEntry e = buckets[idx];\n+    while (e != null)\n+      {\n+        if (key == null ? e.key == null : key.equals(e.key))\n+          {\n+            if (accessOrder)\n+              {\n+                modCount++;\n+                LinkedHashEntry l = (LinkedHashEntry) e;\n+                if (l.succ != null)\n+                  {\n+                    l.succ.pred = l.pred;\n+                    if (l.pred == null)\n+                      head = l.succ;\n+                    else\n+                      l.pred.succ = l.succ;\n+                    l.succ = null;\n+                    l.pred = tail;\n+                    tail.succ = l;\n+                    tail = l;\n+                  }\n+              }\n+            return e.value;\n+          }\n+        e = e.next;\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns <code>true</code> if this map should remove the eldest entry.\n+   * This method is invoked by all calls to <code>put</code> and\n+   * <code>putAll</code> which place a new entry in the map, providing\n+   * the implementer an opportunity to remove the eldest entry any time\n+   * a new one is added.  This can be used to save memory usage of the\n+   * hashtable, as well as emulating a cache, by deleting stale entries.\n+   * <p>\n+   *\n+   * For example, to keep the Map limited to 100 entries, override as follows:\n+   * <pre>\n+   * private static final int MAX_ENTRIES = 100;\n+   *\n+   * protected boolean removeEldestEntry(Map.Entry eldest)\n+   * {\n+   *   return size() > MAX_ENTRIES;\n+   * }\n+   * </pre><p>\n+   *\n+   * Typically, this method does not modify the map, but just uses the\n+   * return value as an indication to <code>put</code> whether to proceed.\n+   * However, if you override it to modify the map, you must return false\n+   * (indicating that <code>put</code> should do nothing), or face\n+   * unspecified behavior.\n+   * <p>\n+   *\n+   * This method is called after the eldest entry has been inserted, so\n+   * if <code>put</code> was called on a previously empty map, the eldest\n+   * entry is the one you just put in! The default implementation just\n+   * returns <code>false</code>, so that this map always behaves like\n+   * a normal one with unbounded growth.\n+   *\n+   * @param eldest the eldest element which would be removed if this\n+   *        returns true. For an access-order map, this is the least\n+   *        recently accessed; for an insertion-order map, this is the\n+   *        earliest element inserted.\n+   * @return true if <code>eldest</code> should be removed\n+   */\n+  protected boolean removeEldestEntry(Map.Entry eldest)\n+  {\n+    return false;\n+  }\n+\n+  /** Helper method called by <code>put</code>, which creates and adds a\n+   * new Entry, followed by performing bookkeeping (like removeEldestEntry).\n+   *\n+   * @param key the key of the new Entry\n+   * @param value the value\n+   * @param idx the index in buckets where the new Entry belongs\n+   * @param callRemove Whether to call the removeEldestEntry method.\n+   * @see #put(Object, Object)\n+   * @see #removeEldestEntry(Map.Entry)\n+   */\n+  void addEntry(Object key, Object value, int idx, boolean callRemove)\n+  {\n+    LinkedHashEntry e = new LinkedHashEntry(key, value);\n+\n+    e.next = buckets[idx];\n+    buckets[idx] = e;\n+\n+    if (callRemove && removeEldestEntry(head))\n+      remove(head);\n+  }\n+\n+  void putAllInternal(Map m)\n+  {\n+    head = null;\n+    tail = null;\n+    super.putAllInternal(m);\n+  }\n+\n+  /**\n+   * Generates a parameterized iterator. This allows traversal to follow\n+   * the doubly-linked list instead of the random bin order of HashMap.\n+   * @param type {@link #KEYS}, {@link #VALUES}, or {@link #ENTRIES}\n+   * @return the appropriate iterator\n+   */\n+  Iterator iterator(final int type)\n+  {\n+    return new Iterator()\n+    {\n+      /** The current Entry */\n+      LinkedHashEntry current = head;\n+\n+      /** The previous Entry returned by next() */\n+      LinkedHashEntry last;\n+\n+      /** The number of known modifications to the backing HashMap */\n+      int knownMod = modCount;\n+\n+      /**\n+       * Returns true if the Iterator has more elements.\n+       * @return true if there are more elements\n+       * @throws ConcurrentModificationException if the HashMap was modified\n+       */\n+      public boolean hasNext()\n+      {\n+        if (knownMod != modCount)\n+          throw new ConcurrentModificationException();\n+        return current != null;\n+      }\n+\n+      /**\n+       * Returns the next element in the Iterator's sequential view.\n+       * @return the next element\n+       * @throws ConcurrentModificationException if the HashMap was modified\n+       * @throws NoSuchElementException if there is none\n+       */\n+      public Object next()\n+      {\n+        if (knownMod != modCount)\n+          throw new ConcurrentModificationException();\n+        if (current == null)\n+          throw new NoSuchElementException();\n+        last = current;\n+        current = current.succ;\n+        return type == VALUES ? last.value : type == KEYS ? last.key : last;\n+      }\n+      \n+      /**\n+       * Removes from the backing HashMap the last element which was fetched\n+       * with the <pre>next()</pre> method.\n+       * @throws ConcurrentModificationException if the HashMap was modified\n+       * @throws IllegalStateException if called when there is no last element\n+       */\n+      public void remove()\n+      {\n+        if (knownMod != modCount)\n+          throw new ConcurrentModificationException();\n+        if (last == null)\n+          throw new IllegalStateException();\n+\n+        LinkedHashMap.this.remove(last.key);\n+        knownMod++;\n+        last = null;\n+      }\n+    };\n+  }\n+}"}, {"sha": "25892d73cdcf05c49556d775c6f3c81110b525cd", "filename": "libjava/java/util/List.java", "status": "modified", "additions": 207, "deletions": 138, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FList.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* List.java -- An ordered collection which allows indexed access\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -25,131 +25,179 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Doc comment for the interface itself needs to be put into english.\n-// ~ Some more @see clauses might be nice.\n-\n package java.util;\n \n /**\n- * [This is what this doc comment will mention:\n- * ~ Additional restrictions on some methods. Others included for completeness.\n- * ~ ListIterator and what it can do\n- * ~ Positional and iterated access\n- * ~ search (but linear time)\n- * ~ be careful when containing self as an element, because equals and hashCode\n- *   loop.]\n+ * An ordered collection (also known as a list). This collection allows\n+ * access to elements by position, as well as control on where elements\n+ * are inserted. Unlike sets, duplicate elements are permitted by this\n+ * general contract (if a subclass forbids duplicates, this should be\n+ * documented).\n+ * <p>\n+ *\n+ * List places additional requirements on <code>iterator</code>,\n+ * <code>add</code>, <code>remove</code>, <code>equals</code>, and\n+ * <code>hashCode</code>, in addition to requiring more methods. List\n+ * indexing is 0-based (like arrays), although some implementations may\n+ * require time proportional to the index to obtain an arbitrary element.\n+ * The List interface is incompatible with Set; you cannot implement both\n+ * simultaneously.\n+ * <p>\n+ *\n+ * Lists also provide a <code>ListIterator</code> which allows bidirectional\n+ * traversal and other features atop regular iterators. Lists can be\n+ * searched for arbitrary elements, and allow easy insertion and removal\n+ * of multiple elements in one method call.\n+ * <p>\n+ *\n+ * Note: While lists may contain themselves as elements, this leads to\n+ * undefined (usually infinite recursive) behavior for some methods like\n+ * hashCode or equals.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Collection\n+ * @see Set\n+ * @see ArrayList\n+ * @see LinkedList\n+ * @see Vector\n+ * @see Arrays#asList(Object[])\n+ * @see Collections#nCopies(int, Object)\n+ * @see Collections#EMPTY_LIST\n+ * @see AbstractList\n+ * @see AbstractSequentialList\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface List extends Collection\n {\n   /**\n-   * Insert an element into the list at a given position.\n+   * Insert an element into the list at a given position (optional operation).\n+   * This shifts all existing elements from that position to the end one\n+   * index to the right. This version of add has no return, since it is\n+   * assumed to always succeed if there is no exception.\n    *\n-   * @param index the location to insert the item.\n-   * @param o the object to insert.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   add operation.\n-   * @exception IndexOutOfBoundsException if index < 0 || index > size()\n-   * @exception ClassCastException if o cannot be added to this list due to its\n-   *   type.\n-   * @exception IllegalArgumentException if o cannot be added to this list for\n-   *   some other reason.\n+   * @param index the location to insert the item\n+   * @param o the object to insert\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         add operation\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n+   * @throws ClassCastException if o cannot be added to this list due to its\n+   *         type\n+   * @throws IllegalArgumentException if o cannot be added to this list for\n+   *         some other reason\n    */\n   void add(int index, Object o);\n \n   /**\n-   * Add an element to the end of the list.\n+   * Add an element to the end of the list (optional operation). If the list\n+   * imposes restraints on what can be inserted, such as no null elements,\n+   * this should be documented.\n    *\n-   * @param o the object to add.\n-   * @returns true, as Collection defines this method as returning true if the\n-   *   list was modified as a result of this action, and it always is for a\n-   *   list.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   add operation.\n-   * @exception ClassCastException if o cannot be added to this list due to its\n-   *   type.\n-   * @exception IllegalArgumentException if o cannot be added to this list for\n-   *   some other reason.\n+   * @param o the object to add\n+   * @return true, as defined by Collection for a modified list\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         add operation\n+   * @throws ClassCastException if o cannot be added to this list due to its\n+   *         type\n+   * @throws IllegalArgumentException if o cannot be added to this list for\n+   *         some other reason\n    */\n   boolean add(Object o);\n \n   /**\n-   * Insert the contents of a collection into the list at a given position.\n+   * Insert the contents of a collection into the list at a given position\n+   * (optional operation). Shift all elements at that position to the right\n+   * by the number of elements inserted. This operation is undefined if\n+   * this list is modified during the operation (for example, if you try\n+   * to insert a list into itself).\n    *\n-   * @param index the location to insert the collection.\n-   * @param c the collection to insert.\n-   * @returns true if the list was modified by this action, that is, if c is\n-   *   non-empty.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   addAll operation.\n-   * @exception IndexOutOfBoundsException if index < 0 || index > size()\n-   * @exception ClassCastException if some element of c cannot be added to this\n-   *   list due to its type.\n-   * @exception IllegalArgumentException if some element of c cannot be added\n-   *   to this list for some other reason.\n+   * @param index the location to insert the collection\n+   * @param c the collection to insert\n+   * @return true if the list was modified by this action, that is, if c is\n+   *         non-empty\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         addAll operation\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n+   * @throws ClassCastException if some element of c cannot be added to this\n+   *         list due to its type\n+   * @throws IllegalArgumentException if some element of c cannot be added\n+   *         to this list for some other reason\n+   * @throws NullPointerException if the specified collection is null\n+   * @see #add(int, Object)\n    */\n   boolean addAll(int index, Collection c);\n \n   /**\n-   * Add the contents of a collection to the end of the list.\n+   * Add the contents of a collection to the end of the list (optional\n+   * operation).  This operation is undefined if this list is modified\n+   * during the operation (for example, if you try to insert a list into\n+   * itself).\n    *\n-   * @param c the collection to add.\n-   * @returns true if the list was modified by this action, that is, if c is\n-   *   non-empty.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   addAll operation.\n-   * @exception ClassCastException if some element of c cannot be added to this\n-   *   list due to its type.\n-   * @exception IllegalArgumentException if some element of c cannot be added\n-   *   to this list for some other reason.\n+   * @param c the collection to add\n+   * @return true if the list was modified by this action, that is, if c is\n+   *         non-empty\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         addAll operation\n+   * @throws ClassCastException if some element of c cannot be added to this\n+   *         list due to its type\n+   * @throws IllegalArgumentException if some element of c cannot be added\n+   *         to this list for some other reason\n+   * @throws NullPointerException if the specified collection is null\n+   * @see #add(Object)\n    */\n   boolean addAll(Collection c);\n \n   /**\n    * Clear the list, such that a subsequent call to isEmpty() would return\n-   * true.\n+   * true (optional operation).\n    *\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   clear operation.\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         clear operation\n    */\n   void clear();\n \n   /**\n    * Test whether this list contains a given object as one of its elements.\n+   * This is defined as the existence of an element e such that\n+   * <code>o == null ? e == null : o.equals(e)</code>.\n    *\n-   * @param o the element to look for.\n-   * @returns true if this list contains an element e such that <code>o ==\n-   *   null ? e == null : o.equals(e)</code>.\n+   * @param o the element to look for\n+   * @return true if this list contains the element\n    */\n   boolean contains(Object o);\n \n   /**\n    * Test whether this list contains every element in a given collection.\n    *\n-   * @param c the collection to test for.\n-   * @returns true if for every element o in c, contains(o) would return true.\n+   * @param c the collection to test for\n+   * @return true if for every element o in c, contains(o) would return true\n+   * @throws NullPointerException if the collection is null\n+   * @see #contains(Object)\n    */\n   boolean containsAll(Collection c);\n \n   /**\n    * Test whether this list is equal to another object. A List is defined to be\n    * equal to an object if and only if that object is also a List, and the two\n-   * lists are equal. Two lists l1 and l2 are defined to be equal if and only\n+   * lists have the same sequence. Two lists l1 and l2 are equal if and only\n    * if <code>l1.size() == l2.size()</code>, and for every integer n between 0\n    * and <code>l1.size() - 1</code> inclusive, <code>l1.get(n) == null ?\n    * l2.get(n) == null : l1.get(n).equals(l2.get(n))</code>.\n    *\n-   * @param o the object to test for equality with this list.\n-   * @returns true if o is equal to this list.\n+   * @param o the object to test for equality with this list\n+   * @return true if o is equal to this list\n+   * @see Object#equals(Object)\n+   * @see #hashCode()\n    */\n   boolean equals(Object o);\n \n   /**\n    * Get the element at a given index in this list.\n    *\n-   * @param index the index of the element to be returned.\n-   * @returns the element at index index in this list.\n-   * @exception IndexOutOfBoundsException if index < 0 || index >= size()\n+   * @param index the index of the element to be returned\n+   * @return the element at index index in this list\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n    */\n   Object get(int index);\n \n@@ -159,157 +207,177 @@ public interface List extends Collection\n    * <pre>\n    *   hashCode = 1;\n    *   Iterator i = list.iterator();\n-   *   while (i.hasNext()) {\n-   *     Object obj = i.next();\n-   *     hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode());\n-   *   }\n+   *   while (i.hasNext())\n+   *     {\n+   *       Object obj = i.next();\n+   *       hashCode = 31 * hashCode + (obj == null ? 0 : obj.hashCode());\n+   *     }\n    * </pre>\n    * This ensures that the general contract of Object.hashCode() is adhered to.\n    *\n-   * @returns the hash code of this list.\n+   * @return the hash code of this list\n+   * @see Object#hashCode()\n+   * @see #equals(Object)\n    */\n   int hashCode();\n \n   /**\n    * Obtain the first index at which a given object is to be found in this\n    * list.\n    *\n-   * @returns the least integer n such that <code>o == null ? get(n) == null :\n-   *   o.equals(get(n))</code>, or -1 if there is no such index.\n+   * @param o the object to search for\n+   * @return the least integer n such that <code>o == null ? get(n) == null :\n+   *         o.equals(get(n))</code>, or -1 if there is no such index\n    */\n   int indexOf(Object o);\n \n   /**\n    * Test whether this list is empty, that is, if size() == 0.\n    *\n-   * @returns true if this list contains no elements.\n+   * @return true if this list contains no elements\n    */\n   boolean isEmpty();\n \n   /**\n-   * Obtain an Iterator over this list.\n+   * Obtain an Iterator over this list, whose sequence is the list order.\n    *\n-   * @returns an Iterator over the elements of this list, in order.\n+   * @return an Iterator over the elements of this list, in order\n    */\n   Iterator iterator();\n \n   /**\n    * Obtain the last index at which a given object is to be found in this\n    * list.\n    *\n-   * @returns the greatest integer n such that <code>o == null ? get(n) == null\n-   *   : o.equals(get(n))</code>.\n+   * @return the greatest integer n such that <code>o == null ? get(n) == null\n+   *         : o.equals(get(n))</code>, or -1 if there is no such index\n    */\n   int lastIndexOf(Object o);\n \n   /**\n    * Obtain a ListIterator over this list, starting at the beginning.\n    *\n-   * @returns a ListIterator over the elements of this list, in order, starting\n-   *   at the beginning.\n+   * @return a ListIterator over the elements of this list, in order, starting\n+   *         at the beginning\n    */\n   ListIterator listIterator();\n \n   /**\n    * Obtain a ListIterator over this list, starting at a given position.\n+   * A first call to next() would return the same as get(index), and a\n+   * first call to previous() would return the same as get(index - 1).\n    *\n    * @param index the position, between 0 and size() inclusive, to begin the\n-   *   iteration from.\n-   * @returns a ListIterator over the elements of this list, in order, starting\n-   *   at index.\n-   * @exception IndexOutOfBoundsException if index < 0 || index > size()\n+   *        iteration from\n+   * @return a ListIterator over the elements of this list, in order, starting\n+   *         at index\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n    */\n   ListIterator listIterator(int index);\n \n   /**\n-   * Remove the element at a given position in this list.\n+   * Remove the element at a given position in this list (optional operation).\n+   * Shifts all remaining elements to the left to fill the gap.\n    *\n-   * @param index the position within the list of the object to remove.\n-   * @returns the object that was removed.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   remove operation.\n-   * @exception IndexOutOfBoundsException if index < 0 || index > size()\n+   * @param index the position within the list of the object to remove\n+   * @return the object that was removed\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         remove operation\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n    */\n   Object remove(int index);\n \n   /**\n-   * Remove the first occurence of an object from this list. That is, remove\n-   * the first element e such that <code>o == null ? e == null :\n-   * o.equals(e)</code>.\n+   * Remove the first occurence of an object from this list (optional\n+   * operation). That is, remove the first element e such that\n+   * <code>o == null ? e == null : o.equals(e)</code>.\n    *\n-   * @param o the object to remove.\n-   * @returns true if the list changed as a result of this call, that is, if\n-   *   the list contained at least one occurrence of o.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   remove operation.\n+   * @param o the object to remove\n+   * @return true if the list changed as a result of this call, that is, if\n+   *         the list contained at least one occurrence of o\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         remove operation\n    */\n   boolean remove(Object o);\n \n   /**\n-   * Remove all elements of a given collection from this list. That is, remove\n-   * every element e such that c.contains(e).\n+   * Remove all elements of a given collection from this list (optional\n+   * operation). That is, remove every element e such that c.contains(e).\n    *\n-   * @returns true if this list was modified as a result of this call.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   removeAll operation.\n+   * @param c the collection to filter out\n+   * @return true if this list was modified as a result of this call\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         removeAll operation\n+   * @throws NullPointerException if the collection is null\n+   * @see #remove(Object)\n+   * @see #contains(Object)\n    */\n   boolean removeAll(Collection c);\n \n   /**\n    * Remove all elements of this list that are not contained in a given\n-   * collection. That is, remove every element e such that !c.contains(e).\n+   * collection (optional operation). That is, remove every element e such\n+   * that !c.contains(e).\n    *\n-   * @returns true if this list was modified as a result of this call.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   retainAll operation.\n+   * @param c the collection to retain\n+   * @return true if this list was modified as a result of this call\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         retainAll operation\n+   * @throws NullPointerException if the collection is null\n+   * @see #remove(Object)\n+   * @see #contains(Object)\n    */\n   boolean retainAll(Collection c);\n \n   /**\n-   * Replace an element of this list with another object.\n+   * Replace an element of this list with another object (optional operation).\n    *\n-   * @param index the position within this list of the element to be replaced.\n-   * @param o the object to replace it with.\n-   * @returns the object that was replaced.\n-   * @exception UnsupportedOperationException if this list does not support the\n-   *   set operation.\n-   * @exception IndexOutOfBoundsException if index < 0 || index >= size()\n-   * @exception ClassCastException if o cannot be added to this list due to its\n-   *   type.\n-   * @exception IllegalArgumentException if o cannot be added to this list for\n-   *   some other reason.\n+   * @param index the position within this list of the element to be replaced\n+   * @param o the object to replace it with\n+   * @return the object that was replaced\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         set operation\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n+   * @throws ClassCastException if o cannot be added to this list due to its\n+   *         type\n+   * @throws IllegalArgumentException if o cannot be added to this list for\n+   *         some other reason\n    */\n   Object set(int index, Object o);\n \n   /**\n-   * Get the number of elements in this list.\n+   * Get the number of elements in this list. If the list contains more\n+   * than Integer.MAX_VALUE elements, return Integer.MAX_VALUE.\n    *\n-   * @returns the number of elements in the list.\n+   * @return the number of elements in the list\n    */\n   int size();\n \n   /**\n    * Obtain a List view of a subsection of this list, from fromIndex\n-   * (inclusive) to toIndex (exclusive). The returned list should be modifiable\n-   * if and only if this list is modifiable. Changes to the returned list\n-   * should be reflected in this list. If this list is structurally modified in\n+   * (inclusive) to toIndex (exclusive). If the two indices are equal, the\n+   * sublist is empty. The returned list should be modifiable if and only\n+   * if this list is modifiable. Changes to the returned list should be\n+   * reflected in this list. If this list is structurally modified in\n    * any way other than through the returned list, the result of any subsequent\n    * operations on the returned list is undefined.\n    *\n    * @param fromIndex the index that the returned list should start from\n-   *    (inclusive).\n-   * @param toIndex the index that the returned list should go to (exclusive).\n-   * @returns a List backed by a subsection of this list.\n-   * @exception IndexOutOfBoundsException if fromIndex < 0 || toIndex > size()\n-   *   || fromIndex > toIndex.\n+   *        (inclusive)\n+   * @param toIndex the index that the returned list should go to (exclusive)\n+   * @return a List backed by a subsection of this list\n+   * @throws IndexOutOfBoundsException if fromIndex &lt; 0\n+   *         || toIndex &gt; size() || fromIndex &gt; toIndex\n+   * @throws IllegalArgumentException if fromIndex &gt; toIndex (according to\n+   *         AbstractList). Don't you love Sun's inconsistent specifications?\n    */\n   List subList(int fromIndex, int toIndex);\n \n   /**\n    * Copy the current contents of this list into an array.\n    *\n-   * @returns an array of type Object[] and length equal to the length of this\n-   *   list, containing the elements currently in this list, in order.\n+   * @return an array of type Object[] and length equal to the length of this\n+   *         list, containing the elements currently in this list, in order\n    */\n   Object[] toArray();\n \n@@ -323,11 +391,12 @@ public interface List extends Collection\n    * Note: The fact that the following element is set to null is only useful\n    * if it is known that this list does not contain any null elements.\n    *\n-   * @param a the array to copy this list into.\n-   * @returns an array containing the elements currently in this list, in\n-   *    order.\n-   * @exception ArrayStoreException if the type of any element of the\n-   *   collection is not a subtype of the element type of a.\n+   * @param a the array to copy this list into\n+   * @return an array containing the elements currently in this list, in\n+   *         order\n+   * @throws ArrayStoreException if the type of any element of the\n+   *         collection is not a subtype of the element type of a\n+   * @throws NullPointerException if the specified array is null\n    */\n   Object[] toArray(Object[] a);\n }"}, {"sha": "92f49371a8c271b2e6555a21fa41622925106f40", "filename": "libjava/java/util/ListIterator.java", "status": "modified", "additions": 65, "deletions": 53, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FListIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FListIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FListIterator.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* ListIterator.java -- Extended Iterator for iterating over ordered lists\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -32,116 +32,128 @@\n  * elements may be accessed in forward or reverse order, elements may be\n  * replaced as well as removed, and new elements may be inserted, during the\n  * traversal of the list.\n+ * <p>\n+ *\n+ * A list with n elements provides n+1 iterator positions (the front, the end,\n+ * or between two elements). Note that <code>remove</code> and <code>set</code>\n+ * operate on the last element returned, whether it was by <code>next</code>\n+ * or <code>previous</code>.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Collection\n+ * @see List\n+ * @see Iterator\n+ * @see Enumeration\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface ListIterator extends Iterator\n {\n   /**\n    * Tests whether there are elements remaining in the list in the forward\n-   * direction.\n+   * direction. In other words, next() will not fail with a\n+   * NoSuchElementException.\n    *\n-   * @return true if there is at least one more element in the list in the\n-   *   forward direction, that is, if the next call to next will not throw\n-   *   NoSuchElementException.\n+   * @return true if the list continues in the forward direction\n    */\n   boolean hasNext();\n \n   /**\n    * Tests whether there are elements remaining in the list in the reverse\n-   * direction.\n+   * direction. In other words, previous() will not fail with a\n+   * NoSuchElementException.\n    *\n-   * @return true if there is at least one more element in the list in the\n-   *   reverse direction, that is, if the next call to previous will not throw\n-   *   NoSuchElementException.\n+   * @return true if the list continues in the reverse direction\n    */\n   boolean hasPrevious();\n \n   /**\n    * Obtain the next element in the list in the forward direction. Repeated\n-   * calls to next may be used to iterate over the entire list, or calls to next\n-   * and previous may be used together to go forwards and backwards. Alternating\n-   * calls to next and previous will return the same element.\n+   * calls to next may be used to iterate over the entire list, or calls to\n+   * next and previous may be used together to go forwards and backwards.\n+   * Alternating calls to next and previous will return the same element.\n    *\n    * @return the next element in the list in the forward direction\n-   * @exception NoSuchElementException if there are no more elements\n+   * @throws NoSuchElementException if there are no more elements\n    */\n   Object next();\n \n   /**\n    * Obtain the next element in the list in the reverse direction. Repeated\n-   * calls to previous may be used to iterate backwards over the entire list, or\n-   * calls to next and previous may be used together to go forwards and\n+   * calls to previous may be used to iterate backwards over the entire list,\n+   * or calls to next and previous may be used together to go forwards and\n    * backwards. Alternating calls to next and previous will return the same\n    * element.\n    *\n    * @return the next element in the list in the reverse direction\n-   * @exception NoSuchElementException if there are no more elements\n+   * @throws NoSuchElementException if there are no more elements\n    */\n   Object previous();\n \n   /**\n    * Find the index of the element that would be returned by a call to next.\n+   * If hasNext() returns false, this returns the list size.\n    *\n-   * @return the index of the element that would be returned by a call to next,\n-   *   or list.size() if the iterator is at the end of the list.\n+   * @return the index of the element that would be returned by next()\n    */\n   int nextIndex();\n \n   /**\n-   * Find the index of the element that would be returned by a call to previous.\n+   * Find the index of the element that would be returned by a call to\n+   * previous. If hasPrevious() returns false, this returns -1.\n    *\n-   * @return the index of the element that would be returned by a call to\n-   *   previous, or -1 if the iterator is at the beginning of the list.\n+   * @return the index of the element that would be returned by previous()\n    */\n   int previousIndex();\n \n   /**\n-   * Insert an element into the list at the current position of the iterator.\n-   * The element is inserted in between the element that would be returned by\n-   * previous and the element that would be returned by next. After the\n-   * insertion, a subsequent call to next is unaffected, but a call to\n-   * previous returns the item that was added. This operation is optional, it\n-   * may throw an UnsupportedOperationException.\n+   * Insert an element into the list at the current position of the iterator\n+   * (optional operation). The element is inserted in between the element that\n+   * would be returned by previous and the element that would be returned by\n+   * next. After the insertion, a subsequent call to next is unaffected, but\n+   * a call to previous returns the item that was added. The values returned\n+   * by nextIndex() and previousIndex() are incremented.\n    *\n    * @param o the object to insert into the list\n-   * @exception ClassCastException the object is of a type which cannot be added\n-   *   to this list\n-   * @exception IllegalArgumentException some other aspect of the object stops\n-   *   it being added to this list\n-   * @exception UnsupportedOperationException if this ListIterator does not\n-   *   support the add operation\n+   * @throws ClassCastException the object is of a type which cannot be added\n+   *         to this list\n+   * @throws IllegalArgumentException some other aspect of the object stops\n+   *         it being added to this list\n+   * @throws UnsupportedOperationException if this ListIterator does not\n+   *         support the add operation\n    */\n   void add(Object o);\n \n   /**\n    * Remove from the list the element last returned by a call to next or\n-   * previous. This method may only be called if neither add nor remove have\n-   * been called since the last call to next or previous. This operation is\n-   * optional, it may throw an UnsupportedOperationException.\n+   * previous (optional operation). This method may only be called if neither\n+   * add nor remove have been called since the last call to next or previous.\n    *\n-   * @exception IllegalStateException if neither next or previous have been\n-   *   called, or if add or remove has been called since the last call to next\n-   *   or previous.\n-   * @exception UnsupportedOperationException if this ListIterator does not\n-   *   support the remove operation.\n+   * @throws IllegalStateException if neither next or previous have been\n+   *         called, or if add or remove has been called since the last call\n+   *         to next or previous\n+   * @throws UnsupportedOperationException if this ListIterator does not\n+   *         support the remove operation\n    */\n   void remove();\n \n   /**\n    * Replace the element last returned by a call to next or previous with a\n-   * given object. This method may only be called if neither add nor remove have\n-   * been called since the last call to next or previous. This operation is\n-   * optional, it may throw an UnsupportedOperationException.\n+   * given object (optional operation). This method may only be called if\n+   * neither add nor remove have been called since the last call to next or\n+   * previous.\n    *\n    * @param o the object to replace the element with\n-   * @exception ClassCastException the object is of a type which cannot be added\n-   *   to this list\n-   * @exception IllegalArgumentException some other aspect of the object stops\n-   *   it being added to this list\n-   * @exception IllegalStateException if neither next or previous have been\n-   *   called, or if add or remove has been called since the last call to next\n-   *   or previous.\n-   * @exception UnsupportedOperationException if this ListIterator does not\n-   *   support the set operation.\n+   * @throws ClassCastException the object is of a type which cannot be added\n+   *         to this list\n+   * @throws IllegalArgumentException some other aspect of the object stops\n+   *         it being added to this list\n+   * @throws IllegalStateException if neither next or previous have been\n+   *         called, or if add or remove has been called since the last call\n+   *         to next or previous\n+   * @throws UnsupportedOperationException if this ListIterator does not\n+   *         support the set operation\n    */\n   void set(Object o);\n }"}, {"sha": "2cd22b32e05874f66849ea213074b7190ba71d37", "filename": "libjava/java/util/Map.java", "status": "modified", "additions": 265, "deletions": 5, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FMap.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,6 @@\n-/* Map.java -- An object that maps keys to values\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* Map.java: interface Map -- An object that maps keys to values\n+             interface Map.Entry -- an Entry in a Map\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -25,34 +26,293 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Doc comments for everything.\n-\n package java.util;\n \n+/**\n+ * An object that maps keys onto values. Keys cannot be duplicated. This\n+ * interface replaces the obsolete {@link Dictionary} abstract class.\n+ * <p>\n+ *\n+ * The map has three collection views, which are backed by the map\n+ * (modifications on one show up on the other): a set of keys, a collection\n+ * of values, and a set of key-value mappings. Some maps have a guaranteed\n+ * order, but not all do.\n+ * <p>\n+ *\n+ * Note: Be careful about using mutable keys.  Behavior is unspecified if\n+ * a key's comparison behavior is changed after the fact.  As a corollary\n+ * to this rule, don't use a Map as one of its own keys or values, as it makes\n+ * hashCode and equals have undefined behavior.\n+ * <p>\n+ *\n+ * All maps are recommended to provide a no argument constructor, which builds\n+ * an empty map, and one that accepts a Map parameter and copies the mappings\n+ * (usually by putAll), to create an equivalent map.  Unfortunately, Java\n+ * cannot enforce these suggestions.\n+ * <p>\n+ *\n+ * The map may be unmodifiable, in which case unsupported operations will\n+ * throw an UnsupportedOperationException.  Note that some operations may be\n+ * safe, such as putAll(m) where m is empty, even if the operation would\n+ * normally fail with a non-empty argument.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see HashMap\n+ * @see TreeMap\n+ * @see Hashtable\n+ * @see SortedMap\n+ * @see Collection\n+ * @see Set\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public interface Map\n {\n+  /**\n+   * Remove all entries from this Map (optional operation).\n+   *\n+   * @throws UnsupportedOperationException if clear is not supported\n+   */\n   public void clear();\n+\n+  /**\n+   * Returns true if this contains a mapping for the given key.\n+   *\n+   * @param key the key to search for\n+   * @return true if the map contains the key\n+   * @throws ClassCastException if the key is of an inappropriate type\n+   * @throws NullPointerException if key is <code>null</code> but the map\n+   *         does not permit null keys\n+   */\n   public boolean containsKey(Object key);\n+\n+  /**\n+   * Returns true if this contains at least one mapping with the given value.\n+   * In other words, returns true if a value v exists where\n+   * <code>(value == null ? v == null : value.equals(v))</code>. This usually\n+   * requires linear time.\n+   *\n+   * @param value the value to search for\n+   * @return true if the map contains the value\n+   */\n   public boolean containsValue(Object value);\n+\n+  /**\n+   * Returns a set view of the mappings in this Map.  Each element in the\n+   * set is a Map.Entry.  The set is backed by the map, so that changes in\n+   * one show up in the other.  Modifications made while an iterator is\n+   * in progress cause undefined behavior.  If the set supports removal,\n+   * these methods remove the underlying mapping from the map:\n+   * <code>Iterator.remove</code>, <code>Set.remove</code>,\n+   * <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>.\n+   * Element addition, via <code>add</code> or <code>addAll</code>, is\n+   * not supported via this set.\n+   *\n+   * @return the set view of all mapping entries\n+   * @see Map.Entry\n+   */\n   public Set entrySet();\n+\n+  /**\n+   * Compares the specified object with this map for equality. Returns\n+   * <code>true</code> if the other object is a Map with the same mappings,\n+   * that is,<br>\n+   * <code>o instanceof Map && entrySet().equals(((Map) o).entrySet();</code>\n+   * This allows comparison of maps, regardless of implementation.\n+   *\n+   * @param o the object to be compared\n+   * @return true if the object equals this map\n+   * @see Set#equals(Object)\n+   */\n   public boolean equals(Object o);\n+\n+  /**\n+   * Returns the value mapped by the given key. Returns <code>null</code> if\n+   * there is no mapping.  However, in Maps that accept null values, you\n+   * must rely on <code>containsKey</code> to determine if a mapping exists.\n+   *\n+   * @param key the key to look up\n+   * @return the value associated with the key, or null if key not in map\n+   * @throws ClassCastException if the key is an inappropriate type\n+   * @throws NullPointerException if this map does not accept null keys\n+   * @see #containsKey(Object)\n+   */\n   public Object get(Object key);\n+\n+  /**\n+   * Associates the given key to the given value (optional operation). If the\n+   * map already contains the key, its value is replaced. Be aware that in\n+   * a map that permits <code>null</code> values, a null return does not\n+   * always imply that the mapping was created.\n+   *\n+   * @param key the key to map\n+   * @param value the value to be mapped\n+   * @return the previous value of the key, or null if there was no mapping\n+   * @throws UnsupportedOperationException if the operation is not supported\n+   * @throws ClassCastException if the key or value is of the wrong type\n+   * @throws IllegalArgumentException if something about this key or value\n+   *         prevents it from existing in this map\n+   * @throws NullPointerException if the map forbids null keys or values\n+   * @see #containsKey(Object)\n+   */\n   public Object put(Object key, Object value);\n+\n+  /**\n+   * Returns the hash code for this map. This is the sum of all hashcodes\n+   * for each Map.Entry object in entrySet.  This allows comparison of maps,\n+   * regardless of implementation, and satisfies the contract of\n+   * Object.hashCode.\n+   *\n+   * @return the hash code\n+   * @see Map.Entry#hashCode()\n+   */\n   public int hashCode();\n+\n+  /**\n+   * Returns true if the map contains no mappings.\n+   *\n+   * @return true if the map is empty\n+   */\n   public boolean isEmpty();\n+\n+  /**\n+   * Returns a set view of the keys in this Map.  The set is backed by the\n+   * map, so that changes in one show up in the other.  Modifications made\n+   * while an iterator is in progress cause undefined behavior.  If the set\n+   * supports removal, these methods remove the underlying mapping from\n+   * the map: <code>Iterator.remove</code>, <code>Set.remove</code>,\n+   * <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>.\n+   * Element addition, via <code>add</code> or <code>addAll</code>, is\n+   * not supported via this set.\n+   *\n+   * @return the set view of all keys\n+   */\n   public Set keySet();\n+\n+  /**\n+   * Copies all entries of the given map to this one (optional operation). If\n+   * the map already contains a key, its value is replaced.\n+   *\n+   * @param m the mapping to load into this map\n+   * @throws UnsupportedOperationException if the operation is not supported\n+   * @throws ClassCastException if a key or value is of the wrong type\n+   * @throws IllegalArgumentException if something about a key or value\n+   *         prevents it from existing in this map\n+   * @throws NullPointerException if the map forbids null keys or values, or\n+   *         if <code>m</code> is null.\n+   * @see #put(Object, Object)\n+   */\n   public void putAll(Map m);\n+\n+  /**\n+   * Removes the mapping for this key if present (optional operation). If\n+   * the key is not present, this returns null. Note that maps which permit\n+   * null values may also return null if the key was removed.\n+   *\n+   * @param key the key to remove\n+   * @return the value the key mapped to, or null if not present\n+   * @throws UnsupportedOperationException if deletion is unsupported\n+   */\n   public Object remove(Object o);\n+\n+  /**\n+   * Returns the number of key-value mappings in the map. If there are more\n+   * than Integer.MAX_VALUE mappings, return Integer.MAX_VALUE.\n+   *\n+   * @return the number of mappings\n+   */\n   public int size();\n+\n+  /**\n+   * Returns a collection (or bag) view of the values in this Map.  The\n+   * collection is backed by the map, so that changes in one show up in\n+   * the other.  Modifications made while an iterator is in progress cause\n+   * undefined behavior.  If the collection supports removal, these methods\n+   * remove the underlying mapping from the map: <code>Iterator.remove</code>,\n+   * <code>Collection.remove</code>, <code>removeAll</code>,\n+   * <code>retainAll</code>, and <code>clear</code>. Element addition, via\n+   * <code>add</code> or <code>addAll</code>, is not supported via this\n+   * collection.\n+   *\n+   * @return the collection view of all values\n+   */\n   public Collection values();\n \n+  /**\n+   * A map entry (key-value pair). The Map.entrySet() method returns a set\n+   * view of these objects; there is no other valid way to come across them.\n+   * These objects are only valid for the duration of an iteration; in other\n+   * words, if you mess with one after modifying the map, you are asking\n+   * for undefined behavior.\n+   *\n+   * @author Original author unknown\n+   * @author Eric Blake <ebb9@email.byu.edu>\n+   * @see Map\n+   * @see Map#entrySet()\n+   * @since 1.2\n+   * @status updated to 1.4\n+   */\n   public static interface Entry\n   {\n+    /**\n+     * Get the key corresponding to this entry.\n+     *\n+     * @return the key\n+     */\n     public Object getKey();\n+\n+    /**\n+     * Get the value corresponding to this entry. If you already called\n+     * Iterator.remove(), this is undefined.\n+     *\n+     * @return the value\n+     */\n     public Object getValue();\n+\n+    /**\n+     * Replaces the value with the specified object (optional operation).\n+     * This writes through to the map, and is undefined if you already\n+     * called Iterator.remove().\n+     *\n+     * @param value the new value to store\n+     * @return the old value\n+     * @throws UnsupportedOperationException if the operation is not supported\n+     * @throws ClassCastException if the value is of the wrong type\n+     * @throws IllegalArgumentException if something about the value\n+     *         prevents it from existing in this map\n+     * @throws NullPointerException if the map forbids null values\n+     */\n     public Object setValue(Object value);\n+\n+    /**\n+     * Returns the hash code of the entry.  This is defined as the exclusive-or\n+     * of the hashcodes of the key and value (using 0 for null). In other\n+     * words, this must be:\n+     * <pre>\n+     *  (getKey() == null ? 0 : getKey().hashCode()) ^\n+     *  (getValue() == null ? 0 : getValue().hashCode())\n+     * </pre>\n+     *\n+     * @return the hash code\n+     */\n     public int hashCode();\n+\n+    /**\n+     * Compares the specified object with this entry. Returns true only if\n+     * the object is a mapping of identical key and value. In other words,\n+     * this must be:\n+     * <pre>\n+     * (o instanceof Map.Entry)\n+     * && (getKey() == null ? ((HashMap) o).getKey() == null\n+     *                      : getKey().equals(((HashMap) o).getKey()))\n+     * && (getValue() == null ? ((HashMap) o).getValue() == null\n+     *                        : getValue().equals(((HashMap) o).getValue()))\n+     * </pre>\n+     *\n+     * @param o the object to compare\n+     * @return true if it is equal\n+     */\n     public boolean equals(Object o);\n   }\n }"}, {"sha": "dd2b140166f24c832a68cfaddc4b41d24dbc218d", "filename": "libjava/java/util/RandomAccess.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FRandomAccess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FRandomAccess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FRandomAccess.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -0,0 +1,53 @@\n+/* RandomAccess.java -- A tagging interface that lists can use to tailor\n+   operations to the correct algorithm\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.util;\n+\n+/**\n+ * Marker interface used to inform <code>List</code> implementations that\n+ * they support fast (usually constant time) random access. This allows\n+ * generic list algorithms to tailor their behavior based on the list\n+ * type.\n+ * <p>\n+ *\n+ * For example, some sorts are n*log(n) on an array, but decay to quadratic\n+ * time on a linked list.  As a rule of thumb, this interface should be\n+ * used is this loop:<br>\n+ * <code>for (int i = 0, n = list.size(); i &lt; n; i++) list.get(i);</code>\n+ * <br>runs faster than this loop:<br>\n+ * <code>for (Iterator i = list.iterator(); i.hasNext(); ) i.next();</code>\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see List\n+ * @since 1.4\n+ * @status updated to 1.4\n+ */\n+public interface RandomAccess\n+{\n+  // Tagging interface only.\n+}"}, {"sha": "c22228c212248087c6e047beace52701b61005e0", "filename": "libjava/java/util/Set.java", "status": "modified", "additions": 187, "deletions": 4, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSet.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* Set.java -- A collection that prohibits duplicates\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -25,25 +25,208 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Doc comments for everything.\n-\n package java.util;\n \n+/**\n+ * A collection that contains no duplicates. In other words, for two set\n+ * elements e1 and e2, <code>e1.equals(e2)</code> returns false. There\n+ * are additional stipulations on <code>add</code>, <code>equals</code>\n+ * and <code>hashCode</code>, as well as the requirements that constructors\n+ * do not permit duplicate elements. The Set interface is incompatible with\n+ * List; you cannot implement both simultaneously.\n+ * <p>\n+ *\n+ * Note: Be careful about using mutable objects in sets.  In particular,\n+ * if a mutable object changes to become equal to another set element, you\n+ * have violated the contract.  As a special case of this, a Set is not\n+ * allowed to be an element of itself, without risking undefined behavior.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Collection\n+ * @see List\n+ * @see SortedSet\n+ * @see HashSet\n+ * @see TreeSet\n+ * @see LinkedHashSet\n+ * @see AbstractSet\n+ * @see Collections#singleton(Object)\n+ * @see Collections#EMPTY_SET\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public interface Set extends Collection\n {\n+  /**\n+   * Adds the specified element to the set if it is not already present\n+   * (optional operation). In particular, the comparison algorithm is\n+   * <code>o == null ? e == null : o.equals(e)</code>. Sets need not permit\n+   * all values, and may document what exceptions will be thrown if\n+   * a value is not permitted.\n+   *\n+   * @param o the object to add\n+   * @return true if the object was not previously in the set\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   * @throws ClassCastException if the class of o prevents it from being added\n+   * @throws IllegalArgumentException if some aspect of o prevents it from\n+   *         being added\n+   * @throws NullPointerException if null is not permitted in this set\n+   */\n   boolean add(Object o);\n+\n+  /**\n+   * Adds all of the elements of the given collection to this set (optional\n+   * operation). If the argument is also a Set, this returns the mathematical\n+   * <i>union</i> of the two. The behavior is unspecified if the set is\n+   * modified while this is taking place.\n+   *\n+   * @param c the collection to add\n+   * @return true if the set changed as a result\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   * @throws ClassCastException if the class of an element prevents it from\n+   *         being added\n+   * @throws IllegalArgumentException if something about an element prevents\n+   *         it from being added\n+   * @throws NullPointerException if null is not permitted in this set, or\n+   *         if the argument c is null\n+   * @see #add(Object)\n+   */\n   boolean addAll(Collection c);\n+\n+  /**\n+   * Removes all elements from this set (optional operation). This set will\n+   * be empty afterwords, unless an exception occurs.\n+   *\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   */\n   void clear();\n+\n+  /**\n+   * Returns true if the set contains the specified element. In other words,\n+   * this looks for <code>o == null ? e == null : o.equals(e)</code>.\n+   *\n+   * @param o the object to look for\n+   * @return true if it is found in the set\n+   */\n   boolean contains(Object o);\n+\n+  /**\n+   * Returns true if this set contains all elements in the specified\n+   * collection. If the argument is also a set, this is the <i>subset</i>\n+   * relationship.\n+   *\n+   * @param c the collection to check membership in\n+   * @return true if all elements in this set are in c\n+   * @throws NullPointerException if c is null\n+   * @see #contains(Object)\n+   */\n   boolean containsAll(Collection c);\n+\n+  /**\n+   * Compares the specified object to this for equality. For sets, the object\n+   * must be a set, the two must have the same size, and every element in\n+   * one must be in the other.\n+   *\n+   * @param o the object to compare to\n+   * @return true if it is an equal set\n+   */\n   boolean equals(Object o);\n+\n+  /**\n+   * Returns the hash code for this set. In order to satisfy the contract of\n+   * equals, this is the sum of the hashcode of all elements in the set.\n+   *\n+   * @return the sum of the hashcodes of all set elements\n+   */\n   int hashCode();\n+\n+  /**\n+   * Returns true if the set contains no elements.\n+   *\n+   * @return true if the set is empty\n+   */\n   boolean isEmpty();\n+\n+  /**\n+   * Returns an iterator over the set.  The iterator has no specific order,\n+   * unless further specified.\n+   *\n+   * @return a set iterator\n+   */\n   Iterator iterator();\n+\n+  /**\n+   * Removes the specified element from this set (optional operation). If\n+   * an element e exists, <code>o == null ? e == null : o.equals(e)</code>,\n+   * it is removed from the set.\n+   *\n+   * @param o the object to remove\n+   * @return true if the set changed (an object was removed)\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   */\n   boolean remove(Object o);\n+\n+  /**\n+   * Removes from this set all elements contained in the specified collection\n+   * (optional operation). If the argument is a set, this returns the\n+   * <i>asymmetric set difference</i> of the two sets.\n+   *\n+   * @param c the collection to remove from this set\n+   * @return true if this set changed as a result\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   * @throws NullPointerException if c is null\n+   * @see #remove(Object)\n+   */\n   boolean removeAll(Collection c);\n+\n+  /**\n+   * Retains only the elements in this set that are also in the specified\n+   * collection (optional operation). If the argument is also a set, this\n+   * performs the <i>intersection</i> of the two sets.\n+   *\n+   * @param c the collection to keep\n+   * @return true if this set was modified\n+   * @throws UnsupportedOperationException if this operation is not allowed\n+   * @throws NullPointerException if c is null\n+   * @see #remove(Object)\n+   */\n   boolean retainAll(Collection c);\n+\n+  /**\n+   * Returns the number of elements in the set. If there are more\n+   * than Integer.MAX_VALUE mappings, return Integer.MAX_VALUE. This is\n+   * the <i>cardinality</i> of the set.\n+   *\n+   * @return the number of elements\n+   */\n   int size();\n+\n+  /**\n+   * Returns an array containing the elements of this set. If the set\n+   * makes a guarantee about iteration order, the array has the same\n+   * order. The array is distinct from the set; modifying one does not\n+   * affect the other.\n+   *\n+   * @return an array of this set's elements\n+   * @see #toArray(Object[])\n+   */\n   Object[] toArray();\n+\n+  /**\n+   * Returns an array containing the elements of this set, of the same runtime\n+   * type of the argument. If the given set is large enough, it is reused,\n+   * and null is inserted in the first unused slot. Otherwise, reflection\n+   * is used to build a new array. If the set makes a guarantee about iteration\n+   * order, the array has the same order. The array is distinct from the set;\n+   * modifying one does not affect the other.\n+   *\n+   * @param a the array to determine the return type; if it is big enough\n+   *        it is used and returned\n+   * @return an array holding the elements of the set\n+   * @throws ArrayStoreException if the runtime type of a is not a supertype\n+   *         of all elements in the set\n+   * @throws NullPointerException if a is null\n+   * @see #toArray()\n+   */\n+  Object[] toArray(Object[] a);\n }"}, {"sha": "5be6c19d91976f709ce666b3a0a8d0841bb2d17a", "filename": "libjava/java/util/SortedMap.java", "status": "modified", "additions": 122, "deletions": 4, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSortedMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSortedMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSortedMap.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,5 +1,5 @@\n /* SortedMap.java -- A map that makes guarantees about the order of its keys\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -25,17 +25,135 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Doc comments for everything.\n-\n package java.util;\n \n+/**\n+ * A map which guarantees its key's iteration order. The entries in the\n+ * map are related by the <i>natural ordering</i> of the keys if they\n+ * are Comparable, or by the provided Comparator.  Additional operations\n+ * take advantage of the sorted nature of the map.\n+ * <p>\n+ *\n+ * All keys entered in the map must be mutually comparable; in other words,\n+ * <code>k1.compareTo(k2)</code> or <code>comparator.compare(k1, k2)</code>\n+ * must not throw a ClassCastException. The ordering must be <i>consistent\n+ * with equals</i> (see {@link Comparator} for this definition), if the\n+ * map is to obey the general contract of the Map interface.  If not,\n+ * the results are well-defined, but probably not what you wanted.\n+ * <p>\n+ *\n+ * It is recommended that all implementing classes provide four constructors:\n+ * 1) one that takes no arguments and builds an empty map sorted by natural\n+ * order of the keys; 2) one that takes a Comparator for the sorting order;\n+ * 3) one that takes a Map and sorts according to the natural order of its\n+ * keys; and 4) one that takes a SortedMap and sorts by the same comparator.\n+ * Unfortunately, the Java language does not provide a way to enforce this.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Map\n+ * @see TreeMap\n+ * @see SortedSet\n+ * @see Comparable\n+ * @see Comparator\n+ * @see Collection\n+ * @see ClassCastException\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public interface SortedMap extends Map\n {\n+  /**\n+   * Returns the comparator used in sorting this map, or null if it is\n+   * the keys' natural ordering.\n+   *\n+   * @return the sorting comparator\n+   */\n   Comparator comparator();\n+\n+  /**\n+   * Returns the first (lowest sorted) key in the map.\n+   *\n+   * @return the first key\n+   */\n   Object firstKey();\n+\n+  /**\n+   * Returns a view of the portion of the map strictly less than toKey. The\n+   * view is backed by this map, so changes in one show up in the other.\n+   * The submap supports all optional operations of the original.\n+   * <p>\n+   *\n+   * The returned map throws an IllegalArgumentException any time a key is\n+   * used which is out of the range of toKey. Note that the endpoint is not\n+   * included; if you want the endpoint, pass the successor object in to\n+   * toKey.  For example, for Strings, you can request\n+   * <code>headMap(limit + \"\\0\")</code>.\n+   *\n+   * @param toKey the exclusive upper range of the submap\n+   * @return the submap\n+   * @throws ClassCastException if toKey is not comparable to the map contents\n+   * @throws IllegalArgumentException if this is a subMap, and toKey is out\n+   *         of range\n+   * @throws NullPointerException if toKey is null but the map does not allow\n+   *         null keys\n+   */\n   SortedMap headMap(Object toKey);\n+\n+  /**\n+   * Returns the last (highest sorted) key in the map.\n+   *\n+   * @return the last key\n+   */\n   Object lastKey();\n+\n+  /**\n+   * Returns a view of the portion of the map greater than or equal to\n+   * fromKey, and strictly less than toKey. The view is backed by this map,\n+   * so changes in one show up in the other. The submap supports all\n+   * optional operations of the original.\n+   * <p>\n+   *\n+   * The returned map throws an IllegalArgumentException any time a key is\n+   * used which is out of the range of fromKey and toKey. Note that the\n+   * lower endpoint is included, but the upper is not; if you want to\n+   * change the inclusion or exclusion of an endpoint, pass the successor\n+   * object in instead.  For example, for Strings, you can request\n+   * <code>subMap(lowlimit + \"\\0\", highlimit + \"\\0\")</code> to reverse\n+   * the inclusiveness of both endpoints.\n+   *\n+   * @param fromKey the inclusive lower range of the submap\n+   * @param toKey the exclusive upper range of the submap\n+   * @return the submap\n+   * @throws ClassCastException if fromKey or toKey is not comparable to\n+   *         the map contents\n+   * @throws IllegalArgumentException if this is a subMap, and fromKey or\n+   *         toKey is out of range\n+   * @throws NullPointerException if fromKey or toKey is null but the map\n+   *         does not allow null keys\n+   */\n   SortedMap subMap(Object fromKey, Object toKey);\n+\n+  /**\n+   * Returns a view of the portion of the map greater than or equal to\n+   * fromKey. The view is backed by this map, so changes in one show up\n+   * in the other. The submap supports all optional operations of the original.\n+   * <p>\n+   *\n+   * The returned map throws an IllegalArgumentException any time a key is\n+   * used which is out of the range of fromKey. Note that the endpoint is\n+   * included; if you do not want the endpoint, pass the successor object in\n+   * to fromKey.  For example, for Strings, you can request\n+   * <code>tailMap(limit + \"\\0\")</code>.\n+   *\n+   * @param fromKey the inclusive lower range of the submap\n+   * @return the submap\n+   * @throws ClassCastException if fromKey is not comparable to the map\n+   *         contents\n+   * @throws IllegalArgumentException if this is a subMap, and fromKey is out\n+   *         of range\n+   * @throws NullPointerException if fromKey is null but the map does not allow\n+   *         null keys\n+   */\n   SortedMap tailMap(Object fromKey);\n }"}, {"sha": "ea39811dd670a0949e4963e28fa515cec0549fcc", "filename": "libjava/java/util/SortedSet.java", "status": "modified", "additions": 125, "deletions": 5, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSortedSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41878ce27efa7dac17cc1f3b283303cd6bbedd1e/libjava%2Fjava%2Futil%2FSortedSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSortedSet.java?ref=41878ce27efa7dac17cc1f3b283303cd6bbedd1e", "patch": "@@ -1,6 +1,6 @@\n-/* SortedSet.java -- A set that makes guarantees about the order of its \n+/* SortedSet.java -- A set that makes guarantees about the order of its\n    elements\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -26,17 +26,137 @@\n executable file might be covered by the GNU General Public License. */\n \n \n-// TO DO:\n-// ~ Doc comments for everything.\n-\n package java.util;\n \n+/**\n+ * A set which guarantees its iteration order. The elements in the set\n+ * are related by the <i>natural ordering</i> if they are Comparable, or\n+ * by the provided Comparator.  Additional operations take advantage of\n+ * the sorted nature of the set.\n+ * <p>\n+ *\n+ * All elements entered in the set must be mutually comparable; in other words,\n+ * <code>k1.compareTo(k2)</code> or <code>comparator.compare(k1, k2)</code>\n+ * must not throw a ClassCastException. The ordering must be <i>consistent\n+ * with equals</i> (see {@link Comparator} for this definition), if the\n+ * map is to obey the general contract of the Set interface.  If not,\n+ * the results are well-defined, but probably not what you wanted.\n+ * <p>\n+ *\n+ * It is recommended that all implementing classes provide four constructors:\n+ * 1) one that takes no arguments and builds an empty set sorted by natural\n+ * order of the elements; 2) one that takes a Comparator for the sorting order;\n+ * 3) one that takes a Set and sorts according to the natural order of its\n+ * elements; and 4) one that takes a SortedSet and sorts by the same\n+ * comparator. Unfortunately, the Java language does not provide a way to\n+ * enforce this.\n+ *\n+ * @author Original author unknown\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Set\n+ * @see TreeSet\n+ * @see SortedMap\n+ * @see Collection\n+ * @see Comparable\n+ * @see Comparator\n+ * @see ClassCastException\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public interface SortedSet extends Set\n {\n+  /**\n+   * Returns the comparator used in sorting this set, or null if it is\n+   * the elements' natural ordering.\n+   *\n+   * @return the sorting comparator\n+   */\n   Comparator comparator();\n+\n+  /**\n+   * Returns the first (lowest sorted) element in the map.\n+   *\n+   * @return the first element\n+   */\n   Object first();\n+\n+  /**\n+   * Returns a view of the portion of the set strictly less than toElement. The\n+   * view is backed by this set, so changes in one show up in the other.\n+   * The subset supports all optional operations of the original.\n+   * <p>\n+   *\n+   * The returned set throws an IllegalArgumentException any time an element is\n+   * used which is out of the range of toElement. Note that the endpoint is not\n+   * included; if you want the endpoint, pass the successor object in to\n+   * toElement.  For example, for Strings, you can request\n+   * <code>headSet(limit + \"\\0\")</code>.\n+   *\n+   * @param toElement the exclusive upper range of the subset\n+   * @return the subset\n+   * @throws ClassCastException if toElement is not comparable to the set\n+   *         contents\n+   * @throws IllegalArgumentException if this is a subSet, and toElement is out\n+   *         of range\n+   * @throws NullPointerException if toElement is null but the map does not\n+   *         allow null elements\n+   */\n   SortedSet headSet(Object toElement);\n+\n+  /**\n+   * Returns the last (highest sorted) element in the map.\n+   *\n+   * @return the last element\n+   */\n   Object last();\n+\n+  /**\n+   * Returns a view of the portion of the set greater than or equal to\n+   * fromElement, and strictly less than toElement. The view is backed by\n+   * this set, so changes in one show up in the other. The subset supports all\n+   * optional operations of the original.\n+   * <p>\n+   *\n+   * The returned set throws an IllegalArgumentException any time an element is\n+   * used which is out of the range of fromElement and toElement. Note that the\n+   * lower endpoint is included, but the upper is not; if you want to\n+   * change the inclusion or exclusion of an endpoint, pass the successor\n+   * object in instead.  For example, for Strings, you can request\n+   * <code>subSet(lowlimit + \"\\0\", highlimit + \"\\0\")</code> to reverse\n+   * the inclusiveness of both endpoints.\n+   *\n+   * @param fromElement the inclusive lower range of the subset\n+   * @param toElement the exclusive upper range of the subset\n+   * @return the subset\n+   * @throws ClassCastException if fromElement or toElement is not comparable\n+   *         to the set contents\n+   * @throws IllegalArgumentException if this is a subSet, and fromElement or\n+   *         toElement is out of range\n+   * @throws NullPointerException if fromElement or toElement is null but the\n+   *         set does not allow null elements\n+   */\n   SortedSet subSet(Object fromElement, Object toElement);\n+\n+  /**\n+   * Returns a view of the portion of the set greater than or equal to\n+   * fromElement. The view is backed by this set, so changes in one show up\n+   * in the other. The subset supports all optional operations of the original.\n+   * <p>\n+   *\n+   * The returned set throws an IllegalArgumentException any time an element is\n+   * used which is out of the range of fromElement. Note that the endpoint is\n+   * included; if you do not want the endpoint, pass the successor object in\n+   * to fromElement.  For example, for Strings, you can request\n+   * <code>tailSet(limit + \"\\0\")</code>.\n+   *\n+   * @param fromElement the inclusive lower range of the subset\n+   * @return the subset\n+   * @throws ClassCastException if fromElement is not comparable to the set\n+   *         contents\n+   * @throws IllegalArgumentException if this is a subSet, and fromElement is\n+   *         out of range\n+   * @throws NullPointerException if fromElement is null but the set does not\n+   *         allow null elements\n+   */\n   SortedSet tailSet(Object fromElement);\n }"}]}