{"sha": "28e42b7eac632e5ad97801687192baa1f76a2e0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlNDJiN2VhYzYzMmU1YWQ5NzgwMTY4NzE5MmJhYTFmNzZhMmUwZA==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-12-02T12:00:43Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2004-12-02T12:00:43Z"}, "message": "PR c++/15664, c++/18276\n\n\tPR c++/15664, c++/18276\n\t* pt.c (tsubst_decl) <TEMPLATE_DECL case>: Reorganize.  Correctly\n\ttsubst TEMPLATE_DECL that is a TEMPLATE_TEMPLATE_PARM.\n\n\t* g++.dg/template/ttp13.C: New test.\n\t* g++.dg/template/ttp14.C: Likewise.\n\nFrom-SVN: r91633", "tree": {"sha": "107c38bb953f29351253c7b49cbde6e02dd4790c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107c38bb953f29351253c7b49cbde6e02dd4790c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e42b7eac632e5ad97801687192baa1f76a2e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e42b7eac632e5ad97801687192baa1f76a2e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e42b7eac632e5ad97801687192baa1f76a2e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e42b7eac632e5ad97801687192baa1f76a2e0d/comments", "author": null, "committer": null, "parents": [{"sha": "a5e515185ae43f376c680dc3710c0ad3c514c2e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e515185ae43f376c680dc3710c0ad3c514c2e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e515185ae43f376c680dc3710c0ad3c514c2e4"}], "stats": {"total": 123, "additions": 89, "deletions": 34}, "files": [{"sha": "4a486372fa1dc0c1ab493c3a21adc0309383ac65", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=28e42b7eac632e5ad97801687192baa1f76a2e0d", "patch": "@@ -1,3 +1,9 @@\n+2004-12-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/15664, c++/18276\n+\t* pt.c (tsubst_decl) <TEMPLATE_DECL case>: Reorganize.  Correctly\n+\ttsubst TEMPLATE_DECL that is a TEMPLATE_TEMPLATE_PARM.\n+\n 2004-12-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/18123"}, {"sha": "a0cc45cce7416cdf6598ffb9128afed2ff2df8f8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=28e42b7eac632e5ad97801687192baa1f76a2e0d", "patch": "@@ -6159,38 +6159,54 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n     {\n     case TEMPLATE_DECL:\n       {\n-\t/* We can get here when processing a member template function\n-\t   of a template class.  */\n+\t/* We can get here when processing a member function template,\n+\t   member class template, and template template parameter of\n+\t   a template class.  */\n \ttree decl = DECL_TEMPLATE_RESULT (t);\n \ttree spec;\n-\tint is_template_template_parm = DECL_TEMPLATE_TEMPLATE_PARM_P (t);\n+\ttree tmpl_args;\n+\ttree full_args;\n \n-\tif (!is_template_template_parm)\n+\tif (DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n \t  {\n-\t    /* We might already have an instance of this template.\n-\t       The ARGS are for the surrounding class type, so the\n-\t       full args contain the tsubst'd args for the context,\n-\t       plus the innermost args from the template decl.  */\n-\t    tree tmpl_args = DECL_CLASS_TEMPLATE_P (t) \n-\t      ? CLASSTYPE_TI_ARGS (TREE_TYPE (t))\n-\t      : DECL_TI_ARGS (DECL_TEMPLATE_RESULT (t));\n-\t    tree full_args;\n-\t    \n-\t    full_args = tsubst_template_args (tmpl_args, args,\n-\t\t\t\t\t      complain, in_decl);\n+\t    /* Template template parameter is treated here.  */\n+\t    tree new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\t    if (new_type == error_mark_node)\n+\t      return error_mark_node;\n \n-\t    /* tsubst_template_args doesn't copy the vector if\n-\t       nothing changed.  But, *something* should have\n-\t       changed.  */\n-\t    gcc_assert (full_args != tmpl_args);\n+\t    r = copy_decl (t);\n+\t    TREE_CHAIN (r) = NULL_TREE;\n+\t    TREE_TYPE (r) = new_type;\n+\t    DECL_TEMPLATE_RESULT (r)\n+\t      = build_decl (TYPE_DECL, DECL_NAME (decl), new_type);\n+\t    DECL_TEMPLATE_PARMS (r) \n+\t      = tsubst_template_parms (DECL_TEMPLATE_PARMS (t), args,\n+\t\t\t\t       complain);\n+\t    TYPE_NAME (new_type) = r;\n+\t    break;\n+\t  }\n \n-\t    spec = retrieve_specialization (t, full_args,\n-\t\t\t\t\t    /*class_specializations_p=*/true);\n-\t    if (spec != NULL_TREE)\n-\t      {\n-\t\tr = spec;\n-\t\tbreak;\n-\t      }\n+\t/* We might already have an instance of this template.\n+\t   The ARGS are for the surrounding class type, so the\n+\t   full args contain the tsubst'd args for the context,\n+\t   plus the innermost args from the template decl.  */\n+\ttmpl_args = DECL_CLASS_TEMPLATE_P (t) \n+\t  ? CLASSTYPE_TI_ARGS (TREE_TYPE (t))\n+\t  : DECL_TI_ARGS (DECL_TEMPLATE_RESULT (t));\n+\tfull_args = tsubst_template_args (tmpl_args, args,\n+\t\t\t\t\t  complain, in_decl);\n+\n+\t/* tsubst_template_args doesn't copy the vector if\n+\t   nothing changed.  But, *something* should have\n+\t   changed.  */\n+\tgcc_assert (full_args != tmpl_args);\n+\n+\tspec = retrieve_specialization (t, full_args,\n+\t\t\t\t\t/*class_specializations_p=*/true);\n+\tif (spec != NULL_TREE)\n+\t  {\n+\t    r = spec;\n+\t    break;\n \t  }\n \n \t/* Make a new template decl.  It will be similar to the\n@@ -6202,14 +6218,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tgcc_assert (DECL_LANG_SPECIFIC (r) != 0);\n \tTREE_CHAIN (r) = NULL_TREE;\n \n-\tif (is_template_template_parm)\n-\t  {\n-\t    tree new_decl = tsubst (decl, args, complain, in_decl);\n-\t    DECL_TEMPLATE_RESULT (r) = new_decl;\n-\t    TREE_TYPE (r) = TREE_TYPE (new_decl);\n-\t    break;\n-\t  }\n-\n \tDECL_CONTEXT (r) \n \t  = tsubst_aggr_type (DECL_CONTEXT (t), args, \n \t\t\t      complain, in_decl, "}, {"sha": "c55808a3115f3d7dc7d2da5cf03a3a8e260b2966", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28e42b7eac632e5ad97801687192baa1f76a2e0d", "patch": "@@ -1,3 +1,9 @@\n+2004-12-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/15664, c++/18276\n+\t* g++.dg/template/ttp13.C: New test.\n+\t* g++.dg/template/ttp14.C: Likewise.\n+\n 2004-12-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/18123"}, {"sha": "2c35b3a79b98249812a235d9bb80f9927e3f7466", "filename": "gcc/testsuite/g++.dg/template/ttp13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp13.C?ref=28e42b7eac632e5ad97801687192baa1f76a2e0d", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+\n+// Origin: Wolfgang Bangerth <bangerth@dealii.org>\n+\n+// PR c++/15664: Template substitution of template template parameter\n+\n+template <int N> struct S { \n+    template<template<typename> class A> \n+    friend void foo(); \n+}; \n+ \n+template<template<typename> class A> \n+void foo(); \n+ \n+template <typename> struct X {}; \n+ \n+int main () { \n+  S<1> s; \n+  foo<X>(); \n+}"}, {"sha": "2b216090be3d091c21f796f15d54bb87615bbde1", "filename": "gcc/testsuite/g++.dg/template/ttp14.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e42b7eac632e5ad97801687192baa1f76a2e0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp14.C?ref=28e42b7eac632e5ad97801687192baa1f76a2e0d", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Origin: akim@epita.fr\n+//\t   Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+// PR c++/18276: Template substitution of template template parameter\n+\n+template<template<int> class> struct A;\n+\n+template<int> struct B\n+{\n+    template<template<int> class> friend class A;\n+};\n+\n+B<0> b;"}]}