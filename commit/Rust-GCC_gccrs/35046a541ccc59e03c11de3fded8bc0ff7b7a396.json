{"sha": "35046a541ccc59e03c11de3fded8bc0ff7b7a396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwNDZhNTQxY2NjNTllMDNjMTFkZTNmZGVkOGJjMGZmN2I3YTM5Ng==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-08-16T14:29:27Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2004-08-16T14:29:27Z"}, "message": "re PR c++/6749 (infinite loop with inheritance of abstract classes)\n\n\tPR c++/6749\n\t* pt.c (instantiate_pending_templates): Add int parameter.  Don't\n\treturn anything.\n\t* cp-tree.h (instantiate_pending_templates): Adjust prototype.\n\t* decl2.c (finish_file): Adjust call to\n\tinstantiate_pending_templates.\n\n\t* g++.dg/template/vtable2.C: New test.\n\nFrom-SVN: r86054", "tree": {"sha": "474d17dc602be1e20e793f14d2d2702f7ad55198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474d17dc602be1e20e793f14d2d2702f7ad55198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35046a541ccc59e03c11de3fded8bc0ff7b7a396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35046a541ccc59e03c11de3fded8bc0ff7b7a396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35046a541ccc59e03c11de3fded8bc0ff7b7a396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35046a541ccc59e03c11de3fded8bc0ff7b7a396/comments", "author": null, "committer": null, "parents": [{"sha": "a20f4d83c8ec7fb99c8532a84db5204fe00cf71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20f4d83c8ec7fb99c8532a84db5204fe00cf71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20f4d83c8ec7fb99c8532a84db5204fe00cf71d"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "2946db7567173eee294970b9499d918f695018ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -1,3 +1,12 @@\n+2004-08-16  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6749\n+\t* pt.c (instantiate_pending_templates): Add int parameter.  Don't\n+\treturn anything.\n+\t* cp-tree.h (instantiate_pending_templates): Adjust prototype.\n+\t* decl2.c (finish_file): Adjust call to\n+\tinstantiate_pending_templates.\n+\n 2004-08-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* call.c (build_vfield_ref, build_call, build_conditional_expr,"}, {"sha": "72011f7356fbd8b611b12c8e5ebc6283b1fae9f8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -3990,7 +3990,7 @@ extern void maybe_process_partial_specialization (tree);\n extern void maybe_check_template_type           (tree);\n extern tree most_specialized_instantiation      (tree);\n extern void print_candidates                    (tree);\n-extern int instantiate_pending_templates        (void);\n+extern void instantiate_pending_templates       (int);\n extern tree tsubst_default_argument             (tree, tree, tree);\n extern tree tsubst_copy_and_build               (tree, tree, tsubst_flags_t, tree, bool);\n extern tree most_general_template\t\t(tree);"}, {"sha": "efb86b5534a26fc63dca6556ac47418c62feff06", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -2721,6 +2721,7 @@ finish_file (void)\n   size_t i;\n   location_t locus;\n   unsigned ssdf_count = 0;\n+  int retries = 0;\n \n   locus = input_location;\n   at_eof = 1;\n@@ -2772,15 +2773,15 @@ finish_file (void)\n \n       /* If there are templates that we've put off instantiating, do\n \t them now.  */\n-      instantiate_pending_templates ();\n+      instantiate_pending_templates (retries);\n       ggc_collect ();\n \n       /* Write out virtual tables as required.  Note that writing out\n   \t the virtual table for a template class may cause the\n  \t instantiation of members of that class.  If we write out\n  \t vtables then we remove the class from our list so we don't\n  \t have to look at it again.  */\n- \n+\n       while (keyed_classes != NULL_TREE\n  \t     && maybe_emit_vtables (TREE_VALUE (keyed_classes)))\n  \t{\n@@ -2806,14 +2807,14 @@ finish_file (void)\n  \t      next = TREE_CHAIN (t);\n  \t    }\n  \t}\n-       \n+\n       /* Write out needed type info variables.  We have to be careful\n  \t looping through unemitted decls, because emit_tinfo_decl may\n  \t cause other variables to be needed.  We stick new elements\n  \t (and old elements that we may need to reconsider) at the end\n  \t of the array, then shift them back to the beginning once we're\n  \t done.  */\n-  \n+\n       n_old = VARRAY_ACTIVE_SIZE (unemitted_tinfo_decls);\n       for (i = 0; i < n_old; ++i)\n   \t{\n@@ -2994,6 +2995,8 @@ finish_file (void)\n \treconsider = true;\n       if (cgraph_varpool_assemble_pending_decls ())\n \treconsider = true;\n+\n+      retries++;\n     } \n   while (reconsider);\n "}, {"sha": "d3d5267dcefcb06a48c41f5b2447732db09e7ed1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -11272,17 +11272,30 @@ instantiate_decl (tree d, int defer_ok, int undefined_ok)\n }\n \n /* Run through the list of templates that we wish we could\n-   instantiate, and instantiate any we can.  */\n+   instantiate, and instantiate any we can.  RETRIES is the\n+   number of times we retry pending template instantiation.  */\n \n-int\n-instantiate_pending_templates (void)\n+void\n+instantiate_pending_templates (int retries)\n {\n   tree *t;\n   tree last = NULL_TREE;\n-  int instantiated_something = 0;\n   int reconsider;\n   location_t saved_loc = input_location;\n-  \n+\n+  /* Instantiating templates may trigger vtable generation.  This in turn\n+     may require further template instantiations.  We place a limit here\n+     to avoid infinite loop.  */\n+  if (pending_templates && retries >= max_tinst_depth)\n+    {\n+      cp_error_at (\"template instantiation depth exceeds maximum of %d\"\n+\t\t   \" (use -ftemplate-depth-NN to increase the maximum)\"\n+\t\t   \" instantiating `%+D', possibly from virtual table\"\n+\t\t   \" generation\",\n+\t\t   max_tinst_depth, TREE_VALUE (pending_templates));\n+      return;\n+    }\n+\n   do \n     {\n       reconsider = 0;\n@@ -11309,10 +11322,7 @@ instantiate_pending_templates (void)\n \t\t\tinstantiate_decl (fn, /*defer_ok=*/0,\n \t\t\t\t\t  /*undefined_ok=*/0);\n \t\t  if (COMPLETE_TYPE_P (instantiation))\n-\t\t    {\n-\t\t      instantiated_something = 1;\n-\t\t      reconsider = 1;\n-\t\t    }\n+\t\t    reconsider = 1;\n \t\t}\n \n \t      if (COMPLETE_TYPE_P (instantiation))\n@@ -11334,10 +11344,7 @@ instantiate_pending_templates (void)\n \t\t\t\t\t\t    /*defer_ok=*/0,\n \t\t\t\t\t\t    /*undefined_ok=*/0);\n \t\t  if (DECL_TEMPLATE_INSTANTIATED (instantiation))\n-\t\t    {\n-\t\t      instantiated_something = 1;\n-\t\t      reconsider = 1;\n-\t\t    }\n+\t\t    reconsider = 1;\n \t\t}\n \n \t      if (DECL_TEMPLATE_SPECIALIZATION (instantiation)\n@@ -11359,7 +11366,6 @@ instantiate_pending_templates (void)\n   while (reconsider);\n \n   input_location = saved_loc;\n-  return instantiated_something;\n }\n \n /* Substitute ARGVEC into T, which is a list of initializers for"}, {"sha": "6ef35f7b66e6905a9fdc3cc154220e6ad0e6d281", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -1,3 +1,8 @@\n+2004-08-16  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6749\n+\t* g++.dg/template/vtable2.C: New test.\n+\n 2004-08-14  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/torture/builtin-attr-1.c: Fix scalbln prototype."}, {"sha": "9f2bf0b2ff2979630a7bfa8d9ddbcb2219f50fc0", "filename": "gcc/testsuite/g++.dg/template/vtable2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35046a541ccc59e03c11de3fded8bc0ff7b7a396/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C?ref=35046a541ccc59e03c11de3fded8bc0ff7b7a396", "patch": "@@ -0,0 +1,18 @@\n+// Use a small template instantiation depth to speed up testing \n+// { dg-options \"-ftemplate-depth-5\" }\n+// { dg-do compile }\n+\n+// Origin: rullo.pat@tiscalinet.it\n+//\t   Nathanael Nerode <neroden@gcc.gnu.org>\n+//\t   Wolfgang Bangerth <bangerth@dealii.org>\n+\n+// PR c++/6749: Infinite loop generating vtable.\n+\n+template <class T> struct inner {};\n+\n+template <class T> struct parent {\n+  virtual void f()\n+    { parent<inner<T> > p; };\t\t// { dg-error \"instantiation depth\" }\n+};\n+\n+template struct parent<int>;"}]}