{"sha": "eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "node_id": "C_kwDOANBUbNoAKGViOTY2ZDM5M2RmZGZkMmM4MDk5NGU0YmZjYzBkZGRmODU4MjhhNzM", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-07-25T09:27:13Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-07-25T09:27:13Z"}, "message": "aarch64: Implement ACLE Data Intrinsics\n\nThis patch adds support for the ACLE Data Intrinsics to the AArch64 port.\n\ngcc/ChangeLog:\n\n2022-07-25  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/aarch64/aarch64.md (rbit<mode>2): Rename this ...\n\t(@aarch64_rbit<mode>): ... to this and change it in...\n\t(ffs<mode>2,ctz<mode>2): ... here.\n\t(@aarch64_rev16<mode>): New.\n\t* config/aarch64/aarch64-builtins.cc: (aarch64_builtins):\n\tDefine the following enum AARCH64_REV16, AARCH64_REV16L,\n\tAARCH64_REV16LL, AARCH64_RBIT, AARCH64_RBITL, AARCH64_RBITLL.\n\t(aarch64_init_data_intrinsics): New.\n\t(aarch64_general_init_builtins): Add call to\n\taarch64_init_data_intrinsics.\n\t(aarch64_expand_builtin_data_intrinsic): New.\n\t(aarch64_general_expand_builtin): Add call to\n\taarch64_expand_builtin_data_intrinsic.\n\t* config/aarch64/arm_acle.h (__clz, __clzl, __clzll, __cls, __clsl,\n\t__clsll, __rbit, __rbitl, __rbitll, __rev, __revl, __revll, __rev16,\n\t__rev16l, __rev16ll, __ror, __rorl, __rorll, __revsh): New.\n\ngcc/testsuite/ChangeLog:\n\n2022-07-25  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/aarch64/acle/data-intrinsics.c: New test.", "tree": {"sha": "30bf9c54e6eca028e906ccad484728006c2cf0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30bf9c54e6eca028e906ccad484728006c2cf0d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718cf8d0bd32689192200d2156722167fd21a647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718cf8d0bd32689192200d2156722167fd21a647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718cf8d0bd32689192200d2156722167fd21a647"}], "stats": {"total": 605, "additions": 602, "deletions": 3}, "files": [{"sha": "2cacb4df8a618c43c1c7d7993c78c6fcce6ef971", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "patch": "@@ -612,6 +612,12 @@ enum aarch64_builtins\n   AARCH64_LS64_BUILTIN_ST64B,\n   AARCH64_LS64_BUILTIN_ST64BV,\n   AARCH64_LS64_BUILTIN_ST64BV0,\n+  AARCH64_REV16,\n+  AARCH64_REV16L,\n+  AARCH64_REV16LL,\n+  AARCH64_RBIT,\n+  AARCH64_RBITL,\n+  AARCH64_RBITLL,\n   AARCH64_BUILTIN_MAX\n };\n \n@@ -1659,6 +1665,36 @@ aarch64_init_ls64_builtins (void)\n       = aarch64_general_add_builtin (data[i].name, data[i].type, data[i].code);\n }\n \n+static void\n+aarch64_init_data_intrinsics (void)\n+{\n+  tree uint32_fntype = build_function_type_list (uint32_type_node,\n+\t\t\t\t\t\t uint32_type_node, NULL_TREE);\n+  tree ulong_fntype = build_function_type_list (long_unsigned_type_node,\n+\t\t\t\t\t\tlong_unsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE);\n+  tree uint64_fntype = build_function_type_list (uint64_type_node,\n+\t\t\t\t\t\t uint64_type_node, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_REV16]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rev16\", uint32_fntype,\n+\t\t\t\t   AARCH64_REV16);\n+  aarch64_builtin_decls[AARCH64_REV16L]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rev16l\", ulong_fntype,\n+\t\t\t\t   AARCH64_REV16L);\n+  aarch64_builtin_decls[AARCH64_REV16LL]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rev16ll\", uint64_fntype,\n+\t\t\t\t   AARCH64_REV16LL);\n+  aarch64_builtin_decls[AARCH64_RBIT]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rbit\", uint32_fntype,\n+\t\t\t\t   AARCH64_RBIT);\n+  aarch64_builtin_decls[AARCH64_RBITL]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rbitl\", ulong_fntype,\n+\t\t\t\t   AARCH64_RBITL);\n+  aarch64_builtin_decls[AARCH64_RBITLL]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rbitll\", uint64_fntype,\n+\t\t\t\t   AARCH64_RBITLL);\n+}\n+\n /* Implement #pragma GCC aarch64 \"arm_acle.h\".  */\n void\n handle_arm_acle_h (void)\n@@ -1737,6 +1773,7 @@ aarch64_general_init_builtins (void)\n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();\n   aarch64_init_rng_builtins ();\n+  aarch64_init_data_intrinsics ();\n \n   tree ftype_jcvt\n     = build_function_type_list (intSI_type_node, double_type_node, NULL);\n@@ -2389,6 +2426,37 @@ aarch64_expand_builtin_memtag (int fcode, tree exp, rtx target)\n   return target;\n }\n \n+/* Function to expand an expression EXP which calls one of the ACLE Data\n+   Intrinsic builtins FCODE with the result going to TARGET.  */\n+static rtx\n+aarch64_expand_builtin_data_intrinsic (unsigned int fcode, tree exp, rtx target)\n+{\n+  expand_operand ops[2];\n+  machine_mode mode = GET_MODE (target);\n+  create_output_operand (&ops[0], target, mode);\n+  create_input_operand (&ops[1], expand_normal (CALL_EXPR_ARG (exp, 0)), mode);\n+  enum insn_code icode;\n+\n+  switch (fcode)\n+    {\n+    case AARCH64_REV16:\n+    case AARCH64_REV16L:\n+    case AARCH64_REV16LL:\n+      icode = code_for_aarch64_rev16 (mode);\n+      break;\n+    case AARCH64_RBIT:\n+    case AARCH64_RBITL:\n+    case AARCH64_RBITLL:\n+      icode = code_for_aarch64_rbit (mode);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  expand_insn (icode, 2, ops);\n+  return ops[0].value;\n+}\n+\n /* Expand an expression EXP as fpsr or fpcr setter (depending on\n    UNSPEC) using MODE.  */\n static void\n@@ -2546,6 +2614,9 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n   if (fcode >= AARCH64_MEMTAG_BUILTIN_START\n       && fcode <= AARCH64_MEMTAG_BUILTIN_END)\n     return aarch64_expand_builtin_memtag (fcode, exp, target);\n+  if (fcode >= AARCH64_REV16\n+      && fcode <= AARCH64_RBITLL)\n+    return aarch64_expand_builtin_data_intrinsic (fcode, exp, target);\n \n   gcc_unreachable ();\n }"}, {"sha": "ef0aed25c6b26eff61f9f6030dc5921a534e3d19", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "patch": "@@ -4950,7 +4950,7 @@\n     rtx ccreg = aarch64_gen_compare_reg (EQ, operands[1], const0_rtx);\n     rtx x = gen_rtx_NE (VOIDmode, ccreg, const0_rtx);\n \n-    emit_insn (gen_rbit<mode>2 (operands[0], operands[1]));\n+    emit_insn (gen_aarch64_rbit (<MODE>mode, operands[0], operands[1]));\n     emit_insn (gen_clz<mode>2 (operands[0], operands[0]));\n     emit_insn (gen_csinc3<mode>_insn (operands[0], x, operands[0], const0_rtx));\n     DONE;\n@@ -4996,7 +4996,7 @@\n   [(set_attr \"type\" \"clz\")]\n )\n \n-(define_insn \"rbit<mode>2\"\n+(define_insn \"@aarch64_rbit<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(unspec:GPI [(match_operand:GPI 1 \"register_operand\" \"r\")] UNSPEC_RBIT))]\n   \"\"\n@@ -5017,7 +5017,7 @@\n   \"reload_completed\"\n   [(const_int 0)]\n   \"\n-  emit_insn (gen_rbit<mode>2 (operands[0], operands[1]));\n+  emit_insn (gen_aarch64_rbit (<MODE>mode, operands[0], operands[1]));\n   emit_insn (gen_clz<mode>2 (operands[0], operands[0]));\n   DONE;\n \")\n@@ -6022,6 +6022,13 @@\n   [(set_attr \"type\" \"rev\")]\n )\n \n+(define_insn \"@aarch64_rev16<mode>\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(unspec:GPI [(match_operand:GPI 1 \"register_operand\" \"r\")] UNSPEC_REV))]\n+  \"\"\n+  \"rev16\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"rev\")])\n+\n (define_insn \"*aarch64_bfxil<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n     (ior:GPI (and:GPI (match_operand:GPI 1 \"register_operand\" \"r,0\")"}, {"sha": "d26e269cb843fe37ba789db09c40d06f53438cda", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "patch": "@@ -28,13 +28,66 @@\n #define _GCC_ARM_ACLE_H\n \n #include <stdint.h>\n+#include <stddef.h>\n \n #pragma GCC aarch64 \"arm_acle.h\"\n \n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n+#define _GCC_ARM_ACLE_ROR_FN(NAME, TYPE)\t\t\t\t  \\\n+__extension__ extern __inline TYPE\t\t\t\t\t  \\\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\t  \\\n+NAME (TYPE __value, uint32_t __rotate)\t\t\t\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  size_t __size = sizeof (TYPE) * __CHAR_BIT__;\t\t\t\t  \\\n+  __rotate = __rotate % __size;\t\t\t\t\t\t  \\\n+  return __value >> __rotate | __value << ((__size - __rotate) % __size); \\\n+}\n+\n+_GCC_ARM_ACLE_ROR_FN (__ror, uint32_t)\n+_GCC_ARM_ACLE_ROR_FN (__rorl, unsigned long)\n+_GCC_ARM_ACLE_ROR_FN (__rorll, uint64_t)\n+\n+#undef _GCC_ARM_ACLE_ROR_FN\n+\n+#define _GCC_ARM_ACLE_DATA_FN(NAME, BUILTIN, ITYPE, RTYPE)\t    \\\n+__extension__ extern __inline RTYPE\t\t\t\t    \\\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__)) \\\n+__##NAME (ITYPE __value)\t\t\t\t\t    \\\n+{\t\t\t\t\t\t\t\t    \\\n+  return __builtin_##BUILTIN (__value);\t\t\t\t    \\\n+}\n+\n+_GCC_ARM_ACLE_DATA_FN (clz, clz, uint32_t, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (clzl, clzl, unsigned long, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (clzll, clzll, uint64_t, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (cls, clrsb, uint32_t, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (clsl, clrsbl, unsigned long, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (clsll, clrsbll, uint64_t, unsigned int)\n+_GCC_ARM_ACLE_DATA_FN (rev16, aarch64_rev16, uint32_t, uint32_t)\n+_GCC_ARM_ACLE_DATA_FN (rev16l, aarch64_rev16l, unsigned long, unsigned long)\n+_GCC_ARM_ACLE_DATA_FN (rev16ll, aarch64_rev16ll, uint64_t, uint64_t)\n+_GCC_ARM_ACLE_DATA_FN (rbit, aarch64_rbit, uint32_t, uint32_t)\n+_GCC_ARM_ACLE_DATA_FN (rbitl, aarch64_rbitl, unsigned long, unsigned long)\n+_GCC_ARM_ACLE_DATA_FN (rbitll, aarch64_rbitll, uint64_t, uint64_t)\n+_GCC_ARM_ACLE_DATA_FN (revsh, bswap16, int16_t, int16_t)\n+_GCC_ARM_ACLE_DATA_FN (rev, bswap32, uint32_t, uint32_t)\n+_GCC_ARM_ACLE_DATA_FN (revll, bswap64, uint64_t, uint64_t)\n+\n+#undef _GCC_ARM_ACLE_DATA_FN\n+\n+__extension__ extern __inline unsigned long\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__revl (unsigned long __value)\n+{\n+  if (sizeof (unsigned long) == 8)\n+    return __revll (__value);\n+  else\n+    return __rev (__value);\n+}\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.3-a\")\n __extension__ extern __inline int32_t"}, {"sha": "e067ef20bbdc8993865b541aa99dccac6b03e6a0", "filename": "gcc/testsuite/gcc.target/aarch64/acle/data-intrinsics.c", "status": "added", "additions": 468, "deletions": 0, "changes": 468, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fdata-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb966d393dfdfd2c80994e4bfcc0dddf85828a73/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fdata-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fdata-intrinsics.c?ref=eb966d393dfdfd2c80994e4bfcc0dddf85828a73", "patch": "@@ -0,0 +1,468 @@\n+/* Test the ACLE data intrinsics.  */\n+/* { dg-do assemble } */\n+/* { dg-additional-options \"--save-temps -O1\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include \"arm_acle.h\"\n+\n+/*\n+** test_clz:\n+**\tclz\tw0, w0\n+**\tret\n+*/\n+\n+unsigned int test_clz (uint32_t a)\n+{\n+  return __clz (a);\n+}\n+\n+/*\n+** test_clzl:\n+**\tclz\t[wx]0, [wx]0\n+**\tret\n+*/\n+\n+unsigned int test_clzl (unsigned long a)\n+{\n+  return __clzl (a);\n+}\n+\n+/*\n+** test_clzll:\n+**\tclz\tx0, x0\n+**\tret\n+*/\n+\n+unsigned int test_clzll (uint64_t a)\n+{\n+  return __clzll (a);\n+}\n+\n+/*\n+** test_cls:\n+**\tcls\tw0, w0\n+**\tret\n+*/\n+\n+unsigned int test_cls (uint32_t a)\n+{\n+  return __cls (a);\n+}\n+\n+/*\n+** test_clsl:\n+**\tcls\t[wx]0, [wx]0\n+**\tret\n+*/\n+\n+unsigned int test_clsl (unsigned long a)\n+{\n+  return __clsl (a);\n+}\n+\n+/*\n+** test_clsll:\n+**\tcls\tx0, x0\n+**\tret\n+*/\n+\n+unsigned int test_clsll (uint64_t a)\n+{\n+  return __clsll (a);\n+}\n+\n+/*\n+** test_rbit:\n+**\trbit\tw0, w0\n+**\tret\n+*/\n+\n+uint32_t test_rbit (uint32_t a)\n+{\n+  return __rbit (a);\n+}\n+\n+/*\n+** test_rbitl:\n+**\trbit\t[wx]0, [wx]0\n+**\tret\n+*/\n+\n+unsigned long test_rbitl (unsigned long a)\n+{\n+  return __rbitl (a);\n+}\n+\n+/*\n+** test_rbitll:\n+**\trbit\tx0, x0\n+**\tret\n+*/\n+\n+uint64_t test_rbitll (uint64_t a)\n+{\n+  return __rbitll (a);\n+}\n+\n+/*\n+** test_rev:\n+**\trev\tw0, w0\n+**\tret\n+*/\n+\n+uint32_t test_rev (uint32_t a)\n+{\n+  return __rev (a);\n+}\n+\n+/*\n+** test_revl:\n+**\trev\t[wx]0, [wx]0\n+**\tret\n+*/\n+\n+unsigned long test_revl (unsigned long a)\n+{\n+  return __revl (a);\n+}\n+\n+/*\n+** test_revll:\n+**\trev\tx0, x0\n+**\tret\n+*/\n+\n+uint64_t test_revll (uint64_t a)\n+{\n+  return __revll (a);\n+}\n+\n+/*\n+** test_rev16:\n+**\trev16\tw0, w0\n+**\tret\n+*/\n+\n+uint32_t test_rev16 (uint32_t a)\n+{\n+  return __rev16 (a);\n+}\n+\n+/*\n+** test_rev16l:\n+**\trev16\t[wx]0, [wx]0\n+**\tret\n+*/\n+\n+unsigned long test_rev16l (unsigned long a)\n+{\n+  return __rev16l (a);\n+}\n+\n+/*\n+** test_rev16ll:\n+**\trev16\tx0, x0\n+**\tret\n+*/\n+\n+uint64_t test_rev16ll (uint64_t a)\n+{\n+  return __rev16ll (a);\n+}\n+\n+/*\n+** test_ror:\n+**\tror\tw0, w0, w1\n+**\tret\n+*/\n+\n+uint32_t test_ror (uint32_t a, uint32_t r)\n+{\n+  return __ror (a, r);\n+}\n+\n+/*\n+** test_rorl:\n+**\tror\t[wx]0, [wx]0, [wx]1\n+**\tret\n+*/\n+\n+unsigned long test_rorl (unsigned long a, uint32_t r)\n+{\n+  return __rorl (a, r);\n+}\n+\n+/*\n+** test_rorll:\n+**\tror\tx0, x0, x1\n+**\tret\n+*/\n+\n+uint64_t test_rorll (uint64_t a, uint32_t r)\n+{\n+  return __rorll (a, r);\n+}\n+\n+/*\n+** test_revsh:\n+**\trev16\tw0, w0\n+**\tret\n+*/\n+\n+int16_t test_revsh (int16_t a)\n+{\n+  return __revsh (a);\n+}\n+\n+uint32_t *g32;\n+unsigned long *gul;\n+uint64_t *g64;\n+unsigned int *gui;\n+int16_t *g16;\n+\n+/*\n+** test_clz_mem:\n+**\t...\n+**\tclz\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_clz_mem (uint32_t *a)\n+{\n+  *gui = __clz (*a);\n+}\n+\n+/*\n+** test_clzl_mem:\n+**\t...\n+**\tclz\t[wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_clzl_mem (unsigned long *a)\n+{\n+  *gui = __clzl (*a);\n+}\n+\n+/*\n+** test_clzll_mem:\n+**\t...\n+**\tclz\tx[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_clzll_mem (uint64_t *a)\n+{\n+  *gui = __clzll (*a);\n+}\n+\n+/*\n+** test_cls_mem:\n+**\t...\n+**\tcls\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_cls_mem (uint32_t *a)\n+{\n+  *gui = __cls (*a);\n+}\n+\n+/*\n+** test_clsl_mem:\n+**\t...\n+**\tcls\t[wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_clsl_mem (unsigned long *a)\n+{\n+  *gui = __clsl (*a);\n+}\n+\n+/*\n+** test_clsll_mem:\n+**\t...\n+**\tcls\tx[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_clsll_mem (uint64_t *a)\n+{\n+  *gui = __clsll (*a);\n+}\n+\n+/*\n+** test_rbit_mem:\n+**\t...\n+**\trbit\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rbit_mem (uint32_t *a)\n+{\n+  *g32 = __rbit (*a);\n+}\n+\n+/*\n+** test_rbitl_mem:\n+**\t...\n+**\trbit\t[wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rbitl_mem (unsigned long *a)\n+{\n+  *gul = __rbitl (*a);\n+}\n+\n+/*\n+** test_rbitll_mem:\n+**\t...\n+**\trbit\tx[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rbitll_mem (uint64_t *a)\n+{\n+  *g64 = __rbitll (*a);\n+}\n+\n+/*\n+** test_rev_mem:\n+**\t...\n+**\trev\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rev_mem (uint32_t *a)\n+{\n+  *g32 = __rev (*a);\n+}\n+\n+/*\n+** test_revl_mem:\n+**\t...\n+**\trev\t[wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_revl_mem (unsigned long *a)\n+{\n+  *gul = __revl (*a);\n+}\n+\n+/*\n+** test_revll_mem:\n+**\t...\n+**\trev\tx[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_revll_mem (uint64_t *a)\n+{\n+  *g64 = __revll (*a);\n+}\n+\n+/*\n+** test_rev16_mem:\n+**\t...\n+**\trev16\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rev16_mem (uint32_t *a)\n+{\n+  *g32 = __rev16 (*a);\n+}\n+\n+/*\n+** test_rev16l_mem:\n+**\t...\n+**\trev16\t[wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rev16l_mem (unsigned long *a)\n+{\n+  *gul = __rev16l (*a);\n+}\n+\n+/*\n+** test_rev16ll_mem:\n+**\t...\n+**\trev16\tx[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rev16ll_mem (uint64_t *a)\n+{\n+  *g64 = __rev16ll (*a);\n+}\n+\n+/*\n+** test_ror_mem:\n+**\t...\n+**\tror\tw[0-9]+, w[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_ror_mem (uint32_t *a, uint32_t *r)\n+{\n+  *g32 = __ror (*a, *r);\n+}\n+\n+/*\n+** test_rorl_mem:\n+**\t...\n+**\tror\t[wx][0-9]+, [wx][0-9]+, [wx][0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rorl_mem (unsigned long *a, uint32_t *r)\n+{\n+  *gul = __rorl (*a, *r);\n+}\n+\n+/*\n+** test_rorll_mem:\n+**\t...\n+**\tror\tx[0-9]+, x[0-9]+, x[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_rorll_mem (uint64_t *a, uint32_t *r)\n+{\n+  *g64 = __rorll (*a, *r);\n+}\n+\n+/*\n+** test_revsh_mem:\n+**\t...\n+**\trev16\tw[0-9]+, w[0-9]+\n+**\t...\n+**\tret\n+*/\n+\n+void test_revsh_mem (int16_t *a)\n+{\n+  *g16 = __revsh (*a);\n+}"}]}