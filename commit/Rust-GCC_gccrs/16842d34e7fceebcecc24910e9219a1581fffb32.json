{"sha": "16842d34e7fceebcecc24910e9219a1581fffb32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4NDJkMzRlN2ZjZWViY2VjYzI0OTEwZTkyMTlhMTU4MWZmZmIzMg==", "commit": {"author": {"name": "Yury Gribov", "email": "tetra2005@gmail.com", "date": "2017-06-13T11:13:52Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-06-13T11:13:52Z"}, "message": "re PR tree-optimization/67328 (range test rather than single bit test for code testing enum values)\n\n2017-06-13  Yury Gribov  <tetra2005@gmail.com>\n\ngcc/\n\tPR tree-optimization/67328\n\t* fold-const.c (maskable_range_p): New function.\n\t(build_range_check): Generate bittests if possible.\n\ngcc/testsuite/\n\tPR tree-optimization/67328\n\t* c-c++-common/fold-masked-cmp-1.c: New test.\n\t* c-c++-common/fold-masked-cmp-2.c: Likewise.\n\t* gcc.dg/pr46309.c: Fix pattern.\n\t* gcc.dg/pr46309-2.c: Likewise.\n\nFrom-SVN: r249149", "tree": {"sha": "b8dfa51c6b364f24b5de6aa6cf85779c233e4c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8dfa51c6b364f24b5de6aa6cf85779c233e4c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16842d34e7fceebcecc24910e9219a1581fffb32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16842d34e7fceebcecc24910e9219a1581fffb32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16842d34e7fceebcecc24910e9219a1581fffb32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16842d34e7fceebcecc24910e9219a1581fffb32/comments", "author": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba593ad58f849c711afc0f2255630757e020ccda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba593ad58f849c711afc0f2255630757e020ccda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba593ad58f849c711afc0f2255630757e020ccda"}], "stats": {"total": 144, "additions": 141, "deletions": 3}, "files": [{"sha": "83f048001fa75c0626ccaf7821f45eab45f38541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -1,3 +1,9 @@\n+2017-06-13  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR tree-optimization/67328\n+\t* fold-const.c (maskable_range_p): New function.\n+\t(build_range_check): Generate bittests if possible.\n+\n 2017-06-13  Martin Liska  <mliska@suse.cz>\n \n \t* gimple-pretty-print.c (dump_probability): Add new argument."}, {"sha": "74bbdb07ffb4fdaee2c90fd7a13b814245576828", "filename": "gcc/fold-const.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -4745,6 +4745,40 @@ make_range (tree exp, int *pin_p, tree *plow, tree *phigh,\n   *pin_p = in_p, *plow = low, *phigh = high;\n   return exp;\n }\n+\n+/* Returns TRUE if [LOW, HIGH] range check can be optimized to\n+   a bitwise check i.e. when\n+     LOW  == 0xXX...X00...0\n+     HIGH == 0xXX...X11...1\n+   Return corresponding mask in MASK and stem in VALUE.  */\n+\n+static bool\n+maskable_range_p (const_tree low, const_tree high, tree type, tree *mask,\n+\t\t  tree *value)\n+{\n+  if (TREE_CODE (low) != INTEGER_CST\n+      || TREE_CODE (high) != INTEGER_CST)\n+    return false;\n+\n+  unsigned prec = TYPE_PRECISION (type);\n+  wide_int lo = wi::to_wide (low, prec);\n+  wide_int hi = wi::to_wide (high, prec);\n+\n+  wide_int end_mask = lo ^ hi;\n+  if ((end_mask & (end_mask + 1)) != 0\n+      || (lo & end_mask) != 0)\n+    return false;\n+\n+  wide_int stem_mask = ~end_mask;\n+  wide_int stem = lo & stem_mask;\n+  if (stem != (hi & stem_mask))\n+    return false;\n+\n+  *mask = wide_int_to_tree (type, stem_mask);\n+  *value = wide_int_to_tree (type, stem);\n+\n+  return true;\n+}\n \f\n /* Given a range, LOW, HIGH, and IN_P, an expression, EXP, and a result\n    type, TYPE, return an expression to test if EXP is in (or out of, depending\n@@ -4754,7 +4788,7 @@ tree\n build_range_check (location_t loc, tree type, tree exp, int in_p,\n \t\t   tree low, tree high)\n {\n-  tree etype = TREE_TYPE (exp), value;\n+  tree etype = TREE_TYPE (exp), mask, value;\n \n   /* Disable this optimization for function pointer expressions\n      on targets that require function pointer canonicalization.  */\n@@ -4787,6 +4821,13 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n     return fold_build2_loc (loc, EQ_EXPR, type, exp,\n \t\t\tfold_convert_loc (loc, etype, low));\n \n+  if (TREE_CODE (exp) == BIT_AND_EXPR\n+      && maskable_range_p (low, high, etype, &mask, &value))\n+    return fold_build2_loc (loc, EQ_EXPR, type,\n+\t\t\t    fold_build2_loc (loc, BIT_AND_EXPR, etype,\n+\t\t\t\t\t      exp, mask),\n+\t\t\t    value);\n+\n   if (integer_zerop (low))\n     {\n       if (! TYPE_UNSIGNED (etype))"}, {"sha": "678b89287ccd9744142ad35f2df7bc5aa897c33f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -1,3 +1,11 @@\n+2017-06-13  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR tree-optimization/67328\n+\t* c-c++-common/fold-masked-cmp-1.c: New test.\n+\t* c-c++-common/fold-masked-cmp-2.c: Likewise.\n+\t* gcc.dg/pr46309.c: Fix pattern.\n+\t* gcc.dg/pr46309-2.c: Likewise.\n+\n 2017-06-13  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/arm/sdiv_costs_1.c:"}, {"sha": "a0e9083709e471e69f8b3a357ebd80ecabe7faa0", "filename": "gcc/testsuite/c-c++-common/fold-masked-cmp-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-1.c?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -0,0 +1,41 @@\n+/* Based on PR 67328 */\n+\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+enum output_type\n+{\n+  type_pde,\n+  type_pie,\n+  type_relocatable,\n+  type_dll,\n+};\n+\n+struct bfd_link_info\n+{\n+  enum output_type type : 2;\n+  unsigned int pad : 30;\n+};\n+\n+#define bfd_link_pde(info)\t   ((info)->type == type_pde)\n+#define bfd_link_dll(info)\t   ((info)->type == type_dll)\n+#define bfd_link_relocatable(info) ((info)->type == type_relocatable)\n+#define bfd_link_pie(info)\t   ((info)->type == type_pie)\n+#define bfd_link_executable(info)  (bfd_link_pde (info) || bfd_link_pie (info))\n+#define bfd_link_pic(info)\t   (bfd_link_dll (info) || bfd_link_pie (info))\n+\n+int result;\n+\n+void test_pic (struct bfd_link_info *info)\n+{\n+  if (bfd_link_pic (info))\n+    result++;\n+}\n+\n+int test_exe (struct bfd_link_info *info)\n+{\n+  if (bfd_link_executable (info))\n+    result++;\n+}\n+\n+/* { dg-final { scan-assembler-times \"testn?b\" 2 } } */"}, {"sha": "13d068aa1e0d168f27d80c9141c2e29f22935ef5", "filename": "gcc/testsuite/c-c++-common/fold-masked-cmp-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffold-masked-cmp-2.c?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -0,0 +1,42 @@\n+/* Based on PR 67328 */\n+\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+enum output_type\n+{\n+  type_pde,\n+  type_relocatable,\n+  type_pie,\n+  type_dll,\n+};\n+\n+struct bfd_link_info\n+{\n+  enum output_type type : 2;\n+  unsigned int pad : 30;\n+};\n+\n+#define bfd_link_pde(info)\t   ((info)->type == type_pde)\n+#define bfd_link_dll(info)\t   ((info)->type == type_dll)\n+#define bfd_link_relocatable(info) ((info)->type == type_relocatable)\n+#define bfd_link_pie(info)\t   ((info)->type == type_pie)\n+#define bfd_link_executable(info)  (bfd_link_pde (info) || bfd_link_pie (info))\n+#define bfd_link_pic(info)\t   (bfd_link_dll (info) || bfd_link_pie (info))\n+\n+int result;\n+\n+void test_pic (struct bfd_link_info *info)\n+{\n+  if (bfd_link_pic (info))\n+    result++;\n+}\n+\n+int test_exe (struct bfd_link_info *info)\n+{\n+  if (bfd_link_executable (info))\n+    result++;\n+}\n+\n+/* { dg-final { scan-assembler-times \"testn?b\" 2 } } */\n+"}, {"sha": "f56df42935cf6816fd8539ddf725b2325f9cce87", "filename": "gcc/testsuite/gcc.dg/pr46309-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309-2.c?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -142,4 +142,4 @@ f10 (int a)\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.0, 31. and -.64, 95.\\[\\n\\r\\]* into\" 1 \"reassoc1\" } } */\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.128, 159. and -.192, 223.\\[\\n\\r\\]* into\" 1 \"reassoc1\" } } */\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.1, 1. and -.2, 2. and -.3, 3. and -.4, 4. and -.5, 5. and -.6, 6. and -.7, 7. and -.8, 8.\\[\\n\\r\\]* into\" 7 \"reassoc1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[^\\r\\n\\]*_\\[0-9\\]* -.0, 31. and -.128, 159.\\[\\n\\r\\]* into\" 1 \"reassoc2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[^\\r\\n\\]*_\\[0-9\\]* -.0, 0. and -.128, 128.\\[\\n\\r\\]* into\" 1 \"reassoc2\" } } */"}, {"sha": "68229cf61d94b9dcb37d7c7becf371e8521f005f", "filename": "gcc/testsuite/gcc.dg/pr46309.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16842d34e7fceebcecc24910e9219a1581fffb32/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46309.c?ref=16842d34e7fceebcecc24910e9219a1581fffb32", "patch": "@@ -65,4 +65,4 @@ f6 (unsigned int a)\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.1, 1. and -.2, 2.\\[\\n\\r\\]* into\" 1 \"reassoc1\" } } */\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.0, 31. and -.64, 95.\\[\\n\\r\\]* into\" 2 \"reassoc1\" } } */\n /* { dg-final { scan-tree-dump-times \"Optimizing range tests a_\\[0-9\\]*.D. -.128, 159. and -.192, 223.\\[\\n\\r\\]* into\" 1 \"reassoc1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[^\\r\\n\\]*_\\[0-9\\]* -.0, 31. and -.128, 159.\\[\\n\\r\\]* into\" 1 \"reassoc2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[^\\r\\n\\]*_\\[0-9\\]* -.0, 0. and -.128, 128.\\[\\n\\r\\]* into\" 1 \"reassoc2\" } } */"}]}