{"sha": "46290aa831d1577d081c5d264ae225e21b7a86ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyOTBhYTgzMWQxNTc3ZDA4MWM1ZDI2NGFlMjI1ZTIxYjdhODZlZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-02-06T19:15:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-02-06T19:15:56Z"}, "message": "re PR target/64205 (powerpc64-linux --with-cpu=G5 bootstrap failure)\n\n[gcc]\n2015-02-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/64205\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not\n\tadd a general secondary reload handler for SDmode, unless we have\n\tboth read/write support for SDmode.\n\n[gcc/testsuite]\n2015-02-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/64205\n\t* gcc.target/powerpc/pr64205.c: New file.\n\nFrom-SVN: r220485", "tree": {"sha": "ad44551ee6e61e759dc738906bb4456ec7c8371e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad44551ee6e61e759dc738906bb4456ec7c8371e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46290aa831d1577d081c5d264ae225e21b7a86ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46290aa831d1577d081c5d264ae225e21b7a86ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46290aa831d1577d081c5d264ae225e21b7a86ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46290aa831d1577d081c5d264ae225e21b7a86ef/comments", "author": null, "committer": null, "parents": [{"sha": "828be03ae9263c8ebb7f6478408091de4e8c4dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828be03ae9263c8ebb7f6478408091de4e8c4dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828be03ae9263c8ebb7f6478408091de4e8c4dd6"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "7b9d630b85d31bddcb7ee8cab0580d5582834556", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46290aa831d1577d081c5d264ae225e21b7a86ef", "patch": "@@ -1,3 +1,10 @@\n+2015-02-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/64205\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not\n+\tadd a general secondary reload handler for SDmode, unless we have\n+\tboth read/write support for SDmode.\n+\n 2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/64937\n@@ -23,7 +30,7 @@\n \t(h8300_push_pop): Corresponding changes.\n \t(h8300_expand_prologue): Likewise.\n \t(h8300_swap_into_er6): Likewise.  Do not set RTX_FRAME_RELATED_P.\n-\t\t\n+\n 2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/64957"}, {"sha": "949c4d22b21cb91d681e61ba1570b531493becb1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=46290aa831d1577d081c5d264ae225e21b7a86ef", "patch": "@@ -2849,8 +2849,14 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t  reg_addr[DDmode].reload_load     = CODE_FOR_reload_dd_di_load;\n \t  reg_addr[SFmode].reload_store    = CODE_FOR_reload_sf_di_store;\n \t  reg_addr[SFmode].reload_load     = CODE_FOR_reload_sf_di_load;\n-\t  reg_addr[SDmode].reload_store    = CODE_FOR_reload_sd_di_store;\n-\t  reg_addr[SDmode].reload_load     = CODE_FOR_reload_sd_di_load;\n+\n+\t  /* Only provide a reload handler for SDmode if lfiwzx/stfiwx are\n+\t     available.  */\n+\t  if (TARGET_NO_SDMODE_STACK)\n+\t    {\n+\t      reg_addr[SDmode].reload_store = CODE_FOR_reload_sd_di_store;\n+\t      reg_addr[SDmode].reload_load  = CODE_FOR_reload_sd_di_load;\n+\t    }\n \n \t  if (TARGET_VSX_TIMODE)\n \t    {\n@@ -2903,8 +2909,14 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t  reg_addr[DDmode].reload_load     = CODE_FOR_reload_dd_si_load;\n \t  reg_addr[SFmode].reload_store    = CODE_FOR_reload_sf_si_store;\n \t  reg_addr[SFmode].reload_load     = CODE_FOR_reload_sf_si_load;\n-\t  reg_addr[SDmode].reload_store    = CODE_FOR_reload_sd_si_store;\n-\t  reg_addr[SDmode].reload_load     = CODE_FOR_reload_sd_si_load;\n+\n+\t  /* Only provide a reload handler for SDmode if lfiwzx/stfiwx are\n+\t     available.  */\n+\t  if (TARGET_NO_SDMODE_STACK)\n+\t    {\n+\t      reg_addr[SDmode].reload_store = CODE_FOR_reload_sd_si_store;\n+\t      reg_addr[SDmode].reload_load  = CODE_FOR_reload_sd_si_load;\n+\t    }\n \n \t  if (TARGET_VSX_TIMODE)\n \t    {"}, {"sha": "e3e54449232468d78eb1cf9c06420082aebf8275", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46290aa831d1577d081c5d264ae225e21b7a86ef", "patch": "@@ -1,3 +1,8 @@\n+2015-02-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/64205\n+\t* gcc.target/powerpc/pr64205.c: New file.\n+\n 2015-02-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr64317.c: Compile for 32bit *-*-linux* targets."}, {"sha": "58e4b980fd80bbe63ed266e1f773a0b828b84c3d", "filename": "gcc/testsuite/gcc.target/powerpc/pr64205.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46290aa831d1577d081c5d264ae225e21b7a86ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64205.c?ref=46290aa831d1577d081c5d264ae225e21b7a86ef", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=G5\" } } */\n+/* { dg-options \"-O2 -mcpu=G5 -maltivec -m32\" } */\n+\n+union ieee754r_Decimal32\n+{\n+  _Decimal32 sd;\n+  unsigned int cc0;\n+};\n+\n+unsigned int\n+__decoded32 (_Decimal32 a)\n+{\n+    union ieee754r_Decimal32 d;\n+    d.sd = a;\n+    return d.cc0;\n+}"}]}