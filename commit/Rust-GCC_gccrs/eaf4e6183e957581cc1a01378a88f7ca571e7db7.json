{"sha": "eaf4e6183e957581cc1a01378a88f7ca571e7db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmNGU2MTgzZTk1NzU4MWNjMWEwMTM3OGE4OGY3Y2E1NzFlN2RiNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-03T03:32:55Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-03T03:32:55Z"}, "message": "configure.in: Kill tm.h.\n\n\t* configure.in: Kill tm.h.  Include the files in the $tm_file\n\tlist in all three of config.h, hconfig.h, tconfig.h, after the\n\trelevant set of xm_files.  Put TARGET_CPU_DEFAULT in all\n\tthree, include insn-codes.h in all three (#ifndef GENERATOR_FILE).\n\t* configure: Regenerate.\n\t* Makefile.in (clean): Don't delete tm.h.\n\n\t* system.h: If SUCCESS_EXIT_CODE and FATAL_EXIT_CODE are not\n\tdefined, set them from EXIT_SUCCESS and EXIT_FAILURE.  If\n\tthose are not defined, set SEC and FEC to 0 and 1.\n\t* gcc.texi: Update to match.\n\n\t* crtstuff.c: Include tconfig.h, not auto-host.h and tm.h.\n\t* config/fp-bit.c, config/m68k/aux-crt2.asm,\n\tconfig/m68k/aux-crtn.asm, config/m68k/aux-mcount.c:\n\tInclude tconfig.h, not tm.h.\n\n\t* config/xm-lynx.h, config/xm-std32.h,\n\tconfig/a29k/xm-a29k.h, config/a29k/xm-unix.h,\n\tconfig/alpha/xm-alpha.h, config/arc/xm-arc.h,\n\tconfig/avr/xm-avr.h, config/c4x/xm-c4x.h,\n\tconfig/clipper/xm-clix.h, config/convex/xm-convex.h,\n\tconfig/d30v/xm-d30v.h, config/dsp16xx/xm-dsp16xx.h,\n\tconfig/elxsi/xm-elxsi.h, config/fr30/xm-fr30.h,\n\tconfig/h8300/xm-h8300.h, config/i370/xm-linux.h,\n\tconfig/i386/xm-i386.h, config/i860/xm-i860.h,\n\tconfig/i960/xm-i960.h, config/ia64/xm-ia64.h,\n\tconfig/m32r/xm-m32r.h, config/m68hc11/xm-m68hc11.h,\n\tconfig/m88k/xm-m88k.h, config/mcore/xm-mcore.h,\n\tconfig/mips/xm-mips.h, config/mn10200/xm-mn10200.h,\n\tconfig/mn10300/xm-mn10300.h, config/ns32k/xm-ns32k.h,\n\tconfig/pa/xm-linux.h, config/pa/xm-pa.h,\n\tconfig/pa/xm-pa64hpux.h, config/pa/xm-pahpux.h,\n\tconfig/pa/xm-papro.h, config/pdp11/xm-pdp11.h,\n\tconfig/pj/xm-pj.h, config/romp/xm-romp.h,\n\tconfig/rs6000/xm-beos.h, config/rs6000/xm-rs6000.h,\n\tconfig/rs6000/xm-sysv4.h, config/sh/xm-sh.h,\n\tconfig/sparc/xm-sparc.h, config/sparc/xm-sysv4.h,\n\tconfig/v850/xm-v850.h, config/vax/xm-vax.h,\n\tconfig/we32k/xm-we32k.h:\n\tDon't include tm.h.\n\tDon't define SUCCESS_EXIT_CODE or FATAL_EXIT_CODE.\n\n\t* config/i370/xm-i370.h, config/i370/xm-mvs.h,\n\tconfig/i370/xm-oe.h: Don't include tm.h.  Don't define\n\tSUCCESS_EXIT_CODE.\n\t* config/vax/xm-vms.h: Don't include tm.h.\n\n\t* config/xm-lynx.h, config/avr/xm-avr.h,\n\tconfig/fr30/xm-fr30.h, config/pdp11/xm-pdp11.h,\n\tDelete; made empty by above changes.\n\t* config/i386/xm-lynx.h, config/m68k/xm-lynx.h,\n\tconfig/rs6000/xm-lynx.h, config/sparc/xm-lynx.h:\n\tDon't include config/xm-lynx.h or tm.h.\n\n\t* config/xm-gnu.h: Don't include fcntl.h.\n\t* config/sparc/xm-lynx.h: Don't include sys/types.h and\n\tsys/wait.h.\n\t* config/clipper/xm-clix.h, config/vax/xm-vax.h: Don't define isinf.\n\nFrom-SVN: r40199", "tree": {"sha": "f194838a82706bc950961ea554c14f5271f5e0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f194838a82706bc950961ea554c14f5271f5e0ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaf4e6183e957581cc1a01378a88f7ca571e7db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf4e6183e957581cc1a01378a88f7ca571e7db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf4e6183e957581cc1a01378a88f7ca571e7db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf4e6183e957581cc1a01378a88f7ca571e7db7/comments", "author": null, "committer": null, "parents": [{"sha": "1a7519ff614294ba8b234a1e605066cac3029220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7519ff614294ba8b234a1e605066cac3029220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7519ff614294ba8b234a1e605066cac3029220"}], "stats": {"total": 935, "additions": 242, "deletions": 693}, "files": [{"sha": "3dc3f1965246fd49990227dce337c44b5fb339da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 20, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -1,3 +1,65 @@\n+2001-03-02  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* configure.in: Kill tm.h.  Include the files in the $tm_file\n+\tlist in all three of config.h, hconfig.h, tconfig.h, after the\n+\trelevant set of xm_files.  Put TARGET_CPU_DEFAULT in all\n+\tthree, include insn-codes.h in all three (#ifndef GENERATOR_FILE).\n+\t* configure: Regenerate.\n+\t* Makefile.in (clean): Don't delete tm.h.\n+\n+\t* system.h: If SUCCESS_EXIT_CODE and FATAL_EXIT_CODE are not\n+\tdefined, set them from EXIT_SUCCESS and EXIT_FAILURE.  If\n+\tthose are not defined, set SEC and FEC to 0 and 1.\n+\t* gcc.texi: Update to match.\n+\n+\t* crtstuff.c: Include tconfig.h, not auto-host.h and tm.h.\n+\t* config/fp-bit.c, config/m68k/aux-crt2.asm,\n+\tconfig/m68k/aux-crtn.asm, config/m68k/aux-mcount.c:\n+\tInclude tconfig.h, not tm.h.\n+\n+\t* config/xm-lynx.h, config/xm-std32.h,\n+\tconfig/a29k/xm-a29k.h, config/a29k/xm-unix.h,\n+\tconfig/alpha/xm-alpha.h, config/arc/xm-arc.h,\n+\tconfig/avr/xm-avr.h, config/c4x/xm-c4x.h,\n+\tconfig/clipper/xm-clix.h, config/convex/xm-convex.h,\n+\tconfig/d30v/xm-d30v.h, config/dsp16xx/xm-dsp16xx.h,\n+\tconfig/elxsi/xm-elxsi.h, config/fr30/xm-fr30.h,\n+\tconfig/h8300/xm-h8300.h, config/i370/xm-linux.h,\n+\tconfig/i386/xm-i386.h, config/i860/xm-i860.h,\n+\tconfig/i960/xm-i960.h, config/ia64/xm-ia64.h,\n+\tconfig/m32r/xm-m32r.h, config/m68hc11/xm-m68hc11.h,\n+\tconfig/m88k/xm-m88k.h, config/mcore/xm-mcore.h,\n+\tconfig/mips/xm-mips.h, config/mn10200/xm-mn10200.h,\n+\tconfig/mn10300/xm-mn10300.h, config/ns32k/xm-ns32k.h,\n+\tconfig/pa/xm-linux.h, config/pa/xm-pa.h,\n+\tconfig/pa/xm-pa64hpux.h, config/pa/xm-pahpux.h,\n+\tconfig/pa/xm-papro.h, config/pdp11/xm-pdp11.h,\n+\tconfig/pj/xm-pj.h, config/romp/xm-romp.h,\n+\tconfig/rs6000/xm-beos.h, config/rs6000/xm-rs6000.h,\n+\tconfig/rs6000/xm-sysv4.h, config/sh/xm-sh.h,\n+\tconfig/sparc/xm-sparc.h, config/sparc/xm-sysv4.h,\n+\tconfig/v850/xm-v850.h, config/vax/xm-vax.h,\n+\tconfig/we32k/xm-we32k.h:\n+\tDon't include tm.h.\n+\tDon't define SUCCESS_EXIT_CODE or FATAL_EXIT_CODE.\n+\n+\t* config/i370/xm-i370.h, config/i370/xm-mvs.h,\n+\tconfig/i370/xm-oe.h: Don't include tm.h.  Don't define\n+\tSUCCESS_EXIT_CODE.\n+\t* config/vax/xm-vms.h: Don't include tm.h.\n+\n+\t* config/xm-lynx.h, config/avr/xm-avr.h,\n+\tconfig/fr30/xm-fr30.h, config/pdp11/xm-pdp11.h,\n+\tDelete; made empty by above changes.\n+\t* config/i386/xm-lynx.h, config/m68k/xm-lynx.h,\n+\tconfig/rs6000/xm-lynx.h, config/sparc/xm-lynx.h:\n+\tDon't include config/xm-lynx.h or tm.h.\n+\n+\t* config/xm-gnu.h: Don't include fcntl.h.\n+\t* config/sparc/xm-lynx.h: Don't include sys/types.h and\n+\tsys/wait.h.\n+\t* config/clipper/xm-clix.h, config/vax/xm-vax.h: Don't define isinf.\n+\n 2001-03-02  Richard Henderson  <rth@redhat.com>\n \n \t* tm.texi (File Framework): Document UNALIGNED_SHORT_ASM_OP,\n@@ -80,7 +142,7 @@\n \t(GET_NOTE_INSN_NAME): Cast enum to int.\n \t* tree.h (TREE_CODE): Cast to enum tree_code.\n \t(TREE_SET_CODE): Cast VALUE to ENUM_BITFIELD(tree_code).\n-        * timevar.c (timevar_print): Change loop variable id from enum to\n+\t* timevar.c (timevar_print): Change loop variable id from enum to\n \tunsigned int.\n \t* fixinc/fixincl.c (VLEVEL): Cast enums in comparison to unsigned int.\n \t* config/i386/i386.md: Use PUT_MODE for mode assignment.\n@@ -99,24 +161,24 @@ Fri Mar  2 11:59:43 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-03-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cppfiles.c (struct include_file): Update.\n-        (stack_include_file): Use search_from.\n-        (cpp_included, find_include_file): Update.\n-        (cpp_execute_include): Update.  ptr->name may not be\n-        null terminated.  Use the new search_from member variable\n-        of cpp_buffer.\n-        (_cpp_compare_file_date): Similarly.\n-        (search_from): New function, similiar to actual_directory.\n-        (actual_directory): Delete.\n-        (remap_filename): Update.  loc->name may not be null terminated.\n-        (struct file_name_list): Rename search_path.  Update.\n-        * cpphash.h (struct cpp_buffer): Delete actual_dir.  New members\n-        search_from and dir.\n-        (struct cpp_reader): Remove actual_dirs.\n-        * cppinit.c (struct cpp_pending): Update for renamed objects.\n-        (append_include_chain, remove_dup_dir, remove_dup_dirs,\n-        merge_include_chains, cpp_destroy, cpp_start_read): Similarly.\n-        * cpplib.h (struct cpp_options): Similarly.\n+\t* cppfiles.c (struct include_file): Update.\n+\t(stack_include_file): Use search_from.\n+\t(cpp_included, find_include_file): Update.\n+\t(cpp_execute_include): Update.  ptr->name may not be\n+\tnull terminated.  Use the new search_from member variable\n+\tof cpp_buffer.\n+\t(_cpp_compare_file_date): Similarly.\n+\t(search_from): New function, similiar to actual_directory.\n+\t(actual_directory): Delete.\n+\t(remap_filename): Update.  loc->name may not be null terminated.\n+\t(struct file_name_list): Rename search_path.  Update.\n+\t* cpphash.h (struct cpp_buffer): Delete actual_dir.  New members\n+\tsearch_from and dir.\n+\t(struct cpp_reader): Remove actual_dirs.\n+\t* cppinit.c (struct cpp_pending): Update for renamed objects.\n+\t(append_include_chain, remove_dup_dir, remove_dup_dirs,\n+\tmerge_include_chains, cpp_destroy, cpp_start_read): Similarly.\n+\t* cpplib.h (struct cpp_options): Similarly.\n \n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n@@ -152,7 +214,7 @@ Fri Mar  2 11:59:43 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* configure.in: Detect stdbool.h.\n \t* configure, config.in: Regenerate.\n-\t* system.h: Include stddef.h here if available.  \n+\t* system.h: Include stddef.h here if available.\n \tSet HAVE__BOOL based on GCC_VERSION and __STDC_VERSION__.\n \tThen set up a sensible boolean type at the very end.\n "}, {"sha": "9f48da4034d63c18ed2695881a98cf375cca2c73", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -641,7 +641,7 @@ HOST_ERRORS = $(HOST_PREFIX)errors.o\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n-# so that tm.h and config.h will be found in the compilation\n+# so that *config.h will be found in the compilation\n # subdirectory rather than in the source directory.\n # -I$(@D) and -I$(srcdir)/$(@D) cause the subdirectory of the file\n # currently being compiled, in both source trees, to be examined as well.\n@@ -2349,7 +2349,7 @@ clean: mostlyclean $(INTL_CLEAN) lang.clean\n # while building and installing GCC.\n INTL_DISTCLEAN = intl.distclean\n distclean: clean $(INTL_DISTCLEAN) lang.distclean\n-\t-rm -f tm.h tm_p.h config.h auto-host.h auto-build.h tconfig.h hconfig.h\n+\t-rm -f tm_p.h config.h auto-host.h auto-build.h tconfig.h hconfig.h\n \t-rm -f cstamp-h\n \t-rm -f config.status config.run config.cache config.bak\n \t-rm -f Make-lang Make-hooks Make-host Make-target"}, {"sha": "4b728e0e762523588706b573e7e9fbaf85e66243", "filename": "gcc/config/a29k/xm-a29k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fxm-a29k.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -26,11 +26,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "c964e1bafa2b29cd0e85693bc96c2c957989d87e", "filename": "gcc/config/a29k/xm-unix.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fa29k%2Fxm-unix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fa29k%2Fxm-unix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fxm-unix.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -27,13 +27,5 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* Ultra is V7, which is closest to USG.  */\n #define USG"}, {"sha": "f68b4ed36428214aceeb4d7c9750b613c7b2986b", "filename": "gcc/config/alpha/xm-alpha.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-alpha.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -27,14 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #define\tHOST_BITS_PER_LONG\t64\n #define HOST_BITS_PER_LONGLONG  64\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define\tSUCCESS_EXIT_CODE\t0\n-#define\tFATAL_EXIT_CODE\t\t33\n-\n /* If compiled with GNU C, use the builtin alloca.  */\n #ifndef alloca\n #if defined(__GNUC__) && !defined(USE_C_ALLOCA)"}, {"sha": "1742ed2bc87b1ef00c02485cf5757865ffb08a16", "filename": "gcc/config/arc/xm-arc.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Farc%2Fxm-arc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Farc%2Fxm-arc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fxm-arc.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -29,14 +29,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with Sun CC, the use of alloca requires this #include.  */\n #ifndef __GNUC__\n #include \"alloca.h\""}, {"sha": "efb1ecfe4618b4211fba0c92b1fd7eca311421f2", "filename": "gcc/config/arm/xm-arm.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Farm%2Fxm-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Farm%2Fxm-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fxm-arm.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -41,18 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #define USE_C_ALLOCA\n #endif\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.  */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If we have defined POSIX, but are compiling in the BSD environment, then\n    we need to define getcwd in terms of getwd.  */\n #if defined (POSIX) && defined (_BSD_C)\n #define HAVE_GETWD 1\n #endif\n-\n-/* EOF xm-arm.h */"}, {"sha": "af51cd3e6e83749f2951238fe5f598b2ff17efe7", "filename": "gcc/config/avr/xm-avr.h", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Favr%2Fxm-avr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Favr%2Fxm-avr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fxm-avr.h?ref=1a7519ff614294ba8b234a1e605066cac3029220", "patch": "@@ -1 +0,0 @@\n-#include \"tm.h\""}, {"sha": "5f75da923e588e33032afb97c86d4c4bb53e97d8", "filename": "gcc/config/c4x/xm-c4x.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fxm-c4x.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -6,11 +6,3 @@\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "4b4a3a013c006ec32927796a1d3084a8c1bf560a", "filename": "gcc/config/clipper/xm-clix.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fclipper%2Fxm-clix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fclipper%2Fxm-clix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fxm-clix.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -1,22 +1,10 @@\n /* Config file for Clipper running Clix, system V. 3.2 clone  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* isinf isn't there, but finite is. */\n-#define isinf(x) (!finite(x))\n-\n #define USG"}, {"sha": "1d464bdabb08cba801826495bd37e2af32e7a951", "filename": "gcc/config/convex/xm-convex.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fconvex%2Fxm-convex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fconvex%2Fxm-convex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fxm-convex.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,21 +18,13 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* Convex uses Vax or IEEE floats.\n    Both formats have Vax semantics. */\n "}, {"sha": "9423cae97f36386361a09ca59ea7e9b739490c58", "filename": "gcc/config/d30v/xm-d30v.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -19,14 +19,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-/* A C expression for the status code to be returned when the compiler exits\n-   after serious errors.  */\n-#define FATAL_EXIT_CODE 33\n-\n-/* A C expression for the status code to be returned when the compiler exits\n-   without serious errors.  */\n-#define SUCCESS_EXIT_CODE 0\n-\n /* Defined if the host machine stores words of multi-word values in big-endian\n    order.  (GNU CC does not depend on the host byte ordering within a word.)  */\n #define HOST_WORDS_BIG_ENDIAN\n@@ -50,7 +42,3 @@\n #else\n #define alloca __builtin_alloca\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "31c225dabb5f56785eec3e71688027ca66353bfd", "filename": "gcc/config/dsp16xx/xm-dsp16xx.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -26,17 +26,9 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with GNU C, use the built-in alloca */\n #ifdef __GNUC__\n #define alloca __builtin_alloca\n #else\n #define USE_C_ALLOCA\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "47845d0bc9403452a90aedd313698278b1664f68", "filename": "gcc/config/elxsi/xm-elxsi.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Fxm-elxsi.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,16 +18,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "ff41d81343d3358d9286c7c052d8bca6c082a0d7", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -44,8 +44,8 @@ Boston, MA 02111-1307, USA.  */\n /* The intended way to use this file is to make two copies, add `#define FLOAT'\n    to one copy, then compile both copies and add them to libgcc.a.  */\n \n+#include \"tconfig.h\"\n #include \"fp-bit.h\"\n-#include \"tm.h\"\n \n /* The following macros can be defined to change the behaviour of this file:\n    FLOAT: Implement a `float', aka SFmode, fp library.  If this is not"}, {"sha": "82030f5c0b123580fb4eac84cbf023ef84978fe7", "filename": "gcc/config/fr30/xm-fr30.h", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Fxm-fr30.h?ref=1a7519ff614294ba8b234a1e605066cac3029220", "patch": "@@ -1,34 +0,0 @@\n-/* Definitions of FR30 target.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n-   Contributed by Cygnus Solutions.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* A C expression for the status code to be returned when the compiler exits\n-   after serious errors.  */\n-#define FATAL_EXIT_CODE 33\n-\n-/* A C expression for the status code to be returned when the compiler exits\n-   without serious errors.  */\n-#define SUCCESS_EXIT_CODE 0\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* end of xm-fr30.h */"}, {"sha": "171faaba5c75423bd310017109f03032cfab06ef", "filename": "gcc/config/h8300/xm-h8300.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -25,17 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with GNU C, use the built-in alloca */\n #ifdef __GNUC__\n #define alloca __builtin_alloca\n #else\n #define USE_C_ALLOCA\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "187f762286f8c0496753f5af180749114db922a4", "filename": "gcc/config/i370/xm-i370.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-i370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-i370.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -32,12 +32,5 @@ Boston, MA 02111-1307, USA.  */\n \n #define USG\n \n-/* Target machine dependencies.  tm.h is a symbolic link to the actual\n-   target specific file.  */\n-\n-#include \"tm.h\"\n-\n /* Arguments to use with `exit'.  */\n-\n-#define SUCCESS_EXIT_CODE\t0\n #define FATAL_EXIT_CODE\t\t12"}, {"sha": "22564df3e28dfebabb5edd02ba6bc4781bb988d7", "filename": "gcc/config/i370/xm-linux.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-linux.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -41,12 +41,3 @@ extern char *alloca ();\n #endif\n #define ONLY_INT_FIELDS\n #endif\n-\n-/* Target machine dependencies.  tm.h is a symbolic link to the actual\n-   target specific file.  */\n-\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE\t0\n-#define FATAL_EXIT_CODE\t\t12"}, {"sha": "040f86677d6ccd5c04d2648a83db15735510d3b9", "filename": "gcc/config/i370/xm-mvs.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-mvs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-mvs.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -32,12 +32,5 @@ Boston, MA 02111-1307, USA.  */\n \n #define USG\n \n-/* Target machine dependencies.  tm.h is a symbolic link to the actual\n-   target specific file.  */\n-\n-#include \"tm.h\"\n-\n /* Arguments to use with `exit'.  */\n-\n-#define SUCCESS_EXIT_CODE\t0\n #define FATAL_EXIT_CODE\t\t12"}, {"sha": "ddd90899c0b2f4d8e9f9892a3edd7c7003e6904a", "filename": "gcc/config/i370/xm-oe.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi370%2Fxm-oe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-oe.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -34,12 +34,5 @@ Boston, MA 02111-1307, USA.  */\n \n #define USG\n \n-/* Target machine dependencies.  tm.h is a symbolic link to the actual\n-   target specific file.  */\n-\n-#include \"tm.h\"\n-\n /* Arguments to use with `exit'.  */\n-\n-#define SUCCESS_EXIT_CODE\t0\n #define FATAL_EXIT_CODE\t\t12"}, {"sha": "b133ba98e600aa452a555f6c79ca136d8f7dc341", "filename": "gcc/config/i386/xm-beos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-beos.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -22,11 +22,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include <i386/xm-i386.h>\n \n-/* Arguments to use with `exit'.  */\n-\n-#define\tSUCCESS_EXIT_CODE\t0\n-#define\tFATAL_EXIT_CODE\t\t33\n-\n /* Include <sys/wait.h> to define the exit status access macros.  */\n #ifndef inhibit_libc\n #include <sys/wait.h>"}, {"sha": "c0ab0cdaf73366f9d7592efc93ff013760f34a12", "filename": "gcc/config/i386/xm-i386.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-i386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-i386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-i386.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -28,12 +28,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "487c43bfa8b7aae73a989d44ebf0d956f3acd425", "filename": "gcc/config/i386/xm-lynx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi386%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-lynx.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,16 +18,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <xm-lynx.h>\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "96e5124beb1652a02ac950ade6cc7d086c44e60d", "filename": "gcc/config/i860/xm-i860.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi860%2Fxm-i860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi860%2Fxm-i860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fxm-i860.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -24,12 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "991b73670c75d26ef8eeeb36f6e28a7c2261940e", "filename": "gcc/config/i960/xm-i960.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fxm-i960.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -25,15 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If not compiled with GNU C, use the C alloca */\n #ifndef __GNUC__\n #define USE_C_ALLOCA\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "b85ccab518240e432bf6aafdc2421772a2a5f83a", "filename": "gcc/config/ia64/xm-ia64.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fia64%2Fxm-ia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fia64%2Fxm-ia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fxm-ia64.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,14 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* A C expression for the status code to be returned when the compiler exits\n-   after serious errors.  */\n-#define FATAL_EXIT_CODE 33\n-\n-/* A C expression for the status code to be returned when the compiler exits\n-   without serious errors.  */\n-#define SUCCESS_EXIT_CODE 0\n-\n /* Defined if the host machine stores words of multi-word values in big-endian\n    order.  (GNU CC does not depend on the host byte ordering within a word.)  */\n #ifdef __BIG_ENDIAN__\n@@ -49,9 +41,3 @@ Boston, MA 02111-1307, USA.  */\n /* A C expression for the number of bits in `long long' on the host\n    machine.  */\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* end of xm-ia64.h */"}, {"sha": "948b1306d90230a9ec7f0b789effac25fc9d5865", "filename": "gcc/config/m32r/xm-m32r.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -29,14 +29,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with Sun CC, the use of alloca requires this #include.  */\n #ifndef __GNUC__\n #include \"alloca.h\""}, {"sha": "9a21e5d729843035b5c00eb2efc94faa8af10687", "filename": "gcc/config/m68hc11/xm-m68hc11.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fxm-m68hc11.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n This file is part of GNU CC.\n@@ -19,6 +19,4 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include \"tm.h\"\n-\n #define inhibit_libc"}, {"sha": "c5a0b1c4d0c7305b57cecce950f5afd0f105618c", "filename": "gcc/config/m68k/aux-crt2.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -1,6 +1,6 @@\n /* More startup code for A/UX */\n \n-#include \"tm.h\"\n+#include \"tconfig.h\"\n \n #ifdef USE_BIN_AS\n \tfile \"crt2.s\""}, {"sha": "b7948101ef9b95a1921d2cf753d7991f868df43d", "filename": "gcc/config/m68k/aux-crtn.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -1,6 +1,6 @@\n /* More startup code for A/UX */\n \n-#include \"tm.h\"\n+#include \"tconfig.h\"\n \n #ifdef USE_BIN_AS\n \tfile\t\"crtn.s\""}, {"sha": "c0b0e4a8c9b07c407f3c9feb58522a3b1c5c0e5d", "filename": "gcc/config/m68k/aux-mcount.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-mcount.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Faux-mcount.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-mcount.c?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -37,12 +37,9 @@ Boston, MA 02111-1307, USA.  */\n #error This file uses GNU C extensions\n #endif\n \n+#include \"tconfig.h\"\n #include <mon.h>\n \n-#ifdef IN_GCC\n-#include \"tm.h\"\n-#endif\n-\n struct cnt *_countbase;\n \n #ifdef FUNCTION_PROFILER_SYMBOL"}, {"sha": "5fc1596868ac3bd850c37ffcdc3a046d05e01b20", "filename": "gcc/config/m68k/xm-lynx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-lynx.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <xm-lynx.h>\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -28,8 +26,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "38aa49d4acfffe63420da66149061198e8979abb", "filename": "gcc/config/m68k/xm-m68k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-m68k.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -26,11 +26,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "afb68f86d3cd7a6f38c58ff53029c2149581d9f1", "filename": "gcc/config/m88k/xm-m88k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -29,10 +29,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* The 88open BCS (and ABI) environment doesn't support BSD features\n    (vfork, getrusage), so use USG.  The Omron Luna/88k is BSD though.  */\n #ifndef luna88k\n@@ -50,7 +46,3 @@ Boston, MA 02111-1307, USA.  */\n #ifdef __DGUX__\n #define OBSTACK_CHUNK_SIZE (8192-16)\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "6ec012983f2d00845a088c4f64f57b20103d5bc0", "filename": "gcc/config/mcore/xm-mcore.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -27,11 +27,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifdef __GNUC__\n #define alloca __builtin_alloca\n #endif\n-\n-/* Target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.  */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "71af928f3b69df82ff43c716bf1d83f30e6c383f", "filename": "gcc/config/mips/xm-mips.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-mips.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -36,14 +36,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_FLOAT_FORMAT IEEE_FLOAT_FORMAT\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n #ifndef __GNUC__\n /* The MIPS compiler gets it wrong, and treats enumerated bitfields\n    as signed quantities, making it impossible to use an 8-bit enum"}, {"sha": "1a96a4d9aa49c57038259fae0ac3779433bd7bd4", "filename": "gcc/config/mn10200/xm-mn10200.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fxm-mn10200.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -25,12 +25,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 16\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "7e46bd1db8f81fe87eef42a17d9372b178f414f0", "filename": "gcc/config/mn10300/xm-mn10300.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fxm-mn10300.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -25,12 +25,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "6bb66d22d2554dd8b550d3d83fd2758e1f285353", "filename": "gcc/config/ns32k/xm-ns32k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fxm-ns32k.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,17 +18,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "57527414fa60668b539d1fa88a3845ee81a15af7", "filename": "gcc/config/pa/xm-linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-linux.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -29,12 +29,4 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n #include <xm-linux.h>"}, {"sha": "d7c7d48f30713d01ee9430221d295a01c6bec4a4", "filename": "gcc/config/pa/xm-pa.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -33,14 +33,6 @@ Boston, MA 02111-1307, USA.  */\n /* Place any machine-dependent include files here, in case we\n    are bootstrapping.  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* 4.3BSD, OSF1 and Lites on the PA are all derived from NET2 or\n    later code from Berkeley.  */\n #define __BSD_NET2__"}, {"sha": "68c80af15f9d67e0fa6271150c682429506423de", "filename": "gcc/config/pa/xm-pa64hpux.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -33,17 +33,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* Place any machine-dependent include files here, in case we\n-   are bootstrapping.  */\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n "}, {"sha": "651a0edcf193d336ff0512d1bcde72a98384aa3f", "filename": "gcc/config/pa/xm-pahpux.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -33,17 +33,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* Place any machine-dependent include files here, in case we\n-   are bootstrapping.  */\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n "}, {"sha": "2f72d299e9414a955305199c922c1e1f9885d2ac", "filename": "gcc/config/pa/xm-papro.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-papro.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -30,17 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* Place any machine-dependent include files here, in case we\n-   are bootstrapping.  */\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n "}, {"sha": "f6a5467ea4cca1d595bff6b9fd5dc745990ce6f5", "filename": "gcc/config/pdp11/xm-pdp11.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Fpdp11%2Fxm-pdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Fpdp11%2Fxm-pdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fxm-pdp11.h?ref=1a7519ff614294ba8b234a1e605066cac3029220", "patch": "@@ -1,27 +0,0 @@\n-/* Configuration for GNU C-compiler for pdp-11 family.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n-   Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* gcc can never run on a PDP, since it needs too much memory */\n-/* but we need the xm-pdp.h file to compile libgcc2           */\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\""}, {"sha": "892bcf8c28263cc443415478f5d4efb8dce8b8e3", "filename": "gcc/config/pj/xm-pj.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpj%2Fxm-pj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fpj%2Fxm-pj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fxm-pj.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -24,12 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "822ad23abcc8a90c8ab669d91528818949284e0a", "filename": "gcc/config/romp/xm-romp.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fxm-romp.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -27,14 +27,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with hc, use the built-in alloca and memcpy.\n    These definitions assume hc version 2.  */\n #ifdef __HIGHC__"}, {"sha": "d96a9aa96e435b2efc2ee41664c5e676460fcd09", "filename": "gcc/config/rs6000/xm-beos.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-beos.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -31,16 +31,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define\tHOST_WORDS_BIG_ENDIAN\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-\n-#define\tSUCCESS_EXIT_CODE\t0\n-#define\tFATAL_EXIT_CODE\t\t33\n-\n /* Use the C alloca and use only int bitfields.  */\n \n #define USE_C_ALLOCA"}, {"sha": "90700355c7b6a810ef2a7d2ff7f0b89cc01ac38d", "filename": "gcc/config/rs6000/xm-lynx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-lynx.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <xm-lynx.h>\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -28,8 +26,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "d14ffaf4344b0ead50ab3e3d73f060dc5c3289d2", "filename": "gcc/config/rs6000/xm-rs6000.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -28,14 +28,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define\tHOST_WORDS_BIG_ENDIAN\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define\tSUCCESS_EXIT_CODE\t0\n-#define\tFATAL_EXIT_CODE\t\t33\n-\n /* If not compiled with GNU C, use the C alloca and use only int bitfields.  */\n #ifndef __GNUC__\n #define USE_C_ALLOCA"}, {"sha": "d35afedba5a0aef9eae733cea8ae34d0f619161a", "filename": "gcc/config/rs6000/xm-sysv4.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -30,14 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n #ifdef __linux__\n #include \"xm-linux.h\"\n #endif"}, {"sha": "680255357dc1d1c45218b5e3f662a89238cfc7c2", "filename": "gcc/config/sh/xm-sh.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fxm-sh.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -28,11 +28,3 @@ Boston, MA 02111-1307, USA.  */\n #ifdef __GNUC__\n #define alloca __builtin_alloca\n #endif\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.  */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "d6a4740be9fb85cdd51fe0a1422946f7ba9b250c", "filename": "gcc/config/sparc/xm-lynx.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-lynx.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <xm-lynx.h>\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -28,12 +26,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_LONGLONG 64\n \n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* Include <sys/wait.h> to define the exit status access macros.  */\n-#include <sys/types.h>\n-#include <sys/wait.h>\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "64324571831256067d113fd2b3731aac720e8e87", "filename": "gcc/config/sparc/xm-sparc.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -30,14 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n /* If compiled with Sun CC, the use of alloca requires this #include.  */\n #ifndef __GNUC__\n #include \"alloca.h\""}, {"sha": "0465079ea7b1af60c4c6c88ecdb21a13b4e9d96d", "filename": "gcc/config/sparc/xm-sysv4.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sysv4.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -30,14 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n #ifndef __GNUC__\n #define ONLY_INT_FIELDS\n #endif"}, {"sha": "decd33939d2abe31671d1dae72526cb8341e2d14", "filename": "gcc/config/v850/xm-v850.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fv850%2Fxm-v850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fv850%2Fxm-v850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fxm-v850.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -25,12 +25,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-\n-#include \"tm.h\""}, {"sha": "a029787b8c30f32e7d7742f39b31f9309350cacb", "filename": "gcc/config/vax/xm-vax.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fvax%2Fxm-vax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fvax%2Fxm-vax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vax.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16\n@@ -31,10 +27,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* This machine doesn't use IEEE floats.  */\n #define HOST_FLOAT_FORMAT VAX_FLOAT_FORMAT\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* isinf isn't there, but finite is. */\n-#define isinf(x) (!finite(x))"}, {"sha": "d5af89fbc83c9c14092a7650382e56cc3821a7ae", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -40,10 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #undef FILE_TYPE\n #endif\n \n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n /* This describes the machine the compiler is hosted on.  */\n #define HOST_BITS_PER_CHAR 8\n #define HOST_BITS_PER_SHORT 16"}, {"sha": "4440f3de80b6adefc5a4f508ab161d3d3e6c5bbf", "filename": "gcc/config/we32k/xm-we32k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fxm-we32k.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -28,14 +28,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN\n \n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33\n-\n-/* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n-#include \"tm.h\"\n-\n #ifndef MAXPATHLEN\n #define MAXPATHLEN 512\n #endif"}, {"sha": "67beb556e686100ea31ab4e5a3b4d526341a2600", "filename": "gcc/config/xm-gnu.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fxm-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fxm-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-gnu.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -24,9 +24,3 @@ Boston, MA 02111-1307, USA.  */\n    CPU/xm-CPU.h and this file xm-gnu.h.  */\n \n #define POSIX\t\t\t/* GNU complies to POSIX.1.  */\n-\n-#ifndef inhibit_libc\n-/* Get a definition of O_RDONLY; some of the GCC files don't include this\n-   properly and will define it themselves to be zero. */\n-#include <fcntl.h>\n-#endif"}, {"sha": "edc5ca96a8d5ab8bc71887e3845bec4477d6a299", "filename": "gcc/config/xm-lynx.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Fxm-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7519ff614294ba8b234a1e605066cac3029220/gcc%2Fconfig%2Fxm-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-lynx.h?ref=1a7519ff614294ba8b234a1e605066cac3029220", "patch": "@@ -1,27 +0,0 @@\n-/* Configuration for GNU C-compiler for Lynx.\n-   Copyright (C) 1993, 1995, 2001 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* This file defines machine-independent things specific to a host\n-   running Lynx.  This file should not be specified as $xm_file itself;\n-   instead $xm_file should be CPU/xm-lynx.h, which should include this one.  */\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "1f8ed6879be218cc95aad33e4eba64bb693d9ab6", "filename": "gcc/config/xm-std32.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fxm-std32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfig%2Fxm-std32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-std32.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -24,7 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* Arguments to use with `exit'.  */\n-#define SUCCESS_EXIT_CODE 0\n-#define FATAL_EXIT_CODE 33"}, {"sha": "43c077b98b9c538277fca02bdef355ba062f3379", "filename": "gcc/configure", "status": "modified", "additions": 109, "deletions": 111, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -4053,15 +4053,13 @@ fi\n # $vars is the list of shell variables with file names to include.\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n-null_defines=\n-host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} defaults.h hwint.h\"\n-\n # If host=build, it is correct to have hconfig include auto-host.h\n # as well.  If host!=build, we are in error and need to do more \n # work to find out the build config parameters.\n+# FIXME: hconfig.h should be bconfig.h.\n if test x$host = x$build\n then\n-\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file} defaults.h hwint.h\"\n+\tbuild_auto=auto-host.h\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -4083,15 +4081,18 @@ else\n \tmv auto-host.h ../auto-build.h\n \tcd ..\n \trm -rf $tempdir\n-\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file} defaults.h hwint.h\"\n+\tbuild_auto=auto-build.h\n fi\n \n-xm_file=\"gansidecl.h ${xm_file} defaults.h\"\n-tm_file=\"gansidecl.h ${tm_file} defaults.h\"\n+null_defines=\n+tm_file=\"${tm_file} defaults.h\"\n+host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} ${tm_file} hwint.h\"\n+build_xm_file=\"${build_auto} gansidecl.h ${build_xm_file} ${tm_file} hwint.h\"\n+xm_file=\"gansidecl.h ${xm_file} ${tm_file}\"\n \n-vars=\"host_xm_file tm_file tm_p_file xm_file build_xm_file\"\n-links=\"config.h tm.h tm_p.h tconfig.h hconfig.h\"\n-defines=\"host_xm_defines null_defines null_defines xm_defines build_xm_defines\"\n+vars=\"host_xm_file tm_p_file xm_file build_xm_file\"\n+links=\"config.h tm_p.h tconfig.h hconfig.h\"\n+defines=\"host_xm_defines null_defines xm_defines build_xm_defines\"\n \n rm -f config.bak\n if test -f config.status; then mv -f config.status config.bak; fi\n@@ -4109,7 +4110,7 @@ do\n \n \t# Define TARGET_CPU_DEFAULT if the system wants one.\n \t# This substitutes for lots of *.h files.\n-\tif test \"$target_cpu_default\" != \"\" -a $link = tm.h\n+\tif test \"$target_cpu_default\" != \"\"\n \tthen\n \t\techo \"#define TARGET_CPU_DEFAULT ($target_cpu_default)\" >>$link\n \tfi\n@@ -4138,14 +4139,11 @@ do\n \t\techo \"#endif\" >>$link\n \tdone\n \n-\tif test $link = tm.h\n-\tthen\n-\t\t# Include insn-codes.h last, because it includes machmode.h,\n-\t\t# and we want EXTRA_CC_MODES to be taken into account.\n-\t\techo \"#ifndef GENERATOR_FILE\" >>$link\n-\t\techo \"#include \\\"insn-codes.h\\\"\" >>$link\n-\t\techo \"#endif\" >>$link\n-\tfi\n+\t# Include insn-codes.h last, because it includes machmode.h,\n+\t# and we want EXTRA_CC_MODES to be taken into account.\n+\techo \"#ifndef GENERATOR_FILE\" >>$link\n+\techo \"#include \\\"insn-codes.h\\\"\" >>$link\n+\techo \"#endif\" >>$link\n done\n \n # Truncate the target if necessary\n@@ -4220,15 +4218,15 @@ fi\n \n \n         echo $ac_n \"checking for strerror in -lcposix\"\"... $ac_c\" 1>&6\n-echo \"configure:4224: checking for strerror in -lcposix\" >&5\n+echo \"configure:4222: checking for strerror in -lcposix\" >&5\n ac_lib_var=`echo cposix'_'strerror | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-lcposix  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 4232 \"configure\"\n+#line 4230 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -4239,7 +4237,7 @@ int main() {\n strerror()\n ; return 0; }\n EOF\n-if { (eval echo configure:4243: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4241: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -4262,12 +4260,12 @@ fi\n   \n \n echo $ac_n \"checking for working const\"\"... $ac_c\" 1>&6\n-echo \"configure:4266: checking for working const\" >&5\n+echo \"configure:4264: checking for working const\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_const'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4271 \"configure\"\n+#line 4269 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n@@ -4316,7 +4314,7 @@ ccp = (char const *const *) p;\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4320: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:4318: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_c_const=yes\n else\n@@ -4337,12 +4335,12 @@ EOF\n fi\n \n echo $ac_n \"checking for off_t\"\"... $ac_c\" 1>&6\n-echo \"configure:4341: checking for off_t\" >&5\n+echo \"configure:4339: checking for off_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_off_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4346 \"configure\"\n+#line 4344 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -4370,12 +4368,12 @@ EOF\n fi\n \n echo $ac_n \"checking for size_t\"\"... $ac_c\" 1>&6\n-echo \"configure:4374: checking for size_t\" >&5\n+echo \"configure:4372: checking for size_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_size_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4379 \"configure\"\n+#line 4377 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -4405,19 +4403,19 @@ fi\n # The Ultrix 4.2 mips builtin alloca declared by alloca.h only works\n # for constant arguments.  Useless!\n echo $ac_n \"checking for working alloca.h\"\"... $ac_c\" 1>&6\n-echo \"configure:4409: checking for working alloca.h\" >&5\n+echo \"configure:4407: checking for working alloca.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_alloca_h'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4414 \"configure\"\n+#line 4412 \"configure\"\n #include \"confdefs.h\"\n #include <alloca.h>\n int main() {\n char *p = alloca(2 * sizeof(int));\n ; return 0; }\n EOF\n-if { (eval echo configure:4421: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4419: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_header_alloca_h=yes\n else\n@@ -4438,12 +4436,12 @@ EOF\n fi\n \n echo $ac_n \"checking for alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:4442: checking for alloca\" >&5\n+echo \"configure:4440: checking for alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_alloca_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4447 \"configure\"\n+#line 4445 \"configure\"\n #include \"confdefs.h\"\n \n #ifdef __GNUC__\n@@ -4471,7 +4469,7 @@ int main() {\n char *p = (char *) alloca(1);\n ; return 0; }\n EOF\n-if { (eval echo configure:4475: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4473: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_func_alloca_works=yes\n else\n@@ -4503,12 +4501,12 @@ EOF\n \n \n echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n-echo \"configure:4507: checking whether alloca needs Cray hooks\" >&5\n+echo \"configure:4505: checking whether alloca needs Cray hooks\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_os_cray'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4512 \"configure\"\n+#line 4510 \"configure\"\n #include \"confdefs.h\"\n #if defined(CRAY) && ! defined(CRAY2)\n webecray\n@@ -4533,12 +4531,12 @@ echo \"$ac_t\"\"$ac_cv_os_cray\" 1>&6\n if test $ac_cv_os_cray = yes; then\n for ac_func in _getb67 GETB67 getb67; do\n   echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4537: checking for $ac_func\" >&5\n+echo \"configure:4535: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4542 \"configure\"\n+#line 4540 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -4561,7 +4559,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4565: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4563: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -4588,15 +4586,15 @@ done\n fi\n \n echo $ac_n \"checking stack direction for C alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:4592: checking stack direction for C alloca\" >&5\n+echo \"configure:4590: checking stack direction for C alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_stack_direction'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_c_stack_direction=0\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4600 \"configure\"\n+#line 4598 \"configure\"\n #include \"confdefs.h\"\n find_stack_direction ()\n {\n@@ -4615,7 +4613,7 @@ main ()\n   exit (find_stack_direction() < 0);\n }\n EOF\n-if { (eval echo configure:4619: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:4617: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_c_stack_direction=1\n else\n@@ -4642,17 +4640,17 @@ unistd.h sys/param.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:4646: checking for $ac_hdr\" >&5\n+echo \"configure:4644: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4651 \"configure\"\n+#line 4649 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:4656: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:4654: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -4682,12 +4680,12 @@ done\n strdup __argz_count __argz_stringify __argz_next\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4686: checking for $ac_func\" >&5\n+echo \"configure:4684: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4691 \"configure\"\n+#line 4689 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -4710,7 +4708,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4714: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4712: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -4739,12 +4737,12 @@ done\n      for ac_func in stpcpy\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4743: checking for $ac_func\" >&5\n+echo \"configure:4741: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4748 \"configure\"\n+#line 4746 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -4767,7 +4765,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4771: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4769: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -4801,19 +4799,19 @@ EOF\n \n    if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:4805: checking for LC_MESSAGES\" >&5\n+echo \"configure:4803: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'am_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4810 \"configure\"\n+#line 4808 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:4817: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4815: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_val_LC_MESSAGES=yes\n else\n@@ -4834,7 +4832,7 @@ EOF\n     fi\n   fi\n    echo $ac_n \"checking whether NLS is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:4838: checking whether NLS is requested\" >&5\n+echo \"configure:4836: checking whether NLS is requested\" >&5\n         # Check whether --enable-nls or --disable-nls was given.\n if test \"${enable_nls+set}\" = set; then\n   enableval=\"$enable_nls\"\n@@ -4854,7 +4852,7 @@ fi\n EOF\n \n       echo $ac_n \"checking whether included gettext is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:4858: checking whether included gettext is requested\" >&5\n+echo \"configure:4856: checking whether included gettext is requested\" >&5\n       # Check whether --with-included-gettext or --without-included-gettext was given.\n if test \"${with_included_gettext+set}\" = set; then\n   withval=\"$with_included_gettext\"\n@@ -4873,17 +4871,17 @@ fi\n \n \tac_safe=`echo \"libintl.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for libintl.h\"\"... $ac_c\" 1>&6\n-echo \"configure:4877: checking for libintl.h\" >&5\n+echo \"configure:4875: checking for libintl.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4882 \"configure\"\n+#line 4880 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:4887: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:4885: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -4900,19 +4898,19 @@ fi\n if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   echo $ac_n \"checking for gettext in libc\"\"... $ac_c\" 1>&6\n-echo \"configure:4904: checking for gettext in libc\" >&5\n+echo \"configure:4902: checking for gettext in libc\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gettext_libc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4909 \"configure\"\n+#line 4907 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n int main() {\n return (int) gettext (\"\")\n ; return 0; }\n EOF\n-if { (eval echo configure:4916: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4914: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   gt_cv_func_gettext_libc=yes\n else\n@@ -4928,15 +4926,15 @@ echo \"$ac_t\"\"$gt_cv_func_gettext_libc\" 1>&6\n \n \t   if test \"$gt_cv_func_gettext_libc\" != \"yes\"; then\n \t     echo $ac_n \"checking for bindtextdomain in -lintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4932: checking for bindtextdomain in -lintl\" >&5\n+echo \"configure:4930: checking for bindtextdomain in -lintl\" >&5\n ac_lib_var=`echo intl'_'bindtextdomain | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-lintl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 4940 \"configure\"\n+#line 4938 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -4947,7 +4945,7 @@ int main() {\n bindtextdomain()\n ; return 0; }\n EOF\n-if { (eval echo configure:4951: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4949: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -4963,20 +4961,20 @@ fi\n if eval \"test \\\"`echo '$ac_cv_lib_'$ac_lib_var`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   echo $ac_n \"checking for gettext in libintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4967: checking for gettext in libintl\" >&5\n+echo \"configure:4965: checking for gettext in libintl\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gettext_libintl'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   echo $ac_n \"checking for gettext in -lintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4972: checking for gettext in -lintl\" >&5\n+echo \"configure:4970: checking for gettext in -lintl\" >&5\n ac_lib_var=`echo intl'_'gettext | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-lintl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 4980 \"configure\"\n+#line 4978 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -4987,7 +4985,7 @@ int main() {\n gettext()\n ; return 0; }\n EOF\n-if { (eval echo configure:4991: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4989: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -5030,7 +5028,7 @@ EOF\n \t      # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5034: checking for $ac_word\" >&5\n+echo \"configure:5032: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5064,12 +5062,12 @@ fi\n \t\tfor ac_func in dcgettext\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:5068: checking for $ac_func\" >&5\n+echo \"configure:5066: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5073 \"configure\"\n+#line 5071 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -5092,7 +5090,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5096: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5094: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -5119,7 +5117,7 @@ done\n \t\t# Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5123: checking for $ac_word\" >&5\n+echo \"configure:5121: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5155,7 +5153,7 @@ fi\n \t\t# Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5159: checking for $ac_word\" >&5\n+echo \"configure:5157: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5187,15 +5185,15 @@ else\n fi\n \n \t\tcat > conftest.$ac_ext <<EOF\n-#line 5191 \"configure\"\n+#line 5189 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n extern int _nl_msg_cat_cntr;\n \t\t\t       return _nl_msg_cat_cntr\n ; return 0; }\n EOF\n-if { (eval echo configure:5199: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5197: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   CATOBJEXT=.gmo\n \t\t   DATADIRNAME=share\n@@ -5220,7 +5218,7 @@ fi\n \n         if test \"$CATOBJEXT\" = \"NONE\"; then\n \t  echo $ac_n \"checking whether catgets can be used\"\"... $ac_c\" 1>&6\n-echo \"configure:5224: checking whether catgets can be used\" >&5\n+echo \"configure:5222: checking whether catgets can be used\" >&5\n \t  # Check whether --with-catgets or --without-catgets was given.\n if test \"${with_catgets+set}\" = set; then\n   withval=\"$with_catgets\"\n@@ -5233,22 +5231,22 @@ fi\n \n \t  if test \"$nls_cv_use_catgets\" = \"yes\"; then\n \t    \t    echo $ac_n \"checking for main in -li\"\"... $ac_c\" 1>&6\n-echo \"configure:5237: checking for main in -li\" >&5\n+echo \"configure:5235: checking for main in -li\" >&5\n ac_lib_var=`echo i'_'main | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-li  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 5245 \"configure\"\n+#line 5243 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n main()\n ; return 0; }\n EOF\n-if { (eval echo configure:5252: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5250: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -5276,12 +5274,12 @@ else\n fi\n \n \t    echo $ac_n \"checking for catgets\"\"... $ac_c\" 1>&6\n-echo \"configure:5280: checking for catgets\" >&5\n+echo \"configure:5278: checking for catgets\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_catgets'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5285 \"configure\"\n+#line 5283 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char catgets(); below.  */\n@@ -5304,7 +5302,7 @@ catgets();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5308: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5306: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_catgets=yes\"\n else\n@@ -5326,7 +5324,7 @@ EOF\n \t       # Extract the first word of \"gencat\", so it can be a program name with args.\n set dummy gencat; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5330: checking for $ac_word\" >&5\n+echo \"configure:5328: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GENCAT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5362,7 +5360,7 @@ fi\n \t\t # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5366: checking for $ac_word\" >&5\n+echo \"configure:5364: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5399,7 +5397,7 @@ fi\n \t\t   # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5403: checking for $ac_word\" >&5\n+echo \"configure:5401: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5437,7 +5435,7 @@ fi\n \t\t # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5441: checking for $ac_word\" >&5\n+echo \"configure:5439: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5495,7 +5493,7 @@ fi\n         # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5499: checking for $ac_word\" >&5\n+echo \"configure:5497: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5529,7 +5527,7 @@ fi\n         # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5533: checking for $ac_word\" >&5\n+echo \"configure:5531: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5568,7 +5566,7 @@ fi\n         # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5572: checking for $ac_word\" >&5\n+echo \"configure:5570: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5667,7 +5665,7 @@ fi\n        LINGUAS=\n      else\n        echo $ac_n \"checking for catalogs to be installed\"\"... $ac_c\" 1>&6\n-echo \"configure:5671: checking for catalogs to be installed\" >&5\n+echo \"configure:5669: checking for catalogs to be installed\" >&5\n        if test \"x$LINGUAS\" = \"x\"; then\n \t LINGUAS=$ALL_LINGUAS\n        else\n@@ -5699,17 +5697,17 @@ echo \"configure:5671: checking for catalogs to be installed\" >&5\n    if test \"$CATOBJEXT\" = \".cat\"; then\n      ac_safe=`echo \"linux/version.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for linux/version.h\"\"... $ac_c\" 1>&6\n-echo \"configure:5703: checking for linux/version.h\" >&5\n+echo \"configure:5701: checking for linux/version.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5708 \"configure\"\n+#line 5706 \"configure\"\n #include \"confdefs.h\"\n #include <linux/version.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:5713: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:5711: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -5784,7 +5782,7 @@ fi\n \n \n echo $ac_n \"checking whether windows registry support is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:5788: checking whether windows registry support is requested\" >&5\n+echo \"configure:5786: checking whether windows registry support is requested\" >&5\n if test x$enable_win32_registry != xno; then\n   cat >> confdefs.h <<\\EOF\n #define ENABLE_WIN32_REGISTRY 1\n@@ -5813,7 +5811,7 @@ esac\n \n if test x$enable_win32_registry != xno; then\n   echo $ac_n \"checking registry key on windows hosts\"\"... $ac_c\" 1>&6\n-echo \"configure:5817: checking registry key on windows hosts\" >&5\n+echo \"configure:5815: checking registry key on windows hosts\" >&5\n   cat >> confdefs.h <<EOF\n #define WIN32_REGISTRY_KEY \"$gcc_cv_win32_registry_key\"\n EOF\n@@ -5993,7 +5991,7 @@ fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:5997: checking what assembler to use\" >&5\n+echo \"configure:5995: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6078,7 +6076,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6082: checking what nm to use\" >&5\n+echo \"configure:6080: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test x$host = x$target; then\n@@ -6089,7 +6087,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:6093: checking assembler alignment features\" >&5\n+echo \"configure:6091: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -6137,7 +6135,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:6141: checking assembler subsection support\" >&5\n+echo \"configure:6139: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6177,7 +6175,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:6181: checking assembler weak support\" >&5\n+echo \"configure:6179: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6200,7 +6198,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:6204: checking assembler hidden support\" >&5\n+echo \"configure:6202: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6226,7 +6224,7 @@ echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:6230: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:6228: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6254,7 +6252,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:6258: checking assembler supports -relax\" >&5\n+echo \"configure:6256: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6284,7 +6282,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:6288: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:6286: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6329,7 +6327,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:6333: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:6331: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6368,7 +6366,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:6372: checking assembler instructions\" >&5\n+echo \"configure:6370: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6397,7 +6395,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:6401: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:6399: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -6543,7 +6541,7 @@ EOF\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:6547: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:6545: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "23973687d8540895bfd16bc6597847dd03e5dcca", "filename": "gcc/configure.in", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -716,15 +716,13 @@ fi\n # $vars is the list of shell variables with file names to include.\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n-null_defines=\n-host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} defaults.h hwint.h\"\n-\n # If host=build, it is correct to have hconfig include auto-host.h\n # as well.  If host!=build, we are in error and need to do more \n # work to find out the build config parameters.\n+# FIXME: hconfig.h should be bconfig.h.\n if test x$host = x$build\n then\n-\tbuild_xm_file=\"auto-host.h gansidecl.h ${build_xm_file} defaults.h hwint.h\"\n+\tbuild_auto=auto-host.h\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -746,15 +744,18 @@ else\n \tmv auto-host.h ../auto-build.h\n \tcd ..\n \trm -rf $tempdir\n-\tbuild_xm_file=\"auto-build.h gansidecl.h ${build_xm_file} defaults.h hwint.h\"\n+\tbuild_auto=auto-build.h\n fi\n \n-xm_file=\"gansidecl.h ${xm_file} defaults.h\"\n-tm_file=\"gansidecl.h ${tm_file} defaults.h\"\n+null_defines=\n+tm_file=\"${tm_file} defaults.h\"\n+host_xm_file=\"auto-host.h gansidecl.h ${host_xm_file} ${tm_file} hwint.h\"\n+build_xm_file=\"${build_auto} gansidecl.h ${build_xm_file} ${tm_file} hwint.h\"\n+xm_file=\"gansidecl.h ${xm_file} ${tm_file}\"\n \n-vars=\"host_xm_file tm_file tm_p_file xm_file build_xm_file\"\n-links=\"config.h tm.h tm_p.h tconfig.h hconfig.h\"\n-defines=\"host_xm_defines null_defines null_defines xm_defines build_xm_defines\"\n+vars=\"host_xm_file tm_p_file xm_file build_xm_file\"\n+links=\"config.h tm_p.h tconfig.h hconfig.h\"\n+defines=\"host_xm_defines null_defines xm_defines build_xm_defines\"\n \n rm -f config.bak\n if test -f config.status; then mv -f config.status config.bak; fi\n@@ -772,7 +773,7 @@ do\n \n \t# Define TARGET_CPU_DEFAULT if the system wants one.\n \t# This substitutes for lots of *.h files.\n-\tif test \"$target_cpu_default\" != \"\" -a $link = tm.h\n+\tif test \"$target_cpu_default\" != \"\"\n \tthen\n \t\techo \"#define TARGET_CPU_DEFAULT ($target_cpu_default)\" >>$link\n \tfi\n@@ -801,14 +802,11 @@ do\n \t\techo \"#endif\" >>$link\n \tdone\n \n-\tif test $link = tm.h\n-\tthen\n-\t\t# Include insn-codes.h last, because it includes machmode.h,\n-\t\t# and we want EXTRA_CC_MODES to be taken into account.\n-\t\techo \"#ifndef GENERATOR_FILE\" >>$link\n-\t\techo \"#include \\\"insn-codes.h\\\"\" >>$link\n-\t\techo \"#endif\" >>$link\n-\tfi\n+\t# Include insn-codes.h last, because it includes machmode.h,\n+\t# and we want EXTRA_CC_MODES to be taken into account.\n+\techo \"#ifndef GENERATOR_FILE\" >>$link\n+\techo \"#include \\\"insn-codes.h\\\"\" >>$link\n+\techo \"#endif\" >>$link\n done\n \n # Truncate the target if necessary"}, {"sha": "7651719484889535521574a28f7cddeb1bdb6a58", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -55,10 +55,8 @@ Boston, MA 02111-1307, USA.  */\n    compiled for the target, and hence definitions concerning only the host\n    do not apply.  */\n \n-#include \"auto-host.h\"\n-#include \"tm.h\"\n+#include \"tconfig.h\"\n #include \"tsystem.h\"\n-\n #include \"frame.h\"\n \n #ifndef CRT_CALL_STATIC_FUNCTION"}, {"sha": "c1b21b2188c2ee4f52ab947ea229cdd33758fdac", "filename": "gcc/gcc.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -4085,12 +4085,17 @@ Define this macro if the host system is VMS.\n @findex FATAL_EXIT_CODE\n @item FATAL_EXIT_CODE\n A C expression for the status code to be returned when the compiler\n-exits after serious errors.\n+exits after serious errors.  The default is the system-provided macro\n+@samp{EXIT_FAILURE}, or @samp{1} if the system doesn't define that\n+macro.  Define this macro only if these defaults are incorrect.\n \n @findex SUCCESS_EXIT_CODE\n @item SUCCESS_EXIT_CODE\n A C expression for the status code to be returned when the compiler\n-exits without serious errors.\n+exits without serious errors.  (Warnings are not serious errors.)  The\n+default is the system-provided macro @samp{EXIT_SUCCESS}, or @samp{0} if\n+the system doesn't define that macro.  Define this macro only if these\n+defaults are incorrect.\n \n @findex HOST_WORDS_BIG_ENDIAN\n @item HOST_WORDS_BIG_ENDIAN"}, {"sha": "589e3440036c23af73602b01574794004cff235f", "filename": "gcc/system.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4e6183e957581cc1a01378a88f7ca571e7db7/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=eaf4e6183e957581cc1a01378a88f7ca571e7db7", "patch": "@@ -119,6 +119,25 @@ extern int errno;\n #endif\n #endif\n \n+/* If we don't have an overriding definition, set SUCCESS_EXIT_CODE and\n+   FATAL_EXIT_CODE to EXIT_SUCCESS and EXIT_FAILURE respectively,\n+   or 0 and 1 if those macros are not defined.  */\n+#ifndef SUCCESS_EXIT_CODE\n+# ifdef EXIT_SUCCESS\n+#  define SUCCESS_EXIT_CODE EXIT_SUCCESS\n+# else\n+#  define SUCCESS_EXIT_CODE 0\n+# endif\n+#endif\n+\n+#ifndef FATAL_EXIT_CODE\n+# ifdef EXIT_FAILURE\n+#  define FATAL_EXIT_CODE EXIT_FAILURE\n+# else\n+#  define FATAL_EXIT_CODE 1\n+# endif\n+#endif\n+\n #ifdef HAVE_UNISTD_H\n # include <unistd.h>\n #endif"}]}