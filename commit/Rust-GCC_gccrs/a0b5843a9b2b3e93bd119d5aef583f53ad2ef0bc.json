{"sha": "a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNTg0M2E5YjJiM2U5M2JkMTE5ZDVhZWY1ODNmNTNhZDJlZjBiYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-03-16T18:29:11Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-03-16T19:21:34Z"}, "message": "rs6000: Workaround for PR98092\n\nThe bcdinvalid_<mode> RTL instruction uses the \"unordered\" comparison,\nwhich cannot be used if we have -ffinite-math-only.  We really need\nCCMODEs that describe what bits in a CR field are set by other insns\nthan just comparisons, but that is a lot more surgery, and it is stage 4\nnow.  This patch does a simple workaround.\n\n2021-03-16  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR target/98092\n\t* config/rs6000/predicates.md (branch_comparison_operator): Allow\n\tordered and unordered for CCFPmode, if flag_finite_math_only.\n\ngcc/testsuite/\n\tPR target/98092\n\t* gcc.target/powerpc/pr98092.c: New.", "tree": {"sha": "01e99c1039f3cc3ec2ae3e3c4cf07d1cbe950467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e99c1039f3cc3ec2ae3e3c4cf07d1cbe950467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55ce33a34a8e33d17285228b32cf1e564241a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55ce33a34a8e33d17285228b32cf1e564241a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55ce33a34a8e33d17285228b32cf1e564241a70"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "859af75dfbd191243ae8a7974959ff3a57136d7a", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "patch": "@@ -1208,10 +1208,11 @@\n (define_predicate \"branch_comparison_operator\"\n    (and (match_operand 0 \"comparison_operator\")\n \t(match_test \"GET_MODE_CLASS (GET_MODE (XEXP (op, 0))) == MODE_CC\")\n-\t(if_then_else (match_test \"GET_MODE (XEXP (op, 0)) == CCFPmode\n-\t\t\t\t   && !flag_finite_math_only\")\n-\t\t      (match_code \"lt,gt,eq,unordered,unge,unle,ne,ordered\")\n-\t\t      (match_code \"lt,ltu,le,leu,gt,gtu,ge,geu,eq,ne\"))\n+\t(if_then_else (match_test \"GET_MODE (XEXP (op, 0)) == CCFPmode\")\n+\t  (if_then_else (match_test \"flag_finite_math_only\")\n+\t    (match_code \"lt,le,gt,ge,eq,ne,unordered,ordered\")\n+\t    (match_code \"lt,gt,eq,unordered,unge,unle,ne,ordered\"))\n+\t  (match_code \"lt,ltu,le,leu,gt,gtu,ge,geu,eq,ne\"))\n \t(match_test \"validate_condition_mode (GET_CODE (op),\n \t\t\t\t\t      GET_MODE (XEXP (op, 0))),\n \t\t     1\")))"}, {"sha": "03eab5a24ef7a2a9724f704b9bc02afb44122848", "filename": "gcc/testsuite/gcc.target/powerpc/pr98092.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98092.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98092.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98092.c?ref=a0b5843a9b2b3e93bd119d5aef583f53ad2ef0bc", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-options \"-mdejagnu-cpu=power9 -ffinite-math-only\" } */\n+\n+int\n+h9 (__attribute__ ((altivec (vector__))) char un)\n+{\n+  return (__builtin_vec_bcdinvalid (un));\n+}"}]}