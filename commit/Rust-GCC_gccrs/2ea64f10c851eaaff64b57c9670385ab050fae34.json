{"sha": "2ea64f10c851eaaff64b57c9670385ab050fae34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhNjRmMTBjODUxZWFhZmY2NGI1N2M5NjcwMzg1YWIwNTBmYWUzNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-27T07:20:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-27T07:20:29Z"}, "message": "jump.c (redirect_exp_1): Rework from old redirect_exp.\n\n        * jump.c (redirect_exp_1): Rework from old redirect_exp.  Never\n        commit change group changes.\n        (invert_exp_1): Similarly.\n        (redirect_exp, invert_exp): Use them.\n        (redirect_jump_1): New.\n        (invert_jump_1): New.\n        (jump_optimize_1): Remove code subsumed by condexec.c.\n        * rtl.h (invert_jump_1, redirect_jump_1): Declare.\n\nFrom-SVN: r33474", "tree": {"sha": "6533eb241fa14be61711d7dcdf027fb0046ef40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6533eb241fa14be61711d7dcdf027fb0046ef40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea64f10c851eaaff64b57c9670385ab050fae34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea64f10c851eaaff64b57c9670385ab050fae34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea64f10c851eaaff64b57c9670385ab050fae34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea64f10c851eaaff64b57c9670385ab050fae34/comments", "author": null, "committer": null, "parents": [{"sha": "0a2287bf899285f8b60b4af922e2fb8d9b4cce2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2287bf899285f8b60b4af922e2fb8d9b4cce2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2287bf899285f8b60b4af922e2fb8d9b4cce2a"}], "stats": {"total": 366, "additions": 217, "deletions": 149}, "files": [{"sha": "abc949018cd1030f4de12ff32bb9209280d58fe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ea64f10c851eaaff64b57c9670385ab050fae34", "patch": "@@ -1,3 +1,14 @@\n+2000-04-26  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (redirect_exp_1): Rework from old redirect_exp.  Never\n+\tcommit change group changes.\n+\t(invert_exp_1): Similarly.\n+\t(redirect_exp, invert_exp): Use them.\n+\t(redirect_jump_1): New.\n+\t(invert_jump_1): New.\n+\t(jump_optimize_1): Remove code subsumed by condexec.c.\n+\t* rtl.h (invert_jump_1, redirect_jump_1): Declare.\n+\n 2000-04-26  Richard Henderson  <rth@cygnus.com>\n \n \t* rtlanal.c (dead_or_set_regno_p): Use find_regno_note.\n@@ -125,8 +136,8 @@\n \n 2000-04-26  Andreas Jaeger  <aj@suse.de>\n \n-        * extend.texi (Function Attributes): Fix description of pure\n-        attribute.\n+\t* extend.texi (Function Attributes): Fix description of pure\n+\tattribute.\n \n 2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n \n@@ -140,7 +151,7 @@\n \n 2000-04-25  Richard Henderson  <rth@cygnus.com>\n \n-        * cse.c (cse_insn): Emit barrier after unconditional jump.\n+\t* cse.c (cse_insn): Emit barrier after unconditional jump.\n \n \t* calls.c (expand_call): Disable tail call generation once\n \trtx_equal_function_value_matters is false.\n@@ -192,11 +203,11 @@\n \n 2000-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-        * acconfig.h (ENABLE_STD_NAMESPACE, ENABLE_CHECKING,\n+\t* acconfig.h (ENABLE_STD_NAMESPACE, ENABLE_CHECKING,\n \tENABLE_TREE_CHECKING, ENABLE_RTL_CHECKING, ENABLE_GC_CHECKING,\n \tENABLE_GC_ALWAYS_COLLECT): Delete entries.\n \t        \n-        * configure.in (ENABLE_STD_NAMESPACE, ENABLE_CHECKING,\n+\t* configure.in (ENABLE_STD_NAMESPACE, ENABLE_CHECKING,\n \tENABLE_TREE_CHECKING, ENABLE_RTL_CHECKING, ENABLE_GC_CHECKING,\n \tENABLE_GC_ALWAYS_COLLECT): Use three argument form of AC_DEFINE\n \tfor these macros.  Clean up spacing and linewraps."}, {"sha": "3e9838691bcd53a949359577a64aeafd559cfee4", "filename": "gcc/jump.c", "status": "modified", "additions": 196, "deletions": 142, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=2ea64f10c851eaaff64b57c9670385ab050fae34", "patch": "@@ -121,6 +121,8 @@ static int jump_back_p\t\t\tPARAMS ((rtx, rtx));\n static int tension_vector_labels\tPARAMS ((rtx, int));\n static void mark_jump_label\t\tPARAMS ((rtx, rtx, int, int));\n static void delete_computation\t\tPARAMS ((rtx));\n+static void redirect_exp_1\t\tPARAMS ((rtx *, rtx, rtx, rtx));\n+static void invert_exp_1\t\tPARAMS ((rtx, rtx));\n static void delete_from_jump_chain\tPARAMS ((rtx));\n static int delete_labelref_insn\t\tPARAMS ((rtx, rtx, int));\n static void mark_modified_reg\t\tPARAMS ((rtx, rtx, void *));\n@@ -4414,109 +4416,102 @@ never_reached_warning (avoided_insn)\n \t\t\t\t\"will never be executed\");\n }\n \f\n-/* Invert the condition of the jump JUMP, and make it jump\n-   to label NLABEL instead of where it jumps now.  */\n+/* Throughout LOC, redirect OLABEL to NLABEL.  Treat null OLABEL or\n+   NLABEL as a return.  Accrue modifications into the change group.  */\n \n-int\n-invert_jump (jump, nlabel)\n-     rtx jump, nlabel;\n-{\n-  /* We have to either invert the condition and change the label or\n-     do neither.  Either operation could fail.  We first try to invert\n-     the jump. If that succeeds, we try changing the label.  If that fails,\n-     we invert the jump back to what it was.  */\n-\n-  if (! invert_exp (PATTERN (jump), jump))\n-    return 0;\n-\n-  if (redirect_jump (jump, nlabel))\n-    {\n-      /* An inverted jump means that a probability taken becomes a\n-\t probability not taken.  Subtract the branch probability from the\n-\t probability base to convert it back to a taken probability.  */\n-\n-      rtx note = find_reg_note (jump, REG_BR_PROB, 0);\n-      if (note)\n-\tXEXP (note, 0) = GEN_INT (REG_BR_PROB_BASE - INTVAL (XEXP (note, 0)));\n-\n-      return 1;\n-    }\n-\n-  if (! invert_exp (PATTERN (jump), jump))\n-    /* This should just be putting it back the way it was.  */\n-    abort ();\n-\n-  return  0;\n-}\n-\n-/* Invert the jump condition of rtx X contained in jump insn, INSN. \n-\n-   Return 1 if we can do so, 0 if we cannot find a way to do so that\n-   matches a pattern.  */\n-\n-int\n-invert_exp (x, insn)\n-     rtx x;\n+static void\n+redirect_exp_1 (loc, olabel, nlabel, insn)\n+     rtx *loc;\n+     rtx olabel, nlabel;\n      rtx insn;\n {\n-  register RTX_CODE code;\n+  register rtx x = *loc;\n+  register RTX_CODE code = GET_CODE (x);\n   register int i;\n   register const char *fmt;\n \n-  code = GET_CODE (x);\n-\n-  if (code == IF_THEN_ELSE)\n+  if (code == LABEL_REF)\n     {\n-      register rtx comp = XEXP (x, 0);\n-      register rtx tem;\n+      if (XEXP (x, 0) == olabel)\n+\t{\n+\t  rtx n;\n+\t  if (nlabel)\n+\t    n = gen_rtx_LABEL_REF (VOIDmode, nlabel);\n+\t  else\n+\t    n = gen_rtx_RETURN (VOIDmode); \n \n-      /* We can do this in two ways:  The preferable way, which can only\n-\t be done if this is not an integer comparison, is to reverse\n-\t the comparison code.  Otherwise, swap the THEN-part and ELSE-part\n-\t of the IF_THEN_ELSE.  If we can't do either, fail.  */\n+\t  validate_change (insn, loc, n, 1);\n+\t  return;\n+\t}\n+    }\n+  else if (code == RETURN && olabel == 0)\n+    {\n+      x = gen_rtx_LABEL_REF (VOIDmode, nlabel);\n+      if (loc == &PATTERN (insn))\n+\tx = gen_rtx_SET (VOIDmode, pc_rtx, x);\n+      validate_change (insn, loc, x, 1);\n+      return;\n+    }\n \n-      if (can_reverse_comparison_p (comp, insn)\n-\t  && validate_change (insn, &XEXP (x, 0),\n-\t\t\t      gen_rtx_fmt_ee (reverse_condition (GET_CODE (comp)),\n-\t\t\t\t\t      GET_MODE (comp), XEXP (comp, 0),\n-\t\t\t\t\t      XEXP (comp, 1)), 0))\n-\treturn 1;\n-\t\t\t\t       \n-      tem = XEXP (x, 1);\n-      validate_change (insn, &XEXP (x, 1), XEXP (x, 2), 1);\n-      validate_change (insn, &XEXP (x, 2), tem, 1);\n-      return apply_change_group ();\n+  if (code == SET && nlabel == 0 && SET_DEST (x) == pc_rtx\n+      && GET_CODE (SET_SRC (x)) == LABEL_REF\n+      && XEXP (SET_SRC (x), 0) == olabel)\n+    {\n+      validate_change (insn, loc, gen_rtx_RETURN (VOIDmode), 1);\n+      return;\n     }\n \n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n-\t{\n-\t  if (! invert_exp (XEXP (x, i), insn))\n-\t    return 0;\n-\t}\n+\tredirect_exp_1 (&XEXP (x, i), olabel, nlabel, insn);\n       else if (fmt[i] == 'E')\n \t{\n \t  register int j;\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    if (!invert_exp (XVECEXP (x, i, j), insn))\n-\t      return 0;\n+\t    redirect_exp_1 (&XVECEXP (x, i, j), olabel, nlabel, insn);\n \t}\n     }\n+}\n \n-  return 1;\n+/* Similar, but apply the change group and report success or failure.  */\n+\n+int\n+redirect_exp (loc, olabel, nlabel, insn)\n+     rtx *loc;\n+     rtx olabel, nlabel;\n+     rtx insn;\n+{\n+  redirect_exp_1 (loc, olabel, nlabel, insn);\n+  if (num_validated_changes () == 0)\n+    return 0;\n+\n+  return apply_change_group ();\n }\n-\f\n-/* Make jump JUMP jump to label NLABEL instead of where it jumps now.\n-   If the old jump target label is unused as a result,\n-   it and the code following it may be deleted.\n+\n+/* Make JUMP go to NLABEL instead of where it jumps now.  Accrue\n+   the modifications into the change group.  Return false if we did\n+   not see how to do that.  */\n+\n+int\n+redirect_jump_1 (jump, nlabel)\n+     rtx jump, nlabel;\n+{\n+  int ochanges = num_validated_changes ();\n+  redirect_exp_1 (&PATTERN (jump), JUMP_LABEL (jump), nlabel, jump);\n+  return num_validated_changes () > ochanges;\n+}\n+\n+/* Make JUMP go to NLABEL instead of where it jumps now.  If the old\n+   jump target label is unused as a result, it and the code following\n+   it may be deleted.\n \n    If NLABEL is zero, we are to turn the jump into a (possibly conditional)\n    RETURN insn.\n \n-   The return value will be 1 if the change was made, 0 if it wasn't (this\n-   can only occur for NLABEL == 0).  */\n+   The return value will be 1 if the change was made, 0 if it wasn't\n+   (this can only occur for NLABEL == 0).  */\n \n int\n redirect_jump (jump, nlabel)\n@@ -4564,6 +4559,131 @@ redirect_jump (jump, nlabel)\n   return 1;\n }\n \n+/* Invert the jump condition of rtx X contained in jump insn, INSN.  \n+   Accrue the modifications into the change group.  */\n+\n+static void\n+invert_exp_1 (x, insn)\n+     rtx x;\n+     rtx insn;\n+{\n+  register RTX_CODE code;\n+  register int i;\n+  register const char *fmt;\n+\n+  code = GET_CODE (x);\n+\n+  if (code == IF_THEN_ELSE)\n+    {\n+      register rtx comp = XEXP (x, 0);\n+      register rtx tem;\n+\n+      /* We can do this in two ways:  The preferable way, which can only\n+\t be done if this is not an integer comparison, is to reverse\n+\t the comparison code.  Otherwise, swap the THEN-part and ELSE-part\n+\t of the IF_THEN_ELSE.  If we can't do either, fail.  */\n+\n+      if (can_reverse_comparison_p (comp, insn))\n+\t{\n+\t  validate_change (insn, &XEXP (x, 0),\n+\t\t\t   gen_rtx_fmt_ee (reverse_condition (GET_CODE (comp)),\n+\t\t\t\t\t   GET_MODE (comp), XEXP (comp, 0),\n+\t\t\t\t\t   XEXP (comp, 1)),\n+\t\t\t   1);\n+\t  return;\n+\t}\n+\t\t\t\t       \n+      tem = XEXP (x, 1);\n+      validate_change (insn, &XEXP (x, 1), XEXP (x, 2), 1);\n+      validate_change (insn, &XEXP (x, 2), tem, 1);\n+      return;\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\tinvert_exp_1 (XEXP (x, i), insn);\n+      else if (fmt[i] == 'E')\n+\t{\n+\t  register int j;\n+\t  for (j = 0; j < XVECLEN (x, i); j++)\n+\t    invert_exp_1 (XVECEXP (x, i, j), insn);\n+\t}\n+    }\n+}\n+\n+/* Invert the jump condition of rtx X contained in jump insn, INSN. \n+\n+   Return 1 if we can do so, 0 if we cannot find a way to do so that\n+   matches a pattern.  */\n+\n+int\n+invert_exp (x, insn)\n+     rtx x;\n+     rtx insn;\n+{\n+  invert_exp_1 (x, insn);\n+  if (num_validated_changes () == 0)\n+    return 0;\n+\n+  return apply_change_group ();\n+}\n+\n+/* Invert the condition of the jump JUMP, and make it jump to label\n+   NLABEL instead of where it jumps now.  Accrue changes into the\n+   change group.  Return false if we didn't see how to perform the\n+   inversion and redirection.  */\n+\n+int\n+invert_jump_1 (jump, nlabel)\n+     rtx jump, nlabel;\n+{\n+  int ochanges;\n+\n+  ochanges = num_validated_changes ();\n+  invert_exp_1 (PATTERN (jump), jump);\n+  if (num_validated_changes () == ochanges)\n+    return 0;\n+\n+  return redirect_jump_1 (jump, nlabel);\n+}\n+\n+/* Invert the condition of the jump JUMP, and make it jump to label\n+   NLABEL instead of where it jumps now.  Return true if successful.  */\n+\n+int\n+invert_jump (jump, nlabel)\n+     rtx jump, nlabel;\n+{\n+  /* We have to either invert the condition and change the label or\n+     do neither.  Either operation could fail.  We first try to invert\n+     the jump. If that succeeds, we try changing the label.  If that fails,\n+     we invert the jump back to what it was.  */\n+\n+  if (! invert_exp (PATTERN (jump), jump))\n+    return 0;\n+\n+  if (redirect_jump (jump, nlabel))\n+    {\n+      /* An inverted jump means that a probability taken becomes a\n+\t probability not taken.  Subtract the branch probability from the\n+\t probability base to convert it back to a taken probability.  */\n+\n+      rtx note = find_reg_note (jump, REG_BR_PROB, NULL_RTX);\n+      if (note)\n+\tXEXP (note, 0) = GEN_INT (REG_BR_PROB_BASE - INTVAL (XEXP (note, 0)));\n+\n+      return 1;\n+    }\n+\n+  if (! invert_exp (PATTERN (jump), jump))\n+    /* This should just be putting it back the way it was.  */\n+    abort ();\n+\n+  return 0;\n+}\n+\n /* Delete the instruction JUMP from any jump chain it might be on.  */\n \n static void\n@@ -4599,72 +4719,6 @@ delete_from_jump_chain (jump)\n \t  }\n     }\n }\n-\n-/* If NLABEL is nonzero, throughout the rtx at LOC,\n-   alter (LABEL_REF OLABEL) to (LABEL_REF NLABEL).  If OLABEL is\n-   zero, alter (RETURN) to (LABEL_REF NLABEL).\n-\n-   If NLABEL is zero, alter (LABEL_REF OLABEL) to (RETURN) and check\n-   validity with validate_change.  Convert (set (pc) (label_ref olabel))\n-   to (return).\n-\n-   Return 0 if we found a change we would like to make but it is invalid.\n-   Otherwise, return 1.  */\n-\n-int\n-redirect_exp (loc, olabel, nlabel, insn)\n-     rtx *loc;\n-     rtx olabel, nlabel;\n-     rtx insn;\n-{\n-  register rtx x = *loc;\n-  register RTX_CODE code = GET_CODE (x);\n-  register int i;\n-  register const char *fmt;\n-\n-  if (code == LABEL_REF)\n-    {\n-      if (XEXP (x, 0) == olabel)\n-\t{\n-\t  if (nlabel)\n-\t    XEXP (x, 0) = nlabel;\n-\t  else\n-\t    return validate_change (insn, loc, gen_rtx_RETURN (VOIDmode), 0);\n-\t  return 1;\n-\t}\n-    }\n-  else if (code == RETURN && olabel == 0)\n-    {\n-      x = gen_rtx_LABEL_REF (VOIDmode, nlabel);\n-      if (loc == &PATTERN (insn))\n-\tx = gen_rtx_SET (VOIDmode, pc_rtx, x);\n-      return validate_change (insn, loc, x, 0);\n-    }\n-\n-  if (code == SET && nlabel == 0 && SET_DEST (x) == pc_rtx\n-      && GET_CODE (SET_SRC (x)) == LABEL_REF\n-      && XEXP (SET_SRC (x), 0) == olabel)\n-    return validate_change (insn, loc, gen_rtx_RETURN (VOIDmode), 0);\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  if (! redirect_exp (&XEXP (x, i), olabel, nlabel, insn))\n-\t    return 0;\n-\t}\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  register int j;\n-\t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    if (! redirect_exp (&XVECEXP (x, i, j), olabel, nlabel, insn))\n-\t      return 0;\n-\t}\n-    }\n-\n-  return 1;\n-}\n \f\n /* Make jump JUMP jump to label NLABEL, assuming it used to be a tablejump.\n "}, {"sha": "172691e6ed7b606a5024ff8f500d1b94f2b16ccf", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea64f10c851eaaff64b57c9670385ab050fae34/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2ea64f10c851eaaff64b57c9670385ab050fae34", "patch": "@@ -1502,9 +1502,11 @@ extern int simplejump_p\t\t\tPARAMS ((rtx));\n extern int returnjump_p\t\t\tPARAMS ((rtx));\n extern int onlyjump_p\t\t\tPARAMS ((rtx));\n extern int sets_cc0_p\t\t\tPARAMS ((rtx));\n+extern int invert_jump_1\t\tPARAMS ((rtx, rtx));\n extern int invert_jump\t\t\tPARAMS ((rtx, rtx));\n extern int rtx_renumbered_equal_p\tPARAMS ((rtx, rtx));\n extern int true_regnum\t\t\tPARAMS ((rtx));\n+extern int redirect_jump_1\t\tPARAMS ((rtx, rtx));\n extern int redirect_jump\t\tPARAMS ((rtx, rtx));\n extern void jump_optimize\t\tPARAMS ((rtx, int, int, int));\n extern void jump_optimize_minimal\tPARAMS ((rtx));\n@@ -1823,11 +1825,12 @@ extern int stack_regs_mentioned\t\tPARAMS ((rtx insn));\n #endif\n \n /* In toplev.c */\n-\n extern rtx stack_limit_rtx;\n \n /* In regrename.c */\n-\n extern void regrename_optimize\t\tPARAMS ((void));\n \n+/* In condexec.c */\n+extern void if_convert\t\t\tPARAMS ((int));\n+\n #endif /* _RTL_H */"}]}