{"sha": "e79132c38501857aef03d9f06e08f8e702175c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5MTMyYzM4NTAxODU3YWVmMDNkOWYwNmUwOGY4ZTcwMjE3NWMxZQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-02T23:15:14Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-02T23:15:14Z"}, "message": "In libobjc/: 2011-06-02 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* Makefile.in (OBJC_DEPRECATED_H): Removed objc_error.h.\n\t* objc/deprecated/objc_error.h: Removed.\n\t* objc/objc-api.h: Do not include deprecated/objc_error.h.\n\t* libobjc.def (objc_error, objc_verror): Removed.\n\t* error.c (_objc_error_handler, objc_error, objc_verror,\n\tobjc_set_error_handler): Removed.\n\t* Object.m ([-error:], [-perform:], [-perform:with:],\n\t[-perform:with:with], [-subclassResponsibility:],\n\t[-notImplemented:], [-shouldNotImplement:], [-doesNotRecognize:]):\n\tRemoved.\n\t* objc/deprecated/Object.h: Removed the same methods.\n\t* sendmsg.c (__objc_forward): Do not try to invoke the \"error:\"\n\tmethod after trying to invoke the \"doesNotRecognize:\" method.\n\t\nIn gcc/testsuite/:\n2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/torture/forward-1.m (main): Updated testcase.\n\nFrom-SVN: r174587", "tree": {"sha": "0c7e8e1ef89453308b129a4ec6883dc7dee725a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7e8e1ef89453308b129a4ec6883dc7dee725a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79132c38501857aef03d9f06e08f8e702175c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79132c38501857aef03d9f06e08f8e702175c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79132c38501857aef03d9f06e08f8e702175c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79132c38501857aef03d9f06e08f8e702175c1e/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a700b5f073c45564f513ff035b2c0d5fb0edfaa0"}], "stats": {"total": 224, "additions": 25, "deletions": 199}, "files": [{"sha": "3b1c8b9486c7b9f13ef61817281470910aaec56c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -1,3 +1,7 @@\n+2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/torture/forward-1.m (main): Updated testcase.\n+\n 2011-06-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/49163"}, {"sha": "0d6f9ac4017531782f6f265b3179d0842f59b687", "filename": "gcc/testsuite/objc.dg/torture/forward-1.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -71,7 +71,9 @@ -(retval_t) forward: (SEL)theSel: (arglist_t)theArgFrame\n   /* If we have a reciever try to perform on that object */\n     if (receiver)\n         return [receiver performv: theSel: theArgFrame];\n-    return [self doesNotRecognize:theSel];\n+\n+    /* Normally you'd emit an error here.  */\n+    printf (\"Unrecognized selector\\n\");\n }\n @end\n int main()"}, {"sha": "cb2a847f49c54b48b27e965f2824b1b566573bc3", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -1,3 +1,19 @@\n+2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* Makefile.in (OBJC_DEPRECATED_H): Removed objc_error.h.\n+\t* objc/deprecated/objc_error.h: Removed.\n+\t* objc/objc-api.h: Do not include deprecated/objc_error.h.\n+\t* libobjc.def (objc_error, objc_verror): Removed.\n+\t* error.c (_objc_error_handler, objc_error, objc_verror,\n+\tobjc_set_error_handler): Removed.\n+\t* Object.m ([-error:], [-perform:], [-perform:with:],\n+\t[-perform:with:with], [-subclassResponsibility:],\n+\t[-notImplemented:], [-shouldNotImplement:], [-doesNotRecognize:]):\n+\tRemoved.\n+\t* objc/deprecated/Object.h: Removed the same methods.\n+\t* sendmsg.c (__objc_forward): Do not try to invoke the \"error:\"\n+\tmethod after trying to invoke the \"doesNotRecognize:\" method.\n+\t\n 2011-05-26  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* sendmsg.c: Reindented part of the file.  No non-trivial changes"}, {"sha": "12f3e832e6721216e05d049a3a8137d587121428", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -139,7 +139,6 @@ OBJC_DEPRECATED_H = \\\n   STR.h \\\n   hash.h \\\n   objc-list.h \\\n-  objc_error.h \\\n   objc_get_uninstalled_dtable.h \\\n   objc_malloc.h \\\n   objc_msg_sendv.h \\"}, {"sha": "f83d07257a056ee912c87788aec1c8cd38a40247", "filename": "libobjc/Object.m", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -248,30 +248,6 @@ - (struct objc_method_description *)descriptionForMethod:(SEL)aSel\n             :class_get_class_method(self->isa, aSel)));\n }\n \n-- perform:(SEL)aSel\n-{\n-  IMP msg = objc_msg_lookup(self, aSel);\n-  if (!msg)\n-    return [self error:\"invalid selector passed to %s\", sel_get_name(_cmd)];\n-  return (*msg)(self, aSel);\n-}\n-\n-- perform:(SEL)aSel with:anObject\n-{\n-  IMP msg = objc_msg_lookup(self, aSel);\n-  if (!msg)\n-    return [self error:\"invalid selector passed to %s\", sel_get_name(_cmd)];\n-  return (*msg)(self, aSel, anObject);\n-}\n-\n-- perform:(SEL)aSel with:anObject1 with:anObject2\n-{\n-  IMP msg = objc_msg_lookup(self, aSel);\n-  if (!msg)\n-    return [self error:\"invalid selector passed to %s\", sel_get_name(_cmd)];\n-  return (*msg)(self, aSel, anObject1, anObject2);\n-}\n-\n - (retval_t)forward:(SEL)aSel :(arglist_t)argFrame\n {\n   (void) argFrame; /* UNUSED */\n@@ -302,45 +278,6 @@ - (Class)transmuteClassTo:(Class)aClassObject\n   return nil;\n }\n \n-- subclassResponsibility:(SEL)aSel\n-{\n-  return [self error:\"subclass should override %s\", sel_get_name(aSel)];\n-}\n-\n-- notImplemented:(SEL)aSel\n-{\n-  return [self error:\"method %s not implemented\", sel_get_name(aSel)];\n-}\n-\n-- shouldNotImplement:(SEL)aSel\n-{\n-  return [self error:\"%s should not implement %s\", \n-\t             object_get_class_name(self), sel_get_name(aSel)];\n-}\n-\n-- doesNotRecognize:(SEL)aSel\n-{\n-  return [self error:\"%s does not recognize %s\",\n-                     object_get_class_name(self), sel_get_name(aSel)];\n-}\n-\n-- error:(const char *)aString, ...\n-{\n-#define FMT \"error: %s (%s)\\n%s\\n\"\n-  char fmt[(strlen((char*)FMT)+strlen((char*)object_get_class_name(self))\n-            +((aString!=NULL)?strlen((char*)aString):0)+8)];\n-  va_list ap;\n-\n-  sprintf(fmt, FMT, object_get_class_name(self),\n-                    object_is_instance(self)?\"instance\":\"class\",\n-                    (aString!=NULL)?aString:\"\");\n-  va_start(ap, aString);\n-  objc_verror(self, OBJC_ERR_UNKNOWN, fmt, ap);\n-  va_end(ap);\n-  return nil;\n-#undef FMT\n-}\n-\n + (int)version\n {\n   return class_get_version(self);"}, {"sha": "51d6402b998a6aff0bad43b87228683f779f87aa", "filename": "libobjc/error.c", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Ferror.c?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -45,53 +45,3 @@ _objc_abort (const char *fmt, ...)\n   abort ();\n   va_end (ap);\n }\n-\n-/* The rest of the file is deprecated.  */\n-#include \"objc/objc-api.h\" /* For objc_error_handler.  */\n-\n-/*\n-** Error handler function\n-** NULL so that default is to just print to stderr\n-*/\n-static objc_error_handler _objc_error_handler = NULL;\n-\n-/* Trigger an objc error */\n-void\n-objc_error (id object, int code, const char *fmt, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, fmt);\n-  objc_verror (object, code, fmt, ap);\n-  va_end (ap);\n-}\n-\n-/* Trigger an objc error */\n-void\n-objc_verror (id object, int code, const char *fmt, va_list ap)\n-{\n-  BOOL result = NO;\n-\n-  /* Call the error handler if its there\n-     Otherwise print to stderr */\n-  if (_objc_error_handler)\n-    result = (*_objc_error_handler) (object, code, fmt, ap);\n-  else\n-    vfprintf (stderr, fmt, ap);\n-\n-  /* Continue if the error handler says its ok\n-     Otherwise abort the program */\n-  if (result)\n-    return;\n-  else\n-    abort ();\n-}\n-\n-/* Set the error handler */\n-objc_error_handler\n-objc_set_error_handler (objc_error_handler func)\n-{\n-  objc_error_handler temp = _objc_error_handler;\n-  _objc_error_handler = func;\n-  return temp;\n-}"}, {"sha": "a8d66200af2440c15e7ce74c3d428a4654791f5c", "filename": "libobjc/libobjc.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Flibobjc.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Flibobjc.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Flibobjc.def?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -25,7 +25,6 @@ search_for_method_in_list\n objc_get_uninstalled_dtable\n objc_hash_is_key_in_hash\n hash_is_key_in_hash\n-objc_verror\n _objc_load_callback\n objc_malloc\n objc_atomic_malloc\n@@ -53,7 +52,6 @@ objc_thread_remove\n __objc_class_name_Object\n __objc_class_name_Protocol\n __objc_class_name_NXConstantString\n-objc_error\n __objc_object_alloc\n __objc_object_copy\n __objc_object_dispose"}, {"sha": "7a1344919eead04705d5a2f419a9661fcbc9a50f", "filename": "libobjc/objc/deprecated/Object.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FObject.h?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -48,11 +48,6 @@\n + (struct objc_method_description *)descriptionForInstanceMethod:(SEL)aSel;\n - (struct objc_method_description *)descriptionForMethod:(SEL)aSel;\n \n-/* Sending messages determined at run time */\n-- perform:(SEL)aSel;\n-- perform:(SEL)aSel with:anObject;\n-- perform:(SEL)aSel with:anObject1 with:anObject2;\n-\n /* Forwarding */\n - (retval_t)forward:(SEL)aSel :(arglist_t)argFrame;\n - (retval_t)performv:(SEL)aSel :(arglist_t)argFrame;\n@@ -61,15 +56,6 @@\n + poseAs:(Class)aClassObject;\n - (Class)transmuteClassTo:(Class)aClassObject;\n \n-/* Enforcing intentions */\n-- subclassResponsibility:(SEL)aSel;\n-- notImplemented:(SEL)aSel;\n-- shouldNotImplement:(SEL)aSel;\n-\n-/* Error handling */\n-- doesNotRecognize:(SEL)aSel;\n-- error:(const char *)aString, ...;\n-\n /* Archiving */\n + (int)version;\n + setVersion:(int)aVersion;"}, {"sha": "7a7ebe941b29fa5b73bad7ecb4896fda36bc3657", "filename": "libobjc/objc/deprecated/objc_error.h", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h?ref=a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "patch": "@@ -1,56 +0,0 @@\n-/* This API is incredibly limited and unsophisticated.  objc_error()\n-   generally causes the program to abort, so it should only be used\n-   when something so dramatic happens that it could be pointless to\n-   continue.  Only two cases I can think of: failure to allocate new\n-   memory or failure to load an Objective-C module.\n-*/\n-/* Error handling\n-  \n-   Call objc_error() or objc_verror() to record an error; this error\n-   routine will generally exit the program but not necessarily if the\n-   user has installed his own error handler.\n-  \n-   Call objc_set_error_handler to assign your own function for\n-   handling errors.  The function should return YES if it is ok\n-   to continue execution, or return NO or just abort if the\n-   program should be stopped.  The default error handler is just to\n-   print a message on stderr.\n-  \n-   The error handler function should be of type objc_error_handler\n-   The first parameter is an object instance of relevance.\n-   The second parameter is an error code.\n-   The third parameter is a format string in the printf style.\n-   The fourth parameter is a variable list of arguments.  */\n-void objc_error(id object, int code, const char* fmt, ...);\n-void objc_verror(id object, int code, const char* fmt, va_list ap);\n-typedef BOOL (*objc_error_handler)(id, int code, const char *fmt, va_list ap);\n-objc_error_handler objc_set_error_handler(objc_error_handler func);\n-\n-/* Error codes\n-   These are used by the runtime library, and your\n-   error handling may use them to determine if the error is\n-   hard or soft thus whether execution can continue or abort.  */\n-#define OBJC_ERR_UNKNOWN 0             /* Generic error */\n-\n-#define OBJC_ERR_OBJC_VERSION 1        /* Incorrect runtime version */\n-#define OBJC_ERR_GCC_VERSION 2         /* Incorrect compiler version */\n-#define OBJC_ERR_MODULE_SIZE 3         /* Bad module size */\n-#define OBJC_ERR_PROTOCOL_VERSION 4    /* Incorrect protocol version */\n-\n-#define OBJC_ERR_MEMORY 10             /* Out of memory */\n-\n-#define OBJC_ERR_RECURSE_ROOT 20       /* Attempt to archive the root\n-\t\t\t\t\t  object more than once. */\n-#define OBJC_ERR_BAD_DATA 21           /* Didn't read expected data */\n-#define OBJC_ERR_BAD_KEY 22            /* Bad key for object */\n-#define OBJC_ERR_BAD_CLASS 23          /* Unknown class */\n-#define OBJC_ERR_BAD_TYPE 24           /* Bad type specification */\n-#define OBJC_ERR_NO_READ 25            /* Cannot read stream */\n-#define OBJC_ERR_NO_WRITE 26           /* Cannot write stream */\n-#define OBJC_ERR_STREAM_VERSION 27     /* Incorrect stream version */\n-#define OBJC_ERR_BAD_OPCODE 28         /* Bad opcode */\n-\n-#define OBJC_ERR_UNIMPLEMENTED 30      /* Method is not implemented */\n-\n-#define OBJC_ERR_BAD_STATE 40          /* Bad thread state */\n-"}, {"sha": "42bec77770fd394803643778994ffe8123ccf94e", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -109,8 +109,6 @@ struct objc_method_description\n    equivalent to \"*\".  */\n #define _C_ATOM     '%'\n \n-#include \"deprecated/objc_error.h\"\n-\n #include \"deprecated/struct_objc_static_instances.h\"\n #include \"deprecated/struct_objc_symtab.h\"\n #include \"deprecated/struct_objc_module.h\""}, {"sha": "137731ae9d174a69aa16f4188786a0c3990f1f86", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79132c38501857aef03d9f06e08f8e702175c1e/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=e79132c38501857aef03d9f06e08f8e702175c1e", "patch": "@@ -977,16 +977,8 @@ __objc_forward (id object, SEL sel, arglist_t args)\n \t      : \"instance\" ),\n              object->class_pointer->name, sel_getName (sel));\n \n-    /* TODO: support for error: is surely deprecated ? */\n-    err_sel = sel_get_any_uid (\"error:\");\n-    if (__objc_responds_to (object, err_sel))\n-      {\n-\timp = get_implementation (object, object->class_pointer, err_sel);\n-\treturn (*imp) (object, sel_get_any_uid (\"error:\"), msg);\n-      }\n-\n-    /* The object doesn't respond to doesNotRecognize: or error:;\n-       Therefore, a default action is taken.  */\n+    /* The object doesn't respond to doesNotRecognize:.  Therefore, a\n+       default action is taken.  */\n     _objc_abort (\"%s\\n\", msg);\n \n     return 0;"}]}