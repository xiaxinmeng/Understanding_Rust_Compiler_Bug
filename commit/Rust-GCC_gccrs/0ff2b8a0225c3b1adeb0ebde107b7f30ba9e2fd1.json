{"sha": "0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZmMmI4YTAyMjVjM2IxYWRlYjBlYmRlMTA3YjdmMzBiYTllMmZkMQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:41:21Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:41:21Z"}, "message": "Fix token pasting with -ftrack-macro-expansion\n\nThis patch makes token pasting work with -ftrack-macro-expansion\nturned on.  It improves some pasting related tests of the gcc.dg/cpp\nsubdirectory.\n\nTested and bootstrapped on x86_64-unknown-linux-gnu against trunk.\n\nNote that the bootstrap with -ftrack-macro-expansion exhibits other\nseparate issues that are addressed in subsequent patches.  This patch\njust fixes one class of problems.\n\nThe patch does pass bootstrap with -ftrack-macro-expansion turned off,\nthough.\n\nlibcpp/\n\n\t* macro.c (paste_all_tokens): Put the token resulting from pasting\n\tinto an extended token context with -ftrack-macro-location is in\n\teffect.\n\ngcc/testsuite/\n\n\t* gcc.dg/cpp/paste17.c: New test case for\n\t-ftrack-macro-expansion=2 mode only.\n\t* gcc.dg/cpp/macro-exp-tracking-5.c: Likewise.\n\nFrom-SVN: r186966", "tree": {"sha": "1d4cb06aa5ecf72c6a60528b1d81bb97c5bb8175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4cb06aa5ecf72c6a60528b1d81bb97c5bb8175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/comments", "author": null, "committer": null, "parents": [{"sha": "4e65a47055ed1e7fb0068125bd95708ed86ab9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e65a47055ed1e7fb0068125bd95708ed86ab9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e65a47055ed1e7fb0068125bd95708ed86ab9af"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "c7f6419c652ace56228aa10728e8ba0e6a306504", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "patch": "@@ -1,3 +1,10 @@\n+2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tFix token pasting with -ftrack-macro-expansion\n+\t* gcc.dg/cpp/paste17.c: New test case for\n+    \t-ftrack-macro-expansion=2 mode only.\n+\t* gcc.dg/cpp/macro-exp-tracking-5.c: Likewise.\n+\n 2012-04-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/warn6.ad[sb]: New test."}, {"sha": "7933660856984241158e92d22677e3287e26483c", "filename": "gcc/testsuite/gcc.dg/cpp/macro-exp-tracking-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro-exp-tracking-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro-exp-tracking-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro-exp-tracking-5.c?ref=0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "patch": "@@ -0,0 +1,18 @@\n+/*\n+  { dg-options \"-fshow-column -ftrack-macro-expansion\" }\n+  { dg-do compile }\n+ */\n+\n+#define PASTED var ## iable /* { dg-error \"undeclared\" } */\n+#define call_foo(p1, p2) \\\n+  foo (p1,\t\t \\\n+       p2);  /*  { dg-message \"in expansion of macro\" } */\n+\n+void foo(int, char);\n+\n+void\n+bar()\n+{\n+  call_foo(1,PASTED); /* { dg-message \"expanded from here\" } */\n+}\n+"}, {"sha": "9c6506ff8921821fac07d0f2dcec0919f7969964", "filename": "gcc/testsuite/gcc.dg/cpp/paste17.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste17.c?ref=0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "patch": "@@ -0,0 +1,8 @@\n+ /* { dg-options \"-ftrack-macro-expansion=2\" } */\n+/* { dg-do preprocess } */\n+\n+#define do_paste 1.0e ## -1\n+\n+do_paste\n+\n+/* { dg-final {scan-file paste17.i \"1.0e- 1\" } }*/"}, {"sha": "189f394418e266d3d4caed523ce106017de52e5a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "patch": "@@ -1,5 +1,10 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tFix token pasting with -ftrack-macro-expansion\n+\t* macro.c (paste_all_tokens): Put the token resulting from pasting\n+\tinto an extended token context with -ftrack-macro-location is in\n+\teffect.\n+\n \tFix cpp_sys_macro_p with -ftrack-macro-expansion\n \t* macro.c (cpp_sys_macro_p):  Support -ftrack-macro-expansion.\n "}, {"sha": "f4638c49cd99f0e418ac8e3cad862ffaf5e98c69", "filename": "libcpp/macro.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=0ff2b8a0225c3b1adeb0ebde107b7f30ba9e2fd1", "patch": "@@ -611,6 +611,21 @@ paste_all_tokens (cpp_reader *pfile, const cpp_token *lhs)\n {\n   const cpp_token *rhs = NULL;\n   cpp_context *context = pfile->context;\n+  source_location virt_loc = 0;\n+\n+  /* We must have been called on a token that appears at the left\n+     hand side of a ## operator.  */\n+  if (!(lhs->flags & PASTE_LEFT))\n+    abort ();\n+\n+  if (context->tokens_kind == TOKENS_KIND_EXTENDED)\n+    /* The caller must have called consume_next_token_from_context\n+       right before calling us.  That has incremented the pointer to\n+       the current virtual location.  So it now points to the location\n+       of the token that comes right after *LHS.  We want the\n+       resulting pasted token to have the location of the current\n+       *LHS, though.  */\n+    virt_loc = context->c.mc->cur_virt_loc[-1];\n \n   do\n     {\n@@ -650,7 +665,18 @@ paste_all_tokens (cpp_reader *pfile, const cpp_token *lhs)\n   while (rhs->flags & PASTE_LEFT);\n \n   /* Put the resulting token in its own context.  */\n-  _cpp_push_token_context (pfile, NULL, lhs, 1);\n+  if (context->tokens_kind == TOKENS_KIND_EXTENDED)\n+    {\n+      source_location *virt_locs = NULL;\n+      _cpp_buff *token_buf = tokens_buff_new (pfile, 1, &virt_locs);\n+      tokens_buff_add_token (token_buf, virt_locs, lhs,\n+\t\t\t     virt_loc, 0, NULL, 0);\n+      push_extended_tokens_context (pfile, context->c.mc->macro_node,\n+\t\t\t\t    token_buf, virt_locs,\n+\t\t\t\t    (const cpp_token **)token_buf->base, 1);\n+    }\n+  else\n+    _cpp_push_token_context (pfile, NULL, lhs, 1);\n }\n \n /* Returns TRUE if the number of arguments ARGC supplied in an"}]}