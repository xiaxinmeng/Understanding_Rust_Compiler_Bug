{"sha": "09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmZjBlZTRjZmNhMTRhMjI4ODdlYjhjMjJmY2MwZmQ3NDA0YTRjOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-09-06T19:52:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-09-06T19:52:38Z"}, "message": "localefwd.h: Tweak formatting.\n\n\n2002-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/localefwd.h: Tweak formatting.\n\t* docs/html/abi.txt: Add.\n\nFrom-SVN: r56903", "tree": {"sha": "d08982bd7f5507408cffbca20c7517e0ad83c740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d08982bd7f5507408cffbca20c7517e0ad83c740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/comments", "author": null, "committer": null, "parents": [{"sha": "942579db7ede8c20f9b6906d8a32fbc35c409250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942579db7ede8c20f9b6906d8a32fbc35c409250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942579db7ede8c20f9b6906d8a32fbc35c409250"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "ba71fddb9aae670a2ec38adfd4461b7c54d5bee6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "patch": "@@ -1,3 +1,8 @@\n+2002-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/localefwd.h: Tweak formatting.\n+\t* docs/html/abi.txt: Add.\n+\n 2002-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.target: Use cpu_include_dir=\"config/cpu/sparc\" for all"}, {"sha": "957fbc0b3f5b765bad476895b73c6702cb035d88", "filename": "libstdc++-v3/docs/html/abi.txt", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt?ref=09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "patch": "@@ -6,7 +6,7 @@ document exists, why it's incomplete, and what needs to be done still.\n \n ===========================\n \n-2002-07-30 Benjamin Kosnik\n+2002-09-06 Benjamin Kosnik\n \n Description of the libstdc++ ABI.\n \n@@ -131,7 +131,7 @@ I. What is an ABI? What's covered? What's not?\n     gcc-3.0.4: 20020220\n     gcc-3.1.0: 20020514\n     gcc-3.1.1: 20020725\n-    gcc-3.2.0: (20020731)\n+    gcc-3.2.0: 20020814\n \n \n   - Incremental bumping of a library pre-defined macro,\n@@ -152,7 +152,7 @@ I. What is an ABI? What's covered? What's not?\n     gcc-3.0.4: \"3.0.0\" (Error, should be \"3.0.4\")\n     gcc-3.1.0: \"3.1.0\"\n     gcc-3.1.1: \"3.1.1\"\n-    gcc-3.2.0: (\"3.2.0\")\n+    gcc-3.2.0: \"3.2\"\n \n \n   - Matching each specific C++ compiler release to a specific set of\n@@ -281,40 +281,53 @@ III. Versioning\n \n IV. Testing ABI changes\n \n-Currently, there is no formal testing for changes in the libstdc++\n-ABI. It would be in the best interest of GNU C++ users everywhere to\n-have such a test, and work to develop this test is ongoing.\n+Currently, there are formal tests for changes in the libstdc++ ABI,\n+and in addition informal testing procedures. Work to develop these\n+tests is ongoing.\n \n There is a formal method for checking the compiler parts of the C++\n ABI, donated by Intel. More information can be obtained\n <a href=\"http://developer.intel.com/software/products/opensource/\">here.</a>\n \n-To test the library, the following two ideas have been suggested:\n+Also, it seems as if some members of the open source community are\n+working on C++ ABI testers for the compiler. It is yet unspecified if\n+these tools will be freely available, and able to be included in a GNU\n+project. Please contact Mark Mitchell (mark@codesoucery.com) for more\n+details, and current status.\n+\n+\n+To test the library, there are two methods:\n \n One. \n (Brendan Kehoe, Jeff Law suggestion to run 'make check-c++' two ways, \n one with a new compiler and an old library, and the other with an old\n compiler and a new library, and look for testsuite regressions)\n \n+Details on how to set this kind of test up can be found here:\n+http://gcc.gnu.org/ml/gcc/2002-08/msg00142.html\n+\n Two.  \n-Have the libstdc++ testsuite proactive check the library ABI. Probably\n-a couple of items would be covered, although perhaps not all would\n-need to be done at once for this to be useful. Compute the list of\n-names exported in the shared version of libstdc++ binary. Then, save\n-this list of names. Have this list of names re-computed for each new\n-binary of the same version. Next, use sizeof, alignof, and offset to\n-compute offsets for each structure and type in the standard library,\n-saving to another datafile. Then, compute this for new binaries, and\n-look for differences.\n+Use the 'make check-abi' rule in the libstdc++-v3 Makefile. \n+\n+This is a proactive check the library ABI. Currently, exported symbol\n+names are checked against a last known good baseline. Currently, this\n+baseline is keyed off of 3.2.0 binaries, as this was the last time the\n+.so number was incremented. In addition, all exported names are\n+demangled, and the exported objects are checked to make sure they are\n+the same size as the same object in the baseline.\n \n-An example of a way to compute the list of names exported by the\n-shared libstdc++ binary is:\n+In the future, more tests should be added. In particular, vtable\n+information, offsets of data members in class objects, and other\n+layout information should be checked.\n \n-nm --extern-only --portability libstdc++.so.5.0.0 | awk '{ print $1 $2}'\n+It should be possible to use sizeof, alignof, and offset to compute\n+offsets for each structure and type in the standard library, saving to\n+another datafile. Then, compute this for new binaries, and look for\n+differences.\n \n-The thought is to choose one or both of these approaches, and to use a\n-Makefile hook, perhaps 'make check-abi', to add this capability to the\n-libstdc++ testsuite.\n+Another approach might be to use the -fdump-class-hierarchy flag to\n+get information.\n+(See g++/7470 on how this was used to find bugs.)\n \n Perhaps there are other Library ABI checkers. If so, please notify us.\n \n@@ -327,7 +340,7 @@ V. Issues not directly addressed, and possible suggestions\n \n   --enable-version-specific-runtime-libs\n \n-  - Alexandre Oliva proposal to have extended name attributes, modify ld\n+  - Alexandre Olva proposal to have extended name attributes, modify ld\n  \n   - directory-level versioning\n "}, {"sha": "b92560f0b52c86ec0d94a6338c8f0a4f68621105", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=09ff0ee4cfca14a22887eb8c22fcc0fd7404a4c9", "patch": "@@ -387,12 +387,12 @@ namespace std\n     friend class locale;\n     friend class locale::_Impl;\n \n-    _Atomic_word _M_references;\n+    _Atomic_word \t\t\t_M_references;\n \n   protected:\n     // Contains data from the underlying \"C\" library for default \"C\"\n     // or \"POSIX\" locale.\n-    static __c_locale\t\t     _S_c_locale;\n+    static __c_locale\t\t     \t_S_c_locale;\n     \n     explicit \n     facet(size_t __refs = 0) throw();"}]}