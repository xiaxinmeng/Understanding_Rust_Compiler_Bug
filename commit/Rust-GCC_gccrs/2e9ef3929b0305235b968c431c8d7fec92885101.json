{"sha": "2e9ef3929b0305235b968c431c8d7fec92885101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5ZWYzOTI5YjAzMDUyMzViOTY4YzQzMWM4ZDdmZWM5Mjg4NTEwMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-08T11:58:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-08T11:58:13Z"}, "message": "vect: Remove always-true condition\n\nvectorizable_reduction had code guarded by:\n\n  if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def\n      || STMT_VINFO_DEF_TYPE (stmt_info) == vect_double_reduction_def)\n\nBut that's always true after:\n\n  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_reduction_def\n      && STMT_VINFO_DEF_TYPE (stmt_info) != vect_double_reduction_def\n      && STMT_VINFO_DEF_TYPE (stmt_info) != vect_nested_cycle)\n    return false;\n\n  if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_nested_cycle)\n    {\n      \u2026\n      return true;\n    }\n\n(I wasn't sure at first how the empty \u201celse\u201d for the first \u201cif\u201d above\nwas supposed to work.)\n\ngcc/\n\t* tree-vect-loop.c (vectorizable_reduction): Remove always-true\n\tif condition.", "tree": {"sha": "38caf57f97ef9a0ec0d60fb4795d1ab0e4aec298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38caf57f97ef9a0ec0d60fb4795d1ab0e4aec298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9ef3929b0305235b968c431c8d7fec92885101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ef3929b0305235b968c431c8d7fec92885101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9ef3929b0305235b968c431c8d7fec92885101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ef3929b0305235b968c431c8d7fec92885101/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298b0db76dfcc82427d987fbbd239afcb0c3dbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298b0db76dfcc82427d987fbbd239afcb0c3dbfd"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "bc523d151c6e5c1d0bd20eb6d28abdb46f49dfbc", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ef3929b0305235b968c431c8d7fec92885101/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ef3929b0305235b968c431c8d7fec92885101/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=2e9ef3929b0305235b968c431c8d7fec92885101", "patch": "@@ -6516,33 +6516,31 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \n   stmt_vec_info orig_stmt_of_analysis = stmt_info;\n   stmt_vec_info phi_info = stmt_info;\n-  if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def\n-      || STMT_VINFO_DEF_TYPE (stmt_info) == vect_double_reduction_def)\n+  if (!is_a <gphi *> (stmt_info->stmt))\n     {\n-      if (!is_a <gphi *> (stmt_info->stmt))\n-\t{\n-\t  STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n-\t  return true;\n-\t}\n-      if (slp_node)\n-\t{\n-\t  slp_node_instance->reduc_phis = slp_node;\n-\t  /* ???  We're leaving slp_node to point to the PHIs, we only\n-\t     need it to get at the number of vector stmts which wasn't\n-\t     yet initialized for the instance root.  */\n-\t}\n-      if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def)\n-\tstmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (stmt_info));\n-      else /* STMT_VINFO_DEF_TYPE (stmt_info) == vect_double_reduction_def */\n-\t{\n-\t  use_operand_p use_p;\n-\t  gimple *use_stmt;\n-\t  bool res = single_imm_use (gimple_phi_result (stmt_info->stmt),\n-\t\t\t\t     &use_p, &use_stmt);\n-\t  gcc_assert (res);\n-\t  phi_info = loop_vinfo->lookup_stmt (use_stmt);\n-\t  stmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (phi_info));\n-\t}\n+      STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n+      return true;\n+    }\n+  if (slp_node)\n+    {\n+      slp_node_instance->reduc_phis = slp_node;\n+      /* ???  We're leaving slp_node to point to the PHIs, we only\n+\t need it to get at the number of vector stmts which wasn't\n+\t yet initialized for the instance root.  */\n+    }\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def)\n+    stmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (stmt_info));\n+  else\n+    {\n+      gcc_assert (STMT_VINFO_DEF_TYPE (stmt_info)\n+\t\t  == vect_double_reduction_def);\n+      use_operand_p use_p;\n+      gimple *use_stmt;\n+      bool res = single_imm_use (gimple_phi_result (stmt_info->stmt),\n+\t\t\t\t &use_p, &use_stmt);\n+      gcc_assert (res);\n+      phi_info = loop_vinfo->lookup_stmt (use_stmt);\n+      stmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (phi_info));\n     }\n \n   /* PHIs should not participate in patterns.  */"}]}