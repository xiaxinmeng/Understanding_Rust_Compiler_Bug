{"sha": "6152c64aab1bd96c75fae7697f8b91f9237310da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE1MmM2NGFhYjFiZDk2Yzc1ZmFlNzY5N2Y4YjkxZjkyMzczMTBkYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2000-12-29T17:48:08Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-12-29T17:48:08Z"}, "message": "Compute REG_N_SETS for ORIGINAL_REGNOs.\n\nFrom-SVN: r38547", "tree": {"sha": "08ddd986dbbd67053b634d70b2d98eff40550070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ddd986dbbd67053b634d70b2d98eff40550070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6152c64aab1bd96c75fae7697f8b91f9237310da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6152c64aab1bd96c75fae7697f8b91f9237310da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6152c64aab1bd96c75fae7697f8b91f9237310da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6152c64aab1bd96c75fae7697f8b91f9237310da/comments", "author": null, "committer": null, "parents": [{"sha": "08394eefae77ab1b344232e1fe151064f839324f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08394eefae77ab1b344232e1fe151064f839324f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08394eefae77ab1b344232e1fe151064f839324f"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "52759c5a053608097ff8051868f18f0894e255dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6152c64aab1bd96c75fae7697f8b91f9237310da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6152c64aab1bd96c75fae7697f8b91f9237310da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6152c64aab1bd96c75fae7697f8b91f9237310da", "patch": "@@ -1,5 +1,10 @@\n 2000-12-29  Bernd Schmidt  <bernds@redhat.com>\n \n+\t* flow.c (PROP_POSTRELOAD): New macro.\n+\t(update_life_info): Add it to prop_flags.\n+\t(mark_set_1): If it is set, compute REG_N_SETS for the original\n+\tregister number of a hard reg.\n+\n \t* emit-rtl.c (gen_raw_REG): New function.\n \t(gen_rtx_REG, gen_reg_rtx, init_emit_once): Use it instead of\n \tgen_rtx_raw_REG."}, {"sha": "26b985d9c82f832a7bb3586c2ec8130d36cb00fa", "filename": "gcc/flow.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6152c64aab1bd96c75fae7697f8b91f9237310da/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6152c64aab1bd96c75fae7697f8b91f9237310da/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6152c64aab1bd96c75fae7697f8b91f9237310da", "patch": "@@ -168,6 +168,10 @@ Boston, MA 02111-1307, USA.  */\n #define EPILOGUE_USES(REGNO)  0\n #endif\n \n+/* Not in basic-block.h, since it is private to this file.  When set, it\n+   causes us to keep REG_N_SETS uptodate for original pseudo registers.  */\n+#define PROP_POSTRELOAD 64\n+\n /* The obstack on which the flow graph components are allocated.  */\n \n struct obstack flow_obstack;\n@@ -2975,6 +2979,9 @@ update_life_info (blocks, extent, prop_flags)\n \n   tmp = INITIALIZE_REG_SET (tmp_head);\n \n+  if (reload_completed)\n+    prop_flags |= PROP_POSTRELOAD;\n+\n   /* For a global update, we go through the relaxation process again.  */\n   if (extent != UPDATE_LIFE_LOCAL)\n     {\n@@ -4549,6 +4556,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n      rtx reg, cond, insn;\n      int flags;\n {\n+  int orig_regno = -1;\n   int regno_first = -1, regno_last = -1;\n   int not_dead = 0;\n   int i;\n@@ -4586,6 +4594,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n       /* Fall through.  */\n \n     case REG:\n+      orig_regno = ORIGINAL_REGNO (reg);\n       regno_last = regno_first = REGNO (reg);\n       if (regno_first < FIRST_PSEUDO_REGISTER)\n \tregno_last += HARD_REGNO_NREGS (regno_first, GET_MODE (reg)) - 1;\n@@ -4730,7 +4739,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \n       /* Additional data to record if this is the final pass.  */\n       if (flags & (PROP_LOG_LINKS | PROP_REG_INFO\n-\t\t   | PROP_DEATH_NOTES | PROP_AUTOINC))\n+\t\t   | PROP_DEATH_NOTES | PROP_AUTOINC | PROP_POSTRELOAD))\n \t{\n \t  register rtx y;\n \t  register int blocknum = pbi->bb->index;\n@@ -4745,6 +4754,11 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \t\tpbi->reg_next_use[i] = 0;\n \t    }\n \n+\t  /* After reload has completed, try to keep REG_N_SETS uptodate for\n+\t     the original pseudos.  */\n+\t  if ((flags & PROP_POSTRELOAD) && orig_regno >= FIRST_PSEUDO_REGISTER)\n+\t    REG_N_SETS (orig_regno) += 1;\n+\n \t  if (flags & PROP_REG_INFO)\n \t    {\n \t      for (i = regno_first; i <= regno_last; ++i)"}]}