{"sha": "702d87032825f284efe6a5287c478692e103318c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyZDg3MDMyODI1ZjI4NGVmZTZhNTI4N2M0Nzg2OTJlMTAzMzE4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-05-08T12:59:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-05-08T12:59:21Z"}, "message": "re PR lto/54095 (Unnecessary static variable renaming)\n\n\tPR lto/54095\n\t* cgraph.c (cgraph_make_node_local_1): Se unique_name.\n\t* cgraph.h (symtab_node_base): Add unique_name.\n\t* lto-cgraph.c (lto_output_node, lto_output_varpool_node,\n\tinput_overwrite_node, input_varpool_node): Stream unique_name.\n\t* cgraphclones.c (cgraph_create_virtual_clone,\n\tcgraph_function_versioning): Set unique_name.\n\t* ipa.c (function_and_variable_visibility): Set unique_name.\n\nFrom-SVN: r198710", "tree": {"sha": "4de5ffd28741a97813d02261d3fc8eed70c982ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de5ffd28741a97813d02261d3fc8eed70c982ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/702d87032825f284efe6a5287c478692e103318c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702d87032825f284efe6a5287c478692e103318c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702d87032825f284efe6a5287c478692e103318c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702d87032825f284efe6a5287c478692e103318c/comments", "author": null, "committer": null, "parents": [{"sha": "8b28cf47bf7f071c979cb13694e45757081ee9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b28cf47bf7f071c979cb13694e45757081ee9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b28cf47bf7f071c979cb13694e45757081ee9d7"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "1256a2e918a7d8395b30910e4abafabb49ad26de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -1,3 +1,14 @@\n+2013-05-08  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/54095\n+\t* cgraph.c (cgraph_make_node_local_1): Se unique_name.\n+\t* cgraph.h (symtab_node_base): Add unique_name.\n+\t* lto-cgraph.c (lto_output_node, lto_output_varpool_node,\n+\tinput_overwrite_node, input_varpool_node): Stream unique_name.\n+\t* cgraphclones.c (cgraph_create_virtual_clone,\n+\tcgraph_function_versioning): Set unique_name.\n+\t* ipa.c (function_and_variable_visibility): Set unique_name.\n+\n 2013-05-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (find_phi_def): Revert former\t\"fix.\""}, {"sha": "a6a16e6cd5181d7c6567e0fb8b20a0e91dfe899b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -1798,6 +1798,8 @@ cgraph_make_node_local_1 (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n \n       node->symbol.externally_visible = false;\n       node->local.local = true;\n+      node->symbol.unique_name = (node->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t\t  || node->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP);\n       node->symbol.resolution = LDPR_PREVAILING_DEF_IRONLY;\n       gcc_assert (cgraph_function_body_availability (node) == AVAIL_LOCAL);\n     }"}, {"sha": "9103a2547c4bd8a0ac537844c3c93e271673eed3", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -62,6 +62,8 @@ struct GTY(()) symtab_node_base\n   /* Needed variables might become dead by optimization.  This flag\n      forces the variable to be output even if it appears dead otherwise.  */\n   unsigned force_output : 1;\n+  /* True when the name is known to be unique and thus it does not need mangling.  */\n+  unsigned unique_name : 1;\n \n   /* Ordering of all symtab entries.  */\n   int order;"}, {"sha": "a002c689db952d67592dbe08b93d5e2b3412e65e", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -324,6 +324,14 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n   DECL_STATIC_DESTRUCTOR (new_node->symbol.decl) = 0;\n   new_node->clone.tree_map = tree_map;\n   new_node->clone.args_to_skip = args_to_skip;\n+\n+  /* Clones of global symbols or symbols with unique names are unique.  */\n+  if ((TREE_PUBLIC (old_decl)\n+       && !DECL_EXTERNAL (old_decl)\n+       && !DECL_WEAK (old_decl)\n+       && !DECL_COMDAT (old_decl))\n+      || in_lto_p)\n+    new_node->symbol.unique_name = true;\n   FOR_EACH_VEC_SAFE_ELT (tree_map, i, map)\n     {\n       tree var = map->new_tree;\n@@ -739,6 +747,13 @@ cgraph_function_versioning (struct cgraph_node *old_version_node,\n   new_version_node->symbol.externally_visible = 0;\n   new_version_node->local.local = 1;\n   new_version_node->lowered = true;\n+  /* Clones of global symbols or symbols with unique names are unique.  */\n+  if ((TREE_PUBLIC (old_decl)\n+       && !DECL_EXTERNAL (old_decl)\n+       && !DECL_WEAK (old_decl)\n+       && !DECL_COMDAT (old_decl))\n+      || in_lto_p)\n+    new_version_node->symbol.unique_name = true;\n \n   /* Update the call_expr on the edges to call the new version node. */\n   update_call_expr (new_version_node);"}, {"sha": "5613c26f7fae3f5f88a5d069ef8234b51ecfb192", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -786,6 +786,9 @@ function_and_variable_visibility (bool whole_program)\n \t{\n \t  gcc_assert (whole_program || in_lto_p\n \t\t      || !TREE_PUBLIC (node->symbol.decl));\n+\t  node->symbol.unique_name = ((node->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t\t      || node->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\t\t\t      && TREE_PUBLIC (node->symbol.decl));\n \t  symtab_make_decl_local (node->symbol.decl);\n \t  node->symbol.resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t  if (node->symbol.same_comdat_group)\n@@ -861,6 +864,9 @@ function_and_variable_visibility (bool whole_program)\n \t{\n \t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->symbol.decl));\n \t  symtab_make_decl_local (vnode->symbol.decl);\n+\t  vnode->symbol.unique_name = ((vnode->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t\t       || vnode->symbol.resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\t\t\t       && TREE_PUBLIC (vnode->symbol.decl));\n \t  if (vnode->symbol.same_comdat_group)\n \t    symtab_dissolve_same_comdat_group_list ((symtab_node) vnode);\n \t  vnode->symbol.resolution = LDPR_PREVAILING_DEF_IRONLY;"}, {"sha": "8d1d56983859ffd3838256779cecca5abc9d8e44", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702d87032825f284efe6a5287c478692e103318c/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702d87032825f284efe6a5287c478692e103318c/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=702d87032825f284efe6a5287c478692e103318c", "patch": "@@ -468,6 +468,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (&bp, node->local.can_change_signature, 1);\n   bp_pack_value (&bp, node->local.redefined_extern_inline, 1);\n   bp_pack_value (&bp, node->symbol.force_output, 1);\n+  bp_pack_value (&bp, node->symbol.unique_name, 1);\n   bp_pack_value (&bp, node->symbol.address_taken, 1);\n   bp_pack_value (&bp, node->abstract_and_needed, 1);\n   bp_pack_value (&bp, tag == LTO_symtab_analyzed_node\n@@ -533,6 +534,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, struct varpool_node\n   bp = bitpack_create (ob->main_stream);\n   bp_pack_value (&bp, node->symbol.externally_visible, 1);\n   bp_pack_value (&bp, node->symbol.force_output, 1);\n+  bp_pack_value (&bp, node->symbol.unique_name, 1);\n   bp_pack_value (&bp, node->finalized, 1);\n   bp_pack_value (&bp, node->alias, 1);\n   bp_pack_value (&bp, node->alias_of != NULL, 1);\n@@ -886,6 +888,7 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->local.can_change_signature = bp_unpack_value (bp, 1);\n   node->local.redefined_extern_inline = bp_unpack_value (bp, 1);\n   node->symbol.force_output = bp_unpack_value (bp, 1);\n+  node->symbol.unique_name = bp_unpack_value (bp, 1);\n   node->symbol.address_taken = bp_unpack_value (bp, 1);\n   node->abstract_and_needed = bp_unpack_value (bp, 1);\n   node->symbol.used_from_other_partition = bp_unpack_value (bp, 1);\n@@ -1040,6 +1043,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   bp = streamer_read_bitpack (ib);\n   node->symbol.externally_visible = bp_unpack_value (&bp, 1);\n   node->symbol.force_output = bp_unpack_value (&bp, 1);\n+  node->symbol.unique_name = bp_unpack_value (&bp, 1);\n   node->finalized = bp_unpack_value (&bp, 1);\n   node->alias = bp_unpack_value (&bp, 1);\n   non_null_aliasof = bp_unpack_value (&bp, 1);"}]}