{"sha": "f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlN2EzODllOTc5NGIyZDcwYzY5OGRiN2U0M2JjNGY5ZmZmYjVhNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-05-01T19:12:46Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-01T19:12:46Z"}, "message": "decl.c (reshape_init): Do not apply TYPE_DOMAIN to a VECTOR_TYPE.\n\n\t* decl.c (reshape_init): Do not apply TYPE_DOMAIN to a VECTOR_TYPE.\n\tInstead, dig into the representation type to find the array bound.\n\nFrom-SVN: r81393", "tree": {"sha": "26decb362522a6068bf3ffbaeb72fd137c329749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26decb362522a6068bf3ffbaeb72fd137c329749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7/comments", "author": null, "committer": null, "parents": [{"sha": "ea2637ebbad17a4db3173d4136dbfb2271ad77f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2637ebbad17a4db3173d4136dbfb2271ad77f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2637ebbad17a4db3173d4136dbfb2271ad77f7"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "bc900beae1def7613560761c8c8f3067f8e5100b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "patch": "@@ -1,3 +1,8 @@\n+2004-05-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c (reshape_init): Do not apply TYPE_DOMAIN to a VECTOR_TYPE.\n+\tInstead, dig into the representation type to find the array bound.\n+\n 2004-04-30  Jason Merrill  <jason@redhat.com>\n \n \tRefer to base members using COMPONENT_REFs where possible.\n@@ -23,7 +28,7 @@\n \n \t* init.c (build_aggr_init): Fix accidental use of C99 construct in\n \tprevious change.\n-\t\n+\n \t* class.c (initialize_array): Don't set TREE_HAS_CONSTRUCTOR on\n \tbraced initializer.\n \t* cp-tree.h (BRACE_ENCLOSED_INITIALIZER_P): New macro.\n@@ -42,7 +47,7 @@\n \t(class_initializer): Likewise.\n \t(get_pseudo_ti_init): Likewise.\n \t* typeck2.c (digest_init): Use BRACE_ENCLOSED_INITIALIZER_P.\n-\t\n+\n 2004-04-22  Alan Modra  <amodra@bigpond.net.au>\n \n \t* name-lookup.c (anonymous_namespace_name): Make static."}, {"sha": "1b788310ca3d00171824c921ede130847efa71dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f8e7a389e9794b2d70c698db7e43bc4f9fffb5a7", "patch": "@@ -4289,8 +4289,22 @@ reshape_init (tree type, tree *initp)\n \n \t  /* If the bound of the array is known, take no more initializers\n \t     than are allowed.  */\n-\t  max_index = ((TYPE_DOMAIN (type) && (TREE_CODE (type) == ARRAY_TYPE))\n-\t\t       ? array_type_nelts (type) : NULL_TREE);\n+\t  max_index = NULL_TREE;\n+\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    {\n+\t      if (TYPE_DOMAIN (type))\n+\t\tmax_index = array_type_nelts (type);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* For a vector, the representation type is a struct\n+\t\t containing a single member which is an array of the\n+\t\t appropriate size.  */\n+\t      tree rtype = TYPE_DEBUG_REPRESENTATION_TYPE (type);\n+\t      if (rtype && TYPE_DOMAIN (TREE_TYPE (TYPE_FIELDS (rtype))))\n+\t\tmax_index = array_type_nelts (TREE_TYPE (TYPE_FIELDS (rtype)));\n+\t    }\n+\n \t  /* Loop through the array elements, gathering initializers.  */\n \t  for (index = size_zero_node;\n \t       *initp && (!max_index || !tree_int_cst_lt (max_index, index));"}]}