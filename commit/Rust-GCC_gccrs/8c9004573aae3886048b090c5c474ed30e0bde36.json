{"sha": "8c9004573aae3886048b090c5c474ed30e0bde36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5MDA0NTczYWFlMzg4NjA0OGIwOTBjNWM0NzRlZDMwZTBiZGUzNg==", "commit": {"author": {"name": "Gabor Loki", "email": "loki@gcc.gnu.org", "date": "2005-05-10T13:47:05Z"}, "committer": {"name": "Gabor Loki", "email": "loki@gcc.gnu.org", "date": "2005-05-10T13:47:05Z"}, "message": "re PR c++/17913 (ICE jumping into statement expression)\n\n2005-05-10  Gabor Loki <loki@gcc.gnu.org>\n\n\tPR c/17913\n\t* c-typeck.c (build_conditional_expr): Remove reducing cond_expr.\n\t* fold-const.c (fold): Expand the condition of reducing cond_expr.\n\t(contains_label_1, contains_label_p): New functions for checking\n\tlabels in a sub-tree.\n\ntestsuite:\n2005-05-10  Gabor Loki <loki@gcc.gnu.org>\n\n\tPR c/17913\n\t* gcc.c-torture/compile/pr17913.c: Computed jump test for PR17913\n\nFrom-SVN: r99514", "tree": {"sha": "6381aa5b39ee6d67c9cf69d7ebad4dae77e66a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6381aa5b39ee6d67c9cf69d7ebad4dae77e66a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9004573aae3886048b090c5c474ed30e0bde36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9004573aae3886048b090c5c474ed30e0bde36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9004573aae3886048b090c5c474ed30e0bde36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9004573aae3886048b090c5c474ed30e0bde36/comments", "author": null, "committer": null, "parents": [{"sha": "27e928edee9751a937bbd0bd175f233cd4581b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e928edee9751a937bbd0bd175f233cd4581b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e928edee9751a937bbd0bd175f233cd4581b63"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "ab0ce03d03fc419faa4aa3a767bf3ca33c82fa4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c9004573aae3886048b090c5c474ed30e0bde36", "patch": "@@ -1,3 +1,11 @@\n+2005-05-10  Gabor Loki <loki@gcc.gnu.org>\n+\n+\tPR c/17913\n+\t* c-typeck.c (build_conditional_expr): Remove reducing cond_expr.\n+\t* fold-const.c (fold): Expand the condition of reducing cond_expr.\n+\t(contains_label_1, contains_label_p): New functions for checking\n+\tlabels in a sub-tree.\n+\n 2005-05-10  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/21342"}, {"sha": "806a20ade96a65726dc3e79e3f0cbf4acc4d79f6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8c9004573aae3886048b090c5c474ed30e0bde36", "patch": "@@ -3105,10 +3105,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n   if (result_type != TREE_TYPE (op2))\n     op2 = convert_and_check (result_type, op2);\n \n-  if (TREE_CODE (ifexp) == INTEGER_CST)\n-    return non_lvalue (integer_zerop (ifexp) ? op2 : op1);\n-\n-  return fold (build3 (COND_EXPR, result_type, ifexp, op1, op2));\n+  return fold_build3 (COND_EXPR, result_type, ifexp, op1, op2);\n }\n \f\n /* Return a compound expression that performs two expressions and"}, {"sha": "0f3c8dd29e7287b96e6f05ba225a1ec7fb4e34d6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8c9004573aae3886048b090c5c474ed30e0bde36", "patch": "@@ -9905,6 +9905,37 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n     } /* switch (code) */\n }\n \n+/* Callback for walk_tree, looking for LABEL_EXPR.\n+   Returns tree TP if it is LABEL_EXPR. Otherwise it returns NULL_TREE.\n+   Do not check the sub-tree of GOTO_EXPR.  */\n+\n+static tree\n+contains_label_1 (tree *tp,\n+                  int *walk_subtrees,\n+                  void *data ATTRIBUTE_UNUSED)\n+{\n+  switch (TREE_CODE (*tp))\n+    {\n+    case LABEL_EXPR:\n+      return *tp;\n+    case GOTO_EXPR:\n+      *walk_subtrees = 0;\n+    /* no break */\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n+/* Checks wheter the sub-tree ST contains a label LABEL_EXPR which is\n+   accessible from outside the sub-tree. Returns NULL_TREE if no\n+   addressable label is found.  */\n+\n+static bool\n+contains_label_p (tree st)\n+{\n+  return (walk_tree (&st, contains_label_1 , NULL, NULL) != NULL_TREE);\n+}\n+\n /* Fold a ternary expression of code CODE and type TYPE with operands\n    OP0, OP1, and OP2.  Return the folded expression if folding is\n    successful.  Otherwise, return NULL_TREE.  */\n@@ -9958,12 +9989,16 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t so all simple results must be passed through pedantic_non_lvalue.  */\n       if (TREE_CODE (arg0) == INTEGER_CST)\n \t{\n+\t  tree unused_op = integer_zerop (arg0) ? op1 : op2;\n \t  tem = integer_zerop (arg0) ? op2 : op1;\n \t  /* Only optimize constant conditions when the selected branch\n \t     has the same type as the COND_EXPR.  This avoids optimizing\n-\t     away \"c ? x : throw\", where the throw has a void type.  */\n-\t  if (! VOID_TYPE_P (TREE_TYPE (tem))\n-\t      || VOID_TYPE_P (type))\n+             away \"c ? x : throw\", where the throw has a void type.\n+             Avoid throwing away that operand which contains label.  */\n+          if ((!TREE_SIDE_EFFECTS (unused_op)\n+               || !contains_label_p (unused_op))\n+              && (! VOID_TYPE_P (TREE_TYPE (tem))\n+                  || VOID_TYPE_P (type)))\n \t    return pedantic_non_lvalue (tem);\n \t  return NULL_TREE;\n \t}"}, {"sha": "6b8ce931eb322cbf09e87e4b2932e5e428b53adf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c9004573aae3886048b090c5c474ed30e0bde36", "patch": "@@ -1,3 +1,8 @@\n+2005-05-10  Gabor Loki <loki@gcc.gnu.org>\n+\n+\tPR c/17913\n+\t* gcc.c-torture/compile/pr17913.c: Computed jump test for PR17913\n+\n 2005-05-10  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/21342"}, {"sha": "30654a395d6f5939d3ae78cca36ef76bacf9014f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr17913.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17913.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9004573aae3886048b090c5c474ed30e0bde36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17913.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17913.c?ref=8c9004573aae3886048b090c5c474ed30e0bde36", "patch": "@@ -0,0 +1,7 @@\n+/* Test for computed jump into cond_expr: bug 17913.  */\n+void f (void) \n+{ \n+  void *p = &&a;\n+  1 ? 1 : ({ a : 1; }); \n+  goto *p;\n+}"}]}