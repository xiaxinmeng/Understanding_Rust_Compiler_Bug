{"sha": "1145e690d2eab146e53ee6577bf4c356637501d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0NWU2OTBkMmVhYjE0NmU1M2VlNjU3N2JmNGMzNTY2Mzc1MDFkMA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-07T21:10:45Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-07T21:10:45Z"}, "message": "interface.c (compare_actual_formal): Use XALLOCAVEC instead of alloca.\n\n\t* interface.c (compare_actual_formal): Use XALLOCAVEC instead of\n\talloca.\n\t(check_some_aliasing): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_conversion): Likewise.\n\t(gfc_conv_intrinsic_int): Likewise.\n\t(gfc_conv_intrinsic_lib_function): Likewise.\n\t(gfc_conv_intrinsic_cmplx): Likewise.\n\t(gfc_conv_intrinsic_ctime): Likewise.\n\t(gfc_conv_intrinsic_fdate): Likewise.\n\t(gfc_conv_intrinsic_ttynam): Likewise.\n\t(gfc_conv_intrinsic_minmax): Likewise.\n\t(gfc_conv_intrinsic_minmax_char): Likewise.\n\t(gfc_conv_intrinsic_ishftc): Likewise.\n\t(gfc_conv_intrinsic_index_scan_verify): Likewise.\n\t(gfc_conv_intrinsic_merge): Likewise.\n\t(gfc_conv_intrinsic_trim): Likewise.\n\t* trans.c (gfc_trans_runtime_error_vararg): Likewise.\n\nFrom-SVN: r162984", "tree": {"sha": "fb35beb12bb06990d5d3762019637b88d29eb9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb35beb12bb06990d5d3762019637b88d29eb9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1145e690d2eab146e53ee6577bf4c356637501d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145e690d2eab146e53ee6577bf4c356637501d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1145e690d2eab146e53ee6577bf4c356637501d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145e690d2eab146e53ee6577bf4c356637501d0/comments", "author": null, "committer": null, "parents": [{"sha": "f6ddf131f0afe5a45af7ae248dcb3f1d38da5aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ddf131f0afe5a45af7ae248dcb3f1d38da5aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ddf131f0afe5a45af7ae248dcb3f1d38da5aaf"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "c9a6de07ac677d1c444686b228ef6a360a0e42f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1145e690d2eab146e53ee6577bf4c356637501d0", "patch": "@@ -1,3 +1,23 @@\n+2010-08-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* interface.c (compare_actual_formal): Use XALLOCAVEC instead of\n+\talloca.\n+\t(check_some_aliasing): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_conversion): Likewise.\n+\t(gfc_conv_intrinsic_int): Likewise.\n+\t(gfc_conv_intrinsic_lib_function): Likewise.\n+\t(gfc_conv_intrinsic_cmplx): Likewise.\n+\t(gfc_conv_intrinsic_ctime): Likewise.\n+\t(gfc_conv_intrinsic_fdate): Likewise.\n+\t(gfc_conv_intrinsic_ttynam): Likewise.\n+\t(gfc_conv_intrinsic_minmax): Likewise.\n+\t(gfc_conv_intrinsic_minmax_char): Likewise.\n+\t(gfc_conv_intrinsic_ishftc): Likewise.\n+\t(gfc_conv_intrinsic_index_scan_verify): Likewise.\n+\t(gfc_conv_intrinsic_merge): Likewise.\n+\t(gfc_conv_intrinsic_trim): Likewise.\n+\t* trans.c (gfc_trans_runtime_error_vararg): Likewise.\n+\n 2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45159"}, {"sha": "1e72a90a7c4b6508f733c8caa58a503153a9c4b0", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=1145e690d2eab146e53ee6577bf4c356637501d0", "patch": "@@ -1931,7 +1931,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   for (f = formal; f; f = f->next)\n     n++;\n \n-  new_arg = (gfc_actual_arglist **) alloca (n * sizeof (gfc_actual_arglist *));\n+  new_arg = XALLOCAVEC (gfc_actual_arglist *, n);\n \n   for (i = 0; i < n; i++)\n     new_arg[i] = NULL;\n@@ -2439,7 +2439,7 @@ check_some_aliasing (gfc_formal_arglist *f, gfc_actual_arglist *a)\n     }\n   if (n == 0)\n     return t;\n-  p = (argpair *) alloca (n * sizeof (argpair));\n+  p = XALLOCAVEC (argpair, n);\n \n   for (i = 0, f1 = f, a1 = a; i < n; i++, f1 = f1->next, a1 = a1->next)\n     {"}, {"sha": "589e9df7a1d6a1fb1c22f7f3a1d6defc40cf9e5a", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=1145e690d2eab146e53ee6577bf4c356637501d0", "patch": "@@ -259,7 +259,7 @@ gfc_conv_intrinsic_conversion (gfc_se * se, gfc_expr * expr)\n   int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * nargs);\n+  args = XALLOCAVEC (tree, nargs);\n \n   /* Evaluate all the arguments passed. Whilst we're only interested in the \n      first one here, there are other parts of the front-end that assume this \n@@ -502,7 +502,7 @@ gfc_conv_intrinsic_int (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n   int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * nargs);\n+  args = XALLOCAVEC (tree, nargs);\n \n   /* Evaluate the argument, we process all arguments even though we only \n      use the first one for code generation purposes.  */\n@@ -732,7 +732,7 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n \n   /* Get the decl and generate the call.  */\n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n   fndecl = gfc_get_intrinsic_lib_fndecl (m, expr);\n@@ -1003,7 +1003,7 @@ gfc_conv_intrinsic_cmplx (gfc_se * se, gfc_expr * expr, int both)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n@@ -1288,7 +1288,7 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_get_int_type (8), \"len\");\n@@ -1327,7 +1327,7 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_charlen_type_node, \"len\");\n@@ -1368,7 +1368,7 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_charlen_type_node, \"len\");\n@@ -1423,7 +1423,7 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   unsigned int i, nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * nargs);\n+  args = XALLOCAVEC (tree, nargs);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, nargs);\n   type = gfc_typenode_for_spec (&expr->ts);\n@@ -1498,7 +1498,7 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n   unsigned int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * (nargs + 4));\n+  args = XALLOCAVEC (tree, nargs + 4);\n   gfc_conv_intrinsic_function_args (se, expr, &args[4], nargs);\n \n   /* Create the result variables.  */\n@@ -3070,7 +3070,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n \n@@ -3429,7 +3429,7 @@ gfc_conv_intrinsic_index_scan_verify (gfc_se * se, gfc_expr * expr,\n   tree *args;\n   unsigned int num_args;\n \n-  args = (tree *) alloca (sizeof (tree) * 5);\n+  args = XALLOCAVEC (tree, 5);\n \n   /* Get number of arguments; characters count double due to the\n      string length argument. Kind= is not passed to the library\n@@ -3517,7 +3517,7 @@ gfc_conv_intrinsic_merge (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n   if (expr->ts.type != BT_CHARACTER)\n@@ -4677,7 +4677,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = (tree *) alloca (sizeof (tree) * num_args);\n+  args = XALLOCAVEC (tree, num_args);\n \n   var = gfc_create_var (gfc_get_pchar_type (expr->ts.kind), \"pstr\");\n   addr = gfc_build_addr_expr (ppvoid_type_node, var);"}, {"sha": "6fa62fb41c078b504e4b2671ca907c6f4bad64c5", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145e690d2eab146e53ee6577bf4c356637501d0/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=1145e690d2eab146e53ee6577bf4c356637501d0", "patch": "@@ -405,7 +405,7 @@ gfc_trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n   gfc_free(message);\n \n   /* Build the argument array.  */\n-  argarray = (tree *) alloca (sizeof (tree) * (nargs + 2));\n+  argarray = XALLOCAVEC (tree, nargs + 2);\n   argarray[0] = arg;\n   argarray[1] = arg2;\n   for (i = 0; i < nargs; i++)"}]}