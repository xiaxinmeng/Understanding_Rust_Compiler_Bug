{"sha": "46dbeb4085e4a5492579d06641d0aae25b80b465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkYmViNDA4NWU0YTU0OTI1NzlkMDY2NDFkMGFhZTI1YjgwYjQ2NQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-03-26T09:45:49Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-03-26T09:45:49Z"}, "message": "Fix switch conversion in offloading functions\n\n2018-03-26  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/85063\n\t* omp-general.c (offloading_function_p): New function.  Factor out\n\tof ...\n\t* omp-offload.c (pass_omp_target_link::gate): ... here.\n\t* omp-general.h (offloading_function_p): Declare.\n\t* tree-switch-conversion.c (build_one_array): Mark CSWTCH.x variable\n\twith attribute omp declare target for offloading functions.\n\n\t* testsuite/libgomp.c/switch-conversion-2.c: New test.\n\t* testsuite/libgomp.c/switch-conversion.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/switch-conversion-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/switch-conversion.c: New test.\n\nFrom-SVN: r258852", "tree": {"sha": "2e2968f8a5a77268b1d31ec7e2c78a3ac5a6014f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2968f8a5a77268b1d31ec7e2c78a3ac5a6014f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46dbeb4085e4a5492579d06641d0aae25b80b465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46dbeb4085e4a5492579d06641d0aae25b80b465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46dbeb4085e4a5492579d06641d0aae25b80b465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46dbeb4085e4a5492579d06641d0aae25b80b465/comments", "author": null, "committer": null, "parents": [{"sha": "c2f3aac4541abf92c5a3554f77c58dcb5e68413d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f3aac4541abf92c5a3554f77c58dcb5e68413d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f3aac4541abf92c5a3554f77c58dcb5e68413d"}], "stats": {"total": 171, "additions": 168, "deletions": 3}, "files": [{"sha": "a8d9e76b8f54cc9f03570063357771709971a977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -1,3 +1,13 @@\n+2018-03-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/85063\n+\t* omp-general.c (offloading_function_p): New function.  Factor out\n+\tof ...\n+\t* omp-offload.c (pass_omp_target_link::gate): ... here.\n+\t* omp-general.h (offloading_function_p): Declare.\n+\t* tree-switch-conversion.c (build_one_array): Mark CSWTCH.x variable\n+\twith attribute omp declare target for offloading functions.\n+\n 2018-03-24  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/84005"}, {"sha": "cabbbbc6de2cd74a17d8e37cafb2470218d399bc", "filename": "gcc/omp-general.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -612,6 +612,16 @@ oacc_get_fn_attrib (tree fn)\n   return lookup_attribute (OACC_FN_ATTRIB, DECL_ATTRIBUTES (fn));\n }\n \n+/* Return true if FN is an OpenMP or OpenACC offloading function.  */\n+\n+bool\n+offloading_function_p (tree fn)\n+{\n+  tree attrs = DECL_ATTRIBUTES (fn);\n+  return (lookup_attribute (\"omp declare target\", attrs)\n+\t  || lookup_attribute (\"omp target entrypoint\", attrs));\n+}\n+\n /* Extract an oacc execution dimension from FN.  FN must be an\n    offloaded function or routine that has already had its execution\n    dimensions lowered to the target-specific values.  */"}, {"sha": "66f0a33c2e2fb75e8e5dab1753101c9ba7747275", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -85,6 +85,7 @@ extern void oacc_replace_fn_attrib (tree fn, tree dims);\n extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);\n extern tree oacc_build_routine_dims (tree clauses);\n extern tree oacc_get_fn_attrib (tree fn);\n+extern bool offloading_function_p (tree fn);\n extern int oacc_get_fn_dim_size (tree fn, int axis);\n extern int oacc_get_ifn_dim_arg (const gimple *stmt);\n "}, {"sha": "0abf0283c9e2db828dd98473e495eb93837cefbf", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -1967,9 +1967,7 @@ class pass_omp_target_link : public gimple_opt_pass\n   virtual bool gate (function *fun)\n     {\n #ifdef ACCEL_COMPILER\n-      tree attrs = DECL_ATTRIBUTES (fun->decl);\n-      return lookup_attribute (\"omp declare target\", attrs)\n-\t     || lookup_attribute (\"omp target entrypoint\", attrs);\n+      return offloading_function_p (fun->decl);\n #else\n       (void) fun;\n       return false;"}, {"sha": "b0470ef1b5e6a46afd89b57fad4547ea8e103b48", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -49,6 +49,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"alloc-pool.h\"\n #include \"target.h\"\n #include \"tree-into-ssa.h\"\n+#include \"omp-general.h\"\n \n /* ??? For lang_hooks.types.type_for_mode, but is there a word_mode\n    type in the GIMPLE type system that is language-independent?  */\n@@ -1162,6 +1163,10 @@ build_one_array (gswitch *swtch, int num, tree arr_index_type,\n       TREE_CONSTANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;\n+      if (offloading_function_p (cfun->decl))\n+\tDECL_ATTRIBUTES (decl)\n+\t  = tree_cons (get_identifier (\"omp declare target\"), NULL_TREE,\n+\t\t       NULL_TREE);\n       varpool_node::finalize_decl (decl);\n \n       fetch = build4 (ARRAY_REF, value_type, decl, tidx, NULL_TREE,"}, {"sha": "a5a5e0631b223aff1f55dd33fc5fed2cf649c844", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -1,3 +1,11 @@\n+2018-03-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/85063\n+\t* testsuite/libgomp.c/switch-conversion-2.c: New test.\n+\t* testsuite/libgomp.c/switch-conversion.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/switch-conversion-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/switch-conversion.c: New test.\n+\n 2018-03-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/84381"}, {"sha": "97601dc9cbb0c8ae805d8be876d503ca01955af5", "filename": "libgomp/testsuite/libgomp.c/switch-conversion-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion-2.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/85063 */\n+/* { dg-additional-options \"-ftree-switch-conversion\" } */\n+\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+  int n[1];\n+\n+  n[0] = 3;\n+\n+#pragma omp target\n+  {\n+    int m = n[0];\n+    switch (m & 3)\n+    {\n+    case 0: m = 4; break;\n+    case 1: m = 3; break;\n+    case 2: m = 2; break;\n+    default:\n+      m = 1; break;\n+    }\n+    n[0] = m;\n+  }\n+\n+  if (n[0] != 1)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "835f54e17acb4befe8d0e37cc9235a5e7987b711", "filename": "libgomp/testsuite/libgomp.c/switch-conversion.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fswitch-conversion.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/85063 */\n+/* { dg-additional-options \"-ftree-switch-conversion\" } */\n+\n+#include <stdlib.h>\n+\n+#pragma omp declare target\n+static int __attribute__((noinline)) foo (int n)\n+{\n+  switch (n & 3)\n+    {\n+    case 0: return 4;\n+    case 1: return 3;\n+    case 2: return 2;\n+    default:\n+      return 1;\n+    }\n+}\n+#pragma omp end declare target\n+\n+int\n+main (void)\n+{\n+  int n[1];\n+\n+  n[0] = 4;\n+\n+#pragma omp target\n+  {\n+    n[0] = foo (n[0]);\n+  }\n+\n+  if (n[0] != 4)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "8c018b80a844b3db067b3c1d1a2a3192fcb7a711", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/switch-conversion-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion-2.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/85063 */\n+/* { dg-additional-options \"-ftree-switch-conversion\" } */\n+\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+  int n[1];\n+\n+  n[0] = 3;\n+\n+#pragma acc parallel copy(n)\n+  {\n+    int m = n[0];\n+    switch (m & 3)\n+    {\n+    case 0: m = 4; break;\n+    case 1: m = 3; break;\n+    case 2: m = 2; break;\n+    default:\n+      m = 1; break;\n+    }\n+    n[0] = m;\n+  }\n+\n+  if (n[0] != 1)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0540678d76b04d9101128e0f9b36da9186af684f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/switch-conversion.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46dbeb4085e4a5492579d06641d0aae25b80b465/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fswitch-conversion.c?ref=46dbeb4085e4a5492579d06641d0aae25b80b465", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/85063 */\n+/* { dg-additional-options \"-ftree-switch-conversion\" } */\n+\n+#include <stdlib.h>\n+\n+#pragma acc routine seq\n+static int __attribute__((noinline)) foo (int n)\n+{\n+  switch (n & 3)\n+    {\n+    case 0: return 4;\n+    case 1: return 3;\n+    case 2: return 2;\n+    default:\n+      return 1;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  int n[1];\n+\n+  n[0] = 4;\n+\n+#pragma acc parallel copy(n)\n+  {\n+    n[0] = foo (n[0]);\n+  }\n+\n+  if (n[0] != 4)\n+    abort ();\n+\n+  return 0;\n+}"}]}