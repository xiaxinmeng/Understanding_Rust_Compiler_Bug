{"sha": "2614034eead349c8ae65e7f106bdce4212e9b71a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxNDAzNGVlYWQzNDljOGFlNjVlN2YxMDZiZGNlNDIxMmU5YjcxYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-12-23T13:02:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-12-23T13:02:33Z"}, "message": "re PR middle-end/17746 (ICE when building the Ada RTS)\n\n\tPR middle-end/17746\n\t* expr.c (get_inner_reference): Add 'keep_aligning' parameter.\n\tBreak on aligning VIEW_CONVERT_EXPR nodes on STRICT_ALIGNMENT\n\tplatforms only if keep_aligning is true.\n\t(expand_assignment): Adjust call to get_inner_reference.\n\t(expand_expr_addr_expr_1): Likewise.\n\t(expand_expr_real_1): Likewise.\n\t* dojump.c (do_jump): Likewise.\n\t* dwarf2out.c (loc_descriptor_from_tree_1): Likewise.\n\t* fold-const.c (optimize_bit_field_compare): Likewise.\n\t(decode_field_reference): Likewise.\n\t(split_address_to_core_and_offset): Likewise.\n\t* tree-ssa-loop-ivopts.c (split_address_cost): Likewise.\n\t* expr.h (get_inner_reference): Adjust prototype.\n\nada/\n\t* trans.c (Attribute_to_gnu): Adjust call to get_inner_reference.\n\t* utils2.c (build_unary_op): Likewise.\n\nFrom-SVN: r92549", "tree": {"sha": "a98bb36f52d3d1b233ad2e1e33601de24da98c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98bb36f52d3d1b233ad2e1e33601de24da98c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2614034eead349c8ae65e7f106bdce4212e9b71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2614034eead349c8ae65e7f106bdce4212e9b71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2614034eead349c8ae65e7f106bdce4212e9b71a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2614034eead349c8ae65e7f106bdce4212e9b71a/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9690a821226394176b4cb187641692e8caf801a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690a821226394176b4cb187641692e8caf801a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9690a821226394176b4cb187641692e8caf801a5"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "78879a79d96fb9b14656047fc099165667c27263", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -1,3 +1,20 @@\n+2004-12-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/17746\n+\t* expr.c (get_inner_reference): Add 'keep_aligning' parameter.\n+\tBreak on aligning VIEW_CONVERT_EXPR nodes on STRICT_ALIGNMENT\n+\tplatforms only if keep_aligning is true.\n+\t(expand_assignment): Adjust call to get_inner_reference.\n+\t(expand_expr_addr_expr_1): Likewise.\n+\t(expand_expr_real_1): Likewise.\n+\t* dojump.c (do_jump): Likewise.\n+\t* dwarf2out.c (loc_descriptor_from_tree_1): Likewise.\n+\t* fold-const.c (optimize_bit_field_compare): Likewise.\n+\t(decode_field_reference): Likewise.\n+\t(split_address_to_core_and_offset): Likewise.\n+\t* tree-ssa-loop-ivopts.c (split_address_cost): Likewise.\n+\t* expr.h (get_inner_reference): Adjust prototype.\n+\n 2004-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (override_options): Revert last change"}, {"sha": "792ddcd72fffdaf9f24280ce1eb91fef5d50ee80", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -1,3 +1,8 @@\n+2004-12-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+ \n+\t* trans.c (Attribute_to_gnu): Adjust call to get_inner_reference.\n+\t* utils2.c (build_unary_op): Likewise.\n+\n 2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* trans.c (mark_visited): Set TYPE_SIZES_GIMPLIFIED."}, {"sha": "a93ff5d2374c0c4360153b1ea02591e3efdbe4e4", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -932,7 +932,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t\t  && TREE_CODE (gnu_prefix) == FIELD_DECL));\n \n \tget_inner_reference (gnu_prefix, &bitsize, &bitpos, &gnu_offset,\n-\t\t\t     &mode, &unsignedp, &volatilep);\n+\t\t\t     &mode, &unsignedp, &volatilep, false);\n \n \tif (TREE_CODE (gnu_prefix) == COMPONENT_REF)\n \t  {"}, {"sha": "04ab0cb4ad0fcac0ae18b6df359babef3955a8eb", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -1087,7 +1087,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t      int unsignedp, volatilep;\n \n \t      inner = get_inner_reference (operand, &bitsize, &bitpos, &offset,\n-\t\t\t\t\t   &mode, &unsignedp, &volatilep);\n+\t\t\t\t\t   &mode, &unsignedp, &volatilep, false);\n \n \t      /* If INNER is a padding type whose field has a self-referential\n \t\t size, convert to that inner type.  We know the offset is zero"}, {"sha": "0dc826bbefc1701a1a24d03630d9623089187115", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -315,7 +315,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n         /* Get description of this reference.  We don't actually care\n            about the underlying object here.  */\n         get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode,\n-                             &unsignedp, &volatilep);\n+                             &unsignedp, &volatilep, false);\n \n         type = lang_hooks.types.type_for_size (bitsize, unsignedp);\n         if (! SLOW_BYTE_ACCESS"}, {"sha": "beed56b49810e73252c7f7f45cddeae5f01eab66", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -8965,7 +8965,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \tint volatilep;\n \n \tobj = get_inner_reference (loc, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &volatilep);\n+\t\t\t\t   &unsignedp, &volatilep, false);\n \n \tif (obj == loc)\n \t  return 0;"}, {"sha": "f602306d3e52bcfaae0cd66e33563533f95457df", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -3788,7 +3788,7 @@ expand_assignment (tree to, tree from)\n \n       push_temp_slots ();\n       tem = get_inner_reference (to, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &volatilep);\n+\t\t\t\t &unsignedp, &volatilep, true);\n \n       /* If we are going to use store_bit_field and extract_bit_field,\n \t make sure to_rtx will be safe for multiple use.  */\n@@ -5244,13 +5244,27 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \n    If the field describes a variable-sized object, *PMODE is set to\n    VOIDmode and *PBITSIZE is set to -1.  An access cannot be made in\n-   this case, but the address of the object can be found.  */\n+   this case, but the address of the object can be found.\n+\n+   If KEEP_ALIGNING is true and the target is STRICT_ALIGNMENT, we don't\n+   look through nodes that serve as markers of a greater alignment than\n+   the one that can be deduced from the expression.  These nodes make it\n+   possible for front-ends to prevent temporaries from being created by\n+   the middle-end on alignment considerations.  For that purpose, the\n+   normal operating mode at high-level is to always pass FALSE so that\n+   the ultimate containing object is really returned; moreover, the\n+   associated predicate handled_component_p will always return TRUE\n+   on these nodes, thus indicating that they are essentially handled\n+   by get_inner_reference.  TRUE should only be passed when the caller\n+   is scanning the expression in order to build another representation\n+   and specifically knows how to handle these nodes; as such, this is\n+   the normal operating mode in the RTL expanders.  */\n \n tree\n get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t\t     HOST_WIDE_INT *pbitpos, tree *poffset,\n \t\t     enum machine_mode *pmode, int *punsignedp,\n-\t\t     int *pvolatilep)\n+\t\t     int *pvolatilep, bool keep_aligning)\n {\n   tree size_tree = 0;\n   enum machine_mode mode = VOIDmode;\n@@ -5352,14 +5366,10 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t\t\t\t   bitsize_int (*pbitsize));\n \t  break;\n \n-\t/* We can go inside most conversions: all NON_VALUE_EXPRs, all normal\n-\t   conversions that don't change the mode, and all view conversions\n-\t   except those that need to \"step up\" the alignment.  */\n-\n \tcase VIEW_CONVERT_EXPR:\n-\t  if ((TYPE_ALIGN (TREE_TYPE (exp))\n+\t  if (keep_aligning && STRICT_ALIGNMENT\n+\t      && (TYPE_ALIGN (TREE_TYPE (exp))\n \t       > TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t      && STRICT_ALIGNMENT\n \t      && (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n \t\t  < BIGGEST_ALIGNMENT)\n \t      && (TYPE_ALIGN_OK (TREE_TYPE (exp))\n@@ -6082,8 +6092,13 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  return result;\n \t}\n \n+      /* Pass FALSE as the last argument to get_inner_reference although\n+\t we are expanding to RTL.  The rationale is that we know how to\n+\t handle \"aligning nodes\" here: we can just bypass them because\n+\t they won't change the final object whose address will be returned\n+\t (they actually exist only for that purpose).  */\n       inner = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t\t   &mode1, &unsignedp, &volatilep);\n+\t\t\t\t   &mode1, &unsignedp, &volatilep, false);\n       break;\n     }\n \n@@ -6908,7 +6923,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \ttree offset;\n \tint volatilep = 0;\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t\t\t&mode1, &unsignedp, &volatilep);\n+\t\t\t\t\t&mode1, &unsignedp, &volatilep, true);\n \trtx orig_op0;\n \n \t/* If we got back the original object, something is wrong.  Perhaps"}, {"sha": "8f8624cf59949b1559563169003dc86bb9bb18bd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -3102,7 +3102,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n      do anything if the inner expression is a PLACEHOLDER_EXPR since we\n      then will no longer be able to replace it.  */\n   linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n-\t\t\t\t&lunsignedp, &lvolatilep);\n+\t\t\t\t&lunsignedp, &lvolatilep, false);\n   if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n       || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR)\n     return 0;\n@@ -3112,7 +3112,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n      /* If this is not a constant, we can only do something if bit positions,\n \tsizes, and signedness are the same.  */\n      rinner = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset, &rmode,\n-\t\t\t\t   &runsignedp, &rvolatilep);\n+\t\t\t\t   &runsignedp, &rvolatilep, false);\n \n      if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n \t || lunsignedp != runsignedp || offset != 0\n@@ -3288,7 +3288,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n     }\n \n   inner = get_inner_reference (exp, pbitsize, pbitpos, &offset, pmode,\n-\t\t\t       punsignedp, pvolatilep);\n+\t\t\t       punsignedp, pvolatilep, false);\n   if ((inner == exp && and_mask == 0)\n       || *pbitsize < 0 || offset != 0\n       || TREE_CODE (inner) == PLACEHOLDER_EXPR)\n@@ -11018,7 +11018,8 @@ split_address_to_core_and_offset (tree exp,\n   if (TREE_CODE (exp) == ADDR_EXPR)\n     {\n       core = get_inner_reference (TREE_OPERAND (exp, 0), &bitsize, pbitpos,\n-\t\t\t\t  poffset, &mode, &unsignedp, &volatilep);\n+\t\t\t\t  poffset, &mode, &unsignedp, &volatilep,\n+\t\t\t\t  false);\n \n       if (TREE_CODE (core) == INDIRECT_REF)\n \tcore = TREE_OPERAND (core, 0);"}, {"sha": "d1a1bdd910aae164d663de614dcf3f184af462c0", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2614034eead349c8ae65e7f106bdce4212e9b71a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=2614034eead349c8ae65e7f106bdce4212e9b71a", "patch": "@@ -2829,7 +2829,7 @@ split_address_cost (struct ivopts_data *data,\n   int unsignedp, volatilep;\n   \n   core = get_inner_reference (addr, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t      &unsignedp, &volatilep);\n+\t\t\t      &unsignedp, &volatilep, false);\n \n   if (toffset != 0\n       || bitpos % BITS_PER_UNIT != 0"}]}