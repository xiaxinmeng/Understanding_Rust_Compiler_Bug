{"sha": "64bec774eda78d9b51cc1210eb9ce9c24c878016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiZWM3NzRlZGE3OGQ5YjUxY2MxMjEwZWI5Y2U5YzI0Yzg3ODAxNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-21T21:35:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-21T21:35:09Z"}, "message": "re PR c++/63942 (constexpr conflicts with previous declaration)\n\n\tPR c++/63942\n\t* name-lookup.c (supplement_binding_1): Override a mangling alias.\n\t* mangle.c (implicit_alias_p, remove_implicit_alias): New.\n\t(mangle_decl): Avoid creating conflicting alias with\n\t-fabi-compat-version=0, too.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r217950", "tree": {"sha": "afc767f7d032ad609b159c2bb96444301e867ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc767f7d032ad609b159c2bb96444301e867ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64bec774eda78d9b51cc1210eb9ce9c24c878016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64bec774eda78d9b51cc1210eb9ce9c24c878016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64bec774eda78d9b51cc1210eb9ce9c24c878016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64bec774eda78d9b51cc1210eb9ce9c24c878016/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6602e1095db5259590fa8813f48a1404ba00cf10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6602e1095db5259590fa8813f48a1404ba00cf10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6602e1095db5259590fa8813f48a1404ba00cf10"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "b1d9cea6ed727ea1b8b48b26b342ea6f47d790c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64bec774eda78d9b51cc1210eb9ce9c24c878016", "patch": "@@ -1,5 +1,11 @@\n 2014-11-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/63942\n+\t* name-lookup.c (supplement_binding_1): Override a mangling alias.\n+\t* mangle.c (maybe_remove_implicit_alias): New.\n+\t(mangle_decl): Always avoid creating conflicting alias.\n+\t* cp-tree.h: Adjust.\n+\n \tPR c++/63849\n \t* mangle.c (decl_mangling_context): Use template_type_parameter_p.\n "}, {"sha": "428d559a3d8339534c9ff784d5222cb9614101c3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=64bec774eda78d9b51cc1210eb9ce9c24c878016", "patch": "@@ -6299,6 +6299,7 @@ extern tree add_exception_specifier\t\t(tree, tree, int);\n extern tree merge_exception_specifiers\t\t(tree, tree);\n \n /* in mangle.c */\n+extern bool maybe_remove_implicit_alias\t\t(tree);\n extern void init_mangle\t\t\t\t(void);\n extern void mangle_decl\t\t\t\t(tree);\n extern const char *mangle_type_string\t\t(tree);"}, {"sha": "a24466994f0dd1d504a78ff4ad9758934f1a59aa", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=64bec774eda78d9b51cc1210eb9ce9c24c878016", "patch": "@@ -3428,6 +3428,28 @@ get_mangled_id (tree decl)\n   return targetm.mangle_decl_assembler_name (decl, id);\n }\n \n+/* If DECL is a mangling alias, remove it from the symbol table and return\n+   true; otherwise return false.  */\n+\n+bool\n+maybe_remove_implicit_alias (tree decl)\n+{\n+  if (DECL_P (decl) && DECL_ARTIFICIAL (decl)\n+      && DECL_IGNORED_P (decl)\n+      && (TREE_CODE (decl) == FUNCTION_DECL\n+\t  || (TREE_CODE (decl) == VAR_DECL\n+\t      && TREE_STATIC (decl))))\n+    {\n+      symtab_node *n = symtab_node::get (decl);\n+      if (n && n->cpp_implicit_alias)\n+\t{\n+\t  n->remove();\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Create an identifier for the external mangled name of DECL.  */\n \n void\n@@ -3491,8 +3513,9 @@ mangle_decl (const tree decl)\n \t}\n \n #ifdef ASM_OUTPUT_DEF\n-      if (flag_abi_compat_version != 0\n-\t  && IDENTIFIER_GLOBAL_VALUE (id2))\n+      /* If there's a declaration already using this mangled name,\n+\t don't create a compatibility alias that conflicts.  */\n+      if (IDENTIFIER_GLOBAL_VALUE (id2))\n \treturn;\n \n       tree alias = make_alias_for (decl, id2);"}, {"sha": "71b359eeca887ba83d360f5a937e74d0f6f4f03c", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=64bec774eda78d9b51cc1210eb9ce9c24c878016", "patch": "@@ -561,6 +561,12 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n       region to refer only to the namespace to which it already\n       refers.  */\n     ok = false;\n+  else if (maybe_remove_implicit_alias (bval))\n+    {\n+      /* There was a mangling compatibility alias using this mangled name,\n+\t but now we have a real decl that wants to use it instead.  */\n+      binding->value = decl;\n+    }\n   else\n     {\n       diagnose_name_conflict (decl, bval);"}, {"sha": "a1e6710fd846c5d5befc4e3511160e8f36031ffb", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr32.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bec774eda78d9b51cc1210eb9ce9c24c878016/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr32.C?ref=64bec774eda78d9b51cc1210eb9ce9c24c878016", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/63942\n+// A mangling alias for the first constructor was conflicting with the second.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fno-inline\" }\n+\n+int i;\n+template <class T> struct A\n+{\n+  A(const T&) { i = 42; }\n+  A(const A&) { i = 36; }\n+};\n+\n+typedef A<decltype(nullptr)> An;\n+\n+int main()\n+{\n+  An a (nullptr);\n+  if (i != 42) __builtin_abort();\n+  An a2 (a);\n+  if (i != 36) __builtin_abort();\n+}"}]}