{"sha": "b1de98e3d9e015c9260f44a8474001d822a0304d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkZTk4ZTNkOWUwMTVjOTI2MGY0NGE4NDc0MDAxZDgyMmEwMzA0ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-01-20T18:53:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-01-20T18:53:56Z"}, "message": "re PR target/69343 (Bootstrap failure on s390{,x}-linux)\n\nPR bootstrap/69343\nPR bootstrap/69339\nPR tree-opt/68964\n\nRevert:\ngcc/\n  * tree.c (tm_define_builtin): New.\n  (find_tm_vector_type): New.\n  (build_tm_vector_builtins): New.\n  (build_common_builtin_nodes): Call it.\nlibitm/\n  * Makefile.am (libitm_la_SOURCES) [ARCH_AARCH64]: Add vect128.cc\n  (libitm_la_SOURCES) [ARCH_ARM]: Add neon.cc\n  (libitm_la_SOURCES) [ARCH_PPC]: Add vect128.cc\n  (libitm_la_SOURCES) [ARCH_S390]: Add vect128.cc\n  * configure.ac (ARCH_AARCH64): New conditional.\n  (ARCH_PPC, ARCH_S390): Likewise.\n  * Makefile.in, configure: Rebuild.\n  * libitm.h (_ITM_TYPE_M128): Always define.\n  * vect64.cc: Split ...\n  * vect128.cc: ... out of...\n  * config/x86/x86_sse.cc: ... here.\n  * config/arm/neon.cc: New file.\n\nFrom-SVN: r232631", "tree": {"sha": "ee02bbe4cd51bf787e15f581e6326d4124f85230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee02bbe4cd51bf787e15f581e6326d4124f85230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1de98e3d9e015c9260f44a8474001d822a0304d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1de98e3d9e015c9260f44a8474001d822a0304d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1de98e3d9e015c9260f44a8474001d822a0304d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1de98e3d9e015c9260f44a8474001d822a0304d/comments", "author": null, "committer": null, "parents": [{"sha": "7e10bcfa3c30f11136b60b5f6d25acb17afdd57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f"}], "stats": {"total": 330, "additions": 61, "deletions": 269}, "files": [{"sha": "d976bd99b85b09469ec7abf825fd7a03503ee672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -1,3 +1,14 @@\n+2016-01-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR bootstrap/69343\n+\tPR bootstrap/69339\n+\tPR tree-opt/68964\n+\tRevert:\n+\t* tree.c (tm_define_builtin): New.\n+\t(find_tm_vector_type): New.\n+\t(build_tm_vector_builtins): New.\n+\t(build_common_builtin_nodes): Call it.\n+\n 2016-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* doc/sourcebuild.texi (arm_crypto_pragma_ok): Document new entry."}, {"sha": "8fef0d116fc9ed0c1ae7984d231cf80455eea29d", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -10332,143 +10332,6 @@ local_define_builtin (const char *name, tree type, enum built_in_function code,\n   set_builtin_decl (code, decl, true);\n }\n \n-/* A subroutine of build_tm_vector_builtins.  Define a builtin with\n-   all of the appropriate attributes.  */\n-static void\n-tm_define_builtin (const char *name, tree type, built_in_function code,\n-\t\t   tree decl_attrs, tree type_attrs)\n-{\n-  tree decl = add_builtin_function (name, type, code, BUILT_IN_NORMAL,\n-\t\t\t            name + strlen (\"__builtin_\"), decl_attrs);\n-  decl_attributes (&TREE_TYPE (decl), type_attrs, ATTR_FLAG_BUILT_IN);\n-  set_builtin_decl (code, decl, true);\n-}\n-\n-/* A subroutine of build_tm_vector_builtins.  Find a supported vector\n-   type VECTOR_BITS wide with inner mode ELEM_MODE.  */\n-static tree\n-find_tm_vector_type (unsigned vector_bits, machine_mode elem_mode)\n-{\n-  unsigned elem_bits = GET_MODE_BITSIZE (elem_mode);\n-  unsigned nunits = vector_bits / elem_bits;\n-\n-  gcc_assert (elem_bits * nunits == vector_bits);\n-\n-  machine_mode vector_mode = mode_for_vector (elem_mode, nunits);\n-  if (!VECTOR_MODE_P (vector_mode)\n-      || !targetm.vector_mode_supported_p (vector_mode))\n-    return NULL_TREE;\n-\n-  tree innertype = lang_hooks.types.type_for_mode (elem_mode, 0);\n-  return build_vector_type_for_mode (innertype, vector_mode);\n-}\n-\n-/* A subroutine of build_common_builtin_nodes.  Define TM builtins for\n-   vector types.  This is done after the target hook, so that the target\n-   has a chance to override these.  */\n-static void\n-build_tm_vector_builtins (void)\n-{\n-  tree vtype, pvtype, ftype, decl;\n-  tree attrs_load, attrs_type_load;\n-  tree attrs_store, attrs_type_store;\n-  tree attrs_log, attrs_type_log;\n-\n-  /* Do nothing if TM is turned off, either with switch or\n-     not enabled in the language.  */\n-  if (!flag_tm || !builtin_decl_explicit_p (BUILT_IN_TM_LOAD_1))\n-    return;\n-\n-  /* Use whatever attributes a normal TM load has.  */\n-  decl = builtin_decl_explicit (BUILT_IN_TM_LOAD_1);\n-  attrs_load = DECL_ATTRIBUTES (decl);\n-  attrs_type_load = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-  /* Use whatever attributes a normal TM store has.  */\n-  decl = builtin_decl_explicit (BUILT_IN_TM_STORE_1);\n-  attrs_store = DECL_ATTRIBUTES (decl);\n-  attrs_type_store = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-  /* Use whatever attributes a normal TM log has.  */\n-  decl = builtin_decl_explicit (BUILT_IN_TM_LOG);\n-  attrs_log = DECL_ATTRIBUTES (decl);\n-  attrs_type_log = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-\n-  /* By default, 64 bit vectors go through the long long helpers.  */\n-\n-  /* If a 128-bit vector is supported, declare those builtins.  */\n-  if (!builtin_decl_explicit_p (BUILT_IN_TM_STORE_M128)\n-      && ((vtype = find_tm_vector_type (128, SImode))\n-\t  || (vtype = find_tm_vector_type (128, SFmode))))\n-    {\n-      pvtype = build_pointer_type (vtype);\n-\n-      ftype = build_function_type_list (void_type_node, pvtype, vtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_WM128\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_M128,\n-\t\t\t attrs_store, attrs_type_store);\n-      tm_define_builtin (\"__builtin__ITM_WaRM128\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_WAR_M128,\n-\t\t\t attrs_store, attrs_type_store);\n-      tm_define_builtin (\"__builtin__ITM_WaWM128\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_WAW_M128,\n-\t\t\t attrs_store, attrs_type_store);\n-\n-      ftype = build_function_type_list (vtype, pvtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_RM128\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_M128,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RaRM128\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RAR_M128,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RaWM128\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RAW_M128,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RfWM128\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RFW_M128,\n-\t\t\t attrs_load, attrs_type_load);\n-\n-      ftype = build_function_type_list (void_type_node, pvtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_LM128\", ftype,\n-\t\t\t BUILT_IN_TM_LOG_M128, attrs_log, attrs_type_log);\n-    }\n-\n-  /* If a 256-bit vector is supported, declare those builtins.  */\n-  if (!builtin_decl_explicit_p (BUILT_IN_TM_STORE_M256)\n-      && ((vtype = find_tm_vector_type (256, SImode))\n-\t  || (vtype = find_tm_vector_type (256, SFmode))))\n-    {\n-      pvtype = build_pointer_type (vtype);\n-\n-      ftype = build_function_type_list (void_type_node, pvtype, vtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_WM256\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_M256,\n-\t\t\t attrs_store, attrs_type_store);\n-      tm_define_builtin (\"__builtin__ITM_WaRM256\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_WAR_M256,\n-\t\t\t attrs_store, attrs_type_store);\n-      tm_define_builtin (\"__builtin__ITM_WaWM256\", ftype,\n-\t\t\t BUILT_IN_TM_STORE_WAW_M256,\n-\t\t\t attrs_store, attrs_type_store);\n-\n-      ftype = build_function_type_list (vtype, pvtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_RM256\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_M256,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RaRM256\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RAR_M256,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RaWM256\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RAW_M256,\n-\t\t\t attrs_load, attrs_type_load);\n-      tm_define_builtin (\"__builtin__ITM_RfWM256\", ftype,\n-\t\t\t BUILT_IN_TM_LOAD_RFW_M256,\n-\t\t\t attrs_load, attrs_type_load);\n-\n-      ftype = build_function_type_list (void_type_node, pvtype, NULL);\n-      tm_define_builtin (\"__builtin__ITM_LM256\", ftype,\n-\t\t\t BUILT_IN_TM_LOG_M256, attrs_log, attrs_type_log);\n-    }\n-}\n-\n /* Call this function after instantiating all builtins that the language\n    front end cares about.  This will build the rest of the builtins\n    and internal functions that are relied upon by the tree optimizers and\n@@ -10707,7 +10570,6 @@ build_common_builtin_nodes (void)\n       }\n   }\n \n-  build_tm_vector_builtins ();\n   init_internal_fns ();\n }\n "}, {"sha": "07c0ebc30a167f9760594a99696797e64a1d6274", "filename": "libitm/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -1,3 +1,24 @@\n+2016-01-19  Richard Henderson  <rth@redhat.com>\n+\n+\tPR bootstrap/69343\n+\tPR bootstrap/69339\n+\tRevert:\n+\t2016-01-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.am (libitm_la_SOURCES) [ARCH_AARCH64]: Add vect128.cc\n+\t(libitm_la_SOURCES) [ARCH_ARM]: Add neon.cc\n+\t(libitm_la_SOURCES) [ARCH_PPC]: Add vect128.cc\n+\t(libitm_la_SOURCES) [ARCH_S390]: Add vect128.cc\n+\t* configure.ac (ARCH_AARCH64): New conditional.\n+\t(ARCH_PPC, ARCH_S390): Likewise.\n+\t* Makefile.in, configure: Rebuild.\n+\n+\t* libitm.h (_ITM_TYPE_M128): Always define.\n+\t* vect64.cc: Split ...\n+\t* vect128.cc: ... out of...\n+\t* config/x86/x86_sse.cc: ... here.\n+\t* config/arm/neon.cc: New file.\n+\n 2016-01-19  Torvald Riegel  <triegel@redhat.com>\n \n \t* local_type_traits: Remove file."}, {"sha": "1dce82d62f13c4c4fe156cd32199d820ce7fa691", "filename": "libitm/Makefile.am", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.am?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -62,26 +62,16 @@ libitm_la_SOURCES = \\\n \tquery.cc retry.cc rwlock.cc useraction.cc util.cc \\\n \tsjlj.S tls.cc method-serial.cc method-gl.cc method-ml.cc\n \n-if ARCH_AARCH64\n-libitm_la_SOURCES += vect128.cc\n-endif\n if ARCH_ARM\n-libitm_la_SOURCES += hwcap.cc neon.cc\n-endif\n-if ARCH_PPC\n-libitm_la_SOURCES += vect128.cc\n-vect128.lo : override CXXFLAGS += -maltivec\n-endif\n-if ARCH_S390\n-libitm_la_SOURCES += vect128.cc\n-vect128.lo : override CXXFLAGS += -march=z13\n+libitm_la_SOURCES += hwcap.cc\n endif\n if ARCH_X86\n-libitm_la_SOURCES += vect64.cc vect128.cc x86_avx.cc\n-vect64.lo : override CXXFLAGS += -msse\n-vect128.lo : override CXXFLAGS += -msse\n+libitm_la_SOURCES += x86_sse.cc x86_avx.cc\n+# Make sure -msse is appended at the end.\n+x86_sse.lo : override CXXFLAGS += -msse\n endif\n if ARCH_X86_AVX\n+# Make sure -mavx is appended at the end.\n x86_avx.lo : override CXXFLAGS += -mavx\n endif\n "}, {"sha": "138eeb1c9da1b7b5ab04ff927dc0afd3cfcfc648", "filename": "libitm/Makefile.in", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.in?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -53,12 +53,9 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n-@ARCH_AARCH64_TRUE@am__append_1 = vect128.cc\n-@ARCH_ARM_TRUE@am__append_2 = hwcap.cc neon.cc\n-@ARCH_PPC_TRUE@am__append_3 = vect128.cc\n-@ARCH_S390_TRUE@am__append_4 = vect128.cc\n-@ARCH_X86_TRUE@am__append_5 = vect64.cc vect128.cc x86_avx.cc\n-@ARCH_FUTEX_TRUE@am__append_6 = futex.cc\n+@ARCH_ARM_TRUE@am__append_1 = hwcap.cc\n+@ARCH_X86_TRUE@am__append_2 = x86_sse.cc x86_avx.cc\n+@ARCH_FUTEX_TRUE@am__append_3 = futex.cc\n subdir = .\n DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(top_srcdir)/configure $(am__configure_deps) \\\n@@ -120,18 +117,14 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(infodir)\" \\\n \t\"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libitm_la_LIBADD =\n-@ARCH_AARCH64_TRUE@am__objects_1 = vect128.lo\n-@ARCH_ARM_TRUE@am__objects_2 = hwcap.lo neon.lo\n-@ARCH_PPC_TRUE@am__objects_3 = vect128.lo\n-@ARCH_S390_TRUE@am__objects_4 = vect128.lo\n-@ARCH_X86_TRUE@am__objects_5 = vect64.lo vect128.lo x86_avx.lo\n-@ARCH_FUTEX_TRUE@am__objects_6 = futex.lo\n+@ARCH_ARM_TRUE@am__objects_1 = hwcap.lo\n+@ARCH_X86_TRUE@am__objects_2 = x86_sse.lo x86_avx.lo\n+@ARCH_FUTEX_TRUE@am__objects_3 = futex.lo\n am_libitm_la_OBJECTS = aatree.lo alloc.lo alloc_c.lo alloc_cpp.lo \\\n \tbarrier.lo beginend.lo clone.lo eh_cpp.lo local.lo query.lo \\\n \tretry.lo rwlock.lo useraction.lo util.lo sjlj.lo tls.lo \\\n \tmethod-serial.lo method-gl.lo method-ml.lo $(am__objects_1) \\\n-\t$(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n-\t$(am__objects_5) $(am__objects_6)\n+\t$(am__objects_2) $(am__objects_3)\n libitm_la_OBJECTS = $(am_libitm_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n@@ -369,8 +362,7 @@ libitm_la_SOURCES = aatree.cc alloc.cc alloc_c.cc alloc_cpp.cc \\\n \tbarrier.cc beginend.cc clone.cc eh_cpp.cc local.cc query.cc \\\n \tretry.cc rwlock.cc useraction.cc util.cc sjlj.S tls.cc \\\n \tmethod-serial.cc method-gl.cc method-ml.cc $(am__append_1) \\\n-\t$(am__append_2) $(am__append_3) $(am__append_4) \\\n-\t$(am__append_5) $(am__append_6)\n+\t$(am__append_2) $(am__append_3)\n \n # Automake Documentation:\n # If your package has Texinfo files in many directories, you can use the\n@@ -503,17 +495,15 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/method-gl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/method-ml.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/method-serial.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/neon.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/query.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/retry.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rwlock.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sjlj.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tls.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/useraction.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/util.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vect128.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vect64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/x86_avx.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/x86_sse.Plo@am__quote@\n \n .S.o:\n @am__fastdepCCAS_TRUE@\t$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n@@ -1106,10 +1096,9 @@ vpath % $(strip $(search_path))\n @LIBITM_BUILD_VERSIONED_SHLIB_SUN_TRUE@@LIBITM_BUILD_VERSIONED_SHLIB_TRUE@\t `echo $(libitm_la_LIBADD) | \\\n @LIBITM_BUILD_VERSIONED_SHLIB_SUN_TRUE@@LIBITM_BUILD_VERSIONED_SHLIB_TRUE@\t    sed 's,/\\([^/.]*\\)\\.la,/.libs/\\1.a,g'` \\\n @LIBITM_BUILD_VERSIONED_SHLIB_SUN_TRUE@@LIBITM_BUILD_VERSIONED_SHLIB_TRUE@\t > $@ || (rm -f $@ ; exit 1)\n-@ARCH_PPC_TRUE@vect128.lo : override CXXFLAGS += -maltivec\n-@ARCH_S390_TRUE@vect128.lo : override CXXFLAGS += -march=z13\n-@ARCH_X86_TRUE@vect64.lo : override CXXFLAGS += -msse\n-@ARCH_X86_TRUE@vect128.lo : override CXXFLAGS += -msse\n+# Make sure -msse is appended at the end.\n+@ARCH_X86_TRUE@x86_sse.lo : override CXXFLAGS += -msse\n+# Make sure -mavx is appended at the end.\n @ARCH_X86_AVX_TRUE@x86_avx.lo : override CXXFLAGS += -mavx\n \n all-local: $(STAMP_GENINSRC)"}, {"sha": "a9c3074405e4dcae06c454c0e8ba77cbcdefba89", "filename": "libitm/config/arm/neon.cc", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f/libitm%2Fconfig%2Farm%2Fneon.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f/libitm%2Fconfig%2Farm%2Fneon.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Farm%2Fneon.cc?ref=7e10bcfa3c30f11136b60b5f6d25acb17afdd57f", "patch": "@@ -1,3 +0,0 @@\n-#ifdef __ARM_NEON\n-#include <vect128.cc>\n-#endif"}, {"sha": "c3b7237f1809d9c1bd4a2b946f652f91d3a6067b", "filename": "libitm/config/x86/x86_sse.cc", "status": "renamed", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfig%2Fx86%2Fx86_sse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfig%2Fx86%2Fx86_sse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fx86%2Fx86_sse.cc?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -27,8 +27,15 @@\n \n // ??? Use memcpy for now, until we have figured out how to best instantiate\n // these loads/stores.\n+CREATE_DISPATCH_FUNCTIONS_T_MEMCPY(M64, GTM::abi_disp()->, )\n CREATE_DISPATCH_FUNCTIONS_T_MEMCPY(M128, GTM::abi_disp()->, )\n \n+void ITM_REGPARM\n+_ITM_LM64 (const _ITM_TYPE_M64 *ptr)\n+{\n+  GTM::GTM_LB (ptr, sizeof (*ptr));\n+}\n+\n void ITM_REGPARM\n _ITM_LM128 (const _ITM_TYPE_M128 *ptr)\n {", "previous_filename": "libitm/vect128.cc"}, {"sha": "55332bb9de833d8a0fa59d0e249f3132927f4d0e", "filename": "libitm/configure", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -607,14 +607,8 @@ ARCH_X86_AVX_FALSE\n ARCH_X86_AVX_TRUE\n ARCH_X86_FALSE\n ARCH_X86_TRUE\n-ARCH_S390_FALSE\n-ARCH_S390_TRUE\n-ARCH_PPC_FALSE\n-ARCH_PPC_TRUE\n ARCH_ARM_FALSE\n ARCH_ARM_TRUE\n-ARCH_AARCH64_FALSE\n-ARCH_AARCH64_TRUE\n link_itm\n XLDFLAGS\n XCFLAGS\n@@ -9768,7 +9762,7 @@ _LT_EOF\n \tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n \t  export_symbols_cmds='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n \telse\n-\t  export_symbols_cmds='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"L\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n+\t  export_symbols_cmds='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n \tfi\n \taix_use_runtimelinking=no\n \n@@ -11796,7 +11790,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11799 \"configure\"\n+#line 11793 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11902,7 +11896,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11905 \"configure\"\n+#line 11899 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14254,7 +14248,7 @@ $as_echo_n \"checking whether the $compiler linker ($LD) supports shared librarie\n     if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n       export_symbols_cmds_CXX='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n     else\n-      export_symbols_cmds_CXX='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"L\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n+      export_symbols_cmds_CXX='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n     fi\n     ;;\n   pw32*)\n@@ -17609,14 +17603,6 @@ else\n fi\n \n \n- if test \"$ARCH\" = aarch64; then\n-  ARCH_AARCH64_TRUE=\n-  ARCH_AARCH64_FALSE='#'\n-else\n-  ARCH_AARCH64_TRUE='#'\n-  ARCH_AARCH64_FALSE=\n-fi\n-\n  if test \"$ARCH\" = arm; then\n   ARCH_ARM_TRUE=\n   ARCH_ARM_FALSE='#'\n@@ -17625,22 +17611,6 @@ else\n   ARCH_ARM_FALSE=\n fi\n \n- if test \"$ARCH\" = powerpc -o \"$ARCH\" = powerpc64; then\n-  ARCH_PPC_TRUE=\n-  ARCH_PPC_FALSE='#'\n-else\n-  ARCH_PPC_TRUE='#'\n-  ARCH_PPC_FALSE=\n-fi\n-\n- if test \"$ARCH\" = s390 -o \"$ARCH\" = s390x; then\n-  ARCH_S390_TRUE=\n-  ARCH_S390_FALSE='#'\n-else\n-  ARCH_S390_TRUE='#'\n-  ARCH_S390_FALSE=\n-fi\n-\n  if test \"$ARCH\" = x86; then\n   ARCH_X86_TRUE=\n   ARCH_X86_FALSE='#'\n@@ -17818,22 +17788,10 @@ if test -z \"${LIBITM_BUILD_VERSIONED_SHLIB_SUN_TRUE}\" && test -z \"${LIBITM_BUILD\n   as_fn_error \"conditional \\\"LIBITM_BUILD_VERSIONED_SHLIB_SUN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${ARCH_AARCH64_TRUE}\" && test -z \"${ARCH_AARCH64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"ARCH_AARCH64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${ARCH_ARM_TRUE}\" && test -z \"${ARCH_ARM_FALSE}\"; then\n   as_fn_error \"conditional \\\"ARCH_ARM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${ARCH_PPC_TRUE}\" && test -z \"${ARCH_PPC_FALSE}\"; then\n-  as_fn_error \"conditional \\\"ARCH_PPC\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${ARCH_S390_TRUE}\" && test -z \"${ARCH_S390_FALSE}\"; then\n-  as_fn_error \"conditional \\\"ARCH_S390\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${ARCH_X86_TRUE}\" && test -z \"${ARCH_X86_FALSE}\"; then\n   as_fn_error \"conditional \\\"ARCH_X86\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "3875aa0b47df148da4599ed0ec13cb35d2ad1da4", "filename": "libitm/configure.ac", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.ac?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -281,10 +281,7 @@ else\n fi\n AC_SUBST(link_itm)\n \n-AM_CONDITIONAL([ARCH_AARCH64], [test \"$ARCH\" = aarch64])\n AM_CONDITIONAL([ARCH_ARM], [test \"$ARCH\" = arm])\n-AM_CONDITIONAL([ARCH_PPC], [test \"$ARCH\" = powerpc -o \"$ARCH\" = powerpc64])\n-AM_CONDITIONAL([ARCH_S390], [test \"$ARCH\" = s390 -o \"$ARCH\" = s390x])\n AM_CONDITIONAL([ARCH_X86], [test \"$ARCH\" = x86])\n AM_CONDITIONAL([ARCH_X86_AVX], [test \"$libitm_cv_as_avx\" = yes])\n AM_CONDITIONAL([ARCH_FUTEX], [test $enable_linux_futex = yes])"}, {"sha": "d7bc166a93bd7992112d33c45f15a504e9713cd4", "filename": "libitm/libitm.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Flibitm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1de98e3d9e015c9260f44a8474001d822a0304d/libitm%2Flibitm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.h?ref=b1de98e3d9e015c9260f44a8474001d822a0304d", "patch": "@@ -232,11 +232,7 @@ ITM_LOG(CE)\n   ITM_BARRIERS(M256)\n   ITM_LOG(M256)\n # endif\n-#else\n-  typedef int _ITM_TYPE_M128 __attribute__((vector_size(16), may_alias));\n-  ITM_BARRIERS(M128)\n-  ITM_LOG(M128)\n-#endif\n+#endif /* i386 */\n \n #undef ITM_BARRIERS\n #undef ITM_LOG"}, {"sha": "c451c58717d2c123b77605c577dfaaf276072bbc", "filename": "libitm/vect64.cc", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f/libitm%2Fvect64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e10bcfa3c30f11136b60b5f6d25acb17afdd57f/libitm%2Fvect64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fvect64.cc?ref=7e10bcfa3c30f11136b60b5f6d25acb17afdd57f", "patch": "@@ -1,36 +0,0 @@\n-/* Copyright (C) 2009-2016 Free Software Foundation, Inc.\n-   Contributed by Richard Henderson <rth@redhat.com>.\n-\n-   This file is part of the GNU Transactional Memory Library (libitm).\n-\n-   Libitm is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n-   more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#include \"libitm_i.h\"\n-#include \"dispatch.h\"\n-\n-// ??? Use memcpy for now, until we have figured out how to best instantiate\n-// these loads/stores.\n-CREATE_DISPATCH_FUNCTIONS_T_MEMCPY(M64, GTM::abi_disp()->, )\n-\n-void ITM_REGPARM\n-_ITM_LM64 (const _ITM_TYPE_M64 *ptr)\n-{\n-  GTM::GTM_LB (ptr, sizeof (*ptr));\n-}"}]}