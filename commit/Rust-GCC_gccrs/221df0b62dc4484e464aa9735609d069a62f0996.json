{"sha": "221df0b62dc4484e464aa9735609d069a62f0996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxZGYwYjYyZGM0NDg0ZTQ2NGFhOTczNTYwOWQwNjlhNjJmMDk5Ng==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-05-13T09:21:36Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-05-13T09:21:36Z"}, "message": "re PR middle-end/48984 (Many testsuite failures)\n\n2011-05-13  Kai Tietz  <ktietz@redhat.com>\n\n        PR middle-end/48984\n        * gimplify.c (gimplify_expr): Check for boolean_type_node instead\n        for BOOLEAN_TYPE for TRUTH-NOT/AND/OR/XOR.\n        (gimple_boolify): Check for cast for boolean_type_node instead for\n        BOOLEAN_TYPE.\n\nFrom-SVN: r173726", "tree": {"sha": "b9fe9897580218fb11ab97f038d60ac06c7ebad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9fe9897580218fb11ab97f038d60ac06c7ebad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/221df0b62dc4484e464aa9735609d069a62f0996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221df0b62dc4484e464aa9735609d069a62f0996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221df0b62dc4484e464aa9735609d069a62f0996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221df0b62dc4484e464aa9735609d069a62f0996/comments", "author": null, "committer": null, "parents": [{"sha": "208cb8cbad1bc9069fdf6fca6cabf506e3c2f740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208cb8cbad1bc9069fdf6fca6cabf506e3c2f740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208cb8cbad1bc9069fdf6fca6cabf506e3c2f740"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "d9ae05a491d5593befa3205330b3a8a2c3a9641e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221df0b62dc4484e464aa9735609d069a62f0996/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221df0b62dc4484e464aa9735609d069a62f0996/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=221df0b62dc4484e464aa9735609d069a62f0996", "patch": "@@ -1,3 +1,11 @@\n+2011-05-13  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR middle-end/48984\n+\t* gimplify.c (gimplify_expr): Check for boolean_type_node instead\n+\tfor BOOLEAN_TYPE for TRUTH-NOT/AND/OR/XOR.\n+\t(gimple_boolify): Check for cast for boolean_type_node instead for\n+\tBOOLEAN_TYPE.\n+\n 2011-05-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48172"}, {"sha": "33a76a266a8ca536b97f0f60eeca2e43e0a4c348", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221df0b62dc4484e464aa9735609d069a62f0996/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221df0b62dc4484e464aa9735609d069a62f0996/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=221df0b62dc4484e464aa9735609d069a62f0996", "patch": "@@ -2848,7 +2848,7 @@ gimple_boolify (tree expr)\n     default:\n       /* Other expressions that get here must have boolean values, but\n \t might need to be converted to the appropriate mode.  */\n-      if (TREE_CODE (type) == BOOLEAN_TYPE)\n+      if (type == boolean_type_node)\n \treturn expr;\n       return fold_convert_loc (loc, boolean_type_node, expr);\n     }\n@@ -6754,7 +6754,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  }\n \n \tcase TRUTH_NOT_EXPR:\n-\t  if (TREE_CODE (TREE_TYPE (*expr_p)) != BOOLEAN_TYPE)\n+\t  if (TREE_TYPE (*expr_p) != boolean_type_node)\n \t    {\n \t      tree type = TREE_TYPE (*expr_p);\n \t      *expr_p = fold_convert (type, gimple_boolify (*expr_p));\n@@ -7199,7 +7199,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t       fold_truth_not_expr) happily uses operand type and doesn't\n \t       automatically uses boolean_type as result, we need to keep\n \t       orignal type.  */\n-\t    if (TREE_CODE (org_type) != BOOLEAN_TYPE)\n+\t    if (org_type != boolean_type_node)\n \t      {\n \t\t*expr_p = fold_convert (org_type, *expr_p);\n \t\tret = GS_OK;"}]}