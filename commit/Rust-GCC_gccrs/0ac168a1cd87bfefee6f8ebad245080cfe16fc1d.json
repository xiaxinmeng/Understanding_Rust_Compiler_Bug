{"sha": "0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjMTY4YTFjZDg3YmZlZmVlNmY4ZWJhZDI0NTA4MGNmZTE2ZmMxZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-23T11:34:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-23T11:34:32Z"}, "message": "re PR tree-optimization/52678 (internal compiler error: in vect_update_ivs_after_vectorizer, at tree-vect-loop-manip.c:1842)\n\n2012-03-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52678\n\t* tree-vectorizer.h (struct _stmt_vec_info): Add\n\tloop_phi_evolution_part member.\n\t(STMT_VINFO_LOOP_PHI_EVOLUTION_PART): New define.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Initialize\n\tSTMT_VINFO_LOOP_PHI_EVOLUTION_PART.\n\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer):\n\tUse the cached evolution part and the PHI nodes value from\n\tthe loop preheader edge instead of re-analyzing the evolution.\n\n\t* gfortran.dg/pr52678.f: New testcase.\n\nFrom-SVN: r185734", "tree": {"sha": "8b6ebe34884569f079b8d732cd6e253f6ca11fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b6ebe34884569f079b8d732cd6e253f6ca11fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e349de504c00b9451becd66103ae96eb4b6ad56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e349de504c00b9451becd66103ae96eb4b6ad56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e349de504c00b9451becd66103ae96eb4b6ad56"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "d1ed37a8953c6033822fa6bc535fd6b90aaf0e22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -1,3 +1,15 @@\n+2012-03-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52678\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add\n+\tloop_phi_evolution_part member.\n+\t(STMT_VINFO_LOOP_PHI_EVOLUTION_PART): New define.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Initialize\n+\tSTMT_VINFO_LOOP_PHI_EVOLUTION_PART.\n+\t* tree-vect-loop-manip.c (vect_update_ivs_after_vectorizer):\n+\tUse the cached evolution part and the PHI nodes value from\n+\tthe loop preheader edge instead of re-analyzing the evolution.\n+\n 2012-03-22  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/mips/mips-tables.opt: Update."}, {"sha": "a6b64242baef8c0e5b3229d3dfe132f2262b0afb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -1,3 +1,8 @@\n+2012-03-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52678\n+\t* gfortran.dg/pr52678.f: New testcase.\n+\n 2012-03-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52638"}, {"sha": "8d0cd4723f68bda81d5525b43aecc789cb9d9caa", "filename": "gcc/testsuite/gfortran.dg/pr52678.f", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr52678.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr52678.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr52678.f?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-O -ftree-vectorize\" }\n+      SUBROUTINE OpenAD_set_ref_state(DRF, RHOFACF, RHOFACC)\n+      real(8) DRF(1 : 15)\n+      real(8) RHOFACF(1 : 16)\n+      real(8) RHOFACC(1 : 15)\n+      integer, dimension(:), allocatable :: oad_it\n+      integer :: oad_it_ptr\n+      INTEGER(8) OpenAD_Symbol_188\n+      INTEGER(4) K\n+          OpenAD_Symbol_188 = 0\n+          DO K = 2, 15, 1\n+            RHOFACF(INT(K)) = ((RHOFACC(K) * DRF(K + (-1)) + RHOFACC(K +\n+     + (-1)) * DRF(K)) /(DRF(K) + DRF(K + (-1))))\n+            OpenAD_Symbol_188 = (INT(OpenAD_Symbol_188) + INT(1))\n+          END DO\n+          oad_it(oad_it_ptr) = OpenAD_Symbol_188\n+      end subroutine OpenAD_set_ref_state"}, {"sha": "499dece1dbf216a98a3a69ddf1833ce6b6e34c32", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -1797,13 +1797,12 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n        !gsi_end_p (gsi) && !gsi_end_p (gsi1);\n        gsi_next (&gsi), gsi_next (&gsi1))\n     {\n-      tree access_fn = NULL;\n-      tree evolution_part;\n       tree init_expr;\n       tree step_expr, off;\n       tree type;\n       tree var, ni, ni_name;\n       gimple_stmt_iterator last_gsi;\n+      stmt_vec_info stmt_info;\n \n       phi = gsi_stmt (gsi);\n       phi1 = gsi_stmt (gsi1);\n@@ -1822,45 +1821,34 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n \t}\n \n       /* Skip reduction phis.  */\n-      if (STMT_VINFO_DEF_TYPE (vinfo_for_stmt (phi)) == vect_reduction_def)\n+      stmt_info = vinfo_for_stmt (phi);\n+      if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def)\n         {\n           if (vect_print_dump_info (REPORT_DETAILS))\n             fprintf (vect_dump, \"reduc phi. skip.\");\n           continue;\n         }\n \n-      access_fn = analyze_scalar_evolution (loop, PHI_RESULT (phi));\n-      gcc_assert (access_fn);\n-      /* We can end up with an access_fn like\n-           (short int) {(short unsigned int) i_49, +, 1}_1\n-\t for further analysis we need to strip the outer cast but we\n-\t need to preserve the original type.  */\n-      type = TREE_TYPE (access_fn);\n-      STRIP_NOPS (access_fn);\n-      evolution_part =\n-\t unshare_expr (evolution_part_in_loop_num (access_fn, loop->num));\n-      gcc_assert (evolution_part != NULL_TREE);\n+      type = TREE_TYPE (gimple_phi_result (phi));\n+      step_expr = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_info);\n+      step_expr = unshare_expr (step_expr);\n \n       /* FORNOW: We do not support IVs whose evolution function is a polynomial\n          of degree >= 2 or exponential.  */\n-      gcc_assert (!tree_is_chrec (evolution_part));\n+      gcc_assert (!tree_is_chrec (step_expr));\n \n-      step_expr = evolution_part;\n-      init_expr = unshare_expr (initial_condition_in_loop_num (access_fn,\n-\t\t\t\t\t\t\t       loop->num));\n-      init_expr = fold_convert (type, init_expr);\n+      init_expr = PHI_ARG_DEF_FROM_EDGE (phi, loop_preheader_edge (loop));\n \n       off = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t fold_convert (TREE_TYPE (step_expr), niters),\n \t\t\t step_expr);\n-      if (POINTER_TYPE_P (TREE_TYPE (init_expr)))\n+      if (POINTER_TYPE_P (type))\n \tni = fold_build_pointer_plus (init_expr, off);\n       else\n-\tni = fold_build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n-\t\t\t  init_expr,\n-\t\t\t  fold_convert (TREE_TYPE (init_expr), off));\n+\tni = fold_build2 (PLUS_EXPR, type,\n+\t\t\t  init_expr, fold_convert (type, off));\n \n-      var = create_tmp_var (TREE_TYPE (init_expr), \"tmp\");\n+      var = create_tmp_var (type, \"tmp\");\n       add_referenced_var (var);\n \n       last_gsi = gsi_last_bb (exit_bb);"}, {"sha": "1b4ed883e44110ddf5a8851304995b102d7d4ab0", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -579,6 +579,10 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t  continue;\n \t}\n \n+      STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_vinfo)\n+\t= evolution_part_in_loop_num (access_fn, loop->num);\n+      gcc_assert (STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_vinfo) != NULL_TREE);\n+\n       if (vect_print_dump_info (REPORT_DETAILS))\n \tfprintf (vect_dump, \"Detected induction.\");\n       STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_induction_def;"}, {"sha": "5f031b52f2ee585f87eb1be734c3defbb42db026", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac168a1cd87bfefee6f8ebad245080cfe16fc1d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=0ac168a1cd87bfefee6f8ebad245080cfe16fc1d", "patch": "@@ -476,6 +476,13 @@ typedef struct _stmt_vec_info {\n   tree dr_step;\n   tree dr_aligned_to;\n \n+  /* For loop PHI nodes, the evolution part of it.  This makes sure\n+     this information is still available in vect_update_ivs_after_vectorizer\n+     where we may not be able to re-analyze the PHI nodes evolution as\n+     peeling for the prologue loop can make it unanalyzable.  The evolution\n+     part is still correct though.  */\n+  tree loop_phi_evolution_part;\n+\n   /* Used for various bookkeeping purposes, generally holding a pointer to\n      some other stmt S that is in some way \"related\" to this stmt.\n      Current use of this field is:\n@@ -572,6 +579,7 @@ typedef struct _stmt_vec_info {\n #define STMT_VINFO_GROUP_SAME_DR_STMT(S)   (S)->same_dr_stmt\n #define STMT_VINFO_GROUP_READ_WRITE_DEPENDENCE(S)  (S)->read_write_dep\n #define STMT_VINFO_STRIDED_ACCESS(S)      ((S)->first_element != NULL && (S)->data_ref_info)\n+#define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n \n #define GROUP_FIRST_ELEMENT(S)          (S)->first_element\n #define GROUP_NEXT_ELEMENT(S)           (S)->next_element"}]}