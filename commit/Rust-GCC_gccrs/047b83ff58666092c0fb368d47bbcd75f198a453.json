{"sha": "047b83ff58666092c0fb368d47bbcd75f198a453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3YjgzZmY1ODY2NjA5MmMwZmIzNjhkNDdiYmNkNzVmMTk4YTQ1Mw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-04-23T00:21:39Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-04-23T00:21:39Z"}, "message": "re PR target/65456 (powerpc64le autovectorized copy loop missed optimization)\n\n[gcc]\n\n2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65456\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):  For\n\tVSX + POWER8, enable TARGET_ALLOW_MOVMISALIGN and\n\tTARGET_EFFICIENT_UNALIGNED_VSX if not selected by command line\n\toption.\n\t(rs6000_builtin_mask_for_load): Return 0 for targets with\n\tefficient unaligned VSX accesses so that the vectorizer will use\n\tdirect unaligned loads.\n\t(rs6000_builtin_support_vector_misalignment): Always return true\n\tfor targets with efficient unaligned VSX accesses.\n\t(rs6000_builtin_vectorization_cost): Cost of unaligned loads and\n\tstores on targets with efficient unaligned VSX accesses is almost\n\talways the same as the cost of an aligned load or store, so model\n\tit that way.\n\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Return 0 for\n\tunaligned vectors if we have efficient unaligned VSX accesses.\n\t* config/rs6000/rs6000.opt (mefficient-unaligned-vector): New\n\tundocumented option.\n\n[gcc/testsuite]\n\n2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65456\n\t* gcc.dg/vect/bb-slp-24.c: Exclude test for POWER8.\n\t* gcc.dg/vect/bb-slp-25.c: Likewise.\n\t* gcc.dg/vect/bb-slp-29.c: Likewise.\n\t* gcc.dg/vect/bb-slp-32.c: Replace vect_no_align with\n\tvect_no_align && { ! vect_hw_misalign }.\n\t* gcc.dg/vect/bb-slp-9.c: Likewise.\n\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-33.c: Exclude test for\n\tvect_hw_misalign.\n\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-31a.c: Likewise.\n\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-76b.c: Adjust tests to\n\taccount for POWER8, where peeling for alignment is not needed.\n\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-outer-fir.c: Replace\n\tvect_no_align with vect_no_align && { ! vect_hw_misalign }.\n\t* gcc.dg.vect.if-cvt-stores-vect-ifcvt-18.c: Likewise.\n\t* gcc.dg/vect/no-scevccp-outer-6-global.c: Likewise.\n\t* gcc.dg/vect/no-scevccp-outer-6.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-43.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-57.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-61.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-depend-1.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-depend-3.c: Likewise.\n\t* gcc.dg/vect/pr16105.c: Likewise.\n\t* gcc.dg/vect/pr20122.c: Likewise.\n\t* gcc.dg/vect/pr33804.c: Likewise.\n\t* gcc.dg/vect/pr33953.c: Likewise.\n\t* gcc.dg/vect/pr56787.c: Likewise.\n\t* gcc.dg/vect/pr58508.c: Likewise.\n\t* gcc.dg/vect/slp-25.c: Likewise.\n\t* gcc.dg/vect/vect-105-bit-array.c: Likewise.\n\t* gcc.dg/vect/vect-105.c: Likewise.\n\t* gcc.dg/vect/vect-27.c: Likewise.\n\t* gcc.dg/vect/vect-29.c: Likewise.\n\t* gcc.dg/vect/vect-33.c: Exclude unaligned access test for\n\tPOWER8.\n\t* gcc.dg/vect/vect-42.c: Replace vect_no_align with vect_no_align\n\t&& { ! vect_hw_misalign }.\n\t* gcc.dg/vect/vect-44.c: Likewise.\n\t* gcc.dg/vect/vect-48.c: Likewise.\n\t* gcc.dg/vect/vect-50.c: Likewise.\n\t* gcc.dg/vect/vect-52.c: Likewise.\n\t* gcc.dg/vect/vect-56.c: Likewise.\n\t* gcc.dg/vect/vect-60.c: Likewise.\n\t* gcc.dg/vect/vect-72.c: Likewise.\n\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-75.c: Likewise.\n\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-77-global.c: Likewise.\n\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-78-global.c: Likewise.\n\t* gcc.dg/vect/vect-93.c: Likewise.\n\t* gcc.dg/vect/vect-95.c: Likewise.\n\t* gcc.dg/vect/vect-96.c: Likewise.\n\t* gcc.dg/vect/vect-cond-1.c: Likewise.\n\t* gcc.dg/vect/vect-cond-3.c: Likewise.\n\t* gcc.dg/vect/vect-cond-4.c: Likewise.\n\t* gcc.dg/vect/vect-cselim-1.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-1.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-4.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n\t* gcc.dg/vect/vect-nest-cycle-1.c: Likewise.\n\t* gcc.dg/vect/vect-nest-cycle-2.c: Likewise.\n\t* gcc.dg/vect/vect-outer-3a-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-outer-3a.c: Likewise.\n\t* gcc.dg/vect/vect-outer-5.c: Likewise.\n\t* gcc.dg/vect/vect-outer-fir-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-outer-fir-lb-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-outer-fir-lb.c: Likewise.\n\t* gcc.dg/vect/vect-outer-fir.c: Likewise.\n\t* gcc.dg/vect/vect-peel-3.c: Likewise.\n\t* gcc.dg/vect/vect-peel-4.c: Likewise.\n\t* gcc.dg/vect/vect-pre-interact.c: Likewise.\n\t* gcc.target/powerpc/pr65456.c: New test.\n\t* gcc.target/powerpc/vsx-vectorize-2.c: Exclude test for POWER8.\n\t* gcc.target/powerpc/vsx-vectorize-4.c: Likewise.\n\t* gcc.target/powerpc/vsx-vectorize-6.c: Likewise.\n\t* gcc.target/powerpc/vsx-vectorize-7.c: Likewise.\n\t* gfortran.dg/vect/vect-2.f90: Replace vect_no_align with\n\tvect_no_align && { ! vect_hw_misalign }.\n\t* gfortran.dg/vect/vect-3.f90: Likewise.\n\t* gfortran.dg/vect/vect-4.f90: Likewise.\n\t* gfortran.dg/vect/vect-5.f90: Likewise.\n\t* lib/target-supports.exp (check_effective_target_vect_no_align):\n\tReturn 1 for POWER8.\n\t(check_effective_target_vect_hw_misalign): Return 1 for POWER8.\n\nFrom-SVN: r222349", "tree": {"sha": "3f5c3fe44e6d8dd2bbe1d945877428dde4163012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f5c3fe44e6d8dd2bbe1d945877428dde4163012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047b83ff58666092c0fb368d47bbcd75f198a453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047b83ff58666092c0fb368d47bbcd75f198a453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047b83ff58666092c0fb368d47bbcd75f198a453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047b83ff58666092c0fb368d47bbcd75f198a453/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed4c75f949739fbddb7c80aed8962abb8f9428f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4c75f949739fbddb7c80aed8962abb8f9428f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4c75f949739fbddb7c80aed8962abb8f9428f9"}], "stats": {"total": 455, "additions": 336, "deletions": 119}, "files": [{"sha": "6996549a68d733c42cfb07bdd1a6f6e98e16febe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -1,3 +1,24 @@\n+2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65456\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):  For\n+\tVSX + POWER8, enable TARGET_ALLOW_MOVMISALIGN and\n+\tTARGET_EFFICIENT_UNALIGNED_VSX if not selected by command line\n+\toption.\n+\t(rs6000_builtin_mask_for_load): Return 0 for targets with\n+\tefficient unaligned VSX accesses so that the vectorizer will use\n+\tdirect unaligned loads.\n+\t(rs6000_builtin_support_vector_misalignment): Always return true\n+\tfor targets with efficient unaligned VSX accesses.\n+\t(rs6000_builtin_vectorization_cost): Cost of unaligned loads and\n+\tstores on targets with efficient unaligned VSX accesses is almost\n+\talways the same as the cost of an aligned load or store, so model\n+\tit that way.\n+\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Return 0 for\n+\tunaligned vectors if we have efficient unaligned VSX accesses.\n+\t* config/rs6000/rs6000.opt (mefficient-unaligned-vector): New\n+\tundocumented option.\n+\n 2015-04-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tRevert:"}, {"sha": "b55dae2c37b8af37083891691e70f93f61ce80f1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -4251,6 +4251,22 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n+  /* Determine when unaligned vector accesses are permitted, and when\n+     they are preferred over masked Altivec loads.  Note that if\n+     TARGET_ALLOW_MOVMISALIGN has been disabled by the user, then\n+     TARGET_EFFICIENT_UNALIGNED_VSX must be as well.  The converse is\n+     not true.  */\n+  if (TARGET_EFFICIENT_UNALIGNED_VSX == -1) {\n+    if (TARGET_VSX && rs6000_cpu == PROCESSOR_POWER8\n+\t&& TARGET_ALLOW_MOVMISALIGN != 0)\n+      TARGET_EFFICIENT_UNALIGNED_VSX = 1;\n+    else\n+      TARGET_EFFICIENT_UNALIGNED_VSX = 0;\n+  }\n+\n+  if (TARGET_ALLOW_MOVMISALIGN == -1 && rs6000_cpu == PROCESSOR_POWER8)\n+    TARGET_ALLOW_MOVMISALIGN = 1;\n+\n   /* Set the builtin mask of the various options used that could affect which\n      builtins were used.  In the past we used target_flags, but we've run out\n      of bits, and some options like SPE and PAIRED are no longer in\n@@ -4299,7 +4315,9 @@ rs6000_option_override (void)\n static tree\n rs6000_builtin_mask_for_load (void)\n {\n-  if (TARGET_ALTIVEC || TARGET_VSX)\n+  /* Don't use lvsl/vperm for P8 and similarly efficient machines.  */\n+  if ((TARGET_ALTIVEC && !TARGET_VSX)\n+      || (TARGET_VSX && !TARGET_EFFICIENT_UNALIGNED_VSX))\n     return altivec_builtin_mask_for_load;\n   else\n     return 0;\n@@ -4378,6 +4396,9 @@ rs6000_builtin_support_vector_misalignment (machine_mode mode,\n {\n   if (TARGET_VSX)\n     {\n+      if (TARGET_EFFICIENT_UNALIGNED_VSX)\n+\treturn true;\n+\n       /* Return if movmisalign pattern is not supported for this mode.  */\n       if (optab_handler (movmisalign_optab, mode) == CODE_FOR_nothing)\n         return false;\n@@ -4441,6 +4462,9 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n         return 3;\n \n       case unaligned_load:\n+\tif (TARGET_EFFICIENT_UNALIGNED_VSX)\n+\t  return 1;\n+\n         if (TARGET_VSX && TARGET_ALLOW_MOVMISALIGN)\n           {\n             elements = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -4476,6 +4500,9 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n         return 2;\n \n       case unaligned_store:\n+\tif (TARGET_EFFICIENT_UNALIGNED_VSX)\n+\t  return 1;\n+\n         if (TARGET_VSX && TARGET_ALLOW_MOVMISALIGN)\n           {\n             elements = TYPE_VECTOR_SUBPARTS (vectype);"}, {"sha": "b13df1b2b6eb0fa3003da52dc4c1e1d71b05a536", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -891,7 +891,8 @@ enum data_align { align_abi, align_opt, align_both };\n    || (((MODE) == SFmode || (MODE) == DFmode || (MODE) == TFmode\t\\\n \t|| (MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\t\\\n        && (ALIGN) < 32)\t\t\t\t\t\t\t\\\n-   || (VECTOR_MODE_P ((MODE)) && (((int)(ALIGN)) < VECTOR_ALIGN (MODE))))\n+   || (!TARGET_EFFICIENT_UNALIGNED_VSX                                  \\\n+       && (VECTOR_MODE_P ((MODE)) && (((int)(ALIGN)) < VECTOR_ALIGN (MODE)))))\n \n \f\n /* Standard register usage.  */"}, {"sha": "5bb2718a88f65c876648b7f5ff0298b4e85d1ac5", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -211,6 +211,10 @@ mallow-movmisalign\n Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1)\n ; Allow/disallow the movmisalign in DF/DI vectors\n \n+mefficient-unaligned-vector\n+Target Undocumented Report Var(TARGET_EFFICIENT_UNALIGNED_VSX) Init(-1)\n+; Consider unaligned VSX accesses to be efficient/inefficient\n+\n mallow-df-permute\n Target Undocumented Var(TARGET_ALLOW_DF_PERMUTE)\n ; Allow/disallow permutation of DF/DI vectors"}, {"sha": "0b45415afd98af8a75dd5f9557c22dbb1f51a6f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -1,3 +1,93 @@\n+2015-04-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65456\n+\t* gcc.dg/vect/bb-slp-24.c: Exclude test for POWER8.\n+\t* gcc.dg/vect/bb-slp-25.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-29.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-32.c: Replace vect_no_align with\n+\tvect_no_align && { ! vect_hw_misalign }.\n+\t* gcc.dg/vect/bb-slp-9.c: Likewise.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-33.c: Exclude test for\n+\tvect_hw_misalign.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-31a.c: Likewise.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-76b.c: Adjust tests to\n+\taccount for POWER8, where peeling for alignment is not needed.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-vect-outer-fir.c: Replace\n+\tvect_no_align with vect_no_align && { ! vect_hw_misalign }.\n+\t* gcc.dg.vect.if-cvt-stores-vect-ifcvt-18.c: Likewise.\n+\t* gcc.dg/vect/no-scevccp-outer-6-global.c: Likewise.\n+\t* gcc.dg/vect/no-scevccp-outer-6.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-43.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-57.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-61.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-depend-1.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-depend-3.c: Likewise.\n+\t* gcc.dg/vect/pr16105.c: Likewise.\n+\t* gcc.dg/vect/pr20122.c: Likewise.\n+\t* gcc.dg/vect/pr33804.c: Likewise.\n+\t* gcc.dg/vect/pr33953.c: Likewise.\n+\t* gcc.dg/vect/pr56787.c: Likewise.\n+\t* gcc.dg/vect/pr58508.c: Likewise.\n+\t* gcc.dg/vect/slp-25.c: Likewise.\n+\t* gcc.dg/vect/vect-105-bit-array.c: Likewise.\n+\t* gcc.dg/vect/vect-105.c: Likewise.\n+\t* gcc.dg/vect/vect-27.c: Likewise.\n+\t* gcc.dg/vect/vect-29.c: Likewise.\n+\t* gcc.dg/vect/vect-33.c: Exclude unaligned access test for\n+\tPOWER8.\n+\t* gcc.dg/vect/vect-42.c: Replace vect_no_align with vect_no_align\n+\t&& { ! vect_hw_misalign }.\n+\t* gcc.dg/vect/vect-44.c: Likewise.\n+\t* gcc.dg/vect/vect-48.c: Likewise.\n+\t* gcc.dg/vect/vect-50.c: Likewise.\n+\t* gcc.dg/vect/vect-52.c: Likewise.\n+\t* gcc.dg/vect/vect-56.c: Likewise.\n+\t* gcc.dg/vect/vect-60.c: Likewise.\n+\t* gcc.dg/vect/vect-72.c: Likewise.\n+\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-75.c: Likewise.\n+\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-77-global.c: Likewise.\n+\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-78-global.c: Likewise.\n+\t* gcc.dg/vect/vect-93.c: Likewise.\n+\t* gcc.dg/vect/vect-95.c: Likewise.\n+\t* gcc.dg/vect/vect-96.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-1.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-3.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-4.c: Likewise.\n+\t* gcc.dg/vect/vect-cselim-1.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-1.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-4.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n+\t* gcc.dg/vect/vect-nest-cycle-1.c: Likewise.\n+\t* gcc.dg/vect/vect-nest-cycle-2.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-3a-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-3a.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-5.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-fir-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-fir-lb-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-fir-lb.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-fir.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-3.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-4.c: Likewise.\n+\t* gcc.dg/vect/vect-pre-interact.c: Likewise.\n+\t* gcc.target/powerpc/pr65456.c: New test.\n+\t* gcc.target/powerpc/vsx-vectorize-2.c: Exclude test for POWER8.\n+\t* gcc.target/powerpc/vsx-vectorize-4.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-6.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-7.c: Likewise.\n+\t* gfortran.dg/vect/vect-2.f90: Replace vect_no_align with\n+\tvect_no_align && { ! vect_hw_misalign }.\n+\t* gfortran.dg/vect/vect-3.f90: Likewise.\n+\t* gfortran.dg/vect/vect-4.f90: Likewise.\n+\t* gfortran.dg/vect/vect-5.f90: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_vect_no_align):\n+\tReturn 1 for POWER8.\n+\t(check_effective_target_vect_hw_misalign): Return 1 for POWER8.\n+\n 2015-04-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/65429"}, {"sha": "80f4fbb4e20309e0811dd52c633c35ba990f67a4", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-24.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -54,7 +54,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { target vect_element_align } } } */\n+/* Exclude POWER8 (only POWER cpu for which vect_element_align is true)\n+   because loops have vectorized before SLP gets a shot.  */\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { target { vect_element_align && { ! powerpc*-*-* } } } } } */\n /* { dg-final { cleanup-tree-dump \"slp1\" } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */\n "}, {"sha": "5f4908b17a9dfcdb109711eacc385830856e18c3", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-25.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-25.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -54,7 +54,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { target vect_element_align } } } */\n+/* Exclude POWER8 (only POWER cpu for which vect_element_align is true)\n+   because loops have vectorized before SLP gets a shot.  */\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { target { vect_element_align && { ! powerpc*-*-* } } } } } */\n /* { dg-final { cleanup-tree-dump \"slp1\" } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */\n "}, {"sha": "9152e6ca13293a3180f6b9e6145f2d8b34d8085d", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-29.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-29.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -54,7 +54,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\"  { target { vect_int_mult &&  vect_element_align } } } } */\n+/* Exclude POWER8 (only POWER cpu for which vect_element_align is true)\n+   because loops have vectorized before SLP gets a shot.  */\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\"  { target { { vect_int_mult && vect_element_align } && { ! powerpc*-*-* } } } } } */\n /* { dg-final { cleanup-tree-dump \"slp1\" } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */\n "}, {"sha": "e1aafd9d924dfad5804f92b5c768325284921c0d", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-32.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -19,5 +19,5 @@ int foo (int *p)\n   return tem0 + tem1 + tem2 + tem3;\n }\n \n-/* { dg-final { scan-tree-dump \"vectorization is not profitable\" \"slp2\" { xfail  vect_no_align } } } */\n+/* { dg-final { scan-tree-dump \"vectorization is not profitable\" \"slp2\" { xfail  { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */"}, {"sha": "df85ba226e2194ddc5247e28eada2e78cbb559ca", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-9.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -46,6 +46,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp2\"  { xfail  vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp2\"  { xfail  { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */\n   "}, {"sha": "3d6d628b727812d4664a69442da8c5e6752e791c", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/ppc/costmodel-slp-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-33.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -40,5 +40,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_hw_misalign } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "161497faf68b5db6bb727e8206260831b9b748ca", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/ppc/costmodel-vect-31a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-31a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-31a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-31a.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -47,5 +47,5 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_hw_misalign } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2d1ee97c3989bbbb20989e03e86cb5f3ce9e5d94", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/ppc/costmodel-vect-76b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-76b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-76b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-76b.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -43,8 +43,8 @@ int main (void)\n }\n \n /* Peeling to align the store is used. Overhead of peeling is too high.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target vector_alignment_reachable } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" { target { vector_alignment_reachable && {! vect_no_align} } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { vector_alignment_reachable && {! vect_no_align} } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" { target { vector_alignment_reachable && {! vect_hw_misalign} } } } } */\n \n /* Versioning to align the store is used. Overhead of versioning is not too high.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_no_align || {! vector_alignment_reachable} } } } } */"}, {"sha": "5123950806dcdb6d68b9a12022b1939ba6b6cfab", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/ppc/costmodel-vect-outer-fir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-outer-fir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-outer-fir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-vect-outer-fir.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -67,5 +67,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "cdf687ab4206748952aecef3fad9de3bab44564c", "filename": "gcc/testsuite/gcc.dg/vect/if-cvt-stores-vect-ifcvt-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fif-cvt-stores-vect-ifcvt-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fif-cvt-stores-vect-ifcvt-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fif-cvt-stores-vect-ifcvt-18.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -65,5 +65,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail { vect_no_align || { ! vect_strided2 } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vect_strided2 } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4aa4a5e98c291f66d3b1dffd9c28282d21f4164a", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-6-global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6-global.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -52,5 +52,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "187a78c37443a74d78024f51df61394c22049d22", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-6.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -51,6 +51,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { unaligned_stack || vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { unaligned_stack || { vect_no_align && { ! vect_hw_misalign } } } } } } */\n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d09cd41447be4bc978eeca6e9f111b800566cc76", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-43.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-43.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -90,5 +90,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fd4288c9d2989961c15d9fd21a137f767b54463c", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-57.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-57.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -71,5 +71,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8b1b6c6d8fb3b4166d9c076e6552e234645a5d09", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-61.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-61.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -73,5 +73,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2be160426e20fdb1c248c1a4b1add17dbca20f58", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-1.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -50,7 +50,7 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "54f66ea1c377f1ac231e2303dde366078c312f75", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -50,6 +50,6 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8a3dd54ec89be7052034e48b39ca91dfd1b257a3", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -182,6 +182,6 @@ int main ()\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"dependence distance negative\" 4 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "50c16c468f755c4fc83c4b96033347aac873fdf1", "filename": "gcc/testsuite/gcc.dg/vect/pr16105.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -18,5 +18,5 @@ void square(const float * __restrict__ a,\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c9c523c5d122d1ebc8f516a9d1b65d22d7fa10f9", "filename": "gcc/testsuite/gcc.dg/vect/pr20122.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -52,5 +52,5 @@ int main (int argc, char **argv)\n /* The loops in VecBug and VecBug2 require versioning for alignment.\n    The loop in main is aligned.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c7f3b6fa5565f9771a35659d16aa217776f0d89b", "filename": "gcc/testsuite/gcc.dg/vect/pr33804.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33804.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -11,6 +11,6 @@ void f(unsigned char *s, unsigned char *d, int n) {\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3a882692dcbd79796f0a9c6ecc772c58deed735a", "filename": "gcc/testsuite/gcc.dg/vect/pr33953.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33953.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -28,8 +28,8 @@ void blockmove_NtoN_blend_noremap32 (const UINT32 *srcdata, int srcwidth,\n    }\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" {xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n \n "}, {"sha": "0b09c862b16bbca7610607561398c3bdcab230e9", "filename": "gcc/testsuite/gcc.dg/vect/pr56787.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56787.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -31,5 +31,5 @@ foo (unsigned long n, const float *__restrict u0,\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "60c68beb6e73c55ec586470663bc273ad845d22d", "filename": "gcc/testsuite/gcc.dg/vect/pr58508.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -67,5 +67,5 @@ void test5 (int* a, int* b)\n }\n \n /* { dg-final { scan-tree-dump-times \"hoist\" 8 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"hoist\" 3 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"hoist\" 3 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "74b1251974715374dac5b28902944df3db960099", "filename": "gcc/testsuite/gcc.dg/vect/slp-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -57,5 +57,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { vect_no_align || { ! vect_natural_alignment } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vect_natural_alignment } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0a4746e2edb66f1300ca4fc57d10b86f612921eb", "filename": "gcc/testsuite/gcc.dg/vect/vect-105-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105-big-array.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -100,7 +100,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "79d31c168a4e4bc4e3459f58e29fb86d77a603c9", "filename": "gcc/testsuite/gcc.dg/vect/vect-105.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -66,7 +66,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "fd60d7738ff6b8c6659ecbd2f2a7beeae506cf4e", "filename": "gcc/testsuite/gcc.dg/vect/vect-27.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -44,8 +44,8 @@ int main (void)\n }\n \n /* The initialization induction loop (with aligned access) is also vectorized.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "55cc97a41f495633751aecf4150345b75bb02c77", "filename": "gcc/testsuite/gcc.dg/vect/vect-29.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -51,7 +51,7 @@ int main (void)\n \n /* The initialization induction loop (with aligned access) is also vectorized.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" {target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" {target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "888a4a034b927665a55bf7a3bc91090ac5ea464b", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -36,9 +36,10 @@ int main (void)\n   return main1 ();\n } \n \n+/* vect_hw_misalign && { ! vect64 } */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" { target { vect_hw_misalign && { {! vect64} || vect_multiple_sizes } } } } } */\n+/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" { target { { { ! powerpc*-*-* } && vect_hw_misalign } && { { ! vect64 } || vect_multiple_sizes } } } } }  */\n /* { dg-final { scan-tree-dump \"Alignment of access forced using peeling\" \"vect\" { target { vector_alignment_reachable && { vect64 && {! vect_multiple_sizes} } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { {! vector_alignment_reachable} || {! vect64} } && {! vect_hw_misalign} } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6781ece182d1d6ad4308655a16910e636a5581d1", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -64,7 +64,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { ! vector_alignment_reachable } && { ! vect_element_align } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail { vect_no_align || { { !  vector_alignment_reachable } || vect_element_align  } } } } }  */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align } } } */"}, {"sha": "70f28dba315edd9ad8fd874c966efb07c7678ba1", "filename": "gcc/testsuite/gcc.dg/vect/vect-44.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -65,8 +65,8 @@ int main (void)\n    two loads to be aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || {! vector_alignment_reachable} } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && {{! vect_no_align} && {! vect_hw_misalign} } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5da97372d773489e5eb6bcaa79d4fcc2519e9594", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -55,7 +55,7 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "98ccf9a891f84206ebffc076e5e5f8f73a77681b", "filename": "gcc/testsuite/gcc.dg/vect/vect-50.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -61,9 +61,9 @@ int main (void)\n    align the store will not force the two loads to be aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align } } } }  */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target vect_hw_misalign } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || {! vector_alignment_reachable} } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && { {! vect_no_align } && {! vect_hw_misalign } } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c7cf6abbf60f178d557db7e27d79b3857a76b7e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -56,7 +56,7 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ced829e483781046995f9065abf800c4ba409839", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -67,7 +67,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { vect_element_align } } } } */"}, {"sha": "8cfb8d9552b833871ce07531e1f17a45ecfcd0fc", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -68,7 +68,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { vect_element_align } } } } */"}, {"sha": "c4e629cd0e605856aa7eb172eb28e1c20bcf752e", "filename": "gcc/testsuite/gcc.dg/vect/vect-72.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -46,7 +46,7 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3524fa9a253b6456b5e0f973c5b0677968c908fb", "filename": "gcc/testsuite/gcc.dg/vect/vect-75-big-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -52,6 +52,6 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "35336b93953124f2005c5eb38395c6e1f550bd07", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -44,6 +44,6 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "56a2197d82b2f78fed8ac3dd52d1258504ce8e0a", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-alignchecks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -49,8 +49,8 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && vect_no_align } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align} } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "56d511205ad33fffbf5216fb79798c163e9d6614", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-global.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-global.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -48,7 +48,7 @@ int main (void)\n /* Requires versioning for aliasing.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d4207074a0709b725e8a354bcb4ed1b4681cf460", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-alignchecks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -50,8 +50,8 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */ \n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */ \n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && vect_no_align } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align} } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && { ! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f0e5d9deab52b15fdbb3ffbb67532abd53a6d9c1", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-global.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-global.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -48,7 +48,7 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "07dda3db396282c5e9aa798083e548289e205904", "filename": "gcc/testsuite/gcc.dg/vect/vect-93.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -76,10 +76,10 @@ int main (void)\n \n /* in main1: */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target !powerpc*-*-* !i?86-*-* !x86_64-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n \n /* in main: */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n \n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "be560a6c316ac8054c17d7c353af11033091cdec", "filename": "gcc/testsuite/gcc.dg/vect/vect-95.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-95.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -64,6 +64,6 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align} } } }  */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n-/*  { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target vect_no_align } } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 4 \"vect\" { target vect_no_align } } } */\n+/*  { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 4 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7d8c92a5489b5c168c4d82765037a717af63605d", "filename": "gcc/testsuite/gcc.dg/vect/vect-96.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -46,5 +46,5 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_no_align} && vector_alignment_reachable } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || { { ! vector_alignment_reachable} || vect_element_align } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { vect_no_align || { {! vector_alignment_reachable} && {! vect_element_align} } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { vect_no_align && { ! vect_hw_misalign } } || { {! vector_alignment_reachable} && {! vect_element_align} } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "bd2d2fb62478df8ac9f5c8b09597e1be801a1246", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-1.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -51,7 +51,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n \n "}, {"sha": "0f36e848b5552551fd256062c0e9890149e99d3c", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-3.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -59,7 +59,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n \n "}, {"sha": "9a6e117d912c4bd8d54831277a9ff191b1f6d109", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-4.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -56,7 +56,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n \n "}, {"sha": "ce2db7d8b5d462bb35d3c009e364717ac5cc45bf", "filename": "gcc/testsuite/gcc.dg/vect/vect-cselim-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-1.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -82,5 +82,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail { vect_no_align || { ! vect_strided2 } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vect_strided2 } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b3a02aa65430c1dfa3b479ad6f2715c6c427e7ab", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -81,8 +81,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail {{ vect_no_align } || {vect_sizes_32B_16B }}} } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail {{ vect_no_align } || {vect_sizes_32B_16B }}} } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail {{ vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B }}} } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail {{ vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B }}} } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "2fdd4b7c9e52b631b0257769de36331910fd417e", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -54,7 +54,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" {xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "37146def8cdc2bc42d2eef5024575a938fec0cf8", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -92,7 +92,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { vect_element_align}  } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 8 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */"}, {"sha": "a337ca4b649fb2b415020d41e290edb82cb1345b", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -61,7 +61,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { sparc*-*-* && ilp32 } }} } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" {xfail { vect_no_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "588751e85cb15f7d0f941cc1a6f81ceb4550cc80", "filename": "gcc/testsuite/gcc.dg/vect/vect-nest-cycle-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-1.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -43,6 +43,6 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "247d3272e8b7dc7ed70468a3f6f9ad9fa9dcadc1", "filename": "gcc/testsuite/gcc.dg/vect/vect-nest-cycle-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nest-cycle-2.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -42,6 +42,6 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "a3e5ed8979cd46770004bd2b3f5dc8a61c3e2ef7", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -48,6 +48,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "186d853dc223bc6de92a1234497cd5fff9ee7d99", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -48,6 +48,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f0cdcaebe8557432991276db137e038668268282", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -78,5 +78,5 @@ int main ()\n    is known.  */\n /* { dg-final { scan-tree-dump-times \"not vectorized: possible dependence between data-refs\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump \"zero step in outer loop.\" \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump \"zero step in outer loop.\" \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "07db614484ad0dec2b8550145d7273d95983c0a9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-big-array.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -70,5 +70,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "505eef58f17ef31648c9a28dacf4b2b697bd85de", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-lb-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb-big-array.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -74,5 +74,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c1732d9fbcaffa3a0acf7de12a49b96db749ed09", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-lb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -74,5 +74,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fa10263558f3c867ad64e4d7897d50043e68d8cb", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -70,5 +70,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7be448426519b70e12d583a59ac5bfe9a6a84184", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -48,7 +48,7 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { { vect_no_align } || {vect_sizes_32B_16B } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || {vect_sizes_32B_16B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { { vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {vect_sizes_32B_16B } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0edfefb108014733a141ef04b87af090712e8221", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -45,7 +45,7 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\"  { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8b7a72ba7e638cff5da0fc7d94a931a9e4e5ebd0", "filename": "gcc/testsuite/gcc.dg/vect/vect-pre-interact.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pre-interact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pre-interact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pre-interact.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -12,5 +12,5 @@ void foo (void)\n     res[i] = data[i] + data[i + 1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5a645c76f96b9ba460e1f62c1532e2d157c006c7", "filename": "gcc/testsuite/gcc.target/powerpc/pr65456.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65456.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65456.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65456.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc64le-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+\n+/* Verify that swap optimization properly removes swaps for unaligned\n+   vector stores.  See PR65456.  */\n+\n+typedef unsigned char UChar;\n+typedef unsigned short UShort;\n+typedef unsigned int UWord;\n+\n+typedef unsigned long SizeT;\n+typedef unsigned long Addr;\n+\n+void *memmove(void *dst, const void *src, SizeT len)\n+{\n+  const Addr WS = sizeof(UWord);/* 8 or 4 */\n+  const Addr WM = WS - 1;/* 7 or 3 */\n+\n+  /* Copying backwards. */\n+  SizeT n = len;\n+  Addr d = (Addr) dst;\n+  Addr s = (Addr) src;\n+\n+  if (((s ^ d) & WM) == 0) {\n+    /* s and d have same UWord alignment. */\n+    /* Pull up to a UWord boundary. */\n+    while ((s & WM) != 0 && n >= 1) {\n+      *(UChar *) d = *(UChar *) s;\n+      s += 1;\n+      d += 1;\n+      n -= 1;\n+    }\n+    /* Copy UWords. */\n+    while (n >= WS) {\n+      *(UWord *) d = *(UWord *) s;\n+      s += WS;\n+      d += WS;\n+      n -= WS;\n+    }\n+    if (n == 0)\n+      return dst;\n+  }\n+  if (((s | d) & 1) == 0) {\n+    /* Both are 16-aligned; copy what we can thusly. */\n+    while (n >= 2) {\n+      *(UShort *) d = *(UShort *) s;\n+      s += 2;\n+      d += 2;\n+      n -= 2;\n+    }\n+  }\n+  /* Copy leftovers, or everything if misaligned. */\n+  while (n >= 1) {\n+    *(UChar *) d = *(UChar *) s;\n+    s += 1;\n+    d += 1;\n+    n -= 1;\n+  }\n+\n+  return dst;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+/* { dg-final { scan-assembler-not \"xxswapd\" } } */"}, {"sha": "821694fb7c29f3bbba722a8636e513c6b627cd31", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vectorize-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-2.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -59,7 +59,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d190ded495868201f147c145de912b7efc554967", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vectorize-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-4.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -55,7 +55,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5903568be952ed0bb108ebe2e540e8e54921bb84", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vectorize-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-6.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -59,7 +59,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "51b0300b3926375aeeb95cf6889bed6317e72b9e", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vectorize-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vectorize-7.c?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -59,7 +59,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail {! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" {xfail { {! vect_hw_misalign } || powerpc*-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b4358c814304dbaa2aae8a3c9eaaf6071649dfbd", "filename": "gcc/testsuite/gfortran.dg/vect/vect-2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-2.f90?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -15,8 +15,8 @@ SUBROUTINE FOO(A, B, C)\n ! support unaligned loads).\n \n ! { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail { vect_no_align || { ! vector_alignment_reachable } } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { vect_no_align && { ! vector_alignment_reachable } } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" {target { vect_no_align || { { ! vector_alignment_reachable  } && { ! vect_hw_misalign } } } } } } \n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vector_alignment_reachable } } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target { { vect_no_align && { ! vect_hw_misalign } } && { ! vector_alignment_reachable } } } } }\n+! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" {target { { vect_no_align && { ! vect_hw_misalign } } || { { ! vector_alignment_reachable  } && { ! vect_hw_misalign } } } } } }\n ! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "d70c6b4d1c1ed3c6f1fde80ec97aee62d7636bcf", "filename": "gcc/testsuite/gfortran.dg/vect/vect-3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -6,10 +6,10 @@ SUBROUTINE SAXPY(X, Y, A, N)\n Y = Y + A * X\n END\n \n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { {! vect_no_align} && { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } }\n ! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { {! vect_no_align} && { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || {! vector_alignment_reachable}} } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align } || { ! vector_alignment_reachable} } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable}} } } }\n+! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || { ! vector_alignment_reachable} } } } }\n \n ! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "0d29852704fde361bb3b69d76aa8494da05d32ec", "filename": "gcc/testsuite/gfortran.dg/vect/vect-4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-4.f90?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -10,8 +10,8 @@ SUBROUTINE SAXPY(X, Y, A)\n END\n \n ! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } \n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || {! vector_alignment_reachable} } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align } || {! vector_alignment_reachable} } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n+! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n ! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } }\n ! { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 1 \"vect\" } }\n ! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "77ef77b09b6a21c04a20d4cd8d92cff121fd8b33", "filename": "gcc/testsuite/gfortran.dg/vect/vect-5.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -36,8 +36,8 @@ program main\n         end\n \n ! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || {! vector_alignment_reachable} } } } }\n-! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } }\n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align && { ! vect_hw_misalign } } || {! vector_alignment_reachable} } } } }\n+! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } }\n+! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { {! vector_alignment_reachable} && {! vect_hw_misalign} } } } }\n ! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "c23d1cbb6e19c9635cd68321e1d77ddd8d9f70dd", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b83ff58666092c0fb368d47bbcd75f198a453/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=047b83ff58666092c0fb368d47bbcd75f198a453", "patch": "@@ -4214,6 +4214,7 @@ proc check_effective_target_vect_no_align { } {\n \t     || [istarget sparc*-*-*]\n \t     || [istarget ia64-*-*]\n \t     || [check_effective_target_arm_vect_no_misalign]\n+\t     || ([istarget powerpc*-*-*] && [check_p8vector_hw_available])\n \t     || ([istarget mips*-*-*]\n \t\t && [check_effective_target_mips_loongson]) } {\n \t    set et_vect_no_align_saved 1\n@@ -4235,6 +4236,7 @@ proc check_effective_target_vect_hw_misalign { } {\n     } else {\n         set et_vect_hw_misalign_saved 0\n        if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n+            || ([istarget powerpc*-*-*] && [check_p8vector_hw_available])\n \t    || [istarget aarch64*-*-*] } {\n           set et_vect_hw_misalign_saved 1\n        }\n@@ -5973,7 +5975,7 @@ proc check_vect_support_and_set_flags { } {\n \n         lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n         if [check_p8vector_hw_available] {\n-            lappend DEFAULT_VECTCFLAGS \"-mpower8-vector\" \"-mno-allow-movmisalign\"\n+            lappend DEFAULT_VECTCFLAGS \"-mpower8-vector\"\n         } elseif [check_vsx_hw_available] {\n             lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n         }"}]}