{"sha": "4b404517536c85a092184a540f30d8bd5a496e26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0MDQ1MTc1MzZjODVhMDkyMTg0YTU0MGYzMGQ4YmQ1YTQ5NmUyNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-05-20T23:21:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-05-20T23:21:59Z"}, "message": "re PR other/930 (Out of date docs for C99 features as extensions)\n\n\t* extend.texi: Clarify documentation of extensions included in ISO\n\tC99.  Prefer C99 terminology and syntax to old GNU terminology and\n\tsyntax.  Add more index entries.  Document mixed declarations and\n\tcode as an extension in C89 mode.  Warn about future changes to\n\tsemantics of inline functions.  Fixes PR other/930.\n\nFrom-SVN: r42363", "tree": {"sha": "bcf147eb39e5db47a5fe11e781d7239311620f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcf147eb39e5db47a5fe11e781d7239311620f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b404517536c85a092184a540f30d8bd5a496e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b404517536c85a092184a540f30d8bd5a496e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b404517536c85a092184a540f30d8bd5a496e26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b404517536c85a092184a540f30d8bd5a496e26/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d6fb976576aba2971ad6cd68228a64b0c83e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d6fb976576aba2971ad6cd68228a64b0c83e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d6fb976576aba2971ad6cd68228a64b0c83e28"}], "stats": {"total": 182, "additions": 131, "deletions": 51}, "files": [{"sha": "10717823d7024d8e56ec2e5c201f23914061ac8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b404517536c85a092184a540f30d8bd5a496e26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b404517536c85a092184a540f30d8bd5a496e26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b404517536c85a092184a540f30d8bd5a496e26", "patch": "@@ -1,3 +1,11 @@\n+2001-05-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* extend.texi: Clarify documentation of extensions included in ISO\n+\tC99.  Prefer C99 terminology and syntax to old GNU terminology and\n+\tsyntax.  Add more index entries.  Document mixed declarations and\n+\tcode as an extension in C89 mode.  Warn about future changes to\n+\tsemantics of inline functions.  Fixes PR other/930.\n+\n Sun May 20 16:39:24 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (expand_expr, case ARRAY_REF): Don't fold constant"}, {"sha": "166f74458bd3f0499e31c924922077f7be032e16", "filename": "gcc/extend.texi", "status": "modified", "additions": 123, "deletions": 51, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b404517536c85a092184a540f30d8bd5a496e26/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b404517536c85a092184a540f30d8bd5a496e26/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=4b404517536c85a092184a540f30d8bd5a496e26", "patch": "@@ -17,12 +17,8 @@ These extensions are available in C and Objective C.  Most of them are\n also available in C++.  @xref{C++ Extensions,,Extensions to the\n C++ Language}, for extensions that apply @emph{only} to C++.\n \n-@c FIXME: document clearly which features are in ISO C99, but also\n-@c accepted as extensions for -std=gnu89 and possibly for C++.\n-@c See PR other/930.\n-\n-@c FIXME: the documentation for preprocessor extensions here is out of\n-@c date.  See PR other/928.\n+Some features that are in ISO C99 but not C89 or C++ are also, as\n+extensions, accepted by GCC in C89 mode and in C++.\n \n @c The only difference between the two versions of this menu is that the\n @c version for clear INTERNALS has an extra node, \"Constraints\" (which\n@@ -49,11 +45,12 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Subscripting::        Any array can be subscripted, even if not an lvalue.\n * Pointer Arith::       Arithmetic on @code{void}-pointers and function pointers.\n * Initializers::        Non-constant initializers.\n-* Constructors::        Constructor expressions give structures, unions\n+* Compound Literals::   Compound literals give structures, unions\n                          or arrays as values.\n-* Labeled Elements::\tLabeling elements of initializers.\n+* Designated Inits::\tLabeling elements of initializers.\n * Cast to Union::       Casting to union type from any member of the union.\n * Case Ranges::\t\t`case 1 ... 9' and such.\n+* Mixed Declarations::\tMixing declarations and code.\n * Function Attributes:: Declaring that functions have no side effects,\n                          or that they can never return.\n * Attribute Syntax::    Formal syntax for attributes.\n@@ -99,11 +96,12 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Subscripting::        Any array can be subscripted, even if not an lvalue.\n * Pointer Arith::       Arithmetic on @code{void}-pointers and function pointers.\n * Initializers::        Non-constant initializers.\n-* Constructors::        Constructor expressions give structures, unions\n+* Compound Literals::   Compound literals give structures, unions\n                          or arrays as values.\n-* Labeled Elements::\tLabeling elements of initializers.\n+* Designated Inits::\tLabeling elements of initializers.\n * Cast to Union::       Casting to union type from any member of the union.\n * Case Ranges::\t\t`case 1 ... 9' and such.\n+* Mixed Declarations::\tMixing declarations and code.\n * Function Attributes:: Declaring that functions have no side effects,\n                          or that they can never return.\n * Attribute Syntax::    Formal syntax for attributes.\n@@ -788,9 +786,12 @@ effects of recomputing it.\n @cindex @code{long long} data types\n @cindex double-word arithmetic\n @cindex multiprecision arithmetic\n+@cindex @code{LL} integer suffix\n+@cindex @code{ULL} integer suffix\n \n-GNU C supports data types for integers that are twice as long as\n-@code{int}.  Simply write @code{long long int} for a signed integer, or\n+ISO C99 supports data types for integers that are at least 64 bits wide,\n+and as an extension GCC supports them in C89 mode and in C++.\n+Simply write @code{long long int} for a signed integer, or\n @code{unsigned long long int} for an unsigned integer.  To make an\n integer constant of type @code{long long int}, add the suffix @code{LL}\n to the integer.  To make an integer constant of type @code{unsigned long\n@@ -815,30 +816,48 @@ Likewise, if the function expects @code{long long int} and you pass\n @node Complex\n @section Complex Numbers\n @cindex complex numbers\n+@cindex @code{_Complex} keyword\n+@cindex @code{__complex__} keyword\n \n-GNU C supports complex data types.  You can declare both complex integer\n-types and complex floating types, using the keyword @code{__complex__}.\n+ISO C99 supports complex floating data types, and as an extension GCC\n+supports them in C89 mode and in C++, and supports complex integer data\n+types which are not part of ISO C99.  You can declare complex types\n+using the keyword @code{_Complex}.  As an extension, the older GNU\n+keyword @code{__complex__} is also supported.\n \n-For example, @samp{__complex__ double x;} declares @code{x} as a\n+For example, @samp{_Complex double x;} declares @code{x} as a\n variable whose real part and imaginary part are both of type\n-@code{double}.  @samp{__complex__ short int y;} declares @code{y} to\n+@code{double}.  @samp{_Complex short int y;} declares @code{y} to\n have real and imaginary parts of type @code{short int}; this is not\n likely to be useful, but it shows that the set of complex types is\n complete.\n \n To write a constant with a complex data type, use the suffix @samp{i} or\n @samp{j} (either one; they are equivalent).  For example, @code{2.5fi}\n-has type @code{__complex__ float} and @code{3i} has type\n-@code{__complex__ int}.  Such a constant always has a pure imaginary\n+has type @code{_Complex float} and @code{3i} has type\n+@code{_Complex int}.  Such a constant always has a pure imaginary\n value, but you can form any complex value you like by adding one to a\n-real constant.\n+real constant.  This is a GNU extension; if you have an ISO C99\n+conforming C library (such as GNU libc), and want to construct complex\n+constants of floating type, you should include @code{<complex.h>} and\n+use the macros @code{I} or @code{_Complex_I} instead.\n \n+@cindex @code{__real__} keyword\n+@cindex @code{__imag__} keyword\n To extract the real part of a complex-valued expression @var{exp}, write\n @code{__real__ @var{exp}}.  Likewise, use @code{__imag__} to\n-extract the imaginary part.\n+extract the imaginary part.  This is a GNU extension; for values of\n+floating type, you should use the ISO C99 functions @code{crealf},\n+@code{creal}, @code{creall}, @code{cimagf}, @code{cimag} and\n+@code{cimagl}, declared in @code{<complex.h>} and also provided as\n+builtin functions by GCC.\n \n+@cindex complex conjugation\n The operator @samp{~} performs complex conjugation when used on a value\n-with a complex type.\n+with a complex type.  This is a GNU extension; for values of\n+floating type, you should use the ISO C99 functions @code{conjf},\n+@code{conj} and @code{conjl}, declared in @code{<complex.h>} and also\n+provided as builtin functions by GCC.\n \n GNU CC can allocate complex automatic variables in a noncontiguous\n fashion; it's even possible for the real part to be in a register while\n@@ -857,9 +876,11 @@ them as a single variable with a complex type.\n @section Hex Floats\n @cindex hex floats\n \n-GNU CC recognizes floating-point numbers written not only in the usual\n+ISO C99 supports floating-point numbers written not only in the usual\n decimal notation, such as @code{1.55e1}, but also numbers such as\n-@code{0x1.fp3} written in hexadecimal format.  In that format the\n+@code{0x1.fp3} written in hexadecimal format.  As a GNU extension, GCC\n+supports this in C89 mode (except in some cases when strictly\n+conforming) and in C++.  In that format the\n @code{0x} hex introducer and the @code{p} or @code{P} exponent field are\n mandatory.  The exponent is a decimal number that indicates the power of\n 2 by which the significant part will be multiplied.  Thus @code{0x1.f} is\n@@ -968,8 +989,12 @@ struct foo d[1] = @{ @{ 1 @{ 2, 3, 4 @} @} @};  // Illegal.\n @section Arrays of Variable Length\n @cindex variable-length arrays\n @cindex arrays of variable length\n+@cindex VLAs\n \n-Variable-length automatic arrays are allowed in GNU C.  These arrays are\n+Variable-length automatic arrays are allowed in ISO C99, and as an\n+extension GCC accepts them in C89 mode and in C++.  (However, GCC's\n+implementation of variable-length arrays does not yet conform in detail\n+to the ISO C99 standard.)  These arrays are\n declared like any other automatic arrays, but with a length that is not\n a constant expression.  The storage is allocated at the point of\n declaration and deallocated when the brace-level is exited.  For\n@@ -1040,7 +1065,8 @@ You can write any number of such parameter forward declarations in the\n parameter list.  They can be separated by commas or semicolons, but the\n last one must end with a semicolon, which is followed by the ``real''\n parameter declarations.  Each forward declaration must match a ``real''\n-declaration in parameter name and data type.\n+declaration in parameter name and data type.  ISO C99 does not support\n+parameter forward declarations.\n \n @node Variadic Macros\n @section Macros with a Variable Number of Arguments.\n@@ -1142,8 +1168,10 @@ removed.\n \n @cindex subscripting and function values\n Subscripting is allowed on arrays that are not lvalues, even though the\n-unary @samp{&} operator is not.  For example, this is valid in GNU C though\n-not valid in other C dialects:\n+unary @samp{&} operator is not.  (In ISO C99, both are allowed (though\n+the array may not be used after the next sequence point), but this ISO\n+C99 feature is not yet fully supported in GCC.)  For example,\n+this is valid in GNU C though not valid in C89:\n \n @example\n @group\n@@ -1180,7 +1208,7 @@ are used.\n @cindex initializers, non-constant\n @cindex non-constant initializers\n \n-As in standard C++, the elements of an aggregate initializer for an\n+As in standard C++ and ISO C99, the elements of an aggregate initializer for an\n automatic variable are not required to be constant expressions in GNU C.\n Here is an example of an initializer with run-time varying elements:\n \n@@ -1192,17 +1220,21 @@ foo (float f, float g)\n @}\n @end example\n \n-@node Constructors\n-@section Constructor Expressions\n+@node Compound Literals\n+@section Compound Literals\n @cindex constructor expressions\n @cindex initializations in expressions\n @cindex structures, constructor expression\n @cindex expressions, constructor\n+@cindex compound literals\n+@c The GNU C name for what C99 calls compound literals was \"constructor expressions\".\n \n-GNU C supports constructor expressions.  A constructor looks like\n+ISO C99 supports compound literals.  A compound literal looks like\n a cast containing an initializer.  Its value is an object of the\n type specified in the cast, containing the elements specified in\n-the initializer.\n+the initializer.  (GCC does not yet implement the full ISO C99 semantics\n+for compound literals.)  As an extension, GCC supports compound literals\n+in C89 mode and in C++.\n \n Usually, the specified type is a structure.  Assume that\n @code{struct foo} and @code{structure} are declared as shown:\n@@ -1212,7 +1244,7 @@ struct foo @{int a; char b[2];@} structure;\n @end example\n \n @noindent\n-Here is an example of constructing a @code{struct foo} with a constructor:\n+Here is an example of constructing a @code{struct foo} with a compound literal:\n \n @example\n structure = ((struct foo) @{x + y, 'a', 0@});\n@@ -1228,36 +1260,40 @@ This is equivalent to writing the following:\n @}\n @end example\n \n-You can also construct an array.  If all the elements of the constructor\n+You can also construct an array.  If all the elements of the compound literal\n are (made up of) simple constant expressions, suitable for use in\n-initializers, then the constructor is an lvalue and can be coerced to a\n+initializers, then the compound literal is an lvalue and can be coerced to a\n pointer to its first element, as shown here:\n \n @example\n char **foo = (char *[]) @{ \"x\", \"y\", \"z\" @};\n @end example\n \n-Array constructors whose elements are not simple constants are\n-not very useful, because the constructor is not an lvalue.  There\n-are only two valid ways to use it: to subscript it, or initialize\n+Array compound literals whose elements are not simple constants are\n+not very useful, because the compound literal is not an lvalue; ISO C99\n+specifies that it is, being a temporary object with automatic storage\n+duration associated with the enclosing block, but GCC does not yet\n+implement this.  There are currently only two valid ways to use it with\n+GCC: to subscript it, or initialize\n an array variable with it.  The former is probably slower than a\n @code{switch} statement, while the latter does the same thing an\n ordinary C initializer would do.  Here is an example of\n-subscripting an array constructor:\n+subscripting an array compound literal:\n \n @example\n output = ((int[]) @{ 2, x, 28 @}) [input];\n @end example\n \n-Constructor expressions for scalar types and union types are is\n-also allowed, but then the constructor expression is equivalent\n+Compound literals for scalar types and union types are is\n+also allowed, but then the compound literal is equivalent\n to a cast.\n \n-@node Labeled Elements\n-@section Labeled Elements in Initializers\n+@node Designated Inits\n+@section Designated Initializers\n @cindex initializers with labeled elements\n @cindex labeled elements in initializers\n @cindex case labels in initializers\n+@cindex designated initializers\n \n Standard C89 requires the elements of an initializer to appear in a fixed\n order, the same as the order of the elements in the array or structure\n@@ -1335,9 +1371,11 @@ Another syntax which has the same meaning, obsolete since GCC 2.5, is\n struct point p = @{ y: yvalue, x: xvalue @};\n @end example\n \n-You can also use an element label (with either the colon syntax or the\n-period-equal syntax) when initializing a union, to specify which element\n-of the union should be used.  For example,\n+@cindex designators\n+The @samp{[@var{index}]} or @samp{.@var{fieldname}} is known as a\n+@dfn{designator}.  You can also use a designator (or the obsolete colon\n+syntax) when initializing a union, to specify which element of the union\n+should be used.  For example,\n \n @example\n union foo @{ int i; double d; @};\n@@ -1353,7 +1391,7 @@ an integer.  (@xref{Cast to Union}.)\n \n You can combine this technique of naming elements with ordinary C\n initialization of successive elements.  Each initializer element that\n-does not have a label applies to the next consecutive element of the\n+does not have a designator applies to the next consecutive element of the\n array or structure.  For example,\n \n @example\n@@ -1377,8 +1415,9 @@ int whitespace[256]\n       ['\\f'] = 1, ['\\n'] = 1, ['\\r'] = 1 @};\n @end example\n \n+@cindex designator lists\n You can also write a series of @samp{.@var{fieldname}} and\n-@samp{[@var{index}]} element labels before an @samp{=} to specify a\n+@samp{[@var{index}]} designators before an @samp{=} to specify a\n nested subobject to initialize; the list is taken relative to the\n subobject corresponding to the closest surrounding brace pair.  For\n example, with the @samp{struct point} declaration above:\n@@ -1439,7 +1478,7 @@ A cast to union type is similar to other casts, except that the type\n specified is a union type.  You can specify the type either with\n @code{union @var{tag}} or with a typedef name.  A cast to union is actually\n a constructor though, not a cast, and hence does not yield an lvalue like\n-normal casts.  (@xref{Constructors}.)\n+normal casts.  (@xref{Compound Literals}.)\n \n The types that may be cast to the union type are those of the members\n of the union.  Thus, given the following union and variables:\n@@ -1471,6 +1510,26 @@ void hack (union foo);\n hack ((union foo) x);\n @end example\n \n+@node Mixed Declarations\n+@section Mixed Declarations and Code\n+@cindex mixed declarations and code\n+@cindex declarations, mixed with code\n+@cindex code, mixed with declarations\n+\n+ISO C99 and ISO C++ allow declarations and code to be freely mixed\n+within compound statements.  As an extension, GCC also allows this in\n+C89 mode.  For example, you could do:\n+\n+@example\n+int i;\n+@dots{}\n+i++;\n+int j = i + 2;\n+@end example\n+\n+Each identifier is visible from where it is declared until the end of\n+the enclosing block.\n+\n @node Function Attributes\n @section Declaring Attributes of Functions\n @cindex function attributes\n@@ -2741,6 +2800,10 @@ inlining, depending on the particular case.  Inlining of functions is an\n optimization and it really ``works'' only in optimizing compilation.  If\n you don't use @samp{-O}, no function is really inline.\n \n+Inline functions are included in the ISO C99 standard, but there are\n+currently substantial differences between what GCC implements and what\n+the ISO C99 standard requires.\n+\n To declare a function inline, use the @code{inline} keyword in its\n declaration, like this:\n \n@@ -2812,6 +2875,12 @@ The definition in the header file will cause most calls to the function\n to be inlined.  If any uses of the function remain, they will refer to\n the single copy in the library.\n \n+For future compatibility with when GCC implements ISO C99 semantics for\n+inline functions, it is best to use @code{static inline} only.  (The\n+existing semantics will remain available when @option{-std=gnu89} is\n+specified, but eventually the default will be @option{-std=gnu99} and\n+that will implement the C99 semantics, though it does not do so yet.)\n+\n GNU C does not inline any functions when not optimizing.  It is not\n clear whether it is better to inline or not, in this case, but we found\n that a correct implementation when not optimizing was difficult.  So we\n@@ -3479,6 +3548,9 @@ This extension is not supported by GNU C++.\n \n @node Function Names\n @section Function Names as Strings\n+@cindex @code{__FUNCTION__} identifier\n+@cindex @code{__PRETTY_FUNCTION__} identifier\n+@cindex @code{__func__} identifier\n \n GNU CC predefines two magic identifiers to hold the name of the current\n function. The identifier @code{__FUNCTION__} holds the name of the function\n@@ -3535,7 +3607,7 @@ meaning inside a function, since the preprocessor does not do anything\n special with the identifier @code{__FUNCTION__}.\n \n GNU CC also supports the magic word @code{__func__}, defined by the\n-ISO standard C-99:\n+ISO standard C99:\n \n @display\n The identifier @code{__func__} is implicitly declared by the translator\n@@ -3750,7 +3822,7 @@ You may use this builtin function in either a macro or an inline\n function.  However, if you use it in an inlined function and pass an\n argument of the function as the argument to the builtin, GNU CC will\n never return 1 when you call the inline function with a string constant\n-or constructor expression (@pxref{Constructors}) and will not return 1\n+or compound literal (@pxref{Compound Literals}) and will not return 1\n when you pass a constant numeric value to the inline function unless you\n specify the @samp{-O} option.\n "}]}