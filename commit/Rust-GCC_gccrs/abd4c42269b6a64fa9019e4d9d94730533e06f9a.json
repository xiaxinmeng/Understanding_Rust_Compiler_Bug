{"sha": "abd4c42269b6a64fa9019e4d9d94730533e06f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkNGM0MjI2OWI2YTY0ZmE5MDE5ZTRkOWQ5NDczMDUzM2UwNmY5YQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-06-18T20:07:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-27T08:05:21Z"}, "message": "[Ada] Ada2020: AI12-0027 Access values and unaliased component\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Actuals): Restrict the check on matching\n\taliased components to view conversions of array types that are\n\tnot placed in an instance. In such case at runtime an object is\n\tcreated.\n\t* sem_util.ads (Is_Actual_In_Out_Parameter, Is_View_Conversion):\n\tNew subprograms.\n\t* sem_util.adb (Is_Actual_In_Out_Parameter, Is_View_Conversion):\n\tNew subprograms.", "tree": {"sha": "7b58393cbefec5568ce37aa96cb165ff683092b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b58393cbefec5568ce37aa96cb165ff683092b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd4c42269b6a64fa9019e4d9d94730533e06f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd4c42269b6a64fa9019e4d9d94730533e06f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd4c42269b6a64fa9019e4d9d94730533e06f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd4c42269b6a64fa9019e4d9d94730533e06f9a/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c4a5101bb6c18933af3b3c3daf8053660cc1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c4a5101bb6c18933af3b3c3daf8053660cc1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c4a5101bb6c18933af3b3c3daf8053660cc1b6"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "50a4287d9ce174bd0f8ae2689e30ea94d4666dd3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=abd4c42269b6a64fa9019e4d9d94730533e06f9a", "patch": "@@ -4112,27 +4112,33 @@ package body Sem_Res is\n             then\n                declare\n                   Expr_Typ : constant Entity_Id := Etype (Expression (A));\n+\n                begin\n-                  if Ekind (F) = E_In_Out_Parameter\n-                    and then Is_Array_Type (Etype (F))\n+                  --  Check RM 4.6 (24.2/2)\n+\n+                  if Is_Array_Type (Etype (F))\n+                    and then Is_View_Conversion (A)\n                   then\n                      --  In a view conversion, the conversion must be legal in\n                      --  both directions, and thus both component types must be\n                      --  aliased, or neither (4.6 (8)).\n \n-                     --  The extra rule in 4.6 (24.9.2) seems unduly\n-                     --  restrictive: the privacy requirement should not apply\n-                     --  to generic types, and should be checked in an\n-                     --  instance. ARG query is in order ???\n+                     --  Check RM 4.6 (24.8/2)\n \n                      if Has_Aliased_Components (Expr_Typ) /=\n                         Has_Aliased_Components (Etype (F))\n                      then\n-                        Error_Msg_N\n-                          (\"both component types in a view conversion must be\"\n-                            & \" aliased, or neither\", A);\n+                        --  This normally illegal conversion is legal in an\n+                        --  expanded instance body because of RM 12.3(11).\n+                        --  At runtime, conversion must create a new object.\n+\n+                        if not In_Instance then\n+                           Error_Msg_N\n+                             (\"both component types in a view conversion must\"\n+                              & \" be aliased, or neither\", A);\n+                        end if;\n \n-                     --  Comment here??? what set of cases???\n+                     --  Check RM 4.6 (24/3)\n \n                      elsif not Same_Ancestor (Etype (F), Expr_Typ) then\n                         --  Check view conv between unrelated by ref array"}, {"sha": "679b3beb67b1bcc801a87e3967db3b9a505d2f0f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=abd4c42269b6a64fa9019e4d9d94730533e06f9a", "patch": "@@ -14276,6 +14276,18 @@ package body Sem_Util is\n       return Present (Formal) and then Ekind (Formal) = E_Out_Parameter;\n    end Is_Actual_Out_Parameter;\n \n+   --------------------------------\n+   -- Is_Actual_In_Out_Parameter --\n+   --------------------------------\n+\n+   function Is_Actual_In_Out_Parameter (N : Node_Id) return Boolean is\n+      Formal : Entity_Id;\n+      Call   : Node_Id;\n+   begin\n+      Find_Actual (N, Formal, Call);\n+      return Present (Formal) and then Ekind (Formal) = E_In_Out_Parameter;\n+   end Is_Actual_In_Out_Parameter;\n+\n    -------------------------\n    -- Is_Actual_Parameter --\n    -------------------------\n@@ -19464,6 +19476,31 @@ package body Sem_Util is\n       end if;\n    end Is_Variable;\n \n+   ------------------------\n+   -- Is_View_Conversion --\n+   ------------------------\n+\n+   function Is_View_Conversion (N : Node_Id) return Boolean is\n+   begin\n+      if Nkind (N) = N_Type_Conversion\n+        and then Nkind (Unqual_Conv (N)) = N_Identifier\n+      then\n+         if Is_Tagged_Type (Etype (N))\n+           and then Is_Tagged_Type (Etype (Unqual_Conv (N)))\n+         then\n+            return True;\n+\n+         elsif Is_Actual_Parameter (N)\n+           and then (Is_Actual_Out_Parameter (N)\n+                       or else Is_Actual_In_Out_Parameter (N))\n+         then\n+            return True;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Is_View_Conversion;\n+\n    ---------------------------\n    -- Is_Visibly_Controlled --\n    ---------------------------"}, {"sha": "a6bd6e2a02cab1f6e8758fdac4fc939597c2529f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd4c42269b6a64fa9019e4d9d94730533e06f9a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=abd4c42269b6a64fa9019e4d9d94730533e06f9a", "patch": "@@ -1589,6 +1589,10 @@ package Sem_Util is\n    --  True if E is the constructed wrapper for an access_to_subprogram\n    --  type with Pre/Postconditions.\n \n+   function Is_Actual_In_Out_Parameter (N : Node_Id) return Boolean;\n+   --  Determines if N is an actual parameter of in-out mode in a subprogram\n+   --  call\n+\n    function Is_Actual_Out_Parameter (N : Node_Id) return Boolean;\n    --  Determines if N is an actual parameter of out mode in a subprogram call\n \n@@ -2188,6 +2192,12 @@ package Sem_Util is\n    --  default is True since this routine is commonly invoked as part of the\n    --  semantic analysis and it must not be disturbed by the rewriten nodes.\n \n+   function Is_View_Conversion (N : Node_Id) return Boolean;\n+   --  Returns True if N is a type_conversion whose operand is the name of an\n+   --  object and both its target type and operand type are tagged, or it\n+   --  appears in a call as an actual parameter of mode out or in out\n+   --  (RM 4.6(5/2)).\n+\n    function Is_Visibly_Controlled (T : Entity_Id) return Boolean;\n    --  Check whether T is derived from a visibly controlled type. This is true\n    --  if the root type is declared in Ada.Finalization. If T is derived"}]}