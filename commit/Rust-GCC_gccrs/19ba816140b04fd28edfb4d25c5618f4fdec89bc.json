{"sha": "19ba816140b04fd28edfb4d25c5618f4fdec89bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTliYTgxNjE0MGIwNGZkMjhlZGZiNGQyNWM1NjE4ZjRmZGVjODliYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-05-13T12:38:44Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-05-13T12:38:44Z"}, "message": "rs6000.c (mask_constant): Delete.\n\n\t* rs6000.c (mask_constant): Delete.\n\t(mask_operand): Move mask_constant() body to here.\n\t* rs6000.h (mask_constant): Delete declaration.\n\t* rs6000.md (nabsdi2): Reverse subtraction in splitter.\n\nFrom-SVN: r26925", "tree": {"sha": "9ee8670f97cb88bd11c998fd7d753ea57a9dc6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee8670f97cb88bd11c998fd7d753ea57a9dc6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ba816140b04fd28edfb4d25c5618f4fdec89bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ba816140b04fd28edfb4d25c5618f4fdec89bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ba816140b04fd28edfb4d25c5618f4fdec89bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ba816140b04fd28edfb4d25c5618f4fdec89bc/comments", "author": null, "committer": null, "parents": [{"sha": "1b01250dd06ece2a184526053a5fccd62f51f5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b01250dd06ece2a184526053a5fccd62f51f5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b01250dd06ece2a184526053a5fccd62f51f5f8"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "c193e8a9cd5bee79f11e222367b84e2ccb17904d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19ba816140b04fd28edfb4d25c5618f4fdec89bc", "patch": "@@ -1,3 +1,10 @@\n+Thu May 13 15:34:18 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.c (mask_constant): Delete.\n+\t(mask_operand): Move mask_constant() body to here.\n+\t* rs6000.h (mask_constant): Delete declaration.\n+\t* rs6000.md (nabsdi2): Reverse subtraction in splitter.\n+\n Thu May 13 02:25:01 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* cpp.texi: Fix some typos."}, {"sha": "34071f20a193b2635b68a73adcb5f020e652804d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19ba816140b04fd28edfb4d25c5618f4fdec89bc", "patch": "@@ -922,19 +922,26 @@ non_logical_cint_operand (op, mode)\n \t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n }\n \n-/* Return 1 if C is a constant that can be encoded in a mask on the\n+/* Return 1 if C is a constant that can be encoded in a 32-bit mask on the\n    RS/6000.  It is if there are no more than two 1->0 or 0->1 transitions.\n    Reject all ones and all zeros, since these should have been optimized\n    away and confuse the making of MB and ME.  */\n \n int\n-mask_constant (c)\n-     register HOST_WIDE_INT c;\n+mask_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n+  HOST_WIDE_INT c;\n   int i;\n   int last_bit_value;\n   int transitions = 0;\n \n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+\n+  c = INTVAL (op);\n+\n   if (c == 0 || c == ~0)\n     return 0;\n \n@@ -947,16 +954,6 @@ mask_constant (c)\n   return transitions <= 2;\n }\n \n-/* Return 1 if the operand is a constant that is a mask on the RS/6000. */\n-\n-int\n-mask_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  return GET_CODE (op) == CONST_INT && mask_constant (INTVAL (op));\n-}\n-\n /* Return 1 if the operand is a constant that is a PowerPC64 mask.\n    It is if there are no more than one 1->0 or 0->1 transitions.\n    Reject all ones and all zeros, since these should have been optimized"}, {"sha": "4fecba1c4bfef3ecae5ae3875a3c97c4afc4a4f4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=19ba816140b04fd28edfb4d25c5618f4fdec89bc", "patch": "@@ -3257,7 +3257,6 @@ extern int add_operand ();\n extern int non_add_cint_operand ();\n extern int non_logical_cint_operand ();\n extern int logical_operand ();\n-extern int mask_constant ();\n extern int mask_operand ();\n extern int mask64_operand ();\n extern int and64_operand ();"}, {"sha": "34ccacf9c2d545779231922150bb7299c71d4476", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba816140b04fd28edfb4d25c5618f4fdec89bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=19ba816140b04fd28edfb4d25c5618f4fdec89bc", "patch": "@@ -4963,7 +4963,7 @@\n    (set (match_dup 0) (minus:DI (match_dup 0) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*nabsdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:DI 2 \"=&r,&r\"))]\n@@ -4978,7 +4978,7 @@\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n-   (set (match_dup 0) (minus:DI (match_dup 0) (match_dup 2)))]\n+   (set (match_dup 0) (minus:DI (match_dup 2) (match_dup 0)))]\n   \"\")\n \n (define_expand \"negdi2\""}]}