{"sha": "f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViNjNjYjZkN2JiNmI3NDJkNjlmNDI4Y2M4MGQ2MGE5M2Y0NWIzYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-05T07:49:08Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-05T07:49:08Z"}, "message": "2002-10-05  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/InetAddress.java\n\t(getByAddress): Fixed documentation.\n\t(getByAddress): New method.\n\t* java/net/Inet4Address.java: New file.\n\t* java/net/URL.java\n\t(URL): Documentation added.\n\t(getContent): Documentation added.\n\t(getContent): New stubbed method.\n\t(getQuery): New method.\n\t(openConnection): Documentation added.\n\t(openStream): Documentation added.\n\t(setURLStreamHandlerFactory): Documentation added.\n\t* java/net/URI.java: New stub file.\n\t* Makefile.am\n\t(java_native_source_files): Added java/net/Inet4Address.java,\n\tjava/net/Inet6Address.java and java/net/URI.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r57841", "tree": {"sha": "c89d38b0940a603cf77e3e41a1c3da5ff31cd85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c89d38b0940a603cf77e3e41a1c3da5ff31cd85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/comments", "author": null, "committer": null, "parents": [{"sha": "fec836256eb5cd5a1e9e2a7d16f2a19797f9f0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec836256eb5cd5a1e9e2a7d16f2a19797f9f0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec836256eb5cd5a1e9e2a7d16f2a19797f9f0fb"}], "stats": {"total": 803, "additions": 800, "deletions": 3}, "files": [{"sha": "8eae4790dd91164e33c1edda77ba8f82b072fb5c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -1,3 +1,23 @@\n+2002-10-05  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/InetAddress.java\n+\t(getByAddress): Fixed documentation.\n+\t(getByAddress): New method.\n+\t* java/net/Inet4Address.java: New file.\n+\t* java/net/URL.java\n+\t(URL): Documentation added.\n+\t(getContent): Documentation added.\n+\t(getContent): New stubbed method.\n+\t(getQuery): New method.\n+\t(openConnection): Documentation added.\n+\t(openStream): Documentation added.\n+\t(setURLStreamHandlerFactory): Documentation added.\n+\t* java/net/URI.java: New stub file.\n+\t* Makefile.am\n+\t(java_native_source_files): Added java/net/Inet4Address.java,\n+\tjava/net/Inet6Address.java and java/net/URI.java.\n+\t* Makefile.in: Regenerated.\n+\n 2002-10-04  C. Scott Ananian <cananian@lesser-magoo.lcs.mit.edu>\n \t\n \t* java/lang/ProtectionDomain.java (linesep): Remove field."}, {"sha": "f56d5d5af6886f859df457d6bfd71dc9ffecf765", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -1922,6 +1922,8 @@ java/net/DatagramSocketImplFactory.java \\\n java/net/FileNameMap.java \\\n java/net/HttpURLConnection.java\t\\\n java/net/InetAddress.java \\\n+java/net/Inet4Address.java \\\n+java/net/Inet6Address.java \\\n java/net/InetSocketAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n@@ -1943,6 +1945,7 @@ java/net/SocketImplFactory.java\t\\\n java/net/SocketOptions.java \\\n java/net/SocketPermission.java \\\n java/net/SocketTimeoutException.java \\\n+java/net/URI.java \\\n java/net/URISyntaxException.java \\\n java/net/URL.java \\\n java/net/URLClassLoader.java \\"}, {"sha": "e7ff2242a3024f28b33331db336849147b597e5f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -1672,6 +1672,8 @@ java/net/DatagramSocketImplFactory.java \\\n java/net/FileNameMap.java \\\n java/net/HttpURLConnection.java\t\\\n java/net/InetAddress.java \\\n+java/net/Inet4Address.java \\\n+java/net/Inet6Address.java \\\n java/net/InetSocketAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n@@ -1693,6 +1695,7 @@ java/net/SocketImplFactory.java\t\\\n java/net/SocketOptions.java \\\n java/net/SocketPermission.java \\\n java/net/SocketTimeoutException.java \\\n+java/net/URI.java \\\n java/net/URISyntaxException.java \\\n java/net/URL.java \\\n java/net/URLClassLoader.java \\\n@@ -2912,7 +2915,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/DatagramPacket.P .deps/java/net/DatagramSocket.P \\\n .deps/java/net/DatagramSocketImpl.P \\\n .deps/java/net/DatagramSocketImplFactory.P .deps/java/net/FileNameMap.P \\\n-.deps/java/net/HttpURLConnection.P .deps/java/net/InetAddress.P \\\n+.deps/java/net/HttpURLConnection.P .deps/java/net/Inet4Address.P \\\n+.deps/java/net/Inet6Address.P .deps/java/net/InetAddress.P \\\n .deps/java/net/InetSocketAddress.P .deps/java/net/JarURLConnection.P \\\n .deps/java/net/MalformedURLException.P .deps/java/net/MulticastSocket.P \\\n .deps/java/net/NetPermission.P .deps/java/net/NetworkInterface.P \\\n@@ -2926,7 +2930,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/SocketException.P .deps/java/net/SocketImpl.P \\\n .deps/java/net/SocketImplFactory.P .deps/java/net/SocketOptions.P \\\n .deps/java/net/SocketPermission.P \\\n-.deps/java/net/SocketTimeoutException.P \\\n+.deps/java/net/SocketTimeoutException.P .deps/java/net/URI.P \\\n .deps/java/net/URISyntaxException.P .deps/java/net/URL.P \\\n .deps/java/net/URLClassLoader.P .deps/java/net/URLConnection.P \\\n .deps/java/net/URLDecoder.P .deps/java/net/URLEncoder.P \\"}, {"sha": "429919a130e4591724017ac15a61f7d3233fc700", "filename": "libjava/java/net/Inet4Address.java", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FInet4Address.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FInet4Address.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInet4Address.java?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -0,0 +1,275 @@\n+/* Inet4Address.java\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.net;\n+\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+\n+/**\n+ * @author Michael Koch\n+ * @date August 3, 2002.\n+ */\n+\n+/*\n+ * Written using on-line Java Platform 1.4 API Specification and\n+ * RFC 1884 (http://www.ietf.org/rfc/rfc1884.txt),\n+ * RFC 1918 (http://www.ietf.org/rfc/rfc1918.txt),\n+ * RFC 2365 (http://www.ietf.org/rfc/rfc2365.txt)\n+ * Status: Believed complete and correct.\n+ */\n+\n+public final class Inet4Address extends InetAddress\n+{\n+  static final long serialVersionUID = 7615067291688066509L;\n+\n+  /**\n+   * needed for serialization\n+   */\n+  private Object writeReplace () throws ObjectStreamException\n+  {\n+    return new InetAddress (addr, hostName);\n+  }\n+\n+  /**\n+   * Creates a Inet4Address\n+   * \n+   * @param addr The IP address\n+   * @param host The Hostname\n+   */\n+  protected Inet4Address(byte[] addr, String host)\n+  {\n+    super (addr, host);\n+  }\n+\n+  /**\n+   * Checks if the address is a multicast address\n+   *\n+   * @since 1.1\n+   */\n+  public boolean isMulticastAddress ()\n+  {\n+    return (addr [0] & 0xF0) == 0xE0;\n+  }\n+  \n+  /**\n+   * Checks if this address is a loopback address\n+   */\n+  public boolean isLoopbackAddress ()\n+  {\n+    return addr [0] == 0x7F;\n+  }\n+ \n+  /**\n+   * Checks if this address is a wildcard address\n+   *\n+   * @since 1.4\n+   */\n+  public boolean isAnyLocalAddress ()\n+  {\n+    byte[] anylocal = { 0, 0, 0, 0 };\n+    \n+    return addr == anylocal;\n+  }\n+\n+  /**\n+   * Checks if this address is a link local address\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isLinkLocalAddress ()\n+  {\n+    // XXX: This seems to net exist with IPv4 addresses\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if this address is a site local address\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isSiteLocalAddress ()\n+  {\n+    // 10.0.0.0/8\n+    if (addr [0] == 0x0A)\n+      return true;\n+\n+    // XXX: Suns JDK 1.4.1 (on Linux) seems to have a bug here:\n+    // it says 172.16.0.0 - 172.255.255.255 are site local addresses\n+    //\n+    // 172.16.0.0/12\n+    if (addr [0] == 0xAC && (addr [1] & 0xF0) == 0x01)\n+      return true;\n+\n+    // 192.168.0.0/16\n+    if (addr [0] == 0xC0 && addr [1] == 0xA8)\n+      return true;\n+   \n+    // XXX: Do we need to check more addresses here ?\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if this multicast address has global scope\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isMCGlobal ()\n+  {\n+    // XXX: This seems to net exist with IPv4 addresses\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if this multicast address has node scope\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isMCNodeLocal ()\n+  {\n+    // XXX: This seems to net exist with IPv4 addresses\n+    return false;\n+  }\n+  \n+  /**\n+   * Checks if this multicast address has link scope\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isMCLinkLocal ()\n+  {\n+    if (!isMulticastAddress ())\n+      return false;\n+    \n+    return (addr [0] == 0xE0)\n+\t   && (addr [1] == 0x00)\n+\t   && (addr [2] == 0x00);\n+  }\n+  \n+  /**\n+   * Checks if this multicast address has site scope\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isMCSiteLocal ()\n+  {\n+    // XXX: This seems to net exist with IPv4 addresses\n+    return false;\n+  }\n+  \n+  /**\n+   * Checks if this multicast address has organization scope\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isMCOrgLocal ()\n+  {\n+    // XXX: This seems to net exist with IPv4 addresses\n+    return false;\n+  }\n+  \n+  /**\n+   * Returns the address of the current instance\n+   */\n+  public byte[] getAddress ()\n+  {\n+    return addr;\n+  }\n+  \n+  /**\n+   * Returns the address as string\n+   * \n+   * @since 1.0.2\n+   */\n+  public String getHostAddress ()\n+  {\n+    StringBuffer sbuf = new StringBuffer (40);\n+    int len = addr.length;\n+    int i = 0;\n+    \n+    for ( ;  ; )\n+      {\n+\tsbuf.append (addr [i] & 0xFF);\n+\ti++;\n+\t\n+\tif (i == len)\n+\t  break;\n+\t\n+\tsbuf.append ('.');\n+      }\n+    \n+    return sbuf.toString ();\n+  }\n+  \n+  /**\n+   * Computes the hashcode of the instance\n+   */\n+  public int hashCode ()\n+  {\n+    int hash = 0;\n+    int len = addr.length;\n+    int i = len > 4 ? len - 4 : 0;\n+    \n+    for ( ; i < len;  i++)\n+      hash = (hash << 8) | (addr [i] & 0xFF);\n+    \n+    return hash;\n+  }\n+ \n+  /**\n+   * Compare the current Inet4Address instance with obj\n+   * \n+   * @param obj Object to compare with\n+   */\n+  public boolean equals (Object obj)\n+  {\n+    if (obj == null || ! (obj instanceof InetAddress))\n+      return false;\n+    \n+    byte[] addr1 = addr;\n+    byte[] addr2 = ((InetAddress) obj).addr;\n+    \n+    if (addr1.length != addr2.length)\n+      return false;\n+    \n+    for (int i = addr1.length;  --i >= 0; )\n+      if (addr1 [i] != addr2 [i])\n+        return false;\n+    \n+    return true;\n+  }\n+} // class Inet4Address"}, {"sha": "970627e0f08c8d8b78693f676da465359e63d389", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -230,7 +230,6 @@ public String toString()\n    * address is in getAddress()[0].\n    *\n    * @exception UnknownHostException If IP address has illegal length\n-   * be found\n    *\n    * @since 1.4\n    */\n@@ -243,6 +242,23 @@ public static InetAddress getByAddress(byte[] addr)\n     return new InetAddress (addr, \"\");\n   }\n   \n+  /**\n+   * Create an InetAddress based on the provided host name and IP address.\n+   * No name service is checked for the validity of the address.\n+   *\n+   * @exception UnknownHostException If IP address is of illegal length\n+   *\n+   * @since 1.4\n+   */\n+  public static InetAddress getByAddress (String host, byte[] addr)\n+    throws UnknownHostException\n+  {\n+    if (addr.length == 4 || addr.length == 16)\n+      return new InetAddress (addr, host);\n+    \n+    throw new UnknownHostException (\"IP address has illegal length\");\n+  }\n+  \n   /** If host is a valid numeric IP address, return the numeric address.\n    * Otherwise, return null. */\n   private static native byte[] aton (String host);"}, {"sha": "e84ac5d0cd6f5e7c2d0889f21c98f7a8f88769b0", "filename": "libjava/java/net/URI.java", "status": "added", "additions": 433, "deletions": 0, "changes": 433, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FURI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FURI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURI.java?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -0,0 +1,433 @@\n+/* URI.java - An URI class\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.net;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ * @since 1.4\n+ */\n+public final class URI\n+  implements Comparable, Serializable\n+{\n+  static final long serialVersionUID = -6052424284110960213L;\n+\n+  String string;\n+  private String scheme;\n+  private String schemeSpecificPart;\n+  private String authority;\n+  private String userInfo;\n+  private String host;\n+  private int port;\n+  private String path;\n+  private String query;\n+  private String fragment;\n+\n+  private void readObject (ObjectInputStream is)\n+    throws ClassNotFoundException, IOException\n+  {\n+  }\n+\n+  private void writeObject (ObjectOutputStream is)\n+    throws IOException\n+  {\n+  }\n+\n+  private void parseURI (String str)\n+    throws URISyntaxException\n+  {\n+  }\n+  \n+  /**\n+   * Creates an URI from the given string\n+   *\n+   * @param str The string to create the URI from\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   * @exception NullPointerException If str is null\n+   */\n+  public URI (String str)\n+    throws URISyntaxException\n+  {\n+  }\n+ \n+  /**\n+   * Create an URI from the given components\n+   *\n+   * @param scheme The scheme name\n+   * @param userInfo The username and authorization info\n+   * @param host The hostname\n+   * @param port The port number\n+   * @param path The path\n+   * @param query The query\n+   * @param fragment The fragment\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   */\n+  public URI (String scheme, String userInfo, String host, int port,\n+\t     String path, String query, String fragment)\n+    throws URISyntaxException\n+  {\n+  }\n+\n+  /**\n+   * Create an URI from the given components\n+   *\n+   * @param scheme The scheme name\n+   * @param authority The authority\n+   * @param path The apth\n+   * @param query The query\n+   * @param fragment The fragmen\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   */\n+  public URI (String scheme, String authority, String path, String query,\n+\t     String fragment)\n+    throws URISyntaxException\n+  {\n+  }\n+\n+  /**\n+   * Create an URI from the given components\n+   *\n+   * @param scheme The scheme name\n+   * @param host The hostname\n+   * @param path The path\n+   * @param fragment The fragment\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   */\n+  public URI (String scheme, String host, String path, String fragment)\n+    throws URISyntaxException\n+  {\n+  }\n+\n+  /**\n+   * Create an URI from the given components\n+   *\n+   * @param scheme The scheme name\n+   * @param ssp The scheme specific part\n+   * @param fragment The fragment\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   */\n+  public URI (String scheme, String ssp, String fragment)\n+    throws URISyntaxException\n+  {\n+  }\n+\n+  /**\n+   * Create an URI from the given string\n+   *\n+   * @param str The string to create the URI from\n+   *\n+   * @exception IllegalArgumentException If the given string violates RFC 2396\n+   * @exception NullPointerException If str is null\n+   */\n+  public static URI create (String str)\n+    throws IllegalArgumentException, URISyntaxException\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Attempts to parse this URI's authority component, if defined,\n+   * into user-information, host, and port components\n+   *\n+   * @exception URISyntaxException If the given string violates RFC 2396\n+   */\n+  public URI parseServerAuthority ()\n+     throws URISyntaxException\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns a normalizes versions of the URI\n+   */\n+  public URI normalize ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Resolves the given URI against this URI\n+   *\n+   * @param uri The URI to resolve against this URI\n+   *\n+   * @return The resulting URI\n+   *\n+   * @exception NullPointerException If uri is null\n+   */\n+  public URI resolve (URI uri)\n+  { \n+    return null;\n+  }\n+\n+  /**\n+   * Resolves the given URI string against this URI\n+   *\n+   * @param str The URI as string to resolve against this URI\n+   *\n+   * @return The resulting URI\n+   *\n+   * @exception IllegalArgumentException If the given URI string\n+   * violates RFC 2396\n+   * @exception NullPointerException If uri is null\n+   */\n+  public URI resolve (String str)\n+    throws IllegalArgumentException\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Relativizes the given URI against this URI\n+   *\n+   * @param uri The URI to relativize this URI\n+   *\n+   * @return The resulting URI\n+   *\n+   * @exception NullPointerException If uri is null\n+   */\n+  public URI relativize (URI uri)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Creates an URL from an URI\n+   *\n+   * @exception MalformedURLException If a protocol handler for the URL could\n+   * not be found, or if some other error occurred while constructing the URL\n+   * @exception IllegalArgumentException If the URI is not absolute\n+   */\n+  public URL toURL ()\n+    throws IllegalArgumentException, MalformedURLException\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the scheme of the URI\n+   */\n+  public String getScheme ()\n+  {\n+    return scheme;\n+  }\n+\n+  /**\n+   * Tells whether this URI is absolute or not\n+   */\n+  public boolean isAbsolute ()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Tell whether this URI is opaque or not\n+   */\n+  public boolean isOpaque ()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the raw scheme specific part of this URI.\n+   * The scheme-specific part is never undefined, though it may be empty\n+   */\n+  public String getRawSchemeSpecificPart ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the decoded scheme specific part of this URI.\n+   */\n+  public String getSchemeSpecificPart ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the rae authority part of this URI\n+   */\n+  public String getRawAuthority ()\n+  {\n+    return authority;\n+  }\n+\n+  /**\n+   * Returns the decoded authority part of this URI\n+   */\n+  public String getAuthority ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the raw user info part of this URI\n+   */\n+  public String getRawUserInfo ()\n+  {\n+    return userInfo;\n+  }\n+\n+  /**\n+   * Returns the decoded user info part of this URI\n+   */\n+  public String getUserInfo ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the hostname of the URI\n+   */\n+  public String getHost ()\n+  {\n+    return host;\n+  }\n+\n+  /**\n+   * Returns the port number of the URI\n+   */\n+  public int getPort ()\n+  {\n+    return port;\n+  }\n+\n+  /**\n+   * Returns the raw path part of this URI\n+   */\n+  public String getRawPath ()\n+  {\n+    return path;\n+  }\n+\n+  /**\n+   * Returns the path of the URI\n+   */\n+  public String getPath ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the raw query part of this URI\n+   */\n+  public String getRawQuery ()\n+  {\n+    return query;\n+  }\n+\n+  /**\n+   * Returns the query of the URI\n+   */\n+  public String getQuery ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Return the raw fragment part of this URI\n+   */\n+  public String getRawFragment ()\n+  {\n+    return fragment;\n+  }\n+\n+  /**\n+   * Returns the fragment of the URI\n+   */\n+  public String getFragment ()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Compares the URI with a given object\n+   *\n+   * @param obj The obj to compare the URI with\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Computes the hascode of the URI\n+   */\n+  public int hashCode ()\n+  {\n+    return 0;\n+  }\n+\n+  /**\n+   * Compare the URI with another object that must be an URI too\n+   *\n+   * @param obj This object to compare this URI with\n+   *\n+   * @exception ClassCastException If given object ist not an URI\n+   */\n+  public int compareTo (Object obj)\n+    throws ClassCastException\n+  {\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the URI as string\n+   */\n+  public String toString ()\n+  {\n+    return \"\";\n+  }\n+\n+  /**\n+   * Returns the URI as US-ASCII string\n+   */\n+  public String toASCIIString ()\n+  {\n+    return \"\";\n+  }\n+}"}, {"sha": "d93dbfbb2aab533c3ebea0cf32e9c03106d7ca48", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=f5b63cb6d7bb6b742d69f428cc80d60a93f45b3a", "patch": "@@ -83,6 +83,9 @@ public URL(String protocol, String host, String file)\n    * @param handler The stream handler for the URL\n    *\n    * @exception MalformedURLException If an error occurs\n+   * @exception SecurityException If  a security manager exists and its\n+   * checkPermission method doesn't allow specifying a stream handler\n+   * explicitly\n    *\n    * @since 1.2\n    */\n@@ -166,6 +169,9 @@ public URL(URL context, String spec) throws MalformedURLException\n    * @param handler The stream handler for the URL\n    *\n    * @exception MalformedURLException If an error occurs\n+   * @exception SecurityException If  a security manager exists and its\n+   * checkPermission method doesn't allow specifying a stream handler\n+   * explicitly\n    * \n    * @since 1.2\n    */\n@@ -287,13 +293,26 @@ public boolean equals(Object obj)\n   /**\n    * Gets the contents of this URL\n    *\n+   * @exception IOException If an error occurs\n+   *\n    * @since 1.3\n    */\n   public final Object getContent() throws IOException\n   {\n     return openConnection().getContent();\n   }\n \n+  /**\n+   * Gets the contents of this URL\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public final Object getContent (Class[] classes) throws IOException\n+  {\n+    // FIXME: implement this\n+    return getContent();\n+  }\n+\n   public String getFile()\n   {\n     return file;\n@@ -366,6 +385,14 @@ public String getUserInfo ()\n     return at < 0 ? null : host.substring(0, at);\n   }\n \n+  /**\n+   * Returns the query of the URL\n+   */\n+  public String getQuery ()\n+  {\n+    return query;\n+  }\n+\n   public int hashCode()\n   {\n     // JCL book says this is computed using (only) the hashcodes of the \n@@ -389,11 +416,23 @@ public int hashCode()\n \tport + file.hashCode());\n   }\n \n+  /**\n+   * Returns a URLConnection object that represents a connection to the remote\n+   * object referred to by the URL\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public URLConnection openConnection() throws IOException\n   {\n     return handler.openConnection(this);\n   }\n \n+  /**\n+   * Opens a connection to this URL and returns an InputStream for reading\n+   * from that connection\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public final InputStream openStream() throws IOException\n   {\n     return openConnection().getInputStream();\n@@ -458,6 +497,13 @@ protected void set(String protocol, String host, int port,\n     hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n+  /**\n+   * Sets an application's URLStreamHandlerFactory\n+   *\n+   * @exception Error If the application has already set a factory\n+   * @exception SecurityException If a security manager exists and its\n+   * checkSetFactory method doesn't allow the operation\n+   */\n   public static synchronized void\n \tsetURLStreamHandlerFactory(URLStreamHandlerFactory fac)\n   {"}]}