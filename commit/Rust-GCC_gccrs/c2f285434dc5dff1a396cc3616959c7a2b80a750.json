{"sha": "c2f285434dc5dff1a396cc3616959c7a2b80a750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmMjg1NDM0ZGM1ZGZmMWEzOTZjYzM2MTY5NTljN2EyYjgwYTc1MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-15T17:26:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:09Z"}, "message": "[Ada] Use Standard.Natural on indices in support routines for Ada.Tags\n\n2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_atag.ads (Build_Inherit_Predefined_Prims): Change type\n\tof Num_Predef_Prim parameter from Int to Nat.\n\t* exp_atag.adb (Build_Range): New procedure.\n\t(Build_Val): Likewise.\n\t(Build_CW_Membership): Call Build_Val.\n\t(Build_Get_Predefined_Prim_Op_Address): Likewise.\n\t(Build_Inherit_CPP_Prims): Likewise.\n\t(Build_Get_Prim_Op_Address): Likewise.\n\t(Build_Set_Predefined_Prim_Op_Address): Likewise.\n\t(Build_Inherit_Prims): Call Build_Range.\n\t(Build_Inherit_Predefined_Prims): Likewise.  Change type of\n\tNum_Predef_Prim parameter from Int to Nat.", "tree": {"sha": "f9e75d24bd5732e8a09eb2cc6c1e481b591153e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e75d24bd5732e8a09eb2cc6c1e481b591153e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f285434dc5dff1a396cc3616959c7a2b80a750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f285434dc5dff1a396cc3616959c7a2b80a750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f285434dc5dff1a396cc3616959c7a2b80a750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f285434dc5dff1a396cc3616959c7a2b80a750/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6618a9b67ca825c92d0cdd88df8c81bdf58de90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6618a9b67ca825c92d0cdd88df8c81bdf58de90c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6618a9b67ca825c92d0cdd88df8c81bdf58de90c"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "a8c7f23f3c16cdcd2099d5a2e24dbb549c83500b", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f285434dc5dff1a396cc3616959c7a2b80a750/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f285434dc5dff1a396cc3616959c7a2b80a750/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=c2f285434dc5dff1a396cc3616959c7a2b80a750", "patch": "@@ -57,6 +57,9 @@ package body Exp_Atag is\n    --    To_Dispatch_Table_Ptr\n    --      (To_Address (Tag_Node) - Tag_Node.Prims_Ptr'Position);\n \n+   function Build_Range (Loc : Source_Ptr; Lo, Hi : Nat) return Node_Id;\n+   --  Build an N_Range node for [Lo; Hi] with Standard.Natural type\n+\n    function Build_TSD\n      (Loc           : Source_Ptr;\n       Tag_Node_Addr : Node_Id) return Node_Id;\n@@ -66,6 +69,9 @@ package body Exp_Atag is\n    --  Generate: To_Type_Specific_Data_Ptr\n    --              (To_Addr_Ptr (Tag_Node_Addr - Typeinfo_Offset).all);\n \n+   function Build_Val (Loc : Source_Ptr; V : Uint) return Node_Id;\n+   --  Build an N_Integer_Literal node for V with Standard.Natural type\n+\n    ------------------------------------------------\n    -- Build_Common_Dispatching_Select_Statements --\n    ------------------------------------------------\n@@ -241,7 +247,7 @@ package body Exp_Atag is\n           Left_Opnd =>\n             Make_Op_Ge (Loc,\n               Left_Opnd  => New_Occurrence_Of (Index, Loc),\n-              Right_Opnd => Make_Integer_Literal (Loc, Uint_0)),\n+              Right_Opnd => Build_Val (Loc, Uint_0)),\n \n           Right_Opnd =>\n             Make_Op_Eq (Loc,\n@@ -358,7 +364,7 @@ package body Exp_Atag is\n                       New_Occurrence_Of\n                         (RTE (RE_DT_Predef_Prims_Offset), Loc)))))),\n           Expressions =>\n-            New_List (Make_Integer_Literal (Loc, Position)));\n+            New_List (Build_Val (Loc, Position)));\n    end Build_Get_Predefined_Prim_Op_Address;\n \n    -----------------------------\n@@ -428,7 +434,7 @@ package body Exp_Atag is\n                           (Node (Last_Elmt (Access_Disp_Table (Typ))),\n                            New_Occurrence_Of (Typ_Tag, Loc))),\n                     Expressions =>\n-                       New_List (Make_Integer_Literal (Loc, Prim_Pos))),\n+                       New_List (Build_Val (Loc, UI_From_Int (Prim_Pos)))),\n \n                Expression =>\n                  Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n@@ -566,7 +572,7 @@ package body Exp_Atag is\n                                        New_Occurrence_Of (Typ_Tag, Loc))),\n                                 Expressions =>\n                                    New_List\n-                                    (Make_Integer_Literal (Loc, Prim_Pos))),\n+                                    (Build_Val (Loc, UI_From_Int (Prim_Pos)))),\n \n                             Expression =>\n                               Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n@@ -638,9 +644,7 @@ package body Exp_Atag is\n                        New_Occurrence_Of\n                          (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                  Discrete_Range =>\n-                   Make_Range (Loc,\n-                   Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                   High_Bound => Make_Integer_Literal (Loc, Num_Prims))),\n+                   Build_Range (Loc, 1, Num_Prims)),\n \n              Expression =>\n                Make_Slice (Loc,\n@@ -652,9 +656,7 @@ package body Exp_Atag is\n                        New_Occurrence_Of\n                          (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                  Discrete_Range =>\n-                   Make_Range (Loc,\n-                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                     High_Bound => Make_Integer_Literal (Loc, Num_Prims))));\n+                   Build_Range (Loc, 1, Num_Prims)));\n       else\n          return\n            Make_Assignment_Statement (Loc,\n@@ -665,9 +667,7 @@ package body Exp_Atag is\n                      (Node (Last_Elmt (Access_Disp_Table (Typ))),\n                       New_Tag_Node),\n                  Discrete_Range =>\n-                   Make_Range (Loc,\n-                   Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                   High_Bound => Make_Integer_Literal (Loc, Num_Prims))),\n+                   Build_Range (Loc, 1, Num_Prims)),\n \n              Expression =>\n                Make_Slice (Loc,\n@@ -676,9 +676,7 @@ package body Exp_Atag is\n                      (Node (Last_Elmt (Access_Disp_Table (Typ))),\n                       Old_Tag_Node),\n                  Discrete_Range =>\n-                   Make_Range (Loc,\n-                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                     High_Bound => Make_Integer_Literal (Loc, Num_Prims))));\n+                   Build_Range (Loc, 1, Num_Prims)));\n       end if;\n    end Build_Inherit_Prims;\n \n@@ -715,7 +713,7 @@ package body Exp_Atag is\n       New_Node :=\n         Make_Indexed_Component (Loc,\n           Prefix      => New_Prefix,\n-          Expressions => New_List (Make_Integer_Literal (Loc, Position)));\n+          Expressions => New_List (Build_Val (Loc, Position)));\n    end Build_Get_Prim_Op_Address;\n \n    -----------------------------\n@@ -745,7 +743,7 @@ package body Exp_Atag is\n      (Loc              : Source_Ptr;\n       Old_Tag_Node     : Node_Id;\n       New_Tag_Node     : Node_Id;\n-      Num_Predef_Prims : Int) return Node_Id\n+      Num_Predef_Prims : Nat) return Node_Id\n    is\n    begin\n       return\n@@ -758,9 +756,8 @@ package body Exp_Atag is\n                     Make_Explicit_Dereference (Loc,\n                       Unchecked_Convert_To (RTE (RE_Addr_Ptr),\n                         New_Tag_Node)))),\n-              Discrete_Range => Make_Range (Loc,\n-                Make_Integer_Literal (Loc, Uint_1),\n-                Make_Integer_Literal (Loc, Num_Predef_Prims))),\n+              Discrete_Range =>\n+                Build_Range (Loc, 1, Num_Predef_Prims)),\n \n           Expression =>\n             Make_Slice (Loc,\n@@ -771,9 +768,7 @@ package body Exp_Atag is\n                       Unchecked_Convert_To (RTE (RE_Addr_Ptr),\n                         Old_Tag_Node)))),\n               Discrete_Range =>\n-                Make_Range (Loc,\n-                  Make_Integer_Literal (Loc, 1),\n-                  Make_Integer_Literal (Loc, Num_Predef_Prims))));\n+                Build_Range (Loc, 1, Num_Predef_Prims)));\n    end Build_Inherit_Predefined_Prims;\n \n    -------------------------\n@@ -808,6 +803,23 @@ package body Exp_Atag is\n                   (RTE (RE_DT_Offset_To_Top_Offset), Loc)))));\n    end Build_Offset_To_Top;\n \n+   -----------------\n+   -- Build_Range --\n+   -----------------\n+\n+   function Build_Range (Loc : Source_Ptr; Lo, Hi : Nat) return Node_Id is\n+      Result : Node_Id;\n+\n+   begin\n+      Result :=\n+        Make_Range (Loc,\n+           Low_Bound  => Build_Val (Loc, UI_From_Int (Lo)),\n+           High_Bound => Build_Val (Loc, UI_From_Int (Hi)));\n+      Set_Etype (Result, Standard_Natural);\n+      Set_Analyzed (Result);\n+      return Result;\n+   end Build_Range;\n+\n    ------------------------------------------\n    -- Build_Set_Predefined_Prim_Op_Address --\n    ------------------------------------------\n@@ -828,7 +840,7 @@ package body Exp_Atag is\n                    Make_Explicit_Dereference (Loc,\n                      Unchecked_Convert_To (RTE (RE_Addr_Ptr), Tag_Node))),\n                Expressions =>\n-                 New_List (Make_Integer_Literal (Loc, Position))),\n+                 New_List (Build_Val (Loc, Position))),\n \n            Expression => Address_Node);\n    end Build_Set_Predefined_Prim_Op_Address;\n@@ -939,4 +951,19 @@ package body Exp_Atag is\n                     (RTE (RE_DT_Typeinfo_Ptr_Size), Loc))))));\n    end Build_TSD;\n \n+   ---------------\n+   -- Build_Val --\n+   ---------------\n+\n+   function Build_Val (Loc : Source_Ptr; V : Uint) return Node_Id is\n+      Result : Node_Id;\n+\n+   begin\n+      Result := Make_Integer_Literal (Loc, V);\n+      Set_Etype (Result, Standard_Natural);\n+      Set_Is_Static_Expression (Result);\n+      Set_Analyzed (Result);\n+      return Result;\n+   end Build_Val;\n+\n end Exp_Atag;"}, {"sha": "f9109534d9fbb4a67a701c3dd27b7def37fb93b3", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f285434dc5dff1a396cc3616959c7a2b80a750/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f285434dc5dff1a396cc3616959c7a2b80a750/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=c2f285434dc5dff1a396cc3616959c7a2b80a750", "patch": "@@ -112,7 +112,7 @@ package Exp_Atag is\n      (Loc              : Source_Ptr;\n       Old_Tag_Node     : Node_Id;\n       New_Tag_Node     : Node_Id;\n-      Num_Predef_Prims : Int) return Node_Id;\n+      Num_Predef_Prims : Nat) return Node_Id;\n    --  Build code that inherits the predefined primitives of the parent.\n    --\n    --  Generates: Predefined_DT (New_T).D (All_Predefined_Prims) :="}]}