{"sha": "a153644f75bb7e5c7814eb2a7a4737108018748f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1MzY0NGY3NWJiN2U1Yzc4MTRlYjJhN2E0NzM3MTA4MDE4NzQ4Zg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-11-07T19:36:26Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-11-07T19:36:26Z"}, "message": "replace BITS_PER_UNIT with __CHAR_BIT__ in target libs\n\nlibgcc/ChangeLog:\n\n2015-11-07  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/visium/lib2funcs.c (__set_trampoline_parity): Use\n\t__CHAR_BIT__ instead of BITS_PER_UNIT.\n\t* fixed-bit.h: Likewise.\n\t* fp-bit.h: Likewise.\n\t* libgcc2.c (__popcountSI2): Likewise.\n\t(__popcountDI2): Likewise.\n\t* libgcc2.h: Likewise.\n\t* libgcov.h: Likewise.\n\nlibobjc/ChangeLog:\n\n2015-11-07  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\tPR libobjc/24775\n\t* encoding.c (_darwin_rs6000_special_round_type_align): Use\n\t__CHAR_BIT__ instead of BITS_PER_UNIT.\n\t(objc_sizeof_type): Likewise.\n\t(objc_layout_structure): Likewise.\n\t(objc_layout_structure_next_member): Likewise.\n\t(objc_layout_finish_structure): Likewise.\n\t(objc_layout_structure_get_info): Likewise.\n\nFrom-SVN: r229936", "tree": {"sha": "9febea399aa1894ed3141daf9c1b518b6631b55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9febea399aa1894ed3141daf9c1b518b6631b55a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a153644f75bb7e5c7814eb2a7a4737108018748f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a153644f75bb7e5c7814eb2a7a4737108018748f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a153644f75bb7e5c7814eb2a7a4737108018748f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a153644f75bb7e5c7814eb2a7a4737108018748f/comments", "author": null, "committer": null, "parents": [{"sha": "3dee689d8fa82d36a83926931bb9ebaad18ee465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dee689d8fa82d36a83926931bb9ebaad18ee465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dee689d8fa82d36a83926931bb9ebaad18ee465"}], "stats": {"total": 109, "additions": 64, "deletions": 45}, "files": [{"sha": "e4fb81bad0b00753579c8a5de2299c612b03506e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -1,3 +1,14 @@\n+2015-11-07  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/visium/lib2funcs.c (__set_trampoline_parity): Use\n+\t__CHAR_BIT__ instead of BITS_PER_UNIT.\n+\t* fixed-bit.h: Likewise.\n+\t* fp-bit.h: Likewise.\n+\t* libgcc2.c (__popcountSI2): Likewise.\n+\t(__popcountDI2): Likewise.\n+\t* libgcc2.h: Likewise.\n+\t* libgcov.h: Likewise.\n+\n 2015-11-07  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/atexit.c: New file."}, {"sha": "ed9561f20f198fd38ee9f99a08d36d6dc6ea1152", "filename": "libgcc/config/visium/lib2funcs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -315,7 +315,7 @@ __set_trampoline_parity (UWtype *addr)\n {\n   int i;\n \n-  for (i = 0; i < (TRAMPOLINE_SIZE * BITS_PER_UNIT) / W_TYPE_SIZE; i++)\n+  for (i = 0; i < (TRAMPOLINE_SIZE * __CHAR_BIT__) / W_TYPE_SIZE; i++)\n     addr[i] |= parity_bit (addr[i]);\n }\n #endif"}, {"sha": "7f51f7b1111b31a5a2be7e4c9427d24a2ff28eff", "filename": "libgcc/fixed-bit.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Ffixed-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Ffixed-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffixed-bit.h?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -434,7 +434,7 @@ typedef union\n } INTunion;\n #endif\n \n-#define FIXED_WIDTH\t(FIXED_SIZE * BITS_PER_UNIT) /* in bits.  */\n+#define FIXED_WIDTH\t(FIXED_SIZE * __CHAR_BIT__) /* in bits.  */\n #define FIXED_C_TYPE1(NAME)\tNAME ## type\n #define FIXED_C_TYPE2(NAME)\tFIXED_C_TYPE1(NAME)\n #define FIXED_C_TYPE\tFIXED_C_TYPE2(MODE_NAME)\n@@ -1108,17 +1108,17 @@ extern FIXED_C_TYPE FIXED_USASHL (FIXED_C_TYPE, word_type);\n #if defined (FROM_MODE_NAME_S) && defined (TO_MODE_NAME_S)\n \n #if FROM_TYPE == 1\t/* Signed integer.  */\n-#define FROM_INT_WIDTH\t\t(FROM_INT_SIZE * BITS_PER_UNIT)\n+#define FROM_INT_WIDTH\t\t(FROM_INT_SIZE * __CHAR_BIT__)\n #endif\n \n #if FROM_TYPE == 2\t/* Unsigned integer.  */\n-#define FROM_INT_WIDTH\t\t(FROM_INT_SIZE * BITS_PER_UNIT)\n+#define FROM_INT_WIDTH\t\t(FROM_INT_SIZE * __CHAR_BIT__)\n #endif\n \n #if FROM_TYPE == 4\t/* Fixed-point.  */\n #define FROM_FIXED_C_TYPE\tFIXED_C_TYPE2(FROM_MODE_NAME)\n #define FROM_FBITS\t\tFBITS2(FROM_MODE_NAME)\n-#define FROM_FIXED_WIDTH\t(FROM_FIXED_SIZE * BITS_PER_UNIT)\n+#define FROM_FIXED_WIDTH\t(FROM_FIXED_SIZE * __CHAR_BIT__)\n #define FROM_FBITS\t\tFBITS2(FROM_MODE_NAME)\n #define FROM_IBITS\t\tIBITS2(FROM_MODE_NAME)\n #define FROM_I_F_BITS\t\t(FROM_FBITS + FROM_IBITS)\n@@ -1136,7 +1136,7 @@ extern FIXED_C_TYPE FIXED_USASHL (FIXED_C_TYPE, word_type);\n #if TO_TYPE == 4\t/* Fixed-point.  */\n #define TO_FIXED_C_TYPE\t\tFIXED_C_TYPE2(TO_MODE_NAME)\n #define TO_FBITS\t\tFBITS2(TO_MODE_NAME)\n-#define TO_FIXED_WIDTH\t\t(TO_FIXED_SIZE * BITS_PER_UNIT)\n+#define TO_FIXED_WIDTH\t\t(TO_FIXED_SIZE * __CHAR_BIT__)\n #define TO_FBITS\t\tFBITS2(TO_MODE_NAME)\n #define TO_IBITS\t\tIBITS2(TO_MODE_NAME)\n #define TO_I_F_BITS\t\t(TO_FBITS + TO_IBITS)"}, {"sha": "29661be8a317615d709968551ca266533878f57c", "filename": "libgcc/fp-bit.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Ffp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Ffp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffp-bit.h?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -117,11 +117,11 @@ typedef unsigned int UTItype __attribute__ ((mode (TI)));\n \n #define MAX_USI_INT  (~(USItype)0)\n #define MAX_SI_INT   ((SItype) (MAX_USI_INT >> 1))\n-#define BITS_PER_SI  (4 * BITS_PER_UNIT)\n+#define BITS_PER_SI  (4 * __CHAR_BIT__)\n #ifdef TMODES\n #define MAX_UDI_INT  (~(UDItype)0)\n #define MAX_DI_INT   ((DItype) (MAX_UDI_INT >> 1))\n-#define BITS_PER_DI  (8 * BITS_PER_UNIT)\n+#define BITS_PER_DI  (8 * __CHAR_BIT__)\n #endif\n \n #ifdef FLOAT_ONLY"}, {"sha": "90dba06ed726433c8087b77d8e6aa08b26e9171e", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -160,7 +160,7 @@ __mulvSI3 (Wtype a, Wtype b)\n }\n #ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n #undef WORD_SIZE\n-#define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n+#define WORD_SIZE (sizeof (SItype) * __CHAR_BIT__)\n SItype\n __mulvsi3 (SItype a, SItype b)\n {\n@@ -820,16 +820,16 @@ const UQItype __popcount_tab[256] =\n #endif\n \f\n #if defined(L_popcountsi2) || defined(L_popcountdi2)\n-#define POPCOUNTCST2(x) (((UWtype) x << BITS_PER_UNIT) | x)\n-#define POPCOUNTCST4(x) (((UWtype) x << (2 * BITS_PER_UNIT)) | x)\n-#define POPCOUNTCST8(x) (((UWtype) x << (4 * BITS_PER_UNIT)) | x)\n-#if W_TYPE_SIZE == BITS_PER_UNIT\n+#define POPCOUNTCST2(x) (((UWtype) x << __CHAR_BIT__) | x)\n+#define POPCOUNTCST4(x) (((UWtype) x << (2 * __CHAR_BIT__)) | x)\n+#define POPCOUNTCST8(x) (((UWtype) x << (4 * __CHAR_BIT__)) | x)\n+#if W_TYPE_SIZE == __CHAR_BIT__\n #define POPCOUNTCST(x) x\n-#elif W_TYPE_SIZE == 2 * BITS_PER_UNIT\n+#elif W_TYPE_SIZE == 2 * __CHAR_BIT__\n #define POPCOUNTCST(x) POPCOUNTCST2 (x)\n-#elif W_TYPE_SIZE == 4 * BITS_PER_UNIT\n+#elif W_TYPE_SIZE == 4 * __CHAR_BIT__\n #define POPCOUNTCST(x) POPCOUNTCST4 (POPCOUNTCST2 (x))\n-#elif W_TYPE_SIZE == 8 * BITS_PER_UNIT\n+#elif W_TYPE_SIZE == 8 * __CHAR_BIT__\n #define POPCOUNTCST(x) POPCOUNTCST8 (POPCOUNTCST4 (POPCOUNTCST2 (x)))\n #endif\n #endif\n@@ -842,11 +842,11 @@ __popcountSI2 (UWtype x)\n   /* Force table lookup on targets like AVR and RL78 which only\n      pretend they have LIBGCC2_UNITS_PER_WORD 4, but actually\n      have 1, and other small word targets.  */\n-#if __SIZEOF_INT__ > 2 && defined (POPCOUNTCST) && BITS_PER_UNIT == 8\n+#if __SIZEOF_INT__ > 2 && defined (POPCOUNTCST) && __CHAR_BIT__ == 8\n   x = x - ((x >> 1) & POPCOUNTCST (0x55));\n   x = (x & POPCOUNTCST (0x33)) + ((x >> 2) & POPCOUNTCST (0x33));\n   x = (x + (x >> 4)) & POPCOUNTCST (0x0F);\n-  return (x * POPCOUNTCST (0x01)) >> (W_TYPE_SIZE - BITS_PER_UNIT);\n+  return (x * POPCOUNTCST (0x01)) >> (W_TYPE_SIZE - __CHAR_BIT__);\n #else\n   int i, ret = 0;\n \n@@ -866,7 +866,7 @@ __popcountDI2 (UDWtype x)\n   /* Force table lookup on targets like AVR and RL78 which only\n      pretend they have LIBGCC2_UNITS_PER_WORD 4, but actually\n      have 1, and other small word targets.  */\n-#if __SIZEOF_INT__ > 2 && defined (POPCOUNTCST) && BITS_PER_UNIT == 8\n+#if __SIZEOF_INT__ > 2 && defined (POPCOUNTCST) && __CHAR_BIT__ == 8\n   const DWunion uu = {.ll = x};\n   UWtype x1 = uu.s.low, x2 = uu.s.high;\n   x1 = x1 - ((x1 >> 1) & POPCOUNTCST (0x55));\n@@ -876,7 +876,7 @@ __popcountDI2 (UDWtype x)\n   x1 = (x1 + (x1 >> 4)) & POPCOUNTCST (0x0F);\n   x2 = (x2 + (x2 >> 4)) & POPCOUNTCST (0x0F);\n   x1 += x2;\n-  return (x1 * POPCOUNTCST (0x01)) >> (W_TYPE_SIZE - BITS_PER_UNIT);\n+  return (x1 * POPCOUNTCST (0x01)) >> (W_TYPE_SIZE - __CHAR_BIT__);\n #else\n   int i, ret = 0;\n "}, {"sha": "d689f3433da6eef6d9d6b534fb3547ee3b271315", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -178,7 +178,7 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n    if it existed.  */\n \n #if LIBGCC2_UNITS_PER_WORD == 8\n-#define W_TYPE_SIZE (8 * BITS_PER_UNIT)\n+#define W_TYPE_SIZE (8 * __CHAR_BIT__)\n #define Wtype\tDItype\n #define UWtype\tUDItype\n #define HWtype\tDItype\n@@ -194,7 +194,7 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #endif\n #define COMPAT_SIMODE_TRAPPING_ARITHMETIC\n #elif LIBGCC2_UNITS_PER_WORD == 4\n-#define W_TYPE_SIZE (4 * BITS_PER_UNIT)\n+#define W_TYPE_SIZE (4 * __CHAR_BIT__)\n #define Wtype\tSItype\n #define UWtype\tUSItype\n #define HWtype\tSItype\n@@ -209,7 +209,7 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define __NDW(a,b)\t__ ## a ## di ## b\n #endif\n #elif LIBGCC2_UNITS_PER_WORD == 2\n-#define W_TYPE_SIZE (2 * BITS_PER_UNIT)\n+#define W_TYPE_SIZE (2 * __CHAR_BIT__)\n #define Wtype\tHItype\n #define UWtype\tUHItype\n #define HWtype\tHItype\n@@ -224,7 +224,7 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define __NDW(a,b)\t__ ## a ## si ## b\n #endif\n #else\n-#define W_TYPE_SIZE BITS_PER_UNIT\n+#define W_TYPE_SIZE __CHAR_BIT__\n #define Wtype\tQItype\n #define UWtype  UQItype\n #define HWtype\tQItype"}, {"sha": "363492ea2ad0c77c738f2f8b55d059661c9c9cb4", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -43,7 +43,7 @@\n #include \"tm.h\"\n #include \"libgcc_tm.h\"\n \n-#if BITS_PER_UNIT == 8\n+#if __CHAR_BIT__ == 8\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (SI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (SI)));\n #if LONG_LONG_TYPE_SIZE > 32\n@@ -54,7 +54,7 @@ typedef signed gcov_type __attribute__ ((mode (SI)));\n typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n #endif\n #else\n-#if BITS_PER_UNIT == 16\n+#if __CHAR_BIT__ == 16\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (HI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (HI)));\n #if LONG_LONG_TYPE_SIZE > 32"}, {"sha": "e853396e8e4e208b3adb1f7d292627a27dcd2c46", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -1,3 +1,14 @@\n+2015-11-07  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\tPR libobjc/24775\n+\t* encoding.c (_darwin_rs6000_special_round_type_align): Use\n+\t__CHAR_BIT__ instead of BITS_PER_UNIT.\n+\t(objc_sizeof_type): Likewise.\n+\t(objc_layout_structure): Likewise.\n+\t(objc_layout_structure_next_member): Likewise.\n+\t(objc_layout_finish_structure): Likewise.\n+\t(objc_layout_structure_get_info): Likewise.\n+\n 2015-11-03  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \tPR libobjc/24775"}, {"sha": "ca34c7d525a62730bb5a1f94e58df51fd58635fd", "filename": "libobjc/encoding.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153644f75bb7e5c7814eb2a7a4737108018748f/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153644f75bb7e5c7814eb2a7a4737108018748f/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=a153644f75bb7e5c7814eb2a7a4737108018748f", "patch": "@@ -94,11 +94,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Some ports (eg ARM) allow the structure size boundary to be\n    selected at compile-time.  We override the normal definition with\n    one that has a constant value for this compilation.  */\n-#ifndef BITS_PER_UNIT\n-#define BITS_PER_UNIT 8\n-#endif\n #undef  STRUCTURE_SIZE_BOUNDARY\n-#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (struct{char a;}))\n+#define STRUCTURE_SIZE_BOUNDARY (__CHAR_BIT__ * sizeof (struct{char a;}))\n \n /* Some ROUND_TYPE_ALIGN macros use TARGET_foo, and consequently\n    target_flags.  Define a dummy entry here to so we don't die.\n@@ -163,7 +160,7 @@ _darwin_rs6000_special_round_type_align (const char *struc, int comp, int spec)\n     {\n       case RECORD_TYPE:\n       case UNION_TYPE:\n-\treturn MAX (MAX (comp, spec), objc_alignof_type (_stp) * BITS_PER_UNIT);\n+\treturn MAX (MAX (comp, spec), objc_alignof_type (_stp) * __CHAR_BIT__);\n \tbreak;\n       case DFmode:\n       case _C_LNG_LNG:\n@@ -335,8 +332,8 @@ objc_sizeof_type (const char *type)\n \t;\n       size = atoi (type + 1);\n \n-      startByte = position / BITS_PER_UNIT;\n-      endByte = (position + size) / BITS_PER_UNIT;\n+      startByte = position / __CHAR_BIT__;\n+      endByte = (position + size) / __CHAR_BIT__;\n       return endByte - startByte;\n     }\n \n@@ -1093,7 +1090,7 @@ objc_layout_structure (const char *type,\n   layout->type = type;\n   layout->prev_type = NULL;\n   layout->record_size = 0;\n-  layout->record_align = BITS_PER_UNIT;\n+  layout->record_align = __CHAR_BIT__;\n \n   layout->record_align = MAX (layout->record_align, STRUCTURE_SIZE_BOUNDARY);\n }\n@@ -1117,18 +1114,18 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n       type = objc_skip_type_qualifiers (layout->prev_type);\n       if (unionp)\n         layout->record_size = MAX (layout->record_size,\n-\t\t\t\t   objc_sizeof_type (type) * BITS_PER_UNIT);\n+\t\t\t\t   objc_sizeof_type (type) * __CHAR_BIT__);\n \n       else if (*type != _C_BFLD)\n-        layout->record_size += objc_sizeof_type (type) * BITS_PER_UNIT;\n+\tlayout->record_size += objc_sizeof_type (type) * __CHAR_BIT__;\n       else {\n         /* Get the bitfield's type */\n         for (bfld_type = type + 1;\n              isdigit ((unsigned char)*bfld_type);\n              bfld_type++)\n           /* do nothing */;\n \n-        bfld_type_align = objc_alignof_type (bfld_type) * BITS_PER_UNIT;\n+\tbfld_type_align = objc_alignof_type (bfld_type) * __CHAR_BIT__;\n         bfld_field_size = atoi (objc_skip_typespec (bfld_type));\n         layout->record_size += bfld_field_size;\n       }\n@@ -1143,7 +1140,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n   type = objc_skip_type_qualifiers (layout->type);\n \n   if (*type != _C_BFLD)\n-    desired_align = objc_alignof_type (type) * BITS_PER_UNIT;\n+    desired_align = objc_alignof_type (type) * __CHAR_BIT__;\n   else\n     {\n       desired_align = 1;\n@@ -1153,7 +1150,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n            bfld_type++)\n         /* do nothing */;\n \n-      bfld_type_align = objc_alignof_type (bfld_type) * BITS_PER_UNIT;\n+      bfld_type_align = objc_alignof_type (bfld_type) * __CHAR_BIT__;\n       bfld_field_size = atoi (objc_skip_typespec (bfld_type));\n     }\n \n@@ -1180,7 +1177,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n       if (bfld_field_size)\n         layout->record_align = MAX (layout->record_align, desired_align);\n       else\n-        desired_align = objc_alignof_type (bfld_type) * BITS_PER_UNIT;\n+\tdesired_align = objc_alignof_type (bfld_type) * __CHAR_BIT__;\n \n       /* A named bit field of declared type `int'\n          forces the entire structure to have `int' alignment.\n@@ -1194,7 +1191,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n         if (maximum_field_alignment != 0)\n           type_align = MIN (type_align, maximum_field_alignment);\n         else if (DECL_PACKED (field))\n-          type_align = MIN (type_align, BITS_PER_UNIT);\n+\t  type_align = MIN (type_align, __CHAR_BIT__);\n #endif\n \n         layout->record_align = MAX (layout->record_align, type_align);\n@@ -1251,9 +1248,9 @@ void objc_layout_finish_structure (struct objc_struct_layout *layout,\n       layout->type = NULL;\n     }\n   if (size)\n-    *size = layout->record_size / BITS_PER_UNIT;\n+    *size = layout->record_size / __CHAR_BIT__;\n   if (align)\n-    *align = layout->record_align / BITS_PER_UNIT;\n+    *align = layout->record_align / __CHAR_BIT__;\n }\n \n void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n@@ -1262,9 +1259,9 @@ void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n                                      const char **type)\n {\n   if (offset)\n-    *offset = layout->record_size / BITS_PER_UNIT;\n+    *offset = layout->record_size / __CHAR_BIT__;\n   if (align)\n-    *align = layout->record_align / BITS_PER_UNIT;\n+    *align = layout->record_align / __CHAR_BIT__;\n   if (type)\n     *type = layout->prev_type;\n }"}]}