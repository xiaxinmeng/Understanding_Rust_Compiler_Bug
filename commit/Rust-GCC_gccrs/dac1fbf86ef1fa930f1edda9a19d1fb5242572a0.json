{"sha": "dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjMWZiZjg2ZWYxZmE5MzBmMWVkZGE5YTE5ZDFmYjUyNDI1NzJhMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-20T09:52:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-20T09:52:02Z"}, "message": "tree-pass.h (pass_rtl_eh): Remove.\n\n2012-03-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-pass.h (pass_rtl_eh): Remove.\n\t* except.c (gate_handle_eh): Likewise.\n\t(rest_of_handle_eh): Likewise.\n\t(pass_rtl_eh): Likewise.\n\t(finish_eh_generation): Export.\n\t* except.h (finish_eh_generation): Declare.\n\t* passes.c (init_optimization_passes): Remove pass_rtl_eh.\n\t* cfgexpand.c (gimple_expand_cfg): Call finish_eh_generation\n\tafter expanding stack alignment.  Instead of compacting blocks\n\tcall cleanup_cfg.\n\nFrom-SVN: r185564", "tree": {"sha": "e89d5a5556905f0b4ea59f1b8aefd4dafbaed5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89d5a5556905f0b4ea59f1b8aefd4dafbaed5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ebf9677e58b3f97e71f267e4f27bcaf01458393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebf9677e58b3f97e71f267e4f27bcaf01458393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebf9677e58b3f97e71f267e4f27bcaf01458393"}], "stats": {"total": 72, "additions": 31, "deletions": 41}, "files": [{"sha": "b9378eab93d1d4ab248320a09329c6f6367307ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -1,3 +1,16 @@\n+2012-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-pass.h (pass_rtl_eh): Remove.\n+\t* except.c (gate_handle_eh): Likewise.\n+\t(rest_of_handle_eh): Likewise.\n+\t(pass_rtl_eh): Likewise.\n+\t(finish_eh_generation): Export.\n+\t* except.h (finish_eh_generation): Declare.\n+\t* passes.c (init_optimization_passes): Remove pass_rtl_eh.\n+\t* cfgexpand.c (gimple_expand_cfg): Call finish_eh_generation\n+\tafter expanding stack alignment.  Instead of compacting blocks\n+\tcall cleanup_cfg.\n+\n 2012-03-20  Richard Guenther  <rguenther@suse.de>\n \n \t* stor-layout.c (finish_bitfield_representative): Fallback"}, {"sha": "543404a70d3a35eeb4a3fcd94d154b7c278835b7", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -4623,10 +4623,22 @@ gimple_expand_cfg (void)\n   sbitmap_free (blocks);\n   purge_all_dead_edges ();\n \n-  compact_blocks ();\n-\n   expand_stack_alignment ();\n \n+  /* After initial rtl generation, call back to finish generating\n+     exception support code.  We need to do this before cleaning up\n+     the CFG as the code does not expect dead landing pads.  */\n+  if (cfun->eh->region_tree != NULL)\n+    finish_eh_generation ();\n+\n+  /* Remove unreachable blocks, otherwise we cannot compute dominators\n+     which are needed for loop state verification.  As a side-effect\n+     this also compacts blocks.\n+     ???  We cannot remove trivially dead insns here as for example\n+     the DRAP reg on i?86 is not magically live at this point.\n+     gcc.c-torture/execute/ipa-sra-2.c execution, -Os -m32 fails otherwise.  */\n+  cleanup_cfg (CLEANUP_NO_INSN_DEL);\n+\n #ifdef ENABLE_CHECKING\n   verify_flow_info ();\n #endif"}, {"sha": "eb27648786cf4f09502abe1e8a813c45832c7fe3", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -81,7 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n    gimple to eh_region mapping that had been recorded in the\n    THROW_STMT_TABLE.\n \n-   During pass_rtl_eh (except.c), we generate the real landing pads\n+   Then, via finish_eh_generation, we generate the real landing pads\n    to which the runtime will actually transfer control.  These new\n    landing pads perform whatever bookkeeping is needed by the target\n    backend in order to resume execution within the current function.\n@@ -1406,7 +1406,7 @@ sjlj_build_landing_pads (void)\n /* After initial rtl generation, call back to finish generating\n    exception support code.  */\n \n-static void\n+void\n finish_eh_generation (void)\n {\n   basic_block bb;\n@@ -1453,41 +1453,6 @@ finish_eh_generation (void)\n \t}\n     }\n }\n-\n-static bool\n-gate_handle_eh (void)\n-{\n-  /* Nothing to do if no regions created.  */\n-  return cfun->eh->region_tree != NULL;\n-}\n-\n-/* Complete generation of exception handling code.  */\n-static unsigned int\n-rest_of_handle_eh (void)\n-{\n-  finish_eh_generation ();\n-  cleanup_cfg (CLEANUP_NO_INSN_DEL);\n-  return 0;\n-}\n-\n-struct rtl_opt_pass pass_rtl_eh =\n-{\n- {\n-  RTL_PASS,\n-  \"rtl_eh\",                             /* name */\n-  gate_handle_eh,                       /* gate */\n-  rest_of_handle_eh,\t\t\t/* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_JUMP,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n- }\n-};\n \f\n /* This section handles removing dead code for flow.  */\n "}, {"sha": "e161493b5aac523c30d057e2e89cb5ff263ecf87", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -291,6 +291,8 @@ extern void assign_filter_values (void);\n extern eh_region get_eh_region_from_rtx (const_rtx);\n extern eh_landing_pad get_eh_landing_pad_from_rtx (const_rtx);\n \n+extern void finish_eh_generation (void);\n+\n struct GTY(()) throw_stmt_node {\n   gimple stmt;\n   int lp_nr;"}, {"sha": "02b1b5b122fbf2ec2a5a03b3f18819f8cb169fc1", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -1431,7 +1431,6 @@ init_optimization_passes (void)\n       struct opt_pass **p = &pass_rest_of_compilation.pass.sub;\n       NEXT_PASS (pass_init_function);\n       NEXT_PASS (pass_jump);\n-      NEXT_PASS (pass_rtl_eh);\n       NEXT_PASS (pass_initial_value_sets);\n       NEXT_PASS (pass_unshare_all_rtl);\n       NEXT_PASS (pass_instantiate_virtual_regs);"}, {"sha": "8c50267953cf5304950fc28fb9e19c961fcb6241", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac1fbf86ef1fa930f1edda9a19d1fb5242572a0/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=dac1fbf86ef1fa930f1edda9a19d1fb5242572a0", "patch": "@@ -487,7 +487,6 @@ extern struct gimple_opt_pass pass_fixup_cfg;\n extern struct rtl_opt_pass pass_expand;\n extern struct rtl_opt_pass pass_init_function;\n extern struct rtl_opt_pass pass_jump;\n-extern struct rtl_opt_pass pass_rtl_eh;\n extern struct rtl_opt_pass pass_initial_value_sets;\n extern struct rtl_opt_pass pass_unshare_all_rtl;\n extern struct rtl_opt_pass pass_instantiate_virtual_regs;"}]}