{"sha": "b74044fb6278e373da607a8f1f5df2193ce27d65", "node_id": "C_kwDOANBUbNoAKGI3NDA0NGZiNjI3OGUzNzNkYTYwN2E4ZjFmNWRmMjE5M2NlMjdkNjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-25T19:14:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-25T19:14:00Z"}, "message": "Merge #1164\n\n1164: Add `NodeId`s to `SimplePath{Segment}`s r=CohenArthur a=CohenArthur\n\nThis is a necessary first step which addresses #1158\r\n\r\nI am working on the visibility resolver and simple-path name resolver in parallel and will need those changes. \r\n\r\nI'm not sure if the `has_path` method is necessary since we will have `HIR::Visibilities` in the visibility resolver, which will be desugared. Maybe I am doing this wrong and we should be working on `AST::Visibilities` instead?\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "6713b11e9b0a7de36b00b96ffed1d2322a93a239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6713b11e9b0a7de36b00b96ffed1d2322a93a239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74044fb6278e373da607a8f1f5df2193ce27d65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZvL4CRBK7hj4Ov3rIwAAlqQIAB1vuTblg7y0CHY85iSh40lt\nxetlWHZpQlR64PidmgMVy7uKGKL6BA0mflkCa4MCYY1cwxWlps6NPvJmmFLaL5fM\n68bFTykCwnJcnrW7zAC25m1unqoHTLUJodc5XzGOH9IisG+1Zk9+APZ9NLVCrecQ\nVY8PWbk67rOyhpgiou6UfL4gqWjeFFHqI4eOHd/Phoukwc1ZjJHFUg5Dipz5QS9m\np9XAHErjXqW1dYliXJh6AxbZmt7DSvf+P1m9xwXIoEC6cdpcIZ5VRArtbpuzc+9X\neiJZ480fE0fj7JPg9xR7PeDsLMK9R12BU7YhFLMSfgmj696yMQr/zgc1UuA4sQk=\n=9Bva\n-----END PGP SIGNATURE-----\n", "payload": "tree 6713b11e9b0a7de36b00b96ffed1d2322a93a239\nparent 2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439\nparent d0c75495dda7943078771d792a6e380315c7d604\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650914040 +0000\ncommitter GitHub <noreply@github.com> 1650914040 +0000\n\nMerge #1164\n\n1164: Add `NodeId`s to `SimplePath{Segment}`s r=CohenArthur a=CohenArthur\n\nThis is a necessary first step which addresses #1158\r\n\r\nI am working on the visibility resolver and simple-path name resolver in parallel and will need those changes. \r\n\r\nI'm not sure if the `has_path` method is necessary since we will have `HIR::Visibilities` in the visibility resolver, which will be desugared. Maybe I am doing this wrong and we should be working on `AST::Visibilities` instead?\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74044fb6278e373da607a8f1f5df2193ce27d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74044fb6278e373da607a8f1f5df2193ce27d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74044fb6278e373da607a8f1f5df2193ce27d65/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439"}, {"sha": "d0c75495dda7943078771d792a6e380315c7d604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c75495dda7943078771d792a6e380315c7d604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c75495dda7943078771d792a6e380315c7d604"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "fa261754bcbd0226a07f6248d356f215e880d76b", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74044fb6278e373da607a8f1f5df2193ce27d65/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74044fb6278e373da607a8f1f5df2193ce27d65/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=b74044fb6278e373da607a8f1f5df2193ce27d65", "patch": "@@ -325,12 +325,14 @@ class SimplePathSegment : public PathSegment\n {\n   std::string segment_name;\n   Location locus;\n+  NodeId node_id;\n \n   // only allow identifiers, \"super\", \"self\", \"crate\", or \"$crate\"\n public:\n   // TODO: put checks in constructor to enforce this rule?\n   SimplePathSegment (std::string segment_name, Location locus = Location ())\n-    : segment_name (std::move (segment_name)), locus (locus)\n+    : segment_name (std::move (segment_name)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   /* Returns whether simple path segment is in an invalid state (currently, if\n@@ -346,6 +348,7 @@ class SimplePathSegment : public PathSegment\n   std::string as_string () const override;\n \n   Location get_locus () const { return locus; }\n+  NodeId get_node_id () const { return node_id; }\n \n   // TODO: visitor pattern?\n };\n@@ -356,14 +359,16 @@ class SimplePath\n   bool has_opening_scope_resolution;\n   std::vector<SimplePathSegment> segments;\n   Location locus;\n+  NodeId node_id;\n \n public:\n   // Constructor\n   SimplePath (std::vector<SimplePathSegment> path_segments,\n \t      bool has_opening_scope_resolution = false,\n \t      Location locus = Location ())\n     : has_opening_scope_resolution (has_opening_scope_resolution),\n-      segments (std::move (path_segments)), locus (locus)\n+      segments (std::move (path_segments)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Creates an empty SimplePath.\n@@ -378,6 +383,7 @@ class SimplePath\n   std::string as_string () const;\n \n   Location get_locus () const { return locus; }\n+  NodeId get_node_id () const { return node_id; }\n \n   // does this need visitor if not polymorphic? probably not\n "}, {"sha": "5907516472db8bacc225fc2f4f790aab167be563", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74044fb6278e373da607a8f1f5df2193ce27d65/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74044fb6278e373da607a8f1f5df2193ce27d65/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b74044fb6278e373da607a8f1f5df2193ce27d65", "patch": "@@ -640,6 +640,9 @@ struct Visibility\n     return vis_type == PUB_IN_PATH && in_path.is_empty ();\n   }\n \n+  // Returns whether a visibility has a path\n+  bool has_path () const { return !(is_error ()) && vis_type == PUB_IN_PATH; }\n+\n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }\n "}]}