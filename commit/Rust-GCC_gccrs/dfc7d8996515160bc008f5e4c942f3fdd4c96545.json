{"sha": "dfc7d8996515160bc008f5e4c942f3fdd4c96545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjN2Q4OTk2NTE1MTYwYmMwMDhmNWU0Yzk0MmYzZmRkNGM5NjU0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-02-11T10:43:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-02-11T10:43:49Z"}, "message": "re PR libstdc++/9320 (Incorrect usage of traits_type::int_type in stdio_filebuf)\n\n2003-02-11  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9320\n\t* include/ext/stdio_filebuf.h\n\t(stdio_filebuf(int, std::ios_base::openmode, bool, int_type),\n\tstdio_filebuf(std::__c_file*, std::ios_base::openmode, int_type)):\n\tChange to take a __size parameter of type size_t, not\n\tof type (template parameter dependent) int_type.\n\t* src/ios.cc (ios_base::Init::_S_ios_create): Change type of\n\tsize vars to size_t.\n\t* testsuite/ext/stdio_filebuf.cc: Add.\n\nFrom-SVN: r62691", "tree": {"sha": "ebe902306e4a15ad31f2a8f37a87098265fa8a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe902306e4a15ad31f2a8f37a87098265fa8a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfc7d8996515160bc008f5e4c942f3fdd4c96545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc7d8996515160bc008f5e4c942f3fdd4c96545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc7d8996515160bc008f5e4c942f3fdd4c96545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc7d8996515160bc008f5e4c942f3fdd4c96545/comments", "author": null, "committer": null, "parents": [{"sha": "da61d02231ca20ebc788ad86655952cff1781171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da61d02231ca20ebc788ad86655952cff1781171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da61d02231ca20ebc788ad86655952cff1781171"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "e02707b2a4206d4335fe0e5652330eb0525b2522", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dfc7d8996515160bc008f5e4c942f3fdd4c96545", "patch": "@@ -1,3 +1,15 @@\n+2003-02-11  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9320\n+\t* include/ext/stdio_filebuf.h\n+\t(stdio_filebuf(int, std::ios_base::openmode, bool, int_type),\n+\tstdio_filebuf(std::__c_file*, std::ios_base::openmode, int_type)):\n+\tChange to take a __size parameter of type size_t, not\n+\tof type (template parameter dependent) int_type.\n+\t* src/ios.cc (ios_base::Init::_S_ios_create): Change type of\n+\tsize vars to size_t.\n+\t* testsuite/ext/stdio_filebuf.cc: Add.\n+\n 2003-02-11  Paolo Carlini  <pcarlini@unitus.it>\n             Petur Runolfsson  <peturr02@ru.is>\n "}, {"sha": "c41256423b142c5f31da4f2949226a01a0337e17", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=dfc7d8996515160bc008f5e4c942f3fdd4c96545", "patch": "@@ -58,6 +58,7 @@ namespace __gnu_cxx\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n+      typedef std::size_t                               size_t;\n       \n     protected:\n       // Stack-based buffer for unbuffered input.\n@@ -75,7 +76,7 @@ namespace __gnu_cxx\n        *  file will be closed when the stdio_filebuf is closed/destroyed.\n       */\n       stdio_filebuf(int __fd, std::ios_base::openmode __mode, bool __del, \n-\t\t    int_type __size);\n+\t\t    size_t __size);\n \n       /**\n        *  @param  f  An open @c FILE*.\n@@ -88,7 +89,7 @@ namespace __gnu_cxx\n        *  stdio_filebuf is closed/destroyed.\n       */\n       stdio_filebuf(std::__c_file* __f, std::ios_base::openmode __mode, \n-\t\t    int_type __size = static_cast<int_type>(BUFSIZ));\n+\t\t    size_t __size = static_cast<size_t>(BUFSIZ));\n \n       /**\n        *  Possibly closes the external data stream, in the case of the file\n@@ -117,7 +118,7 @@ namespace __gnu_cxx\n   template<typename _CharT, typename _Traits>\n     stdio_filebuf<_CharT, _Traits>::\n     stdio_filebuf(int __fd, std::ios_base::openmode __mode, bool __del, \n-\t\t  int_type __size)\n+\t\t  size_t __size)\n     {\n       this->_M_file.sys_open(__fd, __mode, __del);\n       if (this->is_open())\n@@ -142,7 +143,7 @@ namespace __gnu_cxx\n   template<typename _CharT, typename _Traits>\n     stdio_filebuf<_CharT, _Traits>::\n     stdio_filebuf(std::__c_file* __f, std::ios_base::openmode __mode, \n-\t\t  int_type __size)\n+\t\t  size_t __size)\n     {\n       this->_M_file.sys_open(__f, __mode);\n       if (this->is_open())"}, {"sha": "75fdee1e5c2edb82a3c37aa1beef8f4e317d35b9", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=dfc7d8996515160bc008f5e4c942f3fdd4c96545", "patch": "@@ -159,11 +159,12 @@ namespace std\n   void\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n-    int __out_size = __sync ? 0 : static_cast<int>(BUFSIZ);\n+    size_t __out_size = __sync ? 0 : static_cast<size_t>(BUFSIZ);\n #ifdef _GLIBCPP_HAVE_ISATTY\n-    int __in_size = (__sync || isatty (0)) ? 1 : static_cast<int>(BUFSIZ);\n+    size_t __in_size =\n+      (__sync || isatty (0)) ? 1 : static_cast<size_t>(BUFSIZ);\n #else\n-    int __in_size = 1;\n+    size_t __in_size = 1;\n #endif\n \n     // NB: The file globals.cc creates the four standard files"}, {"sha": "ec3481562a0398eb3d890a01aca94e2815156166", "filename": "libstdc++-v3/testsuite/ext/stdio_filebuf.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc7d8996515160bc008f5e4c942f3fdd4c96545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf.cc?ref=dfc7d8996515160bc008f5e4c942f3fdd4c96545", "patch": "@@ -0,0 +1,36 @@\n+// 2003-02-11  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// stdio_filebuf.h\n+\n+#include <ext/stdio_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/9320\n+namespace test \n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+  typedef short type_t;\n+  template class __gnu_cxx::stdio_filebuf<type_t, char_traits<type_t> >;\n+  template class __gnu_cxx::stdio_filebuf<pod_char, char_traits<pod_char> >;\n+} // test"}]}