{"sha": "61bf02e007ceaaa81f92a9e10372303816955ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiZjAyZTAwN2NlYWFhODFmOTJhOWUxMDM3MjMwMzgxNjk1NWJhNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-10-08T12:33:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-10-08T12:33:37Z"}, "message": "re PR libstdc++/58659 (Construction of shared_ptr from unique_ptr mismatches new/delete and std::allocator for __shared_ptr_count)\n\n\tPR libstdc++/58659\n\t* include/bits/shared_ptr_base.h (__shared_count::__shared_count(P,D)):\n\tDelegate to constructor taking allocator.\n\t(__shared_count::_S_create_from_up): Inline into ...\n\t(__shared_count::__shared_count(unique_ptr<Y,D>&&): Here. Use\n\tstd::conditional instead of constrained overloads. Allocate memory\n\tusing the allocator type that will be used for deallocation.\n\t* testsuite/20_util/shared_ptr/cons/58659.cc: New.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust.\n\nFrom-SVN: r203274", "tree": {"sha": "9ae99d30df85db39801dab11898c312ec74fccfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae99d30df85db39801dab11898c312ec74fccfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61bf02e007ceaaa81f92a9e10372303816955ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bf02e007ceaaa81f92a9e10372303816955ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61bf02e007ceaaa81f92a9e10372303816955ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bf02e007ceaaa81f92a9e10372303816955ba5/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481d1b81534c70122187f38c26d6a19db587528f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481d1b81534c70122187f38c26d6a19db587528f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481d1b81534c70122187f38c26d6a19db587528f"}], "stats": {"total": 152, "additions": 102, "deletions": 50}, "files": [{"sha": "af3648ad0c06d1a34a929e87f1151b48d69ccdb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61bf02e007ceaaa81f92a9e10372303816955ba5", "patch": "@@ -1,3 +1,15 @@\n+2013-10-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/58659\n+\t* include/bits/shared_ptr_base.h (__shared_count::__shared_count(P,D)):\n+\tDelegate to constructor taking allocator.\n+\t(__shared_count::_S_create_from_up): Inline into ...\n+\t(__shared_count::__shared_count(unique_ptr<Y,D>&&): Here. Use\n+\tstd::conditional instead of constrained overloads. Allocate memory\n+\tusing the allocator type that will be used for deallocation.\n+\t* testsuite/20_util/shared_ptr/cons/58659.cc: New.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust.\n+\n 2013-10-08  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_executor.h: Add _TodoList class."}, {"sha": "911dd928c0b465481bd421b9b80502785b062be0", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 20, "deletions": 49, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=61bf02e007ceaaa81f92a9e10372303816955ba5", "patch": "@@ -495,29 +495,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Ptr, typename _Deleter>\n-\t__shared_count(_Ptr __p, _Deleter __d) : _M_pi(0)\n-\t{\n-\t  // The allocator's value_type doesn't matter, will rebind it anyway.\n-\t  typedef std::allocator<int> _Alloc;\n-\t  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n-\t  typedef typename allocator_traits<_Alloc>::template\n-\t    rebind_traits<_Sp_cd_type> _Alloc_traits;\n-\t  typename _Alloc_traits::allocator_type __a;\n-\t  _Sp_cd_type* __mem = 0;\n-\t  __try\n-\t    {\n-\t      __mem = _Alloc_traits::allocate(__a, 1);\n-\t      _Alloc_traits::construct(__a, __mem, __p, std::move(__d));\n-\t      _M_pi = __mem;\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      __d(__p); // Call _Deleter on __p.\n-\t      if (__mem)\n-\t        _Alloc_traits::deallocate(__a, __mem, 1);\n-\t      __throw_exception_again;\n-\t    }\n-\t}\n+\t__shared_count(_Ptr __p, _Deleter __d)\n+\t: __shared_count(__p, std::move(__d), allocator<void>())\n+\t{ }\n \n       template<typename _Ptr, typename _Deleter, typename _Alloc>\n \t__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)\n@@ -576,16 +556,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Special case for unique_ptr<_Tp,_Del> to provide the strong guarantee.\n       template<typename _Tp, typename _Del>\n         explicit\n-\t__shared_count(std::unique_ptr<_Tp, _Del>&& __r)\n-\t: _M_pi(_S_create_from_up(std::move(__r)))\n-\t{ __r.release(); }\n+\t__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)\n+\t{\n+\t  using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;\n+\t  using _Del2 = typename conditional<is_reference<_Del>::value,\n+\t      reference_wrapper<typename remove_reference<_Del>::type>,\n+\t      _Del>::type;\n+\t  using _Sp_cd_type\n+\t    = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;\n+\t  using _Alloc = allocator<_Sp_cd_type>;\n+\t  using _Alloc_traits = allocator_traits<_Alloc>;\n+\t  _Alloc __a;\n+\t  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);\n+\t  _Alloc_traits::construct(__a, __mem, __r.release(),\n+\t\t\t\t   __r.get_deleter());  // non-throwing\n+\t  _M_pi = __mem;\n+\t}\n \n       // Throw bad_weak_ptr when __r._M_get_use_count() == 0.\n       explicit __shared_count(const __weak_count<_Lp>& __r);\n \n       ~__shared_count() noexcept\n       {\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_release();\n       }\n \n@@ -647,28 +640,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       friend class __weak_count<_Lp>;\n \n-      template<typename _Tp, typename _Del>\n-\tstatic _Sp_counted_base<_Lp>*\n-\t_S_create_from_up(std::unique_ptr<_Tp, _Del>&& __r,\n-\t  typename std::enable_if<!std::is_reference<_Del>::value>::type* = 0)\n-\t{\n-\t  typedef typename unique_ptr<_Tp, _Del>::pointer _Ptr;\n-\t  return new _Sp_counted_deleter<_Ptr, _Del, std::allocator<void>,\n-\t    _Lp>(__r.get(), __r.get_deleter());\n-\t}\n-\n-      template<typename _Tp, typename _Del>\n-\tstatic _Sp_counted_base<_Lp>*\n-\t_S_create_from_up(std::unique_ptr<_Tp, _Del>&& __r,\n-\t  typename std::enable_if<std::is_reference<_Del>::value>::type* = 0)\n-\t{\n-\t  typedef typename unique_ptr<_Tp, _Del>::pointer _Ptr;\n-\t  typedef typename std::remove_reference<_Del>::type _Del1;\n-\t  typedef std::reference_wrapper<_Del1> _Del2;\n-\t  return new _Sp_counted_deleter<_Ptr, _Del2, std::allocator<void>,\n-\t    _Lp>(__r.get(), std::ref(__r.get_deleter()));\n-\t}\n-\n       _Sp_counted_base<_Lp>*  _M_pi;\n     };\n "}, {"sha": "fd2a677e0c7b4dcdd027de4e491ab83468eaae37", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=61bf02e007ceaaa81f92a9e10372303816955ba5", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 807 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 778 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "5e7c730e3ee62dde742f51a7d12321803dcaec1a", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/58659.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bf02e007ceaaa81f92a9e10372303816955ba5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc?ref=61bf02e007ceaaa81f92a9e10372303816955ba5", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct X { };\n+\n+using spcd = std::_Sp_counted_deleter<X*, std::default_delete<X>,\n+std::allocator<void>, std::__default_lock_policy>;\n+\n+namespace std\n+{\n+  template<>\n+    struct allocator<spcd>\n+    {\n+      using value_type = spcd;\n+\n+      allocator() = default;\n+\n+      template<typename U>\n+        allocator(const allocator<U>&) { }\n+\n+      value_type* allocate(size_t n)\n+      {\n+        if (n != 1)\n+          throw bad_alloc();\n+        allocated = true;\n+        return static_cast<value_type*>((void*)(storage));\n+      }\n+\n+      void deallocate(value_type* p, size_t n)\n+      {\n+        if (n != 1 || p != (void*)storage || !allocated)\n+          abort();\n+        allocated = false;\n+      }\n+\n+      static char storage[sizeof(spcd)];\n+      static bool allocated;\n+    };\n+\n+  char allocator<spcd>::storage[];\n+  bool allocator<spcd>::allocated = false;\n+}\n+\n+int main()\n+{\n+  std::shared_ptr<X> s( std::unique_ptr<X>(new X) );\n+  VERIFY( std::allocator<spcd>::allocated );\n+  s.reset();\n+  VERIFY( !std::allocator<spcd>::allocated );\n+}"}]}