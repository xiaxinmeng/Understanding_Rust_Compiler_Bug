{"sha": "0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3ZWI4ZGZjNWRjYzc0ZjIwODRkMTJlNGZlNTdhMDdjNTgxN2IxMw==", "commit": {"author": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-10-03T18:31:52Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-10-03T18:31:52Z"}, "message": "Enable LRA register allocator for PDP11.\n\n    * config/pdp11/constraints.md (Q): Use define_memory_constraints.\n    (R): Likewise.\n    (D): Likewise.\n    * config/pdp11/pdp11.c (pdp11_lra_p): New function.\n    * config/pdp11/pdp11.opt (-mlra): New option.\n    * doc/invoke.texi (PDP-11 Options): Document -mlra.\n\nFrom-SVN: r264819", "tree": {"sha": "ebaf35f1a064e0506d7694adc51a0ae1ce570bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebaf35f1a064e0506d7694adc51a0ae1ce570bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/comments", "author": null, "committer": null, "parents": [{"sha": "f707a0378804335b425fe541488a39aa642ca550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f707a0378804335b425fe541488a39aa642ca550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f707a0378804335b425fe541488a39aa642ca550"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "33882ed034ec4ba6c2453d977903011837126b25", "filename": "gcc/config/pdp11/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fconstraints.md?ref=0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "patch": "@@ -70,19 +70,19 @@\n   (and (match_code \"const_double\")\n        (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n \n-(define_constraint \"Q\"\n+(define_memory_constraint \"Q\"\n   \"Memory reference that requires an additional word after the opcode\"\n   (and (match_code \"mem\")\n        (match_test \"memory_address_p (GET_MODE (op), XEXP (op, 0))\n                     && !simple_memory_operand (op, GET_MODE (op))\")))\n \n-(define_constraint \"R\"\n+(define_memory_constraint \"R\"\n   \"Memory reference that is encoded within the opcode\"\n   (and (match_code \"mem\")\n        (match_test \"memory_address_p (GET_MODE (op), XEXP (op, 0))\n                     && simple_memory_operand (op, GET_MODE (op))\")))\n \n-(define_constraint \"D\"\n+(define_memory_constraint \"D\"\n   \"Memory reference that is encoded within the opcode, and not push or pop\"\n   (and (match_code \"mem\")\n        (match_test \"memory_address_p (GET_MODE (op), XEXP (op, 0))"}, {"sha": "f80a8783d8e9c3b41ac1afce7cf8f3041f5e19f4", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "patch": "@@ -230,7 +230,7 @@ static bool pdp11_scalar_mode_supported_p (scalar_mode);\n #define TARGET_PREFERRED_OUTPUT_RELOAD_CLASS pdp11_preferred_output_reload_class\n \n #undef  TARGET_LRA_P\n-#define TARGET_LRA_P hook_bool_void_false\n+#define TARGET_LRA_P pdp11_lra_p\n \n #undef  TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P pdp11_legitimate_address_p\n@@ -991,6 +991,12 @@ pdp11_assemble_integer (rtx x, unsigned int size, int aligned_p)\n }\n \n \n+static bool\n+pdp11_lra_p (void)\n+{\n+  return TARGET_LRA;\n+}\n+\n /* Register to register moves are cheap if both are general\n    registers.  */\n static int "}, {"sha": "033d1d7403ebda2fcdb22ddff0b15c0a9a9e8463", "filename": "gcc/config/pdp11/pdp11.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt?ref=0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "patch": "@@ -73,3 +73,7 @@ Target has split I&D.\n munix-asm\n Target RejectNegative Report Mask(UNIX_ASM) Negative(mdec-asm)\n Use UNIX assembler syntax.\n+\n+mlra\n+Target Report Mask(LRA)\n+Use LRA register allocator"}, {"sha": "5179d7064d5c21f3d49635649dbd196934676b0e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0a7eb8dfc5dcc74f2084d12e4fe57a07c5817b13", "patch": "@@ -1007,7 +1007,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n -mint32  -mno-int16 -mint16  -mno-int32 @gol\n -mfloat32  -mno-float64 -mfloat64  -mno-float32 @gol\n--msplit -munix-asm  -mdec-asm -mgnu-asm}\n+-msplit -munix-asm  -mdec-asm -mgnu-asm -mlra}\n \n @emph{picoChip Options}\n @gccoptlist{-mae=@var{ae_type}  -mvliw-lookahead=@var{N} @gol\n@@ -22721,6 +22721,11 @@ Use DEC assembler syntax.\n @item -mgnu-asm\n @opindex mgnu-asm\n Use GNU assembler syntax.  This is the default.\n+\n+@item -mlra\n+@opindex mlra\n+Use the new LRA register allocator.  By default, the old ``reload''\n+allocator is used.\n @end table\n \n @node picoChip Options"}]}