{"sha": "a69cbaac60d73feb37e6c17abd6f84991dc791a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5Y2JhYWM2MGQ3M2ZlYjM3ZTZjMTdhYmQ2Zjg0OTkxZGM3OTFhMA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-23T22:57:49Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-23T22:57:49Z"}, "message": "cppexp.c (parse_defined): Mark macro used.\n\n\t* cppexp.c (parse_defined): Mark macro used.\n\t* cpphash.h (struct cpp_macro): New member \"used\".\n\t(_cpp_mark_macro_used, _cpp_warn_if_unused_macro): New.\n\t(struct cpp_reader): New member.\n\t* cppinit.c (cpp_finish_options): Set first_unused_line.\n\t(cpp_finish): Warn of unused macros if requested.\n\t(OPT_TABLE): New switches.\n\t(cpp_handle_option): Handle them.\n\t* cpplib.c (do_undef): Warn if macro unused.\n\t(do_ifdef, do_ifndef): Mark macro used.\n\t* cpplib.h (struct cpp_options): New member.\n\t* cppmacro.c (_cpp_warn_if_unused_macro): New.\n\t(enter_macro_context): Mark macro used.\n\t(_cpp_create_definition): Mark macro unused; warn if unused\n\twhen redefined.\n\t* cpptrad.c (scan_out_logcial_line, push_replacement_text):\n\tMark macros used.\n\t* doc/cppopts.texi: Update.\ntestsuite:\n\t* gcc.dg/cpp/trad/Wunused.c, gcc.dg/cpp/trad/Wunused.h,\n\tgcc.dg/cpp/Wunused.c, gcc.dg/cpp/Wunused.h: New tests.\n\nFrom-SVN: r55692", "tree": {"sha": "d7305615fe0d53e288982b583d2c9c637deb2699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7305615fe0d53e288982b583d2c9c637deb2699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a69cbaac60d73feb37e6c17abd6f84991dc791a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69cbaac60d73feb37e6c17abd6f84991dc791a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69cbaac60d73feb37e6c17abd6f84991dc791a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69cbaac60d73feb37e6c17abd6f84991dc791a0/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b841421a28b7e7c616e58cae4b5e36599f288b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b841421a28b7e7c616e58cae4b5e36599f288b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b841421a28b7e7c616e58cae4b5e36599f288b7f"}], "stats": {"total": 184, "additions": 177, "deletions": 7}, "files": [{"sha": "95afea08c82a9303cbc368580743fefa73871342", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -1,3 +1,24 @@\n+2002-07-24  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppexp.c (parse_defined): Mark macro used.\n+\t* cpphash.h (struct cpp_macro): New member \"used\".\n+\t(_cpp_mark_macro_used, _cpp_warn_if_unused_macro): New.\n+\t(struct cpp_reader): New member.\n+\t* cppinit.c (cpp_finish_options): Set first_unused_line.\n+\t(cpp_finish): Warn of unused macros if requested.\n+\t(OPT_TABLE): New switches.\n+\t(cpp_handle_option): Handle them.\n+\t* cpplib.c (do_undef): Warn if macro unused.\n+\t(do_ifdef, do_ifndef): Mark macro used.\n+\t* cpplib.h (struct cpp_options): New member.\n+\t* cppmacro.c (_cpp_warn_if_unused_macro): New.\n+\t(enter_macro_context): Mark macro used.\n+\t(_cpp_create_definition): Mark macro unused; warn if unused\n+\twhen redefined.\n+\t* cpptrad.c (scan_out_logcial_line, push_replacement_text):\n+\tMark macros used.\n+\t* doc/cppopts.texi: Update.\n+\n 2002-07-23  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* dwarf2out.c (SECTION_ASM_OP,"}, {"sha": "569043651d678df64cbaf5908f46add7a23a0ad7", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -501,6 +501,8 @@ parse_defined (pfile)\n \tcpp_error (pfile, DL_WARNING,\n \t\t   \"this use of \\\"defined\\\" may not be portable\");\n \n+      _cpp_mark_macro_used (node);\n+\n       /* A possible controlling macro of the form #if !defined ().\n \t _cpp_parse_expr checks there was no other junk on the line.  */\n       pfile->mi_ind_cmacro = node;"}, {"sha": "5e69c853b98b297be6ffe2ddafe59218cd9ce451", "filename": "gcc/cpphash.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -98,8 +98,15 @@ struct cpp_macro\n \n   /* If macro defined in system header.  */\n   unsigned int syshdr   : 1;\n+\n+  /* Non-zero if it has been expanded or had its existence tested.  */\n+  unsigned int used     : 1;\n };\n \n+#define _cpp_mark_macro_used(NODE) do {\t\t\t\t\t\\\n+  if ((NODE)->type == NT_MACRO && !((NODE)->flags & NODE_BUILTIN))\t\\\n+    (NODE)->value.macro->used = 1; } while (0)\n+\n /* A generic memory buffer, and operations on it.  */\n typedef struct _cpp_buff _cpp_buff;\n struct _cpp_buff\n@@ -370,6 +377,9 @@ struct cpp_reader\n      for include files.  (Altered as we get more of them.)  */\n   unsigned int max_include_len;\n \n+  /* Macros on or after this line are warned about if unused.  */\n+  unsigned int first_unused_line;\n+\n   /* Date and time text.  Calculated together if either is requested.  */\n   const uchar *date;\n   const uchar *time;\n@@ -477,6 +487,8 @@ extern bool _cpp_arguments_ok\t\tPARAMS ((cpp_reader *, cpp_macro *,\n \t\t\t\t\t\t unsigned int));\n extern const uchar *_cpp_builtin_macro_text PARAMS ((cpp_reader *,\n \t\t\t\t\t\t     cpp_hashnode *));\n+int _cpp_warn_if_unused_macro\t\tPARAMS ((cpp_reader *, cpp_hashnode *,\n+\t\t\t\t\t\t void *));\n /* In cpphash.c */\n extern void _cpp_init_hashtable\t\tPARAMS ((cpp_reader *, hash_table *));\n extern void _cpp_destroy_hashtable\tPARAMS ((cpp_reader *));"}, {"sha": "6a4dd0a53f80b87ab4563c3250e2604aba2d4af4", "filename": "gcc/cppinit.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -1009,6 +1009,8 @@ cpp_finish_options (pfile)\n       _cpp_maybe_push_include_file (pfile);\n     }\n \n+  pfile->first_unused_line = pfile->line;\n+\n   free_chain (CPP_OPTION (pfile, pending)->imacros_head);\n   free_chain (CPP_OPTION (pfile, pending)->directive_head);\n }\n@@ -1081,6 +1083,10 @@ void\n cpp_finish (pfile)\n      cpp_reader *pfile;\n {\n+  /* Warn about unused macros before popping the final buffer.  */\n+  if (CPP_OPTION (pfile, warn_unused_macros))\n+    cpp_forall_identifiers (pfile, _cpp_warn_if_unused_macro, NULL);\n+\n   /* cpplex.c leaves the final buffer on the stack.  This it so that\n      it returns an unending stream of CPP_EOFs to the client.  If we\n      popped the buffer, we'd dereference a NULL buffer pointer and\n@@ -1165,10 +1171,12 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"Wno-traditional\",          0,      OPT_Wno_traditional)            \\\n   DEF_OPT(\"Wno-trigraphs\",            0,      OPT_Wno_trigraphs)              \\\n   DEF_OPT(\"Wno-undef\",                0,      OPT_Wno_undef)                  \\\n+  DEF_OPT(\"Wno-unused-macros\",        0,      OPT_Wno_unused_macros)          \\\n   DEF_OPT(\"Wsystem-headers\",          0,      OPT_Wsystem_headers)            \\\n   DEF_OPT(\"Wtraditional\",             0,      OPT_Wtraditional)               \\\n   DEF_OPT(\"Wtrigraphs\",               0,      OPT_Wtrigraphs)                 \\\n   DEF_OPT(\"Wundef\",                   0,      OPT_Wundef)                     \\\n+  DEF_OPT(\"Wunused-macros\",           0,      OPT_Wunused_macros)             \\\n   DEF_OPT(\"d\",                        no_arg, OPT_d)                          \\\n   DEF_OPT(\"fno-operator-names\",       0,      OPT_fno_operator_names)         \\\n   DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed)           \\\n@@ -1692,6 +1700,13 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, warn_comments) = 0;\n \t  break;\n \n+\tcase OPT_Wunused_macros:\n+\t  CPP_OPTION (pfile, warn_unused_macros) = 1;\n+\t  break;\n+\tcase OPT_Wno_unused_macros:\n+\t  CPP_OPTION (pfile, warn_unused_macros) = 0;\n+\t  break;\n+\n \tcase OPT_Wundef:\n \t  CPP_OPTION (pfile, warn_undef) = 1;\n \t  break;"}, {"sha": "935a0e0b882233534e887c8696aea5159e68a336", "filename": "gcc/cpplib.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -545,6 +545,9 @@ do_undef (pfile)\n       if (node->flags & NODE_WARN)\n \tcpp_error (pfile, DL_WARNING, \"undefining \\\"%s\\\"\", NODE_NAME (node));\n \n+      if (CPP_OPTION (pfile, warn_unused_macros))\n+\t_cpp_warn_if_unused_macro (pfile, node, NULL);\n+\n       _cpp_free_definition (node);\n     }\n   check_eol (pfile);\n@@ -1331,10 +1334,11 @@ do_ifdef (pfile)\n       const cpp_hashnode *node = lex_macro_node (pfile);\n \n       if (node)\n-\tskip = node->type != NT_MACRO;\n-\n-      if (node)\n-\tcheck_eol (pfile);\n+\t{\n+\t  skip = node->type != NT_MACRO;\n+\t  _cpp_mark_macro_used (node);\n+\t  check_eol (pfile);\n+\t}\n     }\n \n   push_conditional (pfile, skip, T_IFDEF, 0);\n@@ -1351,11 +1355,13 @@ do_ifndef (pfile)\n   if (! pfile->state.skipping)\n     {\n       node = lex_macro_node (pfile);\n-      if (node)\n-\tskip = node->type == NT_MACRO;\n \n       if (node)\n-\tcheck_eol (pfile);\n+\t{\n+\t  skip = node->type == NT_MACRO;\n+\t  _cpp_mark_macro_used (node);\n+\t  check_eol (pfile);\n+\t}\n     }\n \n   push_conditional (pfile, skip, T_IFNDEF, node);"}, {"sha": "8902f536902980f95ed74888b11cb0345c6e5c0b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -361,6 +361,9 @@ struct cpp_options\n   /* Nonzero means warn if undefined identifiers are evaluated in an #if.  */\n   unsigned char warn_undef;\n \n+  /* Nonzero means warn of unused macros from the main file.  */\n+  unsigned char warn_unused_macros;\n+\n   /* Nonzero for the 1999 C Standard, including corrigenda and amendments.  */\n   unsigned char c99;\n "}, {"sha": "c8e2410af619e4ce4849f6fe83c3f25812fa011e", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -74,6 +74,29 @@ static void check_trad_stringification PARAMS ((cpp_reader *,\n \t\t\t\t\t\tconst cpp_macro *,\n \t\t\t\t\t\tconst cpp_string *));\n \n+/* Emits a warning if NODE is a macro defined in the main file that\n+   has not been used.  */\n+int\n+_cpp_warn_if_unused_macro (pfile, node, v)\n+     cpp_reader *pfile;\n+     cpp_hashnode *node;\n+     void *v ATTRIBUTE_UNUSED;\n+{\n+  if (node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n+    {\n+      cpp_macro *macro = node->value.macro;\n+\n+      if (!macro->used\n+\t  /* Skip front-end built-ins and command line macros.  */\n+\t  && macro->line >= pfile->first_unused_line\n+\t  && MAIN_FILE_P (lookup_line (&pfile->line_maps, macro->line)))\n+\tcpp_error_with_line (pfile, DL_WARNING, macro->line, 0,\n+\t\t\t     \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n+    }\n+\n+  return 1;\n+}\n+\n /* Allocates and returns a CPP_STRING token, containing TEXT of length\n    LEN, after null-terminating it.  TEXT must be in permanent storage.  */\n static const cpp_token *\n@@ -728,6 +751,8 @@ enter_macro_context (pfile, node)\n       /* Disable the macro within its expansion.  */\n       node->flags |= NODE_DISABLED;\n \n+      macro->used = 1;\n+\n       if (macro->paramc == 0)\n \tpush_token_context (pfile, node, macro->exp.tokens, macro->count);\n \n@@ -1488,6 +1513,7 @@ _cpp_create_definition (pfile, node)\n   macro->params = 0;\n   macro->paramc = 0;\n   macro->variadic = 0;\n+  macro->used = 0;\n   macro->count = 0;\n   macro->fun_like = 0;\n   /* To suppress some diagnostics.  */\n@@ -1523,6 +1549,9 @@ _cpp_create_definition (pfile, node)\n \n   if (node->type != NT_VOID)\n     {\n+      if (CPP_OPTION (pfile, warn_unused_macros))\n+\t_cpp_warn_if_unused_macro (pfile, node, NULL);\n+\n       if (warn_of_redefinition (pfile, node, macro))\n \t{\n \t  cpp_error_with_line (pfile, DL_PEDWARN, pfile->directive_line, 0,"}, {"sha": "51b0bfc9cb5d12f0930838f368d5f5ba61187d85", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -655,6 +655,7 @@ scan_out_logical_line (pfile, macro)\n \t\t{\n \t\t  cpp_macro *m = fmacro.node->value.macro;\n \n+\t\t  m->used = 1;\n \t\t  lex_state = ls_none;\n \t\t  save_argument (&fmacro, out - pfile->out.base);\n \n@@ -789,6 +790,7 @@ push_replacement_text (pfile, node)\n   else\n     {\n       cpp_macro *macro = node->value.macro;\n+      macro->used = 1;\n       text = macro->exp.text;\n       len = macro->count;\n     }"}, {"sha": "24c6edd238d6b1b04953a86e0c97e173dd34e489", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -110,6 +110,16 @@ Warn whenever an identifier which is not a macro is encountered in an\n @samp{#if} directive, outside of @samp{defined}.  Such identifiers are\n replaced with zero.\n \n+@item -Wunused-macros\n+@opindex Wunused-macros\n+Warn about macros defined in the main file that are unused.  A macro\n+is @dfn{used} if it is expanded or tested for existence at least once.\n+The preprocessor will also warn if the macro has not been used at the\n+time it is redefined or undefined.\n+\n+Built-in macros, macros defined on the command line, and macros\n+defined in include files are not warned about.\n+\n @item -Wendif-labels\n @opindex Wendif-labels\n Warn whenever an @samp{#else} or an @samp{#endif} are followed by text."}, {"sha": "b3742503184ba5d44d9400185fd5502bf6e94be6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -1,3 +1,8 @@\n+2002-07-24  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/trad/Wunused.c, gcc.dg/cpp/trad/Wunused.h,\n+\tgcc.dg/cpp/Wunused.c, gcc.dg/cpp/Wunused.h: New tests.\n+\n 2002-07-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/va-arg-15.x, va-arg-16.x, va-arg-17.x:"}, {"sha": "f134f55a15946496461f221e019778323506abbb", "filename": "gcc/testsuite/gcc.dg/cpp/Wunused.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -Wunused-macros } */\n+\n+/* Test everything related to -Wunused-macros.\n+\n+   Source: Neil Booth, 23 Jul 2002.  */\n+\n+#include \"Wunused.h\"\n+\n+#define used1\t\t\t/* { dg-bogus \"used\" } */\n+#define used2\t\t\t/* { dg-bogus \"used\" } */\n+#define used3\t\t\t/* { dg-bogus \"used\" } */\n+#define used4 used4\t\t/* { dg-bogus \"used\" } */\n+\n+#define unused5\t\t\t/* { dg-warning \"used\" } */\n+#define unused6\t\t\t/* { dg-warning \"used\" } */\n+#define unused7()\t\t/* { dg-warning \"used\" } */\n+\n+#if defined used1\n+#endif\n+#ifdef used2\n+#endif\n+#ifndef used3\n+#endif\n+used4\n+\n+unused7\n+#undef unused5\n+#define unused6\n+unused6"}, {"sha": "8b54412bdd47a4b6e7d22752267808647cee05e4", "filename": "gcc/testsuite/gcc.dg/cpp/Wunused.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWunused.h?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -0,0 +1 @@\n+#define unused_but_ok"}, {"sha": "fd81a27ecc7c315af6bc425e8a1f2c204a02254e", "filename": "gcc/testsuite/gcc.dg/cpp/trad/Wunused.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.c?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wunused-macros -traditional-cpp\" } */\n+\n+/* Test everything related to -Wunused-macros.\n+\n+   Source: Neil Booth, 23 Jul 2002.  */\n+\n+#include \"Wunused.h\"\n+\n+#define used1\t\t\t/* { dg-bogus \"used\" } */\n+#define used2\t\t\t/* { dg-bogus \"used\" } */\n+#define used3\t\t\t/* { dg-bogus \"used\" } */\n+#define used4 something\t\t/* { dg-bogus \"used\" } */\n+\n+#define unused5\t\t\t/* { dg-warning \"used\" } */\n+#define unused6\t\t\t/* { dg-warning \"used\" } */\n+#define unused7()\t\t/* { dg-warning \"used\" } */\n+\n+#if defined used1\n+#endif\n+#ifdef used2\n+#endif\n+#ifndef used3\n+#endif\n+used4\n+\n+#undef unused5\n+#define unused6\n+unused6"}, {"sha": "8b54412bdd47a4b6e7d22752267808647cee05e4", "filename": "gcc/testsuite/gcc.dg/cpp/trad/Wunused.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69cbaac60d73feb37e6c17abd6f84991dc791a0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2FWunused.h?ref=a69cbaac60d73feb37e6c17abd6f84991dc791a0", "patch": "@@ -0,0 +1 @@\n+#define unused_but_ok"}]}