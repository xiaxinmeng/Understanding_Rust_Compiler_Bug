{"sha": "22e6b3270068faab64778c016f4b04f787120661", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlNmIzMjcwMDY4ZmFhYjY0Nzc4YzAxNmY0YjA0Zjc4NzEyMDY2MQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-05-29T16:59:46Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-31T17:28:31Z"}, "message": "[OMP] Standardize on 'omp_privatize_by_reference'\n\n... instead of 'omp_is_reference' vs.\n'lang_hooks.decls.omp_privatize_by_reference'.\n\n\tgcc/\n\t* omp-general.h (omp_is_reference): Rename to...\n\t(omp_privatize_by_reference): ... this.  Adjust all users...\n\t* omp-general.c: ... here, ...\n\t* gimplify.c: ... here, ...\n\t* omp-expand.c: ... here, ...\n\t* omp-low.c: ... here.", "tree": {"sha": "758d284f09fa185333d7594adcaefba5e1886119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/758d284f09fa185333d7594adcaefba5e1886119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e6b3270068faab64778c016f4b04f787120661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e6b3270068faab64778c016f4b04f787120661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e6b3270068faab64778c016f4b04f787120661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e6b3270068faab64778c016f4b04f787120661/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3aa3288a958a75744df256d70e7f8e90ccab724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3aa3288a958a75744df256d70e7f8e90ccab724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3aa3288a958a75744df256d70e7f8e90ccab724"}], "stats": {"total": 187, "additions": 98, "deletions": 89}, "files": [{"sha": "99d1c7fcce40a79eb21e6ec3f7d69a5e6c2b80cf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=22e6b3270068faab64778c016f4b04f787120661", "patch": "@@ -1831,7 +1831,8 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t      gimplify_and_add (init, seq_p);\n \t      ggc_free (init);\n \t      /* Clear TREE_READONLY if we really have an initialization.  */\n-\t      if (!DECL_INITIAL (decl) && !omp_is_reference (decl))\n+\t      if (!DECL_INITIAL (decl)\n+\t\t  && !omp_privatize_by_reference (decl))\n \t\tTREE_READONLY (decl) = 0;\n \t    }\n \t  else\n@@ -7064,7 +7065,7 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n \tomp_notice_variable (ctx, TYPE_SIZE_UNIT (TREE_TYPE (decl)), true);\n     }\n   else if ((flags & (GOVD_MAP | GOVD_LOCAL)) == 0\n-\t   && lang_hooks.decls.omp_privatize_by_reference (decl))\n+\t   && omp_privatize_by_reference (decl))\n     {\n       omp_firstprivatize_type_sizes (ctx, TREE_TYPE (decl));\n \n@@ -7322,7 +7323,7 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n   bool declared = is_oacc_declared (decl);\n   tree type = TREE_TYPE (decl);\n \n-  if (lang_hooks.decls.omp_privatize_by_reference (decl))\n+  if (omp_privatize_by_reference (decl))\n     type = TREE_TYPE (type);\n \n   /* For Fortran COMMON blocks, only used variables in those blocks are\n@@ -7586,7 +7587,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t      tree type = TREE_TYPE (decl);\n \n \t      if (gimplify_omp_ctxp->target_firstprivatize_array_bases\n-\t\t  && lang_hooks.decls.omp_privatize_by_reference (decl))\n+\t\t  && omp_privatize_by_reference (decl))\n \t\ttype = TREE_TYPE (type);\n \t      if (!lang_hooks.types.omp_mappable_type (type))\n \t\t{\n@@ -7660,7 +7661,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t  n2 = splay_tree_lookup (ctx->variables, (splay_tree_key) t);\n \t  n2->value |= GOVD_SEEN;\n \t}\n-      else if (lang_hooks.decls.omp_privatize_by_reference (decl)\n+      else if (omp_privatize_by_reference (decl)\n \t       && TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl)))\n \t       && (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl))))\n \t\t   != INTEGER_CST))\n@@ -7785,7 +7786,7 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n \t  if (copyprivate)\n \t    return true;\n \n-\t  if (lang_hooks.decls.omp_privatize_by_reference (decl))\n+\t  if (omp_privatize_by_reference (decl))\n \t    return false;\n \n \t  /* Treat C++ privatized non-static data members outside\n@@ -10405,7 +10406,7 @@ omp_shared_to_firstprivate_optimizable_decl_p (tree decl)\n   HOST_WIDE_INT len = int_size_in_bytes (type);\n   if (len == -1 || len > 4 * POINTER_SIZE / BITS_PER_UNIT)\n     return false;\n-  if (lang_hooks.decls.omp_privatize_by_reference (decl))\n+  if (omp_privatize_by_reference (decl))\n     return false;\n   return true;\n }\n@@ -10730,7 +10731,7 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n \t  OMP_CLAUSE_CHAIN (clause) = nc;\n \t}\n       else if (gimplify_omp_ctxp->target_firstprivatize_array_bases\n-\t       && lang_hooks.decls.omp_privatize_by_reference (decl))\n+\t       && omp_privatize_by_reference (decl))\n \t{\n \t  OMP_CLAUSE_DECL (clause) = build_simple_mem_ref (decl);\n \t  OMP_CLAUSE_SIZE (clause)"}, {"sha": "a0e9e61b33e8ce1e300a94f04a7569de70ac9b72", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=22e6b3270068faab64778c016f4b04f787120661", "patch": "@@ -4232,9 +4232,8 @@ expand_omp_for_generic (struct omp_region *region,\n \t  && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n \t{\n \t  tree d = OMP_CLAUSE_DECL (c);\n-\t  bool is_ref = omp_is_reference (d);\n \t  tree t = d, a, dest;\n-\t  if (is_ref)\n+\t  if (omp_privatize_by_reference (t))\n \t    t = build_simple_mem_ref_loc (OMP_CLAUSE_LOCATION (c), t);\n \t  tree type = TREE_TYPE (t);\n \t  if (POINTER_TYPE_P (type))\n@@ -5236,9 +5235,8 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n \t  && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n \t{\n \t  tree d = OMP_CLAUSE_DECL (c);\n-\t  bool is_ref = omp_is_reference (d);\n \t  tree t = d, a, dest;\n-\t  if (is_ref)\n+\t  if (omp_privatize_by_reference (t))\n \t    t = build_simple_mem_ref_loc (OMP_CLAUSE_LOCATION (c), t);\n \t  if (itercnt == NULL_TREE)\n \t    {\n@@ -5952,9 +5950,8 @@ expand_omp_for_static_chunk (struct omp_region *region,\n \t  && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n \t{\n \t  tree d = OMP_CLAUSE_DECL (c);\n-\t  bool is_ref = omp_is_reference (d);\n \t  tree t = d, a, dest;\n-\t  if (is_ref)\n+\t  if (omp_privatize_by_reference (t))\n \t    t = build_simple_mem_ref_loc (OMP_CLAUSE_LOCATION (c), t);\n \t  tree type = TREE_TYPE (t);\n \t  if (POINTER_TYPE_P (type))"}, {"sha": "cc6aecb1d6695600bbb9384e6f49ad5cba256fe6", "filename": "gcc/omp-general.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=22e6b3270068faab64778c016f4b04f787120661", "patch": "@@ -79,10 +79,11 @@ omp_check_optional_argument (tree decl, bool for_present_check)\n   return lang_hooks.decls.omp_check_optional_argument (decl, for_present_check);\n }\n \n-/* Return true if DECL is a reference type.  */\n+/* True if OpenMP should privatize what this DECL points to rather\n+   than the DECL itself.  */\n \n bool\n-omp_is_reference (tree decl)\n+omp_privatize_by_reference (tree decl)\n {\n   return lang_hooks.decls.omp_privatize_by_reference (decl);\n }"}, {"sha": "6a1468d27980cdbbe022cc262e6d3e73ea400be4", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=22e6b3270068faab64778c016f4b04f787120661", "patch": "@@ -93,7 +93,7 @@ struct omp_for_data\n extern tree omp_find_clause (tree clauses, enum omp_clause_code kind);\n extern bool omp_is_allocatable_or_ptr (tree decl);\n extern tree omp_check_optional_argument (tree decl, bool for_present_check);\n-extern bool omp_is_reference (tree decl);\n+extern bool omp_privatize_by_reference (tree decl);\n extern void omp_adjust_for_condition (location_t loc, enum tree_code *cond_code,\n \t\t\t\t      tree *n2, tree v, tree step);\n extern tree omp_get_for_step_from_incr (location_t loc, tree incr);"}, {"sha": "27a513e2539036369f0e955d2007969968a63b6c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 82, "deletions": 72, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e6b3270068faab64778c016f4b04f787120661/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=22e6b3270068faab64778c016f4b04f787120661", "patch": "@@ -736,7 +736,7 @@ build_outer_var_ref (tree var, omp_context *ctx,\n     }\n   else if (outer)\n     x = lookup_decl (var, outer);\n-  else if (omp_is_reference (var))\n+  else if (omp_privatize_by_reference (var))\n     /* This can happen with orphaned constructs.  If var is reference, it is\n        possible it is shared and as such valid.  */\n     x = var;\n@@ -759,7 +759,7 @@ build_outer_var_ref (tree var, omp_context *ctx,\n \t}\n     }\n \n-  if (omp_is_reference (var))\n+  if (omp_privatize_by_reference (var))\n     x = build_simple_mem_ref (x);\n \n   return x;\n@@ -824,7 +824,8 @@ install_var_field (tree var, bool by_ref, int mask, omp_context *ctx)\n     }\n   else if (by_ref)\n     type = build_pointer_type (type);\n-  else if ((mask & (32 | 3)) == 1 && omp_is_reference (var))\n+  else if ((mask & (32 | 3)) == 1\n+\t   && omp_privatize_by_reference (var))\n     type = TREE_TYPE (type);\n \n   field = build_decl (DECL_SOURCE_LOCATION (var),\n@@ -1217,7 +1218,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  if ((! TREE_READONLY (decl) && !OMP_CLAUSE_SHARED_READONLY (c))\n \t      || TREE_ADDRESSABLE (decl)\n \t      || by_ref\n-\t      || omp_is_reference (decl))\n+\t      || omp_privatize_by_reference (decl))\n \t    {\n \t      by_ref = use_pointer_for_field (decl, ctx);\n \t      install_var_field (decl, by_ref, 3, ctx);\n@@ -1368,7 +1369,10 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      && is_gimple_omp_offloaded (ctx->stmt))\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n-\t\tinstall_var_field (decl, !omp_is_reference (decl), 3, ctx);\n+\t\t{\n+\t\t  by_ref = !omp_privatize_by_reference (decl);\n+\t\t  install_var_field (decl, by_ref, 3, ctx);\n+\t\t}\n \t      else if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n \t\tinstall_var_field (decl, true, 3, ctx);\n \t      else\n@@ -1396,7 +1400,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      by_ref = use_pointer_for_field (decl, NULL);\n \n \t      if (is_task_ctx (ctx)\n-\t\t  && (global || by_ref || omp_is_reference (decl)))\n+\t\t  && (global || by_ref || omp_privatize_by_reference (decl)))\n \t\t{\n \t\t  if (ctx->allocate_map\n \t\t      && ctx->allocate_map->get (decl))\n@@ -1420,7 +1424,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  if (lang_hooks.decls.omp_array_data (decl, true))\n \t    install_var_field (decl, false, 19, ctx);\n \t  else if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n-\t\t    && !omp_is_reference (decl)\n+\t\t    && !omp_privatize_by_reference (decl)\n \t\t    && !omp_is_allocatable_or_ptr (decl))\n \t\t   || TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n \t    install_var_field (decl, true, 11, ctx);\n@@ -4715,7 +4719,7 @@ lower_private_allocate (tree var, tree new_var, tree &allocator,\n       allocator = *allocatorp;\n   if (allocator == NULL_TREE)\n     return false;\n-  if (!is_ref && omp_is_reference (var))\n+  if (!is_ref && omp_privatize_by_reference (var))\n     {\n       allocator = NULL_TREE;\n       return false;\n@@ -4813,7 +4817,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \tcase OMP_CLAUSE_LASTPRIVATE:\n \t  if (is_variable_sized (OMP_CLAUSE_DECL (c)))\n \t    sctx.max_vf = 1;\n-\t  else if (omp_is_reference (OMP_CLAUSE_DECL (c)))\n+\t  else if (omp_privatize_by_reference (OMP_CLAUSE_DECL (c)))\n \t    {\n \t      tree rtype = TREE_TYPE (TREE_TYPE (OMP_CLAUSE_DECL (c)));\n \t      if (!TREE_CONSTANT (TYPE_SIZE_UNIT (rtype)))\n@@ -4825,7 +4829,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t  if (TREE_CODE (OMP_CLAUSE_DECL (c)) == MEM_REF\n \t      || is_variable_sized (OMP_CLAUSE_DECL (c)))\n \t    sctx.max_vf = 1;\n-\t  else if (omp_is_reference (OMP_CLAUSE_DECL (c)))\n+\t  else if (omp_privatize_by_reference (OMP_CLAUSE_DECL (c)))\n \t    {\n \t      tree rtype = TREE_TYPE (TREE_TYPE (OMP_CLAUSE_DECL (c)));\n \t      if (!TREE_CONSTANT (TYPE_SIZE_UNIT (rtype)))\n@@ -4987,7 +4991,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t original address, it is always the address of the\n \t\t\t global variable itself.  */\n \t\t      if (!DECL_P (var)\n-\t\t\t  || omp_is_reference (var)\n+\t\t\t  || omp_privatize_by_reference (var)\n \t\t\t  || !is_global_var\n \t\t\t\t(maybe_lookup_decl_in_outer_ctx (var, ctx)))\n \t\t\t{\n@@ -5428,10 +5432,10 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t      tree ref = build_outer_var_ref (var, ctx);\n \t\t      /* For ref build_outer_var_ref already performs this.  */\n \t\t      if (TREE_CODE (d) == INDIRECT_REF)\n-\t\t\tgcc_assert (omp_is_reference (var));\n+\t\t\tgcc_assert (omp_privatize_by_reference (var));\n \t\t      else if (TREE_CODE (d) == ADDR_EXPR)\n \t\t\tref = build_fold_addr_expr (ref);\n-\t\t      else if (omp_is_reference (var))\n+\t\t      else if (omp_privatize_by_reference (var))\n \t\t\tref = build_fold_addr_expr (ref);\n \t\t      ref = fold_convert_loc (clause_loc, ptype, ref);\n \t\t      if (OMP_CLAUSE_REDUCTION_PLACEHOLDER (c)\n@@ -5578,7 +5582,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  bool by_ref = use_pointer_for_field (var, ctx);\n \t\t  x = build_receiver_ref (var, by_ref, ctx);\n \t\t}\n-\t      if (!omp_is_reference (var))\n+\t      if (!omp_privatize_by_reference (var))\n \t\tx = build_fold_addr_expr (x);\n \t      x = fold_convert (ptr_type_node, x);\n \t      unsigned cnt = task_reduction_cnt - 1;\n@@ -5594,7 +5598,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t  else if (pass == 3)\n \t    {\n \t      tree type = TREE_TYPE (new_var);\n-\t      if (!omp_is_reference (var))\n+\t      if (!omp_privatize_by_reference (var))\n \t\ttype = build_pointer_type (type);\n \t      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_REDUCTION)\n \t\t{\n@@ -5622,7 +5626,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t}\n \t      x = fold_convert (type, x);\n \t      tree t;\n-\t      if (omp_is_reference (var))\n+\t      if (omp_privatize_by_reference (var))\n \t\t{\n \t\t  gimplify_assign (new_var, x, ilist);\n \t\t  t = new_var;\n@@ -5683,7 +5687,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  gimplify_assign (ptr, x, ilist);\n \t\t}\n \t    }\n-\t  else if (omp_is_reference (var)\n+\t  else if (omp_privatize_by_reference (var)\n \t\t   && (c_kind != OMP_CLAUSE_FIRSTPRIVATE\n \t\t       || !OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE (c)))\n \t    {\n@@ -5848,11 +5852,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t       || (gimple_omp_for_index (ctx->stmt, 0)\n \t\t\t\t   != new_var)))\n \t\t       || OMP_CLAUSE_CODE (c) == OMP_CLAUSE__CONDTEMP_\n-\t\t       || omp_is_reference (var))\n+\t\t       || omp_privatize_by_reference (var))\n \t\t      && lower_rec_simd_input_clauses (new_var, ctx, &sctx,\n \t\t\t\t\t\t       ivar, lvar))\n \t\t    {\n-\t\t      if (omp_is_reference (var))\n+\t\t      if (omp_privatize_by_reference (var))\n \t\t\t{\n \t\t\t  gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t\t  tree new_vard = TREE_OPERAND (new_var, 0);\n@@ -5938,7 +5942,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t}\n \t\t      break;\n \t\t    }\n-\t\t  if (omp_is_reference (var))\n+\t\t  if (omp_privatize_by_reference (var))\n \t\t    {\n \t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t      tree new_vard = TREE_OPERAND (new_var, 0);\n@@ -6008,7 +6012,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t    case OMP_CLAUSE_FIRSTPRIVATE:\n \t      if (is_task_ctx (ctx))\n \t\t{\n-\t\t  if ((omp_is_reference (var)\n+\t\t  if ((omp_privatize_by_reference (var)\n \t\t       && !OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE (c))\n \t\t      || is_variable_sized (var))\n \t\t    goto do_dtor;\n@@ -6035,7 +6039,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t    }\n \t\t}\n \t      if (OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE (c)\n-\t\t  && omp_is_reference (var))\n+\t\t  && omp_privatize_by_reference (var))\n \t\t{\n \t\t  x = build_outer_var_ref (var, ctx);\n \t\t  gcc_assert (TREE_CODE (x) == MEM_REF\n@@ -6080,7 +6084,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \n \t\t      if (OMP_CLAUSE_LINEAR_ARRAY (c))\n \t\t\t{\n-\t\t\t  if (omp_is_reference (var))\n+\t\t\t  if (omp_privatize_by_reference (var))\n \t\t\t    {\n \t\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t\t      tree new_vard = TREE_OPERAND (new_var, 0);\n@@ -6117,11 +6121,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \n \t\t  if ((OMP_CLAUSE_CODE (c) != OMP_CLAUSE_LINEAR\n \t\t       || TREE_ADDRESSABLE (new_var)\n-\t\t       || omp_is_reference (var))\n+\t\t       || omp_privatize_by_reference (var))\n \t\t      && lower_rec_simd_input_clauses (new_var, ctx, &sctx,\n \t\t\t\t\t\t       ivar, lvar))\n \t\t    {\n-\t\t      if (omp_is_reference (var))\n+\t\t      if (omp_privatize_by_reference (var))\n \t\t\t{\n \t\t\t  gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t\t  tree new_vard = TREE_OPERAND (new_var, 0);\n@@ -6158,7 +6162,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\tgimplify_and_add (x, &llist[1]);\n \t\t      break;\n \t\t    }\n-\t\t  if (omp_is_reference (var))\n+\t\t  if (omp_privatize_by_reference (var))\n \t\t    {\n \t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t      tree new_vard = TREE_OPERAND (new_var, 0);\n@@ -6241,14 +6245,14 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t\t\t      NULL_TREE);\n \t\t      x = build_outer_var_ref (var, ctx);\n \n-\t\t      if (omp_is_reference (var)\n+\t\t      if (omp_privatize_by_reference (var)\n \t\t\t  && !useless_type_conversion_p (ptype, TREE_TYPE (x)))\n \t\t\tx = build_fold_addr_expr_loc (clause_loc, x);\n \t\t    }\n \t\t  SET_DECL_VALUE_EXPR (placeholder, x);\n \t\t  DECL_HAS_VALUE_EXPR_P (placeholder) = 1;\n \t\t  tree new_vard = new_var;\n-\t\t  if (omp_is_reference (var))\n+\t\t  if (omp_privatize_by_reference (var))\n \t\t    {\n \t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t      new_vard = TREE_OPERAND (new_var, 0);\n@@ -6408,7 +6412,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t     for it because it is undesirable if SIMD arrays are used.\n \t\t     But if they aren't used, we need to emit the deferred\n \t\t     initialization now.  */\n-\t\t  else if (omp_is_reference (var) && is_simd)\n+\t\t  else if (omp_privatize_by_reference (var) && is_simd)\n \t\t    handle_simd_reference (clause_loc, new_vard, ilist);\n \n \t\t  tree lab2 = NULL_TREE;\n@@ -6603,7 +6607,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  bool is_truth_op\n \t\t    = (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR);\n \t\t  tree new_vard = new_var;\n-\t\t  if (is_simd && omp_is_reference (var))\n+\t\t  if (is_simd && omp_privatize_by_reference (var))\n \t\t    {\n \t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n \t\t      new_vard = TREE_OPERAND (new_var, 0);\n@@ -6674,7 +6678,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t      lower_private_allocate (var, new_var, allocator,\n \t\t\t\t\t      allocate_ptr, ilist, ctx,\n \t\t\t\t\t      false, NULL_TREE);\n-\t\t      if (omp_is_reference (var) && is_simd)\n+\t\t      if (omp_privatize_by_reference (var) && is_simd)\n \t\t\thandle_simd_reference (clause_loc, new_vard, ilist);\n \t\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t\t\t  && OMP_CLAUSE_REDUCTION_INSCAN (c))\n@@ -7275,7 +7279,7 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *body_p,\n \t    }\n \t  if (!x)\n \t    x = build_outer_var_ref (var, ctx, OMP_CLAUSE_LASTPRIVATE);\n-\t  if (omp_is_reference (var))\n+\t  if (omp_privatize_by_reference (var))\n \t    new_var = build_simple_mem_ref_loc (clause_loc, new_var);\n \t  x = lang_hooks.decls.omp_clause_assign_op (c, x, new_var);\n \t  gimplify_and_add (x, this_stmt_list);\n@@ -7421,7 +7425,7 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t\t&& maybe_lookup_field (orig, outer) && !is_private)\n \t      {\n \t\tref_to_res = build_receiver_ref (orig, false, outer);\n-\t\tif (omp_is_reference (orig))\n+\t\tif (omp_privatize_by_reference (orig))\n \t\t  ref_to_res = build_simple_mem_ref (ref_to_res);\n \n \t\ttree type = TREE_TYPE (var);\n@@ -7451,7 +7455,7 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \tif (!ref_to_res)\n \t  ref_to_res = integer_zero_node;\n \n-\tif (omp_is_reference (orig))\n+\tif (omp_privatize_by_reference (orig))\n \t  {\n \t    tree type = TREE_TYPE (var);\n \t    const char *id = IDENTIFIER_POINTER (DECL_NAME (var));\n@@ -7631,7 +7635,8 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t    }\n \t}\n       new_var = lookup_decl (var, ctx);\n-      if (var == OMP_CLAUSE_DECL (c) && omp_is_reference (var))\n+      if (var == OMP_CLAUSE_DECL (c)\n+\t  && omp_privatize_by_reference (var))\n \tnew_var = build_simple_mem_ref_loc (clause_loc, new_var);\n       ref = build_outer_var_ref (var, ctx, ccode);\n       code = OMP_CLAUSE_REDUCTION_CODE (c);\n@@ -7700,7 +7705,8 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t  if (TREE_CODE (d) == INDIRECT_REF)\n \t    {\n \t      new_var = build_simple_mem_ref_loc (clause_loc, new_var);\n-\t      gcc_assert (omp_is_reference (var) && var == orig_var);\n+\t      gcc_assert (omp_privatize_by_reference (var)\n+\t\t\t  && var == orig_var);\n \t    }\n \t  else if (TREE_CODE (d) == ADDR_EXPR)\n \t    {\n@@ -7713,7 +7719,7 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t  else\n \t    {\n \t      gcc_assert (orig_var == var);\n-\t      if (omp_is_reference (var))\n+\t      if (omp_privatize_by_reference (var))\n \t\tref = build_fold_addr_expr (ref);\n \t    }\n \t  if (DECL_P (v))\n@@ -7799,7 +7805,7 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t{\n \t  tree placeholder = OMP_CLAUSE_REDUCTION_PLACEHOLDER (c);\n \n-\t  if (omp_is_reference (var)\n+\t  if (omp_privatize_by_reference (var)\n \t      && !useless_type_conversion_p (TREE_TYPE (placeholder),\n \t\t\t\t\t     TREE_TYPE (ref)))\n \t    ref = build_fold_addr_expr_loc (clause_loc, ref);\n@@ -7885,7 +7891,7 @@ lower_copyprivate_clauses (tree clauses, gimple_seq *slist, gimple_seq *rlist,\n \t\t\t\t  ref);\n \t  ref = build_fold_indirect_ref_loc (clause_loc, ref);\n \t}\n-      if (omp_is_reference (var))\n+      if (omp_privatize_by_reference (var))\n \t{\n \t  ref = fold_convert_loc (clause_loc, TREE_TYPE (new_var), ref);\n \t  ref = build_simple_mem_ref_loc (clause_loc, ref);\n@@ -8038,7 +8044,7 @@ lower_send_clauses (tree clauses, gimple_seq *ilist, gimple_seq *olist,\n \t  break;\n \n \tcase OMP_CLAUSE_LASTPRIVATE:\n-\t  if (by_ref || omp_is_reference (val))\n+\t  if (by_ref || omp_privatize_by_reference (val))\n \t    {\n \t      if (OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (c))\n \t\tcontinue;\n@@ -8060,7 +8066,7 @@ lower_send_clauses (tree clauses, gimple_seq *ilist, gimple_seq *olist,\n \t      if (is_task_ctx (ctx))\n \t\tby_ref = use_pointer_for_field (val, ctx);\n \t      else\n-\t\tdo_out = !(by_ref || omp_is_reference (val));\n+\t\tdo_out = !(by_ref || omp_privatize_by_reference (val));\n \t    }\n \t  else\n \t    by_ref = TREE_CODE (TREE_TYPE (val)) == ARRAY_TYPE;\n@@ -8934,7 +8940,7 @@ omp_task_reduction_iterate (int pass, enum tree_code code,\n \t}\n       else\n \t{\n-\t  if (omp_is_reference (*decl))\n+\t  if (omp_privatize_by_reference (*decl))\n \t    *type = TREE_TYPE (*type);\n \t  if (pass != (!TREE_CONSTANT (TYPE_SIZE_UNIT (*type))))\n \t    continue;\n@@ -9222,7 +9228,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t  else\n \t    {\n \t      t = ref = maybe_lookup_decl_in_outer_ctx (var, ctx);\n-\t      if (!omp_is_reference (decl))\n+\t      if (!omp_privatize_by_reference (decl))\n \t\tt = build_fold_addr_expr (t);\n \t    }\n \t  t = fold_convert (pointer_sized_int_node, t);\n@@ -9305,7 +9311,8 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t\t\t      build_simple_mem_ref (ptr), field, NULL_TREE);\n \n \t  enum tree_code rcode = OMP_CLAUSE_REDUCTION_CODE (c);\n-\t  if (TREE_CODE (decl) != MEM_REF && omp_is_reference (decl))\n+\t  if (TREE_CODE (decl) != MEM_REF\n+\t      && omp_privatize_by_reference (decl))\n \t    ref = build_simple_mem_ref (ref);\n \t  /* reduction(-:var) sums up the partial results, so it acts\n \t     identically to reduction(+:var).  */\n@@ -9421,7 +9428,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t\t  gimple_seq_add_stmt (end, g);\n \t\t  gimple_seq_add_stmt (end, gimple_build_label (lab5));\n \t\t}\n-\t      if (omp_is_reference (decl)\n+\t      if (omp_privatize_by_reference (decl)\n \t\t  && !useless_type_conversion_p (TREE_TYPE (placeholder),\n \t\t\t\t\t\t TREE_TYPE (ref)))\n \t\tref = build_fold_addr_expr_loc (OMP_CLAUSE_LOCATION (c), ref);\n@@ -9435,7 +9442,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t      gcc_assert (d);\n \t      if (DECL_HAS_VALUE_EXPR_P (d))\n \t\toldv = DECL_VALUE_EXPR (d);\n-\t      if (omp_is_reference (var))\n+\t      if (omp_privatize_by_reference (var))\n \t\t{\n \t\t  tree v = fold_convert (TREE_TYPE (d),\n \t\t\t\t\t build_fold_addr_expr (new_var));\n@@ -10007,7 +10014,7 @@ lower_omp_scan (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    tree var4 = NULL_TREE;\n \t    tree lane0 = NULL_TREE;\n \t    tree new_vard = new_var;\n-\t    if (omp_is_reference (var))\n+\t    if (omp_privatize_by_reference (var))\n \t      {\n \t\tnew_var = build_simple_mem_ref_loc (clause_loc, new_var);\n \t\tval = new_var;\n@@ -10874,7 +10881,7 @@ lower_omp_for_scan (gimple_seq *body_p, gimple_seq *dlist, gomp_for *stmt,\n \ttree new_var = lookup_decl (var, ctx);\n \ttree var3 = NULL_TREE;\n \ttree new_vard = new_var;\n-\tif (omp_is_reference (var))\n+\tif (omp_privatize_by_reference (var))\n \t  new_var = build_simple_mem_ref_loc (clause_loc, new_var);\n \tif (OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t  {\n@@ -12047,7 +12054,8 @@ create_task_copyfn (gomp_task *task_stmt, omp_context *ctx)\n \t      sf = *tcctx.cb.decl_map->get (sf);\n \t    src = build_simple_mem_ref_loc (loc, sarg);\n \t    src = omp_build_component_ref (src, sf);\n-\t    if (use_pointer_for_field (decl, NULL) || omp_is_reference (decl))\n+\t    if (use_pointer_for_field (decl, NULL)\n+\t\t|| omp_privatize_by_reference (decl))\n \t      src = build_simple_mem_ref_loc (loc, src);\n \t  }\n \telse\n@@ -12667,7 +12675,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n \t      {\n \t\tgcc_assert (is_gimple_omp_oacc (ctx->stmt));\n-\t\tif (omp_is_reference (new_var)\n+\t\tif (omp_privatize_by_reference (new_var)\n \t\t    && (TREE_CODE (TREE_TYPE (new_var)) != POINTER_TYPE\n \t\t        || DECL_BY_REFERENCE (var)))\n \t\t  {\n@@ -12705,7 +12713,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  }\n \tmap_cnt++;\n \tvar = OMP_CLAUSE_DECL (c);\n-\tif (!omp_is_reference (var)\n+\tif (!omp_privatize_by_reference (var)\n \t    && !is_gimple_reg_type (TREE_TYPE (var)))\n \t  {\n \t    tree new_var = lookup_decl (var, ctx);\n@@ -12772,7 +12780,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    DECL_HAS_VALUE_EXPR_P (new_var) = 1;\n \t  }\n \telse if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n-\t\t  && !omp_is_reference (var)\n+\t\t  && !omp_privatize_by_reference (var)\n \t\t  && !omp_is_allocatable_or_ptr (var)\n \t\t  && !lang_hooks.decls.omp_array_data (var, true))\n \t\t || TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n@@ -12995,7 +13003,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n \t\t  {\n \t\t    gcc_assert (is_gimple_omp_oacc (ctx->stmt));\n-\t\t    if (!omp_is_reference (var))\n+\t\t    if (!omp_privatize_by_reference (var))\n \t\t      {\n \t\t\tif (is_gimple_reg (var)\n \t\t\t    && OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n@@ -13158,23 +13166,23 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (is_gimple_omp_oacc (ctx->stmt))\n \t      goto oacc_firstprivate_map;\n \t    ovar = OMP_CLAUSE_DECL (c);\n-\t    if (omp_is_reference (ovar))\n+\t    if (omp_privatize_by_reference (ovar))\n \t      talign = TYPE_ALIGN_UNIT (TREE_TYPE (TREE_TYPE (ovar)));\n \t    else\n \t      talign = DECL_ALIGN_UNIT (ovar);\n \t    var = lookup_decl_in_outer_ctx (ovar, ctx);\n \t    x = build_sender_ref (ovar, ctx);\n \t    tkind = GOMP_MAP_FIRSTPRIVATE;\n \t    type = TREE_TYPE (ovar);\n-\t    if (omp_is_reference (ovar))\n+\t    if (omp_privatize_by_reference (ovar))\n \t      type = TREE_TYPE (type);\n \t    if ((INTEGRAL_TYPE_P (type)\n \t\t && TYPE_PRECISION (type) <= POINTER_SIZE)\n \t\t|| TREE_CODE (type) == POINTER_TYPE)\n \t      {\n \t\ttkind = GOMP_MAP_FIRSTPRIVATE_INT;\n \t\ttree t = var;\n-\t\tif (omp_is_reference (var))\n+\t\tif (omp_privatize_by_reference (var))\n \t\t  t = build_simple_mem_ref (var);\n \t\telse if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n \t\t  suppress_warning (var);\n@@ -13183,7 +13191,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tt = fold_convert (TREE_TYPE (x), t);\n \t\tgimplify_assign (x, t, &ilist);\n \t      }\n-\t    else if (omp_is_reference (var))\n+\t    else if (omp_privatize_by_reference (var))\n \t      gimplify_assign (x, var, &ilist);\n \t    else if (is_gimple_reg (var))\n \t      {\n@@ -13202,7 +13210,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      }\n \t    if (tkind == GOMP_MAP_FIRSTPRIVATE_INT)\n \t      s = size_int (0);\n-\t    else if (omp_is_reference (ovar))\n+\t    else if (omp_privatize_by_reference (ovar))\n \t      s = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ovar)));\n \t    else\n \t      s = TYPE_SIZE_UNIT (TREE_TYPE (ovar));\n@@ -13257,13 +13265,13 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (lang_hooks.decls.omp_array_data (ovar, true))\n \t      var = lang_hooks.decls.omp_array_data (ovar, false);\n \t    else if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n-\t\t      && !omp_is_reference (ovar)\n+\t\t      && !omp_privatize_by_reference (ovar)\n \t\t      && !omp_is_allocatable_or_ptr (ovar))\n \t\t     || TREE_CODE (type) == ARRAY_TYPE)\n \t      var = build_fold_addr_expr (var);\n \t    else\n \t      {\n-\t\tif (omp_is_reference (ovar)\n+\t\tif (omp_privatize_by_reference (ovar)\n \t\t    || omp_check_optional_argument (ovar, false)\n \t\t    || omp_is_allocatable_or_ptr (ovar))\n \t\t  {\n@@ -13272,7 +13280,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t&& TREE_CODE (type) != ARRAY_TYPE\n \t\t\t&& ((OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t\t    && !omp_is_allocatable_or_ptr (ovar))\n-\t\t\t   || (omp_is_reference (ovar)\n+\t\t\t   || (omp_privatize_by_reference (ovar)\n \t\t\t       && omp_is_allocatable_or_ptr (ovar))))\n \t\t      var = build_simple_mem_ref (var);\n \t\t    var = fold_convert (TREE_TYPE (x), var);\n@@ -13387,13 +13395,13 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (is_gimple_omp_oacc (ctx->stmt))\n \t      break;\n \t    var = OMP_CLAUSE_DECL (c);\n-\t    if (omp_is_reference (var)\n+\t    if (omp_privatize_by_reference (var)\n \t\t|| is_gimple_reg_type (TREE_TYPE (var)))\n \t      {\n \t\ttree new_var = lookup_decl (var, ctx);\n \t\ttree type;\n \t\ttype = TREE_TYPE (var);\n-\t\tif (omp_is_reference (var))\n+\t\tif (omp_privatize_by_reference (var))\n \t\t  type = TREE_TYPE (type);\n \t\tif ((INTEGRAL_TYPE_P (type)\n \t\t     && TYPE_PRECISION (type) <= POINTER_SIZE)\n@@ -13405,7 +13413,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t    x = fold_convert (type, x);\n \t\t    gimplify_expr (&x, &new_body, NULL, is_gimple_val,\n \t\t\t\t   fb_rvalue);\n-\t\t    if (omp_is_reference (var))\n+\t\t    if (omp_privatize_by_reference (var))\n \t\t      {\n \t\t\ttree v = create_tmp_var_raw (type, get_name (var));\n \t\t\tgimple_add_tmp_var (v);\n@@ -13419,7 +13427,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    x = build_receiver_ref (var, !omp_is_reference (var), ctx);\n+\t\t    bool by_ref = !omp_privatize_by_reference (var);\n+\t\t    x = build_receiver_ref (var, by_ref, ctx);\n \t\t    gimplify_expr (&x, &new_body, NULL, is_gimple_val,\n \t\t\t\t   fb_rvalue);\n \t\t    gimple_seq_add_stmt (&new_body,\n@@ -13443,7 +13452,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (is_gimple_omp_oacc (ctx->stmt))\n \t      break;\n \t    var = OMP_CLAUSE_DECL (c);\n-\t    if (omp_is_reference (var))\n+\t    if (omp_privatize_by_reference (var))\n \t      {\n \t\tlocation_t clause_loc = OMP_CLAUSE_LOCATION (c);\n \t\ttree new_var = lookup_decl (var, ctx);\n@@ -13486,7 +13495,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n \t    if (is_array_data)\n \t      {\n-\t\tbool is_ref = omp_is_reference (var);\n+\t\tbool is_ref = omp_privatize_by_reference (var);\n \t\tdo_optional_check = true;\n \t\t/* First, we copy the descriptor data from the host; then\n \t\t   we update its data to point to the target address.  */\n@@ -13530,7 +13539,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t     gimple_build_assign (new_var, x));\n \t      }\n \t    else if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n-\t\t      && !omp_is_reference (var)\n+\t\t      && !omp_privatize_by_reference (var)\n \t\t      && !omp_is_allocatable_or_ptr (var))\n \t\t     || TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n \t      {\n@@ -13547,13 +13556,13 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      {\n \t\ttree type = TREE_TYPE (var);\n \t\tnew_var = lookup_decl (var, ctx);\n-\t\tif (omp_is_reference (var))\n+\t\tif (omp_privatize_by_reference (var))\n \t\t  {\n \t\t    type = TREE_TYPE (type);\n \t\t    if (POINTER_TYPE_P (type)\n \t\t\t&& TREE_CODE (type) != ARRAY_TYPE\n \t\t\t&& (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_USE_DEVICE_ADDR\n-\t\t\t    || (omp_is_reference (var)\n+\t\t\t    || (omp_privatize_by_reference (var)\n \t\t\t\t&& omp_is_allocatable_or_ptr (var))))\n \t\t      {\n \t\t\ttree v = create_tmp_var_raw (type, get_name (var));\n@@ -13671,7 +13680,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t\t\t     offset));\n \t\t  }\n \t\telse\n-\t\t  is_ref = omp_is_reference (var);\n+\t\t  is_ref = omp_privatize_by_reference (var);\n \t\tif (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_REFERENCE)\n \t\t  is_ref = false;\n \t\tbool ref_to_array = false;\n@@ -13751,7 +13760,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tgimple_seq_add_stmt (&new_body,\n \t\t\t\t     gimple_build_assign (new_pvar, x));\n \t      }\n-\t    else if (omp_is_reference (var) && !is_gimple_omp_oacc (ctx->stmt))\n+\t    else if (omp_privatize_by_reference (var)\n+\t\t     && !is_gimple_omp_oacc (ctx->stmt))\n \t      {\n \t\tlocation_t clause_loc = OMP_CLAUSE_LOCATION (c);\n \t\ttree new_var = lookup_decl (var, ctx);"}]}