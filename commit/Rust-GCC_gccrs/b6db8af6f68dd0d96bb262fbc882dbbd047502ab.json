{"sha": "b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkYjhhZjZmNjhkZDBkOTZiYjI2MmZiYzg4MmRiYmQwNDc1MDJhYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-08T19:02:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-08T19:02:28Z"}, "message": "re PR target/61092 (wide-int merge broke alpha bootstrap)\n\n\tPR target/61092\n\t* config/alpha/alpha.c: Include gimple-iterator.h.\n\t(alpha_gimple_fold_builtin): New function.  Move\n\tALPHA_BUILTIN_UMULH folding from ...\n\t(alpha_fold_builtin): ... here.\n\t(TARGET_GIMPLE_FOLD_BUILTIN): New define.\n\nFrom-SVN: r210233", "tree": {"sha": "6ae218dd7f9c2c844539234197a61fc837c1be98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae218dd7f9c2c844539234197a61fc837c1be98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db8af6f68dd0d96bb262fbc882dbbd047502ab/comments", "author": null, "committer": null, "parents": [{"sha": "07e4f10aa645c9eb91164f6854cf6ab71b35223d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e4f10aa645c9eb91164f6854cf6ab71b35223d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e4f10aa645c9eb91164f6854cf6ab71b35223d"}], "stats": {"total": 245, "additions": 134, "deletions": 111}, "files": [{"sha": "1ec6cf4fe3a2eea8e31ee162ad2ecc75694342e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 108, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db8af6f68dd0d96bb262fbc882dbbd047502ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db8af6f68dd0d96bb262fbc882dbbd047502ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "patch": "@@ -1,12 +1,19 @@\n+2014-05-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61092\n+\t* config/alpha/alpha.c: Include gimple-iterator.h.\n+\t(alpha_gimple_fold_builtin): New function.  Move\n+\tALPHA_BUILTIN_UMULH folding from ...\n+\t(alpha_fold_builtin): ... here.\n+\t(TARGET_GIMPLE_FOLD_BUILTIN): New define.\n+\n 2014-05-08  Wei Mi  <wmi@google.com>\n \n \tPR target/58066\n-\t* config/i386/i386.c (ix86_compute_frame_layout):\n-\tUpdate preferred_stack_boundary for call, expanded from\n-\ttls descriptor.\n-\t* config/i386/i386.md:\n-\t(*tls_global_dynamic_32_gnu): Update RTX to depend on\n-\tSP register.\n+\t* config/i386/i386.c (ix86_compute_frame_layout): Update\n+\tpreferred_stack_boundary for call, expanded from tls descriptor.\n+\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Update RTX\n+\tto depend on SP register.\n \t(*tls_local_dynamic_base_32_gnu): Ditto.\n \t(*tls_local_dynamic_32_once): Ditto.\n \t(tls_global_dynamic_64_<mode>): Set\n@@ -171,7 +178,7 @@\n 2014-05-08  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* wide-int.cc (UTItype): Define.\n- \t(UDWtype): Define for appropriate W_TYPE_SIZE.\n+\t(UDWtype): Define for appropriate W_TYPE_SIZE.\n \n 2014-05-08  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -353,16 +360,13 @@\n \t(maybe_skip_until): Use translate to take into account\n \tlattices when trying to do disambiguations.\n \t(get_continuation_for_phi_1): Likewise.\n-\t(get_continuation_for_phi): Adjust for added translate\n-\targuments.\n+\t(get_continuation_for_phi): Adjust for added translate arguments.\n \t(walk_non_aliased_vuses): Likewise.\n-\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust\n-\tprototype.\n+\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust prototype.\n \t(walk_non_aliased_vuses): Likewise.\n \t(call_may_clobber_ref_p_1): Declare.\n-\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Also\n-\tdisambiguate against calls.  Stop early if we are\n-\tonly supposed to disambiguate.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Also disambiguate against\n+\tcalls.  Stop early if we are only supposed to disambiguate.\n \t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n \n 2014-05-07  Joern Rennecke  <joern.rennecke@embecosm.com>\n@@ -1337,9 +1341,10 @@\n \t* ipa-devirt.c (get_class_context): Allow POD to change to non-POD.\n \n 2014-05-05  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n-\t* target.def (call_fusage_contains_non_callee_clobbers): New DEFHOOKPOD.\n+\t* target.def (call_fusage_contains_non_callee_clobbers): New\n+\tDEFHOOKPOD.\n \t* doc/tm.texi.in (@node Stack and Calling): Add Miscellaneous Register\n \tHooks to @menu.\n \t(@node Miscellaneous Register Hooks): New node.\n@@ -1365,9 +1370,8 @@\n 2014-05-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61010\n-\t* fold-const.c (fold_binary_loc): Consistently avoid\n-\tcanonicalizing X & CST away from a CST that is the mask\n-\tof a mode.\n+\t* fold-const.c (fold_binary_loc): Consistently avoid canonicalizing\n+\tX & CST away from a CST that is the mask of a mode.\n \n 2014-05-05  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n@@ -1686,8 +1690,7 @@\n \n \t* doc/invoke.texi: Fix typo.\n \t* tree-vrp.c: Fix typos.\n-\t* gimple.c (infer_nonnull_range): Reorder operands of an &&\n-\tcondition.\n+\t* gimple.c (infer_nonnull_range): Reorder operands of an && condition.\n \n 2014-04-29  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n@@ -1814,8 +1817,7 @@\n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n \t* tree-pass.h (execute_pass_list): Adjust prototype.\n-\t* passes.c (pass_manager::execute_early_local_passes):\n-\tAdjust.\n+\t* passes.c (pass_manager::execute_early_local_passes): Adjust.\n \t(do_per_function): Change callback signature, push all actual\n \twork to the callbals.\n \t(do_per_function_toporder): Likewise.\n@@ -1866,18 +1868,18 @@\n \n 2014-04-25  Cary Coutant  <ccoutant@google.com>\n \n-        PR debug/60929\n+\tPR debug/60929\n \t* dwarf2out.c (should_move_die_to_comdat): A type definition\n-        can contain a subprogram definition, but don't move it to a\n-        comdat unit.\n+\tcan contain a subprogram definition, but don't move it to a\n+\tcomdat unit.\n \t(clone_as_declaration): Copy DW_AT_abstract_origin attribute.\n-        (generate_skeleton_bottom_up): Remove DW_AT_object_pointer attribute\n-        from original DIE.\n+\t(generate_skeleton_bottom_up): Remove DW_AT_object_pointer attribute\n+\tfrom original DIE.\n \t(clone_tree_hash): Rename to...\n \t(clone_tree_partial): ...this; change callers.  Copy\n-        DW_TAG_subprogram DIEs as declarations.\n+\tDW_TAG_subprogram DIEs as declarations.\n \t(copy_decls_walk): Don't copy children of a declaration into a\n-        type unit.\n+\ttype unit.\n \n 2014-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -1895,8 +1897,7 @@\n \n 2014-04-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-\t* config/arm/arm.c (arm_cortex_a8_tune): Initialise\n-\tT16-related fields.\n+\t* config/arm/arm.c (arm_cortex_a8_tune): Initialise T16-related fields.\n \n 2014-04-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n@@ -1922,7 +1923,7 @@\n \tclobbers.\n \n 2014-04-25  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* rtlanal.c (find_all_hard_reg_sets): Add bool implicit parameter and\n \thandle.\n@@ -1980,8 +1981,7 @@\n 2014-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* doc/extend.texi (PowerPC Built-in Functions): Document new\n-\tpowerpc extended divide, bcd, pack/unpack 128-bit, builtin\n-\tfunctions.\n+\tpowerpc extended divide, bcd, pack/unpack 128-bit, builtin functions.\n \t(PowerPC AltiVec/VSX Built-in Functions): Likewise.\n \n \t* config/rs6000/predicates.md (const_0_to_3_operand): New\n@@ -2041,8 +2041,7 @@\n \tsupport for decimal floating point builtin functions.\n \t(rs6000_expand_ternop_builtin): Add checks for the new builtin\n \tfunctions that take constant arguments.\n-\t(rs6000_invalid_builtin): Add decimal floating point builtin\n-\tsupport.\n+\t(rs6000_invalid_builtin): Add decimal floating point builtin support.\n \t(rs6000_init_builtins): Setup long double, _Decimal64, and\n \t_Decimal128 types for new builtin functions.\n \t(builtin_function_type): Set the unsigned flags appropriately for\n@@ -2093,8 +2092,7 @@\n \tbuiltin functions.\n \t(UNSPEC_CDTBCD): Likewise.\n \t(UNSPEC_CBCDTD): Likewise.\n-\t(UNSPEC_DIVE): Add support for new extended divide builtin\n-\tfunctions.\n+\t(UNSPEC_DIVE): Add support for new extended divide builtin functions.\n \t(UNSPEC_DIVEO): Likewise.\n \t(UNSPEC_DIVEU): Likewise.\n \t(UNSPEC_DIVEUO): Likewise.\n@@ -2107,8 +2105,7 @@\n \t(addg6s): Add new BCD builtin functions.\n \t(cdtbcd): Likewise.\n \t(cbcdtd): Likewise.\n-\t(UNSPEC_DIV_EXTEND): Add support for new extended divide\n-\tinstructions.\n+\t(UNSPEC_DIV_EXTEND): Add support for new extended divide instructions.\n \t(div_extend): Likewise.\n \t(div<div_extend>_<mode>\"): Likewise.\n \t(FP128_64): Add support for new builtin functions to pack/unpack\n@@ -2164,7 +2161,7 @@\n \t* config/aarch64/aarch64.c (aarch64_evpc_tbl): Enable for bigendian.\n \n 2014-04-24  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* reg-notes.def (REG_NOTE (CALL_DECL)): New reg-note REG_CALL_DECL.\n \t* calls.c (expand_call, emit_library_call_value_1): Add REG_CALL_DECL\n@@ -2173,14 +2170,14 @@\n \t* emit-rtl.c (try_split): Same.\n \n 2014-04-24  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* common.opt (fuse-caller-save): New option.\n \n 2014-04-24  Tejas Belagod  <tejas.belagod@arm.com>\n \n-\t* config/aarch64/aarch64.c (aarch64_evpc_tbl): Reverse order of elements\n-\tfor big-endian.\n+\t* config/aarch64/aarch64.c (aarch64_evpc_tbl): Reverse order of\n+\telements for big-endian.\n \n 2014-04-24  Richard Biener  <rguenther@suse.de>\n \n@@ -2345,12 +2342,9 @@\n \t(is_a_helper <const gimple_statement_catch *>::test): ...this.\n \t(is_a_helper <const gimple_statement_resx>::test): Convert to...\n \t(is_a_helper <const gimple_statement_resx *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_eh_dispatch>::test):\n-\tConvert to...\n-\t(is_a_helper <const gimple_statement_eh_dispatch *>::test):\n-\t...this.\n-\t(is_a_helper <const gimple_statement_eh_filter>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_eh_dispatch>::test): Convert to...\n+\t(is_a_helper <const gimple_statement_eh_dispatch *>::test): ...this.\n+\t(is_a_helper <const gimple_statement_eh_filter>::test): Convert to...\n \t(is_a_helper <const gimple_statement_eh_filter *>::test): ...this.\n \t(is_a_helper <const gimple_statement_omp_atomic_load>::test):\n \tConvert to...\n@@ -2360,8 +2354,7 @@\n \tConvert to...\n \t(is_a_helper <const gimple_statement_omp_atomic_store *>::test):\n \t...this.\n-\t(is_a_helper <const gimple_statement_omp_return>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_return>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_return *>::test): ...this.\n \t(is_a_helper <const gimple_statement_omp_continue>::test): Convert\n \tto...\n@@ -2371,43 +2364,35 @@\n \t(is_a_helper <const gimple_statement_omp_critical *>::test): ...this.\n \t(is_a_helper <const gimple_statement_omp_for>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_for *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_omp_taskreg>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_taskreg>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_taskreg *>::test): ...this.\n \t(is_a_helper <const gimple_statement_omp_parallel>::test): Convert\n \tto...\n \t(is_a_helper <const gimple_statement_omp_parallel *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_omp_target>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_target>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_target *>::test): ...this.\n \t(is_a_helper <const gimple_statement_omp_sections>::test): Convert\n \tto...\n \t(is_a_helper <const gimple_statement_omp_sections *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_omp_single>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_single>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_single *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_omp_teams>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_teams>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_teams *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_omp_task>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_omp_task>::test): Convert to...\n \t(is_a_helper <const gimple_statement_omp_task *>::test): ...this.\n \t(is_a_helper <const gimple_statement_phi>::test): Convert to...\n \t(is_a_helper <const gimple_statement_phi *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_transaction>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_transaction>::test): Convert to...\n \t(is_a_helper <const gimple_statement_transaction *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_with_ops>::test): Convert\n-\tto...\n+\t(is_a_helper <const gimple_statement_with_ops>::test): Convert to...\n \t(is_a_helper <const gimple_statement_with_ops *>::test): ...this.\n \t(is_a_helper <gimple_statement_with_ops>::test): Convert to...\n \t(is_a_helper <gimple_statement_with_ops *>::test): ...this.\n-\t(is_a_helper <const gimple_statement_with_memory_ops>::test):\n-\tConvert to...\n+\t(is_a_helper <const gimple_statement_with_memory_ops>::test): Convert\n+\tto...\n \t(is_a_helper <const gimple_statement_with_memory_ops *>::test):\n \t...this.\n-\t(is_a_helper <gimple_statement_with_memory_ops>::test): Convert\n-\tto...\n+\t(is_a_helper <gimple_statement_with_memory_ops>::test): Convert to...\n \t(is_a_helper <gimple_statement_with_memory_ops *>::test): ...this.\n \n \t(gimple_use_ops): Update for removal of implicit pointer from the\n@@ -2628,7 +2613,7 @@\n \tinvalidate outputs from statements that do not produce useful\n \toutputs for threading.\n \n-2014-04-23 Venkataramanan Kumar  <venkataramanan.kumar@linaro.org>\n+2014-04-23  Venkataramanan Kumar  <venkataramanan.kumar@linaro.org>\n \n \t* config/aarch64/aarch64.md (stack_protect_set, stack_protect_test)\n \t(stack_protect_set_<mode>, stack_protect_test_<mode>): Add\n@@ -2657,41 +2642,41 @@\n \n 2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-       * config/aarch64/aarch64.md (rev16<mode>2): New pattern.\n-       (rev16<mode>2_alt): Likewise.\n-       * config/aarch64/aarch64.c (aarch64_rtx_costs): Handle rev16 case.\n-       * config/arm/aarch-common.c (aarch_rev16_shright_mask_imm_p): New.\n-       (aarch_rev16_shleft_mask_imm_p): Likewise.\n-       (aarch_rev16_p_1): Likewise.\n-       (aarch_rev16_p): Likewise.\n-       * config/arm/aarch-common-protos.h (aarch_rev16_p): Declare extern.\n-       (aarch_rev16_shright_mask_imm_p): Likewise.\n-       (aarch_rev16_shleft_mask_imm_p): Likewise.\n+\t* config/aarch64/aarch64.md (rev16<mode>2): New pattern.\n+\t(rev16<mode>2_alt): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle rev16 case.\n+\t* config/arm/aarch-common.c (aarch_rev16_shright_mask_imm_p): New.\n+\t(aarch_rev16_shleft_mask_imm_p): Likewise.\n+\t(aarch_rev16_p_1): Likewise.\n+\t(aarch_rev16_p): Likewise.\n+\t* config/arm/aarch-common-protos.h (aarch_rev16_p): Declare extern.\n+\t(aarch_rev16_shright_mask_imm_p): Likewise.\n+\t(aarch_rev16_shleft_mask_imm_p): Likewise.\n \n 2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-       * config/arm/aarch-common-protos.h (alu_cost_table): Add rev field.\n-       * config/arm/aarch-cost-tables.h (generic_extra_costs): Specify\n-       rev cost.\n-       (cortex_a53_extra_costs): Likewise.\n-       (cortex_a57_extra_costs): Likewise.\n-       * config/arm/arm.c (cortexa9_extra_costs): Likewise.\n-       (cortexa7_extra_costs): Likewise.\n-       (cortexa8_extra_costs): Likewise.\n-       (cortexa12_extra_costs): Likewise.\n-       (cortexa15_extra_costs): Likewise.\n-       (v7m_extra_costs): Likewise.\n-       (arm_new_rtx_costs): Handle BSWAP.\n+\t* config/arm/aarch-common-protos.h (alu_cost_table): Add rev field.\n+\t* config/arm/aarch-cost-tables.h (generic_extra_costs): Specify\n+\trev cost.\n+\t(cortex_a53_extra_costs): Likewise.\n+\t(cortex_a57_extra_costs): Likewise.\n+\t* config/arm/arm.c (cortexa9_extra_costs): Likewise.\n+\t(cortexa7_extra_costs): Likewise.\n+\t(cortexa8_extra_costs): Likewise.\n+\t(cortexa12_extra_costs): Likewise.\n+\t(cortexa15_extra_costs): Likewise.\n+\t(v7m_extra_costs): Likewise.\n+\t(arm_new_rtx_costs): Handle BSWAP.\n \n 2013-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-       * config/arm/arm.c (cortexa8_extra_costs): New table.\n-       (arm_cortex_a8_tune): New tuning struct.\n-       * config/arm/arm-cores.def (cortex-a8): Use cortex_a8 tuning struct.\n+\t* config/arm/arm.c (cortexa8_extra_costs): New table.\n+\t(arm_cortex_a8_tune): New tuning struct.\n+\t* config/arm/arm-cores.def (cortex-a8): Use cortex_a8 tuning struct.\n \n 2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-       * config/arm/arm.c (arm_new_rtx_costs): Handle FMA.\n+\t* config/arm/arm.c (arm_new_rtx_costs): Handle FMA.\n \n 2014-04-23  Richard Biener  <rguenther@suse.de>\n \n@@ -2727,8 +2712,7 @@\n \t(has_32bit_hwmult): Rename to use_32bit_hwmult.  Add support for\n \t-mhwmult command line option.\n \t(msp430_hwmult_enabled): Delete.\n-\t(msp43o_output_labelref): Add support for -mhwmult command line\n-\toption.\n+\t(msp43o_output_labelref): Add support for -mhwmult command line option.\n \t* config/msp430/msp430.md (mulhisi3, umulhisi3, mulsidi3)\n \t(umulsidi3): Likewise.\n \t* config/msp430/msp430.opt (mmcu): Add Report attribute.\n@@ -3144,8 +3128,7 @@\n \n \t* gcc/config/aarch64/aarch64-simd.md (aarch64_s<optab><mode>):\n \tPattern extended.\n-\t* config/aarch64/aarch64-simd-builtins.def (sqneg): Iterator\n-\textended.\n+\t* config/aarch64/aarch64-simd-builtins.def (sqneg): Iterator extended.\n \t(sqabs): Likewise.\n \t* config/aarch64/arm_neon.h (vqneg_s64): New intrinsic.\n \t(vqnegd_s64): Likewise.\n@@ -3262,12 +3245,9 @@\n \n 2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n-\t* config/aarch64/aarch64-builtins.c (BUILTIN_VDQF_DF): Macro\n-\tadded.\n-\t* config/aarch64/aarch64-simd-builtins.def (frintn): Use added\n-\tmacro.\n-\t* config/aarch64/aarch64-simd.md (<frint_pattern>): Comment\n-\tcorrected.\n+\t* config/aarch64/aarch64-builtins.c (BUILTIN_VDQF_DF): Macro added.\n+\t* config/aarch64/aarch64-simd-builtins.def (frintn): Use added macro.\n+\t* config/aarch64/aarch64-simd.md (<frint_pattern>): Comment corrected.\n \t* config/aarch64/aarch64.md (<frint_pattern>): Likewise.\n \t* config/aarch64/arm_neon.h (vrnd_f64): Added.\n \t(vrnda_f64): Likewise."}, {"sha": "dc07a02c0cf7b58f733a6a3ff294452aa491906b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db8af6f68dd0d96bb262fbc882dbbd047502ab/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db8af6f68dd0d96bb262fbc882dbbd047502ab/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b6db8af6f68dd0d96bb262fbc882dbbd047502ab", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"is-a.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"stringpool.h\"\n@@ -7042,9 +7043,6 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n     case ALPHA_BUILTIN_MSKQH:\n       return alpha_fold_builtin_mskxx (op, opint, op_const, 0xff, true);\n \n-    case ALPHA_BUILTIN_UMULH:\n-      return fold_build2 (MULT_HIGHPART_EXPR, alpha_dimode_u, op[0], op[1]);\n-\n     case ALPHA_BUILTIN_ZAP:\n       opint[1] ^= 0xff;\n       /* FALLTHRU */\n@@ -7094,6 +7092,49 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n       return NULL;\n     }\n }\n+\n+bool\n+alpha_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+{\n+  bool changed = false;\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree call = gimple_call_fn (stmt);\n+  gimple new_stmt = NULL;\n+\n+  if (call)\n+    {\n+      tree fndecl = gimple_call_fndecl (stmt);\n+\n+      if (fndecl)\n+\t{\n+\t  tree arg0, arg1;\n+\n+\t  switch (DECL_FUNCTION_CODE (fndecl))\n+\t    {\n+\t    case ALPHA_BUILTIN_UMULH:\n+\t      arg0 = gimple_call_arg (stmt, 0);\n+\t      arg1 = gimple_call_arg (stmt, 1);\n+\n+\t      new_stmt\n+\t\t= gimple_build_assign_with_ops (MULT_HIGHPART_EXPR,\n+\t\t\t\t\t\tgimple_call_lhs (stmt),\n+\t\t\t\t\t\targ0,\n+\t\t\t\t\t\targ1);\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (new_stmt)\n+    {\n+      gsi_replace (gsi, new_stmt, true);\n+      changed = true;\n+    }\n+\n+  return changed;\n+}\n \f\n /* This page contains routines that are used to determine what the function\n    prologue and epilogue code will do and write them out.  */\n@@ -9790,6 +9831,8 @@ alpha_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n #define TARGET_EXPAND_BUILTIN alpha_expand_builtin\n #undef  TARGET_FOLD_BUILTIN\n #define TARGET_FOLD_BUILTIN alpha_fold_builtin\n+#undef  TARGET_GIMPLE_FOLD_BUILTIN\n+#define TARGET_GIMPLE_FOLD_BUILTIN alpha_gimple_fold_builtin\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL alpha_function_ok_for_sibcall"}]}