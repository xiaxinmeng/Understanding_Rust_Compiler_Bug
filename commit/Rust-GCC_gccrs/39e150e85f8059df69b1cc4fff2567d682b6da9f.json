{"sha": "39e150e85f8059df69b1cc4fff2567d682b6da9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllMTUwZTg1ZjgwNTlkZjY5YjFjYzRmZmYyNTY3ZDY4MmI2ZGE5Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2015-06-12T00:00:53Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2015-06-12T00:00:53Z"}, "message": "rs6000.c (rs6000_pre_atomic_barrier): Remove SYNC variants cases from switch.\n\n       * config/rs6000/rs6000.c (rs6000_pre_atomic_barrier): Remove SYNC\n        variants cases from switch.\n        (rs6000_post_atomic_barrier): Same.\n        (rs6000_expand_atomic_compare_and_swap): Use memmodel_base.\n        (rs6000_expand_atomic_exchange): Same.\n        (rs6000_expand_atomic_op): Same.\n        * config/rs6000/sync.md (mem_thread_fence): Use memodel_base. Remove\n        SYNC variants cases from switch.\n        (atomic_load): Same.\n        (atomic_store): Same.\n\nFrom-SVN: r224401", "tree": {"sha": "401c22aaaaa8d6fc8fa355cd99b13368cd61c84a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401c22aaaaa8d6fc8fa355cd99b13368cd61c84a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e150e85f8059df69b1cc4fff2567d682b6da9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e150e85f8059df69b1cc4fff2567d682b6da9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e150e85f8059df69b1cc4fff2567d682b6da9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e150e85f8059df69b1cc4fff2567d682b6da9f/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7672ab25db2459b86afa56533feb36a2f83c080a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7672ab25db2459b86afa56533feb36a2f83c080a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7672ab25db2459b86afa56533feb36a2f83c080a"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "6dc194004003b379d712a3d450273868e6a20208", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39e150e85f8059df69b1cc4fff2567d682b6da9f", "patch": "@@ -1,3 +1,16 @@\n+2015-06-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_pre_atomic_barrier): Remove SYNC\n+\tvariants cases from switch.\n+\t(rs6000_post_atomic_barrier): Same.\n+\t(rs6000_expand_atomic_compare_and_swap): Use memmodel_base.\n+\t(rs6000_expand_atomic_exchange): Same.\n+\t(rs6000_expand_atomic_op): Same.\n+\t* config/rs6000/sync.md (mem_thread_fence): Use memodel_base. Remove\n+\tSYNC variants cases from switch.\n+\t(atomic_load): Same.\n+\t(atomic_store): Same.\n+\n 2015-06-11  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (pa_output_global_address): Handle LABEL_REF plus"}, {"sha": "ed2da593d56f991ee35d6eb7dfcce17c7755902e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=39e150e85f8059df69b1cc4fff2567d682b6da9f", "patch": "@@ -20558,15 +20558,12 @@ rs6000_pre_atomic_barrier (rtx mem, enum memmodel model)\n     case MEMMODEL_RELAXED:\n     case MEMMODEL_CONSUME:\n     case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_SYNC_ACQUIRE:\n       break;\n     case MEMMODEL_RELEASE:\n-    case MEMMODEL_SYNC_RELEASE:\n     case MEMMODEL_ACQ_REL:\n       emit_insn (gen_lwsync ());\n       break;\n     case MEMMODEL_SEQ_CST:\n-    case MEMMODEL_SYNC_SEQ_CST:\n       emit_insn (gen_hwsync ());\n       break;\n     default:\n@@ -20583,13 +20580,10 @@ rs6000_post_atomic_barrier (enum memmodel model)\n     case MEMMODEL_RELAXED:\n     case MEMMODEL_CONSUME:\n     case MEMMODEL_RELEASE:\n-    case MEMMODEL_SYNC_RELEASE:\n       break;\n     case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_SYNC_ACQUIRE:\n     case MEMMODEL_ACQ_REL:\n     case MEMMODEL_SEQ_CST:\n-    case MEMMODEL_SYNC_SEQ_CST:\n       emit_insn (gen_isync ());\n       break;\n     default:\n@@ -20690,8 +20684,8 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n   oldval = operands[3];\n   newval = operands[4];\n   is_weak = (INTVAL (operands[5]) != 0);\n-  mod_s = memmodel_from_int (INTVAL (operands[6]));\n-  mod_f = memmodel_from_int (INTVAL (operands[7]));\n+  mod_s = memmodel_base (INTVAL (operands[6]));\n+  mod_f = memmodel_base (INTVAL (operands[7]));\n   orig_mode = mode = GET_MODE (mem);\n \n   mask = shift = NULL_RTX;\n@@ -20810,7 +20804,7 @@ rs6000_expand_atomic_exchange (rtx operands[])\n   retval = operands[0];\n   mem = operands[1];\n   val = operands[2];\n-  model = (enum memmodel) INTVAL (operands[3]);\n+  model = memmodel_base (INTVAL (operands[3]));\n   mode = GET_MODE (mem);\n \n   mask = shift = NULL_RTX;\n@@ -20861,7 +20855,7 @@ void\n rs6000_expand_atomic_op (enum rtx_code code, rtx mem, rtx val,\n \t\t\t rtx orig_before, rtx orig_after, rtx model_rtx)\n {\n-  enum memmodel model = (enum memmodel) INTVAL (model_rtx);\n+  enum memmodel model = memmodel_base (INTVAL (model_rtx));\n   machine_mode mode = GET_MODE (mem);\n   machine_mode store_mode = mode;\n   rtx label, x, cond, mask, shift;"}, {"sha": "d97df8b67fa40f9af6ed5343a75f06061a4f5e48", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e150e85f8059df69b1cc4fff2567d682b6da9f/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=39e150e85f8059df69b1cc4fff2567d682b6da9f", "patch": "@@ -41,21 +41,18 @@\n   [(match_operand:SI 0 \"const_int_operand\" \"\")]\t\t;; model\n   \"\"\n {\n-  enum memmodel model = memmodel_from_int (INTVAL (operands[0]));\n+  enum memmodel model = memmodel_base (INTVAL (operands[0]));\n   switch (model)\n     {\n     case MEMMODEL_RELAXED:\n       break;\n     case MEMMODEL_CONSUME:\n     case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_SYNC_ACQUIRE:\n     case MEMMODEL_RELEASE:\n-    case MEMMODEL_SYNC_RELEASE:\n     case MEMMODEL_ACQ_REL:\n       emit_insn (gen_lwsync ());\n       break;\n     case MEMMODEL_SEQ_CST:\n-    case MEMMODEL_SYNC_SEQ_CST:\n       emit_insn (gen_hwsync ());\n       break;\n     default:\n@@ -147,7 +144,7 @@\n   if (<MODE>mode == TImode && !TARGET_SYNC_TI)\n     FAIL;\n \n-  enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n+  enum memmodel model = memmodel_base (INTVAL (operands[2]));\n \n   if (is_mm_seq_cst (model))\n     emit_insn (gen_hwsync ());\n@@ -185,9 +182,7 @@\n       break;\n     case MEMMODEL_CONSUME:\n     case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_SYNC_ACQUIRE:\n     case MEMMODEL_SEQ_CST:\n-    case MEMMODEL_SYNC_SEQ_CST:\n       emit_insn (gen_loadsync_<mode> (operands[0]));\n       break;\n     default:\n@@ -214,17 +209,15 @@\n   if (<MODE>mode == TImode && !TARGET_SYNC_TI)\n     FAIL;\n \n-  enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n+  enum memmodel model = memmodel_base (INTVAL (operands[2]));\n   switch (model)\n     {\n     case MEMMODEL_RELAXED:\n       break;\n     case MEMMODEL_RELEASE:\n-    case MEMMODEL_SYNC_RELEASE:\n       emit_insn (gen_lwsync ());\n       break;\n     case MEMMODEL_SEQ_CST:\n-    case MEMMODEL_SYNC_SEQ_CST:\n       emit_insn (gen_hwsync ());\n       break;\n     default:"}]}