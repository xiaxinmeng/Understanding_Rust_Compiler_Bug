{"sha": "f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxMDliYmZjNWFiZTk0MTM5ZDNmNGI5YmMyNzg5Y2QyYjE5OTFlNg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-12-30T21:55:39Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-12-30T21:55:39Z"}, "message": "Add missing file expected with rev 279783\n\n\t* config/vxworks/_vxworks-versions.h: New File.\n\nFrom-SVN: r279786", "tree": {"sha": "72a7966cfc2cebb8634a84afc5a6690d47b8711b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72a7966cfc2cebb8634a84afc5a6690d47b8711b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6/comments", "author": null, "committer": null, "parents": [{"sha": "ca405dbcdee6afdbc4e1e07e60986a847a342b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca405dbcdee6afdbc4e1e07e60986a847a342b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca405dbcdee6afdbc4e1e07e60986a847a342b60"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "0aaf5472e87a46314fd5701ebaeedabac73e37b0", "filename": "gcc/config/vxworks/_vxworks-versions.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h?ref=f5109bbfc5abe94139d3f4b9bc2789cd2b1991e6", "patch": "@@ -0,0 +1,54 @@\n+/* This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _VXWORKS_VERSIONS_H\n+#define _VXWORKS_VERSIONS_H  1\n+\n+/* All we need is access to the bare _WRS_VXWORKS_MAJOR/MINOR macros\n+   exposed by version.h.  Cheat a bit to make sure we don't drag additional\n+   header files, which can easily cause #include ordering nightmares.  */\n+\n+#pragma push_macro(\"_WRS_KERNEL\")\n+#undef _WRS_KERNEL\n+#include <version.h>\n+#pragma pop_macro(\"_WRS_KERNEL\")\n+\n+#if !defined(_WRS_VXWORKS_MAJOR)\n+#error \"VxWorks version macros needed but not defined\"\n+#endif\n+\n+#define _VXWORKS_MAJOR_GT(MAJOR) (_WRS_VXWORKS_MAJOR > (MAJOR))\n+#define _VXWORKS_MAJOR_GE(MAJOR) (_WRS_VXWORKS_MAJOR >= (MAJOR))\n+#define _VXWORKS_MAJOR_LT(MAJOR) (_WRS_VXWORKS_MAJOR < (MAJOR))\n+#define _VXWORKS_MAJOR_LE(MAJOR) (_WRS_VXWORKS_MAJOR <= (MAJOR))\n+#define _VXWORKS_MAJOR_EQ(MAJOR) (_WRS_VXWORKS_MAJOR == (MAJOR))\n+\n+#define _VXWORKS_MINOR_GT(MINOR) (_WRS_VXWORKS_MINOR > (MINOR))\n+#define _VXWORKS_MINOR_GE(MINOR) (_WRS_VXWORKS_MINOR >= (MINOR))\n+#define _VXWORKS_MINOR_LT(MINOR) (_WRS_VXWORKS_MINOR < (MINOR))\n+#define _VXWORKS_MINOR_LE(MINOR) (_WRS_VXWORKS_MINOR <= (MINOR))\n+#define _VXWORKS_MINOR_EQ(MINOR) (_WRS_VXWORKS_MINOR == (MINOR))\n+\n+#define _VXWORKS_PRE(MAJOR,MINOR) \\\n+  (_VXWORKS_MAJOR_LT(MAJOR) \\\n+   || (_VXWORKS_MAJOR_EQ(MAJOR) && _VXWORKS_MINOR_LT(MINOR)))\n+\n+#endif"}]}