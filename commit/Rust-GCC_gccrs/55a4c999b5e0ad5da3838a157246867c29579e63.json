{"sha": "55a4c999b5e0ad5da3838a157246867c29579e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhNGM5OTliNWUwYWQ1ZGEzODM4YTE1NzI0Njg2N2MyOTU3OWU2Mw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-07-06T17:45:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-07-06T17:45:13Z"}, "message": "trait.hpp: Format.\n\n2006-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/regression/trait/assoc/trait.hpp: Format.\n\t* testsuite/util/regression/rand/priority_queue/\n\trand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/\n\tassoc/container_rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/priority_queue/common_type.hpp: Same.\n\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n\t* testsuite/util/regression/basic_type.hpp: Same.\n\nFrom-SVN: r115226", "tree": {"sha": "753c197028ee8010989655f612495fa5f89a0855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/753c197028ee8010989655f612495fa5f89a0855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a4c999b5e0ad5da3838a157246867c29579e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a4c999b5e0ad5da3838a157246867c29579e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a4c999b5e0ad5da3838a157246867c29579e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a4c999b5e0ad5da3838a157246867c29579e63/comments", "author": null, "committer": null, "parents": [{"sha": "cec12c7a9be5075a3b9f1ab3f8c3c96d71078fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec12c7a9be5075a3b9f1ab3f8c3c96d71078fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec12c7a9be5075a3b9f1ab3f8c3c96d71078fe0"}], "stats": {"total": 1367, "additions": 597, "deletions": 770}, "files": [{"sha": "78f64a0e1f210f3e47c87014fe41a0a07d7866e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -1,4 +1,16 @@\n-2006-07-05  Benjamin Kosnik  <bkoz@redhat.com>\n+2006-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/regression/trait/assoc/trait.hpp: Format.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\trand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/\n+\tassoc/container_rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/priority_queue/common_type.hpp: Same.\n+\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n+\t* testsuite/util/regression/basic_type.hpp: Same.\n+\n+2006-07-05  Benjamin Kosnik  <bkoz@redhat.com>\t\n \n \t* include/Makefile.am (pch_output): New.\n \t(clean-local): Use it."}, {"sha": "fa34568b3ed26d21781eb1b9bfea74ac81e89cef", "filename": "libstdc++-v3/testsuite/util/regression/assoc/common_type.hpp", "status": "modified", "additions": 72, "deletions": 189, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -52,210 +52,93 @@\n \n namespace pb_ds\n {\n+namespace test\n+{\n+  typedef dbg_ex_allocator<basic_type> alloc_type;\n \n-  namespace test\n+  struct hash\n   {\n+    typedef alloc_type::rebind<basic_type>::other::const_reference const_key_reference;\n \n-    typedef\n-    pb_ds::test::dbg_ex_allocator<\n-      pb_ds::test::basic_type>\n-    alloc_type;\n-\n-    struct hash\n-    {\n-      typedef\n-      alloc_type::rebind<\n-\tpb_ds::test::basic_type>::other::const_reference\n-      const_key_reference;\n-\n-      size_t\n-      operator()(const_key_reference r_key) const\n-      {\n-        size_t ret = 0;\n-\n-        for (pb_ds::test::basic_type::const_iterator it = r_key.begin(); it != r_key.end(); ++it)\n-\t  ret = ret*  5 +    static_cast<size_t>(*it);\n-\n-        return (ret);\n-      }\n-    };\n-\n-    typedef\n-    pb_ds::string_trie_e_access_traits<\n-      basic_type,\n-      'a',\n-      'a' + basic_type::distinct_chars - 1,\n-      false,\n-      alloc_type>\n-    e_access_traits_t;\n-\n-    template<typename Data_Type>\n-    struct tree_types\n-    {\n-    private:\n-      typedef\n-      typename pb_ds::test::tree_common_types<\n-      pb_ds::test::basic_type,\n-      Data_Type,\n-      std::less<\n-      pb_ds::test::basic_type>,\n-      pb_ds::null_tree_node_update,\n-      alloc_type>::regression_tl\n-      no_order_statistics_tl_t;\n-\n-      typedef\n-      typename pb_ds::test::tree_common_types<\n-\tpb_ds::test::basic_type,\n-\tData_Type,\n-\tstd::less<\n-\tpb_ds::test::basic_type>,\n-\tpb_ds::tree_order_statistics_node_update,\n-\talloc_type>::regression_tl\n-      order_statistics_tl_t;\n-\n-    public:\n-\n-      typedef\n-      typename pb_ds::detail::typelist_append<\n-      no_order_statistics_tl_t,\n-      order_statistics_tl_t>::type\n-      tl_t;\n-\n-      typedef no_order_statistics_tl_t min_tl_t;\n-    };\n-\n-    template<typename Data_Type>\n-    struct trie_types\n+    size_t\n+    operator()(const_key_reference r_key) const\n     {\n-    private:\n-      typedef\n-      typename pb_ds::test::trie_common_types<\n-      pb_ds::test::basic_type,\n-      Data_Type,\n-      e_access_traits_t,\n-      pb_ds::pat_trie_tag,\n-      pb_ds::null_trie_node_update,\n-      alloc_type>::regression_tl\n-      no_updates_tl_t;\n-\n-      typedef\n-      typename pb_ds::test::trie_common_types<\n-\tpb_ds::test::basic_type,\n-\tData_Type,\n-\te_access_traits_t,\n-\tpb_ds::pat_trie_tag,\n-\tpb_ds::trie_order_statistics_node_update,\n-\talloc_type>::regression_tl\n-      order_statistics_tl_t;\n-\n-      typedef\n-      typename pb_ds::test::trie_common_types<\n-\tpb_ds::test::basic_type,\n-\tData_Type,\n-\te_access_traits_t,\n-\tpb_ds::pat_trie_tag,\n-\tpb_ds::trie_prefix_search_node_update,\n-\talloc_type>::regression_tl\n-      prefix_search_tl_t;\n-\n-    public:\n-      typedef\n-      typename pb_ds::detail::typelist_append<\n-      no_updates_tl_t,\n-      typename pb_ds::detail::typelist_append<\n-      prefix_search_tl_t,\n-      order_statistics_tl_t>::type>::type\n-      tl_t;\n-\n-      typedef no_updates_tl_t min_tl_t;\n-    };\n-\n-    template<typename Data_Type>\n-    struct hash_types\n-    {\n-      typedef\n-      typename pb_ds::test::hash_common_types<\n-\tpb_ds::test::basic_type,\n-\tData_Type,\n-\thash,\n-\tstd::equal_to<\n-\tpb_ds::test::basic_type>,\n-\talloc_type>::regression_tl\n-      tl_t;\n-\n-      typedef tl_t min_tl_t;\n-    };\n-\n-    template<typename Data_Type>\n-    struct lu_types\n-    {\n-      typedef\n-      typename pb_ds::test::lu_common_types<\n-\tpb_ds::test::basic_type,\n-\tData_Type,\n-\tstd::equal_to<\n-\tpb_ds::test::basic_type>,\n-\talloc_type>::regression_tl\n-      tl_t;\n-\n-      typedef tl_t min_tl_t;\n-    };\n-\n-    typedef\n-    tree_types<\n-      pb_ds::null_mapped_type>::tl_t\n-    tree_set_tl_t;\n-\n-    typedef\n-    tree_types<\n-      pb_ds::null_mapped_type>::min_tl_t\n-    min_tree_set_tl_t;\n-\n-    typedef\n-    hash_types<\n-      pb_ds::null_mapped_type>::tl_t\n-    hash_set_tl_t;\n-\n-    typedef\n-    hash_types<\n-      pb_ds::null_mapped_type>::min_tl_t\n-    min_hash_set_tl_t;\n-\n-    typedef lu_types< pb_ds::null_mapped_type>::tl_t lu_set_tl_t;\n-\n-    typedef\n-    lu_types<\n-      pb_ds::null_mapped_type>::min_tl_t\n-    min_lu_set_tl_t;\n-\n-    typedef\n-    trie_types<\n-      pb_ds::null_mapped_type>::tl_t\n-    trie_set_tl_t;\n+      size_t ret = 0;\n+      typedef basic_type::const_iterator const_iterator;\n+      for (const_iterator it = r_key.begin(); it != r_key.end(); ++it)\n+\tret = ret * 5 + static_cast<size_t>(*it);\n+      return ret;\n+    }\n+  };\n+\n+  typedef pb_ds::string_trie_e_access_traits<basic_type, 'a', 'a' + basic_type::distinct_chars - 1, false, alloc_type> e_access_traits_t;\n+\n+  template<typename Data_Type>\n+  struct tree_types\n+  {\n+  private:\n+    typedef typename tree_common_types<basic_type, Data_Type, std::less<basic_type>, pb_ds::null_tree_node_update, alloc_type>::regression_tl no_order_statistics_tl_t;\n \n-    typedef\n-    trie_types<\n-      pb_ds::null_mapped_type>::min_tl_t\n-    min_trie_set_tl_t;\n+    typedef typename tree_common_types<basic_type, Data_Type, std::less<basic_type>, pb_ds::tree_order_statistics_node_update, alloc_type>::regression_tl order_statistics_tl_t;\n \n-    typedef tree_types< basic_type>::tl_t tree_map_tl_t;\n+  public:\n+    typedef typename pb_ds::detail::typelist_append<no_order_statistics_tl_t, order_statistics_tl_t>::type tl_t;\n \n-    typedef tree_types< basic_type>::min_tl_t min_tree_map_tl_t;\n+    typedef no_order_statistics_tl_t min_tl_t;\n+  };\n \n-    typedef hash_types< basic_type>::tl_t hash_map_tl_t;\n+  template<typename Data_Type>\n+  struct trie_types\n+  {\n+  private:\n+    typedef typename trie_common_types<basic_type, Data_Type, e_access_traits_t, pb_ds::pat_trie_tag, pb_ds::null_trie_node_update, alloc_type>::regression_tl no_updates_tl_t;\n \n-    typedef hash_types< basic_type>::min_tl_t min_hash_map_tl_t;\n+    typedef typename trie_common_types<basic_type, Data_Type, e_access_traits_t, pb_ds::pat_trie_tag, pb_ds::trie_order_statistics_node_update, alloc_type>::regression_tl order_statistics_tl_t;\n \n-    typedef lu_types< basic_type>::tl_t lu_map_tl_t;\n+    typedef typename trie_common_types<basic_type, Data_Type, e_access_traits_t, pb_ds::pat_trie_tag, pb_ds::trie_prefix_search_node_update, alloc_type>::regression_tl prefix_search_tl_t;\n \n-    typedef lu_types< basic_type>::min_tl_t min_lu_map_tl_t;\n+  public:\n+    typedef typename pb_ds::detail::typelist_append<no_updates_tl_t, typename pb_ds::detail::typelist_append<prefix_search_tl_t, order_statistics_tl_t>::type>::type tl_t;\n \n-    typedef trie_types< basic_type>::tl_t trie_map_tl_t;\n+    typedef no_updates_tl_t min_tl_t;\n+  };\n \n-    typedef trie_types< basic_type>::min_tl_t min_trie_map_tl_t;\n+  template<typename Data_Type>\n+  struct hash_types\n+  {\n+    typedef typename hash_common_types<basic_type, Data_Type, hash, std::equal_to<basic_type>, alloc_type>::regression_tl tl_t;\n \n-  } // namespace test\n+    typedef tl_t min_tl_t;\n+  };\n \n+  template<typename Data_Type>\n+  struct lu_types\n+  {\n+    typedef typename lu_common_types<basic_type, Data_Type, std::equal_to<basic_type>, alloc_type>::regression_tl tl_t;\n+\n+  typedef tl_t min_tl_t;\n+  };\n+\n+  typedef tree_types<null_mapped_type>::tl_t \t\ttree_set_tl_t;\n+  typedef tree_types<null_mapped_type>::min_tl_t\tmin_tree_set_tl_t;\n+  typedef tree_types<basic_type>::tl_t \t\t\ttree_map_tl_t;\n+  typedef tree_types<basic_type>::min_tl_t \t\tmin_tree_map_tl_t;\n+\n+  typedef hash_types<null_mapped_type>::tl_t \t\thash_set_tl_t;\n+  typedef hash_types<null_mapped_type>::min_tl_t \tmin_hash_set_tl_t;\n+  typedef hash_types<basic_type>::tl_t \t\t\thash_map_tl_t;\n+  typedef hash_types<basic_type>::min_tl_t \t\tmin_hash_map_tl_t;\n+\n+  typedef lu_types<null_mapped_type>::tl_t \t\tlu_set_tl_t;\n+  typedef lu_types<null_mapped_type>::min_tl_t \t\tmin_lu_set_tl_t;\n+  typedef lu_types<basic_type>::tl_t \t\t\tlu_map_tl_t;\n+  typedef lu_types<basic_type>::min_tl_t \t\tmin_lu_map_tl_t;\n+\n+  typedef trie_types<null_mapped_type>::tl_t \t\ttrie_set_tl_t;\n+  typedef trie_types<null_mapped_type>::min_tl_t \tmin_trie_set_tl_t;\n+  typedef trie_types<basic_type>::tl_t \t\t\ttrie_map_tl_t;\n+  typedef trie_types<basic_type>::min_tl_t \t\tmin_trie_map_tl_t;\n+} // namespace test\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_RAND_REGRESSION_TEST_COMMON_TYPE_HPP"}, {"sha": "626f9e6f3a502eb385f7b6aef1c8149ded790b23", "filename": "libstdc++-v3/testsuite/util/regression/basic_type.hpp", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -52,67 +52,52 @@\n \n namespace pb_ds\n {\n+namespace test\n+{\n+#define PB_DS_BASE_C_DEC \\\n+  std::basic_string<char, std::char_traits<char>, dbg_ex_allocator<char> >\n \n-  namespace test\n+  struct basic_type : public PB_DS_BASE_C_DEC\n   {\n+  private:\n+    typedef PB_DS_BASE_C_DEC base_type;\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::basic_string<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tchar,\t\t\\\n-\t\t\t\t\t\t\tstd::char_traits< \\\n-\t\t\t\t\t\t\t\t\t\t\tchar>, \\\n-\t\t\t\t\t\t\tdbg_ex_allocator< \\\n-\t\t\t\t\t\t\t\t\t\t\tchar> >\n-\n-    struct basic_type : public PB_DS_BASE_C_DEC\n-    {\n-    public:\n-      enum\n-\t{\n-\t  distinct_chars = 4\n-\t};\n-\n-    public:\n-      basic_type()\n-      { }\n-\n-      template<typename Gen>\n-      basic_type(Gen& r_gen, size_t max)\n+  public:\n+    enum\n       {\n-        size_t rnd =\n-\t  r_gen.get_unsigned_long(0, static_cast<unsigned long>(max));\n+\tdistinct_chars = 4\n+      };\n \n-        while (rnd > 0)\n-\t  {\n-            PB_DS_BASE_C_DEC::push_back('a' +\n-\t\t\t\t\tstatic_cast<char>(rnd % distinct_chars));\n+    basic_type() { }\n \n-            rnd /= distinct_chars;\n-\t  }\n-      }\n-\n-      basic_type(const std::string other)\n-      {\n-        std::string::const_iterator it = other.begin();\n-\n-        while (it != other.end())\n-\t  {\n-            PB_DS_BASE_C_DEC::push_back(*it);\n+    template<typename Gen>\n+    basic_type(Gen& r_gen, size_t max)\n+    {\n+      size_t rnd = r_gen.get_unsigned_long(0, static_cast<unsigned long>(max));\n+      while (rnd > 0)\n+\t{\n+\t  base_type::push_back('a' + static_cast<char>(rnd % distinct_chars));\n+\t  rnd /= distinct_chars;\n+\t}\n+    }\n \n-            ++it;\n-\t  }\n-      }\n+    basic_type(const std::string other)\n+    {\n+      std::string::const_iterator it = other.begin();\n+      while (it != other.end())\n+\t{\n+\t  base_type::push_back(*it);\n+\t  ++it;\n+\t}\n+    }\n \n-      operator std::string() const\n-      {\n-        return (std::string(PB_DS_BASE_C_DEC::c_str()));\n-      }\n-    };\n+    operator std::string() const\n+    { return std::string(base_type::c_str());}\n+  };\n \n #undef PB_DS_BASE_C_DEC\n \n-  } // namespace test\n-\n+} // namespace test\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_BASIC_TYPE_HPP"}, {"sha": "c8e6b3d92e9a3420d4a8fa5e3e880f96f41eee98", "filename": "libstdc++-v3/testsuite/util/regression/priority_queue/common_type.hpp", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -52,27 +52,14 @@\n \n namespace pb_ds\n {\n+namespace test\n+{\n+  typedef dbg_ex_allocator<basic_type> alloc_type;\n \n-  namespace test\n-  {\n-\n-    typedef\n-    pb_ds::test::dbg_ex_allocator<\n-      pb_ds::test::basic_type>\n-    alloc_type;\n-\n-    typedef\n-    pb_ds::test::pq_common_types<\n-      pb_ds::test::basic_type,\n-      std::less<\n-      pb_ds::test::basic_type>,\n-      alloc_type>::regression_tl\n-    pq_tl_t;\n-\n-    typedef pq_tl_t min_pq_tl_t;\n-\n-  } // namespace test\n+  typedef pq_common_types<basic_type, std::less<basic_type>, alloc_type>::regression_tl pq_tl_t;\n \n+  typedef pq_tl_t min_pq_tl_t;\n+} // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RAND_REGRESSION_TEST_COMMON_TYPE_HPP\n+#endif"}, {"sha": "440c349cad9c416ad17af664b2a7f326e1fd5ade", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/container_rand_regression_test.hpp", "status": "modified", "additions": 299, "deletions": 309, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -60,432 +60,432 @@\n \n namespace pb_ds\n {\n-\n-  namespace test\n-  {\n-\n-    namespace detail\n-    {\n+namespace test\n+{\n+namespace detail\n+{\n \n #ifdef PB_DS_REGRESSION_TRACE\n #define PB_DS_TRACE(X) std::cerr << X << std::endl\n-#else // #ifdef PB_DS_REGRESSION_TRACE\n+#else \n #define PB_DS_TRACE(X)\n-#endif // #ifdef PB_DS_REGRESSION_TRACE\n+#endif\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-      template<typename Cntnr>\n+#define PB_DS_CLASS_T_DEC \\\n+  template<typename Cntnr>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-      container_rand_regression_test<\t\t\t\\\n-\t\t\t\t\t\tCntnr>\n+#define PB_DS_CLASS_C_DEC \\\n+  container_rand_regression_test<Cntnr>\n \n-#define PB_DS_COND_COMPARE(L, R)\t\t\\\n-      if (m_g.get_prob() < m_mp)\t\t\\\n-        cmp(L, R, __FUNCTION__);\n+#define PB_DS_COND_COMPARE(L, R) \\\n+  if (m_g.get_prob() < m_mp)\t\t\t\\\n+    cmp(L, R, __FUNCTION__);\n \n-#define PB_DS_RUN_MTHD(MTHD)\t\t\t\\\n-      {\t\t\t\t\t\t\\\n-        bool done = false;\t\t\t\\\n+#define PB_DS_RUN_MTHD(MTHD) \\\n+  {\t\t\t\t\t\t\\\n+    bool done = false;\t\t\t\t\\\n \t\t\t\t\t\t\\\n-        while (!done)\t\t\t\t\\\n-\t  done = MTHD();\t\t\t\\\n-      }\n-\n-#define PB_DS_THROW_IF_FAILED_(PRED, MORE, P_C, P_NC, F, L)\t\t\\\n-      if (!(PRED))\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  std::cerr << \"Failure at \" << F << \": \" << L << std::endl;\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  std::cerr << MORE << std::endl;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  std::cerr << \"container:\" << std::endl;\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  print_container(*(P_C));\t\t\t\t\t\\\n-\t  std::cerr << std::endl;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  std::cerr << \"native container:\" << std::endl;\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  print_container(*(P_NC));\t\t\t\t\t\\\n-\t  std::cerr << std::endl;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  throw std::logic_error(\"fucked!\");\t\t\t\t\\\n-\t}\n+    while (!done)\t\t\t\t\\\n+      done = MTHD();\t\t\t\t\\\n+  }\n+\n+#define PB_DS_THROW_IF_FAILED_(PRED, MORE, P_C, P_NC, F, L) \\\n+  if (!(PRED))\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      std::cerr << \"Failure at \" << F << \": \" << L << std::endl;\t\\\n+      std::cerr << MORE << std::endl;\t\t\t\t\t\\\n+      std::cerr << \"container:\" << std::endl;\t\t\t\t\\\n+      print_container(*(P_C));\t\t\t\t\t\t\\\n+      std::cerr << std::endl;\t\t\t\t\t\t\\\n+      std::cerr << \"native container:\" << std::endl;\t\t\t\\\n+      print_container(*(P_NC));\t\t\t\t\t\t\\\n+      std::cerr << std::endl;\t\t\t\t\t\t\\\n+      throw std::logic_error(\"fucked!\");\t\t\t\t\\\n+    }\n \n #define PB_DS_THROW_IF_FAILED(PRED, MORE, P_C, P_NC)\t\t\t\\\n-      PB_DS_THROW_IF_FAILED_(PRED, MORE, P_C, P_NC, __FILE__, __LINE__)\n-\n-#define PB_DS_SET_DESTRUCT_PRINT\t\t\t\\\n-      destructor_printer dest_print___(__FUNCTION__);\n+  PB_DS_THROW_IF_FAILED_(PRED, MORE, P_C, P_NC, __FILE__, __LINE__)\n \n-#define PB_DS_CANCEL_DESTRUCT_PRINT\t\t\\\n-      dest_print___.cancel_print();\n-\n-      // Rand test specialized for a specific container.\n-      template<typename Cntnr>\n-      class container_rand_regression_test\n-      {\n+#define PB_DS_SET_DESTRUCT_PRINT \\\n+  destructor_printer dest_print___(__FUNCTION__);\n \n-      public:\n+#define PB_DS_CANCEL_DESTRUCT_PRINT \\\n+  dest_print___.cancel_print();\n \n-        container_rand_regression_test(unsigned long seed, size_t n, size_t m, double tp, double ip, double ep, double cp, double mp, bool disp);\n+  // Rand test specialized for a specific container.\n+  template<typename Cntnr>\n+  class container_rand_regression_test\n+  {\n+  public:\n \n-\tvirtual\n-        ~container_rand_regression_test();\n+    container_rand_regression_test(unsigned long, size_t, size_t, double, \n+\t\t\t\t   double, double, double, double, bool);\n \n-\tvoid\n-        operator()();\n+    virtual\n+    ~container_rand_regression_test();\n \n-      private:\n-\ttypedef Cntnr cntnr;\n+    void\n+    operator()();\n \n-\ttypedef typename cntnr::allocator allocator;\n+  private:\n+    typedef Cntnr cntnr;\n \n-\ttypedef typename cntnr::size_type size_type;\n+    typedef typename cntnr::allocator allocator;\n \n-\ttypedef twister_rand_gen gen;\n+    typedef typename cntnr::size_type size_type;\n \n-\ttypedef regression_test_traits< Cntnr> test_traits;\n+    typedef twister_rand_gen gen;\n \n-\ttypedef pb_ds::container_traits< Cntnr> container_traits;\n+    typedef regression_test_traits<Cntnr> test_traits;\n \n-\ttypedef typename test_traits::key_type key_type;\n+    typedef pb_ds::container_traits<Cntnr> container_traits;\n \n-\ttypedef typename test_traits::const_key_reference const_key_reference;\n+    typedef typename test_traits::key_type key_type;\n \n-\ttypedef typename test_traits::value_type value_type;\n+    typedef typename test_traits::const_key_reference const_key_reference;\n \n-\ttypedef typename test_traits::native_type native_type;\n+    typedef typename test_traits::value_type value_type;\n \n-\tenum op\n-\t  {\n-\t    insert_op,\n-\t    erase_op,\n-\t    clear_op,\n-\t    other_op\n-\t  };\n+    typedef typename test_traits::native_type native_type;\n \n-\ttypedef dbg_ex_allocator< char> alloc_t;\n+    enum op\n+      {\n+\tinsert_op,\n+\terase_op,\n+\tclear_op,\n+\tother_op\n+      };\n \n-      private:\n+    typedef dbg_ex_allocator<char> alloc_t;\n \n-\top\n-        get_next_op();\n+  private:\n \n-\tsize_t\n-        get_next_sub_op(size_t max);\n+    op\n+    get_next_op();\n \n-\tstatic void\n-        defs();\n+    size_t\n+    get_next_sub_op(size_t);\n \n-\tstatic void\n-        key_defs();\n+    static void\n+    defs();\n \n-\tstatic void\n-        mapped_defs();\n+    static void\n+    key_defs();\n \n-\tstatic void\n-        value_defs();\n+    static void\n+    mapped_defs();\n \n-\tstatic void\n-        ds_defs();\n+    static void\n+    value_defs();\n \n-\tstatic void\n-        iterator_defs();\n+    static void\n+    ds_defs();\n \n-\tstatic void\n-        node_iterator_defs(pb_ds::detail::false_type);\n+    static void\n+    iterator_defs();\n \n-\tstatic void\n-        node_iterator_defs(pb_ds::detail::true_type);\n+    static void\n+    node_iterator_defs(pb_ds::detail::false_type);\n \n-\tstatic void\n-        policy_defs();\n+    static void\n+    node_iterator_defs(pb_ds::detail::true_type);\n \n-\tstatic void\n-        policy_defs(pb_ds::basic_hash_tag);\n+    static void\n+    policy_defs();\n \n-\tstatic void\n-        policy_defs(pb_ds::cc_hash_tag);\n+    static void\n+    policy_defs(pb_ds::basic_hash_tag);\n \n-\tstatic void\n-        policy_defs(pb_ds::gp_hash_tag);\n+    static void\n+    policy_defs(pb_ds::cc_hash_tag);\n \n-\tstatic void\n-        policy_defs(pb_ds::tree_tag);\n+    static void\n+    policy_defs(pb_ds::gp_hash_tag);\n \n-\tstatic void\n-        policy_defs(pb_ds::list_update_tag);\n+    static void\n+    policy_defs(pb_ds::tree_tag);\n \n-\tstatic void\n-        policy_defs(pb_ds::pat_trie_tag);\n+    static void\n+    policy_defs(pb_ds::list_update_tag);\n \n-\tvoid\n-        policy_access();\n+    static void\n+    policy_defs(pb_ds::pat_trie_tag);\n \n-\tvoid\n-        policy_access(pb_ds::basic_hash_tag);\n+    void\n+    policy_access();\n \n-\tvoid\n-        policy_access(pb_ds::cc_hash_tag);\n+    void\n+    policy_access(pb_ds::basic_hash_tag);\n \n-\tvoid\n-        policy_access(pb_ds::gp_hash_tag);\n+    void\n+    policy_access(pb_ds::cc_hash_tag);\n \n-\tvoid\n-        policy_access(pb_ds::tree_tag);\n+    void\n+    policy_access(pb_ds::gp_hash_tag);\n \n-\tvoid\n-        policy_access(pb_ds::list_update_tag);\n+    void\n+    policy_access(pb_ds::tree_tag);\n \n-\tvoid\n-        policy_access(pb_ds::pat_trie_tag);\n+    void\n+    policy_access(pb_ds::list_update_tag);\n \n-\tvoid\n-        it_copy();\n+    void\n+    policy_access(pb_ds::pat_trie_tag);\n \n-\tvoid\n-        it_assign();\n+    void\n+    it_copy();\n \n-\tvoid\n-        rev_it_copy();\n+    void\n+    it_assign();\n \n-\tvoid\n-        rev_it_assign();\n+    void\n+    rev_it_copy();\n \n-\tvoid\n-        rev_it_copy_imp(pb_ds::detail::false_type);\n+    void\n+    rev_it_assign();\n \n-\tvoid\n-        rev_it_copy_imp(pb_ds::detail::true_type);\n+    void\n+    rev_it_copy_imp(pb_ds::detail::false_type);\n \n-\tvoid\n-        rev_it_assign_imp(pb_ds::detail::false_type);\n+    void\n+    rev_it_copy_imp(pb_ds::detail::true_type);\n \n-\tvoid\n-        rev_it_assign_imp(pb_ds::detail::true_type);\n+    void\n+    rev_it_assign_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        default_constructor();\n+    void\n+    rev_it_assign_imp(pb_ds::detail::true_type);\n \n-\tvoid\n-        swap();\n+    bool\n+    default_constructor();\n \n-\tbool\n-        copy_constructor();\n+    void\n+    swap();\n \n-\tbool\n-        assignment_operator();\n+    bool\n+    copy_constructor();\n \n-\tbool\n-        it_constructor();\n+    bool\n+    assignment_operator();\n \n-\tbool\n-        it_constructor_imp(pb_ds::cc_hash_tag);\n+    bool\n+    it_constructor();\n \n-\tbool\n-        it_constructor_imp(pb_ds::gp_hash_tag);\n+    bool\n+    it_constructor_imp(pb_ds::cc_hash_tag);\n \n-\tbool\n-        it_constructor_imp(pb_ds::tree_tag);\n+    bool\n+    it_constructor_imp(pb_ds::gp_hash_tag);\n \n-\tbool\n-        it_constructor_imp(pb_ds::list_update_tag);\n+    bool\n+    it_constructor_imp(pb_ds::tree_tag);\n \n-\tbool\n-        it_constructor_imp(pb_ds::pat_trie_tag);\n+    bool\n+    it_constructor_imp(pb_ds::list_update_tag);\n \n-\tbool\n-        insert();\n+    bool\n+    it_constructor_imp(pb_ds::pat_trie_tag);\n \n-\tbool\n-        erase();\n+    bool\n+    insert();\n \n-\tbool\n-        erase_it();\n+    bool\n+    erase();\n \n-\tbool\n-        erase_it_imp(pb_ds::detail::false_type);\n+    bool\n+    erase_it();\n \n-\tbool\n-        erase_it_imp(pb_ds::detail::true_type);\n+    bool\n+    erase_it_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        erase_rev_it();\n+    bool\n+    erase_it_imp(pb_ds::detail::true_type);\n \n-\tbool\n-        erase_rev_it_imp(pb_ds::detail::false_type);\n+    bool\n+    erase_rev_it();\n \n-\tbool\n-        erase_rev_it_imp(pb_ds::detail::true_type);\n+    bool\n+    erase_rev_it_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        erase_if();\n+    bool\n+    erase_rev_it_imp(pb_ds::detail::true_type);\n \n-\tbool\n-        clear();\n+    bool\n+    erase_if();\n \n-\tbool\n-        resize();\n+    bool\n+    clear();\n \n-\tbool\n-        resize_imp(pb_ds::detail::true_type);\n+    bool\n+    resize();\n \n-\tbool\n-        resize_imp(pb_ds::detail::false_type);\n+    bool\n+    resize_imp(pb_ds::detail::true_type);\n \n-\tbool\n-        get_set_loads();\n+    bool\n+    resize_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        get_set_loads_imp(pb_ds::detail::true_type);\n+    bool\n+    get_set_loads();\n \n-\tbool\n-        get_set_loads_imp(pb_ds::detail::false_type);\n+    bool\n+    get_set_loads_imp(pb_ds::detail::true_type);\n \n-\tvoid\n-        get_set_load();\n+    bool\n+    get_set_loads_imp(pb_ds::detail::false_type);\n \n-\tvoid\n-        get_set_load_imp(pb_ds::detail::true_type);\n+    void\n+    get_set_load();\n \n-\tvoid\n-        get_set_load_imp(pb_ds::detail::false_type);\n+    void\n+    get_set_load_imp(pb_ds::detail::true_type);\n \n-\tbool\n-        subscript();\n+    void\n+    get_set_load_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        subscript_imp(pb_ds::detail::false_type);\n+    bool\n+    subscript();\n \n-\tbool\n-        subscript_imp(pb_ds::detail::true_type);\n+    bool\n+    subscript_imp(pb_ds::detail::false_type);\n \n-\tbool\n-        split_join();\n+    bool\n+    subscript_imp(pb_ds::detail::true_type);\n \n-\tbool\n-        split_join_imp(pb_ds::detail::false_type);\n+    bool\n+    split_join();\n \n-\tbool\n-        split_join_imp(pb_ds::detail::true_type);\n+    bool\n+    split_join_imp(pb_ds::detail::false_type);\n \n-\tvoid\n-        cmp(const Cntnr& r_container, const native_type& r_native_c, const std::string& r_call_fn);\n+    bool\n+    split_join_imp(pb_ds::detail::true_type);\n \n-\tvoid\n-        basic_cmp_(const Cntnr& r_container, const native_type& r_native_c);\n+    void\n+    cmp(const Cntnr&, const native_type&, const std::string&);\n \n-\tvoid\n-        cmp_(const Cntnr& r_container, const native_type& r_native_c);\n+    void\n+    basic_cmp_(const Cntnr&, const native_type&);\n \n-\tvoid\n-        order_preserving_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    cmp_(const Cntnr&, const native_type&);\n \n-\tvoid\n-        order_preserving_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    order_preserving_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t     pb_ds::detail::false_type);\n \n-\tvoid\n-        back_order_preserving_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    order_preserving_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t     pb_ds::detail::true_type);\n \n-\tvoid\n-        back_order_preserving_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    back_order_preserving_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t\t  pb_ds::detail::false_type);\n \n-\tvoid\n-        reverse_iteration_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    back_order_preserving_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t\t  pb_ds::detail::true_type);\n \n-\tvoid\n-        reverse_iteration_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    reverse_iteration_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t      pb_ds::detail::false_type);\n \n-\tvoid\n-        order_statistics_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    reverse_iteration_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t      pb_ds::detail::true_type);\n \n-\tvoid\n-        order_statistics_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    order_statistics_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t     pb_ds::detail::false_type);\n \n-\tvoid\n-        prefix_search_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    order_statistics_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t     pb_ds::detail::true_type);\n \n-\tvoid\n-        prefix_search_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    prefix_search_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t  pb_ds::detail::false_type);\n \n-\ttemplate<typename Const_It, class Const_Native_It>\n-\tvoid\n-        it_cmp_imp(Const_It b, Const_It e, Const_Native_It native_b, Const_Native_It native_e);\n+    void\n+    prefix_search_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\t  pb_ds::detail::true_type);\n \n-\ttemplate<typename Const_It, class Const_Native_It>\n-\tvoid\n-        back_it_cmp_imp(Const_It b, Const_It e, Const_Native_It native_b, Const_Native_It native_e);\n+    template<typename Const_It, class Const_Native_It>\n+    void\n+    it_cmp_imp(Const_It, Const_It, Const_Native_It, Const_Native_It);\n \n-\tvoid\n-        lower_bound_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    template<typename Const_It, class Const_Native_It>\n+    void\n+    back_it_cmp_imp(Const_It, Const_It, Const_Native_It, Const_Native_It);\n \n-\tvoid\n-        lower_bound_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    lower_bound_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\tpb_ds::detail::false_type);\n \n-\tvoid\n-        upper_bound_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::false_type);\n+    void\n+    lower_bound_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\tpb_ds::detail::true_type);\n \n-\tvoid\n-        upper_bound_cmp_imp(const Cntnr& r_c, const native_type& r_native_c, pb_ds::detail::true_type);\n+    void\n+    upper_bound_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\tpb_ds::detail::false_type);\n \n-\tvoid\n-        print_container(const native_type& r_cnt, std::ostream& r_os = std::cerr) const;\n+    void\n+    upper_bound_cmp_imp(const Cntnr&, const native_type&, \n+\t\t\tpb_ds::detail::true_type);\n \n-\tvoid\n-        print_container(const cntnr& r_cnt, std::ostream& r_os = std::cerr) const;\n+    void\n+    print_container(const native_type&, std::ostream& r_os = std::cerr) const;\n \n-      private:\n-\tstruct destructor_printer\n-\t{\n-\t  destructor_printer(const std::string& r_msg) : m_msg(r_msg),\n-\t\t\t\t\t\t\t m_print(true)\n-\t  { }\n+    void\n+    print_container(const cntnr&, std::ostream& r_os = std::cerr) const;\n \n-\t  void\n-\t  cancel_print()\n-\t  {\n-            m_print = false;\n-\t  }\n+  private:\n+    struct destructor_printer\n+    {\n+      destructor_printer(const std::string& r_msg) \n+      : m_msg(r_msg), m_print(true) { }\n \n-\t  ~destructor_printer()\n-\t  {\n-            if (!m_print)\n-\t      return;\n+      void\n+      cancel_print()\n+      { m_print = false; }\n \n-            std::cerr << std::endl <<\n-\t      \"Uncaught exception: \" << std::endl <<\n-\t      m_msg << std::endl;\n-\t  }\n+      ~destructor_printer()\n+      {\n+\tif (!m_print)\n+\t  return;\n \n-\tprivate:\n-\t  const std::string m_msg;\n+\tstd::cerr << std::endl << \"Uncaught exception: \" << std::endl \n+\t\t  << m_msg << std::endl;\n+      }\n \n-\t  bool m_print;\n-\t};\n+    private:\n+      const std::string m_msg;\n+      bool m_print;\n+    };\n \n-      private:\n-\tconst unsigned long m_seed;\n+  private:\n+    const unsigned long m_seed;\n \n-\tconst size_t m_n;\n-\tconst size_t m_m;\n-\tconst double m_tp;\n-\tconst double m_ip;\n-\tconst double m_ep;\n-\tconst double m_cp;\n-\tconst double m_mp;\n-\tconst bool m_disp;\n+    const size_t m_n;\n+    const size_t m_m;\n+    const double m_tp;\n+    const double m_ip;\n+    const double m_ep;\n+    const double m_cp;\n+    const double m_mp;\n+    const bool m_disp;\n \n-\ttwister_rand_gen m_g;\n+    twister_rand_gen m_g;\n \n-\tCntnr* m_p_c;\n+    Cntnr* m_p_c;\n \n-\tnative_type m_native_c;\n+    native_type m_native_c;\n \n-\talloc_t m_alloc;\n+    alloc_t m_alloc;\n \n-\tsize_t m_i;\n-      };\n+    size_t m_i;\n+  };\n \n #include <regression/rand/assoc/detail/constructor_destructor_fn_imps.hpp>\n #include <regression/rand/assoc/detail/cmp_fn_imps.hpp>\n@@ -504,27 +504,17 @@ namespace pb_ds\n #include <regression/rand/assoc/detail/diagnostic_fn_imps.hpp>\n \n #undef PB_DS_COND_COMPARE\n-\n #undef PB_DS_RUN_MTHD\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_THROW_IF_FAILED_\n-\n #undef PB_DS_THROW_IF_FAILED\n-\n #undef PB_DS_SET_DESTRUCT_PRINT\n-\n #undef PB_DS_CANCEL_DESTRUCT_PRINT\n-\n #undef PB_DS_TRACE\n \n-    } // namespace detail\n-\n-  } // namespace test\n-\n+} // namespace detail\n+} // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_CONTAINER_RAND_REGRESSION_TEST_HPP\n+#endif"}, {"sha": "a7c3b7b8b305b3ea62934d446f4eba52e65e1536", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/rand_regression_test.hpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -44,6 +44,9 @@\n  * Contains a random-operation test.\n  */\n \n+#ifndef PB_DS_ASSOC_RAND_REGRESSION_TEST_HPP\n+#define PB_DS_ASSOC_RAND_REGRESSION_TEST_HPP\n+\n #include <iostream>\n #include <vector>\n #include <regression/rand/assoc/container_rand_regression_test.hpp>\n@@ -120,12 +123,12 @@ namespace detail\n       {\n \tdetail::verify_params(sd, n, m, tp, ip, ep, cp, mp, disp);\n       }\n-    catch(pb_ds::test::illegal_input_error&)\n+    catch (pb_ds::test::illegal_input_error&)\n       {\n \tdetail::usage(name);\n \treturn -1;\n       }\n-    catch(...)\n+    catch (...)\n       {\n \treturn -2;\n       };\n@@ -204,3 +207,4 @@ namespace detail\n } // namespace test\n } // namespace pb_ds\n \n+#endif"}, {"sha": "385a2c4dda26862b678b3628ca66c18dc94dddff", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/rand_regression_test.hpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -44,6 +44,9 @@\n  * Contains a random-operation test.\n  */\n \n+#ifndef PB_DS_PQ_RAND_REGRESSION_TEST_HPP\n+#define PB_DS_PQ_RAND_REGRESSION_TEST_HPP\n+\n #include <iostream>\n #include <vector>\n #include <regression/rand/priority_queue/container_rand_regression_test.hpp>\n@@ -208,3 +211,4 @@ namespace detail\n } // namespace test\n } // namespace pb_ds\n \n+#endif"}, {"sha": "65a63630f6f7396c63eb63c7c4764e4a31059139", "filename": "libstdc++-v3/testsuite/util/regression/trait/assoc/trait.hpp", "status": "modified", "additions": 161, "deletions": 199, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a4c999b5e0ad5da3838a157246867c29579e63/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp?ref=55a4c999b5e0ad5da3838a157246867c29579e63", "patch": "@@ -59,231 +59,193 @@\n \n namespace pb_ds\n {\n+namespace test\n+{\n+namespace detail\n+{\n \n-  namespace test\n-  {\n+#define PB_DS_CLASS_T_DEC \\\n+  template<typename Cntnr>\n \n-    namespace detail\n-    {\n+#define PB_DS_CLASS_C_DEC \\\n+  regression_test_traits<Cntnr>\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-      template<typename Cntnr>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-      regression_test_traits<\t\t\t\t\\\n-\t\t\t\t\t\tCntnr>\n-\n-#define PB_DS_TYPE_TRAITS_C_DEC\t\t\t\t\\\n-      regression_test_type_traits<\t\t\t\\\n-\t\t\t\t\t\tCntnr>\n-\n-#define PB_DS_NATIVE_TYPE_TRAITS_C_DEC\t\t\t\t\t\\\n-      native_type_traits<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\ttypename PB_DS_TYPE_TRAITS_C_DEC::key_type, \\\n-\t\t\t\t\t\t\t\t\ttypename PB_DS_TYPE_TRAITS_C_DEC::mapped_type, \\\n-\t\t\t\t\t\t\t\t\ttypename Cntnr::allocator>\n-\n-#define PB_DS_RESIZE_TRAITS_C_DEC\t\t\t\t\t\\\n-      regression_test_resize_traits<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tCntnr, \\\n-\t\t\t\t\t\t\t\t\ttypename Cntnr::container_category>\n-\n-#define PB_DS_SET_LOADS_TRAITS_C_DEC\t\t\t\t\t\\\n-      regression_test_get_set_loacontainer_traits<\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\tCntnr, \\\n-\t\t\t\t\t\t\t\t\t\ttypename Cntnr::container_category>\n-\n-#define PB_DS_SET_LOAD_TRAITS_C_DEC\t\t\t\t\t\\\n-      regression_test_get_set_load_traits<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tCntnr, \\\n-\t\t\t\t\t\t\t\t\ttypename Cntnr::container_category>\n-\n-#define PB_DS_NODE_UPDATOR_TRAITS_C_DEC\t\t\t\t\t\\\n-      regression_test_node_update_traits<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tCntnr, \\\n-\t\t\t\t\t\t\t\t\ttypename Cntnr::container_category>\n-\n-      template<typename Cntnr>\n-      struct regression_test_traits : private PB_DS_TYPE_TRAITS_C_DEC,\n-\t\t\t\t      private PB_DS_NATIVE_TYPE_TRAITS_C_DEC,\n-\t\t\t\t      private PB_DS_RESIZE_TRAITS_C_DEC,\n-\t\t\t\t      private PB_DS_NODE_UPDATOR_TRAITS_C_DEC,\n-\t\t\t\t      private PB_DS_SET_LOADS_TRAITS_C_DEC,\n-\t\t\t\t      private PB_DS_SET_LOAD_TRAITS_C_DEC\n-      {\n+#define PB_DS_TYPE_TRAITS_C_DEC \\\n+  regression_test_type_traits<Cntnr>\n \n-      private:\n-\ttypedef PB_DS_NATIVE_TYPE_TRAITS_C_DEC native_type_traits_base;\n+#define PB_DS_NATIVE_TYPE_TRAITS_C_DEC \\\n+  native_type_traits<typename PB_DS_TYPE_TRAITS_C_DEC::key_type, \\\n+\t\t     typename PB_DS_TYPE_TRAITS_C_DEC::mapped_type, \\\n+\t\t     typename Cntnr::allocator>\n \n-\ttypedef PB_DS_TYPE_TRAITS_C_DEC type_traits_base;\n+#define PB_DS_RESIZE_TRAITS_C_DEC \\\n+  regression_test_resize_traits<Cntnr, typename Cntnr::container_category>\n \n-      public:\n+#define PB_DS_SET_LOADS_TRAITS_C_DEC \\\n+  regression_test_get_set_loacontainer_traits<Cntnr,\t\\\n+\t\t\t\t\t  typename Cntnr::container_category>\n \n-\ttypedef typename Cntnr::key_type key_type;\n+#define PB_DS_SET_LOAD_TRAITS_C_DEC \\\n+  regression_test_get_set_load_traits<Cntnr,typename Cntnr::container_category>\n \n-\ttypedef typename Cntnr::const_key_reference const_key_reference;\n+#define PB_DS_NODE_UPDATOR_TRAITS_C_DEC \\\n+  regression_test_node_update_traits<Cntnr, typename Cntnr::container_category>\n \n-\ttypedef typename Cntnr::value_type value_type;\n+  template<typename Cntnr>\n+  struct regression_test_traits : private PB_DS_TYPE_TRAITS_C_DEC,\n+\t\t\t\t  private PB_DS_NATIVE_TYPE_TRAITS_C_DEC,\n+\t\t\t\t  private PB_DS_RESIZE_TRAITS_C_DEC,\n+\t\t\t\t  private PB_DS_NODE_UPDATOR_TRAITS_C_DEC,\n+\t\t\t\t  private PB_DS_SET_LOADS_TRAITS_C_DEC,\n+\t\t\t\t  private PB_DS_SET_LOAD_TRAITS_C_DEC\n+  {\n+  private:\n+    typedef PB_DS_NATIVE_TYPE_TRAITS_C_DEC native_type_traits_base;\n \n-\ttypedef typename Cntnr::const_reference const_reference;\n+    typedef PB_DS_TYPE_TRAITS_C_DEC type_traits_base;\n \n-\ttypedef typename PB_DS_NATIVE_TYPE_TRAITS_C_DEC::type native_type;\n+  public:\n+    typedef typename Cntnr::key_type key_type;\n \n-\ttypedef typename native_type::key_type native_key_type;\n+    typedef typename Cntnr::const_key_reference const_key_reference;\n \n-\ttypedef typename native_type::value_type native_value_type;\n+    typedef typename Cntnr::value_type value_type;\n \n-\tenum\n-\t  {\n-\t    resize = PB_DS_RESIZE_TRAITS_C_DEC::value,\n-\t    get_set_loads = PB_DS_SET_LOADS_TRAITS_C_DEC::value,\n-\t    get_set_load = PB_DS_SET_LOAD_TRAITS_C_DEC::value,\n-\t    order_statistics =\n-            PB_DS_NODE_UPDATOR_TRAITS_C_DEC::order_statistics,\n-\t    prefix_search =\n-            PB_DS_NODE_UPDATOR_TRAITS_C_DEC::prefix_search\n-\t  };\n-\n-\ttemplate<typename T>\n-\tstruct erase_if_fn : public regression_test_erase_if_fn<\n-\t  T>\n-\t{\n-\n-\t};\n-\n-\tstatic size_t\n-        erase_if(native_type& r_native_c)\n-\t{\n-\t  typedef\n-            regression_test_erase_if_fn<\n-\t    typename native_type::value_type>\n-            erase_if_fn;\n-\n-\t  typename native_type::iterator it = r_native_c.begin();\n-\n-\t  size_t num_ersd = 0;\n-\n-\t  while (it != r_native_c.end())\n-            if (erase_if_fn()(*it))\n-\t      {\n-                ++num_ersd;\n-\n-                r_native_c.erase(it);\n-\n-                it = r_native_c.begin();\n-\t      }\n-            else\n-\t      ++it;\n-\n-\t  return (num_ersd);\n-\t}\n-\n-\tstatic void\n-        print_container(const Cntnr& r_c, std::ostream& r_os)\n-\t{\n-\t  PB_DS_TYPE_TRAITS_C_DEC::print_container(r_c, r_os);\n-\t}\n-\n-      public:\n-\n-\ttemplate<typename Gen>\n-\tstatic key_type\n-        generate_key(Gen& r_gen, size_t max)\n-\t{\n-\t  return (PB_DS_TYPE_TRAITS_C_DEC::generate_key(r_gen, max));\n-\t}\n-\n-\ttemplate<typename Gen>\n-\tstatic value_type\n-        generate_value(Gen& r_gen, size_t max)\n-\t{\n-\t  return (PB_DS_TYPE_TRAITS_C_DEC::generate_value(r_gen, max));\n-\t}\n-\n-\tstatic const_key_reference\n-        extract_key(const_reference r_val)\n-\t{\n-\t  return type_traits_base::extract_key(r_val);\n-\t}\n-\n-\tstatic native_key_type\n-        native_key(const_key_reference r_key)\n-\t{\n-\t  return (native_type_traits_base::native_key(r_key));\n-\t}\n-\n-\tstatic native_value_type\n-        native_value(const_reference r_val)\n-\t{\n-\t  return (native_type_traits_base::native_value(r_val));\n-\t}\n-\n-\tstatic const native_key_type& \n-        extract_native_key(const native_value_type& r_val)\n-\t{\n-\t  return (native_type_traits_base::extract_key(r_val));\n-\t}\n-\n-\tstatic bool\n-        cmp(const_reference r_val, const native_value_type& r_native_val)\n-\t{\n-\t  return (val_to_string(r_val) ==\n-\t\t  native_val_to_string(r_native_val));\n-\t}\n-\n-\tstatic std::string\n-        val_to_string(const_reference r_val)\n-\t{\n-\t  return (to_string(r_val));\n-\t}\n-\n-\tstatic std::string\n-        key_to_string(const_key_reference r_key)\n-\t{\n-\t  return (to_string(r_key));\n-\t}\n-\n-\tstatic std::string\n-        native_val_to_string(const native_value_type& r_native_val)\n-\t{\n-\t  return (to_string(r_native_val));\n-\t}\n-\n-\tstatic bool\n-        prefix_match(const_key_reference r_key, const std::string& r_native_key)\n-\t{\n-\t  const size_t native_substr_len = std::min(\n-\t\t\t\t\t\t    r_key.length(),\n-\t\t\t\t\t\t    r_native_key.length());\n-\n-\t  const std::string native_substr =\n-            r_native_key.substr(0, native_substr_len);\n-\n-\t  return (native_substr == (const std::string& )r_key);\n-\t}\n+    typedef typename Cntnr::const_reference const_reference;\n \n+    typedef typename PB_DS_NATIVE_TYPE_TRAITS_C_DEC::type native_type;\n+\n+    typedef typename native_type::key_type native_key_type;\n+\n+    typedef typename native_type::value_type native_value_type;\n+\n+    enum\n+      {\n+\tresize = PB_DS_RESIZE_TRAITS_C_DEC::value,\n+\tget_set_loads = PB_DS_SET_LOADS_TRAITS_C_DEC::value,\n+\tget_set_load = PB_DS_SET_LOAD_TRAITS_C_DEC::value,\n+\torder_statistics = PB_DS_NODE_UPDATOR_TRAITS_C_DEC::order_statistics,\n+\tprefix_search = PB_DS_NODE_UPDATOR_TRAITS_C_DEC::prefix_search\n       };\n \n-#undef PB_DS_TYPE_TRAITS_C_DEC\n+    template<typename T>\n+    struct erase_if_fn : public regression_test_erase_if_fn<T>\n+    { };\n \n-#undef PB_DS_NATIVE_TYPE_TRAITS_C_DEC\n+    static size_t\n+    erase_if(native_type& r_native_c)\n+    {\n+      typedef regression_test_erase_if_fn<typename native_type::value_type> erase_if_fn;\n \n-#undef PB_DS_RESIZE_TRAITS_C_DEC\n+      typename native_type::iterator it = r_native_c.begin();\n+      size_t num_ersd = 0;\n+      while (it != r_native_c.end())\n+\tif (erase_if_fn()(*it))\n+\t  {\n+\t    ++num_ersd;\n+\t    r_native_c.erase(it);\n+\t    it = r_native_c.begin();\n+\t  }\n+\telse\n+\t  ++it;\n+      return num_ersd;\n+    }\n+\n+    static void\n+    print_container(const Cntnr& r_c, std::ostream& r_os)\n+    {\n+      PB_DS_TYPE_TRAITS_C_DEC::print_container(r_c, r_os);\n+    }\n \n-#undef PB_DS_SET_LOADS_TRAITS_C_DEC\n+  public:\n \n-#undef PB_DS_SET_LOAD_TRAITS_C_DEC\n+    template<typename Gen>\n+    static key_type\n+    generate_key(Gen& r_gen, size_t max)\n+    {\n+      return PB_DS_TYPE_TRAITS_C_DEC::generate_key(r_gen, max);\n+    }\n \n-#undef PB_DS_NODE_UPDATOR_TRAITS_C_DEC\n+    template<typename Gen>\n+    static value_type\n+    generate_value(Gen& r_gen, size_t max)\n+    {\n+      return PB_DS_TYPE_TRAITS_C_DEC::generate_value(r_gen, max);\n+    }\n \n-#undef PB_DS_CLASS_T_DEC\n+    static const_key_reference\n+    extract_key(const_reference r_val)\n+    {\n+      return type_traits_base::extract_key(r_val);\n+    }\n \n-#undef PB_DS_CLASS_C_DEC\n+    static native_key_type\n+    native_key(const_key_reference r_key)\n+    {\n+      return native_type_traits_base::native_key(r_key);\n+    }\n+\n+    static native_value_type\n+    native_value(const_reference r_val)\n+    {\n+      return native_type_traits_base::native_value(r_val);\n+    }\n \n-    } // namespace detail\n+    static const native_key_type& \n+    extract_native_key(const native_value_type& r_val)\n+    {\n+      return native_type_traits_base::extract_key(r_val);\n+    }\n \n-  } // namespace test\n+    static bool\n+    cmp(const_reference r_val, const native_value_type& r_native_val)\n+    {\n+      return val_to_string(r_val) == native_val_to_string(r_native_val);\n+    }\n+\n+    static std::string\n+    val_to_string(const_reference r_val)\n+    {\n+      return to_string(r_val);\n+    }\n+\n+    static std::string\n+    key_to_string(const_key_reference r_key)\n+    {\n+      return to_string(r_key);\n+    }\n+\n+    static std::string\n+    native_val_to_string(const native_value_type& r_native_val)\n+    {\n+      return to_string(r_native_val);\n+    }\n+\n+    static bool\n+    prefix_match(const_key_reference r_key, const std::string& r_native_key)\n+    {\n+      const size_t native_substr_len = std::min(r_key.length(), \n+\t\t\t\t\t\tr_native_key.length());\n+\n+      const std::string native_substr = r_native_key.substr(0, \n+\t\t\t\t\t\t\t    native_substr_len);\n+\n+      return native_substr == (const std::string&) r_key;\n+    }\n+\n+  };\n+\n+#undef PB_DS_TYPE_TRAITS_C_DEC\n+#undef PB_DS_NATIVE_TYPE_TRAITS_C_DEC\n+#undef PB_DS_RESIZE_TRAITS_C_DEC\n+#undef PB_DS_SET_LOADS_TRAITS_C_DEC\n+#undef PB_DS_SET_LOAD_TRAITS_C_DEC\n+#undef PB_DS_NODE_UPDATOR_TRAITS_C_DEC\n+#undef PB_DS_CLASS_T_DEC\n+#undef PB_DS_CLASS_C_DEC\n \n+} // namespace detail\n+} // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_REGRESSION_TEST_TRAIT_HPP\n+#endif"}]}