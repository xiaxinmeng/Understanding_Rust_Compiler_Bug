{"sha": "e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "node_id": "C_kwDOANBUbNoAKGU2NmZlYzhlNmJhMzVlZGYwMWY4NmMyYmY2NTE0MTA5YWJhNGRlZDI", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-06-27T15:05:49Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-01-31T13:16:49Z"}, "message": "gccrs: const folding port\n\nThis changeset ports cp_global_trees structure which is used throughout the\ncp constexpr.cc code. I am not sure what it's purpose is but it seems it is used\nto add and manipulate tree information during the c++ compilation process.\nIt is possible this is not needed in the Rust code and may be taken out later.\nAlso, the initialization function isn't being called from anywhere yet, so\nwe will need to find a suitable point for it.\n\ngcc/rust/ChangeLog:\n\t* backend/rust-tree.cc : Add new includes.\n\t(scope_chain): New.\n\t(maybe_add_global): New.\n\t(init_modules): New (copied from cp)\n\t(var_in_constexpr_fn): Likewise.\n\t(member_vec_linear_search): Likewise.\n\t(member_vec_binary_search): Likewise.\n\t(is_overloaded_fn): Likewise.\n\t(ovl_make): Likewise.\n\t(lookup_add): Likewise.\n\t(type_memfn_quals): Likewise.\n\t(struct find_parameter_pack_data): Likewise.\n\t(struct conv_type_hasher): Likewise.\n\t(make_conv_op_name): Likewise.\n\t(builtin_pack_fn_p): Likewise.\n\t(builtin_pack_call_p): Likewise.\n\t(has_extra_args_mechanism_p): Likewise.\n\t(find_parameter_packs_r): Likewise.\n\t(WALK_SUBTREE): Likewise.\n\t(type_memfn_rqual): Likewise.\n\t(maybe_add_lang_type_raw): Likewise.\n\t(struct c_fileinfo): Likewise.\n\t(get_fileinfo): Likewise.\n\t(cxx_make_type): Likewise.\n\t(build_min_array_type): Likewise.\n\t(fields_linear_search): Likewise.\n\t(nothrow_spec_p): Likewise.\n\t(maybe_get_fns): Likewise.\n\t(get_fns): Likewise.\n\t(get_first_fn): Likewise.\n\t(dependent_name): Likewise.\n\t(called_fns_equal): Likewise.\n\t(canonical_eh_spec): Likewise.\n\t(rs_tree_code_length): Likewise.\n\t(rs_tree_operand_length): Likewise.\n\t(rs_tree_equal): Likewise.\n\t(publicly_uniquely_derived_p): Likewise.\n\t(comp_except_types): Likewise.\n\t(comp_except_specs): Likewise.\n\t(compparms): Likewise.\n\t(set_array_type_canon): Likewise.\n\t(struct cplus_array_info): Likewise.\n\t(struct cplus_array_hasher): Likewise.\n\t(cplus_array_hasher::hash): Likewise.\n\t(cplus_array_hasher::equal): Likewise.\n\t(is_byte_access_type): Likewise.\n\t(build_cplus_array_type): Likewise.\n\t(rs_build_qualified_type_real): Likewise.\n\t(vector_targets_convertible_p): Likewise.\n\t(comp_array_types): Likewise.\n\t(same_type_ignoring_top_level_qualifiers_p): Likewise.\n\t(comp_ptr_ttypes_const): Likewise.\n\t(similar_type_p): Likewise.\n\t(structural_comptypes): Likewise.\n\t(comptypes): Likewise.\n\t(next_initializable_field): Likewise.\n\t(sufficient_parms_p): Likewise.\n\t(default_ctor_p): Likewise.\n\t(user_provided_p): Likewise.\n\t(type_has_non_user_provided_default_constructor): Likewise.\n\t(default_init_uninitialized_part): Likewise.\n\t(extract_conversion_operator): Likewise.\n\t(get_class_binding_direct): Likewise.\n\t(lang_check_failed): Likewise.\n\t(skip_artificial_parms_for): Likewise.\n\t(in_class_defaulted_default_constructor): Likewise.\n\t(is_instantiation_of_constexpr): Likewise.\n\t(check_for_uninitialized_const_var): Likewise.\n\t(cv_unqualified): Likewise.\n\t(make_tree_vector): Likewise.\n\t(release_tree_vector): Likewise.\n\t(instantiation_dependent_expression_p): Likewise.\n\t(cp_get_callee): Likewise.\n\t(build_nop): Likewise.\n\t(scalarish_type_p): Likewise.\n\t(type_has_nontrivial_copy_init): Likewise.\n\t(build_local_temp): Likewise.\n\t(is_normal_capture_proxy): Likewise.\n\t(reject_gcc_builtin): Likewise.\n\t(is_bitfield_expr_with_lowered_type): Likewise.\n\t(maybe_undo_parenthesized_ref): Likewise.\n\t(fold_offsetof): Likewise.\n\t(char_type_p): Likewise.\n\t(resolve_nondeduced_context): Likewise.\n\t(instantiate_non_dependent_or_null): Likewise.\n\t(resolve_nondeduced_context_or_error): Likewise.\n\t(really_overloaded_fn): Likewise.\n\t(invalid_nonstatic_memfn_p): Likewise.\n\t(strip_top_quals): Likewise.\n\t(cxx_incomplete_type_inform): Likewise.\n\t(cxx_incomplete_type_diagnostic): Likewise.\n\t(decl_constant_var_p): Likewise.\n\t(undeduced_auto_decl): Likewise.\n\t(require_deduced_type): Likewise.\n\t* backend/rust-tree.h (enum c_tree_index): Likewise.\n\t(GTY): Likewise.\n\t(enum cp_tree_index): Likewise.\n\t(wchar_decl_node): Likewise.\n\t(vtable_entry_type): Likewise.\n\t(delta_type_node): Likewise.\n\t(vtable_index_type): Likewise.\n\t(class_type_node): Likewise.\n\t(unknown_type_node): Likewise.\n\t(init_list_type_node): Likewise.\n\t(explicit_void_list_node): Likewise.\n\t(vtbl_type_node): Likewise.\n\t(vtbl_ptr_type_node): Likewise.\n\t(std_node): Likewise.\n\t(abi_node): Likewise.\n\t(global_namespace): Likewise.\n\t(const_type_info_type_node): Likewise.\n\t(conv_op_marker): Likewise.\n\t(abort_fndecl): Likewise.\n\t(current_aggr): Likewise.\n\t(nullptr_node): Likewise.\n\t(nullptr_type_node): Likewise.\n\t(align_type_node): Likewise.\n\t(char8_type_node): Likewise.\n\t(char16_type_node): Likewise.\n\t(char32_type_node): Likewise.\n\t(wchar_type_node): Likewise.\n\t(underlying_wchar_type_node): Likewise.\n\t(wint_type_node): Likewise.\n\t(signed_size_type_node): Likewise.\n\t(unsigned_ptrdiff_type_node): Likewise.\n\t(intmax_type_node): Likewise.\n\t(uintmax_type_node): Likewise.\n\t(widest_integer_literal_type_node): Likewise.\n\t(widest_unsigned_literal_type_node): Likewise.\n\t(sig_atomic_type_node): Likewise.\n\t(int8_type_node): Likewise.\n\t(int16_type_node): Likewise.\n\t(int32_type_node): Likewise.\n\t(int64_type_node): Likewise.\n\t(uint8_type_node): Likewise.\n\t(c_uint16_type_node): Likewise.\n\t(c_uint32_type_node): Likewise.\n\t(c_uint64_type_node): Likewise.\n\t(int_least8_type_node): Likewise.\n\t(int_least16_type_node): Likewise.\n\t(int_least32_type_node): Likewise.\n\t(int_least64_type_node): Likewise.\n\t(uint_least8_type_node): Likewise.\n\t(uint_least16_type_node): Likewise.\n\t(uint_least32_type_node): Likewise.\n\t(uint_least64_type_node): Likewise.\n\t(int_fast8_type_node): Likewise.\n\t(int_fast16_type_node): Likewise.\n\t(int_fast32_type_node): Likewise.\n\t(int_fast64_type_node): Likewise.\n\t(uint_fast8_type_node): Likewise.\n\t(uint_fast16_type_node): Likewise.\n\t(uint_fast32_type_node): Likewise.\n\t(uint_fast64_type_node): Likewise.\n\t(intptr_type_node): Likewise.\n\t(uintptr_type_node): Likewise.\n\t(truthvalue_type_node): Likewise.\n\t(truthvalue_true_node): Likewise.\n\t(truthvalue_false_node): Likewise.\n\t(char_array_type_node): Likewise.\n\t(char8_array_type_node): Likewise.\n\t(char16_array_type_node): Likewise.\n\t(char32_array_type_node): Likewise.\n\t(wchar_array_type_node): Likewise.\n\t(string_type_node): Likewise.\n\t(const_string_type_node): Likewise.\n\t(default_function_type): Likewise.\n\t(function_name_decl_node): Likewise.\n\t(pretty_function_name_decl_node): Likewise.\n\t(c99_function_name_decl_node): Likewise.\n\t(saved_function_name_decls): Likewise.\n\t(null_node): Likewise.\n\t(ctor_identifier): Likewise.\n\t(complete_ctor_identifier): Likewise.\n\t(base_ctor_identifier): Likewise.\n\t(dtor_identifier): Likewise.\n\t(complete_dtor_identifier): Likewise.\n\t(base_dtor_identifier): Likewise.\n\t(deleting_dtor_identifier): Likewise.\n\t(conv_op_identifier): Likewise.\n\t(delta_identifier): Likewise.\n\t(in_charge_identifier): Likewise.\n\t(vtt_parm_identifier): Likewise.\n\t(as_base_identifier): Likewise.\n\t(this_identifier): Likewise.\n\t(pfn_identifier): Likewise.\n\t(vptr_identifier): Likewise.\n\t(global_identifier): Likewise.\n\t(anon_identifier): Likewise.\n\t(auto_identifier): Likewise.\n\t(decltype_auto_identifier): Likewise.\n\t(init_list_identifier): Likewise.\n\t(for_range__identifier): Likewise.\n\t(for_begin__identifier): Likewise.\n\t(for_end__identifier): Likewise.\n\t(for_range_identifier): Likewise.\n\t(for_begin_identifier): Likewise.\n\t(for_end_identifier): Likewise.\n\t(abi_tag_identifier): Likewise.\n\t(aligned_identifier): Likewise.\n\t(begin_identifier): Likewise.\n\t(end_identifier): Likewise.\n\t(get__identifier): Likewise.\n\t(gnu_identifier): Likewise.\n\t(tuple_element_identifier): Likewise.\n\t(tuple_size_identifier): Likewise.\n\t(type_identifier): Likewise.\n\t(value_identifier): Likewise.\n\t(fun_identifier): Likewise.\n\t(closure_identifier): Likewise.\n\t(heap_uninit_identifier): Likewise.\n\t(heap_identifier): Likewise.\n\t(heap_deleted_identifier): Likewise.\n\t(heap_vec_uninit_identifier): Likewise.\n\t(heap_vec_identifier): Likewise.\n\t(omp_identifier): Likewise.\n\t(lang_name_c): Likewise.\n\t(lang_name_cplusplus): Likewise.\n\t(empty_except_spec): Likewise.\n\t(noexcept_true_spec): Likewise.\n\t(noexcept_false_spec): Likewise.\n\t(noexcept_deferred_spec): Likewise.\n\t(terminate_fn): Likewise.\n\t(call_unexpected_fn): Likewise.\n\t(get_exception_ptr_fn): Likewise.\n\t(begin_catch_fn): Likewise.\n\t(end_catch_fn): Likewise.\n\t(allocate_exception_fn): Likewise.\n\t(free_exception_fn): Likewise.\n\t(throw_fn): Likewise.\n\t(rethrow_fn): Likewise.\n\t(atexit_fn_ptr_type_node): Likewise.\n\t(atexit_node): Likewise.\n\t(dso_handle_node): Likewise.\n\t(dynamic_cast_node): Likewise.\n\t(cleanup_type): Likewise.\n\t(vtt_parm_type): Likewise.\n\t(any_targ_node): Likewise.\n\t(source_location_impl): Likewise.\n\t(OVL_FUNCTION): Likewise.\n\t(OVL_CHAIN): Likewise.\n\t(OVL_DEDUP_P): Likewise.\n\t(OVL_USING_P): Likewise.\n\t(OVL_HIDDEN_P): Likewise.\n\t(OVL_NESTED_P): Likewise.\n\t(OVL_LOOKUP_P): Likewise.\n\t(OVL_EXPORT_P): Likewise.\n\t(OVL_FIRST): Likewise.\n\t(OVL_NAME): Likewise.\n\t(OVL_P): Likewise.\n\t(OVL_SINGLE_P): Likewise.\n\t(TYPE_HAS_DEFAULT_CONSTRUCTOR): Likewise.\n\t(CLASSTYPE_LAZY_DEFAULT_CTOR): Likewise.\n\t(CLASSTYPE_CONSTRUCTORS): Likewise.\n\t(ATTR_IS_DEPENDENT): Likewise.\n\t(ABI_TAG_IMPLICIT): Likewise.\n\t(PARENTHESIZED_LIST_P): Likewise.\n\t(DECL_DEPENDENT_P): Likewise.\n\t(USING_DECL_SCOPE): Likewise.\n\t(USING_DECL_DECLS): Likewise.\n\t(USING_DECL_TYPENAME_P): Likewise.\n\t(USING_DECL_UNRELATED_P): Likewise.\n\t(DECL_DECLARES_FUNCTION_P): Likewise.\n\t(DECL_DECLARES_TYPE_P): Likewise.\n\t(IDENTIFIER_KIND_BIT_0): Likewise.\n\t(IDENTIFIER_KIND_BIT_1): Likewise.\n\t(IDENTIFIER_KIND_BIT_2): Likewise.\n\t(IDENTIFIER_MARKED): Likewise.\n\t(IDENTIFIER_VIRTUAL_P): Likewise.\n\t(IDENTIFIER_KEYWORD_P): Likewise.\n\t(IDENTIFIER_CDTOR_P): Likewise.\n\t(IDENTIFIER_CTOR_P): Likewise.\n\t(IDENTIFIER_DTOR_P): Likewise.\n\t(IDENTIFIER_ANY_OP_P): Likewise.\n\t(IDENTIFIER_OVL_OP_P): Likewise.\n\t(IDENTIFIER_ASSIGN_OP_P): Likewise.\n\t(IDENTIFIER_CONV_OP_P): Likewise.\n\t(IDENTIFIER_NEWDEL_OP_P): Likewise.\n\t(IDENTIFIER_NEW_OP_P): Likewise.\n\t(CLASSTYPE_DIAMOND_SHAPED_P): Likewise.\n\t(CLASSTYPE_REPEATED_BASE_P): Likewise.\n\t(CLASSTYPE_KEY_METHOD): Likewise.\n\t(CLASSTYPE_MEMBER_VEC): Likewise.\n\t(CLASSTYPE_DECL_LIST): Likewise.\n\t(CLASSTYPE_DESTRUCTOR): Likewise.\n\t(CLASSTYPE_HAS_PRIMARY_BASE_P): Likewise.\n\t(CLASSTYPE_PRIMARY_BINFO): Likewise.\n\t(CLASSTYPE_VBASECLASSES): Likewise.\n\t(CLASSTYPE_AS_BASE): Likewise.\n\t(DECL_CONV_FN_P): Likewise.\n\t(DECL_CONV_FN_TYPE): Likewise.\n\t(same_type_p): Likewise.\n\t(WILDCARD_TYPE_P): Likewise.\n\t(MAYBE_CLASS_TYPE_P): Likewise.\n\t(FUNCTION_REF_QUALIFIED): Likewise.\n\t(FUNCTION_RVALUE_QUALIFIED): Likewise.\n\t(TYPE_PTRMEMFUNC_FN_TYPE): Likewise.\n\t(TYPE_PTRMEMFUNC_FN_TYPE_RAW): Likewise.\n\t(TYPE_DEPENDENT_P): Likewise.\n\t(TYPE_DEPENDENT_P_VALID): Likewise.\n\t(TYPE_HAS_NONTRIVIAL_DESTRUCTOR): Likewise.\n\t(TYPE_RAISES_EXCEPTIONS): Likewise.\n\t(IDENTIFIER_BINDING): Likewise.\n\t(LANG_IDENTIFIER_CAST): Likewise.\n\t(IF_COND): Likewise.\n\t(THEN_CLAUSE): Likewise.\n\t(ELSE_CLAUSE): Likewise.\n\t(IF_SCOPE): Likewise.\n\t(IF_STMT_CONSTEXPR_P): Likewise.\n\t(IF_STMT_CONSTEVAL_P): Likewise.\n\t(DECLTYPE_TYPE_EXPR): Likewise.\n\t(SET_CLASSTYPE_INTERFACE_UNKNOWN_X): Likewise.\n\t(CLASSTYPE_INTERFACE_ONLY): Likewise.\n\t(TYPE_NAME_STRING): Likewise.\n\t(TYPE_NAME_LENGTH): Likewise.\n\t(CONSTRAINT_VAR_P): Likewise.\n\t(KOENIG_LOOKUP_P): Likewise.\n\t(DECL_PARM_INDEX): Likewise.\n\t(DECL_PARM_LEVEL): Likewise.\n\t(CONV_IMPLICIT): Likewise.\n\t(CONV_STATIC): Likewise.\n\t(CONV_CONST): Likewise.\n\t(CONV_REINTERPRET): Likewise.\n\t(CONV_PRIVATE): Likewise.\n\t(CONV_FORCE_TEMP): Likewise.\n\t(CONV_FOLD): Likewise.\n\t(CONV_OLD_CONVERT): Likewise.\n\t(CONV_C_CAST): Likewise.\n\t(CONV_BACKEND_CONVERT): Likewise.\n\t(WANT_INT): Likewise.\n\t(WANT_FLOAT): Likewise.\n\t(WANT_ENUM): Likewise.\n\t(WANT_POINTER): Likewise.\n\t(WANT_NULL): Likewise.\n\t(WANT_VECTOR_OR_COMPLEX): Likewise.\n\t(WANT_ARITH): Likewise.\n\t(COMPARE_STRICT): Likewise.\n\t(COMPARE_BASE): Likewise.\n\t(COMPARE_DERIVED): Likewise.\n\t(COMPARE_REDECLARATION): Likewise.\n\t(COMPARE_STRUCTURAL): Likewise.\n\t(SF_DEFAULT): Likewise.\n\t(SF_PRE_PARSED): Likewise.\n\t(SF_INCLASS_INLINE): Likewise.\n\t(SD_UNINITIALIZED): Likewise.\n\t(SD_INITIALIZED): Likewise.\n\t(SD_DECOMPOSITION): Likewise.\n\t(SD_DEFAULTED): Likewise.\n\t(SD_DELETED): Likewise.\n\t(TYPE_PTRDATAMEM_P): Likewise.\n\t(RS_TYPE_CONST_P): Likewise.\n\t(TYPE_MAIN_DECL): Likewise.\n\t(DECL_NONTRIVIALLY_INITIALIZED_P): Likewise.\n\t(DECL_DEFAULTED_FN): Likewise.\n\t(TYPE_HAS_USER_CONSTRUCTOR): Likewise.\n\t(DECL_INITIALIZED_IN_CLASS_P): Likewise.\n\t(DECL_DEFAULTED_IN_CLASS_P): Likewise.\n\t(DECL_NONSTATIC_MEMBER_FUNCTION_P): Likewise.\n\t(DECL_HAS_IN_CHARGE_PARM_P): Likewise.\n\t(DECL_HAS_VTT_PARM_P): Likewise.\n\t(FUNCTION_FIRST_USER_PARMTYPE): Likewise.\n\t(FUNCTION_FIRST_USER_PARM): Likewise.\n\t(DECL_CONSTRUCTOR_P): Likewise.\n\t(DECL_DELETED_FN): Likewise.\n\t(BRACE_ENCLOSED_INITIALIZER_P): Likewise.\n\t(DECL_IMMEDIATE_FUNCTION_P): Likewise.\n\t(SET_DECL_IMMEDIATE_FUNCTION_P): Likewise.\n\t(CONSTRUCTOR_MUTABLE_POISON): Likewise.\n\t(PTRMEM_CST_MEMBER): Likewise.\n\t(REF_PARENTHESIZED_P): Likewise.\n\t(TYPE_PTRMEM_P): Likewise.\n\t(TYPE_PTR_OR_PTRMEM_P): Likewise.\n\t(DECL_DECOMPOSITION_P): Likewise.\n\t(DECL_DECOMP_BASE): Likewise.\n\t(DECL_MAYBE_IN_CHARGE_CDTOR_P): Likewise.\n\t(DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P): Likewise.\n\t(DECL_CLONED_FUNCTION_P): Likewise.\n\t(DECL_CLONED_FUNCTION): Likewise.\n\t(DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P): Likewise.\n\t(cp_function_chain): Likewise.\n\t(cdtor_label): Likewise.\n\t(current_class_ptr): Likewise.\n\t(current_class_ref): Likewise.\n\t(current_eh_spec_block): Likewise.\n\t(current_in_charge_parm): Likewise.\n\t(current_vtt_parm): Likewise.\n\t(current_retval_sentinel): Likewise.\n\t(current_function_returns_value): Likewise.\n\t(current_function_returns_null): Likewise.\n\t(current_function_returns_abnormally): Likewise.\n\t(current_function_infinite_loop): Likewise.\n\t(in_base_initializer): Likewise.\n\t(in_function_try_handler): Likewise.\n\t(current_function_return_value): Likewise.\n\t(current_class_type): Likewise.\n\t(TYPE_BEING_DEFINED): Likewise.\n\t(DECL_STATIC_FUNCTION_P): Likewise.\n\t(DECL_FUNCTION_MEMBER_P): Likewise.\n\t(LANG_DECL_MIN_CHECK): Likewise.\n\t(LANG_DECL_FN_CHECK): Likewise.\n\t(LANG_DECL_NS_CHECK): Likewise.\n\t(LANG_DECL_PARM_CHECK): Likewise.\n\t(LANG_DECL_DECOMP_CHECK): Likewise.\n\t(RS_INTEGRAL_TYPE_P): Likewise.\n\t(STAT_HACK_P): Likewise.\n\t(STAT_TYPE_VISIBLE_P): Likewise.\n\t(STAT_TYPE): Likewise.\n\t(STAT_DECL): Likewise.\n\t(STAT_VISIBLE): Likewise.\n\t(MAYBE_STAT_DECL): Likewise.\n\t(MAYBE_STAT_TYPE): Likewise.\n\t(STAT_TYPE_HIDDEN_P): Likewise.\n\t(STAT_DECL_HIDDEN_P): Likewise.\n\t(class warning_sentinel): Likewise.\n\t(struct uid_sensitive_constexpr_evaluation_checker): Likewise.\n\t(class iloc_sentinel): Likewise.\n\t(struct GTY): Likewise.\n\t(struct named_decl_hash): Likewise.\n\t(enum lang_decl_selector): Likewise.\n\t(LANG_DECL_HAS_MIN): Likewise.\n\t(struct named_label_entry): Likewise.\n\t(struct named_label_hash): Likewise.\n\t(enum ref_operator): Likewise.\n\t(struct c_fileinfo): Likewise.\n\t(class ovl_iterator): Likewise.\n\t(class lkp_iterator): Likewise.\n\t(enum rs_ref_qualifier): Likewise.\n\t(enum tsubst_flags): Likewise.\n\t(enum cp_identifier_kind): Likewise.\n\t(enum tag_types): Likewise.\n\t(enum compare_bounds_t): Likewise.\n\t(mark_rvalue_use): Likewise.\n\t(type_unknown_p): Likewise.\n\t(init_modules): Likewise.\n\t(var_in_constexpr_fn): Likewise.\n\t(ovl_first): Likewise.\n\t(lookup_add): Likewise.\n\t(ovl_make): Likewise.\n\t(is_overloaded_fn): Likewise.\n\t(maybe_add_lang_type_raw): Likewise.\n\t(type_memfn_rqual): Likewise.\n\t(builtin_pack_fn_p): Likewise.\n\t(make_conv_op_name): Likewise.\n\t(type_memfn_quals): Likewise.\n\t(get_fileinfo): Likewise.\n\t(cxx_make_type): Likewise.\n\t(build_cplus_array_type): Likewise.\n\t(is_byte_access_type): Likewise.\n\t(comptypes): Likewise.\n\t(canonical_eh_spec): Likewise.\n\t(cp_tree_operand_length): Likewise.\n\t(rs_tree_equal): Likewise.\n\t(compparms): Likewise.\n\t(rs_build_qualified_type_real): Likewise.\n\t(rs_build_qualified_type): Likewise.\n\t(cv_qualified_p): Likewise.\n\t(similar_type_p): Likewise.\n\t(vector_targets_convertible_p): Likewise.\n\t(same_type_ignoring_top_level_qualifiers_p): Likewise.\n\t(comp_ptr_ttypes_const): Likewise.\n\t(get_class_binding_direct): Likewise.\n\t(skip_artificial_parms_for): Likewise.\n\t(lang_check_failed): Likewise.\n\t(default_init_uninitialized_part): Likewise.\n\t(type_has_non_user_provided_default_constructor): Likewise.\n\t(default_ctor_p): Likewise.\n\t(user_provided_p): Likewise.\n\t(sufficient_parms_p): Likewise.\n\t(next_initializable_field): Likewise.\n\t(in_class_defaulted_default_constructor): Likewise.\n\t(is_instantiation_of_constexpr): Likewise.\n\t(check_for_uninitialized_const_var): Likewise.\n\t(reduced_constant_expression_p): Likewise.\n\t(cv_unqualified): Likewise.\n\t(cp_get_callee): Likewise.\n\t(cp_get_callee_fndecl_nofold): Likewise.\n\t(is_nondependent_static_init_expression): Likewise.\n\t(maybe_constant_init): Likewise.\n\t(build_nop): Likewise.\n\t(scalarish_type_p): Likewise.\n\t(is_bitfield_expr_with_lowered_type): Likewise.\n\t(convert_bitfield_to_declared_type): Likewise.\n\t(cp_fold_maybe_rvalue): Likewise.\n\t(maybe_undo_parenthesized_ref): Likewise.\n\t(fold_offsetof): Likewise.\n\t(cp_truthvalue_conversion): Likewise.\n\t(fold_non_dependent_expr): Likewise.\n\t(char_type_p): Likewise.\n\t(instantiation_dependent_expression_p): Likewise.\n\t(type_has_nontrivial_copy_init): Likewise.\n\t(build_local_temp): Likewise.\n\t(is_normal_capture_proxy): Likewise.\n\t(reject_gcc_builtin): Likewise.\n\t(resolve_nondeduced_context): Likewise.\n\t(cxx_incomplete_type_diagnostic): Likewise.\n\t(cxx_incomplete_type_error): Likewise.\n\t(invalid_nonstatic_memfn_p): Likewise.\n\t(really_overloaded_fn): Likewise.\n\t(resolve_nondeduced_context_or_error): Likewise.\n\t(instantiate_non_dependent_or_null): Likewise.\n\t(cxx_incomplete_type_inform): Likewise.\n\t(strip_top_quals): Likewise.\n\t(undeduced_auto_decl): Likewise.\n\t(require_deduced_type): Likewise.\n\t(decl_constant_var_p): Likewise.\n\t(type_of_this_parm): Likewise.\n\t(class_of_this_parm): Likewise.\n\t(identifier_p): Likewise.\n\t(gnu_vector_type_p): Likewise.\n\t(make_tree_vector): Likewise.\n\t(release_tree_vector): Likewise.\n\t(class releasing_vec): Likewise.\n\t(vec_safe_push): Likewise.\n\t(null_node_p): Likewise.\n\t* backend/rust-compile-base.cc (HIRCompileBase::setup_fndecl): Correctly\n\tset fndecl as constexpr from qualifiers.\n\t(HIRCompileBase::compile_function): Test if fndecl is constexpr.\n\t(HIRCompileBase::compile_constant_item): Set fndecl as constexpr.\n\t* backend/rust-compile-intrinsic.cc : Update include.\n\t(finalize_intrinsic_block): Set fndecl as constexpr.\n\t* backend/rust-constexpr.cc : Update include.\n\t(VERIFY_CONSTANT): New.\n\t(is_instantiation_of_constexpr): New.\n\t(literal_type_p): New.\n\t(verify_constant): New.\n\t(find_array_ctor_elt): New.\n\t(array_index_cmp): New.\n\t(potential_constant_expression_1): New.\n\t(get_nth_callarg): New.\n\t(unshare_constructor): New.\n\t(maybe_save_constexpr_fundef): New.\n\t(returns): New.\n\t(breaks): New.\n\t(continues): New.\n\t(switches): New.\n\t(struct constexpr_global_ctx): Add new fields.\n\t(constexpr_fundef): New.\n\t(struct constexpr_call): New.\n\t(constexpr_call_hasher : ggc_ptr_hash<constexpr_call>): New.\n\t(enum constexpr_switch_state): New.\n\t(struct constexpr_ctx): Add new fields.\n\t(struct constexpr_fundef_hasher): New.\n\t(constexpr_fundef_table): New.\n\t(constexpr_fundef_hasher::equal): New.\n\t(constexpr_fundef_hasher::hash): New.\n\t(retrieve_constexpr_fundef): New.\n\t(uid_sensitive_constexpr_evaluation_value): New.\n\t(uid_sensitive_constexpr_evaluation_true_counter): New.\n\t(uid_sensitive_constexpr_evaluation_p): New.\n\t(class temp_override): New.\n\t(struct uid_sensitive_constexpr_evaluation_sentinel): New.\n\t(struct uid_sensitive_constexpr_evaluation_checker): New.\n\t(::uid_sensitive_constexpr_evaluation_sentinel): New.\n\t(::uid_sensitive_constexpr_evaluation_checker): New.\n\t(uid_sensitive_constexpr_evaluation_checker::evaluation_restricted_p): New.\n\t(constexpr_call_table): New.\n\t(constexpr_call_hasher::hash): New.\n\t(constexpr_call_hasher::equal): New.\n\t(maybe_initialize_constexpr_call_table): New.\n\t(fundef_copies_table): New.\n\t(get_fundef_copy): New.\n\t(save_fundef_copy): New.\n\t(constexpr_expression): Refactor in ...\n\t(eval_constant_expression): ...this.\n\t(eval_store_expression): Add 3 bool params.\n\t(eval_call_expression): Likewise.\n\t(eval_binary_expression): Likewise.\n\t(eval_statement_list): New.\n\t(extract_string_elt): New.\n\t(eval_conditional_expression): New.\n\t(eval_bit_field_ref): New.\n\t(eval_loop_expr): New.\n\t(eval_switch_expr): New.\n\t(eval_unary_expression): New.\n\t(call_stack): New.\n\t(call_stack_tick): New.\n\t(last_cx_error_tick): New.\n\t(push_cx_call_context): New.\n\t(pop_cx_call_context): New.\n\t(cx_error_context): New.\n\t(fold_expr): Adjust call to eval_constant_expression.\n\t(same_type_ignoring_tlq_and_bounds_p): New.\n\t(union_active_member): Port more for cxx constexpr.\n\t(fold_indirect_ref_1): New.\n\t(rs_fold_indirect_ref): Likewise.\n\t(rs_eval_indirect_ref): New (from corresponding cxx FE file).\n\t(eval_logical_expression): Adjust parameter list.\n\t(lookup_placeholder): New (from corresponding cxx FE file).\n\t(constant_value_1): Remove.\n\t(inline_asm_in_constexpr_error): New (from corresponding cxx FE file).\n\t(verify_ctor_sanity): New.\n\t(get_callee): Remove.\n\t(initialized_type): New.\n\t(maybe_constexpr_fn): Remove.\n\t(init_subob_ctx): New.\n\t(base_field_constructor_elt): New.\n\t(get_or_insert_ctor_field): New.\n\t(eval_vector_conditional_expression): New (from correponding cxx FE file).\n\t(eval_bare_aggregate): New.\n\t(cxx_eval_trinary_expression): New.\n\t(reduced_constant_expression_p): New.\n\t(adjust_temp_type): New.\n\t(free_constructor): New.\n\t(eval_and_check_array_index): New.\n\t(eval_array_reference): New.\n\t(eval_component_reference): New.\n\t(label_matches): New.\n\t(eval_constant_expression): New.\n\t(modifying_const_object_error): New.\n\t(is_empty_field): New.\n\t(eval_store_expression): New.\n\t(eval_binary_expression): New.\n\t(addr_of_non_const_var): New.\n\t(rs_bind_parameters_in_call): New.\n\t(eval_builtin_function_call): New.\n\t(eval_call_expression): New.\n\t(build_anon_member_initialization): New.\n\t(build_data_member_initialization): New.\n\t(constexpr_fn_retval): New.\n\t(constant_value_1): New.\n\t(decl_constant_value): New.\n\t(non_const_var_error): New.\n\t(get_callee): New.\n\t(get_function_named_in_call): New.\n\t(maybe_constexpr_fn): New.\n\t(get_nth_callarg): New.\n\t(var_in_maybe_constexpr_fn): New.\n\t(instantiate_cx_fn_r): New.\n\t(instantiate_constexpr_fns): New.\n\t(array_index_cmp): New.\n\t(unshare_constructor): New.\n\t(find_array_ctor_elt): New.\n\t(verify_constant): New.\n\t(find_heap_var_refs): New.\n\t(find_immediate_fndecl): New.\n\t(diag_array_subscript): New.\n\t(get_array_or_vector_nelts): New.\n\t(eval_and_check_array_index): New.\n\t(extract_string_elt): New.\n\t(is_valid_constexpr_fn): New.\n\t(explain_invalid_constexpr_fn): New.\n\t(register_constexpr_fundef): New.\n\t(maybe_save_constexpr_fundef): New.\n\t(eval_statement_list): New.\n\t(eval_conditional_expression): New.\n\t(eval_bit_field_ref): New.\n\t(returns): New.\n\t(breaks): New.\n\t(continues): New.\n\t(switches): New.\n\t(eval_loop_expr): New.\n\t(eval_switch_expr): New.\n\t(eval_unary_expression): New.\n\t(cxx_eval_outermost_constant_expr): New.\n\t(is_static_init_expression): New.\n\t(is_constant_expression): New.\n\t(is_nondependent_static_init_expression): New.\n\t(maybe_constant_init_1): New.\n\t(maybe_constant_init): New.\n\t(is_nondependent_constant_expression): New.\n\t(cv_cache): New.\n\t(maybe_constant_value): New.\n\t(potential_constant_expression): New.\n\t(struct check_for_return_continue_data): New.\n\t(check_for_return_continue): New.\n\t(decl_namespace_context): New.\n\t(decl_in_std_namespace_p): New.\n\t(is_std_construct_at): New.\n\t(cxx_dynamic_cast_fn_p): New.\n\t(is_std_allocator_allocate): New.\n\t(is_std_allocator_allocate): New.\n\t(potential_constant_expression_1): New.\n\t(potential_constant_expression_1): New.\n\t(fold_non_dependent_init): New.\n\t* backend/rust-constexpr.h (maybe_save_constexpr_fundef): New.\n\ngcc/testsuite:\n\t* rust/compile/const4.rs: New.\n\t* rust/compile/const5.rs: New.\n\nSigned-off-by: Faisal Abbas <90.abbasfaisal@gmail.com>", "tree": {"sha": "6c64f4edb648272be53e829ba0921826c6cb6096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c64f4edb648272be53e829ba0921826c6cb6096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be4c2687a89e4bdcbd95c439b22b694c3880afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be4c2687a89e4bdcbd95c439b22b694c3880afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be4c2687a89e4bdcbd95c439b22b694c3880afe"}], "stats": {"total": 14810, "additions": 14515, "deletions": 295}, "files": [{"sha": "e1506b377ce1224e2ecee0dfc6a997555cddd0f5", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "patch": "@@ -56,6 +56,7 @@ HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n     }\n \n   // is it a const fn\n+  DECL_DECLARED_CONSTEXPR_P (fndecl) = qualifiers.is_const ();\n   if (qualifiers.is_const ())\n     {\n       TREE_READONLY (fndecl) = 1;\n@@ -630,6 +631,11 @@ HIRCompileBase::compile_function (\n   ctx->pop_fn ();\n   ctx->push_function (fndecl);\n \n+  if (DECL_DECLARED_CONSTEXPR_P (fndecl))\n+    {\n+      maybe_save_constexpr_fundef (fndecl);\n+    }\n+\n   return fndecl;\n }\n \n@@ -695,6 +701,8 @@ HIRCompileBase::compile_constant_item (\n \n       gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n       DECL_SAVED_TREE (fndecl) = bind_tree;\n+      DECL_DECLARED_CONSTEXPR_P (fndecl) = 1;\n+      maybe_save_constexpr_fundef (fndecl);\n \n       ctx->pop_fn ();\n "}, {"sha": "616919677c9a0be93f229666f49280b181f44eae", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "patch": "@@ -15,17 +15,18 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-compile-intrinsic.h\"\n-#include \"fold-const.h\"\n-#include \"langhooks.h\"\n #include \"rust-compile-context.h\"\n #include \"rust-compile-type.h\"\n #include \"rust-compile-fnparam.h\"\n #include \"rust-builtins.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-location.h\"\n+#include \"rust-constexpr.h\"\n #include \"rust-tree.h\"\n #include \"tree-core.h\"\n #include \"print-tree.h\"\n+#include \"fold-const.h\"\n+#include \"langhooks.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -213,6 +214,9 @@ finalize_intrinsic_block (Context *ctx, tree fndecl)\n   DECL_SAVED_TREE (fndecl) = bind_tree;\n \n   ctx->push_function (fndecl);\n+\n+  DECL_DECLARED_CONSTEXPR_P (fndecl) = 1;\n+  maybe_save_constexpr_fundef (fndecl);\n }\n \n static tree"}, {"sha": "8efb4301d0985134b6d2e77454663b9413d8dcce", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 6334, "deletions": 274, "changes": 6608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2"}, {"sha": "77a0797a019da5ac273187dee6fe0ab145f54530", "filename": "gcc/rust/backend/rust-constexpr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-constexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-constexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.h?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "patch": "@@ -24,6 +24,8 @@ namespace Rust {\n namespace Compile {\n \n extern tree fold_expr (tree);\n+extern void\n+maybe_save_constexpr_fundef (tree fun);\n \n } // namespace Compile\n } // namespace Rust"}, {"sha": "d79cd96f011731e391e73030d66340dde1bb81be", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 5241, "deletions": 0, "changes": 5241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2"}, {"sha": "41dd012bd6d58b41def1bb8703d0f00f7e7925f9", "filename": "gcc/rust/backend/rust-tree.h", "status": "modified", "additions": 2897, "deletions": 19, "changes": 2916, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Frust%2Fbackend%2Frust-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.h?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2"}, {"sha": "17beedefc303476b7fc03e8403205d978a584099", "filename": "gcc/testsuite/rust/compile/const4.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst4.rs?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-w -O0 -fdump-tree-gimple\" }\n+const A: i32 = 1;\n+\n+const fn test(a: i32) -> i32 {\n+    let b = A + a;\n+    if b == 2 {\n+        return b + 2;\n+    }\n+    a\n+}\n+\n+const B: i32 = test(1);\n+const C: i32 = test(12);\n+\n+fn main() {\n+    // { dg-final { scan-tree-dump-times {a = 1} 1 gimple } }\n+    let a = A;\n+    // { dg-final { scan-tree-dump-times {b = 4} 1 gimple } }\n+    let b = B;\n+    // { dg-final { scan-tree-dump-times {c = 12} 1 gimple } }\n+    let c = C;\n+}"}, {"sha": "1965f8e7951fe8f937976642ecf8367ad40a5017", "filename": "gcc/testsuite/rust/compile/const5.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66fec8e6ba35edf01f86c2bf6514109aba4ded2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst5.rs?ref=e66fec8e6ba35edf01f86c2bf6514109aba4ded2", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-w -O0 -fdump-tree-gimple\" }\n+const A: usize = 123;\n+const B: [i32; 5] = [1, 2, 3, 4, 5];\n+const C: i32 = B[A];\n+// { dg-error \"array subscript value .123. is outside the bounds of array\" \"\" { target *-*-* } .-1 }"}]}