{"sha": "33de7b37463fd3b846f76e86ed55aaa46870f92e", "node_id": "C_kwDOANBUbNoAKDMzZGU3YjM3NDYzZmQzYjg0NmY3NmU4NmVkNTVhYWE0Njg3MGY5MmU", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-18T09:06:38Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-18T09:06:38Z"}, "message": "aarch64: Fix up LDAPR codegen\n\nUpon some further inspection I realised I had misunderstood some intricacies of the extending loads of the RCPC feature.\nThis patch fixes up the recent GCC support accordingly. In particular:\n* The sign-extending forms are a form of LDAPURS* and are actually part of FEAT_RCPC2\nthat is enabled with Armv8.4-a rather than the base Armv8.3-a FEAT_RCPC.\nThe patch introduces a TARGET_RCPC2 macro and gates this combine pattern accordingly.\n* The assembly output for the zero-extending LDAPR instruction should always use %w formatting for its destination register.\n\nThe testcase is split into zero-extending and sign-extending parts since they require different architecture pragmas.\nIt's also straightforward to add the rest of the FEAT_RCPC2 codegen\n(with immediate offset addressing modes) but that can be done as a separate patch.\nApologies for not catching this sooner, but it hasn't been in trunk long, so no harm done.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.h (TARGET_RCPC2): Define.\n\t* config/aarch64/atomics.md (*aarch64_atomic_load<ALLX:mode>_rcpc_zext):\n\tAdjust output template.\n\t(*aarch64_atomic_load<ALLX:mode>_rcpc_sex): Guard on TARGET_RCPC2.\n\tAdjust output template.\n\t* config/aarch64/iterators.md (w_sz): New mode attr.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ldapr-ext.c: Rename to...\n\t* gcc.target/aarch64/ldapr-zext.c: ... This.  Fix expected assembly.\n\t* gcc.target/aarch64/ldapr-sext.c: New test.", "tree": {"sha": "2ea7ff823e0823eec8ac1567f8dd03ad08db8f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ea7ff823e0823eec8ac1567f8dd03ad08db8f84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33de7b37463fd3b846f76e86ed55aaa46870f92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33de7b37463fd3b846f76e86ed55aaa46870f92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33de7b37463fd3b846f76e86ed55aaa46870f92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33de7b37463fd3b846f76e86ed55aaa46870f92e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5049dfbe294abc56953d4f0b412000cd8a1f39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5049dfbe294abc56953d4f0b412000cd8a1f39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5049dfbe294abc56953d4f0b412000cd8a1f39e"}], "stats": {"total": 118, "additions": 83, "deletions": 35}, "files": [{"sha": "dcb1ecef71a937ece4d9849161157541855ab638", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=33de7b37463fd3b846f76e86ed55aaa46870f92e", "patch": "@@ -336,6 +336,10 @@ enum class aarch64_feature : unsigned char {\n /* RCPC loads from Armv8.3-a.  */\n #define TARGET_RCPC (AARCH64_ISA_RCPC)\n \n+/* The RCPC2 extensions from Armv8.4-a that allow immediate offsets to LDAPR\n+   and sign-extending versions.*/\n+#define TARGET_RCPC2 (AARCH64_ISA_RCPC8_4)\n+\n /* Apply the workaround for Cortex-A53 erratum 835769.  */\n #define TARGET_FIX_ERR_A53_835769\t\\\n   ((aarch64_fix_a53_err835769 == 2)\t\\"}, {"sha": "b6eac4e31fbc1625ccad7d7a4a32035fc6cc4e0a", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=33de7b37463fd3b846f76e86ed55aaa46870f92e", "patch": "@@ -712,7 +712,7 @@\n          (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n        UNSPECV_LDAP)))]\n   \"TARGET_RCPC && (<GPI:sizen> > <ALLX:sizen>)\"\n-  \"ldapr<ALLX:atomic_sfx>\\t%<GPI:w>0, %1\"\n+  \"ldapr<ALLX:atomic_sfx>\\t%w0, %1\"\n )\n \n (define_insn \"*aarch64_atomic_load<ALLX:mode>_rcpc_sext\"\n@@ -722,8 +722,8 @@\n         [(match_operand:ALLX 1 \"aarch64_sync_memory_operand\" \"Q\")\n          (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n        UNSPECV_LDAP)))]\n-  \"TARGET_RCPC && (<GPI:sizen> > <ALLX:sizen>)\"\n-  \"ldaprs<ALLX:atomic_sfx>\\t%<GPI:w>0, %1\"\n+  \"TARGET_RCPC2 && (<GPI:sizen> > <ALLX:sizen>)\"\n+  \"ldapurs<ALLX:size>\\t%<ALLX:w_sx>0, %1\"\n )\n \n (define_insn \"atomic_store<mode>\""}, {"sha": "a3e40758e7be3848906d40d43bc54d9530b98a5b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=33de7b37463fd3b846f76e86ed55aaa46870f92e", "patch": "@@ -1012,6 +1012,10 @@\n ;; 32-bit version and \"%x0\" in the 64-bit version.\n (define_mode_attr w [(QI \"w\") (HI \"w\") (SI \"w\") (DI \"x\") (SF \"s\") (DF \"d\")])\n \n+;; Similar to w above, but used for sign-extending loads where we want to\n+;; use %x0 for SImode.\n+(define_mode_attr w_sx [(QI \"w\") (HI \"w\") (SI \"x\")])\n+\n ;; The size of access, in bytes.\n (define_mode_attr ldst_sz [(SI \"4\") (DI \"8\")])\n ;; Likewise for load/store pair."}, {"sha": "292c55d9e6a4bba46c096619838b6bcaa9b20448", "filename": "gcc/testsuite/gcc.target/aarch64/ldapr-sext.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c?ref=33de7b37463fd3b846f76e86ed55aaa46870f92e", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+#include <stdatomic.h>\n+\n+#pragma GCC target \"arch=armv8.4-a\"\n+\n+atomic_ullong u64;\n+atomic_llong s64;\n+atomic_uint u32;\n+atomic_int s32;\n+atomic_ushort u16;\n+atomic_short s16;\n+atomic_uchar u8;\n+atomic_schar s8;\n+\n+#define TEST(name, ldsize, rettype)\t\t\t\t\\\n+rettype\t\t\t\t\t\t\t\t\\\n+test_##name (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return atomic_load_explicit (&ldsize, memory_order_acquire);\t\\\n+}\n+\n+/*\n+**test_s8_s64:\n+**...\n+**\tldapursb\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s8_s64, s8, long long)\n+\n+/*\n+**test_s16_s64:\n+**...\n+**\tldapursh\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s16_s64, s16, long long)\n+\n+/*\n+**test_s32_s64:\n+**...\n+**\tldapursw\tx0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s32_s64, s32, long long)\n+\n+/*\n+**test_s8_s32:\n+**...\n+**\tldapursb\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s8_s32, s8, int)\n+\n+/*\n+**test_s16_s32:\n+**...\n+**\tldapursh\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s16_s32, s16, int)"}, {"sha": "6f448eee1d9b109d08ca1dfa63d7156c6af95751", "filename": "gcc/testsuite/gcc.target/aarch64/ldapr-zext.c", "status": "renamed", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-zext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33de7b37463fd3b846f76e86ed55aaa46870f92e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-zext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-zext.c?ref=33de7b37463fd3b846f76e86ed55aaa46870f92e", "patch": "@@ -24,38 +24,29 @@ test_##name (void)\t\t\t\t\t\t\\\n /*\n **test_u8_u64:\n **...\n-**\tldaprb\tx0, \\[x[0-9]+\\]\n+**\tldaprb\tw0, \\[x[0-9]+\\]\n **\tret\n */\n \n TEST(u8_u64, u8, unsigned long long)\n \n-/*\n-**test_s8_s64:\n-**...\n-**\tldaprsb\tx0, \\[x[0-9]+\\]\n-**\tret\n-*/\n-\n-TEST(s8_s64, s8, long long)\n-\n /*\n **test_u16_u64:\n **...\n-**\tldaprh\tx0, \\[x[0-9]+\\]\n+**\tldaprh\tw0, \\[x[0-9]+\\]\n **\tret\n */\n \n TEST(u16_u64, u16, unsigned long long)\n \n /*\n-**test_s16_s64:\n+**test_u32_u64:\n **...\n-**\tldaprsh\tx0, \\[x[0-9]+\\]\n+**\tldapr\tw0, \\[x[0-9]+\\]\n **\tret\n */\n \n-TEST(s16_s64, s16, long long)\n+TEST(u32_u64, u32, unsigned long long)\n \n /*\n **test_u8_u32:\n@@ -66,29 +57,11 @@ TEST(s16_s64, s16, long long)\n \n TEST(u8_u32, u8, unsigned)\n \n-/*\n-**test_s8_s32:\n-**...\n-**\tldaprsb\tw0, \\[x[0-9]+\\]\n-**\tret\n-*/\n-\n-TEST(s8_s32, s8, int)\n-\n /*\n **test_u16_u32:\n **...\n **\tldaprh\tw0, \\[x[0-9]+\\]\n **\tret\n */\n-\n TEST(u16_u32, u16, unsigned)\n \n-/*\n-**test_s16_s32:\n-**...\n-**\tldaprsh\tw0, \\[x[0-9]+\\]\n-**\tret\n-*/\n-\n-TEST(s16_s32, s16, int)", "previous_filename": "gcc/testsuite/gcc.target/aarch64/ldapr-ext.c"}]}