{"sha": "da903a1610ba94d9309ab3438bd8a6391a7e77fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5MDNhMTYxMGJhOTRkOTMwOWFiMzQzOGJkOGE2MzkxYTdlNzdmYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-09-15T12:24:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-09-15T12:24:14Z"}, "message": "[C++ PATCH] simplify clone predicate\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-09/msg00904.html\n\t* cp-tree.h (DECL_CLONED_FUNCTION_P): Reimplement using\n\tIDENTIFIER_CDTOR_P, correct documentation.\n\t(DECL_CLONED_FUNCTION): Directly access field.\n\t(decl_cloned_function_p): Delete.\n\t* class.c (decl_cloned_function_p): Delete.\n\t* pt.c (instantiate_template_1): Check DECL_CHAIN is a decl.\n\nFrom-SVN: r275727", "tree": {"sha": "5d6145bb8f4865515e5f0bbadaddbc11587fc9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d6145bb8f4865515e5f0bbadaddbc11587fc9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da903a1610ba94d9309ab3438bd8a6391a7e77fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da903a1610ba94d9309ab3438bd8a6391a7e77fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da903a1610ba94d9309ab3438bd8a6391a7e77fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da903a1610ba94d9309ab3438bd8a6391a7e77fb/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5b72b67cf7c667a1c21ffeee1a7e6716650c55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b72b67cf7c667a1c21ffeee1a7e6716650c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b72b67cf7c667a1c21ffeee1a7e6716650c55d"}], "stats": {"total": 62, "additions": 19, "deletions": 43}, "files": [{"sha": "bca30750923a956f650a76899a87a4e11fcb71e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da903a1610ba94d9309ab3438bd8a6391a7e77fb", "patch": "@@ -1,3 +1,12 @@\n+2019-09-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_CLONED_FUNCTION_P): Reimplement using\n+\tIDENTIFIER_CDTOR_P, correct documentation.\n+\t(DECL_CLONED_FUNCTION): Directly access field.\n+\t(decl_cloned_function_p): Delete.\n+\t* class.c (decl_cloned_function_p): Delete.\n+\t* pt.c (instantiate_template_1): Check DECL_CHAIN is a decl.\n+\n 2019-09-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-objcp-common.c (cp-objcp-common.c): Alphababetize and"}, {"sha": "59a3d1a04966554a0515c23e28575b782398227e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=da903a1610ba94d9309ab3438bd8a6391a7e77fb", "patch": "@@ -4701,43 +4701,6 @@ build_clone (tree fn, tree name)\n   return clone;\n }\n \n-/* Implementation of DECL_CLONED_FUNCTION and DECL_CLONED_FUNCTION_P, do\n-   not invoke this function directly.\n-\n-   For a non-thunk function, returns the address of the slot for storing\n-   the function it is a clone of.  Otherwise returns NULL_TREE.\n-\n-   If JUST_TESTING, looks through TEMPLATE_DECL and returns NULL if\n-   cloned_function is unset.  This is to support the separate\n-   DECL_CLONED_FUNCTION and DECL_CLONED_FUNCTION_P modes; using the latter\n-   on a template makes sense, but not the former.  */\n-\n-tree *\n-decl_cloned_function_p (const_tree decl, bool just_testing)\n-{\n-  tree *ptr;\n-  if (just_testing)\n-    decl = STRIP_TEMPLATE (decl);\n-\n-  if (TREE_CODE (decl) != FUNCTION_DECL\n-      || !DECL_LANG_SPECIFIC (decl)\n-      || DECL_LANG_SPECIFIC (decl)->u.fn.thunk_p)\n-    {\n-#if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n-      if (!just_testing)\n-\tlang_check_failed (__FILE__, __LINE__, __FUNCTION__);\n-      else\n-#endif\n-\treturn NULL;\n-    }\n-\n-  ptr = &DECL_LANG_SPECIFIC (decl)->u.fn.u5.cloned_function;\n-  if (just_testing && *ptr == NULL_TREE)\n-    return NULL;\n-  else\n-    return ptr;\n-}\n-\n /* Produce declarations for all appropriate clones of FN.  If\n    UPDATE_METHODS is true, the clones are added to the\n    CLASSTYPE_MEMBER_VEC.  */"}, {"sha": "6d217fc27a2826c05771f93a39ce851f3a4bd29d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=da903a1610ba94d9309ab3438bd8a6391a7e77fb", "patch": "@@ -2874,13 +2874,17 @@ struct GTY(()) lang_decl {\n   (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (NODE)            \\\n    || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (NODE))\n \n-/* Nonzero if NODE (a FUNCTION_DECL) is a cloned constructor or\n+/* Nonzero if NODE (a _DECL) is a cloned constructor or\n    destructor.  */\n-#define DECL_CLONED_FUNCTION_P(NODE) (!!decl_cloned_function_p (NODE, true))\n+#define DECL_CLONED_FUNCTION_P(NODE)\t\t\\\n+  (DECL_NAME (NODE)\t\t\t\t\\\n+   && IDENTIFIER_CDTOR_P (DECL_NAME (NODE))\t\\\n+   && !DECL_MAYBE_IN_CHARGE_CDTOR_P (NODE))\n \n /* If DECL_CLONED_FUNCTION_P holds, this is the function that was\n    cloned.  */\n-#define DECL_CLONED_FUNCTION(NODE) (*decl_cloned_function_p (NODE, false))\n+#define DECL_CLONED_FUNCTION(NODE)\t\t\\\n+  (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (NODE))->u.fn.u5.cloned_function)\n \n /* Perform an action for each clone of FN, if FN is a function with\n    clones.  This macro should be used like:\n@@ -6333,7 +6337,6 @@ extern void check_abi_tags\t\t\t(tree);\n extern tree missing_abi_tags\t\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n extern void fixup_attribute_variants\t\t(tree);\n-extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, bool);\n extern void adjust_clone_args\t\t\t(tree);\n extern void deduce_noexcept_on_destructor       (tree);"}, {"sha": "4c49a1f9b269d80ac4c792fc1a7ee2b2255a96d1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da903a1610ba94d9309ab3438bd8a6391a7e77fb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=da903a1610ba94d9309ab3438bd8a6391a7e77fb", "patch": "@@ -19905,8 +19905,9 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n      instantiate all the alternate entry points as well.  We do this\n      by cloning the instantiation of the main entry point, not by\n      instantiating the template clones.  */\n-  if (DECL_CHAIN (gen_tmpl) && DECL_CLONED_FUNCTION_P (DECL_CHAIN (gen_tmpl)))\n-    clone_function_decl (fndecl, /*update_methods=*/false);\n+  if (tree chain = DECL_CHAIN (gen_tmpl))\n+    if (DECL_P (chain) && DECL_CLONED_FUNCTION_P (chain))\n+      clone_function_decl (fndecl, /*update_methods=*/false);\n \n   if (!access_ok)\n     {"}]}