{"sha": "a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdiODEwN2Y4ZWU5OTYyOWMyOGFiOWUwZTViMDBjNTg5ZDg1NzdkYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-04-30T16:51:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-04-30T16:51:15Z"}, "message": "arm.md (UNSPEC_LL): New.\n\n        * config/arm/arm.md (UNSPEC_LL): New.\n        * config/arm/sync.md (atomic_loaddi, atomic_loaddi_1): New.\n        (arm_load_exclusivedi): Use %H0.\n\nFrom-SVN: r186990", "tree": {"sha": "eec45707de7026b461de08386e7b628ee962695e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec45707de7026b461de08386e7b628ee962695e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/comments", "author": null, "committer": null, "parents": [{"sha": "85dd5559489b154582d81f668fc1a3af63ab4764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85dd5559489b154582d81f668fc1a3af63ab4764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85dd5559489b154582d81f668fc1a3af63ab4764"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "ea032c11afca9971e3392eb3e24645276f54e805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "patch": "@@ -1,3 +1,9 @@\n+2012-04-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/arm/arm.md (UNSPEC_LL): New.\n+\t* config/arm/sync.md (atomic_loaddi, atomic_loaddi_1): New.\n+\t(arm_load_exclusivedi): Use %H0.\n+\n 2012-04-30  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (comdat_symbol_id): Add const."}, {"sha": "7a49270801c8615e7b6570f731baa900ede1095e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "patch": "@@ -117,6 +117,7 @@\n \t\t\t; that.\n   UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n   UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n+  UNSPEC_LL\t\t; Represent an unpaired load-register-exclusive.\n ])\n \n ;; UNSPEC_VOLATILE Usage:"}, {"sha": "86135bb64c45c71630a1af1bc122eeb43093b885", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b8107f8ee99629c28ab9e0e5b00c589d8577db/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=a7b8107f8ee99629c28ab9e0e5b00c589d8577db", "patch": "@@ -65,6 +65,31 @@\n    (set_attr \"conds\" \"unconditional\")\n    (set_attr \"predicable\" \"no\")])\n \n+;; Note that ldrd and vldr are *not* guaranteed to be single-copy atomic,\n+;; even for a 64-bit aligned address.  Instead we use a ldrexd unparied\n+;; with a store.\n+(define_expand \"atomic_loaddi\"\n+  [(match_operand:DI 0 \"s_register_operand\")\t\t;; val out\n+   (match_operand:DI 1 \"mem_noofs_operand\")\t\t;; memory\n+   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n+  \"TARGET_HAVE_LDREXD && ARM_DOUBLEWORD_ALIGN\"\n+{\n+  enum memmodel model = (enum memmodel) INTVAL (operands[2]);\n+  expand_mem_thread_fence (model);\n+  emit_insn (gen_atomic_loaddi_1 (operands[0], operands[1]));\n+  if (model == MEMMODEL_SEQ_CST)\n+    expand_mem_thread_fence (model);\n+  DONE;\n+})\n+\n+(define_insn \"atomic_loaddi_1\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"mem_noofs_operand\" \"Ua\")]\n+\t\t   UNSPEC_LL))]\n+  \"TARGET_HAVE_LDREXD && ARM_DOUBLEWORD_ALIGN\"\n+  \"ldrexd%?\\t%0, %H0, %C1\"\n+  [(set_attr \"predicable\" \"yes\")])\n+\n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:SI 0 \"s_register_operand\" \"\")\t\t;; bool out\n    (match_operand:QHSD 1 \"s_register_operand\" \"\")\t;; val out\n@@ -317,16 +342,7 @@\n \t  [(match_operand:DI 1 \"mem_noofs_operand\" \"Ua\")]\n \t  VUNSPEC_LL))]\n   \"TARGET_HAVE_LDREXD\"\n-  {\n-    rtx target = operands[0];\n-    /* The restrictions on target registers in ARM mode are that the two\n-       registers are consecutive and the first one is even; Thumb is\n-       actually more flexible, but DI should give us this anyway.\n-       Note that the 1st register always gets the lowest word in memory.  */\n-    gcc_assert ((REGNO (target) & 1) == 0);\n-    operands[2] = gen_rtx_REG (SImode, REGNO (target) + 1);\n-    return \"ldrexd%?\\t%0, %2, %C1\";\n-  }\n+  \"ldrexd%?\\t%0, %H0, %C1\"\n   [(set_attr \"predicable\" \"yes\")])\n \n (define_insn \"arm_store_exclusive<mode>\""}]}