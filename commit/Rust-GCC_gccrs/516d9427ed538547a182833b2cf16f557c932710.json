{"sha": "516d9427ed538547a182833b2cf16f557c932710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZDk0MjdlZDUzODU0N2ExODI4MzNiMmNmMTZmNTU3YzkzMjcxMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-13T20:50:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-13T20:50:26Z"}, "message": "re PR c++/48594 (Rejects valid with pointer-to-member in template)\n\n\tPR c++/48594\n\t* decl2.c (build_offset_ref_call_from_tree): Fix calling a functor\n\tor pointer to (non-member) function.\n\nFrom-SVN: r172394", "tree": {"sha": "2410846527c100ed914c6ae240c4d2615c0e9030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2410846527c100ed914c6ae240c4d2615c0e9030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516d9427ed538547a182833b2cf16f557c932710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516d9427ed538547a182833b2cf16f557c932710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516d9427ed538547a182833b2cf16f557c932710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516d9427ed538547a182833b2cf16f557c932710/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b1a46942eacea3c40aff3d22d7712c530721aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1a46942eacea3c40aff3d22d7712c530721aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1a46942eacea3c40aff3d22d7712c530721aa8"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "05f12bed4eb00b45d4f3e05b205e256f92c7cf08", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516d9427ed538547a182833b2cf16f557c932710/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516d9427ed538547a182833b2cf16f557c932710/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=516d9427ed538547a182833b2cf16f557c932710", "patch": "@@ -1,3 +1,9 @@\n+2011-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48594\n+\t* decl2.c (build_offset_ref_call_from_tree): Fix calling a functor\n+\tor pointer to (non-member) function.\n+\n 2011-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/48570"}, {"sha": "882bbf9f88ee74e0809dc35086669a2388edb6da", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516d9427ed538547a182833b2cf16f557c932710/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516d9427ed538547a182833b2cf16f557c932710/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=516d9427ed538547a182833b2cf16f557c932710", "patch": "@@ -4081,10 +4081,13 @@ build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args)\n \t parameter.  That must be done before the FN is transformed\n \t because we depend on the form of FN.  */\n       make_args_non_dependent (*args);\n-      object = build_non_dependent_expr (object);\n-      if (TREE_CODE (fn) == DOTSTAR_EXPR)\n-\tobject = cp_build_addr_expr (object, tf_warning_or_error);\n-      VEC_safe_insert (tree, gc, *args, 0, object);\n+      if (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE)\n+\t{\n+\t  object = build_non_dependent_expr (object);\n+\t  if (TREE_CODE (fn) == DOTSTAR_EXPR)\n+\t    object = cp_build_addr_expr (object, tf_warning_or_error);\n+\t  VEC_safe_insert (tree, gc, *args, 0, object);\n+\t}\n       /* Now that the arguments are done, transform FN.  */\n       fn = build_non_dependent_expr (fn);\n     }\n@@ -4103,7 +4106,10 @@ build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args)\n       VEC_safe_insert (tree, gc, *args, 0, object_addr);\n     }\n \n-  expr = cp_build_function_call_vec (fn, args, tf_warning_or_error);\n+  if (CLASS_TYPE_P (TREE_TYPE (fn)))\n+    expr = build_op_call (fn, args, tf_warning_or_error);\n+  else\n+    expr = cp_build_function_call_vec (fn, args, tf_warning_or_error);\n   if (processing_template_decl && expr != error_mark_node)\n     expr = build_min_non_dep_call_vec (expr, orig_fn, orig_args);\n "}, {"sha": "433faa66b19acdd77d6c48855120d34cf65d8e1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516d9427ed538547a182833b2cf16f557c932710/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516d9427ed538547a182833b2cf16f557c932710/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=516d9427ed538547a182833b2cf16f557c932710", "patch": "@@ -1,3 +1,7 @@\n+2011-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/operator11.C: New.\n+\n 2011-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/48591"}, {"sha": "8d6b77ab4541849a5e682e08a39d22b378373d4e", "filename": "gcc/testsuite/g++.dg/template/operator11.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516d9427ed538547a182833b2cf16f557c932710/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516d9427ed538547a182833b2cf16f557c932710/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator11.C?ref=516d9427ed538547a182833b2cf16f557c932710", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/48594\n+// Test for uses of (X->*Y)() that don't actually involve a\n+// pointer to member function.\n+\n+struct A { } a;\n+struct B { } b;\n+struct C * cp;\n+\n+struct Func { void operator()(); };\n+Func operator->* (A, int);\n+\n+typedef void (*pfn)();\n+pfn operator->* (B, int);\n+\n+pfn C::*cpfn;\n+Func C::*cfunc;\n+\n+template <class T>\n+void f()\n+{\n+  (a->*1)();\n+  (b->*1)();\n+  (cp->*cpfn)();\n+  (cp->*cfunc)();\n+}"}]}