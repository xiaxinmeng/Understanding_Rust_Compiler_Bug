{"sha": "4f9b4029463bc07cc04b20fb0a24d7516f455d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5YjQwMjk0NjNiYzA3Y2MwNGIyMGZiMGEyNGQ3NTE2ZjQ1NWQwMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-20T11:30:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-20T11:30:07Z"}, "message": "final.c (output_asm_operand_names): New fcn, from output_asm_insn.\n\n\t* final.c (output_asm_operand_names): New fcn, from output_asm_insn.\n\t(output_asm_insn): Call it for each line output.\n\tDon't record an operand more than once.\n\nFrom-SVN: r46377", "tree": {"sha": "dd256731b7f84f35ca5f5cdb17b1f48ff8cc8765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd256731b7f84f35ca5f5cdb17b1f48ff8cc8765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f9b4029463bc07cc04b20fb0a24d7516f455d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9b4029463bc07cc04b20fb0a24d7516f455d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9b4029463bc07cc04b20fb0a24d7516f455d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9b4029463bc07cc04b20fb0a24d7516f455d02/comments", "author": null, "committer": null, "parents": [{"sha": "107c13a132d91e9e229994cc6cd23d1615f1e6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107c13a132d91e9e229994cc6cd23d1615f1e6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107c13a132d91e9e229994cc6cd23d1615f1e6df"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "1368558f054cba22885ccee111830b043da05b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9b4029463bc07cc04b20fb0a24d7516f455d02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9b4029463bc07cc04b20fb0a24d7516f455d02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f9b4029463bc07cc04b20fb0a24d7516f455d02", "patch": "@@ -1,5 +1,9 @@\n Sat Oct 20 07:27:14 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* final.c (output_asm_operand_names): New fcn, from output_asm_insn.\n+\t(output_asm_insn): Call it for each line output.\n+\tDon't record an operand more than once.\n+\n \t* toplev.h (struct lang_hooks): HONOR_READONLY now bool.\n \t* main.c: Include config.h and system.h, but not ansidecl.h.\n \t* Makefile.in (main.o): Update accordingly."}, {"sha": "ae3e47323b97cddefee1537e7a860e9f2b7281cc", "filename": "gcc/final.c", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9b4029463bc07cc04b20fb0a24d7516f455d02/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9b4029463bc07cc04b20fb0a24d7516f455d02/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4f9b4029463bc07cc04b20fb0a24d7516f455d02", "patch": "@@ -245,6 +245,7 @@ static void notice_source_line\tPARAMS ((rtx));\n static rtx walk_alter_subreg\tPARAMS ((rtx));\n static void output_asm_name\tPARAMS ((void));\n static tree get_decl_from_op\tPARAMS ((rtx, int *));\n+static void output_asm_operand_names PARAMS ((rtx *, int *, int));\n static void output_operand\tPARAMS ((rtx, int));\n #ifdef LEAF_REGISTERS\n static void leaf_renumber_regs\tPARAMS ((rtx));\n@@ -3332,6 +3333,34 @@ get_decl_from_op (op, paddressp)\n   return inner_addressp ? 0 : decl;\n }\n   \n+/* Output operand names for assembler instructions.  OPERANDS is the\n+   operand vector, OPORDER is the order to write the operands, and NOPS\n+   is the number of operands to write.  */\n+\n+static void\n+output_asm_operand_names (operands, oporder, nops)\n+     rtx *operands;\n+     int *oporder;\n+     int nops;\n+{\n+  int wrote = 0;\n+  int i;\n+\n+  for (i = 0; i < nops; i++)\n+    {\n+      int addressp;\n+      tree decl = get_decl_from_op (operands[oporder[i]], &addressp);\n+\n+      if (decl && DECL_NAME (decl))\n+\t{\n+\t  fprintf (asm_out_file, \"%s %s%s\",\n+\t\t   wrote ? \",\" : ASM_COMMENT_START, addressp ? \"*\" : \"\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t  wrote = 1;\n+\t}\n+    }\n+}\n+\n /* Output text from TEMPLATE to the assembler output file,\n    obeying %-directions to substitute operands taken from\n    the vector OPERANDS.\n@@ -3359,13 +3388,15 @@ output_asm_insn (template, operands)\n   int dialect = 0;\n #endif\n   int oporder[MAX_RECOG_OPERANDS];\n+  char opoutput[MAX_RECOG_OPERANDS];\n   int ops = 0;\n \n   /* An insn may return a null string template\n      in a case where no assembler code is needed.  */\n   if (*template == 0)\n     return;\n \n+  memset (opoutput, 0, sizeof opoutput);\n   p = template;\n   putc ('\\t', asm_out_file);\n \n@@ -3377,9 +3408,14 @@ output_asm_insn (template, operands)\n     switch (c)\n       {\n       case '\\n':\n+\tif (flag_verbose_asm)\n+\t  output_asm_operand_names (operands, oporder, ops);\n \tif (flag_print_asm_name)\n \t  output_asm_name ();\n \n+\tops = 0;\n+\tmemset (opoutput, 0, sizeof opoutput);\n+\n \tputc (c, asm_out_file);\n #ifdef ASM_OUTPUT_OPCODE\n \twhile ((c = *p) == '\\t')\n@@ -3499,7 +3535,9 @@ output_asm_insn (template, operands)\n \t    else\n \t      output_operand (operands[c], letter);\n \n-\t    oporder[ops++] = c;\n+\t    if (!opoutput[c])\n+\t      oporder[ops++] = c;\n+\t    opoutput[c] = 1;\n \n \t    while ((c = *p) >= '0' && c <= '9')\n \t      p++;\n@@ -3514,7 +3552,10 @@ output_asm_insn (template, operands)\n \t    else\n \t      output_operand (operands[c], 0);\n \n-\t    oporder[ops++] = c;\n+\t    if (!opoutput[c])\n+\t      oporder[ops++] = c;\n+\t    opoutput[c] = 1;\n+\n \t    while ((c = *p) >= '0' && c <= '9')\n \t      p++;\n \t  }\n@@ -3535,26 +3576,7 @@ output_asm_insn (template, operands)\n \n   /* Write out the variable names for operands, if we know them.  */\n   if (flag_verbose_asm)\n-    {\n-      int wrote = 0;\n-      int i;\n-\n-      for (i = 0; i < ops; i++)\n-\t{\n-\t  int addressp;\n-\t  tree decl = get_decl_from_op (operands[oporder[i]], &addressp);\n-\n-\t  if (decl && DECL_NAME (decl))\n-\t    {\n-\t      fprintf (asm_out_file, \"%s %s%s\",\n-\t\t       wrote ? \",\" : ASM_COMMENT_START,\n-\t\t       addressp ? \"*\" : \"\",\n-\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)));\n-\t      wrote = 1;\n-\t    }\n-\t}\n-    }\n-\n+    output_asm_operand_names (operands, oporder, ops);\n   if (flag_print_asm_name)\n     output_asm_name ();\n "}]}