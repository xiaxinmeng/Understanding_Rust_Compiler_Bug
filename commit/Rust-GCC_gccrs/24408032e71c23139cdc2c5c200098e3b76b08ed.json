{"sha": "24408032e71c23139cdc2c5c200098e3b76b08ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0MDgwMzJlNzFjMjMxMzljZGMyYzVjMjAwMDk4ZTNiNzZiMDhlZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-12-23T06:58:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-12-23T06:58:48Z"}, "message": "rs6000.h (rs6000_builtins): Add vsldoi variants.\n\n        * config/rs6000/rs6000.h (rs6000_builtins): Add vsldoi variants.\n\n        * config/rs6000/rs6000.md (\"altivec_vsldoi_*\"): Same.\n\n        * config/rs6000/rs6000.c: Clean up some spacing and indentation.\n        (altivec_init_builtins): Add tree types for builtins with 4 bit\n        literals.\n\t(bdesc_3arg): Add vsldoi variants.\n\nFrom-SVN: r48282", "tree": {"sha": "fc27cb2df5b6beac2f1ba3a528246e2af899bb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc27cb2df5b6beac2f1ba3a528246e2af899bb67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24408032e71c23139cdc2c5c200098e3b76b08ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24408032e71c23139cdc2c5c200098e3b76b08ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24408032e71c23139cdc2c5c200098e3b76b08ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24408032e71c23139cdc2c5c200098e3b76b08ed/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f540a7d37187bcd200436031946655ec39af11bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f540a7d37187bcd200436031946655ec39af11bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f540a7d37187bcd200436031946655ec39af11bb"}], "stats": {"total": 188, "additions": 156, "deletions": 32}, "files": [{"sha": "8f1873c06263456fe6213ec0a4bef925fa607925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24408032e71c23139cdc2c5c200098e3b76b08ed", "patch": "@@ -1,3 +1,14 @@\n+2001-12-22  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.h (rs6000_builtins): Add vsldoi variants.\n+\n+        * config/rs6000/rs6000.md (\"altivec_vsldoi_*\"): Same.\n+\n+        * config/rs6000/rs6000.c: Clean up some spacing and indentation.\n+        (altivec_init_builtins): Add tree types for builtins with 4 bit\n+        literals.\n+\t(bdesc_3arg): Add vsldoi variants.\n+\n 2001-12-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* 1750a.h (datalbl, jmplbl): Declare array size explicitly."}, {"sha": "0d86b5b2e533e401a35d0dfaf29e8ce5f4c01b4d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 106, "deletions": 31, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=24408032e71c23139cdc2c5c200098e3b76b08ed", "patch": "@@ -3181,31 +3181,38 @@ struct builtin_description\n   const char *const name;\n   const enum rs6000_builtins code;\n };\n-/* Simple ternary operations: VECd = foo (VECa, VECb, VECc) */\n+\n+/* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */\n+\n static const struct builtin_description bdesc_3arg[] =\n-  {\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmaddfp, \"__builtin_altivec_vmaddfp\", ALTIVEC_BUILTIN_VMADDFP },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmhaddshs, \"__builtin_altivec_vmhaddshs\", ALTIVEC_BUILTIN_VMHADDSHS },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmhraddshs, \"__builtin_altivec_vmhraddshs\", ALTIVEC_BUILTIN_VMHRADDSHS },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmladduhm, \"__builtin_altivec_vmladduhm\", ALTIVEC_BUILTIN_VMLADDUHM},\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumubm, \"__builtin_altivec_vmsumubm\", ALTIVEC_BUILTIN_VMSUMUBM },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsummbm, \"__builtin_altivec_vmsummbm\", ALTIVEC_BUILTIN_VMSUMMBM },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhm, \"__builtin_altivec_vmsumuhm\", ALTIVEC_BUILTIN_VMSUMUHM },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshm, \"__builtin_altivec_vmsumshm\", ALTIVEC_BUILTIN_VMSUMSHM },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhs, \"__builtin_altivec_vmsumuhs\", ALTIVEC_BUILTIN_VMSUMUHS },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshs, \"__builtin_altivec_vmsumshs\", ALTIVEC_BUILTIN_VMSUMSHS },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vnmsubfp, \"__builtin_altivec_vnmsubfp\", ALTIVEC_BUILTIN_VNMSUBFP }, \n-    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4sf, \"__builtin_altivec_vperm_4sf\", ALTIVEC_BUILTIN_VPERM_4SF },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4si, \"__builtin_altivec_vperm_4si\", ALTIVEC_BUILTIN_VPERM_4SI },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_8hi, \"__builtin_altivec_vperm_8hi\", ALTIVEC_BUILTIN_VPERM_8HI },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_16qi, \"__builtin_altivec_vperm_16qi\", ALTIVEC_BUILTIN_VPERM_16QI },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vsel_4sf, \"__builtin_altivec_vsel_4sf\", ALTIVEC_BUILTIN_VSEL_4SF },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vsel_4si, \"__builtin_altivec_vsel_4si\", ALTIVEC_BUILTIN_VSEL_4SI },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vsel_8hi, \"__builtin_altivec_vsel_8hi\", ALTIVEC_BUILTIN_VSEL_8HI },\n-    { MASK_ALTIVEC, CODE_FOR_altivec_vsel_16qi, \"__builtin_altivec_vsel_16qi\", ALTIVEC_BUILTIN_VSEL_16QI },\n-  };\n+{\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmaddfp, \"__builtin_altivec_vmaddfp\", ALTIVEC_BUILTIN_VMADDFP },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmhaddshs, \"__builtin_altivec_vmhaddshs\", ALTIVEC_BUILTIN_VMHADDSHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmhraddshs, \"__builtin_altivec_vmhraddshs\", ALTIVEC_BUILTIN_VMHRADDSHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmladduhm, \"__builtin_altivec_vmladduhm\", ALTIVEC_BUILTIN_VMLADDUHM},\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsumubm, \"__builtin_altivec_vmsumubm\", ALTIVEC_BUILTIN_VMSUMUBM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsummbm, \"__builtin_altivec_vmsummbm\", ALTIVEC_BUILTIN_VMSUMMBM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhm, \"__builtin_altivec_vmsumuhm\", ALTIVEC_BUILTIN_VMSUMUHM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshm, \"__builtin_altivec_vmsumshm\", ALTIVEC_BUILTIN_VMSUMSHM },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhs, \"__builtin_altivec_vmsumuhs\", ALTIVEC_BUILTIN_VMSUMUHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshs, \"__builtin_altivec_vmsumshs\", ALTIVEC_BUILTIN_VMSUMSHS },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vnmsubfp, \"__builtin_altivec_vnmsubfp\", ALTIVEC_BUILTIN_VNMSUBFP }, \n+  { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4sf, \"__builtin_altivec_vperm_4sf\", ALTIVEC_BUILTIN_VPERM_4SF },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4si, \"__builtin_altivec_vperm_4si\", ALTIVEC_BUILTIN_VPERM_4SI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vperm_8hi, \"__builtin_altivec_vperm_8hi\", ALTIVEC_BUILTIN_VPERM_8HI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vperm_16qi, \"__builtin_altivec_vperm_16qi\", ALTIVEC_BUILTIN_VPERM_16QI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsel_4sf, \"__builtin_altivec_vsel_4sf\", ALTIVEC_BUILTIN_VSEL_4SF },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsel_4si, \"__builtin_altivec_vsel_4si\", ALTIVEC_BUILTIN_VSEL_4SI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsel_8hi, \"__builtin_altivec_vsel_8hi\", ALTIVEC_BUILTIN_VSEL_8HI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsel_16qi, \"__builtin_altivec_vsel_16qi\", ALTIVEC_BUILTIN_VSEL_16QI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_16qi, \"__builtin_altivec_vsldoi_16qi\", ALTIVEC_BUILTIN_VSLDOI_16QI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_8hi, \"__builtin_altivec_vsldoi_8hi\", ALTIVEC_BUILTIN_VSLDOI_8HI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_4si, \"__builtin_altivec_vsldoi_4si\", ALTIVEC_BUILTIN_VSLDOI_4SI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_4sf, \"__builtin_altivec_vsldoi_4sf\", ALTIVEC_BUILTIN_VSLDOI_4SF },\n+};\n \n /* Simple binary operations: VECc = foo (VECa, VECb).  */\n+\n static const struct builtin_description bdesc_2arg[] =\n {\n   { MASK_ALTIVEC, CODE_FOR_addv16qi3, \"__builtin_altivec_vaddubm\", ALTIVEC_BUILTIN_VADDUBM },\n@@ -3322,8 +3329,10 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n   { MASK_ALTIVEC, CODE_FOR_xorv4si3, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n };\n+\n /* Simple unary operations: VECb = foo (unsigned literal) or VECb =\n    foo (VECa).  */\n+\n static const struct builtin_description bdesc_1arg[] =\n {\n   { MASK_ALTIVEC, CODE_FOR_altivec_vexptefp, \"__builtin_altivec_vexptefp\", ALTIVEC_BUILTIN_VEXPTEFP },\n@@ -3472,6 +3481,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return target;\n+\n     case ALTIVEC_BUILTIN_LD_INTERNAL_8hi:\n       icode = CODE_FOR_altivec_lvx_8hi;\n       arg0 = TREE_VALUE (arglist);\n@@ -3492,6 +3502,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return target;\n+\n     case ALTIVEC_BUILTIN_LD_INTERNAL_4si:\n       icode = CODE_FOR_altivec_lvx_4si;\n       arg0 = TREE_VALUE (arglist);\n@@ -3512,6 +3523,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return target;\n+\n     case ALTIVEC_BUILTIN_LD_INTERNAL_4sf:\n       icode = CODE_FOR_altivec_lvx_4sf;\n       arg0 = TREE_VALUE (arglist);\n@@ -3552,6 +3564,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return NULL_RTX;\n+\n     case ALTIVEC_BUILTIN_ST_INTERNAL_8hi:\n       icode = CODE_FOR_altivec_stvx_8hi;\n       arg0 = TREE_VALUE (arglist);\n@@ -3571,6 +3584,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return NULL_RTX;\n+\n     case ALTIVEC_BUILTIN_ST_INTERNAL_4si:\n       icode = CODE_FOR_altivec_stvx_4si;\n       arg0 = TREE_VALUE (arglist);\n@@ -3590,6 +3604,7 @@ altivec_expand_builtin (exp, target)\n \treturn 0;\n       emit_insn (pat);\n       return NULL_RTX;\n+\n     case ALTIVEC_BUILTIN_ST_INTERNAL_4sf:\n       icode = CODE_FOR_altivec_stvx_4sf;\n       arg0 = TREE_VALUE (arglist);\n@@ -3610,6 +3625,7 @@ altivec_expand_builtin (exp, target)\n       emit_insn (pat);\n       return NULL_RTX;\n     }\n+\n   /* Handle simple unary operations.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n@@ -3700,21 +3716,21 @@ altivec_init_builtins (void)\n \t\t\t\t\t\t\t    V16QI_type_node,\n \t\t\t\t\t\t\t    endlink))));\n \n-  /* V4SI foo (char) */\n+  /* V4SI foo (char).  */\n   tree v4si_ftype_char\n     = build_function_type (V4SI_type_node,\n \t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n \n-  /* V8HI foo (char) */\n+  /* V8HI foo (char).  */\n   tree v8hi_ftype_char\n     = build_function_type (V8HI_type_node,\n \t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n \n-  /* V16QI foo (char) */\n+  /* V16QI foo (char).  */\n   tree v16qi_ftype_char\n     = build_function_type (V16QI_type_node,\n \t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n-  /* V4SF foo (V4SF) */\n+  /* V4SF foo (V4SF).  */\n   tree v4sf_ftype_v4sf\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node, endlink));\n@@ -3766,7 +3782,9 @@ altivec_init_builtins (void)\n \t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n \t\t\t\t\t\t endlink)));\n- /* These are really for the unsigned 5 bit literals */ \n+\n+  /* These are for the unsigned 5 bit literals.  */\n+\n   tree v4sf_ftype_v4si_char\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n@@ -3793,6 +3811,42 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, char_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* These are for the unsigned 4 bit literals.  */\n+\n+  tree v16qi_ftype_v16qi_v16qi_char\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree v8hi_ftype_v8hi_v8hi_char\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree v4si_ftype_v4si_v4si_char\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree v4sf_ftype_v4sf_v4sf_char\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  /* End of 4 bit literals.  */\n+\n   tree v4sf_ftype_v4sf_v4sf\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n@@ -3987,13 +4041,34 @@ altivec_init_builtins (void)\n \t}\n       else if (mode0 == V4SImode && mode1 == V16QImode && mode2 == V16QImode \n \t       && mode3 == V4SImode)\n-\t  type = v4si_ftype_v16qi_v16qi_v4si;\n+\ttype = v4si_ftype_v16qi_v16qi_v4si;\n       else if (mode0 == V4SImode && mode1 == V8HImode && mode2 == V8HImode \n \t       && mode3 == V4SImode)\n-\t  type = v4si_ftype_v8hi_v8hi_v4si;\n+\ttype = v4si_ftype_v8hi_v8hi_v4si;\n       else if (mode0 == V4SFmode && mode1 == V4SFmode && mode2 == V4SFmode \n \t       && mode3 == V4SImode)\n-\t  type = v4sf_ftype_v4sf_v4sf_v4si;\n+\ttype = v4sf_ftype_v4sf_v4sf_v4si;\n+\n+      /* vchar, vchar, vchar, 4 bit literal.  */\n+      else if (mode0 == V16QImode && mode1 == mode0 && mode2 == mode0\n+\t       && mode3 == QImode)\n+\ttype = v16qi_ftype_v16qi_v16qi_char;\n+\n+      /* vshort, vshort, vshort, 4 bit literal.  */\n+      else if (mode0 == V8HImode && mode1 == mode0 && mode2 == mode0\n+\t       && mode3 == QImode)\n+\ttype = v8hi_ftype_v8hi_v8hi_char;\n+\n+      /* vint, vint, vint, 4 bit literal.  */\n+      else if (mode0 == V4SImode && mode1 == mode0 && mode2 == mode0\n+\t       && mode3 == QImode)\n+\ttype = v4si_ftype_v4si_v4si_char;\n+\n+      /* vfloat, vfloat, vfloat, 4 bit literal.  */\n+      else if (mode0 == V4SFmode && mode1 == mode0 && mode2 == mode0\n+\t       && mode3 == QImode)\n+\ttype = v4sf_ftype_v4sf_v4sf_char;\n+\n       else\n \tabort ();\n \n@@ -4086,7 +4161,6 @@ altivec_init_builtins (void)\n       else if (mode0 == V4SImode && mode1 == V4SFmode && mode2 == QImode)\n \ttype = v4si_ftype_v4sf_char;\n \n-      /* fixme: aldyh */\n       /* int, x, x.  */\n       else if (mode0 == SImode)\n \t{\n@@ -4114,6 +4188,7 @@ altivec_init_builtins (void)\n \n       def_builtin (d->mask, d->name, type, d->code);\n     }\n+\n   /* Add the simple unary operators.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)"}, {"sha": "4f69d4f487f43ad4e1d605a9745a55ffa0b7c637", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=24408032e71c23139cdc2c5c200098e3b76b08ed", "patch": "@@ -2948,5 +2948,9 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VSUM4SHS,\n   ALTIVEC_BUILTIN_VSUM2SWS,\n   ALTIVEC_BUILTIN_VSUMSWS,\n-  ALTIVEC_BUILTIN_VXOR\n+  ALTIVEC_BUILTIN_VXOR,\n+  ALTIVEC_BUILTIN_VSLDOI_16QI,\n+  ALTIVEC_BUILTIN_VSLDOI_8HI,\n+  ALTIVEC_BUILTIN_VSLDOI_4SI,\n+  ALTIVEC_BUILTIN_VSLDOI_4SF\n };"}, {"sha": "be1a141dbffc08bd1aadb80926dbbeb4f3729747", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24408032e71c23139cdc2c5c200098e3b76b08ed/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=24408032e71c23139cdc2c5c200098e3b76b08ed", "patch": "@@ -15191,4 +15191,38 @@\n   \"vsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"altivec_vsldoi_4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v\")\n+                      (match_operand:QI 3 \"immediate_operand\" \"i\")] 163))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsldoi %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vsldoi_4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\")\n+                      (match_operand:QI 3 \"immediate_operand\" \"i\")] 164))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsldoi %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"altivec_vsldoi_8hi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:QI 3 \"immediate_operand\" \"i\")] 165))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsldoi %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vsldoi_16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:QI 3 \"immediate_operand\" \"i\")] 166))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsldoi %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"vecperm\")])"}]}