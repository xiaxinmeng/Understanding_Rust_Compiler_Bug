{"sha": "570c312c03e151477505c8b70b25411e52751ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwYzMxMmMwM2UxNTE0Nzc1MDVjOGI3MGIyNTQxMWU1Mjc1MWZmNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T20:34:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T20:38:04Z"}, "message": "c++: Originating and instantiating module\n\nWith modules streamed entities have two new properties -- the module\nthat declares them and the module that instantiates them.  Here\n'instantiate' applies to more than just templates -- for instance an\nimplicit member fn.  These may well be the same module.  This adds the\ncalls to places that need it.\n\n\tgcc/cp/\n\t* class.c (layout_class_type): Call set_instantiating_module.\n\t(build_self_reference): Likewise.\n\t* decl.c (grokfndecl): Call set_originating_module.\n\t(grokvardecl): Likewise.\n\t(grokdeclarator): Likewise.\n\t* pt.c (maybe_new_partial_specialization): Call\n\tset_instantiating_module, propagate DECL_MODULE_EXPORT_P.\n\t(lookup_template_class_1): Likewise.\n\t(tsubst_function_decl): Likewise.\n\t(tsubst_decl, instantiate_template_1): Likewise.\n\t(build_template_decl): Propagate module flags.\n\t(tsubst_template_dcl): Likewise.\n\t(finish_concept_definition): Call set_originating_module.\n\t* module.cc (set_instantiating_module, set_originating_module): Stubs.", "tree": {"sha": "1ef81534a0ef09c89cfe29dfcb6f55d873e3ded2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef81534a0ef09c89cfe29dfcb6f55d873e3ded2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/570c312c03e151477505c8b70b25411e52751ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570c312c03e151477505c8b70b25411e52751ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570c312c03e151477505c8b70b25411e52751ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570c312c03e151477505c8b70b25411e52751ff4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed1dc1275bba89af92bfc7d97c21b376e4c29c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed1dc1275bba89af92bfc7d97c21b376e4c29c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed1dc1275bba89af92bfc7d97c21b376e4c29c3"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "bc0d3d6bf8624654b02e0b71e7c1edf69a931452", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=570c312c03e151477505c8b70b25411e52751ff4", "patch": "@@ -6759,6 +6759,8 @@ layout_class_type (tree t, tree *virtuals_p)\n       TYPE_CONTEXT (base_t) = t;\n       DECL_CONTEXT (base_d) = t;\n \n+      set_instantiating_module (base_d);\n+\n       /* If the ABI version is not at least two, and the last\n \t field was a bit-field, RLI may not be on a byte\n \t boundary.  In particular, rli_size_unit_so_far might\n@@ -8738,6 +8740,7 @@ build_self_reference (void)\n   DECL_ARTIFICIAL (decl) = 1;\n   SET_DECL_SELF_REFERENCE_P (decl);\n   set_underlying_type (decl);\n+  set_instantiating_module (decl);  \n \n   if (processing_template_decl)\n     decl = push_template_decl (decl);"}, {"sha": "bb5bb2f1a18cf148df85c734920b52aed6652d47", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=570c312c03e151477505c8b70b25411e52751ff4", "patch": "@@ -9878,6 +9878,8 @@ grokfndecl (tree ctype,\n       && !processing_template_decl)\n     deduce_noexcept_on_destructor (decl);\n \n+  set_originating_module (decl);\n+\n   decl = check_explicit_specialization (orig_declarator, decl,\n \t\t\t\t\ttemplate_count,\n \t\t\t\t\t2 * funcdef_flag +\n@@ -10122,6 +10124,8 @@ grokvardecl (tree type,\n       TREE_PUBLIC (decl) = DECL_EXTERNAL (decl);\n     }\n \n+  set_originating_module (decl);\n+\n   if (decl_spec_seq_has_spec_p (declspecs, ds_thread))\n     {\n       if (DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n@@ -12965,6 +12969,8 @@ grokdeclarator (const cp_declarator *declarator,\n                revert this subsequently if it determines that\n                the clones should share a common implementation.  */\n \t    DECL_ABSTRACT_P (decl) = true;\n+\n+\t  set_originating_module (decl);\n \t}\n       else if (current_class_type\n \t       && constructor_name_p (unqualified_id, current_class_type))\n@@ -13499,6 +13505,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t      ;  /* We already issued a permerror.  */\n \t    else if (decl && DECL_NAME (decl))\n \t      {\n+\t\tset_originating_module (decl, true);\n+\t\t\n \t\tif (initialized)\n \t\t  /* Kludge: We need funcdef_flag to be true in do_friend for\n \t\t     in-class defaulted functions, but that breaks grokfndecl."}, {"sha": "948ca2a6cabbe8fc21573b42622b3e18b95b588e", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=570c312c03e151477505c8b70b25411e52751ff4", "patch": "@@ -99,6 +99,16 @@ get_originating_module (tree, bool)\n   return 0;\n }\n \n+void\n+set_instantiating_module (tree)\n+{\n+}\n+\n+void\n+set_originating_module (tree, bool)\n+{\n+}\n+\n module_state *\n preprocess_module (module_state *, unsigned, bool, bool, bool, cpp_reader *)\n {"}, {"sha": "6b8e486a642c75f74025aac363f66f98db17a911", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570c312c03e151477505c8b70b25411e52751ff4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=570c312c03e151477505c8b70b25411e52751ff4", "patch": "@@ -960,6 +960,9 @@ maybe_new_partial_specialization (tree type)\n       TREE_PRIVATE (d) = (current_access_specifier == access_private_node);\n       TREE_PROTECTED (d) = (current_access_specifier == access_protected_node);\n \n+      set_instantiating_module (d);\n+      DECL_MODULE_EXPORT_P (d) = DECL_MODULE_EXPORT_P (tmpl);\n+\n       return t;\n     }\n \n@@ -4922,6 +4925,17 @@ build_template_decl (tree decl, tree parms, bool member_template_p)\n   DECL_SOURCE_LOCATION (tmpl) = DECL_SOURCE_LOCATION (decl);\n   DECL_MEMBER_TEMPLATE_P (tmpl) = member_template_p;\n \n+  if (modules_p ())\n+    {\n+      /* Propagate module information from the decl.  */\n+      DECL_MODULE_EXPORT_P (tmpl) = DECL_MODULE_EXPORT_P (decl);\n+      if (DECL_LANG_SPECIFIC (decl))\n+\t{\n+\t  DECL_MODULE_PURVIEW_P (tmpl) = DECL_MODULE_PURVIEW_P (decl);\n+\t  gcc_checking_assert (!DECL_MODULE_IMPORT_P (decl));\n+\t}\n+    }\n+\n   return tmpl;\n }\n \n@@ -9994,6 +10008,12 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t    = DECL_SOURCE_LOCATION (TYPE_STUB_DECL (template_type));\n \t}\n \n+      set_instantiating_module (type_decl);\n+      /* Although GEN_TMPL is the TEMPLATE_DECL, it has the same value\n+\t of export flag.  We want to propagate this because it might\n+\t be a friend declaration that pushes a new hidden binding.  */\n+      DECL_MODULE_EXPORT_P (type_decl) = DECL_MODULE_EXPORT_P (gen_tmpl);\n+\n       if (CLASS_TYPE_P (template_type))\n \t{\n \t  TREE_PRIVATE (type_decl)\n@@ -13912,6 +13932,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n   if (!DECL_DELETED_FN (r))\n     DECL_INITIAL (r) = NULL_TREE;\n   DECL_CONTEXT (r) = ctx;\n+  set_instantiating_module (r);\n \n   /* Handle explicit(dependent-expr).  */\n   if (DECL_HAS_DEPENDENT_EXPLICIT_SPEC_P (t))\n@@ -14235,6 +14256,24 @@ tsubst_template_decl (tree t, tree args, tsubst_flags_t complain,\n   TREE_TYPE (r) = TREE_TYPE (inner);\n   DECL_CONTEXT (r) = DECL_CONTEXT (inner);\n \n+  if (modules_p ())\n+    {\n+      /* Propagate module information from the decl.  */\n+      DECL_MODULE_EXPORT_P (r) = DECL_MODULE_EXPORT_P (inner);\n+      if (DECL_LANG_SPECIFIC (inner))\n+\t{\n+\t  DECL_MODULE_PURVIEW_P (r) = DECL_MODULE_PURVIEW_P (inner);\n+\t  /* If this is a constrained template, the above tsubst of\n+\t     inner can find the unconstrained template, which may have\n+\t     come from an import.  This is ok, because we don't\n+\t     register this instantiation (see below).  */\n+\t  gcc_checking_assert (!DECL_MODULE_IMPORT_P (inner)\n+\t\t\t       || (TEMPLATE_PARMS_CONSTRAINTS\n+\t\t\t\t   (DECL_TEMPLATE_PARMS (t))));\n+\t  DECL_MODULE_IMPORT_P (r) = false;\n+\t}\n+    }\n+\n   DECL_TEMPLATE_INSTANTIATIONS (r) = NULL_TREE;\n   DECL_TEMPLATE_SPECIALIZATIONS (r) = NULL_TREE;\n \n@@ -14789,6 +14828,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tSET_DECL_ASSEMBLER_NAME (r, NULL_TREE);\n \tif (CODE_CONTAINS_STRUCT (TREE_CODE (t), TS_DECL_WRTL))\n \t  SET_DECL_RTL (r, NULL);\n+\tset_instantiating_module (r);\n+\n \t/* The initializer must not be expanded until it is required;\n \t   see [temp.inst].  */\n \tDECL_INITIAL (r) = NULL_TREE;\n@@ -20951,6 +20992,8 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n   DECL_TI_TEMPLATE (fndecl) = tmpl;\n   DECL_TI_ARGS (fndecl) = targ_ptr;\n \n+  set_instantiating_module (fndecl);\n+\n   /* Now we know the specialization, compute access previously\n      deferred.  Do no access control for inheriting constructors,\n      as we already checked access for the inherited constructor.  */\n@@ -28037,6 +28080,8 @@ finish_concept_definition (cp_expr id, tree init)\n   DECL_CONTEXT (decl) = current_scope ();\n   DECL_INITIAL (decl) = init;\n \n+  set_originating_module (decl, false);\n+\n   /* Push the enclosing template.  */\n   return push_template_decl (decl);\n }"}]}