{"sha": "199867d07be65cb0227a318ebf42b8376ca09313", "node_id": "C_kwDOANBUbNoAKDE5OTg2N2QwN2JlNjVjYjAyMjdhMzE4ZWJmNDJiODM3NmNhMDkzMTM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-02-27T11:02:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-03-10T14:48:43Z"}, "message": "Simplify OpenACC 'no_create' clause implementation\n\nFor 'OFFSET_INLINED', 'gomp_map_val' does the right thing, and we may then\nsimplify the device plugins accordingly.\n\nThis is a follow-up to\nSubversion r279551 (Git commit a6163563f2ce502bd4ef444bd5de33570bb8eeb1)\n\"Add OpenACC 2.6's no_create\",\nSubversion r279622 (Git commit 5bcd470bf0749e1f56d05dd43aa9584ff2e3a090)\n\"Use gomp_map_val for OpenACC host-to-device address translation\".\n\n\tlibgomp/\n\t* target.c (gomp_map_vars_internal): Use 'OFFSET_INLINED' for\n\t'GOMP_MAP_IF_PRESENT'.\n\t* plugin/plugin-gcn.c (gcn_exec, GOMP_OFFLOAD_openacc_exec)\n\t(GOMP_OFFLOAD_openacc_async_exec): Adjust.\n\t* plugin/plugin-nvptx.c (nvptx_exec, GOMP_OFFLOAD_openacc_exec)\n\t(GOMP_OFFLOAD_openacc_async_exec): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/no_create-1.c: Add 'async'\n\ttesting.\n\t* testsuite/libgomp.oacc-c-c++-common/no_create-2.c: Likewise.", "tree": {"sha": "9e1955c9f2beff346cf80dd2aec1daabebd406fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1955c9f2beff346cf80dd2aec1daabebd406fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199867d07be65cb0227a318ebf42b8376ca09313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199867d07be65cb0227a318ebf42b8376ca09313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199867d07be65cb0227a318ebf42b8376ca09313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199867d07be65cb0227a318ebf42b8376ca09313/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5037d4a073f2e4625afab5ec1f35624d9f9eba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5037d4a073f2e4625afab5ec1f35624d9f9eba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5037d4a073f2e4625afab5ec1f35624d9f9eba1"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "954a140ba5e1c9112989e93c72190b6d349573ab", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=199867d07be65cb0227a318ebf42b8376ca09313", "patch": "@@ -3064,7 +3064,7 @@ wait_queue (struct goacc_asyncqueue *aq)\n /* Execute an OpenACC kernel, synchronously or asynchronously.  */\n \n static void\n-gcn_exec (struct kernel_info *kernel, size_t mapnum, void **hostaddrs,\n+gcn_exec (struct kernel_info *kernel, size_t mapnum,\n \t  void **devaddrs, unsigned *dims, void *targ_mem_desc, bool async,\n \t  struct goacc_asyncqueue *aq)\n {\n@@ -3077,9 +3077,7 @@ gcn_exec (struct kernel_info *kernel, size_t mapnum, void **hostaddrs,\n   /* devaddrs must be double-indirect on the target.  */\n   void **ind_da = alloc_by_agent (kernel->agent, sizeof (void*) * mapnum);\n   for (size_t i = 0; i < mapnum; i++)\n-    hsa_fns.hsa_memory_copy_fn (&ind_da[i],\n-\t\t\t\tdevaddrs[i] ? &devaddrs[i] : &hostaddrs[i],\n-\t\t\t\tsizeof (void *));\n+    hsa_fns.hsa_memory_copy_fn (&ind_da[i], &devaddrs[i], sizeof (void *));\n \n   struct hsa_kernel_description *hsa_kernel_desc = NULL;\n   for (unsigned i = 0; i < kernel->module->image_desc->kernel_count; i++)\n@@ -3887,27 +3885,27 @@ GOMP_OFFLOAD_async_run (int device, void *tgt_fn, void *tgt_vars,\n \n void\n GOMP_OFFLOAD_openacc_exec (void (*fn_ptr) (void *), size_t mapnum,\n-\t\t\t   void **hostaddrs, void **devaddrs, unsigned *dims,\n+\t\t\t   void **hostaddrs __attribute__((unused)),\n+\t\t\t   void **devaddrs, unsigned *dims,\n \t\t\t   void *targ_mem_desc)\n {\n   struct kernel_info *kernel = (struct kernel_info *) fn_ptr;\n \n-  gcn_exec (kernel, mapnum, hostaddrs, devaddrs, dims, targ_mem_desc, false,\n-\t    NULL);\n+  gcn_exec (kernel, mapnum, devaddrs, dims, targ_mem_desc, false, NULL);\n }\n \n /* Run an asynchronous OpenACC kernel on the specified queue.  */\n \n void\n GOMP_OFFLOAD_openacc_async_exec (void (*fn_ptr) (void *), size_t mapnum,\n-\t\t\t\t void **hostaddrs, void **devaddrs,\n+\t\t\t\t void **hostaddrs __attribute__((unused)),\n+\t\t\t\t void **devaddrs,\n \t\t\t\t unsigned *dims, void *targ_mem_desc,\n \t\t\t\t struct goacc_asyncqueue *aq)\n {\n   struct kernel_info *kernel = (struct kernel_info *) fn_ptr;\n \n-  gcn_exec (kernel, mapnum, hostaddrs, devaddrs, dims, targ_mem_desc, true,\n-\t    aq);\n+  gcn_exec (kernel, mapnum, devaddrs, dims, targ_mem_desc, true, aq);\n }\n \n /* Create a new asynchronous thread and queue for running future kernels.  */"}, {"sha": "13e31156d362aca27ffab13dedf94afadba5b455", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=199867d07be65cb0227a318ebf42b8376ca09313", "patch": "@@ -742,8 +742,7 @@ link_ptx (CUmodule *module, const struct targ_ptx_obj *ptx_objs,\n }\n \n static void\n-nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n-\t    unsigned *dims, void *targ_mem_desc,\n+nvptx_exec (void (*fn), size_t mapnum, unsigned *dims, void *targ_mem_desc,\n \t    CUdeviceptr dp, CUstream stream)\n {\n   struct targ_fn_descriptor *targ_fn = (struct targ_fn_descriptor *) fn;\n@@ -1530,7 +1529,8 @@ GOMP_OFFLOAD_free (int ord, void *ptr)\n \n void\n GOMP_OFFLOAD_openacc_exec (void (*fn) (void *), size_t mapnum,\n-\t\t\t   void **hostaddrs, void **devaddrs,\n+\t\t\t   void **hostaddrs __attribute__((unused)),\n+\t\t\t   void **devaddrs,\n \t\t\t   unsigned *dims, void *targ_mem_desc)\n {\n   GOMP_PLUGIN_debug (0, \"  %s: prepare mappings\\n\", __FUNCTION__);\n@@ -1549,7 +1549,7 @@ GOMP_OFFLOAD_openacc_exec (void (*fn) (void *), size_t mapnum,\n       size_t s = mapnum * sizeof (void *);\n       hp = alloca (s);\n       for (int i = 0; i < mapnum; i++)\n-\thp[i] = (devaddrs[i] ? devaddrs[i] : hostaddrs[i]);\n+\thp[i] = devaddrs[i];\n       CUDA_CALL_ASSERT (cuMemAlloc, &dp, s);\n       if (profiling_p)\n \tgoacc_profiling_acc_ev_alloc (thr, (void *) dp, s);\n@@ -1591,8 +1591,7 @@ GOMP_OFFLOAD_openacc_exec (void (*fn) (void *), size_t mapnum,\n \t}\n     }\n \n-  nvptx_exec (fn, mapnum, hostaddrs, devaddrs, dims, targ_mem_desc,\n-\t      dp, NULL);\n+  nvptx_exec (fn, mapnum, dims, targ_mem_desc, dp, NULL);\n \n   CUresult r = CUDA_CALL_NOCHECK (cuStreamSynchronize, NULL);\n   const char *maybe_abort_msg = \"(perhaps abort was called)\";\n@@ -1617,7 +1616,8 @@ cuda_free_argmem (void *ptr)\n \n void\n GOMP_OFFLOAD_openacc_async_exec (void (*fn) (void *), size_t mapnum,\n-\t\t\t\t void **hostaddrs, void **devaddrs,\n+\t\t\t\t void **hostaddrs __attribute__((unused)),\n+\t\t\t\t void **devaddrs,\n \t\t\t\t unsigned *dims, void *targ_mem_desc,\n \t\t\t\t struct goacc_asyncqueue *aq)\n {\n@@ -1639,7 +1639,7 @@ GOMP_OFFLOAD_openacc_async_exec (void (*fn) (void *), size_t mapnum,\n       block = (void **) GOMP_PLUGIN_malloc (2 * sizeof (void *) + s);\n       hp = block + 2;\n       for (int i = 0; i < mapnum; i++)\n-\thp[i] = (devaddrs[i] ? devaddrs[i] : hostaddrs[i]);\n+\thp[i] = devaddrs[i];\n       CUDA_CALL_ASSERT (cuMemAlloc, &dp, s);\n       if (profiling_p)\n \tgoacc_profiling_acc_ev_alloc (thr, (void *) dp, s);\n@@ -1688,8 +1688,7 @@ GOMP_OFFLOAD_openacc_async_exec (void (*fn) (void *), size_t mapnum,\n \t}\n     }\n \n-  nvptx_exec (fn, mapnum, hostaddrs, devaddrs, dims, targ_mem_desc,\n-\t      dp, aq->cuda_stream);\n+  nvptx_exec (fn, mapnum, dims, targ_mem_desc, dp, aq->cuda_stream);\n \n   if (mapnum > 0)\n     GOMP_OFFLOAD_openacc_async_queue_callback (aq, cuda_free_argmem, block);"}, {"sha": "0344f68a936025b2fb8a140fe64c8f9b58d43051", "filename": "libgomp/target.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=199867d07be65cb0227a318ebf42b8376ca09313", "patch": "@@ -1207,7 +1207,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t    {\n \t      /* Not present, hence, skip entry - including its MAP_POINTER,\n \t\t when existing.  */\n-\t      tgt->list[i].offset = OFFSET_POINTER;\n+\t      tgt->list[i].offset = OFFSET_INLINED;\n \t      if (i + 1 < mapnum\n \t\t  && ((typemask & get_kind (short_mapkind, kinds, i + 1))\n \t\t      == GOMP_MAP_POINTER))"}, {"sha": "05297d3a2800d212d5459601e739b74ba528472c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-1.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c?ref=199867d07be65cb0227a318ebf42b8376ca09313", "patch": "@@ -22,15 +22,10 @@ main (int argc, char *argv[])\n     devptr[0] = &var;\n     devptr[1] = &arr[2];\n   }\n-\n   if (acc_hostptr (devptr[0]) != (void *) &var)\n     __builtin_abort ();\n   if (acc_hostptr (devptr[1]) != (void *) &arr[2])\n     __builtin_abort ();\n-\n-  acc_delete (&var, sizeof (var));\n-  acc_delete (arr, N * sizeof (*arr));\n-\n #if ACC_MEM_SHARED\n   if (devptr[0] != &var)\n     __builtin_abort ();\n@@ -43,6 +38,31 @@ main (int argc, char *argv[])\n     __builtin_abort ();\n #endif\n \n+#pragma acc parallel no_create(var, arr[0:N]) copyout(devptr) async\n+  {\n+    devptr[0] = &arr[N - 2];\n+    devptr[1] = &var;\n+  }\n+#pragma acc wait\n+  if (acc_hostptr (devptr[0]) != (void *) &arr[N - 2])\n+    __builtin_abort ();\n+  if (acc_hostptr (devptr[1]) != (void *) &var)\n+    __builtin_abort ();\n+#if ACC_MEM_SHARED\n+  if (devptr[0] != &arr[N - 2])\n+    __builtin_abort ();\n+  if (devptr[1] != &var)\n+    __builtin_abort ();\n+#else\n+  if (devptr[0] == &arr[N - 2])\n+    __builtin_abort ();\n+  if (devptr[1] == &var)\n+    __builtin_abort ();\n+#endif\n+\n+  acc_delete (&var, sizeof (var));\n+  acc_delete (arr, N * sizeof (*arr));\n+\n   free (arr);\n \n   return 0;"}, {"sha": "202092fe8a83335c1458cbc16f6703693a5af630", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199867d07be65cb0227a318ebf42b8376ca09313/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c?ref=199867d07be65cb0227a318ebf42b8376ca09313", "patch": "@@ -18,12 +18,22 @@ main (int argc, char *argv[])\n     devptr[0] = &var;\n     devptr[1] = &arr[2];\n   }\n-\n   if (devptr[0] != &var)\n     __builtin_abort ();\n   if (devptr[1] != &arr[2])\n     __builtin_abort ();\n \n+#pragma acc parallel no_create(var, arr[0:N]) copyout(devptr) async\n+  {\n+    devptr[0] = &arr[N - 2];\n+    devptr[1] = &var;\n+  }\n+#pragma acc wait\n+  if (devptr[0] != &arr[N - 2])\n+    __builtin_abort ();\n+  if (devptr[1] != &var)\n+    __builtin_abort ();\n+\n   free (arr);\n \n   return 0;"}]}