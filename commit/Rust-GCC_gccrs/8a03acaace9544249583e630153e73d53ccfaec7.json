{"sha": "8a03acaace9544249583e630153e73d53ccfaec7", "node_id": "C_kwDOANBUbNoAKDhhMDNhY2FhY2U5NTQ0MjQ5NTgzZTYzMDE1M2U3M2Q1M2NjZmFlYzc", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-04-13T16:27:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:31Z"}, "message": "[Ada] Wrong interface dynamic dispatch via access parameter\n\nWhen the prefix of an Access attribute is an explicit dereference of an\naccess parameter (or a renaming of such a dereference, or a subcomponent\nof such a dereference), the context is a general access type to a\nclass-wide interface type, and an accessibility check must be generated,\nthe frontend silently skips generating an implicit type conversion to\nforce the displacement of the pointer to reference the secondary\ndispatch table.\n\ngcc/ada/\n\n\t* exp_attr.adb (Add_Implicit_Interface_Type_Conversion): New\n\tsubprogram which factorizes code.\n\t(Expand_N_Attribute_Reference): Call the new subprogram to add\n\tthe missing implicit interface type conversion.", "tree": {"sha": "f7895b37741485d2512a7eaafc7f919a3e40b203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7895b37741485d2512a7eaafc7f919a3e40b203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a03acaace9544249583e630153e73d53ccfaec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a03acaace9544249583e630153e73d53ccfaec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a03acaace9544249583e630153e73d53ccfaec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a03acaace9544249583e630153e73d53ccfaec7/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff70bcc1f1e808e3cc253a8452b7849329d549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff70bcc1f1e808e3cc253a8452b7849329d549a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff70bcc1f1e808e3cc253a8452b7849329d549a"}], "stats": {"total": 136, "additions": 84, "deletions": 52}, "files": [{"sha": "ad7545353e37f32fe3f5684bb782f0ebbedf8c4f", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 84, "deletions": 52, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a03acaace9544249583e630153e73d53ccfaec7/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a03acaace9544249583e630153e73d53ccfaec7/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=8a03acaace9544249583e630153e73d53ccfaec7", "patch": "@@ -2108,12 +2108,86 @@ package body Exp_Attr is\n             Ref_Object : constant Node_Id := Get_Referenced_Object (Pref);\n             Btyp_DDT   : Entity_Id;\n \n+            procedure Add_Implicit_Interface_Type_Conversion;\n+            --  Ada 2005 (AI-251): The designated type is an interface type;\n+            --  add an implicit type conversion to force the displacement of\n+            --  the pointer to reference the secondary dispatch table.\n+\n             function Enclosing_Object (N : Node_Id) return Node_Id;\n             --  If N denotes a compound name (selected component, indexed\n             --  component, or slice), returns the name of the outermost such\n             --  enclosing object. Otherwise returns N. If the object is a\n             --  renaming, then the renamed object is returned.\n \n+            --------------------------------------------\n+            -- Add_Implicit_Interface_Type_Conversion --\n+            --------------------------------------------\n+\n+            procedure Add_Implicit_Interface_Type_Conversion is\n+            begin\n+               pragma Assert (Is_Interface (Btyp_DDT));\n+\n+               --  Handle cases were no action is required.\n+\n+               if not Comes_From_Source (N)\n+                 and then not Comes_From_Source (Ref_Object)\n+                 and then (Nkind (Ref_Object) not in N_Has_Chars\n+                             or else Chars (Ref_Object) /= Name_uInit)\n+               then\n+                  return;\n+               end if;\n+\n+               --  Common case\n+\n+               if Nkind (Ref_Object) /= N_Explicit_Dereference then\n+\n+                  --  No implicit conversion required if types match, or if\n+                  --  the prefix is the class_wide_type of the interface. In\n+                  --  either case passing an object of the interface type has\n+                  --  already set the pointer correctly.\n+\n+                  if Btyp_DDT = Etype (Ref_Object)\n+                    or else\n+                      (Is_Class_Wide_Type (Etype (Ref_Object))\n+                         and then\n+                       Class_Wide_Type (Btyp_DDT) = Etype (Ref_Object))\n+                  then\n+                     null;\n+\n+                  else\n+                     Rewrite (Prefix (N),\n+                       Convert_To (Btyp_DDT,\n+                         New_Copy_Tree (Prefix (N))));\n+\n+                     Analyze_And_Resolve (Prefix (N), Btyp_DDT);\n+                  end if;\n+\n+               --  When the object is an explicit dereference, convert the\n+               --  dereference's prefix.\n+\n+               else\n+                  declare\n+                     Obj_DDT : constant Entity_Id :=\n+                                 Base_Type\n+                                   (Directly_Designated_Type\n+                                     (Etype (Prefix (Ref_Object))));\n+                  begin\n+                     --  No implicit conversion required if designated types\n+                     --  match.\n+\n+                     if Obj_DDT /= Btyp_DDT\n+                       and then not (Is_Class_Wide_Type (Obj_DDT)\n+                                      and then Etype (Obj_DDT) = Btyp_DDT)\n+                     then\n+                        Rewrite (N,\n+                          Convert_To (Typ,\n+                            New_Copy_Tree (Prefix (Ref_Object))));\n+                        Analyze_And_Resolve (N, Typ);\n+                     end if;\n+                  end;\n+               end if;\n+            end Add_Implicit_Interface_Type_Conversion;\n+\n             ----------------------\n             -- Enclosing_Object --\n             ----------------------\n@@ -2398,62 +2472,20 @@ package body Exp_Attr is\n             then\n                Apply_Accessibility_Check (Prefix (Enc_Object), Typ, N);\n \n+               --  Ada 2005 (AI-251): If the designated type is an interface we\n+               --  add an implicit conversion to force the displacement of the\n+               --  pointer to reference the secondary dispatch table.\n+\n+               if Is_Interface (Btyp_DDT) then\n+                  Add_Implicit_Interface_Type_Conversion;\n+               end if;\n+\n             --  Ada 2005 (AI-251): If the designated type is an interface we\n             --  add an implicit conversion to force the displacement of the\n             --  pointer to reference the secondary dispatch table.\n \n-            elsif Is_Interface (Btyp_DDT)\n-              and then (Comes_From_Source (N)\n-                         or else Comes_From_Source (Ref_Object)\n-                         or else (Nkind (Ref_Object) in N_Has_Chars\n-                                   and then Chars (Ref_Object) = Name_uInit))\n-            then\n-               if Nkind (Ref_Object) /= N_Explicit_Dereference then\n-\n-                  --  No implicit conversion required if types match, or if\n-                  --  the prefix is the class_wide_type of the interface. In\n-                  --  either case passing an object of the interface type has\n-                  --  already set the pointer correctly.\n-\n-                  if Btyp_DDT = Etype (Ref_Object)\n-                    or else (Is_Class_Wide_Type (Etype (Ref_Object))\n-                              and then\n-                               Class_Wide_Type (Btyp_DDT) = Etype (Ref_Object))\n-                  then\n-                     null;\n-\n-                  else\n-                     Rewrite (Prefix (N),\n-                       Convert_To (Btyp_DDT,\n-                         New_Copy_Tree (Prefix (N))));\n-\n-                     Analyze_And_Resolve (Prefix (N), Btyp_DDT);\n-                  end if;\n-\n-               --  When the object is an explicit dereference, convert the\n-               --  dereference's prefix.\n-\n-               else\n-                  declare\n-                     Obj_DDT : constant Entity_Id :=\n-                                 Base_Type\n-                                   (Directly_Designated_Type\n-                                     (Etype (Prefix (Ref_Object))));\n-                  begin\n-                     --  No implicit conversion required if designated types\n-                     --  match.\n-\n-                     if Obj_DDT /= Btyp_DDT\n-                       and then not (Is_Class_Wide_Type (Obj_DDT)\n-                                      and then Etype (Obj_DDT) = Btyp_DDT)\n-                     then\n-                        Rewrite (N,\n-                          Convert_To (Typ,\n-                            New_Copy_Tree (Prefix (Ref_Object))));\n-                        Analyze_And_Resolve (N, Typ);\n-                     end if;\n-                  end;\n-               end if;\n+            elsif Is_Interface (Btyp_DDT) then\n+               Add_Implicit_Interface_Type_Conversion;\n             end if;\n          end Access_Cases;\n "}]}