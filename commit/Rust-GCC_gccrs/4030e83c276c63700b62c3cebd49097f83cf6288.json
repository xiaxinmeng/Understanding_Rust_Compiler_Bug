{"sha": "4030e83c276c63700b62c3cebd49097f83cf6288", "node_id": "C_kwDOANBUbNoAKDQwMzBlODNjMjc2YzYzNzAwYjYyYzNjZWJkNDkwOTdmODNjZjYyODg", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-24T18:38:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:53Z"}, "message": "[Ada] Give missing error on ambiguous operand of equality operator\n\nWhen the code responsible for giving errors on ambiguous operands of\ncomparison and equality operators was moved from the 1st phase (analysis)\nto the 2nd phase (resolution) of semantic processing, it was incorrectly\nrestricted to the operator case, which was valid during the 1st phase but\nis not during the 2nd phase.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Comparison_Op): Deal with ambiguous operands\n\tin all cases.\n\t(Resolve_Equality_Op): Likewise, except for the case of the implicit\n\tinequality operator created for a user-defined operator that is not\n\tan intrinsic subprogram.", "tree": {"sha": "b3946c2a4282b9631fd36c66d6aec03dcb8b6886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3946c2a4282b9631fd36c66d6aec03dcb8b6886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4030e83c276c63700b62c3cebd49097f83cf6288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4030e83c276c63700b62c3cebd49097f83cf6288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4030e83c276c63700b62c3cebd49097f83cf6288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4030e83c276c63700b62c3cebd49097f83cf6288/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a1da109efe9b12183353faa87b113f6992898f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a1da109efe9b12183353faa87b113f6992898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a1da109efe9b12183353faa87b113f6992898f"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "fd1615d9a25481e5bafe6bb2c296d408b411631b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4030e83c276c63700b62c3cebd49097f83cf6288/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4030e83c276c63700b62c3cebd49097f83cf6288/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4030e83c276c63700b62c3cebd49097f83cf6288", "patch": "@@ -7539,9 +7539,7 @@ package body Sem_Res is\n       if T = Any_Type then\n          --  Deal with explicit ambiguity of operands\n \n-         if Ekind (Entity (N)) = E_Operator\n-           and then (Is_Overloaded (L) or else Is_Overloaded (R))\n-         then\n+         if Is_Overloaded (L) or else Is_Overloaded (R) then\n             Ambiguous_Operands (N);\n          end if;\n \n@@ -8563,6 +8561,16 @@ package body Sem_Res is\n       L : constant Node_Id := Left_Opnd (N);\n       R : constant Node_Id := Right_Opnd (N);\n \n+      Implicit_NE_For_User_Defined_Operator : constant Boolean :=\n+        Nkind (N) = N_Op_Ne\n+          and then Ekind (Entity (N)) = E_Function\n+          and then not Comes_From_Source (Entity (N))\n+          and then not\n+            Is_Intrinsic_Subprogram (Corresponding_Equality (Entity (N)));\n+      --  Whether this is a call to the implicit inequality operator created\n+      --  for a user-defined operator that is not an intrinsic subprogram, in\n+      --  which case we need to skip some processing.\n+\n       T : Entity_Id := Find_Unique_Type (L, R);\n \n       procedure Check_Access_Attribute (N : Node_Id);\n@@ -8833,9 +8841,12 @@ package body Sem_Res is\n       Generate_Reference (T, N, ' ');\n \n       if T = Any_Type then\n-         --  Deal with explicit ambiguity of operands\n+         --  Deal with explicit ambiguity of operands, unless this is a call\n+         --  to the implicit inequality operator created for a user-defined\n+         --  operator that is not an intrinsic subprogram, since the common\n+         --  resolution of operands done here does not apply to it.\n \n-         if Ekind (Entity (N)) = E_Operator\n+         if not Implicit_NE_For_User_Defined_Operator\n            and then (Is_Overloaded (L) or else Is_Overloaded (R))\n          then\n             Ambiguous_Operands (N);\n@@ -9009,17 +9020,11 @@ package body Sem_Res is\n          Generate_Operator_Reference (N, T);\n          Check_Low_Bound_Tested (N);\n \n-         --  If this is an inequality, it may be the implicit inequality\n-         --  created for a user-defined operation, in which case the corres-\n-         --  ponding equality operation is not intrinsic, and the operation\n-         --  cannot be constant-folded. Else fold.\n+         --  Unless this is a call to the implicit inequality operator created\n+         --  for a user-defined operator that is not an intrinsic subprogram,\n+         --  try to fold the operation.\n \n-         if Nkind (N) = N_Op_Eq\n-           or else Comes_From_Source (Entity (N))\n-           or else Ekind (Entity (N)) = E_Operator\n-           or else\n-             Is_Intrinsic_Subprogram (Corresponding_Equality (Entity (N)))\n-         then\n+         if not Implicit_NE_For_User_Defined_Operator then\n             Analyze_Dimension (N);\n             Eval_Relational_Op (N);\n "}]}