{"sha": "1353232d3d37c1f3e65a0957671670557b2532a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1MzIzMmQzZDM3YzFmM2U2NWEwOTU3NjcxNjcwNTU3YjI1MzJhNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-09T09:37:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-09T09:37:36Z"}, "message": "invoke.texi (-fdump-tree-salias): Remove documentation.\n\n2008-05-08  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (-fdump-tree-salias): Remove documentation.\n\t(-ftree-salias): Likewise.\n\t(salias-max-implicit-fields): Remove param documentation.\n\t(salias-max-array-elements): Likewise.\n\t* tree-pass.h (pass_create_structure_vars): Remove.\n\t* params.h (SALIAS_MAX_IMPLICIT_FIELDS): Remove.\n\t(SALIAS_MAX_ARRAY_ELEMENTS): Likewise.\n\t* tree-ssa-alias.c (create_structure_vars): Remove.\n\t(gate_structure_vars): Likewise.\n\t(pass_create_structure_vars): Likewise.\n\t(gate_build_alias): Likewise.\n\t(pass_build_alias): Adjust to run always and dump the function.\n\t* common.opt (ftree-salias): Hide.\n\t* passes.c (init_optimization_passes): Remove\n\tpass_create_structure_vars, adjust comment.\n\t* params.def (PARAM_SALIAS_MAX_IMPLICIT_FIELDS): Remove.\n\t(PARAM_SALIAS_MAX_ARRAY_ELEMENTS): Likewise.\n\t* opts.c (decode_options): Do not set flag_tree_salias.\n\t(common_handle_option): Add OPT_ftree_salias to the backward\n\tcompatibility section.\n\n\t* gcc.dg/tree-ssa/20040911-1.c: Adjust.\n\t* gcc.dg/tree-ssa/20040517-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr26421.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23382.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-15.c: Likewise.\n\t* gcc.dg/tree-ssa/inline_asm-1.c: Likewise.\n\t* gcc.dg/tree-ssa/inline_asm-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-fp.c: Likewise.\n\t* gcc.dg/tree-ssa/20031015-1.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-12.c: Likewise.\n\nFrom-SVN: r135111", "tree": {"sha": "5c1ca8d2f60b302cf5cf47d75c2847a94be8348b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c1ca8d2f60b302cf5cf47d75c2847a94be8348b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1353232d3d37c1f3e65a0957671670557b2532a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1353232d3d37c1f3e65a0957671670557b2532a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1353232d3d37c1f3e65a0957671670557b2532a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1353232d3d37c1f3e65a0957671670557b2532a6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31de5b771a7621f2e331e2839e8634dad0c6ee70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31de5b771a7621f2e331e2839e8634dad0c6ee70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31de5b771a7621f2e331e2839e8634dad0c6ee70"}], "stats": {"total": 198, "additions": 78, "deletions": 120}, "files": [{"sha": "f3f60fb7fca363642a5e565eb786f516dff1fc3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,3 +1,26 @@\n+2008-05-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-fdump-tree-salias): Remove documentation.\n+\t(-ftree-salias): Likewise.\n+\t(salias-max-implicit-fields): Remove param documentation.\n+\t(salias-max-array-elements): Likewise.\n+\t* tree-pass.h (pass_create_structure_vars): Remove.\n+\t* params.h (SALIAS_MAX_IMPLICIT_FIELDS): Remove.\n+\t(SALIAS_MAX_ARRAY_ELEMENTS): Likewise.\n+\t* tree-ssa-alias.c (create_structure_vars): Remove.\n+\t(gate_structure_vars): Likewise.\n+\t(pass_create_structure_vars): Likewise.\n+\t(gate_build_alias): Likewise.\n+\t(pass_build_alias): Adjust to run always and dump the function.\n+\t* common.opt (ftree-salias): Hide.\n+\t* passes.c (init_optimization_passes): Remove\n+\tpass_create_structure_vars, adjust comment.\n+\t* params.def (PARAM_SALIAS_MAX_IMPLICIT_FIELDS): Remove.\n+\t(PARAM_SALIAS_MAX_ARRAY_ELEMENTS): Likewise.\n+\t* opts.c (decode_options): Do not set flag_tree_salias.\n+\t(common_handle_option): Add OPT_ftree_salias to the backward\n+\tcompatibility section.\n+\n 2008-05-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow-inline.h (var_can_have_subvars): Move ..."}, {"sha": "4a44cd6812243576fb29d87c174c33513895eb45", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1141,8 +1141,8 @@ Common Report Var(flag_tree_reassoc) Init(1) Optimization\n Enable reassociation on tree level\n \n ftree-salias\n-Common Report Var(flag_tree_salias) Optimization\n-Perform structural alias analysis\n+Common\n+Does nothing.  Preserved for backward compatibility.\n \n ftree-sink\n Common Report Var(flag_tree_sink) Optimization"}, {"sha": "e898148611a12d087e5954b993e250a1ca6325e2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -292,7 +292,6 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-nrv -fdump-tree-vect @gol\n -fdump-tree-sink @gol\n -fdump-tree-sra@r{[}-@var{n}@r{]} @gol\n--fdump-tree-salias @gol\n -fdump-tree-fre@r{[}-@var{n}@r{]} @gol\n -fdump-tree-vrp@r{[}-@var{n}@r{]} @gol\n -ftree-vectorizer-verbose=@var{n} @gol\n@@ -357,7 +356,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-dominator-opts -ftree-dse -ftree-fre -ftree-loop-im @gol\n -ftree-loop-distribution @gol\n -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize @gol\n--ftree-parallelize-loops=@var{n} -ftree-pre -ftree-reassoc -ftree-salias @gol\n+-ftree-parallelize-loops=@var{n} -ftree-pre -ftree-reassoc @gol\n -ftree-sink -ftree-sra -ftree-store-ccp -ftree-ter @gol\n -ftree-vect-loop-version -ftree-vectorize -ftree-vrp -funit-at-a-time @gol\n -funroll-all-loops -funroll-loops -funsafe-loop-optimizations @gol\n@@ -4803,11 +4802,6 @@ appending @file{.ch} to the source file name.\n Dump SSA related information to a file.  The file name is made by appending\n @file{.ssa} to the source file name.\n \n-@item salias\n-@opindex fdump-tree-salias\n-Dump structure aliasing variable information to a file.  This file name\n-is made by appending @file{.salias} to the source file name.\n-\n @item alias\n @opindex fdump-tree-alias\n Dump aliasing information for each function.  The file name is made by\n@@ -5791,11 +5785,6 @@ Perform copy propagation on trees.  This pass eliminates unnecessary\n copy operations.  This flag is enabled by default at @option{-O} and\n higher.\n \n-@item -ftree-salias\n-@opindex ftree-salias\n-Perform structural alias analysis on trees.  This flag\n-is enabled by default at @option{-O} and higher.\n-\n @item -fipa-pure-const\n @opindex fipa-pure-const\n Discover which functions are pure or constant.\n@@ -6799,15 +6788,6 @@ In each case, the @var{value} is an integer.  The allowable choices for\n @var{name} are given in the following table:\n \n @table @gcctabopt\n-@item salias-max-implicit-fields\n-The maximum number of fields in a variable without direct\n-structure accesses for which structure aliasing will consider trying\n-to track each field.  The default is 5\n-\n-@item salias-max-array-elements\n-The maximum number of elements an array can have and its elements\n-still be tracked individually by structure aliasing. The default is 4\n-\n @item sra-max-structure-size\n The maximum structure size, in bytes, at which the scalar replacement\n of aggregates (SRA) optimization will perform block copies.  The"}, {"sha": "7add8d3d250e68cd7c0118937498ab7d7b3824bf", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -848,7 +848,6 @@ decode_options (unsigned int argc, const char **argv)\n       flag_tree_fre = 1;\n       flag_tree_copy_prop = 1;\n       flag_tree_sink = 1;\n-      flag_tree_salias = 1;\n       if (!no_unit_at_a_time_default)\n         flag_unit_at_a_time = 1;\n \n@@ -1898,6 +1897,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_fstrength_reduce:\n     case OPT_ftree_store_copy_prop:\n     case OPT_fforce_addr:\n+    case OPT_ftree_salias:\n       /* These are no-ops, preserved for backward compatibility.  */\n       break;\n "}, {"sha": "d80deff01ea74aade0cdd36ead7929ecc3b9a2e0", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -38,21 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n \n    Be sure to add an entry to invoke.texi summarizing the parameter.  */\n \n-/* The maximum number of fields in a variable with only implicit uses\n-   for which structure aliasing will consider trying to track each\n-   field.  The default is 5.  */\n-DEFPARAM (PARAM_SALIAS_MAX_IMPLICIT_FIELDS,\n-\t  \"salias-max-implicit-fields\",\n-\t  \"The maximum number of fields in a structure variable without direct structure accesses that GCC will attempt to track separately\",\n-\t  5, 0, 0)\n-\n-/* The maximum number of array elements structure aliasing will decompose\n-   an array for.  The default is 4.  */\n-DEFPARAM (PARAM_SALIAS_MAX_ARRAY_ELEMENTS,\n-\t  \"salias-max-array-elements\",\n-\t  \"The maximum number of elements in an array for wich we track its elements separately\",\n-\t  4, 0, 0)\n-\n /* The maximum structure size at which the scalar replacement of\n    aggregates (SRA) pass will perform block copies.  The default\n    value, 0, implies that GCC will select the most appropriate size"}, {"sha": "bb3afb3354d74e1b7cf492b123d74d59bb60b387", "filename": "gcc/params.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -93,10 +93,6 @@ typedef enum compiler_param\n   (compiler_params[(int) ENUM].set)\n \n /* Macros for the various parameters.  */\n-#define SALIAS_MAX_IMPLICIT_FIELDS \\\n-  PARAM_VALUE (PARAM_SALIAS_MAX_IMPLICIT_FIELDS)\n-#define SALIAS_MAX_ARRAY_ELEMENTS \\\n-  PARAM_VALUE (PARAM_SALIAS_MAX_ARRAY_ELEMENTS)\n #define SRA_MAX_STRUCTURE_SIZE \\\n   PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_SIZE)\n #define SRA_MAX_STRUCTURE_COUNT \\"}, {"sha": "bd8392646f2a7bf57edf26f79a94ed665166f47c", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -557,10 +557,8 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_all_optimizations);\n     {\n       struct opt_pass **p = &pass_all_optimizations.pass.sub;\n-      NEXT_PASS (pass_create_structure_vars);\n-      /* ??? pass_build_alias is a dummy pass that ensures that we\n-\t execute TODO_rebuild_alias at this point even if\n-\t pass_create_structure_vars was disabled.  */\n+      /* pass_build_alias is a dummy pass that ensures that we\n+\t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_rename_ssa_copies);"}, {"sha": "0c8fc0bea529dcdf193fbc3c3414cb30c73b4904", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,3 +1,16 @@\n+2008-05-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/20040911-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/20040517-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr26421.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23382.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-15.c: Likewise.\n+\t* gcc.dg/tree-ssa/inline_asm-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/inline_asm-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-fp.c: Likewise.\n+\t* gcc.dg/tree-ssa/20031015-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-12.c: Likewise.\n+\n 2008-05-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36162"}, {"sha": "102715c0131e55bf15c3df35376b4e362cdcbdf3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031015-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,7 +1,7 @@\n /* With tree-ssa, gcc.dg/20000724-1.c failed because we missed\n    a VOP of x in the asm statement.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-alias-vops\" } */\n \n struct s { int a; };\n \n@@ -14,5 +14,5 @@ main(void)\n }\n \n /* The VDEF comes from the initial assignment and the asm.  */\n-/* { dg-final { scan-tree-dump-times \"DEF\" 2 \"salias\" } } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"DEF\" 2 \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "99b27ce02f1a9c35dba6e58fcd5b5d33204f665b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040517-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-alias-vops\" } */\n extern void abort (void);\n int a; \n  \n@@ -17,5 +17,5 @@ void bar (void)\n    malloc functions may clobber global memory.  Only the function result\n    does not alias any other pointer.\n    Hence, we must have a VDEF for a before and after the call to foo().  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"salias\"} } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"alias\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "f17e98aed801dee6e56e02c952da3515af0f495a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040911-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that points-to information is handled properly for PTR + OFFSET\n    pointer arithmetics.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n \n char buf[4], *q;\n int foo (int i)\n@@ -18,5 +18,5 @@ int foo (int i)\n   return *p;\n }\n \n-/* { dg-final { scan-tree-dump-not \"VUSE <c\" \"salias\" } } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-not \"VUSE <c\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "b1fb7997f3c517a7fa4156a48babc55a39cc1c66", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n \n struct {\n \tint i;\n@@ -13,6 +13,6 @@ int foo(int i)\n \treturn a.x[i];\n }\n \n-/* { dg-final { scan-tree-dump \"VDEF\" \"salias\" } } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump \"VDEF\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */\n "}, {"sha": "617af0fd154fabd1d173b1f6c928a68f6e05157a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-early-inlining -fdump-tree-salias-vops-details\" } */\n+/* { dg-options \"-O -fno-early-inlining -fdump-tree-alias-vops-details\" } */\n \n struct foo {\n   int a;\n@@ -15,5 +15,5 @@ int test2(void)\n   return p->b[3] - m.b.b[3];\n }\n \n-/* { dg-final { scan-tree-dump-times \"VUSE <m_.\\\\\\(D\\\\\\)>\" 2 \"salias\" } } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VUSE <m_.\\\\\\(D\\\\\\)>\" 2 \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "0c84ed3fa83bc2226f9144676fd2acb584d3dfc2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline_asm-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized -fdump-tree-salias-vops\" } */\n-/* Test to make sure that inline-asm causes a V_MAY_DEF and that we call test_function twice. */\n+/* { dg-options \"-O1 -fdump-tree-optimized -fdump-tree-alias-vops\" } */\n+/* Test to make sure that inline-asm causes a VDEF and that we call test_function twice. */\n \n char test_function(void ) __attribute__((__pure__));\n char f(char *a)\n@@ -16,5 +16,5 @@ char f(char *a)\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n /* There should a VDEF for the inline-asm.  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 1 \"salias\"} } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 1 \"alias\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "6b347c41ebfc2a2a277185a74d576c057b4f2e4c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline_asm-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n-/* Test to make sure that inline-asm causes a V_MAY_DEF. */\n+/* { dg-options \"-O1 -fdump-tree-alias-vops\" } */\n+/* Test to make sure that inline-asm causes a VDEF. */\n \n \n void link_error();\n@@ -14,5 +14,5 @@ void f(char *a)\n }\n \n /* There should a VDEF for the inline-asm and one for the link_error.  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"salias\"} } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"alias\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "331e01b5ae36de13b4778cef8bf7a33740d852a5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23382.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n struct a\n {\n   int length;\n@@ -13,5 +13,5 @@ int f(void)\n    struct a *a = malloc(sizeof(struct a));\n    return a->length;\n }\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"salias\"} } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "73db85c17da00b55455b8a2cf257f53b6bb99a50", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr26421.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n \n typedef struct {\n   int i;\n@@ -18,5 +18,5 @@ int foo(void)\n \n /* Verify the call clobbers all of a.  */\n \n-/* { dg-final { scan-tree-dump-times \"VDEF <a_\" 2 \"salias\" } } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF <a_\" 2 \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "022783df135fb43f28c7938859f31ad407301fac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-fp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-salias\" } */\n+/* { dg-options \"-O2 -fdump-tree-alias\" } */\n extern double cos (double);\n extern double sin (double);\n double f(double a)\n@@ -22,5 +22,5 @@ double f(double a)\n }\n /* The points-to set of the final function pointer should be \"sin cos\" */\n \n-/* { dg-final { scan-tree-dump-times \"{ sin cos }\" 1 \"salias\"} } */\n-/* { dg-final { cleanup-tree-dump \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"{ sin cos }\" 1 \"alias\"} } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "c18c412b9784cf30e266edd6b8eb5e906c7dae1a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -374,7 +374,6 @@ extern struct gimple_opt_pass pass_check_data_deps;\n extern struct gimple_opt_pass pass_copy_prop;\n extern struct gimple_opt_pass pass_store_ccp;\n extern struct gimple_opt_pass pass_vrp;\n-extern struct gimple_opt_pass pass_create_structure_vars;\n extern struct gimple_opt_pass pass_uncprop;\n extern struct gimple_opt_pass pass_return_slot;\n extern struct gimple_opt_pass pass_reassoc;"}, {"sha": "814631a65d6d27a1c4880b783c5c0a58ac068726", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1353232d3d37c1f3e65a0957671670557b2532a6/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1353232d3d37c1f3e65a0957671670557b2532a6", "patch": "@@ -3438,38 +3438,6 @@ new_type_alias (tree ptr, tree var, tree expr)\n   MTAG_GLOBAL (tag) = is_global_var (var);\n }\n \n-/* ???  Stub.  */\n-\n-static unsigned int\n-create_structure_vars (void)\n-{\n-  return TODO_rebuild_alias;\n-}\n-\n-static bool\n-gate_structure_vars (void)\n-{\n-  return flag_tree_salias != 0;\n-}\n-\n-struct gimple_opt_pass pass_create_structure_vars = \n-{\n- {\n-  GIMPLE_PASS,\n-  \"salias\",\t\t /* name */\n-  gate_structure_vars,\t /* gate */\n-  create_structure_vars, /* execute */\n-  NULL,\t\t\t /* sub */\n-  NULL,\t\t\t /* next */\n-  0,\t\t\t /* static_pass_number */\n-  0,\t\t\t /* tv_id */\n-  PROP_cfg,\t\t /* properties_required */\n-  0,\t\t\t /* properties_provided */\n-  0,\t\t\t /* properties_destroyed */\n-  0,\t\t\t /* todo_flags_start */\n-  TODO_dump_func\t /* todo_flags_finish */\n- }\n-};\n \n /* Reset the call_clobbered flags on our referenced vars.  In\n    theory, this only needs to be done for globals.  */\n@@ -3504,19 +3472,15 @@ struct gimple_opt_pass pass_reset_cc_flags =\n  }\n };\n \n-static bool\n-gate_build_alias (void)\n-{\n-  return !gate_structure_vars();\n-}\n \n+/* A dummy pass to cause aliases to be computed via TODO_rebuild_alias.  */\n \n struct gimple_opt_pass pass_build_alias =\n {\n  {\n   GIMPLE_PASS,\n-  \"build_alias\",            /* name */\n-  gate_build_alias,         /* gate */\n+  \"alias\",\t\t    /* name */\n+  NULL,\t\t\t    /* gate */\n   NULL,                     /* execute */\n   NULL,                     /* sub */\n   NULL,                     /* next */\n@@ -3526,6 +3490,6 @@ struct gimple_opt_pass pass_build_alias =\n   PROP_alias,               /* properties_provided */\n   0,                        /* properties_destroyed */\n   0,                        /* todo_flags_start */\n-  TODO_rebuild_alias        /* todo_flags_finish */\n+  TODO_rebuild_alias | TODO_dump_func  /* todo_flags_finish */\n  }\n };"}]}