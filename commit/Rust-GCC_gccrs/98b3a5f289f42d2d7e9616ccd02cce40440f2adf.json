{"sha": "98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiM2E1ZjI4OWY0MmQyZDdlOTYxNmNjZDAyY2NlNDA0NDBmMmFkZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-05-17T16:34:46Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-05-17T16:34:46Z"}, "message": "[AArch64, 1/4]  Add the missing support of vfms_n_f32, vfmsq_n_f32, vfmsq_n_f64\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (*aarch64_fma4_elt_to_128df): Rename\n\tto *aarch64_fma4_elt_from_dup<mode>.\n\t(*aarch64_fnma4_elt_to_128df): Rename to\n\t*aarch64_fnma4_elt_from_dup<mode>.\n\t* config/aarch64/arm_neon.h (vfma_n_f64): New.\n\t(vfms_n_f32): Likewise.\n\t(vfms_n_f64): Likewise.\n\t(vfmsq_n_f32): Likewise.\n\t(vfmsq_n_f64): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/fmla_intrinsic_1.c: Allow \".d[index]\" besides\n\t\".2d[index]\" when scan the assembly.\n\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h: New entry for\n\tfloat64x1.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c: New.\n\nFrom-SVN: r236331", "tree": {"sha": "6095b4a2ea6aa104badb21d9b1013f805723116e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6095b4a2ea6aa104badb21d9b1013f805723116e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/comments", "author": null, "committer": null, "parents": [{"sha": "92237f4398f6626785bd95dc84ee698ae2d68ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92237f4398f6626785bd95dc84ee698ae2d68ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92237f4398f6626785bd95dc84ee698ae2d68ede"}], "stats": {"total": 586, "additions": 564, "deletions": 22}, "files": [{"sha": "bb594964f568649dd31bbdf19b451ced3f803ba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -1,3 +1,15 @@\n+2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_fma4_elt_to_128df): Rename\n+\tto *aarch64_fma4_elt_from_dup<mode>.\n+\t(*aarch64_fnma4_elt_to_128df): Rename to\n+\t*aarch64_fnma4_elt_from_dup<mode>.\n+\t* config/aarch64/arm_neon.h (vfma_n_f64): New.\n+\t(vfms_n_f32): Likewise.\n+\t(vfms_n_f64): Likewise.\n+\t(vfmsq_n_f32): Likewise.\n+\t(vfmsq_n_f64): Likewise.\n+\n 2016-05-17  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* wide-int.h: Change fixed_wide_int_storage from class to struct."}, {"sha": "b533846378bc7b4ed2c816cdd5e9c3d103ca38bd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -1579,16 +1579,16 @@\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"*aarch64_fma4_elt_to_128df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-    (fma:V2DF\n-      (vec_duplicate:V2DF\n-\t  (match_operand:DF 1 \"register_operand\" \"w\"))\n-      (match_operand:V2DF 2 \"register_operand\" \"w\")\n-      (match_operand:V2DF 3 \"register_operand\" \"0\")))]\n+(define_insn \"*aarch64_fma4_elt_from_dup<mode>\"\n+  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n+    (fma:VMUL\n+      (vec_duplicate:VMUL\n+\t  (match_operand:<VEL> 1 \"register_operand\" \"w\"))\n+      (match_operand:VMUL 2 \"register_operand\" \"w\")\n+      (match_operand:VMUL 3 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n-  \"fmla\\\\t%0.2d, %2.2d, %1.2d[0]\"\n-  [(set_attr \"type\" \"neon_fp_mla_d_scalar_q\")]\n+  \"fmla\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon<fp>_mla_<Vetype>_scalar<q>\")]\n )\n \n (define_insn \"*aarch64_fma4_elt_to_64v2df\"\n@@ -1656,17 +1656,17 @@\n   [(set_attr \"type\" \"neon_fp_mla_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"*aarch64_fnma4_elt_to_128df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-    (fma:V2DF\n-      (neg:V2DF\n-        (match_operand:V2DF 2 \"register_operand\" \"w\"))\n-      (vec_duplicate:V2DF\n-\t(match_operand:DF 1 \"register_operand\" \"w\"))\n-      (match_operand:V2DF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_SIMD\"\n-  \"fmls\\\\t%0.2d, %2.2d, %1.2d[0]\"\n-  [(set_attr \"type\" \"neon_fp_mla_d_scalar_q\")]\n+(define_insn \"*aarch64_fnma4_elt_from_dup<mode>\"\n+  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n+    (fma:VMUL\n+      (neg:VMUL\n+        (match_operand:VMUL 2 \"register_operand\" \"w\"))\n+      (vec_duplicate:VMUL\n+\t(match_operand:<VEL> 1 \"register_operand\" \"w\"))\n+      (match_operand:VMUL 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"fmls\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon<fp>_mla_<Vetype>_scalar<q>\")]\n )\n \n (define_insn \"*aarch64_fnma4_elt_to_64v2df\""}, {"sha": "ca7ace5aa656163826569d046fcbf02f9f7d4d6c", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -14456,6 +14456,12 @@ vfma_n_f32 (float32x2_t __a, float32x2_t __b, float32_t __c)\n   return __builtin_aarch64_fmav2sf (__b, vdup_n_f32 (__c), __a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vfma_n_f64 (float64x1_t __a, float64x1_t __b, float64_t __c)\n+{\n+  return (float64x1_t) {__b[0] * __c + __a[0]};\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vfmaq_n_f32 (float32x4_t __a, float32x4_t __b, float32_t __c)\n {\n@@ -14597,6 +14603,29 @@ vfmsq_f64 (float64x2_t __a, float64x2_t __b, float64x2_t __c)\n   return __builtin_aarch64_fmav2df (-__b, __c, __a);\n }\n \n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vfms_n_f32 (float32x2_t __a, float32x2_t __b, float32_t __c)\n+{\n+  return __builtin_aarch64_fmav2sf (-__b, vdup_n_f32 (__c), __a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vfms_n_f64 (float64x1_t __a, float64x1_t __b, float64_t __c)\n+{\n+  return (float64x1_t) {-__b[0] * __c + __a[0]};\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vfmsq_n_f32 (float32x4_t __a, float32x4_t __b, float32_t __c)\n+{\n+  return __builtin_aarch64_fmav4sf (-__b, vdupq_n_f32 (__c), __a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vfmsq_n_f64 (float64x2_t __a, float64x2_t __b, float64_t __c)\n+{\n+  return __builtin_aarch64_fmav2df (-__b, vdupq_n_f64 (__c), __a);\n+}\n \n /* vfms_lane  */\n "}, {"sha": "837a8ff3d20eb5bfd0addbe4fa79dac782754cae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -1,3 +1,12 @@\n+2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/fmla_intrinsic_1.c: Allow \".d[index]\" besides\n+\t\".2d[index]\" when scan the assembly.\n+\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h: New entry for\n+\tfloat64x1.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c: New.\n+\n 2016-05-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71132"}, {"sha": "cf90825f87391b72aca9a29980210d21f4321c04", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -136,6 +136,7 @@ static ARRAY(result, poly, 16, 4);\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n static ARRAY(result, float, 16, 4);\n #endif\n+static ARRAY(result, float, 64, 1);\n static ARRAY(result, float, 32, 2);\n static ARRAY(result, int, 8, 16);\n static ARRAY(result, int, 16, 8);\n@@ -169,6 +170,7 @@ extern ARRAY(expected, poly, 8, 8);\n extern ARRAY(expected, poly, 16, 4);\n extern ARRAY(expected, hfloat, 16, 4);\n extern ARRAY(expected, hfloat, 32, 2);\n+extern ARRAY(expected, hfloat, 64, 1);\n extern ARRAY(expected, int, 8, 16);\n extern ARRAY(expected, int, 16, 8);\n extern ARRAY(expected, int, 32, 4);"}, {"sha": "26223763c59c849607b5320f6ec37098a556ce2e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfms_vfma_n.c", "status": "added", "additions": 490, "deletions": 0, "changes": 490, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms_vfma_n.c?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -0,0 +1,490 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define A0 123.4f\n+#define A1 -3.8f\n+#define A2 -29.4f\n+#define A3 (__builtin_inff ())\n+#define A4 0.0f\n+#define A5 24.0f\n+#define A6 124.0f\n+#define A7 1024.0f\n+\n+#define B0 -5.8f\n+#define B1 -0.0f\n+#define B2 -10.8f\n+#define B3 10.0f\n+#define B4 23.4f\n+#define B5 -1234.8f\n+#define B6 8.9f\n+#define B7 4.0f\n+\n+#define E0 9.8f\n+#define E1 -1024.0f\n+#define E2 (-__builtin_inff ())\n+#define E3 479.0f\n+float32_t elem0 = E0;\n+float32_t elem1 = E1;\n+float32_t elem2 = E2;\n+float32_t elem3 = E3;\n+\n+#define DA0 1231234.4\n+#define DA1 -3.8\n+#define DA2 -2980.4\n+#define DA3 -5.8\n+#define DA4 0.01123\n+#define DA5 24.0\n+#define DA6 124.12345\n+#define DA7 1024.0\n+\n+#define DB0 -5.8\n+#define DB1 (__builtin_inf ())\n+#define DB2 -105.8\n+#define DB3 10.0\n+#define DB4 (-__builtin_inf ())\n+#define DB5 -1234.8\n+#define DB6 848.9\n+#define DB7 44444.0\n+\n+#define DE0 9.8\n+#define DE1 -1024.0\n+#define DE2 105.8\n+#define DE3 479.0\n+float64_t delem0 = DE0;\n+float64_t delem1 = DE1;\n+float64_t delem2 = DE2;\n+float64_t delem3 = DE3;\n+\n+#if defined(__aarch64__) && defined(__ARM_FEATURE_FMA)\n+\n+/* Expected results for vfms_n.  */\n+\n+VECT_VAR_DECL(expectedfms0, float, 32, 2) [] = {A0 + -B0 * E0, A1 + -B1 * E0};\n+VECT_VAR_DECL(expectedfms1, float, 32, 2) [] = {A2 + -B2 * E1, A3 + -B3 * E1};\n+VECT_VAR_DECL(expectedfms2, float, 32, 2) [] = {A4 + -B4 * E2, A5 + -B5 * E2};\n+VECT_VAR_DECL(expectedfms3, float, 32, 2) [] = {A6 + -B6 * E3, A7 + -B7 * E3};\n+VECT_VAR_DECL(expectedfma0, float, 32, 2) [] = {A0 + B0 * E0, A1 + B1 * E0};\n+VECT_VAR_DECL(expectedfma1, float, 32, 2) [] = {A2 + B2 * E1, A3 + B3 * E1};\n+VECT_VAR_DECL(expectedfma2, float, 32, 2) [] = {A4 + B4 * E2, A5 + B5 * E2};\n+VECT_VAR_DECL(expectedfma3, float, 32, 2) [] = {A6 + B6 * E3, A7 + B7 * E3};\n+\n+hfloat32_t * VECT_VAR (expectedfms0_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfms0, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfms1_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfms1, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfms2_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfms2, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfms3_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfms3, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfma0_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfma0, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfma1_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfma1, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfma2_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfma2, float, 32, 2);\n+hfloat32_t * VECT_VAR (expectedfma3_static, hfloat, 32, 2) =\n+  (hfloat32_t *) VECT_VAR (expectedfma3, float, 32, 2);\n+\n+\n+VECT_VAR_DECL(expectedfms0, float, 32, 4) [] = {A0 + -B0 * E0, A1 + -B1 * E0,\n+\t\t\t\t\t\tA2 + -B2 * E0, A3 + -B3 * E0};\n+VECT_VAR_DECL(expectedfms1, float, 32, 4) [] = {A4 + -B4 * E1, A5 + -B5 * E1,\n+\t\t\t\t\t\tA6 + -B6 * E1, A7 + -B7 * E1};\n+VECT_VAR_DECL(expectedfms2, float, 32, 4) [] = {A0 + -B0 * E2, A2 + -B2 * E2,\n+\t\t\t\t\t\tA4 + -B4 * E2, A6 + -B6 * E2};\n+VECT_VAR_DECL(expectedfms3, float, 32, 4) [] = {A1 + -B1 * E3, A3 + -B3 * E3,\n+\t\t\t\t\t\tA5 + -B5 * E3, A7 + -B7 * E3};\n+VECT_VAR_DECL(expectedfma0, float, 32, 4) [] = {A0 + B0 * E0, A1 + B1 * E0,\n+\t\t\t\t\t\tA2 + B2 * E0, A3 + B3 * E0};\n+VECT_VAR_DECL(expectedfma1, float, 32, 4) [] = {A4 + B4 * E1, A5 + B5 * E1,\n+\t\t\t\t\t\tA6 + B6 * E1, A7 + B7 * E1};\n+VECT_VAR_DECL(expectedfma2, float, 32, 4) [] = {A0 + B0 * E2, A2 + B2 * E2,\n+\t\t\t\t\t\tA4 + B4 * E2, A6 + B6 * E2};\n+VECT_VAR_DECL(expectedfma3, float, 32, 4) [] = {A1 + B1 * E3, A3 + B3 * E3,\n+\t\t\t\t\t\tA5 + B5 * E3, A7 + B7 * E3};\n+\n+hfloat32_t * VECT_VAR (expectedfms0_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfms0, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfms1_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfms1, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfms2_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfms2, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfms3_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfms3, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfma0_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfma0, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfma1_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfma1, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfma2_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfma2, float, 32, 4);\n+hfloat32_t * VECT_VAR (expectedfma3_static, hfloat, 32, 4) =\n+  (hfloat32_t *) VECT_VAR (expectedfma3, float, 32, 4);\n+\n+VECT_VAR_DECL(expectedfms0, float, 64, 2) [] = {DA0 + -DB0 * DE0,\n+\t\t\t\t\t\tDA1 + -DB1 * DE0};\n+VECT_VAR_DECL(expectedfms1, float, 64, 2) [] = {DA2 + -DB2 * DE1,\n+\t\t\t\t\t\tDA3 + -DB3 * DE1};\n+VECT_VAR_DECL(expectedfms2, float, 64, 2) [] = {DA4 + -DB4 * DE2,\n+\t\t\t\t\t\tDA5 + -DB5 * DE2};\n+VECT_VAR_DECL(expectedfms3, float, 64, 2) [] = {DA6 + -DB6 * DE3,\n+\t\t\t\t\t\tDA7 + -DB7 * DE3};\n+VECT_VAR_DECL(expectedfma0, float, 64, 2) [] = {DA0 + DB0 * DE0,\n+\t\t\t\t\t\tDA1 + DB1 * DE0};\n+VECT_VAR_DECL(expectedfma1, float, 64, 2) [] = {DA2 + DB2 * DE1,\n+\t\t\t\t\t\tDA3 + DB3 * DE1};\n+VECT_VAR_DECL(expectedfma2, float, 64, 2) [] = {DA4 + DB4 * DE2,\n+\t\t\t\t\t\tDA5 + DB5 * DE2};\n+VECT_VAR_DECL(expectedfma3, float, 64, 2) [] = {DA6 + DB6 * DE3,\n+\t\t\t\t\t\tDA7 + DB7 * DE3};\n+hfloat64_t * VECT_VAR (expectedfms0_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfms0, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfms1_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfms1, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfms2_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfms2, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfms3_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfms3, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfma0_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfma0, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfma1_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfma1, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfma2_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfma2, float, 64, 2);\n+hfloat64_t * VECT_VAR (expectedfma3_static, hfloat, 64, 2) =\n+  (hfloat64_t *) VECT_VAR (expectedfma3, float, 64, 2);\n+\n+VECT_VAR_DECL(expectedfms0, float, 64, 1) [] = {DA0 + -DB0 * DE0};\n+VECT_VAR_DECL(expectedfms1, float, 64, 1) [] = {DA2 + -DB2 * DE1};\n+VECT_VAR_DECL(expectedfms2, float, 64, 1) [] = {DA4 + -DB4 * DE2};\n+VECT_VAR_DECL(expectedfms3, float, 64, 1) [] = {DA6 + -DB6 * DE3};\n+VECT_VAR_DECL(expectedfma0, float, 64, 1) [] = {DA0 + DB0 * DE0};\n+VECT_VAR_DECL(expectedfma1, float, 64, 1) [] = {DA2 + DB2 * DE1};\n+VECT_VAR_DECL(expectedfma2, float, 64, 1) [] = {DA4 + DB4 * DE2};\n+VECT_VAR_DECL(expectedfma3, float, 64, 1) [] = {DA6 + DB6 * DE3};\n+\n+hfloat64_t * VECT_VAR (expectedfms0_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfms0, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfms1_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfms1, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfms2_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfms2, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfms3_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfms3, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfma0_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfma0, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfma1_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfma1, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfma2_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfma2, float, 64, 1);\n+hfloat64_t * VECT_VAR (expectedfma3_static, hfloat, 64, 1) =\n+  (hfloat64_t *) VECT_VAR (expectedfma3, float, 64, 1);\n+\n+void exec_vfma_vfms_n (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMS_VFMA_N (FP32)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 32, 2);\n+  DECL_VARIABLE(vsrc_2, float, 32, 2);\n+  VECT_VAR_DECL (buf_src_1, float, 32, 2) [] = {A0, A1};\n+  VECT_VAR_DECL (buf_src_2, float, 32, 2) [] = {B0, B1};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 32, 2);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 32, 2);\n+  DECL_VARIABLE (vector_res, float, 32, 2) =\n+    vfms_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem0);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfms0_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfma_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem0);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfma0_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_3, float, 32, 2) [] = {A2, A3};\n+  VECT_VAR_DECL (buf_src_4, float, 32, 2) [] = {B2, B3};\n+  VLOAD (vsrc_1, buf_src_3, , float, f, 32, 2);\n+  VLOAD (vsrc_2, buf_src_4, , float, f, 32, 2);\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfms_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem1);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfms1_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfma_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem1);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfma1_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_5, float, 32, 2) [] = {A4, A5};\n+  VECT_VAR_DECL (buf_src_6, float, 32, 2) [] = {B4, B5};\n+  VLOAD (vsrc_1, buf_src_5, , float, f, 32, 2);\n+  VLOAD (vsrc_2, buf_src_6, , float, f, 32, 2);\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfms_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem2);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfms2_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfma_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem2);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfma2_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_7, float, 32, 2) [] = {A6, A7};\n+  VECT_VAR_DECL (buf_src_8, float, 32, 2) [] = {B6, B7};\n+  VLOAD (vsrc_1, buf_src_7, , float, f, 32, 2);\n+  VLOAD (vsrc_2, buf_src_8, , float, f, 32, 2);\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfms_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem3);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfms3_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 2) =\n+    vfma_n_f32 (VECT_VAR (vsrc_1, float, 32, 2),\n+\t\tVECT_VAR (vsrc_2, float, 32, 2), elem3);\n+  vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t    VECT_VAR (vector_res, float, 32, 2));\n+  CHECK_FP (TEST_MSG, float, 32, 2, PRIx16, expectedfma3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMSQ_VFMAQ_N (FP32)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 32, 4);\n+  DECL_VARIABLE(vsrc_2, float, 32, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 32, 4) [] = {A0, A1, A2, A3};\n+  VECT_VAR_DECL (buf_src_2, float, 32, 4) [] = {B0, B1, B2, B3};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 32, 4);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 32, 4);\n+  DECL_VARIABLE (vector_res, float, 32, 4) =\n+    vfmsq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem0);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfms0_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmaq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem0);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfma0_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_3, float, 32, 4) [] = {A4, A5, A6, A7};\n+  VECT_VAR_DECL (buf_src_4, float, 32, 4) [] = {B4, B5, B6, B7};\n+  VLOAD (vsrc_1, buf_src_3, q, float, f, 32, 4);\n+  VLOAD (vsrc_2, buf_src_4, q, float, f, 32, 4);\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmsq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem1);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfms1_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmaq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem1);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfma1_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_5, float, 32, 4) [] = {A0, A2, A4, A6};\n+  VECT_VAR_DECL (buf_src_6, float, 32, 4) [] = {B0, B2, B4, B6};\n+  VLOAD (vsrc_1, buf_src_5, q, float, f, 32, 4);\n+  VLOAD (vsrc_2, buf_src_6, q, float, f, 32, 4);\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmsq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem2);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfms2_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmaq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem2);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfma2_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_7, float, 32, 4) [] = {A1, A3, A5, A7};\n+  VECT_VAR_DECL (buf_src_8, float, 32, 4) [] = {B1, B3, B5, B7};\n+  VLOAD (vsrc_1, buf_src_7, q, float, f, 32, 4);\n+  VLOAD (vsrc_2, buf_src_8, q, float, f, 32, 4);\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmsq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem3);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfms3_static, \"\");\n+  VECT_VAR (vector_res, float, 32, 4) =\n+    vfmaq_n_f32 (VECT_VAR (vsrc_1, float, 32, 4),\n+\t\t VECT_VAR (vsrc_2, float, 32, 4), elem3);\n+  vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t     VECT_VAR (vector_res, float, 32, 4));\n+  CHECK_FP (TEST_MSG, float, 32, 4, PRIx16, expectedfma3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMSQ_VFMAQ_N (FP64)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 64, 2);\n+  DECL_VARIABLE(vsrc_2, float, 64, 2);\n+  VECT_VAR_DECL (buf_src_1, float, 64, 2) [] = {DA0, DA1};\n+  VECT_VAR_DECL (buf_src_2, float, 64, 2) [] = {DB0, DB1};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 64, 2);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 64, 2);\n+  DECL_VARIABLE (vector_res, float, 64, 2) =\n+    vfmsq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem0);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms0_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem0);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma0_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_3, float, 64, 2) [] = {DA2, DA3};\n+  VECT_VAR_DECL (buf_src_4, float, 64, 2) [] = {DB2, DB3};\n+  VLOAD (vsrc_1, buf_src_3, q, float, f, 64, 2);\n+  VLOAD (vsrc_2, buf_src_4, q, float, f, 64, 2);\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmsq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem1);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms1_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem1);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma1_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_5, float, 64, 2) [] = {DA4, DA5};\n+  VECT_VAR_DECL (buf_src_6, float, 64, 2) [] = {DB4, DB5};\n+  VLOAD (vsrc_1, buf_src_5, q, float, f, 64, 2);\n+  VLOAD (vsrc_2, buf_src_6, q, float, f, 64, 2);\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmsq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem2);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms2_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem2);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma2_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_7, float, 64, 2) [] = {DA6, DA7};\n+  VECT_VAR_DECL (buf_src_8, float, 64, 2) [] = {DB6, DB7};\n+  VLOAD (vsrc_1, buf_src_7, q, float, f, 64, 2);\n+  VLOAD (vsrc_2, buf_src_8, q, float, f, 64, 2);\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmsq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem3);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfms3_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 2) =\n+    vfmaq_n_f64 (VECT_VAR (vsrc_1, float, 64, 2),\n+\t\t VECT_VAR (vsrc_2, float, 64, 2), delem3);\n+  vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t     VECT_VAR (vector_res, float, 64, 2));\n+  CHECK_FP (TEST_MSG, float, 64, 2, PRIx16, expectedfma3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMS_VFMA_N (FP64)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 64, 1);\n+  DECL_VARIABLE(vsrc_2, float, 64, 1);\n+  VECT_VAR_DECL (buf_src_1, float, 64, 1) [] = {DA0};\n+  VECT_VAR_DECL (buf_src_2, float, 64, 1) [] = {DB0};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 64, 1);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 64, 1);\n+  DECL_VARIABLE (vector_res, float, 64, 1) =\n+    vfms_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem0);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms0_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem0);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma0_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_3, float, 64, 1) [] = {DA2};\n+  VECT_VAR_DECL (buf_src_4, float, 64, 1) [] = {DB2};\n+  VLOAD (vsrc_1, buf_src_3, , float, f, 64, 1);\n+  VLOAD (vsrc_2, buf_src_4, , float, f, 64, 1);\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfms_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem1);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms1_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem1);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma1_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_5, float, 64, 1) [] = {DA4};\n+  VECT_VAR_DECL (buf_src_6, float, 64, 1) [] = {DB4};\n+  VLOAD (vsrc_1, buf_src_5, , float, f, 64, 1);\n+  VLOAD (vsrc_2, buf_src_6, , float, f, 64, 1);\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfms_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem2);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms2_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem2);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma2_static, \"\");\n+\n+  VECT_VAR_DECL (buf_src_7, float, 64, 1) [] = {DA6};\n+  VECT_VAR_DECL (buf_src_8, float, 64, 1) [] = {DB6};\n+  VLOAD (vsrc_1, buf_src_7, , float, f, 64, 1);\n+  VLOAD (vsrc_2, buf_src_8, , float, f, 64, 1);\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfms_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem3);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfms3_static, \"\");\n+  VECT_VAR (vector_res, float, 64, 1) =\n+    vfma_n_f64 (VECT_VAR (vsrc_1, float, 64, 1),\n+\t\tVECT_VAR (vsrc_2, float, 64, 1), delem3);\n+  vst1_f64 (VECT_VAR (result, float, 64, 1),\n+\t     VECT_VAR (vector_res, float, 64, 1));\n+  CHECK_FP (TEST_MSG, float, 64, 1, PRIx16, expectedfma3_static, \"\");\n+}\n+#endif\n+\n+int\n+main (void)\n+{\n+#if defined(__aarch64__) && defined(__ARM_FEATURE_FMA)\n+  exec_vfma_vfms_n ();\n+#endif\n+  return 0;\n+}"}, {"sha": "5b348827002dcfef1f589900a4cf5ff7ada26697", "filename": "gcc/testsuite/gcc.target/aarch64/fmla_intrinsic_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -110,6 +110,6 @@ main (int argc, char **argv)\n /* vfmaq_lane_f64.\n    vfma_laneq_f64.\n    vfmaq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2?d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n "}, {"sha": "6c194a023d34ebafb4d732edc303985531f92a63", "filename": "gcc/testsuite/gcc.target/aarch64/fmls_intrinsic_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b3a5f289f42d2d7e9616ccd02cce40440f2adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c?ref=98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "patch": "@@ -111,6 +111,6 @@ main (int argc, char **argv)\n /* vfmsq_lane_f64.\n    vfms_laneq_f64.\n    vfmsq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2?d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n \n "}]}