{"sha": "54138d95c6b234ec5857782deca4a0a24ea3dcfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxMzhkOTVjNmIyMzRlYzU4NTc3ODJkZWNhNGEwYTI0ZWEzZGNmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-11-14T13:44:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-11-14T13:44:18Z"}, "message": "arm: Rename CC_NOOVmode to CC_NZmode\n\nCC_NZmode is a more accurate description of what we require\nfrom the mode, and matches up with the definition in aarch64.\n\nRename noov_comparison_operator to nz_comparison_operator\nin order to match.\n\n\t* config/arm/arm-modes.def (CC_NZ): Rename from CC_NOOV.\n\t* config/arm/predicates.md (nz_comparison_operator): Rename\n\tfrom noov_comparison_operator.\n\t* config/arm/arm.c (arm_select_cc_mode): Use CC_NZmode name.\n\t(arm_gen_dicompare_reg): Likewise.\n\t(maybe_get_arm_condition_code): Likewise.\n\t(thumb1_final_prescan_insn): Likewise.\n\t(arm_emit_coreregs_64bit_shift): Likewise.\n\t* config/arm/arm.md (addsi3_compare0): Likewise.\n\t(*addsi3_compare0_scratch, subsi3_compare0): Likewise.\n\t(*mulsi3_compare0, *mulsi3_compare0_v6): Likewise.\n\t(*mulsi3_compare0_scratch, *mulsi3_compare0_scratch_v6): Likewise.\n\t(*mulsi3addsi_compare0, *mulsi3addsi_compare0_v6): Likewise.\n\t(*mulsi3addsi_compare0_scratch): Likewise.\n\t(*mulsi3addsi_compare0_scratch_v6): Likewise.\n\t(*andsi3_compare0, *andsi3_compare0_scratch): Likewise.\n\t(*zeroextractsi_compare0_scratch): Likewise.\n\t(*ne_zeroextractsi, *ne_zeroextractsi_shifted): Likewise.\n\t(*ite_ne_zeroextractsi, *ite_ne_zeroextractsi_shifted): Likewise.\n\t(andsi_not_shiftsi_si_scc_no_reuse): Likewise.\n\t(andsi_not_shiftsi_si_scc): Likewise.\n\t(*andsi_notsi_si_compare0, *andsi_notsi_si_compare0_scratch): Likewise.\n\t(*iorsi3_compare0, *iorsi3_compare0_scratch): Likewise.\n\t(*xorsi3_compare0, *xorsi3_compare0_scratch): Likewise.\n\t(*shiftsi3_compare0, *shiftsi3_compare0_scratch): Likewise.\n\t(*not_shiftsi_compare0, *not_shiftsi_compare0_scratch): Likewise.\n\t(*notsi_compare0, *notsi_compare0_scratch): Likewise.\n\t(return_addr_mask, *check_arch2): Likewise.\n\t(*arith_shiftsi_compare0, *arith_shiftsi_compare0_scratch): Likewise.\n\t(*sub_shiftsi_compare0, *sub_shiftsi_compare0_scratch): Likewise.\n\t(compare_scc splitters): Likewise.\n\t(movcond_addsi): Likewise.\n\t* config/arm/thumb2.md (thumb2_addsi3_compare0): Likewise.\n\t(*thumb2_addsi3_compare0_scratch): Likewise.\n\t(*thumb2_mulsi_short_compare0): Likewise.\n\t(*thumb2_mulsi_short_compare0_scratch): Likewise.\n\t(compare peephole2s): Likewise.\n\t* config/arm/thumb1.md (thumb1_cbz): Use CC_NZmode and\n\tnz_comparison_operator names.\n\t(cbranchsi4_insn): Likewise.\n\nFrom-SVN: r278225", "tree": {"sha": "7c381f39117ecf07ce50767f8bc684803415cdbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c381f39117ecf07ce50767f8bc684803415cdbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54138d95c6b234ec5857782deca4a0a24ea3dcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54138d95c6b234ec5857782deca4a0a24ea3dcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54138d95c6b234ec5857782deca4a0a24ea3dcfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54138d95c6b234ec5857782deca4a0a24ea3dcfc/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0be72bfaeb94de26a8fcdac98aabe42139f98bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be72bfaeb94de26a8fcdac98aabe42139f98bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be72bfaeb94de26a8fcdac98aabe42139f98bbb"}], "stats": {"total": 287, "additions": 164, "deletions": 123}, "files": [{"sha": "1043db59c8f1f9ccc1180dff4711bd15492a2a79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -1,5 +1,46 @@\n 2019-11-14  Richard Henderson  <richard.henderson@linaro.org>\n \n+\t* config/arm/arm-modes.def (CC_NZ): Rename from CC_NOOV.\n+\t* config/arm/predicates.md (nz_comparison_operator): Rename\n+\tfrom noov_comparison_operator.\n+\t* config/arm/arm.c (arm_select_cc_mode): Use CC_NZmode name.\n+\t(arm_gen_dicompare_reg): Likewise.\n+\t(maybe_get_arm_condition_code): Likewise.\n+\t(thumb1_final_prescan_insn): Likewise.\n+\t(arm_emit_coreregs_64bit_shift): Likewise.\n+\t* config/arm/arm.md (addsi3_compare0): Likewise.\n+\t(*addsi3_compare0_scratch, subsi3_compare0): Likewise.\n+\t(*mulsi3_compare0, *mulsi3_compare0_v6): Likewise.\n+\t(*mulsi3_compare0_scratch, *mulsi3_compare0_scratch_v6): Likewise.\n+\t(*mulsi3addsi_compare0, *mulsi3addsi_compare0_v6): Likewise.\n+\t(*mulsi3addsi_compare0_scratch): Likewise.\n+\t(*mulsi3addsi_compare0_scratch_v6): Likewise.\n+\t(*andsi3_compare0, *andsi3_compare0_scratch): Likewise.\n+\t(*zeroextractsi_compare0_scratch): Likewise.\n+\t(*ne_zeroextractsi, *ne_zeroextractsi_shifted): Likewise.\n+\t(*ite_ne_zeroextractsi, *ite_ne_zeroextractsi_shifted): Likewise.\n+\t(andsi_not_shiftsi_si_scc_no_reuse): Likewise.\n+\t(andsi_not_shiftsi_si_scc): Likewise.\n+\t(*andsi_notsi_si_compare0, *andsi_notsi_si_compare0_scratch): Likewise.\n+\t(*iorsi3_compare0, *iorsi3_compare0_scratch): Likewise.\n+\t(*xorsi3_compare0, *xorsi3_compare0_scratch): Likewise.\n+\t(*shiftsi3_compare0, *shiftsi3_compare0_scratch): Likewise.\n+\t(*not_shiftsi_compare0, *not_shiftsi_compare0_scratch): Likewise.\n+\t(*notsi_compare0, *notsi_compare0_scratch): Likewise.\n+\t(return_addr_mask, *check_arch2): Likewise.\n+\t(*arith_shiftsi_compare0, *arith_shiftsi_compare0_scratch): Likewise.\n+\t(*sub_shiftsi_compare0, *sub_shiftsi_compare0_scratch): Likewise.\n+\t(compare_scc splitters): Likewise.\n+\t(movcond_addsi): Likewise.\n+\t* config/arm/thumb2.md (thumb2_addsi3_compare0): Likewise.\n+\t(*thumb2_addsi3_compare0_scratch): Likewise.\n+\t(*thumb2_mulsi_short_compare0): Likewise.\n+\t(*thumb2_mulsi_short_compare0_scratch): Likewise.\n+\t(compare peephole2s): Likewise.\n+\t* config/arm/thumb1.md (thumb1_cbz): Use CC_NZmode and\n+\tnz_comparison_operator names.\n+\t(cbranchsi4_insn): Likewise.\n+\n \t* config/arm/constraints.md (c): Use cc_register predicate.\n \n \t* config/aarch64/constraints.md (c): New constraint."}, {"sha": "2ce53e0efba46608026f334794b6cdb8c2c3c957", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -29,7 +29,7 @@ ADJUST_FLOAT_FORMAT (HF, ((arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n \n /* CCFPEmode should be used with floating inequalities,\n    CCFPmode should be used with floating equalities.\n-   CC_NOOVmode should be used with SImode integer equalities.\n+   CC_NZmode should be used if only the N and Z bits are set correctly.\n    CC_Zmode should be used if only the Z flag is set correctly\n    CC_Cmode should be used if only the C flag is set correctly, after an\n      addition.\n@@ -47,7 +47,7 @@ ADJUST_FLOAT_FORMAT (HF, ((arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n      against one of the other operands.\n    CCmode should be used otherwise.  */\n \n-CC_MODE (CC_NOOV);\n+CC_MODE (CC_NZ);\n CC_MODE (CC_Z);\n CC_MODE (CC_NV);\n CC_MODE (CC_SWP);"}, {"sha": "d996207853c2bb9b763d2459a43e8708724dafee", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -15376,7 +15376,7 @@ arm_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \t  || GET_CODE (x) == ASHIFT || GET_CODE (x) == ASHIFTRT\n \t  || GET_CODE (x) == ROTATERT\n \t  || (TARGET_32BIT && GET_CODE (x) == ZERO_EXTRACT)))\n-    return CC_NOOVmode;\n+    return CC_NZmode;\n \n   /* A comparison of ~reg with a const is really a special\n      canoncialization of compare (~const, reg), which is a reverse\n@@ -15492,11 +15492,11 @@ arm_gen_dicompare_reg (rtx_code code, rtx x, rtx y, rtx scratch)\n \t      }\n \n \t    rtx clobber = gen_rtx_CLOBBER (VOIDmode, scratch);\n-\t    cc_reg = gen_rtx_REG (CC_NOOVmode, CC_REGNUM);\n+\t    cc_reg = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n \n \t    rtx set\n \t      = gen_rtx_SET (cc_reg,\n-\t\t\t     gen_rtx_COMPARE (CC_NOOVmode,\n+\t\t\t     gen_rtx_COMPARE (CC_NZmode,\n \t\t\t\t\t      gen_rtx_IOR (SImode, x_lo, x_hi),\n \t\t\t\t\t      const0_rtx));\n \t    emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set,\n@@ -23881,7 +23881,7 @@ maybe_get_arm_condition_code (rtx comparison)\n \treturn code;\n       return ARM_NV;\n \n-    case E_CC_NOOVmode:\n+    case E_CC_NZmode:\n       switch (comp_code)\n \t{\n \tcase NE: return ARM_NE;\n@@ -25304,7 +25304,7 @@ thumb1_final_prescan_insn (rtx_insn *insn)\n \t  cfun->machine->thumb1_cc_insn = insn;\n \t  cfun->machine->thumb1_cc_op0 = SET_DEST (set);\n \t  cfun->machine->thumb1_cc_op1 = const0_rtx;\n-\t  cfun->machine->thumb1_cc_mode = CC_NOOVmode;\n+\t  cfun->machine->thumb1_cc_mode = CC_NZmode;\n \t  if (INSN_CODE (insn) == CODE_FOR_thumb1_subsi3_insn)\n \t    {\n \t      rtx src1 = XEXP (SET_SRC (set), 1);\n@@ -30486,7 +30486,7 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n   else\n     {\n       /* We have a shift-by-register.  */\n-      rtx cc_reg = gen_rtx_REG (CC_NOOVmode, CC_REGNUM);\n+      rtx cc_reg = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n \n       /* This alternative requires the scratch registers.  */\n       gcc_assert (scratch1 && REG_P (scratch1));"}, {"sha": "823312e7eac61b21bc61269ecbc902d1a37e0304", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 93, "deletions": 93, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -1078,8 +1078,8 @@\n )\n \n (define_insn \"addsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r, r,r\")\n \t\t  (match_operand:SI 2 \"arm_add_operand\"    \"I,L,r\"))\n \t (const_int 0)))\n@@ -1095,8 +1095,8 @@\n )\n \n (define_insn \"*addsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r, r, r\")\n \t\t  (match_operand:SI 1 \"arm_add_operand\"    \"I,L, r\"))\n \t (const_int 0)))]\n@@ -2017,8 +2017,8 @@\n )\n \n (define_insn \"subsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n \t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"I,r,r\"))\n \t (const_int 0)))\n@@ -2256,8 +2256,8 @@\n )\n \n (define_insn \"*mulsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (mult:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%0,r\"))\n \t\t\t (const_int 0)))\n@@ -2270,8 +2270,8 @@\n )\n \n (define_insn \"*mulsi3_compare0_v6\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (mult:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")\n \t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n@@ -2284,8 +2284,8 @@\n )\n \n (define_insn \"*mulsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (mult:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%0,r\"))\n \t\t\t (const_int 0)))\n@@ -2297,8 +2297,8 @@\n )\n \n (define_insn \"*mulsi_compare0_scratch_v6\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (mult:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")\n \t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n@@ -2310,8 +2310,8 @@\n )\n \n (define_insn \"*mulsi3addsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (mult:SI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"%0,r,0,r\"))\n@@ -2327,8 +2327,8 @@\n )\n \n (define_insn \"*mulsi3addsi_compare0_v6\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (mult:SI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n@@ -2344,8 +2344,8 @@\n )\n \n (define_insn \"*mulsi3addsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (mult:SI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"%0,r,0,r\"))\n@@ -2359,8 +2359,8 @@\n )\n \n (define_insn \"*mulsi3addsi_compare0_scratch_v6\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (mult:SI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n@@ -3004,8 +3004,8 @@\n )\n \n (define_insn \"*andsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n \t\t (match_operand:SI 2 \"arm_not_operand\" \"I,K,r\"))\n \t (const_int 0)))\n@@ -3021,8 +3021,8 @@\n )\n \n (define_insn \"*andsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n \t\t (match_operand:SI 1 \"arm_not_operand\" \"I,K,r\"))\n \t (const_int 0)))\n@@ -3037,8 +3037,8 @@\n )\n \n (define_insn \"*zeroextractsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (zero_extract:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (zero_extract:SI\n \t\t\t  (match_operand:SI 0 \"s_register_operand\" \"r\")\n \t\t\t  (match_operand 1 \"const_int_operand\" \"n\")\n \t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n@@ -3078,12 +3078,12 @@\n        && INTVAL (operands[2]) > 0 \n        && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n        && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\"\n-  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n-\t\t   (compare:CC_NOOV (and:SI (match_dup 1) (match_dup 2))\n+  [(parallel [(set (reg:CC_NZ CC_REGNUM)\n+\t\t   (compare:CC_NZ (and:SI (match_dup 1) (match_dup 2))\n \t\t\t\t    (const_int 0)))\n \t      (set (match_dup 0) (and:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 0)\n-\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t(if_then_else:SI (eq (reg:CC_NZ CC_REGNUM) (const_int 0))\n \t\t\t (match_dup 0) (const_int 1)))]\n   \"\n   operands[2] = GEN_INT (((1 << INTVAL (operands[2])) - 1)\n@@ -3108,12 +3108,12 @@\n   \"TARGET_ARM\"\n   \"#\"\n   \"TARGET_ARM\"\n-  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n-\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n+  [(parallel [(set (reg:CC_NZ CC_REGNUM)\n+\t\t   (compare:CC_NZ (ashift:SI (match_dup 1) (match_dup 2))\n \t\t\t\t    (const_int 0)))\n \t      (set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 0)\n-\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t(if_then_else:SI (eq (reg:CC_NZ CC_REGNUM) (const_int 0))\n \t\t\t (match_dup 0) (const_int 1)))]\n   \"\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n@@ -3146,12 +3146,12 @@\n        && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n        && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\n    && !reg_overlap_mentioned_p (operands[0], operands[4])\"\n-  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n-\t\t   (compare:CC_NOOV (and:SI (match_dup 1) (match_dup 2))\n+  [(parallel [(set (reg:CC_NZ CC_REGNUM)\n+\t\t   (compare:CC_NZ (and:SI (match_dup 1) (match_dup 2))\n \t\t\t\t    (const_int 0)))\n \t      (set (match_dup 0) (and:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 0)\n-\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t(if_then_else:SI (eq (reg:CC_NZ CC_REGNUM) (const_int 0))\n \t\t\t (match_dup 0) (match_dup 4)))]\n   \"\n   operands[2] = GEN_INT (((1 << INTVAL (operands[2])) - 1)\n@@ -3175,12 +3175,12 @@\n   \"TARGET_ARM && !reg_overlap_mentioned_p (operands[0], operands[3])\"\n   \"#\"\n   \"TARGET_ARM && !reg_overlap_mentioned_p (operands[0], operands[3])\"\n-  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n-\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n+  [(parallel [(set (reg:CC_NZ CC_REGNUM)\n+\t\t   (compare:CC_NZ (ashift:SI (match_dup 1) (match_dup 2))\n \t\t\t\t    (const_int 0)))\n \t      (set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 0)\n-\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t(if_then_else:SI (eq (reg:CC_NZ CC_REGNUM) (const_int 0))\n \t\t\t (match_dup 0) (match_dup 3)))]\n   \"\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n@@ -3498,8 +3498,8 @@\n ;; bics output.  Pattern restricts Thumb2 shift operand as bics for Thumb2\n ;; does not support shift by register.\n (define_insn \"andsi_not_shiftsi_si_scc_no_reuse\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n \t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n@@ -3518,8 +3518,8 @@\n ;; Same as andsi_not_shiftsi_si_scc_no_reuse, but the bics result is also\n ;; getting reused later.\n (define_insn \"andsi_not_shiftsi_si_scc\"\n-  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(parallel [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n \t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n@@ -3540,8 +3540,8 @@\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t (const_int 0)))\n@@ -3554,8 +3554,8 @@\n )\n \n (define_insn \"*andsi_notsi_si_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t (const_int 0)))\n@@ -3644,8 +3644,8 @@\n )\n \n (define_insn \"*iorsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,0,r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,l,r\"))\n \t (const_int 0)))\n@@ -3660,8 +3660,8 @@\n )\n \n (define_insn \"*iorsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,0,r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,l,r\"))\n \t (const_int 0)))\n@@ -3734,8 +3734,8 @@\n )\n \n (define_insn \"*xorsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (xor:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (xor:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -3747,8 +3747,8 @@\n )\n \n (define_insn \"*xorsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (xor:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (xor:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n \t\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"I,r\"))\n \t\t\t (const_int 0)))]\n   \"TARGET_32BIT\"\n@@ -4524,8 +4524,8 @@\n )\n \n (define_insn \"*shiftsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n \t\t\t (const_int 0)))\n@@ -4539,8 +4539,8 @@\n )\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n \t\t\t (const_int 0)))\n@@ -4565,8 +4565,8 @@\n    (set_attr \"type\" \"mvn_shift,mvn_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n@@ -4581,8 +4581,8 @@\n    (set_attr \"type\" \"mvn_shift,mvn_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n@@ -5172,8 +5172,8 @@\n )\n \n (define_insn \"*notsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_dup 1)))]\n@@ -5184,8 +5184,8 @@\n )\n \n (define_insn \"*notsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_32BIT\"\n@@ -8787,20 +8787,20 @@\n \n (define_expand \"return_addr_mask\"\n   [(set (match_dup 1)\n-      (compare:CC_NOOV (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n+      (compare:CC_NZ (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n \t\t       (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\")\n       (if_then_else:SI (eq (match_dup 1) (const_int 0))\n \t\t       (const_int -1)\n \t\t       (const_int 67108860)))] ; 0x03fffffc\n   \"TARGET_ARM\"\n   \"\n-  operands[1] = gen_rtx_REG (CC_NOOVmode, CC_REGNUM);\n+  operands[1] = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n   \")\n \n (define_insn \"*check_arch2\"\n-  [(set (match_operand:CC_NOOV 0 \"cc_register\" \"\")\n-      (compare:CC_NOOV (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n+  [(set (match_operand:CC_NZ 0 \"cc_register\" \"\")\n+      (compare:CC_NZ (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n \t\t       (const_int 0)))]\n   \"TARGET_ARM\"\n   \"teq\\\\t%|r0, %|r0\\;teq\\\\t%|pc, %|pc\"\n@@ -9336,8 +9336,8 @@\n   \"\")\n \n (define_insn \"*arith_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+        (compare:CC_NZ\n \t (match_operator:SI 1 \"shiftable_operator\"\n \t  [(match_operator:SI 3 \"shift_operator\"\n \t    [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n@@ -9355,8 +9355,8 @@\n    (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+        (compare:CC_NZ\n \t (match_operator:SI 1 \"shiftable_operator\"\n \t  [(match_operator:SI 3 \"shift_operator\"\n \t    [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n@@ -9386,8 +9386,8 @@\n    (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n \t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n@@ -9404,8 +9404,8 @@\n    (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n \t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n@@ -9549,11 +9549,11 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT && reload_completed\"\n   [(parallel\n-    [(set (reg:CC_NOOV CC_REGNUM)\n-\t  (compare:CC_NOOV (minus:SI (match_dup 1) (match_dup 2))\n+    [(set (reg:CC_NZ CC_REGNUM)\n+\t  (compare:CC_NZ (minus:SI (match_dup 1) (match_dup 2))\n \t\t\t   (const_int 0)))\n      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (cond_exec (ne:CC_NOOV (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+   (cond_exec (ne:CC_NZ (reg:CC_NZ CC_REGNUM) (const_int 0))\n \t      (set (match_dup 0) (const_int 1)))])\n \n (define_insn_and_split \"*compare_scc\"\n@@ -10258,8 +10258,8 @@\n )\n \n (define_split\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (ior:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (ior:SI\n \t\t\t  (and:SI (match_operand:SI 0 \"s_register_operand\" \"\")\n \t\t\t\t  (const_int 1))\n \t\t\t  (match_operator:SI 1 \"arm_comparison_operator\"\n@@ -10271,14 +10271,14 @@\n   [(set (match_dup 4)\n \t(ior:SI (match_op_dup 1 [(match_dup 2) (match_dup 3)])\n \t\t(match_dup 0)))\n-   (set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (and:SI (match_dup 4) (const_int 1))\n+   (set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (and:SI (match_dup 4) (const_int 1))\n \t\t\t (const_int 0)))]\n   \"\")\n \n (define_split\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (ior:SI\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (ior:SI\n \t\t\t  (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t\t   [(match_operand:SI 2 \"s_register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"arm_add_operand\" \"\")])\n@@ -10290,8 +10290,8 @@\n   [(set (match_dup 4)\n \t(ior:SI (match_op_dup 1 [(match_dup 2) (match_dup 3)])\n \t\t(match_dup 0)))\n-   (set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (and:SI (match_dup 4) (const_int 1))\n+   (set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (and:SI (match_dup 4) (const_int 1))\n \t\t\t (const_int 0)))]\n   \"\")\n ;; ??? The conditional patterns above need checking for Thumb-2 usefulness\n@@ -10380,8 +10380,8 @@\n    \"TARGET_32BIT\"\n    \"#\"\n    \"&& reload_completed\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t (plus:SI (match_dup 3)\n \t\t  (match_dup 4))\n \t (const_int 0)))"}, {"sha": "6e9263553cc00988e3feeea935fd5352afde0323", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -430,7 +430,7 @@\n \t\t     (match_operand 0 \"arm_vsel_comparison_operator\"))\n \t\t(match_operand 0 \"expandable_comparison_operator\")))\n \n-(define_special_predicate \"noov_comparison_operator\"\n+(define_special_predicate \"nz_comparison_operator\"\n   (match_code \"lt,ge,eq,ne\"))\n \n (define_special_predicate \"minmax_operator\""}, {"sha": "9df793cc47cbda6f0f377c1314a05416d41778fa", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -1023,9 +1023,9 @@\n \t  if (!rtx_equal_p (cfun->machine->thumb1_cc_op0, operands[1])\n \t      || !rtx_equal_p (cfun->machine->thumb1_cc_op1, operands[2]))\n \t    t = NULL_RTX;\n-\t  if (cfun->machine->thumb1_cc_mode == CC_NOOVmode)\n+\t  if (cfun->machine->thumb1_cc_mode == CC_NZmode)\n \t    {\n-\t      if (!noov_comparison_operator (operands[0], VOIDmode))\n+\t      if (!nz_comparison_operator (operands[0], VOIDmode))\n \t\tt = NULL_RTX;\n \t    }\n \t  else if (cfun->machine->thumb1_cc_mode != CCmode)\n@@ -1097,9 +1097,9 @@\n       if (!rtx_equal_p (cfun->machine->thumb1_cc_op0, operands[1])\n \t  || !rtx_equal_p (cfun->machine->thumb1_cc_op1, operands[2]))\n \tt = NULL_RTX;\n-      if (cfun->machine->thumb1_cc_mode == CC_NOOVmode)\n+      if (cfun->machine->thumb1_cc_mode == CC_NZmode)\n \t{\n-\t  if (!noov_comparison_operator (operands[0], VOIDmode))\n+\t  if (!nz_comparison_operator (operands[0], VOIDmode))\n \t    t = NULL_RTX;\n \t}\n       else if (cfun->machine->thumb1_cc_mode != CCmode)"}, {"sha": "2558e404b8837bfb4924158ae3fff9ecf9a2ee9a", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54138d95c6b234ec5857782deca4a0a24ea3dcfc/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=54138d95c6b234ec5857782deca4a0a24ea3dcfc", "patch": "@@ -1287,8 +1287,8 @@\n )\n \n (define_insn \"thumb2_addsi3_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t  (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,  0, r\")\n \t\t   (match_operand:SI 2 \"arm_add_operand\"    \"lPt,Ps,rIL\"))\n \t  (const_int 0)))\n@@ -1321,8 +1321,8 @@\n )\n \n (define_insn \"*thumb2_addsi3_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n \t  (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,  r\")\n \t\t   (match_operand:SI 1 \"arm_add_operand\"    \"lPv,rIL\"))\n \t  (const_int 0)))]\n@@ -1359,8 +1359,8 @@\n    (set_attr \"type\" \"muls\")])\n \n (define_insn \"*thumb2_mulsi_short_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+        (compare:CC_NZ\n          (mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t          (match_operand:SI 2 \"register_operand\" \"l\"))\n          (const_int 0)))\n@@ -1372,8 +1372,8 @@\n    (set_attr \"type\" \"muls\")])\n \n (define_insn \"*thumb2_mulsi_short_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV\n+  [(set (reg:CC_NZ CC_REGNUM)\n+        (compare:CC_NZ\n          (mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t          (match_operand:SI 2 \"register_operand\" \"l\"))\n          (const_int 0)))\n@@ -1477,23 +1477,23 @@\n )\n \n (define_peephole2\n-  [(set (match_operand:CC_NOOV 0 \"cc_register\" \"\")\n-\t(compare:CC_NOOV (zero_extract:SI\n+  [(set (match_operand:CC_NZ 0 \"cc_register\" \"\")\n+\t(compare:CC_NZ (zero_extract:SI\n \t\t\t  (match_operand:SI 1 \"low_register_operand\" \"\")\n \t\t\t  (const_int 1)\n \t\t\t  (match_operand:SI 2 \"const_int_operand\" \"\"))\n \t\t\t (const_int 0)))\n    (match_scratch:SI 3 \"l\")\n    (set (pc)\n-\t(if_then_else (match_operator:CC_NOOV 4 \"equality_operator\"\n+\t(if_then_else (match_operator:CC_NZ 4 \"equality_operator\"\n \t\t       [(match_dup 0) (const_int 0)])\n \t\t      (match_operand 5 \"\" \"\")\n \t\t      (match_operand 6 \"\" \"\")))]\n   \"TARGET_THUMB2\n    && (INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) < 32)\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t   (compare:CC_NZ (ashift:SI (match_dup 1) (match_dup 2))\n \t\t\t\t    (const_int 0)))\n \t      (clobber (match_dup 3))])\n    (set (pc)\n@@ -1506,24 +1506,24 @@\n   \")\n \n (define_peephole2\n-  [(set (match_operand:CC_NOOV 0 \"cc_register\" \"\")\n-\t(compare:CC_NOOV (zero_extract:SI\n+  [(set (match_operand:CC_NZ 0 \"cc_register\" \"\")\n+\t(compare:CC_NZ (zero_extract:SI\n \t\t\t  (match_operand:SI 1 \"low_register_operand\" \"\")\n \t\t\t  (match_operand:SI 2 \"const_int_operand\" \"\")\n \t\t\t  (const_int 0))\n \t\t\t (const_int 0)))\n    (match_scratch:SI 3 \"l\")\n    (set (pc)\n-\t(if_then_else (match_operator:CC_NOOV 4 \"equality_operator\"\n+\t(if_then_else (match_operator:CC_NZ 4 \"equality_operator\"\n \t\t       [(match_dup 0) (const_int 0)])\n \t\t      (match_operand 5 \"\" \"\")\n \t\t      (match_operand 6 \"\" \"\")))]\n   \"TARGET_THUMB2\n    && (INTVAL (operands[2]) > 0 && INTVAL (operands[2]) < 32)\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t    (const_int 0)))\n+\t\t   (compare:CC_NZ (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t  (const_int 0)))\n \t      (clobber (match_dup 3))])\n    (set (pc)\n \t(if_then_else (match_op_dup 4 [(match_dup 0) (const_int 0)])"}]}