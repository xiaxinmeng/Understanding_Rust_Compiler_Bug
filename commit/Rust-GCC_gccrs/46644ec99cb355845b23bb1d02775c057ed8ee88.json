{"sha": "46644ec99cb355845b23bb1d02775c057ed8ee88", "node_id": "C_kwDOANBUbNoAKDQ2NjQ0ZWM5OWNiMzU1ODQ1YjIzYmIxZDAyNzc1YzA1N2VkOGVlODg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T20:00:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T20:00:08Z"}, "message": "openmp: Fix up OpenMP expansion of non-rectangular loops [PR108459]\n\nexpand_omp_for_init_counts was using for the case where collapse(2)\ninner loop has init expression dependent on non-constant multiple of\nthe outer iterator and the condition upper bound expression doesn't\ndepend on the outer iterator fold_unary (NEGATE_EXPR, ...).  This\nwill just return NULL if it can't be folded, we need fold_build1\ninstead.\n\n2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/108459\n\t* omp-expand.cc (expand_omp_for_init_counts): Use fold_build1 rather\n\tthan fold_unary for NEGATE_EXPR.\n\n\t* testsuite/libgomp.c/pr108459.c: New test.", "tree": {"sha": "6337106ebc645131d1f267b8ea906b85f7f5cada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6337106ebc645131d1f267b8ea906b85f7f5cada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46644ec99cb355845b23bb1d02775c057ed8ee88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46644ec99cb355845b23bb1d02775c057ed8ee88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46644ec99cb355845b23bb1d02775c057ed8ee88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46644ec99cb355845b23bb1d02775c057ed8ee88/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d6f7b1dd62e9c9dccb0b9b673f9cc3238b7ea6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6f7b1dd62e9c9dccb0b9b673f9cc3238b7ea6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6f7b1dd62e9c9dccb0b9b673f9cc3238b7ea6d"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "940454ba5b675400c975bdf51e88258d4c05e972", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46644ec99cb355845b23bb1d02775c057ed8ee88/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46644ec99cb355845b23bb1d02775c057ed8ee88/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=46644ec99cb355845b23bb1d02775c057ed8ee88", "patch": "@@ -2003,8 +2003,8 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t    t = fold_build2 (MINUS_EXPR, itype, unshare_expr (fd->loops[i].m2),\n \t\t\t     unshare_expr (fd->loops[i].m1));\n \t  else if (fd->loops[i].m1)\n-\t    t = fold_unary (NEGATE_EXPR, itype,\n-\t\t\t    unshare_expr (fd->loops[i].m1));\n+\t    t = fold_build1 (NEGATE_EXPR, itype,\n+\t\t\t     unshare_expr (fd->loops[i].m1));\n \t  else\n \t    t = unshare_expr (fd->loops[i].m2);\n \t  tree m2minusm1"}, {"sha": "87ce981e08076a6fccd9083c59dfeab3cb43b552", "filename": "libgomp/testsuite/libgomp.c/pr108459.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46644ec99cb355845b23bb1d02775c057ed8ee88/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr108459.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46644ec99cb355845b23bb1d02775c057ed8ee88/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr108459.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr108459.c?ref=46644ec99cb355845b23bb1d02775c057ed8ee88", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/108459 */\n+\n+char a[17][17];\n+\n+__attribute__((noipa)) void\n+foo (int x, int y)\n+{\n+  #pragma omp for collapse(2)\n+  for (int i = 1; i <= 16; i++)\n+    for (int j = i * x + y; j <= 16; j++)\n+      a[i][j] = 1;\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp parallel\n+  foo (1, 1);\n+  for (int i = 0; i <= 16; i++)\n+    for (int j = 0; j <= 16; j++)\n+      if (i >= 1 && j >= i + 1)\n+\t{\n+\t  if (a[i][j] != 1)\n+\t    __builtin_abort ();\n+\t  a[i][j] = 0;\n+\t}\n+      else if (a[i][j])\n+\t__builtin_abort ();\n+  #pragma omp parallel\n+  foo (2, -2);\n+  for (int i = 0; i <= 16; i++)\n+    for (int j = 0; j <= 16; j++)\n+      if (i >= 1 && j >= 2 * i - 2)\n+\t{\n+\t  if (a[i][j] != 1)\n+\t    __builtin_abort ();\n+\t}\n+      else if (a[i][j])\n+\t__builtin_abort ();\n+  return 0;\n+}"}]}