{"sha": "4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjNDRjZWI5MWMwZjdhZDMyNTBiOGIwMWJkZWJlNGU4YjAwM2Y4Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-01-09T23:28:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-01-09T23:28:10Z"}, "message": "compiler: Add flattening pass\n\nFrom-SVN: r206502", "tree": {"sha": "c528403ee91166ddae1e31a8413eab3bacb5f12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c528403ee91166ddae1e31a8413eab3bacb5f12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/comments", "author": null, "committer": null, "parents": [{"sha": "abd471378cbe20d51cc6a9c8b4f20907ef0f6825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd471378cbe20d51cc6a9c8b4f20907ef0f6825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd471378cbe20d51cc6a9c8b4f20907ef0f6825"}], "stats": {"total": 272, "additions": 267, "deletions": 5}, "files": [{"sha": "66fbac3029a64e2252e04c97e6c3bbdf61da4828", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -575,6 +575,18 @@ class Expression\n \tint iota_value)\n   { return this->do_lower(gogo, function, inserter, iota_value); }\n \n+  // Flatten an expression. This is called after order_evaluation.\n+  // FUNCTION is the function we are in; it will be NULL for an\n+  // expression initializing a global variable.  INSERTER may be used\n+  // to insert statements before the statement or initializer\n+  // containing this expression; it is normally used to create\n+  // temporary variables. This function must resolve expressions\n+  // which could not be fully parsed into their final form.  It\n+  // returns the same Expression or a new one.\n+  Expression*\n+  flatten(Gogo* gogo, Named_object* function, Statement_inserter* inserter)\n+  { return this->do_flatten(gogo, function, inserter); }\n+\n   // Determine the real type of an expression with abstract integer,\n   // floating point, or complex type.  TYPE_CONTEXT describes the\n   // expected type.\n@@ -698,6 +710,12 @@ class Expression\n   do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n   { return this; }\n \n+  // Return a flattened expression.\n+  virtual Expression*\n+  do_flatten(Gogo*, Named_object*, Statement_inserter*)\n+  { return this; }\n+\n+\n   // Return whether this is a constant expression.\n   virtual bool\n   do_is_constant() const"}, {"sha": "26e83a1db64f8534a962f326bc22e41456c4a554", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -119,12 +119,15 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Use temporary variables to force order of evaluation.\n   ::gogo->order_evaluations();\n \n+  // Flatten the parse tree.\n+  ::gogo->flatten();\n+\n   // Build thunks for functions which call recover.\n   ::gogo->build_recover_thunks();\n \n   // Convert complicated go and defer statements into simpler ones.\n   ::gogo->simplify_thunk_statements();\n-  \n+\n   // Dump ast, use filename[0] as the base name\n   ::gogo->dump_ast(filenames[0]);\n }"}, {"sha": "9e822e63c6d3a220508ef032e08d28d95b57ca2b", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 202, "deletions": 4, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -2703,6 +2703,169 @@ Gogo::order_evaluations()\n   this->traverse(&order_eval);\n }\n \n+// Traversal to flatten parse tree after order of evaluation rules are applied.\n+\n+class Flatten : public Traverse\n+{\n+ public:\n+  Flatten(Gogo* gogo, Named_object* function)\n+    : Traverse(traverse_variables\n+\t       | traverse_functions\n+\t       | traverse_statements\n+\t       | traverse_expressions),\n+      gogo_(gogo), function_(function), inserter_()\n+  { }\n+\n+  void\n+  set_inserter(const Statement_inserter* inserter)\n+  { this->inserter_ = *inserter; }\n+\n+  int\n+  variable(Named_object*);\n+\n+  int\n+  function(Named_object*);\n+\n+  int\n+  statement(Block*, size_t* pindex, Statement*);\n+\n+  int\n+  expression(Expression**);\n+\n+ private:\n+  // General IR.\n+  Gogo* gogo_;\n+  // The function we are traversing.\n+  Named_object* function_;\n+  // Current statement inserter for use by expressions.\n+  Statement_inserter inserter_;\n+};\n+\n+// Flatten variables.\n+\n+int\n+Flatten::variable(Named_object* no)\n+{\n+  if (!no->is_variable())\n+    return TRAVERSE_CONTINUE;\n+\n+  if (no->is_variable() && no->var_value()->is_global())\n+    {\n+      // Global variables can have loops in their initialization\n+      // expressions.  This is handled in flatten_init_expression.\n+      no->var_value()->flatten_init_expression(this->gogo_, this->function_,\n+                                               &this->inserter_);\n+      return TRAVERSE_CONTINUE;\n+    }\n+\n+  go_assert(!no->var_value()->has_pre_init());\n+\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Flatten the body of a function.  Record the function while flattening it,\n+// so that we can pass it down when flattening an expression.\n+\n+int\n+Flatten::function(Named_object* no)\n+{\n+  go_assert(this->function_ == NULL);\n+  this->function_ = no;\n+  int t = no->func_value()->traverse(this);\n+  this->function_ = NULL;\n+\n+  if (t == TRAVERSE_EXIT)\n+    return t;\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Flatten statement parse trees.\n+\n+int\n+Flatten::statement(Block* block, size_t* pindex, Statement* sorig)\n+{\n+  // Because we explicitly traverse the statement's contents\n+  // ourselves, we want to skip block statements here.  There is\n+  // nothing to flatten in a block statement.\n+  if (sorig->is_block_statement())\n+    return TRAVERSE_CONTINUE;\n+\n+  Statement_inserter hold_inserter(this->inserter_);\n+  this->inserter_ = Statement_inserter(block, pindex);\n+\n+  // Flatten the expressions first.\n+  int t = sorig->traverse_contents(this);\n+  if (t == TRAVERSE_EXIT)\n+    {\n+      this->inserter_ = hold_inserter;\n+      return t;\n+    }\n+\n+  // Keep flattening until nothing changes.\n+  Statement* s = sorig;\n+  while (true)\n+    {\n+      Statement* snew = s->flatten(this->gogo_, this->function_, block,\n+                                   &this->inserter_);\n+      if (snew == s)\n+\tbreak;\n+      s = snew;\n+      t = s->traverse_contents(this);\n+      if (t == TRAVERSE_EXIT)\n+\t{\n+\t  this->inserter_ = hold_inserter;\n+\t  return t;\n+\t}\n+    }\n+\n+  if (s != sorig)\n+    block->replace_statement(*pindex, s);\n+\n+  this->inserter_ = hold_inserter;\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Flatten expression parse trees.\n+\n+int\n+Flatten::expression(Expression** pexpr)\n+{\n+  // Keep flattening until nothing changes.\n+  while (true)\n+    {\n+      Expression* e = *pexpr;\n+      if (e->traverse_subexpressions(this) == TRAVERSE_EXIT)\n+        return TRAVERSE_EXIT;\n+\n+      Expression* enew = e->flatten(this->gogo_, this->function_,\n+                                    &this->inserter_);\n+      if (enew == e)\n+\tbreak;\n+      *pexpr = enew;\n+    }\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Flatten an expression.  INSERTER may be NULL, in which case the\n+// expression had better not need to create any temporaries.\n+\n+void\n+Gogo::flatten_expression(Named_object* function, Statement_inserter* inserter,\n+                         Expression** pexpr)\n+{\n+  Flatten flatten(this, function);\n+  if (inserter != NULL)\n+    flatten.set_inserter(inserter);\n+  flatten.expression(pexpr);\n+}\n+\n+void\n+Gogo::flatten()\n+{\n+  Flatten flatten(this, NULL);\n+  this->traverse(&flatten);\n+}\n+\n // Traversal to convert calls to the predeclared recover function to\n // pass in an argument indicating whether it can recover from a panic\n // or not.\n@@ -4286,10 +4449,11 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n     backend_(NULL), is_global_(is_global), is_parameter_(is_parameter),\n     is_receiver_(is_receiver), is_varargs_parameter_(false), is_used_(false),\n     is_address_taken_(false), is_non_escaping_address_taken_(false),\n-    seen_(false), init_is_lowered_(false), type_from_init_tuple_(false),\n-    type_from_range_index_(false), type_from_range_value_(false),\n-    type_from_chan_element_(false), is_type_switch_var_(false),\n-    determined_type_(false), in_unique_section_(false)\n+    seen_(false), init_is_lowered_(false), init_is_flattened_(false),\n+    type_from_init_tuple_(false), type_from_range_index_(false),\n+    type_from_range_value_(false), type_from_chan_element_(false),\n+    is_type_switch_var_(false), determined_type_(false),\n+    in_unique_section_(false)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);\n@@ -4351,6 +4515,40 @@ Variable::lower_init_expression(Gogo* gogo, Named_object* function,\n     }\n }\n \n+// Flatten the initialization expression after ordering evaluations.\n+\n+void\n+Variable::flatten_init_expression(Gogo* gogo, Named_object* function,\n+                                  Statement_inserter* inserter)\n+{\n+  Named_object* dep = gogo->var_depends_on(this);\n+  if (dep != NULL && dep->is_variable())\n+    dep->var_value()->flatten_init_expression(gogo, function, inserter);\n+\n+  if (this->init_ != NULL && !this->init_is_flattened_)\n+    {\n+      if (this->seen_)\n+\t{\n+\t  // We will give an error elsewhere, this is just to prevent\n+\t  // an infinite loop.\n+\t  return;\n+\t}\n+      this->seen_ = true;\n+\n+      Statement_inserter global_inserter;\n+      if (this->is_global_)\n+\t{\n+\t  global_inserter = Statement_inserter(gogo, this);\n+\t  inserter = &global_inserter;\n+\t}\n+\n+      gogo->flatten_expression(function, inserter, &this->init_);\n+\n+      this->seen_ = false;\n+      this->init_is_flattened_ = true;\n+    }\n+}\n+\n // Get the preinit block.\n \n Block*"}, {"sha": "285e060e88489e435a241d26b650330e15ef2160", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -487,6 +487,10 @@ class Gogo\n   void\n   lower_constant(Named_object*);\n \n+  // Flatten an expression.\n+  void\n+  flatten_expression(Named_object* function, Statement_inserter*, Expression**);\n+\n   // Create all necessary function descriptors.\n   void\n   create_function_descriptors();\n@@ -531,6 +535,10 @@ class Gogo\n   void\n   order_evaluations();\n \n+  // Flatten parse tree.\n+  void\n+  flatten();\n+\n   // Build thunks for functions which call recover.\n   void\n   build_recover_thunks();\n@@ -1447,6 +1455,10 @@ class Variable\n   void\n   lower_init_expression(Gogo*, Named_object*, Statement_inserter*);\n \n+  // Flatten the initialization expression after ordering evaluations.\n+  void\n+  flatten_init_expression(Gogo*, Named_object*, Statement_inserter*);\n+\n   // A special case: the init value is used only to determine the\n   // type.  This is used if the variable is defined using := with the\n   // comma-ok form of a map index or a receive expression.  The init\n@@ -1580,6 +1592,8 @@ class Variable\n   bool seen_ : 1;\n   // True if we have lowered the initialization expression.\n   bool init_is_lowered_ : 1;\n+  // True if we have flattened the initialization expression.\n+  bool init_is_flattened_ : 1;\n   // True if init is a tuple used to set the type.\n   bool type_from_init_tuple_ : 1;\n   // True if init is a range clause and the type is the index type."}, {"sha": "a28aa3d7cf71154cd8993d4587a91f8c7cc40a03", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -246,6 +246,16 @@ Variable_declaration_statement::do_lower(Gogo* gogo, Named_object* function,\n   return this;\n }\n \n+// Flatten the variable's initialization expression.\n+\n+Statement*\n+Variable_declaration_statement::do_flatten(Gogo* gogo, Named_object* function,\n+                                           Block*, Statement_inserter* inserter)\n+{\n+  this->var_->var_value()->flatten_init_expression(gogo, function, inserter);\n+  return this;\n+}\n+\n // Convert a variable declaration to the backend representation.\n \n Bstatement*"}, {"sha": "7d9bcfde8b7083cc2195ff17a5caa8c1ce06e56d", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=4bc44ceb91c0f7ad3250b8b01bdebe4e8b003f86", "patch": "@@ -306,6 +306,16 @@ class Statement\n \tStatement_inserter* inserter)\n   { return this->do_lower(gogo, function, block, inserter); }\n \n+  // Flatten a statement.  This is called immediately after the order of\n+  // evaluation rules are applied to statements.  It returns the same\n+  // Statement or a new one.  FUNCTION is the function containing this\n+  // statement.  BLOCK is the block containing this statement.\n+  // INSERTER can be used to insert new statements before this one.\n+  Statement*\n+  flatten(Gogo* gogo, Named_object* function, Block* block,\n+          Statement_inserter* inserter)\n+  { return this->do_flatten(gogo, function, block, inserter); }\n+\n   // Set type information for unnamed constants.\n   void\n   determine_types();\n@@ -412,6 +422,12 @@ class Statement\n   do_lower(Gogo*, Named_object*, Block*, Statement_inserter*)\n   { return this; }\n \n+  // Implemented by the child class: lower this statement to a simpler\n+  // one.\n+  virtual Statement*\n+  do_flatten(Gogo*, Named_object*, Block*, Statement_inserter*)\n+  { return this; }\n+\n   // Implemented by child class: set type information for unnamed\n   // constants.  Any statement which includes an expression needs to\n   // implement this.\n@@ -583,6 +599,9 @@ class Variable_declaration_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*, Statement_inserter*);\n \n+  Statement*\n+  do_flatten(Gogo*, Named_object*, Block*, Statement_inserter*);\n+\n   Bstatement*\n   do_get_backend(Translate_context*);\n "}]}