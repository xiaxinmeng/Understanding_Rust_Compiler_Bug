{"sha": "ea112fc456190ca9049109aa4e8ade7236022458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExMTJmYzQ1NjE5MGNhOTA0OTEwOWFhNGU4YWRlNzIzNjAyMjQ1OA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-05-01T15:33:23Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-05-01T15:33:23Z"}, "message": "rs6000.md (abssi2_nopower): Convert to define_insn_and_split.\n\n        * rs6000.md (abssi2_nopower): Convert to define_insn_and_split.\n        (nabs_nopower): Same.\n        (floatdisf2): New pattern.\n        (absdi2): Convert to define_insn_and_split.\n        (nabsdi2): Same.\n        (trunctfsf2): Same.\n        (floatditf2): Same.\n        (floatsitf2): Same.\n        (fix_trunctfdi2): Same.\n        (fix_trunctfsi2): Same.\n\nFrom-SVN: r52999", "tree": {"sha": "597d3f4c90a3053a8e60252ed41b4f0c8e11c5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/597d3f4c90a3053a8e60252ed41b4f0c8e11c5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea112fc456190ca9049109aa4e8ade7236022458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea112fc456190ca9049109aa4e8ade7236022458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea112fc456190ca9049109aa4e8ade7236022458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea112fc456190ca9049109aa4e8ade7236022458/comments", "author": null, "committer": null, "parents": [{"sha": "dda782545ebdd4534bd7d636f2f7520f048bcef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda782545ebdd4534bd7d636f2f7520f048bcef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda782545ebdd4534bd7d636f2f7520f048bcef7"}], "stats": {"total": 151, "additions": 80, "deletions": 71}, "files": [{"sha": "1c23c3327236e32d681399ab42f7ea114b2277b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea112fc456190ca9049109aa4e8ade7236022458/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea112fc456190ca9049109aa4e8ade7236022458/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea112fc456190ca9049109aa4e8ade7236022458", "patch": "@@ -1,3 +1,16 @@\n+2002-05-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (abssi2_nopower): Convert to define_insn_and_split.\n+\t(nabs_nopower): Same.\n+\t(floatdisf2): New pattern.\n+\t(absdi2): Convert to define_insn_and_split.\n+\t(nabsdi2): Same.\n+\t(trunctfsf2): Same.\n+\t(floatditf2): Same.\n+\t(floatsitf2): Same.\n+\t(fix_trunctfdi2): Same.\n+\t(fix_trunctfsi2): Same.\n+\n 2002-05-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/install.texi: Update Texinfo version requirement"}, {"sha": "9f3ecb1bf4d6ef4db29e1a762a3a1e3ec95396f6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 67, "deletions": 71, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea112fc456190ca9049109aa4e8ade7236022458/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea112fc456190ca9049109aa4e8ade7236022458/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ea112fc456190ca9049109aa4e8ade7236022458", "patch": "@@ -2114,30 +2114,19 @@\n     }\n }\")\n \n-(define_insn \"abssi2_power\"\n+(define_insn \"*abssi2_power\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWER\"\n   \"abs %0,%1\")\n \n-(define_insn \"abssi2_nopower\"\n+(define_insn_and_split \"abssi2_nopower\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n+        (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n   \"! TARGET_POWER\"\n-  \"*\n-{\n-  return (TARGET_POWERPC)\n-    ? \\\"{srai|srawi} %2,%1,31\\;xor %0,%2,%1\\;subf %0,%2,%0\\\"\n-    : \\\"{srai|srawi} %2,%1,31\\;xor %0,%2,%1\\;{sf|subfc} %0,%2,%0\\\";\n-}\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"! TARGET_POWER && reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:SI (match_dup 0) (match_dup 2)))]\n@@ -2149,24 +2138,13 @@\n   \"TARGET_POWER\"\n   \"nabs %0,%1\")\n \n-(define_insn \"*nabs_no_power\"\n+(define_insn_and_split \"*nabs_nopower\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n+        (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n   \"! TARGET_POWER\"\n-  \"*\n-{\n-  return (TARGET_POWERPC)\n-    ? \\\"{srai|srawi} %2,%1,31\\;xor %0,%2,%1\\;subf %0,%0,%2\\\"\n-    : \\\"{srai|srawi} %2,%1,31\\;xor %0,%2,%1\\;{sf|subfc} %0,%0,%2\\\";\n-}\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"! TARGET_POWER && reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 0)))]\n@@ -5462,6 +5440,20 @@\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n+\n+;; This only is safe if rounding mode set appropriately.\n+(define_insn_and_split \"floatdisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+        (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && flag_unsafe_math_optimizations\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2)\n+        (float:DF (match_dup 1)))\n+   (set (match_dup 0)\n+        (float_truncate:SF (match_dup 2)))]\n+  \"\")\n \f\n ;; Define the DImode operations that can be done in a small number\n ;; of instructions.  The & constraints are to prevent the register\n@@ -6070,37 +6062,25 @@\n     }\n }\")\n \n-(define_insn \"absdi2\"\n+(define_insn_and_split \"absdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\")))\n+        (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:DI 2 \"=&r,&r\"))]\n   \"TARGET_POWERPC64\"\n-  \"sradi %2,%1,63\\;xor %0,%2,%1\\;subf %0,%2,%0\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:DI (match_dup 0) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"*nabsdi2\"\n+(define_insn_and_split \"*nabsdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\"))))\n+        (neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:DI 2 \"=&r,&r\"))]\n   \"TARGET_POWERPC64\"\n-  \"sradi %2,%1,63\\;xor %0,%2,%1\\;subf %0,%0,%2\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:DI (match_dup 2) (match_dup 0)))]\n@@ -8207,52 +8187,68 @@\n \n (define_insn_and_split \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+\t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n-  \"\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(float_truncate:DF (match_dup 1)))\n    (set (match_dup 0)\n \t(float_truncate:SF (match_dup 2)))]\n-  \"\n-{\n-  operands[2] = gen_reg_rtx (DFmode);\n-}\")\n+  \"\")\n \n-(define_expand \"floatditf2\"\n+(define_insn_and_split \"floatditf2\"\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n+        (float:TF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n+   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n    (set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n \t(float_extend:TF (match_dup 2)))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n-   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n-  \"{ operands[2] = gen_reg_rtx (DFmode); }\")\n+  \"\")\n \n-(define_expand \"floatsitf2\"\n+(define_insn_and_split \"floatsitf2\"\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n+        (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n    (set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n \t(float_extend:TF (match_dup 2)))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n-  \"{ operands[2] = gen_reg_rtx (DFmode); }\")\n+  \"\")\n \n-(define_expand \"fix_trunctfdi2\"\n+(define_insn_and_split \"fix_trunctfdi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n+        (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n+   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_dup 2)))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n-   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n-  \"{ operands[2] = gen_reg_rtx (DFmode); }\")\n+  \"\")\n \n-(define_expand \"fix_trunctfsi2\"\n+(define_insn_and_split \"fix_trunctfsi2\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=f\")\n+        (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_dup 2)))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n-  \"{ operands[2] = gen_reg_rtx (DFmode); }\")\n+  \"\")\n \n (define_insn \"negtf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")"}]}