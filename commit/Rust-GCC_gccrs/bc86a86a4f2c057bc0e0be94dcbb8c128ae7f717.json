{"sha": "bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "node_id": "C_kwDOANBUbNoAKGJjODZhODZhNGYyYzA1N2JjMGUwYmU5NGRjYmI4YzEyOGFlN2Y3MTc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-28T08:07:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-28T09:34:06Z"}, "message": "tree-optimization/105070 - annotate bit cluster tests with locations\n\nThe following makes sure to annotate the tests generated by\nswitch lowering bit-clustering with locations which otherwise\ncan be completely lost even at -O0.\n\n2022-03-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105070\n\t* tree-switch-conversion.h\n\t(bit_test_cluster::hoist_edge_and_branch_if_true): Add location\n\targument.\n\t* tree-switch-conversion.cc\n\t(bit_test_cluster::hoist_edge_and_branch_if_true): Annotate\n\tcond with location.\n\t(bit_test_cluster::emit): Annotate all generated expressions\n\twith location.", "tree": {"sha": "6531507e078f065abc2f8166147b24f8988c4645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6531507e078f065abc2f8166147b24f8988c4645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f37d31324f89d0b7b2abac988a976d121ae29c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37d31324f89d0b7b2abac988a976d121ae29c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f37d31324f89d0b7b2abac988a976d121ae29c6"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "e14b4e6c94a30a5d41bdc3d8b6cc6e702749480c", "filename": "gcc/tree-switch-conversion.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717/gcc%2Ftree-switch-conversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717/gcc%2Ftree-switch-conversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.cc?ref=bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "patch": "@@ -1498,7 +1498,7 @@ case_bit_test::cmp (const void *p1, const void *p2)\n \n void\n bit_test_cluster::emit (tree index_expr, tree index_type,\n-\t\t\ttree, basic_block default_bb, location_t)\n+\t\t\ttree, basic_block default_bb, location_t loc)\n {\n   case_bit_test test[m_max_case_bit_tests] = { {} };\n   unsigned int i, j, k;\n@@ -1622,9 +1622,9 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n   gsi = gsi_last_bb (m_case_bb);\n \n   /* idx = (unsigned)x - minval.  */\n-  idx = fold_convert (unsigned_index_type, index_expr);\n-  idx = fold_build2 (MINUS_EXPR, unsigned_index_type, idx,\n-\t\t     fold_convert (unsigned_index_type, minval));\n+  idx = fold_convert_loc (loc, unsigned_index_type, index_expr);\n+  idx = fold_build2_loc (loc, MINUS_EXPR, unsigned_index_type, idx,\n+\t\t\t fold_convert_loc (loc, unsigned_index_type, minval));\n   idx = force_gimple_operand_gsi (&gsi, idx,\n \t\t\t\t  /*simple=*/true, NULL_TREE,\n \t\t\t\t  /*before=*/true, GSI_SAME_STMT);\n@@ -1638,15 +1638,15 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n \t\t\t\t    fold_convert (unsigned_index_type, range),\n \t\t\t\t    /*simple=*/true, NULL_TREE,\n \t\t\t\t    /*before=*/true, GSI_SAME_STMT);\n-      tmp = fold_build2 (GT_EXPR, boolean_type_node, idx, range);\n+      tmp = fold_build2_loc (loc, GT_EXPR, boolean_type_node, idx, range);\n       basic_block new_bb\n \t= hoist_edge_and_branch_if_true (&gsi, tmp, default_bb,\n-\t\t\t\t\t profile_probability::unlikely ());\n+\t\t\t\t\t profile_probability::unlikely (), loc);\n       gsi = gsi_last_bb (new_bb);\n     }\n \n-  tmp = fold_build2 (LSHIFT_EXPR, word_type_node, word_mode_one,\n-\t\t     fold_convert (word_type_node, idx));\n+  tmp = fold_build2_loc (loc, LSHIFT_EXPR, word_type_node, word_mode_one,\n+\t\t\t fold_convert_loc (loc, word_type_node, idx));\n \n   /* csui = (1 << (word_mode) idx) */\n   if (count > 1)\n@@ -1672,13 +1672,15 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n \t\t\t\t\t\t\t bt_range);\n       bt_range -= test[k].bits;\n       tmp = wide_int_to_tree (word_type_node, test[k].mask);\n-      tmp = fold_build2 (BIT_AND_EXPR, word_type_node, csui, tmp);\n-      tmp = fold_build2 (NE_EXPR, boolean_type_node, tmp, word_mode_zero);\n+      tmp = fold_build2_loc (loc, BIT_AND_EXPR, word_type_node, csui, tmp);\n+      tmp = fold_build2_loc (loc, NE_EXPR, boolean_type_node,\n+\t\t\t     tmp, word_mode_zero);\n       tmp = force_gimple_operand_gsi (&gsi, tmp,\n \t\t\t\t      /*simple=*/true, NULL_TREE,\n \t\t\t\t      /*before=*/true, GSI_SAME_STMT);\n       basic_block new_bb\n-\t= hoist_edge_and_branch_if_true (&gsi, tmp, test[k].target_bb, prob);\n+\t= hoist_edge_and_branch_if_true (&gsi, tmp, test[k].target_bb,\n+\t\t\t\t\t prob, loc);\n       gsi = gsi_last_bb (new_bb);\n     }\n \n@@ -1708,7 +1710,8 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n basic_block\n bit_test_cluster::hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n \t\t\t\t\t\t tree cond, basic_block case_bb,\n-\t\t\t\t\t\t profile_probability prob)\n+\t\t\t\t\t\t profile_probability prob,\n+\t\t\t\t\t\t location_t loc)\n {\n   tree tmp;\n   gcond *cond_stmt;\n@@ -1722,6 +1725,7 @@ bit_test_cluster::hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n   tmp = force_gimple_operand_gsi (gsip, cond, /*simple=*/true, NULL,\n \t\t\t\t  /*before=*/true, GSI_SAME_STMT);\n   cond_stmt = gimple_build_cond_from_tree (tmp, NULL_TREE, NULL_TREE);\n+  gimple_set_location (cond_stmt, loc);\n   gsi_insert_before (gsip, cond_stmt, GSI_SAME_STMT);\n \n   e_false = split_block (split_bb, cond_stmt);"}, {"sha": "2b677d9f7e9845da9469e6678a92f4aabb0ce0fe", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=bc86a86a4f2c057bc0e0be94dcbb8c128ae7f717", "patch": "@@ -429,7 +429,8 @@ class bit_test_cluster: public group_cluster\n   static basic_block hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n \t\t\t\t\t\t    tree cond,\n \t\t\t\t\t\t    basic_block case_bb,\n-\t\t\t\t\t\t    profile_probability prob);\n+\t\t\t\t\t\t    profile_probability prob,\n+\t\t\t\t\t\t    location_t);\n \n   /* Return whether bit test expansion is allowed.  */\n   static inline bool is_enabled (void)"}]}