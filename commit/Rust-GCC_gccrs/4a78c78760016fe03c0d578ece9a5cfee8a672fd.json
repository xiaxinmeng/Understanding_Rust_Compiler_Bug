{"sha": "4a78c78760016fe03c0d578ece9a5cfee8a672fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3OGM3ODc2MDAxNmZlMDNjMGQ1NzhlY2U5YTVjZmVlOGE2NzJmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-13T17:50:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-13T17:50:02Z"}, "message": "emit-rtl.c (adjust_address_1): Don't adjust address if adjust is false.\n\n        * emit-rtl.c (adjust_address_1): Don't adjust address if adjust\n        is false.\n\nFrom-SVN: r47978", "tree": {"sha": "25855a02ec15bb86b5fc9eb76eceac385b393393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25855a02ec15bb86b5fc9eb76eceac385b393393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a78c78760016fe03c0d578ece9a5cfee8a672fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a78c78760016fe03c0d578ece9a5cfee8a672fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a78c78760016fe03c0d578ece9a5cfee8a672fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a78c78760016fe03c0d578ece9a5cfee8a672fd/comments", "author": null, "committer": null, "parents": [{"sha": "72dd53af504998e0dcdbbce221c67a4ad2c3b30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72dd53af504998e0dcdbbce221c67a4ad2c3b30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72dd53af504998e0dcdbbce221c67a4ad2c3b30b"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "ab1f2601a71e200ae92040ae09ec34a692989f45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a78c78760016fe03c0d578ece9a5cfee8a672fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a78c78760016fe03c0d578ece9a5cfee8a672fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a78c78760016fe03c0d578ece9a5cfee8a672fd", "patch": "@@ -1,3 +1,8 @@\n+2001-12-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c (adjust_address_1): Don't adjust address if adjust\n+\tis false.\n+\n 2001-12-13  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* collect2.c (COLLECT_SHARED_INIT_FUNC)"}, {"sha": "64a2624412dc83c8d4089b299fac3312b4483571", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a78c78760016fe03c0d578ece9a5cfee8a672fd/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a78c78760016fe03c0d578ece9a5cfee8a672fd/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4a78c78760016fe03c0d578ece9a5cfee8a672fd", "patch": "@@ -1967,20 +1967,23 @@ adjust_address_1 (memref, mode, offset, validate, adjust)\n   unsigned int memalign = MEM_ALIGN (memref);\n \n   /* ??? Prefer to create garbage instead of creating shared rtl.\n-     This may happen even if adjust is non-zero -- consider\n+     This may happen even if offset is non-zero -- consider\n      (plus (plus reg reg) const_int) -- so do this always.  */\n   addr = copy_rtx (addr);\n \n-  /* If MEMREF is a LO_SUM and the offset is within the alignment of the\n-     object, we can merge it into the LO_SUM.  */\n-  if (GET_MODE (memref) != BLKmode && GET_CODE (addr) == LO_SUM\n-      && offset >= 0\n-      && (unsigned HOST_WIDE_INT) offset\n-\t  < GET_MODE_ALIGNMENT (GET_MODE (memref)) / BITS_PER_UNIT)\n-    addr = gen_rtx_LO_SUM (Pmode, XEXP (addr, 0),\n-\t\t\t   plus_constant (XEXP (addr, 1), offset));\n-  else\n-    addr = plus_constant (addr, offset);\n+  if (adjust)\n+    {\n+      /* If MEMREF is a LO_SUM and the offset is within the alignment of the\n+\t object, we can merge it into the LO_SUM.  */\n+      if (GET_MODE (memref) != BLKmode && GET_CODE (addr) == LO_SUM\n+\t  && offset >= 0\n+\t  && (unsigned HOST_WIDE_INT) offset\n+\t      < GET_MODE_ALIGNMENT (GET_MODE (memref)) / BITS_PER_UNIT)\n+\taddr = gen_rtx_LO_SUM (Pmode, XEXP (addr, 0),\n+\t\t\t       plus_constant (XEXP (addr, 1), offset));\n+      else\n+\taddr = plus_constant (addr, offset);\n+    }\n \n   new = change_address_1 (memref, mode, addr, validate);\n "}]}