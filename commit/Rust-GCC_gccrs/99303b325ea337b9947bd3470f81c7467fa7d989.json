{"sha": "99303b325ea337b9947bd3470f81c7467fa7d989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzMDNiMzI1ZWEzMzdiOTk0N2JkMzQ3MGY4MWM3NDY3ZmE3ZDk4OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-25T00:55:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-25T00:55:35Z"}, "message": "compiler: Don't use memcmp for equality if struct has trailing padding.\n\nFrom-SVN: r193791", "tree": {"sha": "eab3c0a2597a40c59a103891f915b0ff4e65c03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eab3c0a2597a40c59a103891f915b0ff4e65c03c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99303b325ea337b9947bd3470f81c7467fa7d989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99303b325ea337b9947bd3470f81c7467fa7d989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99303b325ea337b9947bd3470f81c7467fa7d989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99303b325ea337b9947bd3470f81c7467fa7d989/comments", "author": null, "committer": null, "parents": [{"sha": "489a33f9c169a0ab76ccfb91869a5a2fc9af1de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489a33f9c169a0ab76ccfb91869a5a2fc9af1de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489a33f9c169a0ab76ccfb91869a5a2fc9af1de6"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "1990b03c3f81d45c63084d1015ace6e50fe47229", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99303b325ea337b9947bd3470f81c7467fa7d989/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99303b325ea337b9947bd3470f81c7467fa7d989/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=99303b325ea337b9947bd3470f81c7467fa7d989", "patch": "@@ -2382,7 +2382,7 @@ class Error_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -2420,7 +2420,7 @@ class Void_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -2458,7 +2458,7 @@ class Boolean_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return true; }\n \n   Btype*\n@@ -3085,7 +3085,7 @@ class Sink_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -3963,7 +3963,7 @@ class Nil_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -4014,7 +4014,7 @@ class Call_multiple_result_type : public Type\n   }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -4291,7 +4291,7 @@ Struct_type::struct_has_hidden_fields(const Named_type* within,\n // comparisons.\n \n bool\n-Struct_type::do_compare_is_identity(Gogo* gogo) const\n+Struct_type::do_compare_is_identity(Gogo* gogo)\n {\n   const Struct_field_list* fields = this->fields_;\n   if (fields == NULL)\n@@ -4323,6 +4323,16 @@ Struct_type::do_compare_is_identity(Gogo* gogo) const\n \treturn false;\n       offset += field_size;\n     }\n+\n+  unsigned int struct_size;\n+  if (!this->backend_type_size(gogo, &struct_size))\n+    return false;\n+  if (offset != struct_size)\n+    {\n+      // Trailing padding may not be zero when on the stack.\n+      return false;\n+    }\n+\n   return true;\n }\n \n@@ -5267,7 +5277,7 @@ Array_type::do_verify()\n // Whether we can use memcmp to compare this array.\n \n bool\n-Array_type::do_compare_is_identity(Gogo* gogo) const\n+Array_type::do_compare_is_identity(Gogo* gogo)\n {\n   if (this->length_ == NULL)\n     return false;\n@@ -7968,7 +7978,7 @@ Named_type::do_has_pointer() const\n // function.\n \n bool\n-Named_type::do_compare_is_identity(Gogo* gogo) const\n+Named_type::do_compare_is_identity(Gogo* gogo)\n {\n   // We don't use this->seen_ here because compare_is_identity may\n   // call base() later, and that will mess up if seen_ is set here."}, {"sha": "a62a6cfbf975afe865def743fc4010d698a6b677", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99303b325ea337b9947bd3470f81c7467fa7d989/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99303b325ea337b9947bd3470f81c7467fa7d989/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=99303b325ea337b9947bd3470f81c7467fa7d989", "patch": "@@ -576,7 +576,7 @@ class Type\n   // identity function which gets nothing but a pointer to the value\n   // and a size.\n   bool\n-  compare_is_identity(Gogo* gogo) const\n+  compare_is_identity(Gogo* gogo)\n   { return this->do_compare_is_identity(gogo); }\n \n   // Return a hash code for this type for the method hash table.\n@@ -950,7 +950,7 @@ class Type\n   { return false; }\n \n   virtual bool\n-  do_compare_is_identity(Gogo*) const = 0;\n+  do_compare_is_identity(Gogo*) = 0;\n \n   virtual unsigned int\n   do_hash_for_method(Gogo*) const;\n@@ -1458,7 +1458,7 @@ class Integer_type : public Type\n \n protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return true; }\n \n   unsigned int\n@@ -1535,7 +1535,7 @@ class Float_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   unsigned int\n@@ -1604,7 +1604,7 @@ class Complex_type : public Type\n \n  protected:\n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   unsigned int\n@@ -1664,7 +1664,7 @@ class String_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   Btype*\n@@ -1778,7 +1778,7 @@ class Function_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   unsigned int\n@@ -1853,7 +1853,7 @@ class Pointer_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return true; }\n \n   unsigned int\n@@ -2139,7 +2139,7 @@ class Struct_type : public Type\n   do_has_pointer() const;\n \n   bool\n-  do_compare_is_identity(Gogo*) const;\n+  do_compare_is_identity(Gogo*);\n \n   unsigned int\n   do_hash_for_method(Gogo*) const;\n@@ -2272,7 +2272,7 @@ class Array_type : public Type\n   }\n \n   bool\n-  do_compare_is_identity(Gogo*) const;\n+  do_compare_is_identity(Gogo*);\n \n   unsigned int\n   do_hash_for_method(Gogo*) const;\n@@ -2365,7 +2365,7 @@ class Map_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   unsigned int\n@@ -2451,7 +2451,7 @@ class Channel_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return true; }\n \n   unsigned int\n@@ -2582,7 +2582,7 @@ class Interface_type : public Type\n   { return true; }\n \n   bool\n-  do_compare_is_identity(Gogo*) const\n+  do_compare_is_identity(Gogo*)\n   { return false; }\n \n   unsigned int\n@@ -2865,7 +2865,7 @@ class Named_type : public Type\n   do_has_pointer() const;\n \n   bool\n-  do_compare_is_identity(Gogo*) const;\n+  do_compare_is_identity(Gogo*);\n \n   unsigned int\n   do_hash_for_method(Gogo*) const;\n@@ -2949,7 +2949,7 @@ class Named_type : public Type\n   // function exits.\n   mutable bool seen_;\n   // Like seen_, but used only by do_compare_is_identity.\n-  mutable bool seen_in_compare_is_identity_;\n+  bool seen_in_compare_is_identity_;\n   // Like seen_, but used only by do_get_backend.\n   bool seen_in_get_backend_;\n };\n@@ -3004,7 +3004,7 @@ class Forward_declaration_type : public Type\n   { return this->real_type()->has_pointer(); }\n \n   bool\n-  do_compare_is_identity(Gogo* gogo) const\n+  do_compare_is_identity(Gogo* gogo)\n   { return this->real_type()->compare_is_identity(gogo); }\n \n   unsigned int"}]}