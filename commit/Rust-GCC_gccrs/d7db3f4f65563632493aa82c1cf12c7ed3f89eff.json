{"sha": "d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkYjNmNGY2NTU2MzYzMjQ5M2FhODJjMWNmMTJjN2VkM2Y4OWVmZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-30T08:58:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:58:27Z"}, "message": "[Ada] Extend the applicability of Thread_Local_Storage to composite types\n\nThis patch allows the GNAT-specific Thread_Local_Storage to be applied\nto variables of a composite type initiallized with an aggregate with\nstatic components that requires no elaboration code.\n\n2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Object_Declaration): A pragma Thread_Local_Storage\n\tis now legal on a variable of composite type initialized with an\n\taggregate that is fully static and requires no elaboration code.\n\t* exp_aggr.adb (Convert_To_Positional): Recognize additional cases of\n\tnested aggregates that are compile-time static, so they can be used to\n\tinitialize variables declared with Threqd_Local_Storage.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add documentation on\n\tThread_Local_Storage.\n\t* gnat_rm.texi: Regenerate.\n\ngcc/testsuite/\n\n\t* gnat.dg/tls1.adb, gnat.dg/tls1_pkg.ads: New testcase.\n\nFrom-SVN: r260944", "tree": {"sha": "b86c167e1d1ba886d72b5d2fa6a449d906126372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86c167e1d1ba886d72b5d2fa6a449d906126372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2a3c2fa828ced9f08597def430b3149ff9a4961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a3c2fa828ced9f08597def430b3149ff9a4961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a3c2fa828ced9f08597def430b3149ff9a4961"}], "stats": {"total": 153, "additions": 138, "deletions": 15}, "files": [{"sha": "f9a9ecac2d0aa22d5a7f4ee299fb4b9474e8bb73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -1,3 +1,15 @@\n+2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Object_Declaration): A pragma Thread_Local_Storage\n+\tis now legal on a variable of composite type initialized with an\n+\taggregate that is fully static and requires no elaboration code.\n+\t* exp_aggr.adb (Convert_To_Positional): Recognize additional cases of\n+\tnested aggregates that are compile-time static, so they can be used to\n+\tinitialize variables declared with Threqd_Local_Storage.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add documentation on\n+\tThread_Local_Storage.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2018-05-30  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Policy_In_Effect): Take into account CodePeer and"}, {"sha": "aec0d8448d4f6183c4aabd6a1d96336ba893742b", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -6613,13 +6613,17 @@ Syntax:\n This pragma specifies that the specified entity, which must be\n a variable declared in a library-level package, is to be marked as\n \"Thread Local Storage\" (``TLS``). On systems supporting this (which\n-include Windows, Solaris, GNU/Linux and VxWorks 6), this causes each\n+include Windows, Solaris, GNU/Linux, and VxWorks 6), this causes each\n thread (and hence each Ada task) to see a distinct copy of the variable.\n \n-The variable may not have default initialization, and if there is\n+The variable must not have default initialization, and if there is\n an explicit initialization, it must be either ``null`` for an\n-access variable, or a static expression for a scalar variable.\n-This provides a low level mechanism similar to that provided by\n+access variable, a static expression for a scalar variable, or a fully\n+static aggregate for a composite type, that is to say, an aggregate all\n+of whose components are static, and which does not include packed or\n+discriminated components.\n+\n+This provides a low-level mechanism similar to that provided by\n the ``Ada.Task_Attributes`` package, but much more efficient\n and is also useful in writing interface code that will interact\n with foreign threads."}, {"sha": "e587c17f90ef2c1b0de3a6c85d38a71c91f5c928", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -4727,7 +4727,25 @@ package body Exp_Aggr is\n          return;\n       end if;\n \n+      --  A subaggregate may have been flattened but is not known to be\n+      --  Compile_Time_Known. Set that flag in cases that cannot require\n+      --  elaboration code, so that the aggregate can be used as the\n+      --  initial value of a thread-local variable.\n+\n       if Is_Flat (N, Number_Dimensions (Typ)) then\n+         Check_Static_Components;\n+         if Static_Components then\n+            if Is_Packed (Etype (N))\n+              or else\n+                (Is_Record_Type (Component_Type (Etype (N)))\n+                 and then Has_Discriminants (Component_Type (Etype (N))))\n+            then\n+               null;\n+            else\n+               Set_Compile_Time_Known_Aggregate (N);\n+            end if;\n+         end if;\n+\n          return;\n       end if;\n "}, {"sha": "4d7fe26c9627256ea8fe530726d5d7ec5b2b5508", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -3441,12 +3441,19 @@ package body Freeze is\n                           (Is_OK_Static_Expression (Expression (Decl))\n                             or else Nkind (Expression (Decl)) = N_Null)))\n                then\n-                  Error_Msg_NE\n-                    (\"Thread_Local_Storage variable& is \"\n-                     & \"improperly initialized\", Decl, E);\n-                  Error_Msg_NE\n-                    (\"\\only allowed initialization is explicit \"\n-                     & \"NULL or static expression\", Decl, E);\n+                  if Nkind (Expression (Decl)) = N_Aggregate\n+                    and then Compile_Time_Known_Aggregate (Expression (Decl))\n+                  then\n+                     null;\n+                  else\n+                     Error_Msg_NE\n+                       (\"Thread_Local_Storage variable& is \"\n+                        & \"improperly initialized\", Decl, E);\n+                     Error_Msg_NE\n+                       (\"\\only allowed initialization is explicit \"\n+                        & \"NULL, static expression or static aggregate\",\n+                          Decl, E);\n+                  end if;\n                end if;\n             end;\n          end if;"}, {"sha": "7647865ba02fc8f208558282a716c9ad93e2d45f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Apr 24, 2018\n+GNAT Reference Manual , May 22, 2018\n \n AdaCore\n \n@@ -8070,13 +8070,17 @@ pragma Thread_Local_Storage ([Entity =>] LOCAL_NAME);\n This pragma specifies that the specified entity, which must be\n a variable declared in a library-level package, is to be marked as\n \"Thread Local Storage\" (@code{TLS}). On systems supporting this (which\n-include Windows, Solaris, GNU/Linux and VxWorks 6), this causes each\n+include Windows, Solaris, GNU/Linux, and VxWorks 6), this causes each\n thread (and hence each Ada task) to see a distinct copy of the variable.\n \n-The variable may not have default initialization, and if there is\n+The variable must not have default initialization, and if there is\n an explicit initialization, it must be either @code{null} for an\n-access variable, or a static expression for a scalar variable.\n-This provides a low level mechanism similar to that provided by\n+access variable, a static expression for a scalar variable, or a fully\n+static aggregate for a composite type, that is to say, an aggregate all\n+of whose components are static, and which does not include packed or\n+discriminated components.\n+\n+This provides a low-level mechanism similar to that provided by\n the @code{Ada.Task_Attributes} package, but much more efficient\n and is also useful in writing interface code that will interact\n with foreign threads."}, {"sha": "8b32534b7fa6390fc84f606deaaad6e219f3a2e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -1,3 +1,7 @@\n+2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/tls1.adb, gnat.dg/tls1_pkg.ads: New testcase.\n+\n 2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/synchronized1.adb, gnat.dg/synchronized1.ads: New testcase."}, {"sha": "d45105d719c9b4aab7d8e1c84f44e455b9d767be", "filename": "gcc/testsuite/gnat.dg/tls1.adb", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1.adb?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -0,0 +1,51 @@\n+--  { dg-do run }\n+\n+with Text_IO; use Text_IO;\n+with TLS1_Pkg; use TLS1_Pkg;\n+\n+procedure TLS1 is\n+  Result : Integer;\n+\n+  task type T is\n+     entry Change (Inc : Integer);\n+     entry Sum (Result : out Integer);\n+  end T;\n+\n+  task body T is\n+  begin\n+      accept Change (Inc : Integer) do\n+         for I in My_Array.data'range loop\n+           My_Array.Data (I).Point := Inc;\n+         end loop;\n+      end;\n+\n+      accept Sum (Result : out Integer) do\n+         Result := 0;\n+         for I in My_Array.data'range loop\n+           Result := Result + My_Array.Data (I).Point;\n+         end loop;\n+      end;\n+   end T;\n+\n+   Gang : array (1..10) of T;\n+\n+begin\n+   for J in Gang'range loop\n+      Gang (J).Change (J);\n+   end loop;\n+\n+   -- Verify the contents of each local thread storage.\n+\n+   for J in Gang'range loop\n+      Gang (J).Sum (Result);\n+      pragma Assert (Result = J * 500);\n+   end loop;\n+\n+ --  Verify that original data is unaffected.\n+\n+   for J in My_Array.Data'range loop\n+      Result := Result + My_Array.Data (J).Point;\n+   end loop;\n+\n+   pragma Assert (Result = 500);\n+end TLS1;"}, {"sha": "3153fafd174fa68a695625f3ecb506bc0e0f56eb", "filename": "gcc/testsuite/gnat.dg/tls1_pkg.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7db3f4f65563632493aa82c1cf12c7ed3f89eff/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftls1_pkg.ads?ref=d7db3f4f65563632493aa82c1cf12c7ed3f89eff", "patch": "@@ -0,0 +1,23 @@\n+pragma Restrictions (No_Implicit_Loops);\n+\n+package TLS1_Pkg is\n+   Type My_Record_Type is record\n+      Date : long_float;\n+      Point : Integer;\n+   end record;\n+\n+   type Nb_Type is range 0 .. 500;\n+   subtype Index_Type is Nb_Type range 1 .. 500;\n+\n+   type My_Array_Type is array (Index_Type) of My_Record_Type;\n+\n+   type My_Pseudo_Box_Type is record\n+      Nb : Nb_Type;\n+      Data : My_Array_Type;\n+   End record;\n+\n+   My_Array : My_Pseudo_Box_Type := (Nb => 10,\n+     Data => (others => (Date => 3.0, Point => 1)));\n+   pragma Thread_Local_Storage (My_Array);\n+\n+end TLS1_Pkg;"}]}