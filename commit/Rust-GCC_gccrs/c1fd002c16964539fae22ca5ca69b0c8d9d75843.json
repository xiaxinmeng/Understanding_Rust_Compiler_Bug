{"sha": "c1fd002c16964539fae22ca5ca69b0c8d9d75843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmZDAwMmMxNjk2NDUzOWZhZTIyY2E1Y2E2OWIwYzhkOWQ3NTg0Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-08-22T13:25:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T13:25:41Z"}, "message": "exp_ch7.adb: Minor reformatting\n\n2008-08-22  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb: Minor reformatting\n\nFrom-SVN: r139460", "tree": {"sha": "eaf2eff5f1383b9382769cde4e45bf4f68fb3ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf2eff5f1383b9382769cde4e45bf4f68fb3ba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fd002c16964539fae22ca5ca69b0c8d9d75843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fd002c16964539fae22ca5ca69b0c8d9d75843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fd002c16964539fae22ca5ca69b0c8d9d75843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fd002c16964539fae22ca5ca69b0c8d9d75843/comments", "author": null, "committer": null, "parents": [{"sha": "8fb68c5664fe1d8179715fef245ff4c201867e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb68c5664fe1d8179715fef245ff4c201867e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb68c5664fe1d8179715fef245ff4c201867e8b"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "1d7cb78f77a37bf662c0e3a3f1583efe3486e9df", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fd002c16964539fae22ca5ca69b0c8d9d75843/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fd002c16964539fae22ca5ca69b0c8d9d75843/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c1fd002c16964539fae22ca5ca69b0c8d9d75843", "patch": "@@ -846,74 +846,6 @@ package body Exp_Ch7 is\n       end if;\n    end Check_Visibly_Controlled;\n \n-   ------------------------\n-   -- Needs_Finalization --\n-   ------------------------\n-\n-   function Needs_Finalization (T : Entity_Id) return Boolean is\n-\n-      function Has_Some_Controlled_Component (Rec : Entity_Id) return Boolean;\n-      --  If type is not frozen yet, check explicitly among its components,\n-      --  because the Has_Controlled_Component flag is not necessarily set.\n-\n-      -----------------------------------\n-      -- Has_Some_Controlled_Component --\n-      -----------------------------------\n-\n-      function Has_Some_Controlled_Component\n-        (Rec : Entity_Id) return Boolean\n-      is\n-         Comp : Entity_Id;\n-\n-      begin\n-         if Has_Controlled_Component (Rec) then\n-            return True;\n-\n-         elsif not Is_Frozen (Rec) then\n-            if Is_Record_Type (Rec) then\n-               Comp := First_Entity (Rec);\n-\n-               while Present (Comp) loop\n-                  if not Is_Type (Comp)\n-                    and then Needs_Finalization (Etype (Comp))\n-                  then\n-                     return True;\n-                  end if;\n-\n-                  Next_Entity (Comp);\n-               end loop;\n-\n-               return False;\n-\n-            elsif Is_Array_Type (Rec) then\n-               return Needs_Finalization (Component_Type (Rec));\n-\n-            else\n-               return Has_Controlled_Component (Rec);\n-            end if;\n-         else\n-            return False;\n-         end if;\n-      end Has_Some_Controlled_Component;\n-\n-   --  Start of processing for Needs_Finalization\n-\n-   begin\n-      --  Class-wide types must be treated as controlled because they may\n-      --  contain an extension that has controlled components\n-\n-      --  We can skip this if finalization is not available\n-\n-      return (Is_Class_Wide_Type (T)\n-                and then not In_Finalization_Root (T)\n-                and then not Restriction_Active (No_Finalization))\n-        or else Is_Controlled (T)\n-        or else Has_Some_Controlled_Component (T)\n-        or else (Is_Concurrent_Type (T)\n-                  and then Present (Corresponding_Record_Type (T))\n-                  and then Needs_Finalization (Corresponding_Record_Type (T)));\n-   end Needs_Finalization;\n-\n    -------------------------------\n    -- CW_Or_Has_Controlled_Part --\n    -------------------------------\n@@ -1296,8 +1228,8 @@ package body Exp_Ch7 is\n \n       if Is_Task_Allocation then\n          Chain := Activation_Chain_Entity (N);\n-         Decl := First (Declarations (N));\n \n+         Decl := First (Declarations (N));\n          while Nkind (Decl) /= N_Object_Declaration\n            or else Defining_Identifier (Decl) /= Chain\n          loop\n@@ -3186,10 +3118,10 @@ package body Exp_Ch7 is\n         and then Nkind (Action) /= N_Simple_Return_Statement\n         and then Nkind (Par) /= N_Exception_Handler\n       then\n-\n          declare\n             S  : Entity_Id;\n             K  : Entity_Kind;\n+\n          begin\n             S := Scope (Current_Scope);\n             loop\n@@ -3272,6 +3204,74 @@ package body Exp_Ch7 is\n       return Blk;\n    end Make_Transient_Block;\n \n+   ------------------------\n+   -- Needs_Finalization --\n+   ------------------------\n+\n+   function Needs_Finalization (T : Entity_Id) return Boolean is\n+\n+      function Has_Some_Controlled_Component (Rec : Entity_Id) return Boolean;\n+      --  If type is not frozen yet, check explicitly among its components,\n+      --  because the Has_Controlled_Component flag is not necessarily set.\n+\n+      -----------------------------------\n+      -- Has_Some_Controlled_Component --\n+      -----------------------------------\n+\n+      function Has_Some_Controlled_Component\n+        (Rec : Entity_Id) return Boolean\n+      is\n+         Comp : Entity_Id;\n+\n+      begin\n+         if Has_Controlled_Component (Rec) then\n+            return True;\n+\n+         elsif not Is_Frozen (Rec) then\n+            if Is_Record_Type (Rec) then\n+               Comp := First_Entity (Rec);\n+\n+               while Present (Comp) loop\n+                  if not Is_Type (Comp)\n+                    and then Needs_Finalization (Etype (Comp))\n+                  then\n+                     return True;\n+                  end if;\n+\n+                  Next_Entity (Comp);\n+               end loop;\n+\n+               return False;\n+\n+            elsif Is_Array_Type (Rec) then\n+               return Needs_Finalization (Component_Type (Rec));\n+\n+            else\n+               return Has_Controlled_Component (Rec);\n+            end if;\n+         else\n+            return False;\n+         end if;\n+      end Has_Some_Controlled_Component;\n+\n+   --  Start of processing for Needs_Finalization\n+\n+   begin\n+      --  Class-wide types must be treated as controlled because they may\n+      --  contain an extension that has controlled components\n+\n+      --  We can skip this if finalization is not available\n+\n+      return (Is_Class_Wide_Type (T)\n+                and then not In_Finalization_Root (T)\n+                and then not Restriction_Active (No_Finalization))\n+        or else Is_Controlled (T)\n+        or else Has_Some_Controlled_Component (T)\n+        or else (Is_Concurrent_Type (T)\n+                  and then Present (Corresponding_Record_Type (T))\n+                  and then Needs_Finalization (Corresponding_Record_Type (T)));\n+   end Needs_Finalization;\n+\n    ------------------------\n    -- Node_To_Be_Wrapped --\n    ------------------------"}]}