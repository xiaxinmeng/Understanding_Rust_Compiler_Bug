{"sha": "4ae50669e063bf313ea572a88bfac2e6562e7cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlNTA2NjllMDYzYmYzMTNlYTU3MmE4OGJmYWMyZTY1NjJlN2NjOA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-10T17:18:22Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-10T17:18:22Z"}, "message": "re PR target/46415 (mmix-knuth-mmixware --enable-werror-always build fails)\n\n        PR target/46415\n        * config/mmix/mmix-protos.h (mmix_local_alignment): Update prototype.\n        (mmix_dbx_register_number): Likewise.\n        * config/mmix/mmix.c: Include df.h .\n        (mmix_local_alignment): Change argument basic_align and return type\n        to unsigned.\n        (mmix_dbx_register_number): Change argument and return type to\n        unsigned.\n        (mmix_expand_prologue): Use add_reg_note.\n\nFrom-SVN: r166545", "tree": {"sha": "15d3ea01b4e9c40406394bd7bd83eb91c33f1366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d3ea01b4e9c40406394bd7bd83eb91c33f1366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae50669e063bf313ea572a88bfac2e6562e7cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae50669e063bf313ea572a88bfac2e6562e7cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae50669e063bf313ea572a88bfac2e6562e7cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae50669e063bf313ea572a88bfac2e6562e7cc8/comments", "author": null, "committer": null, "parents": [{"sha": "e639b20676a9eab048bfdcf007b7ab3b6398a845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e639b20676a9eab048bfdcf007b7ab3b6398a845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e639b20676a9eab048bfdcf007b7ab3b6398a845"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "54da307227178a764dd38831a91ab0687eaf4e3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ae50669e063bf313ea572a88bfac2e6562e7cc8", "patch": "@@ -116,6 +116,16 @@\n \t(valid_psw_flag): Constify parameter which.\n \t(rx_memory_move_cost): Change type of parameter regclass to reg_class_t.\n \n+\tPR target/46415\n+\t* config/mmix/mmix-protos.h (mmix_local_alignment): Update prototype.\n+\t(mmix_dbx_register_number): Likewise.\n+\t* config/mmix/mmix.c: Include df.h .\n+\t(mmix_local_alignment): Change argument basic_align and return type\n+\tto unsigned.\n+\t(mmix_dbx_register_number): Change argument and return type to\n+\tunsigned.\n+\t(mmix_expand_prologue): Use add_reg_note.\n+\n 2010-11-10  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \tPR/46268"}, {"sha": "847c16a86edce584bd56653c4641930a74c939e4", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=4ae50669e063bf313ea572a88bfac2e6562e7cc8", "patch": "@@ -48,12 +48,12 @@ extern void mmix_output_register_setting (FILE *, int, HOST_WIDEST_INT, int);\n extern void mmix_conditional_register_usage (void);\n extern int mmix_opposite_regno (int, int);\n extern int mmix_local_regno (int);\n-extern int mmix_dbx_register_number (int);\n+extern unsigned mmix_dbx_register_number (unsigned);\n extern int mmix_use_simple_return (void);\n extern void mmix_make_decl_one_only (tree);\n extern int mmix_data_alignment (tree, int);\n extern int mmix_constant_alignment (tree, int);\n-extern int mmix_local_alignment (tree, int);\n+extern unsigned mmix_local_alignment (tree, unsigned);\n extern void mmix_asm_output_pool_prologue (FILE *, const char *, tree, int);\n extern void mmix_asm_output_aligned_common (FILE *, const char *, int, int);\n extern void mmix_asm_output_aligned_local (FILE *, const char *, int, int);"}, {"sha": "babac44183a6f5e808ad9d3a1eef8b51bb94ec8f", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae50669e063bf313ea572a88bfac2e6562e7cc8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=4ae50669e063bf313ea572a88bfac2e6562e7cc8", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"df.h\"\n \n /* First some local helper definitions.  */\n #define MMIX_FIRST_GLOBAL_REGNUM 32\n@@ -327,8 +328,8 @@ mmix_constant_alignment (tree constant ATTRIBUTE_UNUSED, int basic_align)\n \n /* LOCAL_ALIGNMENT.  */\n \n-int\n-mmix_local_alignment (tree type ATTRIBUTE_UNUSED, int basic_align)\n+unsigned\n+mmix_local_alignment (tree type ATTRIBUTE_UNUSED, unsigned basic_align)\n {\n   if (basic_align < 32)\n     return 32;\n@@ -1901,8 +1902,8 @@ mmix_asm_output_align (FILE *stream, int power)\n \n /* DBX_REGISTER_NUMBER.  */\n \n-int\n-mmix_dbx_register_number (int regno)\n+unsigned\n+mmix_dbx_register_number (unsigned regno)\n {\n   /* Adjust the register number to the one it will be output as, dammit.\n      It'd be nice if we could check the assumption that we're filling a\n@@ -2110,14 +2111,12 @@ mmix_expand_prologue (void)\n \t\t\t\t\t\t\t offset)),\n \t\t\t     tmpreg);\n       RTX_FRAME_RELATED_P (insn) = 1;\n-      REG_NOTES (insn)\n-\t= gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t     gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t  gen_rtx_MEM (DImode,\n-\t\t\t\t\t\t       plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t\t\t\t      offset)),\n-\t\t\t\t\t  retreg),\n-\t\t\t     REG_NOTES (insn));\n+      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t    gen_rtx_SET (VOIDmode,\n+\t\t\t\t gen_rtx_MEM (DImode,\n+\t\t\t\t\t      plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t\t     offset)),\n+\t\t\t\t retreg));\n \n       offset -= 8;\n     }"}]}