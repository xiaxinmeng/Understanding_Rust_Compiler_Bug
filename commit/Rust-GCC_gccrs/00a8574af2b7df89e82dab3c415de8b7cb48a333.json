{"sha": "00a8574af2b7df89e82dab3c415de8b7cb48a333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhODU3NGFmMmI3ZGY4OWU4MmRhYjNjNDE1ZGU4YjdjYjQ4YTMzMw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-02-10T12:52:23Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-02-10T12:52:23Z"}, "message": "Enable instruction fusion of dependent AESE; AESMC and AESD; AESIMC pairs.\n\nThis can give up to 2x speedup on many AArch64 implementations. Also model\nthe crypto instructions on Cortex-A57 according to the Optimization Guide.\n\n    gcc/\n        * config/aarch64/aarch64.c (cortexa53_tunings): Enable AES fusion.\n        (cortexa57_tunings): Likewise.\n        (cortexa72_tunings): Likewise.\n        (arch_macro_fusion_pair_p): Add support for AES fusion.\n        * config/aarch64/aarch64-fusion-pairs.def: Add AES_AESMC entry.\n        * config/arm/aarch-common.c (aarch_crypto_can_dual_issue):\n        Allow virtual registers before reload so early scheduling works.\n        * config/arm/cortex-a57.md (cortex_a57_crypto_simple): Use\n        correct latency and pipeline.\n        (cortex_a57_crypto_complex): Likewise.\n        (cortex_a57_crypto_xor): Likewise.\n        (define_bypass): Add AES bypass.\n\nFrom-SVN: r233268", "tree": {"sha": "4c879ecb760ddc8f8f42a294ede6907a665ed74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c879ecb760ddc8f8f42a294ede6907a665ed74a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a8574af2b7df89e82dab3c415de8b7cb48a333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a8574af2b7df89e82dab3c415de8b7cb48a333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a8574af2b7df89e82dab3c415de8b7cb48a333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a8574af2b7df89e82dab3c415de8b7cb48a333/comments", "author": null, "committer": null, "parents": [{"sha": "24a179f835ec7ce4376071d3744ecd0083841ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a179f835ec7ce4376071d3744ecd0083841ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a179f835ec7ce4376071d3744ecd0083841ae7"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "742d555d9d21bc12c01086ac8de19f03cb0e0bde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00a8574af2b7df89e82dab3c415de8b7cb48a333", "patch": "@@ -1,3 +1,18 @@\n+2016-02-10  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (cortexa53_tunings): Enable AES fusion.\n+\t(cortexa57_tunings): Likewise.\n+\t(cortexa72_tunings): Likewise.\n+\t(arch_macro_fusion_pair_p): Add support for AES fusion.\n+\t* config/aarch64/aarch64-fusion-pairs.def: Add AES_AESMC entry.\n+\t* config/arm/aarch-common.c (aarch_crypto_can_dual_issue):\n+\tAllow virtual registers before reload so early scheduling works.\n+\t* config/arm/cortex-a57.md (cortex_a57_crypto_simple): Use\n+\tcorrect latency and pipeline.\n+\t(cortex_a57_crypto_complex): Likewise.\n+\t(cortex_a57_crypto_xor): Likewise.\n+\t(define_bypass): Add AES bypass.\n+\n 2016-02-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69726"}, {"sha": "f488671f16b084bcd25fa68a10ffaaf24159ff11", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=00a8574af2b7df89e82dab3c415de8b7cb48a333", "patch": "@@ -33,4 +33,5 @@ AARCH64_FUSION_PAIR (\"adrp+add\", ADRP_ADD)\n AARCH64_FUSION_PAIR (\"movk+movk\", MOVK_MOVK)\n AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR)\n AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n+AARCH64_FUSION_PAIR (\"aes+aesmc\", AES_AESMC)\n "}, {"sha": "cb0892e8b544e4e69f3777eba04de5f5bd668edf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=00a8574af2b7df89e82dab3c415de8b7cb48a333", "patch": "@@ -451,7 +451,7 @@ static const struct tune_params cortexa53_tunings =\n   &generic_branch_cost,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n-  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fusible_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n@@ -476,7 +476,7 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_branch_cost,\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n-  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n@@ -502,7 +502,7 @@ static const struct tune_params cortexa72_tunings =\n   &generic_branch_cost,\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n-  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n@@ -13328,6 +13328,10 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n+  if ((aarch64_tune_params.fusible_ops & AARCH64_FUSE_AES_AESMC)\n+       && aarch_crypto_can_dual_issue (prev, curr))\n+    return true;\n+\n   if ((aarch64_tune_params.fusible_ops & AARCH64_FUSE_CMP_BRANCH)\n       && any_condjump_p (curr))\n     {"}, {"sha": "dd37be0291a633f606d95ec8acacc598435828b3", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=00a8574af2b7df89e82dab3c415de8b7cb48a333", "patch": "@@ -58,8 +58,11 @@ aarch_crypto_can_dual_issue (rtx_insn *producer_insn, rtx_insn *consumer_insn)\n   {\n     unsigned int regno = REGNO (SET_DEST (producer_set));\n \n-    return REGNO (SET_DEST (consumer_set)) == regno\n-           && REGNO (XVECEXP (consumer_src, 0, 0)) == regno;\n+    /* Before reload the registers are virtual, so the destination of\n+       consumer_set doesn't need to match.  */\n+\n+    return (REGNO (SET_DEST (consumer_set)) == regno || !reload_completed)\n+\t    && REGNO (XVECEXP (consumer_src, 0, 0)) == regno;\n   }\n \n   return 0;"}, {"sha": "758d382f9930f4222ebbacc9fc8eea2b49cb03d9", "filename": "gcc/config/arm/cortex-a57.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a8574af2b7df89e82dab3c415de8b7cb48a333/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a57.md?ref=00a8574af2b7df89e82dab3c415de8b7cb48a333", "patch": "@@ -747,20 +747,20 @@\n \t\t\t neon_fp_sqrt_s_q, neon_fp_sqrt_d_q\"))\n   \"ca57_cx2_block*3\")\n \n-(define_insn_reservation \"cortex_a57_crypto_simple\" 4\n+(define_insn_reservation \"cortex_a57_crypto_simple\" 3\n   (and (eq_attr \"tune\" \"cortexa57\")\n        (eq_attr \"type\" \"crypto_aese,crypto_aesmc,crypto_sha1_fast,crypto_sha256_fast\"))\n-  \"ca57_cx2\")\n+  \"ca57_cx1\")\n \n-(define_insn_reservation \"cortex_a57_crypto_complex\" 7\n+(define_insn_reservation \"cortex_a57_crypto_complex\" 6\n   (and (eq_attr \"tune\" \"cortexa57\")\n        (eq_attr \"type\" \"crypto_sha1_slow,crypto_sha256_slow\"))\n-  \"ca57_cx2+(ca57_cx2_issue,ca57_cx2)\")\n+  \"ca57_cx1*2\")\n \n-(define_insn_reservation \"cortex_a57_crypto_xor\" 7\n+(define_insn_reservation \"cortex_a57_crypto_xor\" 6\n   (and (eq_attr \"tune\" \"cortexa57\")\n        (eq_attr \"type\" \"crypto_sha1_xor\"))\n-  \"(ca57_cx1+ca57_cx2)\")\n+  \"(ca57_cx1*2)|(ca57_cx2*2)\")\n \n ;; We lie with calls.  They take up all issue slots, but are otherwise\n ;; not harmful.\n@@ -797,3 +797,8 @@\n (define_bypass 1 \"cortex_a57_*\"\n \t\t \"cortex_a57_call,cortex_a57_branch\")\n \n+;; AESE+AESMC and AESD+AESIMC pairs forward with zero latency\n+(define_bypass 0 \"cortex_a57_crypto_simple\"\n+\t\t \"cortex_a57_crypto_simple\"\n+\t\t \"aarch_crypto_can_dual_issue\")\n+"}]}