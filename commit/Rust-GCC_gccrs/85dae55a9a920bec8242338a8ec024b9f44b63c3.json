{"sha": "85dae55a9a920bec8242338a8ec024b9f44b63c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkYWU1NWE5YTkyMGJlYzgyNDIzMzhhOGVjMDI0YjlmNDRiNjNjMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-03-19T08:48:36Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-03-19T08:48:36Z"}, "message": "s390.md (UNSPEC_COPYSIGN): New constant.\n\n2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md (UNSPEC_COPYSIGN): New constant.\n\t(op_type attribute): RRF instruction type added.\n\t(fT0): New mode attribute.\n\t(\"*movdi_64dfp\", \"*movdf_64dfp\", \"*neg<mode>2_nocc\", \"*abs<mode>2_nocc\",\n\t\"*negabs<mode>2_nocc\", \"copysign<mode>3\"): Insn definitions added.\n\t* config/s390/s390.h (SECONDARY_MEMORY_NEEDED): Due to a new instruction\n\tno secondary memory is needed when moving DFmode values between GPRs\n\tand FPRs.\n\nFrom-SVN: r123056", "tree": {"sha": "5f5877f6c3bb4b4247aae8602a68280e2725d562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5877f6c3bb4b4247aae8602a68280e2725d562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85dae55a9a920bec8242338a8ec024b9f44b63c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85dae55a9a920bec8242338a8ec024b9f44b63c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85dae55a9a920bec8242338a8ec024b9f44b63c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85dae55a9a920bec8242338a8ec024b9f44b63c3/comments", "author": null, "committer": null, "parents": [{"sha": "3443392a8a5ec38a0e1c58689c166e025226b802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3443392a8a5ec38a0e1c58689c166e025226b802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3443392a8a5ec38a0e1c58689c166e025226b802"}], "stats": {"total": 144, "additions": 138, "deletions": 6}, "files": [{"sha": "f2671f07d74183631761fa729e18caefc9dc2c71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85dae55a9a920bec8242338a8ec024b9f44b63c3", "patch": "@@ -1,3 +1,14 @@\n+2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md (UNSPEC_COPYSIGN): New constant.\n+\t(op_type attribute): RRF instruction type added.\n+\t(fT0): New mode attribute.\n+\t(\"*movdi_64dfp\", \"*movdf_64dfp\", \"*neg<mode>2_nocc\", \"*abs<mode>2_nocc\",\n+\t\"*negabs<mode>2_nocc\", \"copysign<mode>3\"): Insn definitions added.\n+\t* config/s390/s390.h (SECONDARY_MEMORY_NEEDED): Due to a new instruction\n+\tno secondary memory is needed when moving DFmode values between GPRs\n+\tand FPRs.\n+\n 2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.opt (\"mhard-float\", \"msoft-float\"): Bit value"}, {"sha": "fc36baf7cb1fb9752854ba5f5b53b510440155f4", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=85dae55a9a920bec8242338a8ec024b9f44b63c3", "patch": "@@ -51,7 +51,8 @@ enum processor_flags\n   PF_IEEE_FLOAT = 1,\n   PF_ZARCH = 2,\n   PF_LONG_DISPLACEMENT = 4,\n-  PF_EXTIMM = 8\n+  PF_EXTIMM = 8,\n+  PF_DFP = 16\n };\n \n extern enum processor_type s390_tune;\n@@ -68,11 +69,15 @@ extern enum processor_flags s390_arch_flags;\n \t(s390_arch_flags & PF_LONG_DISPLACEMENT)\n #define TARGET_CPU_EXTIMM \\\n  \t(s390_arch_flags & PF_EXTIMM)\n+#define TARGET_CPU_DFP \\\n+ \t(s390_arch_flags & PF_DFP)\n \n #define TARGET_LONG_DISPLACEMENT \\\n        (TARGET_ZARCH && TARGET_CPU_LONG_DISPLACEMENT)\n #define TARGET_EXTIMM \\\n        (TARGET_ZARCH && TARGET_CPU_EXTIMM)\n+#define TARGET_DFP \\\n+       (TARGET_ZARCH && TARGET_CPU_DFP)\n \n /* Run-time target specification.  */\n \n@@ -103,9 +108,9 @@ extern enum processor_flags s390_arch_flags;\n #define TARGET_IEEE_FLOAT          1\n \n #ifdef DEFAULT_TARGET_64BIT\n-#define TARGET_DEFAULT             (MASK_64BIT | MASK_ZARCH | MASK_HARD_FLOAT)\n+#define TARGET_DEFAULT             (MASK_64BIT | MASK_ZARCH)\n #else\n-#define TARGET_DEFAULT             MASK_HARD_FLOAT\n+#define TARGET_DEFAULT             0\n #endif\n \n /* Support for configure-time defaults.  */\n@@ -471,7 +476,9 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n \n /* We need secondary memory to move data between GPRs and FPRs.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\\n- ((CLASS1) != (CLASS2) && ((CLASS1) == FP_REGS || (CLASS2) == FP_REGS))\n+ ((CLASS1) != (CLASS2)                                \\\n+  && ((CLASS1) == FP_REGS || (CLASS2) == FP_REGS)     \\\n+  && (!TARGET_DFP || GET_MODE_SIZE (MODE) != 8))\n \n /* Get_secondary_mem widens its argument to BITS_PER_WORD which loses on 64bit\n    because the movsi and movsf patterns don't handle r/f moves.  */"}, {"sha": "fbb2f9ad9fecd62aa8c9c838f056fa33fbf8fb83", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 116, "deletions": 2, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85dae55a9a920bec8242338a8ec024b9f44b63c3/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=85dae55a9a920bec8242338a8ec024b9f44b63c3", "patch": "@@ -97,6 +97,9 @@\n    ; Stack Smashing Protector\n    (UNSPEC_SP_SET \t\t700)\n    (UNSPEC_SP_TEST\t\t701)\n+\n+   ; Copy sign instructions\n+   (UNSPEC_COPYSIGN             800)\n  ])\n \n ;;\n@@ -149,7 +152,7 @@\n ;; Used to determine defaults for length and other attribute values.\n \n (define_attr \"op_type\"\n-  \"NN,E,RR,RRE,RX,RS,RSI,RI,SI,S,SS,SSE,RXE,RSE,RIL,RIE,RXY,RSY,SIY\"\n+  \"NN,E,RR,RRE,RX,RS,RSI,RI,SI,S,SS,SSE,RXE,RSE,RIL,RIE,RXY,RSY,SIY,RRF\"\n   (const_string \"NN\"))\n \n ;; Instruction type attribute used for scheduling.\n@@ -270,6 +273,14 @@\n ;; This is used to disable the memory alternative in TFmode patterns.\n (define_mode_attr Rf [(TF \"f\") (DF \"R\") (SF \"R\")])\n \n+;; This attribute is used in the operand constraint list\n+;; for instructions dealing with the sign bit of 32 or 64bit fp values.\n+;; TFmode values are represented by a fp register pair.  Since the\n+;; sign bit instructions only handle single source and target fp registers\n+;; these instructions can only be used for TFmode values if the source and\n+;; target operand uses the same fp register.\n+(define_mode_attr fT0 [(TF \"0\") (DF \"f\") (SF \"f\")])\n+\n ;; In GPR and P templates, a constraint like \"<d0>\" will expand to \"d\" in DImode\n ;; and \"0\" in SImode. This allows to combine instructions of which the 31bit\n ;; version only operates on one register.\n@@ -885,6 +896,44 @@\n    [(set_attr \"op_type\" \"RIL\")\n     (set_attr \"type\"    \"larl\")])\n \n+(define_insn \"*movdi_64dfp\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+                            \"=d,d,d,d,d,d,d,d,f,d,d,d,d,\n+                             m,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n+        (match_operand:DI 1 \"general_operand\"\n+                            \"K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,d,f,L,d,m,\n+                             d,*f,R,T,*f,*f,t,d,t,Q,?Q\"))]\n+  \"TARGET_64BIT && TARGET_DFP\"\n+  \"@\n+   lghi\\t%0,%h1\n+   llihh\\t%0,%i1\n+   llihl\\t%0,%i1\n+   llilh\\t%0,%i1\n+   llill\\t%0,%i1\n+   lgfi\\t%0,%1\n+   llihf\\t%0,%k1\n+   llilf\\t%0,%k1\n+   ldgr\\t%0,%1\n+   lgdr\\t%0,%1\n+   lay\\t%0,%a1\n+   lgr\\t%0,%1\n+   lg\\t%0,%1\n+   stg\\t%1,%0\n+   ldr\\t%0,%1\n+   ld\\t%0,%1\n+   ldy\\t%0,%1\n+   std\\t%1,%0\n+   stdy\\t%1,%0\n+   #\n+   #\n+   stam\\t%1,%N1,%S0\n+   lam\\t%0,%N0,%S1\n+   #\"\n+  [(set_attr \"op_type\" \"RI,RI,RI,RI,RI,RIL,RIL,RIL,RRE,RRE,RXY,RRE,RXY,RXY,\n+                        RR,RX,RXY,RX,RXY,*,*,RS,RS,SS\")\n+   (set_attr \"type\" \"*,*,*,*,*,*,*,*,floaddf,floaddf,la,lr,load,store,\n+                     floaddf,floaddf,floaddf,fstoredf,fstoredf,*,*,*,*,*\")])\n+\n (define_insn \"*movdi_64extimm\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                             \"=d,d,d,d,d,d,d,d,d,d,d,m,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n@@ -1575,9 +1624,32 @@\n   \"\"\n   \"\")\n \n+(define_insn \"*movdf_64dfp\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"\n+\t\t\t    \"=f,f,f,d,f,f,R,T,d,d,m,?Q\")\n+        (match_operand:DF 1 \"general_operand\"\n+\t\t\t    \"G,f,d,f,R,T,f,f,d,m,d,?Q\"))]\n+  \"TARGET_64BIT && TARGET_DFP\"\n+  \"@\n+   lzdr\\t%0\n+   ldr\\t%0,%1\n+   ldgr\\t%0,%1\n+   lgdr\\t%0,%1\n+   ld\\t%0,%1\n+   ldy\\t%0,%1\n+   std\\t%1,%0\n+   stdy\\t%1,%0\n+   lgr\\t%0,%1\n+   lg\\t%0,%1\n+   stg\\t%1,%0\n+   #\"\n+  [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY,SS\")\n+   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n+                     fstoredf,fstoredf,lr,load,store,*\")])\n+\n (define_insn \"*movdf_64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,m,?Q\")\n-        (match_operand:DF 1 \"general_operand\" \"G,f,R,T,f,f,d,m,d,?Q\"))]\n+        (match_operand:DF 1 \"general_operand\"       \"G,f,R,T,f,f,d,m,d,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n    lzdr\\t%0\n@@ -5971,6 +6043,15 @@\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n+; lcdfr\n+(define_insn \"*neg<mode>2_nocc\"\n+  [(set (match_operand:FPR 0 \"register_operand\"          \"=f\")\n+        (neg:FPR (match_operand:FPR 1 \"register_operand\" \"<fT0>\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"lcdfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n+\n ; lcxbr, lcdbr, lcebr\n (define_insn \"*neg<mode>2\"\n   [(set (match_operand:FPR 0 \"register_operand\" \"=f\")\n@@ -6085,6 +6166,15 @@\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n+; lpdfr\n+(define_insn \"*abs<mode>2_nocc\"\n+  [(set (match_operand:FPR 0 \"register_operand\"          \"=f\")\n+        (abs:FPR (match_operand:FPR 1 \"register_operand\" \"<fT0>\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"lpdfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n+\n ; lpxbr, lpdbr, lpebr\n (define_insn \"*abs<mode>2\"\n   [(set (match_operand:FPR 0 \"register_operand\" \"=f\")\n@@ -6191,6 +6281,15 @@\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n+; lndfr\n+(define_insn \"*negabs<mode>2_nocc\"\n+  [(set (match_operand:FPR 0 \"register_operand\"                   \"=f\")\n+        (neg:FPR (abs:FPR (match_operand:FPR 1 \"register_operand\" \"<fT0>\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"lndfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n+\n ; lnxbr, lndbr, lnebr\n (define_insn \"*negabs<mode>2\"\n   [(set (match_operand:FPR 0 \"register_operand\" \"=f\")\n@@ -6201,6 +6300,21 @@\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimp<mode>\")])\n \n+;;\n+;;- Copy sign instructions\n+;;\n+\n+; cpsdr\n+(define_insn \"copysign<mode>3\"\n+  [(set (match_operand:FPR 0 \"register_operand\" \"=f\")\n+\t(unspec:FPR [(match_operand:FPR 1 \"register_operand\" \"<fT0>\")\n+\t\t     (match_operand:FPR 2 \"register_operand\" \"f\")] \n+\t\t    UNSPEC_COPYSIGN))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"cpsdr\\t%0,%2,%1\"\n+  [(set_attr \"op_type\"  \"RRF\")\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n+\n ;;\n ;;- Square root instructions.\n ;;"}]}