{"sha": "386489e361a1299e34dd6f755dad1f4023ce08e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2NDg5ZTM2MWExMjk5ZTM0ZGQ2Zjc1NWRhZDFmNDAyM2NlMDhlMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-12-01T10:16:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-12-01T10:16:50Z"}, "message": "re PR c++/17431 (Internal error: Segmentation fault (program cc1plus))\n\ncp:\n\tPR c++/17431\n\t* call.c (standard_conversion): Add FLAGS parameter. Do not allow\n\tderived to base conversion when checking constructor\n\taccessibility.\n\t(implicit_conversion): Pass FLAGS to standard_conversion.\n\t(check_constructir_callable): Disallow conversion functions.\ntestsuite:\n\tPR c++/17431\n\t* g++.dg/overload/arg1.C: New.\n\t* g++.dg/overload/arg2.C: New.\n\t* g++.dg/overload/arg3.C: New.\n\t* g++.dg/overload/arg4.C: New.\n\nFrom-SVN: r91559", "tree": {"sha": "fd2f0d33bb80e63ed673425f60340bd87354c1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2f0d33bb80e63ed673425f60340bd87354c1ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386489e361a1299e34dd6f755dad1f4023ce08e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386489e361a1299e34dd6f755dad1f4023ce08e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386489e361a1299e34dd6f755dad1f4023ce08e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386489e361a1299e34dd6f755dad1f4023ce08e3/comments", "author": null, "committer": null, "parents": [{"sha": "eab97e449ba769f0a8f4cf5cd69970bbf38de38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab97e449ba769f0a8f4cf5cd69970bbf38de38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab97e449ba769f0a8f4cf5cd69970bbf38de38f"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "81d1dc80212d288a93e56fdd53084116763f9fdf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -1,3 +1,12 @@\n+2004-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/17431\n+\t* call.c (standard_conversion): Add FLAGS parameter. Do not allow\n+\tderived to base conversion when checking constructor\n+\taccessibility.\n+\t(implicit_conversion): Pass FLAGS to standard_conversion.\n+\t(check_constructir_callable): Disallow conversion functions.\n+\n 2004-11-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* parser.c: Fix comment typos."}, {"sha": "f8af887a323b30d2ba88c29a9e244e7584631842", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -170,7 +170,7 @@ static struct z_candidate *add_conv_candidate\n static struct z_candidate *add_function_candidate \n \t(struct z_candidate **, tree, tree, tree, tree, tree, int);\n static conversion *implicit_conversion (tree, tree, tree, int);\n-static conversion *standard_conversion (tree, tree, tree);\n+static conversion *standard_conversion (tree, tree, tree, int);\n static conversion *reference_binding (tree, tree, tree, int);\n static conversion *build_conv (conversion_kind, tree, conversion *);\n static bool is_subseq (conversion *, conversion *);\n@@ -583,7 +583,7 @@ strip_top_quals (tree t)\n    also pass the expression EXPR to convert from.  */\n \n static conversion *\n-standard_conversion (tree to, tree from, tree expr)\n+standard_conversion (tree to, tree from, tree expr, int flags)\n {\n   enum tree_code fcode, tcode;\n   conversion *conv;\n@@ -633,7 +633,7 @@ standard_conversion (tree to, tree from, tree expr)\n          the standard conversion sequence to perform componentwise\n          conversion.  */\n       conversion *part_conv = standard_conversion\n-        (TREE_TYPE (to), TREE_TYPE (from), NULL_TREE);\n+        (TREE_TYPE (to), TREE_TYPE (from), NULL_TREE, flags);\n       \n       if (part_conv)\n         {\n@@ -815,7 +815,8 @@ standard_conversion (tree to, tree from, tree expr)\n   else if (fcode == VECTOR_TYPE && tcode == VECTOR_TYPE\n \t   && vector_types_convertible_p (from, to))\n     return build_conv (ck_std, to, conv);\n-  else if (IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)\n+  else if (!(flags & LOOKUP_CONSTRUCTOR_CALLABLE)\n+\t   && IS_AGGR_TYPE (to) && IS_AGGR_TYPE (from)\n \t   && is_properly_derived_from (from, to))\n     {\n       if (conv->kind == ck_rvalue)\n@@ -1227,7 +1228,7 @@ implicit_conversion (tree to, tree from, tree expr, int flags)\n   if (TREE_CODE (to) == REFERENCE_TYPE)\n     conv = reference_binding (to, from, expr, flags);\n   else\n-    conv = standard_conversion (to, from, expr);\n+    conv = standard_conversion (to, from, expr, flags);\n \n   if (conv)\n     return conv;\n@@ -4081,6 +4082,7 @@ check_constructor_callable (tree type, tree expr)\n \t\t\t     build_tree_list (NULL_TREE, expr), \n \t\t\t     type,\n \t\t\t     LOOKUP_NORMAL | LOOKUP_ONLYCONVERTING\n+\t\t\t     | LOOKUP_NO_CONVERSION\n \t\t\t     | LOOKUP_CONSTRUCTOR_CALLABLE);\n }\n "}, {"sha": "e9609959c188add80550ccdc6c0cbd0f5a772967", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -1,3 +1,11 @@\n+2004-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/17431\n+\t* g++.dg/overload/arg1.C: New.\n+\t* g++.dg/overload/arg2.C: New.\n+\t* g++.dg/overload/arg3.C: New.\n+\t* g++.dg/overload/arg4.C: New.\n+\n 2004-12-01  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c99-flex-array-4.c: Remove."}, {"sha": "6ac6a7e5c298ab85e730bdd2761dd026c42c99b2", "filename": "gcc/testsuite/g++.dg/overload/arg1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg1.C?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2004 <nathan@codesourcery.com>\n+\n+// PR 17431. copy ctor from user conv\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A {};\n+\n+struct B : A\n+{\n+  B(int); // { dg-error \"\" \"\" }\n+  B(B &); // { dg-error \"\" \"\" }\n+  B(A); // { dg-error \"\" \"\" }\n+};\n+\n+void foo(B);\n+\n+void bar()\n+{\n+  foo(0); // { dg-error \"no matching function|initializing\" \"\" }\n+}"}, {"sha": "1e39186f7bd0df5572f64681b81d97b56f1af573", "filename": "gcc/testsuite/g++.dg/overload/arg2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg2.C?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2004 <nathan@codesourcery.com>\n+\n+// PR 17431. copy ctor from user conv\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A {};\n+\n+struct B : A\n+{\n+  B(int);\n+  B(A);\n+};\n+\n+void foo(B);\n+\n+void bar()\n+{\n+  foo(0);\n+}"}, {"sha": "1778ce5a43c8a42a16e6631af426e5a61a9993ce", "filename": "gcc/testsuite/g++.dg/overload/arg3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg3.C?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2004 <nathan@codesourcery.com>\n+\n+// PR 17431. copy ctor from user conv\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A {};\n+\n+struct B : A\n+{\n+  B(int); // { dg-error \"\" \"\" }\n+  B(B&);  // { dg-error \"\" \"\" }\n+};\n+\n+void foo(B);\n+\n+void bar()\n+{\n+  foo(0); // { dg-error \"no matching function|initializing\" \"\" }\n+}"}, {"sha": "34aa62506836f5599937f51b13d46d757d6573b3", "filename": "gcc/testsuite/g++.dg/overload/arg4.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386489e361a1299e34dd6f755dad1f4023ce08e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Farg4.C?ref=386489e361a1299e34dd6f755dad1f4023ce08e3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2004 <nathan@codesourcery.com>\n+\n+// PR 17431. copy ctor from user conv\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A {};\n+\n+struct B : A\n+{\n+  B(int);  // { dg-error \"\" \"\" }\n+  B(B&);   // { dg-error \"\" \"\" }\n+  B(A);    // { dg-error \"\" \"\" }\n+};\n+\n+struct C\n+{\n+  operator B () const;  \n+};\n+\n+\n+void foo(B);\n+\n+void bar()\n+{\n+  C c;\n+  foo(c); // { dg-error \"no matching function|initializing\" \"\" }\n+}"}]}