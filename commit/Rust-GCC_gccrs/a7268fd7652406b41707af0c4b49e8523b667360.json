{"sha": "a7268fd7652406b41707af0c4b49e8523b667360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyNjhmZDc2NTI0MDZiNDE3MDdhZjBjNGI0OWU4NTIzYjY2NzM2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-19T06:08:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-19T06:08:33Z"}, "message": "tree-parloops.c (parloops_is_slp_reduction): Do not set LOOP_VINFO_OPERANDS_SWAPPED.\n\n2019-09-19  Richard Biener  <rguenther@suse.de>\n\n\t* tree-parloops.c (parloops_is_slp_reduction): Do not set\n\tLOOP_VINFO_OPERANDS_SWAPPED.\n\t(parloops_is_simple_reduction): Likewise.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Do not\n\tinitialize operands_swapped.\n\t(_loop_vec_info::~_loop_vec_info): Do not re-canonicalize stmts.\n\t(vect_is_slp_reduction): Do not swap operands.\n\t* tree-vectorizer.h (_loop_vec_info::operands_swapped): Remove.\n\t(LOOP_VINFO_OPERANDS_SWAPPED): Likewise.\n\nFrom-SVN: r275928", "tree": {"sha": "3c28f85d214537d17b887d6b26698537094b1ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c28f85d214537d17b887d6b26698537094b1ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7268fd7652406b41707af0c4b49e8523b667360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7268fd7652406b41707af0c4b49e8523b667360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7268fd7652406b41707af0c4b49e8523b667360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7268fd7652406b41707af0c4b49e8523b667360/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbd33afe4728f16789a37fe0a86fb0079d366b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd33afe4728f16789a37fe0a86fb0079d366b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd33afe4728f16789a37fe0a86fb0079d366b69"}], "stats": {"total": 99, "additions": 18, "deletions": 81}, "files": [{"sha": "92fdc63efc6345c3b106616dae52e6268de3f0a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7268fd7652406b41707af0c4b49e8523b667360", "patch": "@@ -1,3 +1,15 @@\n+2019-09-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-parloops.c (parloops_is_slp_reduction): Do not set\n+\tLOOP_VINFO_OPERANDS_SWAPPED.\n+\t(parloops_is_simple_reduction): Likewise.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Do not\n+\tinitialize operands_swapped.\n+\t(_loop_vec_info::~_loop_vec_info): Do not re-canonicalize stmts.\n+\t(vect_is_slp_reduction): Do not swap operands.\n+\t* tree-vectorizer.h (_loop_vec_info::operands_swapped): Remove.\n+\t(LOOP_VINFO_OPERANDS_SWAPPED): Likewise.\n+\n 2019-09-19  Hongtao Liu <hongtao.liu@intel.com>\n \n \tPR target/87007"}, {"sha": "ae880e151db6667a207fcd6a738c36dbd19a4249", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=a7268fd7652406b41707af0c4b49e8523b667360", "patch": "@@ -347,9 +347,6 @@ parloops_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t\t\t\t gimple_assign_rhs1_ptr (next_stmt),\n                                  gimple_assign_rhs2_ptr (next_stmt));\n \t      update_stmt (next_stmt);\n-\n-\t      if (CONSTANT_CLASS_P (gimple_assign_rhs1 (next_stmt)))\n-\t\tLOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n \t    }\n \t  else\n \t    return false;\n@@ -831,9 +828,6 @@ parloops_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  if (dump_enabled_p ())\n \t    report_ploop_op (MSG_NOTE, def_stmt,\n \t\t\t     \"detected reduction: need to swap operands: \");\n-\n-\t  if (CONSTANT_CLASS_P (gimple_assign_rhs1 (def_stmt)))\n-\t    LOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n         }\n       else\n         {"}, {"sha": "5ee4ee3063f07b82871abb22f0a7bb9b327326d9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 68, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a7268fd7652406b41707af0c4b49e8523b667360", "patch": "@@ -832,7 +832,6 @@ _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n     fully_masked_p (false),\n     peeling_for_gaps (false),\n     peeling_for_niter (false),\n-    operands_swapped (false),\n     no_data_dependencies (false),\n     has_mask_store (false),\n     scalar_loop_scaling (profile_probability::uninitialized ()),\n@@ -906,57 +905,6 @@ release_vec_loop_masks (vec_loop_masks *masks)\n \n _loop_vec_info::~_loop_vec_info ()\n {\n-  int nbbs;\n-  gimple_stmt_iterator si;\n-  int j;\n-\n-  nbbs = loop->num_nodes;\n-  for (j = 0; j < nbbs; j++)\n-    {\n-      basic_block bb = bbs[j];\n-      for (si = gsi_start_bb (bb); !gsi_end_p (si); )\n-        {\n-\t  gimple *stmt = gsi_stmt (si);\n-\n-\t  /* We may have broken canonical form by moving a constant\n-\t     into RHS1 of a commutative op.  Fix such occurrences.  */\n-\t  if (operands_swapped && is_gimple_assign (stmt))\n-\t    {\n-\t      enum tree_code code = gimple_assign_rhs_code (stmt);\n-\n-\t      if ((code == PLUS_EXPR\n-\t\t   || code == POINTER_PLUS_EXPR\n-\t\t   || code == MULT_EXPR)\n-\t\t  && CONSTANT_CLASS_P (gimple_assign_rhs1 (stmt)))\n-\t\tswap_ssa_operands (stmt,\n-\t\t\t\t   gimple_assign_rhs1_ptr (stmt),\n-\t\t\t\t   gimple_assign_rhs2_ptr (stmt));\n-\t      else if (code == COND_EXPR\n-\t\t       && CONSTANT_CLASS_P (gimple_assign_rhs2 (stmt)))\n-\t\t{\n-\t\t  tree cond_expr = gimple_assign_rhs1 (stmt);\n-\t\t  enum tree_code cond_code = TREE_CODE (cond_expr);\n-\n-\t\t  if (TREE_CODE_CLASS (cond_code) == tcc_comparison)\n-\t\t    {\n-\t\t      bool honor_nans = HONOR_NANS (TREE_OPERAND (cond_expr,\n-\t\t\t\t\t\t\t\t  0));\n-\t\t      cond_code = invert_tree_comparison (cond_code,\n-\t\t\t\t\t\t\t  honor_nans);\n-\t\t      if (cond_code != ERROR_MARK)\n-\t\t\t{\n-\t\t\t  TREE_SET_CODE (cond_expr, cond_code);\n-\t\t\t  swap_ssa_operands (stmt,\n-\t\t\t\t\t     gimple_assign_rhs2_ptr (stmt),\n-\t\t\t\t\t     gimple_assign_rhs3_ptr (stmt));\n-\t\t\t}\n-\t\t    }\n-\t\t}\n-\t    }\n-          gsi_next (&si);\n-        }\n-    }\n-\n   free (bbs);\n \n   release_vec_loop_masks (&masks);\n@@ -2715,7 +2663,8 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t}\n       else\n \t{\n-          tree op = gimple_assign_rhs2 (next_stmt);\n+\t  gcc_assert (gimple_assign_rhs1 (next_stmt) == lhs);\n+\t  tree op = gimple_assign_rhs2 (next_stmt);\n \t  stmt_vec_info def_stmt_info = loop_info->lookup_def (op);\n \n           /* Check that the other def is either defined in the loop\n@@ -2725,23 +2674,12 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt_info->stmt))\n \t      && vect_valid_reduction_input_p (def_stmt_info))\n   \t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_NOTE, vect_location, \"swapping oprnds: %G\",\n-\t\t\t\t next_stmt);\n-\n-\t      swap_ssa_operands (next_stmt,\n-\t \t\t         gimple_assign_rhs1_ptr (next_stmt),\n-                                 gimple_assign_rhs2_ptr (next_stmt));\n-\t      update_stmt (next_stmt);\n-\n-\t      if (CONSTANT_CLASS_P (gimple_assign_rhs1 (next_stmt)))\n-\t\tLOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n+\t      lhs = gimple_assign_lhs (next_stmt);\n+\t      continue;\n \t    }\n-\t  else\n-\t    return false;\n-        }\n \n-      lhs = gimple_assign_lhs (next_stmt);\n+\t  return false;\n+        }\n     }\n \n   /* Build up the actual chain.  */"}, {"sha": "ac6e89907a30eb7c04efd6eb82b6ab0ff743aaa1", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7268fd7652406b41707af0c4b49e8523b667360/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a7268fd7652406b41707af0c4b49e8523b667360", "patch": "@@ -528,12 +528,6 @@ typedef class _loop_vec_info : public vec_info {\n      we need to peel off iterations at the end to form an epilogue loop.  */\n   bool peeling_for_niter;\n \n-  /* Reductions are canonicalized so that the last operand is the reduction\n-     operand.  If this places a constant into RHS1, this decanonicalizes\n-     GIMPLE for other phases, so we must track when this has occurred and\n-     fix it up.  */\n-  bool operands_swapped;\n-\n   /* True if there are no loop carried data dependencies in the loop.\n      If loop->safelen <= 1, then this is always true, either the loop\n      didn't have any loop carried data dependencies, or the loop is being\n@@ -610,7 +604,6 @@ typedef class _loop_vec_info : public vec_info {\n #define LOOP_VINFO_REDUCTION_CHAINS(L)     (L)->reduction_chains\n #define LOOP_VINFO_TARGET_COST_DATA(L)     (L)->target_cost_data\n #define LOOP_VINFO_PEELING_FOR_GAPS(L)     (L)->peeling_for_gaps\n-#define LOOP_VINFO_OPERANDS_SWAPPED(L)     (L)->operands_swapped\n #define LOOP_VINFO_PEELING_FOR_NITER(L)    (L)->peeling_for_niter\n #define LOOP_VINFO_NO_DATA_DEPENDENCIES(L) (L)->no_data_dependencies\n #define LOOP_VINFO_SCALAR_LOOP(L)\t   (L)->scalar_loop"}]}