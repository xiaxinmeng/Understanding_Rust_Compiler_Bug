{"sha": "7195b4148a916bab2451894b84e1298b5c42b8fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5NWI0MTQ4YTkxNmJhYjI0NTE4OTRiODRlMTI5OGI1YzQyYjhmZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-20T00:45:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-20T00:45:43Z"}, "message": "* tree-ssa-phiopt.c: Update a comment about the pass.\n\nFrom-SVN: r98428", "tree": {"sha": "4d50396db16e6979ac1ada58ebf3ea3bf12ff65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d50396db16e6979ac1ada58ebf3ea3bf12ff65c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7195b4148a916bab2451894b84e1298b5c42b8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7195b4148a916bab2451894b84e1298b5c42b8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7195b4148a916bab2451894b84e1298b5c42b8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7195b4148a916bab2451894b84e1298b5c42b8fe/comments", "author": null, "committer": null, "parents": [{"sha": "acf55c29fcb72aefb55c3420c1a13447ddd4df32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf55c29fcb72aefb55c3420c1a13447ddd4df32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf55c29fcb72aefb55c3420c1a13447ddd4df32"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "42cea0a76a9a49a7573c7ac3daf4da4dceffc4b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7195b4148a916bab2451894b84e1298b5c42b8fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7195b4148a916bab2451894b84e1298b5c42b8fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7195b4148a916bab2451894b84e1298b5c42b8fe", "patch": "@@ -1,3 +1,7 @@\n+2005-04-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-phiopt.c: Update a comment about the pass.\n+\n 2005-04-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-phiopt.c, config/arm/arm.c, config/fr30/fr30.md,"}, {"sha": "b935407199324618745b39d83c374c69a60e7d33", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 48, "deletions": 37, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7195b4148a916bab2451894b84e1298b5c42b8fe/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7195b4148a916bab2451894b84e1298b5c42b8fe/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=7195b4148a916bab2451894b84e1298b5c42b8fe", "patch": "@@ -49,80 +49,91 @@ static void replace_phi_edge_with_variable (basic_block, basic_block, edge,\n \t\t\t\t\t    tree, tree);\n static basic_block *blocks_in_phiopt_order (void);\n \n-/* This pass eliminates PHI nodes which can be trivially implemented as\n-   an assignment from a conditional expression.  i.e. if we have something\n-   like:\n+/* This pass tries to replaces an if-then-else block with an\n+   assignment.  We have four kinds of transformations.  Some of these\n+   transformations are also performed by the ifcvt RTL optimizer.\n+\n+   Conditional Replacement\n+   -----------------------\n+\n+   This transformation, implmented in conditional_replacement,\n+   replaces\n \n      bb0:\n       if (cond) goto bb2; else goto bb1;\n      bb1:\n      bb2:\n-      x = PHI (0 (bb1), 1 (bb0)\n+      x = PHI <0 (bb1), 1 (bb0), ...>;\n \n-   We can rewrite that as:\n+   with\n \n      bb0:\n-     bb1:\n+      x' = cond;\n+      goto bb2;\n      bb2:\n-      x = cond;\n+      x = PHI <x' (bb0), ...>;\n \n-   bb1 will become unreachable and bb0 and bb2 will almost always\n-   be merged into a single block.  This occurs often due to gimplification\n-    of conditionals.\n+   We remove bb1 as it becomes unreachable.  This occurs often due to\n+   gimplification of conditionals.\n \n-   Also done is the following optimization:\n+   Value Replacement\n+   -----------------\n+\n+   This transformation, implemented in value_replacement, replaces\n \n      bb0:\n-      if (a != b) goto bb2; else goto bb1;\n+       if (a != b) goto bb2; else goto bb1;\n      bb1:\n      bb2:\n-      x = PHI (a (bb1), b (bb0))\n+       x = PHI <a (bb1), b (bb0), ...>;\n \n-   We can rewrite that as:\n+   with\n \n      bb0:\n-     bb1:\n      bb2:\n-      x = b;\n+       x = PHI <b (bb0), ...>;\n+\n+   This opportunity can sometimes occur as a result of other\n+   optimizations.\n \n-   This can sometimes occur as a result of other optimizations.  A\n-   similar transformation is done by the ifcvt RTL optimizer.\n+   ABS Replacement\n+   ---------------\n \n-   This pass also eliminates PHI nodes which are really absolute\n-   values.  i.e. if we have something like:\n+   This transformation, implemented in abs_replacement, replaces\n \n      bb0:\n-      if (a >= 0) goto bb2; else goto bb1;\n+       if (a >= 0) goto bb2; else goto bb1;\n      bb1:\n-      x = -a;\n+       x = -a;\n      bb2:\n-      x = PHI (x (bb1), a (bb0));\n+       x = PHI <x (bb1), a (bb0), ...>;\n \n-   We can rewrite that as:\n+   with\n \n      bb0:\n-     bb1:\n+       x' = ABS_EXPR< a >;\n      bb2:\n-      x = ABS_EXPR< a >;\n+       x = PHI <x' (bb0), ...>;\n+\n+   MIN/MAX Replacement\n+   -------------------\n \n-   Similarly,\n+   This transformation, minmax_replacement replaces\n \n      bb0:\n-      if (a <= b) goto bb2; else goto bb1;\n+       if (a <= b) goto bb2; else goto bb1;\n      bb1:\n-      goto bb2;\n      bb2:\n-      x = PHI (b (bb1), a (bb0));\n+       x = PHI <b (bb1), a (bb0), ...>;\n \n-   Becomes\n+   with\n \n-     x = MIN_EXPR (a, b)\n-\n-   And the same transformation for MAX_EXPR.\n+     bb0:\n+       x' = MIN_EXPR (a, b)\n+     bb2:\n+       x = PHI <x' (bb0), ...>;\n \n-   bb1 will become unreachable and bb0 and bb2 will almost always be merged\n-   into a single block.  Similar transformations are done by the ifcvt\n-   RTL optimizer.  */\n+   A similar transformtion is done for MAX_EXPR.  */\n \n static void\n tree_ssa_phiopt (void)"}]}