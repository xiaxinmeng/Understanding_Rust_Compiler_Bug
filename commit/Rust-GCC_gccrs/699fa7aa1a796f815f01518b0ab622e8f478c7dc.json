{"sha": "699fa7aa1a796f815f01518b0ab622e8f478c7dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5ZmE3YWExYTc5NmY4MTVmMDE1MThiMGFiNjIyZThmNDc4YzdkYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-01T04:35:38Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-01T04:35:38Z"}, "message": "re PR fortran/25098 (Variable as actual argument for procedure dummy argument allowed)\n\n2006-06-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25098\n\tPR fortran/25147\n\t* interface.c (compare_parameter): Return 1 if the actual arg\n\tis external and the formal is a procedure.\n\t(compare_actual_formal): If the actual argument is a variable\n\tand the formal a procedure, this an error.  If a gsymbol exists\n\tfor a procedure of the same name, this is not yet resolved and\n\tthe error is cleared.\n\n\t* trans-intrinsic.c (gfc_conv_associated): Make provision for\n\tzero array length or zero string length contingent on presence\n\tof target, for consistency with standard.\n\n2006-06-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25098\n\t* gfortran.dg/dummy_procedure_1.f90: New test.\n\n\tPR fortran/25147\n\t* gfortran.dg/dummy_procedure_2.f90: New test.\n\n\t* gfortran.dg/associated_2.f90: Correct to make consistent with\n\tstandard.\n\nFrom-SVN: r114296", "tree": {"sha": "267121ad7ae5eb38b1baf53d34e58374d138a47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267121ad7ae5eb38b1baf53d34e58374d138a47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/699fa7aa1a796f815f01518b0ab622e8f478c7dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699fa7aa1a796f815f01518b0ab622e8f478c7dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699fa7aa1a796f815f01518b0ab622e8f478c7dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699fa7aa1a796f815f01518b0ab622e8f478c7dc/comments", "author": null, "committer": null, "parents": [{"sha": "86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ce18257fad5bf1c86294b4ca1c20057ed5f50e"}], "stats": {"total": 195, "additions": 168, "deletions": 27}, "files": [{"sha": "a91cb42baabcd8aa84d0449cd054a826442e6a5c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -1,3 +1,18 @@\n+2006-06-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25098\n+\tPR fortran/25147\n+\t* interface.c (compare_parameter): Return 1 if the actual arg\n+\tis external and the formal is a procedure.\n+\t(compare_actual_formal): If the actual argument is a variable\n+\tand the formal a procedure, this an error.  If a gsymbol exists\n+\tfor a procedure of the same name, this is not yet resolved and\n+\tthe error is cleared.\n+\n+\t* trans-intrinsic.c (gfc_conv_associated): Make provision for\n+\tzero array length or zero string length contingent on presence\n+\tof target, for consistency with standard.\n+\n 2006-05-30  Asher Langton  <langton2@llnl.gov>\n \n \t* symbol.c (check_conflict): Allow external, function, and"}, {"sha": "521876ebaa5939f7b396ef125d6d4c7705e8116a", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -1123,7 +1123,8 @@ compare_parameter (gfc_symbol * formal, gfc_expr * actual,\n \t  && !compare_type_rank (formal, actual->symtree->n.sym))\n \treturn 0;\n \n-      if (formal->attr.if_source == IFSRC_UNKNOWN)\n+      if (formal->attr.if_source == IFSRC_UNKNOWN\n+\t    || actual->symtree->n.sym->attr.external)\n \treturn 1;\t\t/* Assume match */\n \n       return compare_interfaces (formal, actual->symtree->n.sym, 0);\n@@ -1177,6 +1178,7 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n {\n   gfc_actual_arglist **new, *a, *actual, temp;\n   gfc_formal_arglist *f;\n+  gfc_gsymbol *gsym;\n   int i, n, na;\n   bool rank_check;\n \n@@ -1276,6 +1278,24 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n \t  return 0;\n \t}\n \n+      /* Satisfy 12.4.1.2 by ensuring that a procedure actual argument is\n+\t provided for a procedure formal argument.  */\n+      if (a->expr->ts.type != BT_PROCEDURE\n+\t  && a->expr->expr_type == EXPR_VARIABLE\n+\t  && f->sym->attr.flavor == FL_PROCEDURE)\n+\t{\n+\t  gsym = gfc_find_gsymbol (gfc_gsym_root,\n+\t\t\t\t   a->expr->symtree->n.sym->name);\n+\t  if (gsym == NULL || (gsym->type != GSYM_FUNCTION\n+\t\t&& gsym->type != GSYM_SUBROUTINE))\n+\t    {\n+\t      if (where)\n+\t\tgfc_error (\"Expected a procedure for argument '%s' at %L\",\n+\t\t\t   f->sym->name, &a->expr->where);\n+\t      return 0;\n+\t    }\n+\t}\n+\n       if (f->sym->as\n \t  && f->sym->as->type == AS_ASSUMED_SHAPE\n \t  && a->expr->expr_type == EXPR_VARIABLE"}, {"sha": "c361ad4021f1d1bdbb0d0323b1d5805bd35bfff7", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -2823,23 +2823,6 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   arg2 = arg1->next;\n   ss1 = gfc_walk_expr (arg1->expr);\n \n-  nonzero_charlen = NULL_TREE;\n-  if (arg1->expr->ts.type == BT_CHARACTER)\n-    nonzero_charlen = build2 (NE_EXPR, boolean_type_node,\n-\t\t\t      arg1->expr->ts.cl->backend_decl,\n-\t\t\t      integer_zero_node);\n-\n-  nonzero_arraylen = NULL_TREE;\n-  if (ss1 != gfc_ss_terminator)\n-    {\n-      arg1se.descriptor_only = 1;\n-      gfc_conv_expr_lhs (&arg1se, arg1->expr);\n-      tmp = gfc_conv_descriptor_stride (arg1se.expr,\n-\t\t\tgfc_rank_cst[arg1->expr->rank - 1]);\n-      nonzero_arraylen = build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t tmp, integer_zero_node);\n-    }\n-\n   if (!arg2->expr)\n     {\n       /* No optional target.  */\n@@ -2865,6 +2848,13 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n     {\n       /* An optional target.  */\n       ss2 = gfc_walk_expr (arg2->expr);\n+\n+      nonzero_charlen = NULL_TREE;\n+      if (arg1->expr->ts.type == BT_CHARACTER)\n+\tnonzero_charlen = build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t  arg1->expr->ts.cl->backend_decl,\n+\t\t\t\t  integer_zero_node);\n+\n       if (ss1 == gfc_ss_terminator)\n         {\n           /* A pointer to a scalar.  */\n@@ -2878,28 +2868,42 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n         }\n       else\n         {\n+\n+\t  /* An array pointer of zero length is not associated if target is\n+\t     present.  */\n+\t  arg1se.descriptor_only = 1;\n+\t  gfc_conv_expr_lhs (&arg1se, arg1->expr);\n+\t  tmp = gfc_conv_descriptor_stride (arg1se.expr,\n+\t\t\t\t\t    gfc_rank_cst[arg1->expr->rank - 1]);\n+\t  nonzero_arraylen = build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t tmp, integer_zero_node);\n+\n           /* A pointer to an array, call library function _gfor_associated.  */\n           gcc_assert (ss2 != gfc_ss_terminator);\n           args = NULL_TREE;\n           arg1se.want_pointer = 1;\n           gfc_conv_expr_descriptor (&arg1se, arg1->expr, ss1);\n           args = gfc_chainon_list (args, arg1se.expr);\n+\n           arg2se.want_pointer = 1;\n           gfc_conv_expr_descriptor (&arg2se, arg2->expr, ss2);\n           gfc_add_block_to_block (&se->pre, &arg2se.pre);\n           gfc_add_block_to_block (&se->post, &arg2se.post);\n           args = gfc_chainon_list (args, arg2se.expr);\n           fndecl = gfor_fndecl_associated;\n           se->expr = build_function_call_expr (fndecl, args);\n+\t  se->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t\t     se->expr, nonzero_arraylen);\n+\n         }\n-     }\n \n-  if (nonzero_charlen != NULL_TREE)\n-    se->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t       se->expr, nonzero_charlen);\n-  if (nonzero_arraylen != NULL_TREE)\n-    se->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t       se->expr, nonzero_arraylen);\n+      /* If target is present zero character length pointers cannot\n+\t be associated.  */\n+      if (nonzero_charlen != NULL_TREE)\n+\tse->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t\t   se->expr, nonzero_charlen);\n+    }\n+\n   se->expr = convert (gfc_typenode_for_spec (&expr->ts), se->expr);\n }\n "}, {"sha": "7743fa08e9b3eeecbd2c89424fbcbfb86d80dfc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -1,3 +1,14 @@\n+2006-06-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25098\n+\t* gfortran.dg/dummy_procedure_1.f90: New test.\n+\n+\tPR fortran/25147\n+\t* gfortran.dg/dummy_procedure_2.f90: New test.\n+\n+\t* gfortran.dg/associated_2.f90: Correct to make consistent with\n+\tstandard.\n+\n 2006-05-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.target/i386/387-11.c: New test case."}, {"sha": "5b8b689d1f4b6271440f2af6e1185260dac4a71d", "filename": "gcc/testsuite/gfortran.dg/associated_2.f90", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -13,26 +13,37 @@ subroutine test1 ()\n     integer, pointer, dimension(:, :, :)  :: a, b\n     allocate (a(2,0,2))\n     b => a\n-    if (associated (b)) call abort ()\n+! Even though b is zero length, associated returns true because\n+! the target argument is not present (case (i))\n+    if (.not. associated (b)) call abort ()\n+    deallocate (a)\n     allocate (a(2,1,2))\n     b => a\n     if (.not.associated (b)) call abort ()\n+    deallocate (a)\n   end subroutine test1\n   subroutine test2 ()\n     integer, pointer, dimension(:, :, :)  :: a, b\n     allocate (a(2,0,2))\n     b => a\n+! Associated returns false because target is present (case(iii)).\n     if (associated (b, a)) call abort ()\n+    deallocate (a)\n     allocate (a(2,1,2))\n     b => a\n     if (.not.associated (b, a)) call abort ()\n+    deallocate (a)\n   end subroutine test2\n   subroutine test3 (n)\n     integer :: n\n     character(len=n), pointer, dimension(:)  :: a, b\n     allocate (a(2))\n     b => a\n+! Again, with zero character length associated returns false\n+! if target is present.\n     if (associated (b, a) .and. (n .eq. 0)) call abort ()\n+!\n     if ((.not.associated (b, a))  .and. (n .ne. 0)) call abort ()\n+    deallocate (a)\n   end subroutine test3\n-end\n\\ No newline at end of file\n+end"}, {"sha": "66aca21e3d03ef855accfc456c3f9bba5e79d157", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_1.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_1.f90?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do compile }\n+! Test the patch for PR25098, where passing a variable as an\n+! actual argument to a formal argument that is a procedure\n+! went undiagnosed.\n+!\n+! Based on contribution by Joost VandeVondele  <jv244@cam.ac.uk>\n+!\n+integer function y()\n+  y = 1\n+end\n+integer function z()\n+  z = 1\n+end\n+\n+module m1\n+contains\n+  subroutine s1(f)\n+    interface\n+      function f()\n+        integer f\n+      end function f\n+    end interface\n+  end subroutine s1\n+end module m1\n+\n+  use m1\n+  external y\n+  interface\n+   function x()\n+     integer x\n+   end function x\n+  end interface\n+\n+  integer :: i, y, z\n+  i=1\n+  call s1(i) ! { dg-error \"Expected a procedure for argument\" }\n+  call s1(w) ! { dg-error \"not allowed as an actual argument\" }\n+  call s1(x) ! explicit interface\n+  call s1(y) ! declared external\n+  call s1(z) ! already compiled\n+contains\n+  integer function w()\n+    w = 1\n+  end function w\n+end\n+\n+! { dg-final { cleanup-modules \"m1\" } }"}, {"sha": "dd609bd0009d8c8e2549bf284c8145996118b817", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_2.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699fa7aa1a796f815f01518b0ab622e8f478c7dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_2.f90?ref=699fa7aa1a796f815f01518b0ab622e8f478c7dc", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! Checks the fix for the bug exposed in fixing PR25147\n+!\n+! Contributed by Tobias Schlueter  <tobi@gcc.gnu.org>\n+!\n+module integrator\n+  interface\n+     function integrate(f,xmin,xmax)\n+       implicit none\n+       interface\n+          function f(x)\n+            real(8) :: f,x\n+            intent(in) :: x\n+          end function f\n+       end interface\n+       real(8) :: xmin, xmax, integrate\n+     end function integrate\n+  end interface\n+end module integrator\n+\n+  use integrator\n+  call foo1 ()\n+  call foo2 ()\n+contains\n+  subroutine foo1 ()\n+    real(8) :: f                   ! This was not trapped: PR25147/25098\n+    print *,integrate (f,0d0,3d0) ! { dg-error \"Expected a procedure\" }\n+  end subroutine foo1\n+  subroutine foo2 ()\n+    real(8), external :: g ! This would give an error, incorrectly.\n+    print *,integrate (g,0d0,3d0)\n+  end subroutine foo2\n+end"}]}