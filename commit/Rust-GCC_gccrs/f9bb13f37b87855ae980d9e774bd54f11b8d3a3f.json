{"sha": "f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliYjEzZjM3Yjg3ODU1YWU5ODBkOWU3NzRiZDU0ZjExYjhkM2EzZg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2014-06-25T17:24:34Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2014-06-25T17:24:34Z"}, "message": "tree-ssa-forwprop.c (associate_plusminus): For widening conversions check for undefined overflow in (T)(P + A) - (T)P -> (T)A.\n\n2014-06-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * tree-ssa-forwprop.c (associate_plusminus): For widening conversions\n        check for undefined overflow in (T)(P + A) - (T)P -> (T)A.\n        Issue a strict overflow warning if appropriate.\n\ntestsuite:\n2014-06-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gcc.c-torture/execute/20140622-1.c: New test.\n\nFrom-SVN: r211988", "tree": {"sha": "460061ababfd488b677b7bd4445b5f5990d73291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/460061ababfd488b677b7bd4445b5f5990d73291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d122681a3c4491cec5152d5c528005c1f5083e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d122681a3c4491cec5152d5c528005c1f5083e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d122681a3c4491cec5152d5c528005c1f5083e83"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "33c5b48e4bc9556ed9035505e2de7082175a3074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "patch": "@@ -1,3 +1,9 @@\n+2014-06-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* tree-ssa-forwprop.c (associate_plusminus): For widening conversions\n+\tcheck for undefined overflow in (T)(P + A) - (T)P -> (T)A.\n+\tIssue a strict overflow warning if appropriate.\n+\n 2014-06-25  Martin Liska  <mliska@suse.cz>\n \n \tIPA REF refactoring"}, {"sha": "62c13c2b219712eb16fd2c897e9b1083f6d83471", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "patch": "@@ -1,3 +1,7 @@\n+2014-06-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gcc.c-torture/execute/20140622-1.c: New test.\n+\n 2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 178"}, {"sha": "d3aa66bb59e8961aa02967c53209ee04296f6cfb", "filename": "gcc/testsuite/gcc.c-torture/execute/20140622-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140622-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140622-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140622-1.c?ref=f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "patch": "@@ -0,0 +1,27 @@\n+unsigned p;\n+\n+long __attribute__((noinline, noclone))\n+test (unsigned a)\n+{\n+  return (long)(p + a) - (long)p;\n+}\n+\n+int\n+main ()\n+{\n+  p = (unsigned) -2;\n+  if (test (0) != 0)\n+    __builtin_abort ();\n+  if (test (1) != 1)\n+    __builtin_abort ();\n+  if (test (2) != -(long)(unsigned)-2)\n+    __builtin_abort ();\n+  p = (unsigned) -1;\n+  if (test (0) != 0)\n+    __builtin_abort ();\n+  if (test (1) != -(long)(unsigned)-1)\n+    __builtin_abort ();\n+  if (test (2) != -(long)(unsigned)-2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0e5e619341221253f7ef12afd1eb1cad858ea7dc", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb13f37b87855ae980d9e774bd54f11b8d3a3f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=f9bb13f37b87855ae980d9e774bd54f11b8d3a3f", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"flags.h\"\n+#include \"diagnostic.h\"\n #include \"expr.h\"\n #include \"cfgloop.h\"\n #include \"optabs.h\"\n@@ -2666,15 +2667,35 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n \t\t    {\n \t\t      /* And finally (T)(P + A) - (T)P.  */\n \t\t      tree a = gimple_assign_rhs2 (def_stmt2);\n-\t\t      /* For pointer types, if the conversion of A to the final\n-\t\t\t type requires a sign- or zero-extension, then we have\n-\t\t\t to punt - it is not defined which one is correct.  */\n-\t\t      if (!POINTER_TYPE_P (TREE_TYPE (rhs1))\n-\t\t\t  || TYPE_PRECISION (TREE_TYPE (rhs1))\n-\t\t\t     <= TYPE_PRECISION (TREE_TYPE (a))\n-\t\t\t  || (TREE_CODE (a) == INTEGER_CST\n+\t\t      if (TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t\t\t  <= TYPE_PRECISION (TREE_TYPE (a))\n+\t\t\t  /* For integer types, if A has a smaller type\n+\t\t\t     than T the result depends on the possible\n+\t\t\t     overflow in P + A.\n+\t\t\t     E.g. T=size_t, A=(unsigned)429497295, P>0.\n+\t\t\t     However, if an overflow in P + A would cause\n+\t\t\t     undefined behavior, we can assume that there\n+\t\t\t     is no overflow.  */\n+\t\t\t  || (INTEGRAL_TYPE_P (TREE_TYPE (p))\n+\t\t\t      && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (p)))\n+\t\t\t  /* For pointer types, if the conversion of A to the\n+\t\t\t     final type requires a sign- or zero-extension,\n+\t\t\t     then we have to punt - it is not defined which\n+\t\t\t     one is correct.  */\n+\t\t\t  || (POINTER_TYPE_P (TREE_TYPE (p))\n+\t\t\t      && TREE_CODE (a) == INTEGER_CST\n \t\t\t      && tree_int_cst_sign_bit (a) == 0))\n \t\t\t{\n+\t\t\t  if (issue_strict_overflow_warning\n+\t\t\t      (WARN_STRICT_OVERFLOW_MISC)\n+\t\t\t      && TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t\t\t\t > TYPE_PRECISION (TREE_TYPE (a))\n+\t\t\t      && INTEGRAL_TYPE_P (TREE_TYPE (p)))\n+\t\t\t    warning_at (gimple_location (stmt),\n+\t\t\t\t\tOPT_Wstrict_overflow,\n+\t\t\t\t\t\"assuming signed overflow does not \"\n+\t\t\t\t\t\"occur when assuming that \"\n+\t\t\t\t\t\"(T)(P + A) - (T)P is always (T)A\");\n \t\t\t  if (useless_type_conversion_p (TREE_TYPE (rhs1),\n \t\t\t\t\t\t\t TREE_TYPE (a)))\n \t\t\t    code = TREE_CODE (a);"}]}