{"sha": "294f5d825fc452692fda912a5ede6945c91f8ecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0ZjVkODI1ZmM0NTI2OTJmZGE5MTJhNWVkZTY5NDVjOTFmOGVjZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:22:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:22:08Z"}, "message": "[multiple changes]\n\n2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Process_Transient_Object): Use\n\tan unchecked conversion when associating a transient controlled\n\tobject with its \"hook\".\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case\n\tPreelaborable_Initialization): The pragma is legal if it comes\n\tfrom an aspect on the private view of the type, even though its\n\tanalysis point takes place later at the freeze point.\n\nFrom-SVN: r197760", "tree": {"sha": "c0e6b0e3069277d1b2f862c1b38cf59c86e53a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0e6b0e3069277d1b2f862c1b38cf59c86e53a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294f5d825fc452692fda912a5ede6945c91f8ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294f5d825fc452692fda912a5ede6945c91f8ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294f5d825fc452692fda912a5ede6945c91f8ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294f5d825fc452692fda912a5ede6945c91f8ecd/comments", "author": null, "committer": null, "parents": [{"sha": "533369aac04c1abe91f846bff95a6f17633d97ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533369aac04c1abe91f846bff95a6f17633d97ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533369aac04c1abe91f846bff95a6f17633d97ac"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "3a4a43a21787f6422abc91831dc210ec2c055281", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=294f5d825fc452692fda912a5ede6945c91f8ecd", "patch": "@@ -1,3 +1,16 @@\n+2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_Object): Use\n+\tan unchecked conversion when associating a transient controlled\n+\tobject with its \"hook\".\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case\n+\tPreelaborable_Initialization): The pragma is legal if it comes\n+\tfrom an aspect on the private view of the type, even though its\n+\tanalysis point takes place later at the freeze point.\n+\n 2013-04-11  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb: Minor reformatting."}, {"sha": "6a392e5de046e63deb2cac0edb75574e8cef5852", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=294f5d825fc452692fda912a5ede6945c91f8ecd", "patch": "@@ -5246,7 +5246,10 @@ package body Exp_Ch4 is\n             --  Step 3: Hook the transient object to the temporary\n \n             if Is_Access_Type (Obj_Typ) then\n-               Expr := Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n+\n+               --  Why is this an unchecked conversion ???\n+               Expr :=\n+                 Unchecked_Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n             else\n                Expr :=\n                  Make_Attribute_Reference (Loc,"}, {"sha": "132dd0ce2f719c88556b6428db5650c677d35299", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294f5d825fc452692fda912a5ede6945c91f8ecd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=294f5d825fc452692fda912a5ede6945c91f8ecd", "patch": "@@ -13423,12 +13423,22 @@ package body Sem_Prag is\n             Check_First_Subtype (Arg1);\n             Ent := Entity (Get_Pragma_Arg (Arg1));\n \n-            if not (Is_Private_Type (Ent)\n-                      or else\n-                    Is_Protected_Type (Ent)\n-                      or else\n-                    (Is_Generic_Type (Ent) and then Is_Derived_Type (Ent)))\n+            --  The pragma may come from an aspect on a private declaration,\n+            --  even if the freeze point at which this is analyzed in the\n+            --  private part after the full view.\n+\n+            if Has_Private_Declaration (Ent)\n+              and then From_Aspect_Specification (N)\n+            then\n+               null;\n+\n+            elsif Is_Private_Type (Ent)\n+              or else Is_Protected_Type (Ent)\n+              or else (Is_Generic_Type (Ent) and then Is_Derived_Type (Ent))\n             then\n+               null;\n+\n+            else\n                Error_Pragma_Arg\n                  (\"pragma % can only be applied to private, formal derived or \"\n                   & \"protected type\","}]}