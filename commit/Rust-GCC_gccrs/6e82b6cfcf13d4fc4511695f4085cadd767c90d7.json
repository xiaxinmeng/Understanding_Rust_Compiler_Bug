{"sha": "6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4MmI2Y2ZjZjEzZDRmYzQ1MTE2OTVmNDA4NWNhZGQ3NjdjOTBkNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-04T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-04T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "657fbe3461abcbfbd3d8336b711afba43eb93431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657fbe3461abcbfbd3d8336b711afba43eb93431"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/comments", "author": null, "committer": null, "parents": [{"sha": "8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4"}], "stats": {"total": 226, "additions": 225, "deletions": 1}, "files": [{"sha": "009de4f222f820cc41dde96df5fd43aef64261d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,94 @@\n+2020-09-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/96820\n+\t* tree-sra.c (create_access): Disqualify candidates with accesses\n+\tbeyond the end of the original aggregate.\n+\t(maybe_add_sra_candidate): Check that candidate type size fits\n+\tsigned uhwi for the sake of consistency.\n+\n+2020-09-03  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtin): Update V2DI_type_node\n+\tand unsigned_V2DI_type_node definitions.\n+\n+2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96901\n+\t* tree.h (struct decl_tree_traits): New type.\n+\t(decl_tree_map): New typedef.\n+\n+2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/94311\n+\t* gimple.h (gimple_location_ptr, gimple_phi_arg_location_ptr): New\n+\tfunctions.\n+\t* streamer-hooks.h (struct streamer_hooks): Add\n+\toutput_location_and_block callback.  Fix up formatting for\n+\toutput_location.\n+\t(stream_output_location_and_block): Define.\n+\t* lto-streamer.h (class lto_location_cache): Fix comment typo.  Add\n+\tcurrent_block member.\n+\t(lto_location_cache::input_location_and_block): New method.\n+\t(lto_location_cache::lto_location_cache): Initialize current_block.\n+\t(lto_location_cache::cached_location): Add block member.\n+\t(struct output_block): Add current_block member.\n+\t(lto_output_location): Formatting fix.\n+\t(lto_output_location_and_block): Declare.\n+\t* lto-streamer.c (lto_streamer_hooks_init): Initialize\n+\tstreamer_hooks.output_location_and_block.\n+\t* lto-streamer-in.c (lto_location_cache::cmp_loc): Also compare\n+\tblock members.\n+\t(lto_location_cache::apply_location_cache): Handle blocks.\n+\t(lto_location_cache::accept_location_cache,\n+\tlto_location_cache::revert_location_cache): Fix up function comments.\n+\t(lto_location_cache::input_location_and_block): New method.\n+\t(lto_location_cache::input_location): Implement using\n+\tinput_location_and_block.\n+\t(input_function): Invoke apply_location_cache after streaming in all\n+\tbbs.\n+\t* lto-streamer-out.c (clear_line_info): Set current_block.\n+\t(lto_output_location_1): New function, moved from lto_output_location,\n+\tadded block handling.\n+\t(lto_output_location): Implement using lto_output_location_1.\n+\t(lto_output_location_and_block): New function.\n+\t* gimple-streamer-in.c (input_phi): Use input_location_and_block\n+\tto input and cache both location and block.\n+\t(input_gimple_stmt): Likewise.\n+\t* gimple-streamer-out.c (output_phi): Use\n+\tstream_output_location_and_block.\n+\t(output_gimple_stmt): Likewise.\n+\n+2020-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-generic.c (tree_vec_extract): Remove odd\n+\tspecial-casing of boolean vectors.\n+\t* fold-const.c (fold_ternary_loc): Handle boolean vector\n+\ttype BIT_FIELD_REFs.\n+\n+2020-09-03  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/87767\n+\t* config/i386/i386-features.c\n+\t(replace_constant_pool_with_broadcast): New function.\n+\t(constant_pool_broadcast): Ditto.\n+\t(class pass_constant_pool_broadcast): New pass.\n+\t(make_pass_constant_pool_broadcast): Ditto.\n+\t(remove_partial_avx_dependency): Call\n+\treplace_constant_pool_with_broadcast under TARGET_AVX512F, it\n+\twould save compile time when both pass rpad and cpb are\n+\tavailable.\n+\t(remove_partial_avx_dependency_gate): New function.\n+\t(class pass_remove_partial_avx_dependency::gate): Call\n+\tremove_partial_avx_dependency_gate.\n+\t* config/i386/i386-passes.def: Insert new pass after combine.\n+\t* config/i386/i386-protos.h\n+\t(make_pass_constant_pool_broadcast): Declare.\n+\t* config/i386/sse.md (*avx512dq_mul<mode>3<mask_name>_bcst):\n+\tNew define_insn.\n+\t(*avx512f_mul<mode>3<mask_name>_bcst): Ditto.\n+\t* config/i386/avx512fintrin.h (_mm512_set1_ps,\n+\t_mm512_set1_pd,_mm512_set1_epi32, _mm512_set1_epi64): Adjusted.\n+\n 2020-09-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/60304"}, {"sha": "7b35a7c6950786bf6cb16d419f2bd0736c875729", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1 +1 @@\n-20200903\n+20200904"}, {"sha": "df967c5dec194d6d8a6b35ddf9323c72dfe22b63", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,15 @@\n+2020-09-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* fe.h, opt.ads (Enable_128bit_Types): New.\n+\t* stand.ads (Standard_Long_Long_Long_Integer,\n+\tS_Long_Long_Long_Integer): New.\n+\n+2020-09-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Get_Fullest_View): New procedure.\n+\t* exp_unst.adb (Check Static_Type): Do all processing on fullest\n+\tview of specified type.\n+\n 2020-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-interface/trans.c (gigi): Set exact argument of a vector"}, {"sha": "7bafc52d1a14d59f2a5f96b01599a3c366fb2c70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,25 @@\n+2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96901\n+\t* constexpr.c (fundef_copies_table): Change type from\n+\thash_map<tree, tree> * to decl_tree_map *.\n+\n+2020-09-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92812\n+\t* cp-tree.h (do_aggregate_paren_init): Declare.\n+\t* decl.c (do_aggregate_paren_init): New.\n+\t(grok_reference_init): Use it.\n+\t(check_initializer): Likewise.\n+\t* init.c (perform_member_init): Handle initializing an array from\n+\ta ()-list.  Use do_aggregate_paren_init.\n+\n+2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96862\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Temporarily disable\n+\tflag_rounding_math during manifestly constant evaluation.\n+\n 2020-09-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/77841"}, {"sha": "20e950718ca5c887730bfd795558dd1cc20e9ba0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,74 @@\n+2020-09-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/96820\n+\t* gcc.dg/tree-ssa/pr96820.c: New test.\n+\n+2020-09-03  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr96139-a.c: New test.\n+\t* gcc.target/powerpc/pr96139-b.c: New test.\n+\t* gcc.target/powerpc/pr96139-c.c: New test.\n+\n+2020-09-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/iall_masked.f90: New test.\n+\n+2020-09-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92812\n+\t* g++.dg/cpp0x/constexpr-array23.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/initlist69.C: Likewise.\n+\t* g++.dg/diagnostic/mem-init1.C: Likewise.\n+\t* g++.dg/init/array28.C: Likewise.\n+\t* g++.dg/cpp2a/paren-init33.C: New test.\n+\t* g++.dg/cpp2a/paren-init34.C: New test.\n+\t* g++.dg/cpp2a/paren-init35.C: New test.\n+\t* g++.old-deja/g++.brendan/crash60.C: Adjust dg-error.\n+\t* g++.old-deja/g++.law/init10.C: Likewise.\n+\t* g++.old-deja/g++.other/array3.C: Likewise.\n+\n+2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96862\n+\t* g++.dg/cpp1z/constexpr-96862.C: New test.\n+\n+2020-09-03  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/87767\n+\t* gcc.target/i386/avx2-broadcast-pr87767-1.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-2.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-3.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-4.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-6.c: New test.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-7.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-2.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-3.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-4.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: New test.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-6.c: New test.\n+\n+2020-09-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96246\n+\tPR target/96855\n+\tPR target/96856\n+\tPR target/96857\n+\t* g++.target/i386/avx512bw-pr96246-2.C: Add runtime check for\n+\tAVX512BW.\n+\t* g++.target/i386/avx512vl-pr96246-2.C: Add runtime check for\n+\tAVX512BW and AVX512VL\n+\t* g++.target/i386/avx512f-helper.h: New header.\n+\t* gcc.target/i386/pr92658-avx512f.c: Add\n+\t-mprefer-vector-width=512 to avoid impact of different default\n+\tmtune which gcc is built with.\n+\t* gcc.target/i386/avx512bw-pr95488-1.c: Ditto.\n+\t* gcc.target/i386/pr92645-4.c: Add -mno-avx512f to avoid\n+\timpact of different default march which gcc is built with.\n+\n 2020-09-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96869"}, {"sha": "8a60e7f58d6b11c5b3817783239233e386697370", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,12 @@\n+2020-09-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* m4/iall.m4: Initial value for result should be -1.\n+\t* generated/iall_i1.c (miall_i1): Generated.\n+\t* generated/iall_i16.c (miall_i16): Likewise.\n+\t* generated/iall_i2.c (miall_i2): Likewise.\n+\t* generated/iall_i4.c (miall_i4): Likewise.\n+\t* generated/iall_i8.c (miall_i8): Likewise.\n+\n 2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/96486"}, {"sha": "428f7a14980170ea6d80670fab77520b3bdd7c8a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82b6cfcf13d4fc4511695f4085cadd767c90d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e82b6cfcf13d4fc4511695f4085cadd767c90d7", "patch": "@@ -1,3 +1,22 @@\n+2020-09-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96592\n+\t* include/std/tuple (_TupleConstraints<true, T...>): Use\n+\talternative is_constructible instead of std::is_constructible.\n+\t* testsuite/20_util/tuple/cons/96592.cc: New test.\n+\n+2020-09-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (duration::_S_gcd): Use iterative algorithm\n+\tfor C++14 and later.\n+\t* include/std/numeric (__detail::__gcd): Replace recursive\n+\tEuclidean algorithm with iterative version of binary GCD algorithm.\n+\t* testsuite/26_numerics/gcd/1.cc: Test additional inputs.\n+\t* testsuite/26_numerics/gcd/gcd_neg.cc: Adjust dg-error lines.\n+\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n+\t* testsuite/experimental/numeric/gcd.cc: Test additional inputs.\n+\t* testsuite/26_numerics/gcd/2.cc: New test.\n+\n 2020-09-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/92978"}]}