{"sha": "ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzYWMwZjQ3MTY2ZjRlZjNjNmEyMjYyM2JmYWRiYTZlNDE5ZGJiMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-07-20T14:08:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-07-20T14:08:42Z"}, "message": "re PR bootstrap/49787 (--enable-languages=c doesn't work)\n\n\tPR bootstrap/49787\n\t* configure.ac: Move --enable-bootstrap handling earlier in file.\n\tIf --enable-bootstrap and either --enable-build-with-cxx or\n\t--enable-build-poststage1-with-cxx, enable C++ automatically.\n\t* configure: Rebuild.\n\nFrom-SVN: r176512", "tree": {"sha": "0e4a1a1ca26022ac44a348b5c18f5c399754b078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4a1a1ca26022ac44a348b5c18f5c399754b078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/comments", "author": null, "committer": null, "parents": [{"sha": "c4100a35b87ee44400da49fbc187f5d95a8f30a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4100a35b87ee44400da49fbc187f5d95a8f30a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4100a35b87ee44400da49fbc187f5d95a8f30a3"}], "stats": {"total": 228, "additions": 124, "deletions": 104}, "files": [{"sha": "c1a5d6c9bd5dbe6bc315239f37ddecdf9a5e1c4f", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "patch": "@@ -1,3 +1,11 @@\n+2011-07-20  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR bootstrap/49787\n+\t* configure.ac: Move --enable-bootstrap handling earlier in file.\n+\tIf --enable-bootstrap and either --enable-build-with-cxx or\n+\t--enable-build-poststage1-with-cxx, enable C++ automatically.\n+\t* configure: Rebuild.\n+\n 2011-07-19  Ian Lance Taylor  <iant@google.com>\n \n \t* configure.ac: Add --enable-build-poststage1-with-cxx.  If set,"}, {"sha": "facf3e4781e29ce16131ff99d85ba76aa6a6316d", "filename": "configure", "status": "modified", "additions": 61, "deletions": 55, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "patch": "@@ -749,6 +749,7 @@ enable_libquadmath_support\n enable_libada\n enable_libssp\n enable_static_libjava\n+enable_bootstrap\n enable_build_with_cxx\n enable_build_poststage1_with_cxx\n with_mpc\n@@ -781,7 +782,6 @@ enable_stage1_languages\n enable_objc_gc\n with_build_sysroot\n with_debug_prefix_map\n-enable_bootstrap\n with_build_config\n enable_serial_configure\n with_build_time_tools\n@@ -1466,6 +1466,7 @@ Optional Features:\n   --enable-libssp         build libssp directory\n   --enable-static-libjava[=ARG]\n                           build static libjava [default=no]\n+  --enable-bootstrap      enable bootstrapping [yes if native build]\n   --enable-build-with-cxx build with C++ compiler instead of C compiler\n   --enable-build-poststage1-with-cxx\n                           build stages 2 and 3 with C++, not C\n@@ -1482,7 +1483,6 @@ Optional Features:\n                           Mostly useful for compiler development\n   --enable-objc-gc        enable use of Boehm's garbage collector with the GNU\n                           Objective-C runtime\n-  --enable-bootstrap      enable bootstrapping [yes if native build]\n   --enable-serial-[{host,target,build}-]configure\n                           force sequential configuration of sub-packages for\n                           the host, target or build machine, or all\n@@ -4983,6 +4983,52 @@ do_compare=\"$gcc_cv_prog_cmp_skip\"\n \n \n \n+# Check whether --enable-bootstrap was given.\n+if test \"${enable_bootstrap+set}\" = set; then :\n+  enableval=$enable_bootstrap;\n+else\n+  enable_bootstrap=default\n+fi\n+\n+\n+# Issue errors and warnings for invalid/strange bootstrap combinations.\n+case \"$configdirs\" in\n+  *gcc*) have_compiler=yes ;;\n+  *) have_compiler=no ;;\n+esac\n+\n+case \"$have_compiler:$host:$target:$enable_bootstrap\" in\n+  *:*:*:no) ;;\n+\n+  # Default behavior.  Enable bootstrap if we have a compiler\n+  # and we are in a native configuration.\n+  yes:$build:$build:default)\n+    enable_bootstrap=yes ;;\n+\n+  *:*:*:default)\n+    enable_bootstrap=no ;;\n+\n+  # We have a compiler and we are in a native configuration, bootstrap is ok\n+  yes:$build:$build:yes)\n+    ;;\n+\n+  # Other configurations, but we have a compiler.  Assume the user knows\n+  # what he's doing.\n+  yes:*:*:yes)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: trying to bootstrap a cross compiler\" >&5\n+$as_echo \"$as_me: WARNING: trying to bootstrap a cross compiler\" >&2;}\n+    ;;\n+\n+  # No compiler: if they passed --enable-bootstrap explicitly, fail\n+  no:*:*:yes)\n+    as_fn_error \"cannot bootstrap without a compiler\" \"$LINENO\" 5 ;;\n+\n+  # Fail if wrong command line\n+  *)\n+    as_fn_error \"invalid option for --enable-bootstrap\" \"$LINENO\" 5\n+    ;;\n+esac\n+\n # See if we are building gcc with C++.\n # Check whether --enable-build-with-cxx was given.\n if test \"${enable_build_with_cxx+set}\" = set; then :\n@@ -6105,6 +6151,19 @@ if test -d ${srcdir}/gcc; then\n       ;;\n   esac\n \n+  # If bootstrapping, then using --enable-build-with-cxx or\n+  # --enable-build-poststage1-with-cxx requires enabling C++.\n+  case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n+    *,c++,*:*:*) ;;\n+    *:*,yes,*:yes)\n+      if test -f ${srcdir}/gcc/cp/config-lang.in; then\n+        enable_languages=\"${enable_languages},c++\"\n+      else\n+        as_fn_error \"bootstrapping with --enable-build-with-cxx or --enable-build-poststage1-with-cxx requires c++ sources\" \"$LINENO\" 5\n+      fi\n+      ;;\n+  esac\n+\n   # First scan to see if an enabled language requires some other language.\n   # We assume that a given config-lang.in will list all the language\n   # front ends it requires, even if some are required indirectly.\n@@ -6906,59 +6965,6 @@ INSTALL_GDB_TK=`echo ${GDB_TK} | sed s/-all-/-install-/g`\n # 99 commands in a script, for HP-UX sed.\n # Do not nest @if/@endif pairs, because configure will not warn you at all.\n \n-# Check whether --enable-bootstrap was given.\n-if test \"${enable_bootstrap+set}\" = set; then :\n-  enableval=$enable_bootstrap;\n-else\n-  enable_bootstrap=default\n-fi\n-\n-\n-# Issue errors and warnings for invalid/strange bootstrap combinations.\n-case \"$configdirs\" in\n-  *gcc*) have_compiler=yes ;;\n-  *) have_compiler=no ;;\n-esac\n-\n-case \"$have_compiler:$host:$target:$enable_bootstrap\" in\n-  *:*:*:no) ;;\n-\n-  # Default behavior.  Enable bootstrap if we have a compiler\n-  # and we are in a native configuration.\n-  yes:$build:$build:default)\n-    enable_bootstrap=yes ;;\n-\n-  *:*:*:default)\n-    enable_bootstrap=no ;;\n-\n-  # We have a compiler and we are in a native configuration, bootstrap is ok\n-  yes:$build:$build:yes)\n-    ;;\n-\n-  # Other configurations, but we have a compiler.  Assume the user knows\n-  # what he's doing.\n-  yes:*:*:yes)\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: trying to bootstrap a cross compiler\" >&5\n-$as_echo \"$as_me: WARNING: trying to bootstrap a cross compiler\" >&2;}\n-    ;;\n-\n-  # No compiler: if they passed --enable-bootstrap explicitly, fail\n-  no:*:*:yes)\n-    as_fn_error \"cannot bootstrap without a compiler\" \"$LINENO\" 5 ;;\n-\n-  # Fail if wrong command line\n-  *)\n-    as_fn_error \"invalid option for --enable-bootstrap\" \"$LINENO\" 5\n-    ;;\n-esac\n-\n-case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n-  *,c++,*:*:*) ;;\n-  *:*,yes,*:yes)\n-    as_fn_error \"bootstrapping with --enable-build-with-cxx or --enable-build-postage1-with-cxx requires c++ in --enable-languages\" \"$LINENO\" 5\n-    ;;\n-esac\n-\n case \"$enable_bootstrap:$ENABLE_GOLD: $configdirs :,$stage1_languages,\" in\n   yes:yes:*\\ gold\\ *:*,c++,*) ;;\n   yes:yes:*\\ gold\\ *:*)"}, {"sha": "e64e5775f13a889e3ca45efe2c3e8bff8dd07333", "filename": "configure.ac", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=ff3ac0f47166f4ef3c6a22623bfadba6e419dbb1", "patch": "@@ -1133,6 +1133,48 @@ fi\n ACX_PROG_GNAT\n ACX_PROG_CMP_IGNORE_INITIAL\n \n+AC_ARG_ENABLE([bootstrap],\n+[AS_HELP_STRING([--enable-bootstrap],\n+\t\t[enable bootstrapping @<:@yes if native build@:>@])],,\n+enable_bootstrap=default)\n+\n+# Issue errors and warnings for invalid/strange bootstrap combinations.\n+case \"$configdirs\" in\n+  *gcc*) have_compiler=yes ;;\n+  *) have_compiler=no ;;\n+esac\n+\n+case \"$have_compiler:$host:$target:$enable_bootstrap\" in\n+  *:*:*:no) ;;\n+\n+  # Default behavior.  Enable bootstrap if we have a compiler\n+  # and we are in a native configuration.\n+  yes:$build:$build:default)\n+    enable_bootstrap=yes ;;\n+\n+  *:*:*:default)\n+    enable_bootstrap=no ;;\n+\n+  # We have a compiler and we are in a native configuration, bootstrap is ok\n+  yes:$build:$build:yes)\n+    ;;\n+\n+  # Other configurations, but we have a compiler.  Assume the user knows\n+  # what he's doing.\n+  yes:*:*:yes)\n+    AC_MSG_WARN([trying to bootstrap a cross compiler])\n+    ;;\n+\n+  # No compiler: if they passed --enable-bootstrap explicitly, fail\n+  no:*:*:yes)\n+    AC_MSG_ERROR([cannot bootstrap without a compiler]) ;;\n+\n+  # Fail if wrong command line\n+  *)\n+    AC_MSG_ERROR([invalid option for --enable-bootstrap])\n+    ;;\n+esac\n+\n # See if we are building gcc with C++.\n AC_ARG_ENABLE(build-with-cxx,\n [AS_HELP_STRING([--enable-build-with-cxx],\n@@ -1628,6 +1670,19 @@ if test -d ${srcdir}/gcc; then\n       ;;\n   esac\n \n+  # If bootstrapping, then using --enable-build-with-cxx or\n+  # --enable-build-poststage1-with-cxx requires enabling C++.\n+  case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n+    *,c++,*:*:*) ;;\n+    *:*,yes,*:yes)\n+      if test -f ${srcdir}/gcc/cp/config-lang.in; then\n+        enable_languages=\"${enable_languages},c++\"\n+      else\n+        AC_MSG_ERROR([bootstrapping with --enable-build-with-cxx or --enable-build-poststage1-with-cxx requires c++ sources])\n+      fi\n+      ;;\n+  esac\n+\n   # First scan to see if an enabled language requires some other language.\n   # We assume that a given config-lang.in will list all the language\n   # front ends it requires, even if some are required indirectly.\n@@ -2378,55 +2433,6 @@ INSTALL_GDB_TK=`echo ${GDB_TK} | sed s/-all-/-install-/g`\n # 99 commands in a script, for HP-UX sed.\n # Do not nest @if/@endif pairs, because configure will not warn you at all.\n \n-AC_ARG_ENABLE([bootstrap],\n-[AS_HELP_STRING([--enable-bootstrap],\n-\t\t[enable bootstrapping @<:@yes if native build@:>@])],,\n-enable_bootstrap=default)\n-\n-# Issue errors and warnings for invalid/strange bootstrap combinations.\n-case \"$configdirs\" in\n-  *gcc*) have_compiler=yes ;;\n-  *) have_compiler=no ;;\n-esac\n-\n-case \"$have_compiler:$host:$target:$enable_bootstrap\" in\n-  *:*:*:no) ;;\n-\n-  # Default behavior.  Enable bootstrap if we have a compiler\n-  # and we are in a native configuration.\n-  yes:$build:$build:default)\n-    enable_bootstrap=yes ;;\n-\n-  *:*:*:default)\n-    enable_bootstrap=no ;;\n-\n-  # We have a compiler and we are in a native configuration, bootstrap is ok\n-  yes:$build:$build:yes)\n-    ;;\n-\n-  # Other configurations, but we have a compiler.  Assume the user knows\n-  # what he's doing.\n-  yes:*:*:yes)\n-    AC_MSG_WARN([trying to bootstrap a cross compiler])\n-    ;;\n-\n-  # No compiler: if they passed --enable-bootstrap explicitly, fail\n-  no:*:*:yes)\n-    AC_MSG_ERROR([cannot bootstrap without a compiler]) ;;\n-\n-  # Fail if wrong command line\n-  *)\n-    AC_MSG_ERROR([invalid option for --enable-bootstrap])\n-    ;;\n-esac\n-\n-case \",$enable_languages,:,$ENABLE_BUILD_WITH_CXX,$ENABLE_BUILD_POSTSTAGE1_WITH_CXX,:$enable_bootstrap\" in\n-  *,c++,*:*:*) ;;\n-  *:*,yes,*:yes)\n-    AC_MSG_ERROR([bootstrapping with --enable-build-with-cxx or --enable-build-postage1-with-cxx requires c++ in --enable-languages])\n-    ;;\n-esac\n-\n case \"$enable_bootstrap:$ENABLE_GOLD: $configdirs :,$stage1_languages,\" in\n   yes:yes:*\\ gold\\ *:*,c++,*) ;;\n   yes:yes:*\\ gold\\ *:*)"}]}