{"sha": "4ccc4e30141613c4585a0497e050cb5deda06007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjYzRlMzAxNDE2MTNjNDU4NWEwNDk3ZTA1MGNiNWRlZGEwNjAwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-19T13:44:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-19T13:44:13Z"}, "message": "re PR debug/87039 (DW_OP_fbreg used without a frame base on a C++ code w/ -fopenmp)\n\n\tPR debug/87039\n\t* omp-expand.c: Don't include debug.h.\n\t(adjust_context_and_scope): Add REGION argument.  Find DECL_CONTEXT\n\tfrom innermost outer parallel, task, teams or target that has a\n\tchild_fn set, or, if there is no such outer region, use\n\tcurrent_function_decl.  Do the DECL_CONTEXT adjustment regardless of\n\twhether a suitable BLOCK is found or not.\n\t(expand_parallel_call, expand_teams_call): Don't call\n\tadjust_context_and_scope here.\n\t(grid_expand_target_grid_body): Revert 2017-01-25 changes.\n\t(expand_omp_taskreg, expand_omp_target): Likewise.  Call\n\tadjust_context_and_scope.\n\t* dwarf2out.c (dwarf2out_early_global_decl): For\n\tdecl_function_context recurse instead of calling dwarf2out_decl.\n\n\t* g++.dg/gomp/pr78363-4.C: New test.\n\t* g++.dg/gomp/pr78363-5.C: New test.\n\t* g++.dg/gomp/pr78363-6.C: New test.\n\t* g++.dg/gomp/pr78363-7.C: New test.\n\nFrom-SVN: r266272", "tree": {"sha": "7727a592dda3ece4affda62848329336a44d8219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7727a592dda3ece4affda62848329336a44d8219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ccc4e30141613c4585a0497e050cb5deda06007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccc4e30141613c4585a0497e050cb5deda06007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccc4e30141613c4585a0497e050cb5deda06007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccc4e30141613c4585a0497e050cb5deda06007/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e48e04f598c89a71a5aff3f02cb38b7bf06b5b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48e04f598c89a71a5aff3f02cb38b7bf06b5b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48e04f598c89a71a5aff3f02cb38b7bf06b5b2b"}], "stats": {"total": 164, "additions": 128, "deletions": 36}, "files": [{"sha": "dab887463498ced51c269b08b4f8350d30d5ea7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -1,3 +1,20 @@\n+2018-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/87039\n+\t* omp-expand.c: Don't include debug.h.\n+\t(adjust_context_and_scope): Add REGION argument.  Find DECL_CONTEXT\n+\tfrom innermost outer parallel, task, teams or target that has a\n+\tchild_fn set, or, if there is no such outer region, use\n+\tcurrent_function_decl.  Do the DECL_CONTEXT adjustment regardless of\n+\twhether a suitable BLOCK is found or not.\n+\t(expand_parallel_call, expand_teams_call): Don't call\n+\tadjust_context_and_scope here.\n+\t(grid_expand_target_grid_body): Revert 2017-01-25 changes.\n+\t(expand_omp_taskreg, expand_omp_target): Likewise.  Call\n+\tadjust_context_and_scope.\n+\t* dwarf2out.c (dwarf2out_early_global_decl): For\n+\tdecl_function_context recurse instead of calling dwarf2out_decl.\n+\n 2018-11-19  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/87229"}, {"sha": "9933650e33be2d12d18b58a2729603983570b5a3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -26403,7 +26403,7 @@ dwarf2out_early_global_decl (tree decl)\n \t\t enough so that it lands in its own context.  This avoids type\n \t\t pruning issues later on.  */\n \t      if (context_die == NULL || is_declaration_die (context_die))\n-\t\tdwarf2out_decl (context);\n+\t\tdwarf2out_early_global_decl (context);\n \t    }\n \n \t  /* Emit an abstract origin of a function first.  This happens"}, {"sha": "76c09c5883b758d0348a510a7c49feef9deca03d", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -56,7 +56,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"gimple-pretty-print.h\"\n #include \"hsa-common.h\"\n-#include \"debug.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n \n@@ -517,27 +516,44 @@ parallel_needs_hsa_kernel_p (struct omp_region *region)\n    function will be emitted with the correct lexical scope.  */\n \n static void\n-adjust_context_and_scope (tree entry_block, tree child_fndecl)\n+adjust_context_and_scope (struct omp_region *region, tree entry_block,\n+\t\t\t  tree child_fndecl)\n {\n+  tree parent_fndecl = NULL_TREE;\n+  gimple *entry_stmt;\n+  /* OMP expansion expands inner regions before outer ones, so if\n+     we e.g. have explicit task region nested in parallel region, when\n+     expanding the task region current_function_decl will be the original\n+     source function, but we actually want to use as context the child\n+     function of the parallel.  */\n+  for (region = region->outer;\n+       region && parent_fndecl == NULL_TREE; region = region->outer)\n+    switch (region->type)\n+      {\n+      case GIMPLE_OMP_PARALLEL:\n+      case GIMPLE_OMP_TASK:\n+      case GIMPLE_OMP_TEAMS:\n+\tentry_stmt = last_stmt (region->entry);\n+\tparent_fndecl = gimple_omp_taskreg_child_fn (entry_stmt);\n+\tbreak;\n+      case GIMPLE_OMP_TARGET:\n+\tentry_stmt = last_stmt (region->entry);\n+\tparent_fndecl\n+\t  = gimple_omp_target_child_fn (as_a <gomp_target *> (entry_stmt));\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n+  if (parent_fndecl == NULL_TREE)\n+    parent_fndecl = current_function_decl;\n+  DECL_CONTEXT (child_fndecl) = parent_fndecl;\n+\n   if (entry_block != NULL_TREE && TREE_CODE (entry_block) == BLOCK)\n     {\n       tree b = BLOCK_SUPERCONTEXT (entry_block);\n-\n       if (TREE_CODE (b) == BLOCK)\n         {\n-\t  tree parent_fndecl;\n-\n-\t  /* Follow supercontext chain until the parent fndecl\n-\t     is found.  */\n-\t  for (parent_fndecl = BLOCK_SUPERCONTEXT (b);\n-\t       TREE_CODE (parent_fndecl) == BLOCK;\n-\t       parent_fndecl = BLOCK_SUPERCONTEXT (parent_fndecl))\n-\t    ;\n-\n-\t  gcc_assert (TREE_CODE (parent_fndecl) == FUNCTION_DECL);\n-\n-\t  DECL_CONTEXT (child_fndecl) = parent_fndecl;\n-\n \t  DECL_CHAIN (child_fndecl) = BLOCK_VARS (b);\n \t  BLOCK_VARS (b) = child_fndecl;\n \t}\n@@ -723,8 +739,6 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n   tree child_fndecl = gimple_omp_parallel_child_fn (entry_stmt);\n   t2 = build_fold_addr_expr (child_fndecl);\n \n-  adjust_context_and_scope (gimple_block (entry_stmt), child_fndecl);\n-\n   vec_alloc (args, 4 + vec_safe_length (ws_args));\n   args->quick_push (t2);\n   args->quick_push (t1);\n@@ -952,8 +966,6 @@ expand_teams_call (basic_block bb, gomp_teams *entry_stmt)\n   tree child_fndecl = gimple_omp_teams_child_fn (entry_stmt);\n   tree t2 = build_fold_addr_expr (child_fndecl);\n \n-  adjust_context_and_scope (gimple_block (entry_stmt), child_fndecl);\n-\n   vec<tree, va_gc> *args;\n   vec_alloc (args, 5);\n   args->quick_push (t2);\n@@ -1412,11 +1424,6 @@ expand_omp_taskreg (struct omp_region *region)\n       else\n \tblock = gimple_block (entry_stmt);\n \n-      /* Make sure to generate early debug for the function before\n-         outlining anything.  */\n-      if (! gimple_in_ssa_p (cfun))\n-\t(*debug_hooks->early_global_decl) (cfun->decl);\n-\n       new_bb = move_sese_region_to_fn (child_cfun, entry_bb, exit_bb, block);\n       if (exit_bb)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n@@ -1497,6 +1504,8 @@ expand_omp_taskreg (struct omp_region *region)\n \t}\n     }\n \n+  adjust_context_and_scope (region, gimple_block (entry_stmt), child_fn);\n+\n   if (gimple_code (entry_stmt) == GIMPLE_OMP_PARALLEL)\n     expand_parallel_call (region, new_bb,\n \t\t\t  as_a <gomp_parallel *> (entry_stmt), ws_args);\n@@ -7399,11 +7408,6 @@ expand_omp_target (struct omp_region *region)\n \t  gsi_remove (&gsi, true);\n \t}\n \n-      /* Make sure to generate early debug for the function before\n-         outlining anything.  */\n-      if (! gimple_in_ssa_p (cfun))\n-\t(*debug_hooks->early_global_decl) (cfun->decl);\n-\n       /* Move the offloading region into CHILD_CFUN.  */\n \n       block = gimple_block (entry_stmt);\n@@ -7480,6 +7484,8 @@ expand_omp_target (struct omp_region *region)\n \t  dump_function_header (dump_file, child_fn, dump_flags);\n \t  dump_function_to_file (child_fn, dump_file, dump_flags);\n \t}\n+\n+      adjust_context_and_scope (region, gimple_block (entry_stmt), child_fn);\n     }\n \n   /* Emit a library call to launch the offloading region, or do data\n@@ -7977,11 +7983,6 @@ grid_expand_target_grid_body (struct omp_region *target)\n   init_tree_ssa (cfun);\n   pop_cfun ();\n \n-  /* Make sure to generate early debug for the function before\n-     outlining anything.  */\n-  if (! gimple_in_ssa_p (cfun))\n-    (*debug_hooks->early_global_decl) (cfun->decl);\n-\n   tree old_parm_decl = DECL_ARGUMENTS (kern_fndecl);\n   gcc_assert (!DECL_CHAIN (old_parm_decl));\n   tree new_parm_decl = copy_node (DECL_ARGUMENTS (kern_fndecl));"}, {"sha": "30fbd325f4963b36b218f35ac6453de9096c4d90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -1,3 +1,11 @@\n+2018-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/87039\n+\t* g++.dg/gomp/pr78363-4.C: New test.\n+\t* g++.dg/gomp/pr78363-5.C: New test.\n+\t* g++.dg/gomp/pr78363-6.C: New test.\n+\t* g++.dg/gomp/pr78363-7.C: New test.\n+\n 2018-11-19  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/87229"}, {"sha": "54d00788ff700e5dca895fe4b2398fc1cb90cf1c", "filename": "gcc/testsuite/g++.dg/gomp/pr78363-4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-4.C?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-g\" }\n+\n+int main()\n+{\n+  int n = 0;\n+\n+#pragma omp parallel\n+#pragma omp master\n+#pragma omp parallel\n+#pragma omp master\n+#pragma omp parallel for reduction (+: n)\n+  for (int i = [](){ return 3; }(); i < 10; ++i)\n+    n++;\n+\n+  return n;\n+}"}, {"sha": "760cc4d807007688559f1294bcebd11cfed947d4", "filename": "gcc/testsuite/g++.dg/gomp/pr78363-5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-5.C?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-g\" }\n+\n+int main()\n+{\n+  int n = 0;\n+#pragma omp task shared(n)\n+#pragma omp target map(tofrom:n)\n+#pragma omp for reduction (+: n)\n+  for (int i = [](){ return 3; }(); i < 10; ++i)\n+    n++;\n+  if (n != 7)\n+    __builtin_abort ();\n+#pragma omp taskwait\n+  return 0;\n+}"}, {"sha": "e49ef0628d04ef8630729122b0ae9e4740d6eebe", "filename": "gcc/testsuite/g++.dg/gomp/pr78363-6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-6.C?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-g\" }\n+\n+int main()\n+{\n+  int n = 0;\n+#pragma omp parallel\n+#pragma omp master\n+#pragma omp task shared (n)\n+  for (int i = [](){ return 3; }(); i < 10; ++i)\n+    n = i;\n+#pragma omp taskwait\n+  if (n != 7)\n+    __builtin_abort ();\n+}"}, {"sha": "4a0caee3dc3d3b49906de6a80f9635e36704011a", "filename": "gcc/testsuite/g++.dg/gomp/pr78363-7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccc4e30141613c4585a0497e050cb5deda06007/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr78363-7.C?ref=4ccc4e30141613c4585a0497e050cb5deda06007", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-g\" }\n+\n+int main()\n+{\n+  int n = 0;\n+\n+#pragma omp target map(tofrom: n)\n+#pragma omp parallel for reduction (+: n)\n+  for (int i = [](){ return 3; }(); i < 10; ++i)\n+    n++;\n+\n+  return n;\n+}"}]}