{"sha": "cf66c831c1e05bbea0ef859ed3ae0027c476c618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2NmM4MzFjMWUwNWJiZWEwZWY4NTllZDNhZTAwMjdjNDc2YzYxOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-03-26T14:56:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-26T14:56:30Z"}, "message": "tree-inline.c (remap_gimple_stmt): Cache gimple_block.\n\n2019-03-26  Richard Biener  <rguenther@suse.de>\n\n\t* tree-inline.c (remap_gimple_stmt): Cache gimple_block.\n\t(copy_debug_stmt): Likewise.\n\t(expand_call_inline): Likewise.\n\t(copy_bb): Avoid redundant lookup & set of gimple_block.\n\t* gimple-low.c (lower_gimple_return): Likewise.\n\t(lower_builtin_setjmp): Likewise.\n\nFrom-SVN: r269946", "tree": {"sha": "31b1a9089a51542a6f00d1b9233f09e2a5a8ff29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b1a9089a51542a6f00d1b9233f09e2a5a8ff29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf66c831c1e05bbea0ef859ed3ae0027c476c618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf66c831c1e05bbea0ef859ed3ae0027c476c618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf66c831c1e05bbea0ef859ed3ae0027c476c618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf66c831c1e05bbea0ef859ed3ae0027c476c618/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecbb1530e317e8b405d29dead5b080fe2ef9f50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbb1530e317e8b405d29dead5b080fe2ef9f50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbb1530e317e8b405d29dead5b080fe2ef9f50c"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "48e4c86943feaaad6f35349e5cabfd8ea2046a35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf66c831c1e05bbea0ef859ed3ae0027c476c618", "patch": "@@ -1,3 +1,12 @@\n+2019-03-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-inline.c (remap_gimple_stmt): Cache gimple_block.\n+\t(copy_debug_stmt): Likewise.\n+\t(expand_call_inline): Likewise.\n+\t(copy_bb): Avoid redundant lookup & set of gimple_block.\n+\t* gimple-low.c (lower_gimple_return): Likewise.\n+\t(lower_builtin_setjmp): Likewise.\n+\n 2019-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* hash-table.h (hash_table::m_gather_mem_stats): If GATHER_STATISTICS"}, {"sha": "1ae3db0e59687924ec440bc6880cad7f55abe40d", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=cf66c831c1e05bbea0ef859ed3ae0027c476c618", "patch": "@@ -723,8 +723,8 @@ lower_gimple_return (gimple_stmt_iterator *gsi, struct lower_data *data)\n   if (!optimize && gimple_has_location (stmt))\n     DECL_ARTIFICIAL (tmp_rs.label) = 0;\n   t = gimple_build_goto (tmp_rs.label);\n+  /* location includes block.  */\n   gimple_set_location (t, gimple_location (stmt));\n-  gimple_set_block (t, gimple_block (stmt));\n   gsi_insert_before (gsi, t, GSI_SAME_STMT);\n   gsi_remove (gsi, false);\n }\n@@ -806,16 +806,15 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   arg = build_addr (next_label);\n   t = builtin_decl_implicit (BUILT_IN_SETJMP_SETUP);\n   g = gimple_build_call (t, 2, gimple_call_arg (stmt, 0), arg);\n+  /* location includes block.  */\n   gimple_set_location (g, loc);\n-  gimple_set_block (g, gimple_block (stmt));\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \n   /* Build 'DEST = 0' and insert.  */\n   if (dest)\n     {\n       g = gimple_build_assign (dest, build_zero_cst (TREE_TYPE (dest)));\n       gimple_set_location (g, loc);\n-      gimple_set_block (g, gimple_block (stmt));\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);\n     }\n \n@@ -832,7 +831,6 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   t = builtin_decl_implicit (BUILT_IN_SETJMP_RECEIVER);\n   g = gimple_build_call (t, 1, arg);\n   gimple_set_location (g, loc);\n-  gimple_set_block (g, gimple_block (stmt));\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \n   /* Build 'DEST = 1' and insert.  */\n@@ -841,7 +839,6 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n       g = gimple_build_assign (dest, fold_convert_loc (loc, TREE_TYPE (dest),\n \t\t\t\t\t\t       integer_one_node));\n       gimple_set_location (g, loc);\n-      gimple_set_block (g, gimple_block (stmt));\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);\n     }\n "}, {"sha": "cd5f07869b9113c3eb68395fa31ee14ce7401644", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf66c831c1e05bbea0ef859ed3ae0027c476c618/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cf66c831c1e05bbea0ef859ed3ae0027c476c618", "patch": "@@ -1776,10 +1776,10 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n     }\n \n   /* If STMT has a block defined, map it to the newly constructed block.  */\n-  if (gimple_block (copy))\n+  if (tree block = gimple_block (copy))\n     {\n       tree *n;\n-      n = id->decl_map->get (gimple_block (copy));\n+      n = id->decl_map->get (block);\n       gcc_assert (n);\n       gimple_set_block (copy, *n);\n     }\n@@ -1951,8 +1951,8 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t\t GF_CALL_VA_ARG_PACK.  */\n \t      gimple_call_copy_flags (new_call, call_stmt);\n \t      gimple_call_set_va_arg_pack (new_call, false);\n+\t      /* location includes block.  */\n \t      gimple_set_location (new_call, gimple_location (stmt));\n-\t      gimple_set_block (new_call, gimple_block (stmt));\n \t      gimple_call_set_lhs (new_call, gimple_call_lhs (call_stmt));\n \n \t      gsi_replace (&copy_gsi, new_call, false);\n@@ -2891,9 +2891,9 @@ copy_debug_stmt (gdebug *stmt, copy_body_data *id)\n   tree t, *n;\n   struct walk_stmt_info wi;\n \n-  if (gimple_block (stmt))\n+  if (tree block = gimple_block (stmt))\n     {\n-      n = id->decl_map->get (gimple_block (stmt));\n+      n = id->decl_map->get (block);\n       gimple_set_block (stmt, n ? *n : id->block);\n     }\n \n@@ -4589,7 +4589,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n      artificial decls inserted by the compiler itself.  We need to\n      either link the inlined blocks into the caller block tree or\n      not refer to them in any way to not break GC for locations.  */\n-  if (gimple_block (stmt))\n+  if (tree block = gimple_block (stmt))\n     {\n       /* We do want to assign a not UNKNOWN_LOCATION BLOCK_SOURCE_LOCATION\n          to make inlined_function_outer_scope_p return true on this BLOCK.  */\n@@ -4601,7 +4601,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       id->block = make_node (BLOCK);\n       BLOCK_ABSTRACT_ORIGIN (id->block) = DECL_ORIGIN (fn);\n       BLOCK_SOURCE_LOCATION (id->block) = loc;\n-      prepend_lexical_block (gimple_block (stmt), id->block);\n+      prepend_lexical_block (block, id->block);\n     }\n \n   /* Local declarations will be replaced by their equivalents in this map.  */"}]}