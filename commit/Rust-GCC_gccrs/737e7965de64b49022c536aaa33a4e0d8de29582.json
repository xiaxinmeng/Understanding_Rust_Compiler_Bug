{"sha": "737e7965de64b49022c536aaa33a4e0d8de29582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM3ZTc5NjVkZTY0YjQ5MDIyYzUzNmFhYTMzYTRlMGQ4ZGUyOTU4Mg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-12-10T17:21:35Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-12-10T17:21:35Z"}, "message": "Fix alpha-x-m32r-elf bugs.\n\n\t* cse.c (simplify_unary_operation): Sign-extend constants when\n\tthey have the most significant bit set for the target.\n\t* real.c (endian): Sign-extend 32 bit output values on a 64 bit\n\thost.\n\t* m32r/m32r.c (m32r_expand_prologue): Store pretend_size in\n\tHOST_WIDE_INT temporary before negating it.\n\t* m32r/m32r.md (movsi_insn+1): Use ~0xffff instead of 0xffff0000.\n\nFrom-SVN: r24254", "tree": {"sha": "8a3b49849a4a07306e6f4b52490a51677d4b2da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a3b49849a4a07306e6f4b52490a51677d4b2da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/737e7965de64b49022c536aaa33a4e0d8de29582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737e7965de64b49022c536aaa33a4e0d8de29582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737e7965de64b49022c536aaa33a4e0d8de29582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737e7965de64b49022c536aaa33a4e0d8de29582/comments", "author": null, "committer": null, "parents": [{"sha": "ea585788ba7c48bbeec2ed953224a06bb1ebe0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea585788ba7c48bbeec2ed953224a06bb1ebe0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea585788ba7c48bbeec2ed953224a06bb1ebe0ac"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "2108f06de80f110d79c5013a2ebf659a4a27d20e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=737e7965de64b49022c536aaa33a4e0d8de29582", "patch": "@@ -1,3 +1,13 @@\n+Thu Dec 10 16:02:06 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* cse.c (simplify_unary_operation): Sign-extend constants when\n+\tthey have the most significant bit set for the target.\n+\t* real.c (endian): Sign-extend 32 bit output values on a 64 bit\n+\thost.\n+\t* m32r/m32r.c (m32r_expand_prologue): Store pretend_size in\n+\tHOST_WIDE_INT temporary before negating it.\n+\t* m32r/m32r.md (movsi_insn+1): Use ~0xffff instead of 0xffff0000.\n+\n Thu Dec 10 15:05:59 1998  Dave Brolley  <brolley@cygnus.com>\n \n \t* objc/objc-act.c (lang_init_options): Enclose cpplib related code in"}, {"sha": "97c4bca72e86a4419400fb4d1f37261e13b4ef55", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=737e7965de64b49022c536aaa33a4e0d8de29582", "patch": "@@ -1551,9 +1551,14 @@ m32r_expand_prologue ()\n \n   /* Allocate space for register arguments if this is a variadic function.  */\n   if (current_frame_info.pretend_size != 0)\n-    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t   stack_pointer_rtx,\n-\t\t\t   GEN_INT (-current_frame_info.pretend_size)));\n+    {\n+      /* Use a HOST_WIDE_INT temporary, since negating an unsigned int gives\n+\t the wrong result on a 64-bit host.  */\n+      HOST_WIDE_INT pretend_size = current_frame_info.pretend_size;\n+      emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t     stack_pointer_rtx,\n+\t\t\t     GEN_INT (-pretend_size)));\n+    }\n \n   /* Save any registers we need to and set up fp.  */\n "}, {"sha": "f52a5257d2353bb1aa4f08c329697c0a7737bdc0", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=737e7965de64b49022c536aaa33a4e0d8de29582", "patch": "@@ -434,8 +434,9 @@\n \t}\n     }\n \n-  /* Can't use any two byte insn, fall back to seth/or3.  */\n-  operands[2] = GEN_INT ((val) & 0xffff0000);\n+  /* Can't use any two byte insn, fall back to seth/or3.  Use ~0xffff instead\n+     of 0xffff0000, since the later fails on a 64-bit host.  */\n+  operands[2] = GEN_INT ((val) & ~0xffff);\n   operands[3] = GEN_INT ((val) & 0xffff);\n }\")\n "}, {"sha": "5e7763188e5bff136f4ebce76835f4c1eb040548", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=737e7965de64b49022c536aaa33a4e0d8de29582", "patch": "@@ -3242,6 +3242,19 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t      != ((HOST_WIDE_INT) (-1) << (width - 1))))\n \tval &= ((HOST_WIDE_INT) 1 << width) - 1;\n \n+      /* If this would be an entire word for the target, but is not for\n+\t the host, then sign-extend on the host so that the number will look\n+\t the same way on the host that it would on the target.\n+\n+\t For example, when building a 64 bit alpha hosted 32 bit sparc\n+\t targeted compiler, then we want the 32 bit unsigned value -1 to be\n+\t represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n+\t The later confuses the sparc backend.  */\n+\n+      if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == width\n+\t  && (val & ((HOST_WIDE_INT) 1 << (width - 1))))\n+\tval |= ((HOST_WIDE_INT) (-1) << width);\n+\n       return GEN_INT (val);\n     }\n "}, {"sha": "8cc38cbb3572b0aa7aa16e25665255d0d8f755c8", "filename": "gcc/real.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737e7965de64b49022c536aaa33a4e0d8de29582/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=737e7965de64b49022c536aaa33a4e0d8de29582", "patch": "@@ -553,6 +553,20 @@ endian (e, x, mode)\n \t  abort ();\n \t}\n     }\n+\n+  /* If 32 bits is an entire word for the target, but not for the host,\n+     then sign-extend on the host so that the number will look the same\n+     way on the host that it would on the target.  See for instance\n+     simplify_unary_operation.  */\n+\n+  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == 32)\n+    {\n+      if (x[0] & ((HOST_WIDE_INT) 1 << 31))\n+\tx[0] |= ((HOST_WIDE_INT) (-1) << 32);\n+\n+      if (x[1] & ((HOST_WIDE_INT) 1 << 31))\n+\tx[1] |= ((HOST_WIDE_INT) (-1) << 32);\n+    }\n }\n \n "}]}