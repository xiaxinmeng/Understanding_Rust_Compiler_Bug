{"sha": "0096508a2590c3130e23f8c81f443065abcf545e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NjUwOGEyNTkwYzMxMzBlMjNmOGM4MWY0NDMwNjVhYmNmNTQ1ZQ==", "commit": {"author": {"name": "Felix Yang", "email": "felix.yang@huawei.com", "date": "2014-11-19T13:46:16Z"}, "committer": {"name": "Fei Yang", "email": "fyang@gcc.gnu.org", "date": "2014-11-19T13:46:16Z"}, "message": "re PR target/59593 ([arm big-endian] using \"ldrh\" access a  immediate  which stored in a memory by word)\n\n        PR target/59593\n        * config/arm/arm.md (define_attr \"arch\"): Add v6t2.\n        (define_attr \"arch_enabled\"): Add test for the above.\n        (*movhi_insn_arch4): Add new alternative.\n\nCo-Authored-By: Shanyao Chen <chenshanyao@huawei.com>\n\nFrom-SVN: r217772", "tree": {"sha": "6dd3554a05f2e863afaa9d8b64c719307dbf0a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd3554a05f2e863afaa9d8b64c719307dbf0a2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0096508a2590c3130e23f8c81f443065abcf545e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0096508a2590c3130e23f8c81f443065abcf545e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0096508a2590c3130e23f8c81f443065abcf545e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0096508a2590c3130e23f8c81f443065abcf545e/comments", "author": null, "committer": null, "parents": [{"sha": "74893f25916c3cdcc7ad26af391c3f59a2a51a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74893f25916c3cdcc7ad26af391c3f59a2a51a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74893f25916c3cdcc7ad26af391c3f59a2a51a98"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "c3e3d145003a8bf8dfc901c2270185d0e3cd3fd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0096508a2590c3130e23f8c81f443065abcf545e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0096508a2590c3130e23f8c81f443065abcf545e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0096508a2590c3130e23f8c81f443065abcf545e", "patch": "@@ -1,3 +1,11 @@\n+2014-11-19  Felix Yang  <felix.yang@huawei.com>\n+\t    Shanyao Chen  <chenshanyao@huawei.com>\n+\n+\tPR target/59593\n+\t* config/arm/arm.md (define_attr \"arch\"): Add v6t2.\n+\t(define_attr \"arch_enabled\"): Add test for the above.\n+\t(*movhi_insn_arch4): Add new alternative.\n+\n 2014-11-19  Richard Henderson  <rth@redhat.com>\n \n \t* c-family/c-common.c (c_common_reswords): Add"}, {"sha": "3a6e0b04914a9a0c969c9847d0bbd15ee25c6f6b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0096508a2590c3130e23f8c81f443065abcf545e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0096508a2590c3130e23f8c81f443065abcf545e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0096508a2590c3130e23f8c81f443065abcf545e", "patch": "@@ -125,9 +125,10 @@\n ; This can be \"a\" for ARM, \"t\" for either of the Thumbs, \"32\" for\n ; TARGET_32BIT, \"t1\" or \"t2\" to specify a specific Thumb mode.  \"v6\"\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n-; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n-; use type \"any\" to enable an alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3\"\n+; arm_arch6.  \"v6t2\" for Thumb-2 with arm_arch6.  This attribute is\n+; used to compute attribute \"enabled\", use type \"any\" to enable an\n+; alternative in all cases.\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,v6t2,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -162,6 +163,10 @@\n \t      (match_test \"TARGET_32BIT && !arm_arch6\"))\n \t (const_string \"yes\")\n \n+\t (and (eq_attr \"arch\" \"v6t2\")\n+\t      (match_test \"TARGET_32BIT && arm_arch6 && arm_arch_thumb2\"))\n+\t (const_string \"yes\")\n+\n \t (and (eq_attr \"arch\" \"avoid_neon_for_64bits\")\n \t      (match_test \"TARGET_NEON\")\n \t      (not (match_test \"TARGET_PREFER_NEON_64BITS\")))\n@@ -6288,25 +6293,28 @@\n \n ;; Pattern to recognize insn generated default case above\n (define_insn \"*movhi_insn_arch4\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")\n-\t(match_operand:HI 1 \"general_operand\"      \"rIk,K,r,mi\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m,r\")\n+\t(match_operand:HI 1 \"general_operand\"      \"rIk,K,n,r,mi\"))]\n   \"TARGET_ARM\n    && arm_arch4\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n   \"@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n+   movw%?\\\\t%0, %1\\\\t%@ movhi\n    str%(h%)\\\\t%1, %0\\\\t%@ movhi\n    ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,256\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,244\")\n+   (set_attr \"pool_range\" \"*,*,*,*,256\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,244\")\n+   (set_attr \"arch\" \"*,*,v6t2,*,*\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 1 \"const_int_operand\" \"\")\n                                         (const_string \"mov_imm\" )\n                                         (const_string \"mov_reg\"))\n                           (const_string \"mvn_imm\")\n+                          (const_string \"mov_imm\")\n                           (const_string \"store1\")\n                           (const_string \"load1\")])]\n )"}]}