{"sha": "427388a4847371c9d1308658cfedbf2d4ae159c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3Mzg4YTQ4NDczNzFjOWQxMzA4NjU4Y2ZlZGJmMmQ0YWUxNTljMQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-26T13:04:34Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-26T13:04:34Z"}, "message": "arm-protos.h (FL_NONE): New.\n\n2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm-protos.h (FL_NONE): New.\n\t(FL_ANY): New.\n\t(arm_feature_set): New.\n\t(ARM_FSET_MAKE): New.\n\t(ARM_FSET_MAKE_CPU1): New.\n\t(ARM_FSET_MAKE_CPU2): New.\n\t(ARM_FSET_CPU1): New.\n\t(ARM_FSET_CPU2): New.\n\t(ARM_FSET_EMPTY): New.\n\t(ARM_FSET_ANY): New.\n\t(ARM_FSET_HAS_CPU1): New.\n\t(ARM_FSET_HAS_CPU2): New.\n\t(ARM_FSET_HAS_CPU): New.\n\t(ARM_FSET_ADD_CPU1): New.\n\t(ARM_FSET_ADD_CPU2): New.\n\t(ARM_FSET_DEL_CPU1): New.\n\t(ARM_FSET_DEL_CPU2): New.\n\t(ARM_FSET_UNION): New.\n\t(ARM_FSET_INTER): New.\n\t(ARM_FSET_XOR): New.\n\t(ARM_FSET_EXCLUDE): New.\n\t(AFM_FSET_IS_EMPTY): New.\n\t(ARM_FSET_CPU_SUBSET): New.\n\nFrom-SVN: r227214", "tree": {"sha": "60994ed21b6120b341e798e2afa42d0620faec93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60994ed21b6120b341e798e2afa42d0620faec93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/427388a4847371c9d1308658cfedbf2d4ae159c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427388a4847371c9d1308658cfedbf2d4ae159c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427388a4847371c9d1308658cfedbf2d4ae159c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427388a4847371c9d1308658cfedbf2d4ae159c1/comments", "author": null, "committer": null, "parents": [{"sha": "d18ba2841482c9fc9938e1539e133df7a7c98a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18ba2841482c9fc9938e1539e133df7a7c98a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18ba2841482c9fc9938e1539e133df7a7c98a99"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "04f52ebcbc077186149d2088ae1e07971eca1475", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427388a4847371c9d1308658cfedbf2d4ae159c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427388a4847371c9d1308658cfedbf2d4ae159c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=427388a4847371c9d1308658cfedbf2d4ae159c1", "patch": "@@ -1,3 +1,29 @@\n+2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm-protos.h (FL_NONE): New.\n+\t(FL_ANY): New.\n+\t(arm_feature_set): New.\n+\t(ARM_FSET_MAKE): New.\n+\t(ARM_FSET_MAKE_CPU1): New.\n+\t(ARM_FSET_MAKE_CPU2): New.\n+\t(ARM_FSET_CPU1): New.\n+\t(ARM_FSET_CPU2): New.\n+\t(ARM_FSET_EMPTY): New.\n+\t(ARM_FSET_ANY): New.\n+\t(ARM_FSET_HAS_CPU1): New.\n+\t(ARM_FSET_HAS_CPU2): New.\n+\t(ARM_FSET_HAS_CPU): New.\n+\t(ARM_FSET_ADD_CPU1): New.\n+\t(ARM_FSET_ADD_CPU2): New.\n+\t(ARM_FSET_DEL_CPU1): New.\n+\t(ARM_FSET_DEL_CPU2): New.\n+\t(ARM_FSET_UNION): New.\n+\t(ARM_FSET_INTER): New.\n+\t(ARM_FSET_XOR): New.\n+\t(ARM_FSET_EXCLUDE): New.\n+\t(AFM_FSET_IS_EMPTY): New.\n+\t(ARM_FSET_CPU_SUBSET): New.\n+\n 2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Rename"}, {"sha": "0afd5ff3652c0bd8658e33fd20c3f13b76f74093", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427388a4847371c9d1308658cfedbf2d4ae159c1/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427388a4847371c9d1308658cfedbf2d4ae159c1/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=427388a4847371c9d1308658cfedbf2d4ae159c1", "patch": "@@ -347,6 +347,8 @@ extern bool arm_is_constant_pool_ref (rtx);\n /* Flags used to identify the presence of processor capabilities.  */\n \n /* Bit values used to identify processor capabilities.  */\n+#define FL_NONE\t      (0)\t      /* No flags.  */\n+#define FL_ANY\t      (0xffffffff)    /* All flags.  */\n #define FL_CO_PROC    (1 << 0)        /* Has external co-processor bus */\n #define FL_ARCH3M     (1 << 1)        /* Extended multiply */\n #define FL_MODE26     (1 << 2)        /* 26-bit mode support */\n@@ -414,6 +416,109 @@ extern bool arm_is_constant_pool_ref (rtx);\n #define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n #define FL_FOR_ARCH8A\t(FL_FOR_ARCH7VE | FL_ARCH8)\n \n+/* There are too many feature bits to fit in a single word so the set of cpu and\n+   fpu capabilities is a structure.  A feature set is created and manipulated\n+   with the ARM_FSET macros.  */\n+\n+typedef struct\n+{\n+  unsigned long cpu[2];\n+} arm_feature_set;\n+\n+\n+/* Initialize a feature set.  */\n+\n+#define ARM_FSET_MAKE(CPU1,CPU2) { { (CPU1), (CPU2) } }\n+\n+#define ARM_FSET_MAKE_CPU1(CPU1) ARM_FSET_MAKE ((CPU1), (FL_NONE))\n+#define ARM_FSET_MAKE_CPU2(CPU2) ARM_FSET_MAKE ((FL_NONE), (CPU2))\n+\n+/* Accessors.  */\n+\n+#define ARM_FSET_CPU1(S) ((S).cpu[0])\n+#define ARM_FSET_CPU2(S) ((S).cpu[1])\n+\n+/* Useful combinations.  */\n+\n+#define ARM_FSET_EMPTY ARM_FSET_MAKE (FL_NONE, FL_NONE)\n+#define ARM_FSET_ANY ARM_FSET_MAKE (FL_ANY, FL_ANY)\n+\n+/* Tests for a specific CPU feature.  */\n+\n+#define ARM_FSET_HAS_CPU1(A, F)  \\\n+  (((A).cpu[0] & ((unsigned long)(F))) == ((unsigned long)(F)))\n+#define ARM_FSET_HAS_CPU2(A, F)  \\\n+  (((A).cpu[1] & ((unsigned long)(F))) == ((unsigned long)(F)))\n+#define ARM_FSET_HAS_CPU(A, F1, F2)\t\t\t\t\\\n+  (ARM_FSET_HAS_CPU1 ((A), (F1)) && ARM_FSET_HAS_CPU2 ((A), (F2)))\n+\n+/* Add a feature to a feature set.  */\n+\n+#define ARM_FSET_ADD_CPU1(DST, F)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[0] |= (F);\t\t\t\\\n+  } while (0)\n+\n+#define ARM_FSET_ADD_CPU2(DST, F)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[1] |= (F);\t\t\t\\\n+  } while (0)\n+\n+/* Remove a feature from a feature set.  */\n+\n+#define ARM_FSET_DEL_CPU1(DST, F)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[0] &= ~(F);\t\t\t\\\n+  } while (0)\n+\n+#define ARM_FSET_DEL_CPU2(DST, F)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[1] &= ~(F);\t\t\t\\\n+  } while (0)\n+\n+/* Union of feature sets.  */\n+\n+#define ARM_FSET_UNION(DST,F1,F2)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[0] = (F1).cpu[0] | (F2).cpu[0];\t\\\n+    (DST).cpu[1] = (F1).cpu[1] | (F2).cpu[1];\t\\\n+  } while (0)\n+\n+/* Intersection of feature sets.  */\n+\n+#define ARM_FSET_INTER(DST,F1,F2)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[0] = (F1).cpu[0] & (F2).cpu[0];\t\\\n+    (DST).cpu[1] = (F1).cpu[1] & (F2).cpu[1];\t\\\n+  } while (0)\n+\n+/* Exclusive disjunction.  */\n+\n+#define ARM_FSET_XOR(DST,F1,F2)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    (DST).cpu[0] = (F1).cpu[0] ^ (F2).cpu[0];\t\t\\\n+    (DST).cpu[1] = (F1).cpu[1] ^ (F2).cpu[1];\t\t\\\n+  } while (0)\n+\n+/* Difference of feature sets: F1 excluding the elements of F2.  */\n+\n+#define ARM_FSET_EXCLUDE(DST,F1,F2)\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    (DST).cpu[0] = (F1).cpu[0] & ~(F2).cpu[0];\t\\\n+    (DST).cpu[1] = (F1).cpu[1] & ~(F2).cpu[1];\t\\\n+  } while (0)\n+\n+/* Test for an empty feature set.  */\n+\n+#define ARM_FSET_IS_EMPTY(A)\t\t\\\n+  (!((A).cpu[0]) && !((A).cpu[1]))\n+\n+/* Tests whether the cpu features of A are a subset of B.  */\n+\n+#define ARM_FSET_CPU_SUBSET(A,B)\t\t\t\t\t\\\n+  ((((A).cpu[0] & (B).cpu[0]) == (A).cpu[0])\t\t\t\t\\\n+   && (((A).cpu[1] & (B).cpu[1]) == (A).cpu[1]))\n+\n /* The bits in this mask specify which\n    instructions we are allowed to generate.  */\n extern unsigned long insn_flags;"}]}