{"sha": "15305a736f7cb40174ae276912806eaf077de783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzMDVhNzM2ZjdjYjQwMTc0YWUyNzY5MTI4MDZlYWYwNzdkZTc4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-16T17:42:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-16T17:42:56Z"}, "message": "Make TREE_USED match the [basic.def.odr] concept for FUNCTION_DECL and VAR_DECL...\n\n\tMake TREE_USED match the [basic.def.odr] concept for FUNCTION_DECL\n\tand VAR_DECL, so mark_used only has effect the first time.\n\t* decl2.c (mark_used): Just return if TREE_USED is already set.\n\tDon't set TREE_USED if cp_unevaluated_operand is set.\n\t(tree_used_ok): New fn.\n\t* init.c (build_offset_ref): Check it instead of TREE_USED.\n\t* call.c (build_call_a): Likewise.\n\t* cp-tree.h: Declare it.\n\t(DECL_NO_LINKAGE_CHECKED): No longer needed.\n\t(struct lang_decl_base): Remove no_linkage_checked bitfield.\n\nFrom-SVN: r150807", "tree": {"sha": "9014dfecbe0670edc4ce4c440e01edcb80786afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9014dfecbe0670edc4ce4c440e01edcb80786afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15305a736f7cb40174ae276912806eaf077de783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15305a736f7cb40174ae276912806eaf077de783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15305a736f7cb40174ae276912806eaf077de783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15305a736f7cb40174ae276912806eaf077de783/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3ece023f3547db2d77a2d96ce0b8294815edcb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ece023f3547db2d77a2d96ce0b8294815edcb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ece023f3547db2d77a2d96ce0b8294815edcb3"}], "stats": {"total": 141, "additions": 93, "deletions": 48}, "files": [{"sha": "b98842ee34d35768ab39e5634ecc4302a183ba12", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -1,4 +1,15 @@\n-2009-08-15  Jason Merrill  <jason@redhat.com>\n+2009-08-16  Jason Merrill  <jason@redhat.com>\n+\n+\tMake TREE_USED match the [basic.def.odr] concept for FUNCTION_DECL\n+\tand VAR_DECL, so mark_used only has effect the first time.\n+\t* decl2.c (mark_used): Just return if TREE_USED is already set.\n+\tDon't set TREE_USED if cp_unevaluated_operand is set.\n+\t(tree_used_ok): New fn.\n+\t* init.c (build_offset_ref): Check it instead of TREE_USED.\n+\t* call.c (build_call_a): Likewise.\n+\t* cp-tree.h: Declare it.\n+\t(DECL_NO_LINKAGE_CHECKED): No longer needed.\n+\t(struct lang_decl_base): Remove no_linkage_checked bitfield.\n \n \t* decl2.c (finish_static_data_member_decl): Don't set TREE_USED.\n "}, {"sha": "30a1b45a1ed42adc4e02739e6eb2e3c2549415a7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -318,7 +318,7 @@ build_call_a (tree function, int n, tree *argarray)\n       && TREE_CODE (TREE_OPERAND (function, 0)) == FUNCTION_DECL)\n     {\n       decl = TREE_OPERAND (function, 0);\n-      if (!TREE_USED (decl))\n+      if (!tree_used_ok (decl))\n \t{\n \t  /* We invoke build_call directly for several library\n \t     functions.  These may have been declared normally if"}, {"sha": "bbd1a42f559e2dcea43074e53ef9d66f8e6e1b09", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -1579,9 +1579,8 @@ struct GTY(()) lang_decl_base {\n   unsigned anticipated_p : 1;\t\t   /* fn or type */\n   unsigned friend_attr : 1;\t\t   /* fn or type */\n   unsigned template_conv_p : 1;\t\t   /* template only? */\n-  unsigned no_linkage_checked : 1;         /* var or fn */\n   unsigned u2sel : 1;\n-  /* 1 spare bit */\n+  /* 2 spare bits */\n };\n \n /* True for DECL codes which have template info and access.  */\n@@ -1983,14 +1982,6 @@ struct GTY(()) lang_decl {\n   (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n    ->u.base.initialized_in_class)\n \n-/* Nonzero if we've checked whether DECL uses types without linkage in a\n-   potentially invalid way.\n-   ??? Instead, should fix mark_used to only set TREE_USED when we're\n-   really using something, and just return if it's already set.  */\n-#define DECL_NO_LINKAGE_CHECKED(DECL) \\\n-  (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n-   ->u.base.no_linkage_checked)\n-\n /* Nonzero for DECL means that this decl is just a friend declaration,\n    and should not be added to the list of members for this class.  */\n #define DECL_FRIEND_P(NODE) (DECL_LANG_SPECIFIC (NODE)->u.base.friend_attr)\n@@ -4486,6 +4477,7 @@ extern tree build_cleanup\t\t\t(tree);\n extern tree build_offset_ref_call_from_tree\t(tree, VEC(tree,gc) **);\n extern void check_default_args\t\t\t(tree);\n extern void mark_used\t\t\t\t(tree);\n+extern bool tree_used_ok\t\t\t(tree);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n@@ -4638,6 +4630,7 @@ extern void mark_decl_instantiated\t\t(tree, int);\n extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n+extern bool always_instantiate_p\t\t(tree);\n extern tree instantiate_decl\t\t\t(tree, int, bool);\n extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);"}, {"sha": "e4ed9632b2db7133ce574d89e16c6432df8dc4b7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -3845,20 +3845,24 @@ mark_used (tree decl)\n       decl = OVL_CURRENT (decl);\n     }\n \n-  TREE_USED (decl) = 1;\n-  if (DECL_CLONED_FUNCTION_P (decl))\n-    TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_DELETED_FN (decl))\n     {\n       error (\"deleted function %q+D\", decl);\n       error (\"used here\");\n+      TREE_USED (decl) = 1;\n       return;\n     }\n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand != 0)\n     return;\n \n+  /* We only want to do this processing once.  We don't need to keep trying\n+     to instantiate inline templates, because unit-at-a-time will make sure\n+     we get them compiled before functions that want to inline them.  */\n+  if (TREE_USED (decl))\n+    return;\n+\n   /* If within finish_function, defer the rest until that function\n      finishes, otherwise it might recurse.  */\n   if (defer_mark_used_calls)\n@@ -3892,6 +3896,10 @@ mark_used (tree decl)\n   if (processing_template_decl)\n     return;\n \n+  TREE_USED (decl) = 1;\n+  if (DECL_CLONED_FUNCTION_P (decl))\n+    TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n+\n   /* DR 757: A type without linkage shall not be used as the type of a\n      variable or function with linkage, unless\n    o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n@@ -3900,10 +3908,8 @@ mark_used (tree decl)\n   if (TREE_PUBLIC (decl)\n       && (TREE_CODE (decl) == FUNCTION_DECL\n \t  || TREE_CODE (decl) == VAR_DECL)\n-      && DECL_LANG_SPECIFIC (decl)\n-      && !DECL_NO_LINKAGE_CHECKED (decl))\n+      && DECL_LANG_SPECIFIC (decl))\n     {\n-      DECL_NO_LINKAGE_CHECKED (decl) = true;\n       if (!DECL_EXTERN_C_P (decl)\n \t  && !DECL_ARTIFICIAL (decl)\n \t  && !decl_defined_p (decl)\n@@ -3949,15 +3955,7 @@ mark_used (tree decl)\n   else if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)\n \t   && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n \t   && (!DECL_EXPLICIT_INSTANTIATION (decl)\n-\t       || (TREE_CODE (decl) == FUNCTION_DECL\n-\t\t   && possibly_inlined_p\n-\t\t       (DECL_TEMPLATE_RESULT (\n-\t\t         template_for_substitution (decl))))\n-\t       /* We need to instantiate static data members so that there\n-\t\t  initializers are available in integral constant\n-\t\t  expressions.  */\n-\t       || (TREE_CODE (decl) == VAR_DECL\n-\t\t   && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))))\n+\t       || always_instantiate_p (decl)))\n     /* If this is a function or variable that is an instance of some\n        template, we now know that we will need to actually do the\n        instantiation. We check that DECL is not an explicit\n@@ -3973,4 +3971,15 @@ mark_used (tree decl)\n   processing_template_decl = saved_processing_template_decl;\n }\n \n+/* Use this function to verify that mark_used has been called\n+   previously.  That is, either TREE_USED is set, or we're in a\n+   context that doesn't set it.  */\n+\n+bool\n+tree_used_ok (tree decl)\n+{\n+  return (TREE_USED (decl) || cp_unevaluated_operand\n+\t  || defer_mark_used_calls || processing_template_decl);\n+}\n+\n #include \"gt-cp-decl2.h\""}, {"sha": "9dac7de400e6a7b0e05f536706b4f549219efb38", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -1502,7 +1502,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n \n   gcc_assert (DECL_P (member) || BASELINK_P (member));\n   /* Callers should call mark_used before this point.  */\n-  gcc_assert (!DECL_P (member) || TREE_USED (member));\n+  gcc_assert (!DECL_P (member) || tree_used_ok (member));\n \n   if (!COMPLETE_TYPE_P (complete_type (type))\n       && !TYPE_BEING_DEFINED (type))"}, {"sha": "eb43271e85074a089424769f08d6d53a1faa2ad4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -15635,6 +15635,27 @@ template_for_substitution (tree decl)\n   return tmpl;\n }\n \n+/* Returns true if we need to instantiate this template instance even if we\n+   know we aren't going to emit it..  */\n+\n+bool\n+always_instantiate_p (tree decl)\n+{\n+  /* We always instantiate inline functions so that we can inline them.  An\n+     explicit instantiation declaration prohibits implicit instantiation of\n+     non-inline functions.  With high levels of optimization, we would\n+     normally inline non-inline functions -- but we're not allowed to do\n+     that for \"extern template\" functions.  Therefore, we check\n+     DECL_DECLARED_INLINE_P, rather than possibly_inlined_p.  */\n+  return ((TREE_CODE (decl) == FUNCTION_DECL\n+\t   && DECL_DECLARED_INLINE_P (decl))\n+\t  /* And we need to instantiate static data members so that\n+\t     their initializers are available in integral constant\n+\t     expressions.  */\n+\t  || (TREE_CODE (decl) == VAR_DECL\n+\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)));\n+}\n+\n /* Produce the definition of D, a _DECL generated from a template.  If\n    DEFER_OK is nonzero, then we don't have to actually do the\n    instantiation now; we just have to do it sometime.  Normally it is\n@@ -15688,6 +15709,15 @@ instantiate_decl (tree d, int defer_ok,\n        the instantiation.  */\n     return d;\n \n+  /* Check to see whether we know that this template will be\n+     instantiated in some other file, as with \"extern template\"\n+     extension.  */\n+  external_p = (DECL_INTERFACE_KNOWN (d) && DECL_REALLY_EXTERN (d));\n+\n+  /* In general, we do not instantiate such templates.  */\n+  if (external_p && !always_instantiate_p (d))\n+    return d;\n+\n   gen_tmpl = most_general_template (tmpl);\n   gen_args = DECL_TI_ARGS (d);\n \n@@ -15781,26 +15811,6 @@ instantiate_decl (tree d, int defer_ok,\n       pop_access_scope (d);\n     }\n \n-  /* Check to see whether we know that this template will be\n-     instantiated in some other file, as with \"extern template\"\n-     extension.  */\n-  external_p = (DECL_INTERFACE_KNOWN (d) && DECL_REALLY_EXTERN (d));\n-  /* In general, we do not instantiate such templates...  */\n-  if (external_p\n-      /* ... but we instantiate inline functions so that we can inline\n-\t them.  An explicit instantiation declaration prohibits implicit\n-\t instantiation of non-inline functions.  With high levels of\n-\t optimization, we would normally inline non-inline functions\n-\t -- but we're not allowed to do that for \"extern template\" functions.\n-\t Therefore, we check DECL_DECLARED_INLINE_P, rather than\n-\t possibly_inlined_p.  And ...  */\n-      && ! (TREE_CODE (d) == FUNCTION_DECL\n-\t    && DECL_DECLARED_INLINE_P (d))\n-      /* ... we instantiate static data members whose values are\n-\t needed in integral constant expressions.  */\n-      && ! (TREE_CODE (d) == VAR_DECL\n-\t    && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (d)))\n-    goto out;\n   /* Defer all other templates, unless we have been explicitly\n      forbidden from doing so.  */\n   if (/* If there is no definition, we cannot instantiate the"}, {"sha": "83eda2ffac2646506205345b64ed93067eba04a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -1,3 +1,7 @@\n+2009-08-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/inline1.C: New.\n+\n 2009-08-16  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/38599"}, {"sha": "ea405f85339a4a86d1a9db843844b99c5a65ade7", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15305a736f7cb40174ae276912806eaf077de783/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15305a736f7cb40174ae276912806eaf077de783/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline1.C?ref=15305a736f7cb40174ae276912806eaf077de783", "patch": "@@ -0,0 +1,18 @@\n+// This isn't really testing dwarf output, but rather that we can inline f\n+// even though the call precedes the definition.\n+\n+// { dg-options \"-gdwarf-2 -dA -O\" }\n+// { dg-final { scan-assembler \"DW_TAG_inlined_subroutine\" } }\n+\n+template <class T>\n+inline T f(T);\n+\n+int main()\n+{\n+  f(1);\n+}\n+\n+int i;\n+\n+template <class T>\n+inline T f(T t) { ++i; return t; }"}]}