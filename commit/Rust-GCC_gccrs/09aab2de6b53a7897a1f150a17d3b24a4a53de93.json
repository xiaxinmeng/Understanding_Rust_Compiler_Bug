{"sha": "09aab2de6b53a7897a1f150a17d3b24a4a53de93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhYWIyZGU2YjUzYTc4OTdhMWYxNTBhMTdkM2IyNGE0YTUzZGU5Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-18T20:23:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-18T20:23:51Z"}, "message": "(save_exprs): New variable.\n\n(collect_iterators): Don't process a SAVE_EXPR twice.\n(iterator_expand): Clear save_exprs.\n\nFrom-SVN: r4693", "tree": {"sha": "9c6cf35f545d52c4dd9154ffe58feda18a6a9421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6cf35f545d52c4dd9154ffe58feda18a6a9421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09aab2de6b53a7897a1f150a17d3b24a4a53de93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aab2de6b53a7897a1f150a17d3b24a4a53de93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09aab2de6b53a7897a1f150a17d3b24a4a53de93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aab2de6b53a7897a1f150a17d3b24a4a53de93/comments", "author": null, "committer": null, "parents": [{"sha": "1c0015c23bbf59c3a365824db7361c496a7c9843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0015c23bbf59c3a365824db7361c496a7c9843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0015c23bbf59c3a365824db7361c496a7c9843"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "09df3e466336f6a3fda68dc2b4cd1c4b6f942832", "filename": "gcc/c-iterate.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab2de6b53a7897a1f150a17d3b24a4a53de93/gcc%2Fc-iterate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab2de6b53a7897a1f150a17d3b24a4a53de93/gcc%2Fc-iterate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-iterate.c?ref=09aab2de6b53a7897a1f150a17d3b24a4a53de93", "patch": "@@ -31,7 +31,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"rtl.h\"\n \n static void expand_stmt_with_iterators_1 ();\n-static tree collect_iterators();\n+static tree collect_iterators ();\n static void iterator_loop_prologue ();\n static void iterator_loop_epilogue ();\n static void add_ixpansion ();\n@@ -97,6 +97,9 @@ struct iter_stack_node\n struct iter_stack_node *iter_stack;\n \n struct iter_stack_node sublevel_ixpansions;\n+\n+/* During collect_iterators, a list of SAVE_EXPRs already scanned.  */\n+static tree save_exprs;\n \f\n /* Initialize our obstack once per compilation.  */\n \n@@ -144,7 +147,9 @@ void\n iterator_expand (stmt)\n     tree stmt;\n {\n-  tree iter_list = collect_iterators (stmt, NULL_TREE);\n+  tree iter_list;\n+  save_exprs = NULL_TREE;\n+  iter_list = collect_iterators (stmt, NULL_TREE);\n   expand_stmt_with_iterators_1 (stmt, iter_list);\n   istack_sublevel_to_current ();\n }\n@@ -202,6 +207,17 @@ collect_iterators (exp, list)\n \treturn list;\n       }\n \n+    case SAVE_EXPR:\n+      /* In each scan, scan a given save_expr only once.  */\n+      {\n+\ttree tail;\n+\tfor (tail = save_exprs; tail; tail = TREE_CHAIN (tail))\n+\t  if (TREE_VALUE (tail) == exp)\n+\t    return list;\n+      }\n+      save_exprs = tree_cons (NULL_TREE, exp, save_exprs);\n+      return collect_iterators (TREE_OPERAND (exp, 0), list);\n+\n       /* we do not automatically iterate blocks -- one must */\n       /* use the FOR construct to do that */\n \n@@ -229,7 +245,6 @@ collect_iterators (exp, list)\n \t    /* Some tree codes have RTL, not trees, as operands.  */\n \t    switch (TREE_CODE (exp))\n \t      {\n-\t      case SAVE_EXPR:\n \t      case CALL_EXPR:\n \t\tnum_args = 2;\n \t\tbreak;"}]}