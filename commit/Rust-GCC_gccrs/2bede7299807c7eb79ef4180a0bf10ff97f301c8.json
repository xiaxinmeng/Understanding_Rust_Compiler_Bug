{"sha": "2bede7299807c7eb79ef4180a0bf10ff97f301c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZGU3Mjk5ODA3YzdlYjc5ZWY0MTgwYTBiZjEwZmY5N2YzMDFjOA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-09-10T01:04:26Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-09-10T01:04:26Z"}, "message": "Add support for array with non-zero lower bounds.  (Used by Chill.)\n\nFrom-SVN: r5300", "tree": {"sha": "02a86befa71dd50fb876200a895b720a445677bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a86befa71dd50fb876200a895b720a445677bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bede7299807c7eb79ef4180a0bf10ff97f301c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bede7299807c7eb79ef4180a0bf10ff97f301c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bede7299807c7eb79ef4180a0bf10ff97f301c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bede7299807c7eb79ef4180a0bf10ff97f301c8/comments", "author": null, "committer": null, "parents": [{"sha": "e97b2a1c481e9b269e2defb75d85aa39b037412d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97b2a1c481e9b269e2defb75d85aa39b037412d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97b2a1c481e9b269e2defb75d85aa39b037412d"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "003c302bd0d878317ab58eeb28eec6d90edbc61f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bede7299807c7eb79ef4180a0bf10ff97f301c8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bede7299807c7eb79ef4180a0bf10ff97f301c8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2bede7299807c7eb79ef4180a0bf10ff97f301c8", "patch": "@@ -5338,12 +5338,17 @@ really_start_incremental_init (type)\n     }\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {\n-      constructor_index = copy_node (integer_zero_node);\n       constructor_range_end = 0;\n-      constructor_unfilled_index = copy_node (integer_zero_node);\n       if (TYPE_DOMAIN (constructor_type))\n-\tconstructor_max_index\n-\t  = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n+\t{\n+\t  constructor_max_index\n+\t    = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n+\t  constructor_index\n+\t    = copy_node (TYPE_MIN_VALUE (TYPE_DOMAIN (constructor_type)));\n+\t}\n+      else\n+\tconstructor_index = copy_node (integer_zero_node);\n+      constructor_unfilled_index = copy_node (constructor_index);\n     }\n   else\n     {\n@@ -5447,12 +5452,17 @@ push_init_level (implicit)\n     }\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {\n-      constructor_index = copy_node (integer_zero_node);\n       constructor_range_end = 0;\n-      constructor_unfilled_index = copy_node (integer_zero_node);\n       if (TYPE_DOMAIN (constructor_type))\n-\tconstructor_max_index\n-\t  = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n+\t{\n+\t  constructor_max_index\n+\t    = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n+\t  constructor_index\n+\t    = copy_node (TYPE_MIN_VALUE (TYPE_DOMAIN (constructor_type)));\n+\t}\n+      else\n+\tconstructor_index = copy_node (integer_zero_node);\n+      constructor_unfilled_index = copy_node (constructor_index);\n     }\n   else\n     {"}]}