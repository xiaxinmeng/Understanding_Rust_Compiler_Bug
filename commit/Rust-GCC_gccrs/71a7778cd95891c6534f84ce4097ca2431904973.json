{"sha": "71a7778cd95891c6534f84ce4097ca2431904973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhNzc3OGNkOTU4OTFjNjUzNGY4NGNlNDA5N2NhMjQzMTkwNDk3Mw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-03-30T19:35:14Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-03-30T19:35:14Z"}, "message": "re PR fortran/22571 (Reject derived types for dummy arguments declared in the subroutine unless they are SEQUENCE)\n\n2009-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/22571\n\tPR fortran/26227\n\tPR fortran/24886\n\t* symbol.c : Add gfc_global_ns_list.\n\t* decl.c (add_global_entry): Set the namespace ('ns') field.\n\t* gfortran.h : Add the resolved field to gfc_namespace. Add the\n\tnamespace ('ns') field to gfc_gsymbol.  Add flag_whole_file to\n\tgfc_option_t.  Add the prototype for gfc_free_dt_list.\n\t* lang.opt : Add the whole-file option.\n\t* invoke.texi : Document the whole-file option.\n\t* resolve.c (resolve_global_procedure): If the fwhole-file\n\toption is set, reorder gsymbols to ensure that translation is\n\tin the right order.  Resolve the gsymbol's namespace if that\n\thas not occurred and then check interfaces.\n\t(resolve_function): Move call to resolve_global_procedure.\n\t(resolve_call): The same.\n\t(resolve_codes): Store the current labels_obstack.\n\t(gfc_resolve) : Return if the namespace is already resolved.\n\ttrans-decl.c (gfc_get_extern_function_decl): If the whole_file\n\toption is selected, use the backend_decl of a gsymbol, if it is\n\tavailable.\n\tparse.c (add_global_procedure, add_global_program): If the flag\n\twhole-file is set, add the namespace to the gsymbol.\n\t(gfc_parse_file): On -fwhole-file, put procedure namespaces on\n\tthe global namespace list.  Rearrange to do resolution of all\n\tthe procedures in a file, followed by their translation.\n\t* options.c (gfc_init_options): Add -fwhole-file.\n\t(gfc_handle_option): The same.\n\n2009-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/22571\n\t* gfortran.dg/whole_file_1.f90: New test.\n\tPR fortran/26227\n\t* gfortran.dg/whole_file_2.f90: New test.\n\t* gfortran.dg/whole_file_3.f90: New test.\n\tPR fortran/24886\n\t* gfortran.dg/whole_file_4.f90: New test.\n\nFrom-SVN: r145314", "tree": {"sha": "3d04f401d942074656d07f10c4252bef4c56ac37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d04f401d942074656d07f10c4252bef4c56ac37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a7778cd95891c6534f84ce4097ca2431904973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a7778cd95891c6534f84ce4097ca2431904973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a7778cd95891c6534f84ce4097ca2431904973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a7778cd95891c6534f84ce4097ca2431904973/comments", "author": null, "committer": null, "parents": [{"sha": "5b0c0b2c05d84902395b6a21d82c2be2f6406812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0c0b2c05d84902395b6a21d82c2be2f6406812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0c0b2c05d84902395b6a21d82c2be2f6406812"}], "stats": {"total": 370, "additions": 357, "deletions": 13}, "files": [{"sha": "28764ec69ceb868adfa73a6adecfb89f928d3483", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -1,3 +1,34 @@\n+2009-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/22571\n+\tPR fortran/26227\n+\tPR fortran/24886\n+\t* symbol.c : Add gfc_global_ns_list.\n+\t* decl.c (add_global_entry): Set the namespace ('ns') field.\n+\t* gfortran.h : Add the resolved field to gfc_namespace. Add the\n+\tnamespace ('ns') field to gfc_gsymbol.  Add flag_whole_file to\n+\tgfc_option_t.  Add the prototype for gfc_free_dt_list.\n+\t* lang.opt : Add the whole-file option.\n+\t* invoke.texi : Document the whole-file option.\n+\t* resolve.c (resolve_global_procedure): If the fwhole-file\n+\toption is set, reorder gsymbols to ensure that translation is\n+\tin the right order.  Resolve the gsymbol's namespace if that\n+\thas not occurred and then check interfaces.\n+\t(resolve_function): Move call to resolve_global_procedure.\n+\t(resolve_call): The same.\n+\t(resolve_codes): Store the current labels_obstack.\n+\t(gfc_resolve) : Return if the namespace is already resolved.\n+\ttrans-decl.c (gfc_get_extern_function_decl): If the whole_file\n+\toption is selected, use the backend_decl of a gsymbol, if it is\n+\tavailable.\n+\tparse.c (add_global_procedure, add_global_program): If the flag\n+\twhole-file is set, add the namespace to the gsymbol.\n+\t(gfc_parse_file): On -fwhole-file, put procedure namespaces on\n+\tthe global namespace list.  Rearrange to do resolution of all\n+\tthe procedures in a file, followed by their translation.\n+\t* options.c (gfc_init_options): Add -fwhole-file.\n+\t(gfc_handle_option): The same.\n+\n 2009-03-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Define BUILT_IN_HUGE_VAL"}, {"sha": "1e83d21bbe028eeea2f9c6679e478a556e2086e0", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -4530,6 +4530,7 @@ add_global_entry (const char *name, int sub)\n       s->type = type;\n       s->where = gfc_current_locus;\n       s->defined = 1;\n+      s->ns = gfc_current_ns;\n       return true;\n     }\n   return false;"}, {"sha": "7ea9aa7b2430a6992c5aff0af36962db6fa28349", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -1306,10 +1306,14 @@ typedef struct gfc_namespace\n \n   /* Set to 1 if namespace is an interface body with \"IMPORT\" used.  */\n   int has_import_set;\n+\n+  /* Set to 1 if resolved has been called for this namespace.  */\n+  int resolved;\n }\n gfc_namespace;\n \n extern gfc_namespace *gfc_current_ns;\n+extern gfc_namespace *gfc_global_ns_list;\n \n /* Global symbols are symbols of global scope. Currently we only use\n    this to detect collisions already when parsing.\n@@ -1328,6 +1332,7 @@ typedef struct gfc_gsymbol\n \n   int defined, used;\n   locus where;\n+  gfc_namespace *ns;\n }\n gfc_gsymbol;\n \n@@ -2027,6 +2032,7 @@ typedef struct\n   int flag_init_character;\n   char flag_init_character_value;\n   int flag_align_commons;\n+  int flag_whole_file;\n \n   int fpe;\n   int rtcheck;\n@@ -2354,6 +2360,8 @@ void gfc_traverse_user_op (gfc_namespace *, void (*)(gfc_user_op *));\n void gfc_save_all (gfc_namespace *);\n \n void gfc_symbol_state (void);\n+void gfc_free_dt_list (void);\n+\n \n gfc_gsymbol *gfc_get_gsymbol (const char *);\n gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);"}, {"sha": "e49297d3aaa0aa7bc8534935f878b1bd2f04d864", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -164,7 +164,7 @@ and warnings}.\n @item Code Generation Options\n @xref{Code Gen Options,,Options for code generation conventions}.\n @gccoptlist{-fno-automatic  -ff2c  -fno-underscoring @gol\n--fsecond-underscore @gol\n+-fwhole-file -fsecond-underscore @gol\n -fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n -fcheck=@var{<all|bounds|array-temps>}\n -fmax-stack-var-size=@var{n} @gol\n@@ -1158,6 +1158,19 @@ in the source, even if the names as seen by the linker are mangled to\n prevent accidental linking between procedures with incompatible\n interfaces.\n \n+@item -fwhole-file\n+@opindex @code{fwhole-file}\n+By default, GNU Fortran parses, resolves and translates each procedure\n+in a file separately.  Using this option modifies this such that the\n+whole file is parsed and placed in a single front-end tree.  During\n+resolution, in addition to all the usual checks and fixups, references\n+to external procedures that are in the same file effect resolution of\n+that procedure, if not already done, and a check of the interfaces. The\n+dependences are resolved by changing the order in which the file is\n+translated into the backend tree.  Thus, a procedure that is referenced\n+is translated before the reference and the duplication of backend tree\n+declarations eliminated.\n+\n @item -fsecond-underscore\n @opindex @code{fsecond-underscore}\n @cindex underscore"}, {"sha": "9da290c81fac6a92c2d452892e6998b862aa183e", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -360,6 +360,10 @@ funderscoring\n Fortran\n Append underscores to externally visible names\n \n+fwhole-file\n+Fortran\n+Compile all program units at once and check all interfaces\n+\n fworking-directory\n Fortran\n ; Documented in C"}, {"sha": "b45696ddf356a8d87d393314e0993f7bd087f1be", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -93,6 +93,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.flag_default_real = 0;\n   gfc_option.flag_dollar_ok = 0;\n   gfc_option.flag_underscoring = 1;\n+  gfc_option.flag_whole_file = 0;\n   gfc_option.flag_f2c = 0;\n   gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;\n@@ -673,6 +674,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_underscoring = value;\n       break;\n \n+    case OPT_fwhole_file:\n+      gfc_option.flag_whole_file = 1;\n+      break;\n+\n     case OPT_fsecond_underscore:\n       gfc_option.flag_second_underscore = value;\n       break;"}, {"sha": "19251984c1d2c65df037f3cb236d04c9968b4fe5", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -3715,6 +3715,7 @@ add_global_procedure (int sub)\n       s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n       s->where = gfc_current_locus;\n       s->defined = 1;\n+      s->ns = gfc_current_ns;\n     }\n }\n \n@@ -3737,6 +3738,7 @@ add_global_program (void)\n       s->type = GSYM_PROGRAM;\n       s->where = gfc_current_locus;\n       s->defined = 1;\n+      s->ns = gfc_current_ns;\n     }\n }\n \n@@ -3750,6 +3752,7 @@ gfc_parse_file (void)\n   gfc_state_data top, s;\n   gfc_statement st;\n   locus prog_locus;\n+  gfc_namespace *next;\n \n   gfc_start_source_files ();\n \n@@ -3768,6 +3771,10 @@ gfc_parse_file (void)\n   if (setjmp (eof_buf))\n     return FAILURE;\t/* Come here on unexpected EOF */\n \n+  /* Prepare the global namespace that will contain the\n+     program units.  */\n+  gfc_global_ns_list = next = NULL;\n+\n   seen_program = 0;\n \n   /* Exit early for empty files.  */\n@@ -3794,20 +3801,26 @@ gfc_parse_file (void)\n       accept_statement (st);\n       add_global_program ();\n       parse_progunit (ST_NONE);\n+      if (gfc_option.flag_whole_file)\n+\tgoto prog_units;\n       break;\n \n     case ST_SUBROUTINE:\n       add_global_procedure (1);\n       push_state (&s, COMP_SUBROUTINE, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n+      if (gfc_option.flag_whole_file)\n+\tgoto prog_units;\n       break;\n \n     case ST_FUNCTION:\n       add_global_procedure (0);\n       push_state (&s, COMP_FUNCTION, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n+      if (gfc_option.flag_whole_file)\n+\tgoto prog_units;\n       break;\n \n     case ST_BLOCK_DATA:\n@@ -3834,9 +3847,12 @@ gfc_parse_file (void)\n       push_state (&s, COMP_PROGRAM, gfc_new_block);\n       main_program_symbol (gfc_current_ns, \"MAIN__\");\n       parse_progunit (st);\n+      if (gfc_option.flag_whole_file)\n+\tgoto prog_units;\n       break;\n     }\n \n+  /* Handle the non-program units.  */\n   gfc_current_ns->code = s.head;\n \n   gfc_resolve (gfc_current_ns);\n@@ -3862,7 +3878,56 @@ gfc_parse_file (void)\n   gfc_done_2 ();\n   goto loop;\n \n-done:\n+prog_units:\n+  /* The main program and non-contained procedures are put\n+     in the global namespace list, so that they can be processed\n+     later and all their interfaces resolved.  */\n+  gfc_current_ns->code = s.head;\n+  if (next)\n+    next->sibling = gfc_current_ns;\n+  else\n+    gfc_global_ns_list = gfc_current_ns;\n+\n+  next = gfc_current_ns;\n+\n+  pop_state ();\n+  goto loop;\n+\n+  done:\n+\n+  if (!gfc_option.flag_whole_file)\n+    goto termination;\n+\n+  /* Do the resolution.  */ \n+  gfc_current_ns = gfc_global_ns_list;\n+  for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n+    {\n+      gfc_current_locus = gfc_current_ns->proc_name->declared_at;\n+      gfc_resolve (gfc_current_ns);\n+    }\n+\n+  /* Do the parse tree dump.  */ \n+  gfc_current_ns = gfc_option.dump_parse_tree ? gfc_global_ns_list : NULL;\n+  for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n+    {\n+      gfc_dump_parse_tree (gfc_current_ns, stdout);\n+      fputs (\"-----------------------------------------\\n\\n\", stdout);\n+    }\n+\n+  gfc_current_ns = gfc_global_ns_list;\n+  gfc_get_errors (NULL, &errors);\n+\n+  /* Do the translation.  This could be in a different order to\n+     resolution if there are forward references in the file.  */\n+  for (; !errors && gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n+    {\n+      gfc_current_locus = gfc_current_ns->proc_name->declared_at;\n+      gfc_generate_code (gfc_current_ns);\n+    }\n+\n+termination:\n+  gfc_free_dt_list ();\n+\n   gfc_end_source_files ();\n   return SUCCESS;\n "}, {"sha": "81d5ed8b1d0bfeadd8d8499249bab4af77e28b2a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -1582,12 +1582,19 @@ find_noncopying_intrinsics (gfc_symbol *fnsym, gfc_actual_arglist *actual)\n    reference being resolved must correspond to the type of gsymbol.\n    Otherwise, the new symbol is equipped with the attributes of the\n    reference.  The corresponding code that is called in creating\n-   global entities is parse.c.  */\n+   global entities is parse.c.\n+\n+   In addition, for all but -std=legacy, the gsymbols are used to\n+   check the interfaces of external procedures from the same file.\n+   The namespace of the gsymbol is resolved and then, once this is\n+   done the interface is checked.  */\n \n static void\n-resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n+resolve_global_procedure (gfc_symbol *sym, locus *where,\n+\t\t\t  gfc_actual_arglist **actual, int sub)\n {\n   gfc_gsymbol * gsym;\n+  gfc_namespace *ns;\n   unsigned int type;\n \n   type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n@@ -1597,6 +1604,32 @@ resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n   if ((gsym->type != GSYM_UNKNOWN && gsym->type != type))\n     gfc_global_used (gsym, where);\n \n+  if (gfc_option.flag_whole_file\n+\t&& gsym->type != GSYM_UNKNOWN\n+\t&& gsym->ns\n+\t&& gsym->ns->proc_name\n+\t&& gsym->ns->proc_name->formal)\n+    {\n+      /* Make sure that translation for the gsymbol occurs before\n+\t the procedure currently being resolved.  */\n+      ns = gsym->ns->resolved ? NULL : gfc_global_ns_list;\n+      for (; ns && ns != gsym->ns; ns = ns->sibling)\n+\t{\n+\t  if (ns->sibling == gsym->ns)\n+\t    {\n+\t      ns->sibling = gsym->ns->sibling;\n+\t      gsym->ns->sibling = gfc_global_ns_list;\n+\t      gfc_global_ns_list = gsym->ns;\n+\t      break;\n+\t    }\n+\t}\n+\n+      if (!gsym->ns->resolved)\n+\tgfc_resolve (gsym->ns);\n+\n+      gfc_procedure_use (gsym->ns->proc_name, actual, where);\n+    }\n+\n   if (gsym->type == GSYM_UNKNOWN)\n     {\n       gsym->type = type;\n@@ -2310,10 +2343,6 @@ resolve_function (gfc_expr *expr)\n       return FAILURE;\n     }\n \n-  /* If the procedure is external, check for usage.  */\n-  if (sym && is_external_proc (sym))\n-    resolve_global_procedure (sym, &expr->where, 0);\n-\n   /* Switch off assumed size checking and do this again for certain kinds\n      of procedure, once the procedure itself is resolved.  */\n   need_full_assumed_size++;\n@@ -2342,6 +2371,11 @@ resolve_function (gfc_expr *expr)\n   /* Resume assumed_size checking.  */\n   need_full_assumed_size--;\n \n+  /* If the procedure is external, check for usage.  */\n+  if (sym && is_external_proc (sym))\n+    resolve_global_procedure (sym, &expr->where,\n+\t\t\t      &expr->value.function.actual, 0);\n+\n   if (sym && sym->ts.type == BT_CHARACTER\n       && sym->ts.cl\n       && sym->ts.cl->length == NULL\n@@ -2931,10 +2965,6 @@ resolve_call (gfc_code *c)\n \t}\n     }\n \n-  /* If external, check for usage.  */\n-  if (csym && is_external_proc (csym))\n-    resolve_global_procedure (csym, &c->loc, 1);\n-\n   /* Subroutines without the RECURSIVE attribution are not allowed to\n    * call themselves.  */\n   if (csym && is_illegal_recursion (csym, gfc_current_ns))\n@@ -2965,6 +2995,10 @@ resolve_call (gfc_code *c)\n   /* Resume assumed_size checking.  */\n   need_full_assumed_size--;\n \n+  /* If external, check for usage.  */\n+  if (csym && is_external_proc (csym))\n+    resolve_global_procedure (csym, &c->loc, &c->ext.actual, 1);\n+\n   t = SUCCESS;\n   if (c->resolved_sym == NULL)\n     {\n@@ -10559,6 +10593,7 @@ static void\n resolve_codes (gfc_namespace *ns)\n {\n   gfc_namespace *n;\n+  bitmap_obstack old_obstack;\n \n   for (n = ns->contained; n; n = n->sibling)\n     resolve_codes (n);\n@@ -10568,9 +10603,13 @@ resolve_codes (gfc_namespace *ns)\n   /* Set to an out of range value.  */\n   current_entry_id = -1;\n \n+  old_obstack = labels_obstack;\n   bitmap_obstack_initialize (&labels_obstack);\n+\n   resolve_code (ns->code, ns);\n+\n   bitmap_obstack_release (&labels_obstack);\n+  labels_obstack = old_obstack;\n }\n \n \n@@ -10585,10 +10624,14 @@ gfc_resolve (gfc_namespace *ns)\n {\n   gfc_namespace *old_ns;\n \n+  if (ns->resolved)\n+    return;\n+\n   old_ns = gfc_current_ns;\n \n   resolve_types (ns);\n   resolve_codes (ns);\n \n   gfc_current_ns = old_ns;\n+  ns->resolved = 1;\n }"}, {"sha": "788823503aa6b09851d27c0402babbc567e7af56", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -93,6 +93,7 @@ static int next_dummy_order = 1;\n \n \n gfc_namespace *gfc_current_ns;\n+gfc_namespace *gfc_global_ns_list;\n \n gfc_gsymbol *gfc_gsym_root = NULL;\n \n@@ -2938,7 +2939,7 @@ free_sym_tree (gfc_symtree *sym_tree)\n \n /* Free the derived type list.  */\n \n-static void\n+void\n gfc_free_dt_list (void)\n {\n   gfc_dt_list *dt, *n;"}, {"sha": "2442fd214d189cf18c13efece06d50285a1fcf69", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -4741,6 +4741,8 @@ get_array_charlen (gfc_expr *expr, gfc_se *se)\n \t{\n \t  get_array_charlen (expr->value.op.op2, se);\n \n+\t  gcc_assert (expr->value.op.op == INTRINSIC_CONCAT);\n+\n \t  /* Add the string lengths and assign them to the expression\n \t     string length backend declaration.  */\n \t  gfc_add_modify (&se->pre, expr->ts.cl->backend_decl,"}, {"sha": "774f42078da7d35fa82c1d80a7f8bdb6999cc43d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -1221,6 +1221,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   char s[GFC_MAX_SYMBOL_LEN + 23]; /* \"_gfortran_f2c_specific\" and '\\0'.  */\n   tree name;\n   tree mangled_name;\n+  gfc_gsymbol *gsym;\n \n   if (sym->backend_decl)\n     return sym->backend_decl;\n@@ -1233,6 +1234,41 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   if (sym->attr.proc_pointer)\n     return get_proc_pointer_decl (sym);\n \n+  /* See if this is an external procedure from the same file.  If so,\n+     return the backend_decl.  */\n+  gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->name);\n+\n+  if (gfc_option.flag_whole_file\n+\t&& !sym->backend_decl\n+\t&& gsym && gsym->ns\n+\t&& ((gsym->type == GSYM_SUBROUTINE) || (gsym->type == GSYM_FUNCTION))\n+\t&& gsym->ns->proc_name->backend_decl)\n+    {\n+      /* If the namespace has entries, the proc_name is the\n+\t entry master.  Find the entry and use its backend_decl.\n+\t otherwise, use the proc_name backend_decl.  */\n+      if (gsym->ns->entries)\n+\t{\n+\t  gfc_entry_list *entry = gsym->ns->entries;\n+\n+\t  for (; entry; entry = entry->next)\n+\t    {\n+\t      if (strcmp (gsym->name, entry->sym->name) == 0)\n+\t\t{\n+\t          sym->backend_decl = entry->sym->backend_decl;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  sym->backend_decl = gsym->ns->proc_name->backend_decl;\n+\t}\n+\n+      if (sym->backend_decl)\n+\treturn sym->backend_decl;\n+    }\n+\n   if (sym->attr.intrinsic)\n     {\n       /* Call the resolution function to get the actual name.  This is"}, {"sha": "daa454456aeaef99946802d1a79fd8c6e7a357f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -1,3 +1,13 @@\n+2009-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/22571\n+\t* gfortran.dg/whole_file_1.f90: New test.\n+\tPR fortran/26227\n+\t* gfortran.dg/whole_file_2.f90: New test.\n+\t* gfortran.dg/whole_file_3.f90: New test.\n+\tPR fortran/24886\n+\t* gfortran.dg/whole_file_4.f90: New test.\n+\n 2009-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/bind_c_usage_19.f90: New test."}, {"sha": "d7137eed0134afce937da565a124a6ba3e415292", "filename": "gcc/testsuite/gfortran.dg/whole_file_1.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do compile }\n+! { dg-options \"-fwhole-file\" }\n+! Tests the fix for PR22571 in which the derived types in a, b\n+! c and d were not detected to be different.  In e and f, they\n+! are the same because they are sequence types.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+subroutine a(p)\n+  type t\n+    integer :: t1\n+  end type\n+  type(t) :: p\n+  p%t1 = 42\n+end subroutine\n+\n+subroutine b\n+  type u\n+    integer :: u1\n+  end type\n+  type (u) :: q\n+  call a(q)  ! { dg-error \"Type mismatch\" }\n+  print *, q%u1\n+end subroutine\n+\n+subroutine c(p)\n+  type u\n+    integer :: u1\n+  end type\n+  type(u) :: p\n+  p%u1 = 42\n+end subroutine\n+\n+subroutine d\n+  type u\n+    integer :: u1\n+  end type\n+  type (u) :: q\n+  call c(q)  ! { dg-error \"Type mismatch\" }\n+  print *, q%u1\n+end subroutine\n+\n+subroutine e(p)\n+  type u\n+    sequence\n+    integer :: u1\n+  end type\n+  type(u) :: p\n+  p%u1 = 42\n+end subroutine\n+\n+subroutine f\n+  type u\n+    sequence\n+    integer :: u1\n+  end type\n+  type (u) :: q\n+  call e(q)  ! This is OK because the types are sequence.\n+  print *, q%u1\n+end subroutine"}, {"sha": "7f403522618f72a22de5a97a520a3f0ddacb9dd1", "filename": "gcc/testsuite/gfortran.dg/whole_file_2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fwhole-file\" }\n+! Tests the fix for PR26227 in which the interface mismatches\n+! below were not detected.\n+!\n+! Contributed by Andrew Pinski <pinskia@gcc.gnu.org>\n+!\n+function a(b)\n+REAL ::b\n+b = 2.0\n+a = 1.0\n+end function\n+\n+program gg\n+real :: h\n+character (5) :: chr = 'hello'\n+h = a(); ! { dg-error \"Missing actual argument\" }\n+call test ([chr]) ! { dg-error \"Rank mismatch\" }\n+end program gg\n+\n+subroutine test (a)\n+  character (5) :: a\n+  if (a .ne. 'hello') call abort\n+end subroutine test\n+"}, {"sha": "7ad762ccf976b66c870c1d4645d5646ecb5a9e4c", "filename": "gcc/testsuite/gfortran.dg/whole_file_3.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-fwhole-file\" }\n+! Tests the fix for PR26227 in which the interface mismatches\n+! below were not detected.\n+!\n+! Contributed by Andrew Pinski <pinskia@gcc.gnu.org>\n+!\n+      SUBROUTINE PHLOAD (READER,*)\n+      IMPLICIT NONE\n+      EXTERNAL         READER\n+      CALL READER (*1)\n+ 1    RETURN 1\n+      END SUBROUTINE\n+\n+      program test\n+      EXTERNAL R\n+      call PHLOAD (R, 1) ! { dg-error \"Missing alternate return spec\" }\n+      CALL PHLOAD (R, 2) ! { dg-error \"Missing alternate return spec\" }\n+      CALL PHLOAD (R, *999) ! This one is OK\n+ 999  continue\n+      END program test"}, {"sha": "671bc2db5d0f0f305c0bcb698b6d6900badd3053", "filename": "gcc/testsuite/gfortran.dg/whole_file_4.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a7778cd95891c6534f84ce4097ca2431904973/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_4.f90?ref=71a7778cd95891c6534f84ce4097ca2431904973", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fwhole-file -std=legacy\" }\n+! Tests the fix for PR24886 in which the mismatch between the\n+! character lengths of the actual and formal arguments of\n+! 'foo' was not detected.\n+!\n+! Contributed by Uttam Pawar <uttamp@us.ibm.com>\n+!\n+        subroutine foo(y)\n+           character(len=20) :: y\n+           y = 'hello world'\n+        end\n+\n+        program test\n+           character(len=10) :: x\n+           call foo(x) ! { dg-warning \"actual argument shorter\" }\n+           write(*,*) 'X=',x\n+           pause\n+        end"}]}