{"sha": "5e617be801a07a59e464005f9e1bac1959b6cf56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU2MTdiZTgwMWEwN2E1OWU0NjQwMDVmOWUxYmFjMTk1OWI2Y2Y1Ng==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-05-04T12:01:21Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-05-04T12:01:21Z"}, "message": "calls.c (emit_library_call_value_1): Invoke promote_function_mode hook on libcall arguments.\n\n2011-05-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* calls.c (emit_library_call_value_1): Invoke\n\tpromote_function_mode hook on libcall arguments.\n\t* explow.c (promote_function_mode, promote_mode): Handle TYPE\n\targument being NULL.\n\t* targhooks.c (default_promote_function_mode): Lisewise.\n\t* config/s390/s390.c (s390_promote_function_mode): Likewise.\n\t* config/sparc/sparc.c (sparc_promote_function_mode): Likewise.\n\n\t* doc/tm.texi: Document that TYPE argument might be NULL.\n\nFrom-SVN: r173371", "tree": {"sha": "8900c45044a2c5fcbab68008ebff0cf2f9c08fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8900c45044a2c5fcbab68008ebff0cf2f9c08fa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e617be801a07a59e464005f9e1bac1959b6cf56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e617be801a07a59e464005f9e1bac1959b6cf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e617be801a07a59e464005f9e1bac1959b6cf56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e617be801a07a59e464005f9e1bac1959b6cf56/comments", "author": null, "committer": null, "parents": [{"sha": "23ee028b82aaf3615dca2639a3443fcb216846cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ee028b82aaf3615dca2639a3443fcb216846cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ee028b82aaf3615dca2639a3443fcb216846cc"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "1f6d535c81e52abb5ec0c8056b03a441aff81fc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -1,3 +1,15 @@\n+2011-05-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* calls.c (emit_library_call_value_1): Invoke\n+\tpromote_function_mode hook on libcall arguments.\n+\t* explow.c (promote_function_mode, promote_mode): Handle TYPE\n+\targument being NULL.\n+\t* targhooks.c (default_promote_function_mode): Lisewise.\n+\t* config/s390/s390.c (s390_promote_function_mode): Likewise.\n+\t* config/sparc/sparc.c (sparc_promote_function_mode): Likewise.\n+\n+\t* doc/tm.texi: Document that TYPE argument might be NULL.\n+\n 2011-05-04  Stuart Henderson  <shenders@gcc.gnu.org>\n \n \t* config/bfin/bfin.c (bfin_cpus): Update silicon revisions."}, {"sha": "44a16ff63ff1d0c3cb4d01a3ec453f82e76f410f", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -3477,6 +3477,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n     {\n       rtx val = va_arg (p, rtx);\n       enum machine_mode mode = (enum machine_mode) va_arg (p, int);\n+      int unsigned_p = 0;\n \n       /* We cannot convert the arg value to the mode the library wants here;\n \t must do it earlier where we know the signedness of the arg.  */\n@@ -3524,9 +3525,9 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t  val = force_operand (XEXP (slot, 0), NULL_RTX);\n \t}\n \n-      argvec[count].value = val;\n+      mode = promote_function_mode (NULL_TREE, mode, &unsigned_p, NULL_TREE, 0);\n       argvec[count].mode = mode;\n-\n+      argvec[count].value = convert_modes (mode, GET_MODE (val), val, unsigned_p);\n       argvec[count].reg = targetm.calls.function_arg (&args_so_far, mode,\n \t\t\t\t\t\t      NULL_TREE, true);\n "}, {"sha": "932ad31cfb7c8813ec11626a40364fe9aef9545f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -8742,7 +8742,7 @@ s390_promote_function_mode (const_tree type, enum machine_mode mode,\n   if (INTEGRAL_MODE_P (mode)\n       && GET_MODE_SIZE (mode) < UNITS_PER_LONG)\n     {\n-      if (POINTER_TYPE_P (type))\n+      if (type != NULL_TREE && POINTER_TYPE_P (type))\n \t*punsignedp = POINTERS_EXTEND_UNSIGNED;\n       return Pmode;\n     }"}, {"sha": "a3bab331910b6811f2326de0b982655c83e37014", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -4983,13 +4983,13 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n /* Handle promotion of pointer and integer arguments.  */\n \n static enum machine_mode\n-sparc_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+sparc_promote_function_mode (const_tree type,\n                              enum machine_mode mode,\n-                             int *punsignedp ATTRIBUTE_UNUSED,\n+                             int *punsignedp,\n                              const_tree fntype ATTRIBUTE_UNUSED,\n                              int for_return ATTRIBUTE_UNUSED)\n {\n-  if (POINTER_TYPE_P (type))\n+  if (type != NULL_TREE && POINTER_TYPE_P (type))\n     {\n       *punsignedp = POINTERS_EXTEND_UNSIGNED;\n       return Pmode;"}, {"sha": "874a2237829f34572b06d3106bf52815035abb5a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -962,6 +962,8 @@ which an incoming parameter is copied, or the outgoing result is computed;\n then the hook should return the same mode as @code{promote_mode}, though\n the signedness may be different.\n \n+@var{type} can be NULL when promoting function arguments of libcalls.\n+\n The default is to not promote arguments and return values.  You can\n also define the hook to @code{default_promote_function_mode_always_promote}\n if you would like to apply the same rules given by @code{PROMOTE_MODE}."}, {"sha": "be84e4e84fa04b10f9734f77ceb74be2b90df408", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -952,6 +952,8 @@ which an incoming parameter is copied, or the outgoing result is computed;\n then the hook should return the same mode as @code{promote_mode}, though\n the signedness may be different.\n \n+@var{type} can be NULL when promoting function arguments of libcalls.\n+\n The default is to not promote arguments and return values.  You can\n also define the hook to @code{default_promote_function_mode_always_promote}\n if you would like to apply the same rules given by @code{PROMOTE_MODE}."}, {"sha": "da04505a7e8eb52924b16e46fc551715d5f4837d", "filename": "gcc/explow.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -771,6 +771,17 @@ enum machine_mode\n promote_function_mode (const_tree type, enum machine_mode mode, int *punsignedp,\n \t\t       const_tree funtype, int for_return)\n {\n+  /* Called without a type node for a libcall.  */\n+  if (type == NULL_TREE)\n+    {\n+      if (INTEGRAL_MODE_P (mode))\n+\treturn targetm.calls.promote_function_mode (NULL_TREE, mode,\n+\t\t\t\t\t\t    punsignedp, funtype,\n+\t\t\t\t\t\t    for_return);\n+      else\n+\treturn mode;\n+    }\n+\n   switch (TREE_CODE (type))\n     {\n     case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n@@ -791,6 +802,12 @@ enum machine_mode\n promote_mode (const_tree type ATTRIBUTE_UNUSED, enum machine_mode mode,\n \t      int *punsignedp ATTRIBUTE_UNUSED)\n {\n+  /* For libcalls this is invoked without TYPE from the backends\n+     TARGET_PROMOTE_FUNCTION_MODE hooks.  Don't do anything in that\n+     case.  */\n+  if (type == NULL_TREE)\n+    return mode;\n+\n   /* FIXME: this is the same logic that was there until GCC 4.4, but we\n      probably want to test POINTERS_EXTEND_UNSIGNED even if PROMOTE_MODE\n      is not defined.  The affected targets are M32C, S390, SPARC.  */"}, {"sha": "48d19a05416b0c86b28a66d60919f71c8c5286da", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e617be801a07a59e464005f9e1bac1959b6cf56/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=5e617be801a07a59e464005f9e1bac1959b6cf56", "patch": "@@ -124,7 +124,7 @@ default_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n \t\t\t       const_tree funtype ATTRIBUTE_UNUSED,\n \t\t\t       int for_return ATTRIBUTE_UNUSED)\n {\n-  if (for_return == 2)\n+  if (type != NULL_TREE && for_return == 2)\n     return promote_mode (type, mode, punsignedp);\n   return mode;\n }"}]}