{"sha": "30972225f679c65b2cc7a48650f7f16ccad45770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5NzIyMjVmNjc5YzY1YjJjYzdhNDg2NTBmN2YxNmNjYWQ0NTc3MA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-06-02T12:03:22Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-06-02T12:03:22Z"}, "message": "2097.md (z10_fhex): Remove insn reservation.\n\n2010-06-02  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/2097.md (z10_fhex): Remove insn reservation.\n\t* config/s390/s390.md (UNSPEC_COPYSIGN): Remove unused constant.\n\t(*mov<mode>_64 TD_TF, *mov<mode>_31 TD_TF, *mov<mode>_64dfp DD_DF,\n\t*mov<mode>_64 DD_DF, *mov<mode>_31, mov<mode>): Remove load zero\n\tinstruction.\n\t* config/s390/s390.c: Don't accept fp zeros as valid constants\n\tanymore.\n\nFrom-SVN: r160151", "tree": {"sha": "e5b0bb352b8f84c8c7ef27d32037c06822eac077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b0bb352b8f84c8c7ef27d32037c06822eac077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30972225f679c65b2cc7a48650f7f16ccad45770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30972225f679c65b2cc7a48650f7f16ccad45770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30972225f679c65b2cc7a48650f7f16ccad45770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30972225f679c65b2cc7a48650f7f16ccad45770/comments", "author": null, "committer": null, "parents": [{"sha": "d4fb676f6ffed9b9b6230b54497cf0e266175b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fb676f6ffed9b9b6230b54497cf0e266175b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fb676f6ffed9b9b6230b54497cf0e266175b6a"}], "stats": {"total": 117, "additions": 38, "deletions": 79}, "files": [{"sha": "b709d68217bf64651f90492986a09743779dd972", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30972225f679c65b2cc7a48650f7f16ccad45770", "patch": "@@ -1,3 +1,13 @@\n+2010-06-02  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/2097.md (z10_fhex): Remove insn reservation.\n+\t* config/s390/s390.md (UNSPEC_COPYSIGN): Remove unused constant.\n+\t(*mov<mode>_64 TD_TF, *mov<mode>_31 TD_TF, *mov<mode>_64dfp DD_DF,\n+\t*mov<mode>_64 DD_DF, *mov<mode>_31, mov<mode>): Remove load zero\n+\tinstruction.\n+\t* config/s390/s390.c: Don't accept fp zeros as valid constants\n+\tanymore.\n+\n 2010-06-02  Jan Hubicka  <jh@suse.cz>\n \n \t* bitmap.c (bitmap_descriptor): Add search_iter."}, {"sha": "fa61038e763b7e6b554416152beec020a0dc4485", "filename": "gcc/config/s390/2097.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2F2097.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2F2097.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2097.md?ref=30972225f679c65b2cc7a48650f7f16ccad45770", "patch": "@@ -466,15 +466,6 @@\n        (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n   \"z10_e1_BOTH, z10_Gate_FP\")\n \n-; LOAD ZERO produces a hex value but we need bin. Using the stage 7\n-; bypass causes an exception for format conversion which is very\n-; expensive. So, make sure subsequent instructions only get the zero\n-; in the normal way.\n-(define_insn_reservation \"z10_fhex\" 12\n-  (and (eq_attr \"cpu\" \"z10\")\n-       (eq_attr \"type\" \"fhex\"))\n-  \"z10_e1_BOTH, z10_Gate_FP\")\n-\n (define_insn_reservation \"z10_fsimpsf\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"fsimpsf,fmulsf\"))"}, {"sha": "fb6913f2d603158fe85c20262148118abb83a05b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=30972225f679c65b2cc7a48650f7f16ccad45770", "patch": "@@ -2809,11 +2809,6 @@ legitimate_reload_constant_p (rtx op)\n       && larl_operand (op, VOIDmode))\n     return true;\n \n-  /* Accept lzXX operands.  */\n-  if (GET_CODE (op) == CONST_DOUBLE\n-      && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, 'G', \"G\"))\n-    return true;\n-\n   /* Accept double-word operands that can be split.  */\n   if (GET_CODE (op) == CONST_INT\n       && trunc_int_for_mode (INTVAL (op), word_mode) != INTVAL (op))"}, {"sha": "df7e3dd71e2bb5282e73ac6e5938a4784eab6437", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30972225f679c65b2cc7a48650f7f16ccad45770/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=30972225f679c65b2cc7a48650f7f16ccad45770", "patch": "@@ -105,11 +105,8 @@\n    (UNSPEC_SP_SET \t\t700)\n    (UNSPEC_SP_TEST\t\t701)\n \n-   ; Copy sign instructions\n-   (UNSPEC_COPYSIGN             800)\n-\n    ; Test Data Class (TDC)\n-   (UNSPEC_TDC_INSN\t\t900)\n+   (UNSPEC_TDC_INSN\t\t800)\n  ])\n \n ;;\n@@ -1931,32 +1928,30 @@\n   \"\")\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o, d,QS,  d,o\")\n-        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f,QS, d,dRT,d\"))]\n+  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,o, d,QS,  d,o\")\n+        (match_operand:TD_TF 1 \"general_operand\"      \" f,o,f,QS, d,dRT,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n-   lzxr\\t%0\n    lxr\\t%0,%1\n    #\n    #\n    lmg\\t%0,%N0,%S1\n    stmg\\t%1,%N1,%S0\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RRE,*,*,RSY,RSY,*,*\")\n-   (set_attr \"type\"    \"fhex,fsimptf,*,*,lm,stm,*,*\")])\n+  [(set_attr \"op_type\" \"RRE,*,*,RSY,RSY,*,*\")\n+   (set_attr \"type\"    \"fsimptf,*,*,lm,stm,*,*\")])\n \n (define_insn \"*mov<mode>_31\"\n-  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o\")\n-        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f\"))]\n+  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,o\")\n+        (match_operand:TD_TF 1 \"general_operand\"      \" f,o,f\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n-   lzxr\\t%0\n    lxr\\t%0,%1\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RRE,*,*\")\n-   (set_attr \"type\"    \"fhex,fsimptf,*,*\")])\n+  [(set_attr \"op_type\" \"RRE,*,*\")\n+   (set_attr \"type\"    \"fsimptf,*,*\")])\n \n ; TFmode in GPRs splitters\n \n@@ -2047,12 +2042,11 @@\n \n (define_insn \"*mov<mode>_64dfp\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,d,f,f,R,T,d, d,RT\")\n+\t\t\t       \"=f,f,d,f,f,R,T,d, d,RT\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-\t\t\t       \" G,f,d,f,R,T,f,f,d,RT, d\"))]\n+\t\t\t       \" f,d,f,R,T,f,f,d,RT, d\"))]\n   \"TARGET_DFP\"\n   \"@\n-   lzdr\\t%0\n    ldr\\t%0,%1\n    ldgr\\t%0,%1\n    lgdr\\t%0,%1\n@@ -2063,28 +2057,17 @@\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"fhex,floaddf,floaddf,floaddf,floaddf,floaddf,\n+  [(set_attr \"op_type\" \"RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n+   (set_attr \"type\" \"floaddf,floaddf,floaddf,floaddf,floaddf,\n                      fstoredf,fstoredf,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        z10_fr_E1,\n-                        z10_fwd_A3,\n-                        z10_rec\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_rec\")\n ])\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d, d,RT\")\n-        (match_operand:DD_DF 1 \"general_operand\"       \"G,f,R,T,f,f,d,RT, d\"))]\n+  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d, d,RT\")\n+        (match_operand:DD_DF 1 \"general_operand\"       \"f,R,T,f,f,d,RT, d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n-   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -2093,27 +2076,18 @@\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n+  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n+   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        z10_fr_E1,\n-                        z10_fwd_A3,\n-                        z10_rec\")])\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_rec\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-                               \"=f,f,f,f,R,T,d,d,Q,S,   d,o\")\n+                               \"=f,f,f,R,T,d,d,Q,S,   d,o\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-                               \" G,f,R,T,f,f,Q,S,d,d,dPRT,d\"))]\n+                               \" f,R,T,f,f,Q,S,d,d,dPRT,d\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n-   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -2125,8 +2099,8 @@\n    stmy\\t%1,%N1,%S0\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n-   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n+  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n+   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*\")])\n \n (define_split\n@@ -2176,12 +2150,11 @@\n \n (define_insn \"mov<mode>\"\n   [(set (match_operand:SD_SF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,f,R,T,d,d,d,R,T\")\n+\t\t\t       \"=f,f,f,R,T,d,d,d,R,T\")\n         (match_operand:SD_SF 1 \"general_operand\"\n-\t\t\t       \" G,f,R,T,f,f,d,R,T,d,d\"))]\n+\t\t\t       \" f,R,T,f,f,d,R,T,d,d\"))]\n   \"\"\n   \"@\n-   lzer\\t%0\n    ler\\t%0,%1\n    le\\t%0,%1\n    ley\\t%0,%1\n@@ -2192,20 +2165,10 @@\n    ly\\t%0,%1\n    st\\t%1,%0\n    sty\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY\")\n-   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n+  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY\")\n+   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lr,load,load,store,store\")\n-   (set_attr \"z10prop\" \"*,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        *,\n-                        z10_fr_E1,\n-                        z10_fwd_A3,\n-                        z10_fwd_A3,\n-                        z10_rec,\n-                        z10_rec\")])\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")])\n \n ;\n ; movcc instruction pattern"}]}