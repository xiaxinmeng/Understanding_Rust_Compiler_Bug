{"sha": "c252db2030a54b9cd3095405704dc68c3029a461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1MmRiMjAzMGE1NGI5Y2QzMDk1NDA1NzA0ZGM2OGMzMDI5YTQ2MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-12T16:30:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-12T16:30:53Z"}, "message": "longlong.h (sub_ddmmss): New for ia64.\n\ngcc/\n\n2009-02-12  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* longlong.h (sub_ddmmss): New for ia64. Ported from GMP 4.2.\n\t(umul_ppmm): Likewise.\n\t(count_leading_zeros): Likewise.\n\t(count_trailing_zeros): Likewise.\n\t(UMUL_TIME): Likewise.\n\n2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc: Add ia64/t-fprules-softfp soft-fp/t-softfp to\n\ttmake_file for ia64*-*-linux*.\n\n\t* config/ia64/ia64.c (ia64_soft_fp_init_libfuncs): New.\n\t(ia64_expand_compare): Use HPUX library for TFmode only for\n\tHPUX.\n\t(ia64_builtins): Add IA64_BUILTIN_COPYSIGNQ, IA64_BUILTIN_FABSQ\n\tand IA64_BUILTIN_INFQ.\n\t(ia64_init_builtins): Initialize __builtin_infq,\n\t__builtin_fabsq and __builtin_copysignq if not HPUX.\n\t(ia64_expand_builtin): Handle IA64_BUILTIN_COPYSIGNQ,\n\tIA64_BUILTIN_FABSQ and IA64_BUILTIN_INFQ.\n\n\t* config/ia64/lib1funcs.asm (__divtf3): Define only if\n\tSHARED is defined.\n\t(__fixtfti): Likewise.\n\t(__fixunstfti): Likewise.\n\t(__floattitf): Likewise.\n\n\t* config/ia64/libgcc-glibc.ver: New.\n\t* config/ia64/t-fprules-softfp: Likewise.\n\t* config/ia64/sfp-machine.h: Likewise.\n\n\t* config/ia64/linux.h (LIBGCC2_HAS_TF_MODE): New.\n\t(LIBGCC2_TF_CEXT): Likewise.\n\t(TF_SIZE): Likewise.\n\t(TARGET_INIT_LIBFUNCS): Likewise.\n\n\t* config/ia64/t-glibc: Add $(srcdir)/config/ia64/libgcc-glibc.ver\n\tto SHLIB_MAPFILES.\n\nlibgcc/\n\n2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.host: Add ia64/t-fprules-softfp ia64/t-softfp-compat\n\tto tmake_file for ia64*-*-linux*.\n\n\t* Makefile.in (gen-hide-list): Ignore .*_compat and .*@.*.\n\n\t* config/ia64/__divxf3.asm: New.\n\t* config/ia64/_fixtfdi.asm: Likewise.\n\t* config/ia64/_fixunstfdi.asm: Likewise.\n\t* config/ia64/_floatditf.asm: Likewise.\n\t* config/ia64/t-fprules-softfp: Likewise.\n\t* config/ia64/t-softfp-compat: Likewise.\n\t* config/ia64/tf-signs.c: Likewise.\n\nFrom-SVN: r144130", "tree": {"sha": "a9970b42c2ad08d6a0e408e9b647d6568ed8bd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9970b42c2ad08d6a0e408e9b647d6568ed8bd41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c252db2030a54b9cd3095405704dc68c3029a461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c252db2030a54b9cd3095405704dc68c3029a461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c252db2030a54b9cd3095405704dc68c3029a461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c252db2030a54b9cd3095405704dc68c3029a461/comments", "author": null, "committer": null, "parents": [{"sha": "0ce6dcfa37083451e9966bbc8db4bfe1e496e458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce6dcfa37083451e9966bbc8db4bfe1e496e458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce6dcfa37083451e9966bbc8db4bfe1e496e458"}], "stats": {"total": 516, "additions": 508, "deletions": 8}, "files": [{"sha": "077681c99bf8603f210e6046abdcc4d30af5d44a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -1,3 +1,44 @@\n+2009-02-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* longlong.h (sub_ddmmss): New for ia64. Ported from GMP 4.2.\n+\t(umul_ppmm): Likewise.\n+\t(count_leading_zeros): Likewise.\n+\t(count_trailing_zeros): Likewise.\n+\t(UMUL_TIME): Likewise.\n+\n+2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc: Add ia64/t-fprules-softfp soft-fp/t-softfp to\n+\ttmake_file for ia64*-*-linux*.\n+\n+\t* config/ia64/ia64.c (ia64_soft_fp_init_libfuncs): New.\n+\t(ia64_expand_compare): Use HPUX library for TFmode only for\n+\tHPUX.\n+\t(ia64_builtins): Add IA64_BUILTIN_COPYSIGNQ, IA64_BUILTIN_FABSQ\n+\tand IA64_BUILTIN_INFQ.\n+\t(ia64_init_builtins): Initialize __builtin_infq,\n+\t__builtin_fabsq and __builtin_copysignq if not HPUX.\n+\t(ia64_expand_builtin): Handle IA64_BUILTIN_COPYSIGNQ,\n+\tIA64_BUILTIN_FABSQ and IA64_BUILTIN_INFQ.\n+\n+\t* config/ia64/lib1funcs.asm (__divtf3): Define only if\n+\tSHARED is defined.\n+\t(__fixtfti): Likewise.\n+\t(__fixunstfti): Likewise.\n+\t(__floattitf): Likewise.\n+\n+\t* config/ia64/libgcc-glibc.ver: New.\n+\t* config/ia64/t-fprules-softfp: Likewise.\n+\t* config/ia64/sfp-machine.h: Likewise.\n+\n+\t* config/ia64/linux.h (LIBGCC2_HAS_TF_MODE): New.\n+\t(LIBGCC2_TF_CEXT): Likewise.\n+\t(TF_SIZE): Likewise.\n+\t(TARGET_INIT_LIBFUNCS): Likewise.\n+\n+\t* config/ia64/t-glibc: Add $(srcdir)/config/ia64/libgcc-glibc.ver\n+\tto SHLIB_MAPFILES.\n+\n 2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (construct_container): Rewrite processing"}, {"sha": "99741c30d9a66af84a5ec33bd9b7722fea0b1daf", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -3058,6 +3058,9 @@ case ${target} in\n \ti[34567]86-*-linux* | x86_64-*-linux*)\n \t\ttmake_file=\"${tmake_file} i386/t-fprules-softfp soft-fp/t-softfp i386/t-linux\"\n \t\t;;\n+\tia64*-*-linux*)\n+\t\ttmake_file=\"${tmake_file} ia64/t-fprules-softfp soft-fp/t-softfp\"\n+\t\t;;\n \n \tmips*-*-*)\n \t\tif test x$gnu_ld = xyes"}, {"sha": "6c28801500abfc7445412526d366f8d1847a9ab9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -279,6 +279,8 @@ static void ia64_sysv4_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n static void ia64_vms_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n+static void ia64_soft_fp_init_libfuncs (void)\n+     ATTRIBUTE_UNUSED;\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static tree ia64_handle_version_id_attribute (tree *, tree, tree, int, bool *);\n@@ -1513,7 +1515,7 @@ ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n   /* HPUX TFmode compare requires a library call to _U_Qfcmp, which takes a\n      magic number as its third argument, that indicates what to do.\n      The return value is an integer to be compared against zero.  */\n-  else if (GET_MODE (op0) == TFmode)\n+  else if (TARGET_HPUX && GET_MODE (op0) == TFmode)\n     {\n       enum qfcmp_magic {\n \tQCMP_INV = 1,\t/* Raise FP_INVALID on SNaN as a side effect.  */\n@@ -9751,7 +9753,10 @@ process_for_unwind_directive (FILE *asm_out_file, rtx insn)\n enum ia64_builtins\n {\n   IA64_BUILTIN_BSP,\n-  IA64_BUILTIN_FLUSHRS\n+  IA64_BUILTIN_COPYSIGNQ,\n+  IA64_BUILTIN_FABSQ,\n+  IA64_BUILTIN_FLUSHRS,\n+  IA64_BUILTIN_INFQ\n };\n \n void\n@@ -9775,10 +9780,35 @@ ia64_init_builtins (void)\n   /* The __float128 type.  */\n   if (!TARGET_HPUX)\n     {\n+      tree ftype, decl;\n       tree float128_type = make_node (REAL_TYPE);\n+\n       TYPE_PRECISION (float128_type) = 128;\n       layout_type (float128_type);\n       (*lang_hooks.types.register_builtin_type) (float128_type, \"__float128\");\n+\n+      /* TFmode support builtins.  */\n+      ftype = build_function_type (float128_type, void_list_node);\n+      add_builtin_function (\"__builtin_infq\", ftype,\n+\t\t\t    IA64_BUILTIN_INFQ, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+\n+      ftype = build_function_type_list (float128_type,\n+\t\t\t\t\tfloat128_type,\n+\t\t\t\t\tNULL_TREE);\n+      decl = add_builtin_function (\"__builtin_fabsq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_FABSQ, BUILT_IN_MD,\n+\t\t\t\t   \"__fabstf2\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n+\n+      ftype = build_function_type_list (float128_type,\n+\t\t\t\t\tfloat128_type,\n+\t\t\t\t\tfloat128_type,\n+\t\t\t\t\tNULL_TREE);\n+      decl = add_builtin_function (\"__builtin_copysignq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_COPYSIGNQ, BUILT_IN_MD,\n+\t\t\t\t   \"__copysigntf3\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n     }\n   else\n     /* Under HPUX, this is a synonym for \"long double\".  */\n@@ -9836,8 +9866,29 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (gen_flushrs ());\n       return const0_rtx;\n \n+    case IA64_BUILTIN_INFQ:\n+      {\n+\tREAL_VALUE_TYPE inf;\n+\trtx tmp;\n+\n+\treal_inf (&inf);\n+\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, mode);\n+\n+\ttmp = validize_mem (force_const_mem (mode, tmp));\n+\n+\tif (target == 0)\n+\t  target = gen_reg_rtx (mode);\n+\n+\temit_move_insn (target, tmp);\n+\treturn target;\n+      }\n+\n+    case IA64_BUILTIN_FABSQ:\n+    case IA64_BUILTIN_COPYSIGNQ:\n+      return expand_call (exp, target, ignore);\n+\n     default:\n-      break;\n+      gcc_unreachable ();\n     }\n \n   return NULL_RTX;\n@@ -10000,6 +10051,13 @@ ia64_sysv4_init_libfuncs (void)\n   /* We leave out _U_Qfmin, _U_Qfmax and _U_Qfabs since soft-fp in\n      glibc doesn't have them.  */\n }\n+\n+/* Use soft-fp.  */\n+\n+static void\n+ia64_soft_fp_init_libfuncs (void)\n+{\n+}\n \f\n /* For HPUX, it is illegal to have relocations in shared segments.  */\n \n@@ -10250,7 +10308,7 @@ ia64_scalar_mode_supported_p (enum machine_mode mode)\n       return true;\n \n     case TFmode:\n-      return TARGET_HPUX;\n+      return true;\n \n     default:\n       return false;"}, {"sha": "a92d67c7e9b37164ee66341d4b589a4f95623b61", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -38,10 +38,12 @@\n \t.text\n \t.align 16\n \t.global __divxf3\n-\t.global __divtf3\n \t.proc __divxf3\n __divxf3:\n+#ifdef SHARED\n+\t.global __divtf3\n __divtf3:\n+#endif\n \tcmp.eq p7, p0 = r0, r0\n \tfrcpa.s0 f10, p6 = farg0, farg1\n \t;;\n@@ -757,6 +759,7 @@ __ia64_trampoline:\n \t.endp __ia64_trampoline\n #endif\n \n+#ifdef SHARED\n // Thunks for backward compatibility.\n #ifdef L_fixtfdi\n \t.text\n@@ -781,7 +784,7 @@ __fixunstfti:\n \t}\n \t.endp __fixunstfti\n #endif\n-#if L_floatditf\n+#ifdef L_floatditf\n \t.align 16\n \t.global __floattitf\n \t.proc __floattitf\n@@ -792,3 +795,4 @@ __floattitf:\n \t}\n \t.endp __floattitf\n #endif\n+#endif"}, {"sha": "3043ddf5caff3dbab4f38b557924271ffda535da", "filename": "gcc/config/ia64/libgcc-glibc.ver", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flibgcc-glibc.ver?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,79 @@\n+# 128 bit long double support was introduced with GCC 4.4.0. These lines\n+# make the symbols to get @@GCC_4.4.0 attached.\n+\n+%exclude {\n+  __addtf3\n+  __divtc3\n+  __divtf3\n+  __eqtf2\n+  __extenddftf2\n+  __extendsftf2\n+  __extendxftf2\n+  __fixtfdi\n+  __fixtfsi\n+  __fixtfti\n+  __fixunstfdi\n+  __fixunstfsi\n+  __fixunstfti\n+  __floatditf\n+  __floatsitf\n+  __floattitf\n+  __floatunditf\n+  __floatunsitf\n+  __floatuntitf\n+  __getf2\n+  __gttf2\n+  __letf2\n+  __lttf2\n+  __multc3\n+  __multf3\n+  __negtf2\n+  __netf2\n+  __powitf2\n+  __subtf3\n+  __trunctfdf2\n+  __trunctfsf2\n+  __trunctfxf2\n+  __unordtf2\n+}\n+\n+# Those TF functions are the aliases of the XF functions before gcc 3.4.\n+GCC_3.0 {\n+  __divtf3\n+  __fixtfti\n+  __fixunstfti\n+  __floattitf\n+}\n+\n+GCC_4.4.0 {\n+  __addtf3\n+  __copysigntf3\n+  __divtc3\n+  __divtf3\n+  __eqtf2\n+  __extenddftf2\n+  __extendsftf2\n+  __fabstf2\n+  __fixtfdi\n+  __fixtfsi\n+  __fixunstfdi\n+  __fixunstfsi\n+  __floatditf\n+  __floatsitf\n+  __floatunditf\n+  __floatunsitf\n+  __getf2\n+  __gttf2\n+  __letf2\n+  __lttf2\n+  __multc3\n+  __multf3\n+  __negtf2\n+  __netf2\n+  __powitf2\n+  __subtf3\n+  __trunctfdf2\n+  __trunctfsf2\n+  __trunctfxf2\n+  __unordtf2\n+}"}, {"sha": "e883f8938979a54613dbd6585f8759e108a91c05", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -59,3 +59,13 @@ do {\t\t\t\t\t\t\\\n #define LINK_EH_SPEC \"\"\n \n #define MD_UNWIND_SUPPORT \"config/ia64/linux-unwind.h\"\n+\n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#undef LIBGCC2_TF_CEXT\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS ia64_soft_fp_init_libfuncs"}, {"sha": "bdcce772ca8c7e131bca6805350269e9af82afa8", "filename": "gcc/config/ia64/sfp-machine.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsfp-machine.h?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,116 @@\n+#define _FP_W_TYPE_SIZE\t\t64\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+\n+#define TI_BITS (__CHAR_BIT__ * (int)sizeof(TItype))\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define _FP_MUL_MEAT_Q(R,X,Y)                           \\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_Q(R,X,Y)   _FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n+#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n+#define _FP_NANFRAC_E\t\t_FP_QNANBIT_E, 0\n+#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n+#define _FP_NANSIGN_S\t\t1\n+#define _FP_NANSIGN_D\t\t1\n+#define _FP_NANSIGN_E\t\t1\n+#define _FP_NANSIGN_Q\t\t1\n+\n+#define _FP_KEEPNANFRACP 1\n+\n+/* Here is something Intel misdesigned: the specs don't define\n+   the case where we have two NaNs with same mantissas, but\n+   different sign. Different operations pick up different NaNs.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if (_FP_FRAC_GT_##wc(X, Y)\t\t\t\t\t\\\n+\t|| (_FP_FRAC_EQ_##wc(X,Y) && (OP == '+' || OP == '*')))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_EX_INVALID\t\t0x01\n+#define FP_EX_DENORM\t\t0x02\n+#define FP_EX_DIVZERO\t\t0x04\n+#define FP_EX_OVERFLOW\t\t0x08\n+#define FP_EX_UNDERFLOW\t\t0x10\n+#define FP_EX_INEXACT\t\t0x20\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    double tmp, dummy;\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\ttmp = 0.0;\t\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"frcpa.s0 %0,p1=f0,f0\"\t\t\t\\\n+\t\t\t      : \"=f\" (tmp) : : \"p1\" );\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"frcpa.s0 %0,p1=f1,f0\"\t\t\t\\\n+\t\t\t      : \"=f\" (tmp) : : \"p1\" );\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tdummy = __DBL_MAX__;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fadd.d.s0 %0=%1,%1\"\t\t\t\\\n+\t\t\t      : \"=f\" (dummy) : \"0\" (dummy));\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tdummy = __DBL_MIN__;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnma.d.s0 %0=%1,%1,f0\"\t\t\t\\\n+\t\t\t      : \"=f\" (tmp) : \"f\" (dummy));\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tdummy = __DBL_MAX__;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fsub.d.s0 %0=%1,f1\"\t\t\t\\\n+\t\t\t      : \"=f\" (dummy) : \"0\" (dummy));\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_RND_NEAREST\t\t0\n+#define FP_RND_ZERO\t\t0xc00L\n+#define FP_RND_PINF\t\t0x800L\n+#define FP_RND_MINF\t\t0x400L\n+\n+#define _FP_DECL_EX \\\n+  unsigned long int _fpsr __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    __asm__ __volatile__ (\"mov.m %0=ar.fpsr\"\t\\\n+\t\t\t  : \"=r\" (_fpsr));\t\\\n+  } while (0)\n+\n+#define FP_ROUNDMODE\t\t(_fpsr & 0xc00L)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+#define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+#define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "4c876bfa99660e874f26ff44761cc066c086b88c", "filename": "gcc/config/ia64/t-fprules-softfp", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Ft-fprules-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Ft-fprules-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-fprules-softfp?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,6 @@\n+softfp_float_modes := tf\n+softfp_int_modes := si di ti\n+softfp_extensions := sftf dftf xftf\n+softfp_truncations := tfsf tfdf tfxf\n+softfp_machine_header := ia64/sfp-machine.h\n+softfp_exclude_libgcc2 := n"}, {"sha": "e6d72b94a871469a94600edb54608bf3a96e2e3b", "filename": "gcc/config/ia64/t-glibc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Ft-glibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Fconfig%2Fia64%2Ft-glibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-glibc?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -1,3 +1,5 @@\n # Use system libunwind library on IA-64 GLIBC based system.\n LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c \\\n   $(srcdir)/unwind-compat.c\n+\n+SHLIB_MAPFILES += $(srcdir)/config/ia64/libgcc-glibc.ver"}, {"sha": "57308bd9b79bfda87470bda7696e2a17bc1bdc34", "filename": "gcc/longlong.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -432,6 +432,55 @@ UDItype __umulsidi3 (USItype, USItype);\n     __w; })\n #endif /* __i960__ */\n \n+#if defined (__ia64) && W_TYPE_SIZE == 64\n+/* This form encourages gcc (pre-release 3.4 at least) to emit predicated\n+   \"sub r=r,r\" and \"sub r=r,r,1\", giving a 2 cycle latency.  The generic\n+   code using \"al<bl\" arithmetically comes out making an actual 0 or 1 in a\n+   register, which takes an extra cycle.  */\n+#define sub_ddmmss(sh, sl, ah, al, bh, bl)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UWtype __x;\t\t\t\t\t\t\t\t\\\n+    __x = (al) - (bl);\t\t\t\t\t\t\t\\\n+    if ((al) < (bl))\t\t\t\t\t\t\t\\\n+      (sh) = (ah) - (bh) - 1;\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      (sh) = (ah) - (bh);\t\t\t\t\t\t\\\n+    (sl) = __x;\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Do both product parts in assembly, since that gives better code with\n+   all gcc versions.  Some callers will just use the upper part, and in\n+   that situation we waste an instruction, but not any cycles.  */\n+#define umul_ppmm(ph, pl, m0, m1)\t\t\t\t\t\\\n+  __asm__ (\"xma.hu %0 = %2, %3, f0\\n\\txma.l %1 = %2, %3, f0\"\t\t\\\n+\t   : \"=&f\" (ph), \"=f\" (pl)\t\t\t\t\t\\\n+\t   : \"f\" (m0), \"f\" (m1))\n+#define count_leading_zeros(count, x)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UWtype _x = (x), _y, _a, _c;\t\t\t\t\t\\\n+    __asm__ (\"mux1 %0 = %1, @rev\" : \"=r\" (_y) : \"r\" (_x));\t\t\\\n+    __asm__ (\"czx1.l %0 = %1\" : \"=r\" (_a) : \"r\" (-_y | _y));\t\t\\\n+    _c = (_a - 1) << 3;\t\t\t\t\t\t\t\\\n+    _x >>= _c;\t\t\t\t\t\t\t\t\\\n+    if (_x >= 1 << 4)\t\t\t\t\t\t\t\\\n+      _x >>= 4, _c += 4;\t\t\t\t\t\t\\\n+    if (_x >= 1 << 2)\t\t\t\t\t\t\t\\\n+      _x >>= 2, _c += 2;\t\t\t\t\t\t\\\n+    _c += _x >> 1;\t\t\t\t\t\t\t\\\n+    (count) =  W_TYPE_SIZE - 1 - _c;\t\t\t\t\t\\\n+  } while (0)\n+/* similar to what gcc does for __builtin_ffs, but 0 based rather than 1\n+   based, and we don't need a special case for x==0 here */\n+#define count_trailing_zeros(count, x)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UWtype __ctz_x = (x);\t\t\t\t\t\t\\\n+    __asm__ (\"popcnt %0 = %1\"\t\t\t\t\t\t\\\n+\t     : \"=r\" (count)\t\t\t\t\t\t\\\n+\t     : \"r\" ((__ctz_x-1) & ~__ctz_x));\t\t\t\t\\\n+  } while (0)\n+#define UMUL_TIME 14\n+#endif\n+\n #if defined (__M32R__) && W_TYPE_SIZE == 32\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   /* The cmp clears the condition bit.  */ \\"}, {"sha": "402dbe185f3817825fb5ee477544d01f69d943e6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -1,3 +1,18 @@\n+2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.host: Add ia64/t-fprules-softfp ia64/t-softfp-compat\n+\tto tmake_file for ia64*-*-linux*.\n+\n+\t* Makefile.in (gen-hide-list): Ignore .*_compat and .*@.*.\n+\n+\t* config/ia64/__divxf3.asm: New.\n+\t* config/ia64/_fixtfdi.asm: Likewise.\n+\t* config/ia64/_fixunstfdi.asm: Likewise.\n+\t* config/ia64/_floatditf.asm: Likewise.\n+\t* config/ia64/t-fprules-softfp: Likewise.\n+\t* config/ia64/t-softfp-compat: Likewise.\n+\t* config/ia64/tf-signs.c: Likewise.\n+\n 2009-01-18  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/i386/32/tf-signs.c (__copysigntf3, __fabstf2): Prototype."}, {"sha": "c9c36d5fa16f7bc68e773c0948f1d027964facb6", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -265,7 +265,9 @@ ASM_HIDDEN_OP = @asm_hidden_op@\n \n define gen-hide-list\n $(NM) -pg $< | \\\n-  $(AWK) 'NF == 3 && $$2 !~ /^[UN]$$/ { print \"\\t$(ASM_HIDDEN_OP)\", $$3 }' > $@T\n+  $(AWK) 'NF == 3 && $$2 !~ /^[UN]$$/ && $$3 !~ /.*_compat/ \\\n+         && $$3 !~ /.*@.*/ \\\n+\t { print \"\\t$(ASM_HIDDEN_OP)\", $$3 }' > $@T\n mv -f $@T $@\n endef\n else"}, {"sha": "2225e6790638d22483e96de47c777b1c3f9b552a", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -350,7 +350,7 @@ ia64*-*-freebsd*)\n \t;;\n ia64*-*-linux*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n-\ttmake_file=\"ia64/t-ia64\"\n+\ttmake_file=\"ia64/t-ia64 ia64/t-fprules-softfp ia64/t-softfp-compat\"\n \t;;\n ia64*-*-hpux*)\n \t;;"}, {"sha": "f741bdaf9bca6a992414cb5bdda47790e8fdc4c2", "filename": "libgcc/config/ia64/__divxf3.asm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F__divxf3.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F__divxf3.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2F__divxf3.asm?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,11 @@\n+#ifdef SHARED\n+#define __divtf3 __divtf3_compat\n+#endif\n+\n+#define L__divxf3\n+#include \"config/ia64/lib1funcs.asm\"\n+\n+#ifdef SHARED\n+#undef __divtf3\n+.symver __divtf3_compat, __divtf3@GCC_3.0\n+#endif"}, {"sha": "4d13c808c5189c9192225b95a4e6911c4025d04c", "filename": "libgcc/config/ia64/_fixtfdi.asm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_fixtfdi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_fixtfdi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2F_fixtfdi.asm?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,11 @@\n+#ifdef SHARED\n+#define __fixtfti __fixtfti_compat\n+#endif\n+\n+#define L_fixtfdi\n+#include \"config/ia64/lib1funcs.asm\"\n+\n+#ifdef SHARED\n+#undef __fixtfti\n+.symver __fixtfti_compat, __fixtfti@GCC_3.0\n+#endif"}, {"sha": "b722d9e90dc41177c89431b6df4c623d0315643e", "filename": "libgcc/config/ia64/_fixunstfdi.asm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_fixunstfdi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_fixunstfdi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2F_fixunstfdi.asm?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,11 @@\n+#ifdef SHARED\n+#define __fixunstfti __fixunstfti_compat\n+#endif\n+\n+#define L_fixunstfdi\n+#include \"config/ia64/lib1funcs.asm\"\n+\n+#ifdef SHARED\n+#undef __fixunstfti\n+.symver __fixunstfti_compat, __fixunstfti@GCC_3.0\n+#endif"}, {"sha": "21d77028176ff5a3261b64cd8b4ddcc9be065a66", "filename": "libgcc/config/ia64/_floatditf.asm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_floatditf.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2F_floatditf.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2F_floatditf.asm?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,11 @@\n+#ifdef SHARED\n+#define __floattitf __floattitf_compat\n+#endif\n+\n+#define L_floatditf\n+#include \"config/ia64/lib1funcs.asm\"\n+\n+#ifdef SHARED\n+#undef __floattitf\n+.symver __floattitf_compat, __floattitf@GCC_3.0\n+#endif"}, {"sha": "90acc376ec95fa322da02208f898a0eeca12a1a2", "filename": "libgcc/config/ia64/t-fprules-softfp", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ft-fprules-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ft-fprules-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-fprules-softfp?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,2 @@\n+# Provide fallbacks for __builtin_copysignq and __builtin_fabsq.\n+LIB2ADD += $(srcdir)/config/ia64/tf-signs.c"}, {"sha": "d3dad68c48f64ebe28883117132801dfaca5bd37", "filename": "libgcc/config/ia64/t-softfp-compat", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ft-softfp-compat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ft-softfp-compat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-softfp-compat?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,7 @@\n+# Filter out the following TImode functions and provide backward binary\n+# compatibility.\n+# Replace __dvxf3 _fixtfdi _fixunstfdi _floatditf\n+libgcc1-tf-functions = __divxf3  _fixtfdi _fixunstfdi _floatditf\n+LIB1ASMFUNCS := $(filter-out $(libgcc1-tf-functions), $(LIB1ASMFUNCS))\n+libgcc1-tf-compats = $(addsuffix .asm, $(libgcc1-tf-functions))\n+LIB2ADD += $(addprefix $(srcdir)/config/ia64/, $(libgcc1-tf-compats))"}, {"sha": "9b42b9041f60587810fcb2e9749978a8a16a9116", "filename": "libgcc/config/ia64/tf-signs.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ftf-signs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c252db2030a54b9cd3095405704dc68c3029a461/libgcc%2Fconfig%2Fia64%2Ftf-signs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ftf-signs.c?ref=c252db2030a54b9cd3095405704dc68c3029a461", "patch": "@@ -0,0 +1,62 @@\n+/* Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+union _FP_UNION_Q\n+{\n+   __float128 flt;\n+   struct \n+   {\n+      unsigned long frac1 : 64;\n+      unsigned long frac0 : 48;\n+      unsigned exp : 15;\n+      unsigned sign : 1;\n+   } bits __attribute__((packed));\n+};\n+\n+__float128\n+__copysigntf3 (__float128 a, __float128 b)\n+{\n+  union _FP_UNION_Q A, B;\n+\n+  A.flt = a;\n+  B.flt = b;\n+  A.bits.sign = B.bits.sign;\n+\n+  return A.flt;\n+}\n+\n+__float128\n+__fabstf2 (__float128 a)\n+{\n+  union _FP_UNION_Q A;\n+\n+  A.flt = a;\n+  A.bits.sign = 0;\n+\n+  return A.flt;\n+}"}]}