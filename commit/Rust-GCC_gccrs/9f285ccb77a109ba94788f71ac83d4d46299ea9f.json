{"sha": "9f285ccb77a109ba94788f71ac83d4d46299ea9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyODVjY2I3N2ExMDliYTk0Nzg4ZjcxYWM4M2Q0ZDQ2Mjk5ZWE5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-14T16:23:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-14T16:23:06Z"}, "message": "Revert empty class parameter passing ABI changes.\n\nFrom-SVN: r234977", "tree": {"sha": "0d922603fa3db1c9a198d7caeec6b41056443321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d922603fa3db1c9a198d7caeec6b41056443321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f285ccb77a109ba94788f71ac83d4d46299ea9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f285ccb77a109ba94788f71ac83d4d46299ea9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f285ccb77a109ba94788f71ac83d4d46299ea9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f285ccb77a109ba94788f71ac83d4d46299ea9f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1"}], "stats": {"total": 1059, "additions": 49, "deletions": 1010}, "files": [{"sha": "e56d15bc40de5db00229b228ba9d365c6a139f3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -1,3 +1,7 @@\n+2016-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* cfgexpand.c, expr.c: Revert previous change.\n+\n 2016-04-14  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR middle-end/70643"}, {"sha": "1341c14ce2b6b1cbfe5619bd54449bde43e1084d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -73,7 +73,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n-#include \"langhooks.h\"\n \n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n@@ -6222,15 +6221,6 @@ pass_expand::execute (function *fun)\n \t\t (int) PARAM_VALUE (PARAM_SSP_BUFFER_SIZE));\n     }\n \n-  if (warn_abi)\n-    if (tree attr = lookup_attribute (\"abi warning\",\n-\t\t\t\t      DECL_ATTRIBUTES (current_function_decl)))\n-      warning_at (DECL_SOURCE_LOCATION (current_function_decl),\n-\t\t  OPT_Wabi, \"definition of %qs: %s\",\n-\t\t  identifier_to_locale (lang_hooks.decl_printable_name\n-\t\t\t\t\t(current_function_decl, 1)),\n-\t\t  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n-\n   /* Set up parameters and prepare for return, for the function.  */\n   expand_function_start (current_function_decl);\n "}, {"sha": "4267f65daaa10098108e9e913791a603abf59675", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -1,3 +1,8 @@\n+2016-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c, decl.c, error.c, cp-tree.h, decl.c: Revert empty\n+\tparameter ABI change.\n+\n 2016-04-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69517"}, {"sha": "ed234904a63de40d13e0a087f0929ca60c1b3dc9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 102, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -214,8 +214,6 @@ static void add_candidates (tree, tree, const vec<tree, va_gc> *, tree, tree,\n \t\t\t    tsubst_flags_t);\n static conversion *merge_conversion_sequences (conversion *, conversion *);\n static tree build_temp (tree, tree, int, diagnostic_t *, tsubst_flags_t);\n-static bool pass_as_empty_struct (tree type);\n-static tree empty_class_arg (tree);\n \n /* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n    NAME can take many forms...  */\n@@ -381,31 +379,16 @@ build_call_a (tree function, int n, tree *argarray)\n   /* Don't pass empty class objects by value.  This is useful\n      for tags in STL, which are used to control overload resolution.\n      We don't need to handle other cases of copying empty classes.  */\n-  bool warned = false;\n-  if (decl && !TREE_PUBLIC (decl))\n-    /* Don't warn about the ABI of a function local to this TU.  */\n-    warned = true;\n-  tree empty_arg = NULL_TREE;\n   if (! decl || ! DECL_BUILT_IN (decl))\n     for (i = 0; i < n; i++)\n       {\n \ttree arg = CALL_EXPR_ARG (function, i);\n-\ttree type = TREE_TYPE (arg);\n-\tif (is_really_empty_class (type)\n-\t    && ! TREE_ADDRESSABLE (type))\n+\tif (is_empty_class (TREE_TYPE (arg))\n+\t    && ! TREE_ADDRESSABLE (TREE_TYPE (arg)))\n \t  {\n-\t    empty_arg = arg;\n-\t    CALL_EXPR_ARG (function, i) = empty_class_arg (arg);\n-\t  }\n-\t/* Warn about ABI changes for a non-final argument.  */\n-\telse if (!warned && empty_arg)\n-\t  {\n-\t    location_t loc = EXPR_LOC_OR_LOC (empty_arg, input_location);\n-\t    if (decl && !varargs_function_p (decl))\n-\t      mark_for_abi_warning (decl, empty_arg);\n-\t    else\n-\t      warn_empty_class_abi (empty_arg, loc);\n-\t    warned = true;\n+\t    tree t = build0 (EMPTY_CLASS_EXPR, TREE_TYPE (arg));\n+\t    arg = build2 (COMPOUND_EXPR, TREE_TYPE (t), arg, t);\n+\t    CALL_EXPR_ARG (function, i) = arg;\n \t  }\n       }\n \n@@ -6889,15 +6872,6 @@ build_x_va_arg (source_location loc, tree expr, tree type)\n       expr = build_va_arg (loc, expr, ref);\n       return convert_from_reference (expr);\n     }\n-  else if (is_really_empty_class (type) && !TREE_ADDRESSABLE (type))\n-    {\n-      /* Do the reverse of empty_class_arg.  */\n-      tree etype = pass_as_empty_struct (type) ? empty_struct_type : type;\n-      expr = build_va_arg (loc, expr, etype);\n-      warn_empty_class_abi (type, loc);\n-      tree ec = build0 (EMPTY_CLASS_EXPR, type);\n-      return build2 (COMPOUND_EXPR, type, expr, ec);\n-    }\n \n   return build_va_arg (loc, expr, type);\n }\n@@ -6994,75 +6968,6 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum,\n   return arg;\n }\n \n-/* Return true iff TYPE should be passed and returned as a size 0 type rather\n-   than its normal size, for compatibility with C.  */\n-\n-static bool\n-pass_as_empty_struct (tree type)\n-{\n-  return (abi_version_at_least (10)\n-\t  && type != error_mark_node\n-\t  && COMPLETE_TYPE_P (type)\n-\t  && !TREE_ADDRESSABLE (type)\n-\t  && is_really_empty_class (type));\n-}\n-\n-/* Adjust the value VAL of empty class type TYPE for argument passing.\n-   Keep this synced with build_x_va_arg.  */\n-\n-static tree\n-empty_class_arg (tree val)\n-{\n-  /* Don't pass empty class objects by value.  This is useful\n-     for tags in STL, which are used to control overload resolution.\n-     We don't need to handle other cases of copying empty classes.  */\n-  tree type = TREE_TYPE (val);\n-  tree etype = pass_as_empty_struct (type) ? empty_struct_type : type;\n-  tree empty = build0 (EMPTY_CLASS_EXPR, etype);\n-  return build2 (COMPOUND_EXPR, etype, val, empty);\n-}\n-\n-/* Generate a message warning about the change in empty class parameter passing\n-   ABI.  */\n-\n-static tree\n-empty_class_msg (tree type)\n-{\n-  if (!TYPE_P (type))\n-    type = TREE_TYPE (type);\n-\n-  return pp_format_to_string (\"empty class %qT parameter passing ABI \"\n-\t\t\t      \"changes in -fabi-version=10 (GCC 6)\", type);\n-}\n-\n-/* Warn immediately about the change in empty class parameter ABI.  */\n-\n-void\n-warn_empty_class_abi (tree arg, location_t loc)\n-{\n-  if (!warn_abi || !abi_version_crosses (10))\n-    return;\n-\n-  warning_at (loc, OPT_Wabi, \"%E\", empty_class_msg (arg));\n-}\n-\n-/* Tack a warning about the change in empty class parameter ABI onto FN, so\n-   that we get a warning if a definition or call is emitted.  */\n-\n-void\n-mark_for_abi_warning (tree fn, tree type)\n-{\n-  if (!warn_abi || !abi_version_crosses (10))\n-    return;\n-  if (lookup_attribute (\"abi warning\", DECL_ATTRIBUTES (fn)))\n-    return;\n-\n-  tree msg = empty_class_msg (type);\n-  msg = build_tree_list (NULL_TREE, msg);\n-  DECL_ATTRIBUTES (fn) = tree_cons (get_identifier (\"abi warning\"), msg,\n-\t\t\t\t    DECL_ATTRIBUTES (fn));\n-}\n-\n /* Returns the type which will really be used for passing an argument of\n    type TYPE.  */\n \n@@ -7081,8 +6986,6 @@ type_passed_as (tree type)\n \t   && COMPLETE_TYPE_P (type)\n \t   && tree_int_cst_lt (TYPE_SIZE (type), TYPE_SIZE (integer_type_node)))\n     type = integer_type_node;\n-  else if (pass_as_empty_struct (type))\n-    type = empty_struct_type;\n \n   return type;\n }"}, {"sha": "baff674dfb7f9b22c957059069b3ff00b2988325", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -1150,8 +1150,6 @@ enum cp_tree_index\n     CPTI_NULLPTR,\n     CPTI_NULLPTR_TYPE,\n \n-    CPTI_EMPTY_STRUCT,\n-\n     CPTI_MAX\n };\n \n@@ -1187,7 +1185,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n #define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n #define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n-#define empty_struct_type\t\tcp_global_trees[CPTI_EMPTY_STRUCT]\n \n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */\n@@ -5540,8 +5537,6 @@ extern tree build_addr_func\t\t\t(tree, tsubst_flags_t);\n extern void set_flags_from_callee\t\t(tree);\n extern tree build_call_a\t\t\t(tree, int, tree*);\n extern tree build_call_n\t\t\t(tree, int, ...);\n-extern void mark_for_abi_warning\t\t(tree, tree);\n-extern void warn_empty_class_abi\t\t(tree, location_t);\n extern bool null_ptr_cst_p\t\t\t(tree);\n extern bool null_member_pointer_value_p\t\t(tree);\n extern bool sufficient_parms_p\t\t\t(const_tree);\n@@ -5896,7 +5891,6 @@ extern bool pedwarn_cxx98                       (location_t, int, const char *,\n extern location_t location_of                   (tree);\n extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n \t\t\t\t\t\t location_t);\n-extern tree pp_format_to_string\t\t\t(const char *, ...);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);"}, {"sha": "65b5733b0209ea8486db9ee85e24f64255ba730b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -4180,10 +4180,6 @@ cxx_init_decl_processing (void)\n     nullptr_node = build_int_cst (nullptr_type_node, 0);\n   }\n \n-  empty_struct_type = make_node (RECORD_TYPE);\n-  finish_builtin_struct (empty_struct_type, \"__empty_struct\",\n-\t\t\t NULL_TREE, NULL_TREE);\n-\n   abort_fndecl\n     = build_library_fn_ptr (\"__cxa_pure_virtual\", void_ftype,\n \t\t\t    ECF_NORETURN | ECF_NOTHROW);\n@@ -14375,34 +14371,16 @@ store_parm_decls (tree current_function_parms)\n \t     they end in the correct forward order.  */\n       specparms = nreverse (specparms);\n \n-      /* Don't warn about the ABI of a function local to this TU.  */\n-      bool warned = !TREE_PUBLIC (current_function_decl);\n-      bool saw_nonempty = false;\n       for (parm = specparms; parm; parm = next)\n \t{\n \t  next = DECL_CHAIN (parm);\n \t  if (TREE_CODE (parm) == PARM_DECL)\n \t    {\n-\t      tree type = TREE_TYPE (parm);\n \t      if (DECL_NAME (parm) == NULL_TREE\n-\t\t  || !VOID_TYPE_P (type))\n+\t\t  || !VOID_TYPE_P (parm))\n \t\tpushdecl (parm);\n \t      else\n \t\terror (\"parameter %qD declared void\", parm);\n-\t      /* If this isn't the last parameter, maybe warn about ABI change\n-\t\t in passing empty classes.  */\n-\t      if (processing_template_decl)\n-\t\tcontinue;\n-\t      if (TREE_ADDRESSABLE (type)\n-\t\t  || !is_really_empty_class (type))\n-\t\tsaw_nonempty = true;\n-\t      else if (!warned\n-\t\t       && (saw_nonempty\n-\t\t\t   || varargs_function_p (current_function_decl)))\n-\t\t{\n-\t\t  mark_for_abi_warning (current_function_decl, type);\n-\t\t  warned = true;\n-\t\t}\n \t    }\n \t  else\n \t    {"}, {"sha": "aa5fd411b28f97930e54e5688f1c2e92e99b40cc", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -3718,25 +3718,3 @@ qualified_name_lookup_error (tree scope, tree name,\n       suggest_alternatives_for (location, name);\n     }\n }\n-\n-/* Like error et al, but return the formatted message as a STRING_CST.  */\n-\n-tree\n-pp_format_to_string (const char *msg, ...)\n-{\n-  pretty_printer *pp = global_dc->printer;\n-  text_info text;\n-  va_list ap;\n-\n-  va_start (ap, msg);\n-  text.err_no = errno;\n-  text.args_ptr = &ap;\n-  text.format_spec = msg;\n-  pp_format (pp, &text);\n-  pp_output_formatted_text (pp);\n-  va_end (ap);\n-  const char *fmt = pp_formatted_text (pp);\n-  tree str = build_string (strlen (fmt) + 1, fmt);\n-  pp_clear_output_area (pp);\n-  return str;\n-}"}, {"sha": "29d22b07256ce0adcb8c8eae5249847e144caf4b", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -10579,13 +10579,6 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t\t      0, \"%Kcall to %qs declared with attribute warning: %s\",\n \t\t      exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n \t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n-\tif (warn_abi && fndecl\n-\t    && (attr = lookup_attribute (\"abi warning\",\n-\t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n-\t  warning_at (tree_nonartificial_location (exp),\n-\t\t      OPT_Wabi, \"%Kcall to %qs: %s\",\n-\t\t      exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n-\t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n \t/* Check for a built-in function.  */\n \tif (fndecl && DECL_BUILT_IN (fndecl))"}, {"sha": "ce1f6f2ae9c8918ca235ed324e1e9a87243ea8ea", "filename": "gcc/testsuite/g++.dg/abi/empty12.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty12a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty12.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty12.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,9 +0,0 @@\n-struct dummy { };\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "34a25bad75dcf9bd9f92ce2cb0bc914dcd561e74", "filename": "gcc/testsuite/g++.dg/abi/empty12a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty12.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "d1e094685dee9c4f92dd50f54071f4b63082ab5b", "filename": "gcc/testsuite/g++.dg/abi/empty13.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-x c -fabi-version=9\" }\n-// { dg-additional-sources \"empty13a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty13.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f);\n-  return 0;\n-}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty13.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,9 +0,0 @@\n-struct dummy { };\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "b4303a6382606e13f1d8054b26f158558abe9650", "filename": "gcc/testsuite/g++.dg/abi/empty13a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty13.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 == -1)\n-    __builtin_abort();\n-}"}, {"sha": "1b9c3975753f89c30bcfdb7624527135c044b088", "filename": "gcc/testsuite/g++.dg/abi/empty14.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty14a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty14.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "5842279cf370763df124ae8bf5a7639424d9b7fd", "filename": "gcc/testsuite/g++.dg/abi/empty14.h", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,10 +0,0 @@\n-struct dummy0 { };\n-struct dummy { struct dummy0 d[140]; };\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "8b3d7800c36566b43a0d78f74e1264e02ca7a44e", "filename": "gcc/testsuite/g++.dg/abi/empty14a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty14.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "ac0a8681dc99a7c3947386c9914c1f12a799580a", "filename": "gcc/testsuite/g++.dg/abi/empty15.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty15a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty15.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "1c6f26f5ae811583d08ec1077668e71c82c1f0f8", "filename": "gcc/testsuite/g++.dg/abi/empty15.h", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,30 +0,0 @@\n-struct A1 {};\n-struct A2 {};\n-struct B1 { struct A1 a; struct A2 b; };\n-struct B2 { struct A1 a; struct A2 b; };\n-struct C1 { struct B1 a; struct B2 b; };\n-struct C2 { struct B1 a; struct B2 b; };\n-struct D1 { struct C1 a; struct C2 b; };\n-struct D2 { struct C1 a; struct C2 b; };\n-struct E1 { struct D1 a; struct D2 b; };\n-struct E2 { struct D1 a; struct D2 b; };\n-struct F1 { struct E1 a; struct E2 b; };\n-struct F2 { struct E1 a; struct E2 b; };\n-struct G1 { struct F1 a; struct F2 b; };\n-struct G2 { struct F1 a; struct F2 b; };\n-struct H1 { struct G1 a; struct G2 b; };\n-struct H2 { struct G1 a; struct G2 b; };\n-struct I1 { struct H1 a; struct H2 b; };\n-struct I2 { struct H1 a; struct H2 b; };\n-struct J1 { struct I1 a; struct I2 b; };\n-struct J2 { struct I1 a; struct I2 b; };\n-struct dummy { struct J1 a; struct J2 b; };\n-\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "325b2c5ba09e0ee9e3db17362f3187610e8d2e48", "filename": "gcc/testsuite/g++.dg/abi/empty15a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty15.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "de2bf5cd51d8654f40433dedc8c3ab335d57eef6", "filename": "gcc/testsuite/g++.dg/abi/empty16.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty16a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty16.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "7552ae06576bc70e23fc986c559d6028965a71c2", "filename": "gcc/testsuite/g++.dg/abi/empty16.h", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,16 +0,0 @@\n-#ifdef __cplusplus\n-struct A1 {};\n-struct A2 {};\n-struct dummy : A1, A2 {} ;\n-#else\n-struct dummy {};\n-#endif\n-\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "6cb7fbccecc4d59ecb949319db12320224e17333", "filename": "gcc/testsuite/g++.dg/abi/empty16a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty16.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "c7a37c093d997f8d0d5f80fe289931fefc15e2c4", "filename": "gcc/testsuite/g++.dg/abi/empty17.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty17a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty17.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "9cf72baca2e1a2f3e632ac6398b0ec1fd61daa9f", "filename": "gcc/testsuite/g++.dg/abi/empty17.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,27 +0,0 @@\n-#ifdef __cplusplus\n-struct A1\n-{\n-  void foo (void);\n-  unsigned int : 15;\n-};\n-struct A2\n-{\n-  void bar (void);\n-  unsigned int : 15;\n-};\n-struct dummy : A1, A2\n-{\n-  unsigned int : 15;\n-};\n-#else\n-struct dummy {};\n-#endif\n-\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "24408fde09cb20017c486a9600dbe5bac034a765", "filename": "gcc/testsuite/g++.dg/abi/empty17a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty17.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "6cad33c8dd3c9ac982541b9811f054f2eb148d60", "filename": "gcc/testsuite/g++.dg/abi/empty18.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty18a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty18.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f);\t\t\t// { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "86e7ecdd211174e8150d64e11ba4eb7c7b185e00", "filename": "gcc/testsuite/g++.dg/abi/empty18.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,9 +0,0 @@\n-struct dummy { int d[0]; };\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "902860bdc01e72c50ea6505a5a42ab48dc363c2e", "filename": "gcc/testsuite/g++.dg/abi/empty18a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty18.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "e3e855a99bb8448f52b56ead4a7f59d1e74087cb", "filename": "gcc/testsuite/g++.dg/abi/empty19.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// PR c++/60336\n-// { dg-do run }\n-// { dg-options \"-Wabi=9 -x c\" }\n-// { dg-additional-sources \"empty19a.c\" }\n-// { dg-prune-output \"command line option\" }\n-\n-#include \"empty19.h\"\n-extern \"C\" void fun(struct dummy, struct foo);\n-\n-int main()\n-{\n-  struct dummy d;\n-  struct foo f = { -1, -2, -3, -4, -5 };\n-\n-  fun(d, f); // { dg-warning \"empty\" }\n-  return 0;\n-}"}, {"sha": "616b87bdd933f4b4ec3fa5f048dd7dc096bc7bb2", "filename": "gcc/testsuite/g++.dg/abi/empty19.h", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,10 +0,0 @@\n-struct dummy0 { };\n-struct dummy { struct dummy0 d[0]; };\n-struct foo\n-{\n-  int i1;\n-  int i2;\n-  int i3;\n-  int i4;\n-  int i5;\n-};"}, {"sha": "767b1eb73200be8b1e2312a740a71ba18b3eda80", "filename": "gcc/testsuite/g++.dg/abi/empty19a.c", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,6 +0,0 @@\n-#include \"empty19.h\"\n-void fun(struct dummy d, struct foo f)\n-{\n-  if (f.i1 != -1)\n-    __builtin_abort();\n-}"}, {"sha": "be1e826c838f1d655eba839f0740701978866ea2", "filename": "gcc/testsuite/g++.dg/abi/empty20.C", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,25 +0,0 @@\n-// { dg-options \"-Wabi=9 -O0\" }\n-\n-struct A { };\n-\n-void f(A, A) { }\t\t// No warning, trailing parms all empty\n-void f(A, A, int) { }\t\t// { dg-warning \"ABI\" }\n-__attribute__ ((always_inline))\n-inline void f(A a, int i) { }\t// No warning, always inlined\n-__attribute__ ((always_inline))\n-inline void f2(A a, int i)\t// But the call within the fn gets a warning\n-{\t\t\t\t// when it's inlined into main\n-  f(a,a,i);\t\t\t// { dg-warning \"ABI\" }\n-}\n-inline void f3(A a, int i)\t// This one is never called\n-{\n-  f(a,a,i);\n-}\n-int main()\n-{\n-  A a;\n-  f(a,a);\n-  f(a,a,42);\t\t\t// { dg-warning \"ABI\" }\n-  f(a,42);\n-  f2(a,42);\n-}"}, {"sha": "7538dd80c32b20738ce760f52d10050f7391e530", "filename": "gcc/testsuite/g++.dg/abi/empty21.C", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,21 +0,0 @@\n-// { dg-options \"-Wabi=9\" }\n-\n-#include <stdarg.h>\n-\n-struct A { };\n-\n-void f(int i, ...)\n-{\n-  va_list ap;\n-  va_start (ap, i);\n-  if (i >= 1)\n-    va_arg (ap, A);\t\t// { dg-warning \"ABI\" }\n-  if (i >= 2)\n-    va_arg (ap, int);\n-}\n-\n-int main()\n-{\n-  f(0);\n-  f(2, A(), 42);\t\t// { dg-warning \"ABI\" }\n-}"}, {"sha": "af0863887a04b380d6f22a89539f77f82d24d89c", "filename": "gcc/testsuite/g++.dg/abi/pr60336-1.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-struct dummy { };\n-struct true_type { struct dummy i; };\n-\n-extern true_type y;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "6c9c990dad6e62b60f793f4fadb4cd098dbb286f", "filename": "gcc/testsuite/g++.dg/abi/pr60336-10.C", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,50 +0,0 @@\n-// { dg-do run }\n-// { dg-options \"-O2\" }\n-\n-#include <stdarg.h>\n-\n-struct dummy0 { };\n-struct dummy1 { };\n-struct dummy : dummy0, dummy1 { };\n-\n-void\n-test (struct dummy a, int m, ...)\n-{\n-  va_list va_arglist;\n-  int i;\n-  int count = 0;\n-\n-  if (m == 0)\n-    count++;\n-  va_start (va_arglist, m);\n-  i = va_arg (va_arglist, int);\n-  if (i == 1)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 2)\n-  i = va_arg (va_arglist, int);\n-    count++;\n-  if (i == 3)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 4)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 5)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 6)\n-    count++;\n-  va_end (va_arglist);\n-  if (count != 7)\n-    __builtin_abort ();\n-}\n-\n-struct dummy a0;\n-\n-int\n-main ()\n-{\n-  test (a0, 0, 1, 2, 3, 4, 5, 6);\n-  return 0;\n-}"}, {"sha": "c92f3d43a5b0c317c5193a296bca391f8f012099", "filename": "gcc/testsuite/g++.dg/abi/pr60336-11.C", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,56 +0,0 @@\n-// { dg-do run }\n-// { dg-options \"-O2\" }\n-\n-#include <stdarg.h>\n-\n-struct dummy0\n-{\n-  void bar (void);\n-};\n-struct dummy1\n-{\n-  void foo (void);\n-};\n-struct dummy : dummy0, dummy1 { };\n-\n-void\n-test (struct dummy a, int m, ...)\n-{\n-  va_list va_arglist;\n-  int i;\n-  int count = 0;\n-\n-  if (m == 0)\n-    count++;\n-  va_start (va_arglist, m);\n-  i = va_arg (va_arglist, int);\n-  if (i == 1)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 2)\n-  i = va_arg (va_arglist, int);\n-    count++;\n-  if (i == 3)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 4)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 5)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 6)\n-    count++;\n-  va_end (va_arglist);\n-  if (count != 7)\n-    __builtin_abort ();\n-}\n-\n-struct dummy a0;\n-\n-int\n-main ()\n-{\n-  test (a0, 0, 1, 2, 3, 4, 5, 6);\n-  return 0;\n-}"}, {"sha": "83a7bb0cfa00ab10a72ab49c5238c0e584b061fc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-12.C", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,57 +0,0 @@\n-// { dg-do run }\n-// { dg-options \"-O2\" }\n-\n-#include <stdarg.h>\n-\n-struct dummy0\n-{\n-};\n-struct dummy1\n-{\n-  unsigned : 15;\n-};\n-struct dummy : dummy0, dummy1\n-{\n-};\n-\n-void\n-test (struct dummy a, int m, ...)\n-{\n-  va_list va_arglist;\n-  int i;\n-  int count = 0;\n-\n-  if (m == 0)\n-    count++;\n-  va_start (va_arglist, m);\n-  i = va_arg (va_arglist, int);\n-  if (i == 1)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 2)\n-  i = va_arg (va_arglist, int);\n-    count++;\n-  if (i == 3)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 4)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 5)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 6)\n-    count++;\n-  va_end (va_arglist);\n-  if (count != 7)\n-    __builtin_abort ();\n-}\n-\n-struct dummy a0;\n-\n-int\n-main ()\n-{\n-  test (a0, 0, 1, 2, 3, 4, 5, 6);\n-  return 0;\n-}"}, {"sha": "32eecb32a675aede05095273a8ac3fad22f8cc93", "filename": "gcc/testsuite/g++.dg/abi/pr60336-2.C", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,48 +0,0 @@\n-// { dg-do run }\n-// { dg-options \"-O2 -Wabi=9\" }\n-\n-#include <stdarg.h>\n-\n-struct dummy { };\n-\n-void\n-test (struct dummy a, int m, ...) // { dg-message \"empty\" }\n-{\n-  va_list va_arglist;\n-  int i;\n-  int count = 0;\n-\n-  if (m == 0)\n-    count++;\n-  va_start (va_arglist, m);\n-  i = va_arg (va_arglist, int);\n-  if (i == 1)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 2)\n-  i = va_arg (va_arglist, int);\n-    count++;\n-  if (i == 3)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 4)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 5)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 6)\n-    count++;\n-  va_end (va_arglist);\n-  if (count != 7)\n-    __builtin_abort ();\n-}\n-\n-struct dummy a0;\n-\n-int\n-main ()\n-{\n-  test (a0, 0, 1, 2, 3, 4, 5, 6); // { dg-message \"empty\" }\n-  return 0;\n-}"}, {"sha": "8ebd4dda0e24e8f7adca7558f12216f7f110fd4f", "filename": "gcc/testsuite/g++.dg/abi/pr60336-3.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,15 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -Wabi=9\" }\n-\n-struct dummy { struct{}__attribute__((aligned (4))) a[7]; };\n-\n-extern void test1 (struct dummy, ...);\n-extern void (*test2) (struct dummy, ...);\n-\n-void\n-foo ()\n-{\n-  struct dummy a0;\n-  test1 (a0, 42); // { dg-message \"empty\" }\n-  test2 (a0, 42); // { dg-message \"empty\" }\n-}"}, {"sha": "8790a663d2bc29bd2f5479640ad43b07e16c0bda", "filename": "gcc/testsuite/g++.dg/abi/pr60336-4.C", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,48 +0,0 @@\n-// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n-// { dg-options \"-O2 -fabi-version=9\" }\n-\n-#include <stdarg.h>\n-\n-struct dummy { };\n-\n-void\n-test (struct dummy a, int m, ...)\n-{\n-  va_list va_arglist;\n-  int i;\n-  int count = 0;\n-\n-  if (m == 0)\n-    count++;\n-  va_start (va_arglist, m);\n-  i = va_arg (va_arglist, int);\n-  if (i == 1)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 2)\n-  i = va_arg (va_arglist, int);\n-    count++;\n-  if (i == 3)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 4)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 5)\n-    count++;\n-  i = va_arg (va_arglist, int);\n-  if (i == 6)\n-    count++;\n-  va_end (va_arglist);\n-  if (count == 7)\n-    __builtin_abort ();\n-}\n-\n-struct dummy a0;\n-\n-int\n-main ()\n-{\n-  test (a0, 0, 1, 2, 3, 4, 5, 6);\n-  return 0;\n-}"}, {"sha": "b0c76ad5aa2e0f2f4d06f2201654811d6b9903cc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-5.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-struct dummy { };\n-struct true_type { struct dummy i; struct dummy j; };\n-\n-extern true_type y;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "58796519334a99b86b72a7ce93099dc53cc77ba2", "filename": "gcc/testsuite/g++.dg/abi/pr60336-6.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-struct dummy { };\n-struct true_type { struct dummy i1; struct dummy i2; };\n-\n-extern true_type y;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "0e5d2ef2f11e5ee88c315cba35318f7ceb42d1fc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-7.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,17 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-struct dummy { };\n-struct true_type { struct dummy i[120]; };\n-\n-extern true_type y;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "fdfc924bfc54a084b4969855191c2753397082b2", "filename": "gcc/testsuite/g++.dg/abi/pr60336-8.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,15 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -Wabi=9\" }\n-\n-struct dummy { struct{} a[7][3]; };\n-\n-extern void test1 (struct dummy, ...);\n-extern void (*test2) (struct dummy, ...);\n-\n-void\n-foo ()\n-{\n-  struct dummy a0;\n-  test1 (a0, 42); // { dg-message \"empty\" }\n-  test2 (a0, 42); // { dg-message \"empty\" }\n-}"}, {"sha": "4ad333f6b9caf1f7d297617ae4b0f17708ea0fcd", "filename": "gcc/testsuite/g++.dg/abi/pr60336-9.C", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,28 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-struct A1 {}; struct A2 {};\n-struct B1 { A1 a; A2 b; }; struct B2 { A1 a; A2 b; };\n-struct C1 { B1 a; B2 b; }; struct C2 { B1 a; B2 b; };\n-struct D1 { C1 a; C2 b; }; struct D2 { C1 a; C2 b; };\n-struct E1 { D1 a; D2 b; }; struct E2 { D1 a; D2 b; };\n-struct F1 { E1 a; E2 b; }; struct F2 { E1 a; E2 b; };\n-struct G1 { F1 a; F2 b; }; struct G2 { F1 a; F2 b; };\n-struct H1 { G1 a; G2 b; }; struct H2 { G1 a; G2 b; };\n-struct I1 { H1 a; H2 b; }; struct I2 { H1 a; H2 b; };\n-struct J1 { I1 a; I2 b; }; struct J2 { I1 a; I2 b; };\n-struct dummy { J1 a; J2 b; };\n-\n-struct true_type { struct dummy i; };\n-\n-extern true_type y;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "1354fc497b55b9db41d3d9f6a735dfc52ff8a0be", "filename": "gcc/testsuite/g++.dg/abi/pr68355.C", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fbb073e9310d2e1f83a4124a24ec83db1b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C?ref=52fbb073e9310d2e1f83a4124a24ec83db1b6fd1", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n-// { dg-require-effective-target fpic }\n-\n-template<typename _Tp, _Tp __v>\n-struct integral_constant\n-{\n-  static constexpr _Tp value = __v;\n-  typedef _Tp value_type;\n-  typedef integral_constant<_Tp, __v> type;\n-  constexpr operator value_type() const { return value; }\n-};\n-\n-typedef integral_constant<bool, true> true_type;\n-extern void xxx (true_type c);\n-\n-void\n-yyy (void)\n-{\n-  true_type y;\n-  xxx (y);\n-}\n-\n-// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx17integral_constantIbLb1EE\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "f63e09145baf9f48f9707f49a56559cc9da87766", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -1,3 +1,7 @@\n+2016-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert Jonathan's empty ABI change from yesterday.\n+\n 2016-04-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69517"}, {"sha": "57024e40ec0de20263e3d23170a03a9706df650d", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -84,32 +84,13 @@\n # define _GLIBCXX_DEPRECATED\n #endif\n \n-#if __cplusplus\n-\n // Macros for ABI tag attributes.\n #ifndef _GLIBCXX_ABI_TAG_CXX11\n # define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ (\"cxx11\")))\n #endif\n \n-#if __GXX_ABI_VERSION >= 1010\n-namespace std\n-{\n-  inline namespace _V2 { }\n-}\n-# define _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES \\\n-  _GLIBCXX_END_NAMESPACE_VERSION \\\n-  namespace _V2 { \\\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_END_NAMESPACE_EMPTY_TYPES \\\n-  _GLIBCXX_END_NAMESPACE_VERSION \\\n-  } \\\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-# define _GLIBCXX_ABI_TAG_EMPTY __attribute ((__abi_tag__ (\"cxxempty\")))\n-#else\n-# define _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n-# define _GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n-# define _GLIBCXX_ABI_TAG_EMPTY\n-#endif\n+\n+#if __cplusplus\n \n // Macro for constexpr, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_CONSTEXPR"}, {"sha": "5748920cc78b312fb0c755e187f59d304bb177ab", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -663,26 +663,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_insert_multi_node(__node_type* __hint,\n \t\t\t   __hash_code __code, __node_type* __n);\n \n-      template<bool _Uniq, typename... _Args>\n-\ttypename enable_if<_Uniq, std::pair<iterator, bool>>::type\n-\t_M_emplace(__bool_constant<_Uniq>, _Args&&... __args);\n+      template<typename... _Args>\n+\tstd::pair<iterator, bool>\n+\t_M_emplace(std::true_type, _Args&&... __args);\n \n-      template<bool _Uniq, typename... _Args>\n-\ttypename enable_if<!_Uniq, iterator>::type\n-\t_M_emplace(__bool_constant<_Uniq> __uk, _Args&&... __args)\n-\t{\n-\t  return _M_emplace_hint(cend(), __uk, std::forward<_Args>(__args)...);\n-\t}\n+      template<typename... _Args>\n+\titerator\n+\t_M_emplace(std::false_type __uk, _Args&&... __args)\n+\t{ return _M_emplace(cend(), __uk, std::forward<_Args>(__args)...); }\n \n       // Emplace with hint, useless when keys are unique.\n       template<typename... _Args>\n \titerator\n-\t_M_emplace_hint(const_iterator, std::true_type __uk, _Args&&... __args)\n+\t_M_emplace(const_iterator, std::true_type __uk, _Args&&... __args)\n \t{ return _M_emplace(__uk, std::forward<_Args>(__args)...).first; }\n \n       template<typename... _Args>\n \titerator\n-\t_M_emplace_hint(const_iterator, std::false_type, _Args&&... __args);\n+\t_M_emplace(const_iterator, std::false_type, _Args&&... __args);\n \n       template<typename _Arg, typename _NodeGenerator>\n \tstd::pair<iterator, bool>\n@@ -714,10 +712,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  const _NodeGenerator&, std::false_type);\n \n       size_type\n-      _M_erase(const key_type&, std::true_type);\n+      _M_erase(std::true_type, const key_type&);\n \n       size_type\n-      _M_erase(const key_type&, std::false_type);\n+      _M_erase(std::false_type, const key_type&);\n \n       iterator\n       _M_erase(size_type __bkt, __node_base* __prev_n, __node_type* __n);\n@@ -733,8 +731,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \titerator\n \templace_hint(const_iterator __hint, _Args&&... __args)\n \t{\n-\t  return _M_emplace_hint(__hint, __unique_keys(),\n-\t\t\t\t std::forward<_Args>(__args)...);\n+\t  return _M_emplace(__hint, __unique_keys(),\n+\t\t\t    std::forward<_Args>(__args)...);\n \t}\n \n       // Insert member functions via inheritance.\n@@ -750,7 +748,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       erase(const key_type& __k)\n-      { return _M_erase(__k, __unique_keys()); }\n+      { return _M_erase(__unique_keys(), __k); }\n \n       iterator\n       erase(const_iterator, const_iterator);\n@@ -1504,12 +1502,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Alloc, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   typename _Traits>\n-    template<bool _Uniq, typename... _Args>\n+    template<typename... _Args>\n       auto\n       _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-      _M_emplace(__bool_constant<_Uniq>, _Args&&... __args)\n-      -> typename enable_if<_Uniq, pair<iterator, bool>>::type\n+      _M_emplace(std::true_type, _Args&&... __args)\n+      -> pair<iterator, bool>\n       {\n \t// First build the node to get access to the hash code\n \t__node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);\n@@ -1546,7 +1544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       auto\n       _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-      _M_emplace_hint(const_iterator __hint, std::false_type, _Args&&... __args)\n+      _M_emplace(const_iterator __hint, std::false_type, _Args&&... __args)\n       -> iterator\n       {\n \t// First build the node to get its hash code.\n@@ -1771,7 +1769,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     auto\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-    _M_erase(const key_type& __k, std::true_type)\n+    _M_erase(std::true_type, const key_type& __k)\n     -> size_type\n     {\n       __hash_code __code = this->_M_hash_code(__k);\n@@ -1795,7 +1793,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     auto\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-    _M_erase(const key_type& __k, std::false_type)\n+    _M_erase(std::false_type, const key_type& __k)\n     -> size_type\n     {\n       __hash_code __code = this->_M_hash_code(__k);"}, {"sha": "7a2ac92f83907b32f44037df6fa62be182138e52", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -906,8 +906,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tinsert(const_iterator __hint, _Pair&& __v)\n \t{\n \t  __hashtable& __h = this->_M_conjure_hashtable();\n-\t  return __h._M_emplace_hint(__hint, __unique_keys(),\n-\t\t\t\t     std::forward<_Pair>(__v));\n+\t  return __h._M_emplace(__hint, __unique_keys(),\n+\t\t\t\tstd::forward<_Pair>(__v));\n \t}\n    };\n "}, {"sha": "b22477e96b29acefa3f8c93b7be15945d83e6133", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -166,7 +166,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  __shared_ptr will release __p by calling __d(__p)\n        */\n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \tshared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n \t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n \n@@ -186,7 +185,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The last owner will call __d(__p)\n        */\n       template<typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \tshared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n \t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n "}, {"sha": "e844c9c91fe5cedf219afabd91836727f82c9af6", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -436,7 +436,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef _Sp_ebo_helper<1, _Alloc>\t_Alloc_base;\n \n       public:\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \t_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n \t: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)\n \t{ }\n@@ -455,7 +454,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_impl(__p, __d, _Alloc()) { }\n \n       // __d(__p) must not throw.\n-      _GLIBCXX_ABI_TAG_EMPTY\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n       : _M_impl(__p, __d, __a) { }\n \n@@ -586,7 +584,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Ptr, typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \t__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)\n \t{\n \t  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n@@ -903,7 +900,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \t__shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n \t: _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))\n \t{\n@@ -918,7 +914,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n         __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n \t: _M_ptr(0), _M_refcount(__p, __d, std::move(__a))\n \t{ }\n@@ -1044,7 +1039,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ __shared_ptr(__p, __d).swap(*this); }\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\t_GLIBCXX_ABI_TAG_EMPTY\n \tvoid\n         reset(_Tp1* __p, _Deleter __d, _Alloc __a)\n         { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }"}, {"sha": "fbd03a79e1ebdfd4624221e7d8d2e37a53406288", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -4270,7 +4270,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  is true then the assignment @c *i = @p __new_value is performed.\n   */\n   template<typename _ForwardIterator, typename _Predicate, typename _Tp>\n-    _GLIBCXX_ABI_TAG_EMPTY\n     void\n     replace_if(_ForwardIterator __first, _ForwardIterator __last,\n \t       _Predicate __pred, const _Tp& __new_value)"}, {"sha": "37ee5cc405328a5df727deb5a69418b65ae3cdcd", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -72,17 +72,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #if __cplusplus >= 201103L\n-\n-_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n-\n   /// piecewise_construct_t\n   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };\n \n   /// piecewise_construct\n   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n \n-_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n-\n   // Forward declarations.\n   template<typename...>\n     class tuple;"}, {"sha": "b1ff58a294b79d717052f7bbe70643c4f95ead4d", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -42,15 +42,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __is_erased_or_convertible\n       = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;\n \n-_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n-\n   /// [allocator.tag]\n   struct allocator_arg_t { explicit allocator_arg_t() = default; };\n \n   constexpr allocator_arg_t allocator_arg = allocator_arg_t();\n \n-_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n-\n   template<typename _Tp, typename _Alloc, typename = __void_t<>>\n     struct __uses_allocator_helper\n     : false_type { };\n@@ -69,15 +65,11 @@ _GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n \n   struct __uses_alloc_base { };\n \n-_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n-\n   struct __uses_alloc0 : __uses_alloc_base\n   {\n     struct _Sink { void operator=(const void*) { } } _M_a;\n   };\n \n-_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n-\n   template<typename _Alloc>\n     struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };\n "}, {"sha": "571d9468d7d4038002b64d28780d3bc07a402f80", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -120,44 +120,36 @@ namespace __gnu_pbds\n       basic_hash_table(T0 t0) : base_type(t0) { }\n \n     template<typename T0, typename T1>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1) : base_type(t0, t1) { }\n \n     template<typename T0, typename T1, typename T2>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2) { }\n \n     template<typename T0, typename T1, typename T2, typename T3>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3)\n       : base_type(t0, t1, t2, t3) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4)\n       : base_type(t0, t1, t2, t3, t4) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n       : base_type(t0, t1, t2, t3, t4, t5) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n       : base_type(t0, t1, t2, t3, t4, t5, t6) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6, typename T7>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7)\n       : base_type(t0, t1, t2, t3, t4, t5, t6, t7) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6, typename T7, typename T8>\n-      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6,\n \t\t       T7 t7, T8 t8)\n       : base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)"}, {"sha": "f3b2d87ab99b4f070f61dbc38c614abdbc76343a", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -47,5 +47,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n }"}, {"sha": "395094f8bbebc8a01a49c748d67dbdf35250cf57", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 892 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 889 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "8843ffea429ca235948520ded7389da16ed42a77", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 891 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 888 }\n }"}, {"sha": "19417fc2cef4209f8a0bed2cb0497f059524f7ba", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -45,5 +45,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n }"}, {"sha": "b3df4ae9d7d5f0cd30421aa81295450df597d41f", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }"}, {"sha": "e59d666307d2dbf7713f09d432d2af145336a63c", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f285ccb77a109ba94788f71ac83d4d46299ea9f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=9f285ccb77a109ba94788f71ac83d4d46299ea9f", "patch": "@@ -25,7 +25,7 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 343 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 324 }\n \n // \"template argument 1 is invalid\"\n // { dg-prune-output \"tuple:993\" }"}]}