{"sha": "acd94aaf191a1c09fe1154b58c7409a95846d6a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkOTRhYWYxOTFhMWMwOWZlMTE1NGI1OGM3NDA5YTk1ODQ2ZDZhNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-06T00:17:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-06T00:17:43Z"}, "message": "(SECONDARY_MEMORY_NEEDED_MODE): New macro.\n\nFrom-SVN: r6698", "tree": {"sha": "5ff287788f6befd41561b6830a90d00695be4228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ff287788f6befd41561b6830a90d00695be4228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acd94aaf191a1c09fe1154b58c7409a95846d6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd94aaf191a1c09fe1154b58c7409a95846d6a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd94aaf191a1c09fe1154b58c7409a95846d6a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd94aaf191a1c09fe1154b58c7409a95846d6a5/comments", "author": null, "committer": null, "parents": [{"sha": "64609742de886744acea45f6f00589b4a055eb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64609742de886744acea45f6f00589b4a055eb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64609742de886744acea45f6f00589b4a055eb2b"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "ccb46c41c57e28c67c34d4d708be810b7433bf3f", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd94aaf191a1c09fe1154b58c7409a95846d6a5/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd94aaf191a1c09fe1154b58c7409a95846d6a5/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=acd94aaf191a1c09fe1154b58c7409a95846d6a5", "patch": "@@ -554,6 +554,15 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n \n #define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) ((CLASS1) != (CLASS2))\n \n+/* Specify the mode to be used for memory when a secondary memory\n+   location is needed.  If MODE is floating-point, use it.  Otherwise,\n+   widen to a word like the default.  This is needed because we always\n+   store integers in FP registers in quadword format.  This whole\n+   area is very tricky! */\n+#define SECONDARY_MEMORY_NEEDED_MODE(MODE)\t\t\\\n+  (GET_MODE_CLASS (MODE) == MODE_FLOAT ? (MODE)\t\t\\\n+   : mode_for_size (BITS_PER_WORD, GET_MODE_CLASS (MODE), 0))\n+\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n "}]}