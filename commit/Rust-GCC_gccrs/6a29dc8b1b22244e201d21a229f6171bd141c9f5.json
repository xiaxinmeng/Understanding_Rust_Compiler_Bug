{"sha": "6a29dc8b1b22244e201d21a229f6171bd141c9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyOWRjOGIxYjIyMjQ0ZTIwMWQyMWEyMjlmNjE3MWJkMTQxYzlmNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-15T04:14:10Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-15T04:14:10Z"}, "message": "rtlanal.c (regs_set_between_p): Remove.\n\n\t* rtlanal.c (regs_set_between_p): Remove.\n\t* rtl.h: Remove the corresponding prototype.\n\nFrom-SVN: r93685", "tree": {"sha": "5e6a25a8f4422169f1a52a50f4a3ad63e1d3b06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e6a25a8f4422169f1a52a50f4a3ad63e1d3b06a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a29dc8b1b22244e201d21a229f6171bd141c9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a29dc8b1b22244e201d21a229f6171bd141c9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a29dc8b1b22244e201d21a229f6171bd141c9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a29dc8b1b22244e201d21a229f6171bd141c9f5/comments", "author": null, "committer": null, "parents": [{"sha": "bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc8fb000beb5e5308d4bd9f4a76ac63db7d09f4"}], "stats": {"total": 49, "additions": 3, "deletions": 46}, "files": [{"sha": "360e7d80bbedc0822d0806fa7ca807b3caccd9d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a29dc8b1b22244e201d21a229f6171bd141c9f5", "patch": "@@ -3,6 +3,9 @@\n \t* explow.c (copy_all_reg, stabilize): Remove.\n \t* expr.h: Remove the corresponding prototypes.\n \n+\t* rtlanal.c (regs_set_between_p): Remove.\n+\t* rtl.h: Remove the corresponding prototype.\n+\n 2005-01-14  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6k_nonimmediate_operand): Rename"}, {"sha": "1e212e72fbddd29b506d95b457a1b3c54c910695", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6a29dc8b1b22244e201d21a229f6171bd141c9f5", "patch": "@@ -1579,7 +1579,6 @@ extern int count_occurrences (rtx, rtx, int);\n extern int reg_referenced_p (rtx, rtx);\n extern int reg_used_between_p (rtx, rtx, rtx);\n extern int reg_set_between_p (rtx, rtx, rtx);\n-extern int regs_set_between_p (rtx, rtx, rtx);\n extern int commutative_operand_precedence (rtx);\n extern int swap_commutative_operands_p (rtx, rtx);\n extern int modified_between_p (rtx, rtx, rtx);"}, {"sha": "abfa7b2bccd9a271d7661d9d5e2f16a06ef77bed", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a29dc8b1b22244e201d21a229f6171bd141c9f5/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=6a29dc8b1b22244e201d21a229f6171bd141c9f5", "patch": "@@ -783,51 +783,6 @@ reg_set_p (rtx reg, rtx insn)\n   return set_of (reg, insn) != NULL_RTX;\n }\n \n-/* Similar to reg_set_between_p, but check all registers in X.  Return 0\n-   only if none of them are modified between START and END.  Do not\n-   consider non-registers one way or the other.  */\n-\n-int\n-regs_set_between_p (rtx x, rtx start, rtx end)\n-{\n-  enum rtx_code code = GET_CODE (x);\n-  const char *fmt;\n-  int i, j;\n-\n-  switch (code)\n-    {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n-    case CONST:\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n-    case PC:\n-    case CC0:\n-      return 0;\n-\n-    case REG:\n-      return reg_set_between_p (x, start, end);\n-\n-    default:\n-      break;\n-    }\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e' && regs_set_between_p (XEXP (x, i), start, end))\n-\treturn 1;\n-\n-      else if (fmt[i] == 'E')\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  if (regs_set_between_p (XVECEXP (x, i, j), start, end))\n-\t    return 1;\n-    }\n-\n-  return 0;\n-}\n-\n /* Similar to reg_set_between_p, but check all registers in X.  Return 0\n    only if none of them are modified between START and END.  Return 1 if\n    X contains a MEM; this routine does usememory aliasing.  */"}]}