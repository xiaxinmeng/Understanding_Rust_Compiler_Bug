{"sha": "f36348b34b4513bc127d1b740e48b72b69f17c01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2MzQ4YjM0YjQ1MTNiYzEyN2QxYjc0MGU0OGI3MmI2OWYxN2MwMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "oleg.endo@t-online.de", "date": "2011-11-13T23:00:10Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-11-13T23:00:10Z"}, "message": "re PR target/50694 (SH Target: SH2A little endian does not actually work)\n\n\tPR target/50694\n\t* config/sh/sh.h (IS_LITTLE_ENDIAN_OPTION, UNSUPPORTED_SH2A):\n\tNew macros.\n\t(DRIVER_SELF_SPECS): Use new macros to filter out\n\tunsupported options taking the default configuration into\n\taccount.\n\t* gcc.target/sh/pr21255-2-ml.c: Skip if -mb or -m5* is\n\tspecified.  Remove redundant runtime checks.\n\t* gcc.target/sh/20080410-1.c: Skip if -mb is specified.\n\tAllow for other than -m4.  Fix typos in comments.\n\nFrom-SVN: r181340", "tree": {"sha": "5dd66e42a0b55e446445720b2eb63087f660a8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd66e42a0b55e446445720b2eb63087f660a8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f36348b34b4513bc127d1b740e48b72b69f17c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36348b34b4513bc127d1b740e48b72b69f17c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36348b34b4513bc127d1b740e48b72b69f17c01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36348b34b4513bc127d1b740e48b72b69f17c01/comments", "author": {"login": "olegendo", "id": 1380209, "node_id": "MDQ6VXNlcjEzODAyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1380209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegendo", "html_url": "https://github.com/olegendo", "followers_url": "https://api.github.com/users/olegendo/followers", "following_url": "https://api.github.com/users/olegendo/following{/other_user}", "gists_url": "https://api.github.com/users/olegendo/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegendo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegendo/subscriptions", "organizations_url": "https://api.github.com/users/olegendo/orgs", "repos_url": "https://api.github.com/users/olegendo/repos", "events_url": "https://api.github.com/users/olegendo/events{/privacy}", "received_events_url": "https://api.github.com/users/olegendo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dfd583288b4d88cfb342132a87756de0379f200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfd583288b4d88cfb342132a87756de0379f200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfd583288b4d88cfb342132a87756de0379f200"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "e58ef3216b6ce2cea960e60b72a12011610daeb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f36348b34b4513bc127d1b740e48b72b69f17c01", "patch": "@@ -1,3 +1,12 @@\n+2011-11-13  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\tPR target/50694\n+\t* config/sh/sh.h (IS_LITTLE_ENDIAN_OPTION, UNSUPPORTED_SH2A):\n+\tNew macros.\n+\t(DRIVER_SELF_SPECS): Use new macros to filter out\n+\tunsupported options taking the default configuration into\n+\taccount.\n+\n 2011-11-13  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/install.texi (Specific): Fix anchor for"}, {"sha": "1b98745866e594fde24fbfa9303314def703df52", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f36348b34b4513bc127d1b740e48b72b69f17c01", "patch": "@@ -417,7 +417,23 @@ do { \\\n #define SH_DIV_STR_FOR_SIZE \"call\"\n #endif\n \n-#define DRIVER_SELF_SPECS \"%{m2a:%{ml:%eSH2a does not support little-endian}}\"\n+/* SH2A does not support little-endian.  Catch such combinations\n+   taking into account the default configuration.  */\n+#if TARGET_ENDIAN_DEFAULT == MASK_BIG_ENDIAN\n+#define IS_LITTLE_ENDIAN_OPTION \"%{ml:\"\n+#else\n+#define IS_LITTLE_ENDIAN_OPTION \"%{!mb:\"\n+#endif\n+ \n+#if TARGET_CPU_DEFAULT & MASK_HARD_SH2A\n+#define UNSUPPORTED_SH2A IS_LITTLE_ENDIAN_OPTION \\\n+\"%{m2a*|!m1:%{!m2*:%{!m3*:%{!m4*:{!m5*:%eSH2a does not support little-endian}}}}}}\"\n+#else\n+#define UNSUPPORTED_SH2A IS_LITTLE_ENDIAN_OPTION \\\n+\"%{m2a*:%eSH2a does not support little-endian}}\"\n+#endif\n+\n+#define DRIVER_SELF_SPECS UNSUPPORTED_SH2A\n \n #define ASSEMBLER_DIALECT assembler_dialect\n "}, {"sha": "7fa24e782bbc4cd91971dae684ba5fd79bfd8d3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f36348b34b4513bc127d1b740e48b72b69f17c01", "patch": "@@ -1,3 +1,10 @@\n+2011-11-13  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\t* gcc.target/sh/pr21255-2-ml.c: Skip if -mb or -m5* is\n+\tspecified.  Remove redundant runtime checks.\n+\t* gcc.target/sh/20080410-1.c: Skip if -mb is specified.\n+\tAllow for other than -m4.  Fix typos in comments.\n+\n 2011-11-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/986"}, {"sha": "63e517e94d581ba0e0ee7b8fc4ce39451f9d7c11", "filename": "gcc/testsuite/gcc.target/sh/20080410-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c?ref=f36348b34b4513bc127d1b740e48b72b69f17c01", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do compile { target \"sh-*-*\" } } */\n-/* { dg-options \"-O0 -m4 -ml\" } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } \"-mb\" \"\" }  */\n /* { dg-final { scan-assembler-not \"add\\tr0,r0\" } } */\n \n-/* This test checks that chain reloads conflict.  I they don't\n+/* This test checks chain reloads conflicts.  If they don't\n    conflict, the same hard register R0 is used for the both reloads\n    but in this case the second reload needs an intermediate register\n    (which is the reload register).  As the result we have the"}, {"sha": "570e7dd0b50c99bc34f976b1479ce81b55d70c7f", "filename": "gcc/testsuite/gcc.target/sh/pr21255-2-ml.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36348b34b4513bc127d1b740e48b72b69f17c01/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-2-ml.c?ref=f36348b34b4513bc127d1b740e48b72b69f17c01", "patch": "@@ -1,19 +1,13 @@\n /* { dg-do compile { target \"sh*-*-*\" } } */\n-/* { dg-options \"-ml -O2 -fomit-frame-pointer\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-mb\" && \"-m5*\"} { \"\" } }  */\n /* { dg-final { scan-assembler \"mov @\\\\(4,r.\\\\),r.; mov @r.,r.\" } } */\n double d;\n \n double\n f (void)\n {\n   double r;\n-\n-/* If -mb from the target options is passed after -ml from dg-options, we\n-   end up with th reverse endianness.  */\n-#if TARGET_SHMEDIA || defined (__BIG_ENDIAN__)\n-  asm (\"mov @(4,r1),r4; mov @r1,r3\");\n-#else\n   asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=&r\" (r) : \"m\" (d));\n-#endif\n   return r;\n }"}]}