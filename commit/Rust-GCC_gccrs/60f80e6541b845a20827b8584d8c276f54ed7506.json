{"sha": "60f80e6541b845a20827b8584d8c276f54ed7506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmODBlNjU0MWI4NDVhMjA4MjdiODU4NGQ4YzI3NmY1NGVkNzUwNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-07-21T17:58:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-21T17:58:48Z"}, "message": "call.c (add_candidates): Move decls to initialization.\n\n\t* call.c (add_candidates): Move decls to initialization.  Don't\n\tuse !!.\n\nFrom-SVN: r250434", "tree": {"sha": "91dec1d5a2681c5be3e145ee23ce6752b62308f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91dec1d5a2681c5be3e145ee23ce6752b62308f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60f80e6541b845a20827b8584d8c276f54ed7506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f80e6541b845a20827b8584d8c276f54ed7506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60f80e6541b845a20827b8584d8c276f54ed7506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f80e6541b845a20827b8584d8c276f54ed7506/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "048f0471d203ae4ce74af80b32e4b40ec1d1f1f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048f0471d203ae4ce74af80b32e4b40ec1d1f1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048f0471d203ae4ce74af80b32e4b40ec1d1f1f6"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "7adedbe34f81b3b0d913882ba1e73218f4accc14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f80e6541b845a20827b8584d8c276f54ed7506/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f80e6541b845a20827b8584d8c276f54ed7506/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60f80e6541b845a20827b8584d8c276f54ed7506", "patch": "@@ -1,3 +1,8 @@\n+2017-07-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* call.c (add_candidates): Move decls to initialization.  Don't\n+\tuse !!.\n+\n 2017-07-20  Nathan Sidwell  <nathan@acm.org>\n \n \tRemove TYPE_METHODS."}, {"sha": "e74d48daa8b1dcc539bad19fdb3ee4afbdef2ddb", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f80e6541b845a20827b8584d8c276f54ed7506/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f80e6541b845a20827b8584d8c276f54ed7506/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=60f80e6541b845a20827b8584d8c276f54ed7506", "patch": "@@ -5423,8 +5423,8 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n {\n   tree ctype;\n   const vec<tree, va_gc> *non_static_args;\n-  bool check_list_ctor;\n-  bool check_converting;\n+  bool check_list_ctor = false;\n+  bool check_converting = false;\n   unification_kind_t strict;\n \n   if (!fns)\n@@ -5435,7 +5435,7 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n   if (DECL_CONV_FN_P (fn))\n     {\n       check_list_ctor = false;\n-      check_converting = !!(flags & LOOKUP_ONLYCONVERTING);\n+      check_converting = (flags & LOOKUP_ONLYCONVERTING) != 0;\n       if (flags & LOOKUP_NO_CONVERSION)\n \t/* We're doing return_type(x).  */\n \tstrict = DEDUCE_CONV;\n@@ -5452,18 +5452,13 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n     {\n       if (DECL_CONSTRUCTOR_P (fn))\n \t{\n-\t  check_list_ctor = !!(flags & LOOKUP_LIST_ONLY);\n+\t  check_list_ctor = (flags & LOOKUP_LIST_ONLY) != 0;\n \t  /* For list-initialization we consider explicit constructors\n \t     and complain if one is chosen.  */\n \t  check_converting\n \t    = ((flags & (LOOKUP_ONLYCONVERTING|LOOKUP_LIST_INIT_CTOR))\n \t       == LOOKUP_ONLYCONVERTING);\n \t}\n-      else\n-\t{\n-\t  check_list_ctor = false;\n-\t  check_converting = false;\n-\t}\n       strict = DEDUCE_CALL;\n       ctype = conversion_path ? BINFO_TYPE (conversion_path) : NULL_TREE;\n     }\n@@ -5476,20 +5471,20 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n \n   for (lkp_iterator iter (fns); iter; ++iter)\n     {\n-      tree fn_first_arg;\n-      const vec<tree, va_gc> *fn_args;\n-\n       fn = *iter;\n \n       if (check_converting && DECL_NONCONVERTING_P (fn))\n \tcontinue;\n       if (check_list_ctor && !is_list_ctor (fn))\n \tcontinue;\n \n-      /* Figure out which set of arguments to use.  */\n+      tree fn_first_arg = NULL_TREE;\n+      const vec<tree, va_gc> *fn_args = args;\n+\n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n \t{\n-\t  /* If this function is a non-static member and we didn't get an\n+\t  /* Figure out where the object arg comes from.  If this\n+\t     function is a non-static member and we didn't get an\n \t     implicit object argument, move it out of args.  */\n \t  if (first_arg == NULL_TREE)\n \t    {\n@@ -5506,12 +5501,6 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n \t  fn_first_arg = first_arg;\n \t  fn_args = non_static_args;\n \t}\n-      else\n-\t{\n-\t  /* Otherwise, just use the list of arguments provided.  */\n-\t  fn_first_arg = NULL_TREE;\n-\t  fn_args = args;\n-\t}\n \n       if (TREE_CODE (fn) == TEMPLATE_DECL)\n \tadd_template_candidate (candidates,"}]}