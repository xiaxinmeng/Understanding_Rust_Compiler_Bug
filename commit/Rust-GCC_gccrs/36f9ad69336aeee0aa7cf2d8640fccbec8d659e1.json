{"sha": "36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmOWFkNjkzMzZhZWVlMGFhN2NmMmQ4NjQwZmNjYmVjOGQ2NTllMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-06-06T16:06:05Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-06-06T16:06:05Z"}, "message": "[3/3][RTL ifcvt] PR middle-end/37780: Conditional expression with __builtin_clz() should be optimized out\n\n\tPR middle-end/37780\n\t* ifcvt.c (noce_try_ifelse_collapse): New function.\n\tDeclare prototype.\n\t(noce_process_if_block): Call noce_try_ifelse_collapse.\n\t* simplify-rtx.c (simplify_cond_clz_ctz): New function.\n\t(simplify_ternary_operation): Use the above to simplify\n\tconditional CLZ/CTZ expressions.\n\n\t* gcc.c-torture/execute/pr37780.c: New test.\n\t* gcc.target/aarch64/pr37780_1.c: Likewise.\n\t* gcc.target/arm/pr37780_1.c: Likewise.\n\nFrom-SVN: r237141", "tree": {"sha": "bcfb07a9b834a240baa5c8658d3bcc74e6499f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfb07a9b834a240baa5c8658d3bcc74e6499f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8536e2b9f96f42d7f12f13254300476debd283a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8536e2b9f96f42d7f12f13254300476debd283a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8536e2b9f96f42d7f12f13254300476debd283a"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "3e6879849f26679d7617ae3f85bbd6356bf2906c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -1,3 +1,13 @@\n+2016-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR middle-end/37780\n+\t* ifcvt.c (noce_try_ifelse_collapse): New function.\n+\tDeclare prototype.\n+\t(noce_process_if_block): Call noce_try_ifelse_collapse.\n+\t* simplify-rtx.c (simplify_cond_clz_ctz): New function.\n+\t(simplify_ternary_operation): Use the above to simplify\n+\tconditional CLZ/CTZ expressions.\n+\n 2016-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR middle-end/37780"}, {"sha": "05fac71409d401a08d01b7dc7cf164613f8477c4", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -817,6 +817,7 @@ struct noce_if_info\n \n static rtx noce_emit_store_flag (struct noce_if_info *, rtx, int, int);\n static int noce_try_move (struct noce_if_info *);\n+static int noce_try_ifelse_collapse (struct noce_if_info *);\n static int noce_try_store_flag (struct noce_if_info *);\n static int noce_try_addcc (struct noce_if_info *);\n static int noce_try_store_flag_constants (struct noce_if_info *);\n@@ -1120,6 +1121,37 @@ noce_try_move (struct noce_if_info *if_info)\n   return FALSE;\n }\n \n+/* Try forming an IF_THEN_ELSE (cond, b, a) and collapsing that\n+   through simplify_rtx.  Sometimes that can eliminate the IF_THEN_ELSE.\n+   If that is the case, emit the result into x.  */\n+\n+static int\n+noce_try_ifelse_collapse (struct noce_if_info * if_info)\n+{\n+  if (!noce_simple_bbs (if_info))\n+    return FALSE;\n+\n+  machine_mode mode = GET_MODE (if_info->x);\n+  rtx if_then_else = simplify_gen_ternary (IF_THEN_ELSE, mode, mode,\n+\t\t\t\t\t    if_info->cond, if_info->b,\n+\t\t\t\t\t    if_info->a);\n+\n+  if (GET_CODE (if_then_else) == IF_THEN_ELSE)\n+    return FALSE;\n+\n+  rtx_insn *seq;\n+  start_sequence ();\n+  noce_emit_move_insn (if_info->x, if_then_else);\n+  seq = end_ifcvt_sequence (if_info);\n+  if (!seq)\n+    return FALSE;\n+\n+  emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t  INSN_LOCATION (if_info->insn_a));\n+  return TRUE;\n+}\n+\n+\n /* Convert \"if (test) x = 1; else x = 0\".\n \n    Only try 0 and STORE_FLAG_VALUE here.  Other combinations will be\n@@ -3497,6 +3529,8 @@ noce_process_if_block (struct noce_if_info *if_info)\n \n   if (noce_try_move (if_info))\n     goto success;\n+  if (noce_try_ifelse_collapse (if_info))\n+    goto success;\n   if (noce_try_store_flag (if_info))\n     goto success;\n   if (noce_try_bitop (if_info))"}, {"sha": "2b649fa405b9c7b0869667ba688073abd4daa93b", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -5267,6 +5267,49 @@ simplify_const_relational_operation (enum rtx_code code,\n \n   return 0;\n }\n+\n+/* Recognize expressions of the form (X CMP 0) ? VAL : OP (X)\n+   where OP is CLZ or CTZ and VAL is the value from CLZ_DEFINED_VALUE_AT_ZERO\n+   or CTZ_DEFINED_VALUE_AT_ZERO respectively and return OP (X) if the expression\n+   can be simplified to that or NULL_RTX if not.\n+   Assume X is compared against zero with CMP_CODE and the true\n+   arm is TRUE_VAL and the false arm is FALSE_VAL.  */\n+\n+static rtx\n+simplify_cond_clz_ctz (rtx x, rtx_code cmp_code, rtx true_val, rtx false_val)\n+{\n+  if (cmp_code != EQ && cmp_code != NE)\n+    return NULL_RTX;\n+\n+  /* Result on X == 0 and X !=0 respectively.  */\n+  rtx on_zero, on_nonzero;\n+  if (cmp_code == EQ)\n+    {\n+      on_zero = true_val;\n+      on_nonzero = false_val;\n+    }\n+  else\n+    {\n+      on_zero = false_val;\n+      on_nonzero = true_val;\n+    }\n+\n+  rtx_code op_code = GET_CODE (on_nonzero);\n+  if ((op_code != CLZ && op_code != CTZ)\n+      || !rtx_equal_p (XEXP (on_nonzero, 0), x)\n+      || !CONST_INT_P (on_zero))\n+    return NULL_RTX;\n+\n+  HOST_WIDE_INT op_val;\n+  machine_mode mode = GET_MODE (on_nonzero);\n+  if (((op_code == CLZ && CLZ_DEFINED_VALUE_AT_ZERO (mode, op_val))\n+\t|| (op_code == CTZ && CTZ_DEFINED_VALUE_AT_ZERO (mode, op_val)))\n+      && op_val == INTVAL (on_zero))\n+    return on_nonzero;\n+\n+  return NULL_RTX;\n+}\n+\n \f\n /* Simplify CODE, an operation with result mode MODE and three operands,\n    OP0, OP1, and OP2.  OP0_MODE was the mode of OP0 before it became\n@@ -5400,6 +5443,19 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t    }\n \t}\n \n+      /* Convert x == 0 ? N : clz (x) into clz (x) when\n+\t CLZ_DEFINED_VALUE_AT_ZERO is defined to N for the mode of x.\n+\t Similarly for ctz (x).  */\n+      if (COMPARISON_P (op0) && !side_effects_p (op0)\n+\t  && XEXP (op0, 1) == const0_rtx)\n+\t{\n+\t  rtx simplified\n+\t    = simplify_cond_clz_ctz (XEXP (op0, 0), GET_CODE (op0),\n+\t\t\t\t     op1, op2);\n+\t  if (simplified)\n+\t    return simplified;\n+\t}\n+\n       if (COMPARISON_P (op0) && ! side_effects_p (op0))\n \t{\n \t  machine_mode cmp_mode = (GET_MODE (XEXP (op0, 0)) == VOIDmode"}, {"sha": "b68744b92f3f924a1077efc03fb822d26ac7f5a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -1,3 +1,10 @@\n+2016-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR middle-end/37780\n+\t* gcc.c-torture/execute/pr37780.c: New test.\n+\t* gcc.target/aarch64/pr37780_1.c: Likewise.\n+\t* gcc.target/arm/pr37780_1.c: Likewise.\n+\n 2016-06-06  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/attr-may-alias-1.c: New test."}, {"sha": "a9eca68786ec8bbf98f010da22302d7c0297a766", "filename": "gcc/testsuite/gcc.c-torture/execute/pr37780.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37780.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37780.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37780.c?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -0,0 +1,49 @@\n+/* PR middle-end/37780.  */\n+\n+#define VAL (8 * sizeof (int))\n+\n+int __attribute__ ((noinline, noclone))\n+fooctz (int i)\n+{\n+  return (i == 0) ? VAL : __builtin_ctz (i);\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+fooctz2 (int i)\n+{\n+  return (i != 0) ? __builtin_ctz (i) : VAL;\n+}\n+\n+unsigned int __attribute__ ((noinline, noclone))\n+fooctz3 (unsigned int i)\n+{\n+  return (i > 0) ?  __builtin_ctz (i) : VAL;\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+fooclz (int i)\n+{\n+  return (i == 0) ? VAL : __builtin_clz (i);\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+fooclz2 (int i)\n+{\n+  return (i != 0) ? __builtin_clz (i) : VAL;\n+}\n+\n+unsigned int __attribute__ ((noinline, noclone))\n+fooclz3 (unsigned int i)\n+{\n+  return (i > 0) ? __builtin_clz (i) : VAL;\n+}\n+\n+int\n+main (void)\n+{\n+  if (fooctz (0) != VAL || fooctz2 (0) != VAL || fooctz3 (0) != VAL\n+      || fooclz (0) != VAL || fooclz2 (0) != VAL || fooclz3 (0) != VAL)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "97027e7479cfe284322249f8a4edc7d3da8ff644", "filename": "gcc/testsuite/gcc.target/aarch64/pr37780_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr37780_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr37780_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr37780_1.c?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -0,0 +1,46 @@\n+/* Test that we can remove the conditional move due to CLZ\n+   and CTZ being defined at zero.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+fooctz (int i)\n+{\n+  return (i == 0) ? 32 : __builtin_ctz (i);\n+}\n+\n+int\n+fooctz2 (int i)\n+{\n+  return (i != 0) ? __builtin_ctz (i) : 32;\n+}\n+\n+unsigned int\n+fooctz3 (unsigned int i)\n+{\n+  return (i > 0) ?  __builtin_ctz (i) : 32;\n+}\n+\n+/* { dg-final { scan-assembler-times \"rbit\\t*\" 3 } } */\n+\n+int\n+fooclz (int i)\n+{\n+  return (i == 0) ? 32 : __builtin_clz (i);\n+}\n+\n+int\n+fooclz2 (int i)\n+{\n+  return (i != 0) ? __builtin_clz (i) : 32;\n+}\n+\n+unsigned int\n+fooclz3 (unsigned int i)\n+{\n+  return (i > 0) ? __builtin_clz (i) : 32;\n+}\n+\n+/* { dg-final { scan-assembler-times \"clz\\t\" 6 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t.*0\" } } */"}, {"sha": "b954fe5ceb89690feaa1098d0471b518bcbe0631", "filename": "gcc/testsuite/gcc.target/arm/pr37780_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr37780_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f9ad69336aeee0aa7cf2d8640fccbec8d659e1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr37780_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr37780_1.c?ref=36f9ad69336aeee0aa7cf2d8640fccbec8d659e1", "patch": "@@ -0,0 +1,47 @@\n+/* Test that we can remove the conditional move due to CLZ\n+   being defined at zero.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v5_ok } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+fooctz (int i)\n+{\n+  return (i == 0) ? 32 : __builtin_ctz (i);\n+}\n+\n+int\n+fooctz2 (int i)\n+{\n+  return (i != 0) ? __builtin_ctz (i) : 32;\n+}\n+\n+unsigned int\n+fooctz3 (unsigned int i)\n+{\n+  return (i > 0) ?  __builtin_ctz (i) : 32;\n+}\n+\n+/* { dg-final { scan-assembler-times \"rbit\\t*\" 3 } } */\n+\n+int\n+fooclz (int i)\n+{\n+  return (i == 0) ? 32 : __builtin_clz (i);\n+}\n+\n+int\n+fooclz2 (int i)\n+{\n+  return (i != 0) ? __builtin_clz (i) : 32;\n+}\n+\n+unsigned int\n+fooclz3 (unsigned int i)\n+{\n+  return (i > 0) ? __builtin_clz (i) : 32;\n+}\n+\n+/* { dg-final { scan-assembler-times \"clz\\t\" 6 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t.*0\" } } */"}]}