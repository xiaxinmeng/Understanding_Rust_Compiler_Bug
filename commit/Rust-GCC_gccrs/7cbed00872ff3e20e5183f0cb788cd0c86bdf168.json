{"sha": "7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiZWQwMDg3MmZmM2UyMGU1MTgzZjBjYjc4OGNkMGM4NmJkZjE2OA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-01T08:13:09Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-01T08:13:09Z"}, "message": "[Patch 1/7] Hookize *_BY_PIECES_P\n\ngcc/\n\n\t* target.def (use_by_pieces_infrastructure_p): New.\n\t* doc/tm.texi.in (MOVE_BY_PIECES_P): Describe that this macro\n\tis deprecated.\n\t(STORE_BY_PIECES_P): Likewise.\n\t(CLEAR_BY_PIECES_P): Likewise.\n\t(SET_BY_PIECES_P): Likewise.\n\t(TARGET_MOVE_BY_PIECES_PROFITABLE_P): Add hook.\n\t* doc/tm.texi: Regenerate.\n\t* expr.c (MOVE_BY_PIECES_P): Rewrite in terms of\n\tTARGET_USE_BY_PIECES_INFRASTRUCTURE_P.\n\t(STORE_BY_PIECES_P): Likewise.\n\t(CLEAR_BY_PIECES_P): Likewise.\n\t(SET_BY_PIECES_P): Likewise.\n\t(STORE_MAX_PIECES): Move to...\n\t* defaults.h (STORE_MAX_PIECES): ...here.\n\t* targhooks.c (get_move_ratio): New.\n\t(default_use_by_pieces_infrastructure_p): Likewise.\n\t* targhooks.h (default_use_by_pieces_infrastructure_p): New.\n\t* target.h (by_pieces_operation): New.\n\nFrom-SVN: r216996", "tree": {"sha": "c478897b6815f2a9b6b21d0aca73130690f0b5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c478897b6815f2a9b6b21d0aca73130690f0b5fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "240decf782968d137494cc9850fad5b310192c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240decf782968d137494cc9850fad5b310192c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240decf782968d137494cc9850fad5b310192c38"}], "stats": {"total": 222, "additions": 207, "deletions": 15}, "files": [{"sha": "7ed09eb093e4324e7cc5fc511c6866eacb513958", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -1,3 +1,25 @@\n+2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* target.def (use_by_pieces_infrastructure_p): New.\n+\t* doc/tm.texi.in (MOVE_BY_PIECES_P): Describe that this macro\n+\tis deprecated.\n+\t(STORE_BY_PIECES_P): Likewise.\n+\t(CLEAR_BY_PIECES_P): Likewise.\n+\t(SET_BY_PIECES_P): Likewise.\n+\t(TARGET_MOVE_BY_PIECES_PROFITABLE_P): Add hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* expr.c (MOVE_BY_PIECES_P): Rewrite in terms of\n+\tTARGET_USE_BY_PIECES_INFRASTRUCTURE_P.\n+\t(STORE_BY_PIECES_P): Likewise.\n+\t(CLEAR_BY_PIECES_P): Likewise.\n+\t(SET_BY_PIECES_P): Likewise.\n+\t(STORE_MAX_PIECES): Move to...\n+\t* defaults.h (STORE_MAX_PIECES): ...here.\n+\t* targhooks.c (get_move_ratio): New.\n+\t(default_use_by_pieces_infrastructure_p): Likewise.\n+\t* targhooks.h (default_use_by_pieces_infrastructure_p): New.\n+\t* target.h (by_pieces_operation): New.\n+\n 2014-10-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/63702"}, {"sha": "d2609e761c2e91ad24fd5472a81c2ca6e5c257a4", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -1006,6 +1006,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MOVE_MAX_PIECES   MOVE_MAX\n #endif\n \n+/* STORE_MAX_PIECES is the number of bytes at a time that we can\n+   store efficiently.  Due to internal GCC limitations, this is\n+   MOVE_MAX_PIECES limited by the number of bytes GCC can represent\n+   for an immediate constant.  */\n+\n+#ifndef STORE_MAX_PIECES\n+#define STORE_MAX_PIECES  MIN (MOVE_MAX_PIECES, 2 * sizeof (HOST_WIDE_INT))\n+#endif\n+\n #ifndef MAX_MOVE_MAX\n #define MAX_MOVE_MAX MOVE_MAX\n #endif"}, {"sha": "cfb838897aa65d8045851a62cfe3562fe83444fe", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -6128,8 +6128,45 @@ A C expression used to determine whether @code{move_by_pieces} will be used to\n copy a chunk of memory, or whether some other block move mechanism\n will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{MOVE_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_USE_BY_PIECES_INFRASTRUCTURE_P (unsigned int @var{size}, unsigned int @var{alignment}, enum by_pieces_operation @var{op}, bool @var{speed_p})\n+GCC will attempt several strategies when asked to copy between\n+two areas of memory, or to set, clear or store to memory, for example\n+when copying a @code{struct}. The @code{by_pieces} infrastructure\n+implements such memory operations as a sequence of load, store or move\n+insns.  Alternate strategies are to expand the\n+@code{movmem} or @code{setmem} optabs, to emit a library call, or to emit\n+unit-by-unit, loop-based operations.\n+\n+This target hook should return true if, for a memory operation with a\n+given @var{size} and @var{alignment}, using the @code{by_pieces}\n+infrastructure is expected to result in better code generation.\n+Both @var{size} and @var{alignment} are measured in terms of storage\n+units.\n+\n+The parameter @var{op} is one of: @code{CLEAR_BY_PIECES},\n+@code{MOVE_BY_PIECES}, @code{SET_BY_PIECES}, @code{STORE_BY_PIECES}.\n+These describe the type of memory operation under consideration.\n+\n+The parameter @var{speed_p} is true if the code is currently being\n+optimized for speed rather than size.\n+\n+Returning true for higher values of @var{size} can improve code generation\n+for speed if the target does not provide an implementation of the\n+@code{movmem} or @code{setmem} standard names, if the @code{movmem} or\n+@code{setmem} implementation would be more expensive than a sequence of\n+insns, or if the overhead of a library call would dominate that of\n+the body of the memory operation.\n+\n+Returning true for higher values of @code{size} may also cause an increase\n+in code size, for example where the number of insns emitted to perform a\n+move would be greater than that of a library call.\n+@end deftypefn\n+\n @defmac MOVE_MAX_PIECES\n A C expression used by @code{move_by_pieces} to determine the largest unit\n a load or store used to copy memory is.  Defaults to @code{MOVE_MAX}.\n@@ -6152,6 +6189,9 @@ A C expression used to determine whether @code{clear_by_pieces} will be used\n to clear a chunk of memory, or whether some other block clear mechanism\n will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{CLEAR_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac SET_RATIO (@var{speed})\n@@ -6174,6 +6214,9 @@ other mechanism will be used.  Used by @code{__builtin_memset} when\n storing values other than constant zero.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{SET_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac STORE_BY_PIECES_P (@var{size}, @var{alignment})\n@@ -6183,6 +6226,9 @@ other mechanism will be used.  Used by @code{__builtin_strcpy} when\n called with a constant source string.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{MOVE_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac USE_LOAD_POST_INCREMENT (@var{mode})"}, {"sha": "3f66543753fe023f6bd6d540ef29f4d826837b3c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -4605,8 +4605,13 @@ A C expression used to determine whether @code{move_by_pieces} will be used to\n copy a chunk of memory, or whether some other block move mechanism\n will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{MOVE_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n+@hook TARGET_USE_BY_PIECES_INFRASTRUCTURE_P\n+\n @defmac MOVE_MAX_PIECES\n A C expression used by @code{move_by_pieces} to determine the largest unit\n a load or store used to copy memory is.  Defaults to @code{MOVE_MAX}.\n@@ -4629,6 +4634,9 @@ A C expression used to determine whether @code{clear_by_pieces} will be used\n to clear a chunk of memory, or whether some other block clear mechanism\n will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{CLEAR_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac SET_RATIO (@var{speed})\n@@ -4651,6 +4659,9 @@ other mechanism will be used.  Used by @code{__builtin_memset} when\n storing values other than constant zero.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{SET_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac STORE_BY_PIECES_P (@var{size}, @var{alignment})\n@@ -4660,6 +4671,9 @@ other mechanism will be used.  Used by @code{__builtin_strcpy} when\n called with a constant source string.\n Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n than @code{MOVE_RATIO}.\n+\n+This macro is deprecated.  New ports should implement\n+@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n @end defmac\n \n @defmac USE_LOAD_POST_INCREMENT (@var{mode})"}, {"sha": "ef851777c47fddc089b096d2ee527efb33aa90d3", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -171,32 +171,32 @@ static void write_complex_part (rtx, rtx, bool);\n    to perform a structure copy.  */\n #ifndef MOVE_BY_PIECES_P\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN, MOVE_MAX_PIECES + 1) \\\n-   < (unsigned int) MOVE_RATIO (optimize_insn_for_speed_p ()))\n+  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, MOVE_BY_PIECES, \\\n+\t\t\t\t\t   optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether clear_by_pieces should be\n    called to clear storage.  */\n #ifndef CLEAR_BY_PIECES_P\n #define CLEAR_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) CLEAR_RATIO (optimize_insn_for_speed_p ()))\n+  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, CLEAR_BY_PIECES, \\\n+\t\t\t\t\t   optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether store_by_pieces should be\n    called to \"memset\" storage with byte values other than zero.  */\n #ifndef SET_BY_PIECES_P\n #define SET_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) SET_RATIO (optimize_insn_for_speed_p ()))\n+  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, SET_BY_PIECES, \\\n+\t\t\t\t\t   optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether store_by_pieces should be\n    called to \"memcpy\" storage when the source is a constant string.  */\n #ifndef STORE_BY_PIECES_P\n #define STORE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) MOVE_RATIO (optimize_insn_for_speed_p ()))\n+  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, STORE_BY_PIECES, \\\n+\t\t\t\t\t   optimize_insn_for_speed_p ()))\n #endif\n \f\n /* This is run to set up which modes can be used\n@@ -827,13 +827,6 @@ widest_int_mode_for_size (unsigned int size)\n   return mode;\n }\n \n-/* STORE_MAX_PIECES is the number of bytes at a time that we can\n-   store efficiently.  Due to internal GCC limitations, this is\n-   MOVE_MAX_PIECES limited by the number of bytes GCC can represent\n-   for an immediate constant.  */\n-\n-#define STORE_MAX_PIECES  MIN (MOVE_MAX_PIECES, 2 * sizeof (HOST_WIDE_INT))\n-\n /* Determine whether the LEN bytes can be moved by using several move\n    instructions.  Return nonzero if a call to move_by_pieces should\n    succeed.  */"}, {"sha": "23cae25cafe3192712ad8dd6299443a17c62f011", "filename": "gcc/target.def", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -3049,6 +3049,43 @@ are the same as to this target hook.\",\n  int, (machine_mode mode, reg_class_t rclass, bool in),\n  default_memory_move_cost)\n \n+DEFHOOK\n+(use_by_pieces_infrastructure_p,\n+ \"GCC will attempt several strategies when asked to copy between\\n\\\n+two areas of memory, or to set, clear or store to memory, for example\\n\\\n+when copying a @code{struct}. The @code{by_pieces} infrastructure\\n\\\n+implements such memory operations as a sequence of load, store or move\\n\\\n+insns.  Alternate strategies are to expand the\\n\\\n+@code{movmem} or @code{setmem} optabs, to emit a library call, or to emit\\n\\\n+unit-by-unit, loop-based operations.\\n\\\n+\\n\\\n+This target hook should return true if, for a memory operation with a\\n\\\n+given @var{size} and @var{alignment}, using the @code{by_pieces}\\n\\\n+infrastructure is expected to result in better code generation.\\n\\\n+Both @var{size} and @var{alignment} are measured in terms of storage\\n\\\n+units.\\n\\\n+\\n\\\n+The parameter @var{op} is one of: @code{CLEAR_BY_PIECES},\\n\\\n+@code{MOVE_BY_PIECES}, @code{SET_BY_PIECES}, @code{STORE_BY_PIECES}.\\n\\\n+These describe the type of memory operation under consideration.\\n\\\n+\\n\\\n+The parameter @var{speed_p} is true if the code is currently being\\n\\\n+optimized for speed rather than size.\\n\\\n+\\n\\\n+Returning true for higher values of @var{size} can improve code generation\\n\\\n+for speed if the target does not provide an implementation of the\\n\\\n+@code{movmem} or @code{setmem} standard names, if the @code{movmem} or\\n\\\n+@code{setmem} implementation would be more expensive than a sequence of\\n\\\n+insns, or if the overhead of a library call would dominate that of\\n\\\n+the body of the memory operation.\\n\\\n+\\n\\\n+Returning true for higher values of @code{size} may also cause an increase\\n\\\n+in code size, for example where the number of insns emitted to perform a\\n\\\n+move would be greater than that of a library call.\",\n+ bool, (unsigned int size, unsigned int alignment,\n+        enum by_pieces_operation op, bool speed_p),\n+ default_use_by_pieces_infrastructure_p)\n+\n /* True for MODE if the target expects that registers in this mode will\n    be allocated to registers in a small register class.  The compiler is\n    allowed to use registers explicitly used in the rtl as spill registers"}, {"sha": "40d784164b80202d5141544a947ad5e1e35c67e0", "filename": "gcc/target.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -80,6 +80,17 @@ enum print_switch_type\n   SWITCH_TYPE_LINE_END\t\t/* Please emit a line terminator.  */\n };\n \n+/* Types of memory operation understood by the \"by_pieces\" infrastructure.\n+   Used by the TARGET_USE_BY_PIECES_INFRASTRUCTURE_P target hook.  */\n+\n+enum by_pieces_operation\n+{\n+  CLEAR_BY_PIECES,\n+  MOVE_BY_PIECES,\n+  SET_BY_PIECES,\n+  STORE_BY_PIECES\n+};\n+\n typedef int (* print_switch_fn_type) (print_switch_type, const char *);\n \n /* An example implementation for ELF targets.  Defined in varasm.c  */"}, {"sha": "eef3d457b4e23e9ab51c9ce77902f09b41b2b597", "filename": "gcc/targhooks.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -1406,6 +1406,61 @@ default_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* For hooks which use the MOVE_RATIO macro, this gives the legacy default\n+   behaviour.  SPEED_P is true if we are compiling for speed.  */\n+\n+static unsigned int\n+get_move_ratio (bool speed_p ATTRIBUTE_UNUSED)\n+{\n+  unsigned int move_ratio;\n+#ifdef MOVE_RATIO\n+  move_ratio = (unsigned int) MOVE_RATIO (speed_p);\n+#else\n+#if defined (HAVE_movmemqi) || defined (HAVE_movmemhi) || defined (HAVE_movmemsi) || defined (HAVE_movmemdi) || defined (HAVE_movmemti)\n+  move_ratio = 2;\n+#else /* No movmem patterns, pick a default.  */\n+  move_ratio = ((speed_p) ? 15 : 3);\n+#endif\n+#endif\n+  return move_ratio;\n+}\n+\n+/* Return TRUE if the move_by_pieces/set_by_pieces infrastructure should be\n+   used; return FALSE if the movmem/setmem optab should be expanded, or\n+   a call to memcpy emitted.  */\n+\n+bool\n+default_use_by_pieces_infrastructure_p (unsigned int size,\n+\t\t\t\t\tunsigned int alignment,\n+\t\t\t\t\tenum by_pieces_operation op,\n+\t\t\t\t\tbool speed_p)\n+{\n+  unsigned int max_size = 0;\n+  unsigned int ratio = 0;\n+\n+  switch (op)\n+    {\n+      case CLEAR_BY_PIECES:\n+\tmax_size = STORE_MAX_PIECES;\n+\tratio = CLEAR_RATIO (speed_p);\n+\tbreak;\n+      case MOVE_BY_PIECES:\n+\tmax_size = MOVE_MAX_PIECES;\n+\tratio = get_move_ratio (speed_p);\n+\tbreak;\n+      case SET_BY_PIECES:\n+\tmax_size = STORE_MAX_PIECES;\n+\tratio = SET_RATIO (speed_p);\n+\tbreak;\n+      case STORE_BY_PIECES:\n+\tmax_size = STORE_MAX_PIECES;\n+\tratio = get_move_ratio (speed_p);\n+\tbreak;\n+    }\n+\n+  return move_by_pieces_ninsns (size, alignment, max_size + 1) < ratio;\n+}\n+\n bool\n default_profile_before_prologue (void)\n {"}, {"sha": "4bbf49253b913d54aac5d8b58834afc9cc62b0b8", "filename": "gcc/targhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbed00872ff3e20e5183f0cb788cd0c86bdf168/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7cbed00872ff3e20e5183f0cb788cd0c86bdf168", "patch": "@@ -181,6 +181,11 @@ extern int default_memory_move_cost (machine_mode, reg_class_t, bool);\n extern int default_register_move_cost (machine_mode, reg_class_t,\n \t\t\t\t       reg_class_t);\n \n+extern bool default_use_by_pieces_infrastructure_p (unsigned int,\n+\t\t\t\t\t\t    unsigned int,\n+\t\t\t\t\t\t    enum by_pieces_operation,\n+\t\t\t\t\t\t    bool);\n+\n extern bool default_profile_before_prologue (void);\n extern reg_class_t default_preferred_reload_class (rtx, reg_class_t);\n extern reg_class_t default_preferred_output_reload_class (rtx, reg_class_t);"}]}