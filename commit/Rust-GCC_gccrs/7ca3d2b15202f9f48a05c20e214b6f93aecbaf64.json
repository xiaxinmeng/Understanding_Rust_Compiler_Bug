{"sha": "7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NhM2QyYjE1MjAyZjlmNDhhMDVjMjBlMjE0YjZmOTNhZWNiYWY2NA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-07T11:15:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-07T11:15:13Z"}, "message": "(initialize, [...]): Rename s/initialize/init.\n\n        * (initialize, initialize_builtins,\n        initialize_dependency_output, initialize_standard_includes):\n        Rename s/initialize/init. Update.\n        (init_dependency_output): Move to after\n        cpp_handle_options, the correct location temporally at least.\n        (opt_comp): Move next to init (), its caller.  Fix prototype.\n        (init): Make \"initialized\" local scope.\n        (cpp_create_reader): Always call init ().\n        (cpp_start_read): Update.\n        (output_deps): New function, broken out of cpp_finish.\n        (cpp_finish): Break out output_deps.\n\nFrom-SVN: r38770", "tree": {"sha": "698b13f0ca96825280755f809e883d43878599f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/698b13f0ca96825280755f809e883d43878599f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64/comments", "author": null, "committer": null, "parents": [{"sha": "536fe39c7aa573c9a64e636c0e93e3d7ee0ba7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536fe39c7aa573c9a64e636c0e93e3d7ee0ba7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536fe39c7aa573c9a64e636c0e93e3d7ee0ba7f1"}], "stats": {"total": 255, "additions": 141, "deletions": 114}, "files": [{"sha": "0f68b9033b49c9bd398097350a09ea5fa136885f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "patch": "@@ -1,3 +1,17 @@\n+2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * (initialize, initialize_builtins,\n+        initialize_dependency_output, initialize_standard_includes):\n+        Rename s/initialize/init. Update.\n+        (init_dependency_output): Move to after\n+        cpp_handle_options, the correct location temporally at least.\n+        (opt_comp): Move next to init (), its caller.  Fix prototype.\n+        (init): Make \"initialized\" local scope.\n+        (cpp_create_reader): Always call init ().\n+        (cpp_start_read): Update.\n+        (output_deps): New function, broken out of cpp_finish.\n+        (cpp_finish): Break out output_deps.\n+\n 2001-01-07  Richard Henderson  <rth@redhat.com>\n \n \t* collect2.c (COFF specific stuff): Revert 12-06 patch"}, {"sha": "38572258cb8f9692c74862b86965541a11e2b66d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 127, "deletions": 114, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "patch": "@@ -94,8 +94,8 @@ struct cpp_pending\n static void print_help                  PARAMS ((void));\n static void path_include\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t char *, int));\n-static void initialize\t\t\tPARAMS ((void));\n-static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n+static void init\t\t\tPARAMS ((void));\n+static void init_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t char *, int, int));\n struct file_name_list * remove_dup_dir\tPARAMS ((cpp_reader *,\n@@ -107,14 +107,12 @@ static void do_includes\t\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct pending_option *,\n \t\t\t\t\t\t int));\n static void set_lang\t\t\tPARAMS ((cpp_reader *, enum c_lang));\n-static void initialize_dependency_output PARAMS ((cpp_reader *));\n-static void initialize_standard_includes PARAMS ((cpp_reader *));\n+static void init_dependency_output\tPARAMS ((cpp_reader *));\n+static void init_standard_includes\tPARAMS ((cpp_reader *));\n static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t cl_directive_handler));\n-#ifdef HOST_EBCDIC\n-static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n-#endif\n+static void output_deps\t\t\tPARAMS ((cpp_reader *));\n static int parse_option\t\t\tPARAMS ((const char *));\n \n /* Fourth argument to append_include_chain: chain to use.  */\n@@ -454,25 +452,42 @@ set_lang (pfile, lang)\n     }\n }\n \n-/* initialize initializes library global state.  It might not need to\n-   do anything depending on the platform and compiler.  */\n+#ifdef HOST_EBCDIC\n+static int opt_comp PARAMS ((const void *, const void *));\n+\n+/* Run-time sorting of options array.  */\n+static int\n+opt_comp (p1, p2)\n+     const void *p1, *p2;\n+{\n+  return strcmp (((struct cl_option *) p1)->opt_text,\n+\t\t ((struct cl_option *) p2)->opt_text);\n+}\n+#endif\n \n-static int initialized = 0;\n+/* init initializes library global state.  It might not need to\n+   do anything depending on the platform and compiler.  */\n \n static void\n-initialize ()\n+init ()\n {\n+  static int initialized = 0;\n+\n+  if (! initialized)\n+    {\n+      initialized = 1;\n+\n #ifdef HOST_EBCDIC\n-  /* For non-ASCII hosts, the cl_options array needs to be sorted at\n-     runtime.  */\n-  qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+      /* For non-ASCII hosts, the cl_options array needs to be sorted at\n+\t runtime.  */\n+      qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n #endif\n \n-  /* Set up the trigraph map.  This doesn't need to do anything if we were\n-     compiled with a compiler that supports C99 designated initializers.  */\n-  init_trigraph_map ();\n-\n-  initialized = 1;\n+      /* Set up the trigraph map.  This doesn't need to do anything if\n+\t we were compiled with a compiler that supports C99 designated\n+\t initializers.  */\n+      init_trigraph_map ();\n+    }\n }\n \n /* Initialize a cpp_reader structure. */\n@@ -481,11 +496,12 @@ cpp_create_reader (lang)\n      enum c_lang lang;\n {\n   struct spec_nodes *s;\n-  cpp_reader *pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n+  cpp_reader *pfile;\n \n   /* Initialise this instance of the library if it hasn't been already.  */\n-  if (! initialized)\n-    initialize ();\n+  init ();\n+\n+  pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n \n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n@@ -667,7 +683,7 @@ static const struct builtin builtin_array[] =\n /* Subroutine of cpp_start_read; reads the builtins table above and\n    enters the macros into the hash table.  */\n static void\n-initialize_builtins (pfile)\n+init_builtins (pfile)\n      cpp_reader *pfile;\n {\n   const struct builtin *b;\n@@ -729,60 +745,9 @@ initialize_builtins (pfile)\n #undef CPLUS\n #undef builtin_array_end\n \n-/* Another subroutine of cpp_start_read.  This one sets up to do\n-   dependency-file output. */\n-static void\n-initialize_dependency_output (pfile)\n-     cpp_reader *pfile;\n-{\n-  char *spec, *s, *output_file;\n-\n-  /* Either of two environment variables can specify output of deps.\n-     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n-     where OUTPUT_FILE is the file to write deps info to\n-     and DEPS_TARGET is the target to mention in the deps.  */\n-\n-  if (CPP_OPTION (pfile, print_deps) == 0)\n-    {\n-      spec = getenv (\"DEPENDENCIES_OUTPUT\");\n-      if (spec)\n-\tCPP_OPTION (pfile, print_deps) = 1;\n-      else\n-\t{\n-\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n-\t  if (spec)\n-\t    CPP_OPTION (pfile, print_deps) = 2;\n-\t  else\n-\t    return;\n-\t}\n-\n-      /* Find the space before the DEPS_TARGET, if there is one.  */\n-      s = strchr (spec, ' ');\n-      if (s)\n-\t{\n-\t  /* Let the caller perform MAKE quoting.  */\n-\t  deps_add_target (pfile->deps, s + 1, 0);\n-\t  output_file = (char *) xmalloc (s - spec + 1);\n-\t  memcpy (output_file, spec, s - spec);\n-\t  output_file[s - spec] = 0;\n-\t}\n-      else\n-\toutput_file = spec;\n-\n-      CPP_OPTION (pfile, deps_file) = output_file;\n-      CPP_OPTION (pfile, print_deps_append) = 1;\n-    }\n-\n-  /* Set the default target (if there is none already).  */\n-  deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n-\n-  if (CPP_OPTION (pfile, in_fname))\n-    deps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n-}\n-\n /* And another subroutine.  This one sets up the standard include path.  */\n static void\n-initialize_standard_includes (pfile)\n+init_standard_includes (pfile)\n      cpp_reader *pfile;\n {\n   char *path;\n@@ -923,7 +888,7 @@ cpp_start_read (pfile, fname)\n \n   /* Set up the include search path now.  */\n   if (! CPP_OPTION (pfile, no_standard_includes))\n-    initialize_standard_includes (pfile);\n+    init_standard_includes (pfile);\n \n   merge_include_chains (pfile);\n \n@@ -956,10 +921,10 @@ cpp_start_read (pfile, fname)\n   if (!_cpp_read_file (pfile, fname))\n     return 0;\n \n-  initialize_dependency_output (pfile);\n+  init_dependency_output (pfile);\n \n   /* Install __LINE__, etc.  */\n-  initialize_builtins (pfile);\n+  init_builtins (pfile);\n \n   /* Do -U's, -D's and -A's in the order they were seen.  */\n   p = CPP_OPTION (pfile, pending)->directive_head;\n@@ -986,6 +951,39 @@ cpp_start_read (pfile, fname)\n   return 1;\n }\n \n+static void\n+output_deps (pfile)\n+     cpp_reader *pfile;\n+{\n+  /* Stream on which to print the dependency information.  */\n+  FILE *deps_stream = 0;\n+  const char *deps_mode = CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n+\n+  if (CPP_OPTION (pfile, deps_file) == 0)\n+    deps_stream = stdout;\n+  else\n+    {\n+      deps_stream = fopen (CPP_OPTION (pfile, deps_file), deps_mode);\n+      if (deps_stream == 0)\n+\t{\n+\t  cpp_notice_from_errno (pfile, CPP_OPTION (pfile, deps_file));\n+\t  return;\n+\t}\n+    }\n+\n+  deps_write (pfile->deps, deps_stream, 72);\n+\n+  if (CPP_OPTION (pfile, deps_phony_targets))\n+    deps_phony_targets (pfile->deps, deps_stream);\n+\n+  /* Don't close stdout.  */\n+  if (CPP_OPTION (pfile, deps_file))\n+    {\n+      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n+\tcpp_fatal (pfile, \"I/O error on output\");\n+    }\n+}\n+\n /* This is called at the end of preprocessing.  It pops the\n    last buffer and writes dependency output.  It should also\n    clear macro definitions, such that you could call cpp_start_read\n@@ -1003,33 +1001,7 @@ cpp_finish (pfile)\n \n   /* Don't write the deps file if preprocessing has failed.  */\n   if (CPP_OPTION (pfile, print_deps) && pfile->errors == 0)\n-    {\n-      /* Stream on which to print the dependency information.  */\n-      FILE *deps_stream = 0;\n-      const char *deps_mode\n-\t= CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n-      if (CPP_OPTION (pfile, deps_file) == 0)\n-\tdeps_stream = stdout;\n-      else\n-\t{\n-\t  deps_stream = fopen (CPP_OPTION (pfile, deps_file), deps_mode);\n-\t  if (deps_stream == 0)\n-\t    cpp_notice_from_errno (pfile, CPP_OPTION (pfile, deps_file));\n-\t}\n-      if (deps_stream)\n-\t{\n-\t  deps_write (pfile->deps, deps_stream, 72);\n-\n-\t  if (CPP_OPTION (pfile, deps_phony_targets))\n-\t    deps_phony_targets (pfile->deps, deps_stream);\n-\n-\t  if (CPP_OPTION (pfile, deps_file))\n-\t    {\n-\t      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n-\t\tcpp_fatal (pfile, \"I/O error on output\");\n-\t    }\n-\t}\n-    }\n+    output_deps (pfile);\n \n   /* Report on headers that could use multiple include guards.  */\n   if (CPP_OPTION (pfile, print_include_names))\n@@ -1689,15 +1661,6 @@ cpp_handle_option (pfile, argc, argv)\n   return i + 1;\n }\n \n-#ifdef HOST_EBCDIC\n-static int\n-opt_comp (const void *p1, const void *p2)\n-{\n-  return strcmp (((struct cl_option *)p1)->opt_text,\n-\t\t ((struct cl_option *)p2)->opt_text);\n-}\n-#endif\n-\n /* Handle command-line options in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n    Returns if an unrecognized option is seen.\n@@ -1720,6 +1683,56 @@ cpp_handle_options (pfile, argc, argv)\n   return i;\n }\n \n+/* Set up dependency-file output.  */\n+static void\n+init_dependency_output (pfile)\n+     cpp_reader *pfile;\n+{\n+  char *spec, *s, *output_file;\n+\n+  /* Either of two environment variables can specify output of deps.\n+     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n+     where OUTPUT_FILE is the file to write deps info to\n+     and DEPS_TARGET is the target to mention in the deps.  */\n+\n+  if (CPP_OPTION (pfile, print_deps) == 0)\n+    {\n+      spec = getenv (\"DEPENDENCIES_OUTPUT\");\n+      if (spec)\n+\tCPP_OPTION (pfile, print_deps) = 1;\n+      else\n+\t{\n+\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n+\t  if (spec)\n+\t    CPP_OPTION (pfile, print_deps) = 2;\n+\t  else\n+\t    return;\n+\t}\n+\n+      /* Find the space before the DEPS_TARGET, if there is one.  */\n+      s = strchr (spec, ' ');\n+      if (s)\n+\t{\n+\t  /* Let the caller perform MAKE quoting.  */\n+\t  deps_add_target (pfile->deps, s + 1, 0);\n+\t  output_file = (char *) xmalloc (s - spec + 1);\n+\t  memcpy (output_file, spec, s - spec);\n+\t  output_file[s - spec] = 0;\n+\t}\n+      else\n+\toutput_file = spec;\n+\n+      CPP_OPTION (pfile, deps_file) = output_file;\n+      CPP_OPTION (pfile, print_deps_append) = 1;\n+    }\n+\n+  /* Set the default target (if there is none already).  */\n+  deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n+\n+  if (CPP_OPTION (pfile, in_fname))\n+    deps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n+}\n+\n static void\n print_help ()\n {"}]}