{"sha": "f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0MDliMTlmNTFjN2ZlMDliMWZkYzQ1ODRmMTdmNjMwOWY5ODBjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-12T17:17:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-12T17:17:54Z"}, "message": "builtins.c (expand_builtin_compare_and_swap): If target is const0, don't pass the target to expand_atomic_compare_and_swap.\n\n        * builtins.c (expand_builtin_compare_and_swap): If target is const0,\n        don't pass the target to expand_atomic_compare_and_swap.\n        (expand_builtin_atomic_compare_exchange): Likewise.\n\nFrom-SVN: r181323", "tree": {"sha": "831e5faa18ef7a553143194a680da4d37f715452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/831e5faa18ef7a553143194a680da4d37f715452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0409b19f51c7fe09b1fdc4584f17f6309f980cf/comments", "author": null, "committer": null, "parents": [{"sha": "dab37c689ea85e9beb7d60fe4898deab048d00d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab37c689ea85e9beb7d60fe4898deab048d00d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab37c689ea85e9beb7d60fe4898deab048d00d2"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "3f72d60cd2dbacf66c48b2e623a14d504ce1345d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0409b19f51c7fe09b1fdc4584f17f6309f980cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0409b19f51c7fe09b1fdc4584f17f6309f980cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "patch": "@@ -1,5 +1,9 @@\n 2011-11-12  Richard Henderson  <rth@redhat.com>\n \n+\t* builtins.c (expand_builtin_compare_and_swap): If target is const0,\n+\tdon't pass the target to expand_atomic_compare_and_swap.\n+\t(expand_builtin_atomic_compare_exchange): Likewise.\n+\n \t* config/sh/linux.h (TARGET_INIT_LIBFUNCS): New.\n \t* config/sh/sh.c (sh_init_sync_libfuncs): New.\n "}, {"sha": "9dc68cc341f069d964996cff612e9cb54c76b0d8", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0409b19f51c7fe09b1fdc4584f17f6309f980cf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0409b19f51c7fe09b1fdc4584f17f6309f980cf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f0409b19f51c7fe09b1fdc4584f17f6309f980cf", "patch": "@@ -5144,7 +5144,6 @@ expand_builtin_sync_operation (enum machine_mode mode, tree exp,\n \tcase BUILT_IN_SYNC_FETCH_AND_NAND_4:\n \tcase BUILT_IN_SYNC_FETCH_AND_NAND_8:\n \tcase BUILT_IN_SYNC_FETCH_AND_NAND_16:\n-\n \t  if (warned_f_a_n)\n \t    break;\n \n@@ -5158,7 +5157,6 @@ expand_builtin_sync_operation (enum machine_mode mode, tree exp,\n \tcase BUILT_IN_SYNC_NAND_AND_FETCH_4:\n \tcase BUILT_IN_SYNC_NAND_AND_FETCH_8:\n \tcase BUILT_IN_SYNC_NAND_AND_FETCH_16:\n-\n \t  if (warned_n_a_f)\n \t    break;\n \n@@ -5190,16 +5188,24 @@ expand_builtin_compare_and_swap (enum machine_mode mode, tree exp,\n \t\t\t\t bool is_bool, rtx target)\n {\n   rtx old_val, new_val, mem;\n+  rtx *pbool, *poval;\n \n   /* Expand the operands.  */\n   mem = get_builtin_sync_mem (CALL_EXPR_ARG (exp, 0), mode);\n   old_val = expand_expr_force_mode (CALL_EXPR_ARG (exp, 1), mode);\n   new_val = expand_expr_force_mode (CALL_EXPR_ARG (exp, 2), mode);\n \n-  if (!expand_atomic_compare_and_swap ((is_bool ? &target : NULL),\n-\t\t\t\t       (is_bool ? NULL : &target),\n-\t\t\t\t       mem, old_val, new_val, false,\n-\t\t\t\t       MEMMODEL_SEQ_CST, MEMMODEL_SEQ_CST))\n+  pbool = poval = NULL;\n+  if (target != const0_rtx)\n+    {\n+      if (is_bool)\n+\tpbool = &target;\n+      else\n+\tpoval = &target;\n+    }\n+  if (!expand_atomic_compare_and_swap (pbool, poval, mem, old_val, new_val,\n+\t\t\t\t       false, MEMMODEL_SEQ_CST,\n+\t\t\t\t       MEMMODEL_SEQ_CST))\n     return NULL_RTX;\n \n   return target;\n@@ -5338,8 +5344,9 @@ expand_builtin_atomic_compare_exchange (enum machine_mode mode, tree exp,\n \n   oldval = copy_to_reg (gen_rtx_MEM (mode, expect));\n \n-  if (!expand_atomic_compare_and_swap (&target, &oldval, mem, oldval,\n-\t\t\t\t       desired, is_weak, success, failure))\n+  if (!expand_atomic_compare_and_swap ((target == const0_rtx ? NULL : &target),\n+\t\t\t\t       &oldval, mem, oldval, desired,\n+\t\t\t\t       is_weak, success, failure))\n     return NULL_RTX;\n \n   emit_move_insn (gen_rtx_MEM (mode, expect), oldval);"}]}