{"sha": "b957b2e02582cc7ba739cd3886f38800542759bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1N2IyZTAyNTgyY2M3YmE3MzljZDM4ODZmMzg4MDA1NDI3NTliYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-11-19T20:31:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-11-19T20:31:52Z"}, "message": "PR jit/63854: Fix leaking vec in jit\n\ngcc/jit/ChangeLog:\n\tPR jit/63854\n\t* jit-playback.c (gcc::jit::playback::compound_type::set_fields):\n\tConvert param from const vec<playback::field *> & to\n\tconst auto_vec<playback::field *> *.\n\t(gcc::jit::playback::context::new_function_type): Convert param\n\t\"param_types\" from vec<type *> * to const auto_vec<type *> *.\n\t(gcc::jit::playback::context::new_function): Convert param\n\t\"params\" from vec<param *> * to const auto_vec<param *> *.\n\t(gcc::jit::playback::context::build_call): Convert param \"args\"\n\tfrom vec<rvalue *> to const auto_vec<rvalue *> *.\n\t(gcc::jit::playback::context::new_call): Likewise.\n\t(gcc::jit::playback::context::new_call_through_ptr): Likewise.\n\t(wrapper_finalizer): New function.\n\t(gcc::jit::playback::wrapper::operator new): Call the finalizer\n\tvariant of ggc_internal_cleared_alloc, supplying\n\twrapper_finalizer.\n\t(gcc::jit::playback::function::finalizer): New.\n\t(gcc::jit::playback::block::finalizer): New.\n\t(gcc::jit::playback::source_file::finalizer): New.\n\t(gcc::jit::playback::source_line::finalizer): New.\n\n\t* jit-playback.h\n\t(gcc::jit::playback::context::new_function_type): Convert param\n\t\"param_types\" from vec<type *> * to const auto_vec<type *> *.\n\t(gcc::jit::playback::context::new_function): Convert param\n\t\"params\" from vec<param *> * to const auto_vec<param *> *.\n\t(gcc::jit::playback::context::new_call): Convert param\n\t\"args\" from vec<rvalue *> to const auto_vec<rvalue *> *.\n\t(gcc::jit::playback::context::new_call_through_ptr): Likewise.\n\t(gcc::jit::playback::context::build_call): Likewise.\n\t(gcc::jit::playback::context): Convert fields \"m_functions\",\n\t\"m_source_files\", \"m_cached_locations\" from vec to auto_vec.\n\t(gcc::jit::playback::wrapper::finalizer): New virtual function.\n\t(gcc::jit::playback::compound_type::set_fields): Convert param fro\n\tconst vec<playback::field *> & to\n\tconst auto_vec<playback::field *> *.\n\t(gcc::jit::playback::function::finalizer): New.\n\t(gcc::jit::playback::block::finalizer): New.\n\t(gcc::jit::playback::source_file::finalizer): New.\n\t(gcc::jit::playback::source_line::finalizer): New.\n\n\t* jit-recording.c\n\t(gcc::jit::recording::function_type::replay_into): Convert local\n\tfrom a vec into an auto_vec.\n\t(gcc::jit::recording::fields::replay_into): Likewise.\n\t(gcc::jit::recording::function::replay_into): Likewise.\n\t(gcc::jit::recording::call::replay_into): Likewise.\n\t(gcc::jit::recording::call_through_ptr::replay_into): Likewise.\n\n\t* jit-recording.h (gcc::jit::recording::context): Convert fields\n\t\"m_mementos\", \"m_compound_types\", \"m_functions\" from vec<> to\n\tauto_vec <>.\n\t(gcc::jit::recording::function_type::get_param_types): Convert\n\treturn type from vec<type *> to const vec<type *> &.\n\t(gcc::jit::recording::function_type): Convert field\n\t\"m_param_types\" from a vec<> to an auto_vec<>.\n\t(gcc::jit::recording::fields): Likewise for field \"m_fields\".\n\t(gcc::jit::recording::function::get_params): Convert return type\n\tfrom vec <param *> to const vec<param *> &.\n\t(gcc::jit::recording::function): Convert fields \"m_params\",\n\t\"m_locals\", \"m_blocks\" from vec<> to auto_vec<>.\n\t(gcc::jit::recording::block): Likewise for field \"m_statements\".\n\tvec<> to auto_vec<>.\n\t(gcc::jit::recording::call): Likewise for field \"m_args\".\n\t(gcc::jit::recording::call_through_ptr): Likewise.\n\nFrom-SVN: r217808", "tree": {"sha": "dade283afe5efeb7c8a4488a4e81976abfce5de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dade283afe5efeb7c8a4488a4e81976abfce5de8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b957b2e02582cc7ba739cd3886f38800542759bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b957b2e02582cc7ba739cd3886f38800542759bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b957b2e02582cc7ba739cd3886f38800542759bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b957b2e02582cc7ba739cd3886f38800542759bb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f1e44ed24a448d366e7218044313a497a537fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1e44ed24a448d366e7218044313a497a537fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1e44ed24a448d366e7218044313a497a537fbe"}], "stats": {"total": 210, "additions": 168, "deletions": 42}, "files": [{"sha": "f0136b4d98b4abd2dbb151bef1f9a795f0ec0665", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=b957b2e02582cc7ba739cd3886f38800542759bb", "patch": "@@ -1,3 +1,71 @@\n+2014-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/63854\n+\t* jit-playback.c (gcc::jit::playback::compound_type::set_fields):\n+\tConvert param from const vec<playback::field *> & to\n+\tconst auto_vec<playback::field *> *.\n+\t(gcc::jit::playback::context::new_function_type): Convert param\n+\t\"param_types\" from vec<type *> * to const auto_vec<type *> *.\n+\t(gcc::jit::playback::context::new_function): Convert param\n+\t\"params\" from vec<param *> * to const auto_vec<param *> *.\n+\t(gcc::jit::playback::context::build_call): Convert param \"args\"\n+\tfrom vec<rvalue *> to const auto_vec<rvalue *> *.\n+\t(gcc::jit::playback::context::new_call): Likewise.\n+\t(gcc::jit::playback::context::new_call_through_ptr): Likewise.\n+\t(wrapper_finalizer): New function.\n+\t(gcc::jit::playback::wrapper::operator new): Call the finalizer\n+\tvariant of ggc_internal_cleared_alloc, supplying\n+\twrapper_finalizer.\n+\t(gcc::jit::playback::function::finalizer): New.\n+\t(gcc::jit::playback::block::finalizer): New.\n+\t(gcc::jit::playback::source_file::finalizer): New.\n+\t(gcc::jit::playback::source_line::finalizer): New.\n+\n+\t* jit-playback.h\n+\t(gcc::jit::playback::context::new_function_type): Convert param\n+\t\"param_types\" from vec<type *> * to const auto_vec<type *> *.\n+\t(gcc::jit::playback::context::new_function): Convert param\n+\t\"params\" from vec<param *> * to const auto_vec<param *> *.\n+\t(gcc::jit::playback::context::new_call): Convert param\n+\t\"args\" from vec<rvalue *> to const auto_vec<rvalue *> *.\n+\t(gcc::jit::playback::context::new_call_through_ptr): Likewise.\n+\t(gcc::jit::playback::context::build_call): Likewise.\n+\t(gcc::jit::playback::context): Convert fields \"m_functions\",\n+\t\"m_source_files\", \"m_cached_locations\" from vec to auto_vec.\n+\t(gcc::jit::playback::wrapper::finalizer): New virtual function.\n+\t(gcc::jit::playback::compound_type::set_fields): Convert param fro\n+\tconst vec<playback::field *> & to\n+\tconst auto_vec<playback::field *> *.\n+\t(gcc::jit::playback::function::finalizer): New.\n+\t(gcc::jit::playback::block::finalizer): New.\n+\t(gcc::jit::playback::source_file::finalizer): New.\n+\t(gcc::jit::playback::source_line::finalizer): New.\n+\n+\t* jit-recording.c\n+\t(gcc::jit::recording::function_type::replay_into): Convert local\n+\tfrom a vec into an auto_vec.\n+\t(gcc::jit::recording::fields::replay_into): Likewise.\n+\t(gcc::jit::recording::function::replay_into): Likewise.\n+\t(gcc::jit::recording::call::replay_into): Likewise.\n+\t(gcc::jit::recording::call_through_ptr::replay_into): Likewise.\n+\n+\t* jit-recording.h (gcc::jit::recording::context): Convert fields\n+\t\"m_mementos\", \"m_compound_types\", \"m_functions\" from vec<> to\n+\tauto_vec <>.\n+\t(gcc::jit::recording::function_type::get_param_types): Convert\n+\treturn type from vec<type *> to const vec<type *> &.\n+\t(gcc::jit::recording::function_type): Convert field\n+\t\"m_param_types\" from a vec<> to an auto_vec<>.\n+\t(gcc::jit::recording::fields): Likewise for field \"m_fields\".\n+\t(gcc::jit::recording::function::get_params): Convert return type\n+\tfrom vec <param *> to const vec<param *> &.\n+\t(gcc::jit::recording::function): Convert fields \"m_params\",\n+\t\"m_locals\", \"m_blocks\" from vec<> to auto_vec<>.\n+\t(gcc::jit::recording::block): Likewise for field \"m_statements\".\n+\tvec<> to auto_vec<>.\n+\t(gcc::jit::recording::call): Likewise for field \"m_args\".\n+\t(gcc::jit::recording::call_through_ptr): Likewise.\n+\n 2014-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63854"}, {"sha": "8fdfa29b0a0f55e2a4e76ddd338b26e61ccdc749", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 61, "deletions": 12, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=b957b2e02582cc7ba739cd3886f38800542759bb", "patch": "@@ -285,15 +285,15 @@ new_compound_type (location *loc,\n }\n \n void\n-playback::compound_type::set_fields (const vec<playback::field *> &fields)\n+playback::compound_type::set_fields (const auto_vec<playback::field *> *fields)\n {\n   /* Compare with c/c-decl.c: finish_struct. */\n   tree t = as_tree ();\n \n   tree fieldlist = NULL;\n-  for (unsigned i = 0; i < fields.length (); i++)\n+  for (unsigned i = 0; i < fields->length (); i++)\n     {\n-      field *f = fields[i];\n+      field *f = (*fields)[i];\n       DECL_CONTEXT (f->as_tree ()) = t;\n       fieldlist = chainon (f->as_tree (), fieldlist);\n     }\n@@ -309,7 +309,7 @@ playback::compound_type::set_fields (const vec<playback::field *> &fields)\n playback::type *\n playback::context::\n new_function_type (type *return_type,\n-\t\t   vec<type *> *param_types,\n+\t\t   const auto_vec<type *> *param_types,\n \t\t   int is_variadic)\n {\n   int i;\n@@ -361,7 +361,7 @@ new_function (location *loc,\n \t      enum gcc_jit_function_kind kind,\n \t      type *return_type,\n \t      const char *name,\n-\t      vec<param *> *params,\n+\t      const auto_vec<param *> *params,\n \t      int is_variadic,\n \t      enum built_in_function builtin_id)\n {\n@@ -770,12 +770,12 @@ playback::rvalue *\n playback::context::\n build_call (location *loc,\n \t    tree fn_ptr,\n-\t    vec<rvalue *> args)\n+\t    const auto_vec<rvalue *> *args)\n {\n   vec<tree, va_gc> *tree_args;\n-  vec_alloc (tree_args, args.length ());\n-  for (unsigned i = 0; i < args.length (); i++)\n-    tree_args->quick_push (args[i]->as_tree ());\n+  vec_alloc (tree_args, args->length ());\n+  for (unsigned i = 0; i < args->length (); i++)\n+    tree_args->quick_push ((*args)[i]->as_tree ());\n \n   if (loc)\n     set_tree_location (fn_ptr, loc);\n@@ -806,7 +806,7 @@ playback::rvalue *\n playback::context::\n new_call (location *loc,\n \t  function *func,\n-\t  vec<rvalue *> args)\n+\t  const auto_vec<rvalue *> *args)\n {\n   tree fndecl;\n \n@@ -828,7 +828,7 @@ playback::rvalue *\n playback::context::\n new_call_through_ptr (location *loc,\n \t\t      rvalue *fn_ptr,\n-\t\t      vec<rvalue *> args)\n+\t\t      const auto_vec<rvalue *> *args)\n {\n   gcc_assert (fn_ptr);\n   tree t_fn_ptr = fn_ptr->as_tree ();\n@@ -1079,14 +1079,27 @@ get_address (location *loc)\n   return new rvalue (get_context (), ptr);\n }\n \n+/* The wrapper subclasses are GC-managed, but can own non-GC memory.\n+   Provide this finalization hook for calling then they are collected,\n+   which calls the finalizer vfunc.  This allows them to call \"release\"\n+   on any vec<> within them.  */\n+\n+static void\n+wrapper_finalizer (void *ptr)\n+{\n+  playback::wrapper *wrapper = reinterpret_cast <playback::wrapper *> (ptr);\n+  wrapper->finalizer ();\n+}\n+\n /* gcc::jit::playback::wrapper subclasses are GC-managed:\n    allocate them using ggc_internal_cleared_alloc.  */\n \n void *\n playback::wrapper::\n operator new (size_t sz)\n {\n-  return ggc_internal_cleared_alloc (sz MEM_STAT_INFO);\n+  return ggc_internal_cleared_alloc (sz, wrapper_finalizer, 0, 1);\n+\n }\n \n /* Constructor for gcc:jit::playback::function.  */\n@@ -1128,6 +1141,15 @@ gt_ggc_mx ()\n   gt_ggc_m_9tree_node (m_inner_block);\n }\n \n+/* Don't leak vec's internal buffer (in non-GC heap) when we are\n+   GC-ed.  */\n+\n+void\n+playback::function::finalizer ()\n+{\n+  m_blocks.release ();\n+}\n+\n /* Get the return type of a playback function, in tree form.  */\n \n tree\n@@ -1262,6 +1284,15 @@ postprocess ()\n     }\n }\n \n+/* Don't leak vec's internal buffer (in non-GC heap) when we are\n+   GC-ed.  */\n+\n+void\n+playback::block::finalizer ()\n+{\n+  m_stmts.release ();\n+}\n+\n /* Add an eval of the rvalue to the function's statement list.  */\n \n void\n@@ -2024,6 +2055,15 @@ playback::source_file::source_file (tree filename) :\n {\n }\n \n+/* Don't leak vec's internal buffer (in non-GC heap) when we are\n+   GC-ed.  */\n+\n+void\n+playback::source_file::finalizer ()\n+{\n+  m_source_lines.release ();\n+}\n+\n /* Construct a playback::source_line for the given line\n    within this source file, if one doesn't exist already.  */\n \n@@ -2056,6 +2096,15 @@ playback::source_line::source_line (source_file *file, int line_num) :\n {\n }\n \n+/* Don't leak vec's internal buffer (in non-GC heap) when we are\n+   GC-ed.  */\n+\n+void\n+playback::source_line::finalizer ()\n+{\n+  m_locations.release ();\n+}\n+\n /* Construct a playback::location for the given column\n    within this line of a specific source file, if one doesn't exist\n    already.  */"}, {"sha": "30e9229e093f4904a68cc7b6c8a2f1d3fd522493", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=b957b2e02582cc7ba739cd3886f38800542759bb", "patch": "@@ -71,7 +71,7 @@ class context\n \n   type *\n   new_function_type (type *return_type,\n-\t\t     vec<type *> *param_types,\n+\t\t     const auto_vec<type *> *param_types,\n \t\t     int is_variadic);\n \n   param *\n@@ -84,7 +84,7 @@ class context\n \t\tenum gcc_jit_function_kind kind,\n \t\ttype *return_type,\n \t\tconst char *name,\n-\t\tvec<param *> *params,\n+\t\tconst auto_vec<param *> *params,\n \t\tint is_variadic,\n \t\tenum built_in_function builtin_id);\n \n@@ -128,12 +128,12 @@ class context\n   rvalue *\n   new_call (location *loc,\n \t    function *func,\n-\t    vec<rvalue *> args);\n+\t    const auto_vec<rvalue *> *args);\n \n   rvalue *\n   new_call_through_ptr (location *loc,\n \t\t\trvalue *fn_ptr,\n-\t\t\tvec<rvalue *> args);\n+\t\t\tconst auto_vec<rvalue *> *args);\n \n   rvalue *\n   new_cast (location *loc,\n@@ -214,7 +214,7 @@ class context\n   rvalue *\n   build_call (location *loc,\n \t      tree fn_ptr,\n-\t      vec<rvalue *> args);\n+\t      const auto_vec<rvalue *> *args);\n \n   tree\n   build_cast (location *loc,\n@@ -240,14 +240,14 @@ class context\n   char *m_path_s_file;\n   char *m_path_so_file;\n \n-  vec<function *> m_functions;\n+  auto_vec<function *> m_functions;\n   tree m_char_array_type_node;\n   tree m_const_char_ptr;\n \n   /* Source location handling.  */\n-  vec<source_file *> m_source_files;\n+  auto_vec<source_file *> m_source_files;\n \n-  vec<std::pair<tree, location *> > m_cached_locations;\n+  auto_vec<std::pair<tree, location *> > m_cached_locations;\n };\n \n /* A temporary wrapper object.\n@@ -263,6 +263,10 @@ class wrapper\n   /* Allocate in the GC heap.  */\n   void *operator new (size_t sz);\n \n+  /* Some wrapper subclasses contain vec<> and so need to\n+     release them when they are GC-ed.  */\n+  virtual void finalizer () { }\n+\n };\n \n class type : public wrapper\n@@ -297,7 +301,7 @@ class compound_type : public type\n     : type (inner)\n   {}\n \n-  void set_fields (const vec<field *> &fields);\n+  void set_fields (const auto_vec<field *> *fields);\n };\n \n class field : public wrapper\n@@ -319,6 +323,7 @@ class function : public wrapper\n   function(context *ctxt, tree fndecl, enum gcc_jit_function_kind kind);\n \n   void gt_ggc_mx ();\n+  void finalizer ();\n \n   tree get_return_type_as_tree () const;\n \n@@ -366,6 +371,8 @@ class block : public wrapper\n   block (function *func,\n \t const char *name);\n \n+  void finalizer ();\n+\n   tree as_label_decl () const { return m_label_decl; }\n \n   void\n@@ -500,6 +507,7 @@ class source_file : public wrapper\n {\n public:\n   source_file (tree filename);\n+  void finalizer ();\n \n   source_line *\n   get_source_line (int line_num);\n@@ -520,6 +528,7 @@ class source_line : public wrapper\n {\n public:\n   source_line (source_file *file, int line_num);\n+  void finalizer ();\n \n   location *\n   get_location (recording::location *rloc, int column_num);"}, {"sha": "8069afc7558d3adc5c1af14ae1b32697cfe38b41", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=b957b2e02582cc7ba739cd3886f38800542759bb", "patch": "@@ -1602,7 +1602,7 @@ void\n recording::function_type::replay_into (replayer *r)\n {\n   /* Convert m_param_types to a vec of playback type.  */\n-  vec <playback::type *> param_types;\n+  auto_vec <playback::type *> param_types;\n   int i;\n   recording::type *type;\n   param_types.create (m_param_types.length ());\n@@ -1859,11 +1859,11 @@ recording::fields::fields (compound_type *struct_or_union,\n void\n recording::fields::replay_into (replayer *)\n {\n-  vec<playback::field *> playback_fields;\n+  auto_vec<playback::field *> playback_fields;\n   playback_fields.create (m_fields.length ());\n   for (unsigned i = 0; i < m_fields.length (); i++)\n     playback_fields.safe_push (m_fields[i]->playback_field ());\n-  m_struct_or_union->playback_compound_type ()->set_fields (playback_fields);\n+  m_struct_or_union->playback_compound_type ()->set_fields (&playback_fields);\n }\n \n /* Override the default implementation of\n@@ -2032,7 +2032,7 @@ void\n recording::function::replay_into (replayer *r)\n {\n   /* Convert m_params to a vec of playback param.  */\n-  vec <playback::param *> params;\n+  auto_vec <playback::param *> params;\n   int i;\n   recording::param *param;\n   params.create (m_params.length ());\n@@ -2848,14 +2848,14 @@ recording::call::call (recording::context *ctxt,\n void\n recording::call::replay_into (replayer *r)\n {\n-  vec<playback::rvalue *> playback_args;\n+  auto_vec<playback::rvalue *> playback_args;\n   playback_args.create (m_args.length ());\n   for (unsigned i = 0; i< m_args.length (); i++)\n     playback_args.safe_push (m_args[i]->playback_rvalue ());\n \n   set_playback_obj (r->new_call (playback_location (r, m_loc),\n \t\t\t\t m_func->playback_function (),\n-\t\t\t\t playback_args));\n+\t\t\t\t &playback_args));\n }\n \n /* Implementation of recording::memento::make_debug_string for\n@@ -2925,14 +2925,14 @@ recording::call_through_ptr::call_through_ptr (recording::context *ctxt,\n void\n recording::call_through_ptr::replay_into (replayer *r)\n {\n-  vec<playback::rvalue *> playback_args;\n+  auto_vec<playback::rvalue *> playback_args;\n   playback_args.create (m_args.length ());\n   for (unsigned i = 0; i< m_args.length (); i++)\n     playback_args.safe_push (m_args[i]->playback_rvalue ());\n \n   set_playback_obj (r->new_call_through_ptr (playback_location (r, m_loc),\n \t\t\t\t\t     m_fn_ptr->playback_rvalue (),\n-\t\t\t\t\t     playback_args));\n+\t\t\t\t\t     &playback_args));\n }\n \n /* Implementation of recording::memento::make_debug_string for"}, {"sha": "4ea8ef127121c4426ef7112d591b9127b989c0a4", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b957b2e02582cc7ba739cd3886f38800542759bb/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=b957b2e02582cc7ba739cd3886f38800542759bb", "patch": "@@ -242,11 +242,11 @@ class context\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n \n   /* Recorded API usage.  */\n-  vec<memento *> m_mementos;\n+  auto_vec<memento *> m_mementos;\n \n   /* Specific recordings, for use by dump_to_file.  */\n-  vec<compound_type *> m_compound_types;\n-  vec<function *> m_functions;\n+  auto_vec<compound_type *> m_compound_types;\n+  auto_vec<function *> m_functions;\n \n   type *m_basic_types[NUM_GCC_JIT_TYPES];\n   type *m_FILE_type;\n@@ -622,7 +622,7 @@ class function_type : public type\n   void replay_into (replayer *);\n \n   type * get_return_type () const { return m_return_type; }\n-  vec<type *> get_param_types () const { return m_param_types; }\n+  const vec<type *> &get_param_types () const { return m_param_types; }\n   int is_variadic () const { return m_is_variadic; }\n \n   string * make_debug_string_with_ptr ();\n@@ -633,7 +633,7 @@ class function_type : public type\n \n private:\n   type *m_return_type;\n-  vec<type *> m_param_types;\n+  auto_vec<type *> m_param_types;\n   int m_is_variadic;\n };\n \n@@ -749,7 +749,7 @@ class fields : public memento\n \n private:\n   compound_type *m_struct_or_union;\n-  vec<field *> m_fields;\n+  auto_vec<field *> m_fields;\n };\n \n class union_ : public compound_type\n@@ -897,7 +897,7 @@ class function : public memento\n \n   type *get_return_type () const { return m_return_type; }\n   string * get_name () const { return m_name; }\n-  vec<param *> get_params () const { return m_params; }\n+  const vec<param *> &get_params () const { return m_params; }\n \n   /* Get the given param by index.\n      Implements the post-error-checking part of\n@@ -920,11 +920,11 @@ class function : public memento\n   enum gcc_jit_function_kind m_kind;\n   type *m_return_type;\n   string *m_name;\n-  vec<param *> m_params;\n+  auto_vec<param *> m_params;\n   int m_is_variadic;\n   enum built_in_function m_builtin_id;\n-  vec<local *> m_locals;\n-  vec<block *> m_blocks;\n+  auto_vec<local *> m_locals;\n+  auto_vec<block *> m_blocks;\n };\n \n class block : public memento\n@@ -1011,7 +1011,7 @@ class block : public memento\n   function *m_func;\n   int m_index;\n   string *m_name;\n-  vec<statement *> m_statements;\n+  auto_vec<statement *> m_statements;\n   bool m_has_been_terminated;\n   bool m_is_reachable;\n \n@@ -1222,7 +1222,7 @@ class call : public rvalue\n \n private:\n   function *m_func;\n-  vec<rvalue *> m_args;\n+  auto_vec<rvalue *> m_args;\n };\n \n class call_through_ptr : public rvalue\n@@ -1241,7 +1241,7 @@ class call_through_ptr : public rvalue\n \n private:\n   rvalue *m_fn_ptr;\n-  vec<rvalue *> m_args;\n+  auto_vec<rvalue *> m_args;\n };\n \n class array_access : public lvalue"}]}