{"sha": "80c83e63223528b5e2d3f27cd29c45e30ba402dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjODNlNjMyMjM1MjhiNWUyZDNmMjdjZDI5YzQ1ZTMwYmE0MDJkYw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-26T06:07:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-26T06:07:02Z"}, "message": "svr4.h (CTORS_SECTION_ASM_OP): Do not emit directives in column zero.\n\n        * config/svr4.h (CTORS_SECTION_ASM_OP): Do not emit directives in\n        column zero.\n        (DTORS_SECTION_ASM_OP, INIT_SECTION_ASM_OP): Likewise.\n        (FINI_SECTION_ASM_OP, ASM_OUTPUT_SECTION_NAME): Likewise.\n\nFrom-SVN: r28253", "tree": {"sha": "fdf697de801f1c27d11d48d3a170180c261023bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf697de801f1c27d11d48d3a170180c261023bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c83e63223528b5e2d3f27cd29c45e30ba402dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c83e63223528b5e2d3f27cd29c45e30ba402dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c83e63223528b5e2d3f27cd29c45e30ba402dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c83e63223528b5e2d3f27cd29c45e30ba402dc/comments", "author": null, "committer": null, "parents": [{"sha": "63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "90e90278e1667ceae7a1258686dbd4c535eeca45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c83e63223528b5e2d3f27cd29c45e30ba402dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c83e63223528b5e2d3f27cd29c45e30ba402dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c83e63223528b5e2d3f27cd29c45e30ba402dc", "patch": "@@ -11,6 +11,11 @@ Sun Jul 25 22:45:55 1999  Richard Henderson  <rth@cygnus.com>\n \n Sun Jul 25 21:40:33 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* config/svr4.h (CTORS_SECTION_ASM_OP): Do not emit directives in\n+\tcolumn zero.\n+\t(DTORS_SECTION_ASM_OP, INIT_SECTION_ASM_OP): Likewise.\n+\t(FINI_SECTION_ASM_OP, ASM_OUTPUT_SECTION_NAME): Likewise.\n+\n \t* gcc.texi: More changes related to list conversion.\n \t* invoke.texi: Likewise.\n "}, {"sha": "1ecb941e93eadeade2ec0ab27e60ccc69d3fdf27", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c83e63223528b5e2d3f27cd29c45e30ba402dc/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c83e63223528b5e2d3f27cd29c45e30ba402dc/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=80c83e63223528b5e2d3f27cd29c45e30ba402dc", "patch": "@@ -457,17 +457,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n    errors unless the .ctors and .dtors sections are marked as writable\n    via the SHF_WRITE attribute.)  */\n \n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n    The definitions say how to change sections to the .init and .fini\n    sections.  This is the same for all known svr4 assemblers.  */\n \n-#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -567,14 +567,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n       s->type = type;\t\t\t\t\t\t\t\\\n       s->next = sections;\t\t\t\t\t\t\\\n       sections = s;\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, mode);\t\\\n+      fprintf (FILE, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, mode);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (DECL && s->type != type)\t\t\t\t\t\\\n \terror_with_decl (DECL, \"%s causes a section type conflict\");\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \".section\\t%s\\n\", NAME);\t\t\t\t\\\n+      fprintf (FILE, \"\\t.section\\t%s\\n\", NAME);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n "}]}