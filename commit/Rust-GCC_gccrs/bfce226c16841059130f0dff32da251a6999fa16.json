{"sha": "bfce226c16841059130f0dff32da251a6999fa16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjZTIyNmMxNjg0MTA1OTEzMGYwZGZmMzJkYTI1MWE2OTk5ZmExNg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-24T11:00:01Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-24T11:00:01Z"}, "message": "re PR fortran/40822 (Internal compiler error when Fortran intrinsic LEN referenced before explicit declaration)\n\n2009-07-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40822\n\t* array.c (gfc_resolve_character_array_constructor): Use new function\n\tgfc_new_charlen.\n\t* decl.c (add_init_expr_to_sym,variable_decl,match_char_spec,\n\tgfc_match_implicit): Ditto.\n\t* expr.c (gfc_simplify_expr): Ditto.\n\t* gfortran.h (gfc_new_charlen): New prototype.\n\t* iresolve.c (check_charlen_present,gfc_resolve_char_achar): Use new\n\tfunction gfc_new_charlen.\n\t* module.c (mio_charlen): Ditto.\n\t* resolve.c (gfc_resolve_substring_charlen,\n\tgfc_resolve_character_operator,fixup_charlen,resolve_fl_derived,\n\tresolve_symbol): Ditto.\n\t* symbol.c (gfc_new_charlen): New function to create a new gfc_charlen\n\tstructure and add it to a namespace.\n\t(gfc_copy_formal_args_intr): Make sure ts.cl is present\n\tfor CHARACTER variables.\n\n\n2009-07-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40822\n\t* gfortran.dg/char_length_16.f90: New.\n\nFrom-SVN: r150047", "tree": {"sha": "2f7e8f299953745e765d7fe3393df09fcc8c678a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7e8f299953745e765d7fe3393df09fcc8c678a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfce226c16841059130f0dff32da251a6999fa16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfce226c16841059130f0dff32da251a6999fa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfce226c16841059130f0dff32da251a6999fa16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfce226c16841059130f0dff32da251a6999fa16/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223cf84d33ea674610bb78cf88017a1e8c3e1d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223cf84d33ea674610bb78cf88017a1e8c3e1d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223cf84d33ea674610bb78cf88017a1e8c3e1d06"}], "stats": {"total": 134, "additions": 70, "deletions": 64}, "files": [{"sha": "5f6cf27a68d594597b0a2089442058eaa4ff7a0e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -1,3 +1,23 @@\n+2009-07-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40822\n+\t* array.c (gfc_resolve_character_array_constructor): Use new function\n+\tgfc_new_charlen.\n+\t* decl.c (add_init_expr_to_sym,variable_decl,match_char_spec,\n+\tgfc_match_implicit): Ditto.\n+\t* expr.c (gfc_simplify_expr): Ditto.\n+\t* gfortran.h (gfc_new_charlen): New prototype.\n+\t* iresolve.c (check_charlen_present,gfc_resolve_char_achar): Use new\n+\tfunction gfc_new_charlen.\n+\t* module.c (mio_charlen): Ditto.\n+\t* resolve.c (gfc_resolve_substring_charlen,\n+\tgfc_resolve_character_operator,fixup_charlen,resolve_fl_derived,\n+\tresolve_symbol): Ditto.\n+\t* symbol.c (gfc_new_charlen): New function to create a new gfc_charlen\n+\tstructure and add it to a namespace.\n+\t(gfc_copy_formal_args_intr): Make sure ts.cl is present\n+\tfor CHARACTER variables.\n+\n 2009-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/40643"}, {"sha": "2fee4658a0d5589408fcc72b15ae729d8144ddd6", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -1599,9 +1599,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t    goto got_charlen;\n \t  }\n \n-      expr->ts.cl = gfc_get_charlen ();\n-      expr->ts.cl->next = gfc_current_ns->cl_list;\n-      gfc_current_ns->cl_list = expr->ts.cl;\n+      expr->ts.cl = gfc_new_charlen (gfc_current_ns);\n     }\n \n got_charlen:"}, {"sha": "0207683349b9cef6c50ad42a86a9095a10f0b379", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -1258,9 +1258,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t      int clen;\n \t      /* If there are multiple CHARACTER variables declared on the\n \t\t same line, we don't want them to share the same length.  */\n-\t      sym->ts.cl = gfc_get_charlen ();\n-\t      sym->ts.cl->next = gfc_current_ns->cl_list;\n-\t      gfc_current_ns->cl_list = sym->ts.cl;\n+\t      sym->ts.cl = gfc_new_charlen (gfc_current_ns);\n \n \t      if (sym->attr.flavor == FL_PARAMETER)\n \t\t{\n@@ -1292,9 +1290,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t\t{\n \t\t  /* Build a new charlen to prevent simplification from\n \t\t     deleting the length before it is resolved.  */\n-\t\t  init->ts.cl = gfc_get_charlen ();\n-\t\t  init->ts.cl->next = gfc_current_ns->cl_list;\n-\t\t  gfc_current_ns->cl_list = sym->ts.cl;\n+\t\t  init->ts.cl = gfc_new_charlen (gfc_current_ns);\n \t\t  init->ts.cl->length = gfc_copy_expr (sym->ts.cl->length);\n \n \t\t  for (p = init->value.constructor; p; p = p->next)\n@@ -1597,9 +1593,7 @@ variable_decl (int elem)\n       switch (match_char_length (&char_len))\n \t{\n \tcase MATCH_YES:\n-\t  cl = gfc_get_charlen ();\n-\t  cl->next = gfc_current_ns->cl_list;\n-\t  gfc_current_ns->cl_list = cl;\n+\t  cl = gfc_new_charlen (gfc_current_ns);\n \n \t  cl->length = char_len;\n \t  break;\n@@ -1611,9 +1605,7 @@ variable_decl (int elem)\n \t      && (current_ts.cl->length == NULL\n \t\t  || current_ts.cl->length->expr_type != EXPR_CONSTANT))\n \t    {\n-\t      cl = gfc_get_charlen ();\n-\t      cl->next = gfc_current_ns->cl_list;\n-\t      gfc_current_ns->cl_list = cl;\n+\t      cl = gfc_new_charlen (gfc_current_ns);\n \t      cl->length = gfc_copy_expr (current_ts.cl->length);\n \t    }\n \t  else\n@@ -2235,9 +2227,7 @@ match_char_spec (gfc_typespec *ts)\n     }\n \n   /* Do some final massaging of the length values.  */\n-  cl = gfc_get_charlen ();\n-  cl->next = gfc_current_ns->cl_list;\n-  gfc_current_ns->cl_list = cl;\n+  cl = gfc_new_charlen (gfc_current_ns);\n \n   if (seen_length == 0)\n     cl->length = gfc_int_expr (1);\n@@ -2611,9 +2601,7 @@ gfc_match_implicit (void)\n \t      if (ts.type == BT_CHARACTER && !ts.cl)\n \t\t{\n \t\t  ts.kind = gfc_default_character_kind;\n-\t\t  ts.cl = gfc_get_charlen ();\n-\t\t  ts.cl->next = gfc_current_ns->cl_list;\n-\t\t  gfc_current_ns->cl_list = ts.cl;\n+\t\t  ts.cl = gfc_new_charlen (gfc_current_ns);\n \t\t  ts.cl->length = gfc_int_expr (1);\n \t\t}\n "}, {"sha": "df399b90e7d780beef7ee658e3c62bfe02fb9483", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -1681,9 +1681,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t  gfc_free (p->value.character.string);\n \t  p->value.character.string = s;\n \t  p->value.character.length = end - start;\n-\t  p->ts.cl = gfc_get_charlen ();\n-\t  p->ts.cl->next = gfc_current_ns->cl_list;\n-\t  gfc_current_ns->cl_list = p->ts.cl;\n+\t  p->ts.cl = gfc_new_charlen (gfc_current_ns);\n \t  p->ts.cl->length = gfc_int_expr (p->value.character.length);\n \t  gfc_free_ref_list (p->ref);\n \t  p->ref = NULL;"}, {"sha": "ce8e6fc1461986bbb830353521b02038f3218ef4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -2415,6 +2415,7 @@ int gfc_symbols_could_alias (gfc_symbol *, gfc_symbol *);\n void gfc_undo_symbols (void);\n void gfc_commit_symbols (void);\n void gfc_commit_symbol (gfc_symbol *);\n+gfc_charlen *gfc_new_charlen (gfc_namespace *);\n void gfc_free_charlen (gfc_charlen *, gfc_charlen *);\n void gfc_free_namespace (gfc_namespace *);\n "}, {"sha": "fdbf40c4408349c04fb0fb892b1bc9af89056fea", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -63,11 +63,7 @@ static void\n check_charlen_present (gfc_expr *source)\n {\n   if (source->ts.cl == NULL)\n-    {\n-      source->ts.cl = gfc_get_charlen ();\n-      source->ts.cl->next = gfc_current_ns->cl_list;\n-      gfc_current_ns->cl_list = source->ts.cl;\n-    }\n+    source->ts.cl = gfc_new_charlen (gfc_current_ns);\n \n   if (source->expr_type == EXPR_CONSTANT)\n     {\n@@ -165,9 +161,7 @@ gfc_resolve_char_achar (gfc_expr *f, gfc_expr *x, gfc_expr *kind,\n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = (kind == NULL)\n \t     ? gfc_default_character_kind : mpz_get_si (kind->value.integer);\n-  f->ts.cl = gfc_get_charlen ();\n-  f->ts.cl->next = gfc_current_ns->cl_list;\n-  gfc_current_ns->cl_list = f->ts.cl;\n+  f->ts.cl = gfc_new_charlen (gfc_current_ns);\n   f->ts.cl->length = gfc_int_expr (1);\n \n   f->value.function.name = gfc_get_string (name, f->ts.kind,"}, {"sha": "425bd36275b8297207ba118e5ba3d79c77b95530", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -2000,13 +2000,9 @@ mio_charlen (gfc_charlen **clp)\n     {\n       if (peek_atom () != ATOM_RPAREN)\n \t{\n-\t  cl = gfc_get_charlen ();\n+\t  cl = gfc_new_charlen (gfc_current_ns);\n \t  mio_expr (&cl->length);\n-\n \t  *clp = cl;\n-\n-\t  cl->next = gfc_current_ns->cl_list;\n-\t  gfc_current_ns->cl_list = cl;\n \t}\n     }\n "}, {"sha": "e09167b1be2ed7a1db122dae663a4fe65d305090", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -4012,11 +4012,7 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n   e->ts.kind = gfc_default_character_kind;\n \n   if (!e->ts.cl)\n-    {\n-      e->ts.cl = gfc_get_charlen ();\n-      e->ts.cl->next = gfc_current_ns->cl_list;\n-      gfc_current_ns->cl_list = e->ts.cl;\n-    }\n+    e->ts.cl = gfc_new_charlen (gfc_current_ns);\n \n   if (char_ref->u.ss.start)\n     start = gfc_copy_expr (char_ref->u.ss.start);\n@@ -4489,9 +4485,7 @@ gfc_resolve_character_operator (gfc_expr *e)\n   else if (op2->expr_type == EXPR_CONSTANT)\n     e2 = gfc_int_expr (op2->value.character.length);\n \n-  e->ts.cl = gfc_get_charlen ();\n-  e->ts.cl->next = gfc_current_ns->cl_list;\n-  gfc_current_ns->cl_list = e->ts.cl;\n+  e->ts.cl = gfc_new_charlen (gfc_current_ns);\n \n   if (!e1 || !e2)\n     return;\n@@ -4530,11 +4524,7 @@ fixup_charlen (gfc_expr *e)\n \n     default:\n       if (!e->ts.cl)\n-\t{\n-\t  e->ts.cl = gfc_get_charlen ();\n-\t  e->ts.cl->next = gfc_current_ns->cl_list;\n-\t  gfc_current_ns->cl_list = e->ts.cl;\n-\t}\n+\te->ts.cl = gfc_new_charlen (gfc_current_ns);\n \n       break;\n     }\n@@ -9085,16 +9075,10 @@ resolve_fl_derived (gfc_symbol *sym)\n \t      /* Copy char length.  */\n \t      if (ifc->ts.cl)\n \t\t{\n-\t\t  c->ts.cl = gfc_get_charlen();\n+\t\t  c->ts.cl = gfc_new_charlen (sym->ns);\n \t          c->ts.cl->resolved = ifc->ts.cl->resolved;\n \t\t  c->ts.cl->length = gfc_copy_expr (ifc->ts.cl->length);\n \t\t  /* TODO: gfc_expr_replace_symbols (c->ts.cl->length, c);*/\n-\t\t  /* Add charlen to namespace.  */\n-\t\t  /*if (c->formal_ns)\n-\t\t    {\n-\t\t      c->ts.cl->next = c->formal_ns->cl_list;\n-\t\t      c->formal_ns->cl_list = c->ts.cl;\n-\t\t    }*/\n \t\t}\n \t    }\n \t  else if (c->ts.interface->name[0] != '\\0')\n@@ -9490,16 +9474,10 @@ resolve_symbol (gfc_symbol *sym)\n \t  /* Copy char length.  */\n \t  if (ifc->ts.cl)\n \t    {\n-\t      sym->ts.cl = gfc_get_charlen();\n+\t      sym->ts.cl = gfc_new_charlen (sym->ns);\n \t      sym->ts.cl->resolved = ifc->ts.cl->resolved;\n \t      sym->ts.cl->length = gfc_copy_expr (ifc->ts.cl->length);\n \t      gfc_expr_replace_symbols (sym->ts.cl->length, sym);\n-\t      /* Add charlen to namespace.  */\n-\t      if (sym->formal_ns)\n-\t\t{\n-\t\t  sym->ts.cl->next = sym->formal_ns->cl_list;\n-\t\t  sym->formal_ns->cl_list = sym->ts.cl;\n-\t\t}\n \t    }\n \t}\n       else if (sym->ts.interface->name[0] != '\\0')"}, {"sha": "dd06e48a3058b11a78145e0e41b7f6cf099a5c78", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -3071,6 +3071,19 @@ gfc_free_finalizer_list (gfc_finalizer* list)\n }\n \n \n+/* Create a new gfc_charlen structure and add it to a namespace.  */\n+\n+gfc_charlen*\n+gfc_new_charlen (gfc_namespace *ns)\n+{\n+  gfc_charlen *cl;\n+  cl = gfc_get_charlen ();\n+  cl->next = ns->cl_list;\n+  ns->cl_list = cl;\n+  return cl;\n+}\n+\n+\n /* Free the charlen list from cl to end (end is not freed). \n    Free the whole list if end is NULL.  */\n \n@@ -3927,6 +3940,9 @@ gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n       formal_arg->sym->attr.flavor = FL_VARIABLE;\n       formal_arg->sym->attr.dummy = 1;\n \n+      if (formal_arg->sym->ts.type == BT_CHARACTER)\n+\tformal_arg->sym->ts.cl = gfc_new_charlen (gfc_current_ns);\n+\n       /* If this isn't the first arg, set up the next ptr.  For the\n         last arg built, the formal_arg->next will never get set to\n         anything other than NULL.  */"}, {"sha": "f6122c20624b55c84687e62f39729cf779d484d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -1,3 +1,8 @@\n+2009-07-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40822\n+\t* gfortran.dg/char_length_16.f90: New.\n+\n 2009-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/40643"}, {"sha": "3ff14d2395b34e3d65a8fa2d5f4eecdc57eb877f", "filename": "gcc/testsuite/gfortran.dg/char_length_16.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfce226c16841059130f0dff32da251a6999fa16/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_16.f90?ref=bfce226c16841059130f0dff32da251a6999fa16", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+!\n+! PR 40822: [4.5 Regression] Internal compiler error when Fortran intrinsic LEN referenced before explicit declaration\n+!\n+! Contributed by Mat Cross <mathewc@nag.co.uk>\n+\n+SUBROUTINE SEARCH(ITEMVAL)\n+  CHARACTER (*) :: ITEMVAL\n+  CHARACTER (LEN(ITEMVAL)) :: ITEM\n+  INTRINSIC LEN\n+END\n+"}]}