{"sha": "cf5f544227f16b63e224529190329eb0edca791c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1ZjU0NDIyN2YxNmI2M2UyMjQ1MjkxOTAzMjllYjBlZGNhNzkxYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-26T16:30:26Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-26T16:30:26Z"}, "message": "Fold bswap32(x) != 0 to x != 0 (and related transforms)\n\nThis patch to match.pd implements several closely related folding\nsimplifications at the tree-level, that make use of the property\nthat bit permutation functions, rotate and bswap have inverses.\n\n[1]\tbswap(X) eq/ne C, for constant C, simplifies to X eq/ne C'\n\twhere C'=bswap(C), generalizing the transform in the subject.\n[2]\tbswap(X) eq/ne bswap(Y) simplifies to X eq/ne Y.\n[3]\tlrotate(X,C1) eq/ne C2 simplifies to X eq/ne C3, where\n\tC3 = rrotate(C2,C1), i.e. apply the inverse rotation to C2.\n[4]\tLikewise, rrotate(X,C1) eq/ne C2 simplifies to X eq/ne C3,\n\twhere C3 = lrotate(C2,C1).\n[5]\trotate(X,Z) eq/ne rotate(Y,Z) simplifies to X eq/ne Y, when\n\tthe bit-count Z (the same on both sides) has no side-effects.\n[6]\trotate(X,Y) eq/ne 0 simplifies to X eq/ne 0 if Y has no\n\tside-effects.\n[7]\tLikewise, rotate(X,Y) eq/ne -1 simplifies to X eq/ne -1,\n\tif Y has no side-effects.\n\n2010-07-26  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/ChangeLog\n\t* match.pd (rotate): Simplify equality/inequality of rotations.\n\t(bswap): Simplify equality/inequality tests of byte swapping.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-eqrotate-1.c: New test case.\n\t* gcc.dg/fold-eqbswap-1.c: New test case.", "tree": {"sha": "ca89fa4ac8eb34f2b1e5a9566e8d298fdc6e9b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca89fa4ac8eb34f2b1e5a9566e8d298fdc6e9b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf5f544227f16b63e224529190329eb0edca791c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5f544227f16b63e224529190329eb0edca791c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5f544227f16b63e224529190329eb0edca791c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5f544227f16b63e224529190329eb0edca791c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e322f4326202799cca46e0cc1b435fcfcb06c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e322f4326202799cca46e0cc1b435fcfcb06c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e322f4326202799cca46e0cc1b435fcfcb06c5"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "4d41b7080be56a5c33f8ab8db4fe29eedd6626d7", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=cf5f544227f16b63e224529190329eb0edca791c", "patch": "@@ -3312,6 +3312,23 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      { tree rotate_type = TREE_TYPE (@0); }\n       (convert (rotate (convert:rotate_type @1) @2))))))\n \n+(for cmp (eq ne)\n+ (for rotate (lrotate rrotate)\n+      invrot (rrotate lrotate)\n+  /* (X >>r Y) cmp (Z >>r Y) may simplify to X cmp Y. */\n+  (simplify\n+   (cmp (rotate @1 @0) (rotate @2 @0))\n+   (cmp @1 @2))\n+  /* (X >>r C1) cmp C2 may simplify to X cmp C3. */\n+  (simplify\n+   (cmp (rotate @0 INTEGER_CST@1) INTEGER_CST@2)\n+   (cmp @0 { const_binop (invrot, TREE_TYPE (@0), @2, @1); }))\n+  /* (X >>r Y) cmp C where C is 0 or ~0, may simplify to X cmp C.  */\n+  (simplify\n+   (cmp (rotate @0 @1) INTEGER_CST@2)\n+    (if (integer_zerop (@2) || integer_all_onesp (@2))\n+     (cmp @0 @2)))))\n+\n /* Simplifications of conversions.  */\n \n /* Basic strip-useless-type-conversions / strip_nops.  */\n@@ -3622,6 +3639,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (simplify\n    (bswap (bitop:c (bswap @0) @1))\n    (bitop @0 (bswap @1))))\n+ (for cmp (eq ne)\n+  (simplify\n+   (cmp (bswap @0) (bswap @1))\n+   (cmp @0 @1))\n+  (simplify\n+   (cmp (bswap @0) INTEGER_CST@1)\n+   (cmp @0 (bswap @1))))\n  /* (bswap(x) >> C1) & C2 can sometimes be simplified to (x >> C3) & C2.  */\n  (simplify\n   (bit_and (convert1? (rshift@0 (convert2? (bswap@4 @1)) INTEGER_CST@2))"}, {"sha": "ed9820b0f909ec65628de32875e056203d40ab2b", "filename": "gcc/testsuite/gcc.dg/fold-eqbswap-1.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqbswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqbswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqbswap-1.c?ref=cf5f544227f16b63e224529190329eb0edca791c", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test1(int x, int y)\n+{\n+#if __SIZEOF_INT__ == 4\n+  return __builtin_bswap32(x) == __builtin_bswap32(y);\n+#else\n+  return x == y;\n+#endif\n+}\n+\n+int test2(int x, int y)\n+{\n+#if __SIZEOF_INT__ == 4\n+  return __builtin_bswap32(x) != __builtin_bswap32(y);\n+#else\n+  return x != y;\n+#endif\n+}\n+\n+int test3(int x)\n+{\n+#if __SIZEOF_INT__ == 4\n+  return __builtin_bswap32(x) == 12345;\n+#else\n+  return x;\n+#endif\n+}\n+\n+int test4(int x)\n+{\n+#if __SIZEOF_INT__ == 4\n+  return __builtin_bswap32(x) != 12345;\n+#else\n+  return x;\n+#endif\n+}\n+\n+int test1ll(long long x, long long y)\n+{\n+#if __SIZEOF_LONG_LONG__ == 8\n+  return __builtin_bswap64(x) == __builtin_bswap64(y);\n+#else\n+  return x == y;\n+#endif\n+}\n+\n+int test2ll(long long x, long long y)\n+{\n+#if __SIZEOF_LONG_LONG__ == 8\n+  return __builtin_bswap64(x) != __builtin_bswap64(y);\n+#else\n+  return x != y;\n+#endif\n+}\n+\n+int test3ll(long long x)\n+{\n+#if __SIZEOF_LONG_LONG__ == 8\n+  return __builtin_bswap64(x) == 12345;\n+#else\n+  return (int)x;\n+#endif\n+}\n+\n+int test4ll(long long x)\n+{\n+#if __SIZEOF_LONG_LONG__ == 8\n+  return __builtin_bswap64(x) != 12345;\n+#else\n+  return (int)x;\n+#endif\n+}\n+\n+int test1s(short x, short y)\n+{\n+#if __SIZEOF_SHORT__ == 2\n+  return __builtin_bswap16(x) == __builtin_bswap16(y);\n+#else\n+  return x == y;\n+#endif\n+}\n+\n+int test2s(short x, short y)\n+{\n+#if __SIZEOF_SHORT__ == 2\n+  return __builtin_bswap16(x) != __builtin_bswap16(y);\n+#else\n+  return x != y;\n+#endif\n+}\n+\n+int test3s(short x)\n+{\n+#if __SIZEOF_SHORT__ == 2\n+  return __builtin_bswap16(x) == 12345;\n+#else\n+  return (int)x;\n+#endif\n+}\n+\n+int test4s(short x)\n+{\n+#if __SIZEOF_SHORT__ == 2\n+  return __builtin_bswap16(x) != 12345;\n+#else\n+  return (int)x;\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_bswap\" 0 \"optimized\" } } */\n+"}, {"sha": "7d2b63718c55c9c9f916a8ce9106a9dfee1b90e8", "filename": "gcc/testsuite/gcc.dg/fold-eqrotate-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqrotate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5f544227f16b63e224529190329eb0edca791c/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqrotate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqrotate-1.c?ref=cf5f544227f16b63e224529190329eb0edca791c", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test1(unsigned int x, unsigned int y)\n+{\n+#if __SIZEOF_INT__ == 4\n+  unsigned int r1 = (x << 16) | (x >> 16);\n+  unsigned int r2 = (y << 16) | (y >> 16);\n+  return r1 == r2;\n+#else\n+  return x == y;\n+#endif\n+}\n+\n+int test2(unsigned int x)\n+{\n+#if __SIZEOF_INT__ == 4\n+  unsigned int r1 = (x << 16) | (x >> 16);\n+  return r1 == 12345;\n+#else\n+  return x == 12345;\n+#endif\n+}\n+\n+int test3(unsigned int x)\n+{\n+#if __SIZEOF_INT__ == 4\n+  unsigned int r1 = (x << 16) | (x >> 16);\n+  return r1 == 0;\n+#else\n+  return x == 0;\n+#endif\n+}\n+\n+int test4(unsigned int x)\n+{\n+#if __SIZEOF_INT__ == 4\n+  unsigned int r1 = (x << 16) | (x >> 16);\n+  return r1 == ~0;\n+#else\n+  return x == ~0;\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"r>>\" 0 \"optimized\" } } */\n+"}]}