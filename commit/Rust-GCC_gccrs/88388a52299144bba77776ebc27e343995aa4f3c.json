{"sha": "88388a52299144bba77776ebc27e343995aa4f3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzODhhNTIyOTkxNDRiYmE3Nzc3NmViYzI3ZTM0Mzk5NWFhNGYzYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-05-04T20:24:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-05-04T20:24:22Z"}, "message": "c-common.c (handle_mode_attribute): Use %qE for identifiers in diagnostics.\n\n\t* c-common.c (handle_mode_attribute): Use %qE for identifiers in\n\tdiagnostics.\n\t* c-decl.c (check_bitfield_type_and_width): Make orig_name a tree\n\tand pass value to identifier_to_locale.\n\t(warn_variable_length_array): Make name a tree.\n\t(grokdeclarator): Separate diagnostic texts for named and unnamed\n\tdeclarators.  Use %qE for named declarators.\n\t* c-parser.c (c_lex_one_token): Use %qE for identifiers in\n\tdiagnostics.\n\t* c-pragma.c (pop_alignment, handle_pragma_pack): Use %qE for\n\tidentifiers in diagnostics.\n\t* c-typeck.c (push_member_name, start_init): Pass identifiers to\n\tidentifier_to_locale.  Mark \"anonymous\" strings for translation.\n\ntestsuite:\n\t* gcc.dg/ucnid-8.c, gcc.dg/ucnid-9.c, gcc.dg/ucnid-10.c: New\n\ttests.\n\t* gcc.dg/declspec-9.c, gcc.dg/declspec-10.c, gcc.dg/declspec-11.c:\n\tUpdate expected errors.\n\nFrom-SVN: r147108", "tree": {"sha": "68743d2b81c50cab3b9196589c419307e1b8b58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68743d2b81c50cab3b9196589c419307e1b8b58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88388a52299144bba77776ebc27e343995aa4f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88388a52299144bba77776ebc27e343995aa4f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88388a52299144bba77776ebc27e343995aa4f3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88388a52299144bba77776ebc27e343995aa4f3c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960c5c791a8cf2314f09eb925cf8b48af2c9d662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960c5c791a8cf2314f09eb925cf8b48af2c9d662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960c5c791a8cf2314f09eb925cf8b48af2c9d662"}], "stats": {"total": 270, "additions": 200, "deletions": 70}, "files": [{"sha": "98c8052cfa3081ba1f81a239868ab1d56719004f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -1,3 +1,19 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (handle_mode_attribute): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* c-decl.c (check_bitfield_type_and_width): Make orig_name a tree\n+\tand pass value to identifier_to_locale.\n+\t(warn_variable_length_array): Make name a tree.\n+\t(grokdeclarator): Separate diagnostic texts for named and unnamed\n+\tdeclarators.  Use %qE for named declarators.\n+\t* c-parser.c (c_lex_one_token): Use %qE for identifiers in\n+\tdiagnostics.\n+\t* c-pragma.c (pop_alignment, handle_pragma_pack): Use %qE for\n+\tidentifiers in diagnostics.\n+\t* c-typeck.c (push_member_name, start_init): Pass identifiers to\n+\tidentifier_to_locale.  Mark \"anonymous\" strings for translation.\n+\n 2009-05-04  Michael Eager <eager@eagercon.com>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimate_address): Allow"}, {"sha": "9fa3b96aa610345b4f7f2d33ab0e982b647d1990", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -6379,15 +6379,16 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree type = *node;\n+  tree ident = TREE_VALUE (args);\n \n   *no_add_attrs = true;\n \n-  if (TREE_CODE (TREE_VALUE (args)) != IDENTIFIER_NODE)\n+  if (TREE_CODE (ident) != IDENTIFIER_NODE)\n     warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n   else\n     {\n       int j;\n-      const char *p = IDENTIFIER_POINTER (TREE_VALUE (args));\n+      const char *p = IDENTIFIER_POINTER (ident);\n       int len = strlen (p);\n       enum machine_mode mode = VOIDmode;\n       tree typefm;\n@@ -6427,7 +6428,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n       if (mode == VOIDmode)\n \t{\n-\t  error (\"unknown machine mode %qs\", p);\n+\t  error (\"unknown machine mode %qE\", ident);\n \t  return NULL_TREE;\n \t}\n "}, {"sha": "a851c6de1520b9195db504cd1f8a4963375419d0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 105, "deletions": 47, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -3894,12 +3894,14 @@ flexible_array_type_p (tree type)\n /* Performs sanity checks on the TYPE and WIDTH of the bit-field NAME,\n    replacing with appropriate values if they are invalid.  */\n static void\n-check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n+check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n {\n   tree type_mv;\n   unsigned int max_width;\n   unsigned HOST_WIDE_INT w;\n-  const char *name = orig_name ? orig_name: _(\"<anonymous>\");\n+  const char *name = (orig_name\n+\t\t      ? identifier_to_locale (IDENTIFIER_POINTER (orig_name))\n+\t\t      : _(\"<anonymous>\"));\n \n   /* Detect and ignore out of range field width and process valid\n      field widths.  */\n@@ -3967,7 +3969,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n /* Print warning about variable length array if necessary.  */\n \n static void\n-warn_variable_length_array (const char *name, tree size)\n+warn_variable_length_array (tree name, tree size)\n {\n   int const_size = TREE_CONSTANT (size);\n \n@@ -3976,7 +3978,8 @@ warn_variable_length_array (const char *name, tree size)\n       if (const_size)\n \t{\n \t  if (name)\n-\t    pedwarn (input_location, OPT_Wvla, \"ISO C90 forbids array %qs whose size \"\n+\t    pedwarn (input_location, OPT_Wvla,\n+\t\t     \"ISO C90 forbids array %qE whose size \"\n \t\t     \"can%'t be evaluated\",\n \t\t     name);\n \t  else\n@@ -3986,7 +3989,8 @@ warn_variable_length_array (const char *name, tree size)\n       else\n \t{\n \t  if (name) \n-\t    pedwarn (input_location, OPT_Wvla, \"ISO C90 forbids variable length array %qs\",\n+\t    pedwarn (input_location, OPT_Wvla,\n+\t\t     \"ISO C90 forbids variable length array %qE\",\n \t\t     name);\n \t  else\n \t    pedwarn (input_location, OPT_Wvla, \"ISO C90 forbids variable length array\");\n@@ -3998,7 +4002,7 @@ warn_variable_length_array (const char *name, tree size)\n         {\n \t  if (name)\n \t    warning (OPT_Wvla,\n-\t\t     \"the size of array %qs can\"\n+\t\t     \"the size of array %qE can\"\n \t\t     \"%'t be evaluated\", name);\n \t  else\n \t    warning (OPT_Wvla,\n@@ -4008,7 +4012,7 @@ warn_variable_length_array (const char *name, tree size)\n \t{\n \t  if (name)\n \t    warning (OPT_Wvla,\n-\t\t     \"variable length array %qs is used\",\n+\t\t     \"variable length array %qE is used\",\n \t\t     name);\n \t  else\n \t    warning (OPT_Wvla,\n@@ -4098,7 +4102,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   int restrictp;\n   int volatilep;\n   int type_quals = TYPE_UNQUALIFIED;\n-  const char *name, *orig_name;\n+  tree name = NULL_TREE;\n   bool funcdef_flag = false;\n   bool funcdef_syntax = false;\n   int size_varies = 0;\n@@ -4126,10 +4130,9 @@ grokdeclarator (const struct c_declarator *declarator,\n     funcdef_flag = true, decl_context = NORMAL;\n \n   /* Look inside a declarator for the name being declared\n-     and get it as a string, for an error message.  */\n+     and get it as an IDENTIFIER_NODE, for an error message.  */\n   {\n     const struct c_declarator *decl = declarator;\n-    name = 0;\n \n     while (decl)\n       switch (decl->kind)\n@@ -4147,16 +4150,21 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \tcase cdk_id:\n \t  if (decl->u.id)\n-\t    name = IDENTIFIER_POINTER (decl->u.id);\n+\t    name = decl->u.id;\n \t  decl = 0;\n \t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-    orig_name = name;\n     if (name == 0)\n-      name = \"type name\";\n+      {\n+\tgcc_assert (decl_context == PARM\n+\t\t    || decl_context == TYPENAME\n+\t\t    || (decl_context == FIELD\n+\t\t\t&& declarator->kind == cdk_id));\n+\tgcc_assert (!initialized);\n+      }\n   }\n \n   /* A function definition's declarator must have the form of\n@@ -4178,7 +4186,10 @@ grokdeclarator (const struct c_declarator *declarator,\n       && current_scope == file_scope\n       && variably_modified_type_p (type, NULL_TREE))\n     {\n-      error (\"variably modified %qs at file scope\", name);\n+      if (name)\n+\terror (\"variably modified %qE at file scope\", name);\n+      else\n+\terror (\"variably modified field at file scope\");\n       type = integer_type_node;\n     }\n \n@@ -4194,9 +4205,16 @@ grokdeclarator (const struct c_declarator *declarator,\n       if ((warn_implicit_int || warn_return_type || flag_isoc99)\n \t  && funcdef_flag)\n \twarn_about_return_type = 1;\n-      else \n-\tpedwarn_c99 (input_location, flag_isoc99 ? 0 : OPT_Wimplicit_int, \n-\t\t     \"type defaults to %<int%> in declaration of %qs\", name);\n+      else\n+\t{\n+\t  if (name)\n+\t    pedwarn_c99 (input_location, flag_isoc99 ? 0 : OPT_Wimplicit_int, \n+\t\t\t \"type defaults to %<int%> in declaration of %qE\",\n+\t\t\t name);\n+\t  else\n+\t    pedwarn_c99 (input_location, flag_isoc99 ? 0 : OPT_Wimplicit_int, \n+\t\t\t \"type defaults to %<int%> in type name\");\n+\t}\n     }\n \n   /* Adjust the type if a bit-field is being declared,\n@@ -4270,11 +4288,17 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  switch (decl_context)\n \t    {\n \t    case FIELD:\n-\t      error (\"storage class specified for structure field %qs\",\n-\t\t     name);\n+\t      if (name)\n+\t\terror (\"storage class specified for structure field %qE\",\n+\t\t       name);\n+\t      else\n+\t\terror (\"storage class specified for structure field\");\n \t      break;\n \t    case PARM:\n-\t      error (\"storage class specified for parameter %qs\", name);\n+\t      if (name)\n+\t\terror (\"storage class specified for parameter %qE\", name);\n+\t      else\n+\t\terror (\"storage class specified for unnamed parameter\");\n \t      break;\n \t    default:\n \t      error (\"storage class specified for typename\");\n@@ -4294,26 +4318,26 @@ grokdeclarator (const struct c_declarator *declarator,\n            /* It is fine to have 'extern const' when compiling at C\n               and C++ intersection.  */\n            if (!(warn_cxx_compat && constp))\n-             warning (0, \"%qs initialized and declared %<extern%>\", name);\n+             warning (0, \"%qE initialized and declared %<extern%>\", name);\n          }\n       else\n-\terror (\"%qs has both %<extern%> and initializer\", name);\n+\terror (\"%qE has both %<extern%> and initializer\", name);\n     }\n   else if (current_scope == file_scope)\n     {\n       if (storage_class == csc_auto)\n-\terror (\"file-scope declaration of %qs specifies %<auto%>\", name);\n+\terror (\"file-scope declaration of %qE specifies %<auto%>\", name);\n       if (pedantic && storage_class == csc_register)\n \tpedwarn (input_location, OPT_pedantic,\n-\t\t \"file-scope declaration of %qs specifies %<register%>\", name);\n+\t\t \"file-scope declaration of %qE specifies %<register%>\", name);\n     }\n   else\n     {\n       if (storage_class == csc_extern && funcdef_flag)\n-\terror (\"nested function %qs declared %<extern%>\", name);\n+\terror (\"nested function %qE declared %<extern%>\", name);\n       else if (threadp && storage_class == csc_none)\n \t{\n-\t  error (\"function-scope %qs implicitly auto and declared \"\n+\t  error (\"function-scope %qE implicitly auto and declared \"\n \t\t \"%<__thread%>\",\n \t\t name);\n \t  threadp = false;\n@@ -4407,13 +4431,19 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t    if (VOID_TYPE_P (type))\n \t      {\n-\t\terror (\"declaration of %qs as array of voids\", name);\n+\t\tif (name)\n+\t\t  error (\"declaration of %qE as array of voids\", name);\n+\t\telse\n+\t\t  error (\"declaration of type name as array of voids\");\n \t\ttype = error_mark_node;\n \t      }\n \n \t    if (TREE_CODE (type) == FUNCTION_TYPE)\n \t      {\n-\t\terror (\"declaration of %qs as array of functions\", name);\n+\t\tif (name)\n+\t\t  error (\"declaration of %qE as array of functions\", name);\n+\t\telse\n+\t\t  error (\"declaration of type name as array of functions\");\n \t\ttype = error_mark_node;\n \t      }\n \n@@ -4444,22 +4474,34 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t\tif (!INTEGRAL_TYPE_P (TREE_TYPE (size)))\n \t\t  {\n-\t\t    error (\"size of array %qs has non-integer type\", name);\n+\t\t    if (name)\n+\t\t      error (\"size of array %qE has non-integer type\", name);\n+\t\t    else\n+\t\t      error (\"size of unnamed array has non-integer type\");\n \t\t    size = integer_one_node;\n \t\t  }\n \n \t\tsize = c_fully_fold (size, false, &size_maybe_const);\n \n \t\tif (pedantic && size_maybe_const && integer_zerop (size))\n-\t\t  pedwarn (input_location, OPT_pedantic,\n-\t\t\t   \"ISO C forbids zero-size array %qs\", name);\n+\t\t  {\n+\t\t    if (name)\n+\t\t      pedwarn (input_location, OPT_pedantic,\n+\t\t\t       \"ISO C forbids zero-size array %qE\", name);\n+\t\t    else\n+\t\t      pedwarn (input_location, OPT_pedantic,\n+\t\t\t       \"ISO C forbids zero-size array\");\n+\t\t  }\n \n \t\tif (TREE_CODE (size) == INTEGER_CST && size_maybe_const)\n \t\t  {\n \t\t    constant_expression_warning (size);\n \t\t    if (tree_int_cst_sgn (size) < 0)\n \t\t      {\n-\t\t\terror (\"size of array %qs is negative\", name);\n+\t\t\tif (name)\n+\t\t\t  error (\"size of array %qE is negative\", name);\n+\t\t\telse\n+\t\t\t  error (\"size of unnamed array is negative\");\n \t\t\tsize = integer_one_node;\n \t\t      }\n \t\t    /* Handle a size folded to an integer constant but\n@@ -4474,16 +4516,17 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\tif ((decl_context == NORMAL || decl_context == FIELD)\n \t\t\t    && current_scope == file_scope)\n \t\t\t  pedwarn (input_location, 0,\n-\t\t\t\t   \"variably modified %qs at file scope\", name);\n+\t\t\t\t   \"variably modified %qE at file scope\",\n+\t\t\t\t   name);\n \t\t\telse\n \t\t\t  this_size_varies = size_varies = 1;\n-\t\t\twarn_variable_length_array (orig_name, size);\n+\t\t\twarn_variable_length_array (name, size);\n \t\t      }\n \t\t  }\n \t\telse if ((decl_context == NORMAL || decl_context == FIELD)\n \t\t\t && current_scope == file_scope)\n \t\t  {\n-\t\t    error (\"variably modified %qs at file scope\", name);\n+\t\t    error (\"variably modified %qE at file scope\", name);\n \t\t    size = integer_one_node;\n \t\t  }\n \t\telse\n@@ -4492,7 +4535,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       nonconstant even if it is (eg) a const variable\n \t\t       with known value.  */\n \t\t    this_size_varies = size_varies = 1;\n-\t\t    warn_variable_length_array (orig_name, size);\n+\t\t    warn_variable_length_array (name, size);\n \t\t  }\n \n \t\tif (integer_zerop (size) && !this_size_varies)\n@@ -4533,7 +4576,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    if (TREE_CODE (itype) == INTEGER_CST\n \t\t\t&& TREE_OVERFLOW (itype))\n \t\t      {\n-\t\t\terror (\"size of array %qs is too large\", name);\n+\t\t\tif (name)\n+\t\t\t  error (\"size of array %qE is too large\", name);\n+\t\t\telse\n+\t\t\t  error (\"size of unnamed array is too large\");\n \t\t\ttype = error_mark_node;\n \t\t\tcontinue;\n \t\t      }\n@@ -4686,12 +4732,20 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    /* Warn about some types functions can't return.  */\n \t    if (TREE_CODE (type) == FUNCTION_TYPE)\n \t      {\n-\t\terror (\"%qs declared as function returning a function\", name);\n+\t\tif (name)\n+\t\t  error (\"%qE declared as function returning a function\",\n+\t\t\t name);\n+\t\telse\n+\t\t  error (\"type name declared as function \"\n+\t\t\t \"returning a function\");\n \t\ttype = integer_type_node;\n \t      }\n \t    if (TREE_CODE (type) == ARRAY_TYPE)\n \t      {\n-\t\terror (\"%qs declared as function returning an array\", name);\n+\t\tif (name)\n+\t\t  error (\"%qE declared as function returning an array\", name);\n+\t\telse\n+\t\t  error (\"type name declared as function returning an array\");\n \t\ttype = integer_type_node;\n \t      }\n \n@@ -4806,7 +4860,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   /* Check the type and width of a bit-field.  */\n   if (bitfield)\n-    check_bitfield_type_and_width (&type, width, orig_name);\n+    check_bitfield_type_and_width (&type, width, name);\n \n   /* Did array size calculations overflow?  */\n \n@@ -4815,7 +4869,10 @@ grokdeclarator (const struct c_declarator *declarator,\n       && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST\n       && TREE_OVERFLOW (TYPE_SIZE_UNIT (type)))\n     {\n-      error (\"size of array %qs is too large\", name);\n+      if (name)\n+\terror (\"size of array %qE is too large\", name);\n+      else\n+\terror (\"size of unnamed array is too large\");\n       /* If we proceed with the array type as it is, we'll eventually\n \t crash in tree_low_cst().  */\n       type = error_mark_node;\n@@ -4880,7 +4937,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    && !(storage_class == csc_static\n \t\t\t || storage_class == csc_register)))))\n     {\n-      error (\"variable or field %qs declared void\", name);\n+      error (\"variable or field %qE declared void\", name);\n       type = integer_type_node;\n     }\n \n@@ -4958,13 +5015,13 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \tif (TREE_CODE (type) == FUNCTION_TYPE)\n \t  {\n-\t    error (\"field %qs declared as a function\", name);\n+\t    error (\"field %qE declared as a function\", name);\n \t    type = build_pointer_type (type);\n \t  }\n \telse if (TREE_CODE (type) != ERROR_MARK\n \t\t && !COMPLETE_OR_UNBOUND_ARRAY_TYPE_P (type))\n \t  {\n-\t    error (\"field %qs has incomplete type\", name);\n+\t    error (\"field %qE has incomplete type\", name);\n \t    type = error_mark_node;\n \t  }\n \ttype = c_build_qualified_type (type, type_quals);\n@@ -4981,7 +5038,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       {\n \tif (storage_class == csc_register || threadp)\n \t  {\n-\t    error (\"invalid storage class for function %qs\", name);\n+\t    error (\"invalid storage class for function %qE\", name);\n \t   }\n \telse if (current_scope != file_scope)\n \t  {\n@@ -4991,10 +5048,11 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       GCC allows 'auto', perhaps with 'inline', to support\n \t       nested functions.  */\n \t    if (storage_class == csc_auto)\n-\t\tpedwarn (input_location, OPT_pedantic, \"invalid storage class for function %qs\", name);\n+\t\tpedwarn (input_location, OPT_pedantic,\n+\t\t\t \"invalid storage class for function %qE\", name);\n \t    else if (storage_class == csc_static)\n \t      {\n-\t\terror (\"invalid storage class for function %qs\", name);\n+\t\terror (\"invalid storage class for function %qE\", name);\n \t\tif (funcdef_flag)\n \t\t  storage_class = declspecs->storage_class = csc_none;\n \t\telse"}, {"sha": "6c839e9104cc20768e175f2f544d56ba7944d7fb", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -222,8 +222,8 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t      {\n \t\twarning_at (token->location,\n \t\t\t    OPT_Wc___compat,\n-\t\t\t    \"identifier %qs conflicts with C++ keyword\",\n-\t\t\t    IDENTIFIER_POINTER (token->value));\n+\t\t\t    \"identifier %qE conflicts with C++ keyword\",\n+\t\t\t    token->value);\n \t      }\n \t    else if (c_dialect_objc ())\n \t      {"}, {"sha": "64a224f4a28a58e08c621641618ea3fc80cf41e8", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -112,8 +112,8 @@ pop_alignment (tree id)\n \t  }\n       if (entry == NULL)\n \twarning (OPT_Wpragmas, \"\\\n-#pragma pack(pop, %s) encountered without matching #pragma pack(push, %s)\"\n-\t\t , IDENTIFIER_POINTER (id), IDENTIFIER_POINTER (id));\n+#pragma pack(pop, %E) encountered without matching #pragma pack(push, %E)\"\n+\t\t , id, id);\n     }\n \n   entry = alignment_stack->prev;\n@@ -179,7 +179,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n       else if (!strcmp (op, \"pop\"))\n \taction = pop;\n       else\n-\tGCC_BAD2 (\"unknown action %qs for %<#pragma pack%> - ignored\", op);\n+\tGCC_BAD2 (\"unknown action %qE for %<#pragma pack%> - ignored\", x);\n \n       while ((token = pragma_lex (&x)) == CPP_COMMA)\n \t{"}, {"sha": "bef5e3814f202d43487dc455589cc0357a1f2f82", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -5146,7 +5146,9 @@ static void\n push_member_name (tree decl)\n {\n   const char *const string\n-    = DECL_NAME (decl) ? IDENTIFIER_POINTER (DECL_NAME (decl)) : \"<anonymous>\";\n+    = (DECL_NAME (decl)\n+       ? identifier_to_locale (IDENTIFIER_POINTER (DECL_NAME (decl)))\n+       : _(\"<anonymous>\"));\n   PUSH_SPELLING (SPELLING_MEMBER, string, u.s);\n }\n \n@@ -5765,13 +5767,13 @@ start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n \t       || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n \t       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n \t       || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE));\n-      locus = IDENTIFIER_POINTER (DECL_NAME (decl));\n+      locus = identifier_to_locale (IDENTIFIER_POINTER (DECL_NAME (decl)));\n     }\n   else\n     {\n       require_constant_value = 0;\n       require_constant_elements = 0;\n-      locus = \"(anonymous)\";\n+      locus = _(\"(anonymous)\");\n     }\n \n   constructor_stack = 0;"}, {"sha": "2da28f3e53adfd34f4ac50e649d597d23b95442c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -1,3 +1,10 @@\n+2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/ucnid-8.c, gcc.dg/ucnid-9.c, gcc.dg/ucnid-10.c: New\n+\ttests.\n+\t* gcc.dg/declspec-9.c, gcc.dg/declspec-10.c, gcc.dg/declspec-11.c:\n+\tUpdate expected errors.\n+\n 2009-05-04  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/28152"}, {"sha": "f938bf10e7af45aa3d6b756f739456f70a0dc7ba", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -9,11 +9,11 @@ auto void f0 (void) {} /* { dg-warning \"function definition declared 'auto'\" } *\n register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n register int y; /* { dg-warning \"file-scope declaration of 'y' specifies 'register'\" } */"}, {"sha": "c3fec469a81f721e1d7067192e14e2553a44d159", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -9,11 +9,11 @@ auto void f0 (void) {} /* { dg-error \"function definition declared 'auto'\" } */\n register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n register int y; /* { dg-error \"file-scope declaration of 'y' specifies 'register'\" } */"}, {"sha": "ece47c66fb14a622f4723083359db21075674cec", "filename": "gcc/testsuite/gcc.dg/declspec-9.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -10,11 +10,11 @@ auto void f0 (void) {} /* { dg-warning \"function definition declared 'auto'\" } *\n register void f1 (void) {} /* { dg-error \"function definition declared 'register'\" } */\n typedef void f2 (void) {} /* { dg-error \"function definition declared 'typedef'\" } */\n \n-void f3 (auto int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f4 (extern int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f3 (auto int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f4 (extern int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n void f5 (register int);\n-void f6 (static int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n-void f7 (typedef int); /* { dg-error \"storage class specified for parameter 'type name'\" } */\n+void f6 (static int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n+void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n register int y;"}, {"sha": "39148108b3330e9650acd12d4910e7e06541572e", "filename": "gcc/testsuite/gcc.dg/ucnid-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -0,0 +1,8 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Test #pragma pack diagnostics.  */\n+/* { dg-do compile { target *-*-linux* *-*-cygwin* powerpc*-*-eabi* } } */\n+/* { dg-options \"-std=gnu99 -fextended-identifiers\" } */\n+\n+#pragma pack(push)\n+#pragma pack(pop, \\u00f3) /* { dg-warning \"pop, \\\\\\\\U000000f3.*push, \\\\\\\\U000000f3\" } */\n+#pragma pack(\\u00e7) /* { dg-warning \"unknown action '\\\\\\\\U000000e7'\" } */"}, {"sha": "4ec3eeba29f79e0354a9e8b7b7bb875d64a77614", "filename": "gcc/testsuite/gcc.dg/ucnid-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -0,0 +1,14 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Further tests of C front-end diagnostics.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fextended-identifiers -Wvla\" } */\n+\n+int a __attribute__((__mode__(\\u00e9))); /* { dg-error \"unknown machine mode '\\\\\\\\U000000e9'\" } */\n+struct s1 { int \\u00e9 : 0; }; /* { dg-error \"zero width for bit-field '\\\\\\\\U000000e9'\" } */\n+\n+void f (int b) { int \\u00e9[b]; } /* { dg-warning \"variable length array '\\\\\\\\U000000e9'\" } */\n+\n+void g (static int \\u00e9); /* { dg-error \"storage class specified for parameter '\\\\\\\\U000000e9'\" } */\n+\n+struct s2 { int \\u00e1; } \\u00e9 = { { 0 } }; /* { dg-warning \"braces around scalar initializer\" } */\n+/* { dg-warning \"near initialization for '\\\\\\\\U000000e9\\\\.\\\\\\\\U000000e1'\" \"UCN diag\" { target *-*-* } 13 } */"}, {"sha": "c563b91106daf366d82d698aaea4566bd08e152a", "filename": "gcc/testsuite/gcc.dg/ucnid-9.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88388a52299144bba77776ebc27e343995aa4f3c/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9.c?ref=88388a52299144bba77776ebc27e343995aa4f3c", "patch": "@@ -0,0 +1,24 @@\n+/* Test __func__ with extended identifiers and character set\n+   conversions.  */\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n+/* { dg-options \"-std=c99 -fextended-identifiers -fexec-charset=ISO-8859-1\" } */\n+/* { dg-require-iconv \"ISO-8859-1\" } */\n+\n+extern int strcmp (const char *, const char *);\n+extern void abort (void);\n+extern void exit (int);\n+\n+void\n+\\u00e9 (void)\n+{\n+  if (strcmp (__func__, \"\\u00e9\") != 0)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  \\u00e9 ();\n+  exit (0);\n+}"}]}