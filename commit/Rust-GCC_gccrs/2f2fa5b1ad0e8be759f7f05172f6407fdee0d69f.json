{"sha": "2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyZmE1YjFhZDBlOGJlNzU5ZjdmMDUxNzJmNjQwN2ZkZWUwZDY5Zg==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T15:52:49Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T15:52:49Z"}, "message": "* i386.h (FUNCTION_BEGIN_EPILOGUE): Renamed from FUNCTION_EPILOGUE.\n\nFrom-SVN: r11989", "tree": {"sha": "85375290533a3a99e661bba85f9db42e061f57f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85375290533a3a99e661bba85f9db42e061f57f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f/comments", "author": null, "committer": null, "parents": [{"sha": "77a989d1b601bacbd84158982df1721e80a7c918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a989d1b601bacbd84158982df1721e80a7c918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a989d1b601bacbd84158982df1721e80a7c918"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "2e60d4ddd3c3ed87292f8f126a076ee0a293cd09", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "patch": "@@ -87,6 +87,7 @@ extern int target_flags;\n #define MASK_IEEE_FP\t\t000000000100\t/* IEEE fp comparisons */\n #define MASK_FLOAT_RETURNS\t000000000200\t/* Return float in st(0) */\n #define MASK_NO_FANCY_MATH_387\t000000000400\t/* Disable sin, cos, sqrt */\n+#define MASK_OMIT_LEAF_FRAME_POINTER 0x00000800 /* omit leaf frame pointers */\n \t\t\t\t\t\t/* Temporary codegen switches */\n #define MASK_DEBUG_ADDR\t\t000001000000\t/* Debug GO_IF_LEGITIMATE_ADDRESS */\n #define MASK_NO_WIDE_MULTIPLY\t000002000000\t/* Disable 32x32->64 multiplies */\n@@ -125,6 +126,9 @@ extern int target_flags;\n    This is because FreeBSD lacks these in the math-emulator-code */\n #define TARGET_NO_FANCY_MATH_387 (target_flags & MASK_NO_FANCY_MATH_387)\n \n+/* Don't create frame pointers for leaf functions */\n+#define TARGET_OMIT_LEAF_FRAME_POINTER (target_flags & MASK_OMIT_LEAF_FRAME_POINTER)\n+\n /* Temporary switches for tuning code generation */\n \n /* Disable 32x32->64 bit multiplies that are used for long long multiplies\n@@ -155,7 +159,7 @@ extern int target_flags;\n #define TARGET_USE_Q_REG (ix86_cpu == PROCESSOR_PENTIUM)\n #define TARGET_USE_ANY_REG (ix86_cpu == PROCESSOR_I486)\n #define TARGET_CMOVE (ix86_isa == PROCESSOR_PENTIUMPRO)\n-#define TARGET_DEEP_BRANCH_PREDICTION (ix86_isa == PROCESSOR_PENTIUMPRO)\n+#define TARGET_DEEP_BRANCH_PREDICTION (ix86_cpu == PROCESSOR_PENTIUMPRO)\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n { { \"80387\",\t\t\t MASK_80387 },\t\t\t\t\\\n@@ -181,6 +185,8 @@ extern int target_flags;\n   { \"no-fp-ret-in-387\",\t\t-MASK_FLOAT_RETURNS },\t\t\t\\\n   { \"no-fancy-math-387\",\t MASK_NO_FANCY_MATH_387 },\t\t\\\n   { \"fancy-math-387\",\t\t-MASK_NO_FANCY_MATH_387 },\t\t\\\n+  { \"omit-leaf-frame-pointer\",\t MASK_OMIT_LEAF_FRAME_POINTER }, \t\\\n+  { \"no-omit-leaf-frame-pointer\",-MASK_OMIT_LEAF_FRAME_POINTER },       \\\n   { \"no-wide-multiply\",\t\t MASK_NO_WIDE_MULTIPLY },\t\t\\\n   { \"wide-multiply\",\t\t-MASK_NO_WIDE_MULTIPLY },\t\t\\\n   { \"debug-addr\",\t\t MASK_DEBUG_ADDR },\t\t\t\\\n@@ -245,7 +251,7 @@ extern int ix86_isa;\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n { { \"cpu=\",\t\t&ix86_cpu_string},\t\t\t\t\\\n-  { \"isa=\",\t\t&ix86_isa_string},\t\t\t\t\\\n+  { \"arch=\",\t\t&ix86_isa_string},\t\t\t\t\\\n   { \"reg-alloc=\",\t&i386_reg_alloc_order },\t\t\t\\\n   { \"regparm=\",\t\t&i386_regparm_string },\t\t\t\t\\\n   { \"align-loops=\",\t&i386_align_loops_string },\t\t\t\\\n@@ -277,13 +283,13 @@ extern int ix86_isa;\n #ifndef CC1_SPEC\n #define CC1_SPEC \"\\\n %{!mcpu*: \\\n-%{m386:-mcpu=i386} \\\n-%{mno-486:-mcpu=i386} \\\n-%{mno-pentium:-mcpu=i386} \\\n-%{mno-pentiumpro:-mcpu=i386} \\\n-%{m486:-mcpu=i486} \\\n-%{mno-386:-mcpu=i486} \\\n+%{m386:-mcpu=i386 -march=i386} \\\n+%{mno-486:-mcpu=i386 -march=i386} \\\n+%{m486:-mcpu=i486 -march=i486} \\\n+%{mno-386:-mcpu=i486 -march=i486} \\\n+%{mno-pentium:-mcpu=i486 -march=i486} \\\n %{mpentium:-mcpu=pentium} \\\n+%{mno-pentiumpro:-mcpu=pentium} \\\n %{mpentiumpro:-mcpu=pentiumpro}}\"\n #endif\n \f\n@@ -544,7 +550,7 @@ extern int ix86_isa;\n    Zero means the frame pointer need not be set up (and parms\n    may be accessed via the stack pointer) in functions that seem suitable.\n    This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 0\n+#define FRAME_POINTER_REQUIRED (TARGET_OMIT_LEAF_FRAME_POINTER && !leaf_function_p ()) \t\n \n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 16\n@@ -1359,14 +1365,19 @@ while (0)\n    off the end.  This happens if the function ends in an \"exit\" call, or\n    if a `return' insn is emitted directly into the function. */\n \n-#define FUNCTION_EPILOGUE(FILE, SIZE) \t\t\\\n+#if 0\n+#define FUNCTION_BEGIN_EPILOGUE(FILE)\t\t\\\n do {\t\t\t\t\t\t\\\n   rtx last = get_last_insn ();\t\t\t\\\n   if (last && GET_CODE (last) == NOTE)\t\t\\\n     last = prev_nonnote_insn (last);\t\t\\\n-  if (! last || GET_CODE (last) != BARRIER)\t\\\n-    function_epilogue (FILE, SIZE);\t\t\\\n+/*  if (! last || GET_CODE (last) != BARRIER)\t\\\n+    function_epilogue (FILE, SIZE);*/\t\t\\\n } while (0)\n+#endif\n+\n+#define FUNCTION_EPILOGUE(FILE, SIZE)     \\\n+  function_epilogue (FILE, SIZE)\n \n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */"}]}