{"sha": "36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiZTFkZWUxZDhmODhmMWRhOWEyN2E5Y2U2ZDIwZjg5NzZmMjEwYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-08-02T21:31:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-08-02T21:31:57Z"}, "message": "re PR target/51931 (No support for MIPS16 long branches)\n\ngcc/\n\tPR target/51931\n\t* config/mips/mips-protos.h (mips_strip_unspec_address): Declare.\n\t* config/mips/mips.c (mips_strip_unspec_address): Make extern.\n\t(mips16_rewrite_pool_constant): Make a copy of the pool constant\n\tbefore adding to a PC-relative table.\n\t(mips16_lay_out_constants): Add a SPLIT_P parameter.\n\t(mips16_load_branch_target, mips16_split_long_branches): New functions.\n\t(mips_reorg): Update call to mips16_lay_out_constants.\n\tCall mips16_split_long_branches.\n\t* config/mips/predicates.md (pc_or_label_operand): Delete.\n\t* config/mips/mips.md (length): Add a calculation for MIPS16 branches.\n\tMove the extended_mips16 handling further down.\n\t(*branch_equality<mode>_mips16): Replace use pc_or_label_operand\n\twith explicit label_ref and pc.  Follow the usual operand numbering.\n\t(*branch_equality<mode>_mips16_inverted): New pattern.\n\t(*jump_mips16): Add length attribute.\n\t(indirect_jump_and_restore_<mode>): New pattern.\n\t(consttable_int): Call mips_strip_unspec_address on the operand.\n\ngcc/testsuite/\n\tPR target/51931\n\t* gcc.c-torture/compile/20001226-1.c: Remove nomips16 attribute.\n\t* g++.dg/opt/longbranch1.C: Likewise.\n\nFrom-SVN: r190104", "tree": {"sha": "5e7dd3cafaad2526a4126abfd48740a3a4fbdac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7dd3cafaad2526a4126abfd48740a3a4fbdac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5b071a5688e68b783547add84949c63c49d7dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b071a5688e68b783547add84949c63c49d7dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b071a5688e68b783547add84949c63c49d7dc1"}], "stats": {"total": 366, "additions": 313, "deletions": 53}, "files": [{"sha": "61062b805618fb3a404fd3b488f433ed64495db5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -1,3 +1,24 @@\n+2012-08-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/51931\n+\t* config/mips/mips-protos.h (mips_strip_unspec_address): Declare.\n+\t* config/mips/mips.c (mips_strip_unspec_address): Make extern.\n+\t(mips16_rewrite_pool_constant): Make a copy of the pool constant\n+\tbefore adding to a PC-relative table.\n+\t(mips16_lay_out_constants): Add a SPLIT_P parameter.\n+\t(mips16_load_branch_target, mips16_split_long_branches): New functions.\n+\t(mips_reorg): Update call to mips16_lay_out_constants.\n+\tCall mips16_split_long_branches.\n+\t* config/mips/predicates.md (pc_or_label_operand): Delete.\n+\t* config/mips/mips.md (length): Add a calculation for MIPS16 branches.\n+\tMove the extended_mips16 handling further down.\n+\t(*branch_equality<mode>_mips16): Replace use pc_or_label_operand\n+\twith explicit label_ref and pc.  Follow the usual operand numbering.\n+\t(*branch_equality<mode>_mips16_inverted): New pattern.\n+\t(*jump_mips16): Add length attribute.\n+\t(indirect_jump_and_restore_<mode>): New pattern.\n+\t(consttable_int): Call mips_strip_unspec_address on the operand.\n+\n 2012-08-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* recog.c (split_insn): Copy the original SET_SRC before using"}, {"sha": "bae67a83041decfef7fe116f16e12177eacef044", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -190,6 +190,7 @@ extern rtx mips_pic_base_register (rtx);\n extern rtx mips_got_load (rtx, rtx, enum mips_symbol_type);\n extern bool mips_split_symbol (rtx, rtx, enum machine_mode, rtx *);\n extern rtx mips_unspec_address (rtx, enum mips_symbol_type);\n+extern rtx mips_strip_unspec_address (rtx);\n extern void mips_move_integer (rtx, rtx, unsigned HOST_WIDE_INT);\n extern bool mips_legitimize_move (enum machine_mode, rtx, rtx);\n "}, {"sha": "ef1cccdcbe703b6df52b056b48a9f3010b31e49b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 119, "deletions": 10, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -2563,7 +2563,7 @@ mips_unspec_address (rtx address, enum mips_symbol_type symbol_type)\n /* If OP is an UNSPEC address, return the address to which it refers,\n    otherwise return OP itself.  */\n \n-static rtx\n+rtx\n mips_strip_unspec_address (rtx op)\n {\n   rtx base, offset;\n@@ -14070,7 +14070,7 @@ mips16_rewrite_pool_constant (struct mips16_constant_pool *pool, rtx *x)\n   split_const (*x, &base, &offset);\n   if (GET_CODE (base) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (base))\n     {\n-      label = mips16_add_constant (pool, get_pool_constant (base),\n+      label = mips16_add_constant (pool, copy_rtx (get_pool_constant (base)),\n \t\t\t\t   get_pool_mode (base));\n       base = gen_rtx_LABEL_REF (Pmode, label);\n       *x = mips_unspec_address_offset (base, offset, SYMBOL_PC_RELATIVE);\n@@ -14126,10 +14126,11 @@ mips_cfg_in_reorg (void)\n \t  || TARGET_RELAX_PIC_CALLS);\n }\n \n-/* Build MIPS16 constant pools.  */\n+/* Build MIPS16 constant pools.  Split the instructions if SPLIT_P,\n+   otherwise assume that they are already split.  */\n \n static void\n-mips16_lay_out_constants (void)\n+mips16_lay_out_constants (bool split_p)\n {\n   struct mips16_constant_pool pool;\n   struct mips16_rewrite_pool_refs_info info;\n@@ -14138,10 +14139,13 @@ mips16_lay_out_constants (void)\n   if (!TARGET_MIPS16_PCREL_LOADS)\n     return;\n \n-  if (mips_cfg_in_reorg ())\n-    split_all_insns ();\n-  else\n-    split_all_insns_noflow ();\n+  if (split_p)\n+    {\n+      if (mips_cfg_in_reorg ())\n+\tsplit_all_insns ();\n+      else\n+\tsplit_all_insns_noflow ();\n+    }\n   barrier = 0;\n   memset (&pool, 0, sizeof (pool));\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -15490,6 +15494,110 @@ mips_df_reorg (void)\n   df_finish_pass (false);\n }\n \n+/* Emit code to load LABEL_REF SRC into MIPS16 register DEST.  This is\n+   called very late in mips_reorg, but the caller is required to run\n+   mips16_lay_out_constants on the result.  */\n+\n+static void\n+mips16_load_branch_target (rtx dest, rtx src)\n+{\n+  if (TARGET_ABICALLS && !TARGET_ABSOLUTE_ABICALLS)\n+    {\n+      rtx page, low;\n+\n+      if (mips_cfun_has_cprestore_slot_p ())\n+\tmips_emit_move (dest, mips_cprestore_slot (dest, true));\n+      else\n+\tmips_emit_move (dest, pic_offset_table_rtx);\n+      page = mips_unspec_address (src, SYMBOL_GOTOFF_PAGE);\n+      low = mips_unspec_address (src, SYMBOL_GOT_PAGE_OFST);\n+      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+\t\t\t      PMODE_INSN (gen_unspec_got, (dest, page))));\n+      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+\t\t\t      gen_rtx_LO_SUM (Pmode, dest, low)));\n+    }\n+  else\n+    {\n+      src = mips_unspec_address (src, SYMBOL_ABSOLUTE);\n+      mips_emit_move (dest, src);\n+    }\n+}\n+\n+/* If we're compiling a MIPS16 function, look for and split any long branches.\n+   This must be called after all other instruction modifications in\n+   mips_reorg.  */\n+\n+static void\n+mips16_split_long_branches (void)\n+{\n+  bool something_changed;\n+\n+  if (!TARGET_MIPS16)\n+    return;\n+\n+  /* Loop until the alignments for all targets are sufficient.  */\n+  do\n+    {\n+      rtx insn;\n+\n+      shorten_branches (get_insns ());\n+      something_changed = false;\n+      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+\tif (JUMP_P (insn)\n+\t    && USEFUL_INSN_P (insn)\n+\t    && get_attr_length (insn) > 8)\n+\t  {\n+\t    rtx old_label, new_label, temp, saved_temp;\n+\t    rtx target, jump, jump_sequence;\n+\n+\t    start_sequence ();\n+\n+\t    /* Free up a MIPS16 register by saving it in $1.  */\n+\t    saved_temp = gen_rtx_REG (Pmode, AT_REGNUM);\n+\t    temp = gen_rtx_REG (Pmode, GP_REG_FIRST + 2);\n+\t    emit_move_insn (saved_temp, temp);\n+\n+\t    /* Load the branch target into TEMP.  */\n+\t    old_label = JUMP_LABEL (insn);\n+\t    target = gen_rtx_LABEL_REF (Pmode, old_label);\n+\t    mips16_load_branch_target (temp, target);\n+\n+\t    /* Jump to the target and restore the register's\n+\t       original value.  */\n+\t    jump = emit_jump_insn (PMODE_INSN (gen_indirect_jump_and_restore,\n+\t\t\t\t\t       (temp, temp, saved_temp)));\n+\t    JUMP_LABEL (jump) = old_label;\n+\t    LABEL_NUSES (old_label)++;\n+\n+\t    /* Rewrite any symbolic references that are supposed to use\n+\t       a PC-relative constant pool.  */\n+\t    mips16_lay_out_constants (false);\n+\n+\t    if (simplejump_p (insn))\n+\t      /* We're going to replace INSN with a longer form.  */\n+\t      new_label = NULL_RTX;\n+\t    else\n+\t      {\n+\t\t/* Create a branch-around label for the original\n+\t\t   instruction.  */\n+\t\tnew_label = gen_label_rtx ();\n+\t\temit_label (new_label);\n+\t      }\n+\n+\t    jump_sequence = get_insns ();\n+\t    end_sequence ();\n+\n+\t    emit_insn_after (jump_sequence, insn);\n+\t    if (new_label)\n+\t      invert_jump (insn, new_label, false);\n+\t    else\n+\t      delete_insn (insn);\n+\t    something_changed = true;\n+\t  }\n+    }\n+  while (something_changed);\n+}\n+\n /* Implement TARGET_MACHINE_DEPENDENT_REORG.  */\n \n static void\n@@ -15500,7 +15608,7 @@ mips_reorg (void)\n      to date if the CFG is available.  */\n   if (mips_cfg_in_reorg ())\n     compute_bb_for_insn ();\n-  mips16_lay_out_constants ();\n+  mips16_lay_out_constants (true);\n   if (mips_cfg_in_reorg ())\n     {\n       mips_df_reorg ();\n@@ -15519,6 +15627,7 @@ mips_reorg (void)\n     /* The expansion could invalidate some of the VR4130 alignment\n        optimizations, but this should be an extremely rare case anyhow.  */\n     mips_reorg_process_insns ();\n+  mips16_split_long_branches ();\n }\n \f\n /* Implement TARGET_ASM_OUTPUT_MI_THUNK.  Generate rtl rather than asm text\n@@ -15639,7 +15748,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn = get_insns ();\n   insn_locators_alloc ();\n   split_all_insns_noflow ();\n-  mips16_lay_out_constants ();\n+  mips16_lay_out_constants (true);\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);"}, {"sha": "759958ba460b4ed10751e3d6ac206922efa372f6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 166, "deletions": 32, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -402,11 +402,7 @@\n \n ;; Length of instruction in bytes.\n (define_attr \"length\" \"\"\n-   (cond [(and (eq_attr \"extended_mips16\" \"yes\")\n-\t       (match_test \"TARGET_MIPS16\"))\n-\t  (const_int 8)\n-\n-\t  ;; Direct branch instructions have a range of [-0x20000,0x1fffc],\n+   (cond [;; Direct branch instructions have a range of [-0x20000,0x1fffc],\n \t  ;; relative to the address of the delay slot.  If a branch is\n \t  ;; outside this range, we have a choice of two sequences.\n \t  ;; For PIC, an out-of-range branch like:\n@@ -431,14 +427,21 @@\n \t  ;; using la/jr in this case too, but we do not do so at\n \t  ;; present.\n \t  ;;\n-\t  ;; Note that this value does not account for the delay slot\n+\t  ;; The value we specify here does not account for the delay slot\n \t  ;; instruction, whose length is added separately.  If the RTL\n \t  ;; pattern has no explicit delay slot, mips_adjust_insn_length\n-\t  ;; will add the length of the implicit nop.  The values for\n-\t  ;; forward and backward branches will be different as well.\n-\t  (eq_attr \"type\" \"branch\")\n+\t  ;; will add the length of the implicit nop.  The range of\n+\t  ;; [-0x20000, 0x1fffc] from the address of the delay slot\n+\t  ;; therefore translates to a range of:\n+\t  ;;\n+\t  ;;    [-(0x20000 - sizeof (branch)), 0x1fffc - sizeof (slot)]\n+\t  ;; == [-0x1fffc, 0x1fff8]\n+\t  ;;\n+\t  ;; from the shorten_branches reference address.\n+\t  (and (eq_attr \"type\" \"branch\")\n+\t       (not (match_test \"TARGET_MIPS16\")))\n \t  (cond [(and (le (minus (match_dup 0) (pc)) (const_int 131064))\n-\t\t\t  (le (minus (pc) (match_dup 0)) (const_int 131068)))\n+\t\t      (le (minus (pc) (match_dup 0)) (const_int 131068)))\n \t\t   (const_int 4)\n \n \t\t ;; The non-PIC case: branch, first delay slot, and J.\n@@ -453,6 +456,100 @@\n \t\t ;; of an insn.\n \t\t (const_int MAX_PIC_BRANCH_LENGTH))\n \n+\t  ;; An unextended MIPS16 branch has a range of [-0x100, 0xfe]\n+\t  ;; from the address of the following instruction, which leads\n+\t  ;; to a range of:\n+\t  ;;\n+\t  ;;    [-(0x100 - sizeof (branch)), 0xfe]\n+\t  ;; == [-0xfe, 0xfe]\n+\t  ;;\n+\t  ;; from the shorten_branches reference address.  Extended branches\n+\t  ;; likewise have a range of [-0x10000, 0xfffe] from the address\n+\t  ;; of the following instruction, which leads to a range of:\n+\t  ;;\n+\t  ;;    [-(0x10000 - sizeof (branch)), 0xfffe]\n+\t  ;; == [-0xfffc, 0xfffe]\n+\t  ;;\n+\t  ;; from the reference address.\n+\t  ;;\n+\t  ;; When a branch is out of range, mips_reorg splits it into a form\n+\t  ;; that uses in-range branches.  There are four basic sequences:\n+\t  ;;\n+\t  ;; (1) Absolute addressing with a readable text segment\n+\t  ;;     (32-bit addresses):\n+\t  ;;\n+\t  ;;\t b... foo\t\t2 bytes\n+\t  ;;\t move $1,$2\t\t2 bytes\n+\t  ;;     lw $2,label\t\t2 bytes\n+\t  ;;\t jr $2\t\t\t2 bytes\n+\t  ;;\t move $2,$1\t\t2 bytes\n+\t  ;;\t .align 2\t\t0 or 2 bytes\n+\t  ;; label:\n+\t  ;;\t .word target\t\t4 bytes\n+\t  ;; foo:\n+\t  ;;\t\t\t\t(16 bytes in the worst case)\n+\t  ;;\n+\t  ;; (2) Absolute addressing with a readable text segment\n+\t  ;;     (64-bit addresses):\n+\t  ;;\n+\t  ;;\t b... foo\t\t2 bytes\n+\t  ;;\t move $1,$2\t\t2 bytes\n+\t  ;;     ld $2,label\t\t2 bytes\n+\t  ;;\t jr $2\t\t\t2 bytes\n+\t  ;;\t move $2,$1\t\t2 bytes\n+\t  ;;\t .align 3\t\t0 to 6 bytes\n+\t  ;; label:\n+\t  ;;\t .dword target\t\t8 bytes\n+\t  ;; foo:\n+\t  ;;\t\t\t\t(24 bytes in the worst case)\n+\t  ;;\n+\t  ;; (3) Absolute addressing without a readable text segment\n+\t  ;;     (which requires 32-bit addresses at present):\n+\t  ;;\n+\t  ;;\t b... foo\t\t2 bytes\n+\t  ;;\t move $1,$2\t\t2 bytes\n+\t  ;;     lui $2,%hi(target)\t4 bytes\n+\t  ;;\t sll $2,8\t\t2 bytes\n+\t  ;;\t sll $2,8\t\t2 bytes\n+\t  ;;     addiu $2,%lo(target)\t4 bytes\n+\t  ;;\t jr $2\t\t\t2 bytes\n+\t  ;;\t move $2,$1\t\t2 bytes\n+\t  ;; foo:\n+\t  ;;\t\t\t\t(20 bytes)\n+\t  ;;\n+\t  ;; (4) PIC addressing (which requires 32-bit addresses at present):\n+\t  ;;\n+\t  ;;\t b... foo\t\t2 bytes\n+\t  ;;\t move $1,$2\t\t2 bytes\n+\t  ;;     lw $2,cprestore\t0, 2 or 4 bytes\n+\t  ;;\t lw $2,%got(target)($2)\t4 bytes\n+\t  ;;     addiu $2,%lo(target)\t4 bytes\n+\t  ;;\t jr $2\t\t\t2 bytes\n+\t  ;;\t move $2,$1\t\t2 bytes\n+\t  ;; foo:\n+\t  ;;\t\t\t\t(20 bytes in the worst case)\n+\t  ;;\n+\t  ;; Note that the conditions test adjusted lengths, whereas the\n+\t  ;; result is an unadjusted length, and is thus twice the true value.\n+\t  (and (eq_attr \"type\" \"branch\")\n+\t       (match_test \"TARGET_MIPS16\"))\n+\t  (cond [(and (le (minus (match_dup 0) (pc)) (const_int 254))\n+\t\t      (le (minus (pc) (match_dup 0)) (const_int 254)))\n+\t\t (const_int 4)\n+\t\t (and (le (minus (match_dup 0) (pc)) (const_int 65534))\n+\t\t      (le (minus (pc) (match_dup 0)) (const_int 65532)))\n+\t\t (const_int 8)\n+\t\t (and (match_test \"TARGET_ABICALLS\")\n+\t\t      (not (match_test \"TARGET_ABSOLUTE_ABICALLS\")))\n+\t\t (const_int 40)\n+\t\t (match_test \"Pmode == SImode\")\n+\t\t (const_int 32)\n+\t\t ] (const_int 48))\n+\n+\t  (and (eq_attr \"extended_mips16\" \"yes\")\n+\t       (match_test \"TARGET_MIPS16\"))\n+\t  (const_int 8)\n+\n \t  ;; \"Ghost\" instructions occupy no space.\n \t  (eq_attr \"type\" \"ghost\")\n \t  (const_int 0)\n@@ -5400,28 +5497,29 @@\n (define_insn \"*branch_equality<mode>_mips16\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 0 \"equality_operator\"\n-\t\t\t [(match_operand:GPR 1 \"register_operand\" \"d,t\")\n+\t (match_operator 1 \"equality_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d,t\")\n+\t\t\t  (const_int 0)])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))]\n+  \"TARGET_MIPS16\"\n+  \"@\n+   b%C1z\\t%2,%0\n+   bt%C1z\\t%0\"\n+  [(set_attr \"type\" \"branch\")])\n+\n+(define_insn \"*branch_equality<mode>_mips16_inverted\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 1 \"equality_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d,t\")\n \t\t\t  (const_int 0)])\n-\t (match_operand 2 \"pc_or_label_operand\" \"\")\n-\t (match_operand 3 \"pc_or_label_operand\" \"\")))]\n+\t (pc)\n+\t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_MIPS16\"\n-{\n-  if (operands[2] != pc_rtx)\n-    {\n-      if (which_alternative == 0)\n-\treturn \"b%C0z\\t%1,%2\";\n-      else\n-\treturn \"bt%C0z\\t%2\";\n-    }\n-  else\n-    {\n-      if (which_alternative == 0)\n-\treturn \"b%N0z\\t%1,%3\";\n-      else\n-\treturn \"bt%N0z\\t%3\";\n-    }\n-}\n+  \"@\n+   b%N1z\\t%2,%0\n+   bt%N1z\\t%0\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_expand \"cbranch<mode>4\"\n@@ -5717,7 +5815,30 @@\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"TARGET_MIPS16\"\n   \"b\\t%l0\"\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set (attr \"length\")\n+\t;; This calculation is like the normal branch one, but the\n+\t;; range of the unextended instruction is [-0x800, 0x7fe] rather\n+\t;; than [-0x100, 0xfe].  This translates to a range of:\n+\t;;\n+\t;;    [-(0x800 - sizeof (branch)), 0x7fe]\n+\t;; == [-0x7fe, 0x7fe]\n+\t;;\n+\t;; from the shorten_branches reference address.  Long-branch\n+\t;; sequences will replace this one, so the minimum length\n+\t;; is one instruction shorter than for conditional branches.\n+\t(cond [(and (le (minus (match_dup 0) (pc)) (const_int 2046))\n+\t\t    (le (minus (pc) (match_dup 0)) (const_int 2046)))\n+\t       (const_int 4)\n+\t       (and (le (minus (match_dup 0) (pc)) (const_int 65534))\n+\t\t    (le (minus (pc) (match_dup 0)) (const_int 65532)))\n+\t       (const_int 8)\n+\t       (and (match_test \"TARGET_ABICALLS\")\n+\t\t    (not (match_test \"TARGET_ABSOLUTE_ABICALLS\")))\n+\t       (const_int 36)\n+\t       (match_test \"Pmode == SImode\")\n+\t       (const_int 28)\n+\t       ] (const_int 44)))])\n \n (define_expand \"indirect_jump\"\n   [(set (pc) (match_operand 0 \"register_operand\"))]\n@@ -5735,6 +5856,18 @@\n   [(set_attr \"type\" \"jump\")\n    (set_attr \"mode\" \"none\")])\n \n+;; A combined jump-and-move instruction, used for MIPS16 long-branch\n+;; sequences.  Having a dedicated pattern is more convenient than\n+;; creating a SEQUENCE for this special case.\n+(define_insn \"indirect_jump_and_restore_<mode>\"\n+  [(set (pc) (match_operand:P 1 \"register_operand\" \"d\"))\n+   (set (match_operand:P 0 \"register_operand\" \"=d\")\n+   \t(match_operand:P 2 \"register_operand\" \"y\"))]\n+  \"\"\n+  \"%(%<jr\\t%1\\;move\\t%0,%2%>%)\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"extended_mips16\" \"yes\")])\n+\n (define_expand \"tablejump\"\n   [(set (pc)\n \t(match_operand 0 \"register_operand\"))\n@@ -6549,7 +6682,8 @@\n \t\t    UNSPEC_CONSTTABLE_INT)]\n   \"TARGET_MIPS16\"\n {\n-  assemble_integer (operands[0], INTVAL (operands[1]),\n+  assemble_integer (mips_strip_unspec_address (operands[0]),\n+\t\t    INTVAL (operands[1]),\n \t\t    BITS_PER_UNIT * INTVAL (operands[1]), 1);\n   return \"\";\n }"}, {"sha": "31c43a53ebb556eff4c36f231f1378240b358686", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -139,9 +139,6 @@\n \t\t(match_operand 0 \"hilo_operand\")\n \t\t(match_operand 0 \"register_operand\")))\n \n-(define_special_predicate \"pc_or_label_operand\"\n-  (match_code \"pc,label_ref\"))\n-\n (define_predicate \"const_call_insn_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {"}, {"sha": "78a829aaf26b6109dec7ac797837a91865f58c6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -1,3 +1,9 @@\n+2012-08-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/51931\n+\t* gcc.c-torture/compile/20001226-1.c: Remove nomips16 attribute.\n+\t* g++.dg/opt/longbranch1.C: Likewise.\n+\n 2012-08-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/53805"}, {"sha": "a64a57aea2ad4184cf407cc34cfa220c2d493be3", "filename": "gcc/testsuite/g++.dg/opt/longbranch1.C", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -26,10 +26,6 @@\n         muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n         muchcode; muchcode; muchcode; muchcode; muchcode; muchcode\n \n-#ifdef __mips\n-/* See PR 51931.  */\n-__attribute__((nomips16))\n-#endif\n int\n main (int argc, char **argv)\n {"}, {"sha": "127c4daec45a6fceaa90b11c6de3959d8c5fc1eb", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c?ref=36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "patch": "@@ -21,10 +21,6 @@\n #define C1024(x,y) C256(x,y) C256(x+16,y) C256(x+32,y) C256(x+48,y)\n #define C4096(x,y) C1024(x,y) C1024(x,y+16) C1024(x,y+32) C1024(x,y+48)\n \n-#ifdef __mips\n-/* See PR 51931.  */\n-__attribute__((nomips16))\n-#endif\n unsigned foo(int x[64], int y[64])\n {\n   C4096(x,y);"}]}