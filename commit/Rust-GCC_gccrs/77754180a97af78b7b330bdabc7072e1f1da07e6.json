{"sha": "77754180a97af78b7b330bdabc7072e1f1da07e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3NTQxODBhOTdhZjc4YjdiMzMwYmRhYmM3MDcyZTFmMWRhMDdlNg==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-12-10T14:28:58Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-12-10T14:28:58Z"}, "message": "re PR middle-end/46674 (Weak alias is mistakenly optimized away)\n\ngcc/ChangeLog:\n\n\tPR middle-end/46674\n\tPR lto/43157\n\t* target.def (mangle_assembler_name): New target asm_out hook.\n\t* targhooks.c (default_mangle_assembler_name): Add default hook\n\timplementation.\n\t* targhooks.h (default_mangle_assembler_name): Add prototype.\n\t* lto-symtab.c (lto_symtab_register_decl): Use new hook when\n\tprocessing DECL_ASSEMBLER_NAMEs for lto symtabs.\n\t(lto_symtab_get_resolution): Likewise.\n\t(lto_cgraph_replace_node): Likewise.\n\t(lto_symtab_prevailing_decl): Likewise.\n\t* lto-streamer-out.c (write_symbol): Likewise.\n\t* doc/tm.texi.in (TARGET_MANGLE_ASSEMBLER_NAME): Add @hook directive.\n\t* doc/tm.texi: Regenerate.\n\t* config/i386/cygming.h (TARGET_MANGLE_ASSEMBLER_NAME): Define to\n\tpoint at i386_pe_mangle_assembler_name.\n\t* config/i386/winnt.c (i386_pe_mangle_assembler_name): New function.\n\t* config/i386/i386-protos.h (i386_pe_mangle_assembler_name): Add\n\tprototype.\n\nlto-plugin/ChangeLog:\n\n\tPR middle-end/46674\n\tPR lto/43157\n\t* configure.ac (SYM_STYLE): Don't AC_DEFINE.\n\t* lto-plugin.c (sym_style): Don't use it; default to ss_none.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/46674\n\tPR lto/43157\n\t* gcc.dg/pr43157.c: New file.\n\nFrom-SVN: r167688", "tree": {"sha": "cb0845f24d59969509e47111a1b3af34cd9b8773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0845f24d59969509e47111a1b3af34cd9b8773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77754180a97af78b7b330bdabc7072e1f1da07e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77754180a97af78b7b330bdabc7072e1f1da07e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77754180a97af78b7b330bdabc7072e1f1da07e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77754180a97af78b7b330bdabc7072e1f1da07e6/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4816c5938dfb6d9510b43f9223dab24af530e00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4816c5938dfb6d9510b43f9223dab24af530e00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4816c5938dfb6d9510b43f9223dab24af530e00e"}], "stats": {"total": 165, "additions": 120, "deletions": 45}, "files": [{"sha": "588a8cfdc95e6fdf7092e0bf4b36c3fde5be74f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -1,3 +1,25 @@\n+2010-12-10  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR middle-end/46674\n+\tPR lto/43157\n+\t* target.def (mangle_assembler_name): New target asm_out hook.\n+\t* targhooks.c (default_mangle_assembler_name): Add default hook\n+\timplementation.\n+\t* targhooks.h (default_mangle_assembler_name): Add prototype.\n+\t* lto-symtab.c (lto_symtab_register_decl): Use new hook when\n+\tprocessing DECL_ASSEMBLER_NAMEs for lto symtabs.\n+\t(lto_symtab_get_resolution): Likewise.\n+\t(lto_cgraph_replace_node): Likewise.\n+\t(lto_symtab_prevailing_decl): Likewise.\n+\t* lto-streamer-out.c (write_symbol): Likewise.\n+\t* doc/tm.texi.in (TARGET_MANGLE_ASSEMBLER_NAME): Add @hook directive.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/i386/cygming.h (TARGET_MANGLE_ASSEMBLER_NAME): Define to\n+\tpoint at i386_pe_mangle_assembler_name.\n+\t* config/i386/winnt.c (i386_pe_mangle_assembler_name): New function.\n+\t* config/i386/i386-protos.h (i386_pe_mangle_assembler_name): Add\n+\tprototype.\n+\n 2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-typeck.c (readonly_error): Delete."}, {"sha": "be97d80613258c2c9ca4a15fb903b54588e84c2c", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -252,6 +252,10 @@ do {\t\t\t\t\t\t\\\n   fputs ((NAME), (STREAM));\t\t\t\\\n } while (0)\n \n+/* This does much the same in memory rather than to a stream.  */\n+#undef TARGET_MANGLE_ASSEMBLER_NAME\n+#define TARGET_MANGLE_ASSEMBLER_NAME i386_pe_mangle_assembler_name\n+\n \f\n /* Emit code to check the stack when allocating more than 4000\n    bytes in one go.  */"}, {"sha": "1180e8ce4da36ffeecb7094d4139775c5e3d9e01", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -226,6 +226,7 @@ extern void i386_pe_file_end (void);\n extern void i386_pe_start_function (FILE *, const char *, tree);\n extern void i386_pe_end_function (FILE *, const char *, tree);\n extern tree i386_pe_mangle_decl_assembler_name (tree, tree);\n+extern tree i386_pe_mangle_assembler_name (const char *);\n \n extern void i386_pe_seh_init (FILE *);\n extern void i386_pe_seh_end_prologue (FILE *);"}, {"sha": "098efa3d18fec81290bff4a337e7313f4fbdeff8", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -244,6 +244,20 @@ i386_pe_mangle_decl_assembler_name (tree decl, tree id)\n   return (new_id ? new_id : id);\n }\n \n+/* This hook behaves the same as varasm.c/assemble_name(), but\n+   generates the name into memory rather than outputting it to\n+   a file stream.  */\n+\n+tree\n+i386_pe_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n+{\n+  const char *skipped = name + (*name == '*' ? 1 : 0);\n+  const char *stripped = targetm.strip_name_encoding (skipped);\n+  if (*name != '*' && *user_label_prefix && *stripped != FASTCALL_PREFIX)\n+    stripped = ACONCAT ((user_label_prefix, stripped, NULL));\n+  return get_identifier (stripped);\n+}\n+\n void\n i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n {"}, {"sha": "32ffb8c14890540ad4e0566bc3d41894f1c7b76c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -8041,6 +8041,10 @@ is customary on your operating system, as it is in most Berkeley Unix\n systems.  This macro is used in @code{assemble_name}.\n @end defmac\n \n+@deftypefn {Target Hook} tree TARGET_MANGLE_ASSEMBLER_NAME (const char *@var{name})\n+Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s @code{assemble_name}, but in memory rather than to a file stream, returning result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and then prepends the @code{USER_LABEL_PREFIX}, if any.\n+@end deftypefn\n+\n @defmac ASM_OUTPUT_SYMBOL_REF (@var{stream}, @var{sym})\n A C statement (sans semicolon) to output a reference to\n @code{SYMBOL_REF} @var{sym}.  If not defined, @code{assemble_name}"}, {"sha": "b4ab96654e5800d3f53e4470186781b3bc2b5482", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -8013,6 +8013,8 @@ is customary on your operating system, as it is in most Berkeley Unix\n systems.  This macro is used in @code{assemble_name}.\n @end defmac\n \n+@hook TARGET_MANGLE_ASSEMBLER_NAME\n+\n @defmac ASM_OUTPUT_SYMBOL_REF (@var{stream}, @var{sym})\n A C statement (sans semicolon) to output a reference to\n @code{SYMBOL_REF} @var{sym}.  If not defined, @code{assemble_name}"}, {"sha": "2bf83bebde456f835536c111b8d7094054947fd6", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -2368,16 +2368,14 @@ write_symbol (struct lto_streamer_cache_d *cache,\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (t));\n \n+  /* This behaves like assemble_name_raw in varasm.c, performing the\n+     same name manipulations that ASM_OUTPUT_LABELREF does. */\n+  name = IDENTIFIER_POINTER ((*targetm.asm_out.mangle_assembler_name) (name));\n+\n   if (pointer_set_contains (seen, name))\n     return;\n   pointer_set_insert (seen, name);\n \n-  /* FIXME lto: this is from assemble_name_raw in varasm.c. For some\n-     architectures we might have to do the same name manipulations that\n-     ASM_OUTPUT_LABELREF does. */\n-  if (name[0] == '*')\n-    name = &name[1];\n-\n   lto_streamer_cache_lookup (cache, t, &slot_num);\n   gcc_assert (slot_num >= 0);\n "}, {"sha": "c86bbcc8a5a20e0a664dcdeaa2ea70029e2fa2d2", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -155,7 +155,8 @@ lto_symtab_register_decl (tree decl,\n     gcc_assert (!DECL_ABSTRACT (decl));\n \n   new_entry = ggc_alloc_cleared_lto_symtab_entry_def ();\n-  new_entry->id = DECL_ASSEMBLER_NAME (decl);\n+  new_entry->id = (*targetm.asm_out.mangle_assembler_name)\n+\t\t  (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n   new_entry->decl = decl;\n   new_entry->resolution = resolution;\n   new_entry->file_data = file_data;\n@@ -190,7 +191,8 @@ lto_symtab_get_resolution (tree decl)\n \n   gcc_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n \n-  e = lto_symtab_get (DECL_ASSEMBLER_NAME (decl));\n+  e = lto_symtab_get ((*targetm.asm_out.mangle_assembler_name)\n+\t\t      (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl))));\n   while (e && e->decl != decl)\n     e = e->next;\n   if (!e)\n@@ -218,7 +220,8 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n \t       cgraph_node_name (node), node->uid,\n \t       cgraph_node_name (prevailing_node),\n \t       prevailing_node->uid,\n-\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->decl)));\n+\t       IDENTIFIER_POINTER ((*targetm.asm_out.mangle_assembler_name)\n+\t\t (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->decl)))));\n     }\n \n   if (prevailing_node->same_body_alias)\n@@ -836,7 +839,8 @@ lto_symtab_prevailing_decl (tree decl)\n   gcc_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n \n   /* Walk through the list of candidates and return the one we merged to.  */\n-  ret = lto_symtab_get (DECL_ASSEMBLER_NAME (decl));\n+  ret = lto_symtab_get ((*targetm.asm_out.mangle_assembler_name)\n+\t\t\t(IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl))));\n   if (!ret)\n     return NULL_TREE;\n "}, {"sha": "653981f71ad7488cc453f99324a97d595a1d732a", "filename": "gcc/target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -524,6 +524,18 @@ DEFHOOK_UNDOC\n  bool ,(unsigned char code),\n  default_print_operand_punct_valid_p)\n \n+/* Given a symbol name, perform same mangling as assemble_name and\n+   ASM_OUTPUT_LABELREF, returning result as an IDENTIFIER_NODE.  */\n+DEFHOOK\n+(mangle_assembler_name,\n+ \"Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s\\\n+ @code{assemble_name}, but in memory rather than to a file stream, returning\\\n+ result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The\\\n+ default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and\\\n+ then prepends the @code{USER_LABEL_PREFIX}, if any.\",\n+ tree, (const char *name),\n+ default_mangle_assembler_name)\n+\n HOOK_VECTOR_END (asm_out)\n \n /* Functions relating to instruction scheduling.  All of these"}, {"sha": "30a58911d2e71a8c3748b8339acc64e954989a42", "filename": "gcc/targhooks.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -358,6 +358,17 @@ default_print_operand_punct_valid_p (unsigned char code ATTRIBUTE_UNUSED)\n #endif\n }\n \n+/* The default implementation of TARGET_MANGLE_ASSEMBLER_NAME.  */\n+tree\n+default_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n+{\n+  const char *skipped = name + (*name == '*' ? 1 : 0);\n+  const char *stripped = targetm.strip_name_encoding (skipped);\n+  if (*name != '*' && user_label_prefix[0])\n+    stripped = ACONCAT ((user_label_prefix, stripped, NULL));\n+  return get_identifier (stripped);\n+}\n+\n /* The default implementation of TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */\n \n bool"}, {"sha": "d34ad9f52a14eef1b0b5723ebe8f76ebb801ecee", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -65,6 +65,8 @@ extern bool hook_callee_copies_named\n extern void default_print_operand (FILE *, rtx, int);\n extern void default_print_operand_address (FILE *, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n+extern tree default_mangle_assembler_name (const char *);\n+\n extern bool default_asm_output_addr_const_extra (FILE *, rtx);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);"}, {"sha": "9705844d5ef37c8e20a1c4a9ff5c2a6cf90b0d61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -1,3 +1,9 @@\n+2010-12-10  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR middle-end/46674\n+\tPR lto/43157\n+\t* gcc.dg/pr43157.c: New file.\n+\n 2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc.dg/dfp/struct-union.c: Adjust."}, {"sha": "aef357f69d740e2c35796b71e4a7acf21e7b5c6f", "filename": "gcc/testsuite/gcc.dg/pr43157.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43157.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do link } */\n+/* { dg-require-effective-target lto } */\n+/* { dg-options \"-O1 -flto -fuse-linker-plugin\" } */\n+\n+#define LABEL3(pfx, x) # pfx x\n+#define LABEL2(pfx, x) LABEL3(pfx, x)\n+#define LABEL(x) LABEL2(__USER_LABEL_PREFIX__, x)\n+\n+unsigned int factorial_ (unsigned int) __asm__ (LABEL (\"factorial\"));\n+\n+unsigned int factorial (unsigned int i)\n+{\n+  return i > 1 ? i * factorial_ (i - 1) : 1;\n+}\n+\n+int main (void)\n+{\n+  return factorial (5);\n+}"}, {"sha": "2dda3172852853c66a7ff6d768aff4244101b7e7", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -1,3 +1,12 @@\n+2010-12-10  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR middle-end/46674\n+\tPR lto/43157\n+\t* configure.ac (SYM_STYLE): Don't AC_DEFINE.\n+\t* lto-plugin.c (sym_style): Don't use it; default to ss_none.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2010-12-06  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR target/40125"}, {"sha": "ad003b2925e5a3cfb7363ae4aa1d70a9331fc44e", "filename": "lto-plugin/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfig.h.in?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -61,9 +61,6 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n-/* Default symbol style */\n-#undef SYM_STYLE\n-\n /* Version number of package */\n #undef VERSION\n "}, {"sha": "495d9e9ed601fd69fc2aed7a26ec54397b3f7e7d", "filename": "lto-plugin/configure", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -10872,24 +10872,6 @@ esac\n \n \n \n-# Trying to get this information from gcc's config is tricky.\n-case $target in\n-  x86_64*-mingw*)\n-\n-$as_echo \"#define SYM_STYLE ss_none\" >>confdefs.h\n-\n-    ;;\n-  *-cygwin* | i?86*-mingw* )\n-\n-$as_echo \"#define SYM_STYLE ss_win32\" >>confdefs.h\n-\n-    ;;\n-  *)\n-\n-$as_echo \"#define SYM_STYLE ss_none\" >>confdefs.h\n-\n-    ;;\n-esac\n ac_fn_c_find_intX_t \"$LINENO\" \"64\" \"ac_cv_c_int64_t\"\n case $ac_cv_c_int64_t in #(\n   no|yes) ;; #("}, {"sha": "1aba69713f7480da8beb4955740ee6a79dade313", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -9,18 +9,6 @@ AC_SYS_LARGEFILE\n AM_PROG_LIBTOOL\n ACX_LT_HOST_FLAGS\n AC_SUBST(target_noncanonical)\n-# Trying to get this information from gcc's config is tricky.\n-case $target in\n-  x86_64*-mingw*)\n-    AC_DEFINE([SYM_STYLE], [ss_none], [Default symbol style])\n-    ;;\n-  *-cygwin* | i?86*-mingw* )\n-    AC_DEFINE([SYM_STYLE], [ss_win32], [Default symbol style])\n-    ;;\n-  *)\n-    AC_DEFINE([SYM_STYLE], [ss_none], [Default symbol style])\n-    ;;\n-esac\n AC_TYPE_INT64_T\n AC_TYPE_UINT64_T\n AC_HEADER_SYS_WAIT"}, {"sha": "ab18f4c6d9c1c6e2054eaf84fe1a8e963ef56403", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77754180a97af78b7b330bdabc7072e1f1da07e6/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=77754180a97af78b7b330bdabc7072e1f1da07e6", "patch": "@@ -152,10 +152,10 @@ static char debug;\n static char nop;\n static char *resolution_file = NULL;\n \n-/* Set by default from configure.ac, but can be overridden at runtime\n+/* Not used by default, but can be overridden at runtime\n    by using -plugin-opt=-sym-style={none,win32,underscore|uscore}\n    (in fact, only first letter of style arg is checked.)  */\n-static enum symbol_style sym_style = SYM_STYLE;\n+static enum symbol_style sym_style = ss_none;\n \n static void\n check_1 (int gate, enum ld_plugin_level level, const char *text)"}]}