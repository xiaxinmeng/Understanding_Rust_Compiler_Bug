{"sha": "98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiYmU1ZWU3MDc0N2FmZjQ0NDlmNzE5YTBiM2YwMGE5YjcyZDViMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-04T11:16:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-12-04T11:16:12Z"}, "message": "re PR fortran/29916 ([4.1 only] Dimension of a function result as host association does not work)\n\nfortran/\n2006-12-04  Paul Thomas  <pault@gcc.gnu.org>\n\n    PR fortran/29916\n    * resolve.c (resolve_symbol): Allow host-associated variables\n      in the specification expression of an array-valued function.\n    * expr.c (check_restricted): Accept host-associated dummy\n      array indices.\n\ntestsuite/\n2006-12-04  Paul Thomas  <pault@gcc.gnu.org>\n\n    PR fortran/29916\n    * gfortran.dg/host_dummy_index_1.f90: Added additional test.\n\nFrom-SVN: r119489", "tree": {"sha": "145d253b5815ed37a21759852507374e98f2f254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/145d253b5815ed37a21759852507374e98f2f254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/comments", "author": null, "committer": null, "parents": [{"sha": "aad741f435aac46420c6294df03e0f78ee177747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad741f435aac46420c6294df03e0f78ee177747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad741f435aac46420c6294df03e0f78ee177747"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "5dad6776199d4dc79ef50f036c13f035a161de71", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "patch": "@@ -1,3 +1,11 @@\n+2006-12-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29916\n+\t* resolve.c (resolve_symbol): Allow host-associated variables\n+\t  the specification expression of an array-valued function.\n+\t* expr.c (check_restricted): Accept host-associated dummy\n+\t  array indices.\n+\n 2006-12-03  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29642"}, {"sha": "16e89f85c264bcd4db2f1b79acbd62967b8dfbe8", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "patch": "@@ -2047,14 +2047,15 @@ check_restricted (gfc_expr * e)\n \n       /* gfc_is_formal_arg broadcasts that a formal argument list is being processed\n \t in resolve.c(resolve_formal_arglist).  This is done so that host associated\n-\t dummy array indices are accepted (PR23446).  */\n+\t dummy array indices are accepted (PR23446). This mechanism also does the\n+\t same for the specification expressions of array-valued functions.  */\n       if (sym->attr.in_common\n \t  || sym->attr.use_assoc\n \t  || sym->attr.dummy\n \t  || sym->ns != gfc_current_ns\n \t  || (sym->ns->proc_name != NULL\n \t      && sym->ns->proc_name->attr.flavor == FL_MODULE)\n-\t  || gfc_is_formal_arg ())\n+\t  || (gfc_is_formal_arg () && (sym->ns == gfc_current_ns)))\n \t{\n \t  t = SUCCESS;\n \t  break;"}, {"sha": "75a6ca31b8f5730e740057ad745da5b73105996c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "patch": "@@ -6043,8 +6043,17 @@ resolve_symbol (gfc_symbol * sym)\n      on COMMON blocks.  */\n \n   check_constant = sym->attr.in_common && !sym->attr.pointer;\n+\n+  /* Set the formal_arg_flag so that check_conflict will not throw\n+     an error for host associated variables in the specification\n+     expression for an array_valued function.  */\n+  if (sym->attr.function && sym->as)\n+    formal_arg_flag = 1;\n+\n   gfc_resolve_array_spec (sym->as, check_constant);\n \n+  formal_arg_flag = 0;\n+\n   /* Resolve formal namespaces.  */\n \n   if (formal_ns_flag && sym != NULL && sym->formal_ns != NULL)"}, {"sha": "219c66b5d209f915ddd63a42b71980c3d3f454ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "patch": "@@ -1,3 +1,8 @@\n+2006-12-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29916\n+\t* gfortran.dg/host_dummy_index_1.f90: Added additional test.\n+\n 2006-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/29965"}, {"sha": "62080f940f70f3767a9dfe769ca178cc111fa3df", "filename": "gcc/testsuite/gfortran.dg/host_dummy_index_1.f90", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_dummy_index_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bbe5ee70747aff4449f719a0b3f00a9b72d5b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_dummy_index_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_dummy_index_1.f90?ref=98bbe5ee70747aff4449f719a0b3f00a9b72d5b0", "patch": "@@ -1,8 +1,10 @@\n ! { dg-do run }\n ! Tests the fix for PR23446. Based on PR example.\n-!\n ! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n !\n+! Tests furthermore the fix for PR fortran/29916.\n+! Test contributed by Marco Restelli <mrestelli@gmail.com>\n+!\n PROGRAM TST\n   INTEGER IMAX\n   INTEGER :: A(4) = 1\n@@ -12,6 +14,7 @@ PROGRAM TST\n   CALL T(A)\n   CALL U(A)\n   if ( ALL(A.ne.(/2,2,3,4/))) CALL ABORT ()\n+  if ( ALL(F().ne.(/2.0,2.0/))) CALL ABORT()\n \n CONTAINS\n   SUBROUTINE S(A)\n@@ -26,4 +29,8 @@ SUBROUTINE U(A)\n     INTEGER A(2,IMAX)\n     A(2,2) = 4\n   END SUBROUTINE U\n+  FUNCTION F()\n+    real :: F(IMAX)\n+    F = 2.0\n+  END FUNCTION F\n ENDPROGRAM TST"}]}