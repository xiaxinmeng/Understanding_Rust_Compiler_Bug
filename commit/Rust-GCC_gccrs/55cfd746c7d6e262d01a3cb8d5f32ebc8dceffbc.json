{"sha": "55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjZmQ3NDZjN2Q2ZTI2MmQwMWEzY2I4ZDVmMzJlYmM4ZGNlZmZiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-10T08:47:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-10T08:47:52Z"}, "message": "utils.c (convert): For a biased input type, convert the bias itself to the base type before adding it.\n\n\t* gcc-interface/utils.c (convert): For a biased input type, convert\n\tthe bias itself to the base type before adding it.\n\nFrom-SVN: r240910", "tree": {"sha": "cd931049bd8d161a77d9a6701765ae10189b47a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd931049bd8d161a77d9a6701765ae10189b47a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/comments", "author": null, "committer": null, "parents": [{"sha": "f47ef399b62fdab4fdddc308885f3da986825c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47ef399b62fdab4fdddc308885f3da986825c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47ef399b62fdab4fdddc308885f3da986825c21"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "1e6f0a38553c0499bd5d9e369bc816b57df9c264", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "patch": "@@ -1,3 +1,8 @@\n+2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert): For a biased input type, convert\n+\tthe bias itself to the base type before adding it.\n+\n 2016-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (convert) <VECTOR_CST>: Add missing break."}, {"sha": "8db92e5bf737dc38ec99b945ed752a58c2967d22", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "patch": "@@ -4193,12 +4193,15 @@ convert (tree type, tree expr)\n       return convert (type, unpadded);\n     }\n \n-  /* If the input is a biased type, adjust first.  */\n+  /* If the input is a biased type, convert first to the base type and add\n+     the bias.  Note that the bias must go through a full conversion to the\n+     base type, lest it is itself a biased value; this happens for subtypes\n+     of biased types.  */\n   if (ecode == INTEGER_TYPE && TYPE_BIASED_REPRESENTATION_P (etype))\n     return convert (type, fold_build2 (PLUS_EXPR, TREE_TYPE (etype),\n \t\t\t\t       fold_convert (TREE_TYPE (etype), expr),\n-\t\t\t\t       fold_convert (TREE_TYPE (etype),\n-\t\t\t\t\t\t     TYPE_MIN_VALUE (etype))));\n+\t\t\t\t       convert (TREE_TYPE (etype),\n+\t\t\t\t\t\tTYPE_MIN_VALUE (etype))));\n \n   /* If the input is a justified modular type, we need to extract the actual\n      object before converting it to any other type with the exceptions of an\n@@ -4502,7 +4505,12 @@ convert (tree type, tree expr)\n \t  && (ecode == ARRAY_TYPE || ecode == UNCONSTRAINED_ARRAY_TYPE\n \t      || (ecode == RECORD_TYPE && TYPE_CONTAINS_TEMPLATE_P (etype))))\n \treturn unchecked_convert (type, expr, false);\n-      else if (TYPE_BIASED_REPRESENTATION_P (type))\n+\n+      /* If the output is a biased type, convert first to the base type and\n+\t subtract the bias.  Note that the bias itself must go through a full\n+\t conversion to the base type, lest it is a biased value; this happens\n+\t for subtypes of biased types.  */\n+      if (TYPE_BIASED_REPRESENTATION_P (type))\n \treturn fold_convert (type,\n \t\t\t     fold_build2 (MINUS_EXPR, TREE_TYPE (type),\n \t\t\t\t\t  convert (TREE_TYPE (type), expr),"}, {"sha": "1d07fcdb062a502f4b04e1419bbd4276ea0fcb28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "patch": "@@ -1,3 +1,7 @@\n+2016-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/biased_subtype.adb: New test.\n+\n 2016-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/77901"}, {"sha": "38330229632eee57dbfe173804d5aba01eda994e", "filename": "gcc/testsuite/gnat.dg/biased_subtype.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_subtype.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_subtype.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbiased_subtype.adb?ref=55cfd746c7d6e262d01a3cb8d5f32ebc8dceffbc", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Biased_Subtype is\n+\n+   CIM_Max_AA : constant := 9_999_999;\n+   CIM_Min_AA : constant := -999_999;\n+\n+   type TIM_AA is range CIM_Min_AA..CIM_Max_AA + 1;\n+   for TIM_AA'Size use 24;\n+\n+   subtype STIM_AA is TIM_AA range TIM_AA(CIM_Min_AA)..TIM_AA(CIM_Max_AA);\n+\n+   SAA : STIM_AA := 1;\n+\n+begin\n+   if Integer(SAA) /= 1 then\n+     raise Program_Error;\n+   end if;\n+end;"}]}