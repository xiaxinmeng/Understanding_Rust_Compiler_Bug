{"sha": "0ea89b15782a4ee92bae0175a0a963752c39076c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhODliMTU3ODJhNGVlOTJiYWUwMTc1YTBhOTYzNzUyYzM5MDc2Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-20T21:06:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-20T21:06:32Z"}, "message": "libstdc++: Fix tests that fail in C++20 mode\n\n\t* testsuite/20_util/is_constructible/51185.cc: Make test class a\n\tnon-aggregate so that the test verifies the same thing in all -std\n\tmodes.\n\t* testsuite/20_util/is_constructible/value-2.cc: Adjust expected\n\tresults for some types when paren-init for aggregates is supported.", "tree": {"sha": "cff91067c727e4d59ce4a76003950808cdee36b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff91067c727e4d59ce4a76003950808cdee36b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea89b15782a4ee92bae0175a0a963752c39076c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea89b15782a4ee92bae0175a0a963752c39076c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea89b15782a4ee92bae0175a0a963752c39076c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea89b15782a4ee92bae0175a0a963752c39076c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bdd4c5d3fc9c143e8edea3b10828e4b75d7a385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdd4c5d3fc9c143e8edea3b10828e4b75d7a385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bdd4c5d3fc9c143e8edea3b10828e4b75d7a385"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "932e2afe81258a186dcfb31bbbb15f7bda0d67b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0ea89b15782a4ee92bae0175a0a963752c39076c", "patch": "@@ -1,5 +1,11 @@\n 2020-04-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/is_constructible/51185.cc: Make test class a\n+\tnon-aggregate so that the test verifies the same thing in all -std\n+\tmodes.\n+\t* testsuite/20_util/is_constructible/value-2.cc: Adjust expected\n+\tresults for some types when paren-init for aggregates is supported.\n+\n \t* include/std/version (__cpp_lib_three_way_comparison): Update value.\n \t* libsupc++/compare (__cpp_lib_three_way_comparison): Likewise.\n \t(__detail::__synth3way): Add noexcept-specifier."}, {"sha": "8605135ad5a7cf1f8d60d1cbdc8710bd0d66c904", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/51185.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc?ref=0ea89b15782a4ee92bae0175a0a963752c39076c", "patch": "@@ -20,7 +20,14 @@\n #include <type_traits>\n \n struct A { };\n-struct B : A { };\n+struct B : A {\n+#if __cpp_aggregate_bases && __cpp_aggregate_paren_init\n+  // A user-declared constructor prevents B from being an aggregate.\n+  // Otherwise 'B&& b{A{}};' becomes valid in C++17 (__cpp_aggregate_bases),\n+  // and 'B&& b(A{});' becomes valid in C++17 (__cpp_aggregate_paren_init).\n+  B();\n+#endif\n+};\n \n // libstdc++/51185\n void f()"}, {"sha": "8ba50e1efe7c169e66c55fb30e5d240134cfcca4", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value-2.cc", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea89b15782a4ee92bae0175a0a963752c39076c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc?ref=0ea89b15782a4ee92bae0175a0a963752c39076c", "patch": "@@ -216,12 +216,20 @@ static_assert(std::is_constructible<const B&&, D&&>::value, \"Error\");\n static_assert(!std::is_constructible<B&, const D&>::value, \"Error\");\n static_assert(!std::is_constructible<B&&, const D&&>::value, \"Error\");\n \n+#if __cpp_aggregate_bases && __cpp_aggregate_paren_init\n+// In C++20 an rvalue reference or const lvalue reference can bind to a\n+// temporary of aggregate type that is initialized from a base class value.\n+constexpr bool v = true;\n+#else\n+constexpr bool v = false;\n+#endif\n+\n static_assert(!std::is_constructible<D&, B&>::value, \"Error\");\n-static_assert(!std::is_constructible<D&&, B&&>::value, \"Error\");\n+static_assert(v == std::is_constructible<D&&, B&&>::value, \"Error\");\n static_assert(!std::is_constructible<D&, const B&>::value, \"Error\");\n-static_assert(!std::is_constructible<D&&, const B&&>::value, \"Error\");\n-static_assert(!std::is_constructible<const D&, B&>::value, \"Error\");\n-static_assert(!std::is_constructible<const D&&, B&&>::value, \"Error\");\n+static_assert(v == std::is_constructible<D&&, const B&&>::value, \"Error\");\n+static_assert(v == std::is_constructible<const D&, B&>::value, \"Error\");\n+static_assert(v == std::is_constructible<const D&&, B&&>::value, \"Error\");\n \n static_assert(!std::is_constructible<B&&, B&>::value, \"Error\");\n static_assert(!std::is_constructible<B&&, D&>::value, \"Error\");\n@@ -754,14 +762,21 @@ static_assert(!std::is_constructible<FromArgs<std::initializer_list<int>&,\n \t      std::initializer_list<B>&>, std::initializer_list<int>,\n \t      std::initializer_list<B>>::value, \"Error\");\n \n+#if __cpp_aggregate_paren_init\n+// In C++20 arrays can be initialized using parentheses.\n+constexpr bool w = true;\n+#else\n+constexpr bool w = false;\n+#endif\n+\n static_assert(!std::is_constructible<FromArgs<std::initializer_list<int>>,\n \t      int, int>::value, \"Error\");\n static_assert(!std::is_constructible<const\n \t      FromArgs<std::initializer_list<int>>, int, int>::value, \"Error\");\n-static_assert(!std::is_constructible<B[2], B, B>::value, \"Error\");\n-static_assert(!std::is_constructible<const B[2], B, B>::value, \"Error\");\n-static_assert(!std::is_constructible<U[2], U, U>::value, \"Error\");\n-static_assert(!std::is_constructible<const U[2], U, U>::value, \"Error\");\n+static_assert(w == std::is_constructible<B[2], B, B>::value, \"Error\");\n+static_assert(w == std::is_constructible<const B[2], B, B>::value, \"Error\");\n+static_assert(w == std::is_constructible<U[2], U, U>::value, \"Error\");\n+static_assert(w == std::is_constructible<const U[2], U, U>::value, \"Error\");\n \n static_assert(!std::is_constructible<E, E, E>::value, \"Error\");\n static_assert(!std::is_constructible<const E, E, E>::value, \"Error\");"}]}