{"sha": "5cad47e0f85e59e21a5df04d34d813a860ff42d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhZDQ3ZTBmODVlNTllMjFhNWRmMDRkMzRkODEzYTg2MGZmNDJkNA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T19:08:29Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T19:08:29Z"}, "message": "[ARM][GCC][7/5x]: MVE store intrinsics which stores byte,half word or word to memory.\n\nThis patch supports the following MVE ACLE store intrinsics which stores a byte, halfword, or word to memory.\n\nvst1q_f32, vst1q_f16, vst1q_s8, vst1q_s32, vst1q_s16, vst1q_u8, vst1q_u32, vst1q_u16, vstrhq_f16, vstrhq_scatter_offset_s32, vstrhq_scatter_offset_s16, vstrhq_scatter_offset_u32, vstrhq_scatter_offset_u16, vstrhq_scatter_offset_p_s32, vstrhq_scatter_offset_p_s16, vstrhq_scatter_offset_p_u32, vstrhq_scatter_offset_p_u16, vstrhq_scatter_shifted_offset_s32,\nvstrhq_scatter_shifted_offset_s16, vstrhq_scatter_shifted_offset_u32,\nvstrhq_scatter_shifted_offset_u16, vstrhq_scatter_shifted_offset_p_s32,\nvstrhq_scatter_shifted_offset_p_s16, vstrhq_scatter_shifted_offset_p_u32,\nvstrhq_scatter_shifted_offset_p_u16, vstrhq_s32, vstrhq_s16, vstrhq_u32, vstrhq_u16, vstrhq_p_f16, vstrhq_p_s32, vstrhq_p_s16, vstrhq_p_u32, vstrhq_p_u16, vstrwq_f32, vstrwq_s32, vstrwq_u32, vstrwq_p_f32, vstrwq_p_s32, vstrwq_p_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vst1q_f32): Define macro.\n\t(vst1q_f16): Likewise.\n\t(vst1q_s8): Likewise.\n\t(vst1q_s32): Likewise.\n\t(vst1q_s16): Likewise.\n\t(vst1q_u8): Likewise.\n\t(vst1q_u32): Likewise.\n\t(vst1q_u16): Likewise.\n\t(vstrhq_f16): Likewise.\n\t(vstrhq_scatter_offset_s32): Likewise.\n\t(vstrhq_scatter_offset_s16): Likewise.\n\t(vstrhq_scatter_offset_u32): Likewise.\n\t(vstrhq_scatter_offset_u16): Likewise.\n\t(vstrhq_scatter_offset_p_s32): Likewise.\n\t(vstrhq_scatter_offset_p_s16): Likewise.\n\t(vstrhq_scatter_offset_p_u32): Likewise.\n\t(vstrhq_scatter_offset_p_u16): Likewise.\n\t(vstrhq_scatter_shifted_offset_s32): Likewise.\n\t(vstrhq_scatter_shifted_offset_s16): Likewise.\n\t(vstrhq_scatter_shifted_offset_u32): Likewise.\n\t(vstrhq_scatter_shifted_offset_u16): Likewise.\n\t(vstrhq_scatter_shifted_offset_p_s32): Likewise.\n\t(vstrhq_scatter_shifted_offset_p_s16): Likewise.\n\t(vstrhq_scatter_shifted_offset_p_u32): Likewise.\n\t(vstrhq_scatter_shifted_offset_p_u16): Likewise.\n\t(vstrhq_s32): Likewise.\n\t(vstrhq_s16): Likewise.\n\t(vstrhq_u32): Likewise.\n\t(vstrhq_u16): Likewise.\n\t(vstrhq_p_f16): Likewise.\n\t(vstrhq_p_s32): Likewise.\n\t(vstrhq_p_s16): Likewise.\n\t(vstrhq_p_u32): Likewise.\n\t(vstrhq_p_u16): Likewise.\n\t(vstrwq_f32): Likewise.\n\t(vstrwq_s32): Likewise.\n\t(vstrwq_u32): Likewise.\n\t(vstrwq_p_f32): Likewise.\n\t(vstrwq_p_s32): Likewise.\n\t(vstrwq_p_u32): Likewise.\n\t(__arm_vst1q_s8): Define intrinsic.\n\t(__arm_vst1q_s32): Likewise.\n\t(__arm_vst1q_s16): Likewise.\n\t(__arm_vst1q_u8): Likewise.\n\t(__arm_vst1q_u32): Likewise.\n\t(__arm_vst1q_u16): Likewise.\n\t(__arm_vstrhq_scatter_offset_s32): Likewise.\n\t(__arm_vstrhq_scatter_offset_s16): Likewise.\n\t(__arm_vstrhq_scatter_offset_u32): Likewise.\n\t(__arm_vstrhq_scatter_offset_u16): Likewise.\n\t(__arm_vstrhq_scatter_offset_p_s32): Likewise.\n\t(__arm_vstrhq_scatter_offset_p_s16): Likewise.\n\t(__arm_vstrhq_scatter_offset_p_u32): Likewise.\n\t(__arm_vstrhq_scatter_offset_p_u16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_s32): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_s16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_u32): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_u16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_p_s32): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_p_s16): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_p_u32): Likewise.\n\t(__arm_vstrhq_scatter_shifted_offset_p_u16): Likewise.\n\t(__arm_vstrhq_s32): Likewise.\n\t(__arm_vstrhq_s16): Likewise.\n\t(__arm_vstrhq_u32): Likewise.\n\t(__arm_vstrhq_u16): Likewise.\n\t(__arm_vstrhq_p_s32): Likewise.\n\t(__arm_vstrhq_p_s16): Likewise.\n\t(__arm_vstrhq_p_u32): Likewise.\n\t(__arm_vstrhq_p_u16): Likewise.\n\t(__arm_vstrwq_s32): Likewise.\n\t(__arm_vstrwq_u32): Likewise.\n\t(__arm_vstrwq_p_s32): Likewise.\n\t(__arm_vstrwq_p_u32): Likewise.\n\t(__arm_vstrwq_p_f32): Likewise.\n\t(__arm_vstrwq_f32): Likewise.\n\t(__arm_vst1q_f32): Likewise.\n\t(__arm_vst1q_f16): Likewise.\n\t(__arm_vstrhq_f16): Likewise.\n\t(__arm_vstrhq_p_f16): Likewise.\n\t(vst1q): Define polymorphic variant.\n\t(vstrhq): Likewise.\n\t(vstrhq_p): Likewise.\n\t(vstrhq_scatter_offset_p): Likewise.\n\t(vstrhq_scatter_offset): Likewise.\n\t(vstrhq_scatter_shifted_offset_p): Likewise.\n\t(vstrhq_scatter_shifted_offset): Likewise.\n\t(vstrwq_p): Likewise.\n\t(vstrwq): Likewise.\n\t* config/arm/arm_mve_builtins.def (STRS): Use builtin qualifier.\n\t(STRS_P): Likewise.\n\t(STRSS): Likewise.\n\t(STRSS_P): Likewise.\n\t(STRSU): Likewise.\n\t(STRSU_P): Likewise.\n\t(STRU): Likewise.\n\t(STRU_P): Likewise.\n\t* config/arm/mve.md (VST1Q): Define iterator.\n\t(VSTRHSOQ): Likewise.\n\t(VSTRHSSOQ): Likewise.\n\t(VSTRHQ): Likewise.\n\t(VSTRWQ): Likewise.\n\t(mve_vstrhq_fv8hf): Define RTL pattern.\n\t(mve_vstrhq_p_fv8hf): Likewise.\n\t(mve_vstrhq_p_<supf><mode>): Likewise.\n\t(mve_vstrhq_scatter_offset_p_<supf><mode>): Likewise.\n\t(mve_vstrhq_scatter_offset_<supf><mode>): Likewise.\n\t(mve_vstrhq_scatter_shifted_offset_p_<supf><mode>): Likewise.\n\t(mve_vstrhq_scatter_shifted_offset_<supf><mode>): Likewise.\n\t(mve_vstrhq_<supf><mode>): Likewise.\n\t(mve_vstrwq_fv4sf): Likewise.\n\t(mve_vstrwq_p_fv4sf): Likewise.\n\t(mve_vstrwq_p_<supf>v4si): Likewise.\n\t(mve_vstrwq_<supf>v4si): Likewise.\n\t(mve_vst1q_f<mode>): Define expand.\n\t(mve_vst1q_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vst1q_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vst1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u16.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_u32.c: Likewise.", "tree": {"sha": "fb359130fea9659460f7d76fa0beb79c1745c1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb359130fea9659460f7d76fa0beb79c1745c1a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cad47e0f85e59e21a5df04d34d813a860ff42d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cad47e0f85e59e21a5df04d34d813a860ff42d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cad47e0f85e59e21a5df04d34d813a860ff42d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cad47e0f85e59e21a5df04d34d813a860ff42d4/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc23303bad126f844a14f88c344317e6cf4c3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc23303bad126f844a14f88c344317e6cf4c3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc23303bad126f844a14f88c344317e6cf4c3dc"}], "stats": {"total": 2000, "additions": 1938, "deletions": 62}, "files": [{"sha": "acea775367fea0da3d75f9ab8967748c441e2088", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,3 +1,124 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vst1q_f32): Define macro.\n+\t(vst1q_f16): Likewise.\n+\t(vst1q_s8): Likewise.\n+\t(vst1q_s32): Likewise.\n+\t(vst1q_s16): Likewise.\n+\t(vst1q_u8): Likewise.\n+\t(vst1q_u32): Likewise.\n+\t(vst1q_u16): Likewise.\n+\t(vstrhq_f16): Likewise.\n+\t(vstrhq_scatter_offset_s32): Likewise.\n+\t(vstrhq_scatter_offset_s16): Likewise.\n+\t(vstrhq_scatter_offset_u32): Likewise.\n+\t(vstrhq_scatter_offset_u16): Likewise.\n+\t(vstrhq_scatter_offset_p_s32): Likewise.\n+\t(vstrhq_scatter_offset_p_s16): Likewise.\n+\t(vstrhq_scatter_offset_p_u32): Likewise.\n+\t(vstrhq_scatter_offset_p_u16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_s32): Likewise.\n+\t(vstrhq_scatter_shifted_offset_s16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_u32): Likewise.\n+\t(vstrhq_scatter_shifted_offset_u16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p_s32): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p_s16): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p_u32): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p_u16): Likewise.\n+\t(vstrhq_s32): Likewise.\n+\t(vstrhq_s16): Likewise.\n+\t(vstrhq_u32): Likewise.\n+\t(vstrhq_u16): Likewise.\n+\t(vstrhq_p_f16): Likewise.\n+\t(vstrhq_p_s32): Likewise.\n+\t(vstrhq_p_s16): Likewise.\n+\t(vstrhq_p_u32): Likewise.\n+\t(vstrhq_p_u16): Likewise.\n+\t(vstrwq_f32): Likewise.\n+\t(vstrwq_s32): Likewise.\n+\t(vstrwq_u32): Likewise.\n+\t(vstrwq_p_f32): Likewise.\n+\t(vstrwq_p_s32): Likewise.\n+\t(vstrwq_p_u32): Likewise.\n+\t(__arm_vst1q_s8): Define intrinsic.\n+\t(__arm_vst1q_s32): Likewise.\n+\t(__arm_vst1q_s16): Likewise.\n+\t(__arm_vst1q_u8): Likewise.\n+\t(__arm_vst1q_u32): Likewise.\n+\t(__arm_vst1q_u16): Likewise.\n+\t(__arm_vstrhq_scatter_offset_s32): Likewise.\n+\t(__arm_vstrhq_scatter_offset_s16): Likewise.\n+\t(__arm_vstrhq_scatter_offset_u32): Likewise.\n+\t(__arm_vstrhq_scatter_offset_u16): Likewise.\n+\t(__arm_vstrhq_scatter_offset_p_s32): Likewise.\n+\t(__arm_vstrhq_scatter_offset_p_s16): Likewise.\n+\t(__arm_vstrhq_scatter_offset_p_u32): Likewise.\n+\t(__arm_vstrhq_scatter_offset_p_u16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_s32): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_s16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_u32): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_u16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_p_s32): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_p_s16): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_p_u32): Likewise.\n+\t(__arm_vstrhq_scatter_shifted_offset_p_u16): Likewise.\n+\t(__arm_vstrhq_s32): Likewise.\n+\t(__arm_vstrhq_s16): Likewise.\n+\t(__arm_vstrhq_u32): Likewise.\n+\t(__arm_vstrhq_u16): Likewise.\n+\t(__arm_vstrhq_p_s32): Likewise.\n+\t(__arm_vstrhq_p_s16): Likewise.\n+\t(__arm_vstrhq_p_u32): Likewise.\n+\t(__arm_vstrhq_p_u16): Likewise.\n+\t(__arm_vstrwq_s32): Likewise.\n+\t(__arm_vstrwq_u32): Likewise.\n+\t(__arm_vstrwq_p_s32): Likewise.\n+\t(__arm_vstrwq_p_u32): Likewise.\n+\t(__arm_vstrwq_p_f32): Likewise.\n+\t(__arm_vstrwq_f32): Likewise.\n+\t(__arm_vst1q_f32): Likewise.\n+\t(__arm_vst1q_f16): Likewise.\n+\t(__arm_vstrhq_f16): Likewise.\n+\t(__arm_vstrhq_p_f16): Likewise.\n+\t(vst1q): Define polymorphic variant.\n+\t(vstrhq): Likewise.\n+\t(vstrhq_p): Likewise.\n+\t(vstrhq_scatter_offset_p): Likewise.\n+\t(vstrhq_scatter_offset): Likewise.\n+\t(vstrhq_scatter_shifted_offset_p): Likewise.\n+\t(vstrhq_scatter_shifted_offset): Likewise.\n+\t(vstrwq_p): Likewise.\n+\t(vstrwq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (STRS): Use builtin qualifier.\n+\t(STRS_P): Likewise.\n+\t(STRSS): Likewise.\n+\t(STRSS_P): Likewise.\n+\t(STRSU): Likewise.\n+\t(STRSU_P): Likewise.\n+\t(STRU): Likewise.\n+\t(STRU_P): Likewise.\n+\t* config/arm/mve.md (VST1Q): Define iterator.\n+\t(VSTRHSOQ): Likewise.\n+\t(VSTRHSSOQ): Likewise.\n+\t(VSTRHQ): Likewise.\n+\t(VSTRWQ): Likewise.\n+\t(mve_vstrhq_fv8hf): Define RTL pattern.\n+\t(mve_vstrhq_p_fv8hf): Likewise.\n+\t(mve_vstrhq_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_offset_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_offset_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_scatter_shifted_offset_<supf><mode>): Likewise.\n+\t(mve_vstrhq_<supf><mode>): Likewise.\n+\t(mve_vstrwq_fv4sf): Likewise.\n+\t(mve_vstrwq_p_fv4sf): Likewise.\n+\t(mve_vstrwq_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_<supf>v4si): Likewise.\n+\t(mve_vst1q_f<mode>): Define expand.\n+\t(mve_vst1q_<supf><mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "7e32be6d5836940fd8ee3646f6059c40d4309ce0", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 497, "deletions": 0, "changes": 497, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1828,6 +1828,46 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vldrwq_gather_shifted_offset_z_f32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_f32(__base, __offset, __p)\n #define vldrwq_gather_shifted_offset_z_s32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_s32(__base, __offset, __p)\n #define vldrwq_gather_shifted_offset_z_u32(__base, __offset, __p) __arm_vldrwq_gather_shifted_offset_z_u32(__base, __offset, __p)\n+#define vst1q_f32(__addr, __value) __arm_vst1q_f32(__addr, __value)\n+#define vst1q_f16(__addr, __value) __arm_vst1q_f16(__addr, __value)\n+#define vst1q_s8(__addr, __value) __arm_vst1q_s8(__addr, __value)\n+#define vst1q_s32(__addr, __value) __arm_vst1q_s32(__addr, __value)\n+#define vst1q_s16(__addr, __value) __arm_vst1q_s16(__addr, __value)\n+#define vst1q_u8(__addr, __value) __arm_vst1q_u8(__addr, __value)\n+#define vst1q_u32(__addr, __value) __arm_vst1q_u32(__addr, __value)\n+#define vst1q_u16(__addr, __value) __arm_vst1q_u16(__addr, __value)\n+#define vstrhq_f16(__addr, __value) __arm_vstrhq_f16(__addr, __value)\n+#define vstrhq_scatter_offset_s32( __base, __offset, __value) __arm_vstrhq_scatter_offset_s32( __base, __offset, __value)\n+#define vstrhq_scatter_offset_s16( __base, __offset, __value) __arm_vstrhq_scatter_offset_s16( __base, __offset, __value)\n+#define vstrhq_scatter_offset_u32( __base, __offset, __value) __arm_vstrhq_scatter_offset_u32( __base, __offset, __value)\n+#define vstrhq_scatter_offset_u16( __base, __offset, __value) __arm_vstrhq_scatter_offset_u16( __base, __offset, __value)\n+#define vstrhq_scatter_offset_p_s32( __base, __offset, __value, __p) __arm_vstrhq_scatter_offset_p_s32( __base, __offset, __value, __p)\n+#define vstrhq_scatter_offset_p_s16( __base, __offset, __value, __p) __arm_vstrhq_scatter_offset_p_s16( __base, __offset, __value, __p)\n+#define vstrhq_scatter_offset_p_u32( __base, __offset, __value, __p) __arm_vstrhq_scatter_offset_p_u32( __base, __offset, __value, __p)\n+#define vstrhq_scatter_offset_p_u16( __base, __offset, __value, __p) __arm_vstrhq_scatter_offset_p_u16( __base, __offset, __value, __p)\n+#define vstrhq_scatter_shifted_offset_s32( __base, __offset, __value) __arm_vstrhq_scatter_shifted_offset_s32( __base, __offset, __value)\n+#define vstrhq_scatter_shifted_offset_s16( __base, __offset, __value) __arm_vstrhq_scatter_shifted_offset_s16( __base, __offset, __value)\n+#define vstrhq_scatter_shifted_offset_u32( __base, __offset, __value) __arm_vstrhq_scatter_shifted_offset_u32( __base, __offset, __value)\n+#define vstrhq_scatter_shifted_offset_u16( __base, __offset, __value) __arm_vstrhq_scatter_shifted_offset_u16( __base, __offset, __value)\n+#define vstrhq_scatter_shifted_offset_p_s32( __base, __offset, __value, __p) __arm_vstrhq_scatter_shifted_offset_p_s32( __base, __offset, __value, __p)\n+#define vstrhq_scatter_shifted_offset_p_s16( __base, __offset, __value, __p) __arm_vstrhq_scatter_shifted_offset_p_s16( __base, __offset, __value, __p)\n+#define vstrhq_scatter_shifted_offset_p_u32( __base, __offset, __value, __p) __arm_vstrhq_scatter_shifted_offset_p_u32( __base, __offset, __value, __p)\n+#define vstrhq_scatter_shifted_offset_p_u16( __base, __offset, __value, __p) __arm_vstrhq_scatter_shifted_offset_p_u16( __base, __offset, __value, __p)\n+#define vstrhq_s32(__addr, __value) __arm_vstrhq_s32(__addr, __value)\n+#define vstrhq_s16(__addr, __value) __arm_vstrhq_s16(__addr, __value)\n+#define vstrhq_u32(__addr, __value) __arm_vstrhq_u32(__addr, __value)\n+#define vstrhq_u16(__addr, __value) __arm_vstrhq_u16(__addr, __value)\n+#define vstrhq_p_f16(__addr, __value, __p) __arm_vstrhq_p_f16(__addr, __value, __p)\n+#define vstrhq_p_s32(__addr, __value, __p) __arm_vstrhq_p_s32(__addr, __value, __p)\n+#define vstrhq_p_s16(__addr, __value, __p) __arm_vstrhq_p_s16(__addr, __value, __p)\n+#define vstrhq_p_u32(__addr, __value, __p) __arm_vstrhq_p_u32(__addr, __value, __p)\n+#define vstrhq_p_u16(__addr, __value, __p) __arm_vstrhq_p_u16(__addr, __value, __p)\n+#define vstrwq_f32(__addr, __value) __arm_vstrwq_f32(__addr, __value)\n+#define vstrwq_s32(__addr, __value) __arm_vstrwq_s32(__addr, __value)\n+#define vstrwq_u32(__addr, __value) __arm_vstrwq_u32(__addr, __value)\n+#define vstrwq_p_f32(__addr, __value, __p) __arm_vstrwq_p_f32(__addr, __value, __p)\n+#define vstrwq_p_s32(__addr, __value, __p) __arm_vstrwq_p_s32(__addr, __value, __p)\n+#define vstrwq_p_u32(__addr, __value, __p) __arm_vstrwq_p_u32(__addr, __value, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -11893,6 +11933,244 @@ __arm_vldrwq_gather_shifted_offset_z_u32 (uint32_t const * __base, uint32x4_t __\n   return __builtin_mve_vldrwq_gather_shifted_offset_z_uv4si ((__builtin_neon_si *) __base, __offset, __p);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_s8 (int8_t * __addr, int8x16_t __value)\n+{\n+  __builtin_mve_vst1q_sv16qi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_s32 (int32_t * __addr, int32x4_t __value)\n+{\n+  __builtin_mve_vst1q_sv4si ((__builtin_neon_si *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_s16 (int16_t * __addr, int16x8_t __value)\n+{\n+  __builtin_mve_vst1q_sv8hi ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_u8 (uint8_t * __addr, uint8x16_t __value)\n+{\n+  __builtin_mve_vst1q_uv16qi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_u32 (uint32_t * __addr, uint32x4_t __value)\n+{\n+  __builtin_mve_vst1q_uv4si ((__builtin_neon_si *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_u16 (uint16_t * __addr, uint16x8_t __value)\n+{\n+  __builtin_mve_vst1q_uv8hi ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_s32 (int16_t * __base, uint32x4_t __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_sv4si ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_s16 (int16_t * __base, uint16x8_t __offset, int16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_sv8hi ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_u32 (uint16_t * __base, uint32x4_t __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_uv4si ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_u16 (uint16_t * __base, uint16x8_t __offset, uint16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_uv8hi ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_p_s32 (int16_t * __base, uint32x4_t __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_p_sv4si ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_p_s16 (int16_t * __base, uint16x8_t __offset, int16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_p_sv8hi ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_p_u32 (uint16_t * __base, uint32x4_t __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_p_uv4si ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_offset_p_u16 (uint16_t * __base, uint16x8_t __offset, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_offset_p_uv8hi ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_s32 (int16_t * __base, uint32x4_t __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_sv4si ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_s16 (int16_t * __base, uint16x8_t __offset, int16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_sv8hi ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_u32 (uint16_t * __base, uint32x4_t __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_uv4si ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_u16 (uint16_t * __base, uint16x8_t __offset, uint16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_uv8hi ((__builtin_neon_hi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_p_s32 (int16_t * __base, uint32x4_t __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_sv4si ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_p_s16 (int16_t * __base, uint16x8_t __offset, int16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_sv8hi ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_p_u32 (uint16_t * __base, uint32x4_t __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_uv4si ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_scatter_shifted_offset_p_u16 (uint16_t * __base, uint16x8_t __offset, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_uv8hi ((__builtin_neon_hi *) __base, __offset, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_s32 (int16_t * __addr, int32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_sv4si ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_s16 (int16_t * __addr, int16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_sv8hi ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_u32 (uint16_t * __addr, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrhq_uv4si ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_u16 (uint16_t * __addr, uint16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_uv8hi ((__builtin_neon_hi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_p_s32 (int16_t * __addr, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_p_sv4si ((__builtin_neon_hi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_p_s16 (int16_t * __addr, int16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_p_sv8hi ((__builtin_neon_hi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_p_u32 (uint16_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_p_uv4si ((__builtin_neon_hi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_p_u16 (uint16_t * __addr, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_p_uv8hi ((__builtin_neon_hi *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_s32 (int32_t * __addr, int32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_sv4si ((__builtin_neon_si *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_u32 (uint32_t * __addr, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_uv4si ((__builtin_neon_si *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_p_s32 (int32_t * __addr, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_p_sv4si ((__builtin_neon_si *) __addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_p_u32 (uint32_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_p_uv4si ((__builtin_neon_si *) __addr, __value, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -14147,6 +14425,48 @@ __arm_vldrwq_gather_shifted_offset_z_f32 (float32_t const * __base, uint32x4_t _\n   return __builtin_mve_vldrwq_gather_shifted_offset_z_fv4sf (__base, __offset, __p);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_p_f32 (float32_t * __addr, float32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_p_fv4sf (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_f32 (float32_t * __addr, float32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_fv4sf (__addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_f32 (float32_t * __addr, float32x4_t __value)\n+{\n+  __builtin_mve_vst1q_fv4sf (__addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_f16 (float16_t * __addr, float16x8_t __value)\n+{\n+  __builtin_mve_vst1q_fv8hf (__addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_f16 (float16_t * __addr, float16x8_t __value)\n+{\n+  __builtin_mve_vstrhq_fv8hf (__addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrhq_p_f16 (float16_t * __addr, float16x8_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrhq_p_fv8hf (__addr, __value, __p);\n+}\n+\n #endif\n \n enum {\n@@ -16694,6 +17014,99 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2), \\\n   int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1, p2));})\n \n+#define vst1q(p0,p1) __arm_vst1q(p0,p1)\n+#define __arm_vst1q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vst1q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vst1q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vst1q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vst1q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vst1q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vst1q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8_t]: __arm_vst1q_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vst1q_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4_t)));})\n+\n+#define vstrhq(p0,p1) __arm_vstrhq(p0,p1)\n+#define __arm_vstrhq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrhq_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrhq_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8_t]: __arm_vstrhq_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8_t)));})\n+\n+#define vstrhq_p(p0,p1,p2) __arm_vstrhq_p(p0,p1,p2)\n+#define __arm_vstrhq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrhq_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrhq_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8_t]: __arm_vstrhq_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8_t), p2));})\n+\n+#define vstrhq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_offset_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3));})\n+\n+#define vstrhq_scatter_offset(p0,p1,p2) __arm_vstrhq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_offset_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t)));})\n+\n+#define vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3));})\n+\n+#define vstrhq_scatter_shifted_offset(p0,p1,p2) __arm_vstrhq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vstrhq_scatter_shifted_offset_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, float16x8_t)));})\n+\n+#define vstrwq_p(p0,p1,p2) __arm_vstrwq_p(p0,p1,p2)\n+#define __arm_vstrwq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+\n+#define vstrwq(p0,p1) __arm_vstrwq(p0,p1)\n+#define __arm_vstrwq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4_t)));})\n+\n #else /* MVE Integer.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n@@ -18860,6 +19273,90 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1, p2), \\\n   int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2));})\n \n+#define vst1q(p0,p1) __arm_vst1q(p0,p1)\n+#define __arm_vst1q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vst1q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vst1q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vst1q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vst1q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vst1q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vst1q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vstrhq(p0,p1) __arm_vstrhq(p0,p1)\n+#define __arm_vstrhq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrhq_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrhq_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vstrhq_p(p0,p1,p2) __arm_vstrhq_p(p0,p1,p2)\n+#define __arm_vstrhq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrhq_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrhq_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vstrhq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrhq_scatter_offset(p0,p1,p2) __arm_vstrhq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrhq_scatter_shifted_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrhq_scatter_shifted_offset(p0,p1,p2) __arm_vstrhq_scatter_shifted_offset(p0,p1,p2)\n+#define __arm_vstrhq_scatter_shifted_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrhq_scatter_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrhq_scatter_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrhq_scatter_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrhq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+\n+#define vstrwq(p0,p1) __arm_vstrwq(p0,p1)\n+#define __arm_vstrwq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vstrwq_p(p0,p1,p2) __arm_vstrwq_p(p0,p1,p2)\n+#define __arm_vstrwq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n #endif /* MVE Integer.  */\n \n #define vldrdq_gather_offset(p0,p1) __arm_vldrdq_gather_offset(p0,p1)"}, {"sha": "ca8ba6a7709c7e62a81c3a4f52fc88e23ce6e3c9", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -762,3 +762,26 @@ VAR1 (LDRGU_Z, vldrdq_gather_offset_z_u, v2di)\n VAR1 (LDRGU_Z, vldrdq_gather_shifted_offset_z_u, v2di)\n VAR1 (LDRGU_Z, vldrwq_gather_offset_z_u, v4si)\n VAR1 (LDRGU_Z, vldrwq_gather_shifted_offset_z_u, v4si)\n+VAR3 (STRU, vst1q_u, v16qi, v8hi, v4si)\n+VAR3 (STRS, vst1q_s, v16qi, v8hi, v4si)\n+VAR2 (STRU_P, vstrhq_p_u, v8hi, v4si)\n+VAR2 (STRU, vstrhq_u, v8hi, v4si)\n+VAR2 (STRS_P, vstrhq_p_s, v8hi, v4si)\n+VAR2 (STRS, vstrhq_s, v8hi, v4si)\n+VAR2 (STRS, vst1q_f, v8hf, v4sf)\n+VAR2 (STRSU_P, vstrhq_scatter_shifted_offset_p_u, v8hi, v4si)\n+VAR2 (STRSU_P, vstrhq_scatter_offset_p_u, v8hi, v4si)\n+VAR2 (STRSU, vstrhq_scatter_shifted_offset_u, v8hi, v4si)\n+VAR2 (STRSU, vstrhq_scatter_offset_u, v8hi, v4si)\n+VAR2 (STRSS_P, vstrhq_scatter_shifted_offset_p_s, v8hi, v4si)\n+VAR2 (STRSS_P, vstrhq_scatter_offset_p_s, v8hi, v4si)\n+VAR2 (STRSS, vstrhq_scatter_shifted_offset_s, v8hi, v4si)\n+VAR2 (STRSS, vstrhq_scatter_offset_s, v8hi, v4si)\n+VAR1 (STRS, vstrhq_f, v8hf)\n+VAR1 (STRS_P, vstrhq_p_f, v8hf)\n+VAR1 (STRS, vstrwq_f, v4sf)\n+VAR1 (STRS, vstrwq_s, v4si)\n+VAR1 (STRU, vstrwq_u, v4si)\n+VAR1 (STRS_P, vstrwq_p_f, v4sf)\n+VAR1 (STRS_P, vstrwq_p_s, v4si)\n+VAR1 (STRU_P, vstrwq_p_u, v4si)"}, {"sha": "68cf57f63810e4ee31158e69a85e2692bbeb3d04", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 274, "deletions": 2, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -201,7 +201,9 @@\n \t\t\t VLDRDQGO_S VLDRDQGO_U VLDRDQGSO_S VLDRDQGSO_U\n \t\t\t VLDRHQGO_F VLDRHQGSO_F VLDRWQGB_F VLDRWQGO_F\n \t\t\t VLDRWQGO_S VLDRWQGO_U VLDRWQGSO_F VLDRWQGSO_S\n-\t\t\t VLDRWQGSO_U])\n+\t\t\t VLDRWQGSO_U VSTRHQ_F VST1Q_S VST1Q_U VSTRHQSO_S\n+\t\t\t VSTRHQSO_U VSTRHQSSO_S VSTRHQSSO_U VSTRHQ_S\n+\t\t\t VSTRHQ_U VSTRWQ_S VSTRWQ_U VSTRWQ_F VST1Q_F])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -363,7 +365,10 @@\n \t\t       (VLDRWQ_U \"u\") (VLDRDQGB_S \"s\") (VLDRDQGB_U \"u\")\n \t\t       (VLDRDQGO_S \"s\") (VLDRDQGO_U \"u\") (VLDRDQGSO_S \"s\")\n \t\t       (VLDRDQGSO_U \"u\") (VLDRWQGO_S \"s\") (VLDRWQGO_U \"u\")\n-\t\t       (VLDRWQGSO_S \"s\") (VLDRWQGSO_U \"u\")])\n+\t\t       (VLDRWQGSO_S \"s\") (VLDRWQGSO_U \"u\") (VST1Q_S \"s\")\n+\t\t       (VST1Q_U \"u\") (VSTRHQSO_S \"s\") (VSTRHQSO_U \"u\")\n+\t\t       (VSTRHQSSO_S \"s\") (VSTRHQSSO_U \"u\") (VSTRHQ_S \"s\")\n+\t\t       (VSTRHQ_U \"u\") (VSTRWQ_S \"s\") (VSTRWQ_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -602,6 +607,11 @@\n (define_int_iterator VLDRDGSOQ [VLDRDQGSO_S VLDRDQGSO_U])\n (define_int_iterator VLDRWGOQ [VLDRWQGO_S VLDRWQGO_U])\n (define_int_iterator VLDRWGSOQ [VLDRWQGSO_S VLDRWQGSO_U])\n+(define_int_iterator VST1Q [VST1Q_S VST1Q_U])\n+(define_int_iterator VSTRHSOQ [VSTRHQSO_S VSTRHQSO_U])\n+(define_int_iterator VSTRHSSOQ [VSTRHQSSO_S VSTRHQSSO_U])\n+(define_int_iterator VSTRHQ [VSTRHQ_S VSTRHQ_U])\n+(define_int_iterator VSTRWQ [VSTRWQ_S VSTRWQ_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -8924,3 +8934,265 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_f]\n+;;\n+(define_insn \"mve_vstrhq_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI [(match_operand:V8HF 1 \"s_register_operand\" \"w\")]\n+\t VSTRHQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vstrh.16\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_p_f]\n+;;\n+(define_insn \"mve_vstrhq_p_fv8hf\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V8HI [(match_operand:V8HF 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vpst\\n\\tvstrht.16\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_p_s vstrhq_p_u]\n+;;\n+(define_insn \"mve_vstrhq_p_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM> [(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n+\t\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vpst\\n\\tvstrht.<V_sz_elem>\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_scatter_offset_p_s vstrhq_scatter_offset_p_u]\n+;;\n+(define_insn \"mve_vstrhq_scatter_offset_p_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM>\n+\t\t[(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_6 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrht.<V_sz_elem>\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_scatter_offset_s vstrhq_scatter_offset_u]\n+;;\n+(define_insn \"mve_vstrhq_scatter_offset_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM>\n+\t\t[(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_6 2 \"s_register_operand\" \"w\")]\n+\t VSTRHSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrh.<V_sz_elem>\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_scatter_shifted_offset_p_s vstrhq_scatter_shifted_offset_p_u]\n+;;\n+(define_insn \"mve_vstrhq_scatter_shifted_offset_p_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM>\n+\t\t[(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_6 2 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VSTRHSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vpst\\n\\tvstrht.<V_sz_elem>\\t%q2, [%m0, %q1, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrhq_scatter_shifted_offset_s vstrhq_scatter_shifted_offset_u]\n+;;\n+(define_insn \"mve_vstrhq_scatter_shifted_offset_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM>\n+\t\t[(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_6 2 \"s_register_operand\" \"w\")]\n+\t VSTRHSSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vstrh.<V_sz_elem>\\t%q2, [%m0, %q1, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrhq_s, vstrhq_u]\n+;;\n+(define_insn \"mve_vstrhq_<supf><mode>\"\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_H_ELEM> [(match_operand:MVE_6 1 \"s_register_operand\" \"w\")]\n+\t VSTRHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vstrh.<V_sz_elem>\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_f]\n+;;\n+(define_insn \"mve_vstrwq_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")]\n+\t VSTRWQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vstrw.32\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_p_f]\n+;;\n+(define_insn \"mve_vstrwq_p_fv4sf\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_p_s vstrwq_p_u]\n+;;\n+(define_insn \"mve_vstrwq_p_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VSTRWQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vstrwq_s vstrwq_u]\n+;;\n+(define_insn \"mve_vstrwq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")]\n+\t VSTRWQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn (\"vstrw.32\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vst1q_f<mode>\"\n+  [(match_operand:<MVE_CNVT> 0 \"memory_operand\")\n+   (unspec:<MVE_CNVT> [(match_operand:MVE_0 1 \"s_register_operand\")] VST1Q_F)\n+  ]\n+  \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n+{\n+  emit_insn (gen_mve_vstr<V_sz_elem1>q_f<mode>(operands[0],operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vst1q_<supf><mode>\"\n+  [(match_operand:MVE_2 0 \"memory_operand\")\n+   (unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\")] VST1Q)\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  emit_insn (gen_mve_vstr<V_sz_elem1>q_<supf><mode>(operands[0],operands[1]));\n+  DONE;\n+})"}, {"sha": "13a4d4f6a57e25b6eaa99b2612545499802493da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,3 +1,56 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vst1q_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u16.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "a1c731abe5cbf2b68fbbe3315514b02b0ccee95d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "5c4d9c7d614d985a85336eed3132b1a717ebba11", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "3380aa02916cfddb66906b32435db9c1ff3e1aac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "4707180c36a4c1f54782d8263c7d325f46480bcb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_z_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "49b52eb23bc67bdca01407d4a71d91a5c970f3fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "cbe153e3bb9c3fd98f09742984e4867159f6aef7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "75a3e38ba6b6dd929b7a6e4800282749c7a0caa7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "763caf2086c21e0908c86f765daa503f123943b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_offset_z_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "1aee458010728430b7b5b2273f178e9409264c4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "7009c354775ff8b72cb0524be98a869c77c76cd0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "1c56a7c72fc08b2435d0d3a5c0a5f1820dcf0651", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_s64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "d11b2b5e46b5e73e5a03744a73c7ad72404c186f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_shifted_offset_z_u64.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "383f4ea49dbccf4aad9d14aa89f5bca18931219e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_f16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "02cc6cc2b63c1b9e5fd2b01899cdeacb49cc7c74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_f16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "56b8400071a965150a7854aa6cfaf4ab49140612", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_f16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "c98a2f68e899892c5f6c7d95e117938e5a7528f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_f16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "e5b7c27c72ac6d0ff9e6d394013b97223b1aeb69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "07953a2aaa040441faa800ca23ca6832fe0d409d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_z_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "126ad5d90ae3e4ba351b428610287e9c4d1cd703", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "c9eff1ec57400f60a49d02c7b4fdd2f7598ad6fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "af2e3dc31470e92b3ee9f31275334b2654f74527", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "71217c095b7c2db8592b02aca197bd1df5f74a7a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "9349dd9783bb94a6b752bda3ba71ec6c5ec91ce3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "6994a474d041e5de46e56d74364e014376155bf8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_offset_z_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "69d39e0086b75461f21157630c5aa3700fc31578", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "1c0eec089dbd85c0d07826029d8a3aafdb8f7fcf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "7a15cff56155f93ba738d119bd9a4b9c1a3845cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "989e0bb7c590f410605639492741e4dd8555e82d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve.fp -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "bb9cea5abe24ae9fe92ccfd841885ab4e8557d6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "1578610465c754f87490ea71886aa397c456d9fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_shifted_offset_z_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile  } */\n-/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n-/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n "}, {"sha": "4c31700cc02920e962eeeb3dce56cb572467a98b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8_t value)\n+{\n+  vst1q_f16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "0575fd1dc1192f9a4f4a7a1293c9cc3214b1ee5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4_t value)\n+{\n+  vst1q_f32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "fe0bb8105d279a6bbce6fda490d1164b257aeb5d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8_t value)\n+{\n+  vst1q_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "2c113f5f40e80e76c031f48256377280f0f1065b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4_t value)\n+{\n+  vst1q_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "8a0ce0d1d122edd7f27bd5ab3a8c9eb9d527eb3c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_s8.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16_t value)\n+{\n+  vst1q_s8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "839d196119f1a32a6e6212f245785696eb8129d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8_t value)\n+{\n+  vst1q_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "3934d888c8e6ca620d0660da30ac1550e2772826", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4_t value)\n+{\n+  vst1q_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "09e0b66f97c34a02f674640bab37b2c61336bdf4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_u8.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16_t value)\n+{\n+  vst1q_u8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16_t value)\n+{\n+  vst1q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "a11dc5a0bee08f2f3bc872737d95130a3f58e4af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8_t value)\n+{\n+  vstrhq_f16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8_t value)\n+{\n+  vstrhq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "447a6eee0d768246649ec8ff14218f0732950dfc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_f16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p_f16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "ea204003ef8a8773d2caac86384499c2b52d179e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p_s16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "3edcbc807da164a56b2bde0c0ea825d0e7df8d73", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_p_s32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "7e1f1068f81c611c184f25c685938b84c9d6066e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p_u16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "4e7684e3ac0c211596979a5c520223b0e3448295", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_p_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_p_u32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "caeb62146100544ed512a805086f1d2f81532d47", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8_t value)\n+{\n+  vstrhq_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8_t value)\n+{\n+  vstrhq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "b737ce617facf745f2bf55d84bce845901e5b9c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int32x4_t value)\n+{\n+  vstrhq_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int32x4_t value)\n+{\n+  vstrhq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "a6582aa29c5a2344500fdd30eed35669058f6197", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p_s16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "f26e962406d973a9ffc60acc38b622792e548c34", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p_s32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "ab5b6274c11eeee322fe6a998d9c0cf97bcc4d88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p_u16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "e6cd0cfa21ba545ec71bca4b12555979eec71d6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_p_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p_u32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "f7c8e481fc73ab3b79cb0648f26cd5535c31ac63", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrhq_scatter_offset_s16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrhq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "aaac12816ebaea16c0aeaf5942153ae8d793b531", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrhq_scatter_offset_s32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrhq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "114962fd1343141ae0d1a73b3dca1d6120429ee7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrhq_scatter_offset_u16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrhq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "92f3aed14ac547e4619afa1e553138b583e09d2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_offset_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrhq_scatter_offset_u32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrhq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "135b0165b5af4f6f95c2b05bb74aa3d3a1d5f409", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p_s16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint16x8_t offset, int16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "e8b1a784034d9ec3c650e2d33ddc3720ebb7c75d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p_s32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint32x4_t offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "60f08eb14d5f0ac109a5fba8e85f2c65e4ebceec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p_u16 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint16x8_t offset, uint16x8_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "076e184d72531dadad5b715554de5c2351cd470e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_p_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p_u32 (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint32x4_t offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrhq_scatter_shifted_offset_p (base, offset, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.32\"  }  } */"}, {"sha": "5ad995295658aa67865cec69d4f78147ac025077", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset_s16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "e471a9ad029d08251bd2ad8f8481080842546f21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrhq_scatter_shifted_offset_s32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (int16_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrhq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "711a5f9ae0be5476bb217683847098ddddde7f74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset_u16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrhq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "7822855b5cf8ee619605a5eb10de28e12d195434", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_scatter_shifted_offset_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrhq_scatter_shifted_offset_u32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrhq_scatter_shifted_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "291590ce04c63ec7d9a15fd1b8cb7b26c1da00d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u16.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8_t value)\n+{\n+  vstrhq_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8_t value)\n+{\n+  vstrhq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.16\"  }  } */"}, {"sha": "283420e3069d7eea95a3d7b9b70e8b8cf15ae4c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrhq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrhq_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint32x4_t value)\n+{\n+  vstrhq_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint32x4_t value)\n+{\n+  vstrhq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrh.32\"  }  } */"}, {"sha": "5b463bd48d612a281b488168625b3ed53c08b582", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4_t value)\n+{\n+  vstrwq_f32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4_t value)\n+{\n+  vstrwq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "98edf4d978b706b1ab6913202d3d21e677be25de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_f32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p_f32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "9bccebdc38be12a67e1dce396e45fc1d60482b24", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p_s32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "d87110b2af08b86af6e22faf4e03067ce0d84c43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_p_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p_u32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "863689c6e2418e7f13d5e718597188a979a3accc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_s32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4_t value)\n+{\n+  vstrwq_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4_t value)\n+{\n+  vstrwq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}, {"sha": "4d2dd800b8972cbe17441b61dbe35df3fdfa0c06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cad47e0f85e59e21a5df04d34d813a860ff42d4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_u32.c?ref=5cad47e0f85e59e21a5df04d34d813a860ff42d4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4_t value)\n+{\n+  vstrwq_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4_t value)\n+{\n+  vstrwq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.32\"  }  } */"}]}