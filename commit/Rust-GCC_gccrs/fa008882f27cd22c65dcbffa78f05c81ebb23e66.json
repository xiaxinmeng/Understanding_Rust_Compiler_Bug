{"sha": "fa008882f27cd22c65dcbffa78f05c81ebb23e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwMDg4ODJmMjdjZDIyYzY1ZGNiZmZhNzhmMDVjODFlYmIyM2U2Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-02-13T07:56:14Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-02-13T07:56:14Z"}, "message": "re PR c/65040 (gcc-5 -Wformat broken)\n\n\tPR c/65040\n\t* c-format.c (check_format_types): Don't warn about different\n\tsignedness if the original value is in the range of WANTED_TYPE.\n\n\t* c-c++-common/pr65040.c: New test.\n\nFrom-SVN: r220677", "tree": {"sha": "749b780b2047e9aab9e7b593ac410e7335f5586d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749b780b2047e9aab9e7b593ac410e7335f5586d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa008882f27cd22c65dcbffa78f05c81ebb23e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa008882f27cd22c65dcbffa78f05c81ebb23e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa008882f27cd22c65dcbffa78f05c81ebb23e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa008882f27cd22c65dcbffa78f05c81ebb23e66/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc06280eb11be2316b12a51112cb62614141f32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc06280eb11be2316b12a51112cb62614141f32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc06280eb11be2316b12a51112cb62614141f32d"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "804c1db9ba80eeac956f5da773dcf7c943b3d4b4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fa008882f27cd22c65dcbffa78f05c81ebb23e66", "patch": "@@ -1,3 +1,9 @@\n+2015-02-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65040\n+\t* c-format.c (check_format_types): Don't warn about different\n+\tsignedness if the original value is in the range of WANTED_TYPE.\n+\n 2015-02-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/64956"}, {"sha": "2f49b2d2d5c2b06a711537c12685c287d122e931", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=fa008882f27cd22c65dcbffa78f05c81ebb23e66", "patch": "@@ -2456,8 +2456,7 @@ check_format_types (location_t loc, format_wanted_type *types)\n       cur_type = TYPE_MAIN_VARIANT (cur_type);\n \n       /* Check whether the argument type is a character type.  This leniency\n-\t only applies to certain formats, flagged with 'c'.\n-      */\n+\t only applies to certain formats, flagged with 'c'.  */\n       if (types->char_lenient_flag)\n \tchar_type_flag = (cur_type == char_type_node\n \t\t\t  || cur_type == signed_char_type_node\n@@ -2486,6 +2485,20 @@ check_format_types (location_t loc, format_wanted_type *types)\n \t      ? wanted_type == c_common_unsigned_type (cur_type)\n \t      : wanted_type == c_common_signed_type (cur_type)))\n \tcontinue;\n+      /* Don't warn about differences merely in signedness if we know\n+\t that the current type is integer-promoted and its original type\n+\t was unsigned such as that it is in the range of WANTED_TYPE.  */\n+      if (TREE_CODE (wanted_type) == INTEGER_TYPE\n+\t  && TREE_CODE (cur_type) == INTEGER_TYPE\n+\t  && warn_format_signedness\n+\t  && TYPE_UNSIGNED (wanted_type)\n+\t  && TREE_CODE (cur_param) == NOP_EXPR)\n+\t{\n+\t  tree t = TREE_TYPE (TREE_OPERAND (cur_param, 0));\n+\t  if (TYPE_UNSIGNED (t)\n+\t      && cur_type == lang_hooks.types.type_promotes_to (t))\n+\t    continue;\n+\t}\n       /* Likewise, \"signed char\", \"unsigned char\" and \"char\" are\n \t equivalent but the above test won't consider them equivalent.  */\n       if (wanted_type == char_type_node"}, {"sha": "d958264df10443cdcf0423ef2256dcafe61f6a85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa008882f27cd22c65dcbffa78f05c81ebb23e66", "patch": "@@ -1,3 +1,8 @@\n+2015-02-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65040\n+\t* c-c++-common/pr65040.c: New test.\n+\n 2015-02-13  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/64705"}, {"sha": "80da8f916485171f2e619241ccf6d238dda0f48b", "filename": "gcc/testsuite/c-c++-common/pr65040.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65040.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa008882f27cd22c65dcbffa78f05c81ebb23e66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65040.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65040.c?ref=fa008882f27cd22c65dcbffa78f05c81ebb23e66", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/65040 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat -Wformat-signedness\" } */\n+\n+unsigned char uc;\n+signed char sc;\n+unsigned short us;\n+signed short ss;\n+unsigned int u;\n+int i;\n+\n+void\n+foo (void)\n+{\n+  __builtin_printf (\"%u\\n\", uc); /* { dg-bogus \"expects argument of type\" } */\n+  __builtin_printf (\"%u\\n\", sc); /* { dg-warning \"expects argument of type\" } */\n+  __builtin_printf (\"%u\\n\", us); /* { dg-bogus \"expects argument of type\" } */\n+  __builtin_printf (\"%u\\n\", ss); /* { dg-warning \"expects argument of type\" } */\n+  __builtin_printf (\"%u\\n\", u); /* { dg-bogus \"expects argument of type\" } */\n+  __builtin_printf (\"%u\\n\", i); /* { dg-warning \"expects argument of type\" } */\n+}"}]}