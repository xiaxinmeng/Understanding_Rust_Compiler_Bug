{"sha": "205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1ZWI2ZTc4ZDU2MWJmMjA0MjVmMDMwZjkzNjJkNmI4ZTVlMGQwZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-04-11T17:43:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-04-11T17:43:07Z"}, "message": "re PR rtl-optimization/27073 (invalid gcse manipulation of REG_EQUIV notes)\n\n\tPR rtl-optimization/27073\n\t* gcse.c (try_replace_reg): Revert last change.  Continue to search\n\tfor both REG_EQUAL and REG_EQUIV notes, but only perform replacements\n\ton the former.\n\nFrom-SVN: r112861", "tree": {"sha": "010adf946ea1a78c7e0483714998dbd539c64a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010adf946ea1a78c7e0483714998dbd539c64a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205eb6e78d561bf20425f030f9362d6b8e5e0d0e/comments", "author": null, "committer": null, "parents": [{"sha": "ef6843ed0b1a7caf04be629d1dac079e48aa048e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6843ed0b1a7caf04be629d1dac079e48aa048e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6843ed0b1a7caf04be629d1dac079e48aa048e"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "2ab31ce3af76a6a66d688014653e9dc9695f2476", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205eb6e78d561bf20425f030f9362d6b8e5e0d0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205eb6e78d561bf20425f030f9362d6b8e5e0d0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "patch": "@@ -1,3 +1,10 @@\n+2006-04-11  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR rtl-optimization/27073\n+\t* gcse.c (try_replace_reg): Revert last change.  Continue to search\n+\tfor both REG_EQUAL and REG_EQUIV notes, but only perform replacements\n+\ton the former.\n+\n 2006-04-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (function_arg_slotno) <BLKmode>: Handle"}, {"sha": "1c000a2e8cf853eeaefe45911dae07253b5958f9", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205eb6e78d561bf20425f030f9362d6b8e5e0d0e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205eb6e78d561bf20425f030f9362d6b8e5e0d0e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=205eb6e78d561bf20425f030f9362d6b8e5e0d0e", "patch": "@@ -2642,7 +2642,7 @@ find_used_regs (rtx *xptr, void *data ATTRIBUTE_UNUSED)\n static int\n try_replace_reg (rtx from, rtx to, rtx insn)\n {\n-  rtx note = find_reg_note (insn, REG_EQUAL, NULL);\n+  rtx note = find_reg_equal_equiv_note (insn);\n   rtx src = 0;\n   int success = 0;\n   rtx set = single_set (insn);\n@@ -2660,9 +2660,9 @@ try_replace_reg (rtx from, rtx to, rtx insn)\n \tvalidate_change (insn, &SET_SRC (set), src, 0);\n     }\n \n-  /* If there is already a NOTE, update the expression in it with our\n-     replacement.  */\n-  if (note != 0)\n+  /* If there is already a REG_EQUAL note, update the expression in it\n+     with our replacement.  */\n+  if (note != 0 && REG_NOTE_KIND (note) == REG_EQUAL)\n     XEXP (note, 0) = simplify_replace_rtx (XEXP (note, 0), from, to);\n \n   if (!success && set && reg_mentioned_p (from, SET_SRC (set)))\n@@ -2689,7 +2689,7 @@ try_replace_reg (rtx from, rtx to, rtx insn)\n      We don't allow that. Remove that note. This code ought\n      not to happen, because previous code ought to synthesize\n      reg-reg move, but be on the safe side.  */\n-  if (note && REG_P (XEXP (note, 0)))\n+  if (note && REG_NOTE_KIND (note) == REG_EQUAL && REG_P (XEXP (note, 0)))\n     remove_note (insn, note);\n \n   return success;"}]}