{"sha": "0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzMTYwOWI1YTkzYTcxOTVjNWE4YTM1ZjgxMTFlYTRmNjZlOTQ4Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@fillmore.redhat.com", "date": "2000-12-22T11:03:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-22T11:03:33Z"}, "message": "Attempt to make locale visible in gdb.\n\n\n2000-12-22  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n\n\tAttempt to make locale visible in gdb.\n\t* include/bits/std_locale.h: Remove codecvt.h include.\n\t* include/bits/locale_facets.h: Add here, after ctype decls.\n\t* include/bits/codecvt.h: Remove std namespace, as assumed to be\n\tin std now.\n\n\t* include/bits/locale_facets.h: Consistently move generic static\n\tmember definitions directly after generic facet declarations.\n\t* include/bits/locale_facets.tcc: From here.\n\n\t* src/locale.cc: Organize locale::id static definitions for\n\trequired facets.\n\t* src/codecvt.cc (codecvt<char...>): Remove locale::id definition.\n\t(codecvt<wchar_t...>): Same.\n\t* src/localename: And here.\n\n\t* include/bits/localefwd.h (_Count_ones): Change _S_count to _M_count.\n\tSame for _M_halfcount.\n\t(std): make locale::_Impl protected. CHANGE BACK\n\nFrom-SVN: r38449", "tree": {"sha": "ba2a71822454ed105ee4d838865ccfaecacf0f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2a71822454ed105ee4d838865ccfaecacf0f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/comments", "author": null, "committer": null, "parents": [{"sha": "2d6fd5fd067e4341aed25cb3e76540b6ff17d277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6fd5fd067e4341aed25cb3e76540b6ff17d277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6fd5fd067e4341aed25cb3e76540b6ff17d277"}], "stats": {"total": 367, "additions": 181, "deletions": 186}, "files": [{"sha": "2e63a936c100dadcc1cdff116981a3801a2e588a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -1,3 +1,25 @@\n+2000-12-22  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n+\n+\tAttempt to make locale visible in gdb.\n+\t* include/bits/std_locale.h: Remove codecvt.h include.\n+\t* include/bits/locale_facets.h: Add here, after ctype decls.\n+\t* include/bits/codecvt.h: Remove std namespace, as assumed to be\n+\tin std now.\n+\n+\t* include/bits/locale_facets.h: Consistently move generic static\n+\tmember definitions directly after generic facet declarations.\n+\t* include/bits/locale_facets.tcc: From here.\n+\n+\t* src/locale.cc: Organize locale::id static definitions for\n+\trequired facets.\n+\t* src/codecvt.cc (codecvt<char...>): Remove locale::id definition.\n+\t(codecvt<wchar_t...>): Same.\n+\t* src/localename: And here.\n+\t\n+\t* include/bits/localefwd.h (_Count_ones): Change _S_count to _M_count.\n+\tSame for _M_halfcount.\n+\t(std): make locale::_Impl protected. CHANGE BACK\n+\n 2000-12-22  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* mknumeric_limits: Output to temporary files, and rename them at"}, {"sha": "8873298e476146708a71fd50813d13c8c84b6f92", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -38,14 +38,6 @@\n #ifndef _CPP_BITS_CODECVT_H\n #define _CPP_BITS_CODECVT_H\t1\n \n-#include <bits/c++config.h>\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-#include <iconv.h>\t\t// For iconv, iconv_t\n-#include <langinfo.h>\n-#endif\n-\n-namespace std\n-{\n   // XXX \n   // __enc_traits may need to move up the locale header hierarchy,\n   // depending on if ctype ends up using it.\n@@ -714,7 +706,6 @@ namespace std\n       virtual \n       ~codecvt_byname() { }\n     };\n-} // namespace std\n \n #endif // _CPP_BITS_CODECVT_H\n "}, {"sha": "6d3b3a358b3f04ce03c6edb0213e9d7b81fbf8f3", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -41,6 +41,8 @@\n #include <bits/std_ios.h>\t// For ios_base\n #ifdef _GLIBCPP_USE_WCHAR_T\n # include <bits/std_cwctype.h>\t// For wctype_t\n+# include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n+# include <langinfo.h>\t\t// For codecvt using nl_langinfo\n #endif \n \n namespace std\n@@ -78,11 +80,10 @@ namespace std\n     _Use_facet_failure_handler(const locale&)\n     { throw _Bad_use_facet(); }\n \n-  // 22.2.1  The ctype category\n+  // 22.2.1.1  Template class ctype\n   // Include host-specific ctype enums for ctype_base.\n   #include <bits/ctype_base.h>\n \n-  // 22.2.1.1  Template class ctype\n   // __ctype_abstract_base is the common base for ctype<_CharT>.  \n   template<typename _CharT>\n     class __ctype_abstract_base : public locale::facet, public ctype_base\n@@ -208,6 +209,9 @@ namespace std\n       ~ctype() { }\n     };\n \n+  template<typename _CharT>\n+    locale::id ctype<_CharT>::id;\n+\n   // 22.2.1.3  ctype specializations\n   template<>\n     class ctype<char> : public __ctype_abstract_base<char>\n@@ -395,6 +399,9 @@ namespace std\n     ctype_byname<char>::ctype_byname(const char*, size_t refs);\n \n \n+  // 22.2.1.5  Template class codecvt\n+  #include <bits/codecvt.h>\n+\n   template<typename _CharT, typename _InIter>\n     class _Numeric_get;  // forward\n \n@@ -495,6 +502,13 @@ namespace std\n       _S_callback(ios_base::event __event, ios_base& __ios, int __ix) throw();\n     };\n \n+  template<typename _CharT>\n+    int _Format_cache<_CharT>::_S_pword_ix;\n+\n+  template<typename _CharT>\n+    const char _Format_cache<_CharT>::\n+    _S_literals[] = \"-+xX0123456789abcdef0123456789ABCDEF\";\n+\n    template<> _Format_cache<char>::_Format_cache();\n #ifdef _GLIBCPP_USE_WCHAR_T\n    template<> _Format_cache<wchar_t>::_Format_cache();\n@@ -679,6 +693,9 @@ namespace std\n \t     void*&) const;\n     };\n \n+  template<typename _CharT, typename _InIter>\n+    locale::id num_get<_CharT, _InIter>::id;\n+\n   // Declare specialized extraction member function.\n   template<>\n     void\n@@ -788,6 +805,9 @@ namespace std\n       do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;\n     };\n \n+  template <typename _CharT, typename _OutIter>\n+    locale::id num_put<_CharT, _OutIter>::id;\n+\n   template<typename _CharT>\n     class _Punct : public locale::facet\n     {\n@@ -841,7 +861,6 @@ namespace std\n \t_M_thousands_sep = __t;\n \t_M_grouping = __g;\n       }\n-\n     };\n \n   template<typename _CharT>\n@@ -887,7 +906,6 @@ namespace std\n \t_M_truename = __t;\n \t_M_falsename = __f;\n       }\n-\t\n     };\n \n   template<typename _CharT>\n@@ -901,12 +919,15 @@ namespace std\n \n       explicit \n       numpunct(size_t __refs = 0) : _Numpunct<_CharT>(__refs) { }\n-    protected:\n \n+    protected:\n       virtual \n       ~numpunct() { }\n     };\n \n+  template<typename _CharT>\n+    locale::id numpunct<_CharT>::id;\n+\n   template<> \n     numpunct<char>::numpunct(size_t __refs): _Numpunct<char>(__refs)\n     {\n@@ -1001,6 +1022,9 @@ namespace std\n       ~collate() { }\n     };\n \n+  template<typename _CharT>\n+    locale::id collate<_CharT>::id;\n+\n   template<>\n     class collate<char> : public _Collate<char>\n     {\n@@ -1170,6 +1194,9 @@ namespace std\n       mutable basic_string<_CharT>* _M_monthnames;\n     };\n \n+  template<typename _CharT, typename _InIter>\n+    locale::id time_get<_CharT, _InIter>::id;\n+\n   template<typename _CharT, typename _InIter>\n     class time_get_byname : public time_get<_CharT, _InIter>\n     {\n@@ -1219,6 +1246,9 @@ namespace std\n       { return __s; }\n     };\n \n+  template<typename _CharT, typename _OutIter>\n+    locale::id time_put<_CharT, _OutIter>::id;\n+\n   template<typename _CharT, typename _OutIter>\n     class time_put_byname : public time_put<_CharT, _OutIter>\n     {\n@@ -1276,6 +1306,9 @@ namespace std\n       { return __s; }\n     };\n \n+  template<typename _CharT, typename _InIter>\n+    locale::id money_get<_CharT, _InIter>::id;\n+\n   template<typename _CharT, typename _OutIter>\n     class money_put : public locale::facet\n     {\n@@ -1314,6 +1347,9 @@ namespace std\n       { return __s; }\n     };\n \n+  template<typename _CharT, typename _OutIter>\n+    locale::id money_put<_CharT, _OutIter>::id;\n+\n   struct money_base\n   {\n     enum part { none, space, symbol, sign, value };\n@@ -1404,6 +1440,12 @@ namespace std\n       ~moneypunct() { }\n     };\n \n+  template<typename _CharT, bool _Intl>\n+    locale::id moneypunct<_CharT, _Intl>::id;\n+\n+  template<typename _CharT, bool _Intl>\n+    const bool moneypunct<_CharT, _Intl>::intl;\n+\n   template<typename _CharT, bool _Intl>\n     class moneypunct_byname : public moneypunct<_CharT,_Intl>\n     {\n@@ -1420,6 +1462,9 @@ namespace std\n       ~moneypunct_byname() { }\n     };\n \n+  template<typename _CharT, bool _Intl>\n+    const bool moneypunct_byname<_CharT, _Intl>::intl;\n+\n   template<>\n     moneypunct_byname<char, false>::\n     moneypunct_byname(const char*, size_t __refs);\n@@ -1495,6 +1540,9 @@ namespace std\n       ~messages() { }\n     };\n \n+  template<typename _CharT>\n+    locale::id messages<_CharT>::id;\n+\n   template<typename _CharT>\n     class messages_byname : public messages<_CharT>\n     {\n@@ -1584,12 +1632,10 @@ namespace std\n     inline _CharT \n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n-\n } // namespace std\n \n #endif\t/* _CPP_BITS_LOCFACETS_H */\n \n // Local Variables:\n // mode:c++\n // End:\n-"}, {"sha": "e0a0dbdefb4f3b206d2a02b1ab7ebc91041b344e", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -158,16 +158,6 @@ namespace std\n       return __s;\n     }\n \n-  template<typename _CharT>\n-    locale::id ctype<_CharT>::id;\n-\n-  template<typename _CharT>\n-    int _Format_cache<_CharT>::_S_pword_ix;\n-\n-  template<typename _CharT>\n-    const char _Format_cache<_CharT>::\n-    _S_literals[] = \"-+xX0123456789abcdef0123456789ABCDEF\";\n-\n   template<typename _CharT>\n     _Format_cache<_CharT>::_Format_cache()\n     : _M_valid(true), _M_use_grouping(false)\n@@ -244,9 +234,6 @@ namespace std\n       return __ncp;\n     }\n \n-  template<typename _CharT, typename _InIter>\n-    locale::id num_get<_CharT, _InIter>::id;\n-\n   // This member function takes an (w)istreambuf_iterator object and\n   // parses it into a generic char array suitable for parsing with\n   // strto[l,ll,f,d]. The thought was to encapsulate the conversion\n@@ -729,9 +716,6 @@ namespace std\n       return __beg;\n     }\n \n-  template <typename _CharT, typename _OutIter>\n-    locale::id num_put<_CharT, _OutIter>::id;\n-\n   // _S_fill is specialized for ostreambuf_iterator, random access iterator.\n   template <typename _CharT, typename _OutIter>\n     inline _OutIter\n@@ -1119,12 +1103,6 @@ namespace std\n       }\n     }\n \n-  template<typename _CharT>\n-    locale::id numpunct<_CharT>::id;\n-\n-  template<typename _CharT>\n-    locale::id collate<_CharT>::id;\n-\n   // Support for time_get:\n   // Note that these partial specializations could, and maybe should,\n   // be changed to full specializations (by eliminating the _Dummy\n@@ -1193,9 +1171,6 @@ namespace std\n     };\n #endif\n \n-  template<typename _CharT, typename _InIter>\n-    locale::id time_get<_CharT, _InIter>::id;\n-\n   template<typename _CharT, typename _InIter>\n     _InIter\n     time_get<_CharT, _InIter>::\n@@ -1249,27 +1224,6 @@ namespace std\n         __err |= __io.failbit;\n       return __out;\n     }\n-\n-  template<typename _CharT, typename _OutIter>\n-    locale::id time_put<_CharT, _OutIter>::id;\n-\n-  template<typename _CharT, typename _InIter>\n-    locale::id money_get<_CharT, _InIter>::id;\n-\n-  template<typename _CharT, typename _OutIter>\n-    locale::id money_put<_CharT, _OutIter>::id;\n-\n-  template<typename _CharT, bool _Intl>\n-    locale::id moneypunct<_CharT, _Intl>::id;\n-\n-  template<typename _CharT, bool _Intl>\n-    const bool moneypunct<_CharT, _Intl>::intl;\n-\n-  template<typename _CharT, bool _Intl>\n-    const bool moneypunct_byname<_CharT, _Intl>::intl;\n-\n-  template<typename _CharT>\n-    locale::id messages<_CharT>::id;\n } // std::\n \n #endif /* _CPP_BITS_LOCFACETS_TCC */"}, {"sha": "fdbc1ce99cbf53607504e3402909ab9c14c47bff", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -56,7 +56,7 @@ namespace std\n     {\n       enum\n       {\n-        _S_count = _Num\n+        _M_count = _Num\n       };\n     };\n \n@@ -65,9 +65,9 @@ namespace std\n     {\n       enum\n       {\n-        _S_halfcount = _Count_ones<_Num, _Shift/2,\n-                                   (_Mask^((~_Mask)>>(_Shift/2))) >::_S_count,\n-        _S_count = (_S_halfcount&_Mask) + ((_S_halfcount>>_Shift)&_Mask)\n+        _M_halfcount = _Count_ones<_Num, _Shift/2,\n+                                   (_Mask^((~_Mask)>>(_Shift/2))) >::_M_count,\n+        _M_count = (_M_halfcount&_Mask) + ((_M_halfcount>>_Shift)&_Mask)\n       };\n     };\n \n@@ -138,7 +138,6 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> class ctype<wchar_t>;\n #endif\n-\n   template<typename _CharT> \n     class ctype_byname;\n   // NB: Specialized for char and wchar_t in locale_facets.h.\n@@ -150,7 +149,6 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> class codecvt<wchar_t, char, mbstate_t>;\n #endif\n-\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt_byname;\n \n@@ -207,7 +205,7 @@ namespace std\n   {\n   public:\n     // Types:\n-    typedef int category;\n+    typedef unsigned int category;\n \n     // Forward decls and friends:\n     class facet;\n@@ -227,12 +225,12 @@ namespace std\n     // Category values:\n     // NB much depends on the order in which these appear:\n     static const category none\t\t= 0;\n-    static const category collate  \t= 0x0100;\n-    static const category ctype \t= 0x0200;\n-    static const category monetary \t= 0x0400;\n-    static const category numeric \t= 0x0800;\n-    static const category time \t\t= 0x1000;\n-    static const category messages \t= 0x2000;\n+    static const category ctype \t= 1 << 0;\n+    static const category numeric \t= 1 << 1;\n+    static const category collate  \t= 1 << 2;\n+    static const category time \t\t= 1 << 3;\n+    static const category monetary \t= 1 << 4;\n+    static const category messages \t= 1 << 5;\n     static const category all \t\t= (collate | ctype | monetary |\n \t\t\t\t \t   numeric | time  | messages);\n \n@@ -296,7 +294,7 @@ namespace std\n     // Current global reference locale\n     static _Impl* \t_S_global;  \n \n-    static const int \t_S_categories_num = _Count_ones<all>::_S_count;\n+    static const int \t_S_categories_num = _Count_ones<all>::_M_count;\n     static const int \t_S_facets_num = 26;\n \n     explicit \n@@ -331,18 +329,19 @@ namespace std\n       friend bool  \n       has_facet(const locale&) throw();\n \n-  private:\n+    //  private:\n+  protected:\n     // Data Members.\n     size_t \t\t\t\t_M_references;\n     __vec_facet* \t\t\t_M_facets;\n     __vec_string* \t\t\t_M_category_names;\n     bool \t\t\t\t_M_has_name;\n     string \t\t\t\t_M_name;\n-    static const locale::id* const \t_S_id_collate[];\n     static const locale::id* const \t_S_id_ctype[];\n-    static const locale::id* const \t_S_id_monetary[];\n     static const locale::id* const \t_S_id_numeric[];\n+    static const locale::id* const \t_S_id_collate[];\n     static const locale::id* const \t_S_id_time[];\n+    static const locale::id* const \t_S_id_monetary[];\n     static const locale::id* const \t_S_id_messages[];\n     static const locale::id* const* const _S_facet_categories[];\n \n@@ -471,7 +470,7 @@ namespace std\n       friend bool           \n       has_facet(const locale&) throw ();\n   public:\n-    id() {};\n+    id() { };\n   private:\n     // NB: There is no accessor for _M_index because it may be used\n     // before the constructor is run; the effect of calling a member"}, {"sha": "739e755a826f7832d7054d205e8a134be457af3e", "filename": "libstdc++-v3/include/bits/std_locale.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -37,7 +37,6 @@\n #include <bits/localefwd.h>\n #include <bits/locale_facets.h>\n #include <bits/locale_facets.tcc>\n-#include <bits/codecvt.h>\n \n #endif\n "}, {"sha": "515a035eab3fb8419fb2ce3135874e02d3cd67a5", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -36,9 +36,6 @@ namespace std {\n   const int __enc_traits::_S_max_size;\n #endif /* _GLIBCPP_USE_WCHAR_T */\n \n-  // codecvt<char, char, mbstate_t> required specialization\n-  locale::id codecvt<char, char, mbstate_t>::id;\n-\n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n@@ -107,8 +104,6 @@ namespace std {\n   \n #ifdef _GLIBCPP_USE_WCHAR_T\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n-  locale::id codecvt<wchar_t, char, mbstate_t>::id;\n-\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs) { }"}, {"sha": "83ca7c15ed91872e0a20e9d044b2d736684d4917", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 71, "deletions": 66, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -41,15 +41,15 @@\n # include <bits/std_cwctype.h>     // for towupper, etc.\n #endif\n \n-namespace std {\n-\n+namespace std \n+{\n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n-  const locale::category \tlocale::collate;\n   const locale::category \tlocale::ctype;\n-  const locale::category \tlocale::monetary;\n   const locale::category \tlocale::numeric;\n+  const locale::category \tlocale::collate;\n   const locale::category \tlocale::time;\n+  const locale::category \tlocale::monetary;\n   const locale::category \tlocale::messages;\n   const locale::category \tlocale::all;\n \n@@ -58,95 +58,111 @@ namespace std {\n   const int \t\t\tlocale::_S_categories_num;\n   const int \t\t\tlocale::_S_facets_num;\n \n-  // Definitions for static const data members of locale::_Impl\n-  const locale::id* const\n-  locale::_Impl::_S_id_collate[] =\n-  {\n-    &std::collate<char>::id,\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &std::collate<wchar_t>::id,\n+  // Definitions for locale::id of standard facets. \n+  locale::id ctype<char>::id;\n+  locale::id codecvt<char, char, mbstate_t>::id;\n+  locale::id num_get<char>::id;\n+  locale::id num_put<char>::id;\n+  locale::id numpunct<char>::id;\n+  locale::id collate<char>::id;\n+  locale::id time_get<char>::id;\n+  locale::id time_put<char>::id;\n+  locale::id money_get<char>::id;\n+  locale::id money_put<char>::id;\n+  locale::id moneypunct<char, false>::id;\n+  locale::id moneypunct<char, true>::id;\n+  locale::id messages<char>::id;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  locale::id ctype<wchar_t>::id;\n+  locale::id codecvt<wchar_t, char, mbstate_t>::id;\n+  locale::id num_get<wchar_t>::id;\n+  locale::id num_put<wchar_t>::id;\n+  locale::id numpunct<wchar_t>::id;\n+  locale::id collate<wchar_t>::id;\n+  locale::id time_get<wchar_t>::id;\n+  locale::id time_put<wchar_t>::id;\n+  locale::id money_get<wchar_t>::id;\n+  locale::id money_put<wchar_t>::id;\n+  locale::id moneypunct<wchar_t, false>::id;\n+  locale::id moneypunct<wchar_t, true>::id;\n+  locale::id messages<wchar_t>::id;\n #endif\n-    0\n-  };\n-  \n+\n+  // Definitions for static const data members of locale::id\n+  size_t locale::id::_S_highwater;  // init'd to 0 by linker\n+\n+  // Definitions for static const data members of locale::_Impl\n   const locale::id* const\n   locale::_Impl::_S_id_ctype[] =\n   {\n     &std::ctype<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &std::ctype<wchar_t>::id,\n-#endif\n     &codecvt<char, char, mbstate_t>::id,\n #ifdef _GLIBCPP_USE_WCHAR_T\n+    &std::ctype<wchar_t>::id,\n     &codecvt<wchar_t, char, mbstate_t>::id,\n #endif\n     0\n   };\n \n   const locale::id* const\n-  locale::_Impl::_S_id_monetary[] =\n+  locale::_Impl::_S_id_numeric[] =\n   {\n-    &moneypunct<char, false>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &moneypunct<wchar_t, false>::id,\n-#endif\n-    &std::moneypunct<char,true >::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &moneypunct<wchar_t,true >::id,\n-#endif\n-    &money_get<char>::id,        \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &money_get<wchar_t>::id,\n-#endif\n-    &money_put<char>::id,        \n+    &num_get<char>::id,  \n+    &num_put<char>::id,  \n+    &numpunct<char>::id, \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    &money_put<wchar_t>::id,\n+    &num_get<wchar_t>::id,\n+    &num_put<wchar_t>::id,\n+    &numpunct<wchar_t>::id,\n #endif\n     0\n   };\n-\n+  \n   const locale::id* const\n-  locale::_Impl::_S_id_numeric[] =\n+  locale::_Impl::_S_id_collate[] =\n   {\n-    &numpunct<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &numpunct<wchar_t>::id,\n-#endif\n-    &num_get<char>::id,  \n- #ifdef _GLIBCPP_USE_WCHAR_T\n-    &num_get<wchar_t>::id,\n-#endif\n-    &num_put<char>::id,  \n+    &std::collate<char>::id,\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    &num_put<wchar_t>::id,\n+    &std::collate<wchar_t>::id,\n #endif\n     0\n   };\n-  \n+\n   const locale::id* const\n   locale::_Impl::_S_id_time[] =\n   {\n     &time_get<char>::id, \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    &time_get<wchar_t>::id,\n-#endif\n     &time_put<char>::id, \n #ifdef _GLIBCPP_USE_WCHAR_T\n+    &time_get<wchar_t>::id,\n     &time_put<wchar_t>::id,\n #endif\n     0\n   };\n   \n   const locale::id* const\n-  locale::_Impl::_S_id_messages[] =\n+  locale::_Impl::_S_id_monetary[] =\n   {\n-    &time_get<char>::id, \n+    &money_get<char>::id,        \n+    &money_put<char>::id,        \n+    &moneypunct<char, false>::id, \n+    &moneypunct<char, true >::id, \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    &time_get<wchar_t>::id,\n+    &money_get<wchar_t>::id,\n+    &money_put<wchar_t>::id,\n+    &moneypunct<wchar_t, false>::id,\n+    &moneypunct<wchar_t, true >::id,\n #endif\n-    &time_put<char>::id, \n+    0\n+  };\n+\n+  const locale::id* const\n+  locale::_Impl::_S_id_messages[] =\n+  {\n+    &std::messages<char>::id, \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    &time_put<wchar_t>::id,\n+    &std::messages<wchar_t>::id,\n #endif\n     0\n   };\n@@ -155,18 +171,15 @@ namespace std {\n   locale::_Impl::_S_facet_categories[] =\n   {\n     // Order must match the decl order in class locale.\n-    locale::_Impl::_S_id_collate,\n     locale::_Impl::_S_id_ctype,\n-    locale::_Impl::_S_id_monetary,\n     locale::_Impl::_S_id_numeric,\n+    locale::_Impl::_S_id_collate,\n     locale::_Impl::_S_id_time,\n+    locale::_Impl::_S_id_monetary,\n     locale::_Impl::_S_id_messages,\n     0\n   };\n \n-  // Definitions for static const data members of locale::id\n-  size_t locale::id::_S_highwater;  // init'd to 0 by linker\n-\n   // Definitions for static const data members of money_base\n   const money_base::pattern \n   money_base::_S_default_pattern =  {{symbol, sign, none, value}};;\n@@ -794,8 +807,6 @@ namespace std {\n   // Platform-specific initialization code for ctype tables.\n   #include <bits/ctype_noninline.h>\n \n-  locale::id ctype<char>::id;\n-\n   const size_t ctype<char>::table_size;\n \n   ctype<char>::~ctype()\n@@ -846,8 +857,6 @@ namespace std {\n   : ctype<char>(new mask[table_size], true, __refs)\n   { }\n \n-  locale::id collate<char>::id;\n-\n   collate<char>::collate(size_t __refs)\n   : _Collate<char>(__refs) { }\n   \n@@ -903,8 +912,6 @@ namespace std {\n   : messages<char>(__refs) { }\n \n #ifdef _GLIBCPP_USE_WCHAR_T  \n-  locale::id ctype<wchar_t>::id;\n-\n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n   {\n@@ -1060,8 +1067,6 @@ namespace std {\n   ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<wchar_t>(__refs) { }\n \n-  locale::id collate<wchar_t>::id;\n-\n   collate<wchar_t>::\n   collate(size_t __refs)\n   : _Collate<wchar_t> (__refs) { }"}, {"sha": "066f0dd0868846c3a354a84dc6a749dd2a28e4bf", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31609b5a93a7195c5a8a35f8111ea4f66e9487/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=0a31609b5a93a7195c5a8a35f8111ea4f66e9487", "patch": "@@ -122,11 +122,11 @@ namespace std {\n     static void(_Impl::* ctors[]) (const char*) = \n     {\n       //  NB: Order must match the decl order in class locale.\n-      &locale::_Impl::_M_construct_collate,\n       &locale::_Impl::_M_construct_ctype,\n-      &locale::_Impl::_M_construct_monetary,\n       &locale::_Impl::_M_construct_numeric,\n+      &locale::_Impl::_M_construct_collate,\n       &locale::_Impl::_M_construct_time,\n+      &locale::_Impl::_M_construct_monetary,\n       &locale::_Impl::_M_construct_messages,\n       0\n     };\n@@ -166,7 +166,7 @@ namespace std {\n   locale::_Impl::\n   _M_replace_categories(const _Impl* __other, category __cat)\n   {\n-    unsigned int __mask = locale::all & -static_cast<unsigned int>(locale::all);\n+    category  __mask = locale::all & -static_cast<unsigned int>(locale::all);\n     for (unsigned int __ix = 0; (-__mask & __cat) != 0; ++__ix, (__mask <<= 1))\n       {\n \tif (__mask & __cat)\n@@ -225,73 +225,57 @@ namespace std {\n     _M_facet_init(new collate_byname<char>(__name, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new collate_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+#endif \n   }\n \n   void \n   locale::_Impl::_M_construct_ctype(const char* __name)\n   {\n     _M_facet_init(new ctype_byname<char>(__name, 0));\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new ctype_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new codecvt_byname<char, char, mbstate_t>(__name));\n #ifdef _GLIBCPP_USE_WCHAR_T\n+    _M_facet_init(new ctype_byname<wchar_t>(__name, 0));\n     _M_facet_init(new codecvt_byname<wchar_t, char, mbstate_t>(__name));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+#endif \n   }\n     \n   void \n   locale::_Impl::_M_construct_monetary(const char* __name)\n   {\n+    _M_replace_facet(locale::_S_classic, &money_get<char>::id);\n+    _M_replace_facet(locale::_S_classic, &money_put<char>::id);\n     _M_facet_init(new moneypunct_byname<char, false>(__name, 0));\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new moneypunct_byname<wchar_t, false>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new moneypunct_byname<char, true >(__name, 0));\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new moneypunct_byname<wchar_t, true >(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n-\n-    _M_replace_facet(locale::_S_classic, &money_get<char>::id);\n #ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &money_get<wchar_t>::id);\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n-    _M_replace_facet(locale::_S_classic, &money_put<char>::id);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &money_put<wchar_t>::id);\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+    _M_facet_init(new moneypunct_byname<wchar_t, false>(__name, 0));\n+    _M_facet_init(new moneypunct_byname<wchar_t, true >(__name, 0));\n+#endif\n   }\n     \n   void \n   locale::_Impl::_M_construct_numeric(const char* __name)\n   {\n-    _M_facet_init(new numpunct_byname<char>(__name, 0));\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new numpunct_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n-\n     _M_replace_facet(locale::_S_classic, &num_get<char>::id);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_replace_facet(locale::_S_classic, &num_get<wchar_t>::id);\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_replace_facet(locale::_S_classic, &num_put<char>::id);\n+    _M_facet_init(new numpunct_byname<char>(__name, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n+    _M_replace_facet(locale::_S_classic, &num_get<wchar_t>::id);\n     _M_replace_facet(locale::_S_classic, &num_put<wchar_t>::id);\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+    _M_facet_init(new numpunct_byname<wchar_t>(__name, 0));\n+#endif \n   }\n     \n   void \n   locale::_Impl::_M_construct_time(const char* __name)\n   {\n     _M_facet_init(new time_get_byname<char>(__name, 0));\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new time_get_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new time_put_byname<char>(__name, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n+    _M_facet_init(new time_get_byname<wchar_t>(__name, 0));\n     _M_facet_init(new time_put_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+#endif \n   }\n     \n   void \n@@ -300,7 +284,7 @@ namespace std {\n     _M_facet_init(new messages_byname<char>(__name, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new messages_byname<wchar_t>(__name, 0));\n-#endif /* _GLIBCPP_USE_WCHAR_T */\n+#endif \n   }\n }\n "}]}