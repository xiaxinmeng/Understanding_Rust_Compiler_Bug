{"sha": "ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4MTZiNTJhNGRlODFiMmNkMGMxY2U0NDM0N2IyZDY1NzRiZjE5ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-12-17T15:36:35Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-12-17T15:36:35Z"}, "message": "valarray_after.h (_Expr<>::operator[](slice)): Don't assume the closure implements general indexing...\n\n        * include/bits/valarray_after.h (_Expr<>::operator[](slice)):\n        Don't assume the closure implements general indexing, as a matter\n        of fact, most of them don't.\n        (_Expr<>::operator[](const gslice&)): Likewise.\n        (_Expr<>::operator[](const valarray<bool>&)): Likewise.\n        (_Expr<>::operator[](const valarray<size_t>&)): Likewise.\n        (_Expr<>::shift): Fix thinko.\n        (_Expr<>::cshift): Likewise.\n        (_Expr<>::apply): Likewise.\n\nFrom-SVN: r108714", "tree": {"sha": "b7bbb2bb6c7618bff24edb77f378cb75b303ee95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7bbb2bb6c7618bff24edb77f378cb75b303ee95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24bd1a0b27fc7ea64a1bec8eca37abc13cff4178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bd1a0b27fc7ea64a1bec8eca37abc13cff4178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bd1a0b27fc7ea64a1bec8eca37abc13cff4178"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "273e2f1a15c82bb21653fa9a706157a80e56aef3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "patch": "@@ -1,3 +1,15 @@\n+2005-12-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/bits/valarray_after.h (_Expr<>::operator[](slice)): \n+\tDon't assume the closure implements general indexing, as a matter\n+\tof fact, most of them don't.\n+\t(_Expr<>::operator[](const gslice&)): Likewise.\n+\t(_Expr<>::operator[](const valarray<bool>&)): Likewise.\n+\t(_Expr<>::operator[](const valarray<size_t>&)): Likewise.\n+\t(_Expr<>::shift): Fix thinko.\n+\t(_Expr<>::cshift): Likewise.\n+\t(_Expr<>::apply): Likewise.\n+\n 2005-12-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/tr1/4_metaprogramming/type_properties/is_empty/is_empty.cc:"}, {"sha": "8d73d42f27c7f226e549389409ed95b0efbfe6f9", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad816b52a4de81b2cd0c1ce44347b2d6574bf19d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=ad816b52a4de81b2cd0c1ce44347b2d6574bf19d", "patch": "@@ -222,47 +222,71 @@ namespace std\n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::operator[](slice __s) const\n-    { return _M_closure[__s]; }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this)[__s];\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::operator[](const gslice& __gs) const\n-    { return _M_closure[__gs]; }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this)[__gs];\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::operator[](const valarray<bool>& __m) const\n-    { return _M_closure[__m]; }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this)[__m];\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::operator[](const valarray<size_t>& __i) const\n-    { return _M_closure[__i]; }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this)[__i];\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline size_t\n     _Expr<_Clos, _Tp>::size() const\n-    { return _M_closure.size (); }\n+    { return _M_closure.size(); }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::shift(int __n) const\n-    { return valarray<_Tp>(_M_closure).shift(__n); }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this).shift(__n);\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::cshift(int __n) const\n-    { return valarray<_Tp>(_M_closure).cshift(__n); }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this).cshift(__n);\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::apply(_Tp __f(const _Tp&)) const\n-    { return valarray<_Tp>(_M_closure).apply(__f); }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this).apply(__f);\n+      return __v;\n+    }\n \n   template<class _Clos, typename _Tp>\n     inline valarray<_Tp>\n     _Expr<_Clos, _Tp>::apply(_Tp __f(_Tp)) const\n-    { return valarray<_Tp>(_M_closure).apply(__f); }\n+    {\n+      valarray<_Tp> __v = valarray<_Tp>(*this).apply(__f);\n+      return __v;\n+    }\n \n   // XXX: replace this with a more robust summation algorithm.\n   template<class _Clos, typename _Tp>"}]}