{"sha": "b4ab701fcc8933f69f288ca434d3376026d23cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhYjcwMWZjYzg5MzNmNjlmMjg4Y2E0MzRkMzM3NjAyNmQyM2NjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-01-12T20:25:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-12T20:25:10Z"}, "message": "re PR rtl-optimization/42699 (ZERO_EXTRACT on lhs never optimized out)\n\n\tPR rtl-optimization/42699\n\t* cse.c (cse_insn): Optimize lhs ZERO_EXTRACT if only CONST_INTs are\n\tinvolved.\n\nFrom-SVN: r155844", "tree": {"sha": "34c32dfaa2d8868681f003d21ce679cc054dd76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c32dfaa2d8868681f003d21ce679cc054dd76e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ab701fcc8933f69f288ca434d3376026d23cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ab701fcc8933f69f288ca434d3376026d23cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ab701fcc8933f69f288ca434d3376026d23cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ab701fcc8933f69f288ca434d3376026d23cc0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "932f6f4a2cac1a3e0e3d2ccc659223c6dfa79837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932f6f4a2cac1a3e0e3d2ccc659223c6dfa79837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932f6f4a2cac1a3e0e3d2ccc659223c6dfa79837"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "256e1d085f25af0e72ea2317eac030a36da573f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ab701fcc8933f69f288ca434d3376026d23cc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ab701fcc8933f69f288ca434d3376026d23cc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4ab701fcc8933f69f288ca434d3376026d23cc0", "patch": "@@ -1,3 +1,9 @@\n+2010-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/42699\n+\t* cse.c (cse_insn): Optimize lhs ZERO_EXTRACT if only CONST_INTs are\n+\tinvolved.\n+\n 2010-01-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/mips/iris6.h (SUBTARGET_DONT_WARN_UNUSED_SPEC,"}, {"sha": "585cce8efd0b2cf3192bb3179ab49e593b3b36ba", "filename": "gcc/cse.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ab701fcc8933f69f288ca434d3376026d23cc0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ab701fcc8933f69f288ca434d3376026d23cc0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=b4ab701fcc8933f69f288ca434d3376026d23cc0", "patch": "@@ -4436,6 +4436,7 @@ cse_insn (rtx insn)\n \n   for (i = 0; i < n_sets; i++)\n     {\n+      bool repeat = false;\n       rtx src, dest;\n       rtx src_folded;\n       struct table_elt *elt = 0, *p;\n@@ -5029,6 +5030,77 @@ cse_insn (rtx insn)\n \t\tbreak;\n \t    }\n \n+\t  /* Try to optimize\n+\t     (set (reg:M N) (const_int A))\n+\t     (set (reg:M2 O) (const_int B))\n+\t     (set (zero_extract:M2 (reg:M N) (const_int C) (const_int D))\n+\t\t  (reg:M2 O)).  */\n+\t  if (GET_CODE (SET_DEST (sets[i].rtl)) == ZERO_EXTRACT\n+\t      && CONST_INT_P (trial)\n+\t      && CONST_INT_P (XEXP (SET_DEST (sets[i].rtl), 1))\n+\t      && CONST_INT_P (XEXP (SET_DEST (sets[i].rtl), 2))\n+\t      && REG_P (XEXP (SET_DEST (sets[i].rtl), 0))\n+\t      && (GET_MODE_BITSIZE (GET_MODE (SET_DEST (sets[i].rtl)))\n+\t\t  >= INTVAL (XEXP (SET_DEST (sets[i].rtl), 1)))\n+\t      && ((unsigned) INTVAL (XEXP (SET_DEST (sets[i].rtl), 1))\n+\t\t  + (unsigned) INTVAL (XEXP (SET_DEST (sets[i].rtl), 2))\n+\t\t  <= HOST_BITS_PER_WIDE_INT))\n+\t    {\n+\t      rtx dest_reg = XEXP (SET_DEST (sets[i].rtl), 0);\n+\t      rtx width = XEXP (SET_DEST (sets[i].rtl), 1);\n+\t      rtx pos = XEXP (SET_DEST (sets[i].rtl), 2);\n+\t      unsigned int dest_hash = HASH (dest_reg, GET_MODE (dest_reg));\n+\t      struct table_elt *dest_elt\n+\t\t= lookup (dest_reg, dest_hash, GET_MODE (dest_reg));\n+\t      rtx dest_cst = NULL;\n+\n+\t      if (dest_elt)\n+\t\tfor (p = dest_elt->first_same_value; p; p = p->next_same_value)\n+\t\t  if (p->is_const && CONST_INT_P (p->exp))\n+\t\t    {\n+\t\t      dest_cst = p->exp;\n+\t\t      break;\n+\t\t    }\n+\t      if (dest_cst)\n+\t\t{\n+\t\t  HOST_WIDE_INT val = INTVAL (dest_cst);\n+\t\t  HOST_WIDE_INT mask;\n+\t\t  unsigned int shift;\n+\t\t  if (BITS_BIG_ENDIAN)\n+\t\t    shift = GET_MODE_BITSIZE (GET_MODE (dest_reg))\n+\t\t\t    - INTVAL (pos) - INTVAL (width);\n+\t\t  else\n+\t\t    shift = INTVAL (pos);\n+\t\t  if (INTVAL (width) == HOST_BITS_PER_WIDE_INT)\n+\t\t    mask = ~(HOST_WIDE_INT) 0;\n+\t\t  else\n+\t\t    mask = ((HOST_WIDE_INT) 1 << INTVAL (width)) - 1;\n+\t\t  val &= ~(mask << shift);\n+\t\t  val |= (INTVAL (trial) & mask) << shift;\n+\t\t  val = trunc_int_for_mode (val, GET_MODE (dest_reg));\n+\t\t  validate_unshare_change (insn, &SET_DEST (sets[i].rtl),\n+\t\t\t\t\t   dest_reg, 1);\n+\t\t  validate_unshare_change (insn, &SET_SRC (sets[i].rtl),\n+\t\t\t\t\t   GEN_INT (val), 1);\n+\t\t  if (apply_change_group ())\n+\t\t    {\n+\t\t      rtx note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+\t\t      if (note)\n+\t\t\t{\n+\t\t\t  remove_note (insn, note);\n+\t\t\t  df_notes_rescan (insn);\n+\t\t\t}\n+\t\t      src_eqv = NULL_RTX;\n+\t\t      src_eqv_elt = NULL;\n+\t\t      src_eqv_volatile = 0;\n+\t\t      src_eqv_in_memory = 0;\n+\t\t      src_eqv_hash = 0;\n+\t\t      repeat = true;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n \t  /* We don't normally have an insn matching (set (pc) (pc)), so\n \t     check for this separately here.  We will delete such an\n \t     insn below.\n@@ -5104,6 +5176,13 @@ cse_insn (rtx insn)\n \t    }\n \t}\n \n+      /* If we changed the insn too much, handle this set from scratch.  */\n+      if (repeat)\n+\t{\n+\t  i--;\n+\t  continue;\n+\t}\n+\n       src = SET_SRC (sets[i].rtl);\n \n       /* In general, it is good to have a SET with SET_SRC == SET_DEST."}]}