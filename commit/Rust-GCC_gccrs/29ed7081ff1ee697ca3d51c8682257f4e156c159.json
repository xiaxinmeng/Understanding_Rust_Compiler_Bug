{"sha": "29ed7081ff1ee697ca3d51c8682257f4e156c159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllZDcwODFmZjFlZTY5N2NhM2Q1MWM4NjgyMjU3ZjRlMTU2YzE1OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-06T17:22:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-06T17:22:10Z"}, "message": "pa.md (millicode expands): Change operand 3 in the expand pattern from a clobber of a match_scratch to a...\n\n\t* pa.md (millicode expands): Change operand 3 in the expand\n\tpattern from a clobber of a match_scratch to a clobber of a\n\tmatch_operand with a register predicate.  Make appropriate\n\tchange in the generated RTL.\n\t(millicode insns): Clobber a match_operand with a register\n\tpredicate instead of a match_scratch expression.\n\t* pa.c (emit_hpdiv_const): Likewise.\n\n\t* pa.md (movsi, movhi, movqi, movdi): Use reg_or_0_operand\n\tconsistently.\n\nFrom-SVN: r3121", "tree": {"sha": "d7f8752131f29ac4322a72a4bb79aafe34f6fa49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f8752131f29ac4322a72a4bb79aafe34f6fa49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ed7081ff1ee697ca3d51c8682257f4e156c159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ed7081ff1ee697ca3d51c8682257f4e156c159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ed7081ff1ee697ca3d51c8682257f4e156c159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ed7081ff1ee697ca3d51c8682257f4e156c159/comments", "author": null, "committer": null, "parents": [{"sha": "fc6cef11aa13819e9c3ae29b2683ce6a7e59efda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6cef11aa13819e9c3ae29b2683ce6a7e59efda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6cef11aa13819e9c3ae29b2683ce6a7e59efda"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "f249259e9237b9a6eace090a19099c514a95f1c9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ed7081ff1ee697ca3d51c8682257f4e156c159/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ed7081ff1ee697ca3d51c8682257f4e156c159/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=29ed7081ff1ee697ca3d51c8682257f4e156c159", "patch": "@@ -846,8 +846,7 @@\n \t\t\t  \"=r,r,Q,!r,!fx,!fx\")\n \t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,!fxy,!r,!fx\"))]\n   \"register_operand (operands[0], SImode)\n-   || register_operand (operands[1], SImode)\n-   || operands[1] == const0_rtx\"\n+   || reg_or_0_operand (operands[1], SImode)\"\n   \"@\n    copy %r1,%0\n    ldw%M1 %1,%0\n@@ -1000,8 +999,7 @@\n   [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q,!r,!*fx,!*fx\")\n \t(match_operand:HI 1 \"move_operand\" \"rM,Q,rM,*fx,r,!*fx\"))]\n   \"register_operand (operands[0], HImode)\n-   || register_operand (operands[1], HImode)\n-   || operands[1] == const0_rtx\"\n+   || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n    copy %r1,%0\n    ldh%M1 %1,%0\n@@ -1063,8 +1061,7 @@\n   [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q,!r,!*fx,!*fx\")\n \t(match_operand:QI 1 \"move_operand\" \"rM,Q,rM,*fx,r,*fx\"))]\n   \"register_operand (operands[0], QImode)\n-   || register_operand (operands[1], QImode)\n-   || operands[1] == const0_rtx\"\n+   || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n    copy %r1,%0\n    ldb%M1 %1,%0\n@@ -1345,8 +1342,7 @@\n \t(match_operand:DI 1 \"general_operand\"\n \t\t\t  \"r,r,Q,i,r,fx,fx\"))]\n   \"register_operand (operands[0], DImode)\n-   || register_operand (operands[1], DImode)\n-   || operands[1] == const0_rtx\"\n+   || reg_or_0_operand (operands[1], DImode)\"\n   \"*\n {\n   if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n@@ -1673,13 +1669,16 @@\n    sub %1,%2,%0\n    subi %1,%2,%0\")\n \n-;; The mulsi3 insns set up registers for the millicode call.\n+;; Clobbering a \"register_operand\" instead of a match_scratch\n+;; in operand3 of millicode calls avoids spilling %r1 and\n+;; produces better code.\n \n+;; The mulsi3 insns set up registers for the millicode call.\n (define_expand \"mulsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (mult:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n@@ -1698,6 +1697,7 @@\n \t\t\t  gen_rtx (SUBREG, SImode, scratch, 1)));\n       DONE;\n     }\n+  operands[3] = gen_reg_rtx(SImode);\n }\")\n \n (define_insn \"umulsidi3\"\n@@ -1710,7 +1710,7 @@\n \n (define_insn \"\"\n   [(set (reg:SI 29) (mult:SI (reg:SI 26) (reg:SI 25)))\n-   (clobber (match_scratch:SI 0 \"=a\"))\n+   (clobber (match_operand:SI 0 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]\n@@ -1719,19 +1719,19 @@\n   [(set_attr \"type\" \"milli\")])\n \n ;;; Division and mod.\n-\n (define_expand \"divsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (div:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"general_operand\" \"\") (reg:SI 29))]\n   \"\"\n   \"\n {\n+  operands[3] = gen_reg_rtx(SImode);\n   if (!(GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const(operands, 0)))\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n@@ -1743,7 +1743,7 @@\n \t\t\t\t gen_rtx (DIV, SImode,\n \t\t\t\t\t  gen_rtx (REG, SImode, 26),\n \t\t\t\t\t  gen_rtx (REG, SImode, 25))),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (SCRATCH, SImode, 0)),\n+\t\t     gen_rtx (CLOBBER, VOIDmode, operands[3]),\n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n@@ -1755,7 +1755,7 @@\n (define_insn \"\"\n   [(set (reg:SI 29)\n     (div:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n-   (clobber (match_scratch:SI 1 \"=a\"))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]\n@@ -1768,14 +1768,15 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (udiv:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"general_operand\" \"\") (reg:SI 29))]\n   \"\"\n   \"\n {\n+  operands[3] = gen_reg_rtx(SImode);\n   if (!(GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const(operands, 1)))\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n@@ -1787,7 +1788,7 @@\n \t\t\t\t gen_rtx (UDIV, SImode,\n \t\t\t\t\t  gen_rtx (REG, SImode, 26),\n \t\t\t\t\t  gen_rtx (REG, SImode, 25))),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (SCRATCH, SImode, 0)),\n+\t\t     gen_rtx (CLOBBER, VOIDmode, operands[3]), \n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n \t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n@@ -1799,7 +1800,7 @@\n (define_insn \"\"\n   [(set (reg:SI 29)\n     (udiv:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n-   (clobber (match_scratch:SI 1 \"=a\"))\n+   (clobber (match_operand:SI 1 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]\n@@ -1812,14 +1813,15 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (mod:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"general_operand\" \"\") (reg:SI 29))]\n   \"\"\n   \"\n {\n+  operands[3] = gen_reg_rtx(SImode);\n   emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n   emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n   emit\n@@ -1829,7 +1831,7 @@\n \t\t\t     gen_rtx (MOD, SImode,\n \t\t\t\t      gen_rtx (REG, SImode, 26),\n \t\t\t\t      gen_rtx (REG, SImode, 25))),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (SCRATCH, SImode, 0)),\n+\t\t gen_rtx (CLOBBER, VOIDmode, operands[3]), \n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n@@ -1839,7 +1841,7 @@\n \n (define_insn \"\"\n   [(set (reg:SI 29) (mod:SI (reg:SI 26) (reg:SI 25)))\n-   (clobber (match_scratch:SI 0 \"=a\"))\n+   (clobber (match_operand:SI 0 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]\n@@ -1852,14 +1854,15 @@\n   [(set (reg:SI 26) (match_operand:SI 1 \"srcsi_operand\" \"\"))\n    (set (reg:SI 25) (match_operand:SI 2 \"srcsi_operand\" \"\"))\n    (parallel [(set (reg:SI 29) (umod:SI (reg:SI 26) (reg:SI 25)))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (match_operand:SI 3 \"register_operand\" \"\"))\n \t      (clobber (reg:SI 26))\n \t      (clobber (reg:SI 25))\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"general_operand\" \"\") (reg:SI 29))]\n   \"\"\n   \"\n {\n+  operands[3] = gen_reg_rtx(SImode);\n   emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n   emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n   emit\n@@ -1869,7 +1872,7 @@\n \t\t\t     gen_rtx (UMOD, SImode,\n \t\t\t\t      gen_rtx (REG, SImode, 26),\n \t\t\t\t      gen_rtx (REG, SImode, 25))),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (SCRATCH, SImode, 0)),\n+\t\t gen_rtx (CLOBBER, VOIDmode, operands[3]), \n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n \t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n@@ -1879,7 +1882,7 @@\n \n (define_insn \"\"\n   [(set (reg:SI 29) (umod:SI (reg:SI 26) (reg:SI 25)))\n-   (clobber (match_scratch:SI 0 \"=a\"))\n+   (clobber (match_operand:SI 0 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]"}]}