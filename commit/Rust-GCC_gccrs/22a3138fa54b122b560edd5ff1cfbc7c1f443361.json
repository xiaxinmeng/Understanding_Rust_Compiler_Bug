{"sha": "22a3138fa54b122b560edd5ff1cfbc7c1f443361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhMzEzOGZhNTRiMTIyYjU2MGVkZDVmZjFjZmJjN2MxZjQ0MzM2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-09-24T13:08:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-09-24T13:08:11Z"}, "message": "re PR bootstrap/41457 (Bootstrap failure at revision 152100)\n\n\tPR bootstrap/41457\n\t* dwarf2out.c (add_const_value_attribute): For HIGH and CONST_FIXED,\n\treturn false instead of gcc_unreachable ().  For CONST return the\n\tvalue returned by recursive call instead of always returning true.\n\t(tree_add_const_value_attribute): Return the value returned by\n\tadd_const_value_attribute instead of always returning true if rtl\n\tis non-NULL.\n\nFrom-SVN: r152119", "tree": {"sha": "4d776474613e93c1b8e546b04cf94942423fa950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d776474613e93c1b8e546b04cf94942423fa950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a3138fa54b122b560edd5ff1cfbc7c1f443361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a3138fa54b122b560edd5ff1cfbc7c1f443361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a3138fa54b122b560edd5ff1cfbc7c1f443361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a3138fa54b122b560edd5ff1cfbc7c1f443361/comments", "author": null, "committer": null, "parents": [{"sha": "6209e51c90353c0293c031c749f5b5c7f08049d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6209e51c90353c0293c031c749f5b5c7f08049d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6209e51c90353c0293c031c749f5b5c7f08049d8"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "59e51e543f8c4207414c1e0b3d69eb9e609de783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a3138fa54b122b560edd5ff1cfbc7c1f443361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a3138fa54b122b560edd5ff1cfbc7c1f443361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22a3138fa54b122b560edd5ff1cfbc7c1f443361", "patch": "@@ -1,4 +1,14 @@\n-2009-09-23 Justin Seyster <jrseys@gmail.com>\n+2009-09-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/41457\n+\t* dwarf2out.c (add_const_value_attribute): For HIGH and CONST_FIXED,\n+\treturn false instead of gcc_unreachable ().  For CONST return the\n+\tvalue returned by recursive call instead of always returning true.\n+\t(tree_add_const_value_attribute): Return the value returned by\n+\tadd_const_value_attribute instead of always returning true if rtl\n+\tis non-NULL.\n+\n+2009-09-23  Justin Seyster  <jrseys@gmail.com>\n \n \t* Makefile.in (PLUGIN_HEADERS): Include real.h.\n "}, {"sha": "213b9afaaafc5bfa805c0051eca46cc7977ccc73", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a3138fa54b122b560edd5ff1cfbc7c1f443361/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a3138fa54b122b560edd5ff1cfbc7c1f443361/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=22a3138fa54b122b560edd5ff1cfbc7c1f443361", "patch": "@@ -13445,10 +13445,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \n     case CONST:\n       if (CONSTANT_P (XEXP (rtl, 0)))\n-\t{\n-\t  add_const_value_attribute (die, XEXP (rtl, 0));\n-\t  return true;\n-\t}\n+\treturn add_const_value_attribute (die, XEXP (rtl, 0));\n       /* FALLTHROUGH */\n     case SYMBOL_REF:\n       if (GET_CODE (rtl) == SYMBOL_REF\n@@ -13473,6 +13470,10 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \t values in Dwarf, so for now we just punt and generate nothing.  */\n       return false;\n \n+    case HIGH:\n+    case CONST_FIXED:\n+      return false;\n+\n     default:\n       /* No other kinds of rtx should be possible here.  */\n       gcc_unreachable ();\n@@ -14098,10 +14099,7 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n \n   rtl = rtl_for_decl_init (init, type);\n   if (rtl)\n-    {\n-      add_const_value_attribute (die, rtl);\n-      return true;\n-    }\n+    return add_const_value_attribute (die, rtl);\n   /* If the host and target are sane, try harder.  */\n   else if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n \t   && initializer_constant_valid_p (init, type))"}]}