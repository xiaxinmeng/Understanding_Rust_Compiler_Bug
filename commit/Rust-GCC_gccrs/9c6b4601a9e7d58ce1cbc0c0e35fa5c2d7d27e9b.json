{"sha": "9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2YjQ2MDFhOWU3ZDU4Y2UxY2JjMGMwZTM1ZmE1YzJkN2QyN2U5Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-01-25T12:26:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-01-25T12:26:49Z"}, "message": "[AArch64][SVE] Handle register-register pred_movs\n\npred_mov<mode> is defined for predicated loads and stores, where\nexactly one of the operands is a register.  However, the instruction\ncondition only checked for \"one\" rather than \"exactly one\", and\nPrathamesh found a case in which combine could fold a predicated\npattern to an all-register pred_mov<mode>.  The constraints would\nthen force one of the registers to memory.\n\nThis patch splits all-register forms into a normal move as soon\nas possible, but also adds an all-register alternative in case the\ninstruction doesn't get split before RA (or in case the RA can use\ninheritance to avoid a reload).\n\nThe testcase for this will be added to aarch64/sve-acle-branch.\n\n2018-01-25  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*pred_mov<mode>)\n\t(pred_mov<mode>): Handle all-register forms using both a new\n\talternative and a split.\n\nFrom-SVN: r268263", "tree": {"sha": "ac9b4afba0aa5d46bdd96484481b6c75710a020a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac9b4afba0aa5d46bdd96484481b6c75710a020a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ad04111c305ea6a20fc99323e0c479ba661c479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad04111c305ea6a20fc99323e0c479ba661c479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad04111c305ea6a20fc99323e0c479ba661c479"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "0b91451e5e09c7d35852f3f40a03e18ae935ca15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "patch": "@@ -1,3 +1,9 @@\n+2019-01-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*pred_mov<mode>)\n+\t(pred_mov<mode>): Handle all-register forms using both a new\n+\talternative and a split.\n+\n 2019-01-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86865"}, {"sha": "703708b6788c52860f92c3e7b029b408a65f3b67", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=9c6b4601a9e7d58ce1cbc0c0e35fa5c2d7d27e9b", "patch": "@@ -170,18 +170,22 @@\n ;; all-true.  Note that this pattern is generated directly by\n ;; aarch64_emit_sve_pred_move, so changes to this pattern will\n ;; need changes there as well.\n-(define_insn \"*pred_mov<mode>\"\n-  [(set (match_operand:SVE_ALL 0 \"nonimmediate_operand\" \"=w, m\")\n+(define_insn_and_split \"*pred_mov<mode>\"\n+  [(set (match_operand:SVE_ALL 0 \"nonimmediate_operand\" \"=w, w, m\")\n \t(unspec:SVE_ALL\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (match_operand:SVE_ALL 2 \"nonimmediate_operand\" \"m, w\")]\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (match_operand:SVE_ALL 2 \"nonimmediate_operand\" \"w, m, w\")]\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[2], <MODE>mode))\"\n   \"@\n+   #\n    ld1<Vesize>\\t%0.<Vetype>, %1/z, %2\n    st1<Vesize>\\t%2.<Vetype>, %1, %0\"\n+  \"&& register_operand (operands[0], <MODE>mode)\n+   && register_operand (operands[2], <MODE>mode)\"\n+  [(set (match_dup 0) (match_dup 2))]\n )\n \n (define_expand \"movmisalign<mode>\"\n@@ -401,10 +405,10 @@\n ;; Predicated structure moves.  This works for both endiannesses but in\n ;; practice is only useful for big-endian.\n (define_insn_and_split \"pred_mov<mode>\"\n-  [(set (match_operand:SVE_STRUCT 0 \"aarch64_sve_struct_nonimmediate_operand\" \"=w, Utx\")\n+  [(set (match_operand:SVE_STRUCT 0 \"aarch64_sve_struct_nonimmediate_operand\" \"=w, w, Utx\")\n \t(unspec:SVE_STRUCT\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (match_operand:SVE_STRUCT 2 \"aarch64_sve_struct_nonimmediate_operand\" \"Utx, w\")]\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (match_operand:SVE_STRUCT 2 \"aarch64_sve_struct_nonimmediate_operand\" \"w, Utx, w\")]\n \t  UNSPEC_MERGE_PTRUE))]\n   \"TARGET_SVE\n    && (register_operand (operands[0], <MODE>mode)"}]}