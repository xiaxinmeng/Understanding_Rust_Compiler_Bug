{"sha": "9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1NDc1NGJkOWFiMjYzYzNkMmE2ZTA0YmJkMWE0ZGMzNmY5ZjI4MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:16:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:16:51Z"}, "message": "ipa-icf.h (symbol_compare_hash): New class.\n\ngcc/\n\t* ipa-icf.h (symbol_compare_hash): New class.\n\t(symbol_compare_hashmap_traits): Use it.\n\t* mem-stats.h (mem_alloc_description::mem_location_hash): New class.\n\t(mem_alloc_description::mem_alloc_hashmap_traits): Use it.\n\t(mem_alloc_description::reverse_mem_map_t): Remove redundant\n\tdefault_hashmap_traits.\n\t* sanopt.c (sanopt_tree_triplet_hash): New class.\n\t(sanopt_tree_triplet_map_traits): Use it.\n\nFrom-SVN: r224974", "tree": {"sha": "6728b4fcfe1d6d91859b5129fff9d1b8b4a755c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6728b4fcfe1d6d91859b5129fff9d1b8b4a755c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0702244b8e0fa5555e20b5554545bab9d06927f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0702244b8e0fa5555e20b5554545bab9d06927f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0702244b8e0fa5555e20b5554545bab9d06927f"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "68b7b027b47687ec79d90cbd3719c0e5cd232a54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "patch": "@@ -1,3 +1,14 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ipa-icf.h (symbol_compare_hash): New class.\n+\t(symbol_compare_hashmap_traits): Use it.\n+\t* mem-stats.h (mem_alloc_description::mem_location_hash): New class.\n+\t(mem_alloc_description::mem_alloc_hashmap_traits): Use it.\n+\t(mem_alloc_description::reverse_mem_map_t): Remove redundant\n+\tdefault_hashmap_traits.\n+\t* sanopt.c (sanopt_tree_triplet_hash): New class.\n+\t(sanopt_tree_triplet_map_traits): Use it.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gengtype-parse.c (require_template_declaration): Allow '+' in"}, {"sha": "b94a38e6f4e7ac3a5617278853004ee7172d2568", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "patch": "@@ -87,10 +87,10 @@ class symbol_compare_collection\n \n /* Hash traits for symbol_compare_collection map.  */\n \n-struct symbol_compare_hashmap_traits: default_hashmap_traits\n+struct symbol_compare_hash : nofree_ptr_hash <symbol_compare_collection>\n {\n   static hashval_t\n-  hash (const symbol_compare_collection *v)\n+  hash (value_type v)\n   {\n     inchash::hash hstate;\n     hstate.add_int (v->m_references.length ());\n@@ -107,8 +107,7 @@ struct symbol_compare_hashmap_traits: default_hashmap_traits\n   }\n \n   static bool\n-  equal_keys (const symbol_compare_collection *a,\n-\t      const symbol_compare_collection *b)\n+  equal (value_type a, value_type b)\n   {\n     if (a->m_references.length () != b->m_references.length ()\n \t|| a->m_interposables.length () != b->m_interposables.length ())\n@@ -126,6 +125,8 @@ struct symbol_compare_hashmap_traits: default_hashmap_traits\n     return true;\n   }\n };\n+typedef simple_hashmap_traits <symbol_compare_hash>\n+  symbol_compare_hashmap_traits;\n \n \n /* Semantic item usage pair.  */"}, {"sha": "a9580ab442e89f16ed5ef6395fe032e908856aa9", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "patch": "@@ -238,10 +238,10 @@ template <class T>\n class mem_alloc_description\n {\n public:\n-  struct mem_alloc_hashmap_traits: default_hashmap_traits\n+  struct mem_location_hash : nofree_ptr_hash <mem_location>\n   {\n     static hashval_t\n-    hash (const mem_location *l)\n+    hash (value_type l)\n     {\n \tinchash::hash hstate;\n \n@@ -253,18 +253,18 @@ class mem_alloc_description\n     }\n \n     static bool\n-    equal_keys (const mem_location *l1, const mem_location *l2)\n+    equal (value_type l1, value_type l2)\n     {\n       return l1->m_filename == l2->m_filename\n \t&& l1->m_function == l2->m_function\n \t&& l1->m_line == l2->m_line;\n     }\n   };\n+  typedef simple_hashmap_traits<mem_location_hash> mem_alloc_hashmap_traits;\n \n   /* Internal class type definitions.  */\n   typedef hash_map <mem_location *, T *, mem_alloc_hashmap_traits> mem_map_t;\n-  typedef hash_map <const void *, mem_usage_pair<T>, default_hashmap_traits>\n-    reverse_mem_map_t;\n+  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;\n   typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;\n   typedef std::pair <mem_location *, T *> mem_list_t;\n "}, {"sha": "e8dfc5f6e8bcba1ebb879f4ade7f3f7a433b2a7c", "filename": "gcc/sanopt.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "patch": "@@ -107,8 +107,11 @@ struct sanopt_tree_triplet\n \n /* Traits class for tree triplet hash maps below.  */\n \n-struct sanopt_tree_triplet_map_traits : default_hashmap_traits\n+struct sanopt_tree_triplet_hash : typed_noop_remove <sanopt_tree_triplet>\n {\n+  typedef sanopt_tree_triplet value_type;\n+  typedef sanopt_tree_triplet compare_type;\n+\n   static inline hashval_t\n   hash (const sanopt_tree_triplet &ref)\n   {\n@@ -120,41 +123,39 @@ struct sanopt_tree_triplet_map_traits : default_hashmap_traits\n   }\n \n   static inline bool\n-  equal_keys (const sanopt_tree_triplet &ref1, const sanopt_tree_triplet &ref2)\n+  equal (const sanopt_tree_triplet &ref1, const sanopt_tree_triplet &ref2)\n   {\n     return operand_equal_p (ref1.t1, ref2.t1, 0)\n \t   && operand_equal_p (ref1.t2, ref2.t2, 0)\n \t   && operand_equal_p (ref1.t3, ref2.t3, 0);\n   }\n \n-  template<typename T>\n   static inline void\n-  mark_deleted (T &e)\n+  mark_deleted (sanopt_tree_triplet &ref)\n   {\n-    e.m_key.t1 = reinterpret_cast<T *> (1);\n+    ref.t1 = reinterpret_cast<tree> (1);\n   }\n \n-  template<typename T>\n   static inline void\n-  mark_empty (T &e)\n+  mark_empty (sanopt_tree_triplet &ref)\n   {\n-    e.m_key.t1 = NULL;\n+    ref.t1 = NULL;\n   }\n \n-  template<typename T>\n   static inline bool\n-  is_deleted (T &e)\n+  is_deleted (const sanopt_tree_triplet &ref)\n   {\n-    return e.m_key.t1 == (void *) 1;\n+    return ref.t1 == (void *) 1;\n   }\n \n-  template<typename T>\n   static inline bool\n-  is_empty (T &e)\n+  is_empty (const sanopt_tree_triplet &ref)\n   {\n-    return e.m_key.t1 == NULL;\n+    return ref.t1 == NULL;\n   }\n };\n+typedef simple_hashmap_traits <sanopt_tree_triplet_hash>\n+  sanopt_tree_triplet_map_traits;\n \n /* This is used to carry various hash maps and variables used\n    in sanopt_optimize_walker.  */"}]}