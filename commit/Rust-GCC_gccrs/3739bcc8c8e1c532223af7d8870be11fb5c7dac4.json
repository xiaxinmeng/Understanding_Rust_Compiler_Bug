{"sha": "3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczOWJjYzhjOGUxYzUzMjIyM2FmN2Q4ODcwYmUxMWZiNWM3ZGFjNA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-11-15T10:01:38Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-11-15T10:01:38Z"}, "message": "[mid-end][__RTL] Clean state despite invalid __RTL startwith passes\n\n\nHi there,\n\nWhen compiling an __RTL function that has an invalid \"startwith\" pass we\ncurrently don't run the dfinish cleanup pass. This means we ICE on the next\nfunction.\n\nThis change ensures that all state is cleaned up for the next function\nto run correctly.\n\nAs an example, before this change the following code would ICE when compiling\nthe function `foo2` because the \"peephole2\" pass is not run at optimisation\nlevel -O0.\n\nWhen compiled with\n./aarch64-none-linux-gnu-gcc -O0 -S missed-pass-error.c -o test.s\n\n```\nint __RTL (startwith (\"peephole2\")) badfoo ()\n{\n(function \"badfoo\"\n  (insn-chain\n    (block 2\n      (edge-from entry (flags \"FALLTHRU\"))\n      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n      (cinsn 10 (use (reg/i:SI x19)))\n      (edge-to exit (flags \"FALLTHRU\"))\n    ) ;; block 2\n  ) ;; insn-chain\n) ;; function \"foo2\"\n}\n\nint __RTL (startwith (\"final\")) foo2 ()\n{\n(function \"foo2\"\n  (insn-chain\n    (block 2\n      (edge-from entry (flags \"FALLTHRU\"))\n      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n      (cinsn 10 (use (reg/i:SI x19)))\n      (edge-to exit (flags \"FALLTHRU\"))\n    ) ;; block 2\n  ) ;; insn-chain\n) ;; function \"foo2\"\n}\n```\n\nNow it silently ignores the __RTL function and successfully compiles foo2.\n\nregtest done on aarch64\nregtest done on x86_64\n\nOK for trunk?\n\ngcc/ChangeLog:\n\n2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* passes.c (should_skip_pass_p): Always run \"dfinish\".\n\ngcc/testsuite/ChangeLog:\n\n2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.dg/rtl/aarch64/missed-pass-error.c: New test.\n\nFrom-SVN: r278283", "tree": {"sha": "a258355b68530db6aadb52c7493af39d3e80cfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a258355b68530db6aadb52c7493af39d3e80cfe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e98ac8676256b3a3e47a3558ca564e109f6fc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e98ac8676256b3a3e47a3558ca564e109f6fc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e98ac8676256b3a3e47a3558ca564e109f6fc55"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "8db3c4ad50d2addfff145670830ba3d0f0bacfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "patch": "@@ -1,3 +1,7 @@\n+2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* passes.c (should_skip_pass_p): Always run \"dfinish\".\n+\n 2019-11-15  Richard Biener  <rguenther@suse.de>\n \n \t* ipa-inline.c (inline_small_functions): Move assignment"}, {"sha": "b77356d164177589f95d4dd8ccbf4e24f635496e", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "patch": "@@ -2375,7 +2375,8 @@ should_skip_pass_p (opt_pass *pass)\n     return false;\n \n   /* Don't skip df init; later RTL passes need it.  */\n-  if (strstr (pass->name, \"dfinit\") != NULL)\n+  if (strstr (pass->name, \"dfinit\") != NULL\n+      || strstr (pass->name, \"dfinish\") != NULL)\n     return false;\n \n   if (!quiet_flag)"}, {"sha": "2b630ef16aee6f9e735c980d2946cd8b3a82751a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "patch": "@@ -1,3 +1,7 @@\n+2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.dg/rtl/aarch64/missed-pass-error.c: New test.\n+\n 2019-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92039"}, {"sha": "2f02ca9d0c40b372d86b24009540e157ed1a8c59", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/missed-pass-error.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fmissed-pass-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3739bcc8c8e1c532223af7d8870be11fb5c7dac4/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fmissed-pass-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fmissed-pass-error.c?ref=3739bcc8c8e1c532223af7d8870be11fb5c7dac4", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+/*\n+   When compiling __RTL functions the startwith string can be either incorrect\n+   (i.e. not matching a pass) or be unused (i.e. can refer to a pass that is\n+   not run at the current optimisation level).\n+\n+   Here we ensure that the state clean up is still run, so that functions other\n+   than the faulty one can still be compiled.\n+ */\n+\n+int __RTL (startwith (\"peephole2\")) badfoo ()\n+{\n+(function \"badfoo\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n+      (cinsn 10 (use (reg/i:SI x19)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"foo2\"\n+}\n+\n+/* Compile a valid __RTL function to test state from the \"dfinit\" pass has been\n+   cleaned with the \"dfinish\" pass.  */\n+\n+int __RTL (startwith (\"final\")) foo2 ()\n+{\n+(function \"foo2\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 101 (set (reg:DI x19) (reg:DI x0)))\n+      (cinsn 10 (use (reg/i:SI x19)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"foo2\"\n+}\n+"}]}