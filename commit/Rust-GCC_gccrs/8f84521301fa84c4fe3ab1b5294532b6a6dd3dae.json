{"sha": "8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4NDUyMTMwMWZhODRjNGZlM2FiMWI1Mjk0NTMyYjZhNmRkM2RhZQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-04-03T10:08:04Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-04-03T10:08:04Z"}, "message": "[ARC] Restore blink first when optimizing for speed.\n\nWhen not optimizing for size, we can restore first blink, hence the return\ninstruction will be executed faster.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (GMASK_LEN): Define.\n\t(arc_restore_callee_saves): Restore first blink when\n\t!optimize_size.\n\nFrom-SVN: r270120", "tree": {"sha": "0a218c2fbb8b9adf24ad9163347ec268f585d2cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a218c2fbb8b9adf24ad9163347ec268f585d2cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "deb012a19d852a3decf241cb4f81f6f7a606df69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb012a19d852a3decf241cb4f81f6f7a606df69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb012a19d852a3decf241cb4f81f6f7a606df69"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "48b224af02d0f4c9c521ad66ba08fe2e0a507fc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "patch": "@@ -1,3 +1,9 @@\n+2019-04-03  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (GMASK_LEN): Define.\n+\t(arc_restore_callee_saves): Restore first blink when\n+\t!optimize_size.\n+\n 2019-04-03  Sudakshina Das  <sudi.das@arm.com>\n \n \t* doc/extend.texi: Add deprecated comment on sign-return-address"}, {"sha": "578c42679cb5dd0b000520e3a533d4fb893aa97c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f84521301fa84c4fe3ab1b5294532b6a6dd3dae/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8f84521301fa84c4fe3ab1b5294532b6a6dd3dae", "patch": "@@ -2506,6 +2506,9 @@ struct GTY (()) arc_frame_info\n   bool save_return_addr;\n };\n \n+/* GMASK bit length -1.  */\n+#define GMASK_LEN 31\n+\n /* Defining data structures for per-function information.  */\n \n typedef struct GTY (()) machine_function\n@@ -3048,6 +3051,8 @@ arc_restore_callee_saves (unsigned int gmask,\n {\n   rtx reg;\n   int frame_deallocated = 0;\n+  HOST_WIDE_INT offs = cfun->machine->frame_info.reg_size;\n+  bool early_blink_restore;\n \n   /* Emit mov fp,sp.  */\n   if (arc_frame_pointer_needed () && offset)\n@@ -3073,9 +3078,21 @@ arc_restore_callee_saves (unsigned int gmask,\n       offset = 0;\n     }\n \n+  /* When we do not optimize for size, restore first blink.  */\n+  early_blink_restore = restore_blink && !optimize_size && offs;\n+  if (early_blink_restore)\n+    {\n+      rtx addr = plus_constant (Pmode, stack_pointer_rtx, offs);\n+      reg = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+      rtx insn = frame_move_inc (reg, gen_frame_mem (Pmode, addr),\n+\t\t\t\t stack_pointer_rtx, NULL_RTX);\n+      add_reg_note (insn, REG_CFA_RESTORE, reg);\n+      restore_blink = false;\n+    }\n+\n   /* N.B. FRAME_POINTER_MASK and RETURN_ADDR_MASK are cleared in gmask.  */\n   if (gmask)\n-    for (int i = 0; i <= 31; i++)\n+    for (int i = 0; i <= GMASK_LEN; i++)\n       {\n \tmachine_mode restore_mode = SImode;\n \n@@ -3088,7 +3105,23 @@ arc_restore_callee_saves (unsigned int gmask,\n \t  continue;\n \n \treg = gen_rtx_REG (restore_mode, i);\n-\tframe_deallocated += frame_restore_reg (reg, 0);\n+\toffs = 0;\n+\tswitch (restore_mode)\n+\t  {\n+\t  case E_DImode:\n+\t    if ((GMASK_LEN - __builtin_clz (gmask)) == (i + 1)\n+\t\t&& early_blink_restore)\n+\t      offs = 4;\n+\t    break;\n+\t  case E_SImode:\n+\t    if ((GMASK_LEN - __builtin_clz (gmask)) == i\n+\t\t&& early_blink_restore)\n+\t      offs = 4;\n+\t    break;\n+\t  default:\n+\t    offs = 0;\n+\t  }\n+\tframe_deallocated += frame_restore_reg (reg, offs);\n \toffset = 0;\n \n \tif (restore_mode == DImode)"}]}