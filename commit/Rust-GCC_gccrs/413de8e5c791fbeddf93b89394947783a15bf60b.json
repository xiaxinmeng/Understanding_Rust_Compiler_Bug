{"sha": "413de8e5c791fbeddf93b89394947783a15bf60b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzZGU4ZTVjNzkxZmJlZGRmOTNiODkzOTQ5NDc3ODNhMTViZjYwYg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2012-08-20T20:27:46Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2012-08-20T20:27:46Z"}, "message": "dwarf2out.c: For DWARF 4+, output DW_AT_high_pc as constant offset.\n\n        * dwarf2out.h (enum dw_val_class): Add dw_val_class_high_pc.\n        * dwarf2out.c (dw_val_equal_p): Handle dw_val_class_high_pc.\n        (add_AT_low_high_pc): New function.\n        (AT_lbl): Handle dw_val_class_high_pc.\n        (print_die): Likewise.\n        (attr_checksum): Likewise.\n        (attr_checksum_ordered): Likewise.\n        (same_dw_val_p): Likewise.\n        (size_of_die): Likewise.\n        (value_format): Likewise.\n        (output_die): Likewise.\n        (gen_subprogram_die): Use add_AT_low_high_pc.\n        (add_high_low_attributes): Likewise.\n        (dwarf2out_finish): Likewise.\n\nFrom-SVN: r190543", "tree": {"sha": "5c373f6ede262df0f4ea4a327dfc2535f794f13d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c373f6ede262df0f4ea4a327dfc2535f794f13d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413de8e5c791fbeddf93b89394947783a15bf60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413de8e5c791fbeddf93b89394947783a15bf60b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413de8e5c791fbeddf93b89394947783a15bf60b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413de8e5c791fbeddf93b89394947783a15bf60b/comments", "author": null, "committer": null, "parents": [{"sha": "ed0ba472c654095656fe1da371ee1a710fce2cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0ba472c654095656fe1da371ee1a710fce2cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0ba472c654095656fe1da371ee1a710fce2cf0"}], "stats": {"total": 109, "additions": 81, "deletions": 28}, "files": [{"sha": "677fc17c24298c9d68e2b63f2b88f279cac64406", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=413de8e5c791fbeddf93b89394947783a15bf60b", "patch": "@@ -1,3 +1,20 @@\n+2012-08-20  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* dwarf2out.h (enum dw_val_class): Add dw_val_class_high_pc.\n+\t* dwarf2out.c (dw_val_equal_p): Handle dw_val_class_high_pc.\n+\t(add_AT_low_high_pc): New function.\n+\t(AT_lbl): Handle dw_val_class_high_pc.\n+\t(print_die): Likewise.\n+\t(attr_checksum): Likewise.\n+\t(attr_checksum_ordered): Likewise.\n+\t(same_dw_val_p): Likewise.\n+\t(size_of_die): Likewise.\n+\t(value_format): Likewise.\n+\t(output_die): Likewise.\n+\t(gen_subprogram_die): Use add_AT_low_high_pc.\n+\t(add_high_low_attributes): Likewise.\n+\t(dwarf2out_finish): Likewise.\n+\n 2012-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/54294"}, {"sha": "11d925b943212e730da28fc9b77e79d9e04e3aad", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=413de8e5c791fbeddf93b89394947783a15bf60b", "patch": "@@ -1312,6 +1312,7 @@ dw_val_equal_p (dw_val_node *a, dw_val_node *b)\n     case dw_val_class_fde_ref:\n       return a->v.val_fde_index == b->v.val_fde_index;\n     case dw_val_class_lbl_id:\n+    case dw_val_class_high_pc:\n       return strcmp (a->v.val_lbl_id, b->v.val_lbl_id) == 0;\n     case dw_val_class_str:\n       return a->v.val_str == b->v.val_str;\n@@ -3598,6 +3599,26 @@ add_AT_data8 (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, &attr);\n }\n \n+/* Add DW_AT_low_pc and DW_AT_high_pc to a DIE.  */\n+static inline void\n+add_AT_low_high_pc (dw_die_ref die, const char *lbl_low, const char *lbl_high)\n+{\n+  dw_attr_node attr;\n+\n+  attr.dw_attr = DW_AT_low_pc;\n+  attr.dw_attr_val.val_class = dw_val_class_lbl_id;\n+  attr.dw_attr_val.v.val_lbl_id = xstrdup (lbl_low);\n+  add_dwarf_attr (die, &attr);\n+\n+  attr.dw_attr = DW_AT_high_pc;\n+  if (dwarf_version < 4)\n+    attr.dw_attr_val.val_class = dw_val_class_lbl_id;\n+  else\n+    attr.dw_attr_val.val_class = dw_val_class_high_pc;\n+  attr.dw_attr_val.v.val_lbl_id = xstrdup (lbl_high);\n+  add_dwarf_attr (die, &attr);\n+}\n+\n /* Hash and equality functions for debug_str_hash.  */\n \n static hashval_t\n@@ -3981,7 +4002,8 @@ AT_lbl (dw_attr_ref a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_lbl_id\n \t\t    || AT_class (a) == dw_val_class_lineptr\n-\t\t    || AT_class (a) == dw_val_class_macptr));\n+\t\t    || AT_class (a) == dw_val_class_macptr\n+\t\t    || AT_class (a) == dw_val_class_high_pc));\n   return a->dw_attr_val.v.val_lbl_id;\n }\n \n@@ -4877,6 +4899,7 @@ print_die (dw_die_ref die, FILE *outfile)\n \tcase dw_val_class_lbl_id:\n \tcase dw_val_class_lineptr:\n \tcase dw_val_class_macptr:\n+\tcase dw_val_class_high_pc:\n \t  fprintf (outfile, \"label: %s\", AT_lbl (a));\n \t  break;\n \tcase dw_val_class_str:\n@@ -5033,6 +5056,7 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n     case dw_val_class_lbl_id:\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n+    case dw_val_class_high_pc:\n       break;\n \n     case dw_val_class_file:\n@@ -5305,6 +5329,7 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n     case dw_val_class_lbl_id:\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n+    case dw_val_class_high_pc:\n       break;\n \n     case dw_val_class_file:\n@@ -5770,6 +5795,7 @@ same_dw_val_p (const dw_val_node *v1, const dw_val_node *v2, int *mark)\n     case dw_val_class_lbl_id:\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n+    case dw_val_class_high_pc:\n       return 1;\n \n     case dw_val_class_file:\n@@ -7241,6 +7267,9 @@ size_of_die (dw_die_ref die)\n \tcase dw_val_class_vms_delta:\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n+\tcase dw_val_class_high_pc:\n+\t  size += DWARF2_ADDR_SIZE;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -7558,6 +7587,17 @@ value_format (dw_attr_ref a)\n     case dw_val_class_data8:\n       return DW_FORM_data8;\n \n+    case dw_val_class_high_pc:\n+      switch (DWARF2_ADDR_SIZE)\n+\t{\n+\t  case 4:\n+\t    return DW_FORM_data4;\n+\t  case 8:\n+\t    return DW_FORM_data8;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -7984,6 +8024,11 @@ output_die (dw_die_ref die)\n \t    break;\n \t  }\n \n+\tcase dw_val_class_high_pc:\n+\t  dw2_asm_output_delta (DWARF2_ADDR_SIZE, AT_lbl (a),\n+\t\t\t\tget_AT_low_pc (die), \"DW_AT_high_pc\");\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -17028,19 +17073,18 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  if (fde->dw_fde_begin)\n \t    {\n \t      /* We have already generated the labels.  */\n-\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, fde->dw_fde_begin);\n-\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, fde->dw_fde_end);\n+\t      add_AT_low_high_pc (subr_die, fde->dw_fde_begin, fde->dw_fde_end);\n \t    }\n \t  else\n \t    {\n \t      /* Create start/end labels and add the range.  */\n-\t      char label_id[MAX_ARTIFICIAL_LABEL_BYTES];\n-\t      ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_BEGIN_LABEL,\n+\t      char label_id_low[MAX_ARTIFICIAL_LABEL_BYTES];\n+\t      char label_id_high[MAX_ARTIFICIAL_LABEL_BYTES];\n+\t      ASM_GENERATE_INTERNAL_LABEL (label_id_low, FUNC_BEGIN_LABEL,\n \t\t\t\t\t   current_function_funcdef_no);\n-\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n-\t      ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_END_LABEL,\n+\t      ASM_GENERATE_INTERNAL_LABEL (label_id_high, FUNC_END_LABEL,\n \t\t\t\t\t   current_function_funcdef_no);\n-\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n+\t      add_AT_low_high_pc (subr_die, label_id_low, label_id_high);\n \t    }\n \n #if VMS_DEBUGGING_INFO\n@@ -17104,10 +17148,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t  dw_die_ref seg_die;\n \n \t\t  /* Do the 'primary' section.   */\n-\t\t  add_AT_lbl_id (subr_die, DW_AT_low_pc,\n-\t\t\t\t fde->dw_fde_begin);\n-\t\t  add_AT_lbl_id (subr_die, DW_AT_high_pc,\n-\t\t\t\t fde->dw_fde_end);\n+\t\t  add_AT_low_high_pc (subr_die, fde->dw_fde_begin,\n+\t\t\t\t      fde->dw_fde_end);\n \n \t\t  /* Build a minimal DIE for the secondary section.  */\n \t\t  seg_die = new_die (DW_TAG_subprogram,\n@@ -17131,20 +17173,15 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t    add_AT_flag (seg_die, DW_AT_artificial, 1);\n \n \t\t  name = concat (\"__second_sect_of_\", name, NULL); \n-\t\t  add_AT_lbl_id (seg_die, DW_AT_low_pc,\n-\t\t\t\t fde->dw_fde_second_begin);\n-\t\t  add_AT_lbl_id (seg_die, DW_AT_high_pc,\n-\t\t\t\t fde->dw_fde_second_end);\n+\t\t  add_AT_low_high_pc (seg_die, fde->dw_fde_second_begin,\n+\t\t\t\t      fde->dw_fde_second_end);\n \t\t  add_name_attribute (seg_die, name);\n \t\t  if (want_pubnames ())\n \t\t    add_pubname_string (name, seg_die);\n \t\t}\n \t    }\n \t  else\n-\t    {\n-\t      add_AT_lbl_id (subr_die, DW_AT_low_pc, fde->dw_fde_begin);\n-\t      add_AT_lbl_id (subr_die, DW_AT_high_pc, fde->dw_fde_end);\n-\t    }\n+\t    add_AT_low_high_pc (subr_die, fde->dw_fde_begin, fde->dw_fde_end);\n \t}\n \n       cfa_fb_offset = CFA_FRAME_BASE_OFFSET (decl);\n@@ -17887,12 +17924,12 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n     }\n   else\n     {\n+      char label_high[MAX_ARTIFICIAL_LABEL_BYTES];\n       ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n \t\t\t\t   BLOCK_NUMBER (stmt));\n-      add_AT_lbl_id (die, DW_AT_low_pc, label);\n-      ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_END_LABEL,\n+      ASM_GENERATE_INTERNAL_LABEL (label_high, BLOCK_END_LABEL,\n \t\t\t\t   BLOCK_NUMBER (stmt));\n-      add_AT_lbl_id (die, DW_AT_high_pc, label);\n+      add_AT_low_high_pc (die, label, label_high);\n     }\n }\n \n@@ -22365,10 +22402,8 @@ dwarf2out_finish (const char *filename)\n     {\n       /* Don't add if the CU has no associated code.  */\n       if (text_section_used)\n-\t{\n-\t  add_AT_lbl_id (comp_unit_die (), DW_AT_low_pc, text_section_label);\n-\t  add_AT_lbl_id (comp_unit_die (), DW_AT_high_pc, text_end_label);\n-\t}\n+\tadd_AT_low_high_pc (comp_unit_die (), text_section_label,\n+\t\t\t    text_end_label);\n     }\n   else\n     {"}, {"sha": "853dce40dedaad1fe98c60d0616094c6084bb179", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413de8e5c791fbeddf93b89394947783a15bf60b/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=413de8e5c791fbeddf93b89394947783a15bf60b", "patch": "@@ -154,7 +154,8 @@ enum dw_val_class\n   dw_val_class_file,\n   dw_val_class_data8,\n   dw_val_class_decl_ref,\n-  dw_val_class_vms_delta\n+  dw_val_class_vms_delta,\n+  dw_val_class_high_pc\n };\n \n /* Describe a floating point constant value, or a vector constant value.  */"}]}