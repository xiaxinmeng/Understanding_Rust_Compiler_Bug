{"sha": "8da00d65132a5565ac574553a8f30b0c7c06afea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhMDBkNjUxMzJhNTU2NWFjNTc0NTUzYThmMzBiMGM3YzA2YWZlYQ==", "commit": {"author": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2013-10-01T15:08:46Z"}, "committer": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2013-10-01T15:08:46Z"}, "message": "gcc/\n\n2013-10-01  Vidya Praveen  <vidyapraveen@arm.com>\n\n\t* aarch64-simd.md\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l2<mode>_internal): Rename to ...\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_hi_internal): ... this;\n\tInsert '\\t' to output template.\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_lo_internal): New.\n\t(aarch64_saddl2<mode>, aarch64_uaddl2<mode>): Modify to call\n\tgen_aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_hi_internal() instead.\n\t(aarch64_ssubl2<mode>, aarch64_usubl2<mode>): Ditto.\n\ngcc/testsuite/\n\n2013-10-01  Vidya Praveen  <vidyapraveen@arm.com>\n\n\t* gcc.target/aarch64/vect_saddl_1.c: New.\n\nFrom-SVN: r203066", "tree": {"sha": "21bf55349fb563f341f01450799af5e37041a6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21bf55349fb563f341f01450799af5e37041a6e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8da00d65132a5565ac574553a8f30b0c7c06afea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da00d65132a5565ac574553a8f30b0c7c06afea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da00d65132a5565ac574553a8f30b0c7c06afea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da00d65132a5565ac574553a8f30b0c7c06afea/comments", "author": null, "committer": null, "parents": [{"sha": "e2ebe1c2e7c0f440153dd1131bc21b1622438877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ebe1c2e7c0f440153dd1131bc21b1622438877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ebe1c2e7c0f440153dd1131bc21b1622438877"}], "stats": {"total": 369, "additions": 357, "deletions": 12}, "files": [{"sha": "47144bcb40d4ba9506d5d795b42ae23e1472c6c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8da00d65132a5565ac574553a8f30b0c7c06afea", "patch": "@@ -1,3 +1,14 @@\n+2013-10-01  Vidya Praveen  <vidyapraveen@arm.com>\n+\n+\t* aarch64-simd.md\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l2<mode>_internal): Rename to ...\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_hi_internal): ... this;\n+\tInsert '\\t' to output template.\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_lo_internal): New.\n+\t(aarch64_saddl2<mode>, aarch64_uaddl2<mode>): Modify to call\n+\tgen_aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_hi_internal() instead.\n+\t(aarch64_ssubl2<mode>, aarch64_usubl2<mode>): Ditto.\n+\n 2013-10-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* doc/install.texi (Host/target specific installation notes for GCC):\n@@ -42,7 +53,7 @@\n \tSimplify.\n \n 2013-10-01  Jakub Jelinek  <jakub@redhat.com>\n-            Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/58574\n \t* config/s390/s390.c (s390_split_branches): Modify check for table"}, {"sha": "a0259b85abe37bc09584d1c9187cb6ae7d219859", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8da00d65132a5565ac574553a8f30b0c7c06afea", "patch": "@@ -2586,7 +2586,7 @@\n \n ;; <su><addsub>l<q>.\n \n-(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>l2<mode>_internal\"\n+(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_hi_internal\"\n  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n        (ADDSUB:<VWIDE> (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n \t\t\t   (match_operand:VQW 1 \"register_operand\" \"w\")\n@@ -2595,20 +2595,35 @@\n \t\t\t   (match_operand:VQW 2 \"register_operand\" \"w\")\n \t\t\t   (match_dup 3)))))]\n   \"TARGET_SIMD\"\n-  \"<ANY_EXTEND:su><ADDSUB:optab>l2 %0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  \"<ANY_EXTEND:su><ADDSUB:optab>l2\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_addl\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>_lo_internal\"\n+ [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+       (ADDSUB:<VWIDE> (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                           (match_operand:VQW 1 \"register_operand\" \"w\")\n+                           (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))\n+                       (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+                           (match_operand:VQW 2 \"register_operand\" \"w\")\n+                           (match_dup 3)))))]\n+  \"TARGET_SIMD\"\n+  \"<ANY_EXTEND:su><ADDSUB:optab>l\\t%0.<Vwtype>, %1.<Vhalftype>, %2.<Vhalftype>\"\n+  [(set_attr \"simd_type\" \"simd_addl\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+\n (define_expand \"aarch64_saddl2<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VQW 1 \"register_operand\" \"w\")\n    (match_operand:VQW 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  emit_insn (gen_aarch64_saddl2<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\toperands[2], p));\n+  emit_insn (gen_aarch64_saddl<mode>_hi_internal (operands[0], operands[1],\n+                                                  operands[2], p));\n   DONE;\n })\n \n@@ -2619,8 +2634,8 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  emit_insn (gen_aarch64_uaddl2<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\toperands[2], p));\n+  emit_insn (gen_aarch64_uaddl<mode>_hi_internal (operands[0], operands[1],\n+                                                  operands[2], p));\n   DONE;\n })\n \n@@ -2631,7 +2646,7 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  emit_insn (gen_aarch64_ssubl2<mode>_internal (operands[0], operands[1],\n+  emit_insn (gen_aarch64_ssubl<mode>_hi_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n })\n@@ -2643,7 +2658,7 @@\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  emit_insn (gen_aarch64_usubl2<mode>_internal (operands[0], operands[1],\n+  emit_insn (gen_aarch64_usubl<mode>_hi_internal (operands[0], operands[1],\n \t\t\t\t\t\toperands[2], p));\n   DONE;\n })"}, {"sha": "d4bee48f06f28d93598d3379277a29dab28c3d93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8da00d65132a5565ac574553a8f30b0c7c06afea", "patch": "@@ -1,3 +1,7 @@\n+2013-10-01  Vidya Praveen  <vidyapraveen@arm.com>\n+\n+\t* gcc.target/aarch64/vect_saddl_1.c: New.\n+\n 2013-10-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/58574\n@@ -10,9 +14,9 @@\n \n 2013-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-     PR tree-optimization/58556\n-     * gcc.dg/tree-ssa/gen-vect-26.c: Use dynamic vector cost model.\n-     * gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n+\tPR tree-optimization/58556\n+\t* gcc.dg/tree-ssa/gen-vect-26.c: Use dynamic vector cost model.\n+\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n \n 2013-10-01  Nick Clifton  <nickc@redhat.com>\n "}, {"sha": "ecbd8a8af603501bc2a0c3a65676cf57a48e9294", "filename": "gcc/testsuite/gcc.target/aarch64/vect_saddl_1.c", "status": "added", "additions": 315, "deletions": 0, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da00d65132a5565ac574553a8f30b0c7c06afea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c?ref=8da00d65132a5565ac574553a8f30b0c7c06afea", "patch": "@@ -0,0 +1,315 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline -save-temps -fno-vect-cost-model\" } */\n+\n+typedef signed char S8_t;\n+typedef signed short S16_t;\n+typedef signed int S32_t;\n+typedef signed long long S64_t;\n+\n+typedef signed char *__restrict__ pS8_t;\n+typedef signed short *__restrict__ pS16_t;\n+typedef signed int *__restrict__ pS32_t;\n+typedef signed long long *__restrict__ pS64_t;\n+\n+typedef unsigned char U8_t;\n+typedef unsigned short U16_t;\n+typedef unsigned int U32_t;\n+typedef unsigned long long U64_t;\n+\n+typedef unsigned char *__restrict__ pU8_t;\n+typedef unsigned short *__restrict__ pU16_t;\n+typedef unsigned int *__restrict__ pU32_t;\n+typedef unsigned long long *__restrict__ pU64_t;\n+\n+extern void abort ();\n+\n+void\n+test_addl_S64_S32_4 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (S64_t) b[i] + (S64_t) c[i];\n+}\n+/* \"saddl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" */\n+/* \"saddl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" */\n+\n+/* a = -b + c => a = c - b */\n+void\n+test_addl_S64_S32_4_neg0 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = -(S64_t) b[i] + (S64_t) c[i];\n+}\n+/* \"ssubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" */\n+/* \"ssubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" */\n+\n+/* a = b + -c => a = b - c */\n+void\n+test_addl_S64_S32_4_neg1 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (S64_t) b[i] + -(S64_t) c[i];\n+}\n+/* \"ssubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" */\n+/* \"ssubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" */\n+\n+void\n+test_addl_S32_S16_8 (pS32_t a, pS16_t b, pS16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] = (S32_t) b[i] + (S32_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"saddl\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4h,\\ v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"saddl2\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8h\" } } */\n+\n+void\n+test_addl_S16_S8_16 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = (S16_t) b[i] + (S16_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"saddl\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8b,\\ v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"saddl2\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.16b,\\ v\\[0-9\\]+\\.16b\" } } */\n+\n+void\n+test_addl_U64_U32_4 (pU64_t a, pU32_t b, pU32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (U64_t) b[i] + (U64_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"uaddl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"uaddl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_addl_U32_U16_8 (pU32_t a, pU16_t b, pU16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] = (U32_t) b[i] + (U32_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"uaddl\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4h,\\ v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"uaddl2\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8h\" } } */\n+\n+void\n+test_addl_U16_U8_16 (pU16_t a, pU8_t b, pU8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = (U16_t) b[i] + (U16_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"uaddl\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8b,\\ v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"uaddl2\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.16b,\\ v\\[0-9\\]+\\.16b\" } } */\n+\n+void\n+test_subl_S64_S32_4 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (S64_t) b[i] - (S64_t) c[i];\n+}\n+/* \"ssubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" */\n+/* \"ssubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" */\n+\n+/* a = b - -c => a = b + c */\n+void\n+test_subl_S64_S32_4_neg0 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (S64_t) b[i] - -(S64_t) c[i];\n+}\n+/* { dg-final { scan-assembler-times \"saddl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" 2 } } */\n+/* { dg-final { scan-assembler-times \"saddl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" 2 } } */\n+\n+/* a = -b - -c => a = c - b */\n+void\n+test_subl_S64_S32_4_neg1 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = -(S64_t) b[i] - -(S64_t) c[i];\n+}\n+/* \"ssubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" */\n+/* \"ssubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" */\n+\n+/* a = -(b - c) => a = c - b */\n+void\n+test_subl_S64_S32_4_neg2 (pS64_t a, pS32_t b, pS32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = -((S64_t) b[i] - (S64_t) c[i]);\n+}\n+/* { dg-final { scan-assembler-times \"ssubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" 5 } } */\n+/* { dg-final { scan-assembler-times \"ssubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" 5 } } */\n+\n+void\n+test_subl_S32_S16_8 (pS32_t a, pS16_t b, pS16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] = (S32_t) b[i] - (S32_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"ssubl\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4h,\\ v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"ssubl2\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8h\" } } */\n+\n+void\n+test_subl_S16_S8_16 (pS16_t a, pS8_t b, pS8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = (S16_t) b[i] - (S16_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"ssubl\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8b,\\ v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"ssubl2\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.16b,\\ v\\[0-9\\]+\\.16b\" } } */\n+\n+void\n+test_subl_U64_U32_4 (pU64_t a, pU32_t b, pU32_t c)\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    a[i] = (U64_t) b[i] - (U64_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"usubl\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"usubl2\\tv\\[0-9\\]+\\.2d,\\ v\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4s\" } } */\n+\n+void\n+test_subl_U32_U16_8 (pU32_t a, pU16_t b, pU16_t c)\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    a[i] = (U32_t) b[i] - (U32_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"usubl\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.4h,\\ v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"usubl2\\tv\\[0-9\\]+\\.4s,\\ v\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8h\" } } */\n+\n+void\n+test_subl_U16_U8_16 (pU16_t a, pU8_t b, pU8_t c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = (U16_t) b[i] - (U16_t) c[i];\n+}\n+/* { dg-final { scan-assembler \"usubl\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.8b,\\ v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"usubl2\\tv\\[0-9\\]+\\.8h,\\ v\\[0-9\\]+\\.16b,\\ v\\[0-9\\]+\\.16b\" } } */\n+\n+/* input values */\n+\n+S64_t S64_ta[4];\n+S32_t S32_tb[4] = { 0, 1, 2, 3 };\n+S32_t S32_tc[4] = { 2, 2, -2, -2 };\n+\n+S32_t S32_ta[8];\n+S16_t S16_tb[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+S16_t S16_tc[8] = { 2, 2, -2, -2, 2, 2, -2, -2 };\n+\n+S16_t S16_ta[16];\n+S8_t S8_tb[16] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+S8_t S8_tc[16] = { 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2 };\n+\n+/* expected output */\n+\n+S64_t addl_rS64[] = { 2, 3, 0, 1 };\n+S64_t neg_r[] = { 2, 1, -4, -5 };\n+S32_t addl_rS32[] = { 2, 3, 0, 1, 6, 7, 4, 5 };\n+S16_t addl_rS16[] = { 2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13 };\n+S64_t subl_rS64[] = { -2, -1, 4, 5 };\n+S32_t subl_rS32[] = { -2, -1, 4, 5, 2, 3, 8, 9 };\n+S16_t subl_rS16[] =\n+  { -2, -1, 4, 5, 2, 3, 8, 9, 6, 7, 12, 13, 10, 11, 16, 17 };\n+U64_t addl_rU64[] = { 2, 3, 0x100000000, 0x100000001 };\n+U32_t addl_rU32[] = { 2, 3, 0x10000, 0x10001, 6, 7, 0x10004, 0x10005 };\n+U16_t addl_rU16[] =\n+{\n+  0x0002, 0x0003, 0x0100, 0x0101, 0x0006, 0x0007, 0x0104, 0x0105,\n+  0x000a, 0x000b, 0x0108, 0x0109, 0x000e, 0x000f, 0x010c, 0x010d\n+};\n+U64_t subl_rU64[] =\n+{\n+  0xfffffffffffffffe, 0xffffffffffffffff,\n+  0xffffffff00000004, 0xffffffff00000005\n+};\n+U32_t subl_rU32[] =\n+{\n+  0xfffffffe, 0xffffffff, 0xffff0004, 0xffff0005,\n+  0x00000002, 0x00000003, 0xffff0008, 0xffff0009\n+};\n+U16_t subl_rU16[] =\n+{\n+  0xfffe, 0xffff, 0xff04, 0xff05, 0x0002, 0x0003, 0xff08, 0xff09,\n+  0x0006, 0x0007, 0xff0c, 0xff0d, 0x000a, 0x000b, 0xff10, 0xff11\n+};\n+\n+#define CHECK(T,N,AS,US)                                 \\\n+do                                                       \\\n+  {                                                      \\\n+    for (i = 0; i < N; i++)                              \\\n+      if ((US##T##_t)S##T##_ta[i] != AS##_##r##US##T[i]) \\\n+        abort();                                         \\\n+  }                                                      \\\n+while (0)\n+\n+#define NCHECK(RES)                           \\\n+do                                            \\\n+  {                                           \\\n+    for (i = 0; i < 4; i++)                   \\\n+      if (S64_ta[i] != RES[i])                \\\n+        abort ();                             \\\n+  }                                           \\\n+while (0)\n+\n+#define SCHECK(T,N,AS) CHECK(T,N,AS,S)\n+#define UCHECK(T,N,AS) CHECK(T,N,AS,U)\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  test_addl_S64_S32_4 (S64_ta, S32_tb, S32_tc);\n+  SCHECK (64, 4, addl);\n+  test_addl_S32_S16_8 (S32_ta, S16_tb, S16_tc);\n+  SCHECK (32, 8, addl);\n+  test_addl_S16_S8_16 (S16_ta, S8_tb, S8_tc);\n+  SCHECK (16, 16, addl);\n+  test_subl_S64_S32_4 (S64_ta, S32_tb, S32_tc);\n+  SCHECK (64, 4, subl);\n+  test_subl_S32_S16_8 (S32_ta, S16_tb, S16_tc);\n+  SCHECK (32, 8, subl);\n+  test_subl_S16_S8_16 (S16_ta, S8_tb, S8_tc);\n+  SCHECK (16, 16, subl);\n+\n+  test_addl_U64_U32_4 (S64_ta, S32_tb, S32_tc);\n+  UCHECK (64, 4, addl);\n+  test_addl_U32_U16_8 (S32_ta, S16_tb, S16_tc);\n+  UCHECK (32, 8, addl);\n+  test_addl_U16_U8_16 (S16_ta, S8_tb, S8_tc);\n+  UCHECK (16, 16, addl);\n+  test_subl_U64_U32_4 (S64_ta, S32_tb, S32_tc);\n+  UCHECK (64, 4, subl);\n+  test_subl_U32_U16_8 (S32_ta, S16_tb, S16_tc);\n+  UCHECK (32, 8, subl);\n+  test_subl_U16_U8_16 (S16_ta, S8_tb, S8_tc);\n+  UCHECK (16, 16, subl);\n+\n+  test_addl_S64_S32_4_neg0 (S64_ta, S32_tb, S32_tc);\n+  NCHECK (neg_r);\n+  test_addl_S64_S32_4_neg1 (S64_ta, S32_tb, S32_tc);\n+  NCHECK (subl_rS64);\n+  test_subl_S64_S32_4_neg0 (S64_ta, S32_tb, S32_tc);\n+  NCHECK (addl_rS64);\n+  test_subl_S64_S32_4_neg1 (S64_ta, S32_tb, S32_tc);\n+  NCHECK (neg_r);\n+  test_subl_S64_S32_4_neg2 (S64_ta, S32_tb, S32_tc);\n+  NCHECK (neg_r);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+"}]}