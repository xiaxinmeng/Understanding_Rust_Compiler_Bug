{"sha": "1b2cb3e7256b7c30397460fa53e210006e32f838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyY2IzZTcyNTZiN2MzMDM5NzQ2MGZhNTNlMjEwMDA2ZTMyZjgzOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:52:01Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:52:01Z"}, "message": "vqshl_n.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c: New file.\n\nFrom-SVN: r223382", "tree": {"sha": "cf0ecb029bbceecbc521ea474c69908101e69129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf0ecb029bbceecbc521ea474c69908101e69129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b2cb3e7256b7c30397460fa53e210006e32f838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2cb3e7256b7c30397460fa53e210006e32f838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2cb3e7256b7c30397460fa53e210006e32f838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2cb3e7256b7c30397460fa53e210006e32f838/comments", "author": null, "committer": null, "parents": [{"sha": "09f8fc7fd0d1062b609721d281d726b3ec42345d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f8fc7fd0d1062b609721d281d726b3ec42345d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f8fc7fd0d1062b609721d281d726b3ec42345d"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "b911493befd4aedb526db8ed73f41084b4d5cde5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b2cb3e7256b7c30397460fa53e210006e32f838/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b2cb3e7256b7c30397460fa53e210006e32f838/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b2cb3e7256b7c30397460fa53e210006e32f838", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqshl.c: New file."}, {"sha": "cb9c4585142fca4f4ca1ecef816acfc6bbdace66", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b2cb3e7256b7c30397460fa53e210006e32f838/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b2cb3e7256b7c30397460fa53e210006e32f838/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshl_n.c?ref=1b2cb3e7256b7c30397460fa53e210006e32f838", "patch": "@@ -0,0 +1,234 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xc0, 0xc4, 0xc8, 0xcc,\n+\t\t\t\t       0xd0, 0xd4, 0xd8, 0xdc };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffe0, 0xffe2, 0xffe4, 0xffe6 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffe0, 0xffffffe2 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffffc0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xc0, 0xc4, 0xc8, 0xcc,\n+\t\t\t\t\t0xd0, 0xd4, 0xd8, 0xdc,\n+\t\t\t\t\t0xe0, 0xe4, 0xe8, 0xec,\n+\t\t\t\t\t0xf0, 0xf4, 0xf8, 0xfc };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xffe0, 0xffe2, 0xffe4, 0xffe6,\n+\t\t\t\t\t0xffe8, 0xffea, 0xffec, 0xffee };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffe0, 0xffffffe2,\n+\t\t\t\t\t0xffffffe4, 0xffffffe6 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffffc0, 0xffffffffffffffc4 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t 0xffffffffffffffff };\n+\n+/* Expected values of cumulative_saturation flag with max positive input.  */\n+int VECT_VAR(expected_cumulative_sat_max,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max,uint,64,2) = 1;\n+\n+/* Expected results with max positive input.  */\n+VECT_VAR_DECL(expected_max,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max,int,64,1) [] = { 0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_max,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_max,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_max,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t    0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t    0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max,int,64,2) [] = { 0x7fffffffffffffff,\n+\t\t\t\t\t    0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_max,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t     0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_max,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t     0xffffffffffffffff };\n+\n+#define INSN vqshl\n+#define TEST_MSG \"VQSHL_N/VQSHLQ_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME ##_n (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: v2=vqshl_n(v1,v), then store the result.  */\n+#define TEST_VQSHL_N2(INSN, Q, T1, T2, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tV);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHL_N2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQSHL_N(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQSHL_N1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQSHL_N(, int, s, 8, 8, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, int, s, 16, 4, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, int, s, 32, 2, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, int, s, 64, 1, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, uint, u, 8, 8, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, uint, u, 16, 4, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, uint, u, 32, 2, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(, uint, u, 64, 1, 3, expected_cumulative_sat, CMT);\n+\n+  TEST_VQSHL_N(q, int, s, 8, 16, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, int, s, 16, 8, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, int, s, 32, 4, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, int, s, 64, 2, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, uint, u, 8, 16, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, uint, u, 16, 8, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, uint, u, 32, 4, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHL_N(q, uint, u, 64, 2, 3, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Fill input vector with max value, to check saturation on limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+#undef CMT\n+#define CMT \" (with max input)\"\n+  TEST_VQSHL_N(, int, s, 8, 8, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, int, s, 16, 4, 1, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, int, s, 32, 2, 1, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, int, s, 64, 1, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, uint, u, 8, 8, 3, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, uint, u, 16, 4, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, uint, u, 32, 2, 3, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(, uint, u, 64, 1, 3, expected_cumulative_sat_max, CMT);\n+\n+  TEST_VQSHL_N(q, int, s, 8, 16, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, int, s, 16, 8, 1, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, int, s, 32, 4, 1, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, int, s, 64, 2, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, uint, u, 8, 16, 3, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, uint, u, 16, 8, 2, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, uint, u, 32, 4, 3, expected_cumulative_sat_max, CMT);\n+  TEST_VQSHL_N(q, uint, u, 64, 2, 3, expected_cumulative_sat_max, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshl_n ();\n+  return 0;\n+}"}]}