{"sha": "798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4YzE4M2Y3ZjBiNDgyYTRkMWEzMGViOGM3MGQ3ZDhmMzBjYWEzZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-08-13T22:31:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-08-13T22:31:44Z"}, "message": "compiler, runtime: Fix unexpected GC interfering with closure passing.\n\nThe Go frontend passes closures through to functions using the\nfunctions __go_set_closure and __go_get_closure.  The\nexpectation is that there are no function calls between\nset_closure and get_closure.  However, it turns out that there\ncan be function calls if some of the function arguments\nrequire type conversion to an interface type.  Converting to\nan interface type can allocate memory, and that can in turn\ntrigger a garbage collection, and that can in turn call pool\ncleanup functions that may call __go_set_closure.  So the\ncalled function can see the wrong closure value, which is bad.\n\nThis patch fixes the problem in two different ways.  First, we\nmove all type conversions in function arguments into temporary\nvariables so that they can not appear before the call to\n__go_set_closure.  (This required shifting the flatten phase\nafter the simplify_thunk phase, since the latter expects to\nwork with unconverted argument types.)  Second, we fix the\nmemory allocation function to preserve the closure value\nacross any possible garbage collection.\n\nA test case is the libgo database/sql check run with the\nenvironment variable GOGC set to 1.\n\nFrom-SVN: r213932", "tree": {"sha": "198fc07cf8ca2bd9c972c9d40b113a7f73865227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198fc07cf8ca2bd9c972c9d40b113a7f73865227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/comments", "author": null, "committer": null, "parents": [{"sha": "c6f9ea3b5e856e14a9fa9ffd237fc9fdc16487fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f9ea3b5e856e14a9fa9ffd237fc9fdc16487fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f9ea3b5e856e14a9fa9ffd237fc9fdc16487fb"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "f7a3c57bcb39be04b48c3022e8db9cc98b50b9db", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "patch": "@@ -9013,8 +9013,51 @@ Call_expression::lower_varargs(Gogo* gogo, Named_object* function,\n // Flatten a call with multiple results into a temporary.\n \n Expression*\n-Call_expression::do_flatten(Gogo*, Named_object*, Statement_inserter* inserter)\n+Call_expression::do_flatten(Gogo* gogo, Named_object*,\n+\t\t\t    Statement_inserter* inserter)\n {\n+  if (this->classification() == EXPRESSION_ERROR)\n+    return this;\n+\n+  // Add temporary variables for all arguments that require type\n+  // conversion.\n+  Function_type* fntype = this->get_function_type();\n+  go_assert(fntype != NULL);\n+  if (this->args_ != NULL && !this->args_->empty()\n+      && fntype->parameters() != NULL && !fntype->parameters()->empty())\n+    {\n+      bool is_interface_method =\n+\tthis->fn_->interface_field_reference_expression() != NULL;\n+\n+      Expression_list *args = new Expression_list();\n+      Typed_identifier_list::const_iterator pp = fntype->parameters()->begin();\n+      Expression_list::const_iterator pa = this->args_->begin();\n+      if (!is_interface_method && fntype->is_method())\n+\t{\n+\t  // The receiver argument.\n+\t  args->push_back(*pa);\n+\t  ++pa;\n+\t}\n+      for (; pa != this->args_->end(); ++pa, ++pp)\n+\t{\n+\t  go_assert(pp != fntype->parameters()->end());\n+\t  if (Type::are_identical(pp->type(), (*pa)->type(), true, NULL))\n+\t    args->push_back(*pa);\n+\t  else\n+\t    {\n+\t      Location loc = (*pa)->location();\n+\t      Expression* arg =\n+\t\tExpression::convert_for_assignment(gogo, pp->type(), *pa, loc);\n+\t      Temporary_statement* temp =\n+\t\tStatement::make_temporary(pp->type(), arg, loc);\n+\t      inserter->insert(temp);\n+\t      args->push_back(Expression::make_temporary_reference(temp, loc));\n+\t    }\n+\t}\n+      delete this->args_;\n+      this->args_ = args;\n+    }\n+\n   size_t rc = this->result_count();\n   if (rc > 1 && this->call_temp_ == NULL)\n     {"}, {"sha": "1772623a9ce209ef00855e80e9af528e30ee1d49", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "patch": "@@ -124,15 +124,15 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Convert named types to backend representation.\n   ::gogo->convert_named_types();\n \n-  // Flatten the parse tree.\n-  ::gogo->flatten();\n-\n   // Build thunks for functions which call recover.\n   ::gogo->build_recover_thunks();\n \n   // Convert complicated go and defer statements into simpler ones.\n   ::gogo->simplify_thunk_statements();\n \n+  // Flatten the parse tree.\n+  ::gogo->flatten();\n+\n   // Dump ast, use filename[0] as the base name\n   ::gogo->dump_ast(filenames[0]);\n }"}, {"sha": "c5e64c893b83e6fff5f7f936227e5bf11a61617f", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=798c183f7f0b482a4d1a30eb8c70d7d8f30caa3e", "patch": "@@ -84,6 +84,7 @@ runtime_mallocgc(uintptr size, uintptr typ, uint32 flag)\n \tMLink *v, *next;\n \tbyte *tiny;\n \tbool incallback;\n+\tvoid *closure;\n \n \tif(size == 0) {\n \t\t// All 0-length allocations use this pointer.\n@@ -95,6 +96,10 @@ runtime_mallocgc(uintptr size, uintptr typ, uint32 flag)\n \tm = runtime_m();\n \tg = runtime_g();\n \n+\t// We should not be called in between __go_set_closure and the\n+\t// actual function call, but cope with it if we are.\n+\tclosure = g->closure;\n+\n \tincallback = false;\n \tif(m->mcache == nil && g->ncgo > 0) {\n \t\t// For gccgo this case can occur when a cgo or SWIG function\n@@ -175,6 +180,7 @@ runtime_mallocgc(uintptr size, uintptr typ, uint32 flag)\n \t\t\t\t\tm->locks--;\n \t\t\t\t\tif(incallback)\n \t\t\t\t\t\truntime_entersyscall();\n+\t\t\t\t\tg->closure = closure;\n \t\t\t\t\treturn v;\n \t\t\t\t}\n \t\t\t}\n@@ -264,6 +270,8 @@ runtime_mallocgc(uintptr size, uintptr typ, uint32 flag)\n \tif(incallback)\n \t\truntime_entersyscall();\n \n+\tg->closure = closure;\n+\n \treturn v;\n }\n "}]}