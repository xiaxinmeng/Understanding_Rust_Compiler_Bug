{"sha": "673369608c82ea332809a5e5141b1ab659cb56d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczMzY5NjA4YzgyZWEzMzI4MDlhNWU1MTQxYjFhYjY1OWNiNTZkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-16T12:26:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-16T12:26:58Z"}, "message": "[multiple changes]\n\n2012-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* a-direct.adb, g-dirope.adb: Minor reformatting.\n\n2012-07-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-except.ads, a-except-2005.ads: Remove outdated comment.\n\n2012-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb (Subprogram_Name_Greater): Fix algorithm to\n\tconform to documentation.\n\n2012-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat1drv.adb (Check_Library_Items): Removed, no longer used.\n\n2012-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Array_Type_Declaration): if component type has\n\tinvariants, the array type itself requires an invariant procedure.\n\t* exp_ch3.ads, exp_ch3.adb (Build_Array_Invariant_Proc): new\n\tprocedure, to build a checking procedure that applies the\n\tinvariant check on some type T to each component of an array\n\tof T's.  Code is similar to the construction of the init_proc\n\tfor an array, and handles multidimensional arrays by recursing\n\tover successive dimensions.\n\n2012-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-debpoo.adb: Revert previous change.\n\n2012-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Insert the itype reference to a\n\tlibrary-level class-wide subtype after the freeze node of the\n\tequivalent record type.\n\nFrom-SVN: r189526", "tree": {"sha": "169785dc0648022f79f9c1abb5d1b9da85e4201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169785dc0648022f79f9c1abb5d1b9da85e4201b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/673369608c82ea332809a5e5141b1ab659cb56d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673369608c82ea332809a5e5141b1ab659cb56d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/673369608c82ea332809a5e5141b1ab659cb56d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673369608c82ea332809a5e5141b1ab659cb56d1/comments", "author": null, "committer": null, "parents": [{"sha": "e01934b794c8fb78c38e7ca26fe7a1d0bfb3e7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01934b794c8fb78c38e7ca26fe7a1d0bfb3e7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01934b794c8fb78c38e7ca26fe7a1d0bfb3e7f4"}], "stats": {"total": 309, "additions": 226, "deletions": 83}, "files": [{"sha": "18126f43e7568e9e874be7d5c4e84d9c97856a16", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -1,3 +1,41 @@\n+2012-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-direct.adb, g-dirope.adb: Minor reformatting.\n+\n+2012-07-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-except.ads, a-except-2005.ads: Remove outdated comment.\n+\n+2012-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb (Subprogram_Name_Greater): Fix algorithm to\n+\tconform to documentation.\n+\n+2012-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat1drv.adb (Check_Library_Items): Removed, no longer used.\n+\n+2012-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): if component type has\n+\tinvariants, the array type itself requires an invariant procedure.\n+\t* exp_ch3.ads, exp_ch3.adb (Build_Array_Invariant_Proc): new\n+\tprocedure, to build a checking procedure that applies the\n+\tinvariant check on some type T to each component of an array\n+\tof T's.  Code is similar to the construction of the init_proc\n+\tfor an array, and handles multidimensional arrays by recursing\n+\tover successive dimensions.\n+\n+2012-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* g-debpoo.adb: Revert previous change.\n+\n+2012-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Insert the itype reference to a\n+\tlibrary-level class-wide subtype after the freeze node of the\n+\tequivalent record type.\n+\n 2012-07-16  Pascal Obry  <obry@adacore.com>\n \n \t* s-crtl.ads (mkdir): New routine, support encoding."}, {"sha": "e166c9f8f32c86b16dbd687c5bb6a371b93f6c75", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -408,25 +408,22 @@ package body Ada.Directories is\n          --  Acquire setting of encoding parameter\n \n          declare\n-            Formstr  : constant String := To_Lower (Form);\n+            Formstr : constant String := To_Lower (Form);\n \n             Encoding : CRTL.Filename_Encoding;\n             --  Filename encoding specified into the form parameter\n \n-            V1, V2   : Natural;\n+            V1, V2 : Natural;\n \n          begin\n             Form_Parameter (Formstr, \"encoding\", V1, V2);\n \n             if V1 = 0 then\n                Encoding := CRTL.Unspecified;\n-\n             elsif Formstr (V1 .. V2) = \"utf8\" then\n                Encoding := CRTL.UTF8;\n-\n             elsif Formstr (V1 .. V2) = \"8bits\" then\n                Encoding := CRTL.ASCII_8bits;\n-\n             else\n                raise Use_Error with \"invalid Form\";\n             end if;"}, {"sha": "e346a2715f57d9b6c118b89762767fcf8b39d3f3", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -301,10 +301,6 @@ private\n    type Exception_Occurrence is record\n       Id : Exception_Id;\n       --  Exception_Identity for this exception occurrence\n-      --\n-      --  WARNING System.System.Finalization_Implementation.Finalize_List\n-      --  relies on the fact that this field is always first in the exception\n-      --  occurrence\n \n       Msg_Length : Natural := 0;\n       --  Length of message (zero = no message)"}, {"sha": "e395cf4f3b0cfe068c839ff0971468f5235af191", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -271,9 +271,6 @@ private\n    type Exception_Occurrence is record\n       Id : Exception_Id;\n       --  Exception_Identity for this exception occurrence\n-      --  WARNING System.System.Finalization_Implementation.Finalize_List\n-      --  relies on the fact that this field is always first in the exception\n-      --  occurrence\n \n       Msg_Length : Natural := 0;\n       --  Length of message (zero = no message)"}, {"sha": "f64524e18936e8fc0d22584c5184efab84cb4a25", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -767,6 +767,140 @@ package body Exp_Ch3 is\n       end if;\n    end Build_Array_Init_Proc;\n \n+   --------------------------------\n+   -- Build_Array_Invariant_Proc --\n+   --------------------------------\n+\n+   procedure Build_Array_Invariant_Proc (A_Type : Entity_Id; Nod : Node_Id) is\n+      Loc              : constant Source_Ptr := Sloc (Nod);\n+      Object_Name      : constant Name_Id := New_Internal_Name ('I');\n+      --  Name for argument of invariant procedure\n+\n+      Object_Entity : constant Node_Id :=\n+                        Make_Defining_Identifier (Loc, Object_Name);\n+      --  The procedure declaration entity for the argument\n+\n+      Body_Stmts       : List_Id;\n+      Index_List       : List_Id;\n+      Proc_Id          : Entity_Id;\n+      Proc_Body        : Node_Id;\n+\n+      function Build_Component_Invariant_Call return Node_Id;\n+      --  Create one statement to verify invariant on one array component,\n+      --  designated by a full set of indexes.\n+\n+      function Check_One_Dimension (N : Int) return List_Id;\n+      --  Create loop to check on one dimension of the array. The single\n+      --  statement in the loop body checks the inner dimensions if any, or\n+      --  else a single component. This procedure is called recursively, with\n+      --  N being the dimension to be initialized. A call with N greater than\n+      --  the number of dimensions generates the component initialization\n+      --  and terminates the recursion.\n+\n+      ------------------------------------\n+      -- Build_Component_Invariant_Call --\n+      ------------------------------------\n+\n+      function Build_Component_Invariant_Call return Node_Id is\n+         Comp : Node_Id;\n+\n+      begin\n+         Comp :=\n+           Make_Indexed_Component (Loc,\n+             Prefix      => New_Occurrence_Of (Object_Entity, Loc),\n+                                   Expressions => Index_List);\n+         return\n+           Make_Procedure_Call_Statement (Loc,\n+             Name                   =>\n+               New_Occurrence_Of\n+                 (Invariant_Procedure (Component_Type (A_Type)), Loc),\n+             Parameter_Associations => New_List (Comp));\n+\n+      end Build_Component_Invariant_Call;\n+\n+      -------------------------\n+      -- Check_One_Dimension --\n+      -------------------------\n+\n+      function Check_One_Dimension (N : Int) return List_Id is\n+         Index : Entity_Id;\n+\n+      begin\n+         --  If all dimensions dealt with, we simply check invariant of\n+         --  the component\n+\n+         if N > Number_Dimensions (A_Type) then\n+            return New_List (Build_Component_Invariant_Call);\n+\n+         --  Else generate one loop and recurse\n+\n+         else\n+            Index :=\n+              Make_Defining_Identifier (Loc, New_External_Name ('J', N));\n+\n+            Append (New_Reference_To (Index, Loc), Index_List);\n+\n+            return New_List (\n+              Make_Implicit_Loop_Statement (Nod,\n+                Identifier => Empty,\n+                Iteration_Scheme =>\n+                  Make_Iteration_Scheme (Loc,\n+                    Loop_Parameter_Specification =>\n+                      Make_Loop_Parameter_Specification (Loc,\n+                        Defining_Identifier => Index,\n+                        Discrete_Subtype_Definition =>\n+                          Make_Attribute_Reference (Loc,\n+                            Prefix => New_Occurrence_Of (Object_Entity, Loc),\n+                            Attribute_Name  => Name_Range,\n+                            Expressions     => New_List (\n+                              Make_Integer_Literal (Loc, N))))),\n+                Statements =>  Check_One_Dimension (N + 1)));\n+         end if;\n+      end Check_One_Dimension;\n+\n+   --  Start of processing for Build_Array_Invariant_Proc\n+\n+   begin\n+      Index_List := New_List;\n+\n+      Proc_Id :=\n+        Make_Defining_Identifier (Loc,\n+           Chars => New_External_Name (Chars (A_Type), \"Invariant\"));\n+      Set_Has_Invariants (Proc_Id);\n+      Set_Invariant_Procedure (A_Type, Proc_Id);\n+\n+      Body_Stmts := Check_One_Dimension (1);\n+\n+      Proc_Body :=\n+        Make_Subprogram_Body (Loc,\n+          Specification =>\n+            Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name => Proc_Id,\n+              Parameter_Specifications => New_List (\n+                Make_Parameter_Specification (Loc,\n+                  Defining_Identifier => Object_Entity,\n+                  Parameter_Type      => New_Occurrence_Of (A_Type, Loc)))),\n+\n+          Declarations => New_List,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (Loc,\n+              Statements => Body_Stmts));\n+\n+      Set_Ekind          (Proc_Id, E_Procedure);\n+      Set_Is_Public      (Proc_Id, Is_Public (A_Type));\n+      Set_Is_Internal    (Proc_Id);\n+      Set_Has_Completion (Proc_Id);\n+\n+      if not Debug_Generated_Code then\n+         Set_Debug_Info_Off (Proc_Id);\n+      end if;\n+\n+      --  The procedure body is placed after the freeze node for the type.\n+\n+      Insert_After (Nod, Proc_Body);\n+      Analyze (Proc_Body);\n+   end Build_Array_Invariant_Proc;\n+\n    --------------------------------\n    -- Build_Discr_Checking_Funcs --\n    --------------------------------\n@@ -5513,6 +5647,10 @@ package body Exp_Ch3 is\n       then\n          Build_Array_Init_Proc (Base, N);\n       end if;\n+\n+      if Has_Invariants (Component_Type (Base)) then\n+         Build_Array_Invariant_Proc (Base, N);\n+      end if;\n    end Expand_Freeze_Array_Type;\n \n    -----------------------------------"}, {"sha": "1abc4567a330b0a4fe2bd86e886f2fd52b50b733", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,6 +46,12 @@ package Exp_Ch3 is\n    procedure Expand_Record_Extension (T : Entity_Id; Def : Node_Id);\n    --  Add a field _parent in the extension part of the record\n \n+   procedure Build_Array_Invariant_Proc (A_Type : Entity_Id; Nod : Node_Id);\n+   --  If the component of type of array type has invariants, build procedure\n+   --  that checks invariant on all components of the array. Ada 2012 specifies\n+   --  that an invariant on some type T must be applied to in-out parameters\n+   --  and return values that include a part of type T.\n+\n    procedure Build_Discr_Checking_Funcs (N : Node_Id);\n    --  Builds function which checks whether the component name is consistent\n    --  with the current discriminants. N is the full type declaration node,"}, {"sha": "d9bd91975fca2ef448cd779c20ea4b20ca0259d9", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -3860,11 +3860,19 @@ package body Freeze is\n                return Result;\n             end if;\n \n-            --  If the Class_Wide_Type is an Itype (when type is the anonymous\n-            --  parent of a derived type) and it is a library-level entity,\n-            --  generate an itype reference for it. Otherwise, its first\n-            --  explicit reference may be in an inner scope, which will be\n-            --  rejected by the back-end.\n+            --  The equivalent type associated with a class-wide subtype needs\n+            --  to be frozen to ensure that its layout is done.\n+\n+            if Ekind (E) = E_Class_Wide_Subtype\n+              and then Present (Equivalent_Type (E))\n+            then\n+               Freeze_And_Append (Equivalent_Type (E), N, Result);\n+            end if;\n+\n+            --  Generate an itype reference for a library-level class-wide type\n+            --  at the freeze point. Otherwise the first explicit reference to\n+            --  the type may appear in an inner scope which will be rejected by\n+            --  the back-end.\n \n             if Is_Itype (E)\n               and then Is_Compilation_Unit (Scope (E))\n@@ -3874,17 +3882,20 @@ package body Freeze is\n \n                begin\n                   Set_Itype (Ref, E);\n-                  Add_To_Result (Ref);\n-               end;\n-            end if;\n \n-            --  The equivalent type associated with a class-wide subtype needs\n-            --  to be frozen to ensure that its layout is done.\n+                  --  From a gigi point of view, a class-wide subtype derives\n+                  --  from its record equivalent type. As a result, the itype\n+                  --  reference must appear after the freeze node of the\n+                  --  equivalent type or gigi will reject the reference.\n \n-            if Ekind (E) = E_Class_Wide_Subtype\n-              and then Present (Equivalent_Type (E))\n-            then\n-               Freeze_And_Append (Equivalent_Type (E), N, Result);\n+                  if Ekind (E) = E_Class_Wide_Subtype\n+                    and then Present (Equivalent_Type (E))\n+                  then\n+                     Insert_After (Freeze_Node (Equivalent_Type (E)), Ref);\n+                  else\n+                     Add_To_Result (Ref);\n+                  end if;\n+               end;\n             end if;\n \n          --  For a record (sub)type, freeze all the component types (RM"}, {"sha": "95c391378ad3d6cbc17f31c0edb729d94466e880", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -668,8 +668,6 @@ package body GNAT.Debug_Pools is\n       --  terms of wasted memory). To do that, all we should have to do it to\n       --  set the size of this array to the page size. See mprotect().\n \n-      No_Element : constant Storage_Element := 0;\n-\n       Current : Byte_Count;\n       P       : Ptr;\n       Trace   : Traceback_Htable_Elem_Ptr;\n@@ -694,16 +692,15 @@ package body GNAT.Debug_Pools is\n       --  Use standard (i.e. through malloc) allocations. This automatically\n       --  raises Storage_Error if needed. We also try once more to physically\n       --  release memory, so that even marked blocks, in the advanced scanning,\n-      --  are freed. Initialize the storage array to avoid bogus warnings by\n-      --  valgrind.\n+      --  are freed.\n \n       begin\n-         P := new Local_Storage_Array'(others => No_Element);\n+         P := new Local_Storage_Array;\n \n       exception\n          when Storage_Error =>\n             Free_Physically (Pool);\n-            P := new Local_Storage_Array'(others => No_Element);\n+            P := new Local_Storage_Array;\n       end;\n \n       Storage_Address :="}, {"sha": "bf579f57da4ded8e909628f46209bc76da4e92bd", "filename": "gcc/ada/g-dirope.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fg-dirope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fg-dirope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -604,7 +604,6 @@ package body GNAT.Directory_Operations is\n \n    procedure Make_Dir (Dir_Name : Dir_Name_Str) is\n       C_Dir_Name : constant String := Dir_Name & ASCII.NUL;\n-\n    begin\n       if CRTL.mkdir (C_Dir_Name, Unspecified) /= 0 then\n          raise Directory_Error;"}, {"sha": "4cc6a4937b2b3758f5e1b2913a61880693555298", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -104,11 +104,6 @@ procedure Gnat1drv is\n    --  Called when we are not generating code, to check if -gnatR was requested\n    --  and if so, explain that we will not be honoring the request.\n \n-   procedure Check_Library_Items;\n-   --  For debugging -- checks the behavior of Walk_Library_Items\n-   pragma Warnings (Off, Check_Library_Items);\n-   --  In case the call below is commented out\n-\n    ----------------------------\n    -- Adjust_Global_Switches --\n    ----------------------------\n@@ -659,35 +654,6 @@ procedure Gnat1drv is\n       end if;\n    end Check_Bad_Body;\n \n-   -------------------------\n-   -- Check_Library_Items --\n-   -------------------------\n-\n-   --  Walk_Library_Items has plenty of assertions, so all we need to do is\n-   --  call it, just for these assertions, not actually doing anything else.\n-\n-   procedure Check_Library_Items is\n-\n-      procedure Action (Item : Node_Id);\n-      --  Action passed to Walk_Library_Items to do nothing\n-\n-      ------------\n-      -- Action --\n-      ------------\n-\n-      procedure Action (Item : Node_Id) is\n-      begin\n-         null;\n-      end Action;\n-\n-      procedure Walk is new Sem.Walk_Library_Items (Action);\n-\n-   --  Start of processing for Check_Library_Items\n-\n-   begin\n-      Walk;\n-   end Check_Library_Items;\n-\n    --------------------\n    -- Check_Rep_Info --\n    --------------------\n@@ -1136,14 +1102,6 @@ begin\n       Namet.Lock;\n       Stringt.Lock;\n \n-      --  ???Check_Library_Items under control of a debug flag, because it\n-      --  currently does not work if the -gnatn switch (back end inlining) is\n-      --  used.\n-\n-      if Debug_Flag_Dot_WW then\n-         Check_Library_Items;\n-      end if;\n-\n       --  Here we call the back end to generate the output code\n \n       Generating_Code := True;"}, {"sha": "71c075571db090c74970d5645c4210862c842da3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -4973,6 +4973,13 @@ package body Sem_Ch3 is\n            (\"the type of a component cannot be abstract\",\n             Subtype_Indication (Component_Def));\n       end if;\n+\n+      --  Ada 2012: if the element type has invariants we must create an\n+      --  invariant procedure for the array type as well.\n+\n+      if Has_Invariants (Element_Type) then\n+         Set_Has_Invariants (T);\n+      end if;\n    end Array_Type_Declaration;\n \n    ------------------------------------------------------"}, {"sha": "e6226833eb5636e74421383df9c27a1f43026d19", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673369608c82ea332809a5e5141b1ab659cb56d1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=673369608c82ea332809a5e5141b1ab659cb56d1", "patch": "@@ -7238,7 +7238,9 @@ package body Sem_Ch6 is\n          N1, N2 : Natural;\n \n       begin\n-         --  Remove trailing numeric parts\n+         --  Deal with special case where names are identical except for a\n+         --  numerical suffix. These are handled specially, taking the numeric\n+         --  ordering from the suffix into account.\n \n          L1 := S1'Last;\n          while S1 (L1) in '0' .. '9' loop\n@@ -7250,13 +7252,10 @@ package body Sem_Ch6 is\n             L2 := L2 - 1;\n          end loop;\n \n-         --  If non-numeric parts non-equal, that's decisive\n+         --  If non-numeric parts non-equal, do straight compare\n \n-         if S1 (S1'First .. L1) < S2 (S2'First .. L2) then\n-            return False;\n-\n-         elsif S1 (S1'First .. L1) > S2 (S2'First .. L2) then\n-            return True;\n+         if S1 (S1'First .. L1) /= S2 (S2'First .. L2) then\n+            return S1 > S2;\n \n          --  If non-numeric parts equal, compare suffixed numeric parts. Note\n          --  that a missing suffix is treated as numeric zero in this test."}]}