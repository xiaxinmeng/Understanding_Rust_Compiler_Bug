{"sha": "daf68dd71ff9dc5c3f97743d702204be6fe253ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmNjhkZDcxZmY5ZGM1YzNmOTc3NDNkNzAyMjA0YmU2ZmUyNTNhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-27T05:43:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-27T05:43:56Z"}, "message": "builtins.c (stabilize_va_list): Don't INDIRECT_REF through an ARRAY_TYPE.\n\n        * builtins.c (stabilize_va_list): Don't INDIRECT_REF through\n        an ARRAY_TYPE.\n        (std_expand_builtin_va_start): Back out one word if !stdarg_p.\n        (expand_builtin_va_end): Evaluate arg for side effects.\n        * c-common.c (c_common_nodes_and_builtins): Construct a\n        va_list_arg_type_node to handle array decomposition to pointer.\n\nFrom-SVN: r28283", "tree": {"sha": "b886fd4e7664e9eaa8f09a635e4f5c662edec2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b886fd4e7664e9eaa8f09a635e4f5c662edec2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daf68dd71ff9dc5c3f97743d702204be6fe253ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf68dd71ff9dc5c3f97743d702204be6fe253ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf68dd71ff9dc5c3f97743d702204be6fe253ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf68dd71ff9dc5c3f97743d702204be6fe253ae/comments", "author": null, "committer": null, "parents": [{"sha": "f654e526835767b05b3faa7464dd18abe50027a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f654e526835767b05b3faa7464dd18abe50027a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f654e526835767b05b3faa7464dd18abe50027a4"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "48610c366bf69239e17eeb94b7d34fccd64af067", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daf68dd71ff9dc5c3f97743d702204be6fe253ae", "patch": "@@ -1,3 +1,12 @@\n+Mon Jul 26 22:43:12 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (stabilize_va_list): Don't INDIRECT_REF through\n+\tan ARRAY_TYPE.\n+\t(std_expand_builtin_va_start): Back out one word if !stdarg_p.\n+\t(expand_builtin_va_end): Evaluate arg for side effects.\n+\t* c-common.c (c_common_nodes_and_builtins): Construct a\n+\tva_list_arg_type_node to handle array decomposition to pointer.\n+\n Mon Jul 26 18:51:34 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* except.c (start_dynamic_cleanup): Use force_operand on the"}, {"sha": "20c8f1c0ed7f4494e0fd345822958c65925b3d94", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=daf68dd71ff9dc5c3f97743d702204be6fe253ae", "patch": "@@ -1840,13 +1840,17 @@ stabilize_va_list (valist, was_ptr)\n       if (is_array\n \t  && TREE_CODE (valist) == ADDR_EXPR\n \t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (valist, 0))) == POINTER_TYPE)\n-\tvalist = TREE_OPERAND (valist, 0);\n-\n-      if (TREE_SIDE_EFFECTS (valist))\n-\tvalist = save_expr (valist);\n-\n-      if (! is_array)\n-        valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n+\t{\n+\t  valist = TREE_OPERAND (valist, 0);\n+\t  if (TREE_SIDE_EFFECTS (valist))\n+\t    valist = save_expr (valist);\n+\t}\n+      else\n+\t{\n+\t  if (TREE_SIDE_EFFECTS (valist))\n+\t    valist = save_expr (valist);\n+\t  valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n+\t}\n     }\n   else if (TREE_SIDE_EFFECTS (valist))\n     {\n@@ -1875,6 +1879,9 @@ std_expand_builtin_va_start (stdarg_p, valist, nextarg)\n {\n   tree t;\n \n+  if (!stdarg_p)\n+    nextarg = plus_constant (nextarg, -UNITS_PER_WORD);\n+\n   t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n \t     make_tree (ptr_type_node, nextarg));\n   TREE_SIDE_EFFECTS (t) = 1;\n@@ -2002,12 +2009,18 @@ expand_builtin_va_arg (valist, type)\n /* Expand ARGLIST, from a call to __builtin_va_end.  */\n static rtx\n expand_builtin_va_end (arglist)\n-     tree arglist ATTRIBUTE_UNUSED;\n+     tree arglist;\n {\n+  tree valist = TREE_VALUE (arglist);\n+\n #ifdef EXPAND_BUILTIN_VA_END\n-  tree valist = TREE_VALUE (arglist, 0);\n   valist = stabilize_va_list (valist, 0);\n   EXPAND_BUILTIN_VA_END(arglist);\n+#else\n+  /* Evaluate for side effects, if needed.  I hate macros that don't\n+     do that.  */\n+  if (TREE_SIDE_EFFECTS (valist))\n+    expand_expr (valist, const0_rtx, VOIDmode, EXPAND_NORMAL);\n #endif\n \n   return const0_rtx;"}, {"sha": "4c083de60f618a1bc203da82763400c79396ab0b", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf68dd71ff9dc5c3f97743d702204be6fe253ae/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=daf68dd71ff9dc5c3f97743d702204be6fe253ae", "patch": "@@ -3435,6 +3435,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n   tree va_list_ptr_type_node;\n+  tree va_list_arg_type_node;\n \n #ifdef BUILD_VA_LIST_TYPE\n   BUILD_VA_LIST_TYPE(va_list_type_node);\n@@ -3443,8 +3444,14 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n #endif\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n \t\t\tva_list_type_node));\n+\n   va_list_ptr_type_node = build_pointer_type (va_list_type_node);\n \n+  if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n+    va_list_arg_type_node = build_pointer_type (TREE_TYPE (va_list_type_node));\n+  else\n+    va_list_arg_type_node = va_list_type_node;\n+\n   endlink = void_list_node;\n   int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n   double_endlink = tree_cons (NULL_TREE, double_type_node, endlink);\n@@ -3636,7 +3643,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   builtin_function (\"__builtin_va_end\",\n \t\t    build_function_type (void_type_node,\n \t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_type_node,\n+\t\t\t\t\t\t    va_list_arg_type_node,\n \t\t\t\t\t\t    endlink)),\n \t\t    BUILT_IN_VA_END, NULL_PTR);\n \n@@ -3645,7 +3652,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t\t\t tree_cons (NULL_TREE,\n \t\t\t\t\t\t    va_list_ptr_type_node,\n \t\t\t\t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t\t\t      va_list_type_node,\n+\t\t\t\t\t\t      va_list_arg_type_node,\n \t\t\t\t\t\t      endlink))),\n \t\t    BUILT_IN_VA_COPY, NULL_PTR);\n "}]}