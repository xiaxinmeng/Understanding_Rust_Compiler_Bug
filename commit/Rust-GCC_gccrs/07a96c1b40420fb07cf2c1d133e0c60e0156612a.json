{"sha": "07a96c1b40420fb07cf2c1d133e0c60e0156612a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhOTZjMWI0MDQyMGZiMDdjZjJjMWQxMzNlMGM2MGUwMTU2NjEyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-06-09T21:37:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-09T21:37:03Z"}, "message": "New tests.\n\nFrom-SVN: r43111", "tree": {"sha": "54c79ecfa14d5de63577597ae7a2268eec7c77ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c79ecfa14d5de63577597ae7a2268eec7c77ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a96c1b40420fb07cf2c1d133e0c60e0156612a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a96c1b40420fb07cf2c1d133e0c60e0156612a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a96c1b40420fb07cf2c1d133e0c60e0156612a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a96c1b40420fb07cf2c1d133e0c60e0156612a/comments", "author": null, "committer": null, "parents": [{"sha": "ee92cb46db85822084b56c4aeda885345821fb69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee92cb46db85822084b56c4aeda885345821fb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee92cb46db85822084b56c4aeda885345821fb69"}], "stats": {"total": 783, "additions": 783, "deletions": 0}, "files": [{"sha": "7aebdb97f9d126f6e95a3e12b6bf9298645dd525", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07a96c1b40420fb07cf2c1d133e0c60e0156612a", "patch": "@@ -1,3 +1,9 @@\n+2001-06-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/ashrdi-1.c: New.\n+\t* gcc.c-torture/execute/ashldi-1.c: New.\n+\t* gcc.c-torture/execute/lshrdi-1.c: New.\n+\n 2001-06-09  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* objc/execute/load-3.m: Added. Check sending +load to categories,"}, {"sha": "66716972f48f782ebc62583040778f5bbe13980c", "filename": "gcc/testsuite/gcc.c-torture/execute/ashldi-1.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashldi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashldi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashldi-1.c?ref=07a96c1b40420fb07cf2c1d133e0c60e0156612a", "patch": "@@ -0,0 +1,221 @@\n+#include <limits.h>\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+#if __LONG_LONG_MAX__ == 9223372036854775807LL\n+#define BITS 64\n+\n+static unsigned long long const data[64] = {\n+  0x123456789abcdefULL,\n+  0x2468acf13579bdeULL,\n+  0x48d159e26af37bcULL,\n+  0x91a2b3c4d5e6f78ULL,\n+  0x123456789abcdef0ULL,\n+  0x2468acf13579bde0ULL,\n+  0x48d159e26af37bc0ULL,\n+  0x91a2b3c4d5e6f780ULL,\n+  0x23456789abcdef00ULL,\n+  0x468acf13579bde00ULL,\n+  0x8d159e26af37bc00ULL,\n+  0x1a2b3c4d5e6f7800ULL,\n+  0x3456789abcdef000ULL,\n+  0x68acf13579bde000ULL,\n+  0xd159e26af37bc000ULL,\n+  0xa2b3c4d5e6f78000ULL,\n+  0x456789abcdef0000ULL,\n+  0x8acf13579bde0000ULL,\n+  0x159e26af37bc0000ULL,\n+  0x2b3c4d5e6f780000ULL,\n+  0x56789abcdef00000ULL,\n+  0xacf13579bde00000ULL,\n+  0x59e26af37bc00000ULL,\n+  0xb3c4d5e6f7800000ULL,\n+  0x6789abcdef000000ULL,\n+  0xcf13579bde000000ULL,\n+  0x9e26af37bc000000ULL,\n+  0x3c4d5e6f78000000ULL,\n+  0x789abcdef0000000ULL,\n+  0xf13579bde0000000ULL,\n+  0xe26af37bc0000000ULL,\n+  0xc4d5e6f780000000ULL,\n+  0x89abcdef00000000ULL,\n+  0x13579bde00000000ULL,\n+  0x26af37bc00000000ULL,\n+  0x4d5e6f7800000000ULL,\n+  0x9abcdef000000000ULL,\n+  0x3579bde000000000ULL,\n+  0x6af37bc000000000ULL,\n+  0xd5e6f78000000000ULL,\n+  0xabcdef0000000000ULL,\n+  0x579bde0000000000ULL,\n+  0xaf37bc0000000000ULL,\n+  0x5e6f780000000000ULL,\n+  0xbcdef00000000000ULL,\n+  0x79bde00000000000ULL,\n+  0xf37bc00000000000ULL,\n+  0xe6f7800000000000ULL,\n+  0xcdef000000000000ULL,\n+  0x9bde000000000000ULL,\n+  0x37bc000000000000ULL,\n+  0x6f78000000000000ULL,\n+  0xdef0000000000000ULL,\n+  0xbde0000000000000ULL,\n+  0x7bc0000000000000ULL,\n+  0xf780000000000000ULL,\n+  0xef00000000000000ULL,\n+  0xde00000000000000ULL,\n+  0xbc00000000000000ULL,\n+  0x7800000000000000ULL,\n+  0xf000000000000000ULL,\n+  0xe000000000000000ULL,\n+  0xc000000000000000ULL,\n+  0x8000000000000000ULL\n+};\n+\n+#elif __LONG_LONG_MAX__ == 2147483647LL\n+#define BITS 32\n+\n+static unsigned long long const data[32] = {\n+  0x1234567fULL,\n+  0x2468acfeULL,\n+  0x48d159fcULL,\n+  0x91a2b3f8ULL,\n+  0x234567f0ULL,\n+  0x468acfe0ULL,\n+  0x8d159fc0ULL,\n+  0x1a2b3f80ULL,\n+  0x34567f00ULL,\n+  0x68acfe00ULL,\n+  0xd159fc00ULL,\n+  0xa2b3f800ULL,\n+  0x4567f000ULL,\n+  0x8acfe000ULL,\n+  0x159fc000ULL,\n+  0x2b3f8000ULL,\n+  0x567f0000ULL,\n+  0xacfe0000ULL,\n+  0x59fc0000ULL,\n+  0xb3f80000ULL,\n+  0x67f00000ULL,\n+  0xcfe00000ULL,\n+  0x9fc00000ULL,\n+  0x3f800000ULL,\n+  0x7f000000ULL,\n+  0xfe000000ULL,\n+  0xfc000000ULL,\n+  0xf8000000ULL,\n+  0xf0000000ULL,\n+  0xe0000000ULL,\n+  0xc0000000ULL,\n+  0x80000000ULL\n+};\n+\n+#else\n+#error \"Update the test case.\"\n+#endif\n+\n+static unsigned long long\n+variable_shift(unsigned long long x, int i)\n+{\n+  return x << i;\n+}\n+\n+static unsigned long long\n+constant_shift(unsigned long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0: x = x << 0; break;\n+    case 1: x = x << 1; break;\n+    case 2: x = x << 2; break;\n+    case 3: x = x << 3; break;\n+    case 4: x = x << 4; break;\n+    case 5: x = x << 5; break;\n+    case 6: x = x << 6; break;\n+    case 7: x = x << 7; break;\n+    case 8: x = x << 8; break;\n+    case 9: x = x << 9; break;\n+    case 10: x = x << 10; break;\n+    case 11: x = x << 11; break;\n+    case 12: x = x << 12; break;\n+    case 13: x = x << 13; break;\n+    case 14: x = x << 14; break;\n+    case 15: x = x << 15; break;\n+    case 16: x = x << 16; break;\n+    case 17: x = x << 17; break;\n+    case 18: x = x << 18; break;\n+    case 19: x = x << 19; break;\n+    case 20: x = x << 20; break;\n+    case 21: x = x << 21; break;\n+    case 22: x = x << 22; break;\n+    case 23: x = x << 23; break;\n+    case 24: x = x << 24; break;\n+    case 25: x = x << 25; break;\n+    case 26: x = x << 26; break;\n+    case 27: x = x << 27; break;\n+    case 28: x = x << 28; break;\n+    case 29: x = x << 29; break;\n+    case 30: x = x << 30; break;\n+    case 31: x = x << 31; break;\n+#if BITS > 32\n+    case 32: x = x << 32; break;\n+    case 33: x = x << 33; break;\n+    case 34: x = x << 34; break;\n+    case 35: x = x << 35; break;\n+    case 36: x = x << 36; break;\n+    case 37: x = x << 37; break;\n+    case 38: x = x << 38; break;\n+    case 39: x = x << 39; break;\n+    case 40: x = x << 40; break;\n+    case 41: x = x << 41; break;\n+    case 42: x = x << 42; break;\n+    case 43: x = x << 43; break;\n+    case 44: x = x << 44; break;\n+    case 45: x = x << 45; break;\n+    case 46: x = x << 46; break;\n+    case 47: x = x << 47; break;\n+    case 48: x = x << 48; break;\n+    case 49: x = x << 49; break;\n+    case 50: x = x << 50; break;\n+    case 51: x = x << 51; break;\n+    case 52: x = x << 52; break;\n+    case 53: x = x << 53; break;\n+    case 54: x = x << 54; break;\n+    case 55: x = x << 55; break;\n+    case 56: x = x << 56; break;\n+    case 57: x = x << 57; break;\n+    case 58: x = x << 58; break;\n+    case 59: x = x << 59; break;\n+    case 60: x = x << 60; break;\n+    case 61: x = x << 61; break;\n+    case 62: x = x << 62; break;\n+    case 63: x = x << 63; break;\n+#endif\n+\n+    default:\n+      abort ();\n+    }\n+  return x;\n+}\n+\n+int\n+main()\n+{\n+  int i;\n+\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      unsigned long long y = variable_shift (data[0], i);\n+      if (y != data[i])\n+\tabort ();\n+    }\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      unsigned long long y = constant_shift (data[0], i);\n+      if (y != data[i])\n+\tabort ();\n+    }\n+\n+  exit (0);\n+}"}, {"sha": "c032b0c18be04da35c29192058d2c71d3e2aef27", "filename": "gcc/testsuite/gcc.c-torture/execute/ashrdi-1.c", "status": "added", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashrdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashrdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fashrdi-1.c?ref=07a96c1b40420fb07cf2c1d133e0c60e0156612a", "patch": "@@ -0,0 +1,335 @@\n+#include <limits.h>\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+#if __LONG_LONG_MAX__ == 9223372036854775807LL\n+#define BITS 64\n+\n+static long long const zext[64] = {\n+  0x7654321fedcba980LL,\n+  0x3b2a190ff6e5d4c0LL,\n+  0x1d950c87fb72ea60LL,\n+  0xeca8643fdb97530LL,\n+  0x7654321fedcba98LL,\n+  0x3b2a190ff6e5d4cLL,\n+  0x1d950c87fb72ea6LL,\n+  0xeca8643fdb9753LL,\n+  0x7654321fedcba9LL,\n+  0x3b2a190ff6e5d4LL,\n+  0x1d950c87fb72eaLL,\n+  0xeca8643fdb975LL,\n+  0x7654321fedcbaLL,\n+  0x3b2a190ff6e5dLL,\n+  0x1d950c87fb72eLL,\n+  0xeca8643fdb97LL,\n+  0x7654321fedcbLL,\n+  0x3b2a190ff6e5LL,\n+  0x1d950c87fb72LL,\n+  0xeca8643fdb9LL,\n+  0x7654321fedcLL,\n+  0x3b2a190ff6eLL,\n+  0x1d950c87fb7LL,\n+  0xeca8643fdbLL,\n+  0x7654321fedLL,\n+  0x3b2a190ff6LL,\n+  0x1d950c87fbLL,\n+  0xeca8643fdLL,\n+  0x7654321feLL,\n+  0x3b2a190ffLL,\n+  0x1d950c87fLL,\n+  0xeca8643fLL,\n+  0x7654321fLL,\n+  0x3b2a190fLL,\n+  0x1d950c87LL,\n+  0xeca8643LL,\n+  0x7654321LL,\n+  0x3b2a190LL,\n+  0x1d950c8LL,\n+  0xeca864LL,\n+  0x765432LL,\n+  0x3b2a19LL,\n+  0x1d950cLL,\n+  0xeca86LL,\n+  0x76543LL,\n+  0x3b2a1LL,\n+  0x1d950LL,\n+  0xeca8LL,\n+  0x7654LL,\n+  0x3b2aLL,\n+  0x1d95LL,\n+  0xecaLL,\n+  0x765LL,\n+  0x3b2LL,\n+  0x1d9LL,\n+  0xecLL,\n+  0x76LL,\n+  0x3bLL,\n+  0x1dLL,\n+  0xeLL,\n+  0x7LL,\n+  0x3LL,\n+  0x1LL,\n+  0LL\n+};\n+\n+static long long const sext[64] = {\n+  0x8edcba9f76543210LL,\n+  0xc76e5d4fbb2a1908LL,\n+  0xe3b72ea7dd950c84LL,\n+  0xf1db9753eeca8642LL,\n+  0xf8edcba9f7654321LL,\n+  0xfc76e5d4fbb2a190LL,\n+  0xfe3b72ea7dd950c8LL,\n+  0xff1db9753eeca864LL,\n+  0xff8edcba9f765432LL,\n+  0xffc76e5d4fbb2a19LL,\n+  0xffe3b72ea7dd950cLL,\n+  0xfff1db9753eeca86LL,\n+  0xfff8edcba9f76543LL,\n+  0xfffc76e5d4fbb2a1LL,\n+  0xfffe3b72ea7dd950LL,\n+  0xffff1db9753eeca8LL,\n+  0xffff8edcba9f7654LL,\n+  0xffffc76e5d4fbb2aLL,\n+  0xffffe3b72ea7dd95LL,\n+  0xfffff1db9753eecaLL,\n+  0xfffff8edcba9f765LL,\n+  0xfffffc76e5d4fbb2LL,\n+  0xfffffe3b72ea7dd9LL,\n+  0xffffff1db9753eecLL,\n+  0xffffff8edcba9f76LL,\n+  0xffffffc76e5d4fbbLL,\n+  0xffffffe3b72ea7ddLL,\n+  0xfffffff1db9753eeLL,\n+  0xfffffff8edcba9f7LL,\n+  0xfffffffc76e5d4fbLL,\n+  0xfffffffe3b72ea7dLL,\n+  0xffffffff1db9753eLL,\n+  0xffffffff8edcba9fLL,\n+  0xffffffffc76e5d4fLL,\n+  0xffffffffe3b72ea7LL,\n+  0xfffffffff1db9753LL,\n+  0xfffffffff8edcba9LL,\n+  0xfffffffffc76e5d4LL,\n+  0xfffffffffe3b72eaLL,\n+  0xffffffffff1db975LL,\n+  0xffffffffff8edcbaLL,\n+  0xffffffffffc76e5dLL,\n+  0xffffffffffe3b72eLL,\n+  0xfffffffffff1db97LL,\n+  0xfffffffffff8edcbLL,\n+  0xfffffffffffc76e5LL,\n+  0xfffffffffffe3b72LL,\n+  0xffffffffffff1db9LL,\n+  0xffffffffffff8edcLL,\n+  0xffffffffffffc76eLL,\n+  0xffffffffffffe3b7LL,\n+  0xfffffffffffff1dbLL,\n+  0xfffffffffffff8edLL,\n+  0xfffffffffffffc76LL,\n+  0xfffffffffffffe3bLL,\n+  0xffffffffffffff1dLL,\n+  0xffffffffffffff8eLL,\n+  0xffffffffffffffc7LL,\n+  0xffffffffffffffe3LL,\n+  0xfffffffffffffff1LL,\n+  0xfffffffffffffff8LL,\n+  0xfffffffffffffffcLL,\n+  0xfffffffffffffffeLL,\n+  0xffffffffffffffffLL\n+};\n+\n+#elif __LONG_LONG_MAX__ == 2147483647LL\n+#define BITS 32\n+\n+static long long const zext[32] = {\n+  0x76543218LL,\n+  0x3b2a190cLL,\n+  0x1d950c86LL,\n+  0xeca8643LL,\n+  0x7654321LL,\n+  0x3b2a190LL,\n+  0x1d950c8LL,\n+  0xeca864LL,\n+  0x765432LL,\n+  0x3b2a19LL,\n+  0x1d950cLL,\n+  0xeca86LL,\n+  0x76543LL,\n+  0x3b2a1LL,\n+  0x1d950LL,\n+  0xeca8LL,\n+  0x7654LL,\n+  0x3b2aLL,\n+  0x1d95LL,\n+  0xecaLL,\n+  0x765LL,\n+  0x3b2LL,\n+  0x1d9LL,\n+  0xecLL,\n+  0x76LL,\n+  0x3bLL,\n+  0x1dLL,\n+  0xeLL,\n+  0x7LL,\n+  0x3LL,\n+  0x1LL,\n+  0LL\n+};\n+\n+static long long const sext[64] = {\n+  0x87654321LL,\n+  0xc3b2a190LL,\n+  0xe1d950c8LL,\n+  0xf0eca864LL,\n+  0xf8765432LL,\n+  0xfc3b2a19LL,\n+  0xfe1d950cLL,\n+  0xff0eca86LL,\n+  0xff876543LL,\n+  0xffc3b2a1LL,\n+  0xffe1d950LL,\n+  0xfff0eca8LL,\n+  0xfff87654LL,\n+  0xfffc3b2aLL,\n+  0xfffe1d95LL,\n+  0xffff0ecaLL,\n+  0xffff8765LL,\n+  0xffffc3b2LL,\n+  0xffffe1d9LL,\n+  0xfffff0ecLL,\n+  0xfffff876LL,\n+  0xfffffc3bLL,\n+  0xfffffe1dLL,\n+  0xffffff0eLL,\n+  0xffffff87LL,\n+  0xffffffc3LL,\n+  0xffffffe1LL,\n+  0xfffffff0LL,\n+  0xfffffff8LL,\n+  0xfffffffcLL,\n+  0xfffffffeLL,\n+  0xffffffffLL\n+};\n+\n+#else\n+#error \"Update the test case.\"\n+#endif\n+\n+static long long\n+variable_shift(long long x, int i)\n+{\n+  return x >> i;\n+}\n+\n+static long long\n+constant_shift(long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0: x = x >> 0; break;\n+    case 1: x = x >> 1; break;\n+    case 2: x = x >> 2; break;\n+    case 3: x = x >> 3; break;\n+    case 4: x = x >> 4; break;\n+    case 5: x = x >> 5; break;\n+    case 6: x = x >> 6; break;\n+    case 7: x = x >> 7; break;\n+    case 8: x = x >> 8; break;\n+    case 9: x = x >> 9; break;\n+    case 10: x = x >> 10; break;\n+    case 11: x = x >> 11; break;\n+    case 12: x = x >> 12; break;\n+    case 13: x = x >> 13; break;\n+    case 14: x = x >> 14; break;\n+    case 15: x = x >> 15; break;\n+    case 16: x = x >> 16; break;\n+    case 17: x = x >> 17; break;\n+    case 18: x = x >> 18; break;\n+    case 19: x = x >> 19; break;\n+    case 20: x = x >> 20; break;\n+    case 21: x = x >> 21; break;\n+    case 22: x = x >> 22; break;\n+    case 23: x = x >> 23; break;\n+    case 24: x = x >> 24; break;\n+    case 25: x = x >> 25; break;\n+    case 26: x = x >> 26; break;\n+    case 27: x = x >> 27; break;\n+    case 28: x = x >> 28; break;\n+    case 29: x = x >> 29; break;\n+    case 30: x = x >> 30; break;\n+    case 31: x = x >> 31; break;\n+#if BITS > 32\n+    case 32: x = x >> 32; break;\n+    case 33: x = x >> 33; break;\n+    case 34: x = x >> 34; break;\n+    case 35: x = x >> 35; break;\n+    case 36: x = x >> 36; break;\n+    case 37: x = x >> 37; break;\n+    case 38: x = x >> 38; break;\n+    case 39: x = x >> 39; break;\n+    case 40: x = x >> 40; break;\n+    case 41: x = x >> 41; break;\n+    case 42: x = x >> 42; break;\n+    case 43: x = x >> 43; break;\n+    case 44: x = x >> 44; break;\n+    case 45: x = x >> 45; break;\n+    case 46: x = x >> 46; break;\n+    case 47: x = x >> 47; break;\n+    case 48: x = x >> 48; break;\n+    case 49: x = x >> 49; break;\n+    case 50: x = x >> 50; break;\n+    case 51: x = x >> 51; break;\n+    case 52: x = x >> 52; break;\n+    case 53: x = x >> 53; break;\n+    case 54: x = x >> 54; break;\n+    case 55: x = x >> 55; break;\n+    case 56: x = x >> 56; break;\n+    case 57: x = x >> 57; break;\n+    case 58: x = x >> 58; break;\n+    case 59: x = x >> 59; break;\n+    case 60: x = x >> 60; break;\n+    case 61: x = x >> 61; break;\n+    case 62: x = x >> 62; break;\n+    case 63: x = x >> 63; break;\n+#endif\n+\n+    default:\n+      abort ();\n+    }\n+  return x;\n+}\n+\n+int\n+main()\n+{\n+  int i;\n+\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      long long y = variable_shift (zext[0], i);\n+      if (y != zext[i])\n+\tabort ();\n+    }\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      long long y = variable_shift (sext[0], i);\n+      if (y != sext[i])\n+\tabort ();\n+    }\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      long long y = constant_shift (zext[0], i);\n+      if (y != zext[i])\n+\tabort ();\n+    }\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      long long y = constant_shift (sext[0], i);\n+      if (y != sext[i])\n+\tabort ();\n+    }\n+\n+  exit (0);\n+}"}, {"sha": "df53f8bd856c871415dd2471b125e4973d0a9019", "filename": "gcc/testsuite/gcc.c-torture/execute/lshrdi-1.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Flshrdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a96c1b40420fb07cf2c1d133e0c60e0156612a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Flshrdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Flshrdi-1.c?ref=07a96c1b40420fb07cf2c1d133e0c60e0156612a", "patch": "@@ -0,0 +1,221 @@\n+#include <limits.h>\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+#if __LONG_LONG_MAX__ == 9223372036854775807LL\n+#define BITS 64\n+\n+static unsigned long long const zext[64] = {\n+  0x87654321fedcba90ULL,\n+  0x43b2a190ff6e5d48ULL,\n+  0x21d950c87fb72ea4ULL,\n+  0x10eca8643fdb9752ULL,\n+  0x87654321fedcba9ULL,\n+  0x43b2a190ff6e5d4ULL,\n+  0x21d950c87fb72eaULL,\n+  0x10eca8643fdb975ULL,\n+  0x87654321fedcbaULL,\n+  0x43b2a190ff6e5dULL,\n+  0x21d950c87fb72eULL,\n+  0x10eca8643fdb97ULL,\n+  0x87654321fedcbULL,\n+  0x43b2a190ff6e5ULL,\n+  0x21d950c87fb72ULL,\n+  0x10eca8643fdb9ULL,\n+  0x87654321fedcULL,\n+  0x43b2a190ff6eULL,\n+  0x21d950c87fb7ULL,\n+  0x10eca8643fdbULL,\n+  0x87654321fedULL,\n+  0x43b2a190ff6ULL,\n+  0x21d950c87fbULL,\n+  0x10eca8643fdULL,\n+  0x87654321feULL,\n+  0x43b2a190ffULL,\n+  0x21d950c87fULL,\n+  0x10eca8643fULL,\n+  0x87654321fULL,\n+  0x43b2a190fULL,\n+  0x21d950c87ULL,\n+  0x10eca8643ULL,\n+  0x87654321ULL,\n+  0x43b2a190ULL,\n+  0x21d950c8ULL,\n+  0x10eca864ULL,\n+  0x8765432ULL,\n+  0x43b2a19ULL,\n+  0x21d950cULL,\n+  0x10eca86ULL,\n+  0x876543ULL,\n+  0x43b2a1ULL,\n+  0x21d950ULL,\n+  0x10eca8ULL,\n+  0x87654ULL,\n+  0x43b2aULL,\n+  0x21d95ULL,\n+  0x10ecaULL,\n+  0x8765ULL,\n+  0x43b2ULL,\n+  0x21d9ULL,\n+  0x10ecULL,\n+  0x876ULL,\n+  0x43bULL,\n+  0x21dULL,\n+  0x10eULL,\n+  0x87ULL,\n+  0x43ULL,\n+  0x21ULL,\n+  0x10ULL,\n+  0x8ULL,\n+  0x4ULL,\n+  0x2ULL,\n+  0x1ULL\n+};\n+\n+#elif __LONG_LONG_MAX__ == 2147483647LL\n+#define BITS 32\n+\n+static unsigned long long const zext[32] = {\n+  0x87654321ULL,\n+  0x43b2a190ULL,\n+  0x21d950c8ULL,\n+  0x10eca864ULL,\n+  0x8765432ULL,\n+  0x43b2a19ULL,\n+  0x21d950cULL,\n+  0x10eca86ULL,\n+  0x876543ULL,\n+  0x43b2a1ULL,\n+  0x21d950ULL,\n+  0x10eca8ULL,\n+  0x87654ULL,\n+  0x43b2aULL,\n+  0x21d95ULL,\n+  0x10ecaULL,\n+  0x8765ULL,\n+  0x43b2ULL,\n+  0x21d9ULL,\n+  0x10ecULL,\n+  0x876ULL,\n+  0x43bULL,\n+  0x21dULL,\n+  0x10eULL,\n+  0x87ULL,\n+  0x43ULL,\n+  0x21ULL,\n+  0x10ULL,\n+  0x8ULL,\n+  0x4ULL,\n+  0x2ULL,\n+  0x1ULL,\n+};\n+\n+#else\n+#error \"Update the test case.\"\n+#endif\n+\n+static unsigned long long\n+variable_shift(unsigned long long x, int i)\n+{\n+  return x >> i;\n+}\n+\n+static unsigned long long\n+constant_shift(unsigned long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 0: x = x >> 0; break;\n+    case 1: x = x >> 1; break;\n+    case 2: x = x >> 2; break;\n+    case 3: x = x >> 3; break;\n+    case 4: x = x >> 4; break;\n+    case 5: x = x >> 5; break;\n+    case 6: x = x >> 6; break;\n+    case 7: x = x >> 7; break;\n+    case 8: x = x >> 8; break;\n+    case 9: x = x >> 9; break;\n+    case 10: x = x >> 10; break;\n+    case 11: x = x >> 11; break;\n+    case 12: x = x >> 12; break;\n+    case 13: x = x >> 13; break;\n+    case 14: x = x >> 14; break;\n+    case 15: x = x >> 15; break;\n+    case 16: x = x >> 16; break;\n+    case 17: x = x >> 17; break;\n+    case 18: x = x >> 18; break;\n+    case 19: x = x >> 19; break;\n+    case 20: x = x >> 20; break;\n+    case 21: x = x >> 21; break;\n+    case 22: x = x >> 22; break;\n+    case 23: x = x >> 23; break;\n+    case 24: x = x >> 24; break;\n+    case 25: x = x >> 25; break;\n+    case 26: x = x >> 26; break;\n+    case 27: x = x >> 27; break;\n+    case 28: x = x >> 28; break;\n+    case 29: x = x >> 29; break;\n+    case 30: x = x >> 30; break;\n+    case 31: x = x >> 31; break;\n+#if BITS > 32\n+    case 32: x = x >> 32; break;\n+    case 33: x = x >> 33; break;\n+    case 34: x = x >> 34; break;\n+    case 35: x = x >> 35; break;\n+    case 36: x = x >> 36; break;\n+    case 37: x = x >> 37; break;\n+    case 38: x = x >> 38; break;\n+    case 39: x = x >> 39; break;\n+    case 40: x = x >> 40; break;\n+    case 41: x = x >> 41; break;\n+    case 42: x = x >> 42; break;\n+    case 43: x = x >> 43; break;\n+    case 44: x = x >> 44; break;\n+    case 45: x = x >> 45; break;\n+    case 46: x = x >> 46; break;\n+    case 47: x = x >> 47; break;\n+    case 48: x = x >> 48; break;\n+    case 49: x = x >> 49; break;\n+    case 50: x = x >> 50; break;\n+    case 51: x = x >> 51; break;\n+    case 52: x = x >> 52; break;\n+    case 53: x = x >> 53; break;\n+    case 54: x = x >> 54; break;\n+    case 55: x = x >> 55; break;\n+    case 56: x = x >> 56; break;\n+    case 57: x = x >> 57; break;\n+    case 58: x = x >> 58; break;\n+    case 59: x = x >> 59; break;\n+    case 60: x = x >> 60; break;\n+    case 61: x = x >> 61; break;\n+    case 62: x = x >> 62; break;\n+    case 63: x = x >> 63; break;\n+#endif\n+\n+    default:\n+      abort ();\n+    }\n+  return x;\n+}\n+\n+int\n+main()\n+{\n+  int i;\n+\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      unsigned long long y = variable_shift (zext[0], i);\n+      if (y != zext[i])\n+\tabort ();\n+    }\n+  for (i = 0; i < BITS; ++i)\n+    {\n+      unsigned long long y = constant_shift (zext[0], i);\n+      if (y != zext[i])\n+\tabort ();\n+    }\n+\n+  exit (0);\n+}"}]}