{"sha": "412f61f0f6ee495f3dd076debd9db536aa386a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyZjYxZjBmNmVlNDk1ZjNkZDA3NmRlYmQ5ZGI1MzZhYTM4NmEyNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-04-24T19:12:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-04-24T19:12:52Z"}, "message": "Fix location of sizeof/alignof (PR c++/80016)\n\nPR c++/80016 reports an issue with bizarre underlined range\nfor a complicated expression.\n\nThe root cause for the incorrect *starting* location of that range\nis that alignof and sizeof expressions currently have\nstart == finish == caret at the opening parenthesis of the\nexpression.\n\nThis patch fixes this by generating appropriate start and finish\nlocations for alignof and sizeof expressions.\n\ngcc/cp/ChangeLog:\n\tPR c++/80016\n\t* parser.c (cp_parser_unary_expression):  Generate a location\n\trange for alignof and sizeof expressions.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/80016\n\t* g++.dg/plugin/diagnostic-test-expressions-1.C (test_sizeof): New\n\ttest function.\n\t(test_alignof): New test function.\n\nFrom-SVN: r247108", "tree": {"sha": "c526d0dafa94cbbde49da875a81aa5371bb35d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c526d0dafa94cbbde49da875a81aa5371bb35d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/412f61f0f6ee495f3dd076debd9db536aa386a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412f61f0f6ee495f3dd076debd9db536aa386a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412f61f0f6ee495f3dd076debd9db536aa386a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412f61f0f6ee495f3dd076debd9db536aa386a26/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8492d5ec1d8b90930a7dca04a104bcaec62d035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8492d5ec1d8b90930a7dca04a104bcaec62d035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8492d5ec1d8b90930a7dca04a104bcaec62d035"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "97bf27ffc8f429ca931697e86015017319ee84f7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=412f61f0f6ee495f3dd076debd9db536aa386a26", "patch": "@@ -1,3 +1,9 @@\n+2017-04-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80016\n+\t* parser.c (cp_parser_unary_expression):  Generate a location\n+\trange for alignof and sizeof expressions.\n+\n 2017-04-24  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* parser.c (cp_parser_cv_qualifier_seq_opt): Add fix-it info to"}, {"sha": "3a0e0cb050fcf37b1760f8f2c61e7df8aac7cac1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=412f61f0f6ee495f3dd076debd9db536aa386a26", "patch": "@@ -7805,12 +7805,11 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t  {\n \t    tree operand, ret;\n \t    enum tree_code op;\n-\t    location_t first_loc;\n+\t    location_t start_loc = token->location;\n \n \t    op = keyword == RID_ALIGNOF ? ALIGNOF_EXPR : SIZEOF_EXPR;\n \t    /* Consume the token.  */\n \t    cp_lexer_consume_token (parser->lexer);\n-\t    first_loc = cp_lexer_peek_token (parser->lexer)->location;\n \t    /* Parse the operand.  */\n \t    operand = cp_parser_sizeof_operand (parser, keyword);\n \n@@ -7846,9 +7845,21 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t\t    TREE_SIDE_EFFECTS (ret) = 0;\n \t\t    TREE_READONLY (ret) = 1;\n \t\t  }\n-\t\tSET_EXPR_LOCATION (ret, first_loc);\n \t      }\n-\t    return ret;\n+\n+\t    /* Construct a location e.g. :\n+\t       alignof (expr)\n+\t       ^~~~~~~~~~~~~~\n+\t       with start == caret at the start of the \"alignof\"/\"sizeof\"\n+\t       token, with the endpoint at the final closing paren.  */\n+\t    location_t finish_loc\n+\t      = cp_lexer_previous_token (parser->lexer)->location;\n+\t    location_t compound_loc\n+\t      = make_location (start_loc, start_loc, finish_loc);\n+\n+\t    cp_expr ret_expr (ret);\n+\t    ret_expr.set_location (compound_loc);\n+\t    return ret_expr;\n \t  }\n \n \tcase RID_NEW:"}, {"sha": "a8381fa65415a352ef7586d94ac280706ef0ea6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=412f61f0f6ee495f3dd076debd9db536aa386a26", "patch": "@@ -1,3 +1,10 @@\n+2017-04-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80016\n+\t* g++.dg/plugin/diagnostic-test-expressions-1.C (test_sizeof): New\n+\ttest function.\n+\t(test_alignof): New test function.\n+\n 2017-04-24  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/cmpexactdiv-2.c: New file."}, {"sha": "2c004f306206f763824d34050f73621cf5b612a8", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-expressions-1.C", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f61f0f6ee495f3dd076debd9db536aa386a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C?ref=412f61f0f6ee495f3dd076debd9db536aa386a26", "patch": "@@ -101,6 +101,72 @@ int test_postfix_incdec (int i)\n \n /* Unary operators.  ****************************************************/\n \n+int test_sizeof (int i)\n+{\n+  __emit_expression_range (0, sizeof(int) + i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, sizeof(int) + i);\n+                               ~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, i + sizeof(int)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, i + sizeof(int));\n+                               ~~^~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, sizeof i + i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, sizeof i + i);\n+                               ~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, i + sizeof i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, i + sizeof i);\n+                               ~~^~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+int test_alignof (int i)\n+{\n+  __emit_expression_range (0, alignof(int) + i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, alignof(int) + i);\n+                               ~~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, i + alignof(int)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, i + alignof(int));\n+                               ~~^~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, __alignof__(int) + i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, __alignof__(int) + i);\n+                               ~~~~~~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, i + __alignof__(int)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, i + __alignof__(int));\n+                               ~~^~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, __alignof__ i + i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, __alignof__ i + i);\n+                               ~~~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, i + __alignof__ i); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, i + __alignof__ i);\n+                               ~~^~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n int test_prefix_incdec (int i)\n {\n   __emit_expression_range (0, ++i ); /* { dg-warning \"range\" } */"}]}