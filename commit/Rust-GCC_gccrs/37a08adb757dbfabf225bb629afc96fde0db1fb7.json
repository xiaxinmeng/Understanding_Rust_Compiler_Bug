{"sha": "37a08adb757dbfabf225bb629afc96fde0db1fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhMDhhZGI3NTdkYmZhYmYyMjViYjYyOWFmYzk2ZmRlMGRiMWZiNw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-26T14:43:29Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-26T14:43:29Z"}, "message": "typeck.c (convert_ieee_real_to_integer): Use save_expr instead of explicit build_decl.\n\n\ufffd\n\t* typeck.c (convert_ieee_real_to_integer):  Use save_expr instead of\n\texplicit build_decl.  (Avoids crash in reload when optimizing.)\n\t* decl.c (complete_start_java_method):  Handle synchronized method\n\teven when compiling from bytecode.\n\nFrom-SVN: r25468", "tree": {"sha": "d1672b77d7831b7027985fb73c211cea5e77f678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1672b77d7831b7027985fb73c211cea5e77f678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a08adb757dbfabf225bb629afc96fde0db1fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a08adb757dbfabf225bb629afc96fde0db1fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a08adb757dbfabf225bb629afc96fde0db1fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a08adb757dbfabf225bb629afc96fde0db1fb7/comments", "author": null, "committer": null, "parents": [{"sha": "686fb236788dd10e553cc60c807067a24542232a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686fb236788dd10e553cc60c807067a24542232a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686fb236788dd10e553cc60c807067a24542232a"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "707fa3c9dc309ea4b1e31c412ab39c176d03b246", "filename": "gcc/java/decl.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a08adb757dbfabf225bb629afc96fde0db1fb7/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a08adb757dbfabf225bb629afc96fde0db1fb7/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=37a08adb757dbfabf225bb629afc96fde0db1fb7", "patch": "@@ -1514,37 +1514,44 @@ complete_start_java_method (fndecl)\n       expand_expr_stmt (init);\n     }\n \n-  if (METHOD_SYNCHRONIZED (fndecl) && ! flag_emit_class_files\n-      && DECL_FUNCTION_BODY (fndecl) != NULL_TREE)\n+  /* Push local variables. Function compiled from source code are\n+     using a different local variables management, and for them,\n+     pushlevel shouldn't be called from here.  */\n+  if (!CLASS_FROM_SOURCE_P (DECL_CONTEXT (fndecl)))\n+    {\n+      pushlevel (2);\n+      if (! flag_emit_class_files)\n+\texpand_start_bindings (1);\n+    }\n+\n+  if (METHOD_SYNCHRONIZED (fndecl) && ! flag_emit_class_files)\n     {\n       /* Warp function body with a monitorenter plus monitorexit cleanup. */\n-      tree function_body = DECL_FUNCTION_BODY (fndecl);\n-      tree body = BLOCK_EXPR_BODY (function_body);\n       tree enter, exit, lock;\n       if (METHOD_STATIC (fndecl))\n \tlock = build_class_ref (DECL_CONTEXT (fndecl));\n       else\n \tlock = DECL_ARGUMENTS (fndecl);\n       BUILD_MONITOR_ENTER (enter, lock);\n       BUILD_MONITOR_EXIT (exit, lock);\n-      lock = build (WITH_CLEANUP_EXPR, void_type_node,\n-\t\t    enter,  NULL_TREE, exit);\n-      TREE_SIDE_EFFECTS (lock) = 1;\n-      lock = build (COMPOUND_EXPR, TREE_TYPE (body), lock, body);\n-      TREE_SIDE_EFFECTS (lock) = 1;\n-      lock = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (body), lock);\n-      TREE_SIDE_EFFECTS (lock) = 1;\n-      BLOCK_EXPR_BODY (function_body) = lock;\n-    }\n-\n-  /* Push local variables. Function compiled from source code are\n-     using a different local variables management, and for them,\n-     pushlevel shouldn't be called from here.  */\n-  if (!CLASS_FROM_SOURCE_P (DECL_CONTEXT (fndecl)))\n-    {\n-      pushlevel (2);\n-      if (! flag_emit_class_files)\n-\texpand_start_bindings (1);\n+      if (!CLASS_FROM_SOURCE_P (DECL_CONTEXT (fndecl)))\n+\t{\n+\t  expand_expr_stmt (enter);\n+\t  expand_decl_cleanup (NULL_TREE, exit);\n+\t}\n+      else\n+\t{\n+\t  tree function_body = DECL_FUNCTION_BODY (fndecl);\n+\t  tree body = BLOCK_EXPR_BODY (function_body);\n+\t  lock = build (WITH_CLEANUP_EXPR, void_type_node,\n+\t\t\tenter,  NULL_TREE, exit);\n+\t  TREE_SIDE_EFFECTS (lock) = 1;\n+\t  lock = build (COMPOUND_EXPR, TREE_TYPE (body), lock, body);\n+\t  TREE_SIDE_EFFECTS (lock) = 1;\n+\t  lock = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (body), lock);\n+\t  TREE_SIDE_EFFECTS (lock) = 1;\n+\t  BLOCK_EXPR_BODY (function_body) = lock;\n+\t}\n     }\n }\n "}, {"sha": "1d544e66ad402a55d8e84dfdca1393c1d29f6623", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a08adb757dbfabf225bb629afc96fde0db1fb7/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a08adb757dbfabf225bb629afc96fde0db1fb7/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=37a08adb757dbfabf225bb629afc96fde0db1fb7", "patch": "@@ -67,23 +67,12 @@ convert_ieee_real_to_integer (type, expr)\n      tree type, expr;\n {\n   tree node, assignment, expr_decl;\n+  expr = save_expr (expr);\n \n-  expr_decl = build_decl (VAR_DECL, generate_name (), TREE_TYPE (expr));\n-  layout_decl (expr_decl, 0);\n-  expand_decl (pushdecl (expr_decl));\n-  assignment = build (MODIFY_EXPR, NULL_TREE, expr_decl, expr);\n-  TREE_SIDE_EFFECTS (assignment) = 1;\n-  TREE_TYPE (assignment) = type;\n-\n-  expr = build (COMPOUND_EXPR, NULL_TREE,\n-\t\tassignment,\n-\t\tbuild (COND_EXPR, type, \n-\t\t       build (NE_EXPR, boolean_type_node, expr_decl, expr_decl),\n-\t\t       build_int_2 (0, 0),\n-\t\t       convert_to_integer (type, expr_decl)));\n-\n-  TREE_TYPE (expr) = type;\n-  return expr;\n+  return build (COND_EXPR, type, \n+\t\tbuild (NE_EXPR, boolean_type_node, expr, expr),\n+\t\tconvert (type, integer_zero_node),\n+\t\tconvert_to_integer (type, expr));\n }  \n \n /* Create an expression whose value is that of EXPR,"}]}