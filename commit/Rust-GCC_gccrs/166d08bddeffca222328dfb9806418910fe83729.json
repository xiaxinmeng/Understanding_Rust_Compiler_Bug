{"sha": "166d08bddeffca222328dfb9806418910fe83729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2ZDA4YmRkZWZmY2EyMjIzMjhkZmI5ODA2NDE4OTEwZmU4MzcyOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-01T08:40:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-01T08:40:53Z"}, "message": "trans-expr.c (gfc_conv_power_op): Handle floating-point types other than long double.\n\n\t* trans-expr.c (gfc_conv_power_op): Handle floating-point types\n\tother than long double.\n\t* mathbuiltins.def: Add builtins from the POW and CPOW family.\n\t* trans.h (gfc_builtin_decl_for_float_kind): New prototype.\n\t* trans-intrinsic.c (gfc_builtin_decl_for_float_kind): Add gfc_\n\tprefix to function name.\n\t(gfc_build_intrinsic_lib_fndecls): Add cpow prototype.\n\t(gfc_conv_intrinsic_aint): Use gfc_builtin_decl_for_float_kind\n\tfunction name.\n\t(gfc_conv_intrinsic_exponent): Likewise.\n\t(gfc_conv_intrinsic_abs): Likewise.\n\t(gfc_conv_intrinsic_mod): Likewise.\n\t(gfc_conv_intrinsic_sign): Likewise.\n\t(gfc_conv_intrinsic_arith): Likewise.\n\t(gfc_conv_intrinsic_fraction): Likewise.\n\t(gfc_conv_intrinsic_nearest): Likewise.\n\t(gfc_conv_intrinsic_spacing): Likewise.\n\t(gfc_conv_intrinsic_rrspacing): Likewise.\n\t(gfc_conv_intrinsic_scale): Likewise.\n\t(gfc_conv_intrinsic_set_exponent): Likewise.\n\nFrom-SVN: r163721", "tree": {"sha": "cec56c33ee5ba903a41efda3b893888b045f87ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec56c33ee5ba903a41efda3b893888b045f87ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/166d08bddeffca222328dfb9806418910fe83729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/166d08bddeffca222328dfb9806418910fe83729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/166d08bddeffca222328dfb9806418910fe83729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/166d08bddeffca222328dfb9806418910fe83729/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14ca1cef69e39dd2a2ffffffdab47a51b803579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14ca1cef69e39dd2a2ffffffdab47a51b803579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14ca1cef69e39dd2a2ffffffdab47a51b803579"}], "stats": {"total": 125, "additions": 69, "deletions": 56}, "files": [{"sha": "638350b2dc6a9331c9e2505f421d283a51432efd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=166d08bddeffca222328dfb9806418910fe83729", "patch": "@@ -1,3 +1,26 @@\n+2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_conv_power_op): Handle floating-point types\n+\tother than long double.\n+\t* mathbuiltins.def: Add builtins from the POW and CPOW family.\n+\t* trans.h (gfc_builtin_decl_for_float_kind): New prototype.\n+\t* trans-intrinsic.c (gfc_builtin_decl_for_float_kind): Add gfc_\n+\tprefix to function name.\n+\t(gfc_build_intrinsic_lib_fndecls): Add cpow prototype.\n+\t(gfc_conv_intrinsic_aint): Use gfc_builtin_decl_for_float_kind\n+\tfunction name.\n+\t(gfc_conv_intrinsic_exponent): Likewise.\n+\t(gfc_conv_intrinsic_abs): Likewise.\n+\t(gfc_conv_intrinsic_mod): Likewise.\n+\t(gfc_conv_intrinsic_sign): Likewise.\n+\t(gfc_conv_intrinsic_arith): Likewise.\n+\t(gfc_conv_intrinsic_fraction): Likewise.\n+\t(gfc_conv_intrinsic_nearest): Likewise.\n+\t(gfc_conv_intrinsic_spacing): Likewise.\n+\t(gfc_conv_intrinsic_rrspacing): Likewise.\n+\t(gfc_conv_intrinsic_scale): Likewise.\n+\t(gfc_conv_intrinsic_set_exponent): Likewise.\n+\n 2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* intrinsic.c: Add EXECUTE_COMMAND_LINE intrinsic."}, {"sha": "660fee8ec376eb580738e0bd7b4c6f5a002ab9b8", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=166d08bddeffca222328dfb9806418910fe83729", "patch": "@@ -58,13 +58,15 @@ DEFINE_MATH_BUILTIN   (HYPOT, \"hypot\",  1)\n    double and long double) and to build the quad-precision decls.  */\n OTHER_BUILTIN (CABS,      \"cabs\",      cabs,    true)\n OTHER_BUILTIN (COPYSIGN,  \"copysign\",  2,       true)\n+OTHER_BUILTIN (CPOW,      \"cpow\",      cpow,    true)\n OTHER_BUILTIN (FABS,      \"fabs\",      1,       true)\n OTHER_BUILTIN (FMOD,      \"fmod\",      2,       true)\n OTHER_BUILTIN (FREXP,     \"frexp\",     frexp,   false)\n OTHER_BUILTIN (HUGE_VAL,  \"huge_val\",  0,       true)\n OTHER_BUILTIN (LLROUND,   \"llround\",   llround, true)\n OTHER_BUILTIN (LROUND,    \"lround\",    lround,  true)\n OTHER_BUILTIN (NEXTAFTER, \"nextafter\", 2,       true)\n+OTHER_BUILTIN (POW,       \"pow\",       1,       true)\n OTHER_BUILTIN (ROUND,     \"round\",     1,       true)\n OTHER_BUILTIN (SCALBN,    \"scalbn\",    scalbn,  true)\n OTHER_BUILTIN (TRUNC,     \"trunc\",     1,       true)"}, {"sha": "b4bc8caa69613461ccb4a78e667363e170bfc251", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=166d08bddeffca222328dfb9806418910fe83729", "patch": "@@ -958,7 +958,7 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n   int ikind;\n   gfc_se lse;\n   gfc_se rse;\n-  tree fndecl;\n+  tree fndecl = NULL;\n \n   gfc_init_se (&lse, se);\n   gfc_conv_expr_val (&lse, expr->value.op.op1);\n@@ -1056,15 +1056,24 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \t\t  break;\n \n \t\tcase 2:\n-\t\tcase 3:\n \t\t  fndecl = built_in_decls[BUILT_IN_POWIL];\n \t\t  break;\n \n+\t\tcase 3:\n+\t\t  /* Use the __builtin_powil() only if real(kind=16) is \n+\t\t     actually the C long double type.  */\n+\t\t  if (!gfc_real16_is_float128)\n+\t\t    fndecl = built_in_decls[BUILT_IN_POWIL];\n+\t\t  break;\n+\n \t\tdefault:\n \t\t  gcc_unreachable ();\n \t\t}\n \t    }\n-\t  else\n+\n+\t  /* If we don't have a good builtin for this, go for the \n+\t     library function.  */\n+\t  if (!fndecl)\n \t    fndecl = gfor_fndecl_math_powi[kind][ikind].real;\n \t  break;\n \n@@ -1078,39 +1087,11 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case BT_REAL:\n-      switch (kind)\n-\t{\n-\tcase 4:\n-\t  fndecl = built_in_decls[BUILT_IN_POWF];\n-\t  break;\n-\tcase 8:\n-\t  fndecl = built_in_decls[BUILT_IN_POW];\n-\t  break;\n-\tcase 10:\n-\tcase 16:\n-\t  fndecl = built_in_decls[BUILT_IN_POWL];\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      fndecl = gfc_builtin_decl_for_float_kind (BUILT_IN_POW, kind);\n       break;\n \n     case BT_COMPLEX:\n-      switch (kind)\n-\t{\n-\tcase 4:\n-\t  fndecl = built_in_decls[BUILT_IN_CPOWF];\n-\t  break;\n-\tcase 8:\n-\t  fndecl = built_in_decls[BUILT_IN_CPOW];\n-\t  break;\n-\tcase 10:\n-\tcase 16:\n-\t  fndecl = built_in_decls[BUILT_IN_CPOWL];\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      fndecl = gfc_builtin_decl_for_float_kind (BUILT_IN_CPOW, kind);\n       break;\n \n     default:"}, {"sha": "2937734b9cffa2a1738819e2a0c229c2a261bfd2", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=166d08bddeffca222328dfb9806418910fe83729", "patch": "@@ -162,8 +162,9 @@ builtin_decl_for_precision (enum built_in_function base_built_in,\n }\n \n \n-static tree\n-builtin_decl_for_float_kind (enum built_in_function double_built_in, int kind)\n+tree\n+gfc_builtin_decl_for_float_kind (enum built_in_function double_built_in,\n+\t\t\t\t int kind)\n {\n   int i = gfc_validate_kind (BT_REAL, kind, false);\n \n@@ -462,11 +463,11 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n   switch (op)\n     {\n     case RND_ROUND:\n-      decl = builtin_decl_for_float_kind (BUILT_IN_ROUND, kind);\n+      decl = gfc_builtin_decl_for_float_kind (BUILT_IN_ROUND, kind);\n       break;\n \n     case RND_TRUNC:\n-      decl = builtin_decl_for_float_kind (BUILT_IN_TRUNC, kind);\n+      decl = gfc_builtin_decl_for_float_kind (BUILT_IN_TRUNC, kind);\n       break;\n \n     default:\n@@ -613,7 +614,7 @@ gfc_build_intrinsic_lib_fndecls (void)\n        q-suffixed functions.  */\n \n     tree tmp, func_0, func_1, func_2, func_cabs, func_frexp;\n-    tree func_lround, func_llround, func_scalbn;\n+    tree func_lround, func_llround, func_scalbn, func_cpow;\n \n     memset (quad_decls, 0, sizeof(tree) * (int) END_BUILTINS);\n \n@@ -640,6 +641,9 @@ gfc_build_intrinsic_lib_fndecls (void)\n     /* type (*) (complex type) */\n     tmp = tree_cons (NULL_TREE, complex_float128_type_node, void_list_node);\n     func_cabs = build_function_type (float128_type_node, tmp);\n+    /* complex type (*) (complex type, complex type) */\n+    tmp = tree_cons (NULL_TREE, complex_float128_type_node, tmp);\n+    func_cpow = build_function_type (complex_float128_type_node, tmp);\n \n #define DEFINE_MATH_BUILTIN(ID, NAME, ARGTYPE)\n #define DEFINE_MATH_BUILTIN_C(ID, NAME, ARGTYPE)\n@@ -895,7 +899,7 @@ gfc_conv_intrinsic_exponent (gfc_se *se, gfc_expr *expr)\n {\n   tree arg, type, res, tmp, frexp;\n \n-  frexp = builtin_decl_for_float_kind (BUILT_IN_FREXP,\n+  frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP,\n \t\t\t\t       expr->value.function.actual->expr->ts.kind);\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n@@ -1094,7 +1098,7 @@ gfc_conv_intrinsic_abs (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case BT_COMPLEX:\n-      cabs = builtin_decl_for_float_kind (BUILT_IN_CABS, expr->ts.kind);\n+      cabs = gfc_builtin_decl_for_float_kind (BUILT_IN_CABS, expr->ts.kind);\n       se->expr = build_call_expr_loc (input_location, cabs, 1, arg);\n       break;\n \n@@ -1169,7 +1173,7 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n     case BT_REAL:\n       fmod = NULL_TREE;\n       /* Check if we have a builtin fmod.  */\n-      fmod = builtin_decl_for_float_kind (BUILT_IN_FMOD, expr->ts.kind);\n+      fmod = gfc_builtin_decl_for_float_kind (BUILT_IN_FMOD, expr->ts.kind);\n \n       /* Use it if it exists.  */\n       if (fmod != NULL_TREE)\n@@ -1291,8 +1295,8 @@ gfc_conv_intrinsic_sign (gfc_se * se, gfc_expr * expr)\n     {\n       tree abs;\n \n-      tmp = builtin_decl_for_float_kind (BUILT_IN_COPYSIGN, expr->ts.kind);\n-      abs = builtin_decl_for_float_kind (BUILT_IN_FABS, expr->ts.kind);\n+      tmp = gfc_builtin_decl_for_float_kind (BUILT_IN_COPYSIGN, expr->ts.kind);\n+      abs = gfc_builtin_decl_for_float_kind (BUILT_IN_FABS, expr->ts.kind);\n \n       /* We explicitly have to ignore the minus sign. We do so by using\n \t result = (arg1 == 0) ? abs(arg0) : copysign(arg0, arg1).  */\n@@ -2137,7 +2141,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n     {\n       /* result = scale * sqrt(result).  */\n       tree sqrt;\n-      sqrt = builtin_decl_for_float_kind (BUILT_IN_SQRT, expr->ts.kind);\n+      sqrt = gfc_builtin_decl_for_float_kind (BUILT_IN_SQRT, expr->ts.kind);\n       resvar = build_call_expr_loc (input_location,\n \t\t\t\t    sqrt, 1, resvar);\n       resvar = fold_build2 (MULT_EXPR, type, scale, resvar);\n@@ -3842,7 +3846,7 @@ gfc_conv_intrinsic_fraction (gfc_se * se, gfc_expr * expr)\n {\n   tree arg, type, tmp, frexp;\n \n-  frexp = builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n+  frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n@@ -3863,9 +3867,9 @@ gfc_conv_intrinsic_nearest (gfc_se * se, gfc_expr * expr)\n {\n   tree args[2], type, tmp, nextafter, copysign, huge_val;\n \n-  nextafter = builtin_decl_for_float_kind (BUILT_IN_NEXTAFTER, expr->ts.kind);\n-  copysign = builtin_decl_for_float_kind (BUILT_IN_COPYSIGN, expr->ts.kind);\n-  huge_val = builtin_decl_for_float_kind (BUILT_IN_HUGE_VAL, expr->ts.kind);\n+  nextafter = gfc_builtin_decl_for_float_kind (BUILT_IN_NEXTAFTER, expr->ts.kind);\n+  copysign = gfc_builtin_decl_for_float_kind (BUILT_IN_COPYSIGN, expr->ts.kind);\n+  huge_val = gfc_builtin_decl_for_float_kind (BUILT_IN_HUGE_VAL, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n@@ -3908,8 +3912,8 @@ gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n   emin = build_int_cst (NULL_TREE, gfc_real_kinds[k].min_exponent - 1);\n   tiny = gfc_conv_mpfr_to_tree (gfc_real_kinds[k].tiny, expr->ts.kind, 0);\n \n-  frexp = builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n-  scalbn = builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n+  frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n+  scalbn = gfc_builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n   arg = gfc_evaluate_now (arg, &se->pre);\n@@ -3967,9 +3971,9 @@ gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n   k = gfc_validate_kind (BT_REAL, expr->ts.kind, false);\n   prec = gfc_real_kinds[k].digits;\n \n-  frexp = builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n-  scalbn = builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n-  fabs = builtin_decl_for_float_kind (BUILT_IN_FABS, expr->ts.kind);\n+  frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n+  scalbn = gfc_builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n+  fabs = gfc_builtin_decl_for_float_kind (BUILT_IN_FABS, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n@@ -4007,7 +4011,7 @@ gfc_conv_intrinsic_scale (gfc_se * se, gfc_expr * expr)\n {\n   tree args[2], type, scalbn;\n \n-  scalbn = builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n+  scalbn = gfc_builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n@@ -4025,8 +4029,8 @@ gfc_conv_intrinsic_set_exponent (gfc_se * se, gfc_expr * expr)\n {\n   tree args[2], type, tmp, frexp, scalbn;\n \n-  frexp = builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n-  scalbn = builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n+  frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n+  scalbn = gfc_builtin_decl_for_float_kind (BUILT_IN_SCALBN, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);"}, {"sha": "970ae0291b95c4b66eab4d7870846280346c46e7", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/166d08bddeffca222328dfb9806418910fe83729/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=166d08bddeffca222328dfb9806418910fe83729", "patch": "@@ -339,6 +339,9 @@ void gfc_conv_label_variable (gfc_se * se, gfc_expr * expr);\n /* If the value is not constant, Create a temporary and copy the value.  */\n tree gfc_evaluate_now (tree, stmtblock_t *);\n \n+/* Find the appropriate variant of a math intrinsic.  */\n+tree gfc_builtin_decl_for_float_kind (enum built_in_function, int);\n+\n /* Intrinsic function handling.  */\n void gfc_conv_intrinsic_function (gfc_se *, gfc_expr *);\n "}]}