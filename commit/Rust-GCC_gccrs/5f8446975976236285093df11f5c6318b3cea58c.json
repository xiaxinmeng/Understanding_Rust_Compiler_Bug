{"sha": "5f8446975976236285093df11f5c6318b3cea58c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4NDQ2OTc1OTc2MjM2Mjg1MDkzZGYxMWY1YzYzMThiM2NlYTU4Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:43:16Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:43:16Z"}, "message": "Change use to type-based pool allocator in stmt.c.\n\n\t* stmt.c (add_case_node): Use new type-based pool allocator.\n\t(expand_case): Likewise.\n\t(expand_sjlj_dispatch_table): Likewise.\n\nFrom-SVN: r223958", "tree": {"sha": "c6bf566c20e860c8ca8fe05a536cbf1c008ff753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6bf566c20e860c8ca8fe05a536cbf1c008ff753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f8446975976236285093df11f5c6318b3cea58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8446975976236285093df11f5c6318b3cea58c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8446975976236285093df11f5c6318b3cea58c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8446975976236285093df11f5c6318b3cea58c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cc777fbf4b866db1477f25e06358b1de7fb3500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc777fbf4b866db1477f25e06358b1de7fb3500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc777fbf4b866db1477f25e06358b1de7fb3500"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "ad3c1057a9e61ca9892ea1b3fef7db0b069d8d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8446975976236285093df11f5c6318b3cea58c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8446975976236285093df11f5c6318b3cea58c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f8446975976236285093df11f5c6318b3cea58c", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* stmt.c (add_case_node): Use new type-based pool allocator.\n+\t(expand_case): Likewise.\n+\t(expand_sjlj_dispatch_table): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-math-opts.c (occ_new): Use new type-based pool allocator."}, {"sha": "a04f69bc660f81fa7aa434199bcb1cef26a46987", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8446975976236285093df11f5c6318b3cea58c/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8446975976236285093df11f5c6318b3cea58c/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5f8446975976236285093df11f5c6318b3cea58c", "patch": "@@ -748,15 +748,15 @@ do_jump_if_equal (machine_mode mode, rtx op0, rtx op1, rtx_code_label *label,\n \n static struct case_node *\n add_case_node (struct case_node *head, tree low, tree high,\n-               tree label, int prob, alloc_pool case_node_pool)\n+\t       tree label, int prob, pool_allocator<case_node> &case_node_pool)\n {\n   struct case_node *r;\n \n   gcc_checking_assert (low);\n   gcc_checking_assert (high && (TREE_TYPE (low) == TREE_TYPE (high)));\n \n   /* Add this label to the chain.  */\n-  r = (struct case_node *) pool_alloc (case_node_pool);\n+  r = case_node_pool.allocate ();\n   r->low = low;\n   r->high = high;\n   r->code_label = label;\n@@ -1160,7 +1160,7 @@ expand_case (gswitch *stmt)\n   struct case_node *case_list = 0;\n \n   /* A pool for case nodes.  */\n-  alloc_pool case_node_pool;\n+  pool_allocator<case_node> case_node_pool (\"struct case_node pool\", 100);\n \n   /* An ERROR_MARK occurs for various reasons including invalid data type.\n      ??? Can this still happen, with GIMPLE and all?  */\n@@ -1171,9 +1171,6 @@ expand_case (gswitch *stmt)\n      expressions being INTEGER_CST.  */\n   gcc_assert (TREE_CODE (index_expr) != INTEGER_CST);\n   \n-  case_node_pool = create_alloc_pool (\"struct case_node pool\",\n-\t\t\t\t      sizeof (struct case_node),\n-\t\t\t\t      100);\n \n   do_pending_stack_adjust ();\n \n@@ -1273,7 +1270,6 @@ expand_case (gswitch *stmt)\n   reorder_insns (NEXT_INSN (before_case), get_last_insn (), before_case);\n \n   free_temp_slots ();\n-  free_alloc_pool (case_node_pool);\n }\n \n /* Expand the dispatch to a short decrement chain if there are few cases\n@@ -1340,9 +1336,8 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n     {\n       /* Similar to expand_case, but much simpler.  */\n       struct case_node *case_list = 0;\n-      alloc_pool case_node_pool = create_alloc_pool (\"struct sjlj_case pool\",\n-\t\t\t\t\t\t     sizeof (struct case_node),\n-\t\t\t\t\t\t     ncases);\n+      pool_allocator<case_node> case_node_pool (\"struct sjlj_case pool\",\n+\t\t\t\t\t\tncases);\n       tree index_expr = make_tree (index_type, dispatch_index);\n       tree minval = build_int_cst (index_type, 0);\n       tree maxval = CASE_LOW (dispatch_table.last ());\n@@ -1362,7 +1357,6 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n \t\t\t\tminval, maxval, range,\n                                 BLOCK_FOR_INSN (before_case));\n       emit_label (default_label);\n-      free_alloc_pool (case_node_pool);\n     }\n \n   /* Dispatching something not handled?  Trap!  */"}]}