{"sha": "1a98f830332e5a623278aaeea39c2a88177b2a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5OGY4MzAzMzJlNWE2MjMyNzhhYWVlYTM5YzJhODgxNzdiMmE5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-16T17:52:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-08T03:55:04Z"}, "message": "c++: preserve BASELINK from lookup [PR91706]\n\nIn the earlier patch for PR91706 I fixed the BASELINK built by\nbaselink_for_fns, but since we already had one from lookup, we should keep\nthat one around instead of stripping it.  The removed hunk in\nget_class_binding was a wierdly large amount of code to decide whether to\npull out BASELINK_FUNCTIONS.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91706\n\t* name-lookup.c (get_class_binding): Keep a BASELINK.\n\t(set_inherited_value_binding_p): Adjust.\n\t* lambda.c (is_lambda_ignored_entity): Adjust.\n\t* pt.c (lookup_template_function): Copy a BASELINK before\n\tmodifying it.", "tree": {"sha": "394b8795839aa54eec537dd66513b208bea6d90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394b8795839aa54eec537dd66513b208bea6d90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a98f830332e5a623278aaeea39c2a88177b2a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a98f830332e5a623278aaeea39c2a88177b2a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a98f830332e5a623278aaeea39c2a88177b2a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a98f830332e5a623278aaeea39c2a88177b2a9a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07edb5d7f3e77218ec846a9382f7c1d23e67b71"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "2e9d38bbe832702804ddcaffc4024ce930a74843", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=1a98f830332e5a623278aaeea39c2a88177b2a9a", "patch": "@@ -1338,9 +1338,9 @@ is_lambda_ignored_entity (tree val)\n \n   /* None of the lookups that use qualify_lookup want the op() from the\n      lambda; they want the one from the enclosing class.  */\n-  val = OVL_FIRST (val);\n-  if (LAMBDA_FUNCTION_P (val))\n-    return true;\n+  if (tree fns = maybe_get_fns (val))\n+    if (LAMBDA_FUNCTION_P (OVL_FIRST (fns)))\n+      return true;\n \n   return false;\n }"}, {"sha": "1be5f3da6d5675f179bf564de5d56e52b28815e2", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1a98f830332e5a623278aaeea39c2a88177b2a9a", "patch": "@@ -5236,7 +5236,7 @@ set_inherited_value_binding_p (cxx_binding *binding, tree decl,\n     {\n       tree context;\n \n-      if (TREE_CODE (decl) == OVERLOAD)\n+      if (is_overloaded_fn (decl))\n \tcontext = ovl_scope (decl);\n       else\n \t{\n@@ -5338,28 +5338,6 @@ get_class_binding (tree name, cp_binding_level *scope)\n \t\t\t\t /*protect=*/2, /*want_type=*/false,\n \t\t\t\t tf_warning_or_error);\n \n-  if (value_binding\n-      && (TREE_CODE (value_binding) == TYPE_DECL\n-\t  || DECL_CLASS_TEMPLATE_P (value_binding)\n-\t  || (TREE_CODE (value_binding) == TREE_LIST\n-\t      && TREE_TYPE (value_binding) == error_mark_node\n-\t      && (TREE_CODE (TREE_VALUE (value_binding))\n-\t\t  == TYPE_DECL))))\n-    /* We found a type binding, even when looking for a non-type\n-       binding.  This means that we already processed this binding\n-       above.  */\n-    ;\n-  else if (value_binding)\n-    {\n-      if (TREE_CODE (value_binding) == TREE_LIST\n-\t  && TREE_TYPE (value_binding) == error_mark_node)\n-\t/* NAME is ambiguous.  */\n-\t;\n-      else if (BASELINK_P (value_binding))\n-\t/* NAME is some overloaded functions.  */\n-\tvalue_binding = BASELINK_FUNCTIONS (value_binding);\n-    }\n-\n   /* If we found either a type binding or a value binding, create a\n      new binding object.  */\n   if (type_binding || value_binding)"}, {"sha": "b0155a9c370adeed76965147d125afab612ea438", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a98f830332e5a623278aaeea39c2a88177b2a9a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a98f830332e5a623278aaeea39c2a88177b2a9a", "patch": "@@ -9597,6 +9597,7 @@ lookup_template_function (tree fns, tree arglist)\n \n   if (BASELINK_P (fns))\n     {\n+      fns = copy_node (fns);\n       BASELINK_FUNCTIONS (fns) = build2 (TEMPLATE_ID_EXPR,\n \t\t\t\t\t unknown_type_node,\n \t\t\t\t\t BASELINK_FUNCTIONS (fns),"}]}