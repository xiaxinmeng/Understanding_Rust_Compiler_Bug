{"sha": "c8f27794b81ede496c04086105ff1a572ccfca47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhmMjc3OTRiODFlZGU0OTZjMDQwODYxMDVmZjFhNTcyY2NmY2E0Nw==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-08-19T21:16:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-08-19T21:16:20Z"}, "message": "Fix uninitialized register read problem.\n\n* builtins.c (expand_builtin_return_addr): Set\ncurrent_function_accesses_prior_frames when count != 0.  Use\nframe_pointer_rtx when count == 0.\n* function.h (struct function): Add accesses_prior_frames field.\n(current_function_accesses_prior_frames): Define.\n* reload1.c (init_elim_table): Check\ncurrent_function_accesses_prior_frames.\n* doc/tm.texi (INITIAL_FRAME_ADDRESS_RTX): Update docs.\n\nFrom-SVN: r103294", "tree": {"sha": "55e2e2c24495c8b4969b117a3885bd5993b55286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e2e2c24495c8b4969b117a3885bd5993b55286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8f27794b81ede496c04086105ff1a572ccfca47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f27794b81ede496c04086105ff1a572ccfca47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8f27794b81ede496c04086105ff1a572ccfca47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f27794b81ede496c04086105ff1a572ccfca47/comments", "author": null, "committer": null, "parents": [{"sha": "48b5c5c173a1b5623eb467213b62715e6e36b0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b5c5c173a1b5623eb467213b62715e6e36b0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b5c5c173a1b5623eb467213b62715e6e36b0e5"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "8f7da8ec897dc6556723c3c44590919dab41b924", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8f27794b81ede496c04086105ff1a572ccfca47", "patch": "@@ -1,3 +1,14 @@\n+2005-08-19  James E Wilson  <wilson@specifix.com>\n+\n+\t* builtins.c (expand_builtin_return_addr): Set\n+\tcurrent_function_accesses_prior_frames when count != 0.  Use\n+\tframe_pointer_rtx when count == 0.\n+\t* function.h (struct function): Add accesses_prior_frames field.\n+\t(current_function_accesses_prior_frames): Define.\n+\t* reload1.c (init_elim_table): Check\n+\tcurrent_function_accesses_prior_frames.\n+\t* doc/tm.texi (INITIAL_FRAME_ADDRESS_RTX): Update docs.\n+\n 2005-08-19  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-cfgcleanup.c (cleanup_tree_cfg): Fix flowgraph change"}, {"sha": "9975b751ef2a8816ab4369540abe6a6d18f02a14", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c8f27794b81ede496c04086105ff1a572ccfca47", "patch": "@@ -485,7 +485,22 @@ expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n #ifdef INITIAL_FRAME_ADDRESS_RTX\n   rtx tem = INITIAL_FRAME_ADDRESS_RTX;\n #else\n-  rtx tem = hard_frame_pointer_rtx;\n+  rtx tem;\n+\n+  /* For a zero count, we don't care what frame address we return, so frame\n+     pointer elimination is OK, and using the soft frame pointer is OK.\n+     For a non-zero count, we require a stable offset from the current frame\n+     pointer to the previous one, so we must use the hard frame pointer, and\n+     we must disable frame pointer elimination.  */\n+  if (count == 0)\n+    tem = frame_pointer_rtx;\n+  else \n+    {\n+      tem = hard_frame_pointer_rtx;\n+\n+      /* Tell reload not to eliminate the frame pointer.  */\n+      current_function_accesses_prior_frames = 1;\n+    }\n #endif\n \n   /* Some machines need special handling before we can access"}, {"sha": "16b48ff87a436c7513fa76952dbf9ee8eede55d3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c8f27794b81ede496c04086105ff1a572ccfca47", "patch": "@@ -2812,14 +2812,11 @@ machines.  See @file{function.c} for details.\n \n @defmac INITIAL_FRAME_ADDRESS_RTX\n A C expression whose value is RTL representing the address of the initial\n- stack frame. This address is passed to @code{RETURN_ADDR_RTX} and \n-@code{DYNAMIC_CHAIN_ADDRESS}.\n-If you don't define this macro, the default is to return \n-@code{hard_frame_pointer_rtx}.\n-This default is usually correct unless @code{-fomit-frame-pointer} is in \n-effect.\n-Define this macro in order to make @code{__builtin_frame_address (0)} and \n-@code{__builtin_return_address (0)} work even in absence of a hard frame pointer.\n+stack frame. This address is passed to @code{RETURN_ADDR_RTX} and \n+@code{DYNAMIC_CHAIN_ADDRESS}.  If you don't define this macro, a reasonable\n+default value will be used.  Define this macro in order to make frame pointer\n+elimination work in the presence of @code{__builtin_frame_address (count)} and \n+@code{__builtin_return_address (count)} for @code{count} not equal to zero.\n @end defmac\n \n @defmac DYNAMIC_CHAIN_ADDRESS (@var{frameaddr})"}, {"sha": "c1482ac328e659d59871ab2a8528bc489066ab22", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c8f27794b81ede496c04086105ff1a572ccfca47", "patch": "@@ -394,6 +394,10 @@ struct function GTY(())\n      either as a subroutine or builtin.  */\n   unsigned int calls_alloca : 1;\n \n+  /* Nonzero if function being compiled called builtin_return_addr or\n+     builtin_frame_address with non-zero count.  */\n+  unsigned int accesses_prior_frames : 1;\n+\n   /* Nonzero if the function calls __builtin_eh_return.  */\n   unsigned int calls_eh_return : 1;\n \n@@ -483,6 +487,7 @@ extern int trampolines_created;\n #define current_function_returns_pointer (cfun->returns_pointer)\n #define current_function_calls_setjmp (cfun->calls_setjmp)\n #define current_function_calls_alloca (cfun->calls_alloca)\n+#define current_function_accesses_prior_frames (cfun->accesses_prior_frames)\n #define current_function_calls_eh_return (cfun->calls_eh_return)\n #define current_function_is_thunk (cfun->is_thunk)\n #define current_function_args_info (cfun->args_info)"}, {"sha": "dbe26d4441b757baab188c02c4ed323c55585a5f", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f27794b81ede496c04086105ff1a572ccfca47/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c8f27794b81ede496c04086105ff1a572ccfca47", "patch": "@@ -3492,6 +3492,7 @@ init_elim_table (void)\n \t\t\t     sp-adjusting insns for this case.  */\n \t\t\t  || (current_function_calls_alloca\n \t\t\t      && EXIT_IGNORE_STACK)\n+\t\t\t  || current_function_accesses_prior_frames\n \t\t\t  || FRAME_POINTER_REQUIRED);\n \n   num_eliminable = 0;"}]}