{"sha": "fa06ad0d58e8981afc7dd0e8965505bab04a5320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwNmFkMGQ1OGU4OTgxYWZjN2RkMGU4OTY1NTA1YmFiMDRhNTMyMA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-04-28T01:56:54Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2012-04-28T01:56:54Z"}, "message": "re PR tree-optimization/38785 (huge performance regression on EEMBC bitmnp01)\n\n\tPR tree-optimization/38785\n\t* common.opt (ftree-partial-pre): New option.\n\t* doc/invoke.texi: Document it.\n\t* opts.c (default_options_table): Initialize flag_tree_partial_pre.\n\t* tree-ssa-pre.c (do_partial_partial_insertion): Insert only if it will\n\tbenefit speed path.\n\t(execute_pre): Use flag_tree_partial_pre.\n\nCo-Authored-By: Maxim Kuvyrkov <maxim@codesourcery.com>\nCo-Authored-By: Steven Bosscher <steven@gcc.gnu.org>\n\nFrom-SVN: r186928", "tree": {"sha": "fa87f8c36fc8d168b8c0ab80f20d01bb470d9374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa87f8c36fc8d168b8c0ab80f20d01bb470d9374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa06ad0d58e8981afc7dd0e8965505bab04a5320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa06ad0d58e8981afc7dd0e8965505bab04a5320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa06ad0d58e8981afc7dd0e8965505bab04a5320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa06ad0d58e8981afc7dd0e8965505bab04a5320/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52556f04772d3841a6042d2029cf7d0f5e8d5342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52556f04772d3841a6042d2029cf7d0f5e8d5342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52556f04772d3841a6042d2029cf7d0f5e8d5342"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "713c23fcb83c8dab8f01049fd9dedc6bda8fee3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa06ad0d58e8981afc7dd0e8965505bab04a5320", "patch": "@@ -1,3 +1,15 @@\n+2012-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR tree-optimization/38785\n+\t* common.opt (ftree-partial-pre): New option.\n+\t* doc/invoke.texi: Document it.\n+\t* opts.c (default_options_table): Initialize flag_tree_partial_pre.\n+\t* tree-ssa-pre.c (do_partial_partial_insertion): Insert only if it will\n+\tbenefit speed path.\n+\t(execute_pre): Use flag_tree_partial_pre.\n+\n 2012-04-27  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/52999"}, {"sha": "14c88bf656c6bf66de01342a70e29cad39e1aa81", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fa06ad0d58e8981afc7dd0e8965505bab04a5320", "patch": "@@ -2033,6 +2033,10 @@ ftree-pre\n Common Report Var(flag_tree_pre) Optimization\n Enable SSA-PRE optimization on trees\n \n+ftree-partial-pre\n+Common Report Var(flag_tree_partial_pre) Optimization\n+In SSA-PRE optimization on trees, enable partial-partial redundancy elimination\n+\n ftree-pta\n Common Report Var(flag_tree_pta) Init(1) Optimization\n Perform function-local points-to analysis on trees."}, {"sha": "bd7ea3b9480d241de21f0227060f2954d9006627", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa06ad0d58e8981afc7dd0e8965505bab04a5320", "patch": "@@ -410,7 +410,8 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-loop-if-convert-stores -ftree-loop-im @gol\n -ftree-phiprop -ftree-loop-distribution -ftree-loop-distribute-patterns @gol\n -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize @gol\n--ftree-parallelize-loops=@var{n} -ftree-pre -ftree-pta -ftree-reassoc @gol\n+-ftree-parallelize-loops=@var{n} -ftree-pre -ftree-partial-pre -ftree-pta @gol\n+-ftree-reassoc @gol\n -ftree-sink -ftree-sra -ftree-switch-conversion -ftree-tail-merge @gol\n -ftree-ter -ftree-vect-loop-version -ftree-vectorize -ftree-vrp @gol\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n@@ -6294,8 +6295,8 @@ invoking @option{-O2} on programs that use computed gotos.\n Optimize yet more.  @option{-O3} turns on all optimizations specified\n by @option{-O2} and also turns on the @option{-finline-functions},\n @option{-funswitch-loops}, @option{-fpredictive-commoning},\n-@option{-fgcse-after-reload}, @option{-ftree-vectorize} and\n-@option{-fipa-cp-clone} options.\n+@option{-fgcse-after-reload}, @option{-ftree-vectorize},\n+@option{-ftree-partial-pre} and @option{-fipa-cp-clone} options.\n \n @item -O0\n @opindex O0\n@@ -7090,6 +7091,11 @@ at @option{-O} and higher.\n Perform partial redundancy elimination (PRE) on trees.  This flag is\n enabled by default at @option{-O2} and @option{-O3}.\n \n+@item -ftree-partial-pre\n+@opindex ftree-partial-pre\n+Make partial redundancy elimination (PRE) more aggressive.  This flag is\n+enabled by default at @option{-O3}.\n+\n @item -ftree-forwprop\n @opindex ftree-forwprop\n Perform forward propagation on trees.  This flag is enabled by default"}, {"sha": "ab2de8fbcd11c916d4747a8ebe8e46cbc8ce35be", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fa06ad0d58e8981afc7dd0e8965505bab04a5320", "patch": "@@ -499,6 +499,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_3_PLUS, OPT_fgcse_after_reload, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_vectorize, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fipa_cp_clone, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_ftree_partial_pre, NULL, 1 },\n \n     /* -Ofast adds optimizations to -O3.  */\n     { OPT_LEVELS_FAST, OPT_ffast_math, NULL, 1 },"}, {"sha": "a89856aa959a5a5ecfb5610abe9773447ac0c864", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ad0d58e8981afc7dd0e8965505bab04a5320/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fa06ad0d58e8981afc7dd0e8965505bab04a5320", "patch": "@@ -3774,20 +3774,51 @@ do_partial_partial_insertion (basic_block block, basic_block dom)\n \t\t}\n \t      else\n \t\tavail[bprime->index] = edoubleprime;\n-\n \t    }\n \n \t  /* If we can insert it, it's not the same value\n \t     already existing along every predecessor, and\n \t     it's defined by some predecessor, it is\n \t     partially redundant.  */\n-\t  if (!cant_insert && by_all && dbg_cnt (treepre_insert))\n+\t  if (!cant_insert && by_all)\n \t    {\n-\t      pre_stats.pa_insert++;\n-\t      if (insert_into_preds_of_block (block, get_expression_id (expr),\n-\t\t\t\t\t      avail))\n-\t\tnew_stuff = true;\n-\t    }\n+\t      edge succ;\n+\t      bool do_insertion = false;\n+\n+\t      /* Insert only if we can remove a later expression on a path\n+\t\t that we want to optimize for speed.\n+\t\t The phi node that we will be inserting in BLOCK is not free,\n+\t\t and inserting it for the sake of !optimize_for_speed successor\n+\t\t may cause regressions on the speed path.  */\n+\t      FOR_EACH_EDGE (succ, ei, block->succs)\n+\t\t{\n+\t\t  if (bitmap_set_contains_value (PA_IN (succ->dest), val))\n+\t\t    {\n+\t\t      if (optimize_edge_for_speed_p (succ))\n+\t\t\tdo_insertion = true;\n+\t\t    }\n+\t\t}\n+\n+\t      if (!do_insertion)\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Skipping partial partial redundancy \"\n+\t\t\t       \"for expression \");\n+\t\t      print_pre_expr (dump_file, expr);\n+\t\t      fprintf (dump_file, \" (%04d), not partially anticipated \"\n+\t\t\t       \"on any to be optimized for speed edges\\n\", val);\n+\t\t    }\n+\t\t}\n+\t      else if (dbg_cnt (treepre_insert))\n+\t\t{\n+\t\t  pre_stats.pa_insert++;\n+\t\t  if (insert_into_preds_of_block (block,\n+\t\t\t\t\t\t  get_expression_id (expr),\n+\t\t\t\t\t\t  avail))\n+\t\t    new_stuff = true;\n+\t\t}\t   \n+\t    } \n \t  free (avail);\n \t}\n     }\n@@ -4948,7 +4979,8 @@ execute_pre (bool do_fre)\n {\n   unsigned int todo = 0;\n \n-  do_partial_partial = optimize > 2 && optimize_function_for_speed_p (cfun);\n+  do_partial_partial =\n+    flag_tree_partial_pre && optimize_function_for_speed_p (cfun);\n \n   /* This has to happen before SCCVN runs because\n      loop_optimizer_init may create new phis, etc.  */"}]}