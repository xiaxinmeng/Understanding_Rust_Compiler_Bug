{"sha": "8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyOTczY2JmN2VlNmRkNTMxMzM0M2MzMmU3YWJlNmM1MWY2NzhkNA==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:33:34Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:33:34Z"}, "message": "Patch ieee128-lib-patch005b", "tree": {"sha": "dcfdd378ed7316b2e44636a77080e83a5e87507b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcfdd378ed7316b2e44636a77080e83a5e87507b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4/comments", "author": null, "committer": null, "parents": [{"sha": "18c2f7a740a61e317e1911ee0ad7dea6043ea511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c2f7a740a61e317e1911ee0ad7dea6043ea511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c2f7a740a61e317e1911ee0ad7dea6043ea511"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "4de6d61d555cc5237b59ceb0cb19b85eb10ed334", "filename": "gcc/ChangeLog.meissner", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4/gcc%2FChangeLog.meissner", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4/gcc%2FChangeLog.meissner", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.meissner?ref=8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "patch": "@@ -1,3 +1,11 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t(ieee128-lib-patch005b)\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): If long\n+\tdouble is IEEE 128-bit, map the old 'q' built-in functions to\n+\t'f128' versions.  Also map the silent NaN f128 function to the\n+\tlong double version.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t(ieee128-lib-patch004b)\n@@ -24,4 +32,3 @@\n 2020-05-05   Michael Meissner  <meissner@linux.ibm.com>\n \n \tClone branch\n-"}, {"sha": "206230a290d74c033f98119cefadc58faa1b9474", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2973cbf7ee6dd5313343c32e7abe6c51f678d4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=8f2973cbf7ee6dd5313343c32e7abe6c51f678d4", "patch": "@@ -675,15 +675,31 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__builtin_vsx_xvnmsubmsp=__builtin_vsx_xvnmsubsp\");\n     }\n \n-  /* Map the old _Float128 'q' builtins into the new 'f128' builtins.  */\n+  /* Map the old _Float128 'q' builtins into the new 'f128' builtins.  However,\n+     if long double is IEEE 128-bit, map the built-in functions to the normal\n+     long double version.  In addition, if the default long double type is\n+     IEEE, the nans builtins seem to generate the normal nan builtin value.  */\n   if (TARGET_FLOAT128_TYPE)\n     {\n-      builtin_define (\"__builtin_fabsq=__builtin_fabsf128\");\n-      builtin_define (\"__builtin_copysignq=__builtin_copysignf128\");\n-      builtin_define (\"__builtin_nanq=__builtin_nanf128\");\n-      builtin_define (\"__builtin_nansq=__builtin_nansf128\");\n-      builtin_define (\"__builtin_infq=__builtin_inff128\");\n-      builtin_define (\"__builtin_huge_valq=__builtin_huge_valf128\");\n+      if (TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128)\n+\t{\n+\t  builtin_define (\"__builtin_fabsq=__builtin_fabsl\");\n+\t  builtin_define (\"__builtin_copysignq=__builtin_copysignl\");\n+\t  builtin_define (\"__builtin_nanq=__builtin_nanl\");\n+\t  builtin_define (\"__builtin_nansq=__builtin_nansl\");\n+\t  builtin_define (\"__builtin_infq=__builtin_infl\");\n+\t  builtin_define (\"__builtin_huge_valq=__builtin_huge_vall\");\n+\t  builtin_define (\"__builtin_nansf128=__builtin_nansl\");\n+\t}\n+      else\n+\t{\n+\t  builtin_define (\"__builtin_fabsq=__builtin_fabsf128\");\n+\t  builtin_define (\"__builtin_copysignq=__builtin_copysignf128\");\n+\t  builtin_define (\"__builtin_nanq=__builtin_nanf128\");\n+\t  builtin_define (\"__builtin_nansq=__builtin_nansf128\");\n+\t  builtin_define (\"__builtin_infq=__builtin_inff128\");\n+\t  builtin_define (\"__builtin_huge_valq=__builtin_huge_valf128\");\n+\t}\n     }\n \n   /* Tell users they can use __builtin_bswap{16,64}.  */"}]}