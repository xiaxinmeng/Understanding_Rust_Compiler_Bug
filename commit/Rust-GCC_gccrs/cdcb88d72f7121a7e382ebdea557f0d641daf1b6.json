{"sha": "cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjYjg4ZDcyZjcxMjFhN2UzODJlYmRlYTU1N2YwZDY0MWRhZjFiNg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-02-20T17:37:37Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-02-20T17:37:37Z"}, "message": "pa.c (pa_assemble_integer, get_plabel): Small cleanups.\n\n\t* pa.c (pa_assemble_integer, get_plabel): Small cleanups.\n\t(pa_asm_output_mi_thunk): Use asm_output_insn instead of fprintf.\n\t* som.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Small cleanup.\n\nFrom-SVN: r95306", "tree": {"sha": "1f7ba6966a780c4fe38d2b9b99d55db442da3d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7ba6966a780c4fe38d2b9b99d55db442da3d7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/comments", "author": null, "committer": null, "parents": [{"sha": "c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2"}], "stats": {"total": 186, "additions": 93, "deletions": 93}, "files": [{"sha": "fc2ef71cfd820fc8c92a17b2e93f97f1f1931e9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "patch": "@@ -1,3 +1,9 @@\n+2005-02-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (pa_assemble_integer, get_plabel): Small cleanups.\n+\t(pa_asm_output_mi_thunk): Use asm_output_insn instead of fprintf.\n+\t* som.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Small cleanup.\n+\n 2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 18785"}, {"sha": "06f5b9832b00ce4eba19133b202273c9283b0015", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 85, "deletions": 91, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "patch": "@@ -3315,13 +3315,14 @@ output_64bit_ior (rtx *operands)\n }\n \f\n /* Target hook for assembling integer objects.  This code handles\n-   aligned SI and DI integers specially, since function references must\n-   be preceded by P%.  */\n+   aligned SI and DI integers specially since function references\n+   must be preceded by P%.  */\n \n static bool\n pa_assemble_integer (rtx x, unsigned int size, int aligned_p)\n {\n-  if (size == UNITS_PER_WORD && aligned_p\n+  if (size == UNITS_PER_WORD\n+      && aligned_p\n       && function_label_operand (x, VOIDmode))\n     {\n       fputs (size == 8? \"\\t.dword\\tP%\" : \"\\t.word\\tP%\", asm_out_file);\n@@ -5608,8 +5609,6 @@ get_plabel (const char *fname)\n      on the list, create a new entry on the list.  */\n   if (deferred_plabels == NULL || i == n_deferred_plabels)\n     {\n-      const char *real_name;\n-\n       if (deferred_plabels == 0)\n \tdeferred_plabels = (struct deferred_plabel *)\n \t  ggc_alloc (sizeof (struct deferred_plabel));\n@@ -5623,10 +5622,10 @@ get_plabel (const char *fname)\n       deferred_plabels[i].internal_label = gen_label_rtx ();\n       deferred_plabels[i].name = ggc_strdup (fname);\n \n-      /* Gross.  We have just implicitly taken the address of this function,\n-\t mark it as such.  */\n-      real_name = (*targetm.strip_name_encoding) (fname);\n-      TREE_SYMBOL_REFERENCED (get_identifier (real_name)) = 1;\n+      /* Gross.  We have just implicitly taken the address of\n+\t this function, mark it as such.  */\n+      fname = targetm.strip_name_encoding (fname);\n+      TREE_SYMBOL_REFERENCED (get_identifier (fname)) = 1;\n     }\n \n   return &deferred_plabels[i];\n@@ -7916,18 +7915,18 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t\t\tHOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\ttree function)\n {\n-  const char *fname = XSTR (XEXP (DECL_RTL (function), 0), 0);\n-  const char *tname = XSTR (XEXP (DECL_RTL (thunk_fndecl), 0), 0);\n+  static unsigned int current_thunk_number;\n   int val_14 = VAL_14_BITS_P (delta);\n   int nbytes = 0;\n-  static unsigned int current_thunk_number;\n   char label[16];\n+  rtx xoperands[4];\n \n-  ASM_OUTPUT_LABEL (file, tname);\n-  fprintf (file, \"\\t.PROC\\n\\t.CALLINFO FRAME=0,NO_CALLS\\n\\t.ENTRY\\n\");\n+  xoperands[0] = XEXP (DECL_RTL (function), 0);\n+  xoperands[1] = XEXP (DECL_RTL (thunk_fndecl), 0);\n+  xoperands[2] = GEN_INT (delta);\n \n-  fname = (*targetm.strip_name_encoding) (fname);\n-  tname = (*targetm.strip_name_encoding) (tname);\n+  ASM_OUTPUT_LABEL (file, XSTR (xoperands[1], 0));\n+  fprintf (file, \"\\t.PROC\\n\\t.CALLINFO FRAME=0,NO_CALLS\\n\\t.ENTRY\\n\");\n \n   /* Output the thunk.  We know that the function is in the same\n      translation unit (i.e., the same space) as the thunk, and that\n@@ -7959,18 +7958,19 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t\t       && last_address < 262132)))\n \t      || (!targetm.have_named_sections && last_address < 262132))))\n     {\n+      if (!val_14)\n+\toutput_asm_insn (\"addil L'%2,%%r26\", xoperands);\n+\n+      output_asm_insn (\"b %0\", xoperands);\n+\n       if (val_14)\n \t{\n-\t  fprintf (file, \"\\tb %s\\n\\tldo \" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \"(%%r26),%%r26\\n\", fname, delta);\n+\t  output_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n \t  nbytes += 8;\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \",%%r26\\n\", delta);\n-\t  fprintf (file, \"\\tb %s\\n\\tldo R'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \"(%%r1),%%r26\\n\", fname, delta);\n+\t  output_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n \t  nbytes += 12;\n \t}\n     }\n@@ -7979,53 +7979,54 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n       /* We only have one call-clobbered scratch register, so we can't\n          make use of the delay slot if delta doesn't fit in 14 bits.  */\n       if (!val_14)\n-\tfprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t       \",%%r26\\n\\tldo R'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t       \"(%%r1),%%r26\\n\", delta, delta);\n+\t{\n+\t  output_asm_insn (\"addil L'%2,%%r26\", xoperands);\n+\t  output_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n+\t}\n \n-      fprintf (file, \"\\tb,l .+8,%%r1\\n\");\n+      output_asm_insn (\"b,l .+8,%%r1\", xoperands);\n \n       if (TARGET_GAS)\n \t{\n-\t  fprintf (file, \"\\taddil L'%s-$PIC_pcrel$0+4,%%r1\\n\", fname);\n-\t  fprintf (file, \"\\tldo R'%s-$PIC_pcrel$0+8(%%r1),%%r1\\n\", fname);\n+\t  output_asm_insn (\"addil L'%0-$PIC_pcrel$0+4,%%r1\", xoperands);\n+\t  output_asm_insn (\"ldo R'%0-$PIC_pcrel$0+8(%%r1),%%r1\", xoperands);\n \t}\n       else\n \t{\n-\t  int off = val_14 ? 8 : 16;\n-\t  fprintf (file, \"\\taddil L'%s-%s-%d,%%r1\\n\", fname, tname, off);\n-\t  fprintf (file, \"\\tldo R'%s-%s-%d(%%r1),%%r1\\n\", fname, tname, off);\n+\t  xoperands[3] = GEN_INT (val_14 ? 8 : 16);\n+\t  output_asm_insn (\"addil L'%0-%1-%3,%%r1\", xoperands);\n \t}\n \n       if (val_14)\n \t{\n-\t  fprintf (file, \"\\tbv %%r0(%%r1)\\n\\tldo \");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC \"(%%r26),%%r26\\n\", delta);\n+\t  output_asm_insn (\"bv %%r0(%%r1)\", xoperands);\n+\t  output_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n \t  nbytes += 20;\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\tbv,n %%r0(%%r1)\\n\");\n+\t  output_asm_insn (\"bv,n %%r0(%%r1)\", xoperands);\n \t  nbytes += 24;\n \t}\n     }\n   else if (TARGET_PORTABLE_RUNTIME)\n     {\n-      fprintf (file, \"\\tldil L'%s,%%r1\\n\", fname);\n-      fprintf (file, \"\\tldo R'%s(%%r1),%%r22\\n\", fname);\n+      output_asm_insn (\"ldil L'%0,%%r1\", xoperands);\n+      output_asm_insn (\"ldo R'%0(%%r1),%%r22\", xoperands);\n+\n+      if (!val_14)\n+\toutput_asm_insn (\"addil L'%2,%%r26\", xoperands);\n+\n+      output_asm_insn (\"bv %%r0(%%r22)\", xoperands);\n \n       if (val_14)\n \t{\n-\t  fprintf (file, \"\\tbv %%r0(%%r22)\\n\\tldo \");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC \"(%%r26),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n \t  nbytes += 16;\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \",%%r26\\n\", delta);\n-\t  fprintf (file, \"\\tbv %%r0(%%r22)\\n\\tldo \");\n-\t  fprintf (file, \"R'\" HOST_WIDE_INT_PRINT_DEC \"(%%r1),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n \t  nbytes += 20;\n \t}\n     }\n@@ -8036,99 +8037,92 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t call the function directly with an indirect sequence similar to\n \t that used by $$dyncall.  This is possible because $$dyncall acts\n \t as the import stub in an indirect call.  */\n-      const char *lab;\n-\n       ASM_GENERATE_INTERNAL_LABEL (label, \"LTHN\", current_thunk_number);\n-      lab = (*targetm.strip_name_encoding) (label);\n-\n-      fprintf (file, \"\\taddil LT'%s,%%r19\\n\", lab);\n-      fprintf (file, \"\\tldw RT'%s(%%r1),%%r22\\n\", lab);\n-      fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n-      fprintf (file, \"\\tbb,>=,n %%r22,30,.+16\\n\");\n-      fprintf (file, \"\\tdepi 0,31,2,%%r22\\n\");\n-      fprintf (file, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\n-      fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n+      xoperands[3] = gen_rtx_SYMBOL_REF (Pmode, label);\n+      output_asm_insn (\"addil LT'%3,%%r19\", xoperands);\n+      output_asm_insn (\"ldw RT'%3(%%r1),%%r22\", xoperands);\n+      output_asm_insn (\"ldw 0(%%sr0,%%r22),%%r22\", xoperands);\n+      output_asm_insn (\"bb,>=,n %%r22,30,.+16\", xoperands);\n+      output_asm_insn (\"depi 0,31,2,%%r22\", xoperands);\n+      output_asm_insn (\"ldw 4(%%sr0,%%r22),%%r19\", xoperands);\n+      output_asm_insn (\"ldw 0(%%sr0,%%r22),%%r22\", xoperands);\n+\n       if (!val_14)\n \t{\n-\t  fprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \",%%r26\\n\", delta);\n+\t  output_asm_insn (\"addil L'%2,%%r26\", xoperands);\n \t  nbytes += 4;\n \t}\n+\n       if (TARGET_PA_20)\n \t{\n-          fprintf (file, \"\\tbve (%%r22)\\n\\tldo \");\n+\t  output_asm_insn (\"bve (%%r22)\", xoperands);\n+\t  nbytes += 36;\n+\t}\n+      else if (TARGET_NO_SPACE_REGS)\n+\t{\n+\t  output_asm_insn (\"be 0(%%sr4,%%r22)\", xoperands);\n \t  nbytes += 36;\n \t}\n       else\n \t{\n-\t  if (TARGET_NO_SPACE_REGS)\n-\t    {\n-\t      fprintf (file, \"\\tbe 0(%%sr4,%%r22)\\n\\tldo \");\n-\t      nbytes += 36;\n-\t    }\n-\t  else\n-\t    {\n-\t      fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r21\\n\");\n-\t      fprintf (file, \"\\tmtsp %%r21,%%sr0\\n\");\n-\t      fprintf (file, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\n-\t      nbytes += 44;\n-\t    }\n+\t  output_asm_insn (\"ldsid (%%sr0,%%r22),%%r21\", xoperands);\n+\t  output_asm_insn (\"mtsp %%r21,%%sr0\", xoperands);\n+\t  output_asm_insn (\"be 0(%%sr0,%%r22)\", xoperands);\n+\t  nbytes += 44;\n \t}\n \n       if (val_14)\n-\tfprintf (file, HOST_WIDE_INT_PRINT_DEC \"(%%r26),%%r26\\n\", delta);\n+\toutput_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n       else\n-\tfprintf (file, \"R'\" HOST_WIDE_INT_PRINT_DEC \"(%%r1),%%r26\\n\", delta);\n+\toutput_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n     }\n   else if (flag_pic)\n     {\n-      if (TARGET_PA_20)\n-\tfprintf (file, \"\\tb,l .+8,%%r1\\n\");\n-      else\n-\tfprintf (file, \"\\tbl .+8,%%r1\\n\");\n+      output_asm_insn (\"{bl|b,l} .+8,%%r1\", xoperands);\n \n       if (TARGET_SOM || !TARGET_GAS)\n \t{\n-\t  fprintf (file, \"\\taddil L'%s-%s-8,%%r1\\n\", fname, tname);\n-\t  fprintf (file, \"\\tldo R'%s-%s-8(%%r1),%%r22\\n\", fname, tname);\n+\t  output_asm_insn (\"addil L'%0-%1-8,%%r1\", xoperands);\n+\t  output_asm_insn (\"ldo R'%0-%1-8(%%r1),%%r22\", xoperands);\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\taddil L'%s-$PIC_pcrel$0+4,%%r1\\n\", fname);\n-\t  fprintf (file, \"\\tldo R'%s-$PIC_pcrel$0+8(%%r1),%%r22\\n\", fname);\n+\t  output_asm_insn (\"addil L'%0-$PIC_pcrel$0+4,%%r1\", xoperands);\n+\t  output_asm_insn (\"ldo R'%0-$PIC_pcrel$0+8(%%r1),%%r22\", xoperands);\n \t}\n \n+      if (!val_14)\n+\toutput_asm_insn (\"addil L'%2,%%r26\", xoperands);\n+\n+      output_asm_insn (\"bv %%r0(%%r22)\", xoperands);\n+\n       if (val_14)\n \t{\n-\t  fprintf (file, \"\\tbv %%r0(%%r22)\\n\\tldo \");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC \"(%%r26),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n \t  nbytes += 20;\n \t}\n       else\n \t{\n-\t  fprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC\n-\t\t\t \",%%r26\\n\", delta);\n-\t  fprintf (file, \"\\tbv %%r0(%%r22)\\n\\tldo \");\n-\t  fprintf (file, \"R'\" HOST_WIDE_INT_PRINT_DEC \"(%%r1),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n \t  nbytes += 24;\n \t}\n     }\n   else\n     {\n       if (!val_14)\n-\tfprintf (file, \"\\taddil L'\" HOST_WIDE_INT_PRINT_DEC \",%%r26\\n\", delta);\n+\toutput_asm_insn (\"addil L'%2,%%r26\", xoperands);\n \n-      fprintf (file, \"\\tldil L'%s,%%r22\\n\", fname);\n-      fprintf (file, \"\\tbe R'%s(%%sr4,%%r22)\\n\\tldo \", fname);\n+      output_asm_insn (\"ldil L'%0,%%r22\", xoperands);\n+      output_asm_insn (\"be R'%0(%%sr4,%%r22)\", xoperands);\n \n       if (val_14)\n \t{\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC \"(%%r26),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo %2(%%r26),%%r26\", xoperands);\n \t  nbytes += 12;\n \t}\n       else\n \t{\n-\t  fprintf (file, \"R'\" HOST_WIDE_INT_PRINT_DEC \"(%%r1),%%r26\\n\", delta);\n+\t  output_asm_insn (\"ldo R'%2(%%r1),%%r26\", xoperands);\n \t  nbytes += 16;\n \t}\n     }\n@@ -8138,9 +8132,9 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n   if (TARGET_SOM && flag_pic && TREE_PUBLIC (function))\n     {\n       data_section ();\n-      fprintf (file, \"\\t.align 4\\n\");\n+      output_asm_insn (\".align 4\", xoperands);\n       ASM_OUTPUT_LABEL (file, label);\n-      fprintf (file, \"\\t.word P'%s\\n\", fname);\n+      output_asm_insn (\".word P'%0\", xoperands);\n     }\n   else if (TARGET_SOM && TARGET_GAS)\n     forget_section ();"}, {"sha": "e06a0912493b186babee4da7ce1cd4d785758371", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcb88d72f7121a7e382ebdea557f0d641daf1b6/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=cdcb88d72f7121a7e382ebdea557f0d641daf1b6", "patch": "@@ -256,9 +256,9 @@ do {\t\t\t\t\t\t\t\t\\\n        if (!function_label_operand (RTL, VOIDmode))\t\t\t\\\n \t hppa_encode_label (RTL);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-       name = (*targetm.strip_name_encoding) (XSTR ((RTL), 0));\t\t\\\n+       name = targetm.strip_name_encoding (XSTR ((RTL), 0));\t\t\\\n        id = maybe_get_identifier (name);\t\t\t\t\\\n-       if (! id || ! TREE_SYMBOL_REFERENCED (id))\t\t\t\\\n+       if (!id || !TREE_SYMBOL_REFERENCED (id))\t\t\t\t\\\n \t {\t\t\t\t\t\t\t\t\\\n \t   fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\t\\\n \t   assemble_name (FILE, XSTR ((RTL), 0));\t\t       \t\\"}]}