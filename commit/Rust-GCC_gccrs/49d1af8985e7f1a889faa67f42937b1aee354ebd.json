{"sha": "49d1af8985e7f1a889faa67f42937b1aee354ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkMWFmODk4NWU3ZjFhODg5ZmFhNjdmNDI5MzdiMWFlZTM1NGViZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-21T14:35:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-21T14:35:08Z"}, "message": "builtins.c (fold_builtin): Take decomposed arguments of CALL_EXPR.\n\n\t* builtins.c (fold_builtin): Take decomposed arguments of\n\tCALL_EXPR.\n\t* fold-const.c (fold_ternary): Update a call to fold_builtin.\n\t* gimplify.c (gimplify_call_expr): Likewise.\n\t* tree-ssa-ccp.c (ccp_fold, ccp_fold_builtin): Likewise.\n\t* tree.h: Update the prototype of fold_builtin.\n\nFrom-SVN: r96800", "tree": {"sha": "c303459a3f6f0861fbf059f297c852a327157fb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c303459a3f6f0861fbf059f297c852a327157fb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d1af8985e7f1a889faa67f42937b1aee354ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1af8985e7f1a889faa67f42937b1aee354ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d1af8985e7f1a889faa67f42937b1aee354ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1af8985e7f1a889faa67f42937b1aee354ebd/comments", "author": null, "committer": null, "parents": [{"sha": "9ce921aba837a0775de9abb3ea97e57d30f25e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce921aba837a0775de9abb3ea97e57d30f25e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce921aba837a0775de9abb3ea97e57d30f25e1f"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "7adad7cbcf3c9a2ad97567a347b53d70c29810c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -1,3 +1,12 @@\n+2005-03-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c (fold_builtin): Take decomposed arguments of\n+\tCALL_EXPR.\n+\t* fold-const.c (fold_ternary): Update a call to fold_builtin.\n+\t* gimplify.c (gimplify_call_expr): Likewise.\n+\t* tree-ssa-ccp.c (ccp_fold, ccp_fold_builtin): Likewise.\n+\t* tree.h: Update the prototype of fold_builtin.\n+\n 2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* rtl.h (struct rtx_hooks): Add gen_lowpart_no_emit."}, {"sha": "94fa62755f5b1d22449d9edaf59683f5acfca08b", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -8296,12 +8296,9 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n    call node earlier than the warning is generated.  */\n \n tree\n-fold_builtin (tree exp, bool ignore)\n+fold_builtin (tree fndecl, tree arglist, bool ignore)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n-\n-  exp = fold_builtin_1 (fndecl, arglist, ignore);\n+  tree exp = fold_builtin_1 (fndecl, arglist, ignore);\n   if (exp)\n     {\n       /* ??? Don't clobber shared nodes such as integer_zero_node.  */"}, {"sha": "2c4404b7676d1fe023f3b4669bcd3bfa88b6e7a9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -9909,7 +9909,9 @@ fold_ternary (tree expr)\n \t  && TREE_CODE (TREE_OPERAND (op0, 0)) == FUNCTION_DECL\n \t  && DECL_BUILT_IN (TREE_OPERAND (op0, 0)))\n \t{\n-\t  tree tmp = fold_builtin (t, false);\n+\t  tree fndecl = get_callee_fndecl (t);\n+\t  tree arglist = TREE_OPERAND (t, 1);\n+\t  tree tmp = fold_builtin (fndecl, arglist, false);\n \t  if (tmp)\n \t    return tmp;\n \t}"}, {"sha": "b902ce1c97fb539044cbde7c18a49302f3affc7d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -1744,7 +1744,9 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n   decl = get_callee_fndecl (*expr_p);\n   if (decl && DECL_BUILT_IN (decl))\n     {\n-      tree new = fold_builtin (*expr_p, !want_value);\n+      tree fndecl = get_callee_fndecl (*expr_p);\n+      tree arglist = TREE_OPERAND (*expr_p, 1);\n+      tree new = fold_builtin (fndecl, arglist, !want_value);\n \n       if (new && new != *expr_p)\n \t{\n@@ -1758,8 +1760,6 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n       if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n \t  && DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_START)\n         {\n-\t  tree arglist = TREE_OPERAND (*expr_p, 1);\n-\t  \n \t  if (!arglist || !TREE_CHAIN (arglist))\n \t    {\n \t      error (\"too few arguments to function %<va_start%>\");\n@@ -1802,7 +1802,9 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n   /* Try this again in case gimplification exposed something.  */\n   if (ret != GS_ERROR && decl && DECL_BUILT_IN (decl))\n     {\n-      tree new = fold_builtin (*expr_p, !want_value);\n+      tree fndecl = get_callee_fndecl (*expr_p);\n+      tree arglist = TREE_OPERAND (*expr_p, 1);\n+      tree new = fold_builtin (fndecl, arglist, !want_value);\n \n       if (new && new != *expr_p)\n \t{"}, {"sha": "9bae835d7cdde8aba92a63110c6bbf6d0708124b", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -938,6 +938,7 @@ ccp_fold (tree stmt)\n       if (NUM_USES (uses) != 0)\n \t{\n \t  tree *orig;\n+\t  tree fndecl, arglist;\n \t  size_t i;\n \n \t  /* Preserve the original values of every operand.  */\n@@ -947,7 +948,9 @@ ccp_fold (tree stmt)\n \n \t  /* Substitute operands with their values and try to fold.  */\n \t  replace_uses_in (stmt, NULL);\n-\t  retval = fold_builtin (rhs, false);\n+\t  fndecl = get_callee_fndecl (rhs);\n+\t  arglist = TREE_OPERAND (rhs, 1);\n+\t  retval = fold_builtin (fndecl, arglist, false);\n \n \t  /* Restore operands to their original form.  */\n \t  for (i = 0; i < NUM_USES (uses); i++)\n@@ -1929,7 +1932,9 @@ ccp_fold_builtin (tree stmt, tree fn)\n \n   /* First try the generic builtin folder.  If that succeeds, return the\n      result directly.  */\n-  result = fold_builtin (fn, ignore);\n+  callee = get_callee_fndecl (fn);\n+  arglist = TREE_OPERAND (fn, 1);\n+  result = fold_builtin (callee, arglist, ignore);\n   if (result)\n   {\n     if (ignore)\n@@ -1938,13 +1943,11 @@ ccp_fold_builtin (tree stmt, tree fn)\n   }\n \n   /* Ignore MD builtins.  */\n-  callee = get_callee_fndecl (fn);\n   if (DECL_BUILT_IN_CLASS (callee) == BUILT_IN_MD)\n     return NULL_TREE;\n \n   /* If the builtin could not be folded, and it has no argument list,\n      we're done.  */\n-  arglist = TREE_OPERAND (fn, 1);\n   if (!arglist)\n     return NULL_TREE;\n "}, {"sha": "96d0405603183d01ef29176bed2f84a94fd2934a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1af8985e7f1a889faa67f42937b1aee354ebd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=49d1af8985e7f1a889faa67f42937b1aee354ebd", "patch": "@@ -3563,7 +3563,7 @@ extern enum tree_code swap_tree_comparison (enum tree_code);\n extern bool ptr_difference_const (tree, tree, HOST_WIDE_INT *);\n \n /* In builtins.c */\n-extern tree fold_builtin (tree, bool);\n+extern tree fold_builtin (tree, tree, bool);\n extern tree fold_builtin_fputs (tree, bool, bool, tree);\n extern tree fold_builtin_strcpy (tree, tree, tree);\n extern tree fold_builtin_strncpy (tree, tree, tree);"}]}