{"sha": "07985c47dc79d90cea33dcd9f84ec288ab5df261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5ODVjNDdkYzc5ZDkwY2VhMzNkY2Q5Zjg0ZWMyODhhYjVkZjI2MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-14T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-14T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "2e532f6326d0cd0ce4c00023f21f8aec91ea753f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e532f6326d0cd0ce4c00023f21f8aec91ea753f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07985c47dc79d90cea33dcd9f84ec288ab5df261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07985c47dc79d90cea33dcd9f84ec288ab5df261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07985c47dc79d90cea33dcd9f84ec288ab5df261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07985c47dc79d90cea33dcd9f84ec288ab5df261/comments", "author": null, "committer": null, "parents": [{"sha": "104c05c5284b7822d770ee51a7d91946c7e56d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104c05c5284b7822d770ee51a7d91946c7e56d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104c05c5284b7822d770ee51a7d91946c7e56d50"}], "stats": {"total": 407, "additions": 406, "deletions": 1}, "files": [{"sha": "1e05f0e425ac23ce32d07361e3ee739e5618390c", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,12 @@\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config-list.mk: Remove m32r-linux and m32rle-linux\n+\tfrom the list.\n+\n+2021-09-13  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config-list.mk (LIST): --enable-obsolete for cr16-elf.\n+\n 2021-09-06  Serge Belyshev  <belyshev@depni.sinp.msu.ru>\n \n \t* gcc_update: Derive human readable name for HEAD using git describe"}, {"sha": "2c5a27b8868ce214371bb0dbc90955784ad42423", "filename": "gcc/ChangeLog", "status": "modified", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,231 @@\n+2021-09-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR bootstrap/101574\n+\t* diagnostic-spec.c (warning_suppressed_at, copy_warning): Handle\n+\t'RESERVED_LOCATION_P' locations.\n+\t* warning-control.cc (get_nowarn_spec, suppress_warning)\n+\t(copy_warning): Likewise.\n+\n+2021-09-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* diagnostic-spec.h (typedef xint_hash_t): Use 'location_t' instead of...\n+\t(typedef key_type_t): ... this.  Remove.\n+\t(nowarn_map): Document.\n+\t* diagnostic-spec.c (nowarn_map): Likewise.\n+\t* warning-control.cc (convert_to_key): Evolve functions into...\n+\t(get_location): ... these.  Adjust all users.\n+\n+2021-09-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* warning-control.cc (copy_warning): Remove 'nowarn_map' setup.\n+\n+2021-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* params.opt: Add destructive-interference-size and\n+\tconstructive-interference-size.\n+\t* doc/invoke.texi: Document them.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n+\tSet them.\n+\t* config/arm/arm.c (arm_option_override): Set them.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tSet them.\n+\n+2021-09-13  Martin Liska  <mliska@suse.cz>\n+\t    H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101696\n+\t* common/config/i386/cpuinfo.h (cpu_indicator_init): Add support\n+\tfor x86-64 micro levels for __builtin_cpu_supports.\n+\t* common/config/i386/i386-cpuinfo.h (enum feature_priority):\n+\tAdd priorities for the micro-arch levels.\n+\t(enum processor_features): Add new features.\n+\t* common/config/i386/i386-isas.h: Add micro-arch features.\n+\t* config/i386/i386-builtins.c (get_builtin_code_for_version):\n+\tSupport the micro-arch levels by callsing\n+\t__builtin_cpu_supports.\n+\t* doc/extend.texi: Document that the levels are support by\n+\t  __builtin_cpu_supports.\n+\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/95969\n+\t* config/aarch64/aarch64-builtins.c (aarch64_fold_builtin_lane_check):\n+\tNew function.\n+\t(aarch64_general_fold_builtin): Handle AARCH64_SIMD_BUILTIN_LANE_CHECK.\n+\t(aarch64_general_gimple_fold_builtin): Likewise.\n+\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config.gcc: Add m32r-*-linux* and m32rle-*-linux*\n+\tto the Unsupported targets list.\n+\tRemove support for m32r-*-linux* and m32rle-*-linux*.\n+\t* config/m32r/linux.h: Removed.\n+\t* config/m32r/t-linux: Removed.\n+\n+2021-09-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/102252\n+\t* config/aarch64/aarch64.c (aarch64_classify_address): Don't allow\n+\tregister index for SVE predicate modes.\n+\n+2021-09-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader_profitability::profitable_path_p): Remove FSM\n+\treferences.\n+\t(back_threader_registry::register_path): Same.\n+\t* tree-ssa-threadedge.c\n+\t(jump_threader::simplify_control_stmt_condition): Same.\n+\t* tree-ssa-threadupdate.c (jt_path_registry::jt_path_registry):\n+\tAdd backedge_threads argument.\n+\t(fwd_jt_path_registry::fwd_jt_path_registry): Pass\n+\tbackedge_threads argument.\n+\t(back_jt_path_registry::back_jt_path_registry):  Same.\n+\t(dump_jump_thread_path): Adjust for FSM removal.\n+\t(back_jt_path_registry::rewire_first_differing_edge): Same.\n+\t(back_jt_path_registry::adjust_paths_after_duplication): Same.\n+\t(back_jt_path_registry::update_cfg): Same.\n+\t(jt_path_registry::register_jump_thread): Same.\n+\t* tree-ssa-threadupdate.h (enum jump_thread_edge_type): Remove\n+\tEDGE_FSM_THREAD.\n+\t(class back_jt_path_registry): Add backedge_threads to\n+\tconstructor.\n+\n+2021-09-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/101331\n+\t* asan.h (sanitize_coverage_p): Handle when fn == NULL.\n+\n+2021-09-13  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101935\n+\t* config/i386/i386.h (TARGET_AVX256_MOVE_BY_PIECES): New.\n+\t(TARGET_AVX256_STORE_BY_PIECES): Likewise.\n+\t(MOVE_MAX): Check TARGET_AVX256_MOVE_BY_PIECES and\n+\tTARGET_AVX256_STORE_BY_PIECES instead of\n+\tTARGET_AVX256_SPLIT_UNALIGNED_LOAD and\n+\tTARGET_AVX256_SPLIT_UNALIGNED_STORE.\n+\t(STORE_MAX_PIECES): Check TARGET_AVX256_STORE_BY_PIECES instead\n+\tof TARGET_AVX256_SPLIT_UNALIGNED_STORE.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVX256_MOVE_BY_PIECES): New.\n+\t(X86_TUNE_AVX256_STORE_BY_PIECES): Likewise.\n+\n+2021-09-13  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR bootstrap/102302\n+\t* expmed.c (extract_bit_field_using_extv): Use\n+\tgen_lowpart_if_possible instead of gen_lowpart to avoid ICE.\n+\n+2021-09-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add value-pointer-equiv.o.\n+\t* gimple-ssa-evrp.c (class ssa_equiv_stack): Move to\n+\tvalue-pointer-equiv.*.\n+\t(ssa_equiv_stack::ssa_equiv_stack): Same.\n+\t(ssa_equiv_stack::enter): Same.\n+\t(ssa_equiv_stack::leave): Same.\n+\t(ssa_equiv_stack::push_replacement): Same.\n+\t(ssa_equiv_stack::get_replacement): Same.\n+\t(is_pointer_ssa): Same.\n+\t(class pointer_equiv_analyzer): Same.\n+\t(pointer_equiv_analyzer::pointer_equiv_analyzer): Same.\n+\t(pointer_equiv_analyzer::~pointer_equiv_analyzer): Same.\n+\t(pointer_equiv_analyzer::set_global_equiv): Same.\n+\t(pointer_equiv_analyzer::set_cond_equiv): Same.\n+\t(pointer_equiv_analyzer::get_equiv): Same.\n+\t(pointer_equiv_analyzer::enter): Same.\n+\t(pointer_equiv_analyzer::leave): Same.\n+\t(pointer_equiv_analyzer::get_equiv_expr): Same.\n+\t(pta_valueize): Same.\n+\t(pointer_equiv_analyzer::visit_stmt): Same.\n+\t(pointer_equiv_analyzer::visit_edge): Same.\n+\t(hybrid_folder::value_of_expr): Same.\n+\t(hybrid_folder::value_on_edge): Same.\n+\t* value-pointer-equiv.cc: New file.\n+\t* value-pointer-equiv.h: New file.\n+\n+2021-09-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/102125\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Allow folding\n+\tmemcpy if the size is not more than MOVE_MAX * MOVE_RATIO.\n+\n+2021-09-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/102125\n+\t* config/arm/arm.md (movmisaligndi): New define_expand.\n+\t* config/arm/vec-common.md (movmisalign<mode>): Iterate over VDQ mode.\n+\n+2021-09-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/102125\n+\t* emit-rtl.c (gen_highpart): Use adjust_address to handle\n+\tMEM rather than calling simplify_gen_subreg.\n+\n+2021-09-13  Jan-Benedict Glaw  <jbglaw@\u0142ug-owl.de>\n+\n+\t* config/alpha/vms.h (INIT_CUMULATIVE_ARGS): Wrap multi-statment\n+\tdefine into a block.\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/darwin.h (DARWIN_PREFER_DWARF): Do not define.\n+\t* config/i386/darwin.h (PREFERRED_DEBUGGING_TYPE): Do not\n+\tchange based on DARWIN_PREFER_DWARF not being defined.\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/lynx.h: Remove undef of PREFERRED_DEBUGGING_TYPE\n+\tto inherit from elfos.h\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config.gcc: Add cr16-*-* to the list of obsoleted targets.\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/avr/elf.h (PREFERRED_DEBUGGING_TYPE): Remove\n+\toverride, pick up DWARF2_DEBUG define from elfos.h\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/rx/rx.h (PREFERRED_DEBUGGING_TYPE): Always define to\n+\tDWARF2_DEBUG.\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/alpha/vms.h (PREFERRED_DEBUGGING_TYPE): Define to\n+\tDWARF2_DEBUG.\n+\n+2021-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/cygming.h: Always default to DWARF2 debugging.\n+\tDo not define DBX_DEBUGGING_INFO, that's done via dbxcoff.h\n+\talready.\n+\t* doc/install.texi: Document binutils 2.16 as minimum\n+\trequirement for mingw.\n+\n+2021-09-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (struct rs6000_cost_data): New members\n+\tnstmts, nloads and extra_ctor_cost.\n+\t(rs6000_density_test): Add load density related heuristics.  Do\n+\textra costing on vector construction statements if need.\n+\t(rs6000_init_cost): Init new members.\n+\t(rs6000_update_target_cost_per_stmt): New function.\n+\t(rs6000_add_stmt_cost): Factor vect_nonmem hunk out to function\n+\trs6000_update_target_cost_per_stmt and call it.\n+\n+2021-09-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (struct rs6000_cost_data): Remove typedef.\n+\t(rs6000_init_cost): Adjust.\n+\n+2021-09-13  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.md: (UNSPEC_COPYSIGN): Remove.\n+\t(UNSPEC_XORSIGN): Ditto.\n+\n 2021-09-12  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* expr.c (convert_move): Preserve SUBREG_PROMOTED_VAR_P when"}, {"sha": "d0d660493dfe82c5617554997e57fcbb2f8279eb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1 +1 @@\n-20210913\n+20210914"}, {"sha": "d4be236f94d0ee1903f5224ab114453b04cf176c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,9 @@\n+2021-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -Winterference-size.\n+\t* c-cppbuiltin.c (cpp_atomic_builtins): Add __GCC_DESTRUCTIVE_SIZE\n+\tand __GCC_CONSTRUCTIVE_SIZE.\n+\n 2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (c_finish_omp_atomic): Add r and weak arguments."}, {"sha": "50f35626ba4e6e010357fb278a9ed7e32ca8a60a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,28 @@\n+2021-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (maybe_warn_about_constant_value):\n+\tComplain about std::hardware_destructive_interference_size.\n+\t(cxx_eval_constant_expression): Call it.\n+\t* decl.c (cxx_init_decl_processing): Check\n+\t--param *-interference-size values.\n+\n+2021-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101764\n+\t* cp-tree.h (PACK_EXPANSION_FORCE_EXTRA_ARGS_P): New accessor\n+\tmacro.\n+\t* pt.c (has_extra_args_mechanism_p): New function.\n+\t(find_parameter_pack_data::found_extra_args_tree_p): New data\n+\tmember.\n+\t(find_parameter_packs_r): Set ppd->found_extra_args_tree_p\n+\tappropriately.\n+\t(make_pack_expansion): Set PACK_EXPANSION_FORCE_EXTRA_ARGS_P if\n+\tppd.found_extra_args_tree_p.\n+\t(use_pack_expansion_extra_args_p): Return true if there were\n+\tunsubstituted packs and PACK_EXPANSION_FORCE_EXTRA_ARGS_P.\n+\t(tsubst_pack_expansion): Pass the pack expansion to\n+\tuse_pack_expansion_extra_args_p.\n+\n 2021-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_atomic): Allow acq_rel on atomic read/write"}, {"sha": "c36d1b6fbe59daab67d7e642d160d435033beb92", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,16 @@\n+2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/82314\n+\t* decl.c (add_init_expr_to_sym): For proper initialization of\n+\tarray-valued named constants the array bounds need to be\n+\tsimplified before adding the initializer.\n+\n+2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/85130\n+\t* expr.c (find_substring_ref): Handle given substring start and\n+\tend indices as signed integers, not unsigned.\n+\n 2021-09-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/98490"}, {"sha": "22409ad1e342506cc60d0a153d75c2a1aa02b0ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,104 @@\n+2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/82314\n+\t* gfortran.dg/pr82314.f90: New test.\n+\n+2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/85130\n+\t* gfortran.dg/substr_6.f90: Revert commit r8-7574, adding again\n+\ttest that was erroneously considered as illegal.\n+\n+2021-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/warn/Winterference.H: New file.\n+\t* g++.dg/warn/Winterference.C: New test.\n+\t* g++.target/aarch64/interference.C: New test.\n+\t* g++.target/arm/interference.C: New test.\n+\t* g++.target/i386/interference.C: New test.\n+\t* g++.dg/warn/Winterference-2.C: New file.\n+\n+2021-09-13  Martin Liska  <mliska@suse.cz>\n+\t    H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101696\n+\t* g++.target/i386/mv30.C: New test.\n+\t* gcc.target/i386/mvc16.c: New test.\n+\t* gcc.target/i386/builtin_target.c (CHECK___builtin_cpu_supports):\n+\tNew.\n+\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/95969\n+\t* gcc.target/aarch64/lane-bound-1.c: New test.\n+\t* gcc.target/aarch64/lane-bound-2.c: New test.\n+\n+2021-09-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/102252\n+\t* g++.target/aarch64/sve/pr102252.C: New test.\n+\n+2021-09-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr21417.c: Adjust for FSM removal.\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Same.\n+\t* gcc.dg/tree-ssa/pr68198.c: Same.\n+\t* gcc.dg/tree-ssa/pr69196-1.c: Same.\n+\t* gcc.dg/tree-ssa/pr70232.c: Same.\n+\t* gcc.dg/tree-ssa/pr77445.c: Same.\n+\t* gcc.dg/tree-ssa/ranger-threader-4.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-thread-13.c: Same.\n+\n+2021-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101764\n+\t* g++.dg/cpp1z/constexpr-if35.C: New test.\n+\n+2021-09-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/101331\n+\t* g++.dg/pr101331.C: New test.\n+\n+2021-09-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust for aarch64.\n+\n+2021-09-13  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101935\n+\t* g++.target/i386/pr80566-1.C: Add\n+\t-mtune-ctrl=avx256_store_by_pieces.\n+\t* gcc.target/i386/pr100865-4a.c: Likewise.\n+\t* gcc.target/i386/pr100865-10a.c: Likewise.\n+\t* gcc.target/i386/pr90773-20.c: Likewise.\n+\t* gcc.target/i386/pr90773-21.c: Likewise.\n+\t* gcc.target/i386/pr90773-22.c: Likewise.\n+\t* gcc.target/i386/pr90773-23.c: Likewise.\n+\t* g++.target/i386/pr80566-2.C: Add\n+\t-mtune-ctrl=avx256_move_by_pieces.\n+\t* gcc.target/i386/eh_return-1.c: Likewise.\n+\t* gcc.target/i386/pr90773-26.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-12.c: Replace -mtune=haswell\n+\twith -mtune-ctrl=avx256_move_by_pieces.\n+\t* gcc.target/i386/pieces-memcpy-15.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-2.c: Replace -mtune=haswell\n+\twith -mtune-ctrl=avx256_store_by_pieces.\n+\t* gcc.target/i386/pieces-memset-5.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-11.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-14.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-20.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-23.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-29.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-30.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-33.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-34.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-44.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-37.c: Replace -mtune=generic\n+\twith -mtune-ctrl=avx256_store_by_pieces.\n+\n 2021-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/102185"}, {"sha": "abd38fe0b151293552efaefdfd8792836b8c368b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,9 @@\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config.host: Remove m32r-*-linux* and m32rle-*-linux*.\n+\t* config/m32r/libgcc-glibc.ver: Removed.\n+\t* config/m32r/t-linux: Removed.\n+\n 2021-09-08  liuhongt  <hongtao.liu@intel.com>\n \n \t* config/i386/t-softfp: Compile __{mul,div}hc3 into"}, {"sha": "739ccbc1e33d0b04addfa0cc51507560d0e6a69b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,9 @@\n+2021-09-13  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* ISO_Fortran_binding.h (CFI_type_long_double)\n+\t(CFI_type_long_double_Complex) [LDBL_MANT_DIG == 64 &&\n+\tLDBL_MIN_EXP == -16382 && LDBL_MAX_EXP == 16384]: Define.\n+\n 2021-09-07  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* Makefile.am (gfor_built_src): Depend on"}, {"sha": "84c7e832180a64794750c224a8edd42b5b2de361", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,8 @@\n+2021-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* include/std/version: Define __cpp_lib_hardware_interference_size.\n+\t* libsupc++/new: Define hardware interference size variables.\n+\n 2021-09-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:"}, {"sha": "0a849d2cc5144b82e3dd9982e7db430faca9bde9", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07985c47dc79d90cea33dcd9f84ec288ab5df261/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07985c47dc79d90cea33dcd9f84ec288ab5df261/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=07985c47dc79d90cea33dcd9f84ec288ab5df261", "patch": "@@ -1,3 +1,9 @@\n+2021-09-13  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR lto/49664\n+\t* Makefile.am: Export only onload.\n+\t* Makefile.in: Regenerate.\n+\n 2021-06-25  Richard Biener  <rguenther@suse.de>\n \n \t* lto-plugin.c (ltrans_objects): New global."}]}