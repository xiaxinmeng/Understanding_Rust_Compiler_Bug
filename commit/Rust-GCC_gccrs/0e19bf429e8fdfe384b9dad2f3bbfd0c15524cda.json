{"sha": "0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxOWJmNDI5ZThmZGZlMzg0YjlkYWQyZjNiYmZkMGMxNTUyNGNkYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-06-04T08:28:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-04T08:28:20Z"}, "message": "tree-ssa-structalias.c (handle_ptr_arith): Correctly handle negative or non-representable offsets.\n\n2008-06-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (handle_ptr_arith): Correctly handle\n\tnegative or non-representable offsets.\n\n\t* gcc.c-torture/execute/20080604-1.c: New testcase.\n\nFrom-SVN: r136351", "tree": {"sha": "33671adf33b9edd9e36895c610444498f3801a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33671adf33b9edd9e36895c610444498f3801a41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c750c990445c1437910c18b9e79fba5713a770c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c750c990445c1437910c18b9e79fba5713a770c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c750c990445c1437910c18b9e79fba5713a770c1"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "0cb236d63111d5609b6f4575d45f7bae9aa0aff6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "patch": "@@ -1,3 +1,8 @@\n+2008-06-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (handle_ptr_arith): Correctly handle\n+\tnegative or non-representable offsets.\n+\n 2008-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t*  config/i386/i386.c (ix86_gen_leave): New."}, {"sha": "d43613a3a06ebb51e11e6eea8b2b11ff0a695237", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "patch": "@@ -1,3 +1,7 @@\n+2008-06-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.c-torture/execute/20080604-1.c: New testcase.\n+\n 2008-06-03  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \tPR/34880"}, {"sha": "5ba35cb2cf5c22ef825793facfcdff697da3e3f7", "filename": "gcc/testsuite/gcc.c-torture/execute/20080604-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080604-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080604-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080604-1.c?ref=0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "patch": "@@ -0,0 +1,32 @@\n+struct barstruct { char const* some_string; } x;\n+extern void abort (void);\n+void __attribute__((noinline))\n+foo(void)\n+{\n+  if (!x.some_string)\n+    abort ();\n+}\n+void baz(int b)\n+{\n+  struct barstruct bar;\n+  struct barstruct* barptr;\n+  if (b)\n+    barptr = &bar;\n+  else\n+    {\n+      barptr = &x + 1;\n+      barptr = barptr - 1;\n+    }\n+  barptr->some_string = \"Everything OK\";\n+  foo();\n+  barptr->some_string = \"Everything OK\";\n+}\n+int main()\n+{\n+  x.some_string = (void *)0;\n+  baz(0);\n+  if (!x.some_string)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "570c173b3a949de24149a6d9d8178714458a0cb8", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "patch": "@@ -3531,8 +3531,7 @@ handle_ptr_arith (VEC (ce_s, heap) *lhsc, tree expr)\n   unsigned int i = 0;\n   unsigned int j = 0;\n   VEC (ce_s, heap) *temp = NULL;\n-  unsigned int rhsoffset = 0;\n-  bool unknown_addend = false;\n+  unsigned HOST_WIDE_INT rhsunitoffset, rhsoffset;\n \n   if (TREE_CODE (expr) != POINTER_PLUS_EXPR)\n     return false;\n@@ -3541,13 +3540,18 @@ handle_ptr_arith (VEC (ce_s, heap) *lhsc, tree expr)\n   op1 = TREE_OPERAND (expr, 1);\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (op0)));\n \n-  get_constraint_for (op0, &temp);\n+  /* If the offset is not a non-negative integer constant that fits\n+     in a HOST_WIDE_INT, we cannot handle it here.  */\n+  if (!host_integerp (op1, 1))\n+    return false;\n \n-  /* Handle non-constants by making constraints from integer.  */\n-  if (TREE_CODE (op1) == INTEGER_CST)\n-    rhsoffset = TREE_INT_CST_LOW (op1) * BITS_PER_UNIT;\n-  else\n-    unknown_addend = true;\n+  /* Make sure the bit-offset also fits.  */\n+  rhsunitoffset = TREE_INT_CST_LOW (op1);\n+  rhsoffset = rhsunitoffset * BITS_PER_UNIT;\n+  if (rhsunitoffset != rhsoffset / BITS_PER_UNIT)\n+    return false;\n+\n+  get_constraint_for (op0, &temp);\n \n   for (i = 0; VEC_iterate (ce_s, lhsc, i, c); i++)\n     for (j = 0; VEC_iterate (ce_s, temp, j, c2); j++)\n@@ -3564,30 +3568,6 @@ handle_ptr_arith (VEC (ce_s, heap) *lhsc, tree expr)\n \t    c2->var = temp->id;\n \t    c2->offset = 0;\n \t  }\n-\telse if (unknown_addend)\n-\t  {\n-\t    /* Can't handle *a + integer where integer is unknown.  */\n-\t    if (c2->type != SCALAR)\n-\t      {\n-\t\tstruct constraint_expr intc;\n-\t\tintc.var = integer_id;\n-\t\tintc.offset = 0;\n-\t\tintc.type = SCALAR;\n-\t\tprocess_constraint (new_constraint (*c, intc));\n-\t      }\n-\t    else\n-\t      {\n-\t\t/* We known it lives somewhere within c2->var.  */\n-\t\tvarinfo_t tmp = get_varinfo (c2->var);\n-\t\tfor (; tmp; tmp = tmp->next)\n-\t\t  {\n-\t\t    struct constraint_expr tmpc = *c2;\n-\t\t    c2->var = tmp->id;\n-\t\t    c2->offset = 0;\n-\t\t    process_constraint (new_constraint (*c, tmpc));\n-\t\t  }\n-\t      }\n-\t  }\n \telse\n \t  c2->offset = rhsoffset;\n \tprocess_constraint (new_constraint (*c, *c2));"}]}