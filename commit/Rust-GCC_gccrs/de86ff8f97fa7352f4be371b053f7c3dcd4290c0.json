{"sha": "de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4NmZmOGY5N2ZhNzM1MmY0YmUzNzFiMDUzZjdjM2RjZDQyOTBjMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-06-24T17:32:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-06-24T17:32:52Z"}, "message": "Call tls_get_addr via GOT for GNU TLS if possible\n\nThere are extensions to x86-64 psABI:\n\nhttps://groups.google.com/forum/#!topic/x86-64-abi/de5_KnLHxtI\n\nand i386 psABI:\n\nhttps://groups.google.com/forum/#!topic/ia32-abi/awsRSvJOJfs\n\nto call tls_get_addr via GOT.  X86 assembler and linker in binutils 2.27\nimplemented\n\ncall *__tls_get_addr@GOTPCREL(%rip)\n\nin 64-bit and\n\ncall *___tls_get_addr@GOT(%reg)\n\nin 32-bit to access global and local thread loal variables in shared\nlibrary.  We check if 32-bit x86 assembler and linker work with\n\ncall *___tls_get_addr@GOT(%reg)\n\nas 32-bit and 64-bit assembler and linker are enabled togther.\n\nIn 32-bit, since any integer register except EAX, which is used to pass\nparameter to ___tls_get_addr, and ESP, can be used as GOT base, a new\nregister class, TLS_GOTBASE_REGS, along with a new constraint, Yb, are\nadded.  They are used to improve register allocation for 32-bit dynamic\nTLS patterns.\n\ngcc/\n\n\t* configure.ac (calling ___tls_get_addr via GOT): New\n\tassembler/linker check.\n\t(HAVE_AS_IX86_TLS_GET_ADDR_GOT): New.  Defined to 1 if 32-bit\n\tassembler and linker supports calling ___tls_get_addr via GOT.\n\tOtherise, defined to 0.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* config/i386/constraints.md (Yb): New constraint.\n\t* config/i386/i386.h (reg_class): Add TLS_GOTBASE_REGS.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Replace\n\tthe b constraint with the Yb constraint.  Call ___tls_get_addr\n\tvia GOT for GNU TLS with -fno-plt if HAVE_AS_IX86_TLS_GET_ADDR_GOT\n\tis 1.\n\t(*tls_local_dynamic_base_32_gnu): Likewise.\n\t(*tls_global_dynamic_64_<mode>): Call _tls_get_addr via GOT for\n\tGNU TLS with -fno-plt if HAVE_AS_IX86_TLS_GET_ADDR_GOT is 1.\n\t(*tls_local_dynamic_base_64_<mode>): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/noplt-gd-1.c: New test.\n\t* gcc.target/i386/noplt-gd-2.c: Likewise.\n\t* gcc.target/i386/noplt-gd-3.c: Likewise.\n\t* gcc.target/i386/noplt-ld-1.c: Likewise.\n\t* gcc.target/i386/noplt-ld-2.c: Likewise.\n\t* gcc.target/i386/noplt-ld-3.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_tls_get_addr_via_got): New.\n\nFrom-SVN: r237765", "tree": {"sha": "aee674d43127c835322300b182f3d315b08bbe59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee674d43127c835322300b182f3d315b08bbe59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/comments", "author": null, "committer": null, "parents": [{"sha": "a7898180189f1aee3fba9d99b458c9800fadec61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7898180189f1aee3fba9d99b458c9800fadec61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7898180189f1aee3fba9d99b458c9800fadec61"}], "stats": {"total": 315, "additions": 306, "deletions": 9}, "files": [{"sha": "fc3321cb1466433c02971768e847f4f85e7d4e34", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -485,6 +485,13 @@\n #endif\n \n \n+/* Define 0/1 if your assembler and linker support calling ___tls_get_addr via\n+   GOT. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_TLS_GET_ADDR_GOT\n+#endif\n+\n+\n /* Define if your assembler supports the 'ud2' mnemonic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_UD2"}, {"sha": "d61033679ac472169f5f7879697319acac85db0b", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -104,6 +104,10 @@\n ;;  m\tMMX inter-unit moves to MMX register enabled\n ;;  n\tMMX inter-unit moves from MMX register enabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n+;;  b\tAny register that can be used as the GOT base when calling\n+;;\t___tls_get_addr: that is, any general register except EAX\n+;;\tand ESP, for -fno-plt if linker supports it.  Otherwise,\n+;;\tEBX.\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  f\tx87 register when 80387 floating point arithmetic is enabled\n ;;  r\tSSE regs not requiring REX prefix when prefixes avoidance is enabled\n@@ -137,6 +141,13 @@\n   ? NO_REGS : GENERAL_REGS\"\n  \"@internal Any integer register when zero extensions with AND are disabled.\")\n \n+(define_register_constraint \"Yb\"\n+ \"(!flag_plt && HAVE_AS_IX86_TLS_GET_ADDR_GOT) ? TLS_GOTBASE_REGS : BREG\"\n+ \"@internal Any register that can be used as the GOT base when calling\n+  ___tls_get_addr: that is, any general register except @code{a} and\n+  @code{sp} registers, for -fno-plt if linker supports it.  Otherwise,\n+  @code{b} register.\")\n+\n (define_register_constraint \"Yf\"\n  \"(ix86_fpmath & FPMATH_387) ? FLOAT_REGS : NO_REGS\"\n  \"@internal Any x87 register when 80387 FP arithmetic is enabled.\")"}, {"sha": "9b662648f7f7ae9b42d1b39818cdecd68d55f266", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -1347,6 +1347,7 @@ enum reg_class\n   CLOBBERED_REGS,\t\t/* call-clobbered integer registers */\n   Q_REGS,\t\t\t/* %eax %ebx %ecx %edx */\n   NON_Q_REGS,\t\t\t/* %esi %edi %ebp %esp */\n+  TLS_GOTBASE_REGS,\t\t/* %ebx %ecx %edx %esi %edi %ebp */\n   INDEX_REGS,\t\t\t/* %eax %ebx %ecx %edx %esi %edi %ebp */\n   LEGACY_REGS,\t\t\t/* %eax %ebx %ecx %edx %esi %edi %ebp %esp */\n   GENERAL_REGS,\t\t\t/* %eax %ebx %ecx %edx %esi %edi %ebp %esp\n@@ -1407,6 +1408,7 @@ enum reg_class\n    \"AD_REGS\",\t\t\t\t\\\n    \"CLOBBERED_REGS\",\t\t\t\\\n    \"Q_REGS\", \"NON_Q_REGS\",\t\t\\\n+   \"TLS_GOTBASE_REGS\",\t\t\t\\\n    \"INDEX_REGS\",\t\t\t\\\n    \"LEGACY_REGS\",\t\t\t\\\n    \"GENERAL_REGS\",\t\t\t\\\n@@ -1447,6 +1449,7 @@ enum reg_class\n       { 0x07,       0x0,    0x0 },       /* CLOBBERED_REGS */            \\\n       { 0x0f,       0x0,    0x0 },       /* Q_REGS */                    \\\n   { 0x1100f0,    0x1fe0,    0x0 },       /* NON_Q_REGS */                \\\n+      { 0x7e,    0x1fe0,    0x0 },       /* TLS_GOTBASE_REGS */\t\t \\\n       { 0x7f,    0x1fe0,    0x0 },       /* INDEX_REGS */                \\\n   { 0x1100ff,       0x0,    0x0 },       /* LEGACY_REGS */               \\\n   { 0x1100ff,    0x1fe0,    0x0 },       /* GENERAL_REGS */              \\"}, {"sha": "bb701021f4c0a67a00c14a709e9f697943b64951", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -13565,7 +13565,7 @@\n (define_insn \"*tls_global_dynamic_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI\n-\t [(match_operand:SI 1 \"register_operand\" \"b\")\n+\t [(match_operand:SI 1 \"register_operand\" \"Yb\")\n \t  (match_operand 2 \"tls_symbolic_operand\")\n \t  (match_operand 3 \"constant_call_address_operand\" \"Bz\")\n \t  (reg:SI SP_REG)]\n@@ -13575,15 +13575,21 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n {\n-  output_asm_insn\n-    (\"lea{l}\\t{%E2@tlsgd(,%1,1), %0|%0, %E2@tlsgd[%1*1]}\", operands);\n+  if (TARGET_SUN_TLS || flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    output_asm_insn\n+      (\"lea{l}\\t{%E2@tlsgd(,%1,1), %0|%0, %E2@tlsgd[%1*1]}\", operands);\n+  else\n+    output_asm_insn\n+      (\"lea{l}\\t{%E2@tlsgd(%1), %0|%0, %E2@tlsgd[%1]}\", operands);\n   if (TARGET_SUN_TLS)\n #ifdef HAVE_AS_IX86_TLSGDPLT\n     return \"call\\t%a2@tlsgdplt\";\n #else\n     return \"call\\t%p3@plt\";\n #endif\n-  return \"call\\t%P3\";\n+  if (flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    return \"call\\t%P3\";\n+  return \"call\\t{*%p3@GOT(%1)|[DWORD PTR %p3@GOT[%1]]}\";\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n@@ -13616,11 +13622,16 @@\n     fputs (ASM_BYTE \"0x66\\n\", asm_out_file);\n   output_asm_insn\n     (\"lea{q}\\t{%E1@tlsgd(%%rip), %%rdi|rdi, %E1@tlsgd[rip]}\", operands);\n-  fputs (ASM_SHORT \"0x6666\\n\", asm_out_file);\n+  if (TARGET_SUN_TLS || flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    fputs (ASM_SHORT \"0x6666\\n\", asm_out_file);\n+  else\n+    fputs (ASM_BYTE \"0x66\\n\", asm_out_file);\n   fputs (\"\\trex64\\n\", asm_out_file);\n   if (TARGET_SUN_TLS)\n     return \"call\\t%p2@plt\";\n-  return \"call\\t%P2\";\n+  if (flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    return \"call\\t%P2\";\n+  return \"call\\t{*%p2@GOTPCREL(%%rip)|[QWORD PTR %p2@GOTPCREL[rip]]}\";\n }\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n@@ -13664,7 +13675,7 @@\n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI\n-\t [(match_operand:SI 1 \"register_operand\" \"b\")\n+\t [(match_operand:SI 1 \"register_operand\" \"Yb\")\n \t  (match_operand 2 \"constant_call_address_operand\" \"Bz\")\n \t  (reg:SI SP_REG)]\n \t UNSPEC_TLS_LD_BASE))\n@@ -13682,7 +13693,9 @@\n       else\n \treturn \"call\\t%p2@plt\";\n     }\n-  return \"call\\t%P2\";\n+  if (flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    return \"call\\t%P2\";\n+  return \"call\\t{*%p2@GOT(%1)|[DWORD PTR %p2@GOT[%1]]}\";\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"11\")])\n@@ -13713,7 +13726,9 @@\n     (\"lea{q}\\t{%&@tlsld(%%rip), %%rdi|rdi, %&@tlsld[rip]}\", operands);\n   if (TARGET_SUN_TLS)\n     return \"call\\t%p1@plt\";\n-  return \"call\\t%P1\";\n+  if (flag_plt || !HAVE_AS_IX86_TLS_GET_ADDR_GOT)\n+    return \"call\\t%P1\";\n+  return \"call\\t{*%p1@GOTPCREL(%%rip)|[QWORD PTR %p1@GOTPCREL[rip]]}\";\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])"}, {"sha": "ed4447299c2fd18c4089e3e9412a38d73bbe7d8e", "filename": "gcc/configure", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -26007,6 +26007,59 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+    conftest_s='\n+\t.section .text,\"ax\",@progbits\n+\t.globl  _start\n+\t.type   _start, @function\n+_start:\n+\tleal\tld@tlsldm(%ecx), %eax\n+\tcall\t*___tls_get_addr@GOT(%ecx)\n+\tleal\tgd@tlsgd(%ecx), %eax\n+\tcall\t*___tls_get_addr@GOT(%ecx)\n+\n+\t.section .tdata,\"aw'$tls_section_flag'\",@progbits\n+\t.type\tld, @object\n+ld:\n+\t.byte 0\n+\t.globl  gd\n+\t.type\tgd, @object\n+gd:\n+\t.byte 0'\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for calling ___tls_get_addr via GOT\" >&5\n+$as_echo_n \"checking assembler for calling ___tls_get_addr via GOT... \" >&6; }\n+if test \"${gcc_cv_as_ix86_tls_get_addr_via_got+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_ix86_tls_get_addr_via_got=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags $as_ix86_gas_32_opt -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tif test x$gcc_cv_ld != x \\\n+\t    && $gcc_cv_ld $ld_ix86_gld_32_opt -o conftest conftest.o > /dev/null 2>&1; then\n+\t   gcc_cv_as_ix86_tls_get_addr_via_got=yes\n+\t fi\n+\t rm -f conftest\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_tls_get_addr_via_got\" >&5\n+$as_echo \"$gcc_cv_as_ix86_tls_get_addr_via_got\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_IX86_TLS_GET_ADDR_GOT `if test x\"$gcc_cv_as_ix86_tls_get_addr_via_got\" = xyes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n     ;;\n \n   ia64*-*-*)"}, {"sha": "086d0fc3eca79a87c257bbaee2440bb11601cfd1", "filename": "gcc/configure.ac", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -4228,6 +4228,36 @@ _start:\n       [`if test $gcc_cv_as_ix86_gotoff_in_data = yes; then echo 1; else echo 0; fi`],\n       [Define true if the assembler supports '.long foo@GOTOFF'.])\n \n+    conftest_s='\n+\t.section .text,\"ax\",@progbits\n+\t.globl  _start\n+\t.type   _start, @function\n+_start:\n+\tleal\tld@tlsldm(%ecx), %eax\n+\tcall\t*___tls_get_addr@GOT(%ecx)\n+\tleal\tgd@tlsgd(%ecx), %eax\n+\tcall\t*___tls_get_addr@GOT(%ecx)\n+\n+\t.section .tdata,\"aw'$tls_section_flag'\",@progbits\n+\t.type\tld, @object\n+ld:\n+\t.byte 0\n+\t.globl  gd\n+\t.type\tgd, @object\n+gd:\n+\t.byte 0'\n+    gcc_GAS_CHECK_FEATURE([calling ___tls_get_addr via GOT],\n+        gcc_cv_as_ix86_tls_get_addr_via_got,,\n+\t[$as_ix86_gas_32_opt],\n+\t[$conftest_s],\n+\t[if test x$gcc_cv_ld != x \\\n+\t    && $gcc_cv_ld $ld_ix86_gld_32_opt -o conftest conftest.o > /dev/null 2>&1; then\n+\t   gcc_cv_as_ix86_tls_get_addr_via_got=yes\n+\t fi\n+\t rm -f conftest])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_IX86_TLS_GET_ADDR_GOT,\n+      [`if test x\"$gcc_cv_as_ix86_tls_get_addr_via_got\" = xyes; then echo 1; else echo 0; fi`],\n+      [Define 0/1 if your assembler and linker support calling ___tls_get_addr via GOT.])\n     ;;\n \n   ia64*-*-*)"}, {"sha": "5d5b531b744ababebba139db3d7607953f57aba6", "filename": "gcc/testsuite/gcc.target/i386/noplt-gd-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-1.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { *-*-linux* && tls_get_addr_via_got } } } */\n+/* { dg-options \"-fpic -fno-plt\" } */\n+\n+extern __thread int gd;\n+\n+int *\n+get_gd (void)\n+{\n+  return &gd;\n+}\n+\n+void\n+set_gd (int i)\n+{\n+  gd = i;\n+}\n+\n+int\n+test_gd (int i)\n+{\n+  return gd == i;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]\\\\*__tls_get_addr@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]\\\\*___tls_get_addr@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]__tls_get_addr@PLT\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]___tls_get_addr@PLT\" { target ia32 } } } */"}, {"sha": "9a6c275ac1ea5ad2def0c753a634a9184c9bd03e", "filename": "gcc/testsuite/gcc.target/i386/noplt-gd-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-2.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+/* { dg-additional-sources noplt-gd-1.c } */\n+\n+__thread int gd = 1;\n+extern void abort (void);\n+extern int * get_gd (void);\n+extern void set_gd (int);\n+extern int test_gd (int);\n+\n+int\n+main ()\n+{\n+  int *p;\n+ \n+  if (gd != 1)\n+    abort ();\n+\n+  p = get_gd ();\n+  if (*p != gd)\n+    abort ();\n+\n+  set_gd (4);\n+  if (*p != 4 || !test_gd (4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6b0e780b74503972e128e1d7f192644cb4c49294", "filename": "gcc/testsuite/gcc.target/i386/noplt-gd-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-gd-3.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { *-*-linux* && { ia32 && tls_get_addr_via_got } } } } */\n+/* { dg-options \"-fpic -fno-plt\" } */\n+\n+extern __thread int gd;\n+\n+int *\n+get_gd (void)\n+{\n+  return &gd;\n+}\n+\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]\\\\*___tls_get_addr@GOT\\\\(%ebx\\\\)\" } } */"}, {"sha": "87698301bff16daeeaff21228367c34b63f4d8ff", "filename": "gcc/testsuite/gcc.target/i386/noplt-ld-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-1.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { *-*-linux* && tls_get_addr_via_got } } } */\n+/* { dg-options \"-fpic -fno-plt\" } */\n+\n+static __thread int ld;\n+\n+int *\n+get_ld (void)\n+{\n+  return &ld;\n+}\n+\n+void\n+set_ld (int i)\n+{\n+  ld = i;\n+}\n+\n+int\n+test_ld (int i)\n+{\n+  return ld == i;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]\\\\*__tls_get_addr@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]\\\\*___tls_get_addr@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]__tls_get_addr@PLT\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]___tls_get_addr@PLT\" { target ia32 } } } */"}, {"sha": "86cc93e0844a482c7d761148302637a213a37677", "filename": "gcc/testsuite/gcc.target/i386/noplt-ld-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-2.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+/* { dg-additional-sources noplt-ld-1.c } */\n+\n+extern void abort (void);\n+extern int * get_ld (void);\n+extern void set_ld (int);\n+extern int test_ld (int);\n+\n+int\n+main ()\n+{\n+  int *p;\n+ \n+  p = get_ld ();\n+  set_ld (4);\n+  if (*p != 4 || !test_ld (4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "b014d53baabe47567cab7d82072f01d5300607f2", "filename": "gcc/testsuite/gcc.target/i386/noplt-ld-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnoplt-ld-3.c?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { *-*-linux* && { ia32 && tls_get_addr_via_got } } } } */\n+/* { dg-options \"-fpic -fno-plt\" } */\n+\n+static __thread int ld;\n+\n+int *\n+get_ld (void)\n+{\n+  return &ld;\n+}\n+\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]\\\\*___tls_get_addr@GOT\\\\(%ebx\\\\)\" } } */"}, {"sha": "de6c072fb0a2f60baa7ea1e4e84e309751ab83da", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de86ff8f97fa7352f4be371b053f7c3dcd4290c0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=de86ff8f97fa7352f4be371b053f7c3dcd4290c0", "patch": "@@ -7111,6 +7111,57 @@ proc check_effective_target_got32x_reloc { } {\n     return $got32x_reloc_available_saved\n }\n \n+# Return 1 if the x86 target supports calling ___tls_get_addr via GOT,\n+# 0 otherwise.  Cache the result.\n+\n+proc check_effective_target_tls_get_addr_via_got { } {\n+    global tls_get_addr_via_got_available_saved\n+    global tool\n+    global GCC_UNDER_TEST\n+\n+    if { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\treturn 0\n+    }\n+\n+    # Need auto-host.h to check linker support.\n+    if { ![file exists ../../auto-host.h ] } {\n+\treturn 0\n+    }\n+\n+    if [info exists tls_get_addr_via_got_available_saved] {\n+\tverbose \"check_effective_target_tls_get_addr_via_got returning saved $tls_get_addr_via_got_available_saved\" 2\n+    } else {\n+\t# Include the current process ID in the file names to prevent\n+\t# conflicts with invocations for multiple testsuites.\n+\n+\tset src tls_get_addr_via_got[pid].c\n+\tset obj tls_get_addr_via_got[pid].o\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include \\\"../../auto-host.h\\\"\"\n+\tputs $f \"#if HAVE_AS_IX86_TLS_GET_ADDR_GOT == 0\"\n+\tputs $f \"# error Assembler/linker do not support calling ___tls_get_addr via GOT.\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tverbose \"check_effective_target_tls_get_addr_via_got compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $obj object \"\"]\n+\n+\tfile delete $src\n+\tfile delete $obj\n+\n+\tif [string match \"\" $lines] then {\n+\t    verbose \"check_effective_target_tls_get_addr_via_got testfile compilation passed\" 2\n+\t    set tls_get_addr_via_got_available_saved 1\n+\t} else {\n+\t    verbose \"check_effective_target_tls_get_addr_via_got testfile compilation failed\" 2\n+\t    set tls_get_addr_via_got_available_saved 0\n+\t}\n+    }\n+\n+    return $tls_get_addr_via_got_available_saved\n+}\n+\n # Return 1 if the target uses comdat groups.\n \n proc check_effective_target_comdat_group {} {"}]}