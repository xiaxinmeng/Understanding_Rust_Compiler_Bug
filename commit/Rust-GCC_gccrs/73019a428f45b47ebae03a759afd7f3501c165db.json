{"sha": "73019a428f45b47ebae03a759afd7f3501c165db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwMTlhNDI4ZjQ1YjQ3ZWJhZTAzYTc1OWFmZDdmMzUwMWMxNjVkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-20T16:01:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-20T16:01:59Z"}, "message": "tree-vrp.c (op_with_constant_singleton_value_range): New function.\n\n2008-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (op_with_constant_singleton_value_range): New function.\n\t(extract_range_from_binary_expr): Fall back to constant propagation.\n\t(extract_range_from_unary_expr): Likewise.\n\n\t* gcc.dg/tree-ssa/pr21829.c: Scan optimized and cddce2 dumps\n\tinstead of phicprop2.  Make sure all is fine after cddce2,\n\tadd an XFAILed scan for merging the two remaining ifs.\n\nFrom-SVN: r139326", "tree": {"sha": "419cd5f1c04c0deebf41c1385131c1fc52352584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/419cd5f1c04c0deebf41c1385131c1fc52352584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73019a428f45b47ebae03a759afd7f3501c165db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73019a428f45b47ebae03a759afd7f3501c165db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73019a428f45b47ebae03a759afd7f3501c165db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73019a428f45b47ebae03a759afd7f3501c165db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2104f59c475b30f600bdd812904a508a2d15721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2104f59c475b30f600bdd812904a508a2d15721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2104f59c475b30f600bdd812904a508a2d15721"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "a8e04a9226489ecf8fb3c5cafe4feaee744ae140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73019a428f45b47ebae03a759afd7f3501c165db", "patch": "@@ -1,3 +1,9 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (op_with_constant_singleton_value_range): New function.\n+\t(extract_range_from_binary_expr): Fall back to constant propagation.\n+\t(extract_range_from_unary_expr): Likewise.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (maybe_fold_stmt_indirect): Do not mess"}, {"sha": "f20a46e45d5c61a75d8a4126122223ff7e7c4cf6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73019a428f45b47ebae03a759afd7f3501c165db", "patch": "@@ -1,3 +1,9 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr21829.c: Scan optimized and cddce2 dumps\n+\tinstead of phicprop2.  Make sure all is fine after cddce2,\n+\tadd an XFAILed scan for merging the two remaining ifs.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/compile/20080820-1.c: New testcase."}, {"sha": "6b5c4bbf1cea87d4da7c2a6d2823344512bd5085", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21829.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c?ref=73019a428f45b47ebae03a759afd7f3501c165db", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phicprop-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdump-tree-cddce2\" } */\n \n int test(int v)\n {\n@@ -16,6 +16,33 @@ int test(int v)\n   return x;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Original statement:.*% 2\\[ \\t\\n]*Updated statement.*=1\" 0 \"phicprop2\" } } */\n-/* { dg-final { cleanup-tree-dump \"phicprop\\[1-2\\]\" } } */\n+/* This should be optimized to\n \n+    if (v <= 0) goto <L1>; else goto <L3>;\n+\n+   <L1>:;\n+\n+    # x_1 = PHI <0(3), 1(1)>;\n+   <L3>:;\n+    return x_1;\n+\n+   retaining only a single conditional.  This doesn't work as nobody\n+   combines the two tests\n+\n+    if (v < 0) goto <bb 4>; else goto <bb 3>;\n+\n+   <bb 3>:\n+\n+    if (v <= 0) goto <bb 4>; else goto <bb 5>;\n+\n+   this late in the game.  tree-ssa-ifcombine.c would do it if we would\n+   unroll the loop during early loop unrolling though.\n+\n+   For now vrp2 does all the needed folding and threading and cddce2\n+   provides a nice IL to scan.  */\n+\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce2\" } } */\n+/* { dg-final { scan-tree-dump \"x_. = PHI <0\\\\\\(.\\\\\\), 1\\\\\\(.\\\\\\)>\" \"cddce2\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce2\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a71002fd9e477285a5cd517af391e9a2a3d1da20", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73019a428f45b47ebae03a759afd7f3501c165db/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=73019a428f45b47ebae03a759afd7f3501c165db", "patch": "@@ -1353,6 +1353,30 @@ ssa_name_nonzero_p (const_tree t)\n   return false;\n }\n \n+/* If OP has a value range with a single constant value return that,\n+   otherwise return NULL_TREE.  This returns OP itself if OP is a\n+   constant.  */\n+\n+static tree\n+op_with_constant_singleton_value_range (tree op)\n+{\n+  value_range_t *vr;\n+\n+  if (is_gimple_min_invariant (op))\n+    return op;\n+\n+  if (TREE_CODE (op) != SSA_NAME)\n+    return NULL_TREE;\n+\n+  vr = get_value_range (op);\n+  if (vr->type == VR_RANGE\n+      && operand_equal_p (vr->min, vr->max, 0)\n+      && is_gimple_min_invariant (vr->min))\n+    return vr->min;\n+\n+  return NULL_TREE;\n+}\n+\n \n /* Extract value range information from an ASSERT_EXPR EXPR and store\n    it in *VR_P.  */\n@@ -2033,6 +2057,18 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != TRUTH_AND_EXPR\n       && code != TRUTH_OR_EXPR)\n     {\n+      /* We can still do constant propagation here.  */\n+      if ((op0 = op_with_constant_singleton_value_range (op0)) != NULL_TREE\n+\t  && (op1 = op_with_constant_singleton_value_range (op1)) != NULL_TREE)\n+\t{\n+\t  tree tem = fold_binary (code, expr_type, op0, op1);\n+\t  if (is_gimple_min_invariant (tem)\n+\t      && !is_overflow_infinity (tem))\n+\t    {\n+\t      set_value_range (vr, VR_RANGE, tem, tem, NULL);\n+\t      return;\n+\t    }\n+\t}\n       set_value_range_to_varying (vr);\n       return;\n     }\n@@ -2437,6 +2473,17 @@ extract_range_from_unary_expr (value_range_t *vr, enum tree_code code,\n       || code == BIT_NOT_EXPR\n       || code == CONJ_EXPR)\n     {\n+      /* We can still do constant propagation here.  */\n+      if ((op0 = op_with_constant_singleton_value_range (op0)) != NULL_TREE)\n+\t{\n+\t  tree tem = fold_unary (code, type, op0);\n+\t  if (is_gimple_min_invariant (tem)\n+\t      && !is_overflow_infinity (tem))\n+\t    {\n+\t      set_value_range (vr, VR_RANGE, tem, tem, NULL);\n+\t      return;\n+\t    }\n+\t}\n       set_value_range_to_varying (vr);\n       return;\n     }"}]}