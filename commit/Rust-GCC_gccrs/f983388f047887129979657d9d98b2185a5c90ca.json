{"sha": "f983388f047887129979657d9d98b2185a5c90ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MzM4OGYwNDc4ODcxMjk5Nzk2NTdkOWQ5OGIyMTg1YTVjOTBjYQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2008-05-20T12:43:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:43:29Z"}, "message": "Makefile.rtl (GNAT.Sockets.Thin_Common): New unit.\n\n2008-05-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* Makefile.rtl (GNAT.Sockets.Thin_Common): New unit.\n\n\t* g-sttsne-vxworks.adb: Add missing dependency on Sockets.Constants.\n\tAdd missing \"with\" of Ada.Unchecked_Conversion\n\n\t* g-soccon-linux-ppc.ads, g-soccon-linux-64.ads, g-soccon-lynxos.ads, \n\tg-soccon-linux-x86.ads, g-soccon-hpux-ia64.ads, \n\tg-soccon-solaris-64.ads, g-soccon-tru64.ads, g-soccon-aix.ads, \n\tg-soccon-irix.ads, g-soccon-hpux.ads, g-soccon-solaris.ads, \n\tg-soccon-vms.ads, g-soccon-mingw.ads, g-soccon-vxworks.ads, \n\tg-socthi-vxworks.adb, g-soccon-freebsd.ads, g-soccon.ads: \n\tMove common code out of GNAT.Sockets.Thin implementations and into\n\tThin_Common.\n\tNew constant SIZEOF_fd_set\n\tNew flag Has_Sockaddr_Len\n\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n\n\t* g-stsifd-sockets.adb\n\t(Create): Remove call to Set_Length; use Set_Family to set the family\n\tand (on appropriate platforms) length fields in struct sockaddr.\n\n\t* g-socthi.adb, g-socthi.ads, g-socthi-vms.ads, g-socthi-vms.adb, \n\tg-socthi-mingw.adb, g-socthi-mingw.ads, g-socthi-vxworks.adb, \n\tg-soccon-darwin.ads, g-soccon-darwin.ads: New constant SIZEOF_fd_set\n\tMove common code out of GNAT.Sockets.Thin implementations and into\n\tThin_Common.\n\n\t* g-socket.ads, g-socket.adb: \n\tMove common code out of GNAT.Sockets.Thin implementations and into\n\tThin_Common.\n\t(Connect_Socket, Accept_Socket): Provide new versions of these two\n\troutines that operate with a user specified timeout.\n\t(Bind_Socket, Connect_Socket, Send_Socket): Remove calls to Set_Length,\n\tthis is now handled automatically by Set_Family on platforms that\n\trequire it.\n\n\t* gen-soccon.c: \n\tMove common code out of GNAT.Sockets.Thin implementations and into\n\tThin_Common.\n\t(SIZEOF_sockaddr_in6): On platforms where IPv6 is not supported, define\n\tthis constant to 0 (not -1) because we use it to initialize an\n\tunsigned_char value.\n\tAlign values for numeric constants only.\n\tHandle the case of systems that do not support AF_INET6.\n\tNew constant SIZEOF_fd_set\n\tNew flag Has_Sockaddr_Len\n\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n\n\t* gsocket.h: New flag Has_Sockaddr_Len\n\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n\nFrom-SVN: r135612", "tree": {"sha": "d477bc164e38f6d8c8babcee4149043637f10957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d477bc164e38f6d8c8babcee4149043637f10957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f983388f047887129979657d9d98b2185a5c90ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f983388f047887129979657d9d98b2185a5c90ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f983388f047887129979657d9d98b2185a5c90ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f983388f047887129979657d9d98b2185a5c90ca/comments", "author": null, "committer": null, "parents": [{"sha": "019026537472eae913ccac60774d6e6801c121f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019026537472eae913ccac60774d6e6801c121f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019026537472eae913ccac60774d6e6801c121f8"}], "stats": {"total": 4533, "additions": 2069, "deletions": 2464}, "files": [{"sha": "66dfea8ed73fbb77f7047ee2db7b6f5667aa4ddc", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -368,6 +368,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-socket$(objext) \\\n   g-socthi$(objext) \\\n   g-soliop$(objext) \\\n+  g-sothco$(objext) \\\n   g-souinf$(objext) \\\n   g-speche$(objext) \\\n   g-spchge$(objext) \\"}, {"sha": "c0a1503f3635fbb73ff3490a39397d9984fba5ea", "filename": "gcc/ada/g-soccon-aix.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-aix.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          24; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          24; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=          67; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=          68; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=          66; --  Addr family not supported\n-   EALREADY           : constant :=          56; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          72; --  Connection aborted\n-   ECONNREFUSED       : constant :=          79; --  Connection refused\n-   ECONNRESET         : constant :=          73; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          58; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=          80; --  Host is down\n-   EHOSTUNREACH       : constant :=          81; --  No route to host\n-   EINPROGRESS        : constant :=          55; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=          75; --  Socket already connected\n-   ELOOP              : constant :=          85; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          59; --  Message too long\n-   ENAMETOOLONG       : constant :=          86; --  Name too long\n-   ENETDOWN           : constant :=          69; --  Network is down\n-   ENETRESET          : constant :=          71; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          70; --  Network is unreachable\n-   ENOBUFS            : constant :=          74; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          61; --  Protocol not available\n-   ENOTCONN           : constant :=          76; --  Socket not connected\n-   ENOTSOCK           : constant :=          57; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=          64; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=          65; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=          62; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          60; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          77; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=          63; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          78; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         115; --  Too many references\n-   EWOULDBLOCK        : constant :=          11; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          67; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          68; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          66; --  Addr family not supported\n+   EALREADY            : constant :=          56; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=          72; --  Connection aborted\n+   ECONNREFUSED        : constant :=          79; --  Connection refused\n+   ECONNRESET          : constant :=          73; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          58; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=          80; --  Host is down\n+   EHOSTUNREACH        : constant :=          81; --  No route to host\n+   EINPROGRESS         : constant :=          55; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=          75; --  Socket already connected\n+   ELOOP               : constant :=          85; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          59; --  Message too long\n+   ENAMETOOLONG        : constant :=          86; --  Name too long\n+   ENETDOWN            : constant :=          69; --  Network is down\n+   ENETRESET           : constant :=          71; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=          70; --  Network is unreachable\n+   ENOBUFS             : constant :=          74; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          61; --  Protocol not available\n+   ENOTCONN            : constant :=          76; --  Socket not connected\n+   ENOTSOCK            : constant :=          57; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          64; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          65; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          62; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          60; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=          77; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          63; --  Socket type not supported\n+   ETIMEDOUT           : constant :=          78; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         115; --  Too many references\n+   EWOULDBLOCK         : constant :=          11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=          16; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=          16; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        8192; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "7e7922405eb5154ad16223d706685f4972c46f02", "filename": "gcc/ada/g-soccon-darwin.ads", "status": "modified", "additions": 100, "deletions": 88, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-darwin.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,160 +35,172 @@\n --  by the GNAT.Sockets package (g-socket.ads). This package should not be\n --  directly with'ed by an applications program.\n \n---  This is the version for powerpc-apple-darwin8.9.0\n+--  This is the version for i386-apple-darwin8.8.4\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          30; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          30; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=          48; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=          49; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=          47; --  Addr family not supported\n-   EALREADY           : constant :=          37; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          53; --  Connection aborted\n-   ECONNREFUSED       : constant :=          61; --  Connection refused\n-   ECONNRESET         : constant :=          54; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          39; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=          64; --  Host is down\n-   EHOSTUNREACH       : constant :=          65; --  No route to host\n-   EINPROGRESS        : constant :=          36; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=          56; --  Socket already connected\n-   ELOOP              : constant :=          62; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          40; --  Message too long\n-   ENAMETOOLONG       : constant :=          63; --  Name too long\n-   ENETDOWN           : constant :=          50; --  Network is down\n-   ENETRESET          : constant :=          52; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          51; --  Network is unreachable\n-   ENOBUFS            : constant :=          55; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          42; --  Protocol not available\n-   ENOTCONN           : constant :=          57; --  Socket not connected\n-   ENOTSOCK           : constant :=          38; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=          45; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=          46; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=          43; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          41; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          58; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=          44; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          60; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          59; --  Too many references\n-   EWOULDBLOCK        : constant :=          35; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          48; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          49; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          47; --  Addr family not supported\n+   EALREADY            : constant :=          37; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=          53; --  Connection aborted\n+   ECONNREFUSED        : constant :=          61; --  Connection refused\n+   ECONNRESET          : constant :=          54; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          39; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=          64; --  Host is down\n+   EHOSTUNREACH        : constant :=          65; --  No route to host\n+   EINPROGRESS         : constant :=          36; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=          56; --  Socket already connected\n+   ELOOP               : constant :=          62; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          40; --  Message too long\n+   ENAMETOOLONG        : constant :=          63; --  Name too long\n+   ENETDOWN            : constant :=          50; --  Network is down\n+   ENETRESET           : constant :=          52; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=          51; --  Network is unreachable\n+   ENOBUFS             : constant :=          55; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          42; --  Protocol not available\n+   ENOTCONN            : constant :=          57; --  Socket not connected\n+   ENOTSOCK            : constant :=          38; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          45; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          46; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          43; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          41; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=          58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          44; --  Socket type not supported\n+   ETIMEDOUT           : constant :=          60; --  Connection timed out\n+   ETOOMANYREFS        : constant :=          59; --  Too many references\n+   EWOULDBLOCK         : constant :=          35; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=        1024; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=        1024; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "8af0908ef979002f8b8b1aa013a11d272643fbec", "filename": "gcc/ada/g-soccon-freebsd.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-freebsd.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          28; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          28; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=          48; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=          49; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=          47; --  Addr family not supported\n-   EALREADY           : constant :=          37; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          53; --  Connection aborted\n-   ECONNREFUSED       : constant :=          61; --  Connection refused\n-   ECONNRESET         : constant :=          54; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          39; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=          64; --  Host is down\n-   EHOSTUNREACH       : constant :=          65; --  No route to host\n-   EINPROGRESS        : constant :=          36; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=          56; --  Socket already connected\n-   ELOOP              : constant :=          62; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          40; --  Message too long\n-   ENAMETOOLONG       : constant :=          63; --  Name too long\n-   ENETDOWN           : constant :=          50; --  Network is down\n-   ENETRESET          : constant :=          52; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          51; --  Network is unreachable\n-   ENOBUFS            : constant :=          55; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          42; --  Protocol not available\n-   ENOTCONN           : constant :=          57; --  Socket not connected\n-   ENOTSOCK           : constant :=          38; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=          45; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=          46; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=          43; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          41; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          58; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=          44; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          60; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          59; --  Too many references\n-   EWOULDBLOCK        : constant :=          35; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          48; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          49; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          47; --  Addr family not supported\n+   EALREADY            : constant :=          37; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=          53; --  Connection aborted\n+   ECONNREFUSED        : constant :=          61; --  Connection refused\n+   ECONNRESET          : constant :=          54; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          39; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=          64; --  Host is down\n+   EHOSTUNREACH        : constant :=          65; --  No route to host\n+   EINPROGRESS         : constant :=          36; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=          56; --  Socket already connected\n+   ELOOP               : constant :=          62; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          40; --  Message too long\n+   ENAMETOOLONG        : constant :=          63; --  Name too long\n+   ENETDOWN            : constant :=          50; --  Network is down\n+   ENETRESET           : constant :=          52; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=          51; --  Network is unreachable\n+   ENOBUFS             : constant :=          55; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          42; --  Protocol not available\n+   ENOTCONN            : constant :=          57; --  Socket not connected\n+   ENOTSOCK            : constant :=          38; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          45; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          46; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          43; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          41; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=          58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          44; --  Socket type not supported\n+   ETIMEDOUT           : constant :=          60; --  Connection timed out\n+   ETOOMANYREFS        : constant :=          59; --  Too many references\n+   EWOULDBLOCK         : constant :=          35; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=      131072; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=      131072; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=        1024; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=        1024; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           1; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "4c364bd95323244fafebddbbe271e0b3382abfec", "filename": "gcc/ada/g-soccon-hpux-ia64.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-hpux-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-hpux-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-hpux-ia64.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          22; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          22; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=         226; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         227; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         225; --  Addr family not supported\n-   EALREADY           : constant :=         244; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         231; --  Connection aborted\n-   ECONNREFUSED       : constant :=         239; --  Connection refused\n-   ECONNRESET         : constant :=         232; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=         217; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=         241; --  Host is down\n-   EHOSTUNREACH       : constant :=         242; --  No route to host\n-   EINPROGRESS        : constant :=         245; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=         234; --  Socket already connected\n-   ELOOP              : constant :=         249; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=         218; --  Message too long\n-   ENAMETOOLONG       : constant :=         248; --  Name too long\n-   ENETDOWN           : constant :=         228; --  Network is down\n-   ENETRESET          : constant :=         230; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         229; --  Network is unreachable\n-   ENOBUFS            : constant :=         233; --  No buffer space available\n-   ENOPROTOOPT        : constant :=         220; --  Protocol not available\n-   ENOTCONN           : constant :=         235; --  Socket not connected\n-   ENOTSOCK           : constant :=         216; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         223; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         224; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         221; --  Unknown protocol\n-   EPROTOTYPE         : constant :=         219; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         236; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         222; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         238; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         237; --  Too many references\n-   EWOULDBLOCK        : constant :=         246; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=         226; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         227; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         225; --  Addr family not supported\n+   EALREADY            : constant :=         244; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         231; --  Connection aborted\n+   ECONNREFUSED        : constant :=         239; --  Connection refused\n+   ECONNRESET          : constant :=         232; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         217; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         241; --  Host is down\n+   EHOSTUNREACH        : constant :=         242; --  No route to host\n+   EINPROGRESS         : constant :=         245; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         234; --  Socket already connected\n+   ELOOP               : constant :=         249; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=         218; --  Message too long\n+   ENAMETOOLONG        : constant :=         248; --  Name too long\n+   ENETDOWN            : constant :=         228; --  Network is down\n+   ENETRESET           : constant :=         230; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         229; --  Network is unreachable\n+   ENOBUFS             : constant :=         233; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         220; --  Protocol not available\n+   ENOTCONN            : constant :=         235; --  Socket not connected\n+   ENOTSOCK            : constant :=         216; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         223; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         224; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         221; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         219; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         236; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         222; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         238; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         237; --  Too many references\n+   EWOULDBLOCK         : constant :=         246; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           2; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           3; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           4; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           5; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           6; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           2; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=           3; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=           4; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=           5; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=           6; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=          16; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=          16; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           8; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           8; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           8; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           8; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         256; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "c49075def5a238f2fdb77eb4d4471c743c01c2ff", "filename": "gcc/ada/g-soccon-hpux.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-hpux.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          -1; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          -1; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=         226; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         227; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         225; --  Addr family not supported\n-   EALREADY           : constant :=         244; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         231; --  Connection aborted\n-   ECONNREFUSED       : constant :=         239; --  Connection refused\n-   ECONNRESET         : constant :=         232; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=         217; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=         241; --  Host is down\n-   EHOSTUNREACH       : constant :=         242; --  No route to host\n-   EINPROGRESS        : constant :=         245; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=         234; --  Socket already connected\n-   ELOOP              : constant :=         249; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=         218; --  Message too long\n-   ENAMETOOLONG       : constant :=         248; --  Name too long\n-   ENETDOWN           : constant :=         228; --  Network is down\n-   ENETRESET          : constant :=         230; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         229; --  Network is unreachable\n-   ENOBUFS            : constant :=         233; --  No buffer space available\n-   ENOPROTOOPT        : constant :=         220; --  Protocol not available\n-   ENOTCONN           : constant :=         235; --  Socket not connected\n-   ENOTSOCK           : constant :=         216; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         223; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         224; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         221; --  Unknown protocol\n-   EPROTOTYPE         : constant :=         219; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         236; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         222; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         238; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         237; --  Too many references\n-   EWOULDBLOCK        : constant :=         246; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=         226; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         227; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         225; --  Addr family not supported\n+   EALREADY            : constant :=         244; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         231; --  Connection aborted\n+   ECONNREFUSED        : constant :=         239; --  Connection refused\n+   ECONNRESET          : constant :=         232; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         217; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         241; --  Host is down\n+   EHOSTUNREACH        : constant :=         242; --  No route to host\n+   EINPROGRESS         : constant :=         245; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         234; --  Socket already connected\n+   ELOOP               : constant :=         249; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=         218; --  Message too long\n+   ENAMETOOLONG        : constant :=         248; --  Name too long\n+   ENETDOWN            : constant :=         228; --  Network is down\n+   ENETRESET           : constant :=         230; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         229; --  Network is unreachable\n+   ENOBUFS             : constant :=         233; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         220; --  Protocol not available\n+   ENOTCONN            : constant :=         235; --  Socket not connected\n+   ENOTSOCK            : constant :=         216; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         223; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         224; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         221; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         219; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         236; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         222; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         238; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         237; --  Too many references\n+   EWOULDBLOCK         : constant :=         246; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           2; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           3; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           4; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           5; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           6; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           2; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=           3; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=           4; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=           5; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=           6; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=          16; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=          16; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=           0; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         256; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "3952a599efe4de7bb4b6c574590eef95c7564b7d", "filename": "gcc/ada/g-soccon-irix.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-irix.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          24; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          24; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           2; --  Stream socket\n-   SOCK_DGRAM         : constant :=           1; --  Datagram socket\n+   SOCK_STREAM         : constant :=           2; --  Stream socket\n+   SOCK_DGRAM          : constant :=           1; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=         125; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         126; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         124; --  Addr family not supported\n-   EALREADY           : constant :=         149; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         130; --  Connection aborted\n-   ECONNREFUSED       : constant :=         146; --  Connection refused\n-   ECONNRESET         : constant :=         131; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          96; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=         147; --  Host is down\n-   EHOSTUNREACH       : constant :=         148; --  No route to host\n-   EINPROGRESS        : constant :=         150; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=         133; --  Socket already connected\n-   ELOOP              : constant :=          90; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          97; --  Message too long\n-   ENAMETOOLONG       : constant :=          78; --  Name too long\n-   ENETDOWN           : constant :=         127; --  Network is down\n-   ENETRESET          : constant :=         129; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         128; --  Network is unreachable\n-   ENOBUFS            : constant :=         132; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          99; --  Protocol not available\n-   ENOTCONN           : constant :=         134; --  Socket not connected\n-   ENOTSOCK           : constant :=          95; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         122; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         123; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         120; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          98; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         143; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         121; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         145; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         144; --  Too many references\n-   EWOULDBLOCK        : constant :=          11; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=         125; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         126; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         124; --  Addr family not supported\n+   EALREADY            : constant :=         149; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         130; --  Connection aborted\n+   ECONNREFUSED        : constant :=         146; --  Connection refused\n+   ECONNRESET          : constant :=         131; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          96; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         147; --  Host is down\n+   EHOSTUNREACH        : constant :=         148; --  No route to host\n+   EINPROGRESS         : constant :=         150; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         133; --  Socket already connected\n+   ELOOP               : constant :=          90; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          97; --  Message too long\n+   ENAMETOOLONG        : constant :=          78; --  Name too long\n+   ENETDOWN            : constant :=         127; --  Network is down\n+   ENETRESET           : constant :=         129; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         128; --  Network is unreachable\n+   ENOBUFS             : constant :=         132; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          99; --  Protocol not available\n+   ENOTCONN            : constant :=         134; --  Socket not connected\n+   ENOTSOCK            : constant :=          95; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         122; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         123; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         120; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          98; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         143; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         121; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         145; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         144; --  Too many references\n+   EWOULDBLOCK         : constant :=          11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=          20; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          21; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          22; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          23; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          24; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          20; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          21; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          22; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          23; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          24; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=  2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=  2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          32; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "3d82b326ecf56fb7176db2bcddd58e2641900fe6", "filename": "gcc/ada/g-soccon-linux-64.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-linux-64.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=            2; --  IPv4 address family\n-   AF_INET6           : constant :=           10; --  IPv6 address family\n+   AF_INET             : constant :=          2; --  IPv4 address family\n+   AF_INET6            : constant :=         10; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=            1; --  Stream socket\n-   SOCK_DGRAM         : constant :=            2; --  Datagram socket\n+   SOCK_STREAM         : constant :=          1; --  Stream socket\n+   SOCK_DGRAM          : constant :=          2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=           13; --  Permission denied\n-   EADDRINUSE         : constant :=           98; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=           99; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=           97; --  Addr family not supported\n-   EALREADY           : constant :=          114; --  Operation in progress\n-   EBADF              : constant :=            9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          103; --  Connection aborted\n-   ECONNREFUSED       : constant :=          111; --  Connection refused\n-   ECONNRESET         : constant :=          104; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=           89; --  Destination addr required\n-   EFAULT             : constant :=           14; --  Bad address\n-   EHOSTDOWN          : constant :=          112; --  Host is down\n-   EHOSTUNREACH       : constant :=          113; --  No route to host\n-   EINPROGRESS        : constant :=          115; --  Operation now in progress\n-   EINTR              : constant :=            4; --  Interrupted system call\n-   EINVAL             : constant :=           22; --  Invalid argument\n-   EIO                : constant :=            5; --  Input output error\n-   EISCONN            : constant :=          106; --  Socket already connected\n-   ELOOP              : constant :=           40; --  Too many symbolic links\n-   EMFILE             : constant :=           24; --  Too many open files\n-   EMSGSIZE           : constant :=           90; --  Message too long\n-   ENAMETOOLONG       : constant :=           36; --  Name too long\n-   ENETDOWN           : constant :=          100; --  Network is down\n-   ENETRESET          : constant :=          102; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          101; --  Network is unreachable\n-   ENOBUFS            : constant :=          105; --  No buffer space available\n-   ENOPROTOOPT        : constant :=           92; --  Protocol not available\n-   ENOTCONN           : constant :=          107; --  Socket not connected\n-   ENOTSOCK           : constant :=           88; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=           95; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=           96; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=           93; --  Unknown protocol\n-   EPROTOTYPE         : constant :=           91; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          108; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=           94; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          110; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          109; --  Too many references\n-   EWOULDBLOCK        : constant :=           11; --  Operation would block\n+   EACCES              : constant :=         13; --  Permission denied\n+   EADDRINUSE          : constant :=         98; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         99; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         97; --  Addr family not supported\n+   EALREADY            : constant :=        114; --  Operation in progress\n+   EBADF               : constant :=          9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=        103; --  Connection aborted\n+   ECONNREFUSED        : constant :=        111; --  Connection refused\n+   ECONNRESET          : constant :=        104; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         89; --  Destination addr required\n+   EFAULT              : constant :=         14; --  Bad address\n+   EHOSTDOWN           : constant :=        112; --  Host is down\n+   EHOSTUNREACH        : constant :=        113; --  No route to host\n+   EINPROGRESS         : constant :=        115; --  Operation now in progress\n+   EINTR               : constant :=          4; --  Interrupted system call\n+   EINVAL              : constant :=         22; --  Invalid argument\n+   EIO                 : constant :=          5; --  Input output error\n+   EISCONN             : constant :=        106; --  Socket already connected\n+   ELOOP               : constant :=         40; --  Too many symbolic links\n+   EMFILE              : constant :=         24; --  Too many open files\n+   EMSGSIZE            : constant :=         90; --  Message too long\n+   ENAMETOOLONG        : constant :=         36; --  Name too long\n+   ENETDOWN            : constant :=        100; --  Network is down\n+   ENETRESET           : constant :=        102; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=        101; --  Network is unreachable\n+   ENOBUFS             : constant :=        105; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         92; --  Protocol not available\n+   ENOTCONN            : constant :=        107; --  Socket not connected\n+   ENOTSOCK            : constant :=         88; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         95; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         96; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         93; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         91; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=        108; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         94; --  Socket type not supported\n+   ETIMEDOUT           : constant :=        110; --  Connection timed out\n+   ETOOMANYREFS        : constant :=        109; --  Too many references\n+   EWOULDBLOCK         : constant :=         11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=            1; --  Unknown host\n-   TRY_AGAIN          : constant :=            2; --  Host name lookup failure\n-   NO_DATA            : constant :=            4; --  No data record for name\n-   NO_RECOVERY        : constant :=            3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=          1; --  Unknown host\n+   TRY_AGAIN           : constant :=          2; --  Host name lookup failure\n+   NO_DATA             : constant :=          4; --  No data record for name\n+   NO_RECOVERY         : constant :=          3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=        21537; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=        21531; --  How many bytes to read\n+   FIONBIO             : constant :=      21537; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=      21531; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=            0; --  No more recv\n-   SHUT_WR            : constant :=            1; --  No more send\n-   SHUT_RDWR          : constant :=            2; --  No more recv/send\n+   SHUT_RD             : constant :=          0; --  No more recv\n+   SHUT_WR             : constant :=          1; --  No more send\n+   SHUT_RDWR           : constant :=          2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=            1; --  Options for socket level\n-   IPPROTO_IP         : constant :=            0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=           17; --  UDP\n-   IPPROTO_TCP        : constant :=            6; --  TCP\n+   SOL_SOCKET          : constant :=          1; --  Options for socket level\n+   IPPROTO_IP          : constant :=          0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=         17; --  UDP\n+   IPPROTO_TCP         : constant :=          6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=            1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=            2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          128; --  Send end of record\n-   MSG_WAITALL        : constant :=          256; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=        16384; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant := MSG_NOSIGNAL;\n+   MSG_OOB             : constant :=          1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=          2; --  Peek at incoming data\n+   MSG_EOR             : constant :=        128; --  Send end of record\n+   MSG_WAITALL         : constant :=        256; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=      16384; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant := MSG_NOSIGNAL;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=            1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=            2; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=           -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=            9; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=           13; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=            6; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=            7; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=            8; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=           21; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=           20; --  Reception timeout\n-   SO_ERROR           : constant :=            4; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           32; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           33; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           34; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           35; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           36; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=            8; --  Get datagram info\n+   TCP_NODELAY         : constant :=          1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=          2; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=          9; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         13; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          6; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=          7; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=          8; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=         21; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=         20; --  Reception timeout\n+   SO_ERROR            : constant :=          4; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=         32; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=         33; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=         34; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=         35; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=         36; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          8; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=   2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant := 2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=            8; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=            8; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=          8; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=          8; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=         16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=         28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=            1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=          1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=          0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "7a8c2e260b3f4cc81bdc735115da9e4fbb74f736", "filename": "gcc/ada/g-soccon-linux-ppc.ads", "status": "modified", "additions": 100, "deletions": 88, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-linux-ppc.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,160 +35,172 @@\n --  by the GNAT.Sockets package (g-socket.ads). This package should not be\n --  directly with'ed by an applications program.\n \n---  This is the version for powerpc-linux\n+--  This is the version for ppc-unknown-linux-gnu\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=            2; --  IPv4 address family\n-   AF_INET6           : constant :=           10; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          10; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=            1; --  Stream socket\n-   SOCK_DGRAM         : constant :=            2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=           13; --  Permission denied\n-   EADDRINUSE         : constant :=           98; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=           99; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=           97; --  Addr family not supported\n-   EALREADY           : constant :=          114; --  Operation in progress\n-   EBADF              : constant :=            9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          103; --  Connection aborted\n-   ECONNREFUSED       : constant :=          111; --  Connection refused\n-   ECONNRESET         : constant :=          104; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=           89; --  Destination addr required\n-   EFAULT             : constant :=           14; --  Bad address\n-   EHOSTDOWN          : constant :=          112; --  Host is down\n-   EHOSTUNREACH       : constant :=          113; --  No route to host\n-   EINPROGRESS        : constant :=          115; --  Operation now in progress\n-   EINTR              : constant :=            4; --  Interrupted system call\n-   EINVAL             : constant :=           22; --  Invalid argument\n-   EIO                : constant :=            5; --  Input output error\n-   EISCONN            : constant :=          106; --  Socket already connected\n-   ELOOP              : constant :=           40; --  Too many symbolic links\n-   EMFILE             : constant :=           24; --  Too many open files\n-   EMSGSIZE           : constant :=           90; --  Message too long\n-   ENAMETOOLONG       : constant :=           36; --  Name too long\n-   ENETDOWN           : constant :=          100; --  Network is down\n-   ENETRESET          : constant :=          102; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          101; --  Network is unreachable\n-   ENOBUFS            : constant :=          105; --  No buffer space available\n-   ENOPROTOOPT        : constant :=           92; --  Protocol not available\n-   ENOTCONN           : constant :=          107; --  Socket not connected\n-   ENOTSOCK           : constant :=           88; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=           95; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=           96; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=           93; --  Unknown protocol\n-   EPROTOTYPE         : constant :=           91; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          108; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=           94; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          110; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          109; --  Too many references\n-   EWOULDBLOCK        : constant :=           11; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          98; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          99; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          97; --  Addr family not supported\n+   EALREADY            : constant :=         114; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         103; --  Connection aborted\n+   ECONNREFUSED        : constant :=         111; --  Connection refused\n+   ECONNRESET          : constant :=         104; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          89; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         112; --  Host is down\n+   EHOSTUNREACH        : constant :=         113; --  No route to host\n+   EINPROGRESS         : constant :=         115; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         106; --  Socket already connected\n+   ELOOP               : constant :=          40; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          90; --  Message too long\n+   ENAMETOOLONG        : constant :=          36; --  Name too long\n+   ENETDOWN            : constant :=         100; --  Network is down\n+   ENETRESET           : constant :=         102; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         101; --  Network is unreachable\n+   ENOBUFS             : constant :=         105; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          92; --  Protocol not available\n+   ENOTCONN            : constant :=         107; --  Socket not connected\n+   ENOTSOCK            : constant :=          88; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          95; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          96; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          93; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          91; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         108; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          94; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         110; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         109; --  Too many references\n+   EWOULDBLOCK         : constant :=          11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=            1; --  Unknown host\n-   TRY_AGAIN          : constant :=            2; --  Host name lookup failure\n-   NO_DATA            : constant :=            4; --  No data record for name\n-   NO_RECOVERY        : constant :=            3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=  -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=   1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=            0; --  No more recv\n-   SHUT_WR            : constant :=            1; --  No more send\n-   SHUT_RDWR          : constant :=            2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=            1; --  Options for socket level\n-   IPPROTO_IP         : constant :=            0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=           17; --  UDP\n-   IPPROTO_TCP        : constant :=            6; --  TCP\n+   SOL_SOCKET          : constant :=           1; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=            1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=            2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          128; --  Send end of record\n-   MSG_WAITALL        : constant :=          256; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=        16384; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant := MSG_NOSIGNAL;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=         128; --  Send end of record\n+   MSG_WAITALL         : constant :=         256; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=       16384; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant := MSG_NOSIGNAL;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=            1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=            2; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=           -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=            9; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=           13; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=            6; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=            7; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=            8; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=           19; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=           18; --  Reception timeout\n-   SO_ERROR           : constant :=            4; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           32; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           33; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           34; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           35; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           36; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=            8; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           2; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=          -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           9; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=          13; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=           6; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=           7; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=           8; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=          19; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=          18; --  Reception timeout\n+   SO_ERROR            : constant :=           4; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          32; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          33; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          34; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          35; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          36; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=           8; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=   2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=  2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=            4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=            4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=            1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "ed2b8d9624d4b0d7d7566bd15e174a3b73e0e003", "filename": "gcc/ada/g-soccon-linux-x86.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-linux-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-linux-x86.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=            2; --  IPv4 address family\n-   AF_INET6           : constant :=           10; --  IPv6 address family\n+   AF_INET             : constant :=          2; --  IPv4 address family\n+   AF_INET6            : constant :=         10; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=            1; --  Stream socket\n-   SOCK_DGRAM         : constant :=            2; --  Datagram socket\n+   SOCK_STREAM         : constant :=          1; --  Stream socket\n+   SOCK_DGRAM          : constant :=          2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=           13; --  Permission denied\n-   EADDRINUSE         : constant :=           98; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=           99; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=           97; --  Addr family not supported\n-   EALREADY           : constant :=          114; --  Operation in progress\n-   EBADF              : constant :=            9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          103; --  Connection aborted\n-   ECONNREFUSED       : constant :=          111; --  Connection refused\n-   ECONNRESET         : constant :=          104; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=           89; --  Destination addr required\n-   EFAULT             : constant :=           14; --  Bad address\n-   EHOSTDOWN          : constant :=          112; --  Host is down\n-   EHOSTUNREACH       : constant :=          113; --  No route to host\n-   EINPROGRESS        : constant :=          115; --  Operation now in progress\n-   EINTR              : constant :=            4; --  Interrupted system call\n-   EINVAL             : constant :=           22; --  Invalid argument\n-   EIO                : constant :=            5; --  Input output error\n-   EISCONN            : constant :=          106; --  Socket already connected\n-   ELOOP              : constant :=           40; --  Too many symbolic links\n-   EMFILE             : constant :=           24; --  Too many open files\n-   EMSGSIZE           : constant :=           90; --  Message too long\n-   ENAMETOOLONG       : constant :=           36; --  Name too long\n-   ENETDOWN           : constant :=          100; --  Network is down\n-   ENETRESET          : constant :=          102; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          101; --  Network is unreachable\n-   ENOBUFS            : constant :=          105; --  No buffer space available\n-   ENOPROTOOPT        : constant :=           92; --  Protocol not available\n-   ENOTCONN           : constant :=          107; --  Socket not connected\n-   ENOTSOCK           : constant :=           88; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=           95; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=           96; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=           93; --  Unknown protocol\n-   EPROTOTYPE         : constant :=           91; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          108; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=           94; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          110; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          109; --  Too many references\n-   EWOULDBLOCK        : constant :=           11; --  Operation would block\n+   EACCES              : constant :=         13; --  Permission denied\n+   EADDRINUSE          : constant :=         98; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         99; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         97; --  Addr family not supported\n+   EALREADY            : constant :=        114; --  Operation in progress\n+   EBADF               : constant :=          9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=        103; --  Connection aborted\n+   ECONNREFUSED        : constant :=        111; --  Connection refused\n+   ECONNRESET          : constant :=        104; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         89; --  Destination addr required\n+   EFAULT              : constant :=         14; --  Bad address\n+   EHOSTDOWN           : constant :=        112; --  Host is down\n+   EHOSTUNREACH        : constant :=        113; --  No route to host\n+   EINPROGRESS         : constant :=        115; --  Operation now in progress\n+   EINTR               : constant :=          4; --  Interrupted system call\n+   EINVAL              : constant :=         22; --  Invalid argument\n+   EIO                 : constant :=          5; --  Input output error\n+   EISCONN             : constant :=        106; --  Socket already connected\n+   ELOOP               : constant :=         40; --  Too many symbolic links\n+   EMFILE              : constant :=         24; --  Too many open files\n+   EMSGSIZE            : constant :=         90; --  Message too long\n+   ENAMETOOLONG        : constant :=         36; --  Name too long\n+   ENETDOWN            : constant :=        100; --  Network is down\n+   ENETRESET           : constant :=        102; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=        101; --  Network is unreachable\n+   ENOBUFS             : constant :=        105; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         92; --  Protocol not available\n+   ENOTCONN            : constant :=        107; --  Socket not connected\n+   ENOTSOCK            : constant :=         88; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         95; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         96; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         93; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         91; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=        108; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         94; --  Socket type not supported\n+   ETIMEDOUT           : constant :=        110; --  Connection timed out\n+   ETOOMANYREFS        : constant :=        109; --  Too many references\n+   EWOULDBLOCK         : constant :=         11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=            1; --  Unknown host\n-   TRY_AGAIN          : constant :=            2; --  Host name lookup failure\n-   NO_DATA            : constant :=            4; --  No data record for name\n-   NO_RECOVERY        : constant :=            3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=          1; --  Unknown host\n+   TRY_AGAIN           : constant :=          2; --  Host name lookup failure\n+   NO_DATA             : constant :=          4; --  No data record for name\n+   NO_RECOVERY         : constant :=          3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=        21537; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=        21531; --  How many bytes to read\n+   FIONBIO             : constant :=      21537; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=      21531; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=            0; --  No more recv\n-   SHUT_WR            : constant :=            1; --  No more send\n-   SHUT_RDWR          : constant :=            2; --  No more recv/send\n+   SHUT_RD             : constant :=          0; --  No more recv\n+   SHUT_WR             : constant :=          1; --  No more send\n+   SHUT_RDWR           : constant :=          2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=            1; --  Options for socket level\n-   IPPROTO_IP         : constant :=            0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=           17; --  UDP\n-   IPPROTO_TCP        : constant :=            6; --  TCP\n+   SOL_SOCKET          : constant :=          1; --  Options for socket level\n+   IPPROTO_IP          : constant :=          0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=         17; --  UDP\n+   IPPROTO_TCP         : constant :=          6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=            1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=            2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          128; --  Send end of record\n-   MSG_WAITALL        : constant :=          256; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=        16384; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant := MSG_NOSIGNAL;\n+   MSG_OOB             : constant :=          1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=          2; --  Peek at incoming data\n+   MSG_EOR             : constant :=        128; --  Send end of record\n+   MSG_WAITALL         : constant :=        256; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=      16384; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant := MSG_NOSIGNAL;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=            1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=            2; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=           -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=            9; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=           13; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=            6; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=            7; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=            8; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=           21; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=           20; --  Reception timeout\n-   SO_ERROR           : constant :=            4; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           32; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           33; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           34; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           35; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           36; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=            8; --  Get datagram info\n+   TCP_NODELAY         : constant :=          1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=          2; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=          9; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         13; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          6; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=          7; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=          8; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=         21; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=         20; --  Reception timeout\n+   SO_ERROR            : constant :=          4; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=         32; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=         33; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=         34; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=         35; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=         36; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          8; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=   2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant := 2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=            4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=            4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=          4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=          4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=         16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=         28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=            1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=          1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=          0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "04c75bf63e458e51e262e299a4120958b404b418", "filename": "gcc/ada/g-soccon-lynxos.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-lynxos.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=          2; --  IPv4 address family\n-   AF_INET6           : constant :=         28; --  IPv6 address family\n+   AF_INET             : constant :=          2; --  IPv4 address family\n+   AF_INET6            : constant :=         28; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=          1; --  Stream socket\n-   SOCK_DGRAM         : constant :=          2; --  Datagram socket\n+   SOCK_STREAM         : constant :=          1; --  Stream socket\n+   SOCK_DGRAM          : constant :=          2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=         13; --  Permission denied\n-   EADDRINUSE         : constant :=         98; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         99; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         97; --  Addr family not supported\n-   EALREADY           : constant :=        114; --  Operation in progress\n-   EBADF              : constant :=          9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=        103; --  Connection aborted\n-   ECONNREFUSED       : constant :=        111; --  Connection refused\n-   ECONNRESET         : constant :=        104; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=         89; --  Destination addr required\n-   EFAULT             : constant :=         14; --  Bad address\n-   EHOSTDOWN          : constant :=        112; --  Host is down\n-   EHOSTUNREACH       : constant :=        113; --  No route to host\n-   EINPROGRESS        : constant :=        115; --  Operation now in progress\n-   EINTR              : constant :=          4; --  Interrupted system call\n-   EINVAL             : constant :=         22; --  Invalid argument\n-   EIO                : constant :=          5; --  Input output error\n-   EISCONN            : constant :=        106; --  Socket already connected\n-   ELOOP              : constant :=         40; --  Too many symbolic links\n-   EMFILE             : constant :=         24; --  Too many open files\n-   EMSGSIZE           : constant :=         90; --  Message too long\n-   ENAMETOOLONG       : constant :=         36; --  Name too long\n-   ENETDOWN           : constant :=        100; --  Network is down\n-   ENETRESET          : constant :=        102; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=        101; --  Network is unreachable\n-   ENOBUFS            : constant :=        105; --  No buffer space available\n-   ENOPROTOOPT        : constant :=         92; --  Protocol not available\n-   ENOTCONN           : constant :=        107; --  Socket not connected\n-   ENOTSOCK           : constant :=         88; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         95; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         96; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         93; --  Unknown protocol\n-   EPROTOTYPE         : constant :=         91; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=        108; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         94; --  Socket type not supported\n-   ETIMEDOUT          : constant :=        110; --  Connection timed out\n-   ETOOMANYREFS       : constant :=        109; --  Too many references\n-   EWOULDBLOCK        : constant :=         11; --  Operation would block\n+   EACCES              : constant :=         13; --  Permission denied\n+   EADDRINUSE          : constant :=         98; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         99; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         97; --  Addr family not supported\n+   EALREADY            : constant :=        114; --  Operation in progress\n+   EBADF               : constant :=          9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=        103; --  Connection aborted\n+   ECONNREFUSED        : constant :=        111; --  Connection refused\n+   ECONNRESET          : constant :=        104; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         89; --  Destination addr required\n+   EFAULT              : constant :=         14; --  Bad address\n+   EHOSTDOWN           : constant :=        112; --  Host is down\n+   EHOSTUNREACH        : constant :=        113; --  No route to host\n+   EINPROGRESS         : constant :=        115; --  Operation now in progress\n+   EINTR               : constant :=          4; --  Interrupted system call\n+   EINVAL              : constant :=         22; --  Invalid argument\n+   EIO                 : constant :=          5; --  Input output error\n+   EISCONN             : constant :=        106; --  Socket already connected\n+   ELOOP               : constant :=         40; --  Too many symbolic links\n+   EMFILE              : constant :=         24; --  Too many open files\n+   EMSGSIZE            : constant :=         90; --  Message too long\n+   ENAMETOOLONG        : constant :=         36; --  Name too long\n+   ENETDOWN            : constant :=        100; --  Network is down\n+   ENETRESET           : constant :=        102; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=        101; --  Network is unreachable\n+   ENOBUFS             : constant :=        105; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         92; --  Protocol not available\n+   ENOTCONN            : constant :=        107; --  Socket not connected\n+   ENOTSOCK            : constant :=         88; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         95; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         96; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         93; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         91; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=        108; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         94; --  Socket type not supported\n+   ETIMEDOUT           : constant :=        110; --  Connection timed out\n+   ETOOMANYREFS        : constant :=        109; --  Too many references\n+   EWOULDBLOCK         : constant :=         11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=          1; --  Unknown host\n-   TRY_AGAIN          : constant :=          2; --  Host name lookup failure\n-   NO_DATA            : constant :=          4; --  No data record for name\n-   NO_RECOVERY        : constant :=          3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=          1; --  Unknown host\n+   TRY_AGAIN           : constant :=          2; --  Host name lookup failure\n+   NO_DATA             : constant :=          4; --  No data record for name\n+   NO_RECOVERY         : constant :=          3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=      21537; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=      21531; --  How many bytes to read\n+   FIONBIO             : constant :=      21537; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=      21531; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=          0; --  No more recv\n-   SHUT_WR            : constant :=          1; --  No more send\n-   SHUT_RDWR          : constant :=          2; --  No more recv/send\n+   SHUT_RD             : constant :=          0; --  No more recv\n+   SHUT_WR             : constant :=          1; --  No more send\n+   SHUT_RDWR           : constant :=          2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=      65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=          0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=         17; --  UDP\n-   IPPROTO_TCP        : constant :=          6; --  TCP\n+   SOL_SOCKET          : constant :=      65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=          0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=         17; --  UDP\n+   IPPROTO_TCP         : constant :=          6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=          1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=          2; --  Peek at incoming data\n-   MSG_EOR            : constant :=        128; --  Send end of record\n-   MSG_WAITALL        : constant :=        256; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=         -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=          0;\n+   MSG_OOB             : constant :=          1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=          2; --  Peek at incoming data\n+   MSG_EOR             : constant :=        128; --  Send end of record\n+   MSG_WAITALL         : constant :=        256; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=         -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=          0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=          1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=          4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=        512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=          8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=        128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=         32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=       4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=       4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=       4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=       4102; --  Reception timeout\n-   SO_ERROR           : constant :=       4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=          9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=         10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=         11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=         12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=         13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=         -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=          1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=          4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=        512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=          8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=        128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=         32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=       4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=       4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=       4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=       4102; --  Reception timeout\n+   SO_ERROR            : constant :=       4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=         10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=         11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=         12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=         13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=         -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant := 2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant := 2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=          4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=          4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=          4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=          4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=         16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=         28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        512; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=          1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=          1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=          0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "3bb83e4bebeef56cf6b3abe176bf9ff500d8bb45", "filename": "gcc/ada/g-soccon-mingw.ads", "status": "modified", "additions": 106, "deletions": 94, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-mingw.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,152 +39,171 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          23; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          23; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=       10013; --  Permission denied\n-   EADDRINUSE         : constant :=       10048; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=       10049; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=       10047; --  Addr family not supported\n-   EALREADY           : constant :=       10037; --  Operation in progress\n-   EBADF              : constant :=       10009; --  Bad file descriptor\n-   ECONNABORTED       : constant :=       10053; --  Connection aborted\n-   ECONNREFUSED       : constant :=       10061; --  Connection refused\n-   ECONNRESET         : constant :=       10054; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=       10039; --  Destination addr required\n-   EFAULT             : constant :=       10014; --  Bad address\n-   EHOSTDOWN          : constant :=       10064; --  Host is down\n-   EHOSTUNREACH       : constant :=       10065; --  No route to host\n-   EINPROGRESS        : constant :=       10036; --  Operation now in progress\n-   EINTR              : constant :=       10004; --  Interrupted system call\n-   EINVAL             : constant :=       10022; --  Invalid argument\n-   EIO                : constant :=       10101; --  Input output error\n-   EISCONN            : constant :=       10056; --  Socket already connected\n-   ELOOP              : constant :=       10062; --  Too many symbolic links\n-   EMFILE             : constant :=       10024; --  Too many open files\n-   EMSGSIZE           : constant :=       10040; --  Message too long\n-   ENAMETOOLONG       : constant :=       10063; --  Name too long\n-   ENETDOWN           : constant :=       10050; --  Network is down\n-   ENETRESET          : constant :=       10052; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=       10051; --  Network is unreachable\n-   ENOBUFS            : constant :=       10055; --  No buffer space available\n-   ENOPROTOOPT        : constant :=       10042; --  Protocol not available\n-   ENOTCONN           : constant :=       10057; --  Socket not connected\n-   ENOTSOCK           : constant :=       10038; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=       10045; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=       10046; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=       10043; --  Unknown protocol\n-   EPROTOTYPE         : constant :=       10041; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=       10058; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=       10044; --  Socket type not supported\n-   ETIMEDOUT          : constant :=       10060; --  Connection timed out\n-   ETOOMANYREFS       : constant :=       10059; --  Too many references\n-   EWOULDBLOCK        : constant :=       10035; --  Operation would block\n+   EACCES              : constant :=       10013; --  Permission denied\n+   EADDRINUSE          : constant :=       10048; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=       10049; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=       10047; --  Addr family not supported\n+   EALREADY            : constant :=       10037; --  Operation in progress\n+   EBADF               : constant :=       10009; --  Bad file descriptor\n+   ECONNABORTED        : constant :=       10053; --  Connection aborted\n+   ECONNREFUSED        : constant :=       10061; --  Connection refused\n+   ECONNRESET          : constant :=       10054; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=       10039; --  Destination addr required\n+   EFAULT              : constant :=       10014; --  Bad address\n+   EHOSTDOWN           : constant :=       10064; --  Host is down\n+   EHOSTUNREACH        : constant :=       10065; --  No route to host\n+   EINPROGRESS         : constant :=       10036; --  Operation now in progress\n+   EINTR               : constant :=       10004; --  Interrupted system call\n+   EINVAL              : constant :=       10022; --  Invalid argument\n+   EIO                 : constant :=       10101; --  Input output error\n+   EISCONN             : constant :=       10056; --  Socket already connected\n+   ELOOP               : constant :=       10062; --  Too many symbolic links\n+   EMFILE              : constant :=       10024; --  Too many open files\n+   EMSGSIZE            : constant :=       10040; --  Message too long\n+   ENAMETOOLONG        : constant :=       10063; --  Name too long\n+   ENETDOWN            : constant :=       10050; --  Network is down\n+   ENETRESET           : constant :=       10052; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=       10051; --  Network is unreachable\n+   ENOBUFS             : constant :=       10055; --  No buffer space available\n+   ENOPROTOOPT         : constant :=       10042; --  Protocol not available\n+   ENOTCONN            : constant :=       10057; --  Socket not connected\n+   ENOTSOCK            : constant :=       10038; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=       10045; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=       10046; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=       10043; --  Unknown protocol\n+   EPROTOTYPE          : constant :=       10041; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=       10058; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=       10044; --  Socket type not supported\n+   ETIMEDOUT           : constant :=       10060; --  Connection timed out\n+   ETOOMANYREFS        : constant :=       10059; --  Too many references\n+   EWOULDBLOCK         : constant :=       10035; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=       11001; --  Unknown host\n-   TRY_AGAIN          : constant :=       11002; --  Host name lookup failure\n-   NO_DATA            : constant :=       11004; --  No data record for name\n-   NO_RECOVERY        : constant :=       11003; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=       11001; --  Unknown host\n+   TRY_AGAIN           : constant :=       11002; --  Host name lookup failure\n+   NO_DATA             : constant :=       11004; --  No data record for name\n+   NO_RECOVERY         : constant :=       11003; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          -1; --  Send end of record\n-   MSG_WAITALL        : constant :=          -1; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=          -1; --  Send end of record\n+   MSG_WAITALL         : constant :=          -1; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=          -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          19; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=          -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          19; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=  2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=  2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        4100; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.short;\n+   subtype H_Length_T   is Interfaces.C.short;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n \n    ------------------------------\n    -- MinGW-specific constants --\n@@ -193,16 +212,9 @@ package GNAT.Sockets.Constants is\n    --  These constants may be used only within the MinGW version of\n    --  GNAT.Sockets.Thin.\n \n-   WSASYSNOTREADY     : constant :=       10091; --  System not ready\n-   WSAVERNOTSUPPORTED : constant :=       10092; --  Version not supported\n-   WSANOTINITIALISED  : constant :=       10093; --  Winsock not initialized\n-   WSAEDISCON         : constant :=       10101; --  Disconnected\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n-\n-   Thread_Blocking_IO : constant Boolean := True;\n-   --  Set False for contexts where socket i/o are process blocking\n+   WSASYSNOTREADY      : constant :=       10091; --  System not ready\n+   WSAVERNOTSUPPORTED  : constant :=       10092; --  Version not supported\n+   WSANOTINITIALISED   : constant :=       10093; --  Winsock not initialized\n+   WSAEDISCON          : constant :=       10101; --  Disconnected\n \n end GNAT.Sockets.Constants;"}, {"sha": "2d5f2d98affa9ebccee54ff5b73d45e93c4bea56", "filename": "gcc/ada/g-soccon-solaris-64.ads", "status": "modified", "additions": 100, "deletions": 88, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-solaris-64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-solaris-64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-solaris-64.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,160 +35,172 @@\n --  by the GNAT.Sockets package (g-socket.ads). This package should not be\n --  directly with'ed by an applications program.\n \n---  This is the version for sparc64-sun-solaris2.8\n+--  This is the version for sparc-sun-solaris2.8\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          26; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          26; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           2; --  Stream socket\n-   SOCK_DGRAM         : constant :=           1; --  Datagram socket\n+   SOCK_STREAM         : constant :=           2; --  Stream socket\n+   SOCK_DGRAM          : constant :=           1; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=         125; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         126; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         124; --  Addr family not supported\n-   EALREADY           : constant :=         149; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         130; --  Connection aborted\n-   ECONNREFUSED       : constant :=         146; --  Connection refused\n-   ECONNRESET         : constant :=         131; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          96; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=         147; --  Host is down\n-   EHOSTUNREACH       : constant :=         148; --  No route to host\n-   EINPROGRESS        : constant :=         150; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=         133; --  Socket already connected\n-   ELOOP              : constant :=          90; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          97; --  Message too long\n-   ENAMETOOLONG       : constant :=          78; --  Name too long\n-   ENETDOWN           : constant :=         127; --  Network is down\n-   ENETRESET          : constant :=         129; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         128; --  Network is unreachable\n-   ENOBUFS            : constant :=         132; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          99; --  Protocol not available\n-   ENOTCONN           : constant :=         134; --  Socket not connected\n-   ENOTSOCK           : constant :=          95; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         122; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         123; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         120; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          98; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         143; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         121; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         145; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         144; --  Too many references\n-   EWOULDBLOCK        : constant :=          11; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=         125; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         126; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         124; --  Addr family not supported\n+   EALREADY            : constant :=         149; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         130; --  Connection aborted\n+   ECONNREFUSED        : constant :=         146; --  Connection refused\n+   ECONNRESET          : constant :=         131; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          96; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         147; --  Host is down\n+   EHOSTUNREACH        : constant :=         148; --  No route to host\n+   EINPROGRESS         : constant :=         150; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         133; --  Socket already connected\n+   ELOOP               : constant :=          90; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          97; --  Message too long\n+   ENAMETOOLONG        : constant :=          78; --  Name too long\n+   ENETDOWN            : constant :=         127; --  Network is down\n+   ENETRESET           : constant :=         129; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         128; --  Network is unreachable\n+   ENOBUFS             : constant :=         132; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          99; --  Protocol not available\n+   ENOTCONN            : constant :=         134; --  Socket not connected\n+   ENOTSOCK            : constant :=          95; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         122; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         123; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         120; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          98; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         143; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         121; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         145; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         144; --  Too many references\n+   EWOULDBLOCK         : constant :=          11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=          -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=          16; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          17; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          18; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          19; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          20; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=          -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          16; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          17; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          18; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          19; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          20; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=          16; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=          16; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           8; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           8; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          32; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "2d5f2d98affa9ebccee54ff5b73d45e93c4bea56", "filename": "gcc/ada/g-soccon-solaris.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-solaris.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          26; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          26; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           2; --  Stream socket\n-   SOCK_DGRAM         : constant :=           1; --  Datagram socket\n+   SOCK_STREAM         : constant :=           2; --  Stream socket\n+   SOCK_DGRAM          : constant :=           1; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=         125; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         126; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         124; --  Addr family not supported\n-   EALREADY           : constant :=         149; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         130; --  Connection aborted\n-   ECONNREFUSED       : constant :=         146; --  Connection refused\n-   ECONNRESET         : constant :=         131; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          96; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=         147; --  Host is down\n-   EHOSTUNREACH       : constant :=         148; --  No route to host\n-   EINPROGRESS        : constant :=         150; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=         133; --  Socket already connected\n-   ELOOP              : constant :=          90; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          97; --  Message too long\n-   ENAMETOOLONG       : constant :=          78; --  Name too long\n-   ENETDOWN           : constant :=         127; --  Network is down\n-   ENETRESET          : constant :=         129; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         128; --  Network is unreachable\n-   ENOBUFS            : constant :=         132; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          99; --  Protocol not available\n-   ENOTCONN           : constant :=         134; --  Socket not connected\n-   ENOTSOCK           : constant :=          95; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         122; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         123; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         120; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          98; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         143; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         121; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         145; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         144; --  Too many references\n-   EWOULDBLOCK        : constant :=          11; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=         125; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         126; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         124; --  Addr family not supported\n+   EALREADY            : constant :=         149; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         130; --  Connection aborted\n+   ECONNREFUSED        : constant :=         146; --  Connection refused\n+   ECONNRESET          : constant :=         131; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          96; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=         147; --  Host is down\n+   EHOSTUNREACH        : constant :=         148; --  No route to host\n+   EINPROGRESS         : constant :=         150; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=         133; --  Socket already connected\n+   ELOOP               : constant :=          90; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          97; --  Message too long\n+   ENAMETOOLONG        : constant :=          78; --  Name too long\n+   ENETDOWN            : constant :=         127; --  Network is down\n+   ENETRESET           : constant :=         129; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         128; --  Network is unreachable\n+   ENOBUFS             : constant :=         132; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          99; --  Protocol not available\n+   ENOTCONN            : constant :=         134; --  Socket not connected\n+   ENOTSOCK            : constant :=          95; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         122; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         123; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         120; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          98; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         143; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         121; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         145; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         144; --  Too many references\n+   EWOULDBLOCK         : constant :=          11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=          -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=          16; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          17; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          18; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          19; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          20; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=          -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          16; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          17; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          18; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          19; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          20; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=          16; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=          16; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          32; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "a14e6106d4a46f4d3d1f1f1ed79c1a2bb93fda79", "filename": "gcc/ada/g-soccon-tru64.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-tru64.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          26; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          26; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=          48; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=          49; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=          47; --  Addr family not supported\n-   EALREADY           : constant :=          37; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          53; --  Connection aborted\n-   ECONNREFUSED       : constant :=          61; --  Connection refused\n-   ECONNRESET         : constant :=          54; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          39; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=          64; --  Host is down\n-   EHOSTUNREACH       : constant :=          65; --  No route to host\n-   EINPROGRESS        : constant :=          36; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=          56; --  Socket already connected\n-   ELOOP              : constant :=          62; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          40; --  Message too long\n-   ENAMETOOLONG       : constant :=          63; --  Name too long\n-   ENETDOWN           : constant :=          50; --  Network is down\n-   ENETRESET          : constant :=          52; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          51; --  Network is unreachable\n-   ENOBUFS            : constant :=          55; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          42; --  Protocol not available\n-   ENOTCONN           : constant :=          57; --  Socket not connected\n-   ENOTSOCK           : constant :=          38; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=          45; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=          46; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=          43; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          41; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          58; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=          44; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          60; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          59; --  Too many references\n-   EWOULDBLOCK        : constant :=          35; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          48; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          49; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          47; --  Addr family not supported\n+   EALREADY            : constant :=          37; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=          53; --  Connection aborted\n+   ECONNREFUSED        : constant :=          61; --  Connection refused\n+   ECONNRESET          : constant :=          54; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          39; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=          64; --  Host is down\n+   EHOSTUNREACH        : constant :=          65; --  No route to host\n+   EINPROGRESS         : constant :=          36; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=          56; --  Socket already connected\n+   ELOOP               : constant :=          62; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          40; --  Message too long\n+   ENAMETOOLONG        : constant :=          63; --  Name too long\n+   ENETDOWN            : constant :=          50; --  Network is down\n+   ENETRESET           : constant :=          52; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=          51; --  Network is unreachable\n+   ENOBUFS             : constant :=          55; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          42; --  Protocol not available\n+   ENOTCONN            : constant :=          57; --  Socket not connected\n+   ENOTSOCK            : constant :=          38; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          45; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          46; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          43; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          41; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=          58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          44; --  Socket type not supported\n+   ETIMEDOUT           : constant :=          60; --  Connection timed out\n+   ETOOMANYREFS        : constant :=          59; --  Too many references\n+   EWOULDBLOCK         : constant :=          35; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=        1024; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=        1024; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          32; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         512; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           0; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "072ee499c3c8be15474258daee24a2182f0b0534", "filename": "gcc/ada/g-soccon-vms.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-vms.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,156 +39,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=           2; --  IPv4 address family\n-   AF_INET6           : constant :=          26; --  IPv6 address family\n+   AF_INET             : constant :=           2; --  IPv4 address family\n+   AF_INET6            : constant :=          26; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=           1; --  Stream socket\n-   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+   SOCK_STREAM         : constant :=           1; --  Stream socket\n+   SOCK_DGRAM          : constant :=           2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=          13; --  Permission denied\n-   EADDRINUSE         : constant :=          48; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=          49; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=          47; --  Addr family not supported\n-   EALREADY           : constant :=          37; --  Operation in progress\n-   EBADF              : constant :=           9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          53; --  Connection aborted\n-   ECONNREFUSED       : constant :=          61; --  Connection refused\n-   ECONNRESET         : constant :=          54; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=          39; --  Destination addr required\n-   EFAULT             : constant :=          14; --  Bad address\n-   EHOSTDOWN          : constant :=          64; --  Host is down\n-   EHOSTUNREACH       : constant :=          65; --  No route to host\n-   EINPROGRESS        : constant :=          36; --  Operation now in progress\n-   EINTR              : constant :=           4; --  Interrupted system call\n-   EINVAL             : constant :=          22; --  Invalid argument\n-   EIO                : constant :=           5; --  Input output error\n-   EISCONN            : constant :=          56; --  Socket already connected\n-   ELOOP              : constant :=          62; --  Too many symbolic links\n-   EMFILE             : constant :=          24; --  Too many open files\n-   EMSGSIZE           : constant :=          40; --  Message too long\n-   ENAMETOOLONG       : constant :=          63; --  Name too long\n-   ENETDOWN           : constant :=          50; --  Network is down\n-   ENETRESET          : constant :=          52; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          51; --  Network is unreachable\n-   ENOBUFS            : constant :=          55; --  No buffer space available\n-   ENOPROTOOPT        : constant :=          42; --  Protocol not available\n-   ENOTCONN           : constant :=          57; --  Socket not connected\n-   ENOTSOCK           : constant :=          38; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=          45; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=          46; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=          43; --  Unknown protocol\n-   EPROTOTYPE         : constant :=          41; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          58; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=          44; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          60; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          59; --  Too many references\n-   EWOULDBLOCK        : constant :=          35; --  Operation would block\n+   EACCES              : constant :=          13; --  Permission denied\n+   EADDRINUSE          : constant :=          48; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=          49; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=          47; --  Addr family not supported\n+   EALREADY            : constant :=          37; --  Operation in progress\n+   EBADF               : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=          53; --  Connection aborted\n+   ECONNREFUSED        : constant :=          61; --  Connection refused\n+   ECONNRESET          : constant :=          54; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=          39; --  Destination addr required\n+   EFAULT              : constant :=          14; --  Bad address\n+   EHOSTDOWN           : constant :=          64; --  Host is down\n+   EHOSTUNREACH        : constant :=          65; --  No route to host\n+   EINPROGRESS         : constant :=          36; --  Operation now in progress\n+   EINTR               : constant :=           4; --  Interrupted system call\n+   EINVAL              : constant :=          22; --  Invalid argument\n+   EIO                 : constant :=           5; --  Input output error\n+   EISCONN             : constant :=          56; --  Socket already connected\n+   ELOOP               : constant :=          62; --  Too many symbolic links\n+   EMFILE              : constant :=          24; --  Too many open files\n+   EMSGSIZE            : constant :=          40; --  Message too long\n+   ENAMETOOLONG        : constant :=          63; --  Name too long\n+   ENETDOWN            : constant :=          50; --  Network is down\n+   ENETRESET           : constant :=          52; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=          51; --  Network is unreachable\n+   ENOBUFS             : constant :=          55; --  No buffer space available\n+   ENOPROTOOPT         : constant :=          42; --  Protocol not available\n+   ENOTCONN            : constant :=          57; --  Socket not connected\n+   ENOTSOCK            : constant :=          38; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=          45; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=          46; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=          43; --  Unknown protocol\n+   EPROTOTYPE          : constant :=          41; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=          58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=          44; --  Socket type not supported\n+   ETIMEDOUT           : constant :=          60; --  Connection timed out\n+   ETOOMANYREFS        : constant :=          59; --  Too many references\n+   EWOULDBLOCK         : constant :=          35; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n-   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n-   NO_DATA            : constant :=           4; --  No data record for name\n-   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=           1; --  Unknown host\n+   TRY_AGAIN           : constant :=           2; --  Host name lookup failure\n+   NO_DATA             : constant :=           4; --  No data record for name\n+   NO_RECOVERY         : constant :=           3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+   FIONBIO             : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=  1074030207; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=           0; --  No more recv\n-   SHUT_WR            : constant :=           1; --  No more send\n-   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+   SHUT_RD             : constant :=           0; --  No more recv\n+   SHUT_WR             : constant :=           1; --  No more send\n+   SHUT_RDWR           : constant :=           2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=          17; --  UDP\n-   IPPROTO_TCP        : constant :=           6; --  TCP\n+   SOL_SOCKET          : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=          17; --  UDP\n+   IPPROTO_TCP         : constant :=           6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=           1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n-   MSG_EOR            : constant :=           8; --  Send end of record\n-   MSG_WAITALL        : constant :=         128; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=           0;\n+   MSG_OOB             : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=           2; --  Peek at incoming data\n+   MSG_EOR             : constant :=           8; --  Send end of record\n+   MSG_WAITALL         : constant :=         128; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=           0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=         512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=         128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=        4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=        4102; --  Reception timeout\n-   SO_ERROR           : constant :=        4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=          -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=           1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=           4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=        4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=        4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=        4102; --  Reception timeout\n+   SO_ERROR            : constant :=        4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=           9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=          11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=          13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=        1024; --  Maximum writev iovcnt\n+   IOV_MAX             : constant :=        1024; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=           4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=           4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=          16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=          28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=         512; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=           1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=           0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "8af174351dc37ff9e8da301a90b132c5303454f8", "filename": "gcc/ada/g-soccon-vxworks.ads", "status": "modified", "additions": 104, "deletions": 92, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-vxworks.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -35,156 +35,175 @@\n --  by the GNAT.Sockets package (g-socket.ads). This package should not be\n --  directly with'ed by an applications program.\n \n---  This is the version for powerpc-wrs-vxworks\n+--  This is the version for VxWorks\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=          2; --  IPv4 address family\n-   AF_INET6           : constant :=         -1; --  IPv6 address family\n+   AF_INET             : constant :=          2; --  IPv4 address family\n+   AF_INET6            : constant :=         28; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=          1; --  Stream socket\n-   SOCK_DGRAM         : constant :=          2; --  Datagram socket\n+   SOCK_STREAM         : constant :=          1; --  Stream socket\n+   SOCK_DGRAM          : constant :=          2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=         13; --  Permission denied\n-   EADDRINUSE         : constant :=         48; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=         49; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=         47; --  Addr family not supported\n-   EALREADY           : constant :=         69; --  Operation in progress\n-   EBADF              : constant :=          9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=         53; --  Connection aborted\n-   ECONNREFUSED       : constant :=         61; --  Connection refused\n-   ECONNRESET         : constant :=         54; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=         40; --  Destination addr required\n-   EFAULT             : constant :=         14; --  Bad address\n-   EHOSTDOWN          : constant :=         67; --  Host is down\n-   EHOSTUNREACH       : constant :=         65; --  No route to host\n-   EINPROGRESS        : constant :=         68; --  Operation now in progress\n-   EINTR              : constant :=          4; --  Interrupted system call\n-   EINVAL             : constant :=         22; --  Invalid argument\n-   EIO                : constant :=          5; --  Input output error\n-   EISCONN            : constant :=         56; --  Socket already connected\n-   ELOOP              : constant :=         64; --  Too many symbolic links\n-   EMFILE             : constant :=         24; --  Too many open files\n-   EMSGSIZE           : constant :=         36; --  Message too long\n-   ENAMETOOLONG       : constant :=         26; --  Name too long\n-   ENETDOWN           : constant :=         62; --  Network is down\n-   ENETRESET          : constant :=         52; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=         51; --  Network is unreachable\n-   ENOBUFS            : constant :=         55; --  No buffer space available\n-   ENOPROTOOPT        : constant :=         42; --  Protocol not available\n-   ENOTCONN           : constant :=         57; --  Socket not connected\n-   ENOTSOCK           : constant :=         50; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=         45; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=         46; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=         43; --  Unknown protocol\n-   EPROTOTYPE         : constant :=         41; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=         58; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=         44; --  Socket type not supported\n-   ETIMEDOUT          : constant :=         60; --  Connection timed out\n-   ETOOMANYREFS       : constant :=         59; --  Too many references\n-   EWOULDBLOCK        : constant :=         70; --  Operation would block\n+   EACCES              : constant :=         13; --  Permission denied\n+   EADDRINUSE          : constant :=         48; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         49; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         47; --  Addr family not supported\n+   EALREADY            : constant :=         69; --  Operation in progress\n+   EBADF               : constant :=          9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=         53; --  Connection aborted\n+   ECONNREFUSED        : constant :=         61; --  Connection refused\n+   ECONNRESET          : constant :=         54; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         40; --  Destination addr required\n+   EFAULT              : constant :=         14; --  Bad address\n+   EHOSTDOWN           : constant :=         67; --  Host is down\n+   EHOSTUNREACH        : constant :=         65; --  No route to host\n+   EINPROGRESS         : constant :=         68; --  Operation now in progress\n+   EINTR               : constant :=          4; --  Interrupted system call\n+   EINVAL              : constant :=         22; --  Invalid argument\n+   EIO                 : constant :=          5; --  Input output error\n+   EISCONN             : constant :=         56; --  Socket already connected\n+   ELOOP               : constant :=         64; --  Too many symbolic links\n+   EMFILE              : constant :=         24; --  Too many open files\n+   EMSGSIZE            : constant :=         36; --  Message too long\n+   ENAMETOOLONG        : constant :=         26; --  Name too long\n+   ENETDOWN            : constant :=         62; --  Network is down\n+   ENETRESET           : constant :=         52; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=         51; --  Network is unreachable\n+   ENOBUFS             : constant :=         55; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         42; --  Protocol not available\n+   ENOTCONN            : constant :=         57; --  Socket not connected\n+   ENOTSOCK            : constant :=         50; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         45; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         46; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         43; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         41; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=         58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         44; --  Socket type not supported\n+   ETIMEDOUT           : constant :=         60; --  Connection timed out\n+   ETOOMANYREFS        : constant :=         59; --  Too many references\n+   EWOULDBLOCK         : constant :=         70; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=          1; --  Unknown host\n-   TRY_AGAIN          : constant :=          2; --  Host name lookup failure\n-   NO_DATA            : constant :=          4; --  No data record for name\n-   NO_RECOVERY        : constant :=          3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=          1; --  Unknown host\n+   TRY_AGAIN           : constant :=          2; --  Host name lookup failure\n+   NO_DATA             : constant :=          4; --  No data record for name\n+   NO_RECOVERY         : constant :=          3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=         16; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=          1; --  How many bytes to read\n+   FIONBIO             : constant :=         16; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=          1; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=          0; --  No more recv\n-   SHUT_WR            : constant :=          1; --  No more send\n-   SHUT_RDWR          : constant :=          2; --  No more recv/send\n+   SHUT_RD             : constant :=          0; --  No more recv\n+   SHUT_WR             : constant :=          1; --  No more send\n+   SHUT_RDWR           : constant :=          2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=      65535; --  Options for socket level\n-   IPPROTO_IP         : constant :=          0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=         17; --  UDP\n-   IPPROTO_TCP        : constant :=          6; --  TCP\n+   SOL_SOCKET          : constant :=      65535; --  Options for socket level\n+   IPPROTO_IP          : constant :=          0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=         17; --  UDP\n+   IPPROTO_TCP         : constant :=          6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=          1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=          2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          8; --  Send end of record\n-   MSG_WAITALL        : constant :=         64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=         -1; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant :=          0;\n+   MSG_OOB             : constant :=          1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=          2; --  Peek at incoming data\n+   MSG_EOR             : constant :=          8; --  Send end of record\n+   MSG_WAITALL         : constant :=         64; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=         -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant :=          0;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=          1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=          4; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=        512; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=          8; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=        128; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=         32; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=       4097; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=       4098; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=       4101; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=       4102; --  Reception timeout\n-   SO_ERROR           : constant :=       4103; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=          9; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=         10; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=         11; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=         12; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=         13; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=         -1; --  Get datagram info\n+   TCP_NODELAY         : constant :=          1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=          4; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=        512; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=          8; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=        128; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=         32; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=       4097; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=       4098; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=       4101; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=       4102; --  Reception timeout\n+   SO_ERROR            : constant :=       4103; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=          9; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=         10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=         11; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=         12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=         13; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=         -1; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant := 2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant := 2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=          4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=          4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=          4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=          4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=         16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=         28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        256; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=          1; --  Need buffer for Netdb ops\n+   Need_Netdb_Buffer   : constant :=          1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=          1; --  Sockaddr has sa_len field\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n \n    --------------------------------\n    -- VxWorks-specific constants --\n@@ -193,14 +212,7 @@ package GNAT.Sockets.Constants is\n    --  These constants may be used only within the VxWorks version of\n    --  GNAT.Sockets.Thin.\n \n-   OK                 : constant :=          0; --  VxWorks generic success\n-   ERROR              : constant :=         -1; --  VxWorks generic error\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n-\n-   Thread_Blocking_IO : constant Boolean := True;\n-   --  Set False for contexts where socket i/o are process blocking\n+   OK                  : constant :=          0; --  VxWorks generic success\n+   ERROR               : constant :=         -1; --  VxWorks generic error\n \n end GNAT.Sockets.Constants;"}, {"sha": "b7f8fe4be77950f5582ad97e330b3b2bacc9a8c4", "filename": "gcc/ada/g-soccon.ads", "status": "modified", "additions": 99, "deletions": 87, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-soccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,156 +46,168 @@\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n+with Interfaces.C;\n package GNAT.Sockets.Constants is\n \n    --------------\n    -- Families --\n    --------------\n \n-   AF_INET            : constant :=            2; --  IPv4 address family\n-   AF_INET6           : constant :=           10; --  IPv6 address family\n+   AF_INET             : constant :=          2; --  IPv4 address family\n+   AF_INET6            : constant :=         10; --  IPv6 address family\n \n    -----------\n    -- Modes --\n    -----------\n \n-   SOCK_STREAM        : constant :=            1; --  Stream socket\n-   SOCK_DGRAM         : constant :=            2; --  Datagram socket\n+   SOCK_STREAM         : constant :=          1; --  Stream socket\n+   SOCK_DGRAM          : constant :=          2; --  Datagram socket\n \n    -------------------\n    -- Socket errors --\n    -------------------\n \n-   EACCES             : constant :=           13; --  Permission denied\n-   EADDRINUSE         : constant :=           98; --  Address already in use\n-   EADDRNOTAVAIL      : constant :=           99; --  Cannot assign address\n-   EAFNOSUPPORT       : constant :=           97; --  Addr family not supported\n-   EALREADY           : constant :=          114; --  Operation in progress\n-   EBADF              : constant :=            9; --  Bad file descriptor\n-   ECONNABORTED       : constant :=          103; --  Connection aborted\n-   ECONNREFUSED       : constant :=          111; --  Connection refused\n-   ECONNRESET         : constant :=          104; --  Connection reset by peer\n-   EDESTADDRREQ       : constant :=           89; --  Destination addr required\n-   EFAULT             : constant :=           14; --  Bad address\n-   EHOSTDOWN          : constant :=          112; --  Host is down\n-   EHOSTUNREACH       : constant :=          113; --  No route to host\n-   EINPROGRESS        : constant :=          115; --  Operation now in progress\n-   EINTR              : constant :=            4; --  Interrupted system call\n-   EINVAL             : constant :=           22; --  Invalid argument\n-   EIO                : constant :=            5; --  Input output error\n-   EISCONN            : constant :=          106; --  Socket already connected\n-   ELOOP              : constant :=           40; --  Too many symbolic links\n-   EMFILE             : constant :=           24; --  Too many open files\n-   EMSGSIZE           : constant :=           90; --  Message too long\n-   ENAMETOOLONG       : constant :=           36; --  Name too long\n-   ENETDOWN           : constant :=          100; --  Network is down\n-   ENETRESET          : constant :=          102; --  Disconn. on network reset\n-   ENETUNREACH        : constant :=          101; --  Network is unreachable\n-   ENOBUFS            : constant :=          105; --  No buffer space available\n-   ENOPROTOOPT        : constant :=           92; --  Protocol not available\n-   ENOTCONN           : constant :=          107; --  Socket not connected\n-   ENOTSOCK           : constant :=           88; --  Operation on non socket\n-   EOPNOTSUPP         : constant :=           95; --  Operation not supported\n-   EPFNOSUPPORT       : constant :=           96; --  Unknown protocol family\n-   EPROTONOSUPPORT    : constant :=           93; --  Unknown protocol\n-   EPROTOTYPE         : constant :=           91; --  Unknown protocol type\n-   ESHUTDOWN          : constant :=          108; --  Cannot send once shutdown\n-   ESOCKTNOSUPPORT    : constant :=           94; --  Socket type not supported\n-   ETIMEDOUT          : constant :=          110; --  Connection timed out\n-   ETOOMANYREFS       : constant :=          109; --  Too many references\n-   EWOULDBLOCK        : constant :=           11; --  Operation would block\n+   EACCES              : constant :=         13; --  Permission denied\n+   EADDRINUSE          : constant :=         98; --  Address already in use\n+   EADDRNOTAVAIL       : constant :=         99; --  Cannot assign address\n+   EAFNOSUPPORT        : constant :=         97; --  Addr family not supported\n+   EALREADY            : constant :=        114; --  Operation in progress\n+   EBADF               : constant :=          9; --  Bad file descriptor\n+   ECONNABORTED        : constant :=        103; --  Connection aborted\n+   ECONNREFUSED        : constant :=        111; --  Connection refused\n+   ECONNRESET          : constant :=        104; --  Connection reset by peer\n+   EDESTADDRREQ        : constant :=         89; --  Destination addr required\n+   EFAULT              : constant :=         14; --  Bad address\n+   EHOSTDOWN           : constant :=        112; --  Host is down\n+   EHOSTUNREACH        : constant :=        113; --  No route to host\n+   EINPROGRESS         : constant :=        115; --  Operation now in progress\n+   EINTR               : constant :=          4; --  Interrupted system call\n+   EINVAL              : constant :=         22; --  Invalid argument\n+   EIO                 : constant :=          5; --  Input output error\n+   EISCONN             : constant :=        106; --  Socket already connected\n+   ELOOP               : constant :=         40; --  Too many symbolic links\n+   EMFILE              : constant :=         24; --  Too many open files\n+   EMSGSIZE            : constant :=         90; --  Message too long\n+   ENAMETOOLONG        : constant :=         36; --  Name too long\n+   ENETDOWN            : constant :=        100; --  Network is down\n+   ENETRESET           : constant :=        102; --  Disconn. on network reset\n+   ENETUNREACH         : constant :=        101; --  Network is unreachable\n+   ENOBUFS             : constant :=        105; --  No buffer space available\n+   ENOPROTOOPT         : constant :=         92; --  Protocol not available\n+   ENOTCONN            : constant :=        107; --  Socket not connected\n+   ENOTSOCK            : constant :=         88; --  Operation on non socket\n+   EOPNOTSUPP          : constant :=         95; --  Operation not supported\n+   EPFNOSUPPORT        : constant :=         96; --  Unknown protocol family\n+   EPROTONOSUPPORT     : constant :=         93; --  Unknown protocol\n+   EPROTOTYPE          : constant :=         91; --  Unknown protocol type\n+   ESHUTDOWN           : constant :=        108; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT     : constant :=         94; --  Socket type not supported\n+   ETIMEDOUT           : constant :=        110; --  Connection timed out\n+   ETOOMANYREFS        : constant :=        109; --  Too many references\n+   EWOULDBLOCK         : constant :=         11; --  Operation would block\n \n    -----------------\n    -- Host errors --\n    -----------------\n \n-   HOST_NOT_FOUND     : constant :=            1; --  Unknown host\n-   TRY_AGAIN          : constant :=            2; --  Host name lookup failure\n-   NO_DATA            : constant :=            4; --  No data record for name\n-   NO_RECOVERY        : constant :=            3; --  Non recoverable errors\n+   HOST_NOT_FOUND      : constant :=          1; --  Unknown host\n+   TRY_AGAIN           : constant :=          2; --  Host name lookup failure\n+   NO_DATA             : constant :=          4; --  No data record for name\n+   NO_RECOVERY         : constant :=          3; --  Non recoverable errors\n \n    -------------------\n    -- Control flags --\n    -------------------\n \n-   FIONBIO            : constant :=        21537; --  Set/clear non-blocking io\n-   FIONREAD           : constant :=        21531; --  How many bytes to read\n+   FIONBIO             : constant :=      21537; --  Set/clear non-blocking io\n+   FIONREAD            : constant :=      21531; --  How many bytes to read\n \n    --------------------\n    -- Shutdown modes --\n    --------------------\n \n-   SHUT_RD            : constant :=            0; --  No more recv\n-   SHUT_WR            : constant :=            1; --  No more send\n-   SHUT_RDWR          : constant :=            2; --  No more recv/send\n+   SHUT_RD             : constant :=          0; --  No more recv\n+   SHUT_WR             : constant :=          1; --  No more send\n+   SHUT_RDWR           : constant :=          2; --  No more recv/send\n \n    ---------------------\n    -- Protocol levels --\n    ---------------------\n \n-   SOL_SOCKET         : constant :=            1; --  Options for socket level\n-   IPPROTO_IP         : constant :=            0; --  Dummy protocol for IP\n-   IPPROTO_UDP        : constant :=           17; --  UDP\n-   IPPROTO_TCP        : constant :=            6; --  TCP\n+   SOL_SOCKET          : constant :=          1; --  Options for socket level\n+   IPPROTO_IP          : constant :=          0; --  Dummy protocol for IP\n+   IPPROTO_UDP         : constant :=         17; --  UDP\n+   IPPROTO_TCP         : constant :=          6; --  TCP\n \n    -------------------\n    -- Request flags --\n    -------------------\n \n-   MSG_OOB            : constant :=            1; --  Process out-of-band data\n-   MSG_PEEK           : constant :=            2; --  Peek at incoming data\n-   MSG_EOR            : constant :=          128; --  Send end of record\n-   MSG_WAITALL        : constant :=          256; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=        16384; --  No SIGPIPE on send\n-   MSG_Forced_Flags   : constant := MSG_NOSIGNAL;\n+   MSG_OOB             : constant :=          1; --  Process out-of-band data\n+   MSG_PEEK            : constant :=          2; --  Peek at incoming data\n+   MSG_EOR             : constant :=        128; --  Send end of record\n+   MSG_WAITALL         : constant :=        256; --  Wait for full reception\n+   MSG_NOSIGNAL        : constant :=      16384; --  No SIGPIPE on send\n+   MSG_Forced_Flags    : constant := MSG_NOSIGNAL;\n    --  Flags set on all send(2) calls\n \n    --------------------\n    -- Socket options --\n    --------------------\n \n-   TCP_NODELAY        : constant :=            1; --  Do not coalesce packets\n-   SO_REUSEADDR       : constant :=            2; --  Bind reuse local address\n-   SO_REUSEPORT       : constant :=           -1; --  Bind reuse port number\n-   SO_KEEPALIVE       : constant :=            9; --  Enable keep-alive msgs\n-   SO_LINGER          : constant :=           13; --  Defer close to flush data\n-   SO_BROADCAST       : constant :=            6; --  Can send broadcast msgs\n-   SO_SNDBUF          : constant :=            7; --  Set/get send buffer size\n-   SO_RCVBUF          : constant :=            8; --  Set/get recv buffer size\n-   SO_SNDTIMEO        : constant :=           21; --  Emission timeout\n-   SO_RCVTIMEO        : constant :=           20; --  Reception timeout\n-   SO_ERROR           : constant :=            4; --  Get/clear error status\n-   IP_MULTICAST_IF    : constant :=           32; --  Set/get mcast interface\n-   IP_MULTICAST_TTL   : constant :=           33; --  Set/get multicast TTL\n-   IP_MULTICAST_LOOP  : constant :=           34; --  Set/get mcast loopback\n-   IP_ADD_MEMBERSHIP  : constant :=           35; --  Join a multicast group\n-   IP_DROP_MEMBERSHIP : constant :=           36; --  Leave a multicast group\n-   IP_PKTINFO         : constant :=            8; --  Get datagram info\n+   TCP_NODELAY         : constant :=          1; --  Do not coalesce packets\n+   SO_REUSEADDR        : constant :=          2; --  Bind reuse local address\n+   SO_REUSEPORT        : constant :=         -1; --  Bind reuse port number\n+   SO_KEEPALIVE        : constant :=          9; --  Enable keep-alive msgs\n+   SO_LINGER           : constant :=         13; --  Defer close to flush data\n+   SO_BROADCAST        : constant :=          6; --  Can send broadcast msgs\n+   SO_SNDBUF           : constant :=          7; --  Set/get send buffer size\n+   SO_RCVBUF           : constant :=          8; --  Set/get recv buffer size\n+   SO_SNDTIMEO         : constant :=         21; --  Emission timeout\n+   SO_RCVTIMEO         : constant :=         20; --  Reception timeout\n+   SO_ERROR            : constant :=          4; --  Get/clear error status\n+   IP_MULTICAST_IF     : constant :=         32; --  Set/get mcast interface\n+   IP_MULTICAST_TTL    : constant :=         33; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP   : constant :=         34; --  Set/get mcast loopback\n+   IP_ADD_MEMBERSHIP   : constant :=         35; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP  : constant :=         36; --  Leave a multicast group\n+   IP_PKTINFO          : constant :=          8; --  Get datagram info\n \n    -------------------\n    -- System limits --\n    -------------------\n \n-   IOV_MAX            : constant :=   2147483647; --  Maximum writev iovcnt\n+   IOV_MAX             : constant := 2147483647; --  Maximum writev iovcnt\n \n    ----------------------\n    -- Type definitions --\n    ----------------------\n \n    --  Sizes (in bytes) of the components of struct timeval\n \n-   SIZEOF_tv_sec      : constant :=            4; --  tv_sec\n-   SIZEOF_tv_usec     : constant :=            4; --  tv_usec\n+   SIZEOF_tv_sec       : constant :=          4; --  tv_sec\n+   SIZEOF_tv_usec      : constant :=          4; --  tv_usec\n+\n+   --  Sizes of protocol specific address types (for sockaddr.sa_len)\n+\n+   SIZEOF_sockaddr_in  : constant :=         16; --  struct sockaddr_in\n+   SIZEOF_sockaddr_in6 : constant :=         28; --  struct sockaddr_in6\n+\n+   --  Size of file descriptor sets\n+\n+   SIZEOF_fd_set       : constant :=        128; --  fd_set\n+\n+   --  Fields of struct hostent\n+\n+   subtype H_Addrtype_T is Interfaces.C.int;\n+   subtype H_Length_T   is Interfaces.C.int;\n \n    ----------------------------------------\n    -- Properties of supported interfaces --\n    ----------------------------------------\n \n-   Need_Netdb_Buffer  : constant :=            1; --  Need buffer for Netdb ops\n-\n-   ----------------------\n-   -- Additional flags --\n-   ----------------------\n+   Need_Netdb_Buffer   : constant :=          1; --  Need buffer for Netdb ops\n+   Has_Sockaddr_Len    : constant :=          0; --  Sockaddr has sa_len field\n \n    Thread_Blocking_IO : constant Boolean := True;\n    --  Set False for contexts where socket i/o are process blocking"}, {"sha": "4b399405a55714e05d3c1e88793bc9a33c7939b1", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 170, "deletions": 22, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -36,7 +36,9 @@ with Ada.Exceptions;           use Ada.Exceptions;\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C.Strings;\n+\n with GNAT.Sockets.Constants;\n+with GNAT.Sockets.Thin_Common;          use GNAT.Sockets.Thin_Common;\n with GNAT.Sockets.Thin;                 use GNAT.Sockets.Thin;\n with GNAT.Sockets.Thin.Task_Safe_NetDB; use GNAT.Sockets.Thin.Task_Safe_NetDB;\n \n@@ -48,6 +50,8 @@ with System; use System;\n \n package body GNAT.Sockets is\n \n+   package C renames Interfaces.C;\n+\n    use type C.int;\n \n    Finalized   : Boolean := False;\n@@ -63,10 +67,6 @@ package body GNAT.Sockets is\n \n    --  Correspondence tables\n \n-   Families : constant array (Family_Type) of C.int :=\n-                (Family_Inet  => Constants.AF_INET,\n-                 Family_Inet6 => Constants.AF_INET6);\n-\n    Levels : constant array (Level_Type) of C.int :=\n               (Socket_Level              => Constants.SOL_SOCKET,\n                IP_Protocol_For_IP_Level  => Constants.IPPROTO_IP,\n@@ -118,9 +118,6 @@ package body GNAT.Sockets is\n    Hex_To_Char : constant String (1 .. 16) := \"0123456789ABCDEF\";\n    --  Use to print in hexadecimal format\n \n-   function To_In_Addr is new Ada.Unchecked_Conversion (C.int, In_Addr);\n-   function To_Int     is new Ada.Unchecked_Conversion (In_Addr, C.int);\n-\n    function Err_Code_Image (E : Integer) return String;\n    --  Return the value of E surrounded with brackets\n \n@@ -162,7 +159,7 @@ package body GNAT.Sockets is\n    function Is_IP_Address (Name : String) return Boolean;\n    --  Return true when Name is an IP address in standard dot notation\n \n-   function To_In_Addr (Addr : Inet_Addr_Type) return Thin.In_Addr;\n+   function To_In_Addr (Addr : Inet_Addr_Type) return In_Addr;\n    procedure To_Inet_Addr\n      (Addr   : In_Addr;\n       Result : out Inet_Addr_Type);\n@@ -230,6 +227,18 @@ package body GNAT.Sockets is\n      (Stream : in out Stream_Socket_Stream_Type;\n       Item   : Ada.Streams.Stream_Element_Array);\n \n+   procedure Wait_On_Socket\n+     (Socket    : Socket_Type;\n+      For_Read  : Boolean;\n+      Timeout   : Selector_Duration;\n+      Selector  : access Selector_Type := null;\n+      Status    : out Selector_Status);\n+   --  Common code for variants of socket operations supporting a timeout:\n+   --  block in Check_Selector on Socket for at most the indicated timeout.\n+   --  If For_Read is True, Socket is added to the read set for this call, else\n+   --  it is added to the write set. If no selector is provided, a local one is\n+   --  created for this call and destroyed prior to returning.\n+\n    ---------\n    -- \"+\" --\n    ---------\n@@ -282,6 +291,37 @@ package body GNAT.Sockets is\n       Address.Port := Port_Type (Network_To_Short (Sin.Sin_Port));\n    end Accept_Socket;\n \n+   -------------------\n+   -- Accept_Socket --\n+   -------------------\n+\n+   procedure Accept_Socket\n+     (Server   : Socket_Type;\n+      Socket   : out Socket_Type;\n+      Address  : out Sock_Addr_Type;\n+      Timeout  : Selector_Duration;\n+      Selector : access Selector_Type := null;\n+      Status   : out Selector_Status)\n+   is\n+   begin\n+      --  Wait for socket to become available for reading\n+\n+      Wait_On_Socket\n+        (Socket    => Server,\n+         For_Read  => True,\n+         Timeout   => Timeout,\n+         Selector  => Selector,\n+         Status    => Status);\n+\n+      --  Accept connection if available\n+\n+      if Status = Completed then\n+         Accept_Socket (Server, Socket, Address);\n+      else\n+         Socket := No_Socket;\n+      end if;\n+   end Accept_Socket;\n+\n    ---------------\n    -- Addresses --\n    ---------------\n@@ -356,14 +396,14 @@ package body GNAT.Sockets is\n       Res : C.int;\n       Sin : aliased Sockaddr_In;\n       Len : constant C.int := Sin'Size / 8;\n+      --  This assumes that Address.Family = Family_Inet???\n \n    begin\n       if Address.Family = Family_Inet6 then\n          raise Socket_Error with \"IPv6 not supported\";\n       end if;\n \n-      Set_Length  (Sin'Unchecked_Access, Len);\n-      Set_Family  (Sin'Unchecked_Access, Families (Address.Family));\n+      Set_Family  (Sin.Sin_Family, Address.Family);\n       Set_Address (Sin'Unchecked_Access, To_In_Addr (Address.Addr));\n       Set_Port\n         (Sin'Unchecked_Access,\n@@ -387,12 +427,16 @@ package body GNAT.Sockets is\n       Status       : out Selector_Status;\n       Timeout      : Selector_Duration := Forever)\n    is\n-      E_Socket_Set : Socket_Set_Type; --  (No_Socket, No_Socket_Set)\n+      E_Socket_Set : Socket_Set_Type; --  (No_Socket, No_Fd_Set_Access)\n    begin\n       Check_Selector\n         (Selector, R_Socket_Set, W_Socket_Set, E_Socket_Set, Status, Timeout);\n    end Check_Selector;\n \n+   --------------------\n+   -- Check_Selector --\n+   --------------------\n+\n    procedure Check_Selector\n      (Selector     : in out Selector_Type;\n       R_Socket_Set : in out Socket_Set_Type;\n@@ -585,8 +629,7 @@ package body GNAT.Sockets is\n          raise Socket_Error with \"IPv6 not supported\";\n       end if;\n \n-      Set_Length (Sin'Unchecked_Access, Len);\n-      Set_Family (Sin'Unchecked_Access, Families (Server.Family));\n+      Set_Family  (Sin.Sin_Family, Server.Family);\n       Set_Address (Sin'Unchecked_Access, To_In_Addr (Server.Addr));\n       Set_Port\n         (Sin'Unchecked_Access,\n@@ -599,6 +642,55 @@ package body GNAT.Sockets is\n       end if;\n    end Connect_Socket;\n \n+   --------------------\n+   -- Connect_Socket --\n+   --------------------\n+\n+   procedure Connect_Socket\n+     (Socket   : Socket_Type;\n+      Server   : Sock_Addr_Type;\n+      Timeout  : Selector_Duration;\n+      Selector : access Selector_Type := null;\n+      Status   : out Selector_Status)\n+   is\n+      Req : Request_Type;\n+      --  Used to set Socket to non-blocking I/O\n+\n+   begin\n+      --  Set the socket to non-blocking I/O\n+\n+      Req := (Name => Non_Blocking_IO, Enabled => True);\n+      Control_Socket (Socket, Request => Req);\n+\n+      --  Start operation (non-blocking), will raise Socket_Error with\n+      --  EINPROGRESS.\n+\n+      begin\n+         Connect_Socket (Socket, Server);\n+      exception\n+         when E : Socket_Error =>\n+            if Resolve_Exception (E) = Operation_Now_In_Progress then\n+               null;\n+            else\n+               raise;\n+            end if;\n+      end;\n+\n+      --  Wait for socket to become available for writing\n+\n+      Wait_On_Socket\n+        (Socket    => Socket,\n+         For_Read  => False,\n+         Timeout   => Timeout,\n+         Selector  => Selector,\n+         Status    => Status);\n+\n+      --  Reset the socket to blocking I/O\n+\n+      Req := (Name => Non_Blocking_IO, Enabled => False);\n+      Control_Socket (Socket, Request => Req);\n+   end Connect_Socket;\n+\n    --------------------\n    -- Control_Socket --\n    --------------------\n@@ -704,9 +796,9 @@ package body GNAT.Sockets is\n \n    procedure Empty  (Item : in out Socket_Set_Type) is\n    begin\n-      if Item.Set /= No_Socket_Set then\n+      if Item.Set /= No_Fd_Set_Access then\n          Free_Socket_Set (Item.Set);\n-         Item.Set := No_Socket_Set;\n+         Item.Set := No_Fd_Set_Access;\n       end if;\n \n       Item.Last := No_Socket;\n@@ -1257,7 +1349,7 @@ package body GNAT.Sockets is\n \n    procedure Listen_Socket\n      (Socket : Socket_Type;\n-      Length : Positive := 15)\n+      Length : Natural := 15)\n    is\n       Res : constant C.int := C_Listen (C.int (Socket), C.int (Length));\n    begin\n@@ -1273,7 +1365,7 @@ package body GNAT.Sockets is\n    procedure Narrow (Item : in out Socket_Set_Type) is\n       Last : aliased C.int := C.int (Item.Last);\n    begin\n-      if Item.Set /= No_Socket_Set then\n+      if Item.Set /= No_Fd_Set_Access then\n          Last_Socket_In_Set (Item.Set, Last'Unchecked_Access);\n          Item.Last := Socket_Type (Last);\n       end if;\n@@ -1297,6 +1389,63 @@ package body GNAT.Sockets is\n       return To_String (S.Official);\n    end Official_Name;\n \n+   --------------------\n+   -- Wait_On_Socket --\n+   --------------------\n+\n+   procedure Wait_On_Socket\n+     (Socket    : Socket_Type;\n+      For_Read  : Boolean;\n+      Timeout   : Selector_Duration;\n+      Selector  : access Selector_Type := null;\n+      Status    : out Selector_Status)\n+   is\n+      type Local_Selector_Access is access Selector_Type;\n+      for Local_Selector_Access'Storage_Size use Selector_Type'Size;\n+\n+      S : Selector_Access;\n+      --  Selector to use for waiting\n+\n+      R_Fd_Set : Socket_Set_Type;\n+      W_Fd_Set : Socket_Set_Type;\n+      --  Socket sets, empty at elaboration\n+\n+   begin\n+      --  Create selector if not provided by the user\n+\n+      if Selector = null then\n+         declare\n+            Local_S : constant Local_Selector_Access := new Selector_Type;\n+         begin\n+            S := Local_S.all'Unchecked_Access;\n+            Create_Selector (S.all);\n+         end;\n+\n+      else\n+         S := Selector.all'Access;\n+      end if;\n+\n+      if For_Read then\n+         Set (R_Fd_Set, Socket);\n+      else\n+         Set (W_Fd_Set, Socket);\n+      end if;\n+\n+      Check_Selector (S.all, R_Fd_Set, W_Fd_Set, Status, Timeout);\n+\n+      --  Cleanup actions (required in all cases to avoid memory leaks)\n+\n+      if For_Read then\n+         Empty (R_Fd_Set);\n+      else\n+         Empty (W_Fd_Set);\n+      end if;\n+\n+      if Selector = null then\n+         Close_Selector (S.all);\n+      end if;\n+   end Wait_On_Socket;\n+\n    -----------------\n    -- Port_Number --\n    -----------------\n@@ -1638,8 +1787,7 @@ package body GNAT.Sockets is\n       Len : constant C.int := Sin'Size / 8;\n \n    begin\n-      Set_Length (Sin'Unchecked_Access, Len);\n-      Set_Family (Sin'Unchecked_Access, Families (To.Family));\n+      Set_Family  (Sin.Sin_Family, To.Family);\n       Set_Address (Sin'Unchecked_Access, To_In_Addr (To.Addr));\n       Set_Port\n         (Sin'Unchecked_Access,\n@@ -1710,8 +1858,8 @@ package body GNAT.Sockets is\n \n    procedure Set (Item : in out Socket_Set_Type; Socket : Socket_Type) is\n    begin\n-      if Item.Set = No_Socket_Set then\n-         Item.Set  := New_Socket_Set (No_Socket_Set);\n+      if Item.Set = No_Fd_Set_Access then\n+         Item.Set  := New_Socket_Set (No_Fd_Set_Access);\n          Item.Last := Socket;\n \n       elsif Item.Last < Socket then\n@@ -1972,7 +2120,7 @@ package body GNAT.Sockets is\n    -- To_In_Addr --\n    ----------------\n \n-   function To_In_Addr (Addr : Inet_Addr_Type) return Thin.In_Addr is\n+   function To_In_Addr (Addr : Inet_Addr_Type) return In_Addr is\n    begin\n       if Addr.Family = Family_Inet then\n          return (S_B1 => C.unsigned_char (Addr.Sin_V4 (1)),"}, {"sha": "7ebf243904e5210398a71882f25e5dfa8638a322", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 89, "deletions": 44, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -52,8 +52,6 @@ with Ada.Exceptions;\n with Ada.Streams;\n with Ada.Unchecked_Deallocation;\n \n-with System;\n-\n package GNAT.Sockets is\n \n    --  Sockets are designed to provide a consistent communication facility\n@@ -397,6 +395,31 @@ package GNAT.Sockets is\n \n    No_Socket : constant Socket_Type;\n \n+   type Selector_Type is limited private;\n+   type Selector_Access is access all Selector_Type;\n+   --  Selector objects are used to wait for i/o events to occur on sockets\n+\n+   --  Timeval_Duration is a subtype of Standard.Duration because the full\n+   --  range of Standard.Duration cannot be represented in the equivalent C\n+   --  structure. Moreover, negative values are not allowed to avoid system\n+   --  incompatibilities.\n+\n+   Immediate : constant := 0.0;\n+   Forever   : constant := Duration (Integer'Last) * 1.0;\n+   --  Should be Duration 2 ** (Constants.SIZEOF_tv_sec * 8 - 1) - 1 ???\n+\n+   subtype Timeval_Duration is Duration range Immediate .. Forever;\n+\n+   subtype Selector_Duration is Timeval_Duration;\n+   --  Timeout value for selector operations\n+\n+   type Selector_Status is (Completed, Expired, Aborted);\n+   --  Completion status of a selector operation, indicated as follows:\n+   --    Complete: one of the expected events occurred\n+   --    Expired:  no event occurred before the expiration of the timeout\n+   --    Aborted:  an external action cancelled the wait operation before\n+   --              any event occurred.\n+\n    Socket_Error : exception;\n    --  There is only one exception in this package to deal with an error during\n    --  a socket routine. Once raised, its message contains a string describing\n@@ -435,10 +458,10 @@ package GNAT.Sockets is\n    No_Port  : constant Port_Type;\n \n    type Inet_Addr_Type (Family : Family_Type := Family_Inet) is private;\n-   --  An Internet address depends on an address family (IPv4 contains 4\n-   --  octets and IPv6 contains 16 octets). Any_Inet_Addr is a special value\n-   --  treated like a wildcard enabling all addresses. No_Inet_Addr provides a\n-   --  special value to denote uninitialized inet addresses.\n+   --  An Internet address depends on an address family (IPv4 contains 4 octets\n+   --  and IPv6 contains 16 octets). Any_Inet_Addr is a special value treated\n+   --  like a wildcard enabling all addresses. No_Inet_Addr provides a special\n+   --  value to denote uninitialized inet addresses.\n \n    Any_Inet_Addr       : constant Inet_Addr_Type;\n    No_Inet_Addr        : constant Inet_Addr_Type;\n@@ -508,8 +531,8 @@ package GNAT.Sockets is\n    function Get_Host_By_Name\n      (Name : String) return Host_Entry_Type;\n    --  Return host entry structure for the given host name. Here name is\n-   --  either a host name, or an IP address. If Name is an IP address, this is\n-   --  equivalent to Get_Host_By_Address (Inet_Addr (Name)).\n+   --  either a host name, or an IP address. If Name is an IP address, this\n+   --  is equivalent to Get_Host_By_Address (Inet_Addr (Name)).\n \n    function Host_Name return String;\n    --  Return the name of the current host\n@@ -549,10 +572,10 @@ package GNAT.Sockets is\n    Service_Error : exception;\n    --  Comment required ???\n \n-   --  Errors are described by an enumeration type. There is only one\n-   --  exception Socket_Error in this package to deal with an error during a\n-   --  socket routine. Once raised, its message contains the error code\n-   --  between brackets and a string describing the error code.\n+   --  Errors are described by an enumeration type. There is only one exception\n+   --  Socket_Error in this package to deal with an error during a socket\n+   --  routine. Once raised, its message contains the error code between\n+   --  brackets and a string describing the error code.\n \n    --  The name of the enumeration constant documents the error condition\n \n@@ -602,16 +625,6 @@ package GNAT.Sockets is\n       Unknown_Server_Error,\n       Cannot_Resolve_Error);\n \n-   --  Timeval_Duration is a subtype of Standard.Duration because the full\n-   --  range of Standard.Duration cannot be represented in the equivalent C\n-   --  structure. Moreover, negative values are not allowed to avoid system\n-   --  incompatibilities.\n-\n-   Immediate : constant := 0.0;\n-   Forever   : constant := Duration (Integer'Last) * 1.0;\n-\n-   subtype Timeval_Duration is Duration range Immediate .. Forever;\n-\n    --  Get_Socket_Options and Set_Socket_Options manipulate options associated\n    --  with a socket. Options may exist at multiple protocol levels in the\n    --  communication stack. Socket_Level is the uppermost socket level.\n@@ -722,9 +735,9 @@ package GNAT.Sockets is\n    --  Socket_Stream).\n \n    Peek_At_Incoming_Data : constant Request_Flag_Type;\n-   --  This flag causes the receive operation to return data from the\n-   --  beginning of the receive queue without removing that data from the\n-   --  queue. A subsequent receive call will return the same data.\n+   --  This flag causes the receive operation to return data from the beginning\n+   --  of the receive queue without removing that data from the queue. A\n+   --  subsequent receive call will return the same data.\n \n    Wait_For_A_Full_Reception : constant Request_Flag_Type;\n    --  This flag requests that the operation block until the full request is\n@@ -766,6 +779,20 @@ package GNAT.Sockets is\n    --  is filled in with the address of the connection. Raises Socket_Error on\n    --  error.\n \n+   procedure Accept_Socket\n+     (Server   : Socket_Type;\n+      Socket   : out Socket_Type;\n+      Address  : out Sock_Addr_Type;\n+      Timeout  : Selector_Duration;\n+      Selector : access Selector_Type := null;\n+      Status   : out Selector_Status);\n+   --  Accept a new connection on Server using Accept_Socket, waiting no longer\n+   --  than the given timeout duration. Status is set to indicate whether the\n+   --  operation completed successully, timed out, or was aborted. If Selector\n+   --  is not null, the designated selector is used to wait for the socket to\n+   --  become available, else a private selector object is created by this\n+   --  procedure and destroyed before it returns.\n+\n    procedure Bind_Socket\n      (Socket  : Socket_Type;\n       Address : Sock_Addr_Type);\n@@ -781,35 +808,49 @@ package GNAT.Sockets is\n    --  Make a connection to another socket which has the address of Server.\n    --  Raises Socket_Error on error.\n \n+   procedure Connect_Socket\n+     (Socket   : Socket_Type;\n+      Server   : Sock_Addr_Type;\n+      Timeout  : Selector_Duration;\n+      Selector : access Selector_Type := null;\n+      Status   : out Selector_Status);\n+   --  Connect Socket to the given Server address using Connect_Socket, waiting\n+   --  no longer than the given timeout duration. Status is set to indicate\n+   --  whether the operation completed successully, timed out, or was aborted.\n+   --  If Selector is not null, the designated selector is used to wait for the\n+   --  socket to become available, else a private selector object is created\n+   --  by this procedure and destroyed before it returns.\n+\n    procedure Control_Socket\n      (Socket  : Socket_Type;\n       Request : in out Request_Type);\n    --  Obtain or set parameter values that control the socket. This control\n-   --  differs from the socket options in that they are not specific to\n-   --  sockets but are available for any device.\n+   --  differs from the socket options in that they are not specific to sockets\n+   --  but are available for any device.\n \n    function Get_Peer_Name (Socket : Socket_Type) return Sock_Addr_Type;\n    --  Return the peer or remote socket address of a socket. Raise\n    --  Socket_Error on error.\n \n    function Get_Socket_Name (Socket : Socket_Type) return Sock_Addr_Type;\n    --  Return the local or current socket address of a socket. Return\n-   --  No_Sock_Addr on error (for instance, socket closed or not locally\n-   --  bound).\n+   --  No_Sock_Addr on error (e.g. socket closed or not locally bound).\n \n    function Get_Socket_Option\n      (Socket : Socket_Type;\n       Level  : Level_Type := Socket_Level;\n       Name   : Option_Name) return Option_Type;\n-   --  Get the options associated with a socket. Raises Socket_Error\n-   --  on error.\n+   --  Get the options associated with a socket. Raises Socket_Error on error\n \n    procedure Listen_Socket\n      (Socket : Socket_Type;\n-      Length : Positive := 15);\n+      Length : Natural := 15);\n    --  To accept connections, a socket is first created with Create_Socket,\n    --  a willingness to accept incoming connections and a queue Length for\n    --  incoming connections are specified. Raise Socket_Error on error.\n+   --  The queue length of 15 is an example value that should be appropriate\n+   --  in usual cases. It can be adjusted according to each application's\n+   --  particular requirements.\n \n    procedure Receive_Socket\n      (Socket : Socket_Type;\n@@ -959,11 +1000,6 @@ package GNAT.Sockets is\n    --  operation is typically to add a socket in one of the socket sets when\n    --  the timeout is set to forever.\n \n-   type Selector_Type is limited private;\n-   type Selector_Access is access all Selector_Type;\n-\n-   subtype Selector_Duration is Timeval_Duration;\n-\n    procedure Create_Selector (Selector : out Selector_Type);\n    --  Create a new selector\n \n@@ -973,8 +1009,6 @@ package GNAT.Sockets is\n    --  no other task still using Selector (i.e. still executing Check_Selector\n    --  or Abort_Selector on this Selector).\n \n-   type Selector_Status is (Completed, Expired, Aborted);\n-\n    procedure Check_Selector\n      (Selector     : in out Selector_Type;\n       R_Socket_Set : in out Socket_Set_Type;\n@@ -1009,6 +1043,16 @@ package GNAT.Sockets is\n    procedure Abort_Selector (Selector : Selector_Type);\n    --  Send an abort signal to the selector\n \n+   type Fd_Set_Access is private;\n+   No_Fd_Set_Access : constant Fd_Set_Access;\n+   --  ??? This type must not be used directly, it needs to be visible because\n+   --  it is used in the visible part of GNAT.Sockets.Thin_Common. This is\n+   --  really an inversion of abstraction. The private part of GNAT.Sockets\n+   --  needs to have visibility on this type, but since Thin_Common is a child\n+   --  of Sokcets, the type can't be declared there. The correct fix would\n+   --  be to move the thin sockets binding outside of GNAT.Sockets altogether,\n+   --  e.g. by renaming it to GNAT.Sockets_Thin.\n+\n private\n \n    type Socket_Type is new Integer;\n@@ -1017,18 +1061,19 @@ private\n    type Selector_Type is limited record\n       R_Sig_Socket : Socket_Type := No_Socket;\n       W_Sig_Socket : Socket_Type := No_Socket;\n+      --  Signalling sockets used to abort a select operation\n    end record;\n \n    pragma Volatile (Selector_Type);\n \n-   --  The two signalling sockets are used to abort a select operation\n-\n-   subtype Socket_Set_Access is System.Address;\n-   No_Socket_Set : constant Socket_Set_Access := System.Null_Address;\n+   type Fd_Set is null record;\n+   type Fd_Set_Access is access all Fd_Set;\n+   pragma Convention (C, Fd_Set_Access);\n+   No_Fd_Set_Access : constant Fd_Set_Access := null;\n \n    type Socket_Set_Type is record\n       Last : Socket_Type       := No_Socket;\n-      Set  : Socket_Set_Access := No_Socket_Set;\n+      Set  : Fd_Set_Access;\n    end record;\n \n    subtype Inet_Addr_Comp_Type is Natural range 0 .. 255;"}, {"sha": "ad99f9be4da608979134e72027cd0faa2222ffde", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 10, "deletions": 59, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,10 +39,12 @@\n \n with Interfaces.C.Strings; use Interfaces.C.Strings;\n with System;               use System;\n+with GNAT.Sockets.Constants;\n \n package body GNAT.Sockets.Thin is\n \n    use type C.unsigned;\n+   use type C.int;\n \n    WSAData_Dummy : array (1 .. 512) of C.int;\n \n@@ -294,7 +296,7 @@ package body GNAT.Sockets.Thin is\n \n       RFS  : constant Fd_Set_Access := Readfds;\n       WFS  : constant Fd_Set_Access := Writefds;\n-      WFSC : Fd_Set_Access := No_Fd_Set;\n+      WFSC : Fd_Set_Access := No_Fd_Set_Access;\n       EFS  : Fd_Set_Access := Exceptfds;\n       Res  : C.int;\n       S    : aliased C.int;\n@@ -310,10 +312,10 @@ package body GNAT.Sockets.Thin is\n       --  the initial write fd set, then move the socket from the\n       --  exception fd set to the write fd set.\n \n-      if WFS /= No_Fd_Set then\n+      if WFS /= No_Fd_Set_Access then\n          --  Add any socket present in write fd set into exception fd set\n \n-         if EFS = No_Fd_Set then\n+         if EFS = No_Fd_Set_Access then\n             EFS := New_Socket_Set (WFS);\n \n          else\n@@ -337,7 +339,7 @@ package body GNAT.Sockets.Thin is\n \n       Res := Standard_Select (Nfds, RFS, WFS, EFS, Timeout);\n \n-      if EFS /= No_Fd_Set then\n+      if EFS /= No_Fd_Set_Access then\n          declare\n             EFSC    : constant Fd_Set_Access := New_Socket_Set (EFS);\n             Flag    : constant C.int := Constants.MSG_PEEK + Constants.MSG_OOB;\n@@ -372,7 +374,7 @@ package body GNAT.Sockets.Thin is\n                   --  set. Otherwise, ignore this event since the user\n                   --  is not watching for it.\n \n-                  if WFSC /= No_Fd_Set\n+                  if WFSC /= No_Fd_Set_Access\n                     and then (Is_Socket_In_Set (WFSC, S) /= 0)\n                   then\n                      Insert_Socket_In_Set (WFS, S);\n@@ -383,14 +385,14 @@ package body GNAT.Sockets.Thin is\n             Free_Socket_Set (EFSC);\n          end;\n \n-         if Exceptfds = No_Fd_Set then\n+         if Exceptfds = No_Fd_Set_Access then\n             Free_Socket_Set (EFS);\n          end if;\n       end if;\n \n       --  Free any copy of write fd set\n \n-      if WFSC /= No_Fd_Set then\n+      if WFSC /= No_Fd_Set_Access then\n          Free_Socket_Set (WFSC);\n       end if;\n \n@@ -473,57 +475,6 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end Initialize;\n \n-   -----------------\n-   -- Set_Address --\n-   -----------------\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr)\n-   is\n-   begin\n-      Sin.Sin_Addr := Address;\n-   end Set_Address;\n-\n-   ----------------\n-   -- Set_Family --\n-   ----------------\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int)\n-   is\n-   begin\n-      Sin.Sin_Family := C.unsigned_short (Family);\n-   end Set_Family;\n-\n-   ----------------\n-   -- Set_Length --\n-   ----------------\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int)\n-   is\n-      pragma Unreferenced (Sin);\n-      pragma Unreferenced (Len);\n-\n-   begin\n-      null;\n-   end Set_Length;\n-\n-   --------------\n-   -- Set_Port --\n-   --------------\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short)\n-   is\n-   begin\n-      Sin.Sin_Port := Port;\n-   end Set_Port;\n-\n    --------------------\n    -- Signalling_Fds --\n    --------------------"}, {"sha": "231564012b2927fa42a815ce54f73cdb0e33a34f", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 4, "deletions": 218, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,22 +37,17 @@\n \n --  This version is for NT\n \n-with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n-with GNAT.Sockets.Constants;\n+with GNAT.Sockets.Thin_Common;\n \n with System;\n \n package GNAT.Sockets.Thin is\n \n-   package C renames Interfaces.C;\n-\n-   use type C.int;\n-   --  So that we can declare the Failure constant below\n+   use Thin_Common;\n \n-   Success : constant C.int :=  0;\n-   Failure : constant C.int := -1;\n+   package C renames Interfaces.C;\n \n    function Socket_Errno return Integer;\n    --  Returns last socket error number\n@@ -77,158 +72,6 @@ package GNAT.Sockets.Thin is\n \n    end Host_Error_Messages;\n \n-   subtype Fd_Set_Access is System.Address;\n-   No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n-\n-   type time_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_sec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_sec - 1) - 1;\n-   for time_t'Size use 8 * Constants.SIZEOF_tv_sec;\n-   pragma Convention (C, time_t);\n-\n-   type suseconds_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_usec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_usec - 1) - 1;\n-   for suseconds_t'Size use 8 * Constants.SIZEOF_tv_usec;\n-   pragma Convention (C, suseconds_t);\n-\n-   type Timeval is record\n-      Tv_Sec  : time_t;\n-      Tv_Usec : suseconds_t;\n-   end record;\n-   pragma Convention (C, Timeval);\n-\n-   type Timeval_Access is access all Timeval;\n-   pragma Convention (C, Timeval_Access);\n-\n-   Immediat : constant Timeval := (0, 0);\n-\n-   type Int_Access is access all C.int;\n-   pragma Convention (C, Int_Access);\n-   --  Access to C integers\n-\n-   type Chars_Ptr_Array is array (C.size_t range <>) of\n-     aliased C.Strings.chars_ptr;\n-\n-   package Chars_Ptr_Pointers is\n-      new C.Pointers (C.size_t, C.Strings.chars_ptr, Chars_Ptr_Array,\n-                      C.Strings.Null_Ptr);\n-   --  Arrays of C (char *)\n-\n-   type In_Addr is record\n-      S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n-   end record;\n-   for In_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In_Addr);\n-   --  IPv4 address, represented as a network-order C.int. Note that the\n-   --  underlying operating system may assume that values of this type have\n-   --  C.int alignment, so we need to provide a suitable alignment clause here.\n-\n-   type In_Addr_Access is access all In_Addr;\n-   pragma Convention (C, In_Addr_Access);\n-   --  Access to internet address\n-\n-   Inaddr_Any : aliased constant In_Addr := (others => 0);\n-   --  Any internet address (all the interfaces)\n-\n-   type In_Addr_Access_Array is array (C.size_t range <>)\n-     of aliased In_Addr_Access;\n-   pragma Convention (C, In_Addr_Access_Array);\n-\n-   package In_Addr_Access_Pointers is\n-     new C.Pointers (C.size_t, In_Addr_Access, In_Addr_Access_Array, null);\n-   --  Array of internet addresses\n-\n-   type Sockaddr is record\n-      Sa_Family : C.unsigned_short;\n-      Sa_Data   : C.char_array (1 .. 14);\n-   end record;\n-   pragma Convention (C, Sockaddr);\n-   --  Socket address\n-\n-   type Sockaddr_Access is access all Sockaddr;\n-   pragma Convention (C, Sockaddr_Access);\n-   --  Access to socket address\n-\n-   type Sockaddr_In is record\n-      Sin_Family : C.unsigned_short      := Constants.AF_INET;\n-      Sin_Port   : C.unsigned_short      := 0;\n-      Sin_Addr   : In_Addr               := Inaddr_Any;\n-      Sin_Zero   : C.char_array (1 .. 8) := (others => C.char'Val (0));\n-   end record;\n-   pragma Convention (C, Sockaddr_In);\n-   --  Internet socket address\n-\n-   type Sockaddr_In_Access is access all Sockaddr_In;\n-   pragma Convention (C, Sockaddr_In_Access);\n-   --  Access to internet socket address\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int);\n-   pragma Inline (Set_Length);\n-   --  Set Sin.Sin_Length to Len.\n-   --  On this platform, nothing is done as there is no such field.\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int);\n-   pragma Inline (Set_Family);\n-   --  Set Sin.Sin_Family to Family\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short);\n-   pragma Inline (Set_Port);\n-   --  Set Sin.Sin_Port to Port\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr);\n-   pragma Inline (Set_Address);\n-   --  Set Sin.Sin_Addr to Address\n-\n-   type Hostent is record\n-      H_Name      : C.Strings.chars_ptr;\n-      H_Aliases   : Chars_Ptr_Pointers.Pointer;\n-      H_Addrtype  : C.short;\n-      H_Length    : C.short;\n-      H_Addr_List : In_Addr_Access_Pointers.Pointer;\n-   end record;\n-   pragma Convention (C, Hostent);\n-   --  Host entry\n-\n-   type Hostent_Access is access all Hostent;\n-   pragma Convention (C, Hostent_Access);\n-   --  Access to host entry\n-\n-   type Servent is record\n-      S_Name    : C.Strings.chars_ptr;\n-      S_Aliases : Chars_Ptr_Pointers.Pointer;\n-      S_Port    : C.int;\n-      S_Proto   : C.Strings.chars_ptr;\n-   end record;\n-   pragma Convention (C, Servent);\n-   --  Service entry\n-\n-   type Servent_Access is access all Servent;\n-   pragma Convention (C, Servent_Access);\n-   --  Access to service entry\n-\n-   type Two_Ints is array (0 .. 1) of C.int;\n-   pragma Convention (C, Two_Ints);\n-   --  Container for two int values\n-\n-   subtype Fd_Pair is Two_Ints;\n-   --  Two_Ints as used for Create_Signalling_Fds: a pair of connected file\n-   --  descriptors, one of which (the \"read end\" of the connection) being used\n-   --  for reading, the other one (the \"write end\") being used for writing.\n-\n-   Read_End  : constant := 0;\n-   Write_End : constant := 1;\n-   --  Indices into an Fd_Pair value providing access to each of the connected\n-   --  file descriptors.\n-\n    --------------------------------\n    -- Standard library functions --\n    --------------------------------\n@@ -382,55 +225,6 @@ package GNAT.Sockets.Thin is\n \n    end Signalling_Fds;\n \n-   ----------------------------\n-   -- Socket sets management --\n-   ----------------------------\n-\n-   procedure Free_Socket_Set\n-     (Set : Fd_Set_Access);\n-   --  Free system-dependent socket set\n-\n-   procedure Get_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : Int_Access;\n-      Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket set. The\n-   --  parameter Last is a maximum value of the largest socket. This hint is\n-   --  used to avoid scanning very large socket sets. After a call to\n-   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n-   --  socket set.\n-\n-   procedure Insert_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Insert socket in the socket set\n-\n-   function  Is_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int) return C.int;\n-   --  Check whether Socket is in the socket set, return a non-zero\n-   --  value if it is, zero if it is not.\n-\n-   procedure Last_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Last   : Int_Access);\n-   --  Find the largest socket in the socket set. This is needed for select().\n-   --  When Last_Socket_In_Set is called, parameter Last is a maximum value of\n-   --  the largest socket. This hint is used to avoid scanning very large\n-   --  socket sets. After the call, Last is set back to the real largest socket\n-   --  in the socket set.\n-\n-   function  New_Socket_Set\n-     (Set : Fd_Set_Access) return Fd_Set_Access;\n-   --  Allocate a new socket set which is a system-dependent structure and\n-   --  initialize by copying Set if it is non-null, by making it empty\n-   --  otherwise.\n-\n-   procedure Remove_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Remove socket from the socket set\n-\n    procedure WSACleanup;\n \n    procedure Initialize;\n@@ -461,12 +255,4 @@ private\n    pragma Import (Stdcall, WSAStartup, \"WSAStartup\");\n    pragma Import (Stdcall, WSACleanup, \"WSACleanup\");\n \n-   pragma Import (C, Free_Socket_Set, \"__gnat_free_socket_set\");\n-   pragma Import (C, Get_Socket_From_Set, \"__gnat_get_socket_from_set\");\n-   pragma Import (C, Is_Socket_In_Set, \"__gnat_is_socket_in_set\");\n-   pragma Import (C, Last_Socket_In_Set, \"__gnat_last_socket_in_set\");\n-   pragma Import (C, New_Socket_Set, \"__gnat_new_socket_set\");\n-   pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n-   pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n-\n end GNAT.Sockets.Thin;"}, {"sha": "f71bb2387ded17097987dbd57986d34c72149b08", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,14 +34,15 @@\n --  Temporary version for Alpha/VMS\n \n with GNAT.OS_Lib; use GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n with GNAT.Task_Lock;\n \n with Interfaces.C; use Interfaces.C;\n \n package body GNAT.Sockets.Thin is\n \n    Non_Blocking_Sockets : constant Fd_Set_Access :=\n-                            New_Socket_Set (No_Socket_Set);\n+                            New_Socket_Set (No_Fd_Set_Access);\n    --  When this package is initialized with Process_Blocking_IO set\n    --  to True, sockets are set in non-blocking mode to avoid blocking\n    --  the whole process when a thread wants to perform a blocking IO\n@@ -182,15 +183,15 @@ package body GNAT.Sockets.Thin is\n          Now  : aliased Timeval;\n \n       begin\n-         WSet := New_Socket_Set (No_Socket_Set);\n+         WSet := New_Socket_Set (No_Fd_Set_Access);\n          loop\n             Insert_Socket_In_Set (WSet, S);\n             Now := Immediat;\n             Res := C_Select\n               (S + 1,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                WSet,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                Now'Unchecked_Access);\n \n             exit when Res > 0;\n@@ -208,10 +209,9 @@ package body GNAT.Sockets.Thin is\n \n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Res = Failure\n-        and then Errno = Constants.EISCONN\n-      then\n-         return Thin.Success;\n+      if Res = Failure and then Errno = Constants.EISCONN then\n+         return Thin_Common.Success;\n+\n       else\n          return Res;\n       end if;\n@@ -410,35 +410,6 @@ package body GNAT.Sockets.Thin is\n       return R;\n    end Non_Blocking_Socket;\n \n-   -----------------\n-   -- Set_Address --\n-   -----------------\n-\n-   procedure Set_Address (Sin : Sockaddr_In_Access; Address : In_Addr) is\n-   begin\n-      Sin.Sin_Addr   := Address;\n-   end Set_Address;\n-\n-   ----------------\n-   -- Set_Family --\n-   ----------------\n-\n-   procedure Set_Family (Sin : Sockaddr_In_Access; Family : C.int) is\n-   begin\n-      Sin.Sin_Family := C.unsigned_short (Family);\n-   end Set_Family;\n-\n-   ----------------\n-   -- Set_Length --\n-   ----------------\n-\n-   procedure Set_Length (Sin : Sockaddr_In_Access; Len : C.int) is\n-      pragma Unreferenced (Sin);\n-      pragma Unreferenced (Len);\n-   begin\n-      null;\n-   end Set_Length;\n-\n    -----------------------------\n    -- Set_Non_Blocking_Socket --\n    -----------------------------\n@@ -456,15 +427,6 @@ package body GNAT.Sockets.Thin is\n       Task_Lock.Unlock;\n    end Set_Non_Blocking_Socket;\n \n-   --------------\n-   -- Set_Port --\n-   --------------\n-\n-   procedure Set_Port (Sin : Sockaddr_In_Access; Port : C.unsigned_short) is\n-   begin\n-      Sin.Sin_Port   := Port;\n-   end Set_Port;\n-\n    --------------------\n    -- Signalling_Fds --\n    --------------------"}, {"sha": "3bcc21b8c67643c3f27c96e0f6471bf9a947990a", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 3, "deletions": 222, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -37,26 +37,20 @@\n \n --  This is the Alpha/VMS version\n \n-with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n with GNAT.OS_Lib;\n-with GNAT.Sockets.Constants;\n+with GNAT.Sockets.Thin_Common;\n \n with System;\n-with System.Aux_DEC;\n \n package GNAT.Sockets.Thin is\n \n    --  ??? more comments needed ???\n \n-   package C renames Interfaces.C;\n-\n-   use type C.int;\n-   --  This is so we can declare the Failure constant below\n+   use Thin_Common;\n \n-   Success : constant C.int :=  0;\n-   Failure : constant C.int := -1;\n+   package C renames Interfaces.C;\n \n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n@@ -81,162 +75,6 @@ package GNAT.Sockets.Thin is\n \n    end Host_Error_Messages;\n \n-   subtype Fd_Set_Access is System.Aux_DEC.Short_Address;\n-   No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n-\n-   type time_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_sec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_sec - 1) - 1;\n-   for time_t'Size use 8 * Constants.SIZEOF_tv_sec;\n-   pragma Convention (C, time_t);\n-\n-   type suseconds_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_usec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_usec - 1) - 1;\n-   for suseconds_t'Size use 8 * Constants.SIZEOF_tv_usec;\n-   pragma Convention (C, suseconds_t);\n-\n-   type Timeval is record\n-      Tv_Sec  : time_t;\n-      Tv_Usec : suseconds_t;\n-   end record;\n-   pragma Convention (C, Timeval);\n-\n-   type Timeval_Access is access all Timeval;\n-   pragma Convention (C, Timeval_Access);\n-\n-   Immediat : constant Timeval := (0, 0);\n-\n-   type Int_Access is access all C.int;\n-   pragma Convention (C, Int_Access);\n-   --  Access to C integers\n-\n-   type Chars_Ptr_Array is array (C.size_t range <>) of\n-     aliased C.Strings.chars_ptr;\n-\n-   package Chars_Ptr_Pointers is\n-      new C.Pointers (C.size_t, C.Strings.chars_ptr, Chars_Ptr_Array,\n-                      C.Strings.Null_Ptr);\n-   --  Arrays of C (char *)\n-\n-   type In_Addr is record\n-      S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n-   end record;\n-   for In_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In_Addr);\n-   --  IPv4 address, represented as a network-order C.int. Note that the\n-   --  underlying operating system may assume that values of this type have\n-   --  C.int alignment, so we need to provide a suitable alignment clause here.\n-\n-   type In_Addr_Access is access all In_Addr;\n-   pragma Convention (C, In_Addr_Access);\n-   --  Access to internet address\n-\n-   Inaddr_Any : aliased constant In_Addr := (others => 0);\n-   --  Any internet address (all the interfaces)\n-\n-   type In_Addr_Access_Array is array (C.size_t range <>)\n-     of aliased In_Addr_Access;\n-   pragma Convention (C, In_Addr_Access_Array);\n-\n-   package In_Addr_Access_Pointers is\n-     new C.Pointers (C.size_t, In_Addr_Access, In_Addr_Access_Array, null);\n-   --  Array of internet addresses\n-\n-   type Sockaddr is record\n-      Sa_Family : C.unsigned_short;\n-      Sa_Data   : C.char_array (1 .. 14);\n-   end record;\n-   pragma Convention (C, Sockaddr);\n-   --  Socket address\n-\n-   type Sockaddr_Access is access all Sockaddr;\n-   for Sockaddr_Access'Size use 32;\n-   pragma Convention (C, Sockaddr_Access);\n-   --  Access to socket address\n-\n-   type Sockaddr_In is record\n-      Sin_Family : C.unsigned_short      := Constants.AF_INET;\n-      Sin_Port   : C.unsigned_short      := 0;\n-      Sin_Addr   : In_Addr               := Inaddr_Any;\n-      Sin_Zero   : C.char_array (1 .. 8) := (others => C.char'Val (0));\n-   end record;\n-   pragma Convention (C, Sockaddr_In);\n-   --  Internet socket address\n-\n-   type Sockaddr_In_Access is access all Sockaddr_In;\n-   for Sockaddr_In_Access'Size use 32;\n-   pragma Convention (C, Sockaddr_In_Access);\n-   --  Access to internet socket address\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int);\n-   pragma Inline (Set_Length);\n-   --  Set Sin.Sin_Length to Len.\n-   --  On this platform, nothing is done as there is no such field.\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int);\n-   pragma Inline (Set_Family);\n-   --  Set Sin.Sin_Family to Family\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short);\n-   pragma Inline (Set_Port);\n-   --  Set Sin.Sin_Port to Port\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr);\n-   pragma Inline (Set_Address);\n-   --  Set Sin.Sin_Addr to Address\n-\n-   type Hostent is record\n-      H_Name      : C.Strings.chars_ptr;\n-      H_Aliases   : Chars_Ptr_Pointers.Pointer;\n-      H_Addrtype  : C.int;\n-      H_Length    : C.int;\n-      H_Addr_List : In_Addr_Access_Pointers.Pointer;\n-   end record;\n-   pragma Convention (C, Hostent);\n-   --  Host entry\n-\n-   type Hostent_Access is access all Hostent;\n-   for Hostent_Access'Size use 32;\n-   pragma Convention (C, Hostent_Access);\n-   --  Access to host entry\n-\n-   type Servent is record\n-      S_Name    : C.Strings.chars_ptr;\n-      S_Aliases : Chars_Ptr_Pointers.Pointer;\n-      S_Port    : C.int;\n-      S_Proto   : C.Strings.chars_ptr;\n-   end record;\n-   pragma Convention (C, Servent);\n-   --  Service entry\n-\n-   type Servent_Access is access all Servent;\n-   for Servent_Access'Size use 32;\n-   pragma Convention (C, Servent_Access);\n-   --  Access to service entry\n-\n-   type Two_Ints is array (0 .. 1) of C.int;\n-   pragma Convention (C, Two_Ints);\n-   --  Container for two int values\n-\n-   subtype Fd_Pair is Two_Ints;\n-   --  Two_Ints as used for Create_Signalling_Fds: a pair of connected file\n-   --  descriptors, one of which (the \"read end\" of the connection) being used\n-   --  for reading, the other one (the \"write end\") being used for writing.\n-\n-   Read_End  : constant := 0;\n-   Write_End : constant := 1;\n-   --  Indices into an Fd_Pair value providing access to each of the connected\n-   --  file descriptors.\n-\n    --------------------------------\n    -- Standard library functions --\n    --------------------------------\n@@ -386,55 +224,6 @@ package GNAT.Sockets.Thin is\n \n    end Signalling_Fds;\n \n-   ----------------------------\n-   -- Socket sets management --\n-   ----------------------------\n-\n-   procedure Free_Socket_Set\n-     (Set : Fd_Set_Access);\n-   --  Free system-dependent socket set\n-\n-   procedure Get_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : Int_Access;\n-      Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket set. The\n-   --  parameter Last is a maximum value of the largest socket. This hint is\n-   --  used to avoid scanning very large socket sets. After a call to\n-   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n-   --  socket set.\n-\n-   procedure Insert_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Insert socket in the socket set\n-\n-   function  Is_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int) return C.int;\n-   --  Check whether Socket is in the socket set, return a non-zero\n-   --  value if it is, zero if it is not.\n-\n-   procedure Last_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Last   : Int_Access);\n-   --  Find the largest socket in the socket set. This is needed for select().\n-   --  When Last_Socket_In_Set is called, parameter Last is a maximum value of\n-   --  the largest socket. This hint is used to avoid scanning very large\n-   --  socket sets. After the call, Last is set back to the real largest socket\n-   --  in the socket set.\n-\n-   function  New_Socket_Set\n-     (Set : Fd_Set_Access) return Fd_Set_Access;\n-   --  Allocate a new socket set which is a system-dependent structure and\n-   --  initialize by copying Set if it is non-null, by making it empty\n-   --  otherwise.\n-\n-   procedure Remove_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Remove socket from the socket set\n-\n    -------------------------------------------\n    -- Nonreentrant network databases access --\n    -------------------------------------------\n@@ -474,14 +263,6 @@ private\n    pragma Import (C, C_Strerror,      \"DECC$STRERROR\");\n    pragma Import (C, C_System,        \"DECC$SYSTEM\");\n \n-   pragma Import (C, Free_Socket_Set, \"__gnat_free_socket_set\");\n-   pragma Import (C, Get_Socket_From_Set, \"__gnat_get_socket_from_set\");\n-   pragma Import (C, Is_Socket_In_Set, \"__gnat_is_socket_in_set\");\n-   pragma Import (C, Last_Socket_In_Set, \"__gnat_last_socket_in_set\");\n-   pragma Import (C, New_Socket_Set, \"__gnat_new_socket_set\");\n-   pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n-   pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n-\n    pragma Import (C, Nonreentrant_Gethostbyname, \"DECC$GETHOSTBYNAME\");\n    pragma Import (C, Nonreentrant_Gethostbyaddr, \"DECC$GETHOSTBYADDR\");\n    pragma Import (C, Nonreentrant_Getservbyname, \"DECC$GETSERVBYNAME\");"}, {"sha": "0077e2777f56e147e30473f156326e4139e83eb2", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2007, AdaCore                     --\n+--                     Copyright (C) 2002-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,14 +38,15 @@\n --  This version is for VxWorks\n \n with GNAT.OS_Lib;  use GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n with GNAT.Task_Lock;\n \n with Interfaces.C; use Interfaces.C;\n \n package body GNAT.Sockets.Thin is\n \n    Non_Blocking_Sockets : constant Fd_Set_Access :=\n-                            New_Socket_Set (No_Socket_Set);\n+                            New_Socket_Set (No_Fd_Set_Access);\n    --  When this package is initialized with Process_Blocking_IO set\n    --  to True, sockets are set in non-blocking mode to avoid blocking\n    --  the whole process when a thread wants to perform a blocking IO\n@@ -195,16 +196,16 @@ package body GNAT.Sockets.Thin is\n          Now  : aliased Timeval;\n \n       begin\n-         WSet := New_Socket_Set (No_Socket_Set);\n+         WSet := New_Socket_Set (No_Fd_Set_Access);\n \n          loop\n             Insert_Socket_In_Set (WSet, S);\n             Now := Immediat;\n             Res := C_Select\n               (S + 1,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                WSet,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                Now'Unchecked_Access);\n \n             exit when Res > 0;\n@@ -225,7 +226,7 @@ package body GNAT.Sockets.Thin is\n       if Res = Failure\n         and then Errno = Constants.EISCONN\n       then\n-         return Thin.Success;\n+         return Thin_Common.Success;\n       else\n          return Res;\n       end if;\n@@ -425,42 +426,6 @@ package body GNAT.Sockets.Thin is\n       return R;\n    end Non_Blocking_Socket;\n \n-   -----------------\n-   -- Set_Address --\n-   -----------------\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr)\n-   is\n-   begin\n-      Sin.Sin_Addr := Address;\n-   end Set_Address;\n-\n-   ----------------\n-   -- Set_Family --\n-   ----------------\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int)\n-   is\n-   begin\n-      Sin.Sin_Family := C.unsigned_char (Family);\n-   end Set_Family;\n-\n-   ----------------\n-   -- Set_Length --\n-   ----------------\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int)\n-   is\n-   begin\n-      Sin.Sin_Length := C.unsigned_char (Len);\n-   end Set_Length;\n-\n    -----------------------------\n    -- Set_Non_Blocking_Socket --\n    -----------------------------\n@@ -477,18 +442,6 @@ package body GNAT.Sockets.Thin is\n       Task_Lock.Unlock;\n    end Set_Non_Blocking_Socket;\n \n-   --------------\n-   -- Set_Port --\n-   --------------\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short)\n-   is\n-   begin\n-      Sin.Sin_Port   := Port;\n-   end Set_Port;\n-\n    --------------------\n    -- Signalling_Fds --\n    --------------------"}, {"sha": "19642aa893dd7d91bea50e1cc035be65b54f4092", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 7, "deletions": 57, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,14 +38,15 @@\n --  This is the default version\n \n with GNAT.OS_Lib; use GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n with GNAT.Task_Lock;\n \n with Interfaces.C; use Interfaces.C;\n \n package body GNAT.Sockets.Thin is\n \n    Non_Blocking_Sockets : constant Fd_Set_Access :=\n-                            New_Socket_Set (No_Socket_Set);\n+                            New_Socket_Set (No_Fd_Set_Access);\n    --  When this package is initialized with Process_Blocking_IO set\n    --  to True, sockets are set in non-blocking mode to avoid blocking\n    --  the whole process when a thread wants to perform a blocking IO\n@@ -199,15 +200,15 @@ package body GNAT.Sockets.Thin is\n          Now  : aliased Timeval;\n \n       begin\n-         WSet := New_Socket_Set (No_Socket_Set);\n+         WSet := New_Socket_Set (No_Fd_Set_Access);\n          loop\n             Insert_Socket_In_Set (WSet, S);\n             Now := Immediat;\n             Res := C_Select\n               (S + 1,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                WSet,\n-               No_Fd_Set,\n+               No_Fd_Set_Access,\n                Now'Unchecked_Access);\n \n             exit when Res > 0;\n@@ -228,7 +229,7 @@ package body GNAT.Sockets.Thin is\n       if Res = Failure\n         and then Errno = Constants.EISCONN\n       then\n-         return Thin.Success;\n+         return Thin_Common.Success;\n       else\n          return Res;\n       end if;\n@@ -427,45 +428,6 @@ package body GNAT.Sockets.Thin is\n       return R;\n    end Non_Blocking_Socket;\n \n-   -----------------\n-   -- Set_Address --\n-   -----------------\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr)\n-   is\n-   begin\n-      Sin.Sin_Addr := Address;\n-   end Set_Address;\n-\n-   ----------------\n-   -- Set_Family --\n-   ----------------\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int)\n-   is\n-   begin\n-      Sin.Sin_Family := C.unsigned_short (Family);\n-   end Set_Family;\n-\n-   ----------------\n-   -- Set_Length --\n-   ----------------\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int)\n-   is\n-      pragma Unreferenced (Sin);\n-      pragma Unreferenced (Len);\n-\n-   begin\n-      null;\n-   end Set_Length;\n-\n    -----------------------------\n    -- Set_Non_Blocking_Socket --\n    -----------------------------\n@@ -483,18 +445,6 @@ package body GNAT.Sockets.Thin is\n       Task_Lock.Unlock;\n    end Set_Non_Blocking_Socket;\n \n-   --------------\n-   -- Set_Port --\n-   --------------\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short)\n-   is\n-   begin\n-      Sin.Sin_Port   := Port;\n-   end Set_Port;\n-\n    --------------------\n    -- Signalling_Fds --\n    --------------------"}, {"sha": "01e4d817be3727ca86db78ddebe526b363374cf2", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 4, "deletions": 218, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,11 +37,10 @@\n \n --  This is the default version\n \n-with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n with GNAT.OS_Lib;\n-with GNAT.Sockets.Constants;\n+with GNAT.Sockets.Thin_Common;\n \n with System;\n \n@@ -51,13 +50,9 @@ package GNAT.Sockets.Thin is\n    --  standard interface. It will be used as a default for all the platforms\n    --  that do not have a specific version of this file.\n \n-   package C renames Interfaces.C;\n-\n-   use type C.int;\n-   --  This is so we can declare the Failure constant below\n+   use Thin_Common;\n \n-   Success : constant C.int :=  0;\n-   Failure : constant C.int := -1;\n+   package C renames Interfaces.C;\n \n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n@@ -79,158 +74,6 @@ package GNAT.Sockets.Thin is\n \n    end Host_Error_Messages;\n \n-   subtype Fd_Set_Access is System.Address;\n-   No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n-\n-   type time_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_sec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_sec - 1) - 1;\n-   for time_t'Size use 8 * Constants.SIZEOF_tv_sec;\n-   pragma Convention (C, time_t);\n-\n-   type suseconds_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_usec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_usec - 1) - 1;\n-   for suseconds_t'Size use 8 * Constants.SIZEOF_tv_usec;\n-   pragma Convention (C, suseconds_t);\n-\n-   type Timeval is record\n-      Tv_Sec  : time_t;\n-      Tv_Usec : suseconds_t;\n-   end record;\n-   pragma Convention (C, Timeval);\n-\n-   type Timeval_Access is access all Timeval;\n-   pragma Convention (C, Timeval_Access);\n-\n-   Immediat : constant Timeval := (0, 0);\n-\n-   type Int_Access is access all C.int;\n-   pragma Convention (C, Int_Access);\n-   --  Access to C integers\n-\n-   type Chars_Ptr_Array is array (C.size_t range <>) of\n-     aliased C.Strings.chars_ptr;\n-\n-   package Chars_Ptr_Pointers is\n-      new C.Pointers (C.size_t, C.Strings.chars_ptr, Chars_Ptr_Array,\n-                      C.Strings.Null_Ptr);\n-   --  Arrays of C (char *)\n-\n-   type In_Addr is record\n-      S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n-   end record;\n-   for In_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In_Addr);\n-   --  IPv4 address, represented as a network-order C.int. Note that the\n-   --  underlying operating system may assume that values of this type have\n-   --  C.int alignment, so we need to provide a suitable alignment clause here.\n-\n-   type In_Addr_Access is access all In_Addr;\n-   pragma Convention (C, In_Addr_Access);\n-   --  Access to internet address\n-\n-   Inaddr_Any : aliased constant In_Addr := (others => 0);\n-   --  Any internet address (all the interfaces)\n-\n-   type In_Addr_Access_Array is array (C.size_t range <>)\n-     of aliased In_Addr_Access;\n-   pragma Convention (C, In_Addr_Access_Array);\n-\n-   package In_Addr_Access_Pointers is\n-     new C.Pointers (C.size_t, In_Addr_Access, In_Addr_Access_Array, null);\n-   --  Array of internet addresses\n-\n-   type Sockaddr is record\n-      Sa_Family : C.unsigned_short;\n-      Sa_Data   : C.char_array (1 .. 14);\n-   end record;\n-   pragma Convention (C, Sockaddr);\n-   --  Socket address\n-\n-   type Sockaddr_Access is access all Sockaddr;\n-   pragma Convention (C, Sockaddr_Access);\n-   --  Access to socket address\n-\n-   type Sockaddr_In is record\n-      Sin_Family : C.unsigned_short      := Constants.AF_INET;\n-      Sin_Port   : C.unsigned_short      := 0;\n-      Sin_Addr   : In_Addr               := Inaddr_Any;\n-      Sin_Zero   : C.char_array (1 .. 8) := (others => C.char'Val (0));\n-   end record;\n-   pragma Convention (C, Sockaddr_In);\n-   --  Internet socket address\n-\n-   type Sockaddr_In_Access is access all Sockaddr_In;\n-   pragma Convention (C, Sockaddr_In_Access);\n-   --  Access to internet socket address\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int);\n-   pragma Inline (Set_Length);\n-   --  Set Sin.Sin_Length to Len.\n-   --  On this platform, nothing is done as there is no such field.\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int);\n-   pragma Inline (Set_Family);\n-   --  Set Sin.Sin_Family to Family\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short);\n-   pragma Inline (Set_Port);\n-   --  Set Sin.Sin_Port to Port\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr);\n-   pragma Inline (Set_Address);\n-   --  Set Sin.Sin_Addr to Address\n-\n-   type Hostent is record\n-      H_Name      : C.Strings.chars_ptr;\n-      H_Aliases   : Chars_Ptr_Pointers.Pointer;\n-      H_Addrtype  : C.int;\n-      H_Length    : C.int;\n-      H_Addr_List : In_Addr_Access_Pointers.Pointer;\n-   end record;\n-   pragma Convention (C, Hostent);\n-   --  Host entry\n-\n-   type Hostent_Access is access all Hostent;\n-   pragma Convention (C, Hostent_Access);\n-   --  Access to host entry\n-\n-   type Servent is record\n-      S_Name    : C.Strings.chars_ptr;\n-      S_Aliases : Chars_Ptr_Pointers.Pointer;\n-      S_Port    : C.int;\n-      S_Proto   : C.Strings.chars_ptr;\n-   end record;\n-   pragma Convention (C, Servent);\n-   --  Service entry\n-\n-   type Servent_Access is access all Servent;\n-   pragma Convention (C, Servent_Access);\n-   --  Access to service entry\n-\n-   type Two_Ints is array (0 .. 1) of C.int;\n-   pragma Convention (C, Two_Ints);\n-   --  Container for two int values\n-\n-   subtype Fd_Pair is Two_Ints;\n-   --  Two_Ints as used for Create_Signalling_Fds: a pair of connected file\n-   --  descriptors, one of which (the \"read end\" of the connection) being used\n-   --  for reading, the other one (the \"write end\") being used for writing.\n-\n-   Read_End  : constant := 0;\n-   Write_End : constant := 1;\n-   --  Indices into an Fd_Pair value providing access to each of the connected\n-   --  file descriptors.\n-\n    --------------------------------\n    -- Standard library functions --\n    --------------------------------\n@@ -380,55 +223,6 @@ package GNAT.Sockets.Thin is\n \n    end Signalling_Fds;\n \n-   ----------------------------\n-   -- Socket sets management --\n-   ----------------------------\n-\n-   procedure Free_Socket_Set\n-     (Set : Fd_Set_Access);\n-   --  Free system-dependent socket set\n-\n-   procedure Get_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : Int_Access;\n-      Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket set. The\n-   --  parameter Last is a maximum value of the largest socket. This hint is\n-   --  used to avoid scanning very large socket sets. After a call to\n-   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n-   --  socket set.\n-\n-   procedure Insert_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Insert socket in the socket set\n-\n-   function  Is_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int) return C.int;\n-   --  Check whether Socket is in the socket set, return a non-zero\n-   --  value if it is, zero if it is not.\n-\n-   procedure Last_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Last   : Int_Access);\n-   --  Find the largest socket in the socket set. This is needed for select().\n-   --  When Last_Socket_In_Set is called, parameter Last is a maximum value of\n-   --  the largest socket. This hint is used to avoid scanning very large\n-   --  socket sets. After the call, Last is set back to the real largest socket\n-   --  in the socket set.\n-\n-   function  New_Socket_Set\n-     (Set : Fd_Set_Access) return Fd_Set_Access;\n-   --  Allocate a new socket set which is a system-dependent structure and\n-   --  initialize by copying Set if it is non-null, by making it empty\n-   --  otherwise.\n-\n-   procedure Remove_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Remove socket from the socket set\n-\n    -------------------------------------------\n    -- Nonreentrant network databases access --\n    -------------------------------------------\n@@ -473,14 +267,6 @@ private\n    pragma Import (C, C_System, \"system\");\n    pragma Import (C, C_Writev, \"writev\");\n \n-   pragma Import (C, Free_Socket_Set, \"__gnat_free_socket_set\");\n-   pragma Import (C, Get_Socket_From_Set, \"__gnat_get_socket_from_set\");\n-   pragma Import (C, Is_Socket_In_Set, \"__gnat_is_socket_in_set\");\n-   pragma Import (C, Last_Socket_In_Set, \"__gnat_last_socket_in_set\");\n-   pragma Import (C, New_Socket_Set, \"__gnat_new_socket_set\");\n-   pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n-   pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n-\n    pragma Import (C, Nonreentrant_Gethostbyname, \"gethostbyname\");\n    pragma Import (C, Nonreentrant_Gethostbyaddr, \"gethostbyaddr\");\n    pragma Import (C, Nonreentrant_Getservbyname, \"getservbyname\");"}, {"sha": "44bf2d8056ebd6f91b9f07d921918bee9975e23b", "filename": "gcc/ada/g-stsifd-sockets.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-stsifd-sockets.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-stsifd-sockets.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-stsifd-sockets.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2007, AdaCore                     --\n+--                     Copyright (C) 2001-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,15 +90,14 @@ package body Signalling_Fds is\n \n          --  Bind the socket to an available port on localhost\n \n-         Len := Sin'Size / 8;\n-         Set_Length (Sin'Unchecked_Access, Len);\n-         Sin.Sin_Family    := Constants.AF_INET;\n+         Set_Family (Sin.Sin_Family, Family_Inet);\n          Sin.Sin_Addr.S_B1 := 127;\n          Sin.Sin_Addr.S_B2 := 0;\n          Sin.Sin_Addr.S_B3 := 0;\n          Sin.Sin_Addr.S_B4 := 1;\n          Sin.Sin_Port      := 0;\n \n+         Len := C.int (Lengths (Family_Inet));\n          Res := C_Bind (L_Sock, Sin'Address, Len);\n \n          if Res = Failure then\n@@ -143,7 +142,7 @@ package body Signalling_Fds is\n          --  marked \"in use\", even though it has been closed (perhaps by some\n          --  other process that has already exited). This causes the above\n          --  C_Connect to fail with EADDRINUSE. In this case, we close the\n-         --  ports, and loop back to try again. This mysterious windows\n+         --  ports, and loop back to try again. This mysterious Windows\n          --  behavior is documented. See, for example:\n          --    http://msdn2.microsoft.com/en-us/library/ms737625.aspx\n          --  In an experiment with 2000 calls, 21 required exactly one retry, 7\n@@ -186,7 +185,7 @@ package body Signalling_Fds is\n \n       Fds.all := (Read_End => R_Sock, Write_End => W_Sock);\n \n-      return Success;\n+      return Thin_Common.Success;\n \n    <<Fail>>\n       declare"}, {"sha": "7f14255e47d34aa1d5d9e626c2f283ac0f00627a", "filename": "gcc/ada/g-sttsne-vxworks.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-sttsne-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fg-sttsne-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-vxworks.adb?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2007, AdaCore                          --\n+--                  Copyright (C) 2007-2008, AdaCore                        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,9 @@\n --  This version is used on VxWorks. Note that the corresponding spec is in\n --  g-sttsne-locking.ads.\n \n+with Ada.Unchecked_Conversion;\n with Interfaces.C; use Interfaces.C;\n+with GNAT.Sockets.Constants;\n \n package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n "}, {"sha": "62629651384862e6b4b82cea2945f4671b3c9c37", "filename": "gcc/ada/gen-soccon.c", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fgen-soccon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fgen-soccon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen-soccon.c?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -51,16 +51,19 @@\n \n #include \"gsocket.h\"\n \n+typedef enum { NUM, TXT } kind_t;\n+\n struct line {\n   char *text;\n   char *value;\n   char *comment;\n+  kind_t kind;\n   struct line *next;\n };\n \n struct line *first = NULL, *last = NULL;\n \n-#define TXT(_text) add_line(_text, NULL, NULL);\n+#define TXT(_text) add_line(_text, NULL, NULL, TXT);\n /* Plain text */\n \n #define _NL TXT(\"\")\n@@ -69,13 +72,13 @@ struct line *first = NULL, *last = NULL;\n #define itoad(n) f_itoa (\"%d\", (n))\n #define itoax(n) f_itoa (\"16#%08x#\", (n))\n \n-#define CND(name,comment) add_line(#name, itoad (name), comment);\n+#define CND(name,comment) add_line(#name, itoad (name), comment, NUM);\n /* Constant (decimal) */\n \n-#define CNX(name,comment) add_line(#name, itoax (name), comment);\n+#define CNX(name,comment) add_line(#name, itoax (name), comment, NUM);\n /* Constant (hexadecimal) */\n \n-#define CN_(name,comment) add_line(#name, name, comment);\n+#define CN_(name,comment) add_line(#name, name, comment, TXT);\n /* Constant (generic) */\n \n #define STR(p) STR1(p)\n@@ -87,7 +90,7 @@ void output (void);\n char *f_itoa (char *, int);\n /* int to string */\n \n-void add_line (char *, char*, char*);\n+void add_line (char *, char*, char*, kind_t);\n \n #ifdef __MINGW32__\n unsigned int _CRT_fmode = _O_BINARY;\n@@ -137,6 +140,7 @@ TXT(\"--  This is the version for \" TARGET)\n TXT(\"--  This file is generated automatically, do not modify it by hand! Instead,\")\n TXT(\"--  make changes to gen-soccon.c and re-run it on each target.\")\n _NL\n+TXT(\"with Interfaces.C;\")\n TXT(\"package GNAT.Sockets.Constants is\")\n _NL\n TXT(\"   --------------\")\n@@ -145,12 +149,14 @@ TXT(\"   --------------\")\n _NL\n \n #ifndef AF_INET\n-#define AF_INET -1\n+# define AF_INET -1\n #endif\n CND(AF_INET, \"IPv4 address family\")\n \n #ifndef AF_INET6\n-#define AF_INET6 -1\n+# define AF_INET6 -1\n+#else\n+# define HAVE_AF_INET6 1\n #endif\n CND(AF_INET6, \"IPv6 address family\")\n _NL\n@@ -604,14 +610,45 @@ CND(SIZEOF_tv_sec, \"tv_sec\")\n #define SIZEOF_tv_usec (sizeof tv.tv_usec)\n CND(SIZEOF_tv_usec, \"tv_usec\")\n }\n-\n+_NL\n+TXT(\"   --  Sizes of protocol specific address types (for sockaddr.sa_len)\")\n+_NL\n+#define SIZEOF_sockaddr_in (sizeof (struct sockaddr_in))\n+CND(SIZEOF_sockaddr_in, \"struct sockaddr_in\")\n+#ifdef HAVE_AF_INET6\n+# define SIZEOF_sockaddr_in6 (sizeof (struct sockaddr_in6))\n+#else\n+# define SIZEOF_sockaddr_in6 0\n+#endif\n+CND(SIZEOF_sockaddr_in6, \"struct sockaddr_in6\")\n+_NL\n+TXT(\"   --  Size of file descriptor sets\")\n+_NL\n+#define SIZEOF_fd_set (sizeof (fd_set))\n+CND(SIZEOF_fd_set, \"fd_set\");\n+_NL\n+TXT(\"   --  Fields of struct hostent\")\n+_NL\n+#ifdef __MINGW32__\n+# define h_addrtype_t \"short\"\n+# define h_length_t   \"short\"\n+#else\n+# define h_addrtype_t \"int\"\n+# define h_length_t   \"int\"\n+#endif\n+TXT(\"   subtype H_Addrtype_T is Interfaces.C.\" h_addrtype_t \";\")\n+TXT(\"   subtype H_Length_T   is Interfaces.C.\" h_length_t \";\")\n _NL\n TXT(\"   ----------------------------------------\")\n TXT(\"   -- Properties of supported interfaces --\")\n TXT(\"   ----------------------------------------\")\n _NL\n \n CND(Need_Netdb_Buffer, \"Need buffer for Netdb ops\")\n+CND(Has_Sockaddr_Len,  \"Sockaddr has sa_len field\")\n+_NL\n+TXT(\"   Thread_Blocking_IO : constant Boolean := True;\")\n+TXT(\"   --  Set False for contexts where socket i/o are process blocking\")\n \n #ifdef __vxworks\n _NL\n@@ -641,17 +678,8 @@ CND(WSASYSNOTREADY,     \"System not ready\")\n CND(WSAVERNOTSUPPORTED, \"Version not supported\")\n CND(WSANOTINITIALISED,  \"Winsock not initialized\")\n CND(WSAEDISCON,         \"Disconnected\")\n-\n #endif\n \n-_NL\n-TXT(\"   ----------------------\")\n-TXT(\"   -- Additional flags --\")\n-TXT(\"   ----------------------\")\n-_NL\n-TXT(\"   Thread_Blocking_IO : constant Boolean := True;\")\n-TXT(\"   --  Set False for contexts where socket i/o are process blocking\")\n-\n _NL\n TXT(\"end GNAT.Sockets.Constants;\")\n \n@@ -672,7 +700,8 @@ output (void) {\n   for (p = first; p != NULL; p = p->next) {\n     if (p->value != NULL) {\n       UPD_MAX(text);\n-      UPD_MAX(value);\n+      if (p->kind == NUM)\n+        UPD_MAX(value);\n     }\n   }\n   sprintf (fmt, \"   %%-%ds : constant := %%%ds;%%s%%s\\n\",\n@@ -700,13 +729,15 @@ f_itoa (char *fmt, int n) {\n }\n \n void\n-add_line (char *_text, char *_value, char *_comment) {\n+add_line (char *_text, char *_value, char *_comment, kind_t _kind) {\n   struct line *l = (struct line *) malloc (sizeof (struct line));\n \n-  l->text = _text;\n-  l->value = _value;\n+  l->text    = _text;\n+  l->value   = _value;\n   l->comment = _comment;\n-  l->next = NULL;\n+  l->kind    = _kind;\n+  l->next    = NULL;\n+\n   if (last == NULL)\n     first = last = l;\n   else {"}, {"sha": "8b8c83808b6a6c95a595ea7d7891181441acfedd", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f983388f047887129979657d9d98b2185a5c90ca/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=f983388f047887129979657d9d98b2185a5c90ca", "patch": "@@ -184,3 +184,9 @@\n #else\n # define Need_Netdb_Buffer 0\n #endif\n+\n+#if defined (__FreeBSD__) || defined (__vxworks)\n+# define Has_Sockaddr_Len 1\n+#else\n+# define Has_Sockaddr_Len 0\n+#endif"}]}