{"sha": "7114ab45797aeeca8ef7ca25b215319d551a2b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNGFiNDU3OTdhZWVjYThlZjdjYTI1YjIxNTMxOWQ1NTFhMmIxYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-07-06T19:48:58Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-07-06T19:48:58Z"}, "message": "PR fortran/PR44693\n\n2010-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/PR44693\n\t* check.c (dim_rank_check):  Also check intrinsic functions.\n\tAdjust permissible rank for functions which reduce the rank of\n\ttheir argument.  Spread is an exception, where DIM can\n\tbe one larger than the rank of array.\n\n2010-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\tPR fortran/PR44693\n\t* gfortran.dg/dim_range_1.f90:  New test.\n\t* gfortran.dg/minmaxloc_4.f90:  Remove invalid test.\n\nFrom-SVN: r161884", "tree": {"sha": "43b2eca03385acce1e46e5f7bb4b98b29b0018fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b2eca03385acce1e46e5f7bb4b98b29b0018fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7114ab45797aeeca8ef7ca25b215319d551a2b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114ab45797aeeca8ef7ca25b215319d551a2b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7114ab45797aeeca8ef7ca25b215319d551a2b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114ab45797aeeca8ef7ca25b215319d551a2b1c/comments", "author": null, "committer": null, "parents": [{"sha": "0060a10ae887561aef22299f92098d04aee1cf14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0060a10ae887561aef22299f92098d04aee1cf14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0060a10ae887561aef22299f92098d04aee1cf14"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "0d43b6c63e6c0bc0e05f6fcb84745aa5faf1d346", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7114ab45797aeeca8ef7ca25b215319d551a2b1c", "patch": "@@ -1,3 +1,11 @@\n+2010-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/PR44693\n+\t* check.c (dim_rank_check):  Also check intrinsic functions.\n+\tAdjust permissible rank for functions which reduce the rank of\n+\ttheir argument.  Spread is an exception, where DIM can\n+\tbe one larger than the rank of array.\n+\n 2010-07-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/44797"}, {"sha": "27bd900f9e3ed52c9c6bc9344eea5e7d1e7ac5b2", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7114ab45797aeeca8ef7ca25b215319d551a2b1c", "patch": "@@ -473,12 +473,15 @@ dim_rank_check (gfc_expr *dim, gfc_expr *array, int allow_assumed)\n   if (dim == NULL)\n     return SUCCESS;\n \n-  if (dim->expr_type != EXPR_CONSTANT\n-      || (array->expr_type != EXPR_VARIABLE\n-\t  && array->expr_type != EXPR_ARRAY))\n+  if (dim->expr_type != EXPR_CONSTANT)\n     return SUCCESS;\n \n-  rank = array->rank;\n+  if (array->expr_type == EXPR_FUNCTION && array->value.function.isym\n+      && array->value.function.isym->id == GFC_ISYM_SPREAD)\n+    rank = array->rank + 1;\n+  else\n+    rank = array->rank;\n+\n   if (array->expr_type == EXPR_VARIABLE)\n     {\n       ar = gfc_find_array_ref (array);"}, {"sha": "80822314516fcf6485b2dd2f4663f05fb6c5e840", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7114ab45797aeeca8ef7ca25b215319d551a2b1c", "patch": "@@ -1,3 +1,8 @@\n+2010-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\tPR fortran/PR44693\n+\t* gfortran.dg/dim_range_1.f90:  New test.\n+\t* gfortran.dg/minmaxloc_4.f90:  Remove invalid test.\n+\n 2010-07-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44703"}, {"sha": "59f3f431143e331762c209774698d4617afb75d1", "filename": "gcc/testsuite/gfortran.dg/dim_range_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_range_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_range_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_range_1.f90?ref=7114ab45797aeeca8ef7ca25b215319d551a2b1c", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! PR 44693 - check for invalid dim even in functions.\n+! Based on a test case by Dominique d'Humieres.\n+subroutine test1(esss,Ix,Iyz, n)\n+  real(kind=kind(1.0d0)), dimension(n), intent(out) :: esss\n+  real(kind=kind(1.0d0)), dimension(n,n,n) :: sp\n+  real(kind=kind(1.0d0)), dimension(n,n) :: Ix,Iyz\n+  esss = sum(Ix * Iyz, 0) ! { dg-error \"is not a valid dimension index\" }\n+  esss = sum(Ix * Iyz, 1)\n+  esss = sum(Ix * Iyz, 2)\n+  esss = sum(Ix * Iyz, 3) ! { dg-error \"is not a valid dimension index\" }\n+  sp = spread (ix * iyz, 0, n) ! { dg-error \"is not a valid dimension index\" }\n+  sp = spread (ix * iyz, 1, n)\n+  sp = spread (ix * iyz, 2, n)\n+  sp = spread (ix * iyz, 3, n)\n+  sp = spread (ix * iyz, 4, n) ! { dg-error \"is not a valid dimension index\" }\n+end subroutine"}, {"sha": "673739518dcbb695fc7c98a1126d4110b6e34d24", "filename": "gcc/testsuite/gfortran.dg/minmaxloc_4.f90", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114ab45797aeeca8ef7ca25b215319d551a2b1c/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_4.f90?ref=7114ab45797aeeca8ef7ca25b215319d551a2b1c", "patch": "@@ -3,7 +3,6 @@\n PROGRAM TST\n   IMPLICIT NONE\n   REAL :: A(1,3)\n-  REAL :: B(3,1)\n   A(:,1) = 10\n   A(:,2) = 20\n   A(:,3) = 30\n@@ -13,9 +12,4 @@ PROGRAM TST\n   if (minloc(sum(a(:,1:3),1),1) .ne. 1) call abort()\n   if (maxloc(sum(a(:,1:3),1),1) .ne. 3) call abort()\n \n-  B(1,:) = 10\n-  B(2,:) = 20\n-  B(3,:) = 30\n-  if (minloc(sum(b(1:3,:),2),2) .ne. 1) call abort()\n-  if (maxloc(sum(b(1:3,:),2),2) .ne. 3) call abort()\n END PROGRAM TST"}]}